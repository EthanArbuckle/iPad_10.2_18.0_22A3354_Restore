void JSC::MacroAssemblerARM64::farJump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19813B360);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v9, v10, v11, v12, v13, v14, v15);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = -702610944;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::DirectCallLinkInfo::repatchSpeculatively(JSC::DirectCallLinkInfo *this, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DirectCallLinkInfo *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void **v21;
  void **v22;

  v8 = this;
  v9 = *((_QWORD *)this + 12);
  v10 = *(unsigned __int8 *)(v9 + 5);
  if (v10 == 12)
  {
    v11 = 96;
    if ((*((_BYTE *)this + 17) & 0xF) == 8)
      v11 = 104;
    v12 = *(_QWORD *)(v9 + v11);
    if (!v12)
      goto LABEL_31;
    v13 = *((_QWORD *)this + 11);
    v14 = v13 && *(_BYTE *)(v13 + 5) == 18;
    if (!v14 || *(_QWORD *)(v13 + 192) == v12)
      goto LABEL_31;
    v15 = (unsigned __int8 *)(v12 + 16);
    if (__ldaxr((unsigned __int8 *)(v12 + 16)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v15))
    {
LABEL_14:
      v17 = *(_QWORD *)(v12 + 120);
      if (v17)
        v18 = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v17 + 40))(v17, *((_DWORD *)v8 + 5) < *(_DWORD *)(v12 + 28));
      else
        v18 = 0;
      v19 = __ldxr(v15);
      if (v19 == 1)
      {
        if (!__stlxr(0, v15))
        {
LABEL_21:
          if (v18)
          {
            *((_QWORD *)v8 + 3) = v18;
            *((_QWORD *)v8 + 4) = v12;
            this = v8;
            v20 = v12;
            a3 = (void *)v18;
LABEL_23:
            JSC::DirectCallLinkInfo::setCallTarget((uint64_t)this, v20, (unint64_t)a3);
            return;
          }
          goto LABEL_31;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_21;
    }
    WTF::Lock::lockSlow((WTF::Lock *)(v12 + 16));
    goto LABEL_14;
  }
  if (v10 == 8)
  {
    v21 = (void **)(v9 + 32);
    v22 = (void **)(v9 + 24);
    if ((*((_BYTE *)this + 17) & 0xF) == 8)
      v22 = v21;
    a3 = *v22;
    if (*v22)
    {
      v20 = 0;
      goto LABEL_23;
    }
  }
LABEL_31:
  JSC::DirectCallLinkInfo::initialize(v8, a2, a3);
}

uint64_t JSC::DirectCallLinkInfo::validateSpeculativeRepatchOnMainThread(uint64_t this, JSC::VM *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(this + 96);
  if (v2)
    v3 = *(_BYTE *)(v2 + 5) == 12;
  else
    v3 = 0;
  if (!v3)
    return this;
  v4 = this;
  v5 = 96;
  if ((*(_BYTE *)(this + 17) & 0xF) == 8)
    v5 = 104;
  v6 = *(_QWORD *)(v2 + v5);
  if (!v6)
  {
LABEL_20:
    v8 = 0;
    v7 = 0;
    v10 = 0;
    goto LABEL_15;
  }
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(this + 88);
  if (v9)
  {
    v10 = 0;
    if (*(_BYTE *)(v9 + 5) != 18)
      goto LABEL_15;
    if (*(_QWORD *)(v9 + 192) != v6)
    {
      v11 = *(_QWORD *)(v6 + 120);
      if (v11)
        v10 = (void *)(*(uint64_t (**)(uint64_t, BOOL, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_DWORD *)(v4 + 20) < *(_DWORD *)(v6 + 28), 0);
      else
        v10 = 0;
      v8 = 1;
      v7 = v6;
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  v10 = 0;
LABEL_15:
  if (*(_QWORD *)(v4 + 32) != v7 || *(void **)(v4 + 24) != v10)
  {
    if (!v10)
      v8 = 0;
    if (v8 == 1)
      JSC::DirectCallLinkInfo::setCallTarget(v4, v7, (unint64_t)v10);
    else
      JSC::DirectCallLinkInfo::reset((JSC::DirectCallLinkInfo *)v4, v7, v10);
  }
  this = *(_QWORD *)(v4 + 32);
  if (this)
    return JSC::CodeBlock::linkIncomingCall(this, *(JSC::JSCell **)(v4 + 88), (JSC::CallLinkInfoBase *)v4);
  return this;
}

unsigned int *JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::UnlinkedCodeBlockGenerator,JSC::InstructionStreamWriter<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>(unsigned int *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v9;
  unsigned int v10;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  char v24;
  unint64_t v25;
  JSC::OpEnumeratorHasOwnProperty *v26;
  unsigned int v27;
  int8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  void **v49;
  BOOL v50;
  unsigned int *v51;
  char v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  int v56;
  int v57;
  _QWORD *v58;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  void **v63;
  void **v64;
  uint64_t (*v65)(uint64_t, int);
  uint64_t (**v66)(uint64_t, int);
  void ***v67;

  v9 = (_QWORD *)a6;
  v10 = a5;
  v13 = result;
  v61 = 0;
  v62 = 0;
  v14 = *(_QWORD *)(a4 + 72);
  if ((unint64_t)(v14 + 31) < 0x20)
  {
    v15 = 0;
  }
  else
  {
    v15 = (char *)WTF::fastMalloc((WTF *)(((unint64_t)(v14 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
    result = (unsigned int *)memcpy(v15, *(const void **)(a4 + 64), ((unint64_t)(*(_QWORD *)(a4 + 72) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v14 = *(_QWORD *)(a4 + 72);
    v61 = v15;
  }
  v62 = v14;
  v16 = *(unsigned int *)(a4 + 28);
  if (!(_DWORD)v16)
  {
LABEL_46:
    v52 = 0;
    v53 = (unint64_t)(v9[1] + 31) >> 5;
    if ((_DWORD)v53)
    {
      v54 = &v15[4 * (v53 - 1)];
      v55 = (_DWORD *)(*v9 + 4 * (v53 - 1));
      do
      {
        v56 = *(_DWORD *)v54;
        v54 -= 4;
        v52 |= *v55 != v56;
        *v55-- = v56;
        LODWORD(v53) = v53 - 1;
      }
      while ((_DWORD)v53);
    }
    else if (!v15)
    {
      return (unsigned int *)(v53 & 1);
    }
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    LOBYTE(v53) = v52;
    return (unsigned int *)(v53 & 1);
  }
  v58 = v9;
  v60 = v10 >> 2;
  v17 = *(_DWORD *)(a4 + 4);
  while (--v16 < (unint64_t)*(unsigned int *)(a4 + 28))
  {
    v17 -= *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v16);
    v18 = v17 + *(_DWORD *)a4;
    if (v60 > (v18 & 0x3FFFFFFFu))
      goto LABEL_45;
    v19 = (4 * v18);
    v20 = (unsigned __int8 *)(*a2 + (v19 >> 2));
    v21 = *v20;
    v22 = v21;
    if ((v21 | 2) == 0x82)
      v22 = v20[1];
    if (v22 > 4)
    {
      LOBYTE(v23) = 1;
LABEL_11:
      v24 = v23;
      do
      {
        v25 = --v24 | v19;
        v63 = (void **)&v61;
        v64 = (void **)&v61;
        v26 = (JSC::OpEnumeratorHasOwnProperty *)(*a2 + (v25 >> 2));
        v27 = *(_DWORD *)(**((_QWORD **)v13 + 1) + 16) & 0x7FFFFFFF;
        v65 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::UnlinkedCodeBlockGenerator,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#2}>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#2} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
        v66 = &v65;
        v67 = &v63;
        JSC::computeDefsForBytecodeIndexImpl(v27, v26, v24 & 3, (uint64_t)&v65, a9);
        v29 = v13[49];
        if ((_DWORD)v29)
        {
          v30 = v25 >> 2;
          v31 = (unsigned int *)(*((_QWORD *)v13 + 23) + 8);
          v32 = 16 * v29;
          while (*(v31 - 2) > v30 || *(v31 - 1) <= v30)
          {
            v31 += 4;
            v32 -= 16;
            if (!v32)
              goto LABEL_17;
          }
          v36 = *v31;
          v37 = *(unsigned int *)(a3 + 12);
          v38 = *(_QWORD *)a3;
          if (v37 < 2)
          {
            v39 = 0;
LABEL_42:
            v51 = (unsigned int *)(v38 + 80 * v39);
            if (*v51 == v36)
              v41 = v51;
            else
              v41 = 0;
          }
          else
          {
            v39 = 0;
            while (1)
            {
              v40 = v37 - 1;
              v41 = (unsigned int *)(v38 + 80 * (v39 + ((v37 - 1) >> 1)));
              if (*v41 == v36)
                break;
              v37 -= (v40 >> 1) + 1;
              if (*v41 <= v36)
              {
                v42 = (v40 >> 1) + 1;
              }
              else
              {
                v37 = v40 >> 1;
                v42 = 0;
              }
              v39 += v42;
              if (v37 <= 1)
                goto LABEL_42;
            }
          }
          v43 = *((_QWORD *)v41 + 7) + 31;
          if (v43 >= 0x20)
          {
            v44 = 0;
            v45 = v43 >> 5;
            v46 = *((_QWORD *)v41 + 6);
            do
            {
              v47 = *(_DWORD *)(v46 + 4 * v44);
              if (v47)
              {
                v48 = 32 * v44;
                v49 = v64;
                do
                {
                  if ((v47 & 1) != 0)
                    *((_DWORD *)*v49 + (v48 >> 5)) |= 1 << v48;
                  ++v48;
                  v50 = v47 > 1;
                  v47 >>= 1;
                }
                while (v50);
              }
              ++v44;
            }
            while (v44 != v45);
          }
        }
LABEL_17:
        v33 = (unsigned __int8 *)(*a2 + (v25 >> 2));
        v34 = *v33;
        if ((v34 | 2) == 0x82)
          v34 = v33[1];
        if (v34 != 131)
        {
          v35 = **((_QWORD **)v13 + 1);
          if ((*(_BYTE *)(v35 + 43) & 1) != 0)
          {
            v57 = *(_DWORD *)(v35 + 12);
            if (v57 < 0)
              *((_DWORD *)*v64 + (~v57 >> 5)) |= 1 << ~(_BYTE)v57;
          }
        }
        v65 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::UnlinkedCodeBlockGenerator,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#1}>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#1} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
        v66 = &v65;
        v67 = &v64;
        result = (unsigned int *)JSC::computeUsesForBytecodeIndexImpl(v33, (const unsigned __int8 *)(v24 & 3), (uint64_t)&v65, v28);
      }
      while (v24);
      goto LABEL_40;
    }
    if ((v21 | 2) == 0x82)
      v21 = v20[1];
    v23 = bytecodeCheckpointCountTable[v21];
    if ((_BYTE)v23)
      goto LABEL_11;
LABEL_40:
    if (!v16)
    {
LABEL_45:
      v15 = v61;
      v9 = v58;
      goto LABEL_46;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::UnlinkedCodeBlockGenerator,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#2}>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#2} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) &= ~(1 << ~(_BYTE)a2);
  return result;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::UnlinkedCodeBlockGenerator,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#1}>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::UnlinkedCodeBlockGenerator>(JSC::UnlinkedCodeBlockGenerator *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#1} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) |= 1 << ~(_BYTE)a2;
  return result;
}

unint64_t WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<JSC::UnlinkedSimpleJumpTable,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 28))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = v9;
      v18 = v7 + 16 * v8;
      v19 = v7;
      do
      {
        v20 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)v17 = v20;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)(v19 + 8);
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
          WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
        v19 += 16;
        v17 += 16;
      }
      while (v19 != v18);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::BytecodeGeneratorification::BytecodeGeneratorification(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int32x4_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  char v33;
  _BOOL4 v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  int16x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int v65;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  int16x4_t v71;
  int32x4_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  int32x4_t v79;
  unsigned int v80;
  int v81;
  unint64_t v82;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::UnlinkedCodeBlockGenerator>((uint64_t)a3, a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v17 = *a3;
  v18 = *(_QWORD *)(v17 + 712);
  if (!v18)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v17 + 672), v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_QWORD *)(v17 + 712);
  }
  *(_QWORD *)(v17 + 712) = *(_QWORD *)v18;
  *(_QWORD *)(v18 + 16) = 0;
  v19 = (_QWORD *)(v18 + 16);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(a1 + 104) = v18 + 16;
  if ((a5 != 0) != (*(_QWORD *)(v18 + 16) != 0))
  {
    if (a5)
    {
      v20 = *(unint64_t **)((v18 & 0xFFFFFFFFFFFFF000) + 0x10);
      v21 = v20[3];
      v20 += 3;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 8) = v20;
      *v20 = v18;
      *(_QWORD *)(v21 + 8) = v18;
    }
    else
    {
      v74 = *(_QWORD *)v18;
      v73 = *(_QWORD **)(v18 + 8);
      *v73 = *(_QWORD *)v18;
      *(_QWORD *)(v74 + 8) = v73;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      v19 = *(_QWORD **)(a1 + 104);
    }
  }
  *v19 = a5;
  *(_DWORD *)(a1 + 112) = a6;
  v22 = *(uint64_t **)(a1 + 48);
  v23 = *((_DWORD *)v22 + 3);
  if (v23)
  {
    v24 = 0;
    v25 = *v22;
    v26 = vdupq_n_s32(0x3FFFFFF0u);
    v79 = v26;
    do
    {
      v27 = (unsigned __int8 *)(v25 + v24);
      v28 = *v27;
      v29 = v28;
      if ((v28 | 2) == 0x82)
        v29 = v27[1];
      switch(v29)
      {
        case 120:
          if (v28 == 130)
          {
            v37 = *(unsigned int *)(v27 + 2);
            v39 = *(_DWORD *)(v27 + 6);
          }
          else
          {
            if (v28 == 128)
            {
              v37 = *((unsigned __int16 *)v27 + 1);
              v38 = *((__int16 *)v27 + 2);
              v39 = v38 + 1073741760;
              v40 = v38 <= 63;
            }
            else
            {
              v37 = v27[1];
              v38 = (char)v27[2];
              v39 = v38 + 1073741808;
              v40 = v38 <= 15;
            }
            if (v40)
              v39 = v38;
          }
          v41 = *(unsigned int *)(a1 + 100);
          if (v37 >= v41)
          {
            v81 = v39;
            v82 = v37;
            v80 = v37 + 1;
            v42 = (v37 + 1);
            v43 = *(unsigned int *)(a1 + 96);
            if (v42 > v43)
            {
              v44 = v43 + (v43 >> 2);
              if (v44 >= 0x10)
                v45 = v44 + 1;
              else
                v45 = 16;
              v78 = (v37 + 1);
              if (v45 <= v42)
                v45 = (v37 + 1);
              if (v45 >= 0xAAAAAAB)
              {
LABEL_71:
                __break(0xC471u);
                JUMPOUT(0x19813BFBCLL);
              }
              v46 = *(_QWORD *)(a1 + 88);
              v47 = 24 * v45;
              v48 = WTF::fastMalloc((WTF *)(24 * v45));
              *(_DWORD *)(a1 + 96) = (v47 & 0xFFFFFFF8) / 0x18;
              *(_QWORD *)(a1 + 88) = v48;
              if (v41)
              {
                v75 = (_QWORD *)(v46 + 24 * v41);
                v76 = v46;
                v67 = (unint64_t *)(v48 + 8);
                v49 = (_QWORD *)(v46 + 8);
                do
                {
                  v68 = v49 - 1;
                  *(v67 - 1) = *(v49 - 1);
                  *v67 = 0;
                  v67[1] = 0;
                  v69 = v49[1];
                  v77 = v49;
                  if (v69 + 31 < 0x20)
                    v67[1] = v69;
                  else
                    WTF::FastBitVectorWordOwner::setEqualsSlow(v67, (uint64_t)v49);
                  v70 = v68[1];
                  if (v70)
                    WTF::fastFree(v70, v49, v50, v51, v52, v53, v54, v55);
                  v67 += 3;
                  v46 = v76;
                  v49 = v77 + 3;
                }
                while (v68 + 3 != v75);
              }
              v56 = v46;
              v42 = v78;
              if (v56)
              {
                if (*(_QWORD *)(a1 + 88) == v56)
                {
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_DWORD *)(a1 + 96) = 0;
                }
                WTF::fastFree(v56, v49, v50, v51, v52, v53, v54, v55);
              }
            }
            v57 = *(_QWORD *)(a1 + 88);
            if (v57)
            {
              v58 = *(unsigned int *)(a1 + 100);
              if (v42 != v58)
                bzero((void *)(v57 + 24 * v58), 24 * ((24 * v42 - 24 * (unint64_t)v58 - 24) / 0x18) + 24);
            }
            v41 = v80;
            *(_DWORD *)(a1 + 100) = v80;
            v37 = v82;
            v39 = v81;
          }
          if (v41 <= v37)
            goto LABEL_71;
          v59 = (unsigned int *)(*(_QWORD *)(a1 + 88) + 24 * v37);
          *v59 = v24;
          v59[1] = v39;
          break;
        case 131:
          *(_DWORD *)(a1 + 8) = v24;
          break;
        case 110:
          if (v28 == 130)
          {
            v26 = *(int32x4_t *)(v27 + 2);
          }
          else
          {
            if (v28 == 128)
            {
              v71 = *(int16x4_t *)(v27 + 2);
              v61 = vmovl_s16(v71);
              v72.i64[0] = 0x3F0000003FLL;
              v72.i64[1] = 0x3F0000003FLL;
              v63 = (int8x16_t)vcgtq_s32(v61, v72);
              v64 = (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v71);
            }
            else
            {
              v26.i32[0] = *(_DWORD *)(v27 + 1);
              v60 = (int16x4_t)vmovl_s8(*(int8x8_t *)v26.i8).u64[0];
              v61 = vmovl_s16(v60);
              v62.i64[0] = 0xF0000000FLL;
              v62.i64[1] = 0xF0000000FLL;
              v63 = (int8x16_t)vcgtq_s32(v61, v62);
              v64 = (int8x16_t)vaddw_s16(v79, v60);
            }
            v26 = (int32x4_t)vbslq_s8(v63, v64, (int8x16_t)v61);
          }
          v65 = *(unsigned __int8 *)(a1 + 32);
          *(_DWORD *)(a1 + 12) = v24;
          *(int32x4_t *)(a1 + 16) = v26;
          if (!v65)
            *(_BYTE *)(a1 + 32) = 1;
          break;
      }
      v25 = *v22;
      v30 = (unsigned __int8 *)(*v22 + v24);
      v31 = *v30;
      v32 = v31;
      if ((v31 | 2) == 0x82)
        v32 = v30[1];
      v33 = v31 == 128;
      if (v31 == 130)
        v33 = 2;
      v34 = v31 == 128 || v31 == 130;
      v35 = JSC::opcodeLengths[v32] << v33;
      if (v34)
        v36 = 2;
      else
        v36 = 1;
      v24 += v36 + v35;
    }
    while (v24 != v23);
  }
  return a1;
}

void JSC::BytecodeGeneratorification::~BytecodeGeneratorification(JSC::BytecodeGeneratorification *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v9 = *((_QWORD *)this + 13);
  if (v9)
  {
    v26 = (uint64_t *)(v9 - 16);
    v27 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v28 = *(uint64_t **)(v9 - 8);
    if (v28)
    {
      v29 = *v26;
      *v28 = *v26;
      *(_QWORD *)(v29 + 8) = v28;
      *v26 = 0;
      v26[1] = 0;
    }
    *v26 = *(_QWORD *)(v27 + 40);
    *(_QWORD *)(v27 + 40) = v26;
    *((_QWORD *)this + 13) = 0;
  }
  v10 = *((unsigned int *)this + 25);
  v11 = *((_QWORD *)this + 11);
  if ((_DWORD)v10)
  {
    v12 = 24 * v10;
    v13 = (unint64_t *)(v11 + 8);
    do
    {
      if (*v13)
        WTF::fastFree(*v13, a2, a3, a4, a5, a6, a7, a8);
      v13 += 3;
      v12 -= 24;
    }
    while (v12);
    v11 = *((_QWORD *)this + 11);
  }
  if (v11)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((unsigned int *)this + 21);
  v15 = *((_QWORD *)this + 9);
  if ((_DWORD)v14)
  {
    v16 = 24 * v14;
    do
    {
      if (*(_BYTE *)(v15 + 16))
      {
        v17 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      v15 += 24;
      v16 -= 24;
    }
    while (v16);
    v15 = *((_QWORD *)this + 9);
  }
  if (v15)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = 80 * v9;
    v12 = v10 + 32;
    do
    {
      v13 = *(_QWORD *)(v12 + 32);
      if (v13)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)(v12 + 16);
      if (v14)
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      }
      v16 = *(_QWORD *)(v12 - 16);
      if (v16)
      {
        *(_QWORD *)(v12 - 16) = 0;
        *(_DWORD *)(v12 - 8) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 += 80;
      v11 -= 80;
    }
    while (v11);
    v10 = *(_QWORD *)a1;
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  _QWORD *v9;
  unsigned int v10;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  char v24;
  unint64_t v25;
  JSC::OpEnumeratorHasOwnProperty *v26;
  unsigned int v27;
  int8x8_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  void **v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  int v57;
  int v59;
  _QWORD *v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  void **v65;
  void **v66;
  uint64_t (*v67)(uint64_t, int);
  uint64_t (**v68)(uint64_t, int);
  void ***v69;

  v9 = (_QWORD *)a6;
  v10 = a5;
  v63 = 0;
  v64 = 0;
  v14 = *(_QWORD *)(a4 + 72);
  if ((unint64_t)(v14 + 31) < 0x20)
  {
    v15 = 0;
  }
  else
  {
    v15 = (char *)WTF::fastMalloc((WTF *)(((unint64_t)(v14 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
    memcpy(v15, *(const void **)(a4 + 64), ((unint64_t)(*(_QWORD *)(a4 + 72) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v14 = *(_QWORD *)(a4 + 72);
    v63 = v15;
  }
  v64 = v14;
  v16 = *(_DWORD *)(a4 + 28);
  if (v16)
  {
    v61 = v9;
    v62 = v10 >> 2;
    v17 = *(_DWORD *)(a4 + 4);
    do
    {
      if (*(_DWORD *)(a4 + 28) <= --v16)
        goto LABEL_65;
      v17 -= *(unsigned __int8 *)(*(_QWORD *)(a4 + 16) + v16);
      v18 = v17 + *(_DWORD *)a4;
      if (v62 > (v18 & 0x3FFFFFFFu))
        break;
      v19 = (4 * v18);
      v20 = (unsigned __int8 *)(*a2 + (v19 >> 2));
      v21 = *v20;
      v22 = v21;
      if ((v21 | 2) == 0x82)
        v22 = v20[1];
      if (v22 > 4)
      {
        LOBYTE(v23) = 1;
LABEL_11:
        v24 = v23;
        while (1)
        {
          v25 = --v24 | v19;
          v65 = (void **)&v63;
          v66 = (void **)&v63;
          v26 = (JSC::OpEnumeratorHasOwnProperty *)(*a2 + (v25 >> 2));
          v27 = *(_DWORD *)(a1 + 24);
          v67 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::CodeBlock,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#2}>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#2} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
          v68 = &v67;
          v69 = &v65;
          JSC::computeDefsForBytecodeIndexImpl(v27, v26, v24 & 3, (uint64_t)&v67, a9);
          v29 = v25 >> 2;
          v30 = *(_QWORD *)(a1 + 56);
          if (*(_DWORD *)(*(_QWORD *)(v30 + 80) + 12) <= v25 >> 2)
            break;
          v31 = *(unsigned int **)(a1 + 224);
          if (v31)
          {
            v39 = v31[3];
            if ((_DWORD)v39)
            {
              v40 = (unsigned int *)(*(_QWORD *)v31 + 8);
              v41 = 24 * v39;
              while (*(v40 - 2) > v29 || *(v40 - 1) <= v29)
              {
                v40 += 6;
                v41 -= 24;
                if (!v41)
                  goto LABEL_14;
              }
              v47 = *v40;
              v36 = *(unsigned int *)(a3 + 12);
              v48 = *(_QWORD *)a3;
              if (v36 < 2)
              {
                v38 = 0;
LABEL_43:
                v49 = (unsigned int *)(v48 + 80 * v38);
                if (*v49 == v47)
                  v35 = v49;
                else
                  v35 = 0;
              }
              else
              {
                v38 = 0;
                while (1)
                {
                  v34 = v36 - 1;
                  v35 = (unsigned int *)(v48 + 80 * (v38 + ((v36 - 1) >> 1)));
                  if (*v35 == v47)
                    break;
                  v36 -= (v34 >> 1) + 1;
                  if (*v35 <= v47)
                  {
                    v37 = (v34 >> 1) + 1;
                  }
                  else
                  {
                    v36 = v34 >> 1;
                    v37 = 0;
                  }
                  v38 += v37;
                  if (v36 <= 1)
                    goto LABEL_43;
                }
              }
              v50 = *((_QWORD *)v35 + 7) + 31;
              if (v50 >= 0x20)
              {
                v46 = 0;
                v51 = v50 >> 5;
                v52 = *((_QWORD *)v35 + 6);
                do
                {
                  v42 = *(_DWORD *)(v52 + 4 * v46);
                  if (v42)
                  {
                    v43 = 32 * v46;
                    v44 = v66;
                    do
                    {
                      if ((v42 & 1) != 0)
                        *((_DWORD *)*v44 + (v43 >> 5)) |= 1 << v43;
                      ++v43;
                      v45 = v42 > 1;
                      v42 >>= 1;
                    }
                    while (v45);
                  }
                  ++v46;
                }
                while (v46 != v51);
              }
            }
          }
LABEL_14:
          v32 = (unsigned __int8 *)(*a2 + (v25 >> 2));
          v33 = *v32;
          if ((v33 | 2) == 0x82)
            v33 = v32[1];
          if (v33 != 131 && (*(_BYTE *)(v30 + 43) & 1) != 0)
          {
            v59 = *(_DWORD *)(a1 + 48);
            if (v59 < 0)
              *((_DWORD *)*v66 + (~v59 >> 5)) |= 1 << ~(_BYTE)v59;
          }
          v67 = WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::CodeBlock,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#1}>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda#1} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction;
          v68 = &v67;
          v69 = &v66;
          JSC::computeUsesForBytecodeIndexImpl(v32, (const unsigned __int8 *)(v24 & 3), (uint64_t)&v67, v28);
          if (!v24)
            goto LABEL_39;
        }
LABEL_65:
        __break(0xC471u);
        JUMPOUT(0x19813C570);
      }
      if ((v21 | 2) == 0x82)
        v21 = v20[1];
      v23 = bytecodeCheckpointCountTable[v21];
      if ((_BYTE)v23)
        goto LABEL_11;
LABEL_39:
      ;
    }
    while (v16);
    v15 = v63;
    v9 = v61;
  }
  v53 = 0;
  v54 = (unint64_t)(v9[1] + 31) >> 5;
  if ((_DWORD)v54)
  {
    v55 = &v15[4 * (v54 - 1)];
    v56 = (_DWORD *)(*v9 + 4 * (v54 - 1));
    do
    {
      v57 = *(_DWORD *)v55;
      v55 -= 4;
      v53 |= *v56 != v57;
      *v56-- = v57;
      LODWORD(v54) = v54 - 1;
    }
    while ((_DWORD)v54);
  }
  else if (!v15)
  {
    return v54 & 1;
  }
  WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v54) = v53;
  return v54 & 1;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::CodeBlock,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#2}>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#2} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) &= ~(1 << ~(_BYTE)a2);
  return result;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::CodeBlock,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#1}>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,void JSC::BytecodeLivenessPropagation::stepOverInstruction<JSC::CodeBlock>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,WTF::FastBitVector &)::{lambda(unsigned int)#1} const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) |= 1 << ~(_BYTE)a2;
  return result;
}

void WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *this)
{
  int v2;
  const void *v4;
  size_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < (unint64_t)this)
  {
    v2 = (int)this;
    v4 = *(const void **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    v6 = (void *)WTF::fastMalloc(this);
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = v6;
    memcpy(v6, v4, v5);
    if (v4)
    {
      if (*(const void **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

uint64_t JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v10;
  int v12;
  int v13;
  uint64_t result;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  int *v37;
  char v38;
  char v39;
  char v40;
  char v41;

  if (a2 > 0xFF)
    return 0;
  v8 = a4;
  v10 = a2;
  v12 = *a3;
  if (!*a3)
  {
    v13 = *((_DWORD *)a3 + 4);
LABEL_4:
    *((_DWORD *)a3 + 1) = v13;
    if (v13 != (char)v13)
      return 0;
    goto LABEL_8;
  }
  if (v12 != 1)
  {
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    goto LABEL_4;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_8:
  v15 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v15 = (a4 + 128) < 0x90;
  if (!v15)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5A, (uint64_t)a3, a4, a5, a6, a7, a8);
  v38 = 90;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = 90;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v35 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v38);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v35;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = 90;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v39 = v10;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = v10;
  }
  else
  {
    if (v20 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v39);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v20) = v10;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v30 = *((_QWORD *)a3 + 2);
    v31 = (int *)(a3 + 4);
    v32 = *(unsigned int *)(v30 + 28);
    if ((_DWORD)v32 == *(_DWORD *)(v30 + 24))
    {
      v37 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30 + 16, v32 + 1, (unint64_t)v31);
      LOBYTE(v22) = 0;
      v32 = *(unsigned int *)(v30 + 28);
      v33 = *(_QWORD *)(v30 + 16);
      v34 = *v37;
    }
    else
    {
      LOBYTE(v22) = 0;
      v33 = *(_QWORD *)(v30 + 16);
      v34 = *v31;
    }
    *(_DWORD *)(v33 + 4 * v32) = v34;
    ++*(_DWORD *)(v30 + 28);
  }
  else
  {
    v22 = *((_DWORD *)a3 + 1);
  }
  v40 = v22;
  v23 = *(unsigned int *)(a1 + 12);
  v24 = *(unsigned int *)(a1 + 16);
  if (v23 > v24)
  {
    *(_DWORD *)(a1 + 16) = v24 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v24) = v22;
    v25 = *(_DWORD *)(a1 + 12);
    v26 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v40);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v23) = v22;
    v25 = *(_DWORD *)(a1 + 12) + 1;
    v26 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v25;
    *(_DWORD *)(a1 + 16) = v26;
  }
  v27 = v8 + 16;
  if (v8 <= 0x3FFFFFFF)
    v27 = v8;
  v41 = v27;
  if (v25 > v26)
  {
    *(_DWORD *)(a1 + 16) = v26 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v26) = v27;
  }
  else
  {
    v28 = v25;
    if (v25 == *(_DWORD *)(a1 + 8))
    {
      v36 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v25 + 1), (unint64_t)&v41);
      v28 = *(unsigned int *)(a1 + 12);
      v29 = *(_QWORD *)a1;
      v27 = *v36;
    }
    else
    {
      v29 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v29 + v28) = v27;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int v10;
  char **v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  size_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *(_DWORD *)(result + 16);
  v9 = *(_QWORD *)(result + 40);
  if (v9 != result)
  {
    v10 = (int)a2;
    v11 = *(char ***)(result + 40);
    v12 = *(_DWORD *)(v9 + 12);
    v13 = result;
    v14 = *(_DWORD *)(result + 12);
    if (v12 > v14)
    {
      *((_DWORD *)v11 + 3) = v14;
      v12 = v14;
    }
    else
    {
      v15 = *((_DWORD *)v11 + 2);
      if (v14 > v15)
      {
        if (v15)
        {
          if (v12)
            *((_DWORD *)v11 + 3) = 0;
          v18 = (unint64_t)*v11;
          if (*v11)
          {
            *v11 = 0;
            *((_DWORD *)v11 + 2) = 0;
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
            v15 = *((_DWORD *)v11 + 2);
          }
        }
        v19 = *(_DWORD *)(v13 + 12);
        if (v15 < v19)
        {
          v20 = *v11;
          v21 = *((unsigned int *)v11 + 3);
          v22 = (char *)WTF::fastMalloc((WTF *)*(unsigned int *)(v13 + 12));
          *((_DWORD *)v11 + 2) = v19;
          *v11 = v22;
          memcpy(v22, v20, v21);
          if (v20)
          {
            if (*v11 == v20)
            {
              *v11 = 0;
              *((_DWORD *)v11 + 2) = 0;
            }
            WTF::fastFree((unint64_t)v20, v23, v24, v25, v26, v27, v28, v29);
          }
        }
        v12 = *((_DWORD *)v11 + 3);
      }
    }
    v16 = *v11;
    if (v12)
    {
      memmove(v16, *(const void **)v13, v12);
      v17 = *((unsigned int *)v11 + 3);
      v16 = *v11;
    }
    else
    {
      v17 = 0;
    }
    memcpy(&v16[v17], (const void *)(*(_QWORD *)v13 + v17), *(_QWORD *)v13 + *(unsigned int *)(v13 + 12) - (*(_QWORD *)v13 + v17));
    result = v13;
    *((_DWORD *)v11 + 3) = *(_DWORD *)(v13 + 12);
    LODWORD(a2) = v10;
  }
  *(_DWORD *)(result + 48) = v8;
  *(_DWORD *)(result + 36) = (_DWORD)a2;
  return result;
}

uint64_t JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = result;
  v5 = a2;
  v3 = *(unsigned int *)(result + 12);
  v4 = *(unsigned int *)(result + 16);
  if (v3 > v4)
  {
    *(_DWORD *)(result + 16) = v4 + 1;
    *(_BYTE *)(*(_QWORD *)result + v4) = a2;
  }
  else
  {
    if ((_DWORD)v3 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (WTF *)(v3 + 1), (unint64_t)&v5);
      *(_BYTE *)(*(_QWORD *)v2 + *(unsigned int *)(v2 + 12)) = *(_BYTE *)result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)result + v3) = a2;
    }
    *(int32x2_t *)(v2 + 12) = vadd_s32(*(int32x2_t *)(v2 + 12), (int32x2_t)0x100000001);
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *casual;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v9 = (unint64_t)a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!HIDWORD(v9))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v11)
    {
      v12 = (v9 + 15) >> 4;
      if (v9 <= 0x1A0)
      {
        v13 = 23 * v12 + 7;
      }
      else
      {
        if (v9 > 0x2710)
          goto LABEL_15;
        v13 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v12 + 626);
        if (*(_DWORD *)(v11 + 8052) <= v13)
          goto LABEL_15;
      }
      v15 = v11 + 8 * v13;
      v16 = v15 + 8064;
      *(_BYTE *)(v15 + 8064) = 1;
      v17 = *(unsigned int *)(v15 + 8080);
      if ((_DWORD)v17)
      {
        *(_DWORD *)(v16 + 16) = v17 - *(_DWORD *)(v16 + 20);
        casual = (void *)(*(_QWORD *)(v16 + 8) - v17);
      }
      else
      {
        v25 = *(_QWORD *)(v16 + 40);
        v26 = *(_QWORD *)(v16 + 24);
        if (!v25)
        {
          if (*(_BYTE *)(v16 + 5) == 6)
          {
            v28 = *(unsigned int *)(v16 + 32);
            v29 = *(_DWORD *)(v16 + 36);
            if (v28 < v29)
            {
              *(_QWORD *)(v16 + 8 * v28 + 56) = 0;
              v30 = (unint64_t *)(8 * v13 + 8 * v28 + v11 + 8128);
              v31 = v29 - 1 - v28;
              while (v31)
              {
                v26 += 1024;
                v33 = *v30++;
                v32 = v33;
                LODWORD(v28) = v28 + 1;
                --v31;
                if (v33)
                {
                  v25 = __rbit64(v32);
                  *(_DWORD *)(v16 + 32) = v28;
                  *(_QWORD *)(v16 + 24) = v26;
                  goto LABEL_26;
                }
              }
              *(_DWORD *)(v16 + 32) = v29;
            }
          }
          *(_BYTE *)v16 = 0;
          goto LABEL_15;
        }
LABEL_26:
        v27 = __clz(v25);
        *(_QWORD *)(v16 + 40) = v25 & ~(0x8000000000000000 >> v27);
        casual = (void *)(v26 + 16 * v27);
      }
      *(_BYTE *)v16 = 0;
LABEL_20:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, v5, v10);
      if (v5)
      {
        if (*(const void **)v4 == v5)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
      }
      return v3;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v9, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!HIDWORD(v5))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 9)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 8;
    goto LABEL_13;
  }
  if (!(v9 >> 30))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 4 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 9)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 8;
    goto LABEL_11;
  }
  if (!(v5 >> 30))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 4 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t result;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _BYTE *v52;
  _BYTE *v53;
  int *v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;

  if (HIWORD(a2))
    return 0;
  v8 = a4;
  v12 = *a3;
  if (!*a3)
  {
    v13 = *((_DWORD *)a3 + 4);
LABEL_4:
    *((_DWORD *)a3 + 1) = v13;
    if (v13 != (__int16)v13)
      return 0;
    goto LABEL_8;
  }
  if (v12 != 1)
  {
    if (v12 != 2)
    {
      result = 83;
      __break(0xC471u);
      return result;
    }
    v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    goto LABEL_4;
  }
  *((_DWORD *)a3 + 1) = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
LABEL_8:
  v14 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v14 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v14)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5A, (uint64_t)a3, a4, a5, a6, a7, a8);
  v55 = 0x80;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = 0x80;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v50 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v55);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v50;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = 0x80;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 90;
  v56 = 90;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 90;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v51 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v56);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v51;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v57 = a2;
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = a2;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v24 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v57);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v24) = a2;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = a2 >> 8;
  v58 = BYTE1(a2);
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = BYTE1(a2);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v52 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v58);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      LOBYTE(v28) = *v52;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  if (*a3 == 1)
  {
    v34 = *((_QWORD *)a3 + 2);
    v35 = (int *)(a3 + 4);
    v36 = *(unsigned int *)(v34 + 28);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 24))
    {
      v54 = (int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 16, v36 + 1, (unint64_t)v35);
      LOBYTE(v31) = 0;
      LOBYTE(v32) = 0;
      v36 = *(unsigned int *)(v34 + 28);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v54;
    }
    else
    {
      LOBYTE(v31) = 0;
      LOBYTE(v32) = 0;
      v37 = *(_QWORD *)(v34 + 16);
      v38 = *v35;
    }
    *(_DWORD *)(v37 + 4 * v36) = v38;
    ++*(_DWORD *)(v34 + 28);
  }
  else
  {
    v31 = *((_DWORD *)a3 + 1);
    v32 = v31 >> 8;
  }
  v59 = v31;
  v39 = *(unsigned int *)(a1 + 12);
  v40 = *(unsigned int *)(a1 + 16);
  if (v39 > v40)
  {
    *(_DWORD *)(a1 + 16) = v40 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v40) = v31;
    v41 = *(_DWORD *)(a1 + 12);
    v42 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v39 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v39 + 1), (unint64_t)&v59);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v31;
    v41 = *(_DWORD *)(a1 + 12) + 1;
    v42 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v41;
    *(_DWORD *)(a1 + 16) = v42;
  }
  v60 = v32;
  if (v41 > v42)
  {
    *(_DWORD *)(a1 + 16) = v42 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v42) = v32;
    v43 = *(_DWORD *)(a1 + 12);
    v44 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v41 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v41 + 1), (unint64_t)&v60);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v41) = v32;
    v43 = *(_DWORD *)(a1 + 12) + 1;
    v44 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v43;
    *(_DWORD *)(a1 + 16) = v44;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v61 = v8;
  if (v43 > v44)
  {
    *(_DWORD *)(a1 + 16) = v44 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v44) = v8;
    v45 = *(_DWORD *)(a1 + 12);
    v46 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v43 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v61);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v43) = v8;
    v45 = *(_DWORD *)(a1 + 12) + 1;
    v46 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v45;
    *(_DWORD *)(a1 + 16) = v46;
  }
  v47 = v8 >> 8;
  v62 = BYTE1(v8);
  if (v45 > v46)
  {
    *(_DWORD *)(a1 + 16) = v46 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v46) = BYTE1(v8);
  }
  else
  {
    v48 = v45;
    if (v45 == *(_DWORD *)(a1 + 8))
    {
      v53 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v62);
      v48 = *(unsigned int *)(a1 + 12);
      v49 = *(_QWORD *)a1;
      LOBYTE(v47) = *v53;
    }
    else
    {
      v49 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v49 + v48) = v47;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v3 = result;
  v11 = a2;
  v4 = *(unsigned int *)(result + 12);
  v5 = *(unsigned int *)(result + 16);
  if (v4 > v5)
  {
    *(_DWORD *)(result + 16) = v5 + 1;
    *(_BYTE *)(*(_QWORD *)result + v5) = a2;
    v6 = *(_DWORD *)(result + 12);
    v7 = *(_DWORD *)(result + 16);
  }
  else
  {
    if ((_DWORD)v4 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (WTF *)(v4 + 1), (unint64_t)&v11);
      *(_BYTE *)(*(_QWORD *)v3 + *(unsigned int *)(v3 + 12)) = *(_BYTE *)result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)result + v4) = a2;
    }
    v6 = *(_DWORD *)(v3 + 12) + 1;
    v7 = *(_DWORD *)(v3 + 16) + 1;
    *(_DWORD *)(v3 + 12) = v6;
    *(_DWORD *)(v3 + 16) = v7;
  }
  v8 = a2 >> 8;
  v12 = BYTE1(a2);
  if (v6 > v7)
  {
    *(_DWORD *)(v3 + 16) = v7 + 1;
    *(_BYTE *)(*(_QWORD *)v3 + v7) = BYTE1(a2);
  }
  else
  {
    v9 = v6;
    if (v6 == *(_DWORD *)(v3 + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, (WTF *)(v6 + 1), (unint64_t)&v12);
      v9 = *(unsigned int *)(v3 + 12);
      v10 = *(_QWORD *)v3;
      LOBYTE(v8) = *(_BYTE *)result;
    }
    else
    {
      v10 = *(_QWORD *)v3;
    }
    *(_BYTE *)(v10 + v9) = v8;
    *(int32x2_t *)(v3 + 12) = vadd_s32(*(int32x2_t *)(v3 + 12), (int32x2_t)0x100000001);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = result;
  v21 = a2;
  v4 = *(unsigned int *)(result + 12);
  v5 = *(unsigned int *)(result + 16);
  if (v4 > v5)
  {
    *(_DWORD *)(result + 16) = v5 + 1;
    *(_BYTE *)(*(_QWORD *)result + v5) = a2;
    v6 = *(_DWORD *)(result + 12);
    v7 = *(_DWORD *)(result + 16);
  }
  else
  {
    if ((_DWORD)v4 == *(_DWORD *)(result + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (WTF *)(v4 + 1), (unint64_t)&v21);
      *(_BYTE *)(*(_QWORD *)v3 + *(unsigned int *)(v3 + 12)) = *(_BYTE *)result;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)result + v4) = a2;
    }
    v6 = *(_DWORD *)(v3 + 12) + 1;
    v7 = *(_DWORD *)(v3 + 16) + 1;
    *(_DWORD *)(v3 + 12) = v6;
    *(_DWORD *)(v3 + 16) = v7;
  }
  v8 = a2 >> 8;
  v22 = BYTE1(a2);
  if (v6 > v7)
  {
    *(_DWORD *)(v3 + 16) = v7 + 1;
    *(_BYTE *)(*(_QWORD *)v3 + v7) = BYTE1(a2);
    v11 = *(_DWORD *)(v3 + 12);
    v12 = *(_DWORD *)(v3 + 16);
  }
  else
  {
    v9 = v6;
    if (v6 == *(_DWORD *)(v3 + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, (WTF *)(v6 + 1), (unint64_t)&v22);
      v9 = *(unsigned int *)(v3 + 12);
      v10 = *(_QWORD *)v3;
      LOBYTE(v8) = *(_BYTE *)result;
    }
    else
    {
      v10 = *(_QWORD *)v3;
    }
    *(_BYTE *)(v10 + v9) = v8;
    v11 = *(_DWORD *)(v3 + 12) + 1;
    v12 = *(_DWORD *)(v3 + 16) + 1;
    *(_DWORD *)(v3 + 12) = v11;
    *(_DWORD *)(v3 + 16) = v12;
  }
  v13 = HIWORD(a2);
  v23 = BYTE2(a2);
  if (v11 > v12)
  {
    *(_DWORD *)(v3 + 16) = v12 + 1;
    *(_BYTE *)(*(_QWORD *)v3 + v12) = BYTE2(a2);
    v16 = *(_DWORD *)(v3 + 12);
    v17 = *(_DWORD *)(v3 + 16);
  }
  else
  {
    v14 = v11;
    if (v11 == *(_DWORD *)(v3 + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, (WTF *)(v11 + 1), (unint64_t)&v23);
      v14 = *(unsigned int *)(v3 + 12);
      v15 = *(_QWORD *)v3;
      LOBYTE(v13) = *(_BYTE *)result;
    }
    else
    {
      v15 = *(_QWORD *)v3;
    }
    *(_BYTE *)(v15 + v14) = v13;
    v16 = *(_DWORD *)(v3 + 12) + 1;
    v17 = *(_DWORD *)(v3 + 16) + 1;
    *(_DWORD *)(v3 + 12) = v16;
    *(_DWORD *)(v3 + 16) = v17;
  }
  v18 = HIBYTE(a2);
  v24 = HIBYTE(a2);
  if (v16 > v17)
  {
    *(_DWORD *)(v3 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)v3 + v17) = HIBYTE(a2);
  }
  else
  {
    v19 = v16;
    if (v16 == *(_DWORD *)(v3 + 8))
    {
      result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3, (WTF *)(v16 + 1), (unint64_t)&v24);
      v19 = *(unsigned int *)(v3 + 12);
      v20 = *(_QWORD *)v3;
      LOBYTE(v18) = *(_BYTE *)result;
    }
    else
    {
      v20 = *(_QWORD *)v3;
    }
    *(_BYTE *)(v20 + v19) = v18;
    *(int32x2_t *)(v3 + 12) = vadd_s32(*(int32x2_t *)(v3 + 12), (int32x2_t)0x100000001);
  }
  return result;
}

uint64_t JSC::OpSwitchImm::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t result;
  char *v30;
  char *v31;
  unsigned int *v32;
  char v33;
  char v34;

  v8 = a4;
  v12 = *a3;
  if (*a3)
  {
    if (v12 == 1)
    {
      v13 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
    else
    {
      if (v12 != 2)
      {
        result = 83;
        __break(0xC471u);
        return result;
      }
      v13 = *((_DWORD *)a3 + 4) - *(_DWORD *)(*((_QWORD *)a3 + 1) + 16);
    }
  }
  else
  {
    v13 = *((_DWORD *)a3 + 4);
  }
  *((_DWORD *)a3 + 1) = v13;
  v14 = (unsigned int *)(a3 + 4);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x5A, (uint64_t)a3, a4, a5, a6, a7, a8);
  v33 = -126;
  v15 = *(unsigned int *)(a1 + 12);
  v16 = *(unsigned int *)(a1 + 16);
  if (v15 > v16)
  {
    *(_DWORD *)(a1 + 16) = v16 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v16) = -126;
    v19 = *(_DWORD *)(a1 + 12);
    v20 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 8))
    {
      v30 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v33);
      v15 = *(unsigned int *)(a1 + 12);
      v17 = *(_QWORD *)a1;
      v18 = *v30;
    }
    else
    {
      v17 = *(_QWORD *)a1;
      v18 = -126;
    }
    *(_BYTE *)(v17 + v15) = v18;
    v19 = *(_DWORD *)(a1 + 12) + 1;
    v20 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v19;
    *(_DWORD *)(a1 + 16) = v20;
  }
  v21 = 90;
  v34 = 90;
  if (v19 > v20)
  {
    *(_DWORD *)(a1 + 16) = v20 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v20) = 90;
  }
  else
  {
    v22 = v19;
    if (v19 == *(_DWORD *)(a1 + 8))
    {
      v31 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v34);
      v22 = *(unsigned int *)(a1 + 12);
      v23 = *(_QWORD *)a1;
      v21 = *v31;
    }
    else
    {
      v23 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v23 + v22) = v21;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  if (*a3 == 1)
  {
    v25 = *((_QWORD *)a3 + 2);
    v26 = *(unsigned int *)(v25 + 28);
    if ((_DWORD)v26 == *(_DWORD *)(v25 + 24))
    {
      v32 = (unsigned int *)WTF::Vector<int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25 + 16, v26 + 1, (unint64_t)v14);
      v24 = 0;
      v26 = *(unsigned int *)(v25 + 28);
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v32;
    }
    else
    {
      v24 = 0;
      v27 = *(_QWORD *)(v25 + 16);
      v28 = *v14;
    }
    *(_DWORD *)(v27 + 4 * v26) = v28;
    ++*(_DWORD *)(v25 + 28);
  }
  else
  {
    v24 = *v14;
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v24);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
  return 1;
}

void JSC::BytecodeGeneratorification::storageForGeneratorLocal(JSC::BytecodeGeneratorification *this, JSC::VM *a2, uint64_t **a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned int v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD **v87;
  uint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  _BYTE v109[24];
  WTF::StringImpl *v110;

  v12 = *((unsigned int *)a2 + 21);
  if (v12 <= a4)
  {
    v13 = (a4 + 1);
    v47 = *((unsigned int *)a2 + 20);
    if (v47 < v13)
    {
      v61 = v47 + (v47 >> 2);
      if (v61 >= 0x10)
        v62 = v61 + 1;
      else
        v62 = 16;
      if (v62 <= v13)
        v62 = (a4 + 1);
      if (v62 >= 0xAAAAAAB)
      {
        __break(0xC471u);
LABEL_83:
        JUMPOUT(0x19813DE68);
      }
      v63 = *((_QWORD *)a2 + 9);
      v64 = 24 * v62;
      v65 = WTF::fastMalloc((WTF *)(24 * v62));
      *((_DWORD *)a2 + 20) = (v64 & 0xFFFFFFF8) / 0x18;
      *((_QWORD *)a2 + 9) = v65;
      if ((_DWORD)v12)
      {
        v66 = (_BYTE *)(v65 + 16);
        v67 = 24 * v12;
        v68 = v63;
        do
        {
          *(v66 - 16) = 0;
          *v66 = 0;
          if (*(_BYTE *)(v68 + 16))
          {
            v69 = *(WTF::StringImpl **)v68;
            *(_QWORD *)v68 = 0;
            *((_QWORD *)v66 - 2) = v69;
            *((_QWORD *)v66 - 1) = *(_QWORD *)(v68 + 8);
            *v66 = 1;
            if (*(_BYTE *)(v68 + 16))
            {
              v70 = *(WTF::StringImpl **)v68;
              *(_QWORD *)v68 = 0;
              if (v70)
              {
                if (*(_DWORD *)v70 == 2)
                {
                  WTF::StringImpl::~StringImpl(v70, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
                }
                else
                {
                  *(_DWORD *)v70 -= 2;
                }
              }
            }
          }
          v68 += 24;
          v66 += 24;
          v67 -= 24;
        }
        while (v67);
      }
      if (v63)
      {
        if (*((_QWORD *)a2 + 9) == v63)
        {
          *((_QWORD *)a2 + 9) = 0;
          *((_DWORD *)a2 + 20) = 0;
        }
        WTF::fastFree(v63, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    v48 = *((_QWORD *)a2 + 9);
    if (v48)
    {
      v49 = *((_DWORD *)a2 + 21);
      if (v49 != (_DWORD)v13)
      {
        v50 = (_BYTE *)(v48 + 24 * v13);
        v51 = (_BYTE *)(v48 + 24 * v49);
        do
        {
          *v51 = 0;
          v51[16] = 0;
          v51 += 24;
        }
        while (v51 != v50);
      }
    }
    *((_DWORD *)a2 + 21) = v13;
  }
  else
  {
    LODWORD(v13) = *((_DWORD *)a2 + 21);
  }
  if (v13 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19813DE9CLL);
  }
  v14 = *((_QWORD *)a2 + 9) + 24 * a4;
  if (*(_BYTE *)(v14 + 16))
  {
    v15 = *(WTF::StringImpl **)v14;
    if (*(_QWORD *)v14)
    {
      v16 = *(_DWORD *)v15;
      v17 = *(_DWORD *)v15 + 2;
      *(_DWORD *)v15 = v17;
      v18 = *(_QWORD *)(v14 + 8);
      *(_DWORD *)v15 = v16 + 4;
      *(_QWORD *)this = v15;
      *((_QWORD *)this + 1) = v18;
      if (v17)
      {
        *(_DWORD *)v15 = v17;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
    }
    else
    {
      v106 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = v106;
    }
    return;
  }
  JSC::Identifier::from(a3, a4, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v108);
  v24 = *((_QWORD *)a2 + 5);
  v25 = (uint64_t *)(v24 + 32);
  v26 = *(unsigned int *)(v24 + 44);
  if ((_DWORD)v26 == *(_DWORD *)(v24 + 40))
  {
    v87 = (_DWORD **)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v108);
    v27 = *(unsigned int *)(v24 + 44);
    v88 = *(_QWORD *)(v24 + 32);
    v89 = *v87;
    if (*v87)
      *v89 += 2;
    *(_QWORD *)(v88 + 8 * v27) = v89;
  }
  else
  {
    v27 = *v25;
    v28 = v108;
    if (v108)
      *(_DWORD *)v108 += 2;
    *(_QWORD *)(v27 + 8 * v26) = v28;
    LODWORD(v27) = v26;
  }
  *(_DWORD *)(v24 + 44) = v27 + 1;
  v29 = **((_QWORD **)a2 + 13);
  v30 = (*(_DWORD *)(v29 + 16) + 1);
  *(_DWORD *)(v29 + 16) = v30;
  v31 = (uint64_t *)*((_QWORD *)a2 + 13);
  if (v31)
    v32 = *v31;
  else
    v32 = 0;
  v33 = v108;
  v107 = (WTF::StringImpl *)((v30 << 6) | 9);
  if ((_DWORD)v30 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19813DE94);
  }
  if (*(_QWORD *)(v32 + 48))
  {
    __break(0xC471u);
    goto LABEL_83;
  }
  v34 = *(_DWORD *)(v32 + 16);
  if (v34 == -1 || v34 < v30)
    *(_DWORD *)(v32 + 16) = v30;
  if (v33)
    *(_DWORD *)v33 += 2;
  v110 = v33;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(v32 + 8), (WTF::AtomStringImpl *)&v110, &v107, v19, v20, v21, v22, v23, (uint64_t)v109);
  v42 = v110;
  v110 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  if ((v107 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v107, v35, v36, v37, v38, v39, v40, v41);
  v43 = v108;
  if (v108)
    *(_DWORD *)v108 += 2;
  *(_QWORD *)this = v43;
  *((_DWORD *)this + 2) = v26;
  *((_DWORD *)this + 3) = v30;
  if (*((_DWORD *)a2 + 21) <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x19813DEB0);
  }
  v44 = *((_QWORD *)a2 + 9) + 24 * a4;
  if (*(_BYTE *)(v44 + 16))
  {
    if (v43)
      *(_DWORD *)v43 += 2;
    v45 = *(WTF::StringImpl **)v44;
    *(_QWORD *)v44 = v43;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    *(_QWORD *)(v44 + 8) = *((_QWORD *)this + 1);
  }
  else
  {
    if (v43)
      *(_DWORD *)v43 += 2;
    v52 = *((_QWORD *)this + 1);
    *(_QWORD *)v44 = v43;
    *(_QWORD *)(v44 + 8) = v52;
    *(_BYTE *)(v44 + 16) = 1;
  }
  v46 = v108;
  v108 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

void WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  WTF::StringImpl *v41;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *(WTF::StringImpl **)a2;
  v17 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *((_DWORD *)v16 + 8);
  v18 = v15 & (v17 >> 8);
  v19 = (WTF::StringImpl **)(v13 + 16 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v16)
      {
        if ((v14 & 1) != 0)
          v40 = 0;
        else
          v40 = *(unsigned int *)(v13 - 4);
        *(_QWORD *)a9 = v19;
        *(_QWORD *)(a9 + 8) = v13 + 16 * v40;
        *(_BYTE *)(a9 + 16) = 0;
        v41 = v19[1];
        v19[1] = *a3;
        *a3 = v41;
        return;
      }
      if (v20 == (WTF::StringImpl *)-1)
        v21 = v19;
      v18 = (v18 + v22) & v15;
      v19 = (WTF::StringImpl **)(v13 + 16 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      v21[1] = (WTF::StringImpl *)1;
      --*(_DWORD *)(*a1 - 16);
      v16 = *(WTF::StringImpl **)a2;
      v19 = v21;
    }
  }
  *(_QWORD *)a2 = 0;
  v23 = *v19;
  *v19 = v16;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = v19[1];
  v19[1] = *a3;
  *a3 = v24;
  v25 = *a1;
  if (*a1)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_22;
    goto LABEL_27;
  }
  if (3 * v30 <= 4 * v29)
  {
    if (!(_DWORD)v30)
    {
      v39 = 8;
LABEL_32:
      v19 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(a1, v39, v19);
      v27 = *a1;
      if (*a1)
        v30 = *(unsigned int *)(v27 - 4);
      else
        v30 = 0;
      goto LABEL_22;
    }
LABEL_27:
    v39 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
    goto LABEL_32;
  }
LABEL_22:
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = v27 + 16 * v30;
  *(_BYTE *)(a9 + 16) = 1;
}

WTF::StringImpl **WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl **v30;
  JSC::SymbolTableEntry *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  WTF::StringImpl **result;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    if (a2 < 4)
    {
      v17 = 0;
LABEL_6:
      v18 = a2 - v17;
      v19 = (_QWORD *)(v9 + 16 * v17 + 24);
      do
      {
        *(v19 - 1) = 0;
        *v19 = 1;
        v19 += 2;
        --v18;
      }
      while (v18);
      goto LABEL_8;
    }
    v17 = a2 & 0xFFFFFFFC;
    v51 = (_OWORD *)(v9 + 48);
    v52 = v17;
    do
    {
      *(v51 - 2) = xmmword_19914FB90;
      *(v51 - 1) = xmmword_19914FB90;
      *v51 = xmmword_19914FB90;
      v51[1] = xmmword_19914FB90;
      v51 += 4;
      v52 -= 4;
    }
    while (v52);
    if (v17 != a2)
      goto LABEL_6;
  }
LABEL_8:
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = (WTF::StringImpl **)(v6 + 16 * v20);
      v23 = *v22;
      if (*v22)
      {
        if (v23 != (WTF::StringImpl *)-1)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = *((_DWORD *)v23 + 4);
          if ((v26 & 0x20) != 0)
            v26 = *((_DWORD *)v23 + 8);
          v27 = 0;
          v28 = v26 >> 8;
          do
          {
            v29 = v28 & v25;
            v28 = ++v27 + v29;
          }
          while (*(_QWORD *)(v24 + 16 * v29));
          v30 = (WTF::StringImpl **)(v24 + 16 * v29);
          v31 = (JSC::SymbolTableEntry *)(v30 + 1);
          if (((_BYTE)v30[1] & 1) != 0)
          {
            *v30 = 0;
          }
          else
          {
            JSC::SymbolTableEntry::freeFatEntrySlow(v31, v10, v11, v12, v13, v14, v15, v16);
            v54 = *v30;
            *v30 = 0;
            if (v54)
            {
              if (*(_DWORD *)v54 == 2)
              {
                WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v54 -= 2;
              }
            }
          }
          v32 = *v22;
          *v22 = 0;
          *v30 = v32;
          v33 = v6 + 16 * v20;
          *(_QWORD *)v31 = 1;
          *(_QWORD *)v31 = *(_QWORD *)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 1;
          v34 = *v22;
          *v22 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          if (v22 == a3)
            v21 = v30;
        }
      }
      else
      {
        if (((_BYTE)v22[1] & 1) == 0)
        {
          JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)(v22 + 1), v10, v11, v12, v13, v14, v15, v16);
          v23 = *v22;
        }
        *v22 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      ++v20;
    }
    while (v20 != v7);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v21;
}

uint64_t JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  result = 0;
  v11 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 128) < 0x90;
  if (a3 <= 0xFF && v11)
  {
    v12 = a4;
    result = 0;
    v13 = (a4 - 1073741808) < 0x80;
    if ((int)a4 <= 0x3FFFFFFF)
      v13 = (a4 + 128) < 0x90;
    if (v13)
    {
      v14 = a5;
      if ((a5 & 0x3FEFF3F0) == 0)
      {
        v15 = a8;
        v16 = a7;
        v17 = a6;
        if ((a6 | a7 | a8) > 0xFF)
        {
          return 0;
        }
        else
        {
          v18 = a3;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1B, a3, a4, a5, a6, a7, a8);
          v50 = 27;
          v19 = *(unsigned int *)(a1 + 12);
          v20 = *(unsigned int *)(a1 + 16);
          if (v19 > v20)
          {
            *(_DWORD *)(a1 + 16) = v20 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v20) = 27;
            v23 = *(_DWORD *)(a1 + 12);
            v24 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
            {
              v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v50);
              v19 = *(unsigned int *)(a1 + 12);
              v21 = *(_QWORD *)a1;
              v22 = *v46;
            }
            else
            {
              v21 = *(_QWORD *)a1;
              v22 = 27;
            }
            *(_BYTE *)(v21 + v19) = v22;
            v23 = *(_DWORD *)(a1 + 12) + 1;
            v24 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v23;
            *(_DWORD *)(a1 + 16) = v24;
          }
          v25 = a2 + 16;
          if (a2 <= 0x3FFFFFFF)
            v25 = a2;
          v51 = v25;
          if (v23 > v24)
          {
            *(_DWORD *)(a1 + 16) = v24 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v24) = v25;
            v28 = *(_DWORD *)(a1 + 12);
            v29 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v26 = v23;
            if (v23 == *(_DWORD *)(a1 + 8))
            {
              v47 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v51);
              v26 = *(unsigned int *)(a1 + 12);
              v27 = *(_QWORD *)a1;
              v25 = *v47;
            }
            else
            {
              v27 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v27 + v26) = v25;
            v28 = *(_DWORD *)(a1 + 12) + 1;
            v29 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v28;
            *(_DWORD *)(a1 + 16) = v29;
          }
          v52 = v18;
          if (v28 > v29)
          {
            *(_DWORD *)(a1 + 16) = v29 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v29) = v18;
            v30 = *(_DWORD *)(a1 + 12);
            v31 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v28 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v52);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v28) = v18;
            v30 = *(_DWORD *)(a1 + 12) + 1;
            v31 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v30;
            *(_DWORD *)(a1 + 16) = v31;
          }
          v32 = v12 + 16;
          if (v12 <= 0x3FFFFFFF)
            v32 = v12;
          v53 = v32;
          if (v30 > v31)
          {
            *(_DWORD *)(a1 + 16) = v31 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v31) = v32;
            v35 = *(_DWORD *)(a1 + 12);
            v36 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v33 = v30;
            if (v30 == *(_DWORD *)(a1 + 8))
            {
              v48 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v53);
              v33 = *(unsigned int *)(a1 + 12);
              v34 = *(_QWORD *)a1;
              v32 = *v48;
            }
            else
            {
              v34 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v34 + v33) = v32;
            v35 = *(_DWORD *)(a1 + 12) + 1;
            v36 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v35;
            *(_DWORD *)(a1 + 16) = v36;
          }
          v37 = (v14 >> 20) | (8 * v14) | (v14 >> 23) & 0x80 | (v14 >> 9) & 0xFE;
          v54 = (v14 >> 20) | (8 * v14) | (v14 >> 23) & 0x80 | (v14 >> 9) & 0xFE;
          if (v35 > v36)
          {
            *(_DWORD *)(a1 + 16) = v36 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v36) = v37;
            v40 = *(_DWORD *)(a1 + 12);
            v41 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v38 = v35;
            if (v35 == *(_DWORD *)(a1 + 8))
            {
              v49 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v54);
              v38 = *(unsigned int *)(a1 + 12);
              v39 = *(_QWORD *)a1;
              LOBYTE(v37) = *v49;
            }
            else
            {
              v39 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v39 + v38) = v37;
            v40 = *(_DWORD *)(a1 + 12) + 1;
            v41 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v40;
            *(_DWORD *)(a1 + 16) = v41;
          }
          v55 = v17;
          if (v40 > v41)
          {
            *(_DWORD *)(a1 + 16) = v41 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v41) = v17;
            v42 = *(_DWORD *)(a1 + 12);
            v43 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v40 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v55);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v40) = v17;
            v42 = *(_DWORD *)(a1 + 12) + 1;
            v43 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v42;
            *(_DWORD *)(a1 + 16) = v43;
          }
          v56 = v16;
          if (v42 > v43)
          {
            *(_DWORD *)(a1 + 16) = v43 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v43) = v16;
            v44 = *(_DWORD *)(a1 + 12);
            v45 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v42 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v56);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v42) = v16;
            v44 = *(_DWORD *)(a1 + 12) + 1;
            v45 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v44;
            *(_DWORD *)(a1 + 16) = v45;
          }
          v57 = v15;
          if (v44 > v45)
          {
            *(_DWORD *)(a1 + 16) = v45 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v45) = v15;
          }
          else
          {
            if (v44 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v57);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v44) = v15;
            *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  char v87;

  v8 = a2;
  result = 0;
  v11 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v11 = (a2 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a3) && v11)
  {
    v12 = a4;
    result = 0;
    v13 = (a4 - 1073741760) < 0x8000;
    if ((int)a4 <= 0x3FFFFFFF)
      v13 = (a4 + 0x8000) >> 6 < 0x201;
    if (v13)
    {
      v14 = a5;
      if ((a5 & 0x3FEFF3F0) == 0)
      {
        v15 = a8;
        v16 = a7;
        v17 = a6;
        if ((a6 | a7 | a8) >> 16)
        {
          return 0;
        }
        else
        {
          v18 = a3;
          JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1B, a3, a4, a5, a6, a7, a8);
          v87 = 0x80;
          v19 = *(unsigned int *)(a1 + 12);
          v20 = *(unsigned int *)(a1 + 16);
          if (v19 > v20)
          {
            *(_DWORD *)(a1 + 16) = v20 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v20) = 0x80;
            v23 = *(_DWORD *)(a1 + 12);
            v24 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if ((_DWORD)v19 == *(_DWORD *)(a1 + 8))
            {
              v78 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v19 + 1), (unint64_t)&v87);
              v19 = *(unsigned int *)(a1 + 12);
              v21 = *(_QWORD *)a1;
              v22 = *v78;
            }
            else
            {
              v21 = *(_QWORD *)a1;
              v22 = 0x80;
            }
            *(_BYTE *)(v21 + v19) = v22;
            v23 = *(_DWORD *)(a1 + 12) + 1;
            v24 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v23;
            *(_DWORD *)(a1 + 16) = v24;
          }
          v25 = 27;
          v87 = 27;
          if (v23 > v24)
          {
            *(_DWORD *)(a1 + 16) = v24 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v24) = 27;
            v28 = *(_DWORD *)(a1 + 12);
            v29 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v26 = v23;
            if (v23 == *(_DWORD *)(a1 + 8))
            {
              v79 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v23 + 1), (unint64_t)&v87);
              v26 = *(unsigned int *)(a1 + 12);
              v27 = *(_QWORD *)a1;
              v25 = *v79;
            }
            else
            {
              v27 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v27 + v26) = v25;
            v28 = *(_DWORD *)(a1 + 12) + 1;
            v29 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v28;
            *(_DWORD *)(a1 + 16) = v29;
          }
          if (v8 > 0x3FFFFFFF)
            v8 += 64;
          v87 = v8;
          if (v28 > v29)
          {
            *(_DWORD *)(a1 + 16) = v29 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v29) = v8;
            v30 = *(_DWORD *)(a1 + 12);
            v31 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v28 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v28) = v8;
            v30 = *(_DWORD *)(a1 + 12) + 1;
            v31 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v30;
            *(_DWORD *)(a1 + 16) = v31;
          }
          v32 = v8 >> 8;
          v87 = BYTE1(v8);
          if (v30 > v31)
          {
            *(_DWORD *)(a1 + 16) = v31 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v31) = BYTE1(v8);
            v35 = *(_DWORD *)(a1 + 12);
            v36 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v33 = v30;
            if (v30 == *(_DWORD *)(a1 + 8))
            {
              v80 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v30 + 1), (unint64_t)&v87);
              v33 = *(unsigned int *)(a1 + 12);
              v34 = *(_QWORD *)a1;
              LOBYTE(v32) = *v80;
            }
            else
            {
              v34 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v34 + v33) = v32;
            v35 = *(_DWORD *)(a1 + 12) + 1;
            v36 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v35;
            *(_DWORD *)(a1 + 16) = v36;
          }
          v87 = v18;
          if (v35 > v36)
          {
            *(_DWORD *)(a1 + 16) = v36 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v36) = v18;
            v37 = *(_DWORD *)(a1 + 12);
            v38 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v35 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v35) = v18;
            v37 = *(_DWORD *)(a1 + 12) + 1;
            v38 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v37;
            *(_DWORD *)(a1 + 16) = v38;
          }
          v39 = v18 >> 8;
          v87 = BYTE1(v18);
          if (v37 > v38)
          {
            *(_DWORD *)(a1 + 16) = v38 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v38) = BYTE1(v18);
            v42 = *(_DWORD *)(a1 + 12);
            v43 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v40 = v37;
            if (v37 == *(_DWORD *)(a1 + 8))
            {
              v81 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v37 + 1), (unint64_t)&v87);
              v40 = *(unsigned int *)(a1 + 12);
              v41 = *(_QWORD *)a1;
              LOBYTE(v39) = *v81;
            }
            else
            {
              v41 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v41 + v40) = v39;
            v42 = *(_DWORD *)(a1 + 12) + 1;
            v43 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v42;
            *(_DWORD *)(a1 + 16) = v43;
          }
          if (v12 > 0x3FFFFFFF)
            v12 += 64;
          v87 = v12;
          if (v42 > v43)
          {
            *(_DWORD *)(a1 + 16) = v43 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v43) = v12;
            v44 = *(_DWORD *)(a1 + 12);
            v45 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v42 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v42) = v12;
            v44 = *(_DWORD *)(a1 + 12) + 1;
            v45 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v44;
            *(_DWORD *)(a1 + 16) = v45;
          }
          v46 = v12 >> 8;
          v87 = BYTE1(v12);
          if (v44 > v45)
          {
            *(_DWORD *)(a1 + 16) = v45 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v45) = BYTE1(v12);
            v49 = *(_DWORD *)(a1 + 12);
            v50 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v47 = v44;
            if (v44 == *(_DWORD *)(a1 + 8))
            {
              v82 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v44 + 1), (unint64_t)&v87);
              v47 = *(unsigned int *)(a1 + 12);
              v48 = *(_QWORD *)a1;
              LOBYTE(v46) = *v82;
            }
            else
            {
              v48 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v48 + v47) = v46;
            v49 = *(_DWORD *)(a1 + 12) + 1;
            v50 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v49;
            *(_DWORD *)(a1 + 16) = v50;
          }
          v51 = (v14 >> 23) & 0x80 | (8 * v14) | (v14 >> 9) & 0x1FE;
          v52 = v51 | (v14 >> 20);
          v87 = (v14 >> 23) & 0x80 | (8 * v14) | (v14 >> 9) & 0xFE | (v14 >> 20);
          if (v49 > v50)
          {
            *(_DWORD *)(a1 + 16) = v50 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v50) = v52;
            v55 = *(_DWORD *)(a1 + 12);
            v56 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v53 = v49;
            if (v49 == *(_DWORD *)(a1 + 8))
            {
              v83 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v87);
              v53 = *(unsigned int *)(a1 + 12);
              v54 = *(_QWORD *)a1;
              LOBYTE(v52) = *v83;
            }
            else
            {
              v54 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v54 + v53) = v52;
            v55 = *(_DWORD *)(a1 + 12) + 1;
            v56 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v55;
            *(_DWORD *)(a1 + 16) = v56;
          }
          v57 = v51 >> 8;
          v87 = (unsigned __int16)((v14 >> 23) & 0x80 | (8 * v14) | (v14 >> 9) & 0x1FE) >> 8;
          if (v55 > v56)
          {
            *(_DWORD *)(a1 + 16) = v56 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v56) = BYTE1(v51);
            v60 = *(_DWORD *)(a1 + 12);
            v61 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v58 = v55;
            if (v55 == *(_DWORD *)(a1 + 8))
            {
              v84 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v55 + 1), (unint64_t)&v87);
              v58 = *(unsigned int *)(a1 + 12);
              v59 = *(_QWORD *)a1;
              LOBYTE(v57) = *v84;
            }
            else
            {
              v59 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v59 + v58) = v57;
            v60 = *(_DWORD *)(a1 + 12) + 1;
            v61 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v60;
            *(_DWORD *)(a1 + 16) = v61;
          }
          v87 = v17;
          if (v60 > v61)
          {
            *(_DWORD *)(a1 + 16) = v61 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v61) = v17;
            v62 = *(_DWORD *)(a1 + 12);
            v63 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v60 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v60 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v60) = v17;
            v62 = *(_DWORD *)(a1 + 12) + 1;
            v63 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v62;
            *(_DWORD *)(a1 + 16) = v63;
          }
          v87 = HIBYTE(v17);
          if (v62 > v63)
          {
            *(_DWORD *)(a1 + 16) = v63 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v63) = HIBYTE(v17);
            v64 = *(_DWORD *)(a1 + 12);
            v65 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v62 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v62 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v62) = HIBYTE(v17);
            v64 = *(_DWORD *)(a1 + 12) + 1;
            v65 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v64;
            *(_DWORD *)(a1 + 16) = v65;
          }
          v87 = v16;
          if (v64 > v65)
          {
            *(_DWORD *)(a1 + 16) = v65 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v65) = v16;
            v66 = *(_DWORD *)(a1 + 12);
            v67 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v64 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v64 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v64) = v16;
            v66 = *(_DWORD *)(a1 + 12) + 1;
            v67 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v66;
            *(_DWORD *)(a1 + 16) = v67;
          }
          v68 = v16 >> 8;
          v87 = BYTE1(v16);
          if (v66 > v67)
          {
            *(_DWORD *)(a1 + 16) = v67 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v67) = BYTE1(v16);
            v71 = *(_DWORD *)(a1 + 12);
            v72 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            v69 = v66;
            if (v66 == *(_DWORD *)(a1 + 8))
            {
              v85 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v66 + 1), (unint64_t)&v87);
              v69 = *(unsigned int *)(a1 + 12);
              v70 = *(_QWORD *)a1;
              LOBYTE(v68) = *v85;
            }
            else
            {
              v70 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v70 + v69) = v68;
            v71 = *(_DWORD *)(a1 + 12) + 1;
            v72 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v71;
            *(_DWORD *)(a1 + 16) = v72;
          }
          v87 = v15;
          if (v71 > v72)
          {
            *(_DWORD *)(a1 + 16) = v72 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v72) = v15;
            v73 = *(_DWORD *)(a1 + 12);
            v74 = *(_DWORD *)(a1 + 16);
          }
          else
          {
            if (v71 == *(_DWORD *)(a1 + 8))
              *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v71 + 1), (unint64_t)&v87);
            else
              *(_BYTE *)(*(_QWORD *)a1 + v71) = v15;
            v73 = *(_DWORD *)(a1 + 12) + 1;
            v74 = *(_DWORD *)(a1 + 16) + 1;
            *(_DWORD *)(a1 + 12) = v73;
            *(_DWORD *)(a1 + 16) = v74;
          }
          v75 = v15 >> 8;
          v87 = BYTE1(v15);
          if (v73 > v74)
          {
            *(_DWORD *)(a1 + 16) = v74 + 1;
            *(_BYTE *)(*(_QWORD *)a1 + v74) = BYTE1(v15);
          }
          else
          {
            v76 = v73;
            if (v73 == *(_DWORD *)(a1 + 8))
            {
              v86 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v73 + 1), (unint64_t)&v87);
              v76 = *(unsigned int *)(a1 + 12);
              v77 = *(_QWORD *)a1;
              LOBYTE(v75) = *v86;
            }
            else
            {
              v77 = *(_QWORD *)a1;
            }
            *(_BYTE *)(v77 + v76) = v75;
            *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::OpPutToScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;
  char v28;
  char v29;

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1B, a3, a4, a5, a6, a7, a8);
  v28 = -126;
  v16 = *(unsigned int *)(a1 + 12);
  v17 = *(unsigned int *)(a1 + 16);
  if (v16 > v17)
  {
    *(_DWORD *)(a1 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v17) = -126;
    v20 = *(_DWORD *)(a1 + 12);
    v21 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v16 == *(_DWORD *)(a1 + 8))
    {
      v26 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v16 + 1), (unint64_t)&v28);
      v16 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v19 = *v26;
    }
    else
    {
      v18 = *(_QWORD *)a1;
      v19 = -126;
    }
    *(_BYTE *)(v18 + v16) = v19;
    v20 = *(_DWORD *)(a1 + 12) + 1;
    v21 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v20;
    *(_DWORD *)(a1 + 16) = v21;
  }
  v22 = 27;
  v29 = 27;
  if (v20 > v21)
  {
    *(_DWORD *)(a1 + 16) = v21 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v21) = 27;
  }
  else
  {
    v23 = v20;
    if (v20 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v29);
      v23 = *(unsigned int *)(a1 + 12);
      v24 = *(_QWORD *)a1;
      v22 = *v27;
    }
    else
    {
      v24 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v24 + v23) = v22;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
  return 1;
}

BOOL JSC::OpRet::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char v23;
  char v24;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  else
    v9 = (a2 - 1073741808) < 0x80;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x66, a3, a4, a5, a6, a7, a8);
    v23 = 102;
    v11 = *(unsigned int *)(a1 + 12);
    v12 = *(unsigned int *)(a1 + 16);
    if (v11 > v12)
    {
      *(_DWORD *)(a1 + 16) = v12 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v12) = 102;
      v15 = *(_DWORD *)(a1 + 12);
      v16 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
      {
        v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v11 + 1), (unint64_t)&v23);
        v11 = *(unsigned int *)(a1 + 12);
        v13 = *(_QWORD *)a1;
        v14 = *v21;
      }
      else
      {
        v13 = *(_QWORD *)a1;
        v14 = 102;
      }
      *(_BYTE *)(v13 + v11) = v14;
      v15 = *(_DWORD *)(a1 + 12) + 1;
      v16 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v15;
      *(_DWORD *)(a1 + 16) = v16;
    }
    v17 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v17 = a2;
    v24 = v17;
    if (v15 > v16)
    {
      *(_DWORD *)(a1 + 16) = v16 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v16) = v17;
    }
    else
    {
      v18 = v15;
      if (v15 == *(_DWORD *)(a1 + 8))
      {
        v22 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v15 + 1), (unint64_t)&v24);
        v18 = *(unsigned int *)(a1 + 12);
        v19 = *(_QWORD *)a1;
        v17 = *v22;
      }
      else
      {
        v19 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v19 + v18) = v17;
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  return v9;
}

BOOL JSC::OpRet::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v9;
  __int16 v11;

  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  else
    v9 = (a2 - 1073741760) < 0x8000;
  if (v9)
  {
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x66, a3, a4, a5, a6, a7, a8);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 128);
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 102);
    v11 = a2 + 64;
    if (a2 <= 0x3FFFFFFF)
      v11 = a2;
    JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  }
  return v9;
}

uint64_t JSC::OpRet::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  char v22;
  char v23;

  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x66, a3, a4, a5, a6, a7, a8);
  v22 = -126;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(unsigned int *)(a1 + 16);
  if (v10 > v11)
  {
    *(_DWORD *)(a1 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v11) = -126;
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      v20 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v10 + 1), (unint64_t)&v22);
      v10 = *(unsigned int *)(a1 + 12);
      v12 = *(_QWORD *)a1;
      v13 = *v20;
    }
    else
    {
      v12 = *(_QWORD *)a1;
      v13 = -126;
    }
    *(_BYTE *)(v12 + v10) = v13;
    v14 = *(_DWORD *)(a1 + 12) + 1;
    v15 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v14;
    *(_DWORD *)(a1 + 16) = v15;
  }
  v16 = 102;
  v23 = 102;
  if (v14 > v15)
  {
    *(_DWORD *)(a1 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v15) = 102;
  }
  else
  {
    v17 = v14;
    if (v14 == *(_DWORD *)(a1 + 8))
    {
      v21 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v14 + 1), (unint64_t)&v23);
      v17 = *(unsigned int *)(a1 + 12);
      v18 = *(_QWORD *)a1;
      v16 = *v21;
    }
    else
    {
      v18 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v18 + v17) = v16;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  return 1;
}

uint64_t JSC::OpGetFromScope::emit<JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;

  v11 = a5;
  v13 = a3;
  v16 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 8) + 72);
  *(_BYTE *)(v16 + 4) |= 1u;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = *(_DWORD *)(v17 + 104);
  *(_DWORD *)(v17 + 104) = v18 + 1;
  v19 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v19 = (a2 + 128) < 0x90;
  if (!v19)
    goto LABEL_51;
  v20 = (a3 - 1073741808) < 0x80;
  if ((int)a3 <= 0x3FFFFFFF)
    v20 = (a3 + 128) < 0x90;
  if (a4 <= 0xFF
    && v20
    && (a5 & 0x3FEFF3F0) == 0
    && (a7 | a6 | a8 | v18) <= 0xFF)
  {
    result = JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1A, a3, a4, a5, a6, a7, a8);
    v54 = 26;
    v22 = *(unsigned int *)(a1 + 12);
    v23 = *(unsigned int *)(a1 + 16);
    if (v22 > v23)
    {
      *(_DWORD *)(a1 + 16) = v23 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v23) = 26;
      v26 = *(_DWORD *)(a1 + 12);
      v27 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if ((_DWORD)v22 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v54);
        v22 = *(unsigned int *)(a1 + 12);
        v24 = *(_QWORD *)a1;
        v25 = *(_BYTE *)result;
      }
      else
      {
        v24 = *(_QWORD *)a1;
        v25 = 26;
      }
      *(_BYTE *)(v24 + v22) = v25;
      v26 = *(_DWORD *)(a1 + 12) + 1;
      v27 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 16) = v27;
    }
    v28 = a2 + 16;
    if (a2 <= 0x3FFFFFFF)
      v28 = a2;
    v55 = v28;
    if (v26 > v27)
    {
      *(_DWORD *)(a1 + 16) = v27 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
      v31 = *(_DWORD *)(a1 + 12);
      v32 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v29 = v26;
      if (v26 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v55);
        v29 = *(unsigned int *)(a1 + 12);
        v30 = *(_QWORD *)a1;
        v28 = *(_BYTE *)result;
      }
      else
      {
        v30 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v30 + v29) = v28;
      v31 = *(_DWORD *)(a1 + 12) + 1;
      v32 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v31;
      *(_DWORD *)(a1 + 16) = v32;
    }
    v33 = v13 + 16;
    if (v13 <= 0x3FFFFFFF)
      v33 = v13;
    v56 = v33;
    if (v31 > v32)
    {
      *(_DWORD *)(a1 + 16) = v32 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
      v36 = *(_DWORD *)(a1 + 12);
      v37 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v34 = v31;
      if (v31 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v56);
        v34 = *(unsigned int *)(a1 + 12);
        v35 = *(_QWORD *)a1;
        v33 = *(_BYTE *)result;
      }
      else
      {
        v35 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v35 + v34) = v33;
      v36 = *(_DWORD *)(a1 + 12) + 1;
      v37 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v36;
      *(_DWORD *)(a1 + 16) = v37;
    }
    v57 = a4;
    if (v36 > v37)
    {
      *(_DWORD *)(a1 + 16) = v37 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v37) = a4;
      v38 = *(_DWORD *)(a1 + 12);
      v39 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v36 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v57);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v36) = a4;
      }
      v38 = *(_DWORD *)(a1 + 12) + 1;
      v39 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v38;
      *(_DWORD *)(a1 + 16) = v39;
    }
    v40 = (v11 >> 20) | (8 * v11) | (v11 >> 23) & 0x80 | (v11 >> 9) & 0xFE;
    v58 = (v11 >> 20) | (8 * v11) | (v11 >> 23) & 0x80 | (v11 >> 9) & 0xFE;
    if (v38 > v39)
    {
      *(_DWORD *)(a1 + 16) = v39 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v39) = v40;
      v43 = *(_DWORD *)(a1 + 12);
      v44 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      v41 = v38;
      if (v38 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v58);
        v41 = *(unsigned int *)(a1 + 12);
        v42 = *(_QWORD *)a1;
        LOBYTE(v40) = *(_BYTE *)result;
      }
      else
      {
        v42 = *(_QWORD *)a1;
      }
      *(_BYTE *)(v42 + v41) = v40;
      v43 = *(_DWORD *)(a1 + 12) + 1;
      v44 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v43;
      *(_DWORD *)(a1 + 16) = v44;
    }
    v59 = a6;
    if (v43 > v44)
    {
      *(_DWORD *)(a1 + 16) = v44 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v44) = a6;
      v45 = *(_DWORD *)(a1 + 12);
      v46 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v43 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v59);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v43) = a6;
      }
      v45 = *(_DWORD *)(a1 + 12) + 1;
      v46 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v45;
      *(_DWORD *)(a1 + 16) = v46;
    }
    v60 = a7;
    if (v45 > v46)
    {
      *(_DWORD *)(a1 + 16) = v46 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v46) = a7;
      v47 = *(_DWORD *)(a1 + 12);
      v48 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v45 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v60);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v45) = a7;
      }
      v47 = *(_DWORD *)(a1 + 12) + 1;
      v48 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v47;
      *(_DWORD *)(a1 + 16) = v48;
    }
    v61 = a8;
    if (v47 > v48)
    {
      *(_DWORD *)(a1 + 16) = v48 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v48) = a8;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      if (v47 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v61);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v47) = a8;
      }
      v49 = *(_DWORD *)(a1 + 12) + 1;
      v50 = *(_DWORD *)(a1 + 16) + 1;
      *(_DWORD *)(a1 + 12) = v49;
      *(_DWORD *)(a1 + 16) = v50;
    }
    v62 = v18;
    if (v49 > v50)
    {
      *(_DWORD *)(a1 + 16) = v50 + 1;
      *(_BYTE *)(*(_QWORD *)a1 + v50) = v18;
    }
    else
    {
      if (v49 == *(_DWORD *)(a1 + 8))
      {
        result = WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v62);
        *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a1 + v49) = v18;
      }
      *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
    }
  }
  else
  {
LABEL_51:
    v52 = a3;
    v53 = a5;
    result = JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(a1, a2, a3, a4, a5, a6, a7, a8, v18);
    if ((result & 1) == 0)
      return JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(a1, a2, v52, a4, v53, a6, a7, a8, v18);
  }
  return result;
}

uint64_t JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  uint64_t result;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  char v100;

  v9 = a2;
  v10 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v10 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v10)
    return 0;
  v11 = a4;
  v12 = a3;
  result = 0;
  v15 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v15 = (a3 + 0x8000) >> 6 < 0x201;
  if (!WORD1(a4) && v15)
  {
    v16 = a5;
    result = 0;
    if ((a5 & 0x3FEFF3F0) == 0)
    {
      v17 = a8;
      v18 = a7;
      v19 = a6;
      if (!((a7 | a6 | a8 | a9) >> 16))
      {
        JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1A, a3, a4, a5, a6, a7, a8);
        v100 = 0x80;
        v20 = *(unsigned int *)(a1 + 12);
        v21 = *(unsigned int *)(a1 + 16);
        if (v20 > v21)
        {
          *(_DWORD *)(a1 + 16) = v21 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v21) = 0x80;
          v24 = *(_DWORD *)(a1 + 12);
          v25 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
          {
            v89 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v20 + 1), (unint64_t)&v100);
            v20 = *(unsigned int *)(a1 + 12);
            v22 = *(_QWORD *)a1;
            v23 = *v89;
          }
          else
          {
            v22 = *(_QWORD *)a1;
            v23 = 0x80;
          }
          *(_BYTE *)(v22 + v20) = v23;
          v24 = *(_DWORD *)(a1 + 12) + 1;
          v25 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v24;
          *(_DWORD *)(a1 + 16) = v25;
        }
        v26 = 26;
        v100 = 26;
        if (v24 > v25)
        {
          *(_DWORD *)(a1 + 16) = v25 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v25) = 26;
          v29 = *(_DWORD *)(a1 + 12);
          v30 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v27 = v24;
          if (v24 == *(_DWORD *)(a1 + 8))
          {
            v90 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v100);
            v27 = *(unsigned int *)(a1 + 12);
            v28 = *(_QWORD *)a1;
            v26 = *v90;
          }
          else
          {
            v28 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v28 + v27) = v26;
          v29 = *(_DWORD *)(a1 + 12) + 1;
          v30 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v29;
          *(_DWORD *)(a1 + 16) = v30;
        }
        if (v9 > 0x3FFFFFFF)
          v9 += 64;
        v100 = v9;
        if (v29 > v30)
        {
          *(_DWORD *)(a1 + 16) = v30 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v30) = v9;
          v31 = *(_DWORD *)(a1 + 12);
          v32 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v29 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v29) = v9;
          v31 = *(_DWORD *)(a1 + 12) + 1;
          v32 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v31;
          *(_DWORD *)(a1 + 16) = v32;
        }
        v33 = v9 >> 8;
        v100 = BYTE1(v9);
        if (v31 > v32)
        {
          *(_DWORD *)(a1 + 16) = v32 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v9);
          v36 = *(_DWORD *)(a1 + 12);
          v37 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v34 = v31;
          if (v31 == *(_DWORD *)(a1 + 8))
          {
            v91 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v100);
            v34 = *(unsigned int *)(a1 + 12);
            v35 = *(_QWORD *)a1;
            LOBYTE(v33) = *v91;
          }
          else
          {
            v35 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v35 + v34) = v33;
          v36 = *(_DWORD *)(a1 + 12) + 1;
          v37 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v36;
          *(_DWORD *)(a1 + 16) = v37;
        }
        if (v12 > 0x3FFFFFFF)
          v12 += 64;
        v100 = v12;
        if (v36 > v37)
        {
          *(_DWORD *)(a1 + 16) = v37 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v37) = v12;
          v38 = *(_DWORD *)(a1 + 12);
          v39 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v36 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v36) = v12;
          v38 = *(_DWORD *)(a1 + 12) + 1;
          v39 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v38;
          *(_DWORD *)(a1 + 16) = v39;
        }
        v40 = v12 >> 8;
        v100 = BYTE1(v12);
        if (v38 > v39)
        {
          *(_DWORD *)(a1 + 16) = v39 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v39) = BYTE1(v12);
          v43 = *(_DWORD *)(a1 + 12);
          v44 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v41 = v38;
          if (v38 == *(_DWORD *)(a1 + 8))
          {
            v92 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v38 + 1), (unint64_t)&v100);
            v41 = *(unsigned int *)(a1 + 12);
            v42 = *(_QWORD *)a1;
            LOBYTE(v40) = *v92;
          }
          else
          {
            v42 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v42 + v41) = v40;
          v43 = *(_DWORD *)(a1 + 12) + 1;
          v44 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v43;
          *(_DWORD *)(a1 + 16) = v44;
        }
        v100 = v11;
        if (v43 > v44)
        {
          *(_DWORD *)(a1 + 16) = v44 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v44) = v11;
          v45 = *(_DWORD *)(a1 + 12);
          v46 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v43 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v43 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v43) = v11;
          v45 = *(_DWORD *)(a1 + 12) + 1;
          v46 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v45;
          *(_DWORD *)(a1 + 16) = v46;
        }
        v47 = v11 >> 8;
        v100 = BYTE1(v11);
        if (v45 > v46)
        {
          *(_DWORD *)(a1 + 16) = v46 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v46) = BYTE1(v11);
          v50 = *(_DWORD *)(a1 + 12);
          v51 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v48 = v45;
          if (v45 == *(_DWORD *)(a1 + 8))
          {
            v93 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v45 + 1), (unint64_t)&v100);
            v48 = *(unsigned int *)(a1 + 12);
            v49 = *(_QWORD *)a1;
            LOBYTE(v47) = *v93;
          }
          else
          {
            v49 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v49 + v48) = v47;
          v50 = *(_DWORD *)(a1 + 12) + 1;
          v51 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v50;
          *(_DWORD *)(a1 + 16) = v51;
        }
        v52 = (v16 >> 23) & 0x80 | (8 * v16) | (v16 >> 9) & 0x1FE;
        v53 = v52 | (v16 >> 20);
        v100 = (v16 >> 23) & 0x80 | (8 * v16) | (v16 >> 9) & 0xFE | (v16 >> 20);
        if (v50 > v51)
        {
          *(_DWORD *)(a1 + 16) = v51 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v51) = v53;
          v56 = *(_DWORD *)(a1 + 12);
          v57 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v54 = v50;
          if (v50 == *(_DWORD *)(a1 + 8))
          {
            v94 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v50 + 1), (unint64_t)&v100);
            v54 = *(unsigned int *)(a1 + 12);
            v55 = *(_QWORD *)a1;
            LOBYTE(v53) = *v94;
          }
          else
          {
            v55 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v55 + v54) = v53;
          v56 = *(_DWORD *)(a1 + 12) + 1;
          v57 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v56;
          *(_DWORD *)(a1 + 16) = v57;
        }
        v58 = v52 >> 8;
        v100 = (unsigned __int16)((v16 >> 23) & 0x80 | (8 * v16) | (v16 >> 9) & 0x1FE) >> 8;
        if (v56 > v57)
        {
          *(_DWORD *)(a1 + 16) = v57 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v57) = BYTE1(v52);
          v61 = *(_DWORD *)(a1 + 12);
          v62 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v59 = v56;
          if (v56 == *(_DWORD *)(a1 + 8))
          {
            v95 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v56 + 1), (unint64_t)&v100);
            v59 = *(unsigned int *)(a1 + 12);
            v60 = *(_QWORD *)a1;
            LOBYTE(v58) = *v95;
          }
          else
          {
            v60 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v60 + v59) = v58;
          v61 = *(_DWORD *)(a1 + 12) + 1;
          v62 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v61;
          *(_DWORD *)(a1 + 16) = v62;
        }
        v100 = v19;
        if (v61 > v62)
        {
          *(_DWORD *)(a1 + 16) = v62 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v62) = v19;
          v63 = *(_DWORD *)(a1 + 12);
          v64 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v61 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v61 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v61) = v19;
          v63 = *(_DWORD *)(a1 + 12) + 1;
          v64 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v63;
          *(_DWORD *)(a1 + 16) = v64;
        }
        v65 = v19 >> 8;
        v100 = BYTE1(v19);
        if (v63 > v64)
        {
          *(_DWORD *)(a1 + 16) = v64 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v64) = BYTE1(v19);
          v68 = *(_DWORD *)(a1 + 12);
          v69 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v66 = v63;
          if (v63 == *(_DWORD *)(a1 + 8))
          {
            v96 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v63 + 1), (unint64_t)&v100);
            v66 = *(unsigned int *)(a1 + 12);
            v67 = *(_QWORD *)a1;
            LOBYTE(v65) = *v96;
          }
          else
          {
            v67 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v67 + v66) = v65;
          v68 = *(_DWORD *)(a1 + 12) + 1;
          v69 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v68;
          *(_DWORD *)(a1 + 16) = v69;
        }
        v100 = v18;
        if (v68 > v69)
        {
          *(_DWORD *)(a1 + 16) = v69 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v69) = v18;
          v70 = *(_DWORD *)(a1 + 12);
          v71 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v68 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v68 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v68) = v18;
          v70 = *(_DWORD *)(a1 + 12) + 1;
          v71 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v70;
          *(_DWORD *)(a1 + 16) = v71;
        }
        v72 = v18 >> 8;
        v100 = BYTE1(v18);
        if (v70 > v71)
        {
          *(_DWORD *)(a1 + 16) = v71 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v71) = BYTE1(v18);
          v75 = *(_DWORD *)(a1 + 12);
          v76 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v73 = v70;
          if (v70 == *(_DWORD *)(a1 + 8))
          {
            v97 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v70 + 1), (unint64_t)&v100);
            v73 = *(unsigned int *)(a1 + 12);
            v74 = *(_QWORD *)a1;
            LOBYTE(v72) = *v97;
          }
          else
          {
            v74 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v74 + v73) = v72;
          v75 = *(_DWORD *)(a1 + 12) + 1;
          v76 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v75;
          *(_DWORD *)(a1 + 16) = v76;
        }
        v100 = v17;
        if (v75 > v76)
        {
          *(_DWORD *)(a1 + 16) = v76 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v76) = v17;
          v77 = *(_DWORD *)(a1 + 12);
          v78 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v75 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v75 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v75) = v17;
          v77 = *(_DWORD *)(a1 + 12) + 1;
          v78 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v77;
          *(_DWORD *)(a1 + 16) = v78;
        }
        v79 = v17 >> 8;
        v100 = BYTE1(v17);
        if (v77 > v78)
        {
          *(_DWORD *)(a1 + 16) = v78 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v78) = BYTE1(v17);
          v82 = *(_DWORD *)(a1 + 12);
          v83 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          v80 = v77;
          if (v77 == *(_DWORD *)(a1 + 8))
          {
            v98 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v77 + 1), (unint64_t)&v100);
            v80 = *(unsigned int *)(a1 + 12);
            v81 = *(_QWORD *)a1;
            LOBYTE(v79) = *v98;
          }
          else
          {
            v81 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v81 + v80) = v79;
          v82 = *(_DWORD *)(a1 + 12) + 1;
          v83 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v82;
          *(_DWORD *)(a1 + 16) = v83;
        }
        v100 = a9;
        if (v82 > v83)
        {
          *(_DWORD *)(a1 + 16) = v83 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v83) = a9;
          v84 = *(_DWORD *)(a1 + 12);
          v85 = *(_DWORD *)(a1 + 16);
        }
        else
        {
          if (v82 == *(_DWORD *)(a1 + 8))
            *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v82 + 1), (unint64_t)&v100);
          else
            *(_BYTE *)(*(_QWORD *)a1 + v82) = a9;
          v84 = *(_DWORD *)(a1 + 12) + 1;
          v85 = *(_DWORD *)(a1 + 16) + 1;
          *(_DWORD *)(a1 + 12) = v84;
          *(_DWORD *)(a1 + 16) = v85;
        }
        v86 = a9 >> 8;
        v100 = BYTE1(a9);
        if (v84 > v85)
        {
          *(_DWORD *)(a1 + 16) = v85 + 1;
          *(_BYTE *)(*(_QWORD *)a1 + v85) = BYTE1(a9);
        }
        else
        {
          v87 = v84;
          if (v84 == *(_DWORD *)(a1 + 8))
          {
            v99 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v84 + 1), (unint64_t)&v100);
            v87 = *(unsigned int *)(a1 + 12);
            v88 = *(_QWORD *)a1;
            LOBYTE(v86) = *v99;
          }
          else
          {
            v88 = *(_QWORD *)a1;
          }
          *(_BYTE *)(v88 + v87) = v86;
          *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t JSC::OpGetFromScope::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *v28;
  char v29;
  char v30;

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v14 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x1A, a3, a4, a5, a6, a7, a8);
  v29 = -126;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -126;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v27 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v29);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v27;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = -126;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = 26;
  v30 = 26;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = 26;
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v28 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v30);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v28;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v14);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v13);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v12);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v11);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a9);
  return 1;
}

uint64_t JSC::OpMov::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  char *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  v11 = (a3 - 1073741760) < 0x8000;
  if ((int)a3 <= 0x3FFFFFFF)
    v11 = (a3 + 0x8000) >> 6 < 0x201;
  if (!v11)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8F, a3, a4, a5, a6, a7, a8);
  v41 = 0x80;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = 0x80;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v37 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v41);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v37;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = 0x80;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = -113;
  v42 = -113;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = -113;
    v22 = *(_DWORD *)(a1 + 12);
    v23 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v38 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v42);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v38;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    v22 = *(_DWORD *)(a1 + 12) + 1;
    v23 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v22;
    *(_DWORD *)(a1 + 16) = v23;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v43 = v8;
  if (v22 > v23)
  {
    *(_DWORD *)(a1 + 16) = v23 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v23) = v8;
    v24 = *(_DWORD *)(a1 + 12);
    v25 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v22 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v22 + 1), (unint64_t)&v43);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v22) = v8;
    v24 = *(_DWORD *)(a1 + 12) + 1;
    v25 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v24;
    *(_DWORD *)(a1 + 16) = v25;
  }
  v26 = v8 >> 8;
  v44 = BYTE1(v8);
  if (v24 > v25)
  {
    *(_DWORD *)(a1 + 16) = v25 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v25) = BYTE1(v8);
    v29 = *(_DWORD *)(a1 + 12);
    v30 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v27 = v24;
    if (v24 == *(_DWORD *)(a1 + 8))
    {
      v39 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v24 + 1), (unint64_t)&v44);
      v27 = *(unsigned int *)(a1 + 12);
      v28 = *(_QWORD *)a1;
      LOBYTE(v26) = *v39;
    }
    else
    {
      v28 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v28 + v27) = v26;
    v29 = *(_DWORD *)(a1 + 12) + 1;
    v30 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = v30;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v45 = v10;
  if (v29 > v30)
  {
    *(_DWORD *)(a1 + 16) = v30 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v30) = v10;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v29 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v29 + 1), (unint64_t)&v45);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v29) = v10;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v10 >> 8;
  v46 = BYTE1(v10);
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = BYTE1(v10);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v40 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v46);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      LOBYTE(v33) = *v40;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpMov::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x8F, a3, a4, a5, a6, a7, a8);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 130);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, 143);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
  return 1;
}

uint64_t JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)1,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v9 = (a2 - 1073741808) < 0x80;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 128) < 0x90;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 128) < 0x90 : (a3 - 1073741808) < 0x80))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741808) < 0x80;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 128) < 0x90;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741808) < 0x80;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 128) < 0x90;
  if (!v15)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6D, a3, a4, a5, a6, a7, a8);
  v47 = 109;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 109;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v42 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v47);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v42;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 109;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = a2 + 16;
  if (a2 <= 0x3FFFFFFF)
    v23 = a2;
  v48 = v23;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = v23;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v43 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v48);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v43;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  v28 = v10 + 16;
  if (v10 <= 0x3FFFFFFF)
    v28 = v10;
  v49 = v28;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v28;
    v31 = *(_DWORD *)(a1 + 12);
    v32 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v29 = v26;
    if (v26 == *(_DWORD *)(a1 + 8))
    {
      v44 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v49);
      v29 = *(unsigned int *)(a1 + 12);
      v30 = *(_QWORD *)a1;
      v28 = *v44;
    }
    else
    {
      v30 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v30 + v29) = v28;
    v31 = *(_DWORD *)(a1 + 12) + 1;
    v32 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v31;
    *(_DWORD *)(a1 + 16) = v32;
  }
  v33 = v12 + 16;
  if (v12 <= 0x3FFFFFFF)
    v33 = v12;
  v50 = v33;
  if (v31 > v32)
  {
    *(_DWORD *)(a1 + 16) = v32 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v32) = v33;
    v36 = *(_DWORD *)(a1 + 12);
    v37 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v34 = v31;
    if (v31 == *(_DWORD *)(a1 + 8))
    {
      v45 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v31 + 1), (unint64_t)&v50);
      v34 = *(unsigned int *)(a1 + 12);
      v35 = *(_QWORD *)a1;
      v33 = *v45;
    }
    else
    {
      v35 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v35 + v34) = v33;
    v36 = *(_DWORD *)(a1 + 12) + 1;
    v37 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v36;
    *(_DWORD *)(a1 + 16) = v37;
  }
  v38 = v14 + 16;
  if (v14 <= 0x3FFFFFFF)
    v38 = v14;
  v51 = v38;
  if (v36 > v37)
  {
    *(_DWORD *)(a1 + 16) = v37 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v37) = v38;
  }
  else
  {
    v39 = v36;
    if (v36 == *(_DWORD *)(a1 + 8))
    {
      v46 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v36 + 1), (unint64_t)&v51);
      v39 = *(unsigned int *)(a1 + 12);
      v40 = *(_QWORD *)a1;
      v38 = *v46;
    }
    else
    {
      v40 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v40 + v39) = v38;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)2,true,JSC::BytecodeGenerator>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BOOL4 v9;
  int v10;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v8 = a2;
  v9 = (a2 - 1073741760) < 0x8000;
  if (a2 <= 0x3FFFFFFF)
    v9 = (a2 + 0x8000) >> 6 < 0x201;
  if (!v9)
    return 0;
  v10 = a3;
  if (!((int)a3 <= 0x3FFFFFFF ? (a3 + 0x8000) >> 6 < 0x201 : (a3 - 1073741760) < 0x8000))
    return 0;
  v12 = a4;
  v13 = (a4 - 1073741760) < 0x8000;
  if ((int)a4 <= 0x3FFFFFFF)
    v13 = (a4 + 0x8000) >> 6 < 0x201;
  if (!v13)
    return 0;
  v14 = a5;
  v15 = (a5 - 1073741760) < 0x8000;
  if ((int)a5 <= 0x3FFFFFFF)
    v15 = (a5 + 0x8000) >> 6 < 0x201;
  if (!v15)
    return 0;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6D, a3, a4, a5, a6, a7, a8);
  v61 = 0x80;
  v17 = *(unsigned int *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 16);
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 0x80;
    v21 = *(_DWORD *)(a1 + 12);
    v22 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v17 == *(_DWORD *)(a1 + 8))
    {
      v55 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v61);
      v17 = *(unsigned int *)(a1 + 12);
      v19 = *(_QWORD *)a1;
      v20 = *v55;
    }
    else
    {
      v19 = *(_QWORD *)a1;
      v20 = 0x80;
    }
    *(_BYTE *)(v19 + v17) = v20;
    v21 = *(_DWORD *)(a1 + 12) + 1;
    v22 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v21;
    *(_DWORD *)(a1 + 16) = v22;
  }
  v23 = 109;
  v62 = 109;
  if (v21 > v22)
  {
    *(_DWORD *)(a1 + 16) = v22 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v22) = 109;
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v24 = v21;
    if (v21 == *(_DWORD *)(a1 + 8))
    {
      v56 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v21 + 1), (unint64_t)&v62);
      v24 = *(unsigned int *)(a1 + 12);
      v25 = *(_QWORD *)a1;
      v23 = *v56;
    }
    else
    {
      v25 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v25 + v24) = v23;
    v26 = *(_DWORD *)(a1 + 12) + 1;
    v27 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v26;
    *(_DWORD *)(a1 + 16) = v27;
  }
  if (v8 > 0x3FFFFFFF)
    v8 += 64;
  v63 = v8;
  if (v26 > v27)
  {
    *(_DWORD *)(a1 + 16) = v27 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v27) = v8;
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v26 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v26 + 1), (unint64_t)&v63);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v26) = v8;
    v28 = *(_DWORD *)(a1 + 12) + 1;
    v29 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v28;
    *(_DWORD *)(a1 + 16) = v29;
  }
  v30 = v8 >> 8;
  v64 = BYTE1(v8);
  if (v28 > v29)
  {
    *(_DWORD *)(a1 + 16) = v29 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v29) = BYTE1(v8);
    v33 = *(_DWORD *)(a1 + 12);
    v34 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v31 = v28;
    if (v28 == *(_DWORD *)(a1 + 8))
    {
      v57 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v28 + 1), (unint64_t)&v64);
      v31 = *(unsigned int *)(a1 + 12);
      v32 = *(_QWORD *)a1;
      LOBYTE(v30) = *v57;
    }
    else
    {
      v32 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v32 + v31) = v30;
    v33 = *(_DWORD *)(a1 + 12) + 1;
    v34 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = v34;
  }
  if (v10 > 0x3FFFFFFF)
    v10 += 64;
  v65 = v10;
  if (v33 > v34)
  {
    *(_DWORD *)(a1 + 16) = v34 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v34) = v10;
    v35 = *(_DWORD *)(a1 + 12);
    v36 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v33 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v33 + 1), (unint64_t)&v65);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v33) = v10;
    v35 = *(_DWORD *)(a1 + 12) + 1;
    v36 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v35;
    *(_DWORD *)(a1 + 16) = v36;
  }
  v37 = v10 >> 8;
  v66 = BYTE1(v10);
  if (v35 > v36)
  {
    *(_DWORD *)(a1 + 16) = v36 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v36) = BYTE1(v10);
    v40 = *(_DWORD *)(a1 + 12);
    v41 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v38 = v35;
    if (v35 == *(_DWORD *)(a1 + 8))
    {
      v58 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v35 + 1), (unint64_t)&v66);
      v38 = *(unsigned int *)(a1 + 12);
      v39 = *(_QWORD *)a1;
      LOBYTE(v37) = *v58;
    }
    else
    {
      v39 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v39 + v38) = v37;
    v40 = *(_DWORD *)(a1 + 12) + 1;
    v41 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 16) = v41;
  }
  if (v12 > 0x3FFFFFFF)
    v12 += 64;
  v67 = v12;
  if (v40 > v41)
  {
    *(_DWORD *)(a1 + 16) = v41 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v41) = v12;
    v42 = *(_DWORD *)(a1 + 12);
    v43 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v40 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v40 + 1), (unint64_t)&v67);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v40) = v12;
    v42 = *(_DWORD *)(a1 + 12) + 1;
    v43 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v42;
    *(_DWORD *)(a1 + 16) = v43;
  }
  v44 = v12 >> 8;
  v68 = BYTE1(v12);
  if (v42 > v43)
  {
    *(_DWORD *)(a1 + 16) = v43 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v43) = BYTE1(v12);
    v47 = *(_DWORD *)(a1 + 12);
    v48 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v45 = v42;
    if (v42 == *(_DWORD *)(a1 + 8))
    {
      v59 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v42 + 1), (unint64_t)&v68);
      v45 = *(unsigned int *)(a1 + 12);
      v46 = *(_QWORD *)a1;
      LOBYTE(v44) = *v59;
    }
    else
    {
      v46 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v46 + v45) = v44;
    v47 = *(_DWORD *)(a1 + 12) + 1;
    v48 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v47;
    *(_DWORD *)(a1 + 16) = v48;
  }
  if (v14 > 0x3FFFFFFF)
    v14 += 64;
  v69 = v14;
  if (v47 > v48)
  {
    *(_DWORD *)(a1 + 16) = v48 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v48) = v14;
    v49 = *(_DWORD *)(a1 + 12);
    v50 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if (v47 == *(_DWORD *)(a1 + 8))
      *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v47 + 1), (unint64_t)&v69);
    else
      *(_BYTE *)(*(_QWORD *)a1 + v47) = v14;
    v49 = *(_DWORD *)(a1 + 12) + 1;
    v50 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v49;
    *(_DWORD *)(a1 + 16) = v50;
  }
  v51 = v14 >> 8;
  v70 = BYTE1(v14);
  if (v49 > v50)
  {
    *(_DWORD *)(a1 + 16) = v50 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v50) = BYTE1(v14);
  }
  else
  {
    v52 = v49;
    if (v49 == *(_DWORD *)(a1 + 8))
    {
      v60 = (_BYTE *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v49 + 1), (unint64_t)&v70);
      v52 = *(unsigned int *)(a1 + 12);
      v53 = *(_QWORD *)a1;
      LOBYTE(v51) = *v60;
    }
    else
    {
      v53 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v53 + v52) = v51;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  return 1;
}

uint64_t JSC::OpCreateLexicalEnvironment::emitImpl<(JSC::OpcodeSize)4,true,JSC::BytecodeGenerator>(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char v25;
  char v26;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::recordOpcode(a1, (void *)0x6D, a3, a4, a5, a6, a7, a8);
  v25 = -126;
  v13 = *(unsigned int *)(a1 + 12);
  v14 = *(unsigned int *)(a1 + 16);
  if (v13 > v14)
  {
    *(_DWORD *)(a1 + 16) = v14 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v14) = -126;
    v17 = *(_DWORD *)(a1 + 12);
    v18 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
    {
      v23 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v13 + 1), (unint64_t)&v25);
      v13 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
      v16 = *v23;
    }
    else
    {
      v15 = *(_QWORD *)a1;
      v16 = -126;
    }
    *(_BYTE *)(v15 + v13) = v16;
    v17 = *(_DWORD *)(a1 + 12) + 1;
    v18 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 12) = v17;
    *(_DWORD *)(a1 + 16) = v18;
  }
  v19 = 109;
  v26 = 109;
  if (v17 > v18)
  {
    *(_DWORD *)(a1 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a1 + v18) = 109;
  }
  else
  {
    v20 = v17;
    if (v17 == *(_DWORD *)(a1 + 8))
    {
      v24 = (char *)WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(v17 + 1), (unint64_t)&v26);
      v20 = *(unsigned int *)(a1 + 12);
      v21 = *(_QWORD *)a1;
      v19 = *v24;
    }
    else
    {
      v21 = *(_QWORD *)a1;
    }
    *(_BYTE *)(v21 + v20) = v19;
    *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x100000001);
  }
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, a2);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v10);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v9);
  JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::write(a1, v8);
  return 1;
}

void WTF::RobinHoodHashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::BytecodeIntrinsicRegistry::Entry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::BytecodeIntrinsicRegistry::Entry>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  char *v31;
  unint64_t v32;
  __int128 v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char *v42;
  __int128 v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF *v80;
  __int128 v81;
  uint64_t v82;

  v79 = *(unsigned int *)(a1 + 8);
  v80 = *(WTF **)a1;
  v4 = WTF::fastMalloc((WTF *)(32 * a2));
  if (a2)
  {
    v12 = a2;
    v13 = v4;
    do
    {
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      v13 += 32;
      --v12;
    }
    while (v12);
  }
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = a2;
  v14 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v16 >> 31) ^ v16;
  *(_BYTE *)(a1 + 20) = 0;
  v17 = v79;
  if ((_DWORD)v79)
  {
    v18 = 0;
    v19 = (unint64_t)v80;
    do
    {
      v20 = (WTF::StringImpl **)(v19 + 32 * v18);
      v21 = *v20;
      if (*v20)
      {
        v22 = *((_DWORD *)v21 + 4);
        if ((v22 & 0x20) != 0)
          v22 = *((_DWORD *)v21 + 8);
        v23 = *(_DWORD *)(a1 + 8);
        v24 = v23 - 1;
        v25 = *(_DWORD *)(a1 + 16);
        v26 = (v25 ^ (v22 >> 8)) & (v23 - 1);
        v27 = *(WTF **)a1;
        v28 = (WTF::StringImpl **)(*(_QWORD *)a1 + 32 * v26);
        v29 = *v28;
        if (*v28)
        {
          v35 = 0;
          do
          {
            v36 = *((_DWORD *)v29 + 4);
            if ((v36 & 0x20) != 0)
              v36 = *((_DWORD *)v29 + 8);
            v37 = (v26 + v23 - ((v25 ^ (v36 >> 8)) & v24)) & v24;
            if (v35 > v37)
            {
              v38 = v19 + 32 * v18;
              v39 = *v20;
              *v20 = 0;
              v81 = *(_OWORD *)(v38 + 8);
              v82 = *(_QWORD *)(v38 + 24);
              v40 = *v28;
              *v28 = 0;
              v41 = *v20;
              *v20 = v40;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                {
                  v77 = v19 + 32 * v18;
                  v78 = v39;
                  WTF::StringImpl::~StringImpl(v41, v5, v6, v7, v8, v9, v10, v11);
                  WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
                  v38 = v77;
                  v39 = v78;
                  v17 = v79;
                  v19 = (unint64_t)v80;
                }
                else
                {
                  *(_DWORD *)v41 -= 2;
                }
              }
              v42 = (char *)v27 + 32 * v26;
              v43 = *(_OWORD *)(v42 + 8);
              *(_BYTE *)(v38 + 24) = v42[24];
              *(_OWORD *)(v38 + 8) = v43;
              v44 = *v28;
              *v28 = v39;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                {
                  WTF::StringImpl::~StringImpl(v44, v5, v6, v7, v8, v9, v10, v11);
                  WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
                  v17 = v79;
                  v19 = (unint64_t)v80;
                }
                else
                {
                  *(_DWORD *)v44 -= 2;
                }
              }
              v42[24] = v82;
              *(_OWORD *)(v42 + 8) = v81;
              v27 = *(WTF **)a1;
              v35 = v37;
            }
            v26 = ((_DWORD)v26 + 1) & v24;
            ++v35;
            v28 = (WTF::StringImpl **)((char *)v27 + 32 * v26);
            v29 = *v28;
          }
          while (*v28);
          v21 = *v20;
        }
        *v20 = 0;
        v30 = *v28;
        *v28 = v21;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, v5, v6, v7, v8, v9, v10, v11);
            WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
            v17 = v79;
            v19 = (unint64_t)v80;
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
        v31 = (char *)v27 + 32 * v26;
        v32 = v19 + 32 * v18;
        v33 = *(_OWORD *)(v32 + 8);
        v31[24] = *(_BYTE *)(v32 + 24);
        *(_OWORD *)(v31 + 8) = v33;
        v34 = *v20;
        *v20 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, v5, v6, v7, v8, v9, v10, v11);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
            v17 = v79;
            v19 = (unint64_t)v80;
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      else
      {
        *v20 = 0;
      }
      ++v18;
    }
    while (v18 != v17);
  }
  else
  {
    v19 = (unint64_t)v80;
    if (!v80)
      return;
  }
  WTF::fastFree(v19, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexDef<JSC::CodeBlock,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_1>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_1 const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) &= ~(1 << ~(_BYTE)a2);
  return result;
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::VirtualRegister),void JSC::BytecodeLivenessPropagation::stepOverBytecodeIndexUse<JSC::CodeBlock,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_0>(JSC::CodeBlock *,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>> const&,JSC::BytecodeGraph &,JSC::BytecodeIndex,JSC::BytecodeLivenessAnalysis::computeFullLiveness(JSC::CodeBlock*)::$_0 const&)::{lambda(JSC::VirtualRegister)#1}>::implFunction(uint64_t result, int a2)
{
  if (a2 < 0)
    *(_DWORD *)(***(_QWORD ***)(result + 16) + 4 * (~a2 >> 5)) |= 1 << ~(_BYTE)a2;
  return result;
}

void WTF::VectorTypeOperations<JSC::BytecodeRewriter::Insertion>::move(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    do
    {
      v11 = v10[2];
      *(_OWORD *)v8 = *(_OWORD *)v10;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 16) = v11;
      v12 = v10[3];
      v10[3] = 0;
      *(_QWORD *)(v8 + 24) = v12;
      LODWORD(v12) = *((_DWORD *)v10 + 8);
      *((_DWORD *)v10 + 8) = 0;
      *(_DWORD *)(v8 + 32) = v12;
      LODWORD(v12) = *((_DWORD *)v10 + 9);
      *((_DWORD *)v10 + 9) = 0;
      *(_DWORD *)(v8 + 36) = v12;
      LODWORD(v12) = *((_DWORD *)v10 + 10);
      *(_BYTE *)(v8 + 44) = *((_BYTE *)v10 + 44);
      *(_DWORD *)(v8 + 40) = v12;
      v13 = v10[3];
      if (v13)
      {
        v10[3] = 0;
        *((_DWORD *)v10 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 6;
      v8 += 48;
    }
    while (v10 != a2);
  }
}

uint64_t WTF::VectorBuffer<JSC::BytecodeRewriter::Insertion,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 9)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
  }
  else if (a2 >= 0x5555556)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = 48 * a2;
    result = WTF::fastMalloc((WTF *)(48 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJeqNull,JSC::UnlinkedCodeBlockGenerator *&>(JSC::UnlinkedCodeBlockGenerator **a1, uint64_t a2)
{
  JSC::UnlinkedCodeBlockGenerator *v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int8 v7[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqNull>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), (uint64_t)&v6);
  v4 = *a1;
  result = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  if (!(_DWORD)result)
    return JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v4, *(_DWORD *)(a2 + 8));
  return result;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJneqPtr,JSC::UnlinkedCodeBlockGenerator *&>(JSC::UnlinkedCodeBlockGenerator **a1, uint64_t a2)
{
  JSC::UnlinkedCodeBlockGenerator *v4;
  uint64_t result;
  _BYTE v6[8];
  unsigned __int8 v7[32];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJneqPtr>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), (uint64_t)v6);
  v4 = *a1;
  result = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  if (!(_DWORD)result)
    return JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v4, *(_DWORD *)(a2 + 8));
  return result;
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJless,JSC::UnlinkedCodeBlockGenerator *&>(JSC::UnlinkedCodeBlockGenerator **a1, uint64_t a2)
{
  JSC::UnlinkedCodeBlockGenerator *v4;
  uint64_t result;
  int8x8_t v6;
  unsigned __int8 v7[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJless>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), &v6);
  v4 = *a1;
  result = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  if (!(_DWORD)result)
    return JSC::UnlinkedCodeBlockGenerator::outOfLineJumpOffset(v4, *(_DWORD *)(a2 + 8));
  return result;
}

uint64_t JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(unsigned __int8 *a1)
{
  int v1;
  uint64_t result;

  v1 = *a1;
  if (!*a1)
    return *((unsigned int *)a1 + 4);
  if (v1 == 2)
    return (*((_DWORD *)a1 + 4) - *(_DWORD *)(*((_QWORD *)a1 + 1) + 16));
  if (v1 == 1)
    return 0;
  result = 83;
  __break(0xC471u);
  return result;
}

__n128 WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BytecodeRewriter::Insertion>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  uint64_t v10;
  __n128 result;
  unint64_t v12;
  unint64_t v13;

  v9 = (__n128 *)WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  result = *v9;
  v12 = v9[1].n128_u64[0];
  *(__n128 *)v10 = *v9;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = v12;
  v13 = v9[1].n128_u64[1];
  v9[1].n128_u64[1] = 0;
  *(_QWORD *)(v10 + 24) = v13;
  LODWORD(v13) = v9[2].n128_u32[0];
  v9[2].n128_u32[0] = 0;
  *(_DWORD *)(v10 + 32) = v13;
  LODWORD(v13) = v9[2].n128_u32[1];
  v9[2].n128_u32[1] = 0;
  *(_DWORD *)(v10 + 36) = v13;
  LODWORD(v13) = v9[2].n128_u32[2];
  *(_BYTE *)(v10 + 44) = v9[2].n128_u8[12];
  *(_DWORD *)(v10 + 40) = v13;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 48 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (unint64_t)a2);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 9)
  {
    v16 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    goto LABEL_12;
  }
  if (v13 < 0x5555556)
  {
    v15 = 48 * v13;
    v16 = WTF::fastMalloc((WTF *)(48 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v14)
    {
      v17 = 48 * v14;
      v18 = v10 + 24;
      do
      {
        v19 = *(_QWORD *)(v18 - 8);
        *(_OWORD *)v16 = *(_OWORD *)(v18 - 24);
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 0;
        *(_QWORD *)(v16 + 16) = v19;
        v20 = *(_QWORD *)v18;
        *(_QWORD *)v18 = 0;
        *(_QWORD *)(v16 + 24) = v20;
        LODWORD(v20) = *(_DWORD *)(v18 + 8);
        *(_DWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v16 + 32) = v20;
        LODWORD(v20) = *(_DWORD *)(v18 + 12);
        *(_DWORD *)(v18 + 12) = 0;
        *(_DWORD *)(v16 + 36) = v20;
        LODWORD(v20) = *(_DWORD *)(v18 + 16);
        *(_BYTE *)(v16 + 44) = *(_BYTE *)(v18 + 20);
        *(_DWORD *)(v16 + 40) = v20;
        v21 = *(_QWORD *)v18;
        if (*(_QWORD *)v18)
        {
          *(_QWORD *)v18 = 0;
          *(_DWORD *)(v18 + 8) = 0;
          WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
        }
        v18 += 48;
        v16 += 48;
        v17 -= 48;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::BytecodeRewriter::Insertion,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 > a2)
    a2 = v4;
  if (a2 > v2)
  {
    v6 = *(_QWORD **)a1;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<JSC::BytecodeRewriter::Insertion,8ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorTypeOperations<JSC::BytecodeRewriter::Insertion>::move(v6, v7, *(_QWORD *)a1, v8, v9, v10, v11, v12);
    if ((_QWORD *)(a1 + 16) != v6 && v6 != 0)
    {
      if (*(_QWORD **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v6, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJeqNull,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned __int8 v7[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqNull>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), (uint64_t)&v6);
  v4 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  return JSC::jumpTargetForInstruction<WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>>(*a1, *(_DWORD *)(a2 + 8), v4);
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJeqPtr,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int8x8_t v6;
  unsigned __int8 v7[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJeqPtr>(&v6, (unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)));
  v4 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  return JSC::jumpTargetForInstruction<WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>>(*a1, *(_DWORD *)(a2 + 8), v4);
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJneqPtr,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[8];
  unsigned __int8 v7[32];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJneqPtr>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), (uint64_t)v6);
  v4 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  return JSC::jumpTargetForInstruction<WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>>(*a1, *(_DWORD *)(a2 + 8), v4);
}

uint64_t JSC::jumpTargetForInstruction<JSC::OpJless,WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits> &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int8x8_t v6;
  unsigned __int8 v7[24];

  JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpJless>((unsigned __int8 *)(**(_QWORD **)a2 + *(unsigned int *)(a2 + 8)), &v6);
  v4 = JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::operator int(v7);
  return JSC::jumpTargetForInstruction<WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>>(*a1, *(_DWORD *)(a2 + 8), v4);
}

uint64_t JSC::jumpTargetForInstruction<WTF::HashMap<unsigned int,int,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<int>,WTF::HashTableTraits>>(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  if (!(_DWORD)a3)
  {
    if (a1)
    {
      v4 = *(_DWORD *)(a1 - 8);
      v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
      v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
      v7 = v4 & (v6 ^ HIWORD(v6));
      v8 = *(_DWORD *)(a1 + 8 * v7);
      if (v8 == a2)
        return *(unsigned int *)(a1 + 8 * v7 + 4);
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v4;
        v8 = *(_DWORD *)(a1 + 8 * v7);
        ++v9;
        if (v8 == a2)
          return *(unsigned int *)(a1 + 8 * v7 + 4);
      }
    }
    return 0;
  }
  return a3;
}

uint64_t JSC::OpPutByValWithThis::OpPutByValWithThis(uint64_t this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *(_DWORD *)this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  *(_DWORD *)(this + 4) = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  *(_DWORD *)(this + 8) = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  *(_DWORD *)(this + 12) = v5;
  *(_BYTE *)(this + 16) = *((_BYTE *)a2 + 8);
  return this;
}

unsigned __int8 *JSC::OpDefineAccessorProperty::decode@<X0>(unsigned __int8 *this@<X0>, int8x16_t *a2@<X8>, int8x8_t a3@<D0>)
{
  int v4;
  int v5;
  int16x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;
  BOOL v10;
  int16x4_t v11;
  int32x4_t v12;
  int32x4_t v13;

  v4 = *this;
  if (v4 == 128)
  {
    v6 = *(int16x4_t *)(this + 2);
    v7 = vmovl_s16(v6);
    v8.i64[0] = 0x3F0000003FLL;
    v8.i64[1] = 0x3F0000003FLL;
    *a2 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v8), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFC0u), v6), (int8x16_t)v7);
    v9 = *((__int16 *)this + 5);
    v5 = v9 + 1073741760;
    v10 = v9 <= 63;
  }
  else
  {
    if (v4 == 130)
    {
      *a2 = *(int8x16_t *)(this + 2);
      v5 = *(_DWORD *)(this + 18);
      goto LABEL_9;
    }
    a3.i32[0] = *(_DWORD *)(this + 1);
    v11 = (int16x4_t)vmovl_s8(a3).u64[0];
    v12 = vmovl_s16(v11);
    v13.i64[0] = 0xF0000000FLL;
    v13.i64[1] = 0xF0000000FLL;
    *a2 = vbslq_s8((int8x16_t)vcgtq_s32(v12, v13), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v11), (int8x16_t)v12);
    v9 = (char)this[5];
    v5 = v9 + 1073741808;
    v10 = v9 <= 15;
  }
  if (v10)
    v5 = v9;
LABEL_9:
  a2[1].i32[0] = v5;
  return this;
}

int *JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  this[4] = v6;
  v7 = a2[6];
  this[5] = a2[5];
  this[6] = v7;
  return this;
}

int *JSC::OpGetByValWithThis::OpGetByValWithThis(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = a2[5];
  this[4] = a2[4];
  this[5] = v6;
  return this;
}

int *JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(int *this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  this[1] = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  this[2] = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  this[3] = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  this[4] = v6;
  v7 = *((__int16 *)a2 + 5);
  if (v7 > 63)
    v7 += 1073741760;
  this[5] = v7;
  v8 = a2[7];
  this[6] = a2[6];
  this[7] = v8;
  return this;
}

int *JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(int *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(char *)a2;
  if (v2 > 15)
    v2 += 1073741808;
  *this = v2;
  v3 = *((char *)a2 + 1);
  if (v3 > 15)
    v3 += 1073741808;
  this[1] = v3;
  v4 = *((char *)a2 + 2);
  if (v4 > 15)
    v4 += 1073741808;
  this[2] = v4;
  v5 = *((char *)a2 + 3);
  if (v5 > 15)
    v5 += 1073741808;
  this[3] = v5;
  v6 = *((char *)a2 + 4);
  if (v6 > 15)
    v6 += 1073741808;
  this[4] = v6;
  v7 = *((char *)a2 + 5);
  if (v7 > 15)
    v7 += 1073741808;
  this[5] = v7;
  this[6] = a2[6];
  this[7] = a2[7];
  return this;
}

int *JSC::OpEnumeratorInByVal::OpEnumeratorInByVal(int *this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(char *)a2;
  if (v2 > 15)
    v2 += 1073741808;
  *this = v2;
  v3 = *((char *)a2 + 1);
  if (v3 > 15)
    v3 += 1073741808;
  this[1] = v3;
  v4 = *((char *)a2 + 2);
  if (v4 > 15)
    v4 += 1073741808;
  this[2] = v4;
  v5 = *((char *)a2 + 3);
  if (v5 > 15)
    v5 += 1073741808;
  this[3] = v5;
  v6 = *((char *)a2 + 4);
  if (v6 > 15)
    v6 += 1073741808;
  this[4] = v6;
  v7 = *((char *)a2 + 5);
  if (v7 > 15)
    v7 += 1073741808;
  this[5] = v7;
  this[6] = a2[6];
  return this;
}

uint64_t JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal(uint64_t this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *(_DWORD *)this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  *(_DWORD *)(this + 4) = v3;
  v4 = *((__int16 *)a2 + 2);
  if (v4 > 63)
    v4 += 1073741760;
  *(_DWORD *)(this + 8) = v4;
  v5 = *((__int16 *)a2 + 3);
  if (v5 > 63)
    v5 += 1073741760;
  *(_DWORD *)(this + 12) = v5;
  v6 = *((__int16 *)a2 + 4);
  if (v6 > 63)
    v6 += 1073741760;
  *(_DWORD *)(this + 16) = v6;
  v7 = *((__int16 *)a2 + 5);
  if (v7 > 63)
    v7 += 1073741760;
  *(_DWORD *)(this + 20) = v7;
  *(_BYTE *)(this + 24) = *((_BYTE *)a2 + 12);
  *(_DWORD *)(this + 28) = a2[7];
  return this;
}

uint64_t JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal(uint64_t this, const unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(char *)a2;
  if (v2 > 15)
    v2 += 1073741808;
  *(_DWORD *)this = v2;
  v3 = *((char *)a2 + 1);
  if (v3 > 15)
    v3 += 1073741808;
  *(_DWORD *)(this + 4) = v3;
  v4 = *((char *)a2 + 2);
  if (v4 > 15)
    v4 += 1073741808;
  *(_DWORD *)(this + 8) = v4;
  v5 = *((char *)a2 + 3);
  if (v5 > 15)
    v5 += 1073741808;
  *(_DWORD *)(this + 12) = v5;
  v6 = *((char *)a2 + 4);
  if (v6 > 15)
    v6 += 1073741808;
  *(_DWORD *)(this + 16) = v6;
  v7 = *((char *)a2 + 5);
  if (v7 > 15)
    v7 += 1073741808;
  *(_DWORD *)(this + 20) = v7;
  *(_BYTE *)(this + 24) = a2[6];
  *(_DWORD *)(this + 28) = a2[7];
  return this;
}

uint64_t JSC::OpCallDirectEval::OpCallDirectEval(uint64_t this, const unsigned __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v2 = *(__int16 *)a2;
  if (v2 > 63)
    v2 += 1073741760;
  *(_DWORD *)this = v2;
  v3 = *((__int16 *)a2 + 1);
  if (v3 > 63)
    v3 += 1073741760;
  *(_DWORD *)(this + 4) = v3;
  v4 = a2[3];
  *(_DWORD *)(this + 8) = a2[2];
  *(_DWORD *)(this + 12) = v4;
  v5 = *((__int16 *)a2 + 4);
  if (v5 > 63)
    v5 += 1073741760;
  *(_DWORD *)(this + 16) = v5;
  v6 = *((__int16 *)a2 + 5);
  if (v6 > 63)
    v6 += 1073741760;
  *(_DWORD *)(this + 20) = v6;
  *(_BYTE *)(this + 24) = *((_BYTE *)a2 + 12);
  v7 = a2[8];
  *(_DWORD *)(this + 28) = a2[7];
  *(_DWORD *)(this + 32) = v7;
  return this;
}

uint64_t WTF::dataLog<char [25],WTF::RawPointer,char [2]>(const char *a1, const void **a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%p", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [4],JSC::CodeOrigin,char [3],WTF::RawPointer,char [25],WTF::ListDump<WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,char [16],WTF::RawPointer,char [2],char [2]>(const char *a1, JSC::CodeOrigin *a2, const char *a3, const void **a4, const char *a5, JSC::CallVariant ***a6, const char *a7, const void **a8, const char *a9, const char *a10)
{
  unint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  char v22;
  char **v23;
  char *v24;

  v18 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v18 != -1)
  {
    v24 = &v22;
    v23 = &v24;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v19 = WTF::s_file;
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v20, "%s", a1);
  JSC::CodeOrigin::dump(a2, v20);
  WTF::PrintStream::printf(v20, "%s", a3);
  WTF::PrintStream::printf(v20, "%p", *a4);
  WTF::PrintStream::printf(v20, "%s", a5);
  WTF::ListDump<WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(a6, (uint64_t)v20);
  WTF::PrintStream::printf(v20, "%s", a7);
  WTF::PrintStream::printf(v20, "%p", *a8);
  WTF::PrintStream::printf(v20, "%s", a9);
  WTF::PrintStream::printf(v20, "%s", a10);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
}

JSC::CallVariant ***WTF::ListDump<WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(JSC::CallVariant ***result, uint64_t a2)
{
  JSC::CallVariant ***v3;
  JSC::CallVariant *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  JSC::CallVariant **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  JSC::CallVariant **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v20, v13);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v20, v18);
        }
        else
        {
          WTF::CString::CString(&v20, &str_25, 0);
          v21 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v20);
        if (v21 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v21])(&v22, &v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::CallVariant::dump(v4, v5);
      result = (JSC::CallVariant ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::CallVariant *)((char *)v4 + 8);
    }
    while (v4 != (JSC::CallVariant *)((char *)**v3 + 8 * *((unsigned int *)*v3 + 3)));
  }
  return result;
}

uint64_t WTF::dataLog<char [18],WTF::RawPointer,char [3],JSC::CodeBlockHash,char [3],char [2]>(const char *a1, const void **a2, const char *a3, _DWORD *a4, const char *a5, const char *a6)
{
  unint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  int v15;
  WTF::PrintStream *v16;
  char v18;
  char **v19;
  char *v20;

  v12 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v12 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v13 = WTF::s_file;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v14, "%s", a1);
  WTF::PrintStream::printf(v14, "%p", *a2);
  WTF::PrintStream::printf(v14, "%s", a3);
  v15 = (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a4 / 0x3A2F8u - 62 * ((unsigned __int16)((16913 * (*a4 / 0x3A2F8u)) >> 16) >> 4))] << 16) | (WTF::integerToSixCharacterHashString::table[(*a4 / 0xF04u - 62 * ((69273667 * (unint64_t)(*a4 / 0xF04u)) >> 32))] << 24) | (WTF::integerToSixCharacterHashString::table[(unsigned __int16)(*a4 / 0xE17810u - 62 * ((1058 * (*a4 / 0xE17810u)) >> 16))] << 8) | WTF::integerToSixCharacterHashString::table[*a4 / 0x369B13E0uLL];
  WORD2(v20) = (((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 % 0x3Eu] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[*a4 / 0x3Eu - 62 * (((138547333 * (unint64_t)(*a4 / 0x3Eu)) >> 32) >> 1)] << 32)) >> 32;
  LODWORD(v20) = v15;
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
  WTF::PrintStream::printf(v16, "%.*s", 6, (const char *)&v20);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
  WTF::PrintStream::printf(v14, "%s", a5);
  WTF::PrintStream::printf(v14, "%s", a6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
}

uint64_t WTF::dataLog<char [18],WTF::RawPointer,char [2],char [2]>(const char *a1, const void **a2, const char *a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", a1);
  WTF::PrintStream::printf(v10, "%p", *a2);
  WTF::PrintStream::printf(v10, "%s", a3);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<char [18],WTF::RawPointer,char [3],WTF::PointerDump<JSC::CodeBlock>,char [3],char [2]>(const char *a1, const void **a2, const char *a3, uint64_t *a4, const char *a5, const char *a6)
{
  unint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  char v17;
  char **v18;
  char *v19;

  v12 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v12 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v13 = WTF::s_file;
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v14, "%s", a1);
  WTF::PrintStream::printf(v14, "%p", *a2);
  WTF::PrintStream::printf(v14, "%s", a3);
  if (*a4)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a4);
  }
  else
  {
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
    WTF::PrintStream::printf(v15, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
  }
  WTF::PrintStream::printf(v14, "%s", a5);
  WTF::PrintStream::printf(v14, "%s", a6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DirectCallLinkInfo::emitDirectFastPath(JSC::CCallHelpers &)::$_0>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v6 || v5 + a2[1] < v6)
    goto LABEL_15;
  v7 = *(_QWORD *)(result + 16);
  v8 = *(_DWORD *)(result + 28);
  *(_QWORD *)(v7 + 72) = v6;
  *(_BYTE *)(v7 + 80) = (v8 & 4) != 0;
  v9 = *(_DWORD *)(result + 32);
  v10 = v9 < 4 ? 0 : *(_DWORD *)((v9 & 0xFFFFFFFC) + a2[3] - 4);
  v11 = (v9 - v10);
  v12 = a2[23];
  v13 = v11 + v12;
  if (v12 > v13 || v12 + a2[1] < v13)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198142D8CLL);
  }
  *(_QWORD *)(v7 + 64) = v13;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DirectCallLinkInfo::emitDirectFastPath(JSC::CCallHelpers &)::$_1>::run(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DirectCallLinkInfo::repatchSpeculatively(*(JSC::DirectCallLinkInfo **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DirectCallLinkInfo::emitDirectTailCallFastPath(JSC::CCallHelpers &,WTF::ScopedLambda<void ()(void)> &&)::$_0>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 > v6 || v5 + a2[1] < v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v7 + 56) = v6;
  v8 = *(_DWORD *)(result + 28);
  if (v8 < 4)
    v9 = 0;
  else
    v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a2[3] - 4);
  v10 = (v8 - v9);
  v11 = a2[23];
  v12 = v10 + v11;
  if (v11 > v12 || v11 + a2[1] < v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198142EF8);
  }
  v14 = *(_DWORD *)(result + 32);
  *(_QWORD *)(v7 + 72) = v12;
  *(_BYTE *)(v7 + 80) = (v14 & 4) != 0;
  v15 = *(_DWORD *)(result + 36);
  v16 = v15 < 4 ? 0 : *(_DWORD *)((v15 & 0xFFFFFFFC) + a2[3] - 4);
  v17 = (v15 - v16);
  v18 = a2[23];
  v19 = v17 + v18;
  if (v18 > v19 || v18 + a2[1] < v19)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198142ED8);
  }
  *(_QWORD *)(v7 + 64) = v19;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::DirectCallLinkInfo::emitDirectTailCallFastPath(JSC::CCallHelpers &,WTF::ScopedLambda<void ()(void)> &&)::$_1>::run(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DirectCallLinkInfo::repatchSpeculatively(*(JSC::DirectCallLinkInfo **)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
}

void JSC::ARM64Assembler::replaceWithJump(JSC::ARM64Assembler *this, _BYTE *a2, void *a3)
{
  uint64_t v4;
  int v5;
  BOOL v7;
  JSC::ExecutableAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v4 = a2 - (_BYTE *)this;
  if ((unint64_t)(((a2 - (_BYTE *)this) >> 2) + 0x2000000) >> 26)
  {
    v9 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(this);
    v4 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v9, (unint64_t)this, (unint64_t)a2, v10, v11, v12, v13, v14)- (_QWORD)this;
    if ((unint64_t)((v4 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x1981430C4);
    }
  }
  v5 = (v4 >> 2) & 0x3FFFFFF | 0x14000000;
  v16 = v5;
  if ((JSC::ARM64Assembler *)(((unint64_t)this + 3) & 0xFFFFFFFFFFFFFFFCLL) != this)
  {
    __break(0xC471u);
    JUMPOUT(0x198143028);
  }
  if (qword_1ECF4C1F8 > (unint64_t)this || qword_1ECF4C200 <= (unint64_t)this)
    goto LABEL_30;
  if ((unint64_t)&v16 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x198143048);
  }
  if (qword_1ECF4C1F0)
    v7 = qword_1ECF4C200 >= (unint64_t)this + 4;
  else
    v7 = 0;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x198143068);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(this, &v16, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)this = v16;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
  }
  else
  {
    if (!off_1ECF4C228)
    {
      v5 = v16;
LABEL_30:
      *(_DWORD *)this = v5;
      goto LABEL_18;
    }
    if (qword_1ECF4C1F0)
      v15 = qword_1ECF4C1F8;
    else
      v15 = 0;
    ((void (*)(char *, int *, uint64_t))off_1ECF4C228)((char *)this - v15, &v16, 4);
    if ((unint64_t)&v16 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x19814311CLL);
    }
  }
LABEL_18:
  sys_icache_invalidate(this, 4uLL);
}

void JSC::ARM64Assembler::relinkJumpOrCall<(JSC::ARM64Assembler::BranchType)0>(JSC::ExecutableAllocator *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v8;
  unsigned int v9;
  int v10;
  char v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  JSC::ExecutableAllocator *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (*(_DWORD *)a1 == -721215457)
  {
    v8 = (unint64_t)a1 - 4;
    v9 = *((_DWORD *)a1 - 1);
    v10 = (int)(v9 << 8) >> 13;
    if (v9 >> 25 == 42)
    {
      JSC::ARM64Assembler::linkConditionalBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(*((_DWORD *)a1 - 1) & 0xF ^ (v10 == 8), (unint64_t)a1 - 4, a2 - 4, a3);
      return;
    }
    v11 = v9 & 0x1F;
    if ((v9 & 0x7E000000) == 0x34000000)
    {
      if (v10 == 8)
        v12 = !(v9 & 0x1000000);
      else
        v12 = HIBYTE(v9) & 1;
      JSC::ARM64Assembler::linkCompareAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(v12, v9 >> 31, v11, v8, a2 - 4, a3);
      return;
    }
    if ((v9 & 0x7E000000) == 0x36000000)
    {
      JSC::ARM64Assembler::linkTestAndBranch<(JSC::ARM64Assembler::BranchTargetType)1,(JSC::MachineCodeCopyMode)1>(HIBYTE(v9) & 1 ^ ((v9 & 0x7FFE0) == 256), (v9 >> 26) & 0x20 | (v9 >> 19) & 0x1F, v11, v8, a2 - 4, a3);
      return;
    }
  }
  v5 = a3 - a2;
  if ((unint64_t)(((uint64_t)(a3 - a2) >> 2) + 0x2000000) >> 26)
  {
    v14 = a3;
    v16 = (JSC::ExecutableAllocator *)JSC::ExecutableAllocator::singleton(a1);
    v5 = JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(v16, a2, v14, v17, v18, v19, v20, v21) - a2;
    if ((unint64_t)((v5 >> 2) + 0x2000000) >> 26)
    {
      __break(0xC471u);
      JUMPOUT(0x198143390);
    }
  }
  v6 = (v5 >> 2) & 0x3FFFFFF | 0x14000000;
  v22 = v6;
  if ((JSC::ExecutableAllocator *)(((unint64_t)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x19814328CLL);
  }
  if (qword_1ECF4C1F8 > (unint64_t)a1 || qword_1ECF4C200 <= (unint64_t)a1)
    goto LABEL_33;
  if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x1981432ACLL);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)a1 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1981432CCLL);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(a1, &v22, (char *)4);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_DWORD *)a1 = v22;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
  }
  else
  {
    if (!off_1ECF4C228)
    {
      v6 = v22;
LABEL_33:
      *(_DWORD *)a1 = v6;
      return;
    }
    if (qword_1ECF4C1F0)
      v13 = qword_1ECF4C1F8;
    else
      v13 = 0;
    off_1ECF4C228((char *)a1 - v13, &v22, 4);
    if ((unint64_t)&v22 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x198143338);
    }
  }
}

void JSC::ARM64Assembler::replaceWithNops(JSC::ARM64Assembler *this, size_t len)
{
  size_t v4;
  JSC::ARM64Assembler *v5;
  JSC *v6;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((len & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198143554);
  }
  if ((JSC::ARM64Assembler *)(((unint64_t)this + 3) & 0xFFFFFFFFFFFFFFFCLL) != this)
  {
    __break(0xC471u);
    JUMPOUT(0x198143574);
  }
  if (len >= 4)
  {
    v4 = len >> 2;
    v5 = this;
    v6 = this;
    while (1)
    {
      v11 = -721215457;
      if (v6 != (JSC *)(((unint64_t)v5 + 3) & 0xFFFFFFFFFFFFFFFCLL))
      {
        __break(0xC471u);
        JUMPOUT(0x198143594);
      }
      if (qword_1ECF4C1F8 > (unint64_t)v6 || qword_1ECF4C200 <= (unint64_t)v6)
        break;
      if ((unint64_t)&v11 - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x1981435B4);
      }
      if (qword_1ECF4C1F0)
        v8 = qword_1ECF4C200 >= (unint64_t)v6 + 4;
      else
        v8 = 0;
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1981435D4);
      }
      if (qword_1ECF4C748)
        JSC::dumpJITMemory(v6, &v11, (char *)4);
      if (!byte_1ECF4C1E4)
      {
        if (off_1ECF4C228)
        {
          if (qword_1ECF4C1F0)
            v10 = qword_1ECF4C1F8;
          else
            v10 = 0;
          off_1ECF4C228((char *)v5 - v10, &v11, 4);
          if ((unint64_t)&v11 - qword_1ECF4C028 < qword_1ECF4C030)
          {
            __break(0xC471u);
            JUMPOUT(0x198143640);
          }
          goto LABEL_21;
        }
        v9 = v11;
        goto LABEL_23;
      }
      be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
      *(_DWORD *)v6 = v11;
      be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_21:
      v5 = (JSC::ARM64Assembler *)((char *)v5 + 4);
      v6 = (JSC *)((char *)v6 + 4);
      if (!--v4)
        goto LABEL_22;
    }
    v9 = -721215457;
LABEL_23:
    *(_DWORD *)v6 = v9;
    goto LABEL_21;
  }
LABEL_22:
  sys_icache_invalidate(this, len);
}

void JSC::ARM64Assembler::linkPointer(JSC::ARM64Assembler *this, unint64_t a2, void *a3)
{
  char v3;
  unsigned int v4;
  int v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)this;
  v4 = *(_DWORD *)this & 0x1F | (32 * WORD1(a2)) | 0xF2A00000;
  LODWORD(v9) = *(_DWORD *)this & 0x1F | (32 * (unsigned __int16)a2) | 0xD2800000;
  HIDWORD(v9) = v4;
  v10 = ((a2 >> 27) & 0x1FFFE0 | v3 & 0x1F | 0xF2A00000) + 0x200000;
  if ((JSC::ARM64Assembler *)(((unint64_t)this + 3) & 0xFFFFFFFFFFFFFFFCLL) != this)
  {
    __break(0xC471u);
    JUMPOUT(0x1981437A0);
  }
  v5 = (int)a3;
  if (qword_1ECF4C1F8 > (unint64_t)this || qword_1ECF4C200 <= (unint64_t)this)
    goto LABEL_26;
  if ((unint64_t)&v9 - qword_1ECF4C028 < qword_1ECF4C030)
  {
    __break(0xC471u);
    JUMPOUT(0x1981437C0);
  }
  if (!qword_1ECF4C1F0 || qword_1ECF4C200 < (unint64_t)this + 12)
  {
    __break(0xC471u);
    JUMPOUT(0x1981437E0);
  }
  if (qword_1ECF4C748)
    JSC::dumpJITMemory(this, &v9, (char *)0xC);
  if (byte_1ECF4C1E4)
  {
    be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
    *(_QWORD *)this = v9;
    *((_DWORD *)this + 2) = v10;
    be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
    goto LABEL_14;
  }
  if (off_1ECF4C228)
  {
    if (qword_1ECF4C1F0)
      v8 = qword_1ECF4C1F8;
    else
      v8 = 0;
    off_1ECF4C228((char *)this - v8, &v9, 12);
    if ((unint64_t)&v9 - qword_1ECF4C028 < qword_1ECF4C030)
    {
      __break(0xC471u);
      JUMPOUT(0x19814384CLL);
    }
  }
  else
  {
LABEL_26:
    *(_QWORD *)this = v9;
    *((_DWORD *)this + 2) = v10;
  }
LABEL_14:
  if (v5)
    sys_icache_invalidate(this, 0xCuLL);
}

void JSC::CallLinkInfoBase::unlinkOrUpgrade(JSC::CallLinkInfoBase *this, JSC::VM *a2, JSC::CodeBlock *a3, JSC::CodeBlock *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  JSC::CodeBlock *v20;
  JSC::CallLinkInfoBase *v21;

  v9 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    switch(v9)
    {
      case 1:
        JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(this, a2, a3, a4);
        break;
      case 2:
        JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(this, a2, (unsigned int **)a3, a4);
        break;
      case 3:
        v10 = (_QWORD *)*((_QWORD *)this + 1);
        if (v10)
        {
          v11 = *(_QWORD *)this;
          *v10 = *(_QWORD *)this;
          *(_QWORD *)(v11 + 8) = v10;
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
        }
        if (a4 && *((JSC::CodeBlock **)this + 6) == a3)
        {
          *((_BYTE *)a4 + 17) = 0;
          v12 = *((_QWORD *)a4 + 15);
          if (v12)
          {
            v13 = (unsigned int *)(v12 + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
          }
          *((_QWORD *)this + 27) = *(_QWORD *)(v12 + 16);
          v15 = (unsigned int *)(v12 + 8);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, (unsigned int *)(v12 + 8));
            v20 = a4;
            v21 = this;
            (*(void (**)(uint64_t, JSC::VM *))(*(_QWORD *)v12 + 32))(v12, a2);
            a4 = v20;
            this = v21;
          }
          *((_QWORD *)this + 6) = a4;
          v19 = *((_QWORD *)a4 + 11);
          v18 = (_QWORD *)((char *)a4 + 88);
          *(_QWORD *)this = v19;
          *((_QWORD *)this + 1) = v18;
          *v18 = this;
          *(_QWORD *)(v19 + 8) = this;
        }
        else
        {
          *((_QWORD *)this + 27) = 0;
        }
        break;
    }
  }
  else
  {
    JSC::CallLinkInfo::unlinkOrUpgradeImpl(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

void JSC::CallLinkStatus::computeFor(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v9;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  WTF **v54;
  int v55;
  _OWORD *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  double v63;
  unint64_t v64;
  double v65;
  unsigned int v66;
  double v67;
  uint64_t v68;
  _QWORD *v69;
  WTF *v70;
  WTF *v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  unint64_t v99;
  _QWORD *v100;
  WTF *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  int v174;
  __int16 v175;
  uint64_t v176;
  WTF *v177[2];
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  _BYTE v181[24];

  v175 = a5;
  v13 = (unsigned __int8 *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_3:
    v15 = a2;
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    a2 = v15;
    goto LABEL_4;
  }
  if (__stxr(1u, v13))
    goto LABEL_3;
LABEL_4:
  v16 = 0;
  v17 = 2;
  if ((_DWORD)a3 != -1 && (_DWORD)a3 != 0x3FFFFFFF)
  {
    if (a3 >> 28)
    {
      v96 = a2;
      v97 = WTF::fastMalloc((WTF *)0x10);
      a2 = v96;
      v16 = v97;
      *(_QWORD *)v97 = 0;
      *(_DWORD *)(v97 + 8) = a3;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v16 = a3 << 36;
    }
  }
  v18 = (_BYTE *)(v16 | v17);
  v19 = *a4;
  v174 = a3;
  if (!*a4)
  {
    v25 = 0;
    v20 = v18 & 1;
    goto LABEL_43;
  }
  v8 = *(unsigned int *)(v19 - 8);
  v20 = v18 & 1;
  if ((v18 & 3) == 0)
  {
    v21 = 2;
    v22 = v16 | v17;
    while (1)
    {
      if ((v22 & 2) != 0)
      {
        v23 = v21 - 1;
        v39 = (uint64_t *)(v22 & 0xFFFFFFFF8);
        if ((v22 & 1) == 0)
        {
          if (!v39)
            goto LABEL_14;
          v40 = v13;
          v41 = 1;
          v24 = (uint64_t)v39;
          goto LABEL_67;
        }
      }
      else
      {
        if ((v22 & 1) == 0)
        {
          v23 = v21 + (v22 >> 36);
          v24 = v22 & 0xFFFFFFFF8;
          if ((v22 & 0xFFFFFFFF8) == 0)
            goto LABEL_14;
          v40 = v13;
          v41 = 1;
          v39 = (uint64_t *)v24;
          goto LABEL_67;
        }
        v39 = (uint64_t *)(v22 & 0xFFFFFFFF8);
        v23 = *(_DWORD *)((v22 & 0xFFFFFFFF8) + 8) + v21;
      }
      v24 = *v39;
      if (!*v39)
        goto LABEL_158;
      v40 = v13;
      v41 = 0;
LABEL_67:
      v42 = *(_QWORD *)(v24 + 8);
      if ((v41 & 1) == 0 && v39)
      {
        v156 = a2;
        v166 = v20;
        v104 = v16;
        v105 = v8;
        WTF::fastFree((unint64_t)v39, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v8 = v105;
        a2 = v156;
        v20 = v166;
        v16 = v104;
      }
      v43 = (~(v42 << 32) + v42) ^ ((unint64_t)(~(v42 << 32) + v42) >> 22);
      v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
      v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
      v21 = v23 + ((v45 >> 31) ^ v45);
      v22 = *(_QWORD *)(v24 + 16);
      v13 = v40;
      if ((v22 & 1) != 0)
      {
        v146 = v8;
        v162 = v20;
        v46 = v16;
        v47 = a2;
        v48 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
        if ((v22 & 2) != 0
          || (v49 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v49 == 0x3FFFFFFF)
          || (_DWORD)v49 == -1)
        {
          v50 = 2;
        }
        else if (v49 >> 28)
        {
          v119 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v119 = v48;
          *(_DWORD *)(v119 + 8) = v49;
          v50 = 1;
          v48 = v119;
        }
        else
        {
          v50 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
          v48 = v49 << 36;
        }
        v22 = v48 | v50;
        v13 = v40;
        a2 = v47;
        v16 = v46;
        v20 = v162;
        v8 = v146;
      }
    }
  }
  v122 = *(unsigned int *)(v19 - 8);
  v145 = v16;
  v123 = a2;
  v124 = v13;
  if ((v18 & 2) == 0)
  {
    v125 = v16 | v17;
    if ((v18 & 1) != 0)
    {
      v136 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      v137 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v137 == -1 || (_DWORD)v137 == 0x3FFFFFFF)
      {
        v138 = 2;
      }
      else if (v137 >> 28)
      {
        v139 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v139 = v136;
        *(_DWORD *)(v139 + 8) = v137;
        v138 = 1;
        v136 = v139;
      }
      else
      {
        v138 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v136 = v137 << 36;
      }
      v125 = v136 | v138;
    }
    v126 = 2;
    while (1)
    {
      if ((v125 & 2) != 0)
      {
        v23 = v126 - 1;
        v39 = (uint64_t *)(v125 & 0xFFFFFFFF8);
        if ((v125 & 1) == 0)
        {
          if (!v39)
            goto LABEL_221;
          v128 = 1;
          v127 = (uint64_t)v39;
          goto LABEL_226;
        }
      }
      else
      {
        if ((v125 & 1) == 0)
        {
          v23 = v126 + (v125 >> 36);
          v127 = v125 & 0xFFFFFFFF8;
          if ((v125 & 0xFFFFFFFF8) == 0)
            goto LABEL_221;
          v128 = 1;
          v39 = (uint64_t *)v127;
          goto LABEL_226;
        }
        v39 = (uint64_t *)(v125 & 0xFFFFFFFF8);
        v23 = *(_DWORD *)((v125 & 0xFFFFFFFF8) + 8) + v126;
      }
      v127 = *v39;
      if (!*v39)
      {
        v13 = v124;
        a2 = v123;
        v16 = v145;
        v20 = v18 & 1;
        v8 = v122;
LABEL_158:
        if (v39)
        {
          v92 = a2;
          v93 = v16;
          v94 = v20;
          v95 = v8;
          WTF::fastFree((unint64_t)v39, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          v8 = v95;
          v20 = v94;
          v16 = v93;
          a2 = v92;
        }
        goto LABEL_14;
      }
      v128 = 0;
LABEL_226:
      v129 = *(_QWORD *)(v127 + 8);
      if (!v128 && v39)
        WTF::fastFree((unint64_t)v39, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v130 = (~(v129 << 32) + v129) ^ ((unint64_t)(~(v129 << 32) + v129) >> 22);
      v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
      v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
      v126 = v23 + ((v132 >> 31) ^ v132);
      v125 = *(_QWORD *)(v127 + 16);
      if ((v125 & 1) != 0)
      {
        v133 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
        if ((v125 & 2) != 0
          || (v134 = *(unsigned int *)((v125 & 0xFFFFFFFF8) + 8), (_DWORD)v134 == -1)
          || (_DWORD)v134 == 0x3FFFFFFF)
        {
          v135 = 2;
        }
        else if (v134 >> 28)
        {
          v140 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v140 = v133;
          *(_DWORD *)(v140 + 8) = v134;
          v135 = 1;
          v133 = v140;
        }
        else
        {
          v135 = *(_QWORD *)(v125 & 0xFFFFFFFF8);
          v133 = v134 << 36;
        }
        v125 = v133 | v135;
      }
    }
  }
  v23 = 0;
LABEL_221:
  v13 = v124;
  a2 = v123;
  v16 = v145;
  v20 = v18 & 1;
  v8 = v122;
LABEL_14:
  LODWORD(v25) = 0;
  while (1)
  {
    v26 = v23 & v8;
    v9 = (unint64_t *)(v19 + (v26 << 6));
    v27 = *v9;
    if ((*v9 & 1) != 0)
    {
LABEL_132:
      v77 = v13;
      v78 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v79 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
          ? (v80 = (_DWORD)v79 == -1)
          : (v80 = 1),
            v80))
      {
        v81 = 2;
      }
      else if (v79 >> 28)
      {
        v160 = a2;
        v170 = v20;
        v115 = v16;
        v151 = v8;
        v116 = WTF::fastMalloc((WTF *)0x10);
        v8 = v151;
        a2 = v160;
        v20 = v170;
        v16 = v115;
        *(_QWORD *)v116 = v78;
        *(_DWORD *)(v116 + 8) = v79;
        v81 = 1;
        v78 = v116;
      }
      else
      {
        v81 = v78;
        v78 = v79 << 36;
      }
      v27 = v78 | v81;
      v13 = v77;
    }
    v28 = (unint64_t)v18;
    if (v20)
    {
      v173 = v13;
      v82 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v83 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
          ? (v84 = (_DWORD)v83 == -1)
          : (v84 = 1),
            v84))
      {
        v85 = 2;
      }
      else if (v83 >> 28)
      {
        v161 = a2;
        v171 = v20;
        v117 = v16;
        v152 = v8;
        v118 = WTF::fastMalloc((WTF *)0x10);
        v8 = v152;
        a2 = v161;
        v20 = v171;
        v16 = v117;
        *(_QWORD *)v118 = v82;
        *(_DWORD *)(v118 + 8) = v83;
        v85 = 1;
        v82 = v118;
      }
      else
      {
        v85 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v82 = v83 << 36;
      }
      v28 = v82 | v85;
      v13 = v173;
    }
    if ((v27 & 2) != 0)
    {
      v34 = (v28 >> 1) & 1;
    }
    else
    {
      if ((v28 & 2) == 0)
      {
        while (1)
        {
          if ((v27 & 2) != 0)
          {
            LODWORD(v29) = -1;
          }
          else if ((v27 & 1) != 0)
          {
            LODWORD(v29) = *(_DWORD *)((v27 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v29 = v27 >> 36;
          }
          if ((v28 & 2) != 0)
          {
            LODWORD(v30) = -1;
          }
          else if ((v28 & 1) != 0)
          {
            LODWORD(v30) = *(_DWORD *)((v28 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v30 = v28 >> 36;
          }
          if ((_DWORD)v29 != (_DWORD)v30)
            goto LABEL_34;
          v172 = v13;
          v31 = (uint64_t *)(v27 & 0xFFFFFFFF8);
          v32 = v27 & 0xFFFFFFFF8;
          if ((v27 & 1) != 0)
            v32 = *v31;
          v33 = (uint64_t *)(v28 & 0xFFFFFFFF8);
          v34 = v28 & 0xFFFFFFFF8;
          if ((v28 & 1) != 0)
            v34 = *v33;
          if (!v32 || !v34)
            break;
          if (*(_QWORD *)(v32 + 8) != *(_QWORD *)(v34 + 8))
          {
            LOBYTE(v34) = 0;
            goto LABEL_33;
          }
          if ((v27 & 1) != 0 && v31)
          {
            v143 = v16;
            v108 = v27 & 0xFFFFFFFF8;
            v157 = a2;
            v167 = v20;
            v109 = v8;
            WTF::fastFree(v108, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            v8 = v109;
            a2 = v157;
            v20 = v167;
            v33 = (uint64_t *)(v28 & 0xFFFFFFFF8);
            v16 = v143;
          }
          v27 = *(_QWORD *)(v32 + 16);
          if ((v27 & 1) != 0)
          {
            v149 = v8;
            v158 = a2;
            v168 = v20;
            v141 = v33;
            v144 = v16;
            v110 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
            if ((v27 & 2) != 0
              || (v111 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v111 == 0x3FFFFFFF)
              || (_DWORD)v111 == -1)
            {
              v112 = 2;
            }
            else if (v111 >> 28)
            {
              v121 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v121 = v110;
              *(_DWORD *)(v121 + 8) = v111;
              v112 = 1;
              v110 = v121;
            }
            else
            {
              v112 = v110;
              v110 = v111 << 36;
            }
            v27 = v110 | v112;
            v33 = v141;
            v16 = v144;
            v20 = v168;
            v13 = v172;
            a2 = v158;
            v8 = v149;
          }
          else
          {
            v13 = v172;
          }
          if ((v28 & 1) != 0 && v33)
          {
            v159 = a2;
            v169 = v20;
            v113 = v16;
            v150 = v8;
            WTF::fastFree((unint64_t)v33, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            v8 = v150;
            a2 = v159;
            v20 = v169;
            v16 = v113;
          }
          v28 = *(_QWORD *)(v34 + 16);
          if ((v28 & 1) != 0)
          {
            v147 = v8;
            v153 = a2;
            v163 = v20;
            v142 = v16;
            v74 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
            if ((v28 & 2) != 0
              || (v75 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v75 == 0x3FFFFFFF)
              || (_DWORD)v75 == -1)
            {
              v76 = 2;
            }
            else if (v75 >> 28)
            {
              v120 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v120 = v74;
              *(_DWORD *)(v120 + 8) = v75;
              v76 = 1;
              v74 = v120;
            }
            else
            {
              v76 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
              v74 = v75 << 36;
            }
            v28 = v74 | v76;
            v20 = v163;
            v13 = v172;
            a2 = v153;
            v16 = v142;
            v8 = v147;
          }
        }
        LOBYTE(v34) = (v32 != 0) == (v34 != 0);
LABEL_33:
        v13 = v172;
        goto LABEL_35;
      }
LABEL_34:
      LOBYTE(v34) = 0;
    }
LABEL_35:
    if ((v28 & 1) != 0)
    {
      v86 = v28 & 0xFFFFFFFF8;
      if ((v28 & 0xFFFFFFFF8) != 0)
      {
        v154 = a2;
        v164 = v20;
        v87 = v16;
        v148 = v8;
        WTF::fastFree(v86, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v8 = v148;
        a2 = v154;
        v20 = v164;
        v16 = v87;
      }
    }
    if ((v27 & 1) != 0)
    {
      v88 = v27 & 0xFFFFFFFF8;
      if ((v27 & 0xFFFFFFFF8) != 0)
      {
        v155 = a2;
        v165 = v20;
        v89 = v16;
        v90 = v8;
        WTF::fastFree(v88, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v8 = v90;
        a2 = v155;
        v20 = v165;
        v16 = v89;
      }
    }
    if ((v34 & 1) != 0)
    {
      v25 = *(_QWORD *)(v19 + (v26 << 6) + 16);
      goto LABEL_43;
    }
    v35 = *v9;
    if (*v9 == 2)
      break;
    if ((v35 & 2) != 0)
    {
      v72 = (_QWORD *)(v35 & 0xFFFFFFFF8);
      if ((v35 & 1) == 0)
        goto LABEL_108;
    }
    else
    {
      if ((v35 & 1) == 0)
        goto LABEL_41;
      v72 = (_QWORD *)(v35 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v35 & 0xFFFFFFFF8) + 8) != -1)
        goto LABEL_41;
    }
    v72 = (_QWORD *)*v72;
LABEL_108:
    if (!v72)
      break;
LABEL_41:
    LODWORD(v25) = v25 + 1;
    v23 = v25 + v26;
  }
  v25 = 0;
LABEL_43:
  if (v20 && (v16 & 0xFFFFFFFF8) != 0)
  {
    v91 = a2;
    WTF::fastFree(v16 & 0xFFFFFFFF8, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = v91;
  }
  if (!v25)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_54;
  }
  v36 = *(_WORD *)(v25 + 17);
  if ((v36 & 0x100) == 0 && !*(_QWORD *)(a2 + 128))
  {
    if ((_BYTE)v175
      || (v114 = *(_QWORD *)(a2 + 56),
          LODWORD(v179) = v174,
          WORD2(v179) = 2,
          BYTE6(v179) = 0,
          (JSC::UnlinkedCodeBlock::hasExitSite(v114, (int *)&v179, a3, (uint64_t)a4, a5, a6, a7, a8) & 1) != 0))
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 24) = 1;
      goto LABEL_54;
    }
    v36 = *(_WORD *)(v25 + 17);
  }
  if ((v36 & 0xC) != 0)
    goto LABEL_124;
  v27 = *(_QWORD *)(v25 + 56);
  if (!v27)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 24) = 0;
    v37 = *(_QWORD *)(v25 + 48);
    if (v37)
    {
      if ((*(_WORD *)(v25 + 17) & 2) != 0 && *(_BYTE *)(v37 + 5) == 26)
      {
        v37 = *(_QWORD *)(v37 + 24);
        if ((v37 & 1) != 0)
          v37 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      *(_QWORD *)(a1 + 16) = v37;
      *(_DWORD *)(a1 + 12) = 1;
    }
    *(_BYTE *)(a1 + 24) = *(_DWORD *)(v25 + 20) != 0;
    goto LABEL_53;
  }
  if ((*(_BYTE *)(v27 + 64) & 1) != 0)
  {
LABEL_124:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 24) = 1;
    goto LABEL_53;
  }
  v18 = v181;
  v179 = (WTF *)v181;
  v180 = 1;
  v51 = *(_DWORD *)(v27 + 48);
  v26 = (v51 - 1);
  if (v51 == 1)
    goto LABEL_211;
  LODWORD(v52) = 0;
  v53 = 0;
  v54 = (WTF **)(v27 + 80);
  do
  {
    if (v53 >= *(unsigned int *)(v27 + 48))
    {
      __break(1u);
      goto LABEL_132;
    }
    v55 = *(_DWORD *)v54;
    v177[0] = *(v54 - 1);
    LODWORD(v177[1]) = v55;
    if ((_DWORD)v52 == (_DWORD)v180)
    {
      v56 = (_OWORD *)WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v179, (void *)(v52 + 1), (unint64_t)v177, (uint64_t)a4, a5, a6, a7, a8);
      *((_OWORD *)v179 + HIDWORD(v180)) = *v56;
    }
    else
    {
      *((_OWORD *)v179 + v52) = *(_OWORD *)v177;
    }
    v52 = ++HIDWORD(v180);
    ++v53;
    v54 += 4;
  }
  while (v26 != v53);
  if (!(_DWORD)v52)
  {
LABEL_211:
    __break(0xC471u);
    JUMPOUT(0x1981444DCLL);
  }
  std::__introsort<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,false>((__int128 *)v179, (uint64_t *)v179 + 2 * v52, 126 - 2 * __clz(v52), 1);
  v59 = HIDWORD(v180);
  if (!HIDWORD(v180))
  {
    __break(0xC471u);
    JUMPOUT(0x198144628);
  }
  if (*((_DWORD *)v179 + 2) < *((_DWORD *)v179 + 4 * HIDWORD(v180) - 2))
  {
    __break(0xC471u);
    JUMPOUT(0x1981442A0);
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  LODWORD(v58) = *(_DWORD *)(v25 + 20);
  v177[0] = (WTF *)&v178;
  v177[1] = (WTF *)1;
  v63 = (double)v58;
  v64 = HIDWORD(xmmword_1ECF4C43C);
  v65 = 0.0;
  do
  {
    v66 = *(_DWORD *)((char *)v179 + v60 + 8);
    v67 = (double)v66;
    if (v62 >= v64 || v66 < dword_1ECF4C44C)
    {
      v63 = v63 + v67;
    }
    else
    {
      v68 = *(_QWORD *)((char *)v179 + v60);
      v176 = v68;
      if (v61 == LODWORD(v177[1]))
      {
        v69 = (_QWORD *)WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v177, (void *)(v61 + 1), (unint64_t)&v176, (uint64_t)a4, a5, a6, a7, a8);
        v61 = HIDWORD(v177[1]);
        *((_QWORD *)v177[0] + HIDWORD(v177[1])) = *v69;
        v64 = HIDWORD(xmmword_1ECF4C43C);
        v59 = HIDWORD(v180);
      }
      else
      {
        *((_QWORD *)v177[0] + v61) = v68;
      }
      v65 = v65 + v67;
      HIDWORD(v177[1]) = ++v61;
    }
    ++v62;
    v60 += 16;
  }
  while (v62 < v59);
  if ((v61 != 0) != (v65 != 0.0))
  {
    __break(0xC471u);
    JUMPOUT(0x1981442C0);
  }
  if (v61 && v65 / v63 >= *(double *)&qword_1ECF4C450)
  {
    if (v65 == 0.0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981442E8);
    }
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, (const void **)v177, a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_BYTE *)(a1 + 24) = v63 != 0.0;
    *(_BYTE *)(a1 + 26) = 1;
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_DWORD *)(a1 + 24) = 1;
  }
  v70 = v177[0];
  if (&v178 != (uint64_t *)v177[0] && v177[0])
  {
    v177[0] = 0;
    LODWORD(v177[1]) = 0;
    WTF::fastFree((unint64_t)v70, v57, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v71 = v179;
  if (v181 != (_BYTE *)v179 && v179)
  {
    v179 = 0;
    LODWORD(v180) = 0;
    WTF::fastFree((unint64_t)v71, v57, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_53:
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(v25 + 19);
  if ((v175 & 0x303) != 0)
  {
    v73 = v175;
    if ((v175 & 0x300) != 0)
    {
      if (*(_BYTE *)(a1 + 26))
      {
        JSC::despecifiedVariantList(a1, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v179);
        v100 = (_QWORD *)(a1 + 16);
        v99 = *(_QWORD *)a1;
        if (*(_QWORD *)a1 != a1 + 16)
        {
          if (v99)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v99, v98, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          *(_QWORD *)a1 = v100;
        }
        v101 = v179;
        if (v179 == (WTF *)v181)
        {
          v102 = HIDWORD(v180);
          if (HIDWORD(v180))
          {
            v106 = 8 * HIDWORD(v180);
            do
            {
              v107 = *(_QWORD *)v101;
              v101 = (WTF *)((char *)v101 + 8);
              *v100++ = v107;
              v106 -= 8;
            }
            while (v106);
          }
          v103 = v180;
        }
        else
        {
          *(_QWORD *)a1 = v179;
          v103 = v180;
          v102 = HIDWORD(v180);
        }
        *(_DWORD *)(a1 + 8) = v103;
        *(_DWORD *)(a1 + 12) = v102;
      }
      else
      {
        *(_BYTE *)(a1 + 24) = 1;
      }
      v73 = v175;
    }
    if ((v73 & 3) != 0)
      *(_BYTE *)(a1 + 24) = 1;
  }
LABEL_54:
  v38 = __ldxr(v13);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, v13))
LABEL_58:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
}

void JSC::CodeOrigin::~CodeOrigin(JSC::CodeOrigin *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0 && (v8 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v8 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::UnlinkedCodeBlock::hasExitSite(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;

  v10 = (unsigned __int8 *)(a1 + 31);
  if (__ldaxr((unsigned __int8 *)(a1 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 31);
LABEL_4:
  v12 = *(uint64_t **)(a1 + 96);
  if (v12 && (v16 = *((_DWORD *)v12 + 3)) != 0)
  {
    v17 = *a2;
    v18 = *((unsigned __int8 *)a2 + 4);
    v19 = *((_BYTE *)a2 + 5);
    v20 = *((_BYTE *)a2 + 6);
    v21 = *v12;
    if (v19)
    {
      if (*((_BYTE *)a2 + 6))
      {
        v27 = v16 - 1;
        while (1)
        {
          v28 = v27;
          if (v17 == *(_DWORD *)(v21 + 8 * v27))
          {
            v29 = v21 + 8 * v27;
            if (v18 == *(unsigned __int8 *)(v29 + 4)
              && *(unsigned __int8 *)(v29 + 5) == v19
              && *(unsigned __int8 *)(v21 + 8 * v27 + 6) == v20)
            {
              break;
            }
          }
          v13 = 0;
          --v27;
          if (!v28)
            goto LABEL_6;
        }
      }
      else
      {
        v30 = v16 - 1;
        while (1)
        {
          v31 = v30;
          if (v17 == *(_DWORD *)(v21 + 8 * v30))
          {
            v32 = v21 + 8 * v30;
            if (v18 == *(unsigned __int8 *)(v32 + 4) && *(unsigned __int8 *)(v32 + 5) == v19)
              break;
          }
          v13 = 0;
          --v30;
          if (!v31)
            goto LABEL_6;
        }
      }
    }
    else if (*((_BYTE *)a2 + 6))
    {
      v22 = v16 - 1;
      while (1)
      {
        v23 = v22;
        if (v17 == *(_DWORD *)(v21 + 8 * v22))
        {
          v24 = v21 + 8 * v22;
          if (v18 == *(unsigned __int8 *)(v24 + 4) && *(unsigned __int8 *)(v24 + 6) == v20)
            break;
        }
        v13 = 0;
        --v22;
        if (!v23)
          goto LABEL_6;
      }
    }
    else
    {
      v25 = v16 - 1;
      while (1)
      {
        v26 = v25;
        if (v17 == *(_DWORD *)(v21 + 8 * v25) && v18 == *(unsigned __int8 *)(v21 + 8 * v25 + 4))
          break;
        v13 = 0;
        --v25;
        if (!v26)
          goto LABEL_6;
      }
    }
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
LABEL_6:
  v14 = __ldxr(v10);
  if (v14 == 1)
  {
    if (!__stlxr(0, v10))
      return v13;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v13;
}

void JSC::CallLinkStatus::computeFor(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unint64_t a7@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  double v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  WTF *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  WTF *v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  unsigned int v52;
  _BYTE v53[16];

  v7 = a3;
  v8 = a2;
  v11 = *(_WORD *)(a1 + 17);
  if ((v11 & 0xC) != 0)
    goto LABEL_46;
  v12 = *(_QWORD *)(a1 + 56);
  if (!v12)
  {
    *(_QWORD *)a7 = a7 + 16;
    *(_QWORD *)(a7 + 8) = 1;
    *(_DWORD *)(a7 + 24) = 0;
    v13 = *(_QWORD *)(a1 + 48);
    if (v13)
    {
      if ((v11 & 2) != 0 && *(_BYTE *)(v13 + 5) == 26)
      {
        v13 = *(_QWORD *)(v13 + 24);
        if ((v13 & 1) != 0)
          v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      *(_QWORD *)(a7 + 16) = v13;
      *(_DWORD *)(a7 + 12) = 1;
    }
    *(_BYTE *)(a7 + 24) = *(_DWORD *)(a1 + 20) != 0;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v12 + 64) & 1) != 0)
  {
LABEL_46:
    *(_QWORD *)a7 = a7 + 16;
    *(_QWORD *)(a7 + 8) = 1;
    *(_DWORD *)(a7 + 24) = 1;
    goto LABEL_7;
  }
  JSC::PolymorphicCallStubRoutine::edges(v12, a2, a3, a4, a5, a6, (uint64_t)&v50);
  if (!v52
    || (std::__introsort<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,false>((__int128 *)v50, (uint64_t *)v50 + 2 * v52, 126 - 2 * __clz(v52), 1), (v19 = v52) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x198144CF4);
  }
  if (*((_DWORD *)v50 + 2) < *((_DWORD *)v50 + 4 * v52 - 2))
  {
    __break(0xC471u);
    JUMPOUT(0x198144D14);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  LODWORD(v18) = *(_DWORD *)(a1 + 20);
  v47 = (WTF *)&v49;
  v48 = 1;
  v23 = (double)v18;
  v24 = HIDWORD(xmmword_1ECF4C43C);
  v25 = 0.0;
  do
  {
    v26 = *(_DWORD *)((char *)v50 + v20 + 8);
    v27 = (double)v26;
    if (v22 >= v24 || v26 < dword_1ECF4C44C)
    {
      v23 = v23 + v27;
    }
    else
    {
      v28 = *(_QWORD *)((char *)v50 + v20);
      v46 = v28;
      if (v21 == (_DWORD)v48)
      {
        v29 = (_QWORD *)WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v47, (void *)(v21 + 1), (unint64_t)&v46, a2, a3, a4, a5, a6);
        v21 = HIDWORD(v48);
        *((_QWORD *)v47 + HIDWORD(v48)) = *v29;
        v24 = HIDWORD(xmmword_1ECF4C43C);
        v19 = v52;
      }
      else
      {
        *((_QWORD *)v47 + v21) = v28;
      }
      v25 = v25 + v27;
      HIDWORD(v48) = ++v21;
    }
    ++v22;
    v20 += 16;
  }
  while (v22 < v19);
  if ((v21 != 0) != (v25 != 0.0))
  {
    __break(0xC471u);
    JUMPOUT(0x198144D34);
  }
  if (v21 && v25 / v23 >= *(double *)&qword_1ECF4C450)
  {
    if (v25 == 0.0)
    {
      __break(0xC471u);
      JUMPOUT(0x198144D54);
    }
    *(_QWORD *)a7 = a7 + 16;
    *(_QWORD *)(a7 + 8) = 1;
    *(_DWORD *)(a7 + 24) = 0;
    WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a7, (const void **)&v47, v17, a2, a3, a4, a5, a6);
    *(_BYTE *)(a7 + 24) = v23 != 0.0;
    *(_BYTE *)(a7 + 26) = 1;
  }
  else
  {
    *(_QWORD *)a7 = a7 + 16;
    *(_QWORD *)(a7 + 8) = 1;
    *(_DWORD *)(a7 + 24) = 1;
  }
  v30 = v47;
  if (&v49 != (uint64_t *)v47 && v47)
  {
    v47 = 0;
    LODWORD(v48) = 0;
    WTF::fastFree((unint64_t)v30, v16, v17, a2, a3, a4, a5, a6);
  }
  v31 = v50;
  if (v53 != (_BYTE *)v50 && v50)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree((unint64_t)v31, v16, v17, a2, a3, a4, a5, a6);
  }
LABEL_7:
  *(_BYTE *)(a7 + 27) = *(_BYTE *)(a1 + 19);
  v14 = 0x20103u >> (8 * v7);
  if (v7 >= 3)
    v14 = 0;
  if ((v14 & (v8 >> 8) & 3) != 0)
  {
    if (*(_BYTE *)(a7 + 26))
    {
      JSC::despecifiedVariantList(a7, a2, a3, a4, a5, a6, (uint64_t)&v50);
      v40 = (_QWORD *)(a7 + 16);
      v39 = *(_QWORD *)a7;
      if (*(_QWORD *)a7 != a7 + 16)
      {
        if (v39)
        {
          *(_QWORD *)a7 = 0;
          *(_DWORD *)(a7 + 8) = 0;
          WTF::fastFree(v39, v32, v33, v34, v35, v36, v37, v38);
        }
        *(_QWORD *)a7 = v40;
      }
      v41 = v50;
      if (v50 == (WTF *)v53)
      {
        v42 = v52;
        if (v52)
        {
          v44 = 8 * v52;
          do
          {
            v45 = *(_QWORD *)v41;
            v41 = (WTF *)((char *)v41 + 8);
            *v40++ = v45;
            v44 -= 8;
          }
          while (v44);
        }
        v43 = v51;
      }
      else
      {
        *(_QWORD *)a7 = v50;
        v43 = v51;
        v42 = v52;
      }
      *(_DWORD *)(a7 + 8) = v43;
      *(_DWORD *)(a7 + 12) = v42;
    }
    else
    {
      *(_BYTE *)(a7 + 24) = 1;
    }
  }
  v15 = 0x20103u >> (8 * v7);
  if (v7 >= 3)
    LOBYTE(v15) = 0;
  if ((v15 & v8) != 0)
    *(_BYTE *)(a7 + 24) = 1;
}

uint64_t JSC::CallLinkStatus::computeExitSiteData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (unsigned __int8 *)(v9 + 31);
  if (__ldaxr((unsigned __int8 *)(v9 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 31);
LABEL_4:
  v12 = *(uint64_t **)(v9 + 96);
  if (v12 && (v19 = *((_DWORD *)v12 + 3)) != 0)
  {
    v20 = *v12;
    v21 = v19 - 1;
    v22 = v21;
    while (1)
    {
      v23 = v22;
      if (*(_DWORD *)(v20 + 8 * v22) == a2)
      {
        v24 = v20 + 8 * v22;
        if (*(_BYTE *)(v24 + 4) == 1 && *(_BYTE *)(v24 + 6) == 1)
          break;
      }
      --v22;
      if (!v23)
      {
        v25 = *v12;
        v26 = v21;
        while (1)
        {
          v27 = v26;
          if (*(_DWORD *)(v25 + 8 * v26) == a2)
          {
            v28 = v25 + 8 * v26;
            if (*(_BYTE *)(v28 + 4) == 4 && *(_BYTE *)(v28 + 6) == 1)
              goto LABEL_28;
          }
          --v26;
          if (!v27)
          {
            v14 = 0;
            goto LABEL_29;
          }
        }
      }
    }
LABEL_28:
    v14 = 1;
LABEL_29:
    v29 = *v12;
    v30 = v21;
    while (1)
    {
      v31 = v30;
      if (*(_DWORD *)(v29 + 8 * v30) == a2)
      {
        v32 = v29 + 8 * v30;
        if (*(_BYTE *)(v32 + 4) == 1 && *(_BYTE *)(v32 + 6) == 2)
          break;
      }
      --v30;
      if (!v31)
      {
        v33 = *v12;
        v34 = v21;
        while (1)
        {
          v35 = v34;
          if (*(_DWORD *)(v33 + 8 * v34) == a2)
          {
            v36 = v33 + 8 * v34;
            if (*(_BYTE *)(v36 + 4) == 4 && *(_BYTE *)(v36 + 6) == 2)
              goto LABEL_41;
          }
          --v34;
          if (!v35)
          {
            v13 = 0;
            goto LABEL_42;
          }
        }
      }
    }
LABEL_41:
    v13 = 2;
LABEL_42:
    v37 = *v12;
    v38 = v21;
    while (1)
    {
      v39 = v38;
      if (*(_DWORD *)(v37 + 8 * v38) == a2)
      {
        v40 = v37 + 8 * v38;
        if (*(_BYTE *)(v40 + 4) == 2 && *(_BYTE *)(v40 + 6) == 1)
          break;
      }
      --v38;
      if (!v39)
      {
        v15 = 0;
        goto LABEL_49;
      }
    }
    v15 = 1;
LABEL_49:
    v41 = *v12;
    while (1)
    {
      v42 = v21;
      if (*(_DWORD *)(v41 + 8 * v21) == a2)
      {
        v43 = v41 + 8 * v21;
        if (*(_BYTE *)(v43 + 4) == 2 && *(_BYTE *)(v43 + 6) == 2)
          break;
      }
      --v21;
      if (!v42)
        goto LABEL_6;
    }
    v16 = 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
LABEL_6:
    v16 = 0;
  }
  v17 = __ldxr(v10);
  if (v17 == 1)
  {
    if (!__stlxr(0, v10))
      return v14 | v13 | ((v16 | v15) << 8);
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v14 | v13 | ((v16 | v15) << 8);
}

unint64_t WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v8 = result;
  if (a2 == (const void **)result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
    goto LABEL_5;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
    goto LABEL_4;
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v20 = *(_DWORD *)(v8 + 8);
    }
    else
    {
      *(_QWORD *)v8 = v8 + 16;
      v20 = 1;
      *(_DWORD *)(v8 + 8) = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  v21 = *((unsigned int *)a2 + 3);
  if (v20 >= v21)
  {
LABEL_4:
    v11 = *(_DWORD *)(v8 + 12);
LABEL_5:
    v13 = *(char **)v8;
    if (v11)
    {
      memmove(v13, *a2, 8 * v11);
      v14 = *(_DWORD *)(v8 + 12);
      v13 = *(char **)v8;
    }
    else
    {
      v14 = 0;
    }
    v15 = *((unsigned int *)a2 + 3);
    if (v14 != (_DWORD)v15)
    {
      v16 = &v13[8 * v14];
      v17 = (uint64_t *)((char *)*a2 + 8 * v14);
      v18 = 8 * v15 - 8 * v14;
      do
      {
        v19 = *v17++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v18 -= 8;
      }
      while (v18);
    }
    *(_DWORD *)(v8 + 12) = v15;
    return v8;
  }
  v22 = *(_QWORD *)v8;
  v23 = *(unsigned int *)(v8 + 12);
  if (v21 < 2)
  {
    v24 = (_QWORD *)(v8 + 16);
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 1;
    goto LABEL_26;
  }
  if (!(v21 >> 29))
  {
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v21));
    *(_DWORD *)(v8 + 8) = v21;
    *(_QWORD *)v8 = v24;
LABEL_26:
    if ((_DWORD)v23)
    {
      v25 = 8 * v23;
      v26 = (uint64_t *)v22;
      do
      {
        v27 = *v26++;
        *v24++ = v27;
        v25 -= 8;
      }
      while (v25);
    }
    if (v8 + 16 != v22 && v22)
    {
      if (*(_QWORD *)v8 == v22)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

void JSC::CallLinkStatus::accountForExits(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v9;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;

  v9 = a2;
  v11 = 0x20103u >> (8 * a3);
  if (a3 >= 3)
    v11 = 0;
  if ((v11 & (a2 >> 8) & 3) != 0)
  {
    if (*(_BYTE *)(a1 + 26))
    {
      JSC::despecifiedVariantList(a1, a4, a5, a6, a7, a8, (uint64_t)&v27);
      v21 = (_QWORD *)(a1 + 16);
      v20 = *(_QWORD *)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        if (v20)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
          WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
          v21 = (_QWORD *)(a1 + 16);
        }
        *(_QWORD *)a1 = v21;
      }
      v22 = v27;
      if (v27 == &v30)
      {
        v23 = v29;
        if (v29)
        {
          v25 = 8 * v29;
          do
          {
            v26 = *v22++;
            *v21++ = v26;
            v25 -= 8;
          }
          while (v25);
        }
        v24 = v28;
      }
      else
      {
        *(_QWORD *)a1 = v27;
        v24 = v28;
        v23 = v29;
      }
      *(_DWORD *)(a1 + 8) = v24;
      *(_DWORD *)(a1 + 12) = v23;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  v12 = 0x20103u >> (8 * a3);
  if (a3 >= 3)
    LOBYTE(v12) = 0;
  if ((v12 & v9) != 0)
    *(_BYTE *)(a1 + 24) = 1;
}

void JSC::CallLinkStatus::computeFor(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  WTF *v49;
  int v50;
  void *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  unsigned __int8 *v58;
  char v59;
  int v60;
  int v61;
  WTF *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t **v79;
  uint64_t *v80;
  char v81;
  uint64_t **v82;
  char v83;
  uint64_t *v84;
  unsigned __int8 v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  uint64_t *v95;
  char v96;
  uint64_t v97;
  BOOL v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unint64_t v119;
  double v120;
  unint64_t v121;
  double v122;
  unsigned int v123;
  double v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  char v138;
  _QWORD *v139;
  char v140;
  _QWORD *v141;
  unsigned __int8 v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  unsigned __int8 *v154;
  uint64_t v156;
  uint64_t **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  char v161;
  uint64_t **v162;
  char v163;
  uint64_t *v164;
  unsigned __int8 v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  __int128 *v175;
  int v176;
  int v177;
  int v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  WTF *v185;
  WTF *v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  int v197;
  WTF *v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  WTF *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  BOOL v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  _QWORD *v237;
  uint64_t v238;
  unsigned int v239;
  BOOL v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t *v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  void *v278;
  uint64_t v279;
  WTF *v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *__dst;
  _QWORD *__dsta;
  _QWORD **v286;
  unint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  unsigned __int16 *v290;
  uint64_t v291;
  char v292[8];
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  unsigned __int16 v296;
  uint64_t v297;
  WTF *v298;
  unint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  __int128 v303;
  uint64_t v304;
  __int128 *v305;
  uint64_t v306;
  _DWORD v307[6];

  v10 = (uint64_t *)a3;
  v11 = a2;
  v12 = a1;
  v297 = a1;
  v14 = *a2;
  if ((*a2 & 2) != 0)
  {
    LODWORD(v14) = -1;
  }
  else if ((v14 & 1) != 0)
  {
    LODWORD(v14) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v14 >>= 36;
  }
  v296 = JSC::CallLinkStatus::computeExitSiteData(a1, v14, a3, a4, a5, a6, a7, a8);
  v21 = *(unsigned int *)(a4 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(uint64_t **)a4;
    v23 = *(_QWORD *)a4 + 8 * v21;
    v24 = (_QWORD *)(a9 + 16);
    v25 = (WTF *)&v300;
    v283 = v11;
    while (1)
    {
      v26 = *v22;
      v295 = (_QWORD *)*v22;
      v27 = *v11;
      if ((*v11 & 1) != 0)
      {
        v198 = v25;
        v199 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        if ((v27 & 2) != 0
          || ((v200 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v200 != 0x3FFFFFFF)
            ? (v201 = (_DWORD)v200 == -1)
            : (v201 = 1),
              v201))
        {
          v202 = 2;
        }
        else if (v200 >> 28)
        {
          v258 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v258 = v199;
          *(_DWORD *)(v258 + 8) = v200;
          v202 = 1;
          v199 = v258;
        }
        else
        {
          v202 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
          v199 = v200 << 36;
        }
        v203 = v199 | v202;
        v291 = v203;
        JSC::ICStatusContext::get(v26, &v291, v15, v16, v17, v18, v19, v20, (uint64_t)v292);
        v25 = v198;
        v11 = v283;
        if ((v203 & 1) != 0 && (v203 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v203 & 0xFFFFFFFF8, v28, v15, v16, v17, v18, v19, v20);
      }
      else
      {
        v291 = *v11;
        JSC::ICStatusContext::get(v26, &v291, v15, v16, v17, v18, v19, v20, (uint64_t)v292);
      }
      v29 = v295;
      v30 = *(_QWORD *)(v295[1] + 120);
      if (v30)
      {
        v31 = *(unsigned __int8 *)(v30 + 12);
        v286 = &v295;
        v287 = v11;
        v288 = &v297;
        v289 = v10;
        v290 = &v296;
        if (v31 == 5)
        {
          v129 = v294;
          if (v294)
          {
            v130 = *(unsigned int *)(v294 + 12);
            *(_QWORD *)a9 = v24;
            *(_DWORD *)(a9 + 8) = 1;
            *(_DWORD *)(a9 + 12) = v130;
            if (v130 >= 2)
            {
              if (v130 >> 29)
              {
                __break(0xC471u);
LABEL_357:
                __break(1u);
LABEL_358:
                __break(0xC471u);
                JUMPOUT(0x19814659CLL);
              }
              v131 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v130));
              *(_DWORD *)(a9 + 8) = v130;
              *(_QWORD *)a9 = v131;
              v130 = *(unsigned int *)(v129 + 12);
              v11 = v283;
            }
            else
            {
              v131 = v24;
            }
            v132 = v23;
            if ((_DWORD)v130)
            {
              v189 = *(uint64_t **)v129;
              v190 = 8 * v130;
              do
              {
                v191 = *v189++;
                *v131++ = v191;
                v190 -= 8;
              }
              while (v190);
            }
            *(_DWORD *)(a9 + 24) = *(_DWORD *)(v129 + 24);
            v133 = v296;
            v134 = v295;
            v135 = *v11;
            v136 = *v11 & 0xFFFFFFFF8;
            if ((*v11 & 1) != 0)
            {
              v237 = v295;
              v137 = v24;
              v238 = *(_QWORD *)v136;
              if ((v135 & 2) != 0
                || ((v239 = *(_DWORD *)(v136 + 8), v239 != 0x3FFFFFFF) ? (v240 = v239 == -1) : (v240 = 1), v240))
              {
                v241 = 2;
              }
              else if (v239 >> 28)
              {
                v264 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v264 = v238;
                *(_DWORD *)(v264 + 8) = v239;
                v241 = 1;
                v238 = v264;
              }
              else
              {
                v241 = *(_QWORD *)v136;
                v238 = 0;
              }
              v242 = v238 | v241;
              v136 = v242 & 0xFFFFFFFF8;
              if ((v242 & 1) != 0)
              {
                v243 = *(_QWORD *)v136;
                if ((v242 & 2) != 0
                  || ((v244 = *(_DWORD *)((v242 & 0xFFFFFFFF8) + 8), v244 != 0x3FFFFFFF)
                    ? (v245 = v244 == -1)
                    : (v245 = 1),
                      v245))
                {
                  v246 = 2;
                }
                else if (v244 >> 28)
                {
                  v265 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v265 = v243;
                  *(_DWORD *)(v265 + 8) = v244;
                  v246 = 1;
                  v243 = v265;
                }
                else
                {
                  v246 = *(_QWORD *)v136;
                  v243 = 0;
                }
                v247 = v243 | v246;
                v139 = (_QWORD *)(v247 & 0xFFFFFFFF8);
                v138 = 0;
                if ((v247 & 1) != 0)
                {
                  v140 = 0;
                  v141 = (_QWORD *)*v139;
                }
                else
                {
                  v140 = 1;
                  v141 = v139;
                }
              }
              else
              {
                v138 = 1;
                v139 = (_QWORD *)(v242 & 0xFFFFFFFF8);
                v140 = 1;
                v141 = (_QWORD *)v136;
              }
              v134 = v237;
            }
            else
            {
              v137 = v24;
              v138 = 1;
              v139 = (_QWORD *)(*v11 & 0xFFFFFFFF8);
              v140 = 1;
              v141 = v139;
            }
            v142 = 1;
            if (v141)
            {
              if (v141 == (_QWORD *)*v134)
                v142 = 1;
              else
                v142 = 2;
            }
            if ((v140 & 1) == 0 && v139)
              WTF::fastFree((unint64_t)v139, v28, v15, v16, v17, v18, v19, v20);
            JSC::CallLinkStatus::accountForExits(a9, v133, v142, v16, v17, v18, v19, v20);
            if ((v138 & 1) == 0 && v136)
              WTF::fastFree(v136, v143, v144, v145, v146, v147, v148, v149);
            JSC::CallLinkStatus::computeFor(JSC::CodeBlock *,JSC::CodeOrigin,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> const&,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()((uint64_t)&v286, (void *)a9, v144, v145, v146, v147, v148, v149);
            v150 = *(_DWORD *)(a9 + 12);
            v151 = *(unsigned __int8 *)(a9 + 24);
            v23 = v132;
            v24 = v137;
          }
          else
          {
            v151 = 0;
            v150 = 0;
            *(_QWORD *)a9 = v24;
            *(_QWORD *)(a9 + 8) = 1;
            *(_DWORD *)(a9 + 24) = 0;
          }
          if (v150 | v151)
            return;
          v152 = *(_QWORD *)a9;
          if (v24 != *(_QWORD **)a9 && v152)
          {
            *(_QWORD *)a9 = 0;
            *(_DWORD *)(a9 + 8) = 0;
            WTF::fastFree(v152, v28, v15, v16, v17, v18, v19, v20);
          }
          v153 = v293;
          *(_QWORD *)a9 = v24;
          *(_QWORD *)(a9 + 8) = 1;
          *(_DWORD *)(a9 + 24) = 0;
          if (v153)
          {
            v154 = (unsigned __int8 *)(v295[1] + 16);
            if (__ldaxr(v154))
            {
              v156 = v23;
              __clrex();
              goto LABEL_143;
            }
            v156 = v23;
            if (__stxr(1u, v154))
LABEL_143:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v154);
            v157 = (uint64_t **)v295;
            v158 = v293;
            v159 = v296;
            v160 = (uint64_t *)(*v283 & 0xFFFFFFFF8);
            if ((*v283 & 1) != 0)
            {
              v271 = v22;
              v273 = v10;
              v248 = v296;
              v249 = v293;
              v250 = *v160;
              if ((*v283 & 2) != 0
                || (v251 = *(_DWORD *)((*v283 & 0xFFFFFFFF8) + 8), v251 == 0x3FFFFFFF)
                || v251 == -1)
              {
                v252 = 2;
              }
              else if (v251 >> 28)
              {
                v267 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v267 = v250;
                *(_DWORD *)(v267 + 8) = v251;
                v252 = 1;
                v250 = v267;
              }
              else
              {
                v252 = *v160;
                v250 = 0;
              }
              v253 = v250 | v252;
              v160 = (uint64_t *)(v253 & 0xFFFFFFFF8);
              if ((v253 & 1) != 0)
              {
                v254 = *v160;
                if ((v253 & 2) != 0
                  || (v255 = *(_DWORD *)((v253 & 0xFFFFFFFF8) + 8), v255 == 0x3FFFFFFF)
                  || v255 == -1)
                {
                  v256 = 2;
                }
                else if (v255 >> 28)
                {
                  v268 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v268 = v254;
                  *(_DWORD *)(v268 + 8) = v255;
                  v256 = 1;
                  v254 = v268;
                }
                else
                {
                  v256 = *v160;
                  v254 = 0;
                }
                v257 = v254 | v256;
                v162 = (uint64_t **)(v257 & 0xFFFFFFFF8);
                v161 = 0;
                if ((v257 & 1) != 0)
                {
                  v163 = 0;
                  v164 = *v162;
                }
                else
                {
                  v163 = 1;
                  v164 = (uint64_t *)v162;
                }
              }
              else
              {
                v161 = 1;
                v162 = (uint64_t **)(v253 & 0xFFFFFFFF8);
                v163 = 1;
                v164 = v160;
              }
              v158 = v249;
              v159 = v248;
              v22 = v271;
              v10 = v273;
            }
            else
            {
              v161 = 1;
              v162 = (uint64_t **)(*v283 & 0xFFFFFFFF8);
              v163 = 1;
              v164 = (uint64_t *)v162;
            }
            v165 = 1;
            if (v164)
            {
              if (v164 == *v157)
                v165 = 1;
              else
                v165 = 2;
            }
            if ((v163 & 1) == 0 && v162)
            {
              v277 = (void *)v159;
              v282 = v158;
              WTF::fastFree((unint64_t)v162, v28, v158, v159, v17, v18, v19, v20);
              v159 = (uint64_t)v277;
              v158 = v282;
            }
            JSC::CallLinkStatus::computeFor(v158, v159, v165, v18, v19, v20, (unint64_t)&v305);
            v173 = *(_QWORD *)a9;
            if (*(_QWORD **)a9 != v24)
            {
              if (v173)
              {
                *(_QWORD *)a9 = 0;
                *(_DWORD *)(a9 + 8) = 0;
                WTF::fastFree(v173, v166, v167, v168, v169, v170, v171, v172);
              }
              *(_QWORD *)a9 = v24;
            }
            v174 = (uint64_t *)v307;
            v175 = v305;
            if (v305 == (__int128 *)v307)
            {
              v176 = HIDWORD(v306);
              if (HIDWORD(v306))
              {
                v205 = 8 * HIDWORD(v306);
                v206 = v24;
                do
                {
                  v207 = *v174++;
                  *v206++ = v207;
                  v205 -= 8;
                }
                while (v205);
              }
              v177 = v306;
            }
            else
            {
              v305 = (__int128 *)v307;
              *(_QWORD *)a9 = v175;
              v177 = v306;
              v176 = HIDWORD(v306);
              LODWORD(v306) = 1;
            }
            HIDWORD(v306) = 0;
            *(_DWORD *)(a9 + 8) = v177;
            *(_DWORD *)(a9 + 12) = v176;
            *(_DWORD *)(a9 + 24) = v307[2];
            if ((v161 & 1) == 0 && v160)
              WTF::fastFree((unint64_t)v160, v166, v167, v168, v169, v170, v171, v172);
            v178 = __ldxr(v154);
            if (v178 == 1)
            {
              v23 = v156;
              if (!__stlxr(0, v154))
              {
LABEL_207:
                JSC::CallLinkStatus::computeFor(JSC::CodeBlock *,JSC::CodeOrigin,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> const&,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()((uint64_t)&v286, (void *)a9, v167, v168, v169, v170, v171, v172);
                LODWORD(v153) = *(_DWORD *)(a9 + 12);
                v197 = *(unsigned __int8 *)(a9 + 24);
LABEL_208:
                if (v153 | v197)
                  return;
LABEL_209:
                v204 = *(_QWORD *)a9;
                v25 = (WTF *)&v300;
                v11 = v283;
                if (v24 != *(_QWORD **)a9 && v204)
                {
                  *(_QWORD *)a9 = 0;
                  *(_DWORD *)(a9 + 8) = 0;
                  WTF::fastFree(v204, v28, v15, v16, v17, v18, v19, v20);
                }
                goto LABEL_76;
              }
            }
            else
            {
              __clrex();
              v23 = v156;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v154, 0, v167, v168, v169, v170, v171, v172);
            goto LABEL_207;
          }
          v197 = 0;
          goto LABEL_208;
        }
      }
      else
      {
        v286 = &v295;
        v287 = v11;
        v288 = &v297;
        v289 = v10;
        v290 = &v296;
      }
      v32 = v293;
      *(_QWORD *)a9 = v24;
      *(_QWORD *)(a9 + 8) = 1;
      *(_DWORD *)(a9 + 24) = 0;
      if (v32)
        break;
LABEL_43:
      v74 = v294;
      if (v294)
      {
        v75 = *(unsigned int *)(v294 + 12);
        *(_QWORD *)a9 = v24;
        *(_DWORD *)(a9 + 8) = 1;
        *(_DWORD *)(a9 + 12) = v75;
        if (v75 >= 2)
        {
          if (v75 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1981465A4);
          }
          v76 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v75));
          *(_DWORD *)(a9 + 8) = v75;
          *(_QWORD *)a9 = v76;
          v75 = *(unsigned int *)(v74 + 12);
        }
        else
        {
          v76 = v24;
        }
        v77 = v23;
        if ((_DWORD)v75)
        {
          v108 = *(uint64_t **)v74;
          v110 = 8 * v75;
          do
          {
            v109 = *v108++;
            *v76++ = v109;
            v110 -= 8;
          }
          while (v110);
        }
        *(_DWORD *)(a9 + 24) = *(_DWORD *)(v74 + 24);
        v78 = v296;
        v79 = (uint64_t **)v295;
        v80 = (uint64_t *)(*v11 & 0xFFFFFFFF8);
        if ((*v11 & 1) != 0)
        {
          __dsta = v24;
          v226 = *v80;
          if ((*v11 & 2) != 0
            || ((v227 = *(_DWORD *)((*v11 & 0xFFFFFFFF8) + 8), v227 != 0x3FFFFFFF) ? (v228 = v227 == -1) : (v228 = 1),
                v228))
          {
            v229 = 2;
          }
          else if (v227 >> 28)
          {
            v262 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v262 = v226;
            *(_DWORD *)(v262 + 8) = v227;
            v229 = 1;
            v226 = v262;
          }
          else
          {
            v229 = *v80;
            v226 = 0;
          }
          v230 = v226 | v229;
          v80 = (uint64_t *)(v230 & 0xFFFFFFFF8);
          if ((v230 & 1) != 0)
          {
            v231 = *v80;
            if ((v230 & 2) != 0
              || ((v232 = *(_DWORD *)((v230 & 0xFFFFFFFF8) + 8), v232 != 0x3FFFFFFF)
                ? (v233 = v232 == -1)
                : (v233 = 1),
                  v233))
            {
              v234 = 2;
            }
            else if (v232 >> 28)
            {
              v263 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v263 = v231;
              *(_DWORD *)(v263 + 8) = v232;
              v234 = 1;
              v231 = v263;
            }
            else
            {
              v234 = *v80;
              v231 = 0;
            }
            v235 = v231 | v234;
            v82 = (uint64_t **)(v235 & 0xFFFFFFFF8);
            v81 = 0;
            if ((v235 & 1) != 0)
            {
              v83 = 0;
              v84 = *v82;
            }
            else
            {
              v83 = 1;
              v84 = (uint64_t *)v82;
            }
          }
          else
          {
            v81 = 1;
            v82 = (uint64_t **)(v230 & 0xFFFFFFFF8);
            v83 = 1;
            v84 = v80;
          }
          v24 = __dsta;
        }
        else
        {
          v81 = 1;
          v82 = (uint64_t **)(*v11 & 0xFFFFFFFF8);
          v83 = 1;
          v84 = (uint64_t *)v82;
        }
        if (v84)
        {
          if (v84 == *v79)
            v85 = 1;
          else
            v85 = 2;
        }
        else
        {
          v85 = 1;
        }
        if ((v83 & 1) == 0 && v82)
          WTF::fastFree((unint64_t)v82, v28, v15, v16, v17, v18, v19, v20);
        JSC::CallLinkStatus::accountForExits(a9, v78, v85, v16, v17, v18, v19, v20);
        if ((v81 & 1) == 0 && v80)
          WTF::fastFree((unint64_t)v80, v86, v87, v88, v89, v90, v91, v92);
        JSC::CallLinkStatus::computeFor(JSC::CodeBlock *,JSC::CodeOrigin,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> const&,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()((uint64_t)&v286, (void *)a9, v87, v88, v89, v90, v91, v92);
        v23 = v77;
        if (*(_DWORD *)(a9 + 12) || *(_BYTE *)(a9 + 24))
          return;
        goto LABEL_209;
      }
      *(_QWORD *)a9 = v24;
      *(_QWORD *)(a9 + 8) = 1;
      *(_DWORD *)(a9 + 24) = 0;
LABEL_76:
      if (++v22 == (uint64_t *)v23)
      {
        v12 = v297;
        goto LABEL_78;
      }
    }
    v33 = (unsigned __int8 *)(v29[1] + 16);
    v34 = __ldaxr(v33);
    __dst = v24;
    if (v34)
    {
      __clrex();
    }
    else if (!__stxr(1u, v33))
    {
LABEL_14:
      v35 = v295;
      v36 = v293;
      v37 = v296;
      v38 = *v11;
      v39 = *v11 & 0xFFFFFFFF8;
      if ((*v11 & 1) != 0)
      {
        v208 = v25;
        v275 = (void *)v23;
        v209 = *(_QWORD *)v39;
        if ((v38 & 2) != 0 || (v210 = *(_DWORD *)(v39 + 8), v210 == 0x3FFFFFFF) || v210 == -1)
        {
          v211 = 2;
        }
        else if (v210 >> 28)
        {
          v259 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v259 = v209;
          *(_DWORD *)(v259 + 8) = v210;
          v211 = 1;
          v209 = v259;
        }
        else
        {
          v211 = *(_QWORD *)v39;
          v209 = 0;
        }
        v212 = v209 | v211;
        v39 = v212 & 0xFFFFFFFF8;
        if ((v212 & 1) != 0)
        {
          v213 = *(_QWORD *)v39;
          if ((v212 & 2) != 0
            || ((v214 = *(_DWORD *)((v212 & 0xFFFFFFFF8) + 8), v214 != 0x3FFFFFFF) ? (v215 = v214 == -1) : (v215 = 1),
                v215))
          {
            v216 = 2;
          }
          else if (v214 >> 28)
          {
            v278 = (void *)(v212 & 0xFFFFFFFF8);
            v260 = WTF::fastMalloc((WTF *)0x10);
            v39 = (unint64_t)v278;
            *(_QWORD *)v260 = v213;
            *(_DWORD *)(v260 + 8) = v214;
            v216 = 1;
            v213 = v260;
          }
          else
          {
            v216 = *(_QWORD *)v39;
            v213 = 0;
          }
          v217 = v213 | v216;
          v41 = (_QWORD *)(v217 & 0xFFFFFFFF8);
          v23 = (uint64_t)v275;
          v40 = 0;
          if ((v217 & 1) != 0)
          {
            v42 = 0;
            v43 = (_QWORD *)*v41;
          }
          else
          {
            v42 = 1;
            v43 = v41;
          }
        }
        else
        {
          v40 = 1;
          v41 = (_QWORD *)(v212 & 0xFFFFFFFF8);
          v42 = 1;
          v43 = (_QWORD *)v39;
          v23 = (uint64_t)v275;
        }
        v25 = v208;
      }
      else
      {
        v40 = 1;
        v41 = (_QWORD *)(*v11 & 0xFFFFFFFF8);
        v42 = 1;
        v43 = v41;
      }
      if (v43)
      {
        if (v43 == (_QWORD *)*v35)
          v44 = 1;
        else
          v44 = 2;
      }
      else
      {
        v44 = 1;
      }
      if ((v42 & 1) == 0 && v41)
      {
        v281 = v36;
        v218 = v44;
        v219 = v39;
        v220 = v40;
        WTF::fastFree((unint64_t)v41, v28, v15, v16, v17, v18, v19, v20);
        v40 = v220;
        v39 = v219;
        v44 = v218;
        v36 = v281;
      }
      v45 = *(_WORD *)(v36 + 17);
      if ((v45 & 0xC) != 0)
      {
        v298 = v25;
        v299 = 1;
        v301 = 1;
      }
      else
      {
        v46 = *(_QWORD *)(v36 + 56);
        if (v46)
        {
          v270 = v22;
          v272 = v10;
          if ((*(_BYTE *)(v46 + 64) & 1) != 0)
          {
            v25 = (WTF *)&v300;
            v298 = (WTF *)&v300;
            v299 = 1;
            v301 = 1;
          }
          else
          {
            v305 = (__int128 *)v307;
            v306 = 1;
            v112 = *(_DWORD *)(v46 + 48);
            v113 = (v112 - 1);
            if (v112 == 1)
              goto LABEL_351;
            v274 = (void *)v23;
            LODWORD(v64) = 0;
            v65 = 0;
            v66 = (_DWORD *)(v46 + 80);
            v279 = v36;
            do
            {
              if (v65 >= *(unsigned int *)(v46 + 48))
                goto LABEL_357;
              v63 = *v66;
              *(_QWORD *)&v303 = *((_QWORD *)v66 - 1);
              DWORD2(v303) = v63;
              if ((_DWORD)v64 == (_DWORD)v306)
              {
                v67 = v37;
                v68 = v39;
                v69 = v44;
                v70 = a9;
                v71 = v33;
                v72 = v40;
                v73 = (__int128 *)WTF::Vector<JSC::CallEdge,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v305, (void *)(v64 + 1), (unint64_t)&v303, v16, v17, v18, v19, v20);
                v40 = v72;
                v33 = v71;
                a9 = v70;
                v44 = v69;
                v36 = v279;
                v39 = v68;
                v37 = v67;
                v305[HIDWORD(v306)] = *v73;
              }
              else
              {
                v305[v64] = v303;
              }
              v64 = ++HIDWORD(v306);
              ++v65;
              v66 += 8;
            }
            while (v113 != v65);
            v23 = (uint64_t)v274;
            if (!(_DWORD)v64)
            {
LABEL_351:
              __break(0xC471u);
              JUMPOUT(0x19814651CLL);
            }
            v114 = v40;
            v276 = (void *)v39;
            std::__introsort<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,false>(v305, (uint64_t *)&v305[v64], 126 - 2 * __clz(v64), 1);
            v116 = HIDWORD(v306);
            if (!HIDWORD(v306))
              goto LABEL_358;
            if (*((_DWORD *)v305 + 2) < DWORD2(v305[HIDWORD(v306) - 1]))
            {
              __break(0xC471u);
              JUMPOUT(0x19814624CLL);
            }
            v117 = 0;
            v118 = 0;
            v119 = 0;
            LODWORD(v115) = *(_DWORD *)(v36 + 20);
            *(_QWORD *)&v303 = &v304;
            *((_QWORD *)&v303 + 1) = 1;
            v120 = (double)v115;
            v121 = HIDWORD(xmmword_1ECF4C43C);
            v122 = 0.0;
            v39 = (unint64_t)v276;
            v40 = v114;
            do
            {
              v123 = DWORD2(v305[v117]);
              v124 = (double)v123;
              if (v119 >= v121 || v123 < dword_1ECF4C44C)
              {
                v120 = v120 + v124;
              }
              else
              {
                v125 = *(_QWORD *)&v305[v117];
                v302 = v125;
                if (v118 == DWORD2(v303))
                {
                  v126 = (_QWORD *)WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v303, (void *)(v118 + 1), (unint64_t)&v302, v16, v17, v18, v19, v20);
                  v40 = v114;
                  v39 = (unint64_t)v276;
                  v118 = HIDWORD(v303);
                  *(_QWORD *)(v303 + 8 * HIDWORD(v303)) = *v126;
                  v121 = HIDWORD(xmmword_1ECF4C43C);
                  v116 = HIDWORD(v306);
                }
                else
                {
                  *(_QWORD *)(v303 + 8 * v118) = v125;
                }
                v122 = v122 + v124;
                HIDWORD(v303) = ++v118;
              }
              ++v119;
              ++v117;
            }
            while (v119 < v116);
            if ((v118 != 0) != (v122 != 0.0))
            {
              __break(0xC471u);
              JUMPOUT(0x19814626CLL);
            }
            v22 = v270;
            v10 = v272;
            v25 = (WTF *)&v300;
            if (v118 && v122 / v120 >= *(double *)&qword_1ECF4C450)
            {
              if (v122 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x19814628CLL);
              }
              v298 = (WTF *)&v300;
              v299 = 1;
              v301 = 0;
              WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)&v298, (const void **)&v303, v15, v16, v17, v18, v19, v20);
              LOBYTE(v301) = v120 != 0.0;
              BYTE2(v301) = 1;
              v39 = (unint64_t)v276;
              v40 = v114;
            }
            else
            {
              v298 = (WTF *)&v300;
              v299 = 1;
              v301 = 1;
            }
            v127 = v303;
            if (&v304 != (uint64_t *)v303 && (_QWORD)v303)
            {
              *(_QWORD *)&v303 = 0;
              DWORD2(v303) = 0;
              WTF::fastFree(v127, v28, v15, v16, v17, v18, v19, v20);
              v40 = v114;
              v39 = (unint64_t)v276;
            }
            v128 = v305;
            if (v307 != (_DWORD *)v305 && v305)
            {
              v305 = 0;
              LODWORD(v306) = 0;
              WTF::fastFree((unint64_t)v128, v28, v15, v16, v17, v18, v19, v20);
              v40 = v114;
              v39 = (unint64_t)v276;
            }
          }
        }
        else
        {
          v25 = (WTF *)&v300;
          v298 = (WTF *)&v300;
          v299 = 1;
          v301 = 0;
          v47 = *(_QWORD *)(v36 + 48);
          if (v47)
          {
            if ((v45 & 2) != 0 && *(_BYTE *)(v47 + 5) == 26)
            {
              v47 = *(_QWORD *)(v47 + 24);
              if ((v47 & 1) != 0)
                v47 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFFELL) + 48);
            }
            v300 = v47;
            HIDWORD(v299) = 1;
          }
          LOBYTE(v301) = *(_DWORD *)(v36 + 20) != 0;
        }
      }
      HIBYTE(v301) = *(_BYTE *)(v36 + 19);
      v24 = __dst;
      if ((v44 & (v37 >> 8)) != 0)
      {
        if (BYTE2(v301))
        {
          v28 = &v304;
          *(_QWORD *)&v303 = &v304;
          *((_QWORD *)&v303 + 1) = 1;
          v179 = v298;
          v269 = v44;
          if (HIDWORD(v299))
          {
            v180 = 8 * HIDWORD(v299);
            do
            {
              v280 = v179;
              v181 = *(_QWORD *)v179;
              if (*(_BYTE *)(*(_QWORD *)v179 + 5) == 26 && (v181 = *(_QWORD *)(v181 + 24), (v181 & 1) != 0))
              {
                v182 = v40;
                v183 = v39;
                v181 = *(_QWORD *)((v181 & 0xFFFFFFFFFFFFFFFELL) + 48);
              }
              else
              {
                v182 = v40;
                v183 = v39;
              }
              JSC::variantListWithVariant((uint64_t)&v303, v181, v16, v17, v18, v19, v20, (uint64_t)&v305);
              v184 = v303;
              v28 = &v304;
              if ((uint64_t *)v303 != &v304)
              {
                if ((_QWORD)v303)
                {
                  *(_QWORD *)&v303 = 0;
                  DWORD2(v303) = 0;
                  WTF::fastFree(v184, &v304, v15, v16, v17, v18, v19, v20);
                  v28 = &v304;
                }
                *(_QWORD *)&v303 = &v304;
              }
              v185 = (WTF *)v305;
              v39 = v183;
              v40 = v182;
              v186 = v280;
              if (v305 == (__int128 *)v307)
              {
                v187 = HIDWORD(v306);
                LOBYTE(v44) = v269;
                if (HIDWORD(v306))
                {
                  v44 = v39;
                  memcpy(&v304, v307, 8 * HIDWORD(v306));
                  v28 = &v304;
                  v186 = v280;
                  v40 = v182;
                  v39 = v44;
                  LOBYTE(v44) = v269;
                }
                v188 = v306;
                v185 = (WTF *)&v304;
              }
              else
              {
                *(_QWORD *)&v303 = v305;
                v188 = v306;
                v187 = HIDWORD(v306);
                LOBYTE(v44) = v269;
              }
              *((_QWORD *)&v303 + 1) = __PAIR64__(v187, v188);
              v179 = (WTF *)((char *)v186 + 8);
              v180 -= 8;
              v24 = __dst;
            }
            while (v180);
            v179 = v298;
            v25 = (WTF *)&v300;
          }
          else
          {
            v185 = (WTF *)&v304;
          }
          if (v179 != v25)
          {
            if (v179)
            {
              v298 = 0;
              LODWORD(v299) = 0;
              v44 = v39;
              v236 = v40;
              WTF::fastFree((unint64_t)v179, &v304, v15, v16, v17, v18, v19, v20);
              v28 = &v304;
              LOBYTE(v40) = v236;
              v39 = v44;
              LOBYTE(v44) = v269;
              v185 = (WTF *)v303;
            }
            v298 = v25;
          }
          if (v185 == (WTF *)&v304)
          {
            v192 = HIDWORD(v303);
            if (HIDWORD(v303))
            {
              v44 = v39;
              v193 = v40;
              memcpy(&v300, &v304, 8 * HIDWORD(v303));
              LOBYTE(v40) = v193;
              v39 = v44;
              LOBYTE(v44) = v269;
            }
            v194 = DWORD2(v303);
          }
          else
          {
            v298 = v185;
            v194 = DWORD2(v303);
            v192 = HIDWORD(v303);
          }
          v299 = __PAIR64__(v192, v194);
          v25 = (WTF *)&v300;
        }
        else
        {
          LOBYTE(v301) = 1;
        }
      }
      if ((v44 & v37) != 0)
        LOBYTE(v301) = 1;
      v48 = *(_QWORD *)a9;
      if (*(_QWORD **)a9 != v24)
      {
        if (v48)
        {
          *(_QWORD *)a9 = 0;
          *(_DWORD *)(a9 + 8) = 0;
          v195 = v39;
          v196 = v40;
          WTF::fastFree(v48, v28, v15, v16, v17, v18, v19, v20);
          LOBYTE(v40) = v196;
          v39 = v195;
        }
        *(_QWORD *)a9 = v24;
      }
      v49 = v298;
      if (v298 == v25)
      {
        v50 = HIDWORD(v299);
        if (HIDWORD(v299))
        {
          v51 = v24;
          v52 = v39;
          v53 = v24;
          v54 = v22;
          v55 = v23;
          v56 = v10;
          v57 = a9;
          v58 = v33;
          v59 = v40;
          memcpy(v51, v25, 8 * HIDWORD(v299));
          LOBYTE(v40) = v59;
          v33 = v58;
          a9 = v57;
          v10 = v56;
          v23 = v55;
          v22 = v54;
          v24 = v53;
          v39 = v52;
        }
        v60 = v299;
      }
      else
      {
        v298 = v25;
        *(_QWORD *)a9 = v49;
        v60 = v299;
        v50 = HIDWORD(v299);
        LODWORD(v299) = 1;
      }
      HIDWORD(v299) = 0;
      *(_DWORD *)(a9 + 8) = v60;
      *(_DWORD *)(a9 + 12) = v50;
      *(_DWORD *)(a9 + 24) = v301;
      if ((v40 & 1) == 0 && v39)
        WTF::fastFree(v39, v28, v15, v16, v17, v18, v19, v20);
      v61 = __ldxr(v33);
      v62 = v25;
      if (v61 == 1)
      {
        if (!__stlxr(0, v33))
          goto LABEL_57;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, v15, v16, v17, v18, v19, v20);
LABEL_57:
      v93 = v287;
      v94 = *v286;
      v95 = (uint64_t *)(*v287 & 0xFFFFFFFF8);
      if ((*v287 & 1) != 0)
      {
        v221 = v24;
        v222 = *v95;
        if ((*v287 & 2) != 0 || (v223 = *(_DWORD *)((*v287 & 0xFFFFFFFF8) + 8), v223 == 0x3FFFFFFF) || v223 == -1)
        {
          v224 = 2;
        }
        else if (v223 >> 28)
        {
          v261 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v261 = v222;
          *(_DWORD *)(v261 + 8) = v223;
          v224 = 1;
          v222 = v261;
        }
        else
        {
          v224 = *v95;
          v222 = 0;
        }
        v225 = v222 | v224;
        v95 = (uint64_t *)(v225 & 0xFFFFFFFF8);
        if ((v225 & 1) != 0)
        {
          v96 = 0;
          v97 = *v95;
        }
        else
        {
          v96 = 1;
          v97 = (uint64_t)v95;
        }
        v24 = v221;
      }
      else
      {
        v96 = 1;
        v97 = *v287 & 0xFFFFFFFF8;
      }
      if (v97)
        v98 = v97 != *v94;
      else
        v98 = 0;
      if ((v96 & 1) == 0 && v95)
        WTF::fastFree((unint64_t)v95, v28, v15, v16, v17, v18, v19, v20);
      if (!v98)
      {
        v99 = *v93;
        if ((*v93 & 2) != 0)
          v100 = 0xFFFFFFFFLL;
        else
          v100 = (v99 & 1) != 0 ? *(unsigned int *)((v99 & 0xFFFFFFFF8) + 8) : v99 >> 36;
        JSC::CallLinkStatus::computeFor((unint64_t)&v305, *v288, v100, v289, *v290, v18, v19, v20);
        JSC::CallLinkStatus::merge(a9, (uint64_t)&v305, v101, v102, v103, v104, v105, v106);
        v107 = v305;
        if (v307 != (_DWORD *)v305)
        {
          if (v305)
          {
            v305 = 0;
            LODWORD(v306) = 0;
            WTF::fastFree((unint64_t)v107, v28, v15, v16, v17, v18, v19, v20);
          }
        }
      }
      if (*(_DWORD *)(a9 + 12) || *(_BYTE *)(a9 + 24))
        return;
      v266 = *(_QWORD *)a9;
      v25 = v62;
      v11 = v283;
      if (v24 != *(_QWORD **)a9 && v266)
      {
        *(_QWORD *)a9 = 0;
        *(_DWORD *)(a9 + 8) = 0;
        WTF::fastFree(v266, v28, v15, v16, v17, v18, v19, v20);
      }
      goto LABEL_43;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
    goto LABEL_14;
  }
LABEL_78:
  v111 = *v11;
  if ((*v11 & 2) != 0)
  {
    LODWORD(v111) = -1;
  }
  else if ((v111 & 1) != 0)
  {
    LODWORD(v111) = *(_DWORD *)((v111 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v111 >>= 36;
  }
  JSC::CallLinkStatus::computeFor(a9, v12, v111, v10, v296, v18, v19, v20);
}

void JSC::CallLinkStatus::setProvenConstantCallee(_DWORD *__dst, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v14 = &v16;
  v16 = a2;
  v15 = 0x100000001;
  v10 = (char *)(__dst + 4);
  v9 = *(_QWORD *)__dst;
  if ((char *)v9 == v10)
    goto LABEL_2;
  if (!v9)
  {
    *(_QWORD *)__dst = v10;
LABEL_2:
    v11 = (char *)&v17;
    v12 = 1;
    goto LABEL_3;
  }
  *(_QWORD *)__dst = 0;
  __dst[2] = 0;
  WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v13 = v14;
  *(_QWORD *)__dst = v10;
  v12 = HIDWORD(v15);
  if (v13 != &v16)
  {
    *(_QWORD *)__dst = v13;
    goto LABEL_4;
  }
  if (!HIDWORD(v15))
    goto LABEL_4;
  v11 = (char *)(&v16 + HIDWORD(v15));
LABEL_3:
  memcpy(v10, &v16, ((v11 - (char *)&v14 - 24) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_4:
  __dst[2] = v15;
  __dst[3] = v12;
  *((_WORD *)__dst + 12) = 256;
}

void JSC::despecifiedVariantList(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v8 = (void *)(a7 + 16);
  *(_QWORD *)a7 = a7 + 16;
  *(_QWORD *)(a7 + 8) = 1;
  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)a1;
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (*(_BYTE *)(*v10 + 5) == 26)
      {
        v12 = *(_QWORD *)(v12 + 24);
        if ((v12 & 1) != 0)
          v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      JSC::variantListWithVariant(a7, v12, a2, a3, a4, a5, a6, (uint64_t)&v18);
      v15 = *(_QWORD *)a7;
      if (*(void **)a7 != v8)
      {
        if (v15)
        {
          *(_QWORD *)a7 = 0;
          *(_DWORD *)(a7 + 8) = 0;
          WTF::fastFree(v15, v13, v14, a2, a3, a4, a5, a6);
        }
        *(_QWORD *)a7 = v8;
      }
      if (v18 == &v21)
      {
        v16 = v20;
        if (v20)
          memcpy(v8, &v21, 8 * v20);
        v17 = v19;
      }
      else
      {
        *(_QWORD *)a7 = v18;
        v17 = v19;
        v16 = v20;
      }
      *(_DWORD *)(a7 + 8) = v17;
      *(_DWORD *)(a7 + 12) = v16;
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
}

uint64_t JSC::CallLinkStatus::merge(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  uint64_t v31;

  *(_BYTE *)(result + 24) |= *(_BYTE *)(a2 + 24);
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = result;
    v10 = *(uint64_t **)a2;
    v11 = *(_QWORD *)a2 + 8 * v8;
    v12 = *(_DWORD *)(result + 12);
    do
    {
      v13 = *(uint64_t **)v9;
      v14 = (uint64_t *)(*(_QWORD *)v9 + 8 * v12);
      if (v12)
      {
        v15 = *v10;
        while (1)
        {
          v16 = *v13;
          if (*v13 == v15)
            break;
          v17 = *(unsigned __int8 *)(v16 + 5);
          if (v16)
            v18 = v17 == 26;
          else
            v18 = 0;
          if (v18)
          {
            v19 = *(_QWORD *)(v16 + 24);
            if ((v19 & 1) != 0)
              v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v20 = *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C);
            v21 = *(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C) != 0;
            v22 = (char **)(16 * v20);
            if ((_DWORD)v20)
              v23 = v22 == &JSC::ExecutableBase::s_info;
            else
              v23 = 1;
            if (!v23)
            {
              do
              {
                v22 = (char **)v22[2];
                v21 = v22 != 0;
              }
              while (v22 != &JSC::ExecutableBase::s_info && v22 != 0);
            }
            if (v21)
              v19 = *v13;
            else
              v19 = 0;
          }
          if (v15 && *(_BYTE *)(v15 + 5) == 26)
          {
            v25 = *(_QWORD *)(v15 + 24);
            if ((v25 & 1) != 0)
              v25 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v26 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
            v27 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
            v28 = (char **)(16 * v26);
            if ((_DWORD)v26)
              v29 = v28 == &JSC::ExecutableBase::s_info;
            else
              v29 = 1;
            if (!v29)
            {
              do
              {
                v28 = (char **)v28[2];
                v27 = v28 != 0;
              }
              while (v28 != &JSC::ExecutableBase::s_info && v28 != 0);
            }
            if (v27)
              v25 = *v10;
            else
              v25 = 0;
          }
          if (v19 == v25)
          {
            if (v17 == 26)
            {
              v16 = *(_QWORD *)(v16 + 24);
              if ((v16 & 1) != 0)
                v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
            }
            *v13 = v16;
            break;
          }
          if (++v13 == v14)
            goto LABEL_46;
        }
      }
      else
      {
LABEL_46:
        if (v12 == *(_DWORD *)(v9 + 8))
        {
          result = WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, (void *)(v12 + 1), (unint64_t)v10, a4, a5, a6, a7, a8);
          v31 = *(unsigned int *)(v9 + 12);
          v12 = v31 + 1;
          *(_QWORD *)(*(_QWORD *)v9 + 8 * v31) = *(_QWORD *)result;
        }
        else
        {
          ++v12;
          *v14 = *v10;
        }
        *(_DWORD *)(v9 + 12) = v12;
      }
      ++v10;
    }
    while (v10 != (uint64_t *)v11);
  }
  return result;
}

uint64_t JSC::CallLinkStatus::filter(uint64_t result, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(char **)result;
  v3 = *(unsigned int *)(result + 12);
  v4 = (char *)(*(_QWORD *)result + 8 * v3);
  v5 = 0;
  if ((_DWORD)v3)
  {
    v6 = (char *)(*(_QWORD *)result + 8 * v3);
    v7 = v6;
    while (1)
    {
      v8 = *(_QWORD *)v2;
      if (!*(_QWORD *)v2)
        goto LABEL_53;
      v9 = *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C);
      v10 = *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
      v11 = 16 * v9;
      v12 = (char **)(16 * v9) != &JSC::ExecutableBase::s_info
         && *(_DWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C) != 0;
      if (v12)
      {
        v13 = 16 * v9;
        do
          v13 = *(_QWORD *)(v13 + 16);
        while ((char **)v13 != &JSC::ExecutableBase::s_info && v13 != 0);
        if (!v13)
        {
          do
            v11 = *(_QWORD *)(v11 + 16);
          while ((char **)v11 != &JSC::ExecutableBase::s_info && v11 != 0);
          if (v11)
          {
            __break(0xC471u);
            JUMPOUT(0x198146BB8);
          }
LABEL_21:
          if (v8 != a2)
            goto LABEL_52;
          goto LABEL_22;
        }
      }
      else if (!(_DWORD)v9)
      {
        goto LABEL_21;
      }
      if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 26)
        goto LABEL_52;
      v16 = *(_QWORD *)(a2 + 24);
      if ((v16 & 1) != 0)
        v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v8 + 5) == 26)
      {
        v8 = *(_QWORD *)(v8 + 24);
        if ((v8 & 1) != 0)
          v8 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 48);
      }
      else
      {
        if (v12)
        {
          do
          {
            v11 = *(_QWORD *)(v11 + 16);
            v10 = v11 != 0;
          }
          while ((char **)v11 != &JSC::ExecutableBase::s_info && v11 != 0);
        }
        if (!v10)
          v8 = 0;
      }
      if (v16 != v8)
      {
LABEL_52:
        *(_QWORD *)v2 = 0;
LABEL_53:
        v22 = v2;
        if (v7 != (char *)(*(_QWORD *)result + 8 * v3))
        {
          if (v6 == v2)
          {
            v22 = v7;
          }
          else
          {
            if (v6 <= v7)
            {
              v27 = 0;
              v26 = (v2 - v6) >> 3;
              do
              {
                *(_QWORD *)&v7[((v2 - v6) & 0xFFFFFFFFFFFFFFF8) - 8 + v27] = *(_QWORD *)&v2[v27 - 8];
                v27 -= 8;
              }
              while (&v2[v27] != v6);
            }
            else
            {
              v23 = v7;
              v24 = v6;
              do
              {
                v25 = *(_QWORD *)v24;
                v24 += 8;
                *(_QWORD *)v23 = v25;
                v23 += 8;
              }
              while (v24 != v2);
              v26 = (v2 - v6) >> 3;
            }
            v22 = &v7[8 * v26];
          }
        }
        v6 = v2 + 8;
        ++v5;
        v7 = v22;
        goto LABEL_22;
      }
      *(_QWORD *)v2 = a2;
      if (!a2)
        goto LABEL_53;
LABEL_22:
      v2 += 8;
      if (v2 >= v4)
      {
        v2 = *(char **)result;
        v4 = v7;
        goto LABEL_32;
      }
    }
  }
  v6 = (char *)(*(_QWORD *)result + 8 * v3);
LABEL_32:
  v17 = &v2[8 * v3];
  if (v6 != v17)
  {
    if (v6 <= v4)
    {
      v19 = &v4[((v17 - v6) & 0xFFFFFFFFFFFFFFF8) - 8];
      do
      {
        v20 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v19 = v20;
        v19 -= 8;
      }
      while (v17 != v6);
    }
    else
    {
      do
      {
        v18 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v4 = v18;
        v4 += 8;
      }
      while (v6 != v17);
    }
  }
  *(_DWORD *)(result + 12) = v3 - v5;
  return result;
}

uint64_t JSC::CallLinkStatus::dump(uint64_t this, WTF::PrintStream *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  WTF::PrintStream *v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  WTF::PrintStream *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  WTF::PrintStream *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  JSC::CallVariant **v33;
  const char **v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[4];
  char v40;
  const char *v41;
  uint64_t v42;
  char v43;

  v3 = this;
  if (*(_DWORD *)(this + 12) || *(_BYTE *)(this + 24))
  {
    v39[0] = ", ";
    v39[1] = 3;
    v39[2] = &str_3_16;
    v39[3] = 1;
    v40 = 0;
    v4 = *(unsigned __int8 *)(this + 25);
    if (*(_BYTE *)(this + 25))
    {
      v5 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      WTF::StringImpl::utf8ForCharacters((char *)&str_3_16, 0, (uint64_t)&v33, v8);
      WTF::printExpectedCStringHelper(v7, "StringView", &v33);
      if ((_DWORD)v34 != -1)
        ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v40 = 1;
      v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      WTF::StringImpl::utf8ForCharacters("Statically Proved", 0x11uLL, (uint64_t)&v33, v10);
      WTF::printExpectedCStringHelper(v9, "StringView", &v33);
      if ((_DWORD)v34 != -1)
        ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    if (*(_BYTE *)(v3 + 24))
    {
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      if (v4)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v33, v15);
        WTF::printExpectedCStringHelper(v14, "StringView", &v33);
        if ((_DWORD)v34 != -1)
          ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_3_16, 0, (uint64_t)&v33, v15);
        WTF::printExpectedCStringHelper(v14, "StringView", &v33);
        if ((_DWORD)v34 != -1)
          ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        v11 = 1;
        v40 = 1;
      }
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      WTF::StringImpl::utf8ForCharacters("Could Take Slow Path", 0x14uLL, (uint64_t)&v33, v17);
      WTF::printExpectedCStringHelper(v16, "StringView", &v33);
      if ((_DWORD)v34 != -1)
        ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    if (*(_BYTE *)(v3 + 26))
    {
      v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      if (v11)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v33, v21);
        WTF::printExpectedCStringHelper(v20, "StringView", &v33);
        if ((_DWORD)v34 != -1)
          ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_3_16, 0, (uint64_t)&v33, v21);
        WTF::printExpectedCStringHelper(v20, "StringView", &v33);
        if ((_DWORD)v34 != -1)
          ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
        v40 = 1;
      }
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
      WTF::StringImpl::utf8ForCharacters("Based On Stub", 0xDuLL, (uint64_t)&v33, v23);
      WTF::printExpectedCStringHelper(v22, "StringView", &v33);
      if ((_DWORD)v34 != -1)
        ((void (*)(const char **, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(&v41, &v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v11 = 1;
    }
    if (*(_DWORD *)(v3 + 12))
    {
      v33 = (JSC::CallVariant **)v3;
      v34 = (const char **)", ";
      v35 = 3;
      v36 = &str_3_16;
      v37 = 1;
      v38 = 0;
      v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      if (v11)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v41, v27);
        WTF::printExpectedCStringHelper(v26, "StringView", &v41);
        if ((_DWORD)v42 != -1)
          ((void (*)(char *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v42])(&v43, &v41);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters((char *)&str_3_16, 0, (uint64_t)&v41, v27);
        WTF::printExpectedCStringHelper(v26, "StringView", &v41);
        if ((_DWORD)v42 != -1)
          ((void (*)(char *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v42])(&v43, &v41);
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
        v40 = 1;
      }
      WTF::ListDump<WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(&v33, v24);
      this = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    v29 = *(unsigned __int8 *)(v3 + 27);
    v28 = v3 + 27;
    if (v29)
    {
      v41 = "maxArgumentCountIncludingThisForVarargs = ";
      v42 = 43;
      v33 = (JSC::CallVariant **)v39;
      v34 = &v41;
      v35 = v28;
      return WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char const&)::{lambda(WTF::PrintStream&)#1}>((uint64_t)a2, &v33);
    }
  }
  else
  {
    v30 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    WTF::StringImpl::utf8ForCharacters("Not Set", 7uLL, (uint64_t)&v33, v32);
    WTF::printExpectedCStringHelper(v31, "StringView", &v33);
    if ((_DWORD)v34 != -1)
      ((void (*)(_QWORD *, JSC::CallVariant ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v34])(v39, &v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return this;
}

uint64_t JSC::CallVariant::dump(JSC::CallVariant *this, WTF::PrintStream *a2)
{
  uint64_t v3;
  int v4;
  WTF::PrintStream *v5;
  JSC::Structure *v6;
  WTF::PrintStream *v7;
  JSC::ExecutableBase *v9;
  WTF::PrintStream *v10;
  JSC::Structure *v11;
  uint64_t v12;
  char **v13;
  BOOL v14;
  uint64_t v15;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  uint64_t v20;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%s");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v4 = *(unsigned __int8 *)(v3 + 5);
  if ((v4 - 27) > 1)
  {
    if (v4 == 26)
    {
      v20 = *(_QWORD *)this;
      v9 = *(JSC::ExecutableBase **)(v3 + 24);
      if ((v9 & 1) != 0)
        v9 = *(JSC::ExecutableBase **)(((unint64_t)v9 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(Function: ");
      if ((v3 & 0xFFFE000000000002) != 0)
        v11 = 0;
      else
        v11 = (JSC::Structure *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE));
      JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v20, v10, 0, v11);
      WTF::PrintStream::printf(v10, "%s", "; Executable: ");
      JSC::ExecutableBase::dump(v9, v10);
      WTF::PrintStream::printf(v10, "%s", ")");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    v12 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
    v13 = (char **)(16 * v12);
    if ((_DWORD)v12)
      v14 = v13 == &JSC::ExecutableBase::s_info;
    else
      v14 = 1;
    if (v14)
    {
      if (!(_DWORD)v12)
      {
LABEL_36:
        v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v18, "%s", "Non-executable callee: ");
        (*(void (**)(uint64_t, WTF::PrintStream *))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0xB8))(v3, v18);
        return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
    }
    else
    {
      v15 = 16 * v12;
      do
        v15 = *(_QWORD *)(v15 + 16);
      while ((char **)v15 != &JSC::ExecutableBase::s_info && v15 != 0);
      if (!v15)
      {
        do
          v13 = (char **)v13[2];
        while (v13 != &JSC::ExecutableBase::s_info && v13 != 0);
        if (v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1981474FCLL);
        }
        goto LABEL_36;
      }
    }
    v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v19, "%s", "(Executable: ");
    JSC::ExecutableBase::dump((JSC::ExecutableBase *)v3, v19);
    WTF::PrintStream::printf(v19, "%s");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v20 = *(_QWORD *)this;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "InternalFunction: ");
  if ((v3 & 0xFFFE000000000002) != 0)
    v6 = 0;
  else
    v6 = (JSC::Structure *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v20, v5, 0, v6);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::variantListWithVariant@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a2;
  v22 = a2;
  *(_QWORD *)a8 = a8 + 16;
  *(_QWORD *)(a8 + 8) = 1;
  v10 = *(unsigned int *)(result + 12);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = 0;
    v12 = *(uint64_t **)result;
    v13 = 8 * v10;
    v14 = a2;
    v15 = a2;
    v16 = a2;
    while (1)
    {
      v17 = *v12;
      v21 = *v12;
      if (v16)
      {
        if (v16 == v17)
        {
          v8 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
        }
        else
        {
          v18 = *(unsigned __int8 *)(v17 + 5);
          if (v18 == 26)
          {
            v19 = *(_QWORD *)(v17 + 24);
            if ((v19 & 1) != 0)
              v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v19 = v17;
          }
          if (*(_BYTE *)(v16 + 5) == 26)
          {
            v20 = *(_QWORD *)(v16 + 24);
            if ((v20 & 1) != 0)
              v20 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          else
          {
            v16 = v15;
            v20 = v15;
          }
          if (v19 != v20)
            goto LABEL_12;
          if (v18 == 26)
          {
            v17 = *(_QWORD *)(v17 + 24);
            if ((v17 & 1) != 0)
              v17 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
          }
          v8 = 0;
          v14 = 0;
          v15 = 0;
          v16 = 0;
          v21 = v17;
        }
        v22 = 0;
      }
LABEL_12:
      if ((_DWORD)v11 == *(_DWORD *)(a8 + 8))
      {
        result = WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, (void *)(v11 + 1), (unint64_t)&v21, a3, a4, a5, a6, a7);
        v11 = *(unsigned int *)(a8 + 12);
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v11) = *(_QWORD *)result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v11) = v17;
      }
      LODWORD(v11) = v11 + 1;
      *(_DWORD *)(a8 + 12) = v11;
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_25;
    }
  }
  LODWORD(v11) = 0;
  v14 = a2;
LABEL_25:
  if (v14)
  {
    if ((_DWORD)v11 == *(_DWORD *)(a8 + 8))
    {
      result = WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, (void *)(v11 + 1), (unint64_t)&v22, a3, a4, a5, a6, a7);
      v11 = *(unsigned int *)(a8 + 12);
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v11) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v11) = v8;
    }
    *(_DWORD *)(a8 + 12) = v11 + 1;
  }
  return result;
}

uint64_t JSC::CheckPrivateBrandStatus::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(unint64_t **)result;
    v5 = *(_QWORD *)result + 16 * v2;
    do
    {
      v6 = *v4;
      if ((*v4 & 1) != 0)
      {
        v7 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v7)
        {
LABEL_5:
          v8 = 0;
          v9 = 8 * v7;
          do
          {
            v10 = *v4 & 0xFFFFFFFFFFFFFFFCLL;
            if ((*v4 & 1) != 0)
              v10 = *(_QWORD *)(v10 + v8 + 8);
            if ((!*(_QWORD *)(v10 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
              && ((*(_QWORD *)(v10 + 48) | 2) == 2
               || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
            {
              result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 24))(a2, v10);
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 40))(a2, v10);
            }
            v8 += 8;
          }
          while (v9 != v8);
        }
      }
      else
      {
        v7 = v6 > 3;
        if (v7)
          goto LABEL_5;
      }
      v4 += 2;
    }
    while (v4 != (unint64_t *)v5);
  }
  return result;
}

_QWORD *JSC::CheckPrivateBrandStatus::markIfCheap<JSC::SlotVisitor>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;

  v8 = *((unsigned int *)result + 3);
  if ((_DWORD)v8)
  {
    v10 = (_QWORD *)*result;
    v11 = 16 * v8;
    do
    {
      result = JSC::StructureSet::markIfCheap<JSC::SlotVisitor>(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t JSC::appendICStatusVariant<WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::CheckPrivateBrandVariant>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  LODWORD(v10) = *(_DWORD *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(*(_QWORD *)a1 + v12);
      if (JSC::CheckPrivateBrandVariant::attemptToMerge(v14, a2))
      {
        v15 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v15)
        {
          v16 = 0;
          v17 = 0;
          while (1)
          {
            if (v13 != v17)
            {
              if ((JSC::CheckPrivateBrandVariant::overlaps((uint64_t *)(*(_QWORD *)a1 + v16), v14) & 1) != 0)
                return 0;
              v15 = *(unsigned int *)(a1 + 12);
            }
            ++v17;
            v16 += 16;
            result = 1;
            if (v17 >= v15)
              return result;
          }
        }
        return 1;
      }
      ++v13;
      v10 = *(unsigned int *)(a1 + 12);
      v12 += 16;
    }
    while (v13 < v10);
    if (!(_DWORD)v10)
      goto LABEL_2;
    v18 = 0;
    v19 = 0;
    while ((JSC::CheckPrivateBrandVariant::overlaps((uint64_t *)(*(_QWORD *)a1 + v18), a2) & 1) == 0)
    {
      ++v19;
      v10 = *(unsigned int *)(a1 + 12);
      v18 += 16;
      if (v19 >= v10)
        goto LABEL_2;
    }
    return 0;
  }
  else
  {
LABEL_2:
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CheckPrivateBrandVariant const&>(a1, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      JSC::CheckPrivateBrandVariant::CheckPrivateBrandVariant((uint64_t *)(*(_QWORD *)a1 + 16 * v10), a2);
      ++*(_DWORD *)(a1 + 12);
    }
    return 1;
  }
}

void JSC::CheckPrivateBrandStatus::computeForBaseline(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  JSC::CodeOrigin *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  int v51;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  int v73;
  unsigned int v74;
  _BYTE v75[24];
  WTF *v76;
  unint64_t v77;
  _BYTE v78[16];
  char v79;

  v8 = a5;
  v11 = a2;
  v13 = (unsigned __int8 *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v13))
    goto LABEL_3;
LABEL_4:
  v15 = 0;
  v76 = (WTF *)v78;
  v77 = 1;
  v79 = 0;
  v16 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = a4;
      v16 = 1;
    }
    else
    {
      v16 = 0;
      v15 = a4 << 36;
    }
  }
  v17 = v15 | v16;
  v71 = v15 | v16;
  v18 = *a3;
  if (!*a3)
  {
    v36 = 0;
    goto LABEL_12;
  }
  v70 = v11;
  v19 = a1;
  v20 = v13;
  v21 = v15 | v16;
  v22 = v8;
  v23 = *(_DWORD *)(v18 - 8);
  v24 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v71, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v23;
  v25 = (JSC::CodeOrigin *)(v18 + (v24 << 6));
  if ((JSC::CodeOrigin::isApproximatelyEqualTo(v25, (const JSC::CodeOrigin *)&v71, 0, v26, v27, v28, v29, v30) & 1) != 0)
  {
LABEL_10:
    v36 = *(_QWORD *)(v18 + (v24 << 6) + 8);
    goto LABEL_11;
  }
  v54 = 1;
  while (1)
  {
    v55 = *(_QWORD *)v25;
    if (*(_QWORD *)v25 == 2)
      break;
    if ((v55 & 2) != 0)
    {
      v64 = (_QWORD *)(v55 & 0xFFFFFFFF8);
      if ((v55 & 1) == 0)
        goto LABEL_54;
    }
    else
    {
      if ((v55 & 1) == 0)
        goto LABEL_37;
      v64 = (_QWORD *)(v55 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v55 & 0xFFFFFFFF8) + 8) != -1)
        goto LABEL_37;
    }
    v64 = (_QWORD *)*v64;
LABEL_54:
    if (!v64)
      break;
LABEL_37:
    v24 = ((_DWORD)v24 + v54) & v23;
    v25 = (JSC::CodeOrigin *)(v18 + (v24 << 6));
    ++v54;
    if (JSC::CodeOrigin::isApproximatelyEqualTo(v25, (const JSC::CodeOrigin *)&v71, 0, v31, v32, v33, v34, v35))goto LABEL_10;
  }
  v36 = 0;
LABEL_11:
  v8 = v22;
  v17 = v21;
  v13 = v20;
  a1 = v19;
  v11 = v70;
LABEL_12:
  JSC::CheckPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v72, *(_QWORD *)(v11 + 72), v36);
  v44 = v76;
  if (HIDWORD(v77))
  {
    v69 = 16 * HIDWORD(v77);
    do
    {
      if ((*(_QWORD *)v44 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFFCLL, v37, v38, v39, v40, v41, v42, v43);
      v44 = (WTF *)((char *)v44 + 16);
      v69 -= 16;
    }
    while (v69);
    v44 = v76;
  }
  if (v44 != (WTF *)v78)
  {
    if (v44)
    {
      v76 = 0;
      LODWORD(v77) = 0;
      WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
    }
    v76 = (WTF *)v78;
  }
  v45 = v72;
  if (v72 == (WTF *)v75)
  {
    if (v74)
    {
      v56 = 16 * v74;
      v57 = (uint64_t *)v78;
      do
      {
        *v57 = 0;
        if ((*(_QWORD *)v45 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v57, v45);
        else
          *v57 = *(_QWORD *)v45 & 0xFFFFFFFFFFFFFFFDLL;
        v57[1] = *((_QWORD *)v45 + 1);
        if ((*(_QWORD *)v45 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v45 & 0xFFFFFFFFFFFFFFFCLL, v37, v38, v39, v40, v41, v42, v43);
        v57 += 2;
        v45 = (WTF *)((char *)v45 + 16);
        v56 -= 16;
      }
      while (v56);
      v45 = v72;
    }
    v46 = v73;
  }
  else
  {
    v72 = (WTF *)v75;
    v76 = v45;
    v46 = v73;
    v73 = 1;
    v45 = (WTF *)v75;
  }
  v47 = v74;
  v74 = 0;
  v77 = __PAIR64__(v47, v46);
  v79 = v75[16];
  if (v75 != (_BYTE *)v45 && v45)
  {
    v72 = 0;
    v73 = 0;
    WTF::fastFree((unint64_t)v45, v37, v38, v39, v40, v41, v42, v43);
    v17 = v71;
  }
  if ((v17 & 1) != 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
  if (v8)
  {
    if (v79 == 3)
      v66 = 3;
    else
      v66 = 2;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_BYTE *)(a1 + 32) = v66;
    v50 = v76;
    if (HIDWORD(v77))
    {
      v67 = 16 * HIDWORD(v77);
      do
      {
        if ((*(_QWORD *)v50 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL, v37, v38, v39, v40, v41, v42, v43);
        v50 = (WTF *)((char *)v50 + 16);
        v67 -= 16;
      }
      while (v67);
      v50 = v76;
    }
  }
  else
  {
    v48 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    v49 = v76;
    if (v76 == (WTF *)v78)
    {
      v50 = (WTF *)v78;
      if (HIDWORD(v77))
      {
        v58 = 0;
        v59 = 16 * HIDWORD(v77);
        do
        {
          v60 = (unint64_t *)(v48 + v58);
          v61 = (uint64_t *)&v78[v58];
          *(_QWORD *)(v48 + v58) = 0;
          v62 = *(_QWORD *)&v78[v58];
          if ((v62 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)(v48 + v58), &v78[v58]);
            v65 = *v61;
            v60[1] = v61[1];
            if ((v65 & 1) != 0)
              WTF::fastFree(v65 & 0xFFFFFFFFFFFFFFFCLL, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            v63 = v61[1];
            *v60 = v62 & 0xFFFFFFFFFFFFFFFDLL;
            v60[1] = v63;
          }
          v58 += 16;
        }
        while (v59 != v58);
        v50 = v76;
      }
    }
    else
    {
      v76 = (WTF *)v78;
      *(_QWORD *)a1 = v49;
      v68 = v77;
      LODWORD(v77) = 1;
      *(_DWORD *)(a1 + 8) = v68;
      v50 = (WTF *)v78;
    }
    v51 = HIDWORD(v77);
    HIDWORD(v77) = 0;
    *(_DWORD *)(a1 + 12) = v51;
    *(_BYTE *)(a1 + 32) = v79;
  }
  if (v78 != (_BYTE *)v50 && v50 != 0)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    WTF::fastFree((unint64_t)v50, v37, v38, v39, v40, v41, v42, v43);
  }
  v53 = __ldxr(v13);
  if (v53 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, v13))
LABEL_32:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v38, v39, v40, v41, v42, v43);
}

void JSC::CheckPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE v46[16];
  char v47;

  v5 = JSC::StructureStubInfo::summary(a2, a3);
  v13 = v5;
  if (v5 - 1 >= 3)
  {
    if (v5 > 5u || ((1 << v5) & 0x31) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198148314);
    }
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    if (v5 == 4)
    {
      if ((*(_WORD *)(a3 + 129) & 2) != 0)
        LOBYTE(v13) = 3;
      else
        LOBYTE(v13) = 2;
      goto LABEL_40;
    }
    if (v5 - 1 >= 3)
    {
      if (!(_BYTE)v5)
      {
LABEL_40:
        *(_BYTE *)(a1 + 32) = v13;
        return;
      }
      if (v5 != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1981482E0);
      }
    }
    __break(0xC471u);
    goto LABEL_72;
  }
  v44 = v46;
  v45 = 1;
  v47 = 1;
  if (*(_BYTE *)(a3 + 123) != 4)
  {
    if (*(_BYTE *)(a3 + 123))
    {
      if (v5 - 1 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198148334);
      }
      JSC::CheckPrivateBrandStatus::CheckPrivateBrandStatus(a1, (0x50404u >> (8 * (v5 - 1))), a3);
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 1;
      *(_BYTE *)(a1 + 32) = 0;
    }
LABEL_52:
    v28 = v44;
    if (HIDWORD(v45))
    {
      v38 = 16 * HIDWORD(v45);
      do
      {
        if ((*(_QWORD *)v28 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFFCLL, v6, v7, v8, v9, v10, v11, v12);
        v28 += 16;
        v38 -= 16;
      }
      while (v38);
      v28 = v44;
    }
    goto LABEL_28;
  }
  v14 = *(_QWORD *)(a3 + 64);
  if (!*(_DWORD *)(v14 + 12))
  {
    v15 = 0;
    goto LABEL_25;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 8 * v16);
    v18 = *(unsigned __int8 *)(v17 + 4);
    v19 = v18 > 0x20;
    v20 = (1 << v18) & 0x100000014;
    if (v19 || v20 == 0)
    {
      v22 = *(_DWORD *)(v17 + 12);
      goto LABEL_12;
    }
    v23 = *(_QWORD *)(16 * (*(_DWORD *)(v17 + 12) & 0xFFFFFFFE) + 0x40);
    if (v23 && *(_BYTE *)(v23 + 5) != 1)
    {
      v22 = *(_DWORD *)(v23 + 80);
LABEL_12:
      if (v22)
        v23 = 16 * (v22 & 0xFFFFFFFE);
      else
        v23 = 0;
    }
    v24 = *(_QWORD *)(v17 + 32);
    v41 = v23;
    v42 = 0;
    if ((v23 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v42, &v41);
      v43 = v24;
      if ((v41 & 1) != 0)
        WTF::fastFree(v41 & 0xFFFFFFFFFFFFFFFCLL, v37, v7, v8, v9, v10, v11, v12);
    }
    else
    {
      v42 = v23 & 0xFFFFFFFFFFFFFFFDLL;
      v43 = v24;
    }
    if ((JSC::appendICStatusVariant<WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::CheckPrivateBrandVariant>((uint64_t)&v44, (uint64_t *)&v42, v7, v8, v9, v10, v11, v12) & 1) == 0)
    {
      if (v13 < 6)
      {
        JSC::CheckPrivateBrandStatus::CheckPrivateBrandStatus(a1, (0x50405040404uLL >> (8 * v13)), a3);
        if ((v42 & 1) != 0)
          WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, v6, v7, v8, v9, v10, v11, v12);
        goto LABEL_52;
      }
      __break(0xC471u);
LABEL_72:
      JUMPOUT(0x198148288);
    }
    if ((v42 & 1) != 0)
      WTF::fastFree(v42 & 0xFFFFFFFFFFFFFFFCLL, v25, v7, v8, v9, v10, v11, v12);
    ++v16;
  }
  while (v16 < *(unsigned int *)(v14 + 12));
  v15 = (void *)HIDWORD(v45);
LABEL_25:
  WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v44, v15, v7, v8, v9, v10, v11, v12);
  v26 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v27 = v44;
  if (v44 == v46)
  {
    v28 = v46;
    if (HIDWORD(v45))
    {
      v31 = 0;
      v32 = 16 * HIDWORD(v45);
      do
      {
        v33 = (unint64_t *)(v26 + v31);
        v34 = (uint64_t *)&v46[v31];
        *(_QWORD *)(v26 + v31) = 0;
        v35 = *(_QWORD *)&v46[v31];
        if ((v35 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)(v26 + v31), &v46[v31]);
          v39 = *v34;
          v33[1] = v34[1];
          if ((v39 & 1) != 0)
            WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, v6, v7, v8, v9, v10, v11, v12);
        }
        else
        {
          v36 = v34[1];
          *v33 = v35 & 0xFFFFFFFFFFFFFFFDLL;
          v33[1] = v36;
        }
        v31 += 16;
      }
      while (v32 != v31);
      v28 = v44;
    }
  }
  else
  {
    v44 = v46;
    *(_QWORD *)a1 = v27;
    v40 = v45;
    LODWORD(v45) = 1;
    *(_DWORD *)(a1 + 8) = v40;
    v28 = v46;
  }
  v29 = HIDWORD(v45);
  HIDWORD(v45) = 0;
  *(_DWORD *)(a1 + 12) = v29;
  *(_BYTE *)(a1 + 32) = v47;
LABEL_28:
  if (v46 != v28 && v28 != 0)
  {
    v44 = 0;
    LODWORD(v45) = 0;
    WTF::fastFree((unint64_t)v28, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::CheckPrivateBrandStatus::~CheckPrivateBrandStatus(JSC::CheckPrivateBrandStatus **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::CheckPrivateBrandStatus *v10;
  uint64_t v12;

  v9 = *((unsigned int *)this + 3);
  v10 = *this;
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    do
    {
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v10 = (JSC::CheckPrivateBrandStatus *)((char *)v10 + 16);
      v12 -= 16;
    }
    while (v12);
    v10 = *this;
  }
  if (this + 2 != (JSC::CheckPrivateBrandStatus **)v10 && v10 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::CheckPrivateBrandStatus::CheckPrivateBrandStatus(uint64_t result, int a2, uint64_t a3)
{
  char v3;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  if (a2 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x19814844CLL);
  }
  if ((*(_WORD *)(a3 + 129) & 2) != 0)
    v3 = 3;
  else
    v3 = 2;
  *(_BYTE *)(result + 32) = v3;
  return result;
}

uint64_t JSC::AccessCase::structure(JSC::AccessCase *this)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  int v5;
  uint64_t result;

  v1 = *((unsigned __int8 *)this + 4);
  v2 = v1 > 0x20;
  v3 = (1 << v1) & 0x100000014;
  if (v2 || v3 == 0)
  {
    v5 = *((_DWORD *)this + 3);
    goto LABEL_7;
  }
  result = *(_QWORD *)(16 * (*((_DWORD *)this + 3) & 0xFFFFFFFE) + 0x40);
  if (result && *(_BYTE *)(result + 5) != 1)
  {
    v5 = *(_DWORD *)(result + 80);
LABEL_7:
    if (v5)
      return 16 * (v5 & 0xFFFFFFFE);
    else
      return 0;
  }
  return result;
}

void JSC::CheckPrivateBrandStatus::computeFor(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ***v22;
  uint64_t **v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  char v39;
  uint64_t *v40;
  BOOL v41;
  char v42;
  int v43;
  WTF *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 hasBadCacheExitSite;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[24];
  WTF *v80;
  uint64_t v81;
  _BYTE v82[16];
  unsigned __int8 v83;
  unint64_t v84;
  uint64_t v85[8];

  v12 = a1;
  v14 = *a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v14) = -1;
  }
  else if ((v14 & 1) != 0)
  {
    LODWORD(v14) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v14 >>= 36;
  }
  v75 = v14;
  hasBadCacheExitSite = JSC::hasBadCacheExitSite(a1, v14, a3, (uint64_t)a4, a5, a6, a7, a8);
  v21 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v21)
  {
LABEL_73:
    JSC::CheckPrivateBrandStatus::computeForBaseline(a9, v12, a2, v75, hasBadCacheExitSite, v18, v19, v20);
    return;
  }
  v22 = *(uint64_t ****)a3;
  v74 = *(_QWORD *)a3 + 8 * v21;
  while (1)
  {
    v23 = *v22;
    v24 = *a4;
    if ((*a4 & 1) != 0)
    {
      v57 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v58 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
          ? (v59 = (_DWORD)v58 == -1)
          : (v59 = 1),
            v59))
      {
        v60 = 2;
      }
      else if (v58 >> 28)
      {
        v68 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v68 = v57;
        *(_DWORD *)(v68 + 8) = v58;
        v60 = 1;
        v57 = v68;
      }
      else
      {
        v60 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
        v57 = v58 << 36;
      }
      v61 = v57 | v60;
      v84 = v61;
      JSC::ICStatusContext::get((uint64_t)v23, (uint64_t *)&v84, v15, v16, v17, v18, v19, v20, (uint64_t)v85);
      if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v61 & 0xFFFFFFFF8, v62, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      v84 = *a4;
      JSC::ICStatusContext::get((uint64_t)v23, (uint64_t *)&v84, v15, v16, v17, v18, v19, v20, (uint64_t)v85);
    }
    if (!v85[0])
      goto LABEL_72;
    v80 = (WTF *)v82;
    v81 = 1;
    v83 = 0;
    v25 = (unsigned __int8 *)(v23[1] + 2);
    if (__ldaxr(v25))
    {
      __clrex();
LABEL_11:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v25);
      goto LABEL_12;
    }
    if (__stxr(1u, v25))
      goto LABEL_11;
LABEL_12:
    JSC::CheckPrivateBrandStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v77, v23[1][9], v85[0]);
    v34 = v80;
    if (HIDWORD(v81))
    {
      v56 = 16 * HIDWORD(v81);
      do
      {
        if ((*(_QWORD *)v34 & 1) != 0)
        {
          v73 = v12;
          v67 = v34;
          WTF::fastFree(*(_QWORD *)v34 & 0xFFFFFFFFFFFFFFFCLL, (void *)v27, v28, v29, v30, v31, v32, v33);
          v34 = v67;
          v12 = v73;
        }
        v34 = (WTF *)((char *)v34 + 16);
        v56 -= 16;
      }
      while (v56);
      v34 = v80;
    }
    if (v34 != (WTF *)v82)
    {
      if (v34)
      {
        v80 = 0;
        LODWORD(v81) = 0;
        WTF::fastFree((unint64_t)v34, (void *)v27, v28, v29, v30, v31, v32, v33);
      }
      v80 = (WTF *)v82;
    }
    if (v77 == (WTF *)v79)
    {
      v35 = (WTF *)v79;
      if (HIDWORD(v78))
      {
        v46 = 0;
        v47 = 16 * HIDWORD(v78);
        v71 = a2;
        v72 = v12;
        do
        {
          v48 = (unint64_t *)&v82[v46];
          v49 = (uint64_t *)&v79[v46];
          *(_QWORD *)&v82[v46] = 0;
          v50 = *(_QWORD *)&v79[v46];
          if ((v50 & 1) != 0)
          {
            v70 = v47;
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v82[v46], &v79[v46]);
            v47 = v70;
            v55 = *v49;
            v48[1] = v49[1];
            if ((v55 & 1) != 0)
            {
              WTF::fastFree(v55 & 0xFFFFFFFFFFFFFFFCLL, (void *)v27, v28, v29, v30, v31, v32, v33);
              v47 = v70;
            }
          }
          else
          {
            v51 = v49[1];
            *v48 = v50 & 0xFFFFFFFFFFFFFFFDLL;
            v48[1] = v51;
          }
          v46 += 16;
          a2 = v71;
          v12 = v72;
        }
        while (v47 != v46);
        v35 = v77;
      }
    }
    else
    {
      v80 = v77;
      v35 = (WTF *)v79;
    }
    v36 = v78;
    HIDWORD(v78) = 0;
    v81 = v36;
    v83 = v79[16];
    if (v79 != (_BYTE *)v35 && v35)
    {
      v77 = 0;
      LODWORD(v78) = 0;
      WTF::fastFree((unint64_t)v35, (void *)v27, v28, v29, v30, v31, v32, v33);
    }
    v37 = __ldxr(v25);
    if (v37 != 1)
    {
      __clrex();
LABEL_21:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v28, v29, v30, v31, v32, v33);
      goto LABEL_22;
    }
    if (__stlxr(0, v25))
      goto LABEL_21;
LABEL_22:
    if (v83)
      break;
    JSC::CheckPrivateBrandStatus::~CheckPrivateBrandStatus(&v80, (void *)v27, v28, v29, v30, v31, v32, v33);
LABEL_72:
    if (++v22 == (uint64_t ***)v74)
      goto LABEL_73;
  }
  v38 = (uint64_t *)(*a4 & 0xFFFFFFFF8);
  if ((*a4 & 1) == 0)
    goto LABEL_27;
  v63 = *v38;
  if ((*a4 & 2) != 0 || (v64 = *(_DWORD *)((*a4 & 0xFFFFFFFF8) + 8), v64 == 0x3FFFFFFF) || v64 == -1)
  {
    v65 = 2;
  }
  else if (v64 >> 28)
  {
    v69 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v69 = v63;
    *(_DWORD *)(v69 + 8) = v64;
    v65 = 1;
    v63 = v69;
  }
  else
  {
    v65 = *v38;
    v63 = 0;
  }
  v66 = v63 | v65;
  v38 = (uint64_t *)(v66 & 0xFFFFFFFF8);
  if ((v66 & 1) != 0)
  {
    v39 = 0;
    v40 = (uint64_t *)*v38;
  }
  else
  {
LABEL_27:
    v39 = 1;
    v40 = v38;
  }
  if (v40)
    v41 = v40 != *v23;
  else
    v41 = 0;
  if ((v39 & 1) == 0 && v38)
    WTF::fastFree((unint64_t)v38, (void *)v27, v28, v29, v30, v31, v32, v33);
  if (!v41)
  {
    JSC::CheckPrivateBrandStatus::computeForBaseline(a9, v12, a2, v75, hasBadCacheExitSite, v31, v32, v33);
    v27 = v83;
    if (!v83)
      goto LABEL_43;
    v43 = *(unsigned __int8 *)(a9 + 32);
    if ((v43 - 2) >= 2)
    {
      if (v43 != 1)
      {
        if (*(_BYTE *)(a9 + 32))
        {
          __break(0xC471u);
          JUMPOUT(0x198148890);
        }
        WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a9, (unsigned int *)&v80, v28, v29, v30, v31, v32, v33);
LABEL_34:
        v42 = v83;
        goto LABEL_42;
      }
      if (v83 == 1)
      {
        if (!HIDWORD(v81))
        {
LABEL_60:
          WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a9, (void *)*(unsigned int *)(a9 + 12), v28, v29, v30, v31, v32, v33);
          goto LABEL_43;
        }
        v53 = (uint64_t *)v80;
        v54 = 16 * HIDWORD(v81);
        while ((JSC::appendICStatusVariant<WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::CheckPrivateBrandVariant>(a9, v53, v28, v29, v30, v31, v32, v33) & 1) != 0)
        {
          v53 += 2;
          v54 -= 16;
          if (!v54)
            goto LABEL_60;
        }
        v27 = v83;
      }
    }
    JSC::CheckPrivateBrandStatus::merge(JSC::CheckPrivateBrandStatus const&)::$_0::operator()(a9, (void *)v27, v28, v29, v30, v31, v32, v33);
    goto LABEL_43;
  }
  if ((hasBadCacheExitSite & 2) == 0)
  {
    WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a9, (uint64_t)&v80);
    goto LABEL_34;
  }
  v45 = v83 == 3;
  *(_QWORD *)a9 = a9 + 16;
  if (v45)
    v42 = 3;
  else
    v42 = 2;
  *(_QWORD *)(a9 + 8) = 1;
LABEL_42:
  *(_BYTE *)(a9 + 32) = v42;
LABEL_43:
  v44 = v80;
  if (HIDWORD(v81))
  {
    v52 = 16 * HIDWORD(v81);
    do
    {
      if ((*(_QWORD *)v44 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFFCLL, (void *)v27, v28, v29, v30, v31, v32, v33);
      v44 = (WTF *)((char *)v44 + 16);
      v52 -= 16;
    }
    while (v52);
    v44 = v80;
  }
  v45 = v82 == (_BYTE *)v44 || v44 == 0;
  if (!v45)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree((unint64_t)v44, (void *)v27, v28, v29, v30, v31, v32, v33);
  }
}

void JSC::CheckPrivateBrandStatus::merge(JSC::CheckPrivateBrandStatus const&)::$_0::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;

  if (*(_BYTE *)(a1 + 32) == 3 || a2 == 3)
  {
    v18 = 3;
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(_QWORD **)a1;
    if ((_DWORD)v10)
    {
      v14 = 16 * v10;
      do
      {
        if ((*v11 & 1) != 0)
        {
          v15 = v11;
          WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v11 = v15;
        }
        v11 += 2;
        v14 -= 16;
      }
      while (v14);
      v11 = *(_QWORD **)a1;
    }
    if (v11 != (_QWORD *)(a1 + 16))
    {
      if (v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
      }
      *(_QWORD *)a1 = a1 + 16;
    }
  }
  else
  {
    v18 = 2;
    v12 = *(unsigned int *)(a1 + 12);
    v13 = *(_QWORD **)a1;
    if ((_DWORD)v12)
    {
      v16 = 16 * v12;
      do
      {
        if ((*v13 & 1) != 0)
        {
          v17 = v13;
          WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v13 = v17;
        }
        v13 += 2;
        v16 -= 16;
      }
      while (v16);
      v13 = *(_QWORD **)a1;
    }
    if (v13 != (_QWORD *)(a1 + 16))
    {
      if (v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
      }
      *(_QWORD *)a1 = a1 + 16;
    }
  }
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 32) = v18;
}

void JSC::CheckPrivateBrandStatus::filter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  int v29;

  if (*(_BYTE *)(a1 + 32) == 1)
  {
    v9 = *(uint64_t **)a1;
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(_QWORD *)a1 + 16 * v10;
    if ((_DWORD)v10)
    {
      v13 = 0;
      v14 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v15 = (unint64_t)v14;
      while (1)
      {
        WTF::TinyPtrSet<JSC::Structure *>::filter(v9, a2, a3, a4, a5, a6, a7, a8);
        v17 = *v9;
        if ((*v9 & 0xFFFFFFFFFFFFFFFDLL) == 0)
          break;
LABEL_12:
        v9 += 2;
        if ((unint64_t)v9 >= v11)
        {
          v9 = *(uint64_t **)a1;
          v23 = *(unsigned int *)(a1 + 12);
          v11 = v15;
          goto LABEL_25;
        }
      }
      if (v15 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12))
      {
        v15 = (unint64_t)v9;
      }
      else if (v14 != v9)
      {
        if ((unint64_t)v14 <= v15)
        {
          v29 = v13;
          v19 = 0;
          v18 = ((char *)v9 - (char *)v14) >> 4;
          v20 = v15 + (((char *)v9 - (char *)v14) & 0xFFFFFFFFFFFFFFF0) - 16;
          do
          {
            v21 = (uint64_t *)(v20 + v19 * 8);
            *(_QWORD *)(v20 + v19 * 8) = 0;
            v22 = &v9[v19 - 2];
            if ((*v22 & 1) != 0)
              WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v21, &v9[v19 - 2]);
            else
              *v21 = *v22 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)(v20 + v19 * 8 + 8) = v9[v19 - 1];
            if ((*v22 & 1) != 0)
              WTF::fastFree(*v22 & 0xFFFFFFFFFFFFFFFCLL, v16, a3, a4, a5, a6, a7, a8);
            v19 -= 2;
          }
          while (&v9[v19] != v14);
          v13 = v29;
        }
        else
        {
          WTF::VectorTypeOperations<JSC::CheckPrivateBrandVariant>::move(v14, v9, v15, a4, a5, a6, a7, a8);
          v18 = ((char *)v9 - (char *)v14) >> 4;
        }
        v15 += 16 * v18;
        v17 = *v9;
        if ((*v9 & 1) == 0)
          goto LABEL_11;
        goto LABEL_23;
      }
      if ((v17 & 1) == 0)
      {
LABEL_11:
        v14 = v9 + 2;
        ++v13;
        goto LABEL_12;
      }
LABEL_23:
      WTF::fastFree(v17 & 0xFFFFFFFFFFFFFFFCLL, v16, a3, a4, a5, a6, a7, a8);
      goto LABEL_11;
    }
    v23 = 0;
    v13 = 0;
    v14 = (uint64_t *)v11;
LABEL_25:
    v24 = &v9[2 * v23];
    if (v14 != v24)
    {
      if ((unint64_t)v14 <= v11)
      {
        v26 = &v9[2 * v23 - 2];
        v27 = (uint64_t *)((((char *)v24 - (char *)v14) & 0xFFFFFFFFFFFFFFF0) + v11 - 16);
        do
        {
          *v27 = 0;
          if ((*v26 & 1) != 0)
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v27, v26);
          else
            *v27 = *v26 & 0xFFFFFFFFFFFFFFFDLL;
          v27[1] = v26[1];
          if ((*v26 & 1) != 0)
            WTF::fastFree(*v26 & 0xFFFFFFFFFFFFFFFCLL, v24, a3, a4, a5, a6, a7, a8);
          v27 -= 2;
          v28 = v26 == v14;
          v26 -= 2;
        }
        while (!v28);
      }
      else
      {
        WTF::VectorTypeOperations<JSC::CheckPrivateBrandVariant>::move(v14, v24, v11, a4, a5, a6, a7, a8);
      }
    }
    v25 = *(_DWORD *)(a1 + 12) - v13;
    *(_DWORD *)(a1 + 12) = v25;
    if (!v25)
      *(_BYTE *)(a1 + 32) = 0;
  }
}

uint64_t JSC::CheckPrivateBrandStatus::visitAggregate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      v7 = v6 & 1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 0;
      if (v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v4 -= 16;
    }
    while (v4);
  }
  return result;
}

void JSC::CheckPrivateBrandStatus::visitAggregate(JSC::CheckPrivateBrandStatus *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v8 = *((unsigned int *)this + 3);
  if ((_DWORD)v8)
  {
    v10 = 16 * v8;
    v11 = (unint64_t *)(*(_QWORD *)this + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
      JSC::CacheableIdentifier::visitAggregate<JSC::SlotVisitor>(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v10 -= 16;
    }
    while (v10);
  }
}

BOOL JSC::CheckPrivateBrandVariant::attemptToMerge(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a1[1];
  v4 = a1 + 1;
  v5 = v6;
  v7 = v6 != 0;
  v9 = a2[1];
  v8 = a2 + 1;
  if (((v7 ^ (v9 != 0)) & 1) != 0)
    return 0;
  if (!v5 || (result = JSC::CacheableIdentifier::operator==(v4, v8)))
  {
    v11 = *a2;
    if ((*a2 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(a1, a2);
    }
    else
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v11 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v13 = *a1;
        if ((*a1 & 1) != 0)
        {
          WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a1, v12);
        }
        else if ((v13 & 0xFFFFFFFFFFFFFFFCLL) != v12)
        {
          if ((v13 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          {
            v15 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v15 = 0x400000002;
            v16 = *a1;
            *(_QWORD *)(v15 + 8) = *a1 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v15 + 16) = v12;
            v14 = v16 & 2 | v15 | 1;
          }
          else
          {
            v14 = *a1 & 2 | v12;
          }
          *a1 = v14;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL JSC::CacheableIdentifier::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) != 0)
      v2 &= ~1uLL;
    else
      v2 = *(_QWORD *)(v2 + 8);
  }
  v3 = *a2;
  if (*a2)
  {
    if ((v3 & 1) != 0)
      v3 &= ~1uLL;
    else
      v3 = *(_QWORD *)(v3 + 8);
  }
  return v2 == v3;
}

uint64_t JSC::CodeBlock::shouldVisitStrongly<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  double v10;
  double *v11;
  double v12;
  uint64_t v13;
  char v14;
  char **v15;
  char *v16;

  if (byte_1ECF4C25C)
    return 1;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a1) & 1) == 0)
  {
    if (byte_1ECF4C5DE)
      goto LABEL_15;
    v5 = mach_approximate_time();
    v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v7 != -1)
    {
      v16 = &v14;
      v15 = &v16;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v6) = dword_1ECF4400C;
    v8 = *(_QWORD *)(a1 + 120);
    v9 = v8 ? *(_BYTE *)(v8 + 12) - 2 : -2;
    v10 = (double)(v5 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v6 * 1000000000.0)
        - *(double *)(a1 + 216);
    if (v9 > 3u)
    {
      v12 = INFINITY;
    }
    else
    {
      v11 = (double *)&unk_199152FD8;
      if (!byte_1ECF4C5DF)
        v11 = (double *)&unk_199152FF8;
      v12 = v11[(char)v9];
    }
    if (v10 >= v12)
    {
LABEL_15:
      if ((_BYTE)word_1ECF4C610)
      {
        result = 0;
        *(_BYTE *)(a1 + 19) = 1;
        return result;
      }
      return 0;
    }
  }
  if (*(_BYTE *)(a1 + 19))
  {
    if ((_BYTE)word_1ECF4C610)
      return 0;
    result = 1102;
    __break(0xC471u);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 120);
    if (!v13)
      return 1;
    return (*(_BYTE *)(v13 + 12) & 0xFE) != 4;
  }
  return result;
}

BOOL JSC::CodeBlock::shouldVisitStrongly<JSC::SlotVisitor>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  double v9;
  double *v10;
  double v11;
  uint64_t v12;
  _BOOL8 result;
  char v14;
  char **v15;
  char *v16;

  if (byte_1ECF4C25C)
    return 1;
  if ((a1 & 8) != 0)
  {
    if ((*(_BYTE *)(a1 - 79) & 1) != 0)
      goto LABEL_16;
  }
  else if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
         && ((*(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 8 * ((a1 >> 10) & 0xF) + 0x28) >> (a1 >> 4)) & 1) != 0)
  {
    goto LABEL_16;
  }
  if (byte_1ECF4C5DE)
    goto LABEL_20;
  v4 = mach_approximate_time();
  v6 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v6 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v5) = dword_1ECF4400C;
  v7 = *(_QWORD *)(a1 + 120);
  v8 = v7 ? *(_BYTE *)(v7 + 12) - 2 : -2;
  v9 = (double)(v4 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v5 * 1000000000.0)
     - *(double *)(a1 + 216);
  if (v8 > 3u)
  {
    v11 = INFINITY;
  }
  else
  {
    v10 = (double *)&unk_199152FD8;
    if (!byte_1ECF4C5DF)
      v10 = (double *)&unk_199152FF8;
    v11 = v10[(char)v8];
  }
  if (v9 >= v11)
  {
LABEL_20:
    if ((_BYTE)word_1ECF4C610)
    {
      result = 0;
      *(_BYTE *)(a1 + 19) = 1;
      return result;
    }
    return 0;
  }
LABEL_16:
  if (*(_BYTE *)(a1 + 19))
  {
    if (!(_BYTE)word_1ECF4C610)
    {
      __break(0xC471u);
      JUMPOUT(0x198149440);
    }
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 120);
  if (!v12)
    return 1;
  return (*(_BYTE *)(v12 + 12) & 0xFE) != 4;
}

_BYTE *JSC::CodeBlock::propagateTransitions<JSC::AbstractSlotVisitor>(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _BYTE *result;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int *v58;
  int *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  _QWORD *v63;

  a3[129] = 1;
  v5 = a1[15];
  if (!v5)
    goto LABEL_67;
  if (*(_BYTE *)(v5 + 12) == 2)
  {
    v6 = a1[17];
    if (v6)
    {
      v7 = *(unsigned __int16 *)(v6 + 14);
      if (!*(_WORD *)(v6 + 14))
        v7 = *(_DWORD *)(v6 + 124);
      v8 = (_DWORD *)((v6 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
      v9 = *(unsigned __int16 *)(v6 + 16);
      if (!*(_WORD *)(v6 + 16))
        v9 = *(_DWORD *)(v6 + 128);
      v10 = v6 + v9;
      if (v10 > (unint64_t)v8)
      {
        do
        {
          v11 = v8[2];
          if (*v8)
            v12 = v11 == 0;
          else
            v12 = 1;
          if (!v12
            && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, 16 * (*v8 & 0xFFFFFFFE)))
          {
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, 16 * (v11 & 0xFFFFFFFE));
          }
          v8 += 6;
        }
        while ((unint64_t)v8 < v10);
        v6 = a1[17];
      }
      v13 = *(unsigned __int16 *)(v6 + 66);
      if (!*(_WORD *)(v6 + 66))
        v13 = *(_DWORD *)(v6 + 228);
      v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      v15 = *(unsigned __int16 *)(v6 + 68);
      if (!*(_WORD *)(v6 + 68))
        v15 = *(_DWORD *)(v6 + 232);
      v16 = v6 + v15;
      if (v16 > v14)
      {
        do
        {
          v17 = *(_DWORD *)(v14 + 8);
          v18 = *(_DWORD *)(v14 + 16);
          if (v17)
            v19 = v18 == 0;
          else
            v19 = 1;
          if (!v19
            && (*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)a3 + 40))(a3, *(_QWORD *)v14)
            && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, 16 * (v17 & 0xFFFFFFFE)))
          {
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, 16 * (v18 & 0xFFFFFFFE));
          }
          v14 += 24;
        }
        while (v14 < v16);
        v6 = a1[17];
      }
      v20 = *(unsigned __int16 *)(v6 + 10);
      if (!*(_WORD *)(v6 + 10))
        v20 = *(_DWORD *)(v6 + 116);
      v21 = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      v22 = *(unsigned __int16 *)(v6 + 12);
      if (!*(_WORD *)(v6 + 12))
        v22 = *(_DWORD *)(v6 + 120);
      v23 = v6 + v22;
      if (v23 > v21)
      {
        v24 = (_QWORD *)(v21 + 8);
        do
        {
          v27 = *((_DWORD *)v24 - 2);
          v26 = *((_DWORD *)v24 - 1);
          v25 = v24 - 1;
          if (v27)
            v28 = v26 == 0;
          else
            v28 = 1;
          if (!v28
            && (*(unsigned int (**)(_BYTE *, _QWORD))(*(_QWORD *)a3 + 40))(a3, *v24)
            && (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, 16 * (v27 & 0xFFFFFFFE)))
          {
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, 16 * (v26 & 0xFFFFFFFE));
          }
          v24 += 2;
        }
        while ((unint64_t)(v25 + 2) < v23);
      }
    }
  }
  v29 = a1[15];
  if (!v29 || (*(_BYTE *)(v29 + 12) & 0xFE) != 4)
  {
LABEL_67:
    v41 = (unsigned int *)a1[16];
    if (v41)
    {
      v42 = *v41;
      if ((_DWORD)v42)
      {
        v43 = &v41[-34 * v42];
        do
        {
          v44 = v43[3] & 0xFFFFFFFE;
          if ((_DWORD)v44)
          {
            v45 = 16 * v44;
            if ((!*(_QWORD *)(16 * v44 + 0x28) || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3))
              && ((*(_QWORD *)(v45 + 48) | 2) == 2
               || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3) & 1) != 0))
            {
              (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v45);
            }
            else
            {
              (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v45);
            }
          }
          if (*((_BYTE *)v43 + 123) == 4)
          {
            v46 = *((_QWORD *)v43 + 8);
            if (*(_DWORD *)(v46 + 12))
            {
              v47 = 0;
              do
                JSC::AccessCase::propagateTransitions<JSC::AbstractSlotVisitor>(*(_QWORD *)(*(_QWORD *)v46 + 8 * v47++), (uint64_t)a3);
              while (v47 < *(unsigned int *)(v46 + 12));
            }
          }
          v43 += 34;
        }
        while (v43 != v41);
      }
    }
    goto LABEL_101;
  }
  v30 = (unsigned int *)(v29 + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
  v33 = result;
  do
  {
    v34 = __ldaxr(v30);
    v35 = v34 - 1;
  }
  while (__stlxr(v35, v30));
  if (!v35)
  {
    atomic_store(1u, (unsigned int *)(v29 + 8));
    result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  }
  for (i = *((_QWORD *)v33 + 18); i; i = *(_QWORD *)(i + 136))
  {
    v37 = *(_DWORD *)(i + 12) & 0xFFFFFFFE;
    if ((_DWORD)v37)
    {
      v38 = 16 * v37;
      if ((!*(_QWORD *)(16 * v37 + 0x28) || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3))
        && ((*(_QWORD *)(v38 + 48) | 2) == 2
         || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3) & 1) != 0))
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v38);
      }
      else
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v38);
      }
    }
    if (*(_BYTE *)(i + 123) == 4)
    {
      v39 = *(_QWORD *)(i + 64);
      if (*(_DWORD *)(v39 + 12))
      {
        v40 = 0;
        do
          result = (_BYTE *)JSC::AccessCase::propagateTransitions<JSC::AbstractSlotVisitor>(*(_QWORD *)(*(_QWORD *)v39 + 8 * v40++), (uint64_t)a3);
        while (v40 < *(unsigned int *)(v39 + 12));
      }
    }
  }
  v48 = a1[15];
  if (v48)
  {
    if ((*(_BYTE *)(v48 + 12) & 0xFE) == 4)
    {
      v49 = (unsigned int *)a1[16];
      if (v49)
      {
        v50 = *v49;
        if ((_DWORD)v50)
        {
          v51 = &v49[-34 * v50];
          do
          {
            v52 = v51[3] & 0xFFFFFFFE;
            if ((_DWORD)v52)
            {
              v53 = 16 * v52;
              if ((!*(_QWORD *)(16 * v52 + 0x28) || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3))
                && ((*(_QWORD *)(v53 + 48) | 2) == 2
                 || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3) & 1) != 0))
              {
                (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 24))(a3, v53);
              }
              else
              {
                (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a3 + 40))(a3, v53);
              }
            }
            if (*((_BYTE *)v51 + 123) == 4)
            {
              v54 = *((_QWORD *)v51 + 8);
              if (*(_DWORD *)(v54 + 12))
              {
                v55 = 0;
                do
                  JSC::AccessCase::propagateTransitions<JSC::AbstractSlotVisitor>(*(_QWORD *)(*(_QWORD *)v54 + 8 * v55++), (uint64_t)a3);
                while (v55 < *(unsigned int *)(v54 + 12));
              }
            }
            v51 += 34;
          }
          while (v51 != v49);
        }
      }
    }
LABEL_101:
    result = (_BYTE *)a1[15];
    if (result && (result[12] & 0xFE) == 4)
    {
      v56 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 72))(result);
      result = (_BYTE *)v56[15];
      if (result)
        result = (_BYTE *)JSC::RecordedStatuses::markIfCheap<JSC::AbstractSlotVisitor>((uint64_t)result, (uint64_t)a3);
      v57 = 0;
      v58 = (unsigned int *)v56[9];
      if (v58)
        v59 = (int *)(v58 + 1);
      else
        v59 = 0;
      if (v58)
        v57 = (uint64_t)&v58[*v58 + 1];
      while (v59 != (int *)v57)
      {
        v60 = *v59++;
        result = (_BYTE *)JSC::Structure::markIfCheap<JSC::AbstractSlotVisitor>(16 * (v60 & 0xFFFFFFFE), (uint64_t)a3);
      }
      v61 = 0;
      v62 = (unsigned int *)v56[7];
      if (v62)
        v63 = v62 + 2;
      else
        v63 = 0;
      if (v62)
        v61 = (uint64_t)&v62[6 * *v62 + 2];
      while (v63 != (_QWORD *)v61)
      {
        if (!*v63
          || (result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a3 + 40))(a3), (_DWORD)result))
        {
          result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a3 + 40))(a3, v63[1]);
          if ((_DWORD)result)
            result = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a3 + 24))(a3, v63[2]);
        }
        v63 += 3;
      }
    }
  }
  a3[129] = 0;
  return result;
}

void JSC::CodeBlock::propagateTransitions<JSC::SlotVisitor>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t i;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  int *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  _QWORD *v68;
  int v69;
  int v70;
  _QWORD *v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  BOOL v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned int *v99;
  int *v100;
  int v101;

  v10 = a1[15];
  if (!v10)
  {
LABEL_4:
    v12 = (unsigned int *)a1[16];
    if (v12)
    {
      v13 = *v12;
      if ((_DWORD)v13)
      {
        v14 = &v12[-34 * v13];
        while (1)
        {
          v85 = v14[3] & 0xFFFFFFFE;
          if ((_DWORD)v85)
            JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * v85, a3, a3, a4, a5, a6, a7, a8);
          if (*((_BYTE *)v14 + 123) == 4)
          {
            v86 = *((_QWORD *)v14 + 8);
            if (*(_DWORD *)(v86 + 12))
              break;
          }
LABEL_132:
          v14 += 34;
          if (v14 == v12)
            goto LABEL_50;
        }
        v87 = 0;
        while (1)
        {
          v88 = *(_QWORD *)(*(_QWORD *)v86 + 8 * v87);
          v89 = *(_DWORD *)(v88 + 12);
          if (v89)
            JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * (v89 & 0xFFFFFFFE), a3, a3, a4, a5, a6, a7, a8);
          v90 = *(_QWORD *)(v88 + 24);
          if (v90)
          {
            v98 = 0;
            v99 = *(unsigned int **)(v90 + 8);
            if (v99)
              v100 = (int *)(v99 + 1);
            else
              v100 = 0;
            if (v99)
              v98 = (uint64_t)&v99[*v99 + 1];
            while (v100 != (int *)v98)
            {
              v101 = *v100++;
              JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * (v101 & 0xFFFFFFFE), a3, a3, a4, a5, a6, a7, a8);
            }
          }
          v91 = *(unsigned __int8 *)(v88 + 4);
          if (v91 != 2 && v91 != 4)
            goto LABEL_145;
          v93 = *(_DWORD *)(v88 + 12) & 0xFFFFFFFE;
          v94 = 16 * v93;
          v95 = *(_QWORD *)(16 * v93 + 0x40);
          if (v95 && *(_BYTE *)(v95 + 5) != 1)
          {
            v97 = *(_DWORD *)(v95 + 80);
            if (v97)
              v95 = 16 * (v97 & 0xFFFFFFFE);
            else
              v95 = 0;
          }
          if ((v95 & 8) != 0)
          {
            if ((*(_BYTE *)(v95 - 79) & 1) != 0)
              goto LABEL_153;
          }
          else if (*(_DWORD *)(v95 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
                 && ((*(_QWORD *)((v95 & 0xFFFFFFFFFFFFC000) + 8 * ((v95 >> 10) & 0xF) + 0x28) >> (v95 >> 4)) & 1) != 0)
          {
            v93 = *(_DWORD *)(v88 + 12) & 0xFFFFFFFE;
            v94 = 16 * v93;
LABEL_153:
            if ((_DWORD)v93)
            {
              v96 = *(_DWORD *)(a3 + 132);
              if (*(_DWORD *)(v94 & 0xFFFFFC000 | 0x20) != v96)
                JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v94 & 0xFFFFFC000), v96, a3, a4, a5, a6, a7, a8);
              if (((*(_QWORD *)((v94 & 0xFFFFFC000) + 8 * ((v93 >> 6) & 0xF) + 0x28) >> (v93 & 0x3E)) & 1) == 0
                || *(_QWORD *)(a3 + 168))
              {
                JSC::SlotVisitor::appendSlow(a3, v94, 0, a4, a5, a6, a7, a8);
              }
            }
          }
LABEL_145:
          if (++v87 >= (unint64_t)*(unsigned int *)(v86 + 12))
            goto LABEL_132;
        }
      }
    }
    goto LABEL_50;
  }
  v11 = *(unsigned __int8 *)(v10 + 12);
  if (v11 == 2)
  {
    v15 = a1[17];
    if (!v15)
      goto LABEL_4;
    v16 = *(unsigned __int16 *)(v15 + 14);
    if (!*(_WORD *)(v15 + 14))
      v16 = *(_DWORD *)(v15 + 124);
    v17 = (unsigned int *)((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    v18 = *(unsigned __int16 *)(v15 + 16);
    if (!*(_WORD *)(v15 + 16))
      v18 = *(_DWORD *)(v15 + 128);
    v19 = v15 + v18;
    if (v19 > (unint64_t)v17)
    {
      do
      {
        v20 = *v17;
        v21 = v17[2];
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 1;
        if (!v22
          && *(_DWORD *)(((unint64_t)(v20 >> 10) << 14) | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80)
                                                                                                  + 240)
          && ((*(_QWORD *)(((16 * v20) & 0xFFFFFC000)
                         + 8 * (((unint64_t)(v20 & 0xFFFFFFFE) >> 6) & 0xF)
                         + 0x28) >> (v20 & 0x3E)) & 1) != 0)
        {
          v23 = v21 & 0xFFFFFFFE;
          if ((v21 & 0xFFFFFFFE) != 0)
          {
            v24 = *(_DWORD *)(a3 + 132);
            if (*(_DWORD *)((16 * v23) & 0xFFFFFC000 | 0x20) != v24)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v23) & 0xFFFFFC000), v24, a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)(((16 * v23) & 0xFFFFFC000) + 8 * ((v23 >> 6) & 0xF) + 0x28) >> (v23 & 0x3E)) & 1) == 0
              || *(_QWORD *)(a3 + 168))
            {
              JSC::SlotVisitor::appendSlow(a3, 16 * v23, 0, a4, a5, a6, a7, a8);
            }
          }
        }
        v17 += 6;
      }
      while ((unint64_t)v17 < v19);
      v15 = a1[17];
    }
    v25 = *(unsigned __int16 *)(v15 + 66);
    if (!*(_WORD *)(v15 + 66))
      v25 = *(_DWORD *)(v15 + 228);
    v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(unsigned __int16 *)(v15 + 68);
    if (!*(_WORD *)(v15 + 68))
      v27 = *(_DWORD *)(v15 + 232);
    v28 = v15 + v27;
    if (v28 <= v26)
    {
LABEL_31:
      v29 = *(unsigned __int16 *)(v15 + 10);
      if (!*(_WORD *)(v15 + 10))
        v29 = *(_DWORD *)(v15 + 116);
      v30 = (v15 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
      v31 = *(unsigned __int16 *)(v15 + 12);
      if (!*(_WORD *)(v15 + 12))
        v31 = *(_DWORD *)(v15 + 120);
      v32 = v15 + v31;
      if (v32 <= v30)
      {
LABEL_36:
        v10 = a1[15];
        if (!v10)
          goto LABEL_4;
        LOBYTE(v11) = *(_BYTE *)(v10 + 12);
        goto LABEL_3;
      }
      v68 = (_QWORD *)(v30 + 8);
      while (1)
      {
        v69 = *((_DWORD *)v68 - 2);
        v70 = *((_DWORD *)v68 - 1);
        v71 = v68 - 1;
        if (v69)
          v72 = v70 == 0;
        else
          v72 = 1;
        if (!v72)
        {
          v73 = *v68;
          if ((*v68 & 8) != 0)
          {
            if ((*(_BYTE *)(v73 - 79) & 1) != 0)
              goto LABEL_98;
          }
          else if (*(_DWORD *)(v73 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
                 && ((*(_QWORD *)((v73 & 0xFFFFFFFFFFFFC000) + 8 * ((v73 >> 10) & 0xF) + 0x28) >> (v73 >> 4)) & 1) != 0)
          {
LABEL_98:
            v74 = v70 & 0xFFFFFFFE;
            if (JSC::MarkedBlock::isMarked((16 * (v69 & 0xFFFFFFFE)) & 0xFFFFFC000, *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240), 16 * (v69 & 0xFFFFFFFE)))v75 = (_DWORD)v74 == 0;
            else
              v75 = 1;
            if (!v75)
            {
              v76 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)((16 * v74) & 0xFFFFFC000), *(_DWORD *)(a3 + 132), a3, a4, a5, a6, a7, a8);
              if (((*(_QWORD *)(((16 * v74) & 0xFFFFFC000)
                               + v76
                               + 8 * (((unint64_t)(v70 & 0xFFFFFFFE) >> 6) & 0xF)
                               + 0x28) >> (v70 & 0x3E)) & 1) == 0
                || *(_QWORD *)(a3 + 168))
              {
                JSC::SlotVisitor::appendSlow(a3, 16 * v74, v76, a4, a5, a6, a7, a8);
              }
            }
          }
        }
        v68 += 2;
        if ((unint64_t)(v71 + 2) >= v32)
          goto LABEL_36;
      }
    }
    while (1)
    {
      v78 = *(_DWORD *)(v26 + 8);
      v79 = *(_DWORD *)(v26 + 16);
      if (v78)
        v80 = v79 == 0;
      else
        v80 = 1;
      if (!v80)
      {
        v81 = *(_QWORD *)v26;
        if ((*(_QWORD *)v26 & 8) != 0)
        {
          if ((*(_BYTE *)(v81 - 79) & 1) != 0)
            goto LABEL_122;
        }
        else if (*(_DWORD *)(v81 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
               && ((*(_QWORD *)((v81 & 0xFFFFFFFFFFFFC000) + 8 * ((v81 >> 10) & 0xF) + 0x28) >> (v81 >> 4)) & 1) != 0)
        {
LABEL_122:
          v82 = v79 & 0xFFFFFFFE;
          if (JSC::MarkedBlock::isMarked((16 * (v78 & 0xFFFFFFFE)) & 0xFFFFFC000, *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240), 16 * (v78 & 0xFFFFFFFE)))v83 = (_DWORD)v82 == 0;
          else
            v83 = 1;
          if (!v83)
          {
            v84 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)((16 * v82) & 0xFFFFFC000), *(_DWORD *)(a3 + 132), a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)(((16 * v82) & 0xFFFFFC000)
                             + v84
                             + 8 * (((unint64_t)(v79 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v79 & 0x3E)) & 1) == 0
              || *(_QWORD *)(a3 + 168))
            {
              JSC::SlotVisitor::appendSlow(a3, 16 * v82, v84, a4, a5, a6, a7, a8);
            }
          }
        }
      }
      v26 += 24;
      if (v26 >= v28)
      {
        v15 = a1[17];
        goto LABEL_31;
      }
    }
  }
LABEL_3:
  if ((v11 & 0xFE) != 4)
    goto LABEL_4;
  v33 = (unsigned int *)(v10 + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
  do
  {
    v42 = __ldaxr(v33);
    v43 = v42 - 1;
  }
  while (__stlxr(v43, v33));
  if (!v43)
  {
    atomic_store(1u, (unsigned int *)(v10 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  }
  for (i = *(_QWORD *)(v41 + 144); i; i = *(_QWORD *)(i + 136))
    JSC::StructureStubInfo::propagateTransitions<JSC::SlotVisitor>(i, a3, v35, v36, v37, v38, v39, v40);
  v45 = a1[15];
  if (v45)
  {
    if ((*(_BYTE *)(v45 + 12) & 0xFE) == 4)
    {
      v46 = (unsigned int *)a1[16];
      if (v46)
      {
        v47 = *v46;
        if ((_DWORD)v47)
        {
          v77 = -34 * v47;
          do
          {
            JSC::StructureStubInfo::propagateTransitions<JSC::SlotVisitor>((uint64_t)&v46[v77], a3, v35, v36, v37, v38, v39, v40);
            v77 += 34;
          }
          while (v77 * 4);
        }
      }
    }
LABEL_50:
    v48 = (_BYTE *)a1[15];
    if (!v48 || (v48[12] & 0xFE) != 4)
      return;
    v55 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v48 + 72))(v48);
    v56 = v55[15];
    if (v56)
      JSC::RecordedStatuses::markIfCheap<JSC::SlotVisitor>(v56, a3, v49, v50, v51, v52, v53, v54);
    v57 = 0;
    v58 = (unsigned int *)v55[9];
    if (v58)
      v59 = (int *)(v58 + 1);
    else
      v59 = 0;
    if (v58)
      v57 = (uint64_t)&v58[*v58 + 1];
    while (v59 != (int *)v57)
    {
      v60 = *v59++;
      JSC::Structure::markIfCheap<JSC::SlotVisitor>(16 * (v60 & 0xFFFFFFFE), a3, v49, v50, v51, v52, v53, v54);
    }
    v61 = 0;
    v62 = (unsigned int *)v55[7];
    if (v62)
      v63 = (unint64_t *)(v62 + 2);
    else
      v63 = 0;
    if (v62)
      v61 = (uint64_t)&v62[6 * *v62 + 2];
    while (1)
    {
      if (v63 == (unint64_t *)v61)
        return;
      v64 = *v63;
      if (*v63)
      {
        if ((v64 & 8) != 0)
        {
          if ((*(_BYTE *)(v64 - 79) & 1) == 0)
            goto LABEL_78;
        }
        else if (*(_DWORD *)(v64 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
               || ((*(_QWORD *)((v64 & 0xFFFFFFFFFFFFC000) + 8 * ((v64 >> 10) & 0xF) + 0x28) >> (v64 >> 4)) & 1) == 0)
        {
          goto LABEL_78;
        }
      }
      v65 = v63[1];
      if ((v65 & 8) != 0)
      {
        if ((*(_BYTE *)(v65 - 79) & 1) != 0)
          goto LABEL_72;
      }
      else if (*(_DWORD *)(v65 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
             && ((*(_QWORD *)((v65 & 0xFFFFFFFFFFFFC000) + 8 * ((v65 >> 10) & 0xF) + 0x28) >> (v65 >> 4)) & 1) != 0)
      {
LABEL_72:
        v66 = v63[2];
        if (!v66)
          goto LABEL_78;
        if ((v66 & 8) != 0)
        {
          if ((*(_BYTE *)(v66 - 79) & 1) != 0)
          {
LABEL_77:
            if (!*(_QWORD *)(a3 + 168))
              goto LABEL_78;
          }
        }
        else
        {
          v67 = *(_DWORD *)(a3 + 132);
          if (*(_DWORD *)(v66 & 0xFFFFFFFFFFFFC000 | 0x20) != v67)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v66 & 0xFFFFFFFFFFFFC000), v67, v49, v50, v51, v52, v53, v54);
          if (((*(_QWORD *)((v66 & 0xFFFFFFFFFFFFC000) + 8 * ((v66 >> 10) & 0xF) + 0x28) >> (v66 >> 4)) & 1) != 0)
            goto LABEL_77;
        }
        JSC::SlotVisitor::appendSlow(a3, v66, 0, v50, v51, v52, v53, v54);
      }
LABEL_78:
      v63 += 3;
    }
  }
}

uint64_t JSC::CodeBlock::determineLiveness<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a1);
  if ((result & 1) == 0)
  {
    result = *(_QWORD *)(a1 + 120);
    if (result)
    {
      if ((*(_BYTE *)(result + 12) & 0xFE) == 4)
      {
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
        v7 = *(unsigned int **)(v6 + 64);
        if (v7)
        {
          v8 = 0;
          do
          {
            if (v8 >= *v7)
              break;
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, *(_QWORD *)&v7[2 * v8 + 2]);
            if ((result & 1) == 0)
              return result;
            ++v8;
            v7 = *(unsigned int **)(v6 + 64);
          }
          while (v7);
        }
        v9 = 0;
        v10 = *(unsigned int **)(v6 + 72);
        if (v10)
          v11 = v10 + 1;
        else
          v11 = 0;
        if (v10)
          v9 = (uint64_t)&v10[*v10 + 1];
        while (v11 != (_DWORD *)v9)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, 16 * (*v11 & 0xFFFFFFFE));
          if ((result & 1) == 0)
            return result;
          ++v11;
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, a1);
      }
    }
  }
  return result;
}

void JSC::CodeBlock::determineLiveness<JSC::SlotVisitor>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;

  v5 = a1 >> 4;
  v6 = (a1 >> 10) & 0xF;
  if ((a1 & 8) != 0)
  {
    if ((*(_BYTE *)(a1 - 79) & 1) != 0)
      return;
  }
  else if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
         && ((*(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 8 * v6 + 0x28) >> v5) & 1) != 0)
  {
    return;
  }
  v7 = *(_BYTE **)(a1 + 120);
  if (v7 && (v7[12] & 0xFE) == 4)
  {
    v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 72))(v7);
    v15 = *(unsigned int **)(v8 + 64);
    if (v15)
    {
      v16 = 0;
      while (v16 < *v15)
      {
        v17 = *(_QWORD *)&v15[2 * v16 + 2];
        if ((v17 & 8) != 0)
        {
          if ((*(_BYTE *)(v17 - 79) & 1) == 0)
            return;
        }
        else
        {
          if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(*(_QWORD *)(a3 + 80) + 240)
            || ((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) == 0)
          {
            return;
          }
          v15 = *(unsigned int **)(v8 + 64);
        }
        ++v16;
        if (!v15)
          break;
      }
    }
    v18 = 0;
    v19 = *(unsigned int **)(v8 + 72);
    if (v19)
      v20 = v19 + 1;
    else
      v20 = 0;
    if (v19)
      v18 = (uint64_t)&v19[*v19 + 1];
    while (v20 != (unsigned int *)v18)
    {
      v21 = *v20;
      if (*(_DWORD *)(((unint64_t)(v21 >> 10) << 14) | 0x20) != *(_DWORD *)(*(_QWORD *)(a3 + 80)
                                                                                                + 240)
        || ((*(_QWORD *)(((16 * v21) & 0xFFFFFC000)
                       + 8 * (((unint64_t)(v21 & 0xFFFFFFFE) >> 6) & 0xF)
                       + 0x28) >> (v21 & 0x3E)) & 1) == 0)
      {
        return;
      }
      ++v20;
    }
    if (a1)
    {
      if ((a1 & 8) != 0)
      {
        if ((*(_BYTE *)(a1 - 79) & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        v22 = a1 & 0xFFFFFFFFFFFFC000;
        v23 = *(_DWORD *)(a3 + 132);
        if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
        {
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a1 & 0xFFFFFFFFFFFFC000), v23, v9, v10, v11, v12, v13, v14);
          v22 = a1 & 0xFFFFFFFFFFFFC000;
        }
        if (((*(_QWORD *)(v22 + 8 * v6 + 40) >> v5) & 1) == 0)
          goto LABEL_34;
      }
      if (!*(_QWORD *)(a3 + 168))
        return;
LABEL_34:
      JSC::SlotVisitor::appendSlow(a3, a1, 0, v10, v11, v12, v13, v14);
    }
  }
}

void JSC::CodeBlock::destroy(JSC::CodeBlock *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  unsigned int *v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t StatusReg;
  uint64_t v19;
  uint64_t v20;
  JSC::Profiler::Database *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  JSC::CallLinkInfo *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  JSC::CallLinkInfo *v41;
  JSC::CallLinkInfo *v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  JSC::DFG::CommonData *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int **v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int **v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int **v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::DFG::JITData *v125;
  uint64_t v126;
  JSC::DFG::JITData *v127;
  unint64_t v128;
  uint64_t v129;
  JSC::InlineCacheHandler *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int **v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  JSC::MetadataTable *v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t i;
  uint64_t v186;
  unsigned int *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  WTF::StringImpl **v194;
  WTF::StringImpl *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  JSC::CallLinkInfo *v209[2];

  v10 = *((_QWORD *)this + 9);
  v11 = (unsigned int *)*((_QWORD *)this + 15);
  if (!v11)
    goto LABEL_20;
  v12 = *((_BYTE *)v11 + 12);
  if ((v12 & 0xFE) != 2)
    goto LABEL_19;
  v13 = *((_QWORD *)this + 17);
  if (!v13)
    goto LABEL_19;
  v14 = *(unsigned __int16 *)(v13 + 30);
  if (!*(_WORD *)(v13 + 30))
    v14 = *(_DWORD *)(v13 + 156);
  v15 = (unint64_t *)((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = *(unsigned __int16 *)(v13 + 32);
  if (!*(_WORD *)(v13 + 32))
    v16 = *(_DWORD *)(v13 + 160);
  v17 = v13 + v16;
  if (v17 <= (unint64_t)v15)
  {
LABEL_19:
    if ((v12 & 0xFE) == 4)
    {
      v44 = v11 + 2;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 + 1, v44));
      v46 = (JSC::DFG::CommonData *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(_QWORD *)v11 + 72))(v11, a2);
      JSC::DFG::CommonData::clearWatchpoints(v46, v47, v48, v49, v50, v51, v52, v53);
      do
      {
        v54 = __ldaxr(v44);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v44));
      if (!v55)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 32))(v11);
      }
    }
    goto LABEL_20;
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    a2 = *v15;
    if (!*v15)
      goto LABEL_10;
    *v15 = 0;
    v19 = *(_QWORD *)(StatusReg + 752);
    if (v19)
    {
      if (a2 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
      {
        if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
        {
          a4 = 0;
LABEL_61:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v19, a2, 1, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 != 1)
          goto LABEL_61;
      }
      v20 = *(unsigned int *)(v19 + 8000);
      if (v20 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v19, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v19 + 8 * v20) = a2 | 0x5000000000000;
        *(_DWORD *)(v19 + 8000) = v20 + 1;
      }
    }
    else
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_10:
    ++v15;
  }
  while ((unint64_t)v15 < v17);
  v11 = (unsigned int *)*((_QWORD *)this + 15);
  if (v11)
  {
    v12 = *((_BYTE *)v11 + 12);
    goto LABEL_19;
  }
LABEL_20:
  v21 = *(JSC::Profiler::Database **)(v10 + 93016);
  if (v21)
    JSC::Profiler::Database::notifyDestruction(v21, this, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(v10 + 754))
  {
    v22 = *((_QWORD *)this + 17);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 - 16);
      if (v23)
      {
        do
          v24 = __ldaxr((unsigned int *)v23);
        while (__stlxr(v24 + 1, (unsigned int *)v23));
        v25 = *(_BYTE *)(v23 + 4);
        if ((v25 & 0x30) == 0x20)
          *(_BYTE *)(v23 + 4) = v25 & 0xCF;
        do
        {
          v26 = __ldaxr((unsigned int *)v23);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unsigned int *)v23));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)v23);
          if ((*(_BYTE *)(v23 + 4) & 1) != 0)
            WTF::fastFree(*(_QWORD *)(v23 + 16), (void *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v23, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v28 = (JSC::CallLinkInfo *)*((_QWORD *)this + 11);
  if (v28 != (JSC::CodeBlock *)((char *)this + 88))
  {
    *((_QWORD *)v28 + 1) = v209;
    v41 = (JSC::CallLinkInfo *)*((_QWORD *)this + 12);
    v209[0] = v28;
    v209[1] = v41;
    *(_QWORD *)v41 = v209;
    *((_QWORD *)this + 11) = (char *)this + 88;
    *((_QWORD *)this + 12) = (char *)this + 88;
    while (1)
    {
      v42 = v209[0];
      if ((JSC::CallLinkInfo **)v209[0] == v209)
        break;
      v43 = *((unsigned __int8 *)v209[0] + 16);
      if (*((_BYTE *)v209[0] + 16))
      {
        switch(v43)
        {
          case 1:
            JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(v209[0], (JSC::VM *)v10, this, 0, a5, a6, a7, a8, a9);
            break;
          case 2:
            JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(v209[0], (JSC::VM *)v10, (unsigned int **)this, 0);
            break;
          case 3:
            v56 = (_QWORD *)*((_QWORD *)v209[0] + 1);
            if (v56)
            {
              v57 = *(_QWORD *)v209[0];
              *v56 = *(_QWORD *)v209[0];
              *(_QWORD *)(v57 + 8) = v56;
              *(_QWORD *)v42 = 0;
              *((_QWORD *)v42 + 1) = 0;
            }
            *((_QWORD *)v42 + 27) = 0;
            break;
        }
      }
      else
      {
        JSC::CallLinkInfo::unlinkOrUpgradeImpl(v209[0], (JSC::VM *)v10, this, 0, a5, a6, a7, a8, a9);
      }
    }
  }
  v29 = *((_QWORD *)this + 15);
  if (!v29 || (*(_BYTE *)(v29 + 12) & 0xFE) != 4)
  {
    v37 = (unsigned int *)*((_QWORD *)this + 16);
    if (!v37)
      goto LABEL_211;
    v38 = *v37;
    if (!(_DWORD)v38)
      goto LABEL_211;
    v39 = &v37[-34 * v38];
    v40 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v107 = *((unsigned __int8 *)v39 + 123);
      if (v107 == 4)
      {
        v108 = *((_QWORD *)v39 + 9);
        if (!v108)
          goto LABEL_193;
        do
        {
          v109 = *(_QWORD *)(v108 + 64);
          if (v109)
          {
            if (*(_BYTE *)(v109 + 24) == 5)
            {
              v110 = *(_QWORD *)(v109 + 120);
              *(_QWORD *)(v109 + 112) = 0;
              *(_QWORD *)(v109 + 120) = 0;
              if (v110)
              {
                do
                {
                  v111 = __ldaxr((unsigned int *)v110);
                  v112 = v111 - 1;
                }
                while (__stlxr(v112, (unsigned int *)v110));
                if (!v112)
                {
                  atomic_store(1u, (unsigned int *)v110);
                  v204 = *(_QWORD *)(v110 + 24);
                  if (v204)
                  {
                    *(_QWORD *)(v110 + 24) = 0;
                    *(_DWORD *)(v110 + 32) = 0;
                    WTF::fastFree(v204, (void *)a2, a3, a4, a5, a6, a7, a8);
                  }
                  v205 = *(unsigned int *)(v110 + 20);
                  v206 = *(uint64_t **)(v110 + 8);
                  if ((_DWORD)v205)
                  {
                    v207 = 8 * v205;
                    do
                    {
                      v208 = *v206;
                      if ((*v206 & 1) != 0 && (v208 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v208 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
                      ++v206;
                      v207 -= 8;
                    }
                    while (v207);
                    v206 = *(uint64_t **)(v110 + 8);
                  }
                  if (v206)
                  {
                    *(_QWORD *)(v110 + 8) = 0;
                    *(_DWORD *)(v110 + 16) = 0;
                    WTF::fastFree((unint64_t)v206, (void *)a2, a3, a4, a5, a6, a7, a8);
                  }
                  WTF::fastFree(v110, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
              }
            }
          }
          v108 = *(_QWORD *)(v108 + 88);
        }
        while (v108);
        v107 = *((unsigned __int8 *)v39 + 123);
      }
      if (v107 > 6)
      {
LABEL_345:
        __break(0xC471u);
        JUMPOUT(0x19814AF1CLL);
      }
      if (v107 != 4)
        goto LABEL_180;
LABEL_193:
      v113 = *((_QWORD *)v39 + 8);
      *((_QWORD *)v39 + 8) = 0;
      if (v113)
      {
        v114 = *(unsigned int *)(v113 + 12);
        if ((_DWORD)v114)
        {
          v115 = *(unsigned int ***)v113;
          v116 = *(_QWORD *)v113 + 8 * v114;
          do
          {
            v117 = *v115;
            *v115 = 0;
            if (v117)
            {
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (!v119)
              {
                atomic_store(1u, v117);
                JSC::AccessCase::operator delete((unint64_t)v117, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v115;
          }
          while (v115 != (unsigned int **)v116);
        }
        v120 = *(_QWORD *)v113;
        if (v113 + 16 != *(_QWORD *)v113 && v120 != 0)
        {
          *(_QWORD *)v113 = 0;
          *(_DWORD *)(v113 + 8) = 0;
          WTF::fastFree(v120, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v122 = *(_QWORD *)(v40 + 752);
        if (v122)
        {
          if (!(v113 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v113 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v113)) & 1) != 0)
          {
LABEL_209:
            v123 = *(unsigned int *)(v122 + 8000);
            if (v123 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v122, v113, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v122 + 8 * v123) = v113 | 0x5000000000000;
              *(_DWORD *)(v122 + 8000) = v123 + 1;
            }
            goto LABEL_180;
          }
          if (v113 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v113 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v113 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v113) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_209;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v122, v113, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v113, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_180:
      v39 += 34;
      if (v39 == v37)
        goto LABEL_211;
    }
  }
  v30 = (unsigned int *)(v29 + 8);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  v32 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 72))(v29, a2);
  do
  {
    v33 = __ldaxr(v30);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v30));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)(v29 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  }
  v35 = *(_QWORD *)(v32 + 144);
  if (v35)
  {
    v36 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v58 = *(unsigned __int8 *)(v35 + 123);
      if (v58 != 4)
        goto LABEL_74;
      v59 = *(_QWORD *)(v35 + 72);
      if (v59)
        break;
LABEL_78:
      v60 = *(_QWORD *)(v35 + 64);
      *(_QWORD *)(v35 + 64) = 0;
      if (v60)
      {
        v61 = *(unsigned int *)(v60 + 12);
        if ((_DWORD)v61)
        {
          v62 = *(unsigned int ***)v60;
          v63 = *(_QWORD *)v60 + 8 * v61;
          do
          {
            v64 = *v62;
            *v62 = 0;
            if (v64)
            {
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                atomic_store(1u, v64);
                JSC::AccessCase::operator delete((unint64_t)v64, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v62;
          }
          while (v62 != (unsigned int **)v63);
        }
        v67 = *(_QWORD *)v60;
        if (v60 + 16 != *(_QWORD *)v60 && v67 != 0)
        {
          *(_QWORD *)v60 = 0;
          *(_DWORD *)(v60 + 8) = 0;
          WTF::fastFree(v67, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v69 = *(_QWORD *)(v36 + 752);
        if (v69)
        {
          if (!(v60 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v60 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v60)) & 1) != 0)
          {
LABEL_94:
            v70 = *(unsigned int *)(v69 + 8000);
            if (v70 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v69, v60, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v69 + 8 * v70) = v60 | 0x5000000000000;
              *(_DWORD *)(v69 + 8000) = v70 + 1;
            }
            goto LABEL_72;
          }
          if (v60 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v60 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v60 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v60) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_94;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v69, v60, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v60, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_72:
      v35 = *(_QWORD *)(v35 + 136);
      if (!v35)
        goto LABEL_104;
    }
    do
    {
      v71 = *(_QWORD *)(v59 + 64);
      if (v71)
      {
        if (*(_BYTE *)(v71 + 24) == 5)
        {
          v72 = *(_QWORD *)(v71 + 120);
          *(_QWORD *)(v71 + 112) = 0;
          *(_QWORD *)(v71 + 120) = 0;
          if (v72)
          {
            do
            {
              v73 = __ldaxr((unsigned int *)v72);
              v74 = v73 - 1;
            }
            while (__stlxr(v74, (unsigned int *)v72));
            if (!v74)
            {
              atomic_store(1u, (unsigned int *)v72);
              v97 = *(_QWORD *)(v72 + 24);
              if (v97)
              {
                *(_QWORD *)(v72 + 24) = 0;
                *(_DWORD *)(v72 + 32) = 0;
                WTF::fastFree(v97, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              v98 = *(unsigned int *)(v72 + 20);
              v99 = *(uint64_t **)(v72 + 8);
              if ((_DWORD)v98)
              {
                v100 = 8 * v98;
                do
                {
                  v101 = *v99;
                  if ((*v99 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v101 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
                  ++v99;
                  v100 -= 8;
                }
                while (v100);
                v99 = *(uint64_t **)(v72 + 8);
              }
              if (v99)
              {
                *(_QWORD *)(v72 + 8) = 0;
                *(_DWORD *)(v72 + 16) = 0;
                WTF::fastFree((unint64_t)v99, (void *)a2, a3, a4, a5, a6, a7, a8);
              }
              WTF::fastFree(v72, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
          }
        }
      }
      v59 = *(_QWORD *)(v59 + 88);
    }
    while (v59);
    v58 = *(unsigned __int8 *)(v35 + 123);
LABEL_74:
    if (v58 > 6)
      goto LABEL_345;
    if (v58 != 4)
      goto LABEL_72;
    goto LABEL_78;
  }
LABEL_104:
  v75 = *((_QWORD *)this + 15);
  if (!v75)
    goto LABEL_213;
  if ((*(_BYTE *)(v75 + 12) & 0xFE) == 4)
  {
    v76 = (unsigned int *)*((_QWORD *)this + 16);
    if (v76)
    {
      v77 = *v76;
      if ((_DWORD)v77)
      {
        v78 = &v76[-34 * v77];
        v79 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v80 = *((unsigned __int8 *)v78 + 123);
          if (v80 == 4)
          {
            v81 = *((_QWORD *)v78 + 9);
            if (!v81)
              goto LABEL_122;
            do
            {
              v82 = *(_QWORD *)(v81 + 64);
              if (v82)
              {
                if (*(_BYTE *)(v82 + 24) == 5)
                {
                  v83 = *(_QWORD *)(v82 + 120);
                  *(_QWORD *)(v82 + 112) = 0;
                  *(_QWORD *)(v82 + 120) = 0;
                  if (v83)
                  {
                    do
                    {
                      v84 = __ldaxr((unsigned int *)v83);
                      v85 = v84 - 1;
                    }
                    while (__stlxr(v85, (unsigned int *)v83));
                    if (!v85)
                    {
                      atomic_store(1u, (unsigned int *)v83);
                      v102 = *(_QWORD *)(v83 + 24);
                      if (v102)
                      {
                        *(_QWORD *)(v83 + 24) = 0;
                        *(_DWORD *)(v83 + 32) = 0;
                        WTF::fastFree(v102, (void *)a2, a3, a4, a5, a6, a7, a8);
                      }
                      v103 = *(unsigned int *)(v83 + 20);
                      v104 = *(uint64_t **)(v83 + 8);
                      if ((_DWORD)v103)
                      {
                        v105 = 8 * v103;
                        do
                        {
                          v106 = *v104;
                          if ((*v104 & 1) != 0 && (v106 & 0xFFFFFFFF8) != 0)
                            WTF::fastFree(v106 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
                          ++v104;
                          v105 -= 8;
                        }
                        while (v105);
                        v104 = *(uint64_t **)(v83 + 8);
                      }
                      if (v104)
                      {
                        *(_QWORD *)(v83 + 8) = 0;
                        *(_DWORD *)(v83 + 16) = 0;
                        WTF::fastFree((unint64_t)v104, (void *)a2, a3, a4, a5, a6, a7, a8);
                      }
                      WTF::fastFree(v83, (void *)a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
                }
              }
              v81 = *(_QWORD *)(v81 + 88);
            }
            while (v81);
            v80 = *((unsigned __int8 *)v78 + 123);
          }
          if (v80 > 6)
          {
            __break(0xC471u);
            JUMPOUT(0x19814AF44);
          }
          if (v80 != 4)
            goto LABEL_112;
LABEL_122:
          v86 = *((_QWORD *)v78 + 8);
          *((_QWORD *)v78 + 8) = 0;
          if (v86)
          {
            v87 = *(unsigned int *)(v86 + 12);
            if ((_DWORD)v87)
            {
              v88 = *(unsigned int ***)v86;
              v89 = *(_QWORD *)v86 + 8 * v87;
              do
              {
                v90 = *v88;
                *v88 = 0;
                if (v90)
                {
                  do
                  {
                    v91 = __ldaxr(v90);
                    v92 = v91 - 1;
                  }
                  while (__stlxr(v92, v90));
                  if (!v92)
                  {
                    atomic_store(1u, v90);
                    JSC::AccessCase::operator delete((unint64_t)v90, (void *)a2, a3, a4, a5, a6, a7, a8);
                  }
                }
                ++v88;
              }
              while (v88 != (unsigned int **)v89);
            }
            v93 = *(_QWORD *)v86;
            if (v86 + 16 != *(_QWORD *)v86 && v93 != 0)
            {
              *(_QWORD *)v86 = 0;
              *(_DWORD *)(v86 + 8) = 0;
              WTF::fastFree(v93, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v95 = *(_QWORD *)(v79 + 752);
            if (v95)
            {
              if (!(v86 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v86 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v86)) & 1) != 0)
              {
LABEL_138:
                v96 = *(unsigned int *)(v95 + 8000);
                if (v96 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v95, v86, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v95 + 8 * v96) = v86 | 0x5000000000000;
                  *(_DWORD *)(v95 + 8000) = v96 + 1;
                }
                goto LABEL_112;
              }
              if (v86 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v86 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v86 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v86) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_138;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v95, v86, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v86, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
LABEL_112:
          v78 += 34;
        }
        while (v78 != v76);
      }
    }
  }
LABEL_211:
  v124 = *((_QWORD *)this + 15);
  if (v124 && (*(_BYTE *)(v124 + 12) & 0xFE) == 4)
  {
    v125 = (JSC::DFG::JITData *)*((_QWORD *)this + 16);
    if (v125)
    {
      *((_QWORD *)this + 16) = 0;
      v126 = *(unsigned int *)v125;
      JSC::DFG::JITData::~JITData(v125, (void *)a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_245;
    }
  }
  else
  {
LABEL_213:
    v125 = (JSC::DFG::JITData *)*((_QWORD *)this + 16);
    if (v125)
    {
      *((_QWORD *)this + 16) = 0;
      v126 = *(unsigned int *)v125;
      if ((_DWORD)v126)
      {
        v127 = (JSC::DFG::JITData *)((char *)v125 - 136 * v126);
        v128 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        while (1)
        {
          v129 = *((unsigned int *)v127 + 24);
          if ((_DWORD)v129 != -1)
            ((void (*)(JSC::CallLinkInfo **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF6VectorIN3JSC11StructureIDELm0ENS7_15CrashOnOverflowELm16ENS7_10FastMallocEEENS8_INS_5tupleIJSA_NS9_19CacheableIdentifierEEEELm0ESB_Lm16ESC_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v129])(v209, (char *)v127 + 80);
          *((_DWORD *)v127 + 24) = -1;
          v130 = (JSC::InlineCacheHandler *)*((_QWORD *)v127 + 9);
          *((_QWORD *)v127 + 9) = 0;
          if (v130)
          {
            if (*(_DWORD *)v130 == 1)
            {
              JSC::InlineCacheHandler::~InlineCacheHandler(v130, (void *)a2, a3, a4, a5, a6, a7, a8, a9);
              WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
            }
            else
            {
              --*(_DWORD *)v130;
            }
          }
          v131 = *((_QWORD *)v127 + 8);
          *((_QWORD *)v127 + 8) = 0;
          if (!v131)
            goto LABEL_239;
          v132 = *(unsigned int *)(v131 + 12);
          if ((_DWORD)v132)
          {
            v133 = *(unsigned int ***)v131;
            v134 = *(_QWORD *)v131 + 8 * v132;
            do
            {
              v135 = *v133;
              *v133 = 0;
              if (v135)
              {
                do
                {
                  v136 = __ldaxr(v135);
                  v137 = v136 - 1;
                }
                while (__stlxr(v137, v135));
                if (!v137)
                {
                  atomic_store(1u, v135);
                  JSC::AccessCase::operator delete((unint64_t)v135, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
              }
              ++v133;
            }
            while (v133 != (unsigned int **)v134);
          }
          v138 = *(_QWORD *)v131;
          if (v131 + 16 != *(_QWORD *)v131 && v138 != 0)
          {
            *(_QWORD *)v131 = 0;
            *(_DWORD *)(v131 + 8) = 0;
            WTF::fastFree(v138, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
          v140 = *(_QWORD *)(v128 + 752);
          if (v140)
          {
            if (!(v131 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v131 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v131)) & 1) != 0)
            {
LABEL_237:
              v141 = *(unsigned int *)(v140 + 8000);
              if (v141 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v140, v131, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v140 + 8 * v141) = v131 | 0x5000000000000;
                *(_DWORD *)(v140 + 8000) = v141 + 1;
              }
              goto LABEL_239;
            }
            if (v131 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v131 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v131 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v131) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_237;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v140, v131, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v131, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_239:
          v142 = *(_QWORD *)v127;
          if ((*(_QWORD *)v127 & 1) != 0 && (v142 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v142 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
          v127 = (JSC::DFG::JITData *)((char *)v127 + 136);
          if (v127 == v125)
            goto LABEL_245;
        }
      }
      v126 = 0;
LABEL_245:
      a2 = (unint64_t)v125 - 136 * v126;
      v151 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (v151)
      {
        if (a2 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                               + ((((unint64_t)v125 - 136 * v126) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v125 - 136 * v126) >> 24)) & 1) == 0)
        {
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((((unint64_t)v125 - 136 * v126) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2
                                    * (((((_DWORD)v125 - 136 * v126) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_248;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v151, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
LABEL_248:
          v152 = *(unsigned int *)(v151 + 8000);
          if (v152 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v151, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v151 + 8 * v152) = a2 | 0x5000000000000;
            *(_DWORD *)(v151 + 8000) = v152 + 1;
          }
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache((unint64_t)v125 - 136 * v126, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
  }
  v153 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v153)
  {
    v154 = *(_QWORD *)(v153 + 16);
    if (v154)
    {
      v193 = *(unsigned int *)(v154 - 4);
      if ((_DWORD)v193)
      {
        v194 = *(WTF::StringImpl ***)(v153 + 16);
        do
        {
          v195 = *v194;
          if (*v194 != (WTF::StringImpl *)-1)
          {
            if (v195)
            {
              *v194 = 0;
              if (*(_DWORD *)v195 == 2)
              {
                WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
              }
              else
              {
                *(_DWORD *)v195 -= 2;
              }
            }
            else
            {
              *v194 = 0;
            }
          }
          v194 += 3;
          --v193;
        }
        while (v193);
      }
      WTF::fastFree(v154 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    v155 = *(_QWORD *)v153;
    if (*(_QWORD *)v153)
    {
      *(_QWORD *)v153 = 0;
      *(_DWORD *)(v153 + 8) = 0;
      WTF::fastFree(v155, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v153, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v156 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v156)
    WTF::fastFree(v156, (void *)a2, a3, a4, a5, a6, a7, a8);
  v157 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v157)
    WTF::fastFree(v157, (void *)a2, a3, a4, a5, a6, a7, a8);
  v158 = *((_QWORD *)this + 20);
  if (v158)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v158, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v159 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v159)
    WTF::fastFree(v159, (void *)a2, a3, a4, a5, a6, a7, a8);
  v160 = (JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v160)
  {
    JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder::~LazyValueProfileHolder(v160, (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
  }
  v169 = (JSC::MetadataTable *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v169)
  {
    v170 = (unsigned int *)((char *)v169 - 8);
    do
    {
      v171 = __ldaxr(v170);
      v172 = v171 - 1;
    }
    while (__stlxr(v172, v170));
    if (!v172)
    {
      atomic_store(1u, v170);
      v174 = (char *)v169 - 16;
      v173 = *((_QWORD *)v169 - 2);
      if (v173)
      {
        *((_QWORD *)v169 - 2) = 0;
        JSC::MetadataTable::~MetadataTable(v169, (void *)a2, a3, a4, a5, a6, a7, a8, a9);
        if ((*(_BYTE *)(v173 + 4) & 1) != 0)
        {
          v176 = *(unsigned int *)(v173 + 8);
          if (*(_QWORD *)(v173 + 16) + 16 * v176 + 16 == v175)
            *(_BYTE *)(v173 + 4) &= ~4u;
          else
            WTF::fastFree((unint64_t)&v174[-16 * v176], (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        do
        {
          v177 = __ldaxr((unsigned int *)v173);
          v178 = v177 - 1;
        }
        while (__stlxr(v178, (unsigned int *)v173));
        if (!v178)
        {
          atomic_store(1u, (unsigned int *)v173);
          if ((*(_BYTE *)(v173 + 4) & 1) != 0)
            WTF::fastFree(*(_QWORD *)(v173 + 16), (void *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v173, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v179 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v179)
  {
    v180 = v179 + 2;
    do
    {
      v181 = __ldaxr(v180);
      v182 = v181 - 1;
    }
    while (__stlxr(v182, v180));
    if (!v182)
    {
      atomic_store(1u, v179 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v179 + 32))(v179);
    }
  }
  v183 = *((_QWORD *)this + 14);
  if (v183)
  {
    v184 = *(unsigned int *)(v183 - 4);
    if ((_DWORD)v184)
    {
      for (i = 0; i != v184; ++i)
      {
        if (*(_DWORD *)(v183 + 16 * i) != 1)
        {
          v186 = v183 + 16 * i;
          v187 = *(unsigned int **)(v186 + 8);
          *(_QWORD *)(v186 + 8) = 0;
          if (v187)
          {
            v188 = (uint64_t *)(v187 + 2);
            v189 = *v187;
            if ((_DWORD)v189)
            {
              v190 = 56 * v189;
              do
              {
                v191 = (uint64_t *)v188[1];
                if (v191)
                {
                  v192 = *v188;
                  *v191 = *v188;
                  *(_QWORD *)(v192 + 8) = v191;
                  *v188 = 0;
                  v188[1] = 0;
                }
                v188 += 7;
                v190 -= 56;
              }
              while (v190);
            }
            WTF::fastFree((unint64_t)v187, (void *)a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
    }
    WTF::fastFree(v183 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::CodeBlock::estimatedSize(unint64_t this, JSC::JSCell *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v9 = *(_QWORD *)(this + 136);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 - 16);
    do
      v11 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v11 + 1, (unsigned int *)v10));
    v12 = *(_QWORD *)(v9 - 16);
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
    v14 = *(unsigned int *)(v12 + 8);
    v15 = *(unsigned __int16 *)(v9 + 94);
    if (!*(_WORD *)(v9 + 94))
      v15 = *(_DWORD *)(v9 + 284);
    do
    {
      v16 = __ldaxr((unsigned int *)v12);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v12));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v12);
      if ((*(_BYTE *)(v12 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v12 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v18 = 16 * v14 + v15 + 16;
    if (*(_QWORD *)(v10 + 16) + 16 * *(unsigned int *)(v10 + 8) + 16 == v9)
    {
      if ((*(_BYTE *)(v10 + 4) & 8) != 0)
        v18 = 16 * v14 + v15 - 272;
      else
        v18 = 16 * v14 + v15 - 80;
    }
    do
    {
      v19 = __ldaxr((unsigned int *)v10);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v10));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v10);
      if ((*(_BYTE *)(v10 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v10 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v18 = 0;
  }
  v21 = *(_QWORD *)(this + 120);
  if (v21)
  {
    v22 = (unsigned int *)(v21 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    if (*(_BYTE *)(v21 + 13) != 1)
      v18 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 128))(v21);
    if ((this & 8) != 0)
      v24 = *(_QWORD *)(this - 88);
    else
      v24 = 16 * **(unsigned int **)(this & 0xFFFFFFFFFFFFC000);
    v25 = v24 + v18;
    do
    {
      v26 = __ldaxr(v22);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v22));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)(v21 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    }
  }
  else
  {
    if ((this & 8) != 0)
      v29 = *(_QWORD *)(this - 88);
    else
      v29 = 16 * **(unsigned int **)(this & 0xFFFFFFFFFFFFC000);
    return v29 + v18;
  }
  return v25;
}

void JSC::CodeBlock::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  unint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t i;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  JSC::StructureStubInfo *k;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  _BYTE *v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  _OWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  JSC::RecordedStatuses *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int *v110;
  _DWORD *v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t j;
  unint64_t v131;
  BOOL v132;
  unsigned __int8 *v133;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  JSC::CodeBlock *v139;
  JSC::JSCell *v140;
  JSC::AbstractSlotVisitor *v141;
  JSC::JSCell *v142;
  JSC::JSCell **v143;

  v8 = a2;
  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    a2 = (JSC::JSCell *)*((unsigned int *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != (_DWORD)a2)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), (int)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v11 = (unsigned __int8 *)(this + 16);
  if (__ldaxr((unsigned __int8 *)(this + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 16);
LABEL_9:
  *(_BYTE *)(this + 19) = 0;
  v13 = *(_BYTE **)(this + 120);
  if (v13)
  {
    if (v13[12] == 4)
    {
      v114 = *(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 88))(v13) + 384);
      if (v114)
      {
        if ((v114 & 8) != 0)
        {
          v115 = 0;
          if ((*(_BYTE *)(v114 - 79) & 1) != 0)
          {
LABEL_204:
            if (!*((_QWORD *)v8 + 21))
              goto LABEL_11;
          }
        }
        else
        {
          v115 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v114 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v114 & 0xFFFFFFFFFFFFC000) + v115 + 8 * ((v114 >> 10) & 0xF) + 0x28) >> (v114 >> 4)) & 1) != 0)
            goto LABEL_204;
        }
        JSC::SlotVisitor::appendSlow((uint64_t)v8, v114, v115, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_11:
  v14 = *(_QWORD *)(this + 136);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 - 16);
    do
      v16 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v16 + 1, (unsigned int *)v15));
    v17 = *(_QWORD *)(v14 - 16);
    do
      v18 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v18 + 1, (unsigned int *)v17));
    v19 = *(unsigned int *)(v17 + 8);
    v20 = *(unsigned __int16 *)(v14 + 94);
    if (!*(_WORD *)(v14 + 94))
      v20 = *(_DWORD *)(v14 + 284);
    do
    {
      v21 = __ldaxr((unsigned int *)v17);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v17));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v17);
      if ((*(_BYTE *)(v17 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v17 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v23 = 16 * v19 + v20 + 16;
    if (*(_QWORD *)(v15 + 16) + 16 * *(unsigned int *)(v15 + 8) + 16 == v14)
    {
      if ((*(_BYTE *)(v15 + 4) & 8) != 0)
        v23 -= 288;
      else
        v23 -= 96;
    }
    do
    {
      v24 = __ldaxr((unsigned int *)v15);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v15));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v15);
      if ((*(_BYTE *)(v15 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v15 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    v23 = 0;
  }
  v26 = *(_BYTE **)(this + 120);
  if (v26 && v26[13] != 1)
    v23 += (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v26 + 128))(v26);
  if (*((_BYTE *)v8 + 184))
  {
    *((_QWORD *)v8 + 18) += v23;
    v27 = *((_QWORD *)v8 + 20);
    v28 = __CFADD__(v27, v23);
    v29 = v27 + v23;
    if (v28)
      *((_BYTE *)v8 + 152) = 1;
    else
      *((_QWORD *)v8 + 20) = v29;
  }
  v30 = *(_QWORD *)(this + 8);
  if (v30)
  {
    if ((v30 & 8) != 0)
    {
      if ((*(_BYTE *)(v30 - 79) & 1) != 0)
        goto LABEL_37;
    }
    else
    {
      v31 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != v31)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000), v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v30 & 0xFFFFFFFFFFFFC000) + 8 * ((v30 >> 10) & 0xF) + 0x28) >> (v30 >> 4)) & 1) != 0)
      {
LABEL_37:
        if (!*((_QWORD *)v8 + 21))
          goto LABEL_38;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v30, 0, a4, a5, a6, a7, a8);
  }
LABEL_38:
  v32 = *(_QWORD *)(this + 64);
  if (!v32)
    goto LABEL_44;
  if ((v32 & 8) != 0)
  {
    if ((*(_BYTE *)(v32 - 79) & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    v33 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 0x20) != v33)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v32 & 0xFFFFFFFFFFFFC000), v33, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v32 & 0xFFFFFFFFFFFFC000) + 8 * ((v32 >> 10) & 0xF) + 0x28) >> (v32 >> 4)) & 1) != 0)
    {
LABEL_43:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_44;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v32, 0, a4, a5, a6, a7, a8);
LABEL_44:
  v34 = *(_QWORD *)(this + 56);
  if (v34)
  {
    if ((v34 & 8) != 0)
    {
      if ((*(_BYTE *)(v34 - 79) & 1) == 0)
        goto LABEL_233;
    }
    else
    {
      v35 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v34 & 0xFFFFFFFFFFFFC000 | 0x20) != v35)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v34 & 0xFFFFFFFFFFFFC000), v35, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v34 & 0xFFFFFFFFFFFFC000) + 8 * ((v34 >> 10) & 0xF) + 0x28) >> (v34 >> 4)) & 1) == 0)
        goto LABEL_233;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_50;
LABEL_233:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v34, 0, a4, a5, a6, a7, a8);
  }
LABEL_50:
  v36 = *(_QWORD *)(this + 224);
  if (v36)
    JSC::DirectEvalCodeCache::visitAggregate((JSC::DirectEvalCodeCache *)(v36 + 16), v8, (uint64_t)a3, a4, a5, a6, a7, a8);
  v37 = *(unsigned int *)(this + 172);
  if ((_DWORD)v37)
  {
    v38 = *(unint64_t **)(this + 160);
    do
    {
      v40 = *v38++;
      v39 = v40;
      if ((v40 & 0xFFFE000000000002) != 0 || v39 == 0)
        goto LABEL_63;
      if ((v39 & 8) != 0)
      {
        if ((*(_BYTE *)(v39 - 79) & 1) == 0)
          goto LABEL_216;
      }
      else
      {
        v42 = *((_DWORD *)v8 + 33);
        if (*(_DWORD *)(v39 & 0xFFFFFFFFFFFFC000 | 0x20) != v42)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v39 & 0xFFFFFFFFFFFFC000), v42, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v39 & 0xFFFFFFFFFFFFC000) + 8 * ((v39 >> 10) & 0xF) + 0x28) >> (v39 >> 4)) & 1) == 0)
        {
LABEL_216:
          JSC::SlotVisitor::appendSlow((uint64_t)v8, v39, 0, a4, a5, a6, a7, a8);
          goto LABEL_63;
        }
      }
      if (*((_QWORD *)v8 + 21))
        goto LABEL_216;
LABEL_63:
      --v37;
    }
    while (v37);
  }
  v43 = 0;
  v44 = *(unsigned int **)(this + 184);
  if (v44)
    v45 = (unint64_t *)(v44 + 2);
  else
    v45 = 0;
  if (v44)
    v43 = (uint64_t)&v44[2 * *v44 + 2];
  while (v45 != (unint64_t *)v43)
  {
    v46 = *v45;
    if (!*v45)
      goto LABEL_76;
    if ((v46 & 8) != 0)
    {
      if ((*(_BYTE *)(v46 - 79) & 1) != 0)
        goto LABEL_75;
    }
    else
    {
      v47 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != v47)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000), v47, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v46 & 0xFFFFFFFFFFFFC000) + 8 * ((v46 >> 10) & 0xF) + 0x28) >> (v46 >> 4)) & 1) != 0)
      {
LABEL_75:
        if (!*((_QWORD *)v8 + 21))
          goto LABEL_76;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v46, 0, a4, a5, a6, a7, a8);
LABEL_76:
    ++v45;
  }
  v48 = 0;
  v49 = *(unsigned int **)(this + 176);
  if (v49)
    v50 = (unint64_t *)(v49 + 2);
  else
    v50 = 0;
  if (v49)
    v48 = (uint64_t)&v49[2 * *v49 + 2];
  while (2)
  {
    if (v50 != (unint64_t *)v48)
    {
      v51 = *v50;
      if (*v50)
      {
        if ((v51 & 8) != 0)
        {
          if ((*(_BYTE *)(v51 - 79) & 1) != 0)
            goto LABEL_88;
        }
        else
        {
          v52 = *((_DWORD *)v8 + 33);
          if (*(_DWORD *)(v51 & 0xFFFFFFFFFFFFC000 | 0x20) != v52)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v51 & 0xFFFFFFFFFFFFC000), v52, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v51 & 0xFFFFFFFFFFFFC000) + 8 * ((v51 >> 10) & 0xF) + 0x28) >> (v51 >> 4)) & 1) != 0)
          {
LABEL_88:
            if (!*((_QWORD *)v8 + 21))
              goto LABEL_89;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)v8, v51, 0, a4, a5, a6, a7, a8);
      }
LABEL_89:
      ++v50;
      continue;
    }
    break;
  }
  v53 = *(_QWORD *)(this + 136);
  if (v53)
  {
    v54 = *(unsigned __int16 *)(v53 + 58);
    if (!*(_WORD *)(v53 + 58))
      v54 = *(_DWORD *)(v53 + 212);
    v55 = (v53 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = *(unsigned __int16 *)(v53 + 60);
    if (!*(_WORD *)(v53 + 60))
      v56 = *(_DWORD *)(v53 + 216);
    for (i = v53 + v56; v55 < i; v55 += 16)
    {
      v125 = *(_QWORD *)(v55 + 8);
      if (v125)
      {
        if ((v125 & 8) != 0)
        {
          if ((*(_BYTE *)(v125 - 79) & 1) == 0)
            goto LABEL_263;
        }
        else
        {
          v126 = *((_DWORD *)v8 + 33);
          if (*(_DWORD *)(v125 & 0xFFFFFFFFFFFFC000 | 0x20) != v126)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v125 & 0xFFFFFFFFFFFFC000), v126, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v125 & 0xFFFFFFFFFFFFC000) + 8 * ((v125 >> 10) & 0xF) + 0x28) >> (v125 >> 4)) & 1) == 0)
          {
LABEL_263:
            JSC::SlotVisitor::appendSlow((uint64_t)v8, v125, 0, a4, a5, a6, a7, a8);
            continue;
          }
        }
        if (*((_QWORD *)v8 + 21))
          goto LABEL_263;
      }
    }
  }
  v58 = *(_QWORD *)(this + 120);
  if (!v58 || (*(_BYTE *)(v58 + 12) & 0xFE) != 4)
  {
    v59 = *(unsigned int **)(this + 128);
    if (v59)
    {
      v60 = *v59;
      if ((_DWORD)v60)
      {
        v61 = &v59[-34 * v60];
        while (1)
        {
          v127 = *((_QWORD *)v61 + 2);
          if (!v127)
            break;
          if ((v127 & 1) != 0)
            goto LABEL_267;
          if ((v127 & 8) != 0)
          {
            if ((*(_BYTE *)(v127 - 79) & 1) == 0 || *((_QWORD *)v8 + 21))
              goto LABEL_302;
          }
          else
          {
            v137 = *((_DWORD *)v8 + 33);
            if (*(_DWORD *)(v127 & 0xFFFFFFFFFFFFC000 | 0x20) != v137)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v127 & 0xFFFFFFFFFFFFC000), v137, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v127 & 0xFFFFFFFFFFFFC000) + 8 * ((v127 >> 10) & 0xF) + 0x28) >> (v127 >> 4)) & 1) == 0
              || *((_QWORD *)v8 + 21))
            {
LABEL_302:
              JSC::SlotVisitor::appendSlow((uint64_t)v8, v127, 0, a4, a5, a6, a7, a8);
            }
          }
LABEL_267:
          v128 = *((unsigned __int8 *)v61 + 123);
          if (v128 > 6)
          {
            __break(0xC471u);
            JUMPOUT(0x19814C8C4);
          }
          if (v128 == 4)
          {
            v129 = *((_QWORD *)v61 + 8);
            if (*(_DWORD *)(v129 + 12))
            {
              for (j = 0; j < *(unsigned int *)(v129 + 12); ++j)
              {
                v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v129 + 8 * j) + 32);
                if (v131)
                  v132 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v129 + 8 * j) + 32) & 1) == 0;
                else
                  v132 = 0;
                if (!v132)
                  continue;
                if ((v131 & 8) != 0)
                {
                  if ((*(_BYTE *)(v131 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
                    continue;
                }
                else
                {
                  v138 = *((_DWORD *)v8 + 33);
                  if (*(_DWORD *)(v131 & 0xFFFFFFFFFFFFC000 | 0x20) != v138)
                    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v131 & 0xFFFFFFFFFFFFC000), v138, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((*(_QWORD *)((v131 & 0xFFFFFFFFFFFFC000) + 8 * ((v131 >> 10) & 0xF) + 0x28) >> (v131 >> 4)) & 1) != 0
                    && !*((_QWORD *)v8 + 21))
                  {
                    continue;
                  }
                }
                JSC::SlotVisitor::appendSlow((uint64_t)v8, v131, 0, a4, a5, a6, a7, a8);
              }
            }
          }
          v61 += 34;
          if (v61 == v59)
            goto LABEL_115;
        }
        v133 = (unsigned __int8 *)(v61 + 32);
        if (__ldaxr((unsigned __int8 *)v61 + 128))
        {
          __clrex();
        }
        else if (!__stxr(1u, v133))
        {
          goto LABEL_280;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v61 + 32));
LABEL_280:
        v142 = v8;
        v135 = v61[24];
        if ((_DWORD)v135 == -1)
        {
          v139 = (JSC::CodeBlock *)std::__throw_bad_variant_access[abi:sn180100]();
          JSC::CodeBlock::visitChildren(v139, v140, v141);
          return;
        }
        v143 = &v142;
        ((void (*)(JSC::JSCell ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN3JSC17StructureStubInfo18visitAggregateImplINS8_11SlotVisitorEEEvRT_EUlNS_9monostateEE_JZNSA_ISB_EEvSD_EUlRNS6_6VectorINS8_11StructureIDELm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_ZNSA_ISB_EEvSD_EUlRNSG_INS_5tupleIJSH_NS8_19CacheableIdentifierEEEELm0ESI_Lm16ESJ_EEE_EEEEEJRNS0_6__implIJSE_SK_SQ_EEEEEEDcOSC_DpOT0____fmatrix[v135])(&v143, v61 + 20);
        v136 = __ldxr(v133);
        if (v136 != 1)
        {
          __clrex();
LABEL_285:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v61 + 128, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_267;
        }
        if (__stlxr(0, v133))
          goto LABEL_285;
        goto LABEL_267;
      }
    }
LABEL_115:
    v71 = *(_BYTE **)(this + 120);
    if (!v71)
      goto LABEL_118;
    v72 = v71[12];
    if ((v72 & 0xFE) != 4)
    {
LABEL_117:
      if ((v72 & 0xFE) != 4)
        goto LABEL_118;
      v94 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v71 + 72))(v71);
      v95 = 0;
      v96 = (unsigned int *)v94[7];
      if (v96)
        v97 = (unint64_t *)(v96 + 2);
      else
        v97 = 0;
      if (v96)
        v95 = (uint64_t)&v96[6 * *v96 + 2];
      while (1)
      {
        if (v97 == (unint64_t *)v95)
        {
          v104 = (unsigned int *)v94[8];
          if (v104)
            v105 = (unint64_t *)(v104 + 2);
          else
            v105 = 0;
          if (v104)
            v106 = (uint64_t)&v104[2 * *v104 + 2];
          else
            v106 = 0;
          while (2)
          {
            if (v105 == (unint64_t *)v106)
            {
              v109 = 0;
              v110 = (unsigned int *)v94[9];
              if (v110)
                v111 = v110 + 1;
              else
                v111 = 0;
              if (v110)
                v109 = (uint64_t)&v110[*v110 + 1];
              while (v111 != (_DWORD *)v109)
              {
                v112 = *v111 & 0xFFFFFFFE;
                if ((*v111 & 0xFFFFFFFE) != 0)
                {
                  v113 = *((_DWORD *)v8 + 33);
                  if (*(_DWORD *)((16 * v112) & 0xFFFFFC000 | 0x20) != v113)
                    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v112) & 0xFFFFFC000), v113, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((*(_QWORD *)(((16 * v112) & 0xFFFFFC000) + 8 * ((v112 >> 6) & 0xF) + 0x28) >> (v112 & 0x3E)) & 1) == 0
                    || *((_QWORD *)v8 + 21))
                  {
                    JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v112, 0, a4, a5, a6, a7, a8);
                  }
                }
                ++v111;
              }
              goto LABEL_118;
            }
            v107 = *v105;
            if (*v105)
            {
              if ((v107 & 8) != 0)
              {
                if ((*(_BYTE *)(v107 - 79) & 1) != 0)
                  goto LABEL_187;
              }
              else
              {
                v108 = *((_DWORD *)v8 + 33);
                if (*(_DWORD *)(v107 & 0xFFFFFFFFFFFFC000 | 0x20) != v108)
                  JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v107 & 0xFFFFFFFFFFFFC000), v108, (uint64_t)a3, a4, a5, a6, a7, a8);
                if (((*(_QWORD *)((v107 & 0xFFFFFFFFFFFFC000) + 8 * ((v107 >> 10) & 0xF) + 0x28) >> (v107 >> 4)) & 1) != 0)
                {
LABEL_187:
                  if (!*((_QWORD *)v8 + 21))
                    goto LABEL_188;
                }
              }
              JSC::SlotVisitor::appendSlow((uint64_t)v8, v107, 0, a4, a5, a6, a7, a8);
            }
LABEL_188:
            ++v105;
            continue;
          }
        }
        v98 = *v97;
        if (*v97)
        {
          if ((v98 & 8) != 0)
          {
            if ((*(_BYTE *)(v98 - 79) & 1) == 0 || *((_QWORD *)v8 + 21))
              goto LABEL_175;
          }
          else
          {
            v103 = v98 & 0xFFFFFFFFFFFFC000;
            if (*(_DWORD *)(v98 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)v8 + 33))
            {
              v123 = *v97;
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v98 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
              v98 = v123;
            }
            if (((*(_QWORD *)(v103 + 8 * ((v98 >> 10) & 0xF) + 40) >> (v98 >> 4)) & 1) == 0 || *((_QWORD *)v8 + 21))
LABEL_175:
              JSC::SlotVisitor::appendSlow((uint64_t)v8, v98, 0, a4, a5, a6, a7, a8);
          }
        }
        v99 = v97[1];
        if (!v99)
          goto LABEL_163;
        if ((v99 & 8) != 0)
        {
          if ((*(_BYTE *)(v99 - 79) & 1) != 0)
            goto LABEL_162;
        }
        else
        {
          v100 = v99 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v99 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)v8 + 33))
          {
            v121 = v97[1];
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v99 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
            v99 = v121;
          }
          if (((*(_QWORD *)(v100 + 8 * ((v99 >> 10) & 0xF) + 40) >> (v99 >> 4)) & 1) != 0)
          {
LABEL_162:
            if (!*((_QWORD *)v8 + 21))
              goto LABEL_163;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)v8, v99, 0, a4, a5, a6, a7, a8);
LABEL_163:
        v101 = v97[2];
        if (!v101)
          goto LABEL_169;
        if ((v101 & 8) != 0)
        {
          if ((*(_BYTE *)(v101 - 79) & 1) != 0)
            goto LABEL_168;
        }
        else
        {
          v102 = v101 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v101 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)v8 + 33))
          {
            v122 = v97[2];
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v101 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), (uint64_t)a3, a4, a5, a6, a7, a8);
            v101 = v122;
          }
          if (((*(_QWORD *)(v102 + 8 * ((v101 >> 10) & 0xF) + 40) >> (v101 >> 4)) & 1) != 0)
          {
LABEL_168:
            if (!*((_QWORD *)v8 + 21))
              goto LABEL_169;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)v8, v101, 0, a4, a5, a6, a7, a8);
LABEL_169:
        v97 += 3;
      }
    }
    v81 = *(JSC::RecordedStatuses **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v71 + 72))(v71) + 120);
    if (v81)
      JSC::RecordedStatuses::visitAggregate(v81, v8, v82, v83, v84, v85, v86, v87);
    v88 = *(_QWORD *)(this + 192);
    if (!v88)
      goto LABEL_139;
    if ((v88 & 8) != 0)
    {
      if ((*(_BYTE *)(v88 - 79) & 1) == 0)
        goto LABEL_239;
    }
    else
    {
      v89 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v88 & 0xFFFFFFFFFFFFC000 | 0x20) != v89)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v88 & 0xFFFFFFFFFFFFC000), v89, v82, v83, v84, v85, v86, v87);
      if (((*(_QWORD *)((v88 & 0xFFFFFFFFFFFFC000) + 8 * ((v88 >> 10) & 0xF) + 0x28) >> (v88 >> 4)) & 1) == 0)
        goto LABEL_239;
    }
    if (!*((_QWORD *)v8 + 21))
    {
LABEL_139:
      v90 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 120) + 72))(*(_QWORD *)(this + 120))
                      + 32);
      if (!v90 || (v91 = *(_QWORD *)(v90 + 8)) == 0)
      {
LABEL_148:
        v71 = *(_BYTE **)(this + 120);
        if (!v71)
          goto LABEL_118;
        v72 = v71[12];
        goto LABEL_117;
      }
      while (1)
      {
        v92 = *(_QWORD *)(v91 + 8);
        if (v92)
        {
          if ((v92 & 8) != 0)
          {
            if ((*(_BYTE *)(v92 - 79) & 1) == 0)
              goto LABEL_237;
          }
          else
          {
            v93 = *((_DWORD *)v8 + 33);
            if (*(_DWORD *)(v92 & 0xFFFFFFFFFFFFC000 | 0x20) != v93)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v92 & 0xFFFFFFFFFFFFC000), v93, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v92 & 0xFFFFFFFFFFFFC000) + 8 * ((v92 >> 10) & 0xF) + 0x28) >> (v92 >> 4)) & 1) == 0)
            {
LABEL_237:
              JSC::SlotVisitor::appendSlow((uint64_t)v8, v92, 0, a4, a5, a6, a7, a8);
              goto LABEL_147;
            }
          }
          if (*((_QWORD *)v8 + 21))
            goto LABEL_237;
        }
LABEL_147:
        v91 = *(_QWORD *)(v91 + 56);
        if (!v91)
          goto LABEL_148;
      }
    }
LABEL_239:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v88, 0, v83, v84, v85, v86, v87);
    goto LABEL_139;
  }
  v62 = (unsigned int *)(v58 + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 + 1, v62));
  v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 72))(v58);
  do
  {
    v65 = __ldaxr(v62);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, v62));
  if (!v66)
  {
    atomic_store(1u, (unsigned int *)(v58 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 32))(v58);
  }
  for (k = *(JSC::StructureStubInfo **)(v64 + 144); k; k = (JSC::StructureStubInfo *)*((_QWORD *)k + 17))
    JSC::StructureStubInfo::visitAggregate(k, v8, (uint64_t)a3, a4, a5, a6, a7, a8);
  v68 = *(_QWORD *)(this + 120);
  if (v68)
  {
    if ((*(_BYTE *)(v68 + 12) & 0xFE) == 4)
    {
      v69 = *(unsigned int **)(this + 128);
      if (v69)
      {
        v70 = *v69;
        if ((_DWORD)v70)
        {
          v124 = -34 * v70;
          do
          {
            JSC::StructureStubInfo::visitAggregate((JSC::StructureStubInfo *)&v69[v124], v8, (uint64_t)a3, a4, a5, a6, a7, a8);
            v124 += 34;
          }
          while (v124 * 4);
        }
      }
    }
    goto LABEL_115;
  }
LABEL_118:
  if ((this & 8) != 0)
  {
    v116 = *(unsigned __int8 *)(this - 76);
    v117 = 1 << v116;
    v118 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v116 >> 3) & 0x1C) + 264);
    while (1)
    {
      v119 = *v118;
      if ((*v118 & v117) != 0)
        break;
      v120 = __ldxr(v118);
      if (v120 == v119)
      {
        if (!__stxr(v119 | v117, v118))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v73 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
    v74 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v75 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v73 + 304) + (v74 & 0xFFFFFFF8) + 8) + 8 * (v74 & 7));
    if (!v75)
      v75 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v73 + 248), v74, (uint64_t)a3, a4, a5, a6, a7, a8);
    v76 = 1 << (this >> 4);
    v77 = (unint64_t *)v75 + ((this >> 10) & 0xF);
    while (1)
    {
      v78 = *v77;
      if ((*v77 & v76) != 0)
        break;
      v79 = __ldxr(v77);
      if (v79 == v78)
      {
        if (!__stxr(v78 | v76, v77))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  v80 = __ldxr(v11);
  if (v80 != 1)
  {
    __clrex();
    goto LABEL_130;
  }
  if (__stlxr(0, v11))
LABEL_130:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::CodeBlock::visitChildren(unint64_t this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v15;
  JSC::MetadataTable *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t i;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  JSC::StructureStubInfo *j;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t k;
  _BYTE *v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  _QWORD *v64;
  unsigned int *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  int *v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  _OWORD *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  _QWORD v86[2];
  uint64_t v87;
  char v88;
  _QWORD v89[2];
  _QWORD *v90;
  char v91;

  v86[0] = a2;
  v86[1] = this;
  v88 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v87 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19814CF30);
  }
  v89[0] = a2;
  v89[1] = this;
  v91 = 0;
  v90 = v86;
  *((_QWORD *)a2 + 11) = v89;
  v6 = (unsigned __int8 *)(this + 16);
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v89[0] + 88) = v90;
  if (__ldaxr(v6))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 16);
    goto LABEL_7;
  }
  if (__stxr(1u, v6))
    goto LABEL_6;
LABEL_7:
  *(_BYTE *)(this + 19) = 0;
  v15 = *(_BYTE **)(this + 120);
  if (v15)
  {
    if (v15[12] == 4)
    {
      v7 = *(void **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v15 + 88))(v15) + 384);
      if (v7)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    }
  }
  v16 = *(JSC::MetadataTable **)(this + 136);
  if (v16)
    v17 = JSC::MetadataTable::sizeInBytesForGC(v16, v7, v8, v9, v10, v11, v12, v13);
  else
    v17 = 0;
  v18 = *(_BYTE **)(this + 120);
  if (v18 && v18[13] != 1)
    v17 += (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 128))(v18);
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v17);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 8));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 64));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 56));
  v25 = *(_QWORD *)(this + 224);
  if (v25)
    JSC::DirectEvalCodeCache::visitAggregate((JSC::DirectEvalCodeCache *)(v25 + 16), a2, v19, v20, v21, v22, v23, v24);
  v26 = *(unsigned int *)(this + 172);
  if ((_DWORD)v26)
  {
    v27 = *(uint64_t **)(this + 160);
    do
    {
      v28 = *v27++;
      if ((v28 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      --v26;
    }
    while (v26);
  }
  v29 = 0;
  v30 = *(unsigned int **)(this + 184);
  if (v30)
    v31 = (uint64_t *)(v30 + 2);
  else
    v31 = 0;
  if (v30)
    v29 = (uint64_t)&v30[2 * *v30 + 2];
  while (v31 != (uint64_t *)v29)
  {
    v32 = *v31++;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v32);
  }
  v33 = 0;
  v34 = *(unsigned int **)(this + 176);
  if (v34)
    v35 = (uint64_t *)(v34 + 2);
  else
    v35 = 0;
  if (v34)
    v33 = (uint64_t)&v34[2 * *v34 + 2];
  while (v35 != (uint64_t *)v33)
  {
    v36 = *v35++;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v36);
  }
  v37 = *(_QWORD *)(this + 136);
  if (v37)
  {
    v38 = *(unsigned __int16 *)(v37 + 58);
    if (!*(_WORD *)(v37 + 58))
      v38 = *(_DWORD *)(v37 + 212);
    v39 = (v37 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(unsigned __int16 *)(v37 + 60);
    if (!*(_WORD *)(v37 + 60))
      v40 = *(_DWORD *)(v37 + 216);
    for (i = v37 + v40; v39 < i; v39 += 16)
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v39 + 8));
  }
  v42 = *(_QWORD *)(this + 120);
  if (!v42 || (*(_BYTE *)(v42 + 12) & 0xFE) != 4)
  {
    v53 = *(unsigned int **)(this + 128);
    if (v53)
    {
      v54 = *v53;
      if ((_DWORD)v54)
      {
        v55 = -34 * v54;
        do
        {
          JSC::StructureStubInfo::visitAggregate((JSC::StructureStubInfo *)&v53[v55], a2);
          v55 += 34;
        }
        while (v55 * 4);
      }
    }
    goto LABEL_64;
  }
  v43 = (unsigned int *)(v42 + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 + 1, v43));
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 72))(v42);
  do
  {
    v46 = __ldaxr(v43);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v43));
  if (!v47)
  {
    atomic_store(1u, (unsigned int *)(v42 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  }
  for (j = *(JSC::StructureStubInfo **)(v45 + 144); j; j = (JSC::StructureStubInfo *)*((_QWORD *)j + 17))
    JSC::StructureStubInfo::visitAggregate(j, a2);
  v49 = *(_QWORD *)(this + 120);
  if (v49)
  {
    if ((*(_BYTE *)(v49 + 12) & 0xFE) == 4)
    {
      v50 = *(unsigned int **)(this + 128);
      if (v50)
      {
        v51 = *v50;
        if ((_DWORD)v51)
        {
          v52 = -34 * v51;
          do
          {
            JSC::StructureStubInfo::visitAggregate((JSC::StructureStubInfo *)&v50[v52], a2);
            v52 += 34;
          }
          while (v52 * 4);
        }
      }
    }
LABEL_64:
    v56 = *(_BYTE **)(this + 120);
    if (v56)
    {
      if ((v56[12] & 0xFE) == 4)
      {
        v57 = *(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v56 + 72))(v56) + 120);
        if (v57)
          JSC::RecordedStatuses::visitAggregate(v57, a2);
        (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(this + 192));
        v58 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 120) + 72))(*(_QWORD *)(this + 120))
                        + 32);
        if (v58)
        {
          for (k = *(_QWORD *)(v58 + 8); k; k = *(_QWORD *)(k + 56))
            (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(k + 8));
        }
      }
      v60 = *(_BYTE **)(this + 120);
      if (v60 && (v60[12] & 0xFE) == 4)
      {
        v61 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v60 + 72))(v60);
        v62 = 0;
        v63 = (unsigned int *)v61[7];
        if (v63)
          v64 = v63 + 2;
        else
          v64 = 0;
        if (v63)
          v62 = (uint64_t)&v63[6 * *v63 + 2];
        while (v64 != (_QWORD *)v62)
        {
          if (*v64)
            (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
          (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v64[1]);
          (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v64[2]);
          v64 += 3;
        }
        v65 = (unsigned int *)v61[8];
        if (v65)
          v66 = (uint64_t *)(v65 + 2);
        else
          v66 = 0;
        if (v65)
          v67 = (uint64_t)&v65[2 * *v65 + 2];
        else
          v67 = 0;
        while (v66 != (uint64_t *)v67)
        {
          v68 = *v66++;
          (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v68);
        }
        v69 = 0;
        v70 = (unsigned int *)v61[9];
        if (v70)
          v71 = (int *)(v70 + 1);
        else
          v71 = 0;
        if (v70)
          v69 = (uint64_t)&v70[*v70 + 1];
        while (v71 != (int *)v69)
        {
          v72 = *v71++;
          (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, 16 * (v72 & 0xFFFFFFFE));
        }
      }
    }
  }
  if ((this & 8) != 0)
  {
    v80 = *(unsigned __int8 *)(this - 76);
    v81 = 1 << v80;
    v82 = (unsigned int *)(*(_QWORD *)(this - 72) + ((v80 >> 3) & 0x1C) + 264);
    while (1)
    {
      v83 = *v82;
      if ((*v82 & v81) != 0)
        break;
      v84 = __ldxr(v82);
      if (v84 == v83)
      {
        if (!__stxr(v83 | v81, v82))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v73 = *(_QWORD *)((this & 0xFFFFFFFFFFFFC000) + 0x10);
    v74 = *(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12);
    v75 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v73 + 304) + (v74 & 0xFFFFFFF8) + 8) + 8 * (v74 & 7));
    if (!v75)
      v75 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v73 + 248), v74, v19, v20, v21, v22, v23, v24);
    v76 = 1 << (this >> 4);
    v77 = (unint64_t *)v75 + ((this >> 10) & 0xF);
    while (1)
    {
      v78 = *v77;
      if ((*v77 & v76) != 0)
        break;
      v79 = __ldxr(v77);
      if (v79 == v78)
      {
        if (!__stxr(v78 | v76, v77))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  v85 = __ldxr(v6);
  if (v85 == 1)
  {
    if (!__stlxr(0, v6))
      goto LABEL_119;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(this + 16), 0, v19, v20, v21, v22, v23, v24);
LABEL_119:
  *(_QWORD *)(v86[0] + 88) = v87;
}

void JSC::CodeBlock::inferredName(JSC::CodeBlock *this)
{
  __asm { BR              X10 }
}

uint64_t sub_19814CF88()
{
  uint64_t *v0;
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x19);
  *(_DWORD *)result = 1;
  *v0 = result;
  *(_OWORD *)(result + 8) = xmmword_199152F90;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

uint64_t JSC::CodeBlock::hash(JSC::CodeBlock *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  result = *((unsigned int *)this + 13);
  if (!(_DWORD)result)
  {
    v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v3)
      v3 = WTF::Thread::initializeCurrentTLS(0);
    if ((*(_BYTE *)(v3 + 5) & 8) != 0)
    {
      result = 133;
      __break(0xC471u);
    }
    else
    {
      JSC::CodeBlockHash::CodeBlockHash((int *)&v4, (uint64_t *)(*((_QWORD *)this + 8) + 40), *(_DWORD *)(*((_QWORD *)this + 7) + 20) >> 31);
      result = v4;
      *((_DWORD *)this + 13) = v4;
    }
  }
  return result;
}

void JSC::CodeBlock::sourceCodeForTools(JSC::CodeBlock *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;

  v3 = *((_QWORD *)this + 8);
  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) != 0x2000)
  {
    v23 = *(_QWORD *)(v3 + 40);
    if (!v23)
    {
      v29 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = 0;
      *a2 = (WTF *)v29;
      *(_BYTE *)(v29 + 16) = 0;
      return;
    }
    v24 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
    v26 = *(unsigned int *)(v3 + 48);
    if (v25 <= v26)
    {
      v27 = 0x100000000;
      v24 = (char *)&str_73;
    }
    else
    {
      LODWORD(v27) = *(_DWORD *)(v3 + 52) - v26;
      if ((int)v25 - (int)v26 > v27 || (LODWORD(v27) = v25 - v26, (_DWORD)v26))
      {
        v27 = v27;
        v28 = v25 - v26;
        if ((v25 & 0xFF00000000) != 0)
        {
          if (v28 < v27)
            goto LABEL_30;
          v24 += v26;
          v27 = v27 | 0x100000000;
        }
        else
        {
          if (v28 < v27)
            goto LABEL_30;
          v24 += 2 * v26;
        }
      }
      else
      {
        v27 = v25;
      }
    }
    v30 = v24;
    v31 = v27;
    goto LABEL_28;
  }
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(_QWORD *)(v3 + 72);
  if (v5)
  {
    v7 = *(_DWORD *)(v5 + 48);
    v8 = *(_DWORD *)(v5 + 20);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 88);
    v7 = *(_DWORD *)(v6 + 16) & 0x7FFFFFFF;
    v8 = *(_DWORD *)(v6 + 36) & 0x7FFFFFFF;
  }
  v11 = v3 + 48;
  v9 = *(_DWORD *)(v3 + 48);
  v10 = *(_DWORD *)(v11 + 4);
  v12 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (v13 <= v7)
  {
    v21 = 0x100000000;
    v12 = (char *)&str_3_16;
    goto LABEL_25;
  }
  v20 = v8 + v10 - (v7 + v9);
  if (v13 - v7 <= v20)
  {
    v20 = v13 - v7;
    if (!v7)
    {
      v21 = v13;
      goto LABEL_25;
    }
  }
  v21 = v20;
  v22 = v13 - (unint64_t)v7;
  if ((v13 & 0xFF00000000) != 0)
  {
    if (v22 >= v21)
    {
      v12 += v7;
      v21 |= 0x100000000uLL;
LABEL_25:
      v30 = v12;
      v31 = v21;
LABEL_28:
      WTF::StringView::utf8((uint64_t)&v30, 0, v14, v15, v16, v17, v18, a2, v19);
      return;
    }
  }
  else if (v22 >= v21)
  {
    v12 += 2 * v7;
    goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void JSC::CodeBlock::hashAsStringIfPossible(JSC::CodeBlock *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int16 v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  _BYTE *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)this + 13);
  if (v3)
    goto LABEL_2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23 = *(_QWORD *)(StatusReg + 736);
  if (!v23)
    v23 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v23 + 5) & 8) == 0)
  {
    v3 = *((_DWORD *)this + 13);
    if (!v3)
    {
      v24 = *(_QWORD *)(StatusReg + 736);
      if (!v24)
        v24 = WTF::Thread::initializeCurrentTLS(0);
      if ((*(_BYTE *)(v24 + 5) & 8) != 0)
      {
        __break(0xC471u);
        goto LABEL_22;
      }
      JSC::CodeBlockHash::CodeBlockHash((int *)&v28, (uint64_t *)(*((_QWORD *)this + 8) + 40), *(_DWORD *)(*((_QWORD *)this + 7) + 20) >> 31);
      v3 = v28;
      *((_DWORD *)this + 13) = (_DWORD)v28;
    }
LABEL_2:
    v28 = off_1E3572250;
    v29 = v31;
    v30 = xmmword_199122F80;
    v4 = WTF::integerToSixCharacterHashString::table[v3 / 0x3E
                                                                                  - 62
                                                                                  * (((138547333 * (unint64_t)(v3 / 0x3E)) >> 32) >> 1)];
    v5 = WTF::integerToSixCharacterHashString::table[(v3 / 0xF04
                                                                                                 - 62
                                                                                                 * ((69273667 * (unint64_t)(v3 / 0xF04)) >> 32))];
    v6 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v3 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v3 / 0x3A2F8)) >> 16) >> 4))];
    v7 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v3 / 0xE17810 - 62 * ((1058 * (v3 / 0xE17810)) >> 16))];
    v31[0] = 0;
    v8 = WTF::integerToSixCharacterHashString::table[v3 / 0x369B13E0uLL];
    v27 = (((unint64_t)WTF::integerToSixCharacterHashString::table[v3 % 0x3E] << 40) | (v4 << 32)) >> 32;
    v26 = (v6 << 16) | (v5 << 24) | (v7 << 8) | v8;
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%.*s", 6, (const char *)&v26);
    v28[5]((WTF::StringPrintStream *)&v28);
    v28[5]((WTF::StringPrintStream *)&v28);
    v17 = v29;
    v16 = v30;
    *a2 = 0;
    if (!v17)
    {
      v20 = 0;
      goto LABEL_16;
    }
    if (v16 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x19814D538);
    }
    if (v16 != -17)
    {
      v18 = WTF::fastMalloc((WTF *)(v16 + 17));
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = v16;
      *a2 = v18;
      v19 = v18 + 16;
      memcpy((void *)(v18 + 16), v17, v16);
      *(_BYTE *)(v19 + v16) = 0;
      v20 = (unint64_t)v29;
      if (v29 == v31)
        return;
LABEL_16:
      WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x19814D52CLL);
  }
  v25 = WTF::fastMalloc((WTF *)0x1A);
  *(_DWORD *)v25 = 1;
  *a2 = v25;
  *(_QWORD *)(v25 + 8) = 9;
  strcpy((char *)(v25 + 16), "<no-hash>");
}

void JSC::CodeBlock::dumpAssumingJITType(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_19814D590()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  unint64_t v3;
  WTF::PrintStream *v4;
  WTF::PrintStream *v5;
  const char *v6;
  _DWORD *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  const void *v17;
  WTF::PrintStream *v18;
  const void *v19;
  unint64_t v20;
  WTF::PrintStream *v21;
  const char *v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  const char *v28;
  int v29;
  WTF::PrintStream *v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  uint64_t v33;
  __int16 v34;
  WTF::PrintStream *v35;
  const char *v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v38;
  WTF::PrintStream *v39;
  WTF::PrintStream *v40;
  uint64_t v41;
  WTF::PrintStream *v42;
  uint64_t v43;
  WTF::PrintStream *v44;
  WTF::PrintStream *v45;
  uint64_t v47[12];

  v3 = WTF::fastMalloc((WTF *)0x19);
  *(_DWORD *)v3 = 1;
  v47[1] = v3;
  *(_OWORD *)(v3 + 8) = xmmword_199152F90;
  *(_BYTE *)(v3 + 24) = 0;
  JSC::CodeBlock::hashAsStringIfPossible((JSC::CodeBlock *)v1, v47);
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  v5 = v4;
  v6 = (const char *)(v3 + 16);
  if (!v3)
    v6 = 0;
  WTF::PrintStream::printf(v4, "%s", v6);
  WTF::PrintStream::printf(v5, "%s", "#");
  v7 = (_DWORD *)v47[0];
  v8 = (const char *)(v47[0] + 16);
  if (!v47[0])
    v8 = 0;
  WTF::PrintStream::printf(v5, "%s", v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  if (v7)
  {
    if (*v7 == 1)
    {
      WTF::fastFree((unint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
      if (!v3)
        goto LABEL_11;
      goto LABEL_9;
    }
    --*v7;
  }
  if (!v3)
    goto LABEL_11;
LABEL_9:
  if (*(_DWORD *)v3 == 1)
    WTF::fastFree(v3, v9, v10, v11, v12, v13, v14, v15);
  else
    --*(_DWORD *)v3;
LABEL_11:
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  WTF::PrintStream::printf(v16, "%s", ":[");
  WTF::PrintStream::printf(v16, "%p", (const void *)v1);
  WTF::PrintStream::printf(v16, "%s", "->");
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  v17 = *(const void **)(v1 + 192);
  if (v17)
  {
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v18, "%p", v17);
    WTF::PrintStream::printf(v18, "%s", "->");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  }
  v19 = *(const void **)(v1 + 64);
  v20 = ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v1 + 56) + 28) >> 12) & 3;
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  WTF::PrintStream::printf(v21, "%p", v19);
  WTF::PrintStream::printf(v21, "%s", ", ");
  WTF::printInternal((uint64_t)v21, v2);
  v22 = off_1E3580DB0[v20];
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v21 + 32))(v21);
  WTF::PrintStream::printf(v23, "%s", v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v21 + 40))(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  v24 = *(_QWORD *)(v1 + 56);
  if ((*(_WORD *)(v24 + 28) & 0x3000) == 0x2000)
  {
    v25 = *(_QWORD *)(v24 + 20);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    v28 = "Construct";
    if ((int)v25 >= 0)
      v28 = "Call";
    WTF::PrintStream::printf(v27, "%s", v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    v24 = *(_QWORD *)(v1 + 56);
  }
  v29 = *(_DWORD *)(*(_QWORD *)(v24 + 80) + 12);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  WTF::PrintStream::printf(v30, "%s", ", ");
  WTF::PrintStream::printf(v30, "%u", v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  v31 = *(_QWORD *)(v1 + 120);
  if (v31 && *(_BYTE *)(v31 + 12) == 3 && *(_BYTE *)(v1 + 17))
  {
    v32 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v32, "%s", " (ShouldAlwaysBeInlined)");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  }
  v33 = *(_QWORD *)(v1 + 64);
  v34 = *(_WORD *)(v33 + 70);
  if ((v34 & 2) != 0)
  {
    v35 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v35, "%s", " (NeverInline)");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    v33 = *(_QWORD *)(v1 + 64);
    v34 = *(_WORD *)(v33 + 70);
  }
  if ((v34 & 4) != 0)
  {
    v36 = " (NeverOptimize)";
  }
  else
  {
    if ((v34 & 8) == 0)
      goto LABEL_28;
    v36 = " (NeverFTLOptimize)";
  }
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  WTF::PrintStream::printf(v37, "%s", v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  v33 = *(_QWORD *)(v1 + 64);
LABEL_28:
  if (*(_BYTE *)(v33 + 65))
  {
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v38, "%s", " (DidTryToEnterInLoop)");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
    v33 = *(_QWORD *)(v1 + 64);
  }
  if ((*(_BYTE *)(v33 + 68) & 1) != 0)
  {
    v39 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v39, "%s", " (StrictMode)");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  }
  if ((*(_BYTE *)(v1 + 18) & 4) != 0)
  {
    v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
    WTF::PrintStream::printf(v40, "%s", " (JITFail)");
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  }
  v41 = *(_QWORD *)(v1 + 120);
  if (v41)
  {
    if (*(_BYTE *)(v41 + 12) == 3)
    {
      if ((*(_BYTE *)(v1 + 18) & 8) == 0
        || (v42 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0),
            WTF::PrintStream::printf(v42, "%s", " (FTLFail)"),
            (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0),
            (v43 = *(_QWORD *)(v1 + 120)) != 0)
        && *(_BYTE *)(v43 + 12) == 3)
      {
        if ((*(_BYTE *)(v1 + 18) & 0x10) != 0)
        {
          v44 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
          WTF::PrintStream::printf(v44, "%s", " (HadFTLReplacement)");
          (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
        }
      }
    }
  }
  v45 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  WTF::PrintStream::printf(v45, "%s", "]");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
}

void JSC::CodeBlock::dump(uint64_t this, WTF::PrintStream *a2)
{
  JSC::CodeBlock::dumpAssumingJITType(this);
}

void JSC::CodeBlock::dumpSimpleName(JSC::CodeBlock *this, WTF::PrintStream *a2)
{
  __asm { BR              X10 }
}

void sub_19814DC48()
{
  uint64_t v0;
  JSC::CodeBlock *v1;
  unint64_t v2;
  WTF::PrintStream *v3;
  WTF::PrintStream *v4;
  const char *v5;
  _DWORD *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = WTF::fastMalloc((WTF *)0x19);
  *(_DWORD *)v2 = 1;
  *(_OWORD *)(v2 + 8) = xmmword_199152F90;
  *(_BYTE *)(v2 + 24) = 0;
  JSC::CodeBlock::hashAsStringIfPossible(v1, &v15);
  v3 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
  v4 = v3;
  v5 = (const char *)(v2 + 16);
  if (!v2)
    v5 = 0;
  WTF::PrintStream::printf(v3, "%s", v5);
  WTF::PrintStream::printf(v4, "%s", "#");
  v6 = (_DWORD *)v15;
  v7 = (const char *)(v15 + 16);
  if (!v15)
    v7 = 0;
  WTF::PrintStream::printf(v4, "%s", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 40))(v0);
  if (v6)
  {
    if (*v6 == 1)
    {
      WTF::fastFree((unint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
      if (!v2)
        return;
      goto LABEL_9;
    }
    --*v6;
  }
  if (!v2)
    return;
LABEL_9:
  if (*(_DWORD *)v2 == 1)
    WTF::fastFree(v2, v8, v9, v10, v11, v12, v13, v14);
  else
    --*(_DWORD *)v2;
}

uint64_t JSC::CodeBlock::dumpSource(JSC::CodeBlock *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v4 = *((_QWORD *)this + 8);
  v5 = *(_QWORD *)(v4 + 40);
  if (*(_BYTE *)(v4 + 5) == 12)
  {
    v6 = *(_QWORD *)(v4 + 72);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 20);
      v8 = *(_DWORD *)(v6 + 52);
    }
    else
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 36) & 0x7FFFFFFF;
      v8 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 40) & 0x7FFFFFFF;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    if (v9 > v7)
    {
      v10 = v8 - v7 + 1;
      if (v9 - v7 > v10 || (v10 = v9 - v7, v7))
      {
        v11 = v10;
        v12 = v9 - (unint64_t)v7;
        if ((v9 & 0xFF00000000) != 0)
        {
          if (v12 >= v11)
            goto LABEL_23;
          goto LABEL_34;
        }
        if (v12 < v11)
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
    }
LABEL_23:
    __asm { BR              X10 }
  }
  if (v5)
  {
    v13 = *(unsigned int *)(v4 + 48);
    v14 = *(_DWORD *)(v4 + 52);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    if (v16 <= v13)
    {
      v19 = 0x100000000;
      v17 = (char *)&str_3_16;
      goto LABEL_25;
    }
    v17 = (char *)v15;
    v18 = v14 - v13;
    if ((int)v16 - (int)v13 <= (v14 - v13))
    {
      v18 = v16 - v13;
      if (!(_DWORD)v13)
      {
        v19 = v16;
        goto LABEL_25;
      }
    }
    v19 = v18;
    v20 = v16 - v13;
    if ((v16 & 0xFF00000000) != 0)
    {
      if (v20 >= v19)
      {
        v17 = (char *)(v15 + v13);
        v19 |= 0x100000000uLL;
        goto LABEL_25;
      }
    }
    else if (v20 >= v19)
    {
      v17 = (char *)(v15 + 2 * v13);
      goto LABEL_25;
    }
    goto LABEL_34;
  }
LABEL_35:
  v17 = 0;
  v19 = 0x100000000;
LABEL_25:
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if (v17)
  {
    if ((v19 & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v17, v19, (uint64_t)&v31, v27);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v17, v19, 0, v21, v22, v23, v24, v25, (uint64_t)&v31);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v31 = v28;
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v26, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v30, &v31);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::CodeBlock::dumpBytecode(JSC::CodeBlock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  v9 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  JSC::CodeBlock::dumpBytecode(this, (WTF::PrintStream *)WTF::s_file, a3, a4, a5, a6, a7, a8);
}

void JSC::CodeBlock::dumpBytecode(JSC::CodeBlock *this, WTF::PrintStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  uint64_t v40[2];
  uint64_t *v41;

  v41 = 0;
  v10 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
LABEL_5:
  JSC::CodeBlock::getICStatusMap(this, (uint64_t)a2, (uint64_t *)&v41, a4, a5, a6, a7, a8);
  v18 = __ldxr(v10);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v12, v13, v14, v15, v16, v17);
  JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 7) + 80), v40);
  JSC::CodeBlockBytecodeDumper<JSC::CodeBlock>::dumpGraph((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 7) + 80), v40, a2);
  WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v40, v19, v20, v21, v22, v23, v24, v25);
  v33 = (uint64_t)v41;
  if (v41)
  {
    v34 = *((unsigned int *)v41 - 1);
    if ((_DWORD)v34)
    {
      v35 = v41;
      do
      {
        v37 = *v35;
        v35 += 8;
        v36 = v37;
        v38 = v37 & 0xFFFFFFFF8;
        v39 = (v37 & 0xFFFFFFFF8) != 0;
        if ((v37 & 1) != 0 && (v39 & (v36 >> 1) & 1) == 0)
        {
          if (v38)
            WTF::fastFree(v38, v26, v27, v28, v29, v30, v31, v32);
        }
        --v34;
      }
      while (v34);
    }
    WTF::fastFree(v33 - 16, v26, v27, v28, v29, v30, v31, v32);
  }
}

unint64_t JSC::CodeBlock::CodeBlock(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int *v22;
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  unint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char **v44;
  char *v45;

  v7 = result;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v8;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a5 + 8);
  *(_WORD *)(result + 16) = 256;
  *(_BYTE *)(result + 18) = *(_BYTE *)(result + 18) & 0xC0 | 3;
  *(_BYTE *)(result + 19) = 0;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a5 + 20);
  v9 = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0x80000000 | v9 & 0x7FFFFFFF;
  v10 = *(_DWORD *)(a5 + 32) & 0x80000000 | v9 & 0x7FFFFFFF;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 32) = v10;
  *(_DWORD *)(result + 44) = *(_DWORD *)(a5 + 44);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a5 + 48);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a5 + 52);
  v11 = *(_QWORD *)(a5 + 72);
  v12 = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(result + 56) = v12;
  if (v12 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(result + 7))
    result = JSC::Heap::writeBarrierSlowPath(v11 + 192, result);
  v14 = *(_QWORD *)(a5 + 64);
  v13 = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(v7 + 64) = v14;
  if (v14 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v7 + 7))
    result = JSC::Heap::writeBarrierSlowPath(v13 + 192, v7);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(a5 + 72);
  *(_QWORD *)(v7 + 88) = v7 + 88;
  *(_QWORD *)(v7 + 96) = v7 + 88;
  *(_DWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 128) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  v15 = *(_QWORD *)(a5 + 136);
  if (v15)
  {
    v16 = (unsigned int *)(v15 - 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(v7 + 144) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 136) = v15;
  v18 = *(unsigned int *)(a5 + 172);
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 168) = 0;
  *(_DWORD *)(v7 + 172) = v18;
  if ((_DWORD)v18)
  {
    if (v18 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(v7 + 168) = v18;
    *(_QWORD *)(v7 + 160) = v19;
    memcpy(v19, *(const void **)(a5 + 160), 8 * *(unsigned int *)(a5 + 172));
  }
  v20 = *(unsigned int **)(a5 + 176);
  if (v20)
  {
    v36 = *v20;
    v35 = v20 + 2;
    v41 = 8 * v36;
    v21 = (_DWORD *)WTF::fastMalloc((WTF *)(v41 + 8));
    *v21 = v36;
    if (v36)
    {
      v37 = 0;
      do
      {
        *(_QWORD *)&v21[v37 / 4 + 2] = *(_QWORD *)&v35[v37 / 4];
        v37 += 8;
      }
      while (v41 != v37);
    }
  }
  else
  {
    v21 = 0;
  }
  *(_QWORD *)(v7 + 176) = v21;
  v22 = *(unsigned int **)(a5 + 184);
  if (v22)
  {
    v39 = *v22;
    v38 = v22 + 2;
    v42 = 8 * v39;
    v23 = (_DWORD *)WTF::fastMalloc((WTF *)(v42 + 8));
    *v23 = v39;
    if (v39)
    {
      v40 = 0;
      do
      {
        *(_QWORD *)&v23[v40 / 4 + 2] = *(_QWORD *)&v38[v40 / 4];
        v40 += 8;
      }
      while (v42 != v40);
    }
  }
  else
  {
    v23 = 0;
  }
  *(_QWORD *)(v7 + 184) = v23;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 200) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  v31 = mach_approximate_time();
  v33 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v33 != -1)
  {
    v45 = &v43;
    v44 = &v45;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v32) = dword_1ECF4400C;
  *(double *)(v7 + 216) = (double)(v31 * WTF::machTimebaseInfo(void)::timebaseInfo)
                        / ((double)v32
                         * 1000000000.0);
  *(_QWORD *)(v7 + 224) = 0;
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(a5 + 28);
  v34 = *(_QWORD *)(v7 + 152);
  *(_QWORD *)(v7 + 152) = 0;
  if (v34)
    WTF::fastFree(v34, v24, v25, v26, v27, v28, v29, v30);
  JSC::CodeBlockSet::add(*(JSC::CodeBlockSet **)(a2 + 720), (JSC::CodeBlock *)v7, v25, v26, v27, v28, v29, v30);
  return v7;
}

uint64_t JSC::CodeBlock::optimizeAfterWarmUp(uint64_t this, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  int v5;
  double v6;
  _DWORD *v7;
  _DWORD *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  int v31;
  unsigned int v32;
  float v33;
  double v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  double v43;
  _DWORD *v44;
  unint64_t v45;
  double v46;
  float *v47;
  int v48;
  int v49;
  double v50;
  double v51;

  v2 = this;
  if (BYTE1(qword_1ECF4C332))
    this = WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(this, ": Optimizing after warm-up.", "\n");
  v3 = (double)SDWORD2(xmmword_1ECF4C4E4);
  LODWORD(a2) = *(_DWORD *)(v2 + 44);
  v51 = (double)*(unint64_t *)&a2;
  v4 = sqrt((double)*(unint64_t *)&a2 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*(_QWORD *)(v2 + 56) + 28) & 0x3000) == 0x1000)
  {
    v39 = DWORD1(xmmword_1ECF4C514);
    v4 = v4 * (double)SDWORD1(xmmword_1ECF4C514);
    v50 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
  }
  else
  {
    v50 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
    v39 = 1;
  }
  v49 = v39;
  this = WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v2, ": bytecode cost is ", &v51, ", scaling execution counter by ", &v50, " * ", &v49, "\n");
  v4 = v50;
LABEL_5:
  v5 = 1;
  v6 = v4 * v3 * (double)(1 << *(_WORD *)(v2 + 106));
  if (v6 >= 1.0)
  {
    if (v6 > 2147483650.0)
    {
      v7 = (_DWORD *)(v2 + 200);
      *(_DWORD *)(v2 + 204) = 0;
      v8 = (_DWORD *)(v2 + 208);
    }
    else
    {
      v5 = (int)v6;
      *(_QWORD *)(v2 + 200) = 0;
      v7 = (_DWORD *)(v2 + 200);
      *(_DWORD *)(v2 + 208) = (int)v6;
      v8 = (_DWORD *)(v2 + 208);
      if ((int)v6 != 0x7FFFFFFF)
      {
        v9 = (float *)(v2 + 204);
        goto LABEL_9;
      }
    }
    *v8 = 0x7FFFFFFF;
    *v7 = 0x80000000;
    return this;
  }
  *(_QWORD *)(v2 + 200) = 0;
  v7 = (_DWORD *)(v2 + 200);
  v9 = (float *)(v2 + 204);
  *(_DWORD *)(v2 + 208) = 1;
LABEL_9:
  v10 = *(_QWORD *)(v2 + 192);
  if (!v10)
    v10 = v2;
  v11 = *(_QWORD *)(v10 + 120);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v11 + 12);
    if ((v12 & 0xFE) != 2 && v12 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19814EAA8);
    }
  }
  v14 = *(_QWORD *)(v10 + 72);
  if (!v14)
    goto LABEL_23;
  v15 = *(double **)(v14 + 64752);
  v16 = *v15;
  if (*v15 == 0.0)
    goto LABEL_23;
  v17 = v15[1] / v16;
  if (v16 < 2.0)
  {
    v18 = 0.0;
  }
  else
  {
    v18 = v15[2] / v16 - v17 * v17;
    if (v18 <= 0.0)
      v18 = 0.0;
  }
  v19 = v17 + sqrt(v18);
  if (v19 < 0.0 || (HIDWORD(v45) = 1083129856, v19 > 1000.0))
  {
LABEL_23:
    v20 = 0;
  }
  else
  {
    LODWORD(v45) = *(_DWORD *)(v10 + 44);
    v46 = v19 * (double)v45;
    v20 = (unint64_t)v46;
    if (v46 >= 1.84467441e19)
      v20 = 0;
  }
  if (!qword_1ECF4C1F0)
    goto LABEL_71;
  v21 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v20;
  v22 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v23 = (double)v22 * 0.25;
  v24 = v22 - (unint64_t)v23;
  v25 = v22 - 0x40000;
  if ((unint64_t)v23 >> 18)
    v25 = v24;
  if (v21 >= v25)
    v21 = v25;
  v26 = v25 - v21;
  v27 = v25 != v21;
  v28 = (double)v25 / (double)v26;
  v29 = v27 && v28 >= 1.0 ? (double)v25 / (double)v26 : 1.0;
  if (v28 < 1.0 && v27)
  {
    v29 = (double)v25 / (double)v26;
    if (v28 < 1.0)
LABEL_71:
      v29 = 1.0;
  }
  v30 = v29 * (double)v5;
  if (v30 <= 0.0)
  {
    *v7 = 0;
    *v9 = 0.0;
    return this;
  }
  v31 = HIDWORD(xmmword_1ECF4C514);
  v32 = *(_DWORD *)(v2 + 44);
  if ((int)v32 < SDWORD1(xmmword_1ECF4C524))
    goto LABEL_36;
  v51 = (double)v32;
  v34 = sqrt((double)v32 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*(_QWORD *)(v2 + 56) + 28) & 0x3000) == 0x1000)
  {
    v42 = DWORD1(xmmword_1ECF4C514);
    v34 = v34 * (double)SDWORD1(xmmword_1ECF4C514);
    v50 = v34;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_43;
    v48 = HIDWORD(xmmword_1ECF4C514);
    v43 = v30;
    v47 = v9;
    v44 = v7;
LABEL_62:
    v49 = v42;
    this = WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v2, ": bytecode cost is ", &v51, ", scaling execution counter by ", &v50, " * ", &v49, "\n");
    v34 = v50;
    v7 = v44;
    v9 = v47;
    v30 = v43;
    v31 = v48;
    goto LABEL_43;
  }
  v50 = v34;
  if (BYTE1(qword_1ECF4C332))
  {
    v48 = HIDWORD(xmmword_1ECF4C514);
    v43 = v30;
    v47 = v9;
    v44 = v7;
    v42 = 1;
    goto LABEL_62;
  }
LABEL_43:
  v35 = sqrt(v34);
  v36 = (double)v31;
  if (v35 < 1.0)
    v35 = 1.0;
  v37 = v35 * v36;
  v38 = (COERCE_UNSIGNED_INT64(v35 * v36) >> 52) & 0x7FF;
  if ((v38 - 1023) <= 0x53)
  {
    v40 = *(_QWORD *)&v37 >> (51 - (COERCE_UNSIGNED_INT64(v35 * v36) >> 52));
    if (v38 > 0x433)
      LODWORD(v40) = *(_QWORD *)&v37 << ((COERCE_UNSIGNED_INT64(v35 * v36) >> 52) - 51);
    if (v38 >= 0x41F)
      v41 = v40;
    else
      v41 = (((1 << ((COERCE_UNSIGNED_INT64(v35 * v36) >> 52) + 1)) - 1) & v40)
          + (1 << ((COERCE_UNSIGNED_INT64(v35 * v36) >> 52) + 1));
    if (v37 >= 0.0)
      v31 = v41;
    else
      v31 = -v41;
  }
  else
  {
    v31 = 0;
  }
LABEL_36:
  if (v30 > (double)v31)
    v30 = (double)v31;
  *v7 = (int)-v30;
  v33 = v30 + 0.0;
  *v9 = v33;
  return this;
}

void WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t *a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;

  if (a2 != (const void **)a1)
  {
    v10 = *((_DWORD *)a1 + 3);
    v11 = *((_DWORD *)a2 + 3);
    if (v10 > v11)
    {
      *((_DWORD *)a1 + 3) = v11;
    }
    else
    {
      v12 = *((_DWORD *)a1 + 2);
      if (v11 > v12)
      {
        if (v12)
        {
          if (v10)
            *((_DWORD *)a1 + 3) = 0;
          v32 = *a1;
          if (*a1)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
            WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
            v12 = *((_DWORD *)a1 + 2);
          }
        }
        v13 = *((unsigned int *)a2 + 3);
        if (v12 < v13)
        {
          if (v13 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            return;
          }
          v14 = *a1;
          v15 = *((unsigned int *)a1 + 3);
          v16 = 24 * v13;
          v17 = WTF::fastMalloc((WTF *)(24 * v13));
          *((_DWORD *)a1 + 2) = (v16 & 0xFFFFFFF8) / 0x18;
          *a1 = v17;
          if ((_DWORD)v15)
          {
            v33 = 24 * v15;
            v34 = v14;
            do
            {
              v35 = *(_OWORD *)v34;
              *(_QWORD *)(v17 + 16) = *(_QWORD *)(v34 + 16);
              *(_OWORD *)v17 = v35;
              v17 += 24;
              v34 += 24;
              v33 -= 24;
            }
            while (v33);
          }
          if (v14)
          {
            if (*a1 == v14)
            {
              *a1 = 0;
              *((_DWORD *)a1 + 2) = 0;
            }
            WTF::fastFree(v14, v18, v19, v20, v21, v22, v23, v24);
          }
        }
      }
      v11 = *((_DWORD *)a1 + 3);
    }
    v25 = (char *)*a1;
    if (v11)
    {
      memmove(v25, *a2, 24 * v11);
      v26 = *((_DWORD *)a1 + 3);
      v25 = (char *)*a1;
    }
    else
    {
      v26 = 0;
    }
    v27 = *((_DWORD *)a2 + 3);
    if (v26 != v27)
    {
      v28 = &v25[24 * v26];
      v29 = (uint64_t)*a2 + 24 * v26;
      v30 = 24 * v27 - 24 * v26;
      do
      {
        v31 = *(_OWORD *)v29;
        *((_QWORD *)v28 + 2) = *(_QWORD *)(v29 + 16);
        *(_OWORD *)v28 = v31;
        v28 += 24;
        v29 += 24;
        v30 -= 24;
      }
      while (v30);
      v26 = *((_DWORD *)a2 + 3);
    }
    *((_DWORD *)a1 + 3) = v26;
  }
}

uint64_t JSC::CodeBlock::CodeBlock(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unint64_t v35;
  char v37;
  char **v38;
  char *v39;

  v9 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v9;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(16 * (*a6 & 0xFFFFFFFE) + 0x28);
  *(_WORD *)(a1 + 16) = 256;
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a1 + 18) & 0xC0 | 3;
  *(_BYTE *)(a1 + 19) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a5 + 20) & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a5 + 16) & 0x7FFFFFFF;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 72) = a2;
  v10 = **(_QWORD **)(a5 + 80);
  *(_QWORD *)(a1 + 88) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 88;
  *(_QWORD *)(a1 + 80) = v10;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v11 = *(_QWORD *)(a5 + 72);
  if ((*(_BYTE *)(v11 + 4) & 1) != 0)
  {
    v12 = *(unsigned int *)(v11 + 8);
    v13 = *(char **)(v11 + 16);
    v14 = &v13[16 * v12];
    if ((*(_BYTE *)(v11 + 4) & 8) != 0)
    {
      v15 = *((_DWORD *)v14 + 75);
      v16 = 288;
    }
    else
    {
      v15 = *((unsigned __int16 *)v14 + 55);
      v16 = 96;
    }
    v17 = (16 * v12);
    v18 = (v15 + 16 * v12);
    if ((*(_BYTE *)(v11 + 4) & 4) != 0)
    {
      v13 = (char *)WTF::fastMalloc((WTF *)(v18 + 16));
      v19 = v16;
      memcpy(&v13[v17 + 16], (const void *)(*(_QWORD *)(v11 + 16) + v17 + 16), v16);
    }
    else
    {
      *(_BYTE *)(v11 + 4) |= 4u;
      v19 = v16;
    }
    bzero(v13, v17);
    v20 = &v13[v17];
    v21 = (uint64_t)&v13[v17 + 16];
    bzero((void *)(v21 + v19), v18 - (v16 + (_DWORD)v17));
    do
      v22 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v22 + 1, (unsigned int *)v11));
    *(_QWORD *)v20 = v11;
    *((_DWORD *)v20 + 2) = 1;
  }
  else
  {
    v21 = 0;
  }
  *(_QWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  v30 = mach_approximate_time();
  v32 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v32 != -1)
  {
    v39 = &v37;
    v38 = &v39;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v33 = 0;
  LODWORD(v31) = dword_1ECF4400C;
  *(double *)(a1 + 216) = (double)(v30 * WTF::machTimebaseInfo(void)::timebaseInfo)
                        / ((double)v31
                         * 1000000000.0);
  *(_QWORD *)(a1 + 224) = 0;
  v34 = *(_DWORD *)(a5 + 24) & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 28) = v34;
  if (BYTE1(dword_1ECF4C240) && v34)
  {
    v33 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v34 + 8));
    *v33 = v34;
    bzero(v33 + 2, 24 * ((24 * (unint64_t)v34 - 24) / 0x18) + 24);
  }
  v35 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v33;
  if (v35)
    WTF::fastFree(v35, v23, v24, v25, v26, v27, v28, v29);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0x7FFFFFFF | ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40)
                                                                        + 116) != 0) << 31);
  JSC::CodeBlockSet::add(*(JSC::CodeBlockSet **)(a2 + 720), (JSC::CodeBlock *)a1, v24, v25, v26, v27, v28, v29);
  return a1;
}

uint64_t JSC::CodeBlock::finishCreation(unint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, const WTF::StringImpl *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, double a10, float a11)
{
  uint64_t v12;
  JSC::ScriptExecutable *v14;
  uint64_t v15;
  JSC::VM *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  const void **v21;
  const void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  WTF *v26;
  _DWORD *v27;
  _DWORD *v28;
  unint64_t v29;
  unsigned int v30;
  char **v31;
  WTF *v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unint64_t v37;
  unint64_t v38;
  JSC::SymbolTable *v39;
  char v40;
  unsigned int *v41;
  _DWORD *v42;
  JSC::VM ***v43;
  int v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  _DWORD *v48;
  unint64_t v49;
  unsigned int *v50;
  _DWORD **v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _DWORD *v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD **v110;
  uint64_t *v111;
  uint64_t (*v112)(int8x16_t *);
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int started;
  uint64_t v124;
  uint64_t (**v125)(void);
  unsigned __int8 *v126;
  unsigned __int8 *v128;
  int v129;
  unsigned __int8 *v130;
  unsigned __int8 *v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  WTF::StringImpl *v141;
  unsigned __int8 *v142;
  int v143;
  int v144;
  char v145;
  _BOOL4 v146;
  int v147;
  int v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  _DWORD *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  unsigned int v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  unsigned int *v173;
  unint64_t v174;
  unsigned int *v175;
  int v176;
  int v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int *v185;
  unint64_t v186;
  unsigned int *v187;
  unint64_t v188;
  unint64_t v189;
  _DWORD *v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t *v203;
  JSC::VM **v204;
  JSC::JSObject *v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  JSC::VM ***v211;
  JSC::VM **v212;
  JSC::VM ***v213;
  int v214;
  unint64_t v215;
  int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  unsigned int *v227;
  unint64_t v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned __int8 *v231;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t casual;
  unint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  _DWORD *v253;
  _DWORD *v254;
  int v255;
  unint64_t v256;
  __int16 v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int16 v262;
  unint64_t v263;
  int v264;
  unsigned __int32 v265;
  uint64_t v266;
  unsigned int v267;
  unint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  _DWORD *v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int *v281;
  unint64_t v282;
  unsigned int *v283;
  unint64_t v284;
  _QWORD *v285;
  unsigned int *v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  int v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int v300;
  __int16 v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  __int16 v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  WTF *v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  JSC::MetadataTable *v324;
  unint64_t v325;
  uint64_t v326;
  WTF *v327;
  _DWORD *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  __int16 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t *v341;
  uint64_t **v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  unsigned int v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  unsigned int v351;
  int v352;
  int v353;
  uint64_t *v354;
  uint64_t v355;
  int v356;
  int v357;
  uint64_t v358;
  unsigned int v359;
  __int16 v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  int v365;
  int v366;
  unsigned int v367;
  uint64_t v368;
  unsigned int v369;
  unint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unint64_t v373;
  uint64_t v374;
  _OWORD *v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unsigned int v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v387;
  uint64_t v388;
  int v389;
  BOOL v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int v398;
  unint64_t v399;
  int v400;
  int16x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int v404;
  int v405;
  unsigned __int32 v406;
  unsigned __int16 *v407;
  unsigned int v408;
  int v409;
  int16x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int v413;
  int v414;
  __int16 v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  __int16 v424;
  uint64_t v425;
  uint64_t v426;
  __int16 v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  JSC::VM *v433;
  int v434;
  JSC::VM *v435;
  WTF *v436;
  uint64_t v437;
  uint64_t v438;
  JSC::JSObject *TemplateObject;
  uint64_t v440;
  BOOL v441;
  int v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  _QWORD *v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *i;
  int v455;
  int32x2_t v456;
  int32x2_t v457;
  unsigned int v458;
  uint64_t v459;
  unsigned int v460;
  __int16 v461;
  uint64_t v462;
  int v463;
  int v464;
  unsigned int v465;
  uint64_t v466;
  unint64_t *v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  __int16 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  __int16 v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  __int16 v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  __int16 v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t TypeLocation;
  int v505;
  WTF *v506;
  unsigned int v507;
  WTF::PrintStream *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  void *v520;
  uint64_t v521;
  const JSC::PropertyTable *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  __int16 v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  WTF::StringImpl **v536;
  uint64_t v537;
  void *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  WTF::StringImpl *v546;
  unsigned __int8 *v547;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  WTF *v557;
  WTF *v558;
  WTF *v559;
  unsigned __int8 *v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  WTF::StringImpl **v567;
  unsigned __int8 *v568;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  WTF *v581;
  WTF *v582;
  void *v583;
  WTF *v584;
  unsigned __int8 *v585;
  int v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  WTF *v594;
  uint64_t v595;
  WTF::StringImpl *v596;
  unint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unsigned __int8 *v611;
  JSC::ScriptExecutable *v612;
  unsigned int v614;
  unint64_t v615;
  const void **v616;
  JSC::VM *v617;
  JSC::VM ***v618;
  _QWORD *v620;
  int v621;
  WTF *v622;
  WTF *v623;
  unsigned int v624[2];
  char v625[4];
  unsigned int v626;
  int v627;
  int v628;
  unsigned int v629;
  unsigned int v630;
  uint64_t v631;
  WTF *v632;
  uint64_t v633;
  WTF *v634;
  unsigned __int8 *v635;
  unsigned int *v636;
  char v637;
  int8x16_t v638;
  __n128 v639;
  uint64_t v640;
  uint64_t v641;
  _QWORD v642[4];

  v12 = a3;
  v642[2] = *MEMORY[0x1E0C80C00];
  v617 = a2;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 43) & 6) != 0)
  {
    v121 = *(_QWORD *)(a3 + 40);
    if (v121)
    {
      v122 = *(_DWORD *)(v121 + 112);
      if (!v122)
      {
        do
          v134 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
        while (__stlxr(v134 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
        v122 = v134 + 1;
        *(_DWORD *)(v121 + 112) = v134 + 1;
        if (v134 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x19814FAE0);
        }
      }
    }
    else
    {
      v122 = 1;
    }
    v12 = a3;
    started = JSC::ScriptExecutable::typeProfilingStartOffset((JSC::ScriptExecutable *)a3);
    v124 = JSC::ScriptExecutable::typeProfilingEndOffset((JSC::ScriptExecutable *)a3);
    JSC::FunctionHasExecutedCache::removeUnexecutedRange((uint64_t *)v617 + 11659, v122, started, v124);
  }
  v14 = (JSC::ScriptExecutable *)v12;
  if (*(_BYTE *)(v12 + 5) == 12)
    v14 = *(JSC::ScriptExecutable **)(v12 + 80);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(JSC::VM **)(a1 + 72);
  v632 = 0;
  v633 = 0;
  v17 = *(unsigned int **)(a4 + 112);
  if (v17)
    v18 = *v17;
  else
    v18 = 0;
  v19 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_11;
  }
  if (__stxr(1u, v19))
    goto LABEL_10;
LABEL_11:
  v21 = (const void **)(a1 + 160);
  v616 = (const void **)(a1 + 160);
  if (v18 > *(unsigned int *)(a1 + 168))
  {
    if (v18 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19814FC68);
    }
    v22 = *v21;
    v23 = *(unsigned int *)(a1 + 172);
    v24 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(a1 + 168) = v18;
    *(_QWORD *)(a1 + 160) = v24;
    memcpy(v24, v22, 8 * v23);
    v21 = (const void **)(a1 + 160);
    if (v22)
    {
      if (*v616 == v22)
      {
        *(_QWORD *)(a1 + 160) = 0;
        *(_DWORD *)(a1 + 168) = 0;
      }
      WTF::fastFree((unint64_t)v22, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      v21 = (const void **)(a1 + 160);
    }
  }
  if (v18 > *(unsigned int *)(a1 + 172))
  {
    if (v18 > *(unsigned int *)(a1 + 168))
    {
      WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v616, v18);
      v21 = (const void **)(a1 + 160);
    }
    if (*v21)
    {
      bzero((char *)*v21 + 8 * *(unsigned int *)(a1 + 172), 8 * v18 - 8 * *(unsigned int *)(a1 + 172));
      v21 = (const void **)(a1 + 160);
    }
  }
  *(_DWORD *)(a1 + 172) = v18;
  v25 = __ldxr(v19);
  v618 = (JSC::VM ***)(a1 + 8);
  v612 = v14;
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v19))
  {
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, a3, a4, (uint64_t)a5, a6, a7, a8);
    v21 = (const void **)(a1 + 160);
  }
  v611 = (unsigned __int8 *)(a1 + 16);
  v634 = 0;
  if (v18)
  {
    LODWORD(v26) = 0;
    while (1)
    {
      v27 = *(_DWORD **)(a4 + 112);
      if (*v27 <= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x19814F680);
      }
      v28 = *(_DWORD **)(a4 + 120);
      if (*v28 <= v26)
      {
        __break(0xC471u);
        JUMPOUT(0x19814F6A0);
      }
      v29 = *(_QWORD *)&v27[2 * v26 + 2];
      v30 = *((unsigned __int8 *)v28 + v26 + 4);
      if (v30 >= 3)
        break;
      if (!v29 || (v29 & 0xFFFE000000000002) != 0)
        goto LABEL_33;
      v31 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C));
      if (v31 == &JSC::SymbolTable::s_info)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 43) & 2) == 0)
          goto LABEL_47;
        v130 = (unsigned __int8 *)(v29 + 20);
        v639.n128_u8[8] = 0;
        v638.i64[1] = v29 + 20;
        v639.n128_u8[0] = 1;
        if (__ldaxr((unsigned __int8 *)(v29 + 20)))
        {
          __clrex();
          goto LABEL_171;
        }
        if (__stxr(1u, v130))
LABEL_171:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v130);
        v639.n128_u8[8] = 1;
        JSC::SymbolTable::prepareForTypeProfiling(v29);
        if (!v639.n128_u8[8] || !v639.n128_u8[0])
          goto LABEL_47;
        v132 = (unsigned __int8 *)v638.i64[1];
        v133 = __ldxr((unsigned __int8 *)v638.i64[1]);
        if (v133 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v638.i64[1]))
            goto LABEL_47;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v132, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_47:
        v39 = JSC::SymbolTable::cloneScopePart((JSC::SymbolTable *)v29, v16, a3, a4, (uint64_t)a5, a6, a7, a8);
        v29 = (unint64_t)v39;
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 43) & 1) != 0)
          JSC::SymbolTable::setRareDataCodeBlock(v39, (JSC::CodeBlock *)a1);
LABEL_49:
        v21 = (const void **)(a1 + 160);
        goto LABEL_33;
      }
      if (v31 == &JSC::JSTemplateObjectDescriptor::s_info)
      {
        if (HIDWORD(v633) != (_DWORD)v633)
        {
          *((_DWORD *)v632 + HIDWORD(v633)) = (_DWORD)v26;
          ++HIDWORD(v633);
          goto LABEL_33;
        }
        WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>((uint64_t)&v632, &v634);
        goto LABEL_49;
      }
LABEL_33:
      v32 = v634;
      if ((unint64_t)v634 >= *(unsigned int *)(a1 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x19814FC60);
      }
      *((_QWORD *)*v21 + (_QWORD)v634) = v29;
      if (v29)
        v33 = (v29 & 0xFFFE000000000002) == 0;
      else
        v33 = 0;
      if (v33 && *((_DWORD *)v16 + 190) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v16 + 192, a1);
        v21 = (const void **)(a1 + 160);
        v32 = v634;
      }
      v26 = (WTF *)((char *)v32 + 1);
      v634 = v26;
      if ((unint64_t)v26 >= v18)
        goto LABEL_50;
    }
    if (v30 != 3)
      goto LABEL_33;
    a9.n128_u64[0] = v29 - 0x2000000000000;
    v34 = (int)COERCE_DOUBLE(v29 - 0x2000000000000);
    if (v29 >= 0xFFFE000000000000)
      v34 = v29;
    v35 = *(unsigned int **)(v15 + 1960);
    if (*v35 <= v34)
    {
      __break(0xC471u);
      JUMPOUT(0x19814F7E0);
    }
    v36 = &v35[2 * v34];
    v38 = *((_QWORD *)v36 + 1);
    v37 = (unint64_t)(v36 + 2);
    v29 = v38;
    if ((v38 & 1) == 0)
      goto LABEL_33;
    v111 = (uint64_t *)(v15 - 16);
    if ((v15 & 8) == 0)
      v111 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFC000 | 8);
    v112 = *(uint64_t (**)(int8x16_t *))(v29 & 0xFFFFFFFFFFFFFFFCLL);
    v638.i64[0] = *v111;
    v638.i64[1] = v15;
    v639.n128_u64[0] = v37;
    v29 = v112(&v638);
    goto LABEL_49;
  }
LABEL_50:
  if (&JSC::UnlinkedModuleProgramCodeBlock::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    v97 = *(_QWORD *)(a3 + 96);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 43) & 2) == 0)
      goto LABEL_129;
    v126 = (unsigned __int8 *)(v97 + 20);
    v639.n128_u8[8] = 0;
    v638.i64[1] = v97 + 20;
    v639.n128_u8[0] = 1;
    if (__ldaxr((unsigned __int8 *)(v97 + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v126))
    {
LABEL_164:
      v639.n128_u8[8] = 1;
      JSC::SymbolTable::prepareForTypeProfiling(v97);
      if (!v639.n128_u8[8] || !v639.n128_u8[0])
        goto LABEL_129;
      v128 = (unsigned __int8 *)v638.i64[1];
      v129 = __ldxr((unsigned __int8 *)v638.i64[1]);
      if (v129 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v638.i64[1]))
          goto LABEL_129;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v128, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_129:
      v98 = *(_DWORD *)(a4 + 216) - 0x40000000;
      if (v98 >= *(unsigned int *)(a1 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x19814FCA0);
      }
      v99 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v98) = v97;
      if (v97
        && (v97 & 0xFFFE000000000002) == 0
        && *(_DWORD *)(v99 + 760) >= *(unsigned __int8 *)(a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v99 + 192, a1);
      }
      goto LABEL_51;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v126);
    goto LABEL_164;
  }
LABEL_51:
  v40 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + 43);
  v41 = *(unsigned int **)(a4 + 128);
  if (v41 && (v79 = *v41, (_DWORD)v79))
  {
    v42 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v79 + 8));
    *v42 = v79;
    bzero(v42 + 2, 8 * v79);
  }
  else
  {
    v42 = 0;
  }
  v43 = (JSC::VM ***)(a1 + 8);
  v44 = v40 & 6;
  v45 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v42;
  if (v45)
    WTF::fastFree(v45, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v46 = *(unsigned int **)(a4 + 128);
  if (v46)
  {
    v80 = *v46;
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = (uint64_t *)(a3 + 40);
      do
      {
        v83 = *(_DWORD **)(a4 + 128);
        if (*v83 <= v81)
        {
          __break(0xC471u);
          JUMPOUT(0x19814F8D4);
        }
        v84 = *(_QWORD *)&v83[2 * v81 + 2];
        if (v44)
        {
          v135 = *v82;
          if (*v82)
          {
            v136 = *(_DWORD *)(v135 + 112);
            if (!v136)
            {
              do
                v137 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v137 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              v136 = v137 + 1;
              *(_DWORD *)(v135 + 112) = v137 + 1;
              if (v137 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x19814FBC4);
              }
            }
          }
          else
          {
            v136 = 1;
          }
          JSC::FunctionHasExecutedCache::insertUnexecutedRange((JSC::VM *)((char *)v617 + 93272), v136, *(_DWORD *)(v84 + 16) & 0x7FFFFFFF, *(_DWORD *)(v84 + 40) & 0x7FFFFFFF, (uint64_t)a5, a6, a7, a8);
        }
        v85 = *(_DWORD **)(a1 + 176);
        if (*v85 <= v81)
        {
          __break(0xC471u);
          JUMPOUT(0x19814F8F4);
        }
        v86 = &v85[2 * v81];
        v87 = JSC::UnlinkedFunctionExecutable::link(v84, (uint64_t)v617, (uint64_t)v612, (uint64_t)v82, 0, 0, (*(unsigned __int16 *)(a3 + 70) >> 7) & 1, a8, a9.n128_f64[0], a10, a11);
        *((_QWORD *)v86 + 1) = v87;
        if (v87 && *((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
        ++v81;
        v43 = (JSC::VM ***)(a1 + 8);
      }
      while (v81 != v80);
    }
  }
  v47 = *(unsigned int **)(a4 + 136);
  if (v47 && (v88 = *v47, (_DWORD)v88))
  {
    v48 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v88 + 8));
    *v48 = v88;
    bzero(v48 + 2, 8 * v88);
  }
  else
  {
    v48 = 0;
  }
  v49 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v48;
  if (v49)
    WTF::fastFree(v49, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v50 = *(unsigned int **)(a4 + 136);
  if (v50)
  {
    v89 = *v50;
    if ((_DWORD)v89)
    {
      v90 = 0;
      v91 = (uint64_t *)(a3 + 40);
      do
      {
        v92 = *(_DWORD **)(a4 + 136);
        if (*v92 <= v90)
        {
          __break(0xC471u);
          JUMPOUT(0x19814F86CLL);
        }
        v93 = *(_QWORD *)&v92[2 * v90 + 2];
        if (v44)
        {
          v138 = *v91;
          if (*v91)
          {
            v139 = *(_DWORD *)(v138 + 112);
            if (!v139)
            {
              do
                v140 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v140 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              v139 = v140 + 1;
              *(_DWORD *)(v138 + 112) = v140 + 1;
              if (v140 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x19814FC40);
              }
            }
          }
          else
          {
            v139 = 1;
          }
          JSC::FunctionHasExecutedCache::insertUnexecutedRange((JSC::VM *)((char *)v617 + 93272), v139, *(_DWORD *)(v93 + 16) & 0x7FFFFFFF, *(_DWORD *)(v93 + 40) & 0x7FFFFFFF, (uint64_t)a5, a6, a7, a8);
        }
        v94 = *(_DWORD **)(a1 + 184);
        if (*v94 <= v90)
        {
          __break(0xC471u);
          JUMPOUT(0x19814F88CLL);
        }
        v95 = &v94[2 * v90];
        v96 = JSC::UnlinkedFunctionExecutable::link(v93, (uint64_t)v617, (uint64_t)v612, (uint64_t)v91, 0, 0, (*(unsigned __int16 *)(a3 + 70) >> 7) & 1, a8, a9.n128_f64[0], a10, a11);
        *((_QWORD *)v95 + 1) = v96;
        if (v96 && *((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
        ++v90;
        v43 = (JSC::VM ***)(a1 + 8);
      }
      while (v90 != v89);
    }
  }
  v51 = *(_DWORD ***)(a4 + 152);
  if (v51)
  {
    v57 = *v51;
    if (v57)
    {
      if (*v57)
      {
        v58 = (uint64_t *)(a1 + 224);
        if (*(_QWORD *)(a1 + 224)
          || (v103 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20),
              *(_OWORD *)v103 = 0u,
              *((_OWORD *)v103 + 1) = 0u,
              __dmb(0xAu),
              std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(a1 + 224), v103, v104, v105, v106, v107, v108, v109), (v110 = *(_DWORD ***)(a4 + 152)) != 0)&& (v57 = *v110) != 0)
        {
          v59 = *v57;
          if ((_DWORD)v59)
          {
            v60 = *v58;
            if (*(_DWORD *)(*v58 + 8) < v59)
            {
              if (v59 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x19814FC98);
              }
              v61 = *(_QWORD *)v60;
              v62 = *(unsigned int *)(v60 + 12);
              v63 = WTF::fastMalloc((WTF *)(24 * v59));
              *(_DWORD *)(v60 + 8) = 24 * (int)v59 / 0x18u;
              *(_QWORD *)v60 = v63;
              if ((_DWORD)v62)
              {
                v100 = 24 * v62;
                v101 = v61;
                do
                {
                  v102 = *(_OWORD *)v101;
                  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v101 + 16);
                  *(_OWORD *)v63 = v102;
                  v63 += 24;
                  v101 += 24;
                  v100 -= 24;
                }
                while (v100);
              }
              if (v61)
              {
                if (*(_QWORD *)v60 == v61)
                {
                  *(_QWORD *)v60 = 0;
                  *(_DWORD *)(v60 + 8) = 0;
                }
                WTF::fastFree(v61, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              }
            }
            if (*(_DWORD *)(v60 + 12) < v59)
            {
              if (*(_DWORD *)(v60 + 8) < v59)
                WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v59);
              if (*(_QWORD *)v60)
              {
                v64 = *(_DWORD *)(v60 + 12);
                if (v64 != (_DWORD)v59)
                  bzero((void *)(*(_QWORD *)v60 + 24 * v64), 24 * ((24 * v59 - 24 * (unint64_t)v64 - 24) / 0x18) + 24);
              }
            }
            v65 = 0;
            *(_DWORD *)(v60 + 12) = v59;
            do
            {
              v66 = **(_DWORD ***)(a4 + 152);
              if (*v66 <= v65)
              {
                __break(0xC471u);
                JUMPOUT(0x19814F838);
              }
              if (v65 >= *(unsigned int *)(*v58 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x19814FC70);
              }
              v67 = &v66[4 * v65];
              v68 = v67 + 1;
              v69 = v67[3];
              v70 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + v69);
              v71 = *(_QWORD *)*v58;
              if (v70 == 128)
                v72 = 2;
              else
                v72 = 1;
              if (v70 == 130)
                v73 = 4;
              else
                v73 = v72;
              if (BYTE1(dword_1ECF4C240))
              {
                JSC::LLInt::handleCatchThunk(v73, &v638);
                LODWORD(v69) = v68[2];
                v74 = (unsigned int *)v638.i64[1];
                v75 = v638.i64[0];
              }
              else
              {
                if (v73 == 4)
                {
                  v74 = 0;
                  v125 = g_opcodeMapWide32;
                }
                else if (v73 == 2)
                {
                  v74 = 0;
                  v125 = g_opcodeMapWide16;
                }
                else
                {
                  v74 = 0;
                  v125 = g_opcodeMap;
                }
                v75 = (uint64_t)v125[15];
                v638.i64[0] = v75;
              }
              v76 = v71 + 24 * v65;
              a9.n128_u64[0] = *(_QWORD *)v68;
              *(_QWORD *)v76 = *(_QWORD *)v68;
              *(_DWORD *)(v76 + 8) = v69;
              *(_BYTE *)(v76 + 12) = *(_BYTE *)(v76 + 12) & 0xFC | v68[3] & 3;
              *(_QWORD *)(v76 + 16) = v75;
              v638.i64[1] = 0;
              v43 = (JSC::VM ***)(a1 + 8);
              if (v74)
              {
                do
                {
                  v77 = __ldaxr(v74);
                  v78 = v77 - 1;
                }
                while (__stlxr(v78, v74));
                if (!v78)
                {
                  atomic_store(1u, v74);
                  JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v74, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                  WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                }
              }
              ++v65;
            }
            while (v65 != v59);
          }
        }
      }
    }
  }
  v631 = 0;
  v52 = *(_QWORD *)(a1 + 56);
  v53 = *(_QWORD **)(v52 + 80);
  v54 = *((_DWORD *)v53 + 3);
  if (v54)
  {
    v55 = 0;
    v56 = *v53;
    v620 = v53;
    v621 = *((_DWORD *)v53 + 3);
    while (1)
    {
      v149 = v55;
      v150 = (unsigned __int8 *)(v56 + v55);
      v151 = *v150;
      if ((v151 | 2) == 0x82)
        v151 = v150[1];
      *(_DWORD *)(a1 + 44) += JSC::opcodeLengths[v151] + 1;
      switch(v151)
      {
        case 0:
          v400 = *v150;
          if (v400 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            v639.n128_u64[0] = *(_QWORD *)(v150 + 18);
            v406 = *(_DWORD *)(v150 + 26);
          }
          else
          {
            if (v400 == 128)
            {
              JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v638.i32, (const unsigned __int16 *)v150 + 1);
              v406 = v639.n128_u32[2];
LABEL_618:
              v407 = *(unsigned __int16 **)(a1 + 136);
              v408 = *v407;
              if (!*v407)
                v408 = *((_DWORD *)v407 + 24);
              goto LABEL_628;
            }
            a9.n128_u32[0] = *(_DWORD *)(v150 + 1);
            v401 = (int16x4_t)vmovl_s8((int8x8_t)a9.n128_u64[0]).u64[0];
            v402 = vmovl_s16(v401);
            v403.i64[0] = 0xF0000000FLL;
            v403.i64[1] = 0xF0000000FLL;
            v638 = vbslq_s8((int8x16_t)vcgtq_s32(v402, v403), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v401), (int8x16_t)v402);
            v404 = (char)v150[5];
            v405 = v404 + 1073741808;
            if (v404 <= 15)
              v405 = (char)v150[5];
            v639.n128_u32[0] = v405;
            v639.n128_u32[1] = v150[6];
            v406 = v150[7];
          }
          v639.n128_u32[2] = v406;
          goto LABEL_618;
        case 1:
          JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)v150, &v638, (int8x8_t)a9.n128_u64[0]);
          v358 = *(_QWORD *)(a1 + 136);
          v359 = *(unsigned __int16 *)(v358 + 2);
          if (!*(_WORD *)(v358 + 2))
            v359 = *(_DWORD *)(v358 + 100);
          v256 = ((v358 + v359 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v639.n128_u32[3];
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v360 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v360;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          v361 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v361;
            v485 = *(_WORD *)(v256 + 17);
            v486 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v485 & 0xFEFF;
            if ((v486 & 1) != 0 && (v486 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v486 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
            v259 = v361 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v360;
            v260 = v259;
          }
          v362 = v259;
          if ((v259 & 1) != 0)
          {
            v487 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v488 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v488 == 0x3FFFFFFF)
              || (_DWORD)v488 == -1)
            {
              v489 = 2;
            }
            else if (v488 >> 28)
            {
              v608 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v608 = v487;
              *(_DWORD *)(v608 + 8) = v488;
              v489 = 1;
              v487 = v608;
            }
            else
            {
              v489 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v487 = v488 << 36;
            }
            v362 = v487 | v489;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          *(_QWORD *)(v256 + 72) = v362;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x20;
          goto LABEL_361;
        case 2:
          JSC::OpIteratorNext::decode(v150, (uint64_t)&v638, (int8x8_t)a9.n128_u64[0]);
          v332 = *(_QWORD *)(a1 + 136);
          v333 = *(unsigned __int16 *)(v332 + 4);
          if (!*(_WORD *)(v332 + 4))
            v333 = *(_DWORD *)(v332 + 104);
          v256 = ((v332 + v333 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)HIDWORD(v640) << 7);
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v334 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v334;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          *(_QWORD *)(v256 + 80) = 0;
          *(_DWORD *)(v256 + 88) = 0;
          *(_BYTE *)(v256 + 94) = 1;
          *(_BYTE *)(v256 + 95) = qword_1ECF4C6B8;
          *(_QWORD *)(v256 + 96) = 0;
          *(_DWORD *)(v256 + 104) = 0;
          *(_BYTE *)(v256 + 110) = 1;
          *(_BYTE *)(v256 + 111) = qword_1ECF4C6B8;
          *(_QWORD *)(v256 + 117) = 0;
          *(_QWORD *)(v256 + 112) = 0;
          goto LABEL_502;
        case 3:
          JSC::OpConstructVarargs::decode((int *)v150, (uint64_t)&v638, (int8x8_t)a9.n128_u64[0]);
          v422 = *(_QWORD *)(a1 + 136);
          v423 = *(unsigned __int16 *)(v422 + 6);
          if (!*(_WORD *)(v422 + 6))
            v423 = *(_DWORD *)(v422 + 108);
          v256 = ((v422 + v423 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v639.n128_u32[3];
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v424 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v424;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          v425 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v425;
            v531 = *(_WORD *)(v256 + 17);
            v532 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v531 & 0xFEFF;
            if ((v532 & 1) != 0 && (v532 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v532 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
            v259 = v425 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v424;
            v260 = v259;
          }
          v426 = v259;
          if ((v259 & 1) != 0)
          {
            v533 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v534 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v534 == 0x3FFFFFFF)
              || (_DWORD)v534 == -1)
            {
              v535 = 2;
            }
            else if (v534 >> 28)
            {
              v610 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v610 = v533;
              *(_DWORD *)(v610 + 8) = v534;
              v535 = 1;
              v533 = v610;
            }
            else
            {
              v535 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v533 = v534 << 36;
            }
            v426 = v533 | v535;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          *(_QWORD *)(v256 + 72) = v426;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x40;
          goto LABEL_361;
        case 4:
          JSC::OpIteratorOpen::decode(v150, (uint32x4_t *)&v638, (int8x8_t)a9.n128_u64[0]);
          v339 = *(_QWORD *)(a1 + 136);
          v340 = *(unsigned __int16 *)(v339 + 8);
          if (!*(_WORD *)(v339 + 8))
            v340 = *(_DWORD *)(v339 + 112);
          v256 = ((v339 + v340 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 * v640;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v334 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v334;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          *(_QWORD *)(v256 + 80) = 0;
          *(_DWORD *)(v256 + 88) = 0;
          *(_BYTE *)(v256 + 94) = 1;
          *(_BYTE *)(v256 + 95) = qword_1ECF4C6B8;
          *(_QWORD *)(v256 + 101) = 0;
          *(_QWORD *)(v256 + 96) = 0;
LABEL_502:
          v335 = (4 * v149);
          if (((v149 >> 26) & 0xF) == 0)
            goto LABEL_503;
          goto LABEL_726;
        case 5:
          v443 = *v150;
          if (v443 == 130)
          {
            v444 = *(unsigned int *)(v150 + 10);
          }
          else if (v443 == 128)
          {
            v444 = *((unsigned __int16 *)v150 + 3);
          }
          else
          {
            v444 = v150[3];
          }
          v445 = *(_QWORD *)(a1 + 136);
          v446 = *(unsigned __int16 *)(v445 + 10);
          if (!*(_WORD *)(v445 + 10))
            v446 = *(_DWORD *)(v445 + 116);
          v447 = (_QWORD *)(((v445 + v446 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v444);
          *v447 = 0;
          v447[1] = 0;
          goto LABEL_216;
        case 6:
          v448 = *v150;
          if (v448 == 130)
          {
            v396 = *(unsigned int *)(v150 + 10);
          }
          else if (v448 == 128)
          {
            v396 = *((unsigned __int16 *)v150 + 3);
          }
          else
          {
            v396 = v150[3];
          }
          v397 = *(_QWORD *)(a1 + 136);
          v398 = *(unsigned __int16 *)(v397 + 12);
          if (!*(_WORD *)(v397 + 12))
            v398 = *(_DWORD *)(v397 + 120);
          goto LABEL_611;
        case 7:
          v152 = *v150;
          if (v152 == 128)
          {
            v153 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v152 == 130)
          {
            v153 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v153 = v150[5];
          }
          v154 = *(_QWORD *)(a1 + 136);
          v155 = *(unsigned __int16 *)(v154 + 14);
          if (!*(_WORD *)(v154 + 14))
            v155 = *(_DWORD *)(v154 + 124);
          v156 = (_DWORD *)(((v154 + v155 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v153);
          goto LABEL_236;
        case 8:
          v304 = *v150;
          if (v304 == 128)
          {
            v305 = *((unsigned __int16 *)v150 + 6);
          }
          else if (v304 == 130)
          {
            v305 = *(_DWORD *)(v150 + 22);
          }
          else
          {
            v305 = v150[6];
          }
          v306 = *(_QWORD *)(a1 + 136);
          v307 = *(unsigned __int16 *)(v306 + 16);
          if (!*(_WORD *)(v306 + 16))
            v307 = *(_DWORD *)(v306 + 128);
          v256 = ((v306 + v307 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v305;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v308 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v308;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          v309 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v309;
            v476 = *(_WORD *)(v256 + 17);
            v477 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v476 & 0xFEFF;
            if ((v477 & 1) != 0 && (v477 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v477 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
            v259 = v309 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v308;
            v260 = v259;
          }
          v310 = v259;
          if ((v259 & 1) != 0)
          {
            v478 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v479 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v479 == 0x3FFFFFFF)
              || (_DWORD)v479 == -1)
            {
              v480 = 2;
            }
            else if (v479 >> 28)
            {
              v606 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v606 = v478;
              *(_DWORD *)(v606 + 8) = v479;
              v480 = 1;
              v478 = v606;
            }
            else
            {
              v480 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v478 = v479 << 36;
            }
            v310 = v478 | v480;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          *(_QWORD *)(v256 + 72) = v310;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x30;
          goto LABEL_361;
        case 9:
          v297 = *v150;
          if (v297 == 128)
          {
            v298 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v297 == 130)
          {
            v298 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v298 = v150[5];
          }
          v299 = *(_QWORD *)(a1 + 136);
          v300 = *(unsigned __int16 *)(v299 + 18);
          if (!*(_WORD *)(v299 + 18))
            v300 = *(_DWORD *)(v299 + 132);
          v256 = ((v299 + v300 + 7) & 0xFFFFFFFFFFFFFFF8) + 96 * v298;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v301 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v301;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          *(_QWORD *)(v256 + 80) = 0;
          *(_DWORD *)(v256 + 88) = 0;
          v302 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v302;
            v471 = *(_WORD *)(v256 + 17);
            v472 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v471 & 0xFEFF;
            if ((v472 & 1) != 0 && (v472 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v472 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
            v259 = v302 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v301;
            v260 = v259;
          }
          v303 = v259;
          if ((v259 & 1) != 0)
          {
            v473 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v474 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v474 == 0x3FFFFFFF)
              || (_DWORD)v474 == -1)
            {
              v475 = 2;
            }
            else if (v474 >> 28)
            {
              v605 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v605 = v473;
              *(_DWORD *)(v605 + 8) = v474;
              v475 = 1;
              v473 = v605;
            }
            else
            {
              v475 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v473 = v474 << 36;
            }
            v303 = v473 | v475;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          *(_QWORD *)(v256 + 72) = v303;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x50;
          goto LABEL_361;
        case 10:
          v455 = *v150;
          if (v455 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            v639.n128_u64[0] = *(_QWORD *)(v150 + 18);
            v639.n128_u8[8] = *(_DWORD *)(v150 + 26);
            v639.n128_u32[3] = *(_DWORD *)(v150 + 30);
            v458 = *(_DWORD *)(v150 + 34);
            goto LABEL_722;
          }
          if (v455 != 128)
          {
            v456.i32[0] = (char)v150[1];
            v456.i32[1] = (char)v150[2];
            v457 = vdup_n_s32(0x3FFFFFF0u);
            *(int8x8_t *)v638.i8 = vbsl_s8((int8x8_t)vcgt_s32(v456, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v456, v457), (int8x8_t)v456);
            v638.i32[2] = v150[3];
            v638.i32[3] = v150[4];
            v456.i32[0] = (char)v150[5];
            v456.i32[1] = (char)v150[6];
            v639.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_s32(v456, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v456, v457), (int8x8_t)v456);
            v639.n128_u8[8] = v150[7];
            v639.n128_u32[3] = v150[8];
            v458 = v150[9];
LABEL_722:
            LODWORD(v640) = v458;
            goto LABEL_723;
          }
          JSC::OpCallDirectEval::OpCallDirectEval((uint64_t)&v638, (const unsigned __int16 *)v150 + 1);
          v458 = v640;
LABEL_723:
          v459 = *(_QWORD *)(a1 + 136);
          v460 = *(unsigned __int16 *)(v459 + 20);
          if (!*(_WORD *)(v459 + 20))
            v460 = *(_DWORD *)(v459 + 136);
          v256 = ((v459 + v460 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v458;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v334 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v334;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          v335 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
LABEL_726:
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v335;
            v461 = *(_WORD *)(v256 + 17);
            v462 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v461 & 0xFEFF;
            if ((v462 & 1) != 0 && (v462 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v462 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
LABEL_503:
            v259 = v335 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v334;
            v260 = v259;
          }
          v261 = v259;
          if ((v259 & 1) != 0)
          {
            v336 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v337 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v337 == 0x3FFFFFFF)
              || (_DWORD)v337 == -1)
            {
              v338 = 2;
            }
            else if (v337 >> 28)
            {
              v607 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v607 = v336;
              *(_DWORD *)(v607 + 8) = v337;
              v338 = 1;
              v336 = v607;
            }
            else
            {
              v338 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v336 = v337 << 36;
            }
            v261 = v336 | v338;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
LABEL_360:
          *(_QWORD *)(v256 + 72) = v261;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x10;
          goto LABEL_361;
        case 11:
          v409 = *v150;
          if (v409 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            v639.n128_u64[0] = *(_QWORD *)(v150 + 18);
            v406 = *(_DWORD *)(v150 + 26);
LABEL_625:
            v639.n128_u32[2] = v406;
            goto LABEL_626;
          }
          if (v409 != 128)
          {
            a9.n128_u32[0] = *(_DWORD *)(v150 + 1);
            v410 = (int16x4_t)vmovl_s8((int8x8_t)a9.n128_u64[0]).u64[0];
            v411 = vmovl_s16(v410);
            v412.i64[0] = 0xF0000000FLL;
            v412.i64[1] = 0xF0000000FLL;
            v638 = vbslq_s8((int8x16_t)vcgtq_s32(v411, v412), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v410), (int8x16_t)v411);
            v413 = (char)v150[5];
            v414 = v413 + 1073741808;
            if (v413 <= 15)
              v414 = (char)v150[5];
            v639.n128_u32[0] = v414;
            v639.n128_u32[1] = v150[6];
            v406 = v150[7];
            goto LABEL_625;
          }
          JSC::OpTailCallForwardArguments::OpTailCallForwardArguments(v638.i32, (const unsigned __int16 *)v150 + 1);
          v406 = v639.n128_u32[2];
LABEL_626:
          v407 = *(unsigned __int16 **)(a1 + 136);
          v408 = v407[11];
          if (!v407[11])
            v408 = *((_DWORD *)v407 + 35);
LABEL_628:
          v256 = (((unint64_t)v407 + v408 + 7) & 0xFFFFFFFFFFFFFFF8) + 80 * v406;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v415 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v415;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          v416 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v416;
            v490 = *(_WORD *)(v256 + 17);
            v491 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v490 & 0xFEFF;
            if ((v491 & 1) != 0 && (v491 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v491 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          else
          {
            v259 = v416 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v415;
            v260 = v259;
          }
          v417 = v259;
          if ((v259 & 1) != 0)
          {
            v492 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v493 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v493 == 0x3FFFFFFF)
              || (_DWORD)v493 == -1)
            {
              v494 = 2;
            }
            else if (v493 >> 28)
            {
              v609 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v609 = v492;
              *(_DWORD *)(v609 + 8) = v493;
              v494 = 1;
              v492 = v609;
            }
            else
            {
              v494 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v492 = v493 << 36;
            }
            v417 = v492 | v494;
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          *(_QWORD *)(v256 + 72) = v417;
          v262 = *(_WORD *)(v256 + 17) & 0xF10F | 0x60;
LABEL_361:
          *(_WORD *)(v256 + 17) = v262;
          if (!(_BYTE)qword_1ECF4C789)
            JSC::CallLinkInfo::setVirtualCall((JSC::CallLinkInfo *)v256, v617, a3, a4, (uint64_t)a5, a6, a7, a8, (uint8x8_t)a9.n128_u64[0]);
          if ((v259 & 1) != 0)
          {
            v263 = v260 & 0xFFFFFFFF8;
            if ((v260 & 0xFFFFFFFF8) != 0)
LABEL_366:
              WTF::fastFree(v263, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          }
          goto LABEL_216;
        case 12:
          JSC::OpNewAsyncGeneratorFuncExp::decode((JSC::OpNewAsyncGeneratorFuncExp *)v150, (const unsigned __int8 *)a2);
          v483 = *(_QWORD *)(a1 + 136);
          v484 = *(unsigned __int16 *)(v483 + 24);
          if (!*(_WORD *)(v483 + 24))
            v484 = *(_DWORD *)(v483 + 144);
          *(_QWORD *)(((v483 + v484 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * a2) = 0;
          goto LABEL_779;
        case 14:
          v442 = *v150;
          if (v442 == 130)
          {
            v345 = *(unsigned int *)(v150 + 14);
          }
          else if (v442 == 128)
          {
            v345 = *((unsigned __int16 *)v150 + 4);
          }
          else
          {
            v345 = v150[4];
          }
          v346 = *(_QWORD *)(a1 + 136);
          v347 = *(unsigned __int16 *)(v346 + 28);
          if (!*(_WORD *)(v346 + 28))
            v347 = *(_DWORD *)(v346 + 152);
          goto LABEL_530;
        case 16:
          v357 = *v150;
          if (v357 == 128)
          {
            v270 = *((unsigned __int16 *)v150 + 3);
          }
          else if (v357 == 130)
          {
            v270 = *(unsigned int *)(v150 + 10);
          }
          else
          {
            v270 = v150[3];
          }
          v271 = *(_QWORD *)(a1 + 136);
          v272 = *(unsigned __int16 *)(v271 + 32);
          if (!*(_WORD *)(v271 + 32))
            v272 = *(_DWORD *)(v271 + 160);
          goto LABEL_385;
        case 17:
          v311 = *v150;
          if (v311 == 128)
          {
            v312 = v150[6];
            v313 = *((unsigned __int16 *)v150 + 4);
          }
          else if (v311 == 130)
          {
            v312 = v150[10];
            v313 = *(unsigned int *)(v150 + 14);
          }
          else
          {
            v312 = v150[3];
            v313 = v150[4];
          }
          v314 = *(_QWORD *)(a1 + 136);
          v315 = *(unsigned __int16 *)(v314 + 34);
          if (!*(_WORD *)(v314 + 34))
            v315 = *(_DWORD *)(v314 + 164);
          *(_QWORD *)(((v314 + v315 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v313) = v312 << 56;
          goto LABEL_216;
        case 18:
          v157 = *v150;
          if (v157 == 128)
          {
            v158 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v157 == 130)
          {
            v158 = *(unsigned int *)(v150 + 18);
          }
          else
          {
            v158 = v150[5];
          }
          v159 = *(_QWORD *)(a1 + 136);
          v160 = *(unsigned __int16 *)(v159 + 36);
          if (!*(_WORD *)(v159 + 36))
            v160 = *(_DWORD *)(v159 + 168);
          v161 = ((v159 + v160 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v158;
          *(_QWORD *)v161 = 0;
          *(_DWORD *)(v161 + 8) = 0;
          *(_BYTE *)(v161 + 14) = 1;
          *(_BYTE *)(v161 + 15) = qword_1ECF4C6B8;
          goto LABEL_216;
        case 19:
          v287 = *v150;
          if (v287 == 128)
          {
            v288 = *((unsigned __int16 *)v150 + 4);
          }
          else if (v287 == 130)
          {
            v288 = *(unsigned int *)(v150 + 14);
          }
          else
          {
            v288 = v150[4];
          }
          v289 = *(_QWORD *)(a1 + 136);
          v290 = *(unsigned __int16 *)(v289 + 38);
          if (!*(_WORD *)(v289 + 38))
            v290 = *(_DWORD *)(v289 + 172);
          v291 = ((v289 + v290 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v288;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_QWORD *)v291 = 0;
          *(_DWORD *)(v291 + 8) = 0;
          *(_BYTE *)(v291 + 14) = 1;
          *(_BYTE *)(v291 + 15) = qword_1ECF4C6B8;
          *(_QWORD *)(v291 + 16) = 0;
          *(_DWORD *)(v291 + 24) = 0;
          goto LABEL_216;
        case 20:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 43) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198152CE8);
          }
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpProfileType>(v150, (uint64_t)v625, (uint8x8_t)a9.n128_u64[0]);
          v495 = *(_QWORD *)(a1 + 136);
          v496 = *(unsigned __int16 *)(v495 + 40);
          if (!*(_WORD *)(v495 + 40))
            v496 = *(_DWORD *)(v495 + 176);
          break;
        case 22:
          v366 = *v150;
          if (v366 == 128)
          {
            v367 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v366 == 130)
          {
            v367 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v367 = v150[5];
          }
          v368 = *(_QWORD *)(a1 + 136);
          v369 = *(unsigned __int16 *)(v368 + 44);
          if (!*(_WORD *)(v368 + 44))
            v369 = *(_DWORD *)(v368 + 184);
          v370 = ((v368 + v369 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v367;
          *(_QWORD *)v370 = 0x300000000000000;
          *(_DWORD *)(v370 + 12) = 0;
          goto LABEL_583;
        case 23:
          v194 = *v150;
          if (v194 == 128)
          {
            v195 = *((unsigned __int16 *)v150 + 6);
          }
          else if (v194 == 130)
          {
            v195 = *(_DWORD *)(v150 + 22);
          }
          else
          {
            v195 = v150[6];
          }
          v196 = *(_QWORD *)(a1 + 136);
          v197 = *(unsigned __int16 *)(v196 + 46);
          if (!*(_WORD *)(v196 + 46))
            v197 = *(_DWORD *)(v196 + 188);
          goto LABEL_357;
        case 24:
          v255 = *v150;
          if (v255 == 130)
          {
            v195 = *(_DWORD *)(v150 + 14);
          }
          else if (v255 == 128)
          {
            v195 = *((unsigned __int16 *)v150 + 4);
          }
          else
          {
            v195 = v150[4];
          }
          v196 = *(_QWORD *)(a1 + 136);
          v197 = *(unsigned __int16 *)(v196 + 48);
          if (!*(_WORD *)(v196 + 48))
            v197 = *(_DWORD *)(v196 + 192);
LABEL_357:
          v256 = ((v196 + v197 + 7) & 0xFFFFFFFFFFFFFFF8) + 96 * v195;
          *(_QWORD *)v256 = 0;
          *(_QWORD *)(v256 + 8) = 0;
          *(_BYTE *)(v256 + 16) = 0;
          v257 = *(_WORD *)(v256 + 17) & 0xF000;
          *(_WORD *)(v256 + 17) = v257;
          a9.n128_u16[0] = 0;
          a9.n128_u8[2] = 0;
          a9.n128_u8[3] = 0;
          a9.n128_u8[4] = 0;
          a9.n128_u8[5] = 0;
          a9.n128_u8[6] = 0;
          a9.n128_u8[7] = 0;
          *(_OWORD *)(v256 + 19) = 0u;
          *(_OWORD *)(v256 + 35) = 0u;
          *(_OWORD *)(v256 + 51) = 0u;
          *(_QWORD *)(v256 + 64) = 0;
          *(_QWORD *)(v256 + 72) = 2;
          *(_QWORD *)(v256 + 80) = 0;
          *(_DWORD *)(v256 + 88) = 0;
          v258 = (4 * v149);
          if (((v149 >> 26) & 0xF) != 0)
          {
            v260 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v260 = 0;
            *(_DWORD *)(v260 + 8) = v258;
            v427 = *(_WORD *)(v256 + 17);
            v428 = *(_QWORD *)(v256 + 72);
            v259 = v260 | 1;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v427 & 0xFEFF;
            if ((v428 & 1) != 0 && (v428 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v428 & 0xFFFFFFFF8, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          }
          else
          {
            v259 = v258 << 36;
            *(_QWORD *)(v256 + 64) = a1;
            *(_WORD *)(v256 + 17) = v257;
            v260 = v259;
          }
          v261 = v259;
          if ((v259 & 1) != 0)
          {
            v429 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
            if ((v260 & 2) != 0
              || (v430 = *(unsigned int *)((v260 & 0xFFFFFFFF8) + 8), (_DWORD)v430 == 0x3FFFFFFF)
              || (_DWORD)v430 == -1)
            {
              v431 = 2;
            }
            else if (v430 >> 28)
            {
              v595 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v595 = v429;
              *(_DWORD *)(v595 + 8) = v430;
              v431 = 1;
              v429 = v595;
            }
            else
            {
              v431 = *(_QWORD *)(v260 & 0xFFFFFFFF8);
              v429 = v430 << 36;
            }
            v261 = v429 | v431;
            v53 = v620;
          }
          goto LABEL_360;
        case 25:
          v178 = *v150;
          if (v178 == 128)
          {
            v179 = *((unsigned __int16 *)v150 + 3);
            v180 = *((unsigned __int16 *)v150 + 4);
            v181 = (WTF::AtomStringImpl *)*((unsigned __int16 *)v150 + 5);
            v182 = *((unsigned __int16 *)v150 + 6);
          }
          else if (v178 == 130)
          {
            v179 = *(unsigned int *)(v150 + 10);
            v180 = *(unsigned int *)(v150 + 14);
            v181 = (WTF::AtomStringImpl *)*(unsigned int *)(v150 + 18);
            v182 = *(unsigned int *)(v150 + 22);
          }
          else
          {
            v179 = v150[3];
            v180 = v150[4];
            v181 = (WTF::AtomStringImpl *)v150[5];
            v182 = v150[6];
          }
          v183 = *(_QWORD *)(a1 + 136);
          v184 = *(unsigned __int16 *)(v183 + 50);
          if (!*(_WORD *)(v183 + 50))
            v184 = *(_DWORD *)(v183 + 196);
          v185 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 104);
          if (v185)
          {
            v186 = *v185;
            if (v186 > v179)
            {
              v187 = &v185[2 * v179];
              goto LABEL_267;
            }
          }
          else
          {
            LODWORD(v186) = 0;
          }
          v253 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120))
                            + 48);
          if (*v253 <= (v179 - v186))
          {
            __break(0xC471u);
            JUMPOUT(0x198151A78);
          }
          v187 = &v253[2 * (v179 - v186)];
LABEL_267:
          if ((_DWORD)v180 == 4)
          {
            __break(0xC471u);
            JUMPOUT(0x19815174CLL);
          }
          v188 = (v183 + v184 + 7) & 0xFFFFFFFFFFFFFFF8;
          JSC::JSScope::abstractResolve(*v43, v181, a5, (uint64_t)(v187 + 2), 0, v180, 2, a8, (uint64_t)&v638);
          *(_DWORD *)(v188 + 16 * v182) = v638.i32[0];
          v189 = v188 + 16 * v182;
          *(_DWORD *)(v189 + 4) = v638.i32[2];
          v190 = (_DWORD *)(v189 + 4);
          v191 = v639.n128_u64[1];
          if (v639.n128_u64[1])
          {
            v53 = v620;
            if (v638.i32[0] != 5)
            {
              v192 = v188 + 16 * v182;
              v193 = *(_QWORD *)(v639.n128_u64[1] + 24);
LABEL_271:
              *(_QWORD *)(v192 + 8) = v193;
              v54 = v621;
              if (v193 && *((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
              goto LABEL_213;
            }
            v374 = v631;
            if (!v631)
            {
              v375 = (_OWORD *)WTF::fastZeroedMalloc(0x50uLL, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              a9.n128_u64[0] = 0;
              *v375 = xmmword_19914F680;
              v374 = (uint64_t)(v375 + 1);
              v631 = v374;
            }
            v376 = *(_DWORD *)(v374 - 8);
            v377 = (~(v191 << 32) + v191) ^ ((~(v191 << 32) + v191) >> 22);
            v378 = 9 * ((v377 + ~(v377 << 13)) ^ ((v377 + ~(v377 << 13)) >> 8));
            v379 = (v378 ^ (v378 >> 15)) + ~((v378 ^ (v378 >> 15)) << 27);
            v380 = v376 & ((v379 >> 31) ^ v379);
            a2 = (JSC::VM *)(v374 + 8 * v380);
            v381 = *(_QWORD *)a2;
            if (*(_QWORD *)a2)
            {
              v433 = 0;
              v434 = 1;
              while (v381 != v191)
              {
                if (v381 == -1)
                  v433 = a2;
                v380 = (v380 + v434) & v376;
                a2 = (JSC::VM *)(v374 + 8 * v380);
                v381 = *(_QWORD *)a2;
                ++v434;
                if (!*(_QWORD *)a2)
                {
                  if (v433)
                  {
                    *(_QWORD *)v433 = 0;
                    --*(_DWORD *)(v631 - 16);
                    a2 = v433;
                  }
                  goto LABEL_591;
                }
              }
              goto LABEL_693;
            }
LABEL_591:
            *(_QWORD *)a2 = v191;
            v382 = v631;
            if (v631)
              v383 = *(_DWORD *)(v631 - 12) + 1;
            else
              v383 = 1;
            *(_DWORD *)(v631 - 12) = v383;
            v384 = (*(_DWORD *)(v382 - 16) + v383);
            v385 = *(unsigned int *)(v382 - 4);
            if (v385 > 0x400)
            {
              if (v385 <= 2 * v384)
                goto LABEL_751;
            }
            else
            {
              if (3 * v385 > 4 * v384)
                goto LABEL_595;
LABEL_751:
              WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::expand(&v631, (unint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
            }
LABEL_595:
            if (__ldaxr(v611))
            {
              __clrex();
              goto LABEL_597;
            }
            if (__stxr(1u, v611))
LABEL_597:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v611);
            v387 = v639.n128_u64[1];
            v634 = 0;
            v388 = *(unsigned int *)(a1 + 172);
            if ((_DWORD)v388 == *(_DWORD *)(a1 + 168))
              *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * *(unsigned int *)(a1 + 172)) = *(_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v616, v388 + 1, (unint64_t)&v634);
            else
              *((_QWORD *)*v616 + v388) = 0;
            v389 = *(_DWORD *)(a1 + 172);
            v390 = __CFADD__(v389, 1);
            v391 = v389 + 1;
            *(_DWORD *)(a1 + 172) = v391;
            if (v390)
            {
              __break(0xC471u);
              JUMPOUT(0x198152CC8);
            }
            v392 = *(_QWORD *)(a1 + 160) + 8 * v391;
            v393 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(v392 - 8) = v387;
            if (v387
              && (v387 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v393 + 760) >= *(unsigned __int8 *)(a1 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v393 + 192, a1);
            }
            v394 = __ldxr(v611);
            if (v394 == 1)
            {
              if (!__stlxr(0, v611))
                goto LABEL_693;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v611, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_693:
            v192 = v188 + 16 * v182;
            v193 = v639.n128_u64[1];
            goto LABEL_271;
          }
          v211 = v43;
          v53 = v620;
          if (v638.i32[0] < 2u)
            goto LABEL_296;
          if (v638.i32[0] == 2)
            goto LABEL_409;
          v211 = v43;
          if ((v638.i32[0] - 6) >= 2)
          {
            if (v638.i32[0] != 8)
            {
              v213 = (JSC::VM ***)(v188 + 16 * v182 + 8);
LABEL_513:
              v54 = v621;
              *v213 = 0;
              goto LABEL_213;
            }
LABEL_409:
            v211 = (JSC::VM ***)(*v43 + 9);
          }
LABEL_296:
          v212 = *v211;
          v213 = (JSC::VM ***)(v188 + 16 * v182 + 8);
          if (!v212)
            goto LABEL_513;
          *v213 = v212;
          v54 = v621;
          if (*((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
          if (v638.i32[0] == 6 || !v638.i32[0])
            *v190 = *((_DWORD *)*v43 + 794);
LABEL_213:
          v141 = (WTF::StringImpl *)v642[0];
          v642[0] = 0;
          if (!v141)
            goto LABEL_216;
LABEL_214:
          if (*(_DWORD *)v141 != 2)
          {
            *(_DWORD *)v141 -= 2;
            goto LABEL_216;
          }
          WTF::StringImpl::~StringImpl(v141, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
          goto LABEL_366;
        case 26:
          v162 = *v150;
          if (v162 == 128)
          {
            v163 = *((unsigned __int16 *)v150 + 3);
            v164 = ((*((unsigned __int16 *)v150 + 4) >> 3) | (*((unsigned __int16 *)v150 + 4) << 20)) & 0x10000F | (((*((unsigned __int16 *)v150 + 4) >> 1) & 3) << 10) & 0xBFFFFFFF | (((*((unsigned __int16 *)v150 + 4) >> 7) & 1) << 30);
            v165 = (WTF::AtomStringImpl *)*((unsigned __int16 *)v150 + 5);
            v166 = *((unsigned __int16 *)v150 + 6);
            v167 = *((unsigned __int16 *)v150 + 8);
          }
          else if (v162 == 130)
          {
            v163 = *(unsigned int *)(v150 + 10);
            v164 = *(_DWORD *)(v150 + 14);
            v165 = (WTF::AtomStringImpl *)*(unsigned int *)(v150 + 18);
            v166 = *(unsigned int *)(v150 + 22);
            v167 = *(_DWORD *)(v150 + 30);
          }
          else
          {
            v163 = v150[3];
            v164 = ((v150[4] >> 3) | (v150[4] << 20) | (v150[4] << 9)) & 0x100C0F | ((((v150[4] & 0x80) >> 7) & 1) << 30);
            v165 = (WTF::AtomStringImpl *)v150[5];
            v166 = v150[6];
            v167 = v150[8];
          }
          v168 = *(_QWORD *)(a1 + 136);
          v169 = *(unsigned __int16 *)(v168 + 52);
          if (!*(_WORD *)(v168 + 52))
            v169 = *(_DWORD *)(v168 + 200);
          v170 = ((v168 + v169 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v167;
          *(_QWORD *)(v170 + 16) = v166;
          v171 = (_QWORD *)(v170 + 16);
          *(_DWORD *)v170 = v164;
          *(_QWORD *)(v170 + 8) = 0;
          v172 = (_QWORD *)(v170 + 8);
          if ((v164 & 0x3FF) == 4)
          {
            *(_DWORD *)v170 = v164 & 0x7FFFFC00 | 3;
            v53 = v620;
            v54 = v621;
            goto LABEL_216;
          }
          v173 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 104);
          if (v173)
          {
            v174 = *v173;
            if (v174 > v163)
            {
              v175 = &v173[2 * v163];
              goto LABEL_252;
            }
          }
          else
          {
            LODWORD(v174) = 0;
          }
          v254 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120))
                            + 48);
          if (*v254 <= (v163 - v174))
          {
            __break(0xC471u);
            JUMPOUT(0x198151AECLL);
          }
          v175 = &v254[2 * (v163 - v174)];
LABEL_252:
          v43 = (JSC::VM ***)(a1 + 8);
          JSC::JSScope::abstractResolve(*v618, v165, a5, (uint64_t)(v175 + 2), 0, v164 & 0x3FF, 2, a8, (uint64_t)&v638);
          v176 = v164 & 0x7FFFFC00;
          if (v638.i32[0] == 5)
            v177 = v176 | 3;
          else
            v177 = v638.i32[0] | v176;
          *(_DWORD *)v170 = v177;
          if (v638.i32[0] <= 8u && ((1 << v638.i8[0]) & 0x186) != 0)
          {
            *v172 = v640;
            v54 = v621;
          }
          else
          {
            v54 = v621;
            if (v639.n128_u64[0])
            {
              *v172 = v639.n128_u64[0];
              if (*((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
            }
          }
          *v171 = v641;
          v141 = (WTF::StringImpl *)v642[0];
          v642[0] = 0;
          v53 = v620;
          if (!v141)
            goto LABEL_216;
          goto LABEL_214;
        case 27:
          v214 = *v150;
          if (v214 == 128)
          {
            v215 = *((unsigned __int16 *)v150 + 2);
            v296 = *((__int16 *)v150 + 3);
            if (v296 <= 63)
              v217 = *((__int16 *)v150 + 3);
            else
              v217 = v296 + 1073741760;
            v218 = ((*((unsigned __int16 *)v150 + 4) >> 3) | (*((unsigned __int16 *)v150 + 4) << 20)) & 0x10000F | (((*((unsigned __int16 *)v150 + 4) >> 1) & 3) << 10) & 0xBFFFFFFF | (((*((unsigned __int16 *)v150 + 4) >> 7) & 1) << 30);
            v219 = *((unsigned __int16 *)v150 + 5);
            v220 = *((unsigned __int16 *)v150 + 6);
            v221 = *((unsigned __int16 *)v150 + 7);
          }
          else if (v214 == 130)
          {
            v215 = *(unsigned int *)(v150 + 6);
            v217 = *(_DWORD *)(v150 + 10);
            v218 = *(_DWORD *)(v150 + 14);
            v219 = *(_DWORD *)(v150 + 18);
            v220 = *(unsigned int *)(v150 + 22);
            v221 = *(_DWORD *)(v150 + 26);
          }
          else
          {
            v215 = v150[2];
            v216 = (char)v150[3];
            if (v216 <= 15)
              v217 = (char)v150[3];
            else
              v217 = v216 + 1073741808;
            v218 = ((v150[4] >> 3) | (v150[4] << 20) | (v150[4] << 9)) & 0x100C0F | ((((v150[4] & 0x80) >> 7) & 1) << 30);
            v219 = v150[5];
            v220 = v150[6];
            v221 = v150[7];
          }
          v222 = *(_QWORD *)(a1 + 136);
          v223 = *(unsigned __int16 *)(v222 + 54);
          if (!*(_WORD *)(v222 + 54))
            v223 = *(_DWORD *)(v222 + 204);
          v615 = (v222 + v223 + 7) & 0xFFFFFFFFFFFFFFF8;
          v224 = v615 + 24 * v221;
          *(_DWORD *)v224 = v218;
          *(_QWORD *)(v224 + 16) = v220;
          v225 = (_QWORD *)(v224 + 16);
          if ((v218 & 0x3FF) == 4)
          {
            if (v215 == 0xFFFFFFFF)
            {
              *(_QWORD *)(v615 + 24 * v221 + 8) = 0;
              v53 = v620;
              v54 = v621;
              v43 = (JSC::VM ***)(a1 + 8);
              goto LABEL_216;
            }
            v53 = v620;
            if (*(unsigned int *)(a1 + 172) <= (unint64_t)(int)v219)
            {
              __break(0xC471u);
              JUMPOUT(0x198152CC0);
            }
            v226 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v219);
            v227 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 104);
            v614 = v221;
            if (v227)
            {
              v228 = *v227;
              v54 = v621;
              if (v228 > v215)
              {
                v229 = &v227[2 * v215];
                goto LABEL_316;
              }
            }
            else
            {
              LODWORD(v228) = 0;
              v54 = v621;
            }
            v273 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120))
                              + 48);
            if (*v273 <= (v215 - v228))
            {
              __break(0xC471u);
              JUMPOUT(0x198151D20);
            }
            v229 = &v273[2 * (v215 - v228)];
LABEL_316:
            v230 = v229 + 2;
            v231 = (unsigned __int8 *)(v226 + 20);
            if (__ldaxr((unsigned __int8 *)(v226 + 20)))
            {
              __clrex();
              goto LABEL_318;
            }
            if (__stxr(1u, v231))
LABEL_318:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v226 + 20);
            v233 = *(_QWORD *)(v226 + 8);
            if (v233)
            {
              v234 = *(_QWORD *)v230;
              v235 = *(_DWORD *)(*(_QWORD *)v230 + 16);
              if ((v235 & 0x20) != 0)
                v235 = *(_DWORD *)(v234 + 32);
              v236 = *(_DWORD *)(v233 - 8);
              v237 = v236 & (v235 >> 8);
              v238 = *(_QWORD *)(v233 + 16 * v237);
              if (v238 == v234)
              {
LABEL_326:
                v240 = v233 + 16 * v237;
              }
              else
              {
                v239 = 1;
                while (v238)
                {
                  v237 = ((_DWORD)v237 + v239) & v236;
                  v238 = *(_QWORD *)(v233 + 16 * v237);
                  ++v239;
                  if (v238 == v234)
                    goto LABEL_326;
                }
                v240 = v233 + 16 * *(unsigned int *)(v233 - 4);
              }
            }
            else
            {
              v240 = 0;
            }
            if ((v218 & 0xFFC00) == 0xC00)
            {
              v450 = v240 + 8;
              JSC::SymbolTableEntry::prepareToWatch((JSC::SymbolTableEntry *)(v240 + 8), a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              v451 = *(_QWORD *)(v226 + 32);
              if (v451)
              {
                if ((*(_QWORD *)v450 & 1) == 0)
                {
                  v452 = *(_QWORD *)(*(_QWORD *)v450 + 8);
                  if (v452)
                  {
                    if (*(_DWORD *)(v451 + 36) > (v217 - 6))
                      *(_QWORD *)(*(_QWORD *)(v451 + 24) + 8 * (v217 - 6)) = v452;
                  }
                }
              }
              goto LABEL_341;
            }
            v241 = *(_QWORD *)(v240 + 8);
            if ((v241 & 0x30) == 0 && BYTE1(dword_1ECF4C240) != 0)
            {
              if ((v241 & 1) != 0)
              {
                v241 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v241 = *(_QWORD *)(v240 + 8) & 0xFFFFFFFFFFFFFFFELL;
                *(_QWORD *)(v241 + 8) = 0;
                *(_QWORD *)(v240 + 8) = v241;
              }
              else if (*(_QWORD *)(v241 + 8))
              {
                goto LABEL_341;
              }
              v243 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (v243)
              {
                v244 = (_BYTE *)(v243 + 8488);
                *(_BYTE *)(v243 + 8488) = 1;
                v245 = *(unsigned int *)(v243 + 8504);
                if ((_DWORD)v245)
                {
                  *(_DWORD *)(v243 + 8504) = v245 - *(_DWORD *)(v243 + 8508);
                  casual = *(_QWORD *)(v243 + 8496) - v245;
                  goto LABEL_337;
                }
                v274 = *(_QWORD *)(v243 + 8528);
                v275 = *(_QWORD *)(v243 + 8512);
                if (v274)
                  goto LABEL_392;
                if (*(_BYTE *)(v243 + 8493) == 6)
                {
                  v465 = *(_DWORD *)(v243 + 8524);
                  v466 = *(unsigned int *)(v243 + 8520);
                  if (v466 < v465)
                  {
                    *(_QWORD *)&v244[8 * v466 + 56] = 0;
                    v467 = (unint64_t *)(v243 + 8 * v466 + 8552);
                    v468 = v465 - 1 - v466;
                    while (v468)
                    {
                      v275 += 1024;
                      v470 = *v467++;
                      v469 = v470;
                      LODWORD(v466) = v466 + 1;
                      --v468;
                      if (v470)
                      {
                        v274 = __rbit64(v469);
                        *(_DWORD *)(v243 + 8520) = v466;
                        *(_QWORD *)(v243 + 8512) = v275;
                        v53 = v620;
                        v54 = v621;
LABEL_392:
                        v276 = __clz(v274);
                        *(_QWORD *)(v243 + 8528) = v274 & ~(0x8000000000000000 >> v276);
                        casual = v275 + 16 * v276;
LABEL_337:
                        *v244 = 0;
LABEL_338:
                        *(_DWORD *)casual = 1;
                        *(_WORD *)(casual + 4) = 0;
                        *(_QWORD *)(casual + 8) = casual + 8;
                        *(_QWORD *)(casual + 16) = casual + 8;
                        v247 = *(_QWORD *)(v241 + 8);
                        *(_QWORD *)(v241 + 8) = casual;
                        if (v247)
                        {
                          do
                          {
                            v248 = __ldaxr((unsigned int *)v247);
                            v249 = v248 - 1;
                          }
                          while (__stlxr(v249, (unsigned int *)v247));
                          if (!v249)
                          {
                            atomic_store(1u, (unsigned int *)v247);
                            v453 = (uint64_t **)(v247 + 8);
                            for (i = *(uint64_t **)(v247 + 8); i != (uint64_t *)v453; i = *v453)
                            {
                              v482 = *i;
                              v481 = (uint64_t *)i[1];
                              *v481 = *i;
                              *(_QWORD *)(v482 + 8) = v481;
                              *i = 0;
                              i[1] = 0;
                            }
                            WTF::fastFree(v247, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
                          }
                        }
                        goto LABEL_341;
                      }
                    }
                    *(_DWORD *)(v243 + 8520) = v465;
                    v53 = v620;
                    v54 = v621;
                  }
                }
                *v244 = 0;
              }
              casual = bmalloc_allocate_casual(24, 1);
              goto LABEL_338;
            }
LABEL_341:
            v250 = *(_QWORD *)(v240 + 8);
            if ((v250 & 1) != 0)
              v251 = 0;
            else
              v251 = *(_QWORD *)(v250 + 8);
            *(_QWORD *)(v615 + 24 * v614 + 8) = v251;
            v252 = __ldxr(v231);
            if (v252 == 1)
            {
              v43 = (JSC::VM ***)(a1 + 8);
              if (!__stlxr(0, v231))
                goto LABEL_216;
            }
            else
            {
              __clrex();
              v43 = (JSC::VM ***)(a1 + 8);
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v226 + 20), 0, a3, a4, (uint64_t)a5, a6, a7, a8);
            goto LABEL_216;
          }
          v281 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 104);
          if (v281)
          {
            v282 = *v281;
            if (v282 > v215)
            {
              v283 = &v281[2 * v215];
              goto LABEL_403;
            }
          }
          else
          {
            LODWORD(v282) = 0;
          }
          v329 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120))
                            + 48);
          if (*v329 <= (v215 - v282))
          {
            __break(0xC471u);
            JUMPOUT(0x198151F94);
          }
          v283 = &v329[2 * (v215 - v282)];
LABEL_403:
          v284 = v615 + 24 * v221;
          *(_QWORD *)(v284 + 8) = 0;
          v285 = (_QWORD *)(v284 + 8);
          v286 = v283 + 2;
          JSC::JSScope::abstractResolve(*v618, (WTF::AtomStringImpl *)v219, a5, (uint64_t)(v283 + 2), 1, v218 & 0x3FF, (v218 >> 10) & 0x3FF, a8, (uint64_t)&v638);
          *(_DWORD *)v224 = v638.i32[0] | v218 & 0x7FF00000 | (((v218 >> 10) & 0x3FF) << 10);
          v53 = v620;
          if (v638.i32[0] > 9u)
            goto LABEL_514;
          if (((1 << v638.i8[0]) & 0x186) != 0)
          {
            *v285 = v640;
            v43 = (JSC::VM ***)(a1 + 8);
            v54 = v621;
          }
          else if (((1 << v638.i8[0]) & 0x208) != 0)
          {
            v331 = v640;
            v43 = (JSC::VM ***)(a1 + 8);
            v54 = v621;
            if (v640)
            {
              v634 = (WTF *)&off_1E3580C90;
              v635 = (unsigned __int8 *)a1;
              v636 = v286;
              if (*(_BYTE *)(v640 + 4) == 1)
              {
                __dmb(0xAu);
                v342 = (uint64_t **)(v331 + 8);
                v341 = *(uint64_t **)(v331 + 8);
                *(_BYTE *)(v331 + 4) = 2;
                v343 = *((_DWORD *)v617 + 229);
                *((_DWORD *)v617 + 229) = v343 + 1;
                if (v341 != (uint64_t *)(v331 + 8))
                {
                  do
                  {
                    v355 = *v341;
                    v354 = (uint64_t *)v341[1];
                    *v354 = *v341;
                    *(_QWORD *)(v355 + 8) = v354;
                    *v341 = 0;
                    v341[1] = 0;
                    JSC::Watchpoint::fire((unint64_t)v341, v617, &v634, a4, (uint64_t)a5, a6, a7, a8, a9.n128_f64[0]);
                    v341 = *v342;
                  }
                  while (*v342 != (uint64_t *)v342);
                  v343 = *((_DWORD *)v617 + 229) - 1;
                }
                *((_DWORD *)v617 + 229) = v343;
                __dmb(0xAu);
                v53 = v620;
              }
              *(_BYTE *)(v331 + 4) = 2;
            }
          }
          else
          {
LABEL_514:
            v43 = (JSC::VM ***)(a1 + 8);
            v54 = v621;
            if (v639.n128_u64[0])
            {
              *v285 = v639.n128_u64[0];
              if (*((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
            }
          }
          *v225 = v641;
          v141 = (WTF::StringImpl *)v642[0];
          v642[0] = 0;
          if (v141)
            goto LABEL_214;
          goto LABEL_216;
        case 28:
          v344 = *v150;
          if (v344 == 128)
          {
            v345 = *((unsigned __int16 *)v150 + 4);
          }
          else if (v344 == 130)
          {
            v345 = *(unsigned int *)(v150 + 14);
          }
          else
          {
            v345 = v150[4];
          }
          v346 = *(_QWORD *)(a1 + 136);
          v347 = *(unsigned __int16 *)(v346 + 56);
          if (!*(_WORD *)(v346 + 56))
            v347 = *(_DWORD *)(v346 + 208);
LABEL_530:
          *(_QWORD *)(((v346 + v347 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v345) = 0;
          goto LABEL_216;
        case 29:
          v198 = *v150;
          if (v198 == 128)
          {
            LODWORD(v199) = *((unsigned __int16 *)v150 + 2);
            v200 = *((unsigned __int16 *)v150 + 3);
          }
          else if (v198 == 130)
          {
            LODWORD(v199) = *(_DWORD *)(v150 + 6);
            v200 = *(unsigned int *)(v150 + 10);
          }
          else
          {
            LODWORD(v199) = v150[2];
            v200 = v150[3];
          }
          v201 = *(_QWORD *)(a1 + 136);
          v202 = *(unsigned __int16 *)(v201 + 58);
          if (!*(_WORD *)(v201 + 58))
            v202 = *(_DWORD *)(v201 + 212);
          v203 = (uint64_t *)(((v201 + v202 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v200);
          *v203 = 0;
          v203[1] = 0;
          v204 = *v43;
          v205 = (*v43)[82];
          if (v199 > 5)
          {
            if (v199 >= 0x3E)
              v199 = 62;
            else
              v199 = v199;
          }
          else
          {
            if (*(JSC::JSObject **)(*(_QWORD *)(16 * (*(_DWORD *)v205 & 0xFFFFFFFE) + 0x28) + 656) == v205)
            {
              v206 = 0;
            }
            else
            {
              v515 = WTF::fastMalloc((WTF *)0xB8);
              *(_DWORD *)v515 = 1;
              *(_QWORD *)(v515 + 8) = v515 + 24;
              *(_QWORD *)(v515 + 16) = 20;
              v638 = (int8x16_t)(unint64_t)v515;
              v639.n128_u64[0] = (unint64_t)v617;
              v639.n128_u16[4] = 3;
              JSC::Structure::getPropertyNamesFromStructure((JSC::Structure *)(16 * (*(_DWORD *)v205 & 0xFFFFFFFE)), v617, (uint64_t)&v638, 0, v516, v517, v518, v519);
              v527 = v638.i64[0];
              if (*(_DWORD *)(v638.i64[0] + 20))
              {
                v206 = 0;
                v528 = 0;
                do
                {
                  JSC::JSObject::getDirect(v205, v617, *(_QWORD *)(*(_QWORD *)(v527 + 8) + 8 * v528), v522, v523, v524, v525, v526);
                  if ((v529 & 0xFFFE000000000002) != 0)
                  {
                    v530 = 0;
                  }
                  else if (*(_BYTE *)(v529 + 5) == 26)
                  {
                    v530 = v529;
                  }
                  else
                  {
                    v530 = 0;
                  }
                  if (!v530)
                    ++v206;
                  ++v528;
                }
                while (v528 < *(unsigned int *)(v527 + 20));
              }
              else
              {
                v206 = 0;
              }
              JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)&v638, v520, v521, (uint64_t)v522, v523, v524, v525, v526);
              v43 = (JSC::VM ***)(a1 + 8);
            }
            v199 = (v206 + v199);
            if ((_DWORD)v199)
            {
              v53 = v620;
              if (v199 >= 7)
                v199 = 6;
            }
            else
            {
              v199 = 6;
              v53 = v620;
            }
          }
          v207 = (8 * v199);
          v208 = v207 + 16;
          v209 = *(_QWORD *)((char *)v617 + (((unint64_t)(v207 + 31) >> 1) & 0xFFFFFFF8) + 15024);
          if (v209
            || (v209 = JSC::CompleteSubspace::allocatorForSlow((JSC::VM *)((char *)v617 + 14936), v208, a3, a4, (uint64_t)a5, a6, a7, a8)) != 0)
          {
            v199 = v199 + (((unint64_t)*(unsigned int *)(v209 + 60) - v208) >> 3);
            if (v199 >= 0x3F)
              v199 = 62;
          }
          v210 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(v204 + 246), (JSC::JSGlobalObject *)v204, v205, v199, 0, 0, a7, a8, a9.n128_f64[0]);
          *v203 = v209;
          __dmb(0xAu);
          v203[1] = v210;
          v54 = v621;
          if (v210 && *((_DWORD *)v617 + 190) >= *(unsigned __int8 *)(a1 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v617 + 192, a1);
          goto LABEL_216;
        case 30:
          v269 = *v150;
          if (v269 == 128)
          {
            v270 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v269 == 130)
          {
            v270 = *(unsigned int *)(v150 + 18);
          }
          else
          {
            v270 = v150[5];
          }
          v271 = *(_QWORD *)(a1 + 136);
          v272 = *(unsigned __int16 *)(v271 + 60);
          if (!*(_WORD *)(v271 + 60))
            v272 = *(_DWORD *)(v271 + 216);
LABEL_385:
          *(_QWORD *)(((v271 + v272 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v270) = 0x300000000000000;
          goto LABEL_216;
        case 31:
          v464 = *v150;
          if (v464 == 130)
          {
            v265 = *(_DWORD *)(v150 + 22);
          }
          else if (v464 == 128)
          {
            JSC::OpGetByValWithThis::OpGetByValWithThis(v638.i32, (const unsigned __int16 *)v150 + 1);
            v265 = v639.n128_u32[1];
          }
          else
          {
            v265 = v150[6];
          }
          v266 = *(_QWORD *)(a1 + 136);
          v267 = *(unsigned __int16 *)(v266 + 62);
          if (!*(_WORD *)(v266 + 62))
            v267 = *(_DWORD *)(v266 + 220);
          goto LABEL_377;
        case 32:
          v264 = *v150;
          if (v264 == 128)
          {
            v265 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v264 == 130)
          {
            v265 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v265 = v150[5];
          }
          v266 = *(_QWORD *)(a1 + 136);
          v267 = *(unsigned __int16 *)(v266 + 64);
          if (!*(_WORD *)(v266 + 64))
            v267 = *(_DWORD *)(v266 + 224);
LABEL_377:
          v268 = ((v266 + v267 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v265;
          *(_QWORD *)v268 = 0;
          *(_DWORD *)(v268 + 8) = 0;
          *(_QWORD *)(v268 + 16) = 0;
          goto LABEL_216;
        case 33:
          v418 = *v150;
          if (v418 == 130)
          {
            v419 = *(_DWORD *)(v150 + 18);
          }
          else if (v418 == 128)
          {
            v419 = *((unsigned __int16 *)v150 + 5);
          }
          else
          {
            v419 = v150[5];
          }
          v420 = *(_QWORD *)(a1 + 136);
          v421 = *(unsigned __int16 *)(v420 + 66);
          if (!*(_WORD *)(v420 + 66))
            v421 = *(_DWORD *)(v420 + 228);
          v370 = ((v420 + v421 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v419;
          *(_QWORD *)v370 = 0;
LABEL_583:
          *(_DWORD *)(v370 + 8) = 0;
          *(_DWORD *)(v370 + 16) = 0;
          goto LABEL_216;
        case 34:
          v395 = *v150;
          if (v395 == 130)
          {
            v396 = *(unsigned int *)(v150 + 18);
          }
          else if (v395 == 128)
          {
            v396 = *((unsigned __int16 *)v150 + 5);
          }
          else
          {
            v396 = v150[5];
          }
          v397 = *(_QWORD *)(a1 + 136);
          v398 = *(unsigned __int16 *)(v397 + 68);
          if (!*(_WORD *)(v397 + 68))
            v398 = *(_DWORD *)(v397 + 232);
LABEL_611:
          v399 = ((v397 + v398 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v396;
          *(_DWORD *)v399 = 0;
          *(_QWORD *)(v399 + 8) = 0;
          goto LABEL_216;
        case 35:
          v330 = *v150;
          if (v330 == 128)
          {
            v278 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v330 == 130)
          {
            v278 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v278 = v150[5];
          }
          v279 = *(_QWORD *)(a1 + 136);
          v280 = *(unsigned __int16 *)(v279 + 70);
          if (!*(_WORD *)(v279 + 70))
            v280 = *(_DWORD *)(v279 + 236);
          goto LABEL_397;
        case 36:
          v277 = *v150;
          if (v277 == 128)
          {
            v278 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v277 == 130)
          {
            v278 = *(_DWORD *)(v150 + 18);
          }
          else
          {
            v278 = v150[5];
          }
          v279 = *(_QWORD *)(a1 + 136);
          v280 = *(unsigned __int16 *)(v279 + 72);
          if (!*(_WORD *)(v279 + 72))
            v280 = *(_DWORD *)(v279 + 240);
          goto LABEL_397;
        case 37:
          v356 = *v150;
          if (v356 == 130)
          {
            v278 = *(_DWORD *)(v150 + 14);
          }
          else if (v356 == 128)
          {
            v278 = *((unsigned __int16 *)v150 + 4);
          }
          else
          {
            v278 = v150[4];
          }
          v279 = *(_QWORD *)(a1 + 136);
          v280 = *(unsigned __int16 *)(v279 + 74);
          if (!*(_WORD *)(v279 + 74))
            v280 = *(_DWORD *)(v279 + 244);
LABEL_397:
          v156 = (_DWORD *)(((v279 + v280 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v278);
          goto LABEL_398;
        case 38:
          v353 = *v150;
          if (v353 == 128)
          {
            JSC::OpEnumeratorNext::OpEnumeratorNext(v638.i32, (const unsigned __int16 *)v150 + 1);
            v349 = v639.n128_u32[1];
          }
          else if (v353 == 130)
          {
            v349 = *(unsigned int *)(v150 + 22);
          }
          else
          {
            v349 = v150[6];
          }
          v350 = *(_QWORD *)(a1 + 136);
          v351 = *(unsigned __int16 *)(v350 + 76);
          if (!*(_WORD *)(v350 + 76))
            v351 = *(_DWORD *)(v350 + 248);
          goto LABEL_545;
        case 39:
          v432 = *v150;
          if (v432 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            a9.n128_u64[0] = *(_QWORD *)(v150 + 18);
            v639.n128_u64[0] = a9.n128_u64[0];
            v639.n128_u32[2] = *(_DWORD *)(v150 + 26);
          }
          else
          {
            if (v432 == 128)
              JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty(v638.i32, (const unsigned __int16 *)v150 + 1);
            else
              JSC::OpEnumeratorInByVal::OpEnumeratorInByVal(v638.i32, v150 + 1);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          v349 = v639.n128_u32[2];
          v350 = *(_QWORD *)(a1 + 136);
          v351 = *(unsigned __int16 *)(v350 + 78);
          if (!*(_WORD *)(v350 + 78))
            v351 = *(_DWORD *)(v350 + 252);
          goto LABEL_545;
        case 40:
          JSC::OpEnumeratorHasOwnProperty::decode((int *)v150, (uint64_t)&v638, (int8x8_t)a9.n128_u64[0]);
          v371 = *(_QWORD *)(a1 + 136);
          v372 = *(unsigned __int16 *)(v371 + 80);
          if (!*(_WORD *)(v371 + 80))
            v372 = *(_DWORD *)(v371 + 256);
          v373 = ((v371 + v372 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v639.n128_u32[2];
          *(_QWORD *)v373 = 0;
          *(_DWORD *)(v373 + 8) = 0;
          goto LABEL_216;
        case 41:
          v363 = *v150;
          if (v363 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            a9.n128_u64[0] = *(_QWORD *)(v150 + 18);
            v639.n128_u64[0] = a9.n128_u64[0];
            v639.n128_u8[8] = *(_DWORD *)(v150 + 26);
            v639.n128_u32[3] = *(_DWORD *)(v150 + 30);
          }
          else
          {
            if (v363 == 128)
              JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v638, (const unsigned __int16 *)v150 + 1);
            else
              JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v638, v150 + 1);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          v349 = v639.n128_u32[3];
          v350 = *(_QWORD *)(a1 + 136);
          v351 = *(unsigned __int16 *)(v350 + 82);
          if (!*(_WORD *)(v350 + 82))
            v351 = *(_DWORD *)(v350 + 260);
          goto LABEL_545;
        case 42:
          v292 = *v150;
          if (v292 == 128)
          {
            v293 = *((unsigned __int16 *)v150 + 4);
          }
          else if (v292 == 130)
          {
            v293 = *(unsigned int *)(v150 + 14);
          }
          else
          {
            v293 = v150[4];
          }
          v294 = *(_QWORD *)(a1 + 136);
          v295 = *(unsigned __int16 *)(v294 + 84);
          if (!*(_WORD *)(v294 + 84))
            v295 = *(_DWORD *)(v294 + 264);
          goto LABEL_423;
        case 43:
          v348 = *v150;
          if (v348 == 130)
          {
            v638 = *(int8x16_t *)(v150 + 2);
            a9 = *(__n128 *)(v150 + 18);
            v639 = a9;
          }
          else
          {
            if (v348 == 128)
              JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v638.i32, (const unsigned __int16 *)v150 + 1);
            else
              JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v638.i32, v150 + 1);
            v43 = (JSC::VM ***)(a1 + 8);
            v53 = v620;
            v54 = v621;
          }
          v349 = v639.n128_u32[3];
          v350 = *(_QWORD *)(a1 + 136);
          v351 = *(unsigned __int16 *)(v350 + 86);
          if (!*(_WORD *)(v350 + 86))
            v351 = *(_DWORD *)(v350 + 268);
LABEL_545:
          v156 = (_DWORD *)(((v350 + v351 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v349);
LABEL_398:
          v156[1] = 0;
LABEL_236:
          *v156 = 0;
          v156[2] = 0;
          goto LABEL_216;
        case 44:
          v449 = *v150;
          if (v449 == 130)
          {
            v293 = *(unsigned int *)(v150 + 18);
          }
          else if (v449 == 128)
          {
            v293 = *((unsigned __int16 *)v150 + 5);
          }
          else
          {
            v293 = v150[5];
          }
          v294 = *(_QWORD *)(a1 + 136);
          v295 = *(unsigned __int16 *)(v294 + 88);
          if (!*(_WORD *)(v294 + 88))
            v295 = *(_DWORD *)(v294 + 272);
          goto LABEL_423;
        case 45:
          v352 = *v150;
          if (v352 == 128)
          {
            v293 = *((unsigned __int16 *)v150 + 5);
          }
          else if (v352 == 130)
          {
            v293 = *(unsigned int *)(v150 + 18);
          }
          else
          {
            v293 = v150[5];
          }
          v294 = *(_QWORD *)(a1 + 136);
          v295 = *(unsigned __int16 *)(v294 + 90);
          if (!*(_WORD *)(v294 + 90))
            v295 = *(_DWORD *)(v294 + 276);
LABEL_423:
          *(_DWORD *)(((v294 + v295 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8 * v293) = 0;
          goto LABEL_216;
        case 114:
          if (JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpDebug>(v150) == 3)
            *(_DWORD *)(a1 + 40) |= 1u;
          goto LABEL_216;
        case 118:
          v364 = *v150;
          if (v364 == 128)
          {
            v365 = *((unsigned __int16 *)v150 + 3);
          }
          else if (v364 == 130)
          {
            v365 = *(_DWORD *)(v150 + 10);
          }
          else
          {
            v365 = v150[3];
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 32) & 0x80000000 | v365 & 0x7FFFFFFF;
          goto LABEL_216;
        default:
          goto LABEL_216;
      }
      v497 = v630;
      v498 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::size((unsigned __int8 *)(*v620 + v149));
      v623 = 0;
      *(_QWORD *)v624 = 0;
      v499 = JSC::UnlinkedCodeBlock::typeProfilerExpressionInfoForBytecodeOffset(*(JSC::UnlinkedCodeBlock **)(a1 + 56), (int)v149 + v498 - 1, &v624[1], v624);
      switch(v627)
      {
        case 0:
          v536 = (WTF::StringImpl **)JSC::CodeBlock::identifier((JSC::CodeBlock *)a1, v628);
          JSC::JSScope::abstractResolve(*(JSC::VM ***)(a1 + 8), (WTF::AtomStringImpl *)v626, a5, (uint64_t)v536, 0, v629, 2, v537, (uint64_t)&v638);
          if (v638.i32[0] == 1)
          {
            v545 = (uint64_t)(*v618)[3];
          }
          else
          {
            if (v638.i32[0] == 5 || v638.i32[0] == 3)
              v545 = *(_QWORD *)(v639.n128_u64[1] + 24);
            else
              v545 = 0;
            if (v638.i32[0] == 5)
              v536 = (WTF::StringImpl **)v642;
          }
          if (!v545)
          {
            v500 = -2;
            goto LABEL_938;
          }
          v546 = *v536;
          v547 = (unsigned __int8 *)(v545 + 20);
          v637 = 0;
          v635 = (unsigned __int8 *)(v545 + 20);
          LOBYTE(v636) = 1;
          if (__ldaxr((unsigned __int8 *)(v545 + 20)))
          {
            __clrex();
            goto LABEL_883;
          }
          if (__stxr(1u, v547))
LABEL_883:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v547);
          v637 = 1;
          JSC::SymbolTable::prepareForTypeProfiling(v545);
          v500 = (uint64_t)JSC::SymbolTable::uniqueIDForVariable(v545, (WTF::AtomStringImpl *)&v634, v546, (uint64_t)v617, v549, v550, v551, v552);
          JSC::SymbolTable::globalTypeSetForVariable(v545, (WTF::AtomStringImpl *)&v634, v546, (uint64_t)v617, v553, v554, v555, v556, (unsigned int **)&v622);
          v558 = v622;
          v557 = v623;
          v622 = 0;
          v623 = v558;
          if (v557)
          {
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v557, v538, v539, v540, v541, v542, v543, v544);
            v559 = v622;
            v622 = 0;
            if (v559)
              WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v559, v538, v539, v540, v541, v542, v543, v544);
          }
          if (!v637 || !(_BYTE)v636)
            goto LABEL_938;
          v560 = v635;
          v561 = __ldxr(v635);
          if (v561 == 1)
          {
            if (!__stlxr(0, v635))
            {
LABEL_938:
              v596 = (WTF::StringImpl *)v642[0];
              v642[0] = 0;
              if (v596)
              {
                if (*(_DWORD *)v596 == 2)
                {
                  WTF::StringImpl::~StringImpl(v596, (WTF::AtomStringImpl *)v538, v539, v540, v541, v542, v543, v544);
                  WTF::fastFree(v597, v598, v599, v600, v601, v602, v603, v604);
                }
                else
                {
                  *(_DWORD *)v596 -= 2;
                }
              }
              goto LABEL_808;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v560, 0, v539, v540, v541, v542, v543, v544);
          goto LABEL_938;
        case 1:
          if (*(unsigned int *)(a1 + 172) <= (unint64_t)(int)v626)
          {
            __break(0xC471u);
            JUMPOUT(0x198152CF0);
          }
          v562 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)v626);
          v567 = (WTF::StringImpl **)JSC::CodeBlock::identifier((JSC::CodeBlock *)a1, v628);
          v568 = (unsigned __int8 *)(v562 + 20);
          v639.n128_u8[8] = 0;
          v638.i64[1] = v562 + 20;
          v639.n128_u8[0] = 1;
          if (__ldaxr((unsigned __int8 *)(v562 + 20)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v568))
          {
            goto LABEL_896;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v568);
LABEL_896:
          v639.n128_u8[8] = 1;
          v500 = (uint64_t)JSC::SymbolTable::uniqueIDForVariable(v562, (WTF::AtomStringImpl *)&v638, *v567, (uint64_t)v617, v563, v564, v565, v566);
          JSC::SymbolTable::globalTypeSetForVariable(v562, (WTF::AtomStringImpl *)&v638, *v567, (uint64_t)v617, v570, v571, v572, v573, (unsigned int **)&v634);
          v581 = v634;
          v634 = 0;
          v582 = v623;
          v623 = v581;
          if (v582)
          {
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v582, v574, v575, v576, v577, v578, v579, v580);
            v584 = v634;
            v634 = 0;
            if (v584)
              WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v584, v583, v575, v576, v577, v578, v579, v580);
          }
          if (v639.n128_u8[8] && v639.n128_u8[0])
          {
            v585 = (unsigned __int8 *)v638.i64[1];
            v586 = __ldxr((unsigned __int8 *)v638.i64[1]);
            if (v586 != 1)
            {
              __clrex();
LABEL_951:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v585, 0, v575, v576, v577, v578, v579, v580);
              goto LABEL_808;
            }
            if (__stlxr(0, (unsigned __int8 *)v638.i64[1]))
              goto LABEL_951;
          }
LABEL_808:
          v501 = *((_QWORD *)v617 + 11646);
          v502 = *(_QWORD *)(a3 + 40);
          if (v502)
          {
            v503 = *(_DWORD *)(v502 + 112);
            if (!v503)
            {
              do
                v507 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v507 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              v503 = v507 + 1;
              *(_DWORD *)(v502 + 112) = v507 + 1;
              if (v507 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x198152348);
              }
            }
          }
          else
          {
            v503 = 1;
          }
          TypeLocation = JSC::TypeLocationCache::getTypeLocation((uint64_t *)(v501 + 8), v500, v503, v624[1], v624[0], (uint64_t *)&v623, (uint64_t)v617);
          v505 = (int)a2;
          if (v627 == 4)
            *(_DWORD *)(TypeLocation + 36) = JSC::ScriptExecutable::typeProfilingStartOffset((JSC::ScriptExecutable *)a3);
          if ((v499 & v505) == 1)
            JSC::TypeProfiler::insertNewLocation(*((uint64_t **)v617 + 11646), TypeLocation, a3, a4, (uint64_t)a5, a6, a7, a8);
          *(_QWORD *)(((v495 + v496 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v497) = TypeLocation;
          v506 = v623;
          v623 = 0;
          if (v506)
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v506, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_779:
          v43 = (JSC::VM ***)(a1 + 8);
          v53 = v620;
          v54 = v621;
LABEL_216:
          v56 = *v53;
          v142 = (unsigned __int8 *)(*v53 + v149);
          v143 = *v142;
          v144 = v143;
          if ((v143 | 2) == 0x82)
            v144 = v142[1];
          v145 = v143 == 128;
          if (v143 == 130)
            v145 = 2;
          v146 = v143 == 128 || v143 == 130;
          v147 = JSC::opcodeLengths[v144] << v145;
          if (v146)
            v148 = 2;
          else
            v148 = 1;
          v55 = v148 + v149 + v147;
          if (v55 == v54)
          {
            v52 = *(_QWORD *)(a1 + 56);
            goto LABEL_457;
          }
          break;
        case 2:
        case 3:
          v500 = -2;
          goto LABEL_808;
        case 4:
          if (*(_BYTE *)(a3 + 5) != 12)
          {
            __break(0xC471u);
            JUMPOUT(0x198152D10);
          }
          JSC::FunctionExecutable::returnStatementTypeSet((JSC::FunctionExecutable *)&v638, (JSC::FunctionExecutable *)a3);
          v594 = v623;
          v623 = (WTF *)v638.i64[0];
          if (v594)
            WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v594, v587, v588, v589, v590, v591, v592, v593);
          if ((v499 & 1) == 0)
          {
            v624[0] = JSC::ScriptExecutable::typeProfilingStartOffset((JSC::ScriptExecutable *)a3);
            v624[1] = v624[0];
          }
          v499 = 1;
          v500 = -3;
          goto LABEL_808;
        default:
          v500 = 0;
          goto LABEL_808;
      }
    }
  }
LABEL_457:
  if ((*(_BYTE *)(v52 + 43) & 4) != 0)
    JSC::CodeBlock::insertBasicBlockBoundariesForControlFlowProfiler(a1, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v316 = (WTF *)JSC::CodeBlock::optimizeAfterWarmUp(a1, a9.n128_f64[0]);
  if (byte_1ECF4C346)
    v316 = (WTF *)JSC::CodeBlock::hash((JSC::CodeBlock *)a1);
  if ((_BYTE)dword_1ECF4C270)
  {
    v508 = (WTF::PrintStream *)WTF::dataFile(v316);
    JSC::CodeBlock::dumpBytecode((JSC::CodeBlock *)a1, v508, v509, v510, v511, v512, v513, v514);
  }
  v324 = *(JSC::MetadataTable **)(a1 + 136);
  if (v324)
  {
    v325 = JSC::MetadataTable::sizeInBytesForGC(v324, v317, v318, v319, v320, v321, v322, v323);
    if (v325 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v617 + 192, 0, a1, v325, v320, v321, v322, v323);
  }
  if (HIDWORD(v633))
  {
    v435 = *(JSC::VM **)(a1 + 72);
    v436 = v632;
    v437 = 4 * HIDWORD(v633);
    do
    {
      v438 = *(unsigned int *)v436;
      if (*(_DWORD *)(a1 + 172) <= v438)
      {
        __break(0xC471u);
        JUMPOUT(0x198152D6CLL);
      }
      TemplateObject = JSC::ScriptExecutable::createTemplateObject(v612, (JSC::JSGlobalObject *)*v618, *((JSC::JSTemplateObjectDescriptor **)*v616 + v438));
      if (*((_DWORD *)v435 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v435, (uint64_t)v317, v318, v319, v320, v321, v322, v323))
      {
        break;
      }
      if (*(_DWORD *)(a1 + 172) <= v438)
      {
        __break(0xC471u);
        JUMPOUT(0x198152D74);
      }
      v440 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v438) = TemplateObject;
      if (TemplateObject)
        v441 = ((unint64_t)TemplateObject & 0xFFFE000000000002) == 0;
      else
        v441 = 0;
      if (v441 && *(_DWORD *)(v440 + 760) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath(v440 + 192, a1);
      v436 = (WTF *)((char *)v436 + 4);
      v437 -= 4;
    }
    while (v437);
  }
  if (!*((_DWORD *)v617 + 20))
    goto LABEL_468;
  v463 = *((_DWORD *)v617 + 20);
  if ((v463 & 0x27) != 0 && (v463 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v617 + 64), 7u, v318, v319, v320, v321, v322, v323);
  if (*((_QWORD *)v617 + 2))
    v326 = 0;
  else
LABEL_468:
    v326 = 1;
  if (v631)
    WTF::fastFree(v631 - 16, v317, v318, v319, v320, v321, v322, v323);
  v327 = v632;
  if (v632)
  {
    v632 = 0;
    LODWORD(v633) = 0;
    WTF::fastFree((unint64_t)v327, v317, v318, v319, v320, v321, v322, v323);
  }
  return v326;
}

double JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorNext>(uint64_t a1, unsigned __int8 *a2, int8x8_t a3)
{
  int v3;
  int16x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int v8;
  int v9;
  int v10;

  v3 = *a2;
  if (v3 == 128)
  {
    JSC::OpEnumeratorNext::OpEnumeratorNext((int *)a1, (const unsigned __int16 *)a2 + 1);
  }
  else if (v3 == 130)
  {
    *(_OWORD *)a1 = *(_OWORD *)(a2 + 2);
    v7.i64[0] = *(_QWORD *)(a2 + 18);
    *(_QWORD *)(a1 + 16) = v7.i64[0];
  }
  else
  {
    a3.i32[0] = *(_DWORD *)(a2 + 1);
    v4 = (int16x4_t)vmovl_s8(a3).u64[0];
    v5 = vmovl_s16(v4);
    v6.i64[0] = 0xF0000000FLL;
    v6.i64[1] = 0xF0000000FLL;
    v7 = vbslq_s8((int8x16_t)vcgtq_s32(v5, v6), (int8x16_t)vaddw_s16(vdupq_n_s32(0x3FFFFFF0u), v4), (int8x16_t)v5);
    *(int8x16_t *)a1 = v7;
    v8 = (char)a2[5];
    v9 = v8 + 1073741808;
    v10 = a2[6];
    if (v8 <= 15)
      v9 = (char)a2[5];
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 20) = v10;
  }
  return *(double *)v7.i64;
}

int *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorInByVal>@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(unsigned __int8 *)result;
  if (v2 == 130)
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)result + 2);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)((char *)result + 18);
    *(_DWORD *)(a2 + 24) = *(int *)((char *)result + 26);
  }
  else if (v2 == 128)
  {
    return JSC::OpEnumeratorHasOwnProperty::OpEnumeratorHasOwnProperty((int *)a2, (const unsigned __int16 *)result + 1);
  }
  else
  {
    return JSC::OpEnumeratorInByVal::OpEnumeratorInByVal((int *)a2, (const unsigned __int8 *)result + 1);
  }
  return result;
}

int *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorGetByVal>@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  __int128 v3;

  v2 = *(unsigned __int8 *)result;
  if (v2 == 130)
  {
    v3 = *(_OWORD *)((char *)result + 18);
    *(_OWORD *)a2 = *(_OWORD *)((char *)result + 2);
    *(_OWORD *)(a2 + 16) = v3;
  }
  else if (v2 == 128)
  {
    return JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)a2, (const unsigned __int16 *)result + 1);
  }
  else
  {
    return JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)a2, (const unsigned __int8 *)result + 1);
  }
  return result;
}

int8x8_t *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByVal>(int8x8_t *result, unsigned __int8 *a2)
{
  int v2;
  int32x2_t v3;
  int v4;
  int v5;
  __int32 v6;
  int32x2_t v7;
  int v8;
  int v9;

  v2 = *a2;
  if (v2 == 128)
  {
    v7.i32[0] = *((__int16 *)a2 + 1);
    v7.i32[1] = *((__int16 *)a2 + 2);
    *result = vbsl_s8((int8x8_t)vcgt_s32(v7, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v7, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v7);
    v8 = *((__int16 *)a2 + 3);
    v9 = v8 + 1073741760;
    if (v8 <= 63)
      v9 = *((__int16 *)a2 + 3);
    result[1].i32[0] = v9;
    result[1].i8[4] = a2[8];
    v6 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v2 == 130)
  {
    *result = *(int8x8_t *)(a2 + 2);
    result[1].i32[0] = *(_DWORD *)(a2 + 10);
    result[1].i8[4] = *(_DWORD *)(a2 + 14);
    v6 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v3.i32[0] = (char)a2[1];
    v3.i32[1] = (char)a2[2];
    *result = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = (char)a2[3];
    v5 = v4 + 1073741808;
    if (v4 <= 15)
      v5 = (char)a2[3];
    result[1].i32[0] = v5;
    result[1].i8[4] = a2[4];
    v6 = a2[5];
  }
  result[2].i32[0] = v6;
  return result;
}

int8x8_t *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByValDirect>(int8x8_t *result, unsigned __int8 *a2)
{
  int v2;
  int32x2_t v3;
  int v4;
  int v5;
  __int32 v6;
  int32x2_t v7;
  int v8;
  int v9;

  v2 = *a2;
  if (v2 == 128)
  {
    v3.i32[0] = *((__int16 *)a2 + 1);
    v3.i32[1] = *((__int16 *)a2 + 2);
    *result = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v3);
    v4 = *((__int16 *)a2 + 3);
    v5 = v4 + 1073741760;
    if (v4 <= 63)
      v5 = *((__int16 *)a2 + 3);
    result[1].i32[0] = v5;
    result[1].i8[4] = a2[8];
    v6 = *((unsigned __int16 *)a2 + 5);
  }
  else if (v2 == 130)
  {
    *result = *(int8x8_t *)(a2 + 2);
    result[1].i32[0] = *(_DWORD *)(a2 + 10);
    result[1].i8[4] = *(_DWORD *)(a2 + 14);
    v6 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    v7.i32[0] = (char)a2[1];
    v7.i32[1] = (char)a2[2];
    *result = vbsl_s8((int8x8_t)vcgt_s32(v7, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v7, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v7);
    v8 = (char)a2[3];
    v9 = v8 + 1073741808;
    if (v8 <= 15)
      v9 = (char)a2[3];
    result[1].i32[0] = v9;
    result[1].i8[4] = a2[4];
    v6 = a2[5];
  }
  result[2].i32[0] = v6;
  return result;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorPutByVal>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *result;
  if (v2 == 130)
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 2);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 18);
    *(_BYTE *)(a2 + 24) = *(_DWORD *)(result + 26);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 30);
  }
  else if (v2 == 128)
  {
    return (unsigned __int8 *)JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal(a2, (const unsigned __int16 *)result + 1);
  }
  else
  {
    return (unsigned __int8 *)JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal(a2, result + 1);
  }
  return result;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCallDirectEval>@<X0>(unsigned __int8 *result@<X0>, int8x8_t *a2@<X8>)
{
  int v2;
  int32x2_t v3;
  int32x2_t v4;
  __int32 v5;
  __int32 v6;

  v2 = *result;
  if (v2 == 130)
    return (unsigned __int8 *)JSC::OpCallDirectEval::OpCallDirectEval((uint64_t)a2, (const unsigned int *)(result + 2));
  if (v2 == 128)
    return (unsigned __int8 *)JSC::OpCallDirectEval::OpCallDirectEval((uint64_t)a2, (const unsigned __int16 *)result + 1);
  v3.i32[0] = (char)result[1];
  v3.i32[1] = (char)result[2];
  v4 = vdup_n_s32(0x3FFFFFF0u);
  *a2 = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, v4), (int8x8_t)v3);
  v5 = result[4];
  a2[1].i32[0] = result[3];
  a2[1].i32[1] = v5;
  v3.i32[0] = (char)result[5];
  v3.i32[1] = (char)result[6];
  a2[2] = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, v4), (int8x8_t)v3);
  a2[3].i8[0] = result[7];
  v6 = result[9];
  a2[3].i32[1] = result[8];
  a2[4].i32[0] = v6;
  return result;
}

uint64_t JSC::CodeBlock::identifier(JSC::CodeBlock *this, unsigned int a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  _DWORD *v6;

  v3 = *(unsigned int **)(*((_QWORD *)this + 7) + 104);
  if (v3)
  {
    v4 = *v3;
    if (*v3 > a2)
      return (uint64_t)&v3[2 * a2 + 2];
  }
  else
  {
    v4 = 0;
  }
  v6 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15)) + 48);
  if (*v6 > a2 - v4)
    return (uint64_t)&v6[2 * (a2 - v4) + 2];
  result = 146;
  __break(0xC471u);
  return result;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::size(unsigned __int8 *a1)
{
  int v1;
  int v2;
  char v3;
  _BOOL4 v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v1 = *a1;
  v2 = v1;
  if ((v1 | 2) == 0x82)
    v2 = a1[1];
  v3 = v1 == 128;
  if (v1 == 130)
    v3 = 2;
  v4 = v1 == 128 || v1 == 130;
  v5 = (unint64_t)JSC::opcodeLengths[v2] << v3;
  v6 = !v4;
  v7 = 1;
  if (!v6)
    v7 = 2;
  return v5 + v7;
}

uint64_t JSC::FunctionExecutable::returnStatementTypeSet(JSC::FunctionExecutable *this, JSC::FunctionExecutable *a2)
{
  uint64_t *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  unsigned int v13;

  v3 = (uint64_t *)*((_QWORD *)a2 + 9);
  if (!v3)
    v3 = (uint64_t *)JSC::FunctionExecutable::ensureRareDataSlow(a2);
  result = *v3;
  if (*v3)
    goto LABEL_10;
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 4) = 0;
  *(_QWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 28) = 0;
  v12 = (WTF *)*v3;
  *v3 = result;
  if (!v12
    || (WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(v12, v5, v6, v7, v8, v9, v10, v11),
        (result = *v3) != 0))
  {
LABEL_10:
    do
      v13 = __ldaxr((unsigned int *)result);
    while (__stlxr(v13 + 1, (unsigned int *)result));
  }
  *(_QWORD *)this = result;
  return result;
}

unint64_t JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpDebug>(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  v1 = *a1;
  if (v1 == 128)
  {
    v2 = *((unsigned __int16 *)a1 + 1);
    v3 = a1[4];
  }
  else
  {
    if (v1 != 130)
    {
      v2 = a1[1];
      v4 = a1[2] & 1;
      return v2 | (unint64_t)(v4 << 32);
    }
    v2 = *(_DWORD *)(a1 + 2);
    v3 = a1[6];
  }
  v4 = v3 != 0;
  return v2 | (unint64_t)(v4 << 32);
}

uint64_t JSC::CodeBlock::insertBasicBlockBoundariesForControlFlowProfiler(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  int32x2_t **v45;
  uint64_t v46;
  uint64_t v48;
  int32x2_t *v49;
  uint64_t v50;
  int32x2_t v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  int32x2_t **v55;
  uint64_t v56;
  uint64_t v58;
  int32x2_t *v59;
  uint64_t v60;
  int32x2_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  char v67;
  _DWORD v68[2];
  _QWORD v69[3];
  int v70;

  v63 = *(_QWORD *)(*(_QWORD *)(this + 56) + 152);
  if (v63)
  {
    v8 = *(unsigned int **)(v63 + 32);
    if (v8)
    {
      v9 = *v8;
      if ((_DWORD)v9)
      {
        v10 = (_QWORD *)this;
        v11 = 0;
        v62 = *v8;
        do
        {
          v12 = *(unsigned int **)(v63 + 32);
          v13 = *v12;
          if (*v12 <= v11)
          {
LABEL_92:
            __break(0xC471u);
            JUMPOUT(0x198153948);
          }
          v14 = v12 + 1;
          v15 = **(_QWORD **)(v10[7] + 80);
          v16 = (unsigned __int8 *)(v15 + v14[v11]);
          v17 = *v16;
          v18 = v17;
          if ((v17 | 2) == 0x82)
            v18 = v16[1];
          if (v18 != 21)
          {
            __break(0xC471u);
            JUMPOUT(0x198153968);
          }
          if (v17 == 128)
          {
            v19 = *((unsigned __int16 *)v16 + 1);
            v20 = *((unsigned __int16 *)v16 + 2);
          }
          else if (v17 == 130)
          {
            v19 = *(_DWORD *)(v16 + 2);
            v20 = *(unsigned int *)(v16 + 6);
          }
          else
          {
            v19 = v16[1];
            v20 = v16[2];
          }
          v21 = v10[17];
          v22 = *(unsigned __int16 *)(v21 + 42);
          if (!*(_WORD *)(v21 + 42))
            v22 = *(_DWORD *)(v21 + 180);
          if (++v11 >= v9)
          {
            v27 = v10[8];
            v28 = *(_DWORD *)(v27 + 52) - 1;
            if (v28 < v19)
              v19 = *(_DWORD *)(v27 + 52) - 1;
          }
          else
          {
            if (v13 <= v11)
            {
              __break(0xC471u);
              JUMPOUT(0x198153988);
            }
            v23 = (unsigned __int8 *)(v15 + v14[v11]);
            v24 = *v23;
            v25 = v24;
            if ((v24 | 2) == 0x82)
              v25 = v23[1];
            if (v25 != 21)
            {
              __break(0xC471u);
              JUMPOUT(0x1981539A8);
            }
            if (v24 == 128)
            {
              v26 = *((unsigned __int16 *)v23 + 1);
            }
            else if (v24 == 130)
            {
              v26 = *(_DWORD *)(v23 + 2);
            }
            else
            {
              v26 = v23[1];
            }
            if (v26 <= v19)
            {
              v41 = *(_QWORD *)(v10[9] + 93280) + 8;
              goto LABEL_84;
            }
            v28 = v26 - 1;
            v27 = v10[8];
          }
          v29 = *(uint64_t **)(v10[9] + 93280);
          v30 = *(_QWORD *)(v27 + 40);
          if (v30)
          {
            v31 = *(_DWORD *)(v30 + 112);
            if (!v31)
            {
              do
                v32 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v32 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              v33 = __CFADD__(v32, 1);
              v31 = v32 + 1;
              *(_DWORD *)(v30 + 112) = v31;
              if (v33)
                goto LABEL_92;
            }
          }
          else
          {
            v31 = 1;
          }
          v70 = v31;
          v66[0] = 0;
          WTF::HashMap<unsigned int,WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>>(v29, &v70, v66, a4, a5, a6, a7, a8, (uint64_t)v69);
          if (v66[0])
            WTF::fastFree(v66[0] - 16, v34, v35, v36, v37, v38, v39, v40);
          v68[0] = v19;
          v68[1] = v28;
          this = (uint64_t)WTF::HashMap<JSC::BasicBlockKey,JSC::BasicBlockLocation *,WTF::DefaultHash<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockKey>,WTF::HashTraits<JSC::BasicBlockLocation *>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t *)(v69[0] + 8), v68, (uint64_t)v66);
          v64 = v21;
          v65 = v20;
          if (v67)
          {
            this = WTF::fastMalloc((WTF *)0x20);
            v41 = this;
            *(_DWORD *)this = v19;
            *(_DWORD *)(this + 4) = v28;
            *(_QWORD *)(this + 16) = 0;
            *(_QWORD *)(this + 24) = 0;
            *(_QWORD *)(this + 8) = 0;
            *(_QWORD *)(v66[0] + 8) = this;
          }
          else
          {
            v41 = *(_QWORD *)(v66[0] + 8);
          }
          v42 = 0;
          v43 = (unsigned int *)v10[22];
          if (v43)
            v44 = v43 + 2;
          else
            v44 = 0;
          if (v43)
            v42 = (uint64_t)&v43[2 * *v43 + 2];
          if (v44 != (unsigned int *)v42)
          {
            v45 = (int32x2_t **)(v41 + 8);
            do
            {
              v46 = *(_QWORD *)&vzip1_s32(*(int32x2_t *)(*(_QWORD *)(*(_QWORD *)v44 + 88) + 16), *(int32x2_t *)(*(_QWORD *)(*(_QWORD *)v44 + 88) + 40)) & 0x7FFFFFFF7FFFFFFFLL;
              if ((int)v46 >= v19 && SHIDWORD(v46) <= v28)
              {
                v69[0] = v46;
                v48 = *(unsigned int *)(v41 + 20);
                if ((_DWORD)v48)
                {
                  v49 = *v45;
                  v50 = *(unsigned int *)(v41 + 20);
                  while (1)
                  {
                    v51 = vceq_s32(*v49, (int32x2_t)v46);
                    if ((v51.i32[0] & v51.i32[1] & 1) != 0)
                      break;
                    ++v49;
                    if (!--v50)
                      goto LABEL_56;
                  }
                }
                else
                {
LABEL_56:
                  if ((_DWORD)v48 == *(_DWORD *)(v41 + 16))
                  {
                    this = WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41 + 8, v48 + 1, (unint64_t)v69);
                    v48 = *(unsigned int *)(v41 + 20);
                    *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v48) = *(_QWORD *)this;
                  }
                  else
                  {
                    (*v45)[v48] = (int32x2_t)v46;
                  }
                  *(_DWORD *)(v41 + 20) = v48 + 1;
                }
              }
              v44 += 2;
            }
            while (v44 != (unsigned int *)v42);
          }
          v52 = 0;
          v53 = (unsigned int *)v10[23];
          if (v53)
            v54 = v53 + 2;
          else
            v54 = 0;
          if (v53)
            v52 = (uint64_t)&v53[2 * *v53 + 2];
          if (v54 != (unsigned int *)v52)
          {
            v55 = (int32x2_t **)(v41 + 8);
            do
            {
              v56 = *(_QWORD *)&vzip1_s32(*(int32x2_t *)(*(_QWORD *)(*(_QWORD *)v54 + 88) + 16), *(int32x2_t *)(*(_QWORD *)(*(_QWORD *)v54 + 88) + 40)) & 0x7FFFFFFF7FFFFFFFLL;
              if ((int)v56 >= v19 && SHIDWORD(v56) <= v28)
              {
                v69[0] = v56;
                v58 = *(unsigned int *)(v41 + 20);
                if ((_DWORD)v58)
                {
                  v59 = *v55;
                  v60 = *(unsigned int *)(v41 + 20);
                  while (1)
                  {
                    v61 = vceq_s32(*v59, (int32x2_t)v56);
                    if ((v61.i32[0] & v61.i32[1] & 1) != 0)
                      break;
                    ++v59;
                    if (!--v60)
                      goto LABEL_77;
                  }
                }
                else
                {
LABEL_77:
                  if ((_DWORD)v58 == *(_DWORD *)(v41 + 16))
                  {
                    this = WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41 + 8, v58 + 1, (unint64_t)v69);
                    v58 = *(unsigned int *)(v41 + 20);
                    *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8 * v58) = *(_QWORD *)this;
                  }
                  else
                  {
                    (*v55)[v58] = (int32x2_t)v56;
                  }
                  *(_DWORD *)(v41 + 20) = v58 + 1;
                }
              }
              v54 += 2;
            }
            while (v54 != (unsigned int *)v52);
          }
          v9 = v62;
          v21 = v64;
          v20 = v65;
LABEL_84:
          *(_QWORD *)(((v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * v20) = v41;
        }
        while (v11 != v9);
      }
    }
  }
  return this;
}

void JSC::CodeBlock::setupWithUnlinkedBaselineCode(uint64_t a1, uint64_t (**a2)(JSC::JSString *this), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v9)(JSC::JSString *);
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned int *v16;
  uint64_t (**v17)(JSC::JSString *);
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  JSC::CodeBlock *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  _UNKNOWN *__ptr32 *v29;
  uint64_t v30;
  uint64_t v31;
  uint8x8_t v32;
  uint64_t (**v33)(JSC::JSString *);
  uint64_t (*v34)(JSC::JSString *);
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  char *v40;
  char v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::InlineCacheHandler *v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t (*v55)(JSC::JSString *);
  int v56;
  uint64_t (**v57)(JSC::JSString *);
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  uint64_t (*v74)(JSC::JSString *);
  uint64_t v75;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (**v83)(JSC::JSString *);
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (**v90)(JSC::JSString *);
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t (**v100)(JSC::JSString *);
  uint64_t (*v101)(JSC::JSString *);
  char v102;
  uint64_t (**v103)(JSC::JSString *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  JSC::InlineCacheHandler *v116;
  uint64_t (**v117)(JSC::JSString *);
  uint64_t (**v118)(JSC::JSString *);
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (**v128)(JSC::JSString *);
  double NonHandlerSlowPath;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::InlineCacheHandler *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  char *v153;
  JSC::ExecutableMemoryHandle *v154;
  uint64_t v155;
  int v156;

  v9 = *a2;
  v10 = (unsigned int *)((char *)*a2 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if (*((_BYTE *)v9 + 13) != 1)
  {
    v12 = *(_QWORD *)(a1 + 72);
    v13 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 128))(v9);
    if (v13 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v12 + 192, 0, a1, v13, a5, a6, a7, a8);
  }
  v14 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
LABEL_9:
  __dmb(0xAu);
  v16 = *(unsigned int **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v9;
  v17 = a2;
  if (v16)
  {
    v18 = v16 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 32))(v16);
      v17 = a2;
    }
  }
  v21 = __ldxr(v14);
  if (v21 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, a3, (uint64_t)v17, a5, a6, a7, a8);
  v17 = a2;
LABEL_19:
  v22 = *(_QWORD *)(a1 + 224);
  if (v22)
  {
    v35 = 0;
    v38 = *(_QWORD *)(a1 + 120);
    LODWORD(v34) = 24;
    goto LABEL_114;
  }
LABEL_20:
  while (1)
  {
    v23 = (unsigned int *)*((_QWORD *)*v17 + 10);
    v24 = v23 ? (JSC::CodeBlock *)*v23 : 0;
    v25 = (_DWORD *)*((_QWORD *)*v17 + 15);
    v26 = v25 ? *v25 : 0;
    v150 = WTF::fastMalloc((WTF *)(8 * v26 + 136 * v24 + 24));
    v27 = (unsigned int *)(v150 + 136 * v24);
    v151 = v24;
    JSC::BaselineJITData::BaselineJITData((JSC::BaselineJITData *)v27, v24, v26, (JSC::CodeBlock *)a1);
    v33 = a2;
    v34 = *a2;
    v35 = *((_QWORD *)*a2 + 10);
    if (!v35 || !*(_DWORD *)v35)
      break;
    v36 = 0;
    v37 = 40;
    v28 = 0x3FFFFFFFLL;
    v17 = off_1E3580EC8;
    while (1)
    {
      v38 = *v27;
      if (v36 >= v38)
        break;
      v39 = (_DWORD *)(v35 + 40 * v36);
      v41 = *((_BYTE *)v39 + 8);
      v40 = (char *)(v39 + 2);
      v38 = ~v36;
      v42 = &v27[34 * ~v36];
      v43 = *(_QWORD *)(a1 + 72);
      *((_BYTE *)v42 + 122) = v41;
      *((_QWORD *)v42 + 4) = *((_QWORD *)v40 + 2);
      *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 1);
      *((_QWORD *)v42 + 7) = *(_QWORD *)(a1 + 8);
      v42[28] = *((_DWORD *)v40 + 8) >> 2;
      v44 = *((unsigned int *)v40 + 8);
      if ((_DWORD)v44 == -1 || (_DWORD)v44 == 0x3FFFFFFF)
      {
        v46 = 0;
        v47 = 2;
      }
      else if (v44 >> 28)
      {
        v118 = v17;
        v119 = WTF::fastMalloc((WTF *)0x10);
        v29 = &jpt_198153C94;
        v17 = v118;
        v28 = 0x3FFFFFFFLL;
        v37 = 40;
        v33 = a2;
        v46 = v119;
        *(_QWORD *)v119 = 0;
        *(_DWORD *)(v119 + 8) = v44;
        v47 = 1;
      }
      else
      {
        v47 = 0;
        v46 = v44 << 36;
      }
      v48 = *(_QWORD *)v42;
      if ((*(_QWORD *)v42 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
      {
        v103 = v17;
        WTF::fastFree(v48 & 0xFFFFFFFF8, (void *)0x3FFFFFFF, 0xFF00FFFC0000, (uint64_t)v17, 255, 1, (uint64_t)v29, v30);
        v29 = &jpt_198153C94;
        v17 = v103;
        v28 = 0x3FFFFFFFLL;
        v37 = 40;
        v33 = a2;
      }
      *(_QWORD *)v42 = v46 | v47;
      v35 = BYTE6(qword_1ECF4C780);
      if (!BYTE6(qword_1ECF4C780))
      {
        v128 = v17;
        NonHandlerSlowPath = JSC::InlineCacheHandler::createNonHandlerSlowPath(*((_QWORD *)v40 + 3), (uint64_t *)&v153);
        JSC::StructureStubInfo::replaceHandler((uint64_t)&v27[34 * ~v36], (JSC::CodeBlock *)a1, (uint64_t **)&v153, v130, v131, v132, v133, v134, *(uint8x8_t *)&NonHandlerSlowPath);
        v141 = (JSC::InlineCacheHandler *)v153;
        v153 = 0;
        if (v141)
          WTF::RefCounted<JSC::InlineCacheHandler>::deref(v141, v135, v136, v137, v138, v139, v140, v30, v32);
        *((_QWORD *)v42 + 5) = *((_QWORD *)v40 + 3);
        v33 = a2;
        v37 = 40;
        v28 = 0x3FFFFFFFLL;
        v17 = v128;
        v29 = &jpt_198153C94;
        goto LABEL_44;
      }
      v49 = *((char *)v42 + 122);
      if (v49 >= 0x1FuLL)
        break;
      v50 = *(_QWORD *)(*(_QWORD *)(v43 + 90448) + 8 * v49 + 272);
      if (v50)
      {
        ++*(_DWORD *)v50;
      }
      else
      {
        v104 = WTF::fastMalloc((WTF *)0x60);
        *(_DWORD *)v104 = 1;
        *(_QWORD *)(v104 + 4) = 0;
        *(_QWORD *)(v104 + 20) = 0;
        *(_QWORD *)(v104 + 12) = 0;
        *(_DWORD *)(v104 + 28) = -1;
        *(_QWORD *)(v104 + 32) = 0;
        *(_QWORD *)(v104 + 40) = 0;
        *(_DWORD *)(v104 + 48) = 0;
        *(_OWORD *)(v104 + 64) = 0u;
        *(_OWORD *)(v104 + 80) = 0u;
        if (v49 >= 0x1F)
        {
          __break(0xC471u);
          JUMPOUT(0x1981545FCLL);
        }
        v50 = v104;
        JSC::JITThunks::ctiStub(*(_QWORD *)(v43 + 90440), v43, (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3580DD0[v49], v105, v106, v107, v108, v109, &v153);
        v33 = a2;
        v110 = v153 + 4;
        *(_QWORD *)(v50 + 8) = v153;
        *(_QWORD *)(v50 + 16) = v110;
        v111 = (unsigned int *)v154;
        v154 = 0;
        v37 = 40;
        v28 = 0x3FFFFFFFLL;
        v17 = off_1E3580EC8;
        v29 = &jpt_198153C94;
        if (v111)
        {
          do
          {
            v112 = __ldaxr(v111);
            v113 = v112 - 1;
          }
          while (__stlxr(v113, v111));
          if (!v113)
          {
            atomic_store(1u, v111);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v111, 0x3FFFFFFFLL, 0xFF00FFFC0000, (uint64_t)off_1E3580EC8, 255, 1, (uint64_t)&jpt_198153C94, v30);
            WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
            v29 = &jpt_198153C94;
            v17 = off_1E3580EC8;
            v28 = 0x3FFFFFFFLL;
            v37 = 40;
            v33 = a2;
          }
        }
        v114 = *(_QWORD *)(v43 + 90448);
        ++*(_DWORD *)v50;
        v115 = v114 + 8 * v49;
        v116 = *(JSC::InlineCacheHandler **)(v115 + 272);
        *(_QWORD *)(v115 + 272) = v50;
        if (v116)
        {
          if (*(_DWORD *)v116 == 1)
          {
            JSC::InlineCacheHandler::~InlineCacheHandler(v116, (void *)0x3FFFFFFF, 0xFF00FFFC0000, (uint64_t)off_1E3580EC8, 255, 1, (uint64_t)&jpt_198153C94, v30, v32);
            WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
            v29 = &jpt_198153C94;
            v17 = off_1E3580EC8;
            v28 = 0x3FFFFFFFLL;
            v37 = 40;
            v33 = a2;
          }
          else
          {
            --*(_DWORD *)v116;
          }
        }
      }
      v51 = (JSC::InlineCacheHandler *)*((_QWORD *)v42 + 9);
      if ((*(_WORD *)((_BYTE *)v42 + 129) & 0x200) != 0 && BYTE6(qword_1ECF4C780))
      {
        if (v51)
        {
          v81 = *((_QWORD *)v51 + 8);
          if (v81 && (v153 = (char *)a1, (*(_BYTE *)(v81 + 40) & 0x20) != 0))
          {
            v117 = v17;
            WTF::HashCountedSet<JSC::CodeBlock *,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>>::remove((uint64_t *)(v81 + 80), &v153, 0xFF00FFFC0000, (uint64_t)v17, 255, 1, (uint64_t)v29, v30);
            v29 = &jpt_198153C94;
            v17 = v117;
            v28 = 0x3FFFFFFFLL;
            v37 = 40;
            v33 = a2;
            v51 = (JSC::InlineCacheHandler *)*((_QWORD *)v42 + 9);
            *((_QWORD *)v42 + 9) = v50;
            if (v51)
              goto LABEL_105;
          }
          else
          {
            *((_QWORD *)v42 + 9) = v50;
LABEL_105:
            if (*(_DWORD *)v51 == 1)
            {
              v90 = v17;
              JSC::InlineCacheHandler::~InlineCacheHandler(v51, (void *)0x3FFFFFFF, 0xFF00FFFC0000, (uint64_t)v17, 255, 1, (uint64_t)v29, v30, v32);
              WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
              v29 = &jpt_198153C94;
              v17 = v90;
              v28 = 0x3FFFFFFFLL;
              v37 = 40;
              v33 = a2;
              v50 = *((_QWORD *)v42 + 9);
            }
            else
            {
              --*(_DWORD *)v51;
            }
          }
        }
        else
        {
          *((_QWORD *)v42 + 9) = v50;
        }
        v82 = *(_QWORD *)(v50 + 64);
        if (v82)
        {
          v155 = a1;
          if ((*(_BYTE *)(v82 + 40) & 0x20) != 0)
          {
            v156 = 0;
            v83 = v17;
            WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(v82 + 80), &v155, &v156, (uint64_t)v17, 255, 1, (uint64_t)v29, v30, (uint64_t)&v153);
            v29 = &jpt_198153C94;
            v17 = v83;
            v28 = 0x3FFFFFFFLL;
            v37 = 40;
            v33 = a2;
            ++*((_DWORD *)v153 + 2);
          }
        }
        goto LABEL_44;
      }
      *((_QWORD *)v42 + 9) = v50;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
        {
          v57 = v17;
          JSC::InlineCacheHandler::~InlineCacheHandler(v51, (void *)0x3FFFFFFF, 0xFF00FFFC0000, (uint64_t)v17, 255, 1, (uint64_t)v29, v30, v32);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          v29 = &jpt_198153C94;
          v17 = v57;
          v28 = 0x3FFFFFFFLL;
          v37 = 40;
          v33 = a2;
        }
        else
        {
          --*(_DWORD *)v51;
        }
      }
LABEL_44:
      v52 = *(_WORD *)((_BYTE *)v42 + 129) & 0xFFBF | ((v40[1] & 1) << 6);
      *(_WORD *)((char *)v42 + 129) = v52;
      v53 = v52 & 0xFFFFFCFF | (((v40[1] >> 4) & 1) << 8) | 0x200;
      *(_WORD *)((char *)v42 + 129) = v52 & 0xFCFF | (((v40[1] & 0x10) != 0) << 8) | 0x200;
      if ((v40[1] & 0x10) != 0)
        *((_BYTE *)v42 + 127) = 1;
      *((_QWORD *)v42 + 13) = 0xFF00FFFC0000;
      v54 = *v40;
      if (v54 > 0x1E)
        v55 = 0;
      else
        v55 = v17[v54];
      *((_QWORD *)v42 + 6) = v55;
      v56 = *((unsigned __int8 *)v42 + 122);
      switch(*((_BYTE *)v42 + 122))
      {
        case 0:
        case 2:
        case 3:
        case 0x12:
        case 0x1C:
          *((_BYTE *)v42 + 118) = -1;
          *((_WORD *)v42 + 58) = 0;
          *((_BYTE *)v42 + 120) = 1;
          break;
        case 1:
        case 0x19:
        case 0x1A:
          *((_WORD *)v42 + 58) = 0;
          goto LABEL_140;
        case 4:
        case 0x1B:
          *((_WORD *)v42 + 58) = 0;
          *((_BYTE *)v42 + 118) = 1;
          *((_BYTE *)v42 + 120) = 2;
          if (v56 == 4)
            goto LABEL_59;
          break;
        case 5:
          v32 = (uint8x8_t)16908288;
          v42[29] = 16908288;
          *((_WORD *)v42 + 60) = 1027;
          break;
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xF:
        case 0x11:
          *((_BYTE *)v42 + 118) = -1;
          *((_WORD *)v42 + 58) = 1;
          *((_BYTE *)v42 + 120) = 2;
          break;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
          *((_WORD *)v42 + 58) = 512;
          *((_BYTE *)v42 + 118) = 1;
          *((_BYTE *)v42 + 120) = 3;
          if (v56 != 16 && v56 != 14)
            *((_BYTE *)v42 + 121) = 4;
          break;
        case 0x13:
        case 0x14:
        case 0x15:
          *((_WORD *)v42 + 58) = 0;
          *((_BYTE *)v42 + 118) = 1;
          *((_BYTE *)v42 + 120) = 2;
          if (v56 != 19)
            break;
LABEL_59:
          *((_BYTE *)v42 + 121) = 3;
          break;
        case 0x16:
          *(_WORD *)((char *)v42 + 129) = v53 & 0xFFF7;
          *((_WORD *)v42 + 58) = 0;
          *((_BYTE *)v42 + 118) = 1;
          *((_BYTE *)v42 + 120) = 2;
          break;
        case 0x17:
        case 0x18:
          *((_WORD *)v42 + 58) = 0;
          *((_BYTE *)v42 + 118) = -1;
          v102 = 1;
          goto LABEL_141;
        case 0x1D:
        case 0x1E:
          *((_WORD *)v42 + 58) = -256;
LABEL_140:
          *((_BYTE *)v42 + 118) = 1;
          v102 = 2;
LABEL_141:
          *((_BYTE *)v42 + 120) = v102;
          break;
        default:
          break;
      }
      v34 = *v33;
      v35 = *((_QWORD *)*v33 + 10);
      if (v35)
      {
        if (++v36 < *(unsigned int *)v35)
          continue;
      }
      goto LABEL_63;
    }
LABEL_133:
    __break(1u);
LABEL_134:
    v89 = v28;
LABEL_135:
    v101 = v33[v89];
    while (1)
    {
      *(_QWORD *)(v37 + (int)v31 * (uint64_t)(int)v34 + 16) = v101;
      ++v35;
      v22 = *(_QWORD *)(a1 + 224);
      if (!v22)
        break;
LABEL_114:
      v84 = *(unsigned int *)(v22 + 12);
      if (v35 >= v84)
        goto LABEL_20;
      LODWORD(v31) = v35;
      if ((int)v35 >= v84)
      {
        __break(0xC471u);
        JUMPOUT(0x198154604);
      }
      v37 = *(_QWORD *)v22;
      v33 = *(uint64_t (***)(JSC::JSString *))(v38 + 104);
      v87 = *(unsigned int *)(v38 + 112);
      if (v87 >= 2)
      {
        v89 = 0;
        v99 = 4 * *(_DWORD *)(v37 + (int)v35 * (uint64_t)(int)v34 + 8);
        v100 = &v33[v87];
        while (1)
        {
          v85 = v87 - 1;
          v28 = v89 + ((v87 - 1) >> 1);
          v86 = *((_DWORD *)v100 + v28);
          if (v86 == v99)
            goto LABEL_134;
          v87 -= (v85 >> 1) + 1;
          if (v86 <= v99)
          {
            v88 = (v85 >> 1) + 1;
          }
          else
          {
            v87 = v85 >> 1;
            v88 = 0;
          }
          v89 += v88;
          if (v87 <= 1)
            goto LABEL_135;
        }
      }
      v89 = 0;
      v101 = 0;
      if (v33)
        goto LABEL_135;
    }
  }
LABEL_63:
  v35 = 0;
  v38 = 136 * v151 + v150 + 24;
  while (1)
  {
    v66 = (_DWORD *)*((_QWORD *)v34 + 15);
    v67 = v66 ? *v66 : 0;
    if (v35 >= v67)
      break;
    if (*v66 <= v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1981544DCLL);
    }
    v31 = *(_QWORD *)&v66[2 * v35 + 2];
    if (BYTE6(v31) == 1)
    {
      v34 = *(uint64_t (**)(JSC::JSString *))(a1 + 184);
      if (*(_DWORD *)v34 <= v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1981544FCLL);
      }
    }
    else
    {
      if (BYTE6(v31))
        goto LABEL_72;
      v34 = *(uint64_t (**)(JSC::JSString *))(a1 + 176);
      if (*(_DWORD *)v34 <= v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198154030);
      }
    }
    v37 = v27[1];
    if (v35 >= v37)
      goto LABEL_133;
    *(_QWORD *)(v38 + 8 * v35) = *((_QWORD *)v34 + v31 + 1);
    v34 = *v33;
LABEL_72:
    ++v35;
  }
  __dmb(0xAu);
  *(_QWORD *)(a1 + 128) = v27;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 28) & 0x3000) == 0x2000)
  {
    v68 = *(_BYTE *)(a1 + 18) & 3;
    if (v68 == 3)
    {
      v68 = JSC::CodeBlock::computeCapabilityLevel((JSC::CodeBlock *)a1);
      v33 = a2;
      *(_BYTE *)(a1 + 18) = *(_BYTE *)(a1 + 18) & 0xFC | v68;
    }
    if (v68 != 2)
      goto LABEL_84;
    v69 = *(_QWORD *)(a1 + 64);
    v70 = *(unsigned __int8 *)(v69 + 5);
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 56) + 20) & 0x80000000) == 0)
    {
      if (v70 != 12 || (*(_WORD *)(*(_QWORD *)(v69 + 88) + 51) & 0x100) == 0)
      {
        v71 = *(_DWORD *)(a1 + 44);
        v72 = xmmword_1ECF4C4A0;
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    if (v70 == 12 && (*(_WORD *)(*(_QWORD *)(v69 + 88) + 51) & 0x100) != 0)
      goto LABEL_83;
    v71 = *(_DWORD *)(a1 + 44);
    v72 = DWORD2(xmmword_1ECF4C4A0);
LABEL_82:
    if (v71 <= v72)
LABEL_83:
      v73 = (*(_WORD *)(v69 + 70) & 2) == 0;
    else
LABEL_84:
      v73 = 0;
    *(_BYTE *)(a1 + 17) &= v73;
  }
  else
  {
    *(_BYTE *)(a1 + 17) = 0;
  }
  v74 = *v33;
  if (*((_BYTE *)*v33 + 136))
  {
    v75 = *(_QWORD *)(a1 + 56);
    if (!*(_QWORD *)(v75 + 32) && BYTE1(qword_1ECF4C789) != 0)
    {
      *v33 = 0;
      v77 = *(unsigned int **)(v75 + 32);
      *(_QWORD *)(v75 + 32) = v74;
      if (v77)
      {
        v78 = v77 + 2;
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          atomic_store(1u, v77 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 32))(v77);
        }
      }
    }
  }
}

void JSC::CodeBlock::~CodeBlock(JSC::CodeBlock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  JSC::Profiler::Database *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  JSC::CallLinkInfo *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  JSC::StructureStubInfo *i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::DFG::JITData *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  JSC::MetadataTable *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  JSC::CallLinkInfo *v91;
  JSC::CallLinkInfo *v92;
  int v93;
  unsigned int *v94;
  unsigned int v95;
  JSC::DFG::CommonData *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t j;
  uint64_t v108;
  unsigned int *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF::StringImpl *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  JSC::CallLinkInfo *v128[2];

  v10 = *((_QWORD *)this + 9);
  v11 = *((_QWORD *)this + 15);
  if (!v11)
    goto LABEL_15;
  v12 = *(_BYTE *)(v11 + 12);
  if ((v12 & 0xFE) != 2)
    goto LABEL_14;
  v13 = *((_QWORD *)this + 17);
  if (!v13)
    goto LABEL_14;
  v14 = *(unsigned __int16 *)(v13 + 30);
  if (!*(_WORD *)(v13 + 30))
    v14 = *(_DWORD *)(v13 + 156);
  v15 = (unint64_t *)((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = *(unsigned __int16 *)(v13 + 32);
  if (!*(_WORD *)(v13 + 32))
    v16 = *(_DWORD *)(v13 + 160);
  v17 = v13 + v16;
  if (v17 <= (unint64_t)v15)
    goto LABEL_14;
  do
  {
    v18 = *v15;
    if (*v15)
    {
      *v15 = 0;
      WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
    }
    ++v15;
  }
  while ((unint64_t)v15 < v17);
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    v12 = *(_BYTE *)(v11 + 12);
LABEL_14:
    if ((v12 & 0xFE) == 4)
    {
      v94 = (unsigned int *)(v11 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 + 1, v94));
      v96 = (JSC::DFG::CommonData *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
      JSC::DFG::CommonData::clearWatchpoints(v96, v97, v98, v99, v100, v101, v102, v103);
      do
      {
        v104 = __ldaxr(v94);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v94));
      if (!v105)
      {
        atomic_store(1u, (unsigned int *)(v11 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      }
    }
  }
LABEL_15:
  v19 = *(JSC::Profiler::Database **)(v10 + 93016);
  if (v19)
    JSC::Profiler::Database::notifyDestruction(v19, this, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(v10 + 754))
  {
    v20 = *((_QWORD *)this + 17);
    if (v20)
    {
      v21 = *(_QWORD *)(v20 - 16);
      if (v21)
      {
        do
          v22 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v22 + 1, (unsigned int *)v21));
        v23 = *(_BYTE *)(v21 + 4);
        if ((v23 & 0x30) == 0x20)
          *(_BYTE *)(v21 + 4) = v23 & 0xCF;
        do
        {
          v24 = __ldaxr((unsigned int *)v21);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, (unsigned int *)v21));
        if (!v25)
        {
          atomic_store(1u, (unsigned int *)v21);
          if ((*(_BYTE *)(v21 + 4) & 1) != 0)
            WTF::fastFree(*(_QWORD *)(v21 + 16), a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v26 = (JSC::CallLinkInfo *)*((_QWORD *)this + 11);
  if (v26 != (JSC::CodeBlock *)((char *)this + 88))
  {
    *((_QWORD *)v26 + 1) = v128;
    v91 = (JSC::CallLinkInfo *)*((_QWORD *)this + 12);
    v128[0] = v26;
    v128[1] = v91;
    *(_QWORD *)v91 = v128;
    *((_QWORD *)this + 11) = (char *)this + 88;
    *((_QWORD *)this + 12) = (char *)this + 88;
    while (1)
    {
      v92 = v128[0];
      if ((JSC::CallLinkInfo **)v128[0] == v128)
        break;
      v93 = *((unsigned __int8 *)v128[0] + 16);
      if (*((_BYTE *)v128[0] + 16))
      {
        switch(v93)
        {
          case 1:
            JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(v128[0], (JSC::VM *)v10, this, 0, a5, a6, a7, a8, a9);
            break;
          case 2:
            JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(v128[0], (JSC::VM *)v10, (unsigned int **)this, 0);
            break;
          case 3:
            v126 = (_QWORD *)*((_QWORD *)v128[0] + 1);
            if (v126)
            {
              v127 = *(_QWORD *)v128[0];
              *v126 = *(_QWORD *)v128[0];
              *(_QWORD *)(v127 + 8) = v126;
              *(_QWORD *)v92 = 0;
              *((_QWORD *)v92 + 1) = 0;
            }
            *((_QWORD *)v92 + 27) = 0;
            break;
        }
      }
      else
      {
        JSC::CallLinkInfo::unlinkOrUpgradeImpl(v128[0], (JSC::VM *)v10, this, 0, a5, a6, a7, a8, a9);
      }
    }
  }
  v27 = (unsigned int *)*((_QWORD *)this + 15);
  if (v27 && (v27[3] & 0xFE) == 4)
  {
    v28 = v27 + 2;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v30 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v27 + 72))(v27);
    do
    {
      v31 = __ldaxr(v28);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v28));
    if (!v32)
    {
      atomic_store(1u, v27 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 32))(v27);
    }
    for (i = *(JSC::StructureStubInfo **)(v30 + 144); i; i = (JSC::StructureStubInfo *)*((_QWORD *)i + 17))
    {
      JSC::StructureStubInfo::aboutToDie(i, a2, a3, a4, a5, a6, a7, a8);
      JSC::StructureStubInfo::deref(i, v34, v35, v36, v37, v38, v39, v40);
    }
    v41 = *((_QWORD *)this + 15);
    if (!v41)
      goto LABEL_49;
    if ((*(_BYTE *)(v41 + 12) & 0xFE) == 4)
    {
      v42 = (unsigned int *)*((_QWORD *)this + 16);
      if (v42)
      {
        v43 = *v42;
        if ((_DWORD)v43)
        {
          v44 = -34 * v43;
          do
          {
            JSC::StructureStubInfo::aboutToDie((JSC::StructureStubInfo *)&v42[v44], a2, a3, a4, a5, a6, a7, a8);
            JSC::StructureStubInfo::deref((JSC::StructureStubInfo *)&v42[v44], v45, v46, v47, v48, v49, v50, v51);
            v44 += 34;
          }
          while (v44 * 4);
        }
      }
    }
  }
  else
  {
    v52 = (unsigned int *)*((_QWORD *)this + 16);
    if (v52)
    {
      v53 = *v52;
      if ((_DWORD)v53)
      {
        v54 = -34 * v53;
        do
        {
          JSC::StructureStubInfo::aboutToDie((JSC::StructureStubInfo *)&v52[v54], a2, a3, a4, a5, a6, a7, a8);
          JSC::StructureStubInfo::deref((JSC::StructureStubInfo *)&v52[v54], v55, v56, v57, v58, v59, v60, v61);
          v54 += 34;
        }
        while (v54 * 4);
      }
    }
  }
  v62 = *((_QWORD *)this + 15);
  if (!v62 || (*(_BYTE *)(v62 + 12) & 0xFE) != 4)
  {
LABEL_49:
    v63 = (JSC::DFG::JITData *)*((_QWORD *)this + 16);
    if (!v63)
      goto LABEL_54;
    *((_QWORD *)this + 16) = 0;
    v64 = *(unsigned int *)v63;
    if ((_DWORD)v64)
    {
      v65 = -136 * v64;
      do
      {
        JSC::StructureStubInfo::~StructureStubInfo((JSC::DFG::JITData *)((char *)v63 + v65), a2, a3, a4, a5, a6, a7, a8, a9);
        v65 += 136;
      }
      while (v65);
    }
    else
    {
      v64 = 0;
    }
    goto LABEL_53;
  }
  v63 = (JSC::DFG::JITData *)*((_QWORD *)this + 16);
  if (v63)
  {
    *((_QWORD *)this + 16) = 0;
    v64 = *(unsigned int *)v63;
    JSC::DFG::JITData::~JITData(v63, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_53:
    WTF::fastFree((unint64_t)v63 - 136 * v64, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  v66 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v66)
  {
    v67 = *(_QWORD *)(v66 + 16);
    if (v67)
    {
      v115 = *(unsigned int *)(v67 - 4);
      if ((_DWORD)v115)
      {
        v116 = *(WTF::StringImpl ***)(v66 + 16);
        do
        {
          v117 = *v116;
          if (*v116 != (WTF::StringImpl *)-1)
          {
            *v116 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
              {
                WTF::StringImpl::~StringImpl(v117, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
              }
              else
              {
                *(_DWORD *)v117 -= 2;
              }
            }
          }
          v116 += 3;
          --v115;
        }
        while (v115);
      }
      WTF::fastFree(v67 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    v68 = *(_QWORD *)v66;
    if (*(_QWORD *)v66)
    {
      *(_QWORD *)v66 = 0;
      *(_DWORD *)(v66 + 8) = 0;
      WTF::fastFree(v68, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v66, a2, a3, a4, a5, a6, a7, a8);
  }
  v69 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v69)
    WTF::fastFree(v69, a2, a3, a4, a5, a6, a7, a8);
  v70 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v70)
    WTF::fastFree(v70, a2, a3, a4, a5, a6, a7, a8);
  v71 = *((_QWORD *)this + 20);
  if (v71)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v71, a2, a3, a4, a5, a6, a7, a8);
  }
  v72 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v72)
    WTF::fastFree(v72, a2, a3, a4, a5, a6, a7, a8);
  v73 = (JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v73)
  {
    JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder::~LazyValueProfileHolder(v73, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
  }
  v82 = (JSC::MetadataTable *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v82)
  {
    v83 = (unsigned int *)((char *)v82 - 8);
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      JSC::MetadataTable::destroy(v82, (JSC::MetadataTable *)a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  v86 = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v86)
  {
    v87 = v86 + 2;
    do
    {
      v88 = __ldaxr(v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, v87));
    if (!v89)
    {
      atomic_store(1u, v86 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v86 + 32))(v86);
    }
  }
  v90 = *((_QWORD *)this + 14);
  if (v90)
  {
    v106 = *(unsigned int *)(v90 - 4);
    if ((_DWORD)v106)
    {
      for (j = 0; j != v106; ++j)
      {
        if (*(_DWORD *)(v90 + 16 * j) != 1)
        {
          v108 = v90 + 16 * j;
          v109 = *(unsigned int **)(v108 + 8);
          *(_QWORD *)(v108 + 8) = 0;
          if (v109)
          {
            v110 = (uint64_t *)(v109 + 2);
            v111 = *v109;
            if ((_DWORD)v111)
            {
              v112 = 56 * v111;
              do
              {
                v113 = (uint64_t *)v110[1];
                if (v113)
                {
                  v114 = *v110;
                  *v113 = *v110;
                  *(_QWORD *)(v114 + 8) = v113;
                  *v110 = 0;
                  v110[1] = 0;
                }
                v110 += 7;
                v112 -= 56;
              }
              while (v112);
            }
            WTF::fastFree((unint64_t)v109, a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
    }
    WTF::fastFree(v90 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

JSC::CallLinkInfo *JSC::CodeBlock::unlinkOrUpgradeIncomingCalls(JSC::CallLinkInfo *this, JSC::VM *a2, JSC::CodeBlock *a3, uint8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::CallLinkInfo *v9;
  JSC::CodeBlock *v10;
  JSC::CallLinkInfo *v11;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  JSC::CallLinkInfo *v27;
  JSC::CallLinkInfo *v28[2];

  v9 = (JSC::CallLinkInfo *)*((_QWORD *)this + 11);
  if (v9 != (JSC::CallLinkInfo *)((char *)this + 88))
  {
    v10 = this;
    *((_QWORD *)v9 + 1) = v28;
    v11 = (JSC::CallLinkInfo *)*((_QWORD *)this + 12);
    v28[0] = v9;
    v28[1] = v11;
    *(_QWORD *)v11 = v28;
    *((_QWORD *)this + 11) = (char *)this + 88;
    *((_QWORD *)this + 12) = (char *)this + 88;
    this = v28[0];
    if ((JSC::CallLinkInfo **)v28[0] != v28)
    {
      if (a3)
      {
        do
        {
          v14 = *((unsigned __int8 *)this + 16);
          if (*((_BYTE *)this + 16))
          {
            switch(v14)
            {
              case 1:
                JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(this, a2, v10, a3, a6, a7, a8, a9, a4);
                break;
              case 2:
                JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(this, a2, (unsigned int **)v10, a3);
                break;
              case 3:
                v15 = (_QWORD *)*((_QWORD *)this + 1);
                if (v15)
                {
                  v16 = *(_QWORD *)this;
                  *v15 = *(_QWORD *)this;
                  *(_QWORD *)(v16 + 8) = v15;
                  *(_QWORD *)this = 0;
                  *((_QWORD *)this + 1) = 0;
                }
                if (*((JSC::CodeBlock **)this + 6) == v10)
                {
                  *((_BYTE *)a3 + 17) = 0;
                  v17 = *((_QWORD *)a3 + 15);
                  if (v17)
                  {
                    v18 = (unsigned int *)(v17 + 8);
                    do
                      v19 = __ldaxr(v18);
                    while (__stlxr(v19 + 1, v18));
                  }
                  *((_QWORD *)this + 27) = *(_QWORD *)(v17 + 16);
                  v20 = (unsigned int *)(v17 + 8);
                  do
                  {
                    v21 = __ldaxr(v20);
                    v22 = v21 - 1;
                  }
                  while (__stlxr(v22, v20));
                  if (!v22)
                  {
                    atomic_store(1u, (unsigned int *)(v17 + 8));
                    v27 = this;
                    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
                    this = v27;
                  }
                  *((_QWORD *)this + 6) = a3;
                  v23 = *((_QWORD *)a3 + 11);
                  *(_QWORD *)this = v23;
                  *((_QWORD *)this + 1) = (char *)a3 + 88;
                  *((_QWORD *)a3 + 11) = this;
                  *(_QWORD *)(v23 + 8) = this;
                }
                else
                {
                  *((_QWORD *)this + 27) = 0;
                }
                break;
            }
          }
          else
          {
            JSC::CallLinkInfo::unlinkOrUpgradeImpl(this, a2, v10, a3, a6, a7, a8, a9, a4);
          }
          this = v28[0];
        }
        while ((JSC::CallLinkInfo **)v28[0] != v28);
      }
      else
      {
        do
        {
          v24 = *((unsigned __int8 *)this + 16);
          if (*((_BYTE *)this + 16))
          {
            switch(v24)
            {
              case 1:
                JSC::PolymorphicCallNode::unlinkOrUpgradeImpl(this, a2, v10, 0, a6, a7, a8, a9, a4);
                break;
              case 2:
                JSC::DirectCallLinkInfo::unlinkOrUpgradeImpl(this, a2, (unsigned int **)v10, 0);
                break;
              case 3:
                v25 = (_QWORD *)*((_QWORD *)this + 1);
                if (v25)
                {
                  v26 = *(_QWORD *)this;
                  *v25 = *(_QWORD *)this;
                  *(_QWORD *)(v26 + 8) = v25;
                  *(_QWORD *)this = 0;
                  *((_QWORD *)this + 1) = 0;
                }
                *((_QWORD *)this + 27) = 0;
                break;
            }
          }
          else
          {
            JSC::CallLinkInfo::unlinkOrUpgradeImpl(this, a2, v10, 0, a6, a7, a8, a9, a4);
          }
          this = v28[0];
        }
        while ((JSC::CallLinkInfo **)v28[0] != v28);
      }
    }
  }
  return this;
}

BOOL JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  _DWORD *v7;
  unint64_t v8;
  BOOL v9;
  char **v10;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (a2 - 0x40000000);
  v4 = *(_DWORD **)(v2 + 120);
  if (v4 && *v4 > v3)
  {
    v5 = *((unsigned __int8 *)v4 + v3 + 4);
    if ((v5 - 1) < 2)
      return 1;
    if (v5)
    {
      if (v5 == 3)
        return 0;
LABEL_20:
      __break(0xC471u);
      JUMPOUT(0x198154F4CLL);
    }
  }
  v7 = *(_DWORD **)(v2 + 112);
  if (*v7 <= v3)
    goto LABEL_20;
  v8 = *(_QWORD *)&v7[2 * v3 + 2];
  if (v8)
    v9 = (v8 & 0xFFFE000000000002) == 0;
  else
    v9 = 0;
  if (!v9)
    return 1;
  v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C));
  return v10 != &JSC::SymbolTable::s_info && v10 != &JSC::JSTemplateObjectDescriptor::s_info;
}

unsigned int *JSC::CodeBlock::setAlternative(JSC::CodeBlock *this, JSC::VM *a2, JSC::CodeBlock *a3)
{
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  if (!a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198155018);
  }
  result = (unsigned int *)*((_QWORD *)a3 + 15);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198155038);
  }
  v7 = result + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  do
  {
    v9 = __ldaxr(v7);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v7));
  if (!v10)
  {
    atomic_store(1u, result + 2);
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
  }
  *((_QWORD *)this + 24) = a3;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    return (unsigned int *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  return result;
}

uint64_t JSC::CodeBlock::shouldJettisonDueToWeakReference(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 120);
  if (!v2 || (*(_BYTE *)(v2 + 12) & 0xFE) != 4)
    return 0;
  if ((a1 & 8) != 0)
  {
    LODWORD(v4) = *(_BYTE *)(a1 - 79) & 1;
  }
  else if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
  {
    v4 = (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFC000) + 8 * ((a1 >> 10) & 0xF) + 0x28) >> (a1 >> 4)) & 1;
  }
  else
  {
    LODWORD(v4) = 0;
  }
  return v4 ^ 1;
}

uint64_t JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>::BaseRef<WTF::Vector<unsigned char,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc> const>::next@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  char v6;
  _BOOL4 v7;
  int v8;
  int v9;

  v2 = *(unsigned int *)(result + 8);
  v3 = (unsigned __int8 *)(**(_QWORD **)result + v2);
  v4 = *v3;
  v5 = v4;
  if ((v4 | 2) == 0x82)
    v5 = v3[1];
  v6 = v4 == 128;
  if (v4 == 130)
    v6 = 2;
  v7 = v4 == 128 || v4 == 130;
  v8 = JSC::opcodeLengths[v5] << v6;
  if (v7)
    v9 = 2;
  else
    v9 = 1;
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_DWORD *)(a2 + 8) = v9 + v2 + v8;
  return result;
}

void JSC::CodeBlock::finalizeUnconditionally(JSC::CodeBlock *this, JSC::VM *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, int8x8_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  __int16 v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  unint64_t i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int **v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t *v67;
  unsigned int v68;
  unint64_t *v69;
  unsigned int v70;
  unint64_t j;
  uint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v126;
  uint64_t v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v131;
  unint64_t v132;
  BOOL v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  unsigned int *v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  BOOL v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v163;
  char v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t *v170;
  unsigned int v171;
  unsigned int v172;
  unint64_t k;
  unsigned int v174;
  unint64_t v175;
  uint64_t v177;
  char v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t *v184;
  unsigned int v185;
  unint64_t m;
  unsigned int v187;
  unint64_t v188;
  uint64_t v190;
  char v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  unint64_t *v196;
  unsigned int v197;
  unint64_t n;
  unsigned int v199;
  unint64_t v200;
  uint64_t v202;
  char v203;
  int v204;
  int v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  unsigned int v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  unsigned int v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  unsigned int v232;
  _QWORD *v233;
  unsigned int v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  _QWORD *v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t v241;
  unsigned int v242;
  _QWORD *v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int *v249;
  unsigned int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unsigned int v255;
  unint64_t v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned int *v267;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unint64_t *v282;
  unsigned int v283;
  unint64_t v284;
  unint64_t v285;
  unsigned int v286;
  unint64_t *v287;
  unsigned int v288;
  unint64_t v289;
  unint64_t v290;
  unsigned int v291;
  unint64_t *v292;
  unsigned int v293;
  unsigned int v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t *v297;
  unsigned int v298;
  unint64_t v299;
  unint64_t v300;
  unsigned int v301;
  unint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unint64_t v305;
  unint64_t v306;
  unsigned int v307;
  unsigned int v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v312;
  unint64_t v313;
  unsigned int v314;
  unint64_t v315;
  unint64_t v317;
  uint64_t v318;
  unsigned __int16 *v319;
  unsigned int v320;
  JSC::CallLinkInfo *v321;
  unsigned int v322;
  JSC::CallLinkInfo *v323;
  unsigned int v324;
  JSC::CallLinkInfo *v325;
  unsigned int v326;
  unsigned int v327;
  JSC::CallLinkInfo *v328;
  JSC::CallLinkInfo *v329;
  unsigned int v330;
  JSC::CallLinkInfo *v331;
  unsigned int v332;
  JSC::CallLinkInfo *v333;
  unsigned int v334;
  JSC::CallLinkInfo *v335;
  unsigned int v336;
  JSC::CallLinkInfo *v337;
  unsigned int v338;
  JSC::CallLinkInfo *v339;
  unsigned int v340;
  JSC::CallLinkInfo *v341;
  unsigned int v342;
  JSC::CallLinkInfo *v343;
  unsigned int v344;
  JSC::CallLinkInfo *v345;
  unsigned int v346;
  JSC::CallLinkInfo *v347;
  unsigned int v348;
  JSC::CallLinkInfo *v349;
  unsigned int v350;
  JSC::CallLinkInfo *v351;
  unsigned int v352;
  JSC::CallLinkInfo *v353;
  unsigned int v354;
  JSC::CallLinkInfo *v355;
  unsigned int v356;
  JSC::CallLinkInfo *v357;
  unsigned int v358;
  JSC::CallLinkInfo *v359;
  unsigned int v360;
  JSC::CallLinkInfo *v361;
  unsigned int v362;
  JSC::CallLinkInfo *ii;
  unsigned int *v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int *v369;
  char v370;
  unsigned int *v371;
  unsigned int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t mm;
  uint64_t v377;
  unsigned int *v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  int v382;
  unsigned int *v383;
  uint64_t v384;
  BOOL v385;
  char v386;
  int *v387;
  unsigned int v388;
  int *v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  unsigned __int8 *v400;
  int v401;
  int v402;
  unint64_t v403;
  uint64_t v404;
  unsigned int v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unsigned int v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  JSC::CallLinkInfo *jj;
  uint8x8_t v435;
  void *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  JSC::DirectCallLinkInfo *kk;
  uint8x8_t v443;
  uint64_t v444;
  unsigned int *v445;
  JSC::CallLinkInfo *v446;
  uint64_t v447;
  unsigned int v448;
  uint64_t v449;
  JSC::CallLinkInfo *v450;
  unsigned int *v451;
  uint64_t v452;
  uint64_t v453;
  _BYTE *v454;
  BOOL v455;
  uint64_t v457;
  float v458;
  uint64_t v459;
  int *v460;
  float *v461;
  JSC::RecordedStatuses *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  unsigned int v472;
  unsigned int v473;
  BOOL v474;
  uint64_t v475;
  int v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  int v484;
  unsigned int *v485;
  unsigned int v486;
  unsigned int v487;
  uint64_t *v488;
  unint64_t StatusReg;
  int v490;
  unint64_t v491;
  uint32x4_t v492[2];
  unsigned int v493;
  unsigned int v494;
  uint64_t v495;

  v9 = (unint64_t)this;
  v495 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 15);
  if (!v10)
    goto LABEL_1253;
  v12 = *(_BYTE *)(v10 + 12);
  if ((v12 & 0xFE) != 2)
    goto LABEL_675;
  v13 = *((_QWORD *)this + 7);
  v14 = *(_WORD *)(v13 + 28);
  v15 = (unsigned int *)*((_QWORD *)this + 19);
  v16 = qword_1ECF4C080;
  v17 = 0;
  v18 = (uint64_t *)(v15 + 6);
  v19 = JSC::speculatedTypeMapping;
  if ((v14 & 1) == 0)
  {
    if (!v15)
      goto LABEL_84;
LABEL_5:
    for (i = *v15; ; i = 0)
    {
      if (v17 >= i)
        goto LABEL_191;
      if (v17 >= *v15)
        goto LABEL_299;
      v21 = *(v18 - 2);
      if (!v21)
      {
        v22 = 0;
        v23 = *(v18 - 1);
        if (!v23)
          goto LABEL_10;
        goto LABEL_27;
      }
      if (v21 >= 0xFFFE000000000000)
      {
        if ((v21 & 0xFFFFFFFE) != 0)
          v22 = 0x200000000;
        else
          v22 = 0x100000000;
      }
      else if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9 = (int8x8_t)(v21 - 0x2000000000000);
        v37 = (uint64_t)COERCE_DOUBLE(v21 - 0x2000000000000);
        if ((double)*(uint64_t *)&a9 != *(double *)&a9)
          goto LABEL_68;
        if (v37)
        {
          if ((unint64_t)(v37 + 0x8000000000000) >> 52)
            goto LABEL_68;
        }
        else if ((uint64_t)v21 < 0x2000000000000)
        {
LABEL_68:
          v22 = 0x2000000000;
          goto LABEL_26;
        }
        v22 = 0x1000000000;
      }
      else
      {
        v27 = v21 & 0xFFFE000000000002;
        v28 = v21 >> 36;
        v29 = (v21 & 0xFFFFFFFFFLL) != 0 && v28 == 0;
        a6 = v29;
        if (v16 <= v21 && (a6 & 1) != 0)
        {
          if (v27)
          {
            if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v22 = 0x10000000000;
            else
              v22 = 0x20000000000;
          }
          else
          {
            v30 = *(unsigned __int8 *)(v21 + 5);
            if (v30 != 2)
            {
              v22 = JSC::speculatedTypeMapping[v30];
              goto LABEL_26;
            }
            v35 = *(_QWORD *)(v21 + 8);
            if (!v35)
              goto LABEL_71;
            v22 = 805306368;
            if ((v35 & 1) != 0)
              goto LABEL_26;
            if (v35 < v16)
            {
              v22 = 0;
            }
            else
            {
              v22 = 0;
              if (!(v35 >> 36) && (v35 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v35 + 16) & 0x10) != 0)
                {
                  v22 = 0x10000000;
                  goto LABEL_26;
                }
LABEL_71:
                v22 = 805306368;
              }
            }
          }
        }
        else
        {
          a7 = (uint64_t)g_config;
          a6 = (uint64_t)this;
          if (v27)
          {
            v22 = 0x20000000000;
            if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v22 = 0x10000000000;
          }
          else
          {
            if (v16 > v21)
              goto LABEL_123;
            v22 = 0;
            if (!v28 && (v21 & 0xFFFFFFFFFLL) != 0)
            {
              v39 = *(unsigned __int8 *)(v21 + 5);
              if (v39 == 2)
              {
                v41 = *(_QWORD *)(v21 + 8);
                v22 = 805306368;
                if (v41 && (v41 & 1) == 0)
                {
                  if (v41 < v16)
                  {
LABEL_123:
                    v22 = 0;
                    goto LABEL_26;
                  }
                  v22 = 0;
                  if (!(v41 >> 36) && (v41 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v41 + 16) & 0x10) != 0)
                      v22 = 0x10000000;
                    else
                      v22 = 805306368;
                  }
                }
              }
              else
              {
                v22 = JSC::speculatedTypeMapping[v39];
              }
            }
          }
        }
      }
LABEL_26:
      *(v18 - 2) = 0;
      v23 = *(v18 - 1);
      if (!v23)
        goto LABEL_10;
LABEL_27:
      if (v23 >= 0xFFFE000000000000)
      {
        if ((v23 & 0xFFFFFFFE) != 0)
          v34 = 0x200000000;
        else
          v34 = 0x100000000;
        goto LABEL_40;
      }
      if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9 = (int8x8_t)(v23 - 0x2000000000000);
        v38 = (uint64_t)COERCE_DOUBLE(v23 - 0x2000000000000);
        if ((double)*(uint64_t *)&a9 == *(double *)&a9)
        {
          if (v38)
          {
            if (!((unint64_t)(v38 + 0x8000000000000) >> 52))
              goto LABEL_78;
          }
          else if ((uint64_t)v23 >= 0x2000000000000)
          {
LABEL_78:
            v34 = 0x1000000000;
            goto LABEL_40;
          }
        }
        v34 = 0x2000000000;
      }
      else
      {
        v31 = v23 & 0xFFFE000000000002;
        a6 = v23 >> 36;
        a7 = (v23 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v16 <= v23 && (a7 & 1) != 0)
        {
          if (v31)
          {
            if ((v23 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v34 = 0x10000000000;
            else
              v34 = 0x20000000000;
            goto LABEL_40;
          }
          v33 = *(unsigned __int8 *)(v23 + 5);
          if (v33 == 2)
          {
            v36 = *(_QWORD *)(v23 + 8);
            if (!v36)
              goto LABEL_72;
            v34 = 805306368;
            if ((v36 & 1) == 0)
            {
              if (v36 < v16)
              {
                v34 = 0;
                goto LABEL_40;
              }
              v34 = 0;
              a6 = v36 >> 36;
              if (v36 >> 36)
                goto LABEL_40;
              a6 = v36 & 0xFFFFFFFFFLL;
              if ((v36 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_40;
              if ((*(_BYTE *)(v36 + 16) & 0x10) == 0)
              {
LABEL_72:
                v34 = 805306368;
                goto LABEL_40;
              }
              v34 = 0x10000000;
            }
          }
          else
          {
            v34 = JSC::speculatedTypeMapping[v33];
          }
        }
        else
        {
          a8 = g_config;
          a7 = (uint64_t)this;
          if (v31)
          {
            v34 = 0x20000000000;
            if ((v23 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v34 = 0x10000000000;
            goto LABEL_40;
          }
          if (v16 <= v23)
          {
            v34 = 0;
            if (a6)
              goto LABEL_40;
            a6 = v23 & 0xFFFFFFFFFLL;
            if ((v23 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_40;
            v40 = *(unsigned __int8 *)(v23 + 5);
            if (v40 != 2)
            {
              v34 = JSC::speculatedTypeMapping[v40];
              goto LABEL_40;
            }
            v42 = *(_QWORD *)(v23 + 8);
            v34 = 805306368;
            if (!v42 || (v42 & 1) != 0)
              goto LABEL_40;
            if (v42 >= v16)
            {
              v34 = 0;
              a6 = v42 >> 36;
              if (!(v42 >> 36))
              {
                a6 = v42 & 0xFFFFFFFFFLL;
                if ((v42 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v42 + 16) & 0x10) != 0)
                    v34 = 0x10000000;
                  else
                    v34 = 805306368;
                }
              }
              goto LABEL_40;
            }
          }
          v34 = 0;
        }
      }
LABEL_40:
      v22 |= v34;
      *(v18 - 1) = 0;
LABEL_10:
      v24 = *v18 | v22;
      *v18 = v24;
      v25 = *(unsigned int **)(v13 + 184);
      if (v17 >= *v25)
      {
        __break(0xC471u);
        JUMPOUT(0x19815547CLL);
      }
      a4 = (uint64_t)&v25[2 * v17];
      a5 = *(_QWORD *)(a4 + 8);
      v26 = a5 | v24;
      *v18 = v26;
      v18 += 3;
      *(_QWORD *)(a4 + 8) = v26;
      ++v17;
      if (v15)
        goto LABEL_5;
LABEL_84:
      ;
    }
  }
  while (1)
  {
    i = v15 ? *v15 : 0;
    if (v17 >= i)
      break;
    if (v17 >= *v15)
    {
LABEL_299:
      __break(0xC471u);
      JUMPOUT(0x198155BE8);
    }
    v45 = *(v18 - 2);
    if (!v45)
    {
      v44 = 0;
      a5 = *(v18 - 1);
      if (a5)
        goto LABEL_136;
      goto LABEL_129;
    }
    if (v45 >= 0xFFFE000000000000)
    {
      if ((v45 & 0xFFFFFFFE) != 0)
        v44 = 0x200000000;
      else
        v44 = 0x100000000;
    }
    else if (v45 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9 = (int8x8_t)(v45 - 0x2000000000000);
      v55 = (uint64_t)COERCE_DOUBLE(v45 - 0x2000000000000);
      if ((double)*(uint64_t *)&a9 != *(double *)&a9)
        goto LABEL_190;
      if (v55)
      {
        if ((unint64_t)(v55 + 0x8000000000000) >> 52)
          goto LABEL_190;
      }
      else if ((uint64_t)v45 < 0x2000000000000)
      {
LABEL_190:
        v44 = 0x2000000000;
        goto LABEL_162;
      }
      v44 = 0x1000000000;
    }
    else
    {
      v49 = v45 & 0xFFFE000000000002;
      v50 = v45 >> 36;
      a6 = (v45 & 0xFFFFFFFFFLL) != 0 && v50 == 0;
      if (v16 <= v45 && (a6 & 1) != 0)
      {
        if (v49)
        {
          if ((v45 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v44 = 0x10000000000;
          else
            v44 = 0x20000000000;
        }
        else
        {
          v52 = *(unsigned __int8 *)(v45 + 5);
          if (v52 != 2)
          {
            v44 = JSC::speculatedTypeMapping[v52];
            goto LABEL_162;
          }
          v53 = *(_QWORD *)(v45 + 8);
          if (!v53)
            goto LABEL_292;
          v44 = 805306368;
          if ((v53 & 1) != 0)
            goto LABEL_162;
          if (v53 < v16)
          {
            v44 = 0;
          }
          else
          {
            v44 = 0;
            if (!(v53 >> 36) && (v53 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v53 + 16) & 0x10) != 0)
              {
                v44 = 0x10000000;
                goto LABEL_162;
              }
LABEL_292:
              v44 = 805306368;
            }
          }
        }
      }
      else
      {
        a7 = (uint64_t)g_config;
        a6 = (uint64_t)this;
        if (v49)
        {
          v44 = 0x20000000000;
          if ((v45 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v44 = 0x10000000000;
        }
        else
        {
          if (v16 > v45)
            goto LABEL_507;
          v44 = 0;
          if (!v50 && (v45 & 0xFFFFFFFFFLL) != 0)
          {
            v137 = *(unsigned __int8 *)(v45 + 5);
            if (v137 == 2)
            {
              v140 = *(_QWORD *)(v45 + 8);
              v44 = 805306368;
              if (v140 && (v140 & 1) == 0)
              {
                if (v140 < v16)
                {
LABEL_507:
                  v44 = 0;
                  goto LABEL_162;
                }
                v44 = 0;
                if (!(v140 >> 36) && (v140 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v140 + 16) & 0x10) != 0)
                    v44 = 0x10000000;
                  else
                    v44 = 805306368;
                }
              }
            }
            else
            {
              v44 = JSC::speculatedTypeMapping[v137];
            }
          }
        }
      }
    }
LABEL_162:
    *(v18 - 2) = 0;
    a5 = *(v18 - 1);
    if (a5)
    {
LABEL_136:
      if (a5 >= 0xFFFE000000000000)
      {
        if ((a5 & 0xFFFFFFFE) != 0)
          v43 = 0x200000000;
        else
          v43 = 0x100000000;
        goto LABEL_128;
      }
      if (a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v46 = a5 & 0xFFFE000000000002;
        a6 = a5 >> 36;
        a7 = (a5 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v16 <= a5 && (a7 & 1) != 0)
        {
          if (v46)
          {
            if ((a5 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v43 = 0x10000000000;
            else
              v43 = 0x20000000000;
            goto LABEL_128;
          }
          v48 = *(unsigned __int8 *)(a5 + 5);
          if (v48 == 2)
          {
            a5 = *(_QWORD *)(a5 + 8);
            if (a5)
            {
              v43 = 805306368;
              if ((a5 & 1) != 0)
                goto LABEL_128;
              if (a5 < v16)
              {
                v43 = 0;
                goto LABEL_128;
              }
              v43 = 0;
              a6 = a5 >> 36;
              if (a5 >> 36)
                goto LABEL_128;
              a6 = a5 & 0xFFFFFFFFFLL;
              if ((a5 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_128;
              if ((*(_BYTE *)(a5 + 16) & 0x10) != 0)
              {
                v43 = 0x10000000;
                goto LABEL_128;
              }
            }
            v43 = 805306368;
            goto LABEL_128;
          }
          v43 = JSC::speculatedTypeMapping[v48];
        }
        else
        {
          a8 = g_config;
          a7 = (uint64_t)this;
          if (v46)
          {
            v29 = (a5 & 0xFFFFFFFFFFFFFFFELL) == 6;
            v43 = 0x20000000000;
            a5 = 0x10000000000;
            if (v29)
              v43 = 0x10000000000;
            goto LABEL_128;
          }
          if (v16 <= a5)
          {
            v43 = 0;
            if (a6)
              goto LABEL_128;
            a6 = a5 & 0xFFFFFFFFFLL;
            if ((a5 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_128;
            v136 = *(unsigned __int8 *)(a5 + 5);
            if (v136 != 2)
            {
              v43 = JSC::speculatedTypeMapping[v136];
              goto LABEL_128;
            }
            a5 = *(_QWORD *)(a5 + 8);
            v43 = 805306368;
            if (!a5 || (a5 & 1) != 0)
              goto LABEL_128;
            if (a5 >= v16)
            {
              v43 = 0;
              a6 = a5 >> 36;
              if (!(a5 >> 36))
              {
                a6 = a5 & 0xFFFFFFFFFLL;
                if ((a5 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(a5 + 16) & 0x10) != 0)
                    v43 = 0x10000000;
                  else
                    v43 = 805306368;
                }
              }
              goto LABEL_128;
            }
          }
          v43 = 0;
        }
LABEL_128:
        v44 |= v43;
        *(v18 - 1) = 0;
        goto LABEL_129;
      }
      a9 = (int8x8_t)(a5 - 0x2000000000000);
      v54 = (uint64_t)COERCE_DOUBLE(a5 - 0x2000000000000);
      if ((double)*(uint64_t *)&a9 != *(double *)&a9)
      {
LABEL_188:
        v43 = 0x2000000000;
        goto LABEL_128;
      }
      if (v54)
      {
        if ((unint64_t)(v54 + 0x8000000000000) >> 52)
          goto LABEL_188;
      }
      else if ((uint64_t)a5 < 0x2000000000000)
      {
        goto LABEL_188;
      }
      v43 = 0x1000000000;
      goto LABEL_128;
    }
LABEL_129:
    a4 = *v18;
    *v18 |= v44;
    v18 += 3;
    ++v17;
  }
LABEL_191:
  v56 = *((_QWORD *)this + 17);
  if (!v56)
  {
    v62 = 0;
    goto LABEL_206;
  }
  v57 = *(_QWORD *)(v56 - 16);
  do
    v58 = __ldaxr((unsigned int *)v57);
  while (__stlxr(v58 + 1, (unsigned int *)v57));
  v59 = -*(_DWORD *)(v57 + 8);
  do
  {
    v60 = __ldaxr((unsigned int *)v57);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v57));
  if (!v61)
  {
    atomic_store(1u, (unsigned int *)v57);
    if ((*(_BYTE *)(v57 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v57 + 16), JSC::speculatedTypeMapping, i, a4, a5, a6, a7, (uint64_t)a8);
    WTF::fastFree(v57, v19, i, a4, a5, a6, a7, (uint64_t)a8);
  }
  if (v59 < 0)
  {
    v72 = v59;
    if ((v14 & 1) == 0)
    {
      v73 = *(unsigned int **)(v13 + 184);
      v74 = *v73;
      v474 = v74 >= v17;
      v75 = v74 - v17;
      if (!v474)
        v75 = 0;
      v76 = &v73[2 * v17 + 2];
      v77 = qword_1ECF4C080;
      v78 = (unint64_t *)(v56 - 32);
      while (1)
      {
        v80 = *v78;
        v79 = v78[1];
        v81 = *v78 | v79;
        if (!v81)
        {
          v79 = 0;
          goto LABEL_235;
        }
        if (!v80)
        {
          v81 = 0;
          goto LABEL_235;
        }
        if (v80 >= 0xFFFE000000000000)
        {
          if ((v80 & 0xFFFFFFFE) != 0)
            v81 = 0x200000000;
          else
            v81 = 0x100000000;
          goto LABEL_233;
        }
        if (v80 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          a9 = (int8x8_t)(v80 - 0x2000000000000);
          v90 = (uint64_t)COERCE_DOUBLE(v80 - 0x2000000000000);
          if ((double)*(uint64_t *)&a9 == *(double *)&a9)
          {
            if (v90)
            {
              if (!((unint64_t)(v90 + 0x8000000000000) >> 52))
                goto LABEL_311;
            }
            else if ((uint64_t)v80 >= 0x2000000000000)
            {
LABEL_311:
              v81 = 0x1000000000;
              goto LABEL_233;
            }
          }
          v81 = 0x2000000000;
        }
        else
        {
          v82 = v80 & 0xFFFE000000000002;
          v83 = v80 >> 36;
          v85 = (v80 & 0xFFFFFFFFFLL) != 0 && v83 == 0;
          if (v77 <= v80 && v85)
          {
            if (v82)
            {
              if ((v80 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v81 = 0x10000000000;
              else
                v81 = 0x20000000000;
              goto LABEL_233;
            }
            v86 = *(unsigned __int8 *)(v80 + 5);
            if (v86 == 2)
            {
              v89 = *(_QWORD *)(v80 + 8);
              if (!v89)
                goto LABEL_305;
              v81 = 805306368;
              if ((v89 & 1) == 0)
              {
                if (v89 < v77)
                {
                  v81 = 0;
                  goto LABEL_233;
                }
                v81 = 0;
                if (v89 >> 36 || (v89 & 0xFFFFFFFFFLL) == 0)
                  goto LABEL_233;
                if ((*(_BYTE *)(v89 + 16) & 0x10) == 0)
                {
LABEL_305:
                  v81 = 805306368;
                  goto LABEL_233;
                }
                v81 = 0x10000000;
              }
            }
            else
            {
              v81 = JSC::speculatedTypeMapping[v86];
            }
          }
          else
          {
            if (v82)
            {
              v81 = 0x20000000000;
              if ((v80 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v81 = 0x10000000000;
              goto LABEL_233;
            }
            if (v77 <= v80)
            {
              v81 = 0;
              if (v83 || (v80 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_233;
              v139 = *(unsigned __int8 *)(v80 + 5);
              if (v139 != 2)
              {
                v81 = JSC::speculatedTypeMapping[v139];
                goto LABEL_233;
              }
              v142 = *(_QWORD *)(v80 + 8);
              v81 = 805306368;
              if (!v142 || (v142 & 1) != 0)
                goto LABEL_233;
              if (v142 >= v77)
              {
                v81 = 0;
                if (!(v142 >> 36) && (v142 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v142 + 16) & 0x10) != 0)
                    v81 = 0x10000000;
                  else
                    v81 = 805306368;
                }
                goto LABEL_233;
              }
            }
            v81 = 0;
          }
        }
LABEL_233:
        *v78 = 0;
LABEL_235:
        v87 = v81 | v79;
        v78[1] = v87;
        if (!v75)
        {
          __break(0xC471u);
          JUMPOUT(0x198155C78);
        }
        v88 = *(_QWORD *)v76 | v87;
        v78[1] = v88;
        *(_QWORD *)v76 = v88;
        v76 += 2;
        --v75;
        v78 -= 2;
        v474 = __CFADD__(v72++, 1);
        if (v474)
          goto LABEL_198;
      }
    }
    v91 = 0;
    v92 = (unint64_t *)(v56 - 32);
    v93 = qword_1ECF4C080;
    do
    {
      v95 = *v92;
      v94 = v92[1];
      v96 = *v92 | v94;
      if (!v96)
      {
        v94 = 0;
        goto LABEL_273;
      }
      if (!v95)
      {
        v96 = 0;
        goto LABEL_273;
      }
      if (v95 >= 0xFFFE000000000000)
      {
        if ((v95 & 0xFFFFFFFE) != 0)
          v96 = 0x200000000;
        else
          v96 = 0x100000000;
        goto LABEL_271;
      }
      if (v95 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a9 = (int8x8_t)(v95 - 0x2000000000000);
        v103 = (uint64_t)COERCE_DOUBLE(v95 - 0x2000000000000);
        if ((double)*(uint64_t *)&a9 == *(double *)&a9)
        {
          if (v103)
          {
            if (!((unint64_t)(v103 + 0x8000000000000) >> 52))
              goto LABEL_308;
          }
          else if ((uint64_t)v95 >= 0x2000000000000)
          {
LABEL_308:
            v96 = 0x1000000000;
            goto LABEL_271;
          }
        }
        v96 = 0x2000000000;
      }
      else
      {
        v97 = v95 & 0xFFFE000000000002;
        v98 = v95 >> 36;
        v100 = (v95 & 0xFFFFFFFFFLL) != 0 && v98 == 0;
        if (v93 <= v95 && v100)
        {
          if (v97)
          {
            if ((v95 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v96 = 0x10000000000;
            else
              v96 = 0x20000000000;
            goto LABEL_271;
          }
          v101 = *(unsigned __int8 *)(v95 + 5);
          if (v101 == 2)
          {
            v102 = *(_QWORD *)(v95 + 8);
            if (!v102)
              goto LABEL_304;
            v96 = 805306368;
            if ((v102 & 1) == 0)
            {
              if (v102 < v93)
              {
                v96 = 0;
                goto LABEL_271;
              }
              v96 = 0;
              if (v102 >> 36 || (v102 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_271;
              if ((*(_BYTE *)(v102 + 16) & 0x10) == 0)
              {
LABEL_304:
                v96 = 805306368;
                goto LABEL_271;
              }
              v96 = 0x10000000;
            }
          }
          else
          {
            v96 = JSC::speculatedTypeMapping[v101];
          }
        }
        else
        {
          if (v97)
          {
            v96 = 0x20000000000;
            if ((v95 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v96 = 0x10000000000;
            goto LABEL_271;
          }
          if (v93 <= v95)
          {
            v96 = 0;
            if (v98 || (v95 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_271;
            v138 = *(unsigned __int8 *)(v95 + 5);
            if (v138 != 2)
            {
              v96 = JSC::speculatedTypeMapping[v138];
              goto LABEL_271;
            }
            v141 = *(_QWORD *)(v95 + 8);
            v96 = 805306368;
            if (!v141 || (v141 & 1) != 0)
              goto LABEL_271;
            if (v141 >= v93)
            {
              v96 = 0;
              if (!(v141 >> 36) && (v141 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v141 + 16) & 0x10) != 0)
                  v96 = 0x10000000;
                else
                  v96 = 805306368;
              }
              goto LABEL_271;
            }
          }
          v96 = 0;
        }
      }
LABEL_271:
      *v92 = 0;
LABEL_273:
      v92[1] = v96 | v94;
      --v91;
      v92 -= 2;
    }
    while (v91 > v59);
  }
LABEL_198:
  v62 = *(_QWORD *)(v9 + 136);
  if (v62)
  {
    v63 = *(unsigned __int16 *)(v62 + 30);
    if (!*(_WORD *)(v62 + 30))
      v63 = *(_DWORD *)(v62 + 156);
    v64 = (unsigned int **)((v62 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    v65 = *(unsigned __int16 *)(v62 + 32);
    if (!*(_WORD *)(v62 + 32))
      v65 = *(_DWORD *)(v62 + 160);
    v66 = v62 + v65;
    if (v66 > (unint64_t)v64)
    {
      while (1)
      {
        v145 = *v64;
        if (*v64)
        {
          v146 = *v145;
          if ((_DWORD)v146)
            break;
        }
LABEL_510:
        if ((unint64_t)++v64 >= v66)
          goto LABEL_206;
      }
      v147 = qword_1ECF4C080;
      v148 = v145 + 4;
      while (2)
      {
        v150 = *(v148 - 1);
        if (!v150)
        {
          v149 = 0;
          goto LABEL_515;
        }
        if (v150 >= 0xFFFE000000000000)
        {
          if ((v150 & 0xFFFFFFFE) != 0)
            v149 = 0x200000000;
          else
            v149 = 0x100000000;
          goto LABEL_530;
        }
        if (v150 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v151 = v150 & 0xFFFE000000000002;
          v152 = v150 >> 36;
          v154 = (v150 & 0xFFFFFFFFFLL) != 0 && v152 == 0;
          if (v147 <= v150 && v154)
          {
            if (v151)
            {
              if ((v150 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v149 = 0x10000000000;
              else
                v149 = 0x20000000000;
            }
            else
            {
              v155 = *(unsigned __int8 *)(v150 + 5);
              if (v155 != 2)
              {
                v149 = JSC::speculatedTypeMapping[v155];
                goto LABEL_530;
              }
              v156 = *(_QWORD *)(v150 + 8);
              if (!v156)
                goto LABEL_546;
              v149 = 805306368;
              if ((v156 & 1) != 0)
                goto LABEL_530;
              if (v156 < v147)
              {
                v149 = 0;
              }
              else
              {
                v149 = 0;
                if (!(v156 >> 36) && (v156 & 0xFFFFFFFFFLL) != 0)
                {
                  if ((*(_BYTE *)(v156 + 16) & 0x10) != 0)
                  {
                    v149 = 0x10000000;
                    goto LABEL_530;
                  }
LABEL_546:
                  v149 = 805306368;
                }
              }
            }
            goto LABEL_530;
          }
          if (v151)
          {
            v149 = 0x20000000000;
            if ((v150 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v149 = 0x10000000000;
            goto LABEL_530;
          }
          if (v147 > v150)
          {
LABEL_571:
            v149 = 0;
            goto LABEL_530;
          }
          v149 = 0;
          if (!v152 && (v150 & 0xFFFFFFFFFLL) != 0)
          {
            v158 = *(unsigned __int8 *)(v150 + 5);
            if (v158 != 2)
            {
              v149 = JSC::speculatedTypeMapping[v158];
              goto LABEL_530;
            }
            v159 = *(_QWORD *)(v150 + 8);
            v149 = 805306368;
            if (v159)
            {
              if ((v159 & 1) == 0)
              {
                if (v159 >= v147)
                {
                  v149 = 0;
                  if (!(v159 >> 36) && (v159 & 0xFFFFFFFFFLL) != 0)
                  {
                    if ((*(_BYTE *)(v159 + 16) & 0x10) != 0)
                      v149 = 0x10000000;
                    else
                      v149 = 805306368;
                  }
                  goto LABEL_530;
                }
                goto LABEL_571;
              }
            }
          }
LABEL_530:
          *(v148 - 1) = 0;
LABEL_515:
          *v148 |= v149;
          v148 += 3;
          if (!--v146)
            goto LABEL_510;
          continue;
        }
        break;
      }
      a9 = (int8x8_t)(v150 - 0x2000000000000);
      v157 = (uint64_t)COERCE_DOUBLE(v150 - 0x2000000000000);
      if ((double)*(uint64_t *)&a9 != *(double *)&a9)
      {
LABEL_545:
        v149 = 0x2000000000;
        goto LABEL_530;
      }
      if (v157)
      {
        if ((unint64_t)(v157 + 0x8000000000000) >> 52)
          goto LABEL_545;
      }
      else if ((uint64_t)v150 < 0x2000000000000)
      {
        goto LABEL_545;
      }
      v149 = 0x1000000000;
      goto LABEL_530;
    }
  }
LABEL_206:
  v67 = *(uint64_t **)(v9 + 144);
  if (!v67)
    goto LABEL_207;
  v104 = *v67;
  if (*v67)
  {
    v118 = 0;
    v119 = v67[1];
    v120 = qword_1ECF4C080;
    while (1)
    {
      v121 = (unint64_t *)(*(_QWORD *)(v119 + (v118 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v118 & 7));
      v122 = *v121;
      if (*v121)
        break;
LABEL_343:
      v121[1] |= v122;
      if (v104 == ++v118)
        goto LABEL_318;
    }
    if (v122 >= 0xFFFE000000000000)
    {
      if ((v122 & 0xFFFFFFFE) != 0)
        v122 = 0x200000000;
      else
        v122 = 0x100000000;
      goto LABEL_345;
    }
    if (v122 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v123 = v122 & 0xFFFE000000000002;
      v124 = v122 >> 36;
      v126 = (v122 & 0xFFFFFFFFFLL) != 0 && v124 == 0;
      if (v120 <= v122 && v126)
      {
        if (v123)
        {
          if ((v122 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v122 = 0x10000000000;
          else
            v122 = 0x20000000000;
          goto LABEL_345;
        }
      }
      else
      {
        if (v123)
        {
          v29 = (v122 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v122 = 0x20000000000;
          if (v29)
            v122 = 0x10000000000;
          goto LABEL_345;
        }
        if (v120 > v122)
          goto LABEL_502;
        if (v124 || (v122 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_502;
      }
      v127 = *(unsigned __int8 *)(v122 + 5);
      if (v127 != 2)
      {
        v122 = JSC::speculatedTypeMapping[v127];
LABEL_345:
        *v121 = 0;
        goto LABEL_343;
      }
      v132 = *(_QWORD *)(v122 + 8);
      if (v132)
        v133 = (v132 & 1) == 0;
      else
        v133 = 0;
      if (!v133)
      {
LABEL_406:
        v122 = 805306368;
        goto LABEL_345;
      }
      if (v132 >= v120 && !(v132 >> 36) && (v132 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v132 + 16) & 0x10) != 0)
        {
          v122 = 0x10000000;
          goto LABEL_345;
        }
        goto LABEL_406;
      }
LABEL_502:
      v122 = 0;
      goto LABEL_345;
    }
    a9 = (int8x8_t)(v122 - 0x2000000000000);
    v135 = (uint64_t)COERCE_DOUBLE(v122 - 0x2000000000000);
    if ((double)*(uint64_t *)&a9 != *(double *)&a9)
    {
LABEL_399:
      v122 = 0x2000000000;
      goto LABEL_345;
    }
    if (v135)
    {
      if ((unint64_t)(v135 + 0x8000000000000) >> 52)
        goto LABEL_399;
    }
    else if ((uint64_t)v122 < 0x2000000000000)
    {
      goto LABEL_399;
    }
    v122 = 0x1000000000;
    goto LABEL_345;
  }
LABEL_318:
  v105 = v67[5];
  if (!v105)
    goto LABEL_207;
  v106 = v9;
  v107 = 0;
  while (2)
  {
    v108 = *(_QWORD *)(v67[6] + (v107 & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (v107 & 7);
    ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(v106, *(_DWORD *)v108, a9);
    v112 = *(_QWORD *)(v108 + 8);
    v111 = (_QWORD *)(v108 + 8);
    v110 = v112;
    if (v112)
    {
      if (v110 >= 0xFFFE000000000000)
      {
        v29 = (v110 & 0xFFFFFFFE) == 0;
        v117 = 0x200000000;
        if (v29)
          v117 = 0x100000000;
        goto LABEL_323;
      }
      if (v110 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v110 & 0xFFFE000000000002) != 0)
        {
          v29 = (v110 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v117 = 0x20000000000;
          if (v29)
            v117 = 0x10000000000;
          goto LABEL_323;
        }
        v113 = v110 >> 36;
        v115 = (v110 & 0xFFFFFFFFFLL) != 0 && v113 == 0;
        if (qword_1ECF4C080 <= v110 && v115
          || qword_1ECF4C080 <= v110 && (!v113 ? (v143 = (v110 & 0xFFFFFFFFFLL) == 0) : (v143 = 1), !v143))
        {
          v116 = *(unsigned __int8 *)(v110 + 5);
          if (v116 != 2)
          {
            v117 = JSC::speculatedTypeMapping[v116];
LABEL_323:
            *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= v117;
            goto LABEL_321;
          }
          v128 = *(_QWORD *)(v110 + 8);
          if (v128)
            v129 = (v128 & 1) == 0;
          else
            v129 = 0;
          if (!v129)
          {
LABEL_385:
            v117 = 805306368;
            goto LABEL_323;
          }
          if (v128 >= qword_1ECF4C080 && !(v128 >> 36) && (v128 & 0xFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)(v128 + 16) & 0x10) != 0)
            {
              v117 = 0x10000000;
              goto LABEL_323;
            }
            goto LABEL_385;
          }
        }
        v117 = 0;
        goto LABEL_323;
      }
      a9 = (int8x8_t)(v110 - 0x2000000000000);
      v131 = (uint64_t)COERCE_DOUBLE(v110 - 0x2000000000000);
      if ((double)*(uint64_t *)&a9 != *(double *)&a9)
      {
LABEL_378:
        v117 = 0x2000000000;
        goto LABEL_323;
      }
      if (v131)
      {
        if ((unint64_t)(v131 + 0x8000000000000) >> 52)
          goto LABEL_378;
      }
      else if ((uint64_t)v110 < 0x2000000000000)
      {
        goto LABEL_378;
      }
      v117 = 0x1000000000;
      goto LABEL_323;
    }
LABEL_321:
    *v111 = 0;
    if (v105 != ++v107)
      continue;
    break;
  }
  v9 = v106;
  v62 = *(_QWORD *)(v106 + 136);
LABEL_207:
  if (v62)
  {
    v68 = *(unsigned __int16 *)(v62 + 60);
    if (!*(_WORD *)(v62 + 60))
      v68 = *(_DWORD *)(v62 + 216);
    v69 = (unint64_t *)((v62 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
    v70 = *(unsigned __int16 *)(v62 + 62);
    if (!*(_WORD *)(v62 + 62))
      v70 = *(_DWORD *)(v62 + 220);
    for (j = v62 + v70; (unint64_t)v69 < j; ++v69)
    {
      v161 = *v69;
      *v69 &= 0xFFFF000000000000;
      if ((v161 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v163 = HIBYTE(v161) & 0xF;
        v164 = *(_BYTE *)((v161 & 0xFFFFFFFFFFFFLL) + 4);
        if (v163 <= (v164 & 0xFu))
          LODWORD(v163) = v164 & 0xF;
        if (v163 >= 0xA)
          v165 = 9;
        else
          v165 = v163;
        v166 = v165 | 0x10;
        if ((v161 & 0x1000000000000000) != 0)
          v167 = v166;
        else
          v167 = v163;
        if ((*(_BYTE *)((v161 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v168 = *(_DWORD *)(*(_QWORD *)((v161 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v168 = 0;
        v160 = BYTE6(v161);
        if (BYTE6(v161) <= v168)
          v160 = v168;
        if (v160 >= 0x19)
          v160 = 25;
        *v69 = (unint64_t)(v160 | (v167 << 8)) << 48;
      }
    }
    v169 = *(unsigned __int16 *)(v62 + 32);
    if (!*(_WORD *)(v62 + 32))
      v169 = *(_DWORD *)(v62 + 160);
    v170 = (unint64_t *)((v62 + v169 + 7) & 0xFFFFFFFFFFFFFFF8);
    v171 = *(unsigned __int16 *)(v62 + 34);
    v172 = v171;
    if (!*(_WORD *)(v62 + 34))
      v172 = *(_DWORD *)(v62 + 164);
    for (k = v62 + v172; (unint64_t)v170 < k; ++v170)
    {
      v175 = *v170;
      *v170 &= 0xFFFF000000000000;
      if ((v175 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v177 = HIBYTE(v175) & 0xF;
        v178 = *(_BYTE *)((v175 & 0xFFFFFFFFFFFFLL) + 4);
        if (v177 <= (v178 & 0xFu))
          LODWORD(v177) = v178 & 0xF;
        if (v177 >= 0xA)
          v179 = 9;
        else
          v179 = v177;
        v180 = v179 | 0x10;
        if ((v175 & 0x1000000000000000) != 0)
          v181 = v180;
        else
          v181 = v177;
        if ((*(_BYTE *)((v175 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v182 = *(_DWORD *)(*(_QWORD *)((v175 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v182 = 0;
        v174 = BYTE6(v175);
        if (BYTE6(v175) <= v182)
          v174 = v182;
        if (v174 >= 0x19)
          v174 = 25;
        *v170 = (unint64_t)(v174 | (v181 << 8)) << 48;
      }
    }
    v183 = *(unsigned __int16 *)(v62 + 44);
    if (!*(_WORD *)(v62 + 44))
      v183 = *(_DWORD *)(v62 + 184);
    v184 = (unint64_t *)((v62 + v183 + 7) & 0xFFFFFFFFFFFFFFF8);
    v185 = *(unsigned __int16 *)(v62 + 46);
    if (!*(_WORD *)(v62 + 46))
      v185 = *(_DWORD *)(v62 + 188);
    for (m = v62 + v185; (unint64_t)v184 < m; v184 += 3)
    {
      v188 = *v184;
      *v184 &= 0xFFFF000000000000;
      if ((v188 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v190 = HIBYTE(v188) & 0xF;
        v191 = *(_BYTE *)((v188 & 0xFFFFFFFFFFFFLL) + 4);
        if (v190 <= (v191 & 0xFu))
          LODWORD(v190) = v191 & 0xF;
        if (v190 >= 0xA)
          v192 = 9;
        else
          v192 = v190;
        v193 = v192 | 0x10;
        if ((v188 & 0x1000000000000000) != 0)
          v194 = v193;
        else
          v194 = v190;
        if ((*(_BYTE *)((v188 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v195 = *(_DWORD *)(*(_QWORD *)((v188 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v195 = 0;
        v187 = BYTE6(v188);
        if (BYTE6(v188) <= v195)
          v187 = v195;
        if (v187 >= 0x19)
          v187 = 25;
        *v184 = (unint64_t)(v187 | (v194 << 8)) << 48;
      }
    }
    if (!v171)
      v171 = *(_DWORD *)(v62 + 164);
    v196 = (unint64_t *)((v62 + v171 + 7) & 0xFFFFFFFFFFFFFFF8);
    v197 = *(unsigned __int16 *)(v62 + 36);
    if (!*(_WORD *)(v62 + 36))
      v197 = *(_DWORD *)(v62 + 168);
    for (n = v62 + v197; (unint64_t)v196 < n; ++v196)
    {
      v200 = *v196;
      *v196 &= 0xFFFF000000000000;
      if ((v200 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v202 = HIBYTE(v200) & 0xF;
        v203 = *(_BYTE *)((v200 & 0xFFFFFFFFFFFFLL) + 4);
        if (v202 <= (v203 & 0xFu))
          LODWORD(v202) = v203 & 0xF;
        if (v202 >= 0xA)
          v204 = 9;
        else
          v204 = v202;
        v205 = v204 | 0x10;
        if ((v200 & 0x1000000000000000) != 0)
          v206 = v205;
        else
          v206 = v202;
        if ((*(_BYTE *)((v200 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v207 = *(_DWORD *)(*(_QWORD *)((v200 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v207 = 0;
        v199 = BYTE6(v200);
        if (BYTE6(v200) <= v207)
          v199 = v207;
        if (v199 >= 0x19)
          v199 = 25;
        *v196 = (unint64_t)(v199 | (v206 << 8)) << 48;
      }
    }
  }
  JSC::CodeBlock::updateAllArrayProfilePredictions((_QWORD *)v9, a9);
  v208 = *(_QWORD *)(v9 + 120);
  if (!v208)
    goto LABEL_1253;
  v12 = *(_BYTE *)(v208 + 12);
LABEL_675:
  if ((v12 & 0xFE) != 2)
    goto LABEL_1119;
  v209 = *(_QWORD *)(v9 + 72);
  v210 = *(_QWORD *)(v9 + 136);
  if (v210)
  {
    v211 = *(unsigned __int16 *)(v210 + 8);
    if (!*(_WORD *)(v210 + 8))
      v211 = *(_DWORD *)(v210 + 112);
    v212 = (v210 + v211 + 7) & 0xFFFFFFFFFFFFFFF8;
    v213 = *(unsigned __int16 *)(v210 + 10);
    if (!*(_WORD *)(v210 + 10))
      v213 = *(_DWORD *)(v210 + 116);
    v214 = v210 + v213;
    if (v214 > v212)
    {
      do
      {
        v492[0].i64[0] = (uint64_t)"iterator open";
        v492[0].i64[1] = 14;
        if (*(_BYTE *)(v212 + 94) == 1)
        {
          v215 = *(unsigned int *)(v212 + 80);
          if ((_DWORD)v215)
          {
            if (*(_DWORD *)(((unint64_t)(v215 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v215) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v215 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v215 & 0x3E)) & 1) == 0)
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>((uint64_t)v492);
              *(_BYTE *)(v212 + 94) = 1;
              *(_QWORD *)(v212 + 80) = 0;
            }
          }
        }
        v212 += 112;
      }
      while (v212 < v214);
      v210 = *(_QWORD *)(v9 + 136);
    }
    v216 = *(unsigned __int16 *)(v210 + 4);
    if (!*(_WORD *)(v210 + 4))
      v216 = *(_DWORD *)(v210 + 104);
    v217 = (v210 + v216 + 7) & 0xFFFFFFFFFFFFFFF8;
    v218 = *(unsigned __int16 *)(v210 + 6);
    if (!*(_WORD *)(v210 + 6))
      v218 = *(_DWORD *)(v210 + 108);
    v219 = v210 + v218;
    if (v219 > v217)
    {
      do
      {
        v492[0].i64[0] = (uint64_t)"iterator next";
        v492[0].i64[1] = 14;
        if (*(_BYTE *)(v217 + 94) == 1)
        {
          v220 = *(unsigned int *)(v217 + 80);
          if ((_DWORD)v220)
          {
            if (*(_DWORD *)(((unint64_t)(v220 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v220) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v220 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v220 & 0x3E)) & 1) == 0)
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>((uint64_t)v492);
              *(_BYTE *)(v217 + 94) = 1;
              *(_QWORD *)(v217 + 80) = 0;
            }
          }
        }
        v492[0].i64[0] = (uint64_t)"iterator next";
        v492[0].i64[1] = 14;
        if (*(_BYTE *)(v217 + 110) == 1)
        {
          v221 = *(unsigned int *)(v217 + 96);
          if ((_DWORD)v221)
          {
            if (*(_DWORD *)(((unint64_t)(v221 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v221) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v221 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v221 & 0x3E)) & 1) == 0)
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>((uint64_t)v492);
              *(_BYTE *)(v217 + 110) = 1;
              *(_QWORD *)(v217 + 96) = 0;
            }
          }
        }
        v217 += 128;
      }
      while (v217 < v219);
      v210 = *(_QWORD *)(v9 + 136);
    }
    v222 = *(unsigned __int16 *)(v210 + 36);
    if (!*(_WORD *)(v210 + 36))
      v222 = *(_DWORD *)(v210 + 168);
    v223 = (unsigned int *)((v210 + v222 + 7) & 0xFFFFFFFFFFFFFFF8);
    v224 = *(unsigned __int16 *)(v210 + 38);
    if (*(_WORD *)(v210 + 38))
      v225 = *(unsigned __int16 *)(v210 + 38);
    else
      v225 = *(_DWORD *)(v210 + 172);
    v226 = v210 + v225;
    if (v226 > (unint64_t)v223)
    {
      do
      {
        v492[0].i64[0] = (uint64_t)"get by id";
        v492[0].i64[1] = 10;
        if (*((_BYTE *)v223 + 14) == 1)
        {
          v227 = *v223;
          if ((_DWORD)v227)
          {
            if (*(_DWORD *)(((unint64_t)(v227 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v227) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v227 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v227 & 0x3E)) & 1) == 0)
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>((uint64_t)v492);
              *((_BYTE *)v223 + 14) = 1;
              *(_QWORD *)v223 = 0;
            }
          }
        }
        v223 += 4;
      }
      while ((unint64_t)v223 < v226);
      v210 = *(_QWORD *)(v9 + 136);
      v224 = *(unsigned __int16 *)(v210 + 38);
    }
    if (!v224)
      v224 = *(_DWORD *)(v210 + 172);
    v228 = (unsigned int *)((v210 + v224 + 7) & 0xFFFFFFFFFFFFFFF8);
    v229 = *(unsigned __int16 *)(v210 + 40);
    if (!*(_WORD *)(v210 + 40))
      v229 = *(_DWORD *)(v210 + 176);
    v230 = v210 + v229;
    if (v230 > (unint64_t)v228)
    {
      do
      {
        v492[0].i64[0] = (uint64_t)"get length";
        v492[0].i64[1] = 11;
        if (*((_BYTE *)v228 + 14) == 1)
        {
          v231 = *v228;
          if ((_DWORD)v231)
          {
            if (*(_DWORD *)(((unint64_t)(v231 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v231) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v231 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v231 & 0x3E)) & 1) == 0)
            {
              if (BYTE1(qword_1ECF4C332))
                WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>((uint64_t)v492);
              *((_BYTE *)v228 + 14) = 1;
              *(_QWORD *)v228 = 0;
            }
          }
        }
        v228 += 8;
      }
      while ((unint64_t)v228 < v230);
      v210 = *(_QWORD *)(v9 + 136);
    }
    v232 = *(unsigned __int16 *)(v210 + 90);
    if (!*(_WORD *)(v210 + 90))
      v232 = *(_DWORD *)(v210 + 276);
    v233 = (_QWORD *)((v210 + v232 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v234 = *(unsigned __int16 *)(v210 + 92);
    if (!*(_WORD *)(v210 + 92))
      v234 = *(_DWORD *)(v210 + 280);
    v235 = v210 + v234;
    if (v235 > (unint64_t)v233)
    {
      do
      {
        v236 = *(unsigned int *)v233;
        if ((_DWORD)v236
          && (*(_DWORD *)(((unint64_t)(v236 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
           || ((*(_QWORD *)(((16 * v236) & 0xFFFFFC000)
                          + 8 * (((unint64_t)(v236 & 0xFFFFFFFE) >> 6) & 0xF)
                          + 0x28) >> (v236 & 0x3E)) & 1) == 0))
        {
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [88],char [2]>("Clearing try_get_by_id LLInt property access.", "\n");
          *v233 = 0;
        }
        ++v233;
      }
      while ((unint64_t)v233 < v235);
      v210 = *(_QWORD *)(v9 + 136);
    }
    v237 = *(unsigned __int16 *)(v210 + 88);
    if (!*(_WORD *)(v210 + 88))
      v237 = *(_DWORD *)(v210 + 272);
    v238 = (_QWORD *)((v210 + v237 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v239 = *(unsigned __int16 *)(v210 + 90);
    if (!*(_WORD *)(v210 + 90))
      v239 = *(_DWORD *)(v210 + 276);
    v240 = v210 + v239;
    if (v240 > (unint64_t)v238)
    {
      do
      {
        v241 = *(unsigned int *)v238;
        if ((_DWORD)v241
          && (*(_DWORD *)(((unint64_t)(v241 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
           || ((*(_QWORD *)(((16 * v241) & 0xFFFFFC000)
                          + 8 * (((unint64_t)(v241 & 0xFFFFFFFE) >> 6) & 0xF)
                          + 0x28) >> (v241 & 0x3E)) & 1) == 0))
        {
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [49],char [2]>();
          *v238 = 0;
        }
        ++v238;
      }
      while ((unint64_t)v238 < v240);
      v210 = *(_QWORD *)(v9 + 136);
    }
    v242 = *(unsigned __int16 *)(v210 + 68);
    if (!*(_WORD *)(v210 + 68))
      v242 = *(_DWORD *)(v210 + 232);
    v243 = (_QWORD *)((v210 + v242 + 7) & 0xFFFFFFFFFFFFFFF8);
    v244 = *(unsigned __int16 *)(v210 + 70);
    if (!*(_WORD *)(v210 + 70))
      v244 = *(_DWORD *)(v210 + 236);
    v245 = v210 + v244;
    if (v245 <= (unint64_t)v243)
    {
LABEL_795:
      v248 = *(unsigned __int16 *)(v210 + 14);
      if (!*(_WORD *)(v210 + 14))
        v248 = *(_DWORD *)(v210 + 124);
      v249 = (unsigned int *)((v210 + v248 + 7) & 0xFFFFFFFFFFFFFFF8);
      v250 = *(unsigned __int16 *)(v210 + 16);
      if (!*(_WORD *)(v210 + 16))
        v250 = *(_DWORD *)(v210 + 128);
      v251 = v210 + v250;
      if (v251 <= (unint64_t)v249)
      {
LABEL_819:
        v255 = *(unsigned __int16 *)(v210 + 66);
        if (!*(_WORD *)(v210 + 66))
          v255 = *(_DWORD *)(v210 + 228);
        v256 = (v210 + v255 + 7) & 0xFFFFFFFFFFFFFFF8;
        v257 = *(unsigned __int16 *)(v210 + 68);
        if (!*(_WORD *)(v210 + 68))
          v257 = *(_DWORD *)(v210 + 232);
        v258 = v210 + v257;
        if (v258 <= v256)
        {
LABEL_843:
          v262 = *(unsigned __int16 *)(v210 + 10);
          if (!*(_WORD *)(v210 + 10))
            v262 = *(_DWORD *)(v210 + 116);
          v263 = (unsigned int *)((v210 + v262 + 7) & 0xFFFFFFFFFFFFFFF8);
          v264 = *(unsigned __int16 *)(v210 + 12);
          if (*(_WORD *)(v210 + 12))
            v265 = *(unsigned __int16 *)(v210 + 12);
          else
            v265 = *(_DWORD *)(v210 + 120);
          v266 = v210 + v265;
          if (v266 <= (unint64_t)v263)
          {
LABEL_848:
            if (!v264)
              v264 = *(_DWORD *)(v210 + 120);
            v267 = (unsigned int *)((v210 + v264 + 7) & 0xFFFFFFFFFFFFFFF8);
            v268 = *(unsigned __int16 *)(v210 + 14);
            if (!*(_WORD *)(v210 + 14))
              v268 = *(_DWORD *)(v210 + 124);
            v269 = v210 + v268;
            if (v269 <= (unint64_t)v267)
            {
LABEL_888:
              v275 = *(unsigned __int16 *)(v210 + 84);
              if (!*(_WORD *)(v210 + 84))
                v275 = *(_DWORD *)(v210 + 264);
              v276 = (unsigned int *)((v210 + v275 + 3) & 0xFFFFFFFFFFFFFFFCLL);
              v277 = *(unsigned __int16 *)(v210 + 86);
              if (!*(_WORD *)(v210 + 86))
                v277 = *(_DWORD *)(v210 + 268);
              v278 = v210 + v277;
              if (v278 > (unint64_t)v276)
              {
                do
                {
                  v280 = *v276;
                  if ((_DWORD)v280
                    && (*(_DWORD *)(((unint64_t)(v280 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
                     || ((*(_QWORD *)(((16 * v280) & 0xFFFFFC000)
                                    + 8 * (((unint64_t)(v280 & 0xFFFFFFFE) >> 6) & 0xF)
                                    + 0x28) >> (v280 & 0x3E)) & 1) == 0))
                  {
                    if (BYTE1(qword_1ECF4C332))
                      WTF::dataLogF((WTF *)"Clearing LLInt to_this with structure %p.\n", (const char *)a2, 16 * (*v276 & 0xFFFFFFFE));
                    *v276 = 0;
                    v279 = (int)v276[1];
                    if (v279 >= 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1981575D0);
                    }
                    v276[1] = dword_199153018[v279];
                  }
                  v276 += 2;
                }
                while ((unint64_t)v276 < v278);
                v210 = *(_QWORD *)(v9 + 136);
              }
              v281 = *(unsigned __int16 *)(v210 + 56);
              if (!*(_WORD *)(v210 + 56))
                v281 = *(_DWORD *)(v210 + 208);
              v282 = (unint64_t *)((v210 + v281 + 7) & 0xFFFFFFFFFFFFFFF8);
              v283 = *(unsigned __int16 *)(v210 + 58);
              if (!*(_WORD *)(v210 + 58))
                v283 = *(_DWORD *)(v210 + 212);
              v284 = v210 + v283;
              if (v284 > (unint64_t)v282)
              {
                while (1)
                {
                  v492[0].i64[0] = (uint64_t)"op_create_this";
                  v492[0].i64[1] = 15;
                  v285 = *v282;
                  if (*v282 >= 2)
                  {
                    if ((v285 & 8) != 0)
                    {
                      if ((*(_BYTE *)(v285 - 79) & 1) == 0)
                        goto LABEL_910;
                    }
                    else if (*(_DWORD *)(v285 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                           || ((*(_QWORD *)((v285 & 0xFFFFFFFFFFFFC000) + 8 * ((v285 >> 10) & 0xF) + 0x28) >> (v285 >> 4)) & 1) == 0)
                    {
LABEL_910:
                      if (BYTE1(qword_1ECF4C332))
                      {
                        v491 = *v282;
                        WTF::dataLog<char [16],WTF::ASCIILiteral,char [21],WTF::RawPointer,char [2],char [2]>((uint64_t)v492, (const void **)&v491);
                      }
                      *v282 = 0;
                    }
                  }
                  if ((unint64_t)++v282 >= v284)
                  {
                    v210 = *(_QWORD *)(v9 + 136);
                    break;
                  }
                }
              }
              v286 = *(unsigned __int16 *)(v210 + 28);
              if (!*(_WORD *)(v210 + 28))
                v286 = *(_DWORD *)(v210 + 152);
              v287 = (unint64_t *)((v210 + v286 + 7) & 0xFFFFFFFFFFFFFFF8);
              v288 = *(unsigned __int16 *)(v210 + 30);
              if (!*(_WORD *)(v210 + 30))
                v288 = *(_DWORD *)(v210 + 156);
              v289 = v210 + v288;
              if (v289 > (unint64_t)v287)
              {
                while (1)
                {
                  v492[0].i64[0] = (uint64_t)"op_create_promise";
                  v492[0].i64[1] = 18;
                  v290 = *v287;
                  if (*v287 >= 2)
                  {
                    if ((v290 & 8) != 0)
                    {
                      if ((*(_BYTE *)(v290 - 79) & 1) == 0)
                        goto LABEL_928;
                    }
                    else if (*(_DWORD *)(v290 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                           || ((*(_QWORD *)((v290 & 0xFFFFFFFFFFFFC000) + 8 * ((v290 >> 10) & 0xF) + 0x28) >> (v290 >> 4)) & 1) == 0)
                    {
LABEL_928:
                      if (BYTE1(qword_1ECF4C332))
                      {
                        v491 = *v287;
                        WTF::dataLog<char [16],WTF::ASCIILiteral,char [21],WTF::RawPointer,char [2],char [2]>((uint64_t)v492, (const void **)&v491);
                      }
                      *v287 = 0;
                    }
                  }
                  if ((unint64_t)++v287 >= v289)
                  {
                    v210 = *(_QWORD *)(v9 + 136);
                    break;
                  }
                }
              }
              v291 = *(unsigned __int16 *)(v210 + 24);
              if (!*(_WORD *)(v210 + 24))
                v291 = *(_DWORD *)(v210 + 144);
              v292 = (unint64_t *)((v210 + v291 + 7) & 0xFFFFFFFFFFFFFFF8);
              v293 = *(unsigned __int16 *)(v210 + 26);
              if (*(_WORD *)(v210 + 26))
                v294 = *(unsigned __int16 *)(v210 + 26);
              else
                v294 = *(_DWORD *)(v210 + 148);
              v295 = v210 + v294;
              if (v295 > (unint64_t)v292)
              {
                while (1)
                {
                  v492[0].i64[0] = (uint64_t)"op_create_generator";
                  v492[0].i64[1] = 20;
                  v296 = *v292;
                  if (*v292 >= 2)
                  {
                    if ((v296 & 8) != 0)
                    {
                      if ((*(_BYTE *)(v296 - 79) & 1) == 0)
                        goto LABEL_947;
                    }
                    else if (*(_DWORD *)(v296 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                           || ((*(_QWORD *)((v296 & 0xFFFFFFFFFFFFC000) + 8 * ((v296 >> 10) & 0xF) + 0x28) >> (v296 >> 4)) & 1) == 0)
                    {
LABEL_947:
                      if (BYTE1(qword_1ECF4C332))
                      {
                        v491 = *v292;
                        WTF::dataLog<char [16],WTF::ASCIILiteral,char [21],WTF::RawPointer,char [2],char [2]>((uint64_t)v492, (const void **)&v491);
                      }
                      *v292 = 0;
                    }
                  }
                  if ((unint64_t)++v292 >= v295)
                  {
                    v210 = *(_QWORD *)(v9 + 136);
                    v293 = *(unsigned __int16 *)(v210 + 26);
                    break;
                  }
                }
              }
              if (!v293)
                v293 = *(_DWORD *)(v210 + 148);
              v297 = (unint64_t *)((v210 + v293 + 7) & 0xFFFFFFFFFFFFFFF8);
              v298 = *(unsigned __int16 *)(v210 + 28);
              if (!*(_WORD *)(v210 + 28))
                v298 = *(_DWORD *)(v210 + 152);
              v299 = v210 + v298;
              if (v299 > (unint64_t)v297)
              {
                while (1)
                {
                  v492[0].i64[0] = (uint64_t)"op_create_async_generator";
                  v492[0].i64[1] = 26;
                  v300 = *v297;
                  if (*v297 >= 2)
                  {
                    if ((v300 & 8) != 0)
                    {
                      if ((*(_BYTE *)(v300 - 79) & 1) == 0)
                        goto LABEL_965;
                    }
                    else if (*(_DWORD *)(v300 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                           || ((*(_QWORD *)((v300 & 0xFFFFFFFFFFFFC000) + 8 * ((v300 >> 10) & 0xF) + 0x28) >> (v300 >> 4)) & 1) == 0)
                    {
LABEL_965:
                      if (BYTE1(qword_1ECF4C332))
                      {
                        v491 = *v297;
                        WTF::dataLog<char [16],WTF::ASCIILiteral,char [21],WTF::RawPointer,char [2],char [2]>((uint64_t)v492, (const void **)&v491);
                      }
                      *v297 = 0;
                    }
                  }
                  if ((unint64_t)++v297 >= v299)
                  {
                    v210 = *(_QWORD *)(v9 + 136);
                    break;
                  }
                }
              }
              v301 = *(unsigned __int16 *)(v210 + 50);
              if (!*(_WORD *)(v210 + 50))
                v301 = *(_DWORD *)(v210 + 196);
              v302 = (v210 + v301 + 7) & 0xFFFFFFFFFFFFFFF8;
              v303 = *(unsigned __int16 *)(v210 + 52);
              if (*(_WORD *)(v210 + 52))
                v304 = *(unsigned __int16 *)(v210 + 52);
              else
                v304 = *(_DWORD *)(v210 + 200);
              v305 = v210 + v304;
              if (v305 <= v302)
              {
LABEL_982:
                if (!v303)
                  v303 = *(_DWORD *)(v210 + 200);
                v306 = (v210 + v303 + 7) & 0xFFFFFFFFFFFFFFF8;
                v307 = *(unsigned __int16 *)(v210 + 54);
                if (*(_WORD *)(v210 + 54))
                  v308 = *(unsigned __int16 *)(v210 + 54);
                else
                  v308 = *(_DWORD *)(v210 + 204);
                v309 = v210 + v308;
                if (v309 > v306)
                {
                  while (1)
                  {
                    if ((*(_DWORD *)v306 & 0x3FFu) > 8 || ((1 << *(_BYTE *)v306) & 0x196) == 0)
                    {
                      v312 = *(_QWORD *)(v306 + 8);
                      if (v312)
                      {
                        if ((v312 & 8) != 0)
                        {
                          if ((*(_BYTE *)(v312 - 79) & 1) == 0)
                            goto LABEL_1002;
                        }
                        else if (*(_DWORD *)(v312 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                               || ((*(_QWORD *)((v312 & 0xFFFFFFFFFFFFC000) + 8 * ((v312 >> 10) & 0xF) + 0x28) >> (v312 >> 4)) & 1) == 0)
                        {
LABEL_1002:
                          if (BYTE1(qword_1ECF4C332))
                          {
                            v492[0].i64[0] = *(_QWORD *)(v306 + 8);
                            WTF::dataLog<char [38],WTF::RawPointer,char [2]>((const void **)v492);
                          }
                          *(_QWORD *)(v306 + 8) = 0;
                        }
                      }
                    }
                    v306 += 24;
                    if (v306 >= v309)
                    {
                      v210 = *(_QWORD *)(v9 + 136);
                      v307 = *(unsigned __int16 *)(v210 + 54);
                      break;
                    }
                  }
                }
                if (!v307)
                  v307 = *(_DWORD *)(v210 + 204);
                v313 = (v210 + v307 + 7) & 0xFFFFFFFFFFFFFFF8;
                v314 = *(unsigned __int16 *)(v210 + 56);
                if (!*(_WORD *)(v210 + 56))
                  v314 = *(_DWORD *)(v210 + 208);
                v315 = v210 + v314;
                if (v315 > v313)
                {
                  while (1)
                  {
                    if ((*(_DWORD *)v313 & 0x3FFu) > 8 || ((1 << *(_BYTE *)v313) & 0x196) == 0)
                    {
                      v317 = *(_QWORD *)(v313 + 8);
                      if (v317)
                      {
                        if ((v317 & 8) != 0)
                        {
                          if ((*(_BYTE *)(v317 - 79) & 1) == 0)
                            goto LABEL_1025;
                        }
                        else if (*(_DWORD *)(v317 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                               || ((*(_QWORD *)((v317 & 0xFFFFFFFFFFFFC000) + 8 * ((v317 >> 10) & 0xF) + 0x28) >> (v317 >> 4)) & 1) == 0)
                        {
LABEL_1025:
                          if (BYTE1(qword_1ECF4C332))
                          {
                            v492[0].i64[0] = *(_QWORD *)(v313 + 8);
                            WTF::dataLog<char [38],WTF::RawPointer,char [2]>((const void **)v492);
                          }
                          *(_QWORD *)(v313 + 8) = 0;
                        }
                      }
                    }
                    v313 += 24;
                    if (v313 >= v315)
                      goto LABEL_1041;
                  }
                }
                goto LABEL_1041;
              }
              while (1)
              {
                v310 = *(_QWORD *)(v302 + 8);
                if (v310)
                {
                  if ((v310 & 8) != 0)
                  {
                    if ((*(_BYTE *)(v310 - 79) & 1) == 0)
                      goto LABEL_990;
                  }
                  else if (*(_DWORD *)(v310 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                         || ((*(_QWORD *)((v310 & 0xFFFFFFFFFFFFC000) + 8 * ((v310 >> 10) & 0xF) + 0x28) >> (v310 >> 4)) & 1) == 0)
                  {
LABEL_990:
                    if (BYTE1(qword_1ECF4C332))
                    {
                      v492[0].i64[0] = *(_QWORD *)(v302 + 8);
                      WTF::dataLog<char [27],WTF::RawPointer,char [2]>((const void **)v492);
                    }
                    *(_QWORD *)(v302 + 8) = 0;
                  }
                }
                v302 += 16;
                if (v302 >= v305)
                {
                  v210 = *(_QWORD *)(v9 + 136);
                  v303 = *(unsigned __int16 *)(v210 + 52);
                  goto LABEL_982;
                }
              }
            }
            while (1)
            {
              v273 = *v267;
              v274 = *((_QWORD *)v267 + 1);
              if ((_DWORD)v273)
              {
                if (*(_DWORD *)(((unint64_t)(v273 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
                  || ((*(_QWORD *)(((16 * v273) & 0xFFFFFC000)
                                 + 8 * (((unint64_t)(v273 & 0xFFFFFFFE) >> 6) & 0xF)
                                 + 0x28) >> (v273 & 0x3E)) & 1) == 0)
                {
                  break;
                }
              }
              if (v274)
              {
                if ((v274 & 8) != 0)
                {
                  if ((*(_BYTE *)(v274 - 79) & 1) == 0)
                    break;
                }
                else if (*(_DWORD *)(v274 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                       || ((*(_QWORD *)((v274 & 0xFFFFFFFFFFFFC000) + 8 * ((v274 >> 10) & 0xF) + 0x28) >> (v274 >> 4)) & 1) == 0)
                {
                  break;
                }
              }
LABEL_876:
              v267 += 4;
              if ((unint64_t)v267 >= v269)
              {
                v210 = *(_QWORD *)(v9 + 136);
                goto LABEL_888;
              }
            }
            if (BYTE1(qword_1ECF4C332))
              WTF::dataLog<char [88],char [2]>("Clearing LLInt check_private_brand transition.", "\n");
            *v267 = 0;
            *((_QWORD *)v267 + 1) = 0;
            goto LABEL_876;
          }
          while (1)
          {
            v271 = *v263;
            v270 = v263[1];
            v272 = *((_QWORD *)v263 + 1);
            if ((_DWORD)v271)
            {
              if (*(_DWORD *)(((unint64_t)(v271 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
                || ((*(_QWORD *)(((16 * v271) & 0xFFFFFC000)
                               + 8 * (((unint64_t)(v271 & 0xFFFFFFFE) >> 6) & 0xF)
                               + 0x28) >> (v271 & 0x3E)) & 1) == 0)
              {
                break;
              }
            }
            if (v272)
            {
              if ((v272 & 8) != 0)
              {
                if ((*(_BYTE *)(v272 - 79) & 1) == 0)
                  break;
              }
              else if (*(_DWORD *)(v272 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                     || ((*(_QWORD *)((v272 & 0xFFFFFFFFFFFFC000) + 8 * ((v272 >> 10) & 0xF) + 0x28) >> (v272 >> 4)) & 1) == 0)
              {
                break;
              }
            }
            if ((_DWORD)v270
              && (*(_DWORD *)(((unint64_t)(v270 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
               || ((*(_QWORD *)(((16 * v270) & 0xFFFFFC000)
                              + 8 * (((unint64_t)(v270 & 0xFFFFFFFE) >> 6) & 0xF)
                              + 0x28) >> (v270 & 0x3E)) & 1) == 0))
            {
              break;
            }
LABEL_858:
            v263 += 4;
            if ((unint64_t)v263 >= v266)
            {
              v210 = *(_QWORD *)(v9 + 136);
              v264 = *(unsigned __int16 *)(v210 + 12);
              goto LABEL_848;
            }
          }
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [45],char [2]>();
          *(_QWORD *)v263 = 0;
          *((_QWORD *)v263 + 1) = 0;
          goto LABEL_858;
        }
        while (1)
        {
          v259 = *(unsigned int *)(v256 + 8);
          v260 = *(unsigned int *)(v256 + 16);
          v261 = *(_QWORD *)v256;
          if ((_DWORD)v259)
          {
            if (*(_DWORD *)(((unint64_t)(v259 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
              || ((*(_QWORD *)(((16 * v259) & 0xFFFFFC000)
                             + 8 * (((unint64_t)(v259 & 0xFFFFFFFE) >> 6) & 0xF)
                             + 0x28) >> (v259 & 0x3E)) & 1) == 0)
            {
              break;
            }
          }
          if (v261)
          {
            if ((v261 & 8) != 0)
            {
              if ((*(_BYTE *)(v261 - 79) & 1) == 0)
                break;
            }
            else if (*(_DWORD *)(v261 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                   || ((*(_QWORD *)((v261 & 0xFFFFFFFFFFFFC000) + 8 * ((v261 >> 10) & 0xF) + 0x28) >> (v261 >> 4)) & 1) == 0)
            {
              break;
            }
          }
          if ((_DWORD)v260
            && (*(_DWORD *)(((unint64_t)(v260 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
             || ((*(_QWORD *)(((16 * v260) & 0xFFFFFC000)
                            + 8 * (((unint64_t)(v260 & 0xFFFFFFFE) >> 6) & 0xF)
                            + 0x28) >> (v260 & 0x3E)) & 1) == 0))
          {
            break;
          }
LABEL_828:
          v256 += 24;
          if (v256 >= v258)
          {
            v210 = *(_QWORD *)(v9 + 136);
            goto LABEL_843;
          }
        }
        if (BYTE1(qword_1ECF4C332))
          WTF::dataLog<char [88],char [2]>("Clearing LLInt put_private_name transition.", "\n");
        *(_QWORD *)v256 = 0;
        *(_QWORD *)(v256 + 8) = 0;
        *(_DWORD *)(v256 + 16) = 0;
        goto LABEL_828;
      }
      while (1)
      {
        v252 = *v249;
        v253 = v249[2];
        v254 = *((_QWORD *)v249 + 2);
        if ((_DWORD)v252)
        {
          if (*(_DWORD *)(((unint64_t)(v252 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
            || ((*(_QWORD *)(((16 * v252) & 0xFFFFFC000)
                           + 8 * (((unint64_t)(v252 & 0xFFFFFFFE) >> 6) & 0xF)
                           + 0x28) >> (v252 & 0x3E)) & 1) == 0)
          {
            break;
          }
        }
        if ((_DWORD)v253
          && (*(_DWORD *)(((unint64_t)(v253 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
           || ((*(_QWORD *)(((16 * v253) & 0xFFFFFC000)
                          + 8 * (((unint64_t)(v253 & 0xFFFFFFFE) >> 6) & 0xF)
                          + 0x28) >> (v253 & 0x3E)) & 1) == 0))
        {
          break;
        }
        if (v254)
        {
          if ((v254 & 8) != 0)
          {
            if ((*(_BYTE *)(v254 - 79) & 1) == 0)
              break;
          }
          else if (*(_DWORD *)(v254 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
                 || ((*(_QWORD *)((v254 & 0xFFFFFFFFFFFFC000) + 8 * ((v254 >> 10) & 0xF) + 0x28) >> (v254 >> 4)) & 1) == 0)
          {
            break;
          }
        }
LABEL_804:
        v249 += 6;
        if ((unint64_t)v249 >= v251)
        {
          v210 = *(_QWORD *)(v9 + 136);
          goto LABEL_819;
        }
      }
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("Clearing LLInt put transition.", "\n");
      *(_QWORD *)v249 = 0;
      v249[2] = 0;
      *((_QWORD *)v249 + 2) = 0;
      goto LABEL_804;
    }
    while (1)
    {
      v246 = v243[1];
      v247 = *(unsigned int *)v243;
      if (v246)
      {
        if ((v246 & 8) != 0)
        {
          if ((*(_BYTE *)(v246 - 79) & 1) == 0)
            goto LABEL_780;
        }
        else if (*(_DWORD *)(v246 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432)
               || ((*(_QWORD *)((v246 & 0xFFFFFFFFFFFFC000) + 8 * ((v246 >> 10) & 0xF) + 0x28) >> (v246 >> 4)) & 1) == 0)
        {
LABEL_780:
          if (BYTE1(qword_1ECF4C332))
            WTF::dataLog<char [88],char [2]>("Clearing LLInt private property access.", "\n");
          *v243 = 0;
          v243[1] = 0;
          goto LABEL_783;
        }
      }
      if ((_DWORD)v247
        && (*(_DWORD *)(((unint64_t)(v247 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
         || ((*(_QWORD *)(((16 * v247) & 0xFFFFFC000)
                        + 8 * (((unint64_t)(v247 & 0xFFFFFFFE) >> 6) & 0xF)
                        + 0x28) >> (v247 & 0x3E)) & 1) == 0))
      {
        goto LABEL_780;
      }
LABEL_783:
      v243 += 2;
      if ((unint64_t)v243 >= v245)
      {
        v210 = *(_QWORD *)(v9 + 136);
        goto LABEL_795;
      }
    }
  }
LABEL_1041:
  v318 = *(_QWORD *)(v9 + 112);
  if (!v318)
    goto LABEL_1042;
  v381 = *(_DWORD *)(v318 - 4);
  if (!v381)
    goto LABEL_1042;
  v488 = (uint64_t *)(v9 + 112);
  v382 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v383 = (unsigned int *)(v318 + 16 * --v381);
    v384 = *v383;
    if (*v383)
      v385 = 0;
    else
      v385 = v383[1] == -1;
    v386 = v385;
    if ((_DWORD)v384 != 1 && (v386 & 1) == 0)
    {
      if (*(_DWORD *)(((unint64_t)(v384 >> 10) << 14) | 0x20) != *(_DWORD *)(v209 + 432)
        || ((*(_QWORD *)(((16 * v384) & 0xFFFFFC000)
                       + 8 * (((unint64_t)(v384 & 0xFFFFFFFE) >> 6) & 0xF)
                       + 0x28) >> (v384 & 0x3E)) & 1) == 0)
      {
LABEL_1185:
        v490 = v382;
        v397 = v383[1];
        v398 = *(uint64_t **)(*(_QWORD *)(v9 + 56) + 80);
        v399 = *v398;
        v400 = (unsigned __int8 *)(*v398 + (v397 >> 2));
        v401 = *v400;
        v402 = v401;
        if ((v401 | 2) == 0x82)
          v402 = v400[1];
        v403 = v397 >> 2;
        if (v402 > 17)
        {
          if (v402 == 19)
          {
            if (BYTE1(qword_1ECF4C332))
            {
              WTF::dataLog<char [88],char [2]>("Clearing LLInt property access.", "\n");
              v399 = *v398;
              v401 = *(unsigned __int8 *)(*v398 + v403);
            }
            v415 = v399 + v403;
            if (v401 == 128)
            {
              v416 = *(unsigned __int16 *)(v415 + 8);
            }
            else if (v401 == 130)
            {
              v416 = *(unsigned int *)(v415 + 14);
            }
            else
            {
              v416 = *(unsigned __int8 *)(v415 + 4);
            }
            v417 = *(_QWORD *)(v9 + 136);
            v418 = *(unsigned __int16 *)(v417 + 38);
            if (!*(_WORD *)(v417 + 38))
              v418 = *(_DWORD *)(v417 + 172);
            v411 = ((v417 + v418 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v416;
          }
          else
          {
            if (v402 != 18)
              goto LABEL_1219;
            if (BYTE1(qword_1ECF4C332))
            {
              WTF::dataLog<char [88],char [2]>("Clearing LLInt property access.", "\n");
              v399 = *v398;
              v401 = *(unsigned __int8 *)(*v398 + v403);
            }
            v407 = v399 + v403;
            if (v401 == 128)
            {
              v408 = *(unsigned __int16 *)(v407 + 10);
            }
            else if (v401 == 130)
            {
              v408 = *(unsigned int *)(v407 + 18);
            }
            else
            {
              v408 = *(unsigned __int8 *)(v407 + 5);
            }
            v409 = *(_QWORD *)(v9 + 136);
            v410 = *(unsigned __int16 *)(v409 + 36);
            if (!*(_WORD *)(v409 + 36))
              v410 = *(_DWORD *)(v409 + 168);
            v411 = ((v409 + v410 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v408;
          }
          *(_BYTE *)(v411 + 14) = 1;
          *(_QWORD *)v411 = 0;
        }
        else if (v402 == 2)
        {
          if (BYTE1(qword_1ECF4C332))
          {
            WTF::dataLog<char [88],char [2]>("Clearing LLInt iterator next property access.", "\n");
            v399 = *v398;
          }
          JSC::OpIteratorNext::decode((_DWORD *)(v399 + v403), (uint64_t)v492, a9);
          v412 = *(_QWORD *)(v9 + 136);
          v413 = *(unsigned __int16 *)(v412 + 4);
          if (!*(_WORD *)(v412 + 4))
            v413 = *(_DWORD *)(v412 + 104);
          v414 = ((v412 + v413 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)v494 << 7);
          *(_BYTE *)(v414 + 94) = 1;
          *(double *)&a9 = 0.0;
          *(_QWORD *)(v414 + 80) = 0;
          *(_BYTE *)(v414 + 110) = 1;
          *(_QWORD *)(v414 + 96) = 0;
        }
        else if (v402 == 4)
        {
          if (BYTE1(qword_1ECF4C332))
          {
            WTF::dataLog<char [88],char [2]>("Clearing LLInt iterator open property access.", "\n");
            v399 = *v398;
          }
          JSC::OpIteratorOpen::decode((_DWORD *)(v399 + v403), v492, a9);
          v404 = *(_QWORD *)(v9 + 136);
          v405 = *(unsigned __int16 *)(v404 + 8);
          if (!*(_WORD *)(v404 + 8))
            v405 = *(_DWORD *)(v404 + 112);
          v406 = ((v404 + v405 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 * v493;
          *(_BYTE *)(v406 + 94) = 1;
          *(_QWORD *)(v406 + 80) = 0;
        }
LABEL_1219:
        *v383 = 1;
        v419 = v318 + 16 * v381;
        v420 = *(_QWORD *)(v419 + 8);
        *(_QWORD *)(v419 + 8) = 0;
        if (v420)
        {
          v421 = (uint64_t *)(v420 + 8);
          v422 = *(unsigned int *)v420;
          if ((_DWORD)v422)
          {
            v423 = 56 * v422;
            do
            {
              v424 = (uint64_t *)v421[1];
              if (v424)
              {
                v425 = *v421;
                *v424 = *v421;
                *(_QWORD *)(v425 + 8) = v424;
                *v421 = 0;
                v421[1] = 0;
              }
              v421 += 7;
              v423 -= 56;
            }
            while (v423);
          }
          v426 = *(_QWORD *)(StatusReg + 752);
          if (v426)
          {
            if (v420 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v420 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v420)) & 1) == 0)
            {
              if (v420 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v420 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v420 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v420) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_1228;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v426, v420, 1, a4, a5, a6, a7, (uint64_t)a8);
            }
            else
            {
LABEL_1228:
              v427 = *(unsigned int *)(v426 + 8000);
              if (v427 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v426, v420, (os_unfair_lock_s *)5, a4, a5, a6, a7, (uint64_t)a8);
              }
              else
              {
                *(_QWORD *)(v426 + 8 * v427) = v420 | 0x5000000000000;
                *(_DWORD *)(v426 + 8000) = v427 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v420, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        v382 = v490 + 1;
        continue;
      }
      v387 = *(int **)(v318 + 16 * v381 + 8);
      if (v387)
      {
        v388 = *v387;
        v387 += 2;
        v389 = &v387[14 * v388];
      }
      else
      {
        v389 = 0;
      }
      while (v387 != v389)
      {
        if ((*((_QWORD *)v387 + 5) & 0xFFFFFFFFFFFFFFLL) == 0)
          goto LABEL_1185;
        v390 = *((_QWORD *)v387 + 4);
        if ((v390 & 8) != 0)
        {
          LOBYTE(v390) = *(_BYTE *)(v390 - 79) & 1;
        }
        else if (*(_DWORD *)(v390 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v209 + 432))
        {
          v390 = (*(_QWORD *)((v390 & 0xFFFFFFFFFFFFC000) + 8 * ((v390 >> 10) & 0xF) + 0x28) >> (v390 >> 4)) & 1;
        }
        else
        {
          LOBYTE(v390) = 0;
        }
        v391 = *((_QWORD *)v387 + 5);
        if ((v391 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v391) <= 7u && ((1 << BYTE6(*((_QWORD *)v387 + 5))) & 0x9C) != 0)
        {
          v394 = *((_QWORD *)v387 + 6);
          if (v394)
          {
            if ((v394 & 8) != 0)
            {
              LOBYTE(v395) = *(_BYTE *)(v394 - 79) & 1;
            }
            else if (*(_DWORD *)(v394 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v209 + 432))
            {
              v395 = (*(_QWORD *)((v394 & 0xFFFFFFFFFFFFC000) + 8 * ((v394 >> 10) & 0xF) + 0x28) >> (v394 >> 4)) & 1;
            }
            else
            {
              LOBYTE(v395) = 0;
            }
            LOBYTE(v390) = v390 & v395;
            v391 = *((_QWORD *)v387 + 5);
          }
        }
        if ((v391 & 0xFF000000000000) == 0x5000000000000)
        {
          v396 = *((_QWORD *)v387 + 6);
          if (v396)
          {
            if ((v396 & 0xFFFE000000000002) == 0)
            {
              if ((v396 & 8) != 0)
              {
                LOBYTE(v396) = *(_BYTE *)(v396 - 79) & 1;
              }
              else
              {
                if (*(_DWORD *)(v396 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v209 + 432))
                  goto LABEL_1185;
                v396 = (*(_QWORD *)((v396 & 0xFFFFFFFFFFFFC000) + 8 * ((v396 >> 10) & 0xF) + 0x28) >> (v396 >> 4)) & 1;
              }
              LOBYTE(v390) = v390 & v396;
            }
          }
        }
        if ((v390 & 1) == 0)
          goto LABEL_1185;
        v387 += 14;
      }
    }
  }
  while (v381);
  v469 = *v488;
  if (v382)
  {
    *(_DWORD *)(v469 - 16) += v382;
    v470 = *v488;
    if (*v488)
      v471 = *(_DWORD *)(v470 - 12);
    else
      v471 = 0;
    *(_DWORD *)(v470 - 12) = v471 - v382;
    v469 = *v488;
  }
  if (v469)
  {
    v472 = *(_DWORD *)(v469 - 4);
    v473 = 6 * *(_DWORD *)(v469 - 12);
    v474 = v472 < 9 || v473 >= v472;
    if (!v474)
      WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::shrinkToBestSize(v488);
  }
LABEL_1042:
  v319 = *(unsigned __int16 **)(v9 + 136);
  if (v319)
  {
    v320 = v319[23];
    if (!v319[23])
      v320 = *((_DWORD *)v319 + 47);
    v321 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v320 + 7) & 0xFFFFFFFFFFFFFFF8);
    v322 = v319[24];
    if (!v319[24])
      v322 = *((_DWORD *)v319 + 48);
    v323 = (JSC::CallLinkInfo *)((char *)v319 + v322);
    if (v323 > v321)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v321, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v321 = (JSC::CallLinkInfo *)((char *)v321 + 96);
      }
      while (v321 < v323);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v324 = v319[9];
    if (!v319[9])
      v324 = *((_DWORD *)v319 + 33);
    v325 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v324 + 7) & 0xFFFFFFFFFFFFFFF8);
    v326 = v319[10];
    if (v319[10])
      v327 = v319[10];
    else
      v327 = *((_DWORD *)v319 + 34);
    v328 = (JSC::CallLinkInfo *)((char *)v319 + v327);
    if (v328 > v325)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v325, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v325 = (JSC::CallLinkInfo *)((char *)v325 + 96);
      }
      while (v325 < v328);
      v319 = *(unsigned __int16 **)(v9 + 136);
      v326 = v319[10];
    }
    if (!v326)
      v326 = *((_DWORD *)v319 + 34);
    v329 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v326 + 7) & 0xFFFFFFFFFFFFFFF8);
    v330 = v319[11];
    if (!v319[11])
      v330 = *((_DWORD *)v319 + 35);
    v331 = (JSC::CallLinkInfo *)((char *)v319 + v330);
    if (v331 > v329)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v329, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v329 = (JSC::CallLinkInfo *)((char *)v329 + 80);
      }
      while (v329 < v331);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v332 = v319[8];
    if (!v319[8])
      v332 = *((_DWORD *)v319 + 32);
    v333 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v332 + 7) & 0xFFFFFFFFFFFFFFF8);
    v334 = v319[9];
    if (!v319[9])
      v334 = *((_DWORD *)v319 + 33);
    v335 = (JSC::CallLinkInfo *)((char *)v319 + v334);
    if (v335 > v333)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v333, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v333 = (JSC::CallLinkInfo *)((char *)v333 + 80);
      }
      while (v333 < v335);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v336 = v319[4];
    if (!v319[4])
      v336 = *((_DWORD *)v319 + 28);
    v337 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v336 + 7) & 0xFFFFFFFFFFFFFFF8);
    v338 = v319[5];
    if (!v319[5])
      v338 = *((_DWORD *)v319 + 29);
    v339 = (JSC::CallLinkInfo *)((char *)v319 + v338);
    if (v339 > v337)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v337, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v337 = (JSC::CallLinkInfo *)((char *)v337 + 112);
      }
      while (v337 < v339);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v340 = v319[2];
    if (!v319[2])
      v340 = *((_DWORD *)v319 + 26);
    v341 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v340 + 7) & 0xFFFFFFFFFFFFFFF8);
    v342 = v319[3];
    if (!v319[3])
      v342 = *((_DWORD *)v319 + 27);
    v343 = (JSC::CallLinkInfo *)((char *)v319 + v342);
    if (v343 > v341)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v341, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v341 = (JSC::CallLinkInfo *)((char *)v341 + 128);
      }
      while (v341 < v343);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v344 = v319[1];
    if (!v319[1])
      v344 = *((_DWORD *)v319 + 25);
    v345 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v344 + 7) & 0xFFFFFFFFFFFFFFF8);
    v346 = v319[2];
    if (!v319[2])
      v346 = *((_DWORD *)v319 + 26);
    v347 = (JSC::CallLinkInfo *)((char *)v319 + v346);
    if (v347 > v345)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v345, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v345 = (JSC::CallLinkInfo *)((char *)v345 + 80);
      }
      while (v345 < v347);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v348 = *v319;
    if (!*v319)
      v348 = *((_DWORD *)v319 + 24);
    v349 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v348 + 7) & 0xFFFFFFFFFFFFFFF8);
    v350 = v319[1];
    if (!v319[1])
      v350 = *((_DWORD *)v319 + 25);
    v351 = (JSC::CallLinkInfo *)((char *)v319 + v350);
    if (v351 > v349)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v349, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v349 = (JSC::CallLinkInfo *)((char *)v349 + 80);
      }
      while (v349 < v351);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v352 = v319[11];
    if (!v319[11])
      v352 = *((_DWORD *)v319 + 35);
    v353 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v352 + 7) & 0xFFFFFFFFFFFFFFF8);
    v354 = v319[12];
    if (!v319[12])
      v354 = *((_DWORD *)v319 + 36);
    v355 = (JSC::CallLinkInfo *)((char *)v319 + v354);
    if (v355 > v353)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v353, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v353 = (JSC::CallLinkInfo *)((char *)v353 + 80);
      }
      while (v353 < v355);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v356 = v319[3];
    if (!v319[3])
      v356 = *((_DWORD *)v319 + 27);
    v357 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v356 + 7) & 0xFFFFFFFFFFFFFFF8);
    v358 = v319[4];
    if (!v319[4])
      v358 = *((_DWORD *)v319 + 28);
    v359 = (JSC::CallLinkInfo *)((char *)v319 + v358);
    if (v359 > v357)
    {
      do
      {
        JSC::CallLinkInfo::visitWeak(v357, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
        v357 = (JSC::CallLinkInfo *)((char *)v357 + 80);
      }
      while (v357 < v359);
      v319 = *(unsigned __int16 **)(v9 + 136);
    }
    v360 = v319[24];
    if (!v319[24])
      v360 = *((_DWORD *)v319 + 48);
    v361 = (JSC::CallLinkInfo *)(((unint64_t)v319 + v360 + 7) & 0xFFFFFFFFFFFFFFF8);
    v362 = v319[25];
    if (!v319[25])
      v362 = *((_DWORD *)v319 + 49);
    for (ii = (JSC::CallLinkInfo *)((char *)v319 + v362); v361 < ii; v361 = (JSC::CallLinkInfo *)((char *)v361 + 96))
      JSC::CallLinkInfo::visitWeak(v361, a2, a3, (uint8x8_t)a9, a4, a5, a6, a7, (uint64_t)a8);
  }
LABEL_1119:
  v364 = *(unsigned int **)(v9 + 120);
  if (v364)
  {
    v365 = v364 + 2;
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 + 1, v365));
    do
    {
      v367 = __ldaxr(v365);
      v368 = v367 - 1;
    }
    while (__stlxr(v368, v365));
    if (!v368)
    {
      atomic_store(1u, v364 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v364 + 32))(v364);
    }
    v369 = *(unsigned int **)(v9 + 120);
    if (!v369)
      goto LABEL_1247;
    v370 = *((_BYTE *)v369 + 12);
    if ((v370 & 0xFE) != 4)
      goto LABEL_1127;
    for (jj = *(JSC::CallLinkInfo **)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v369 + 72))(*(_QWORD *)(v9 + 120))
                                     + 152); jj; jj = (JSC::CallLinkInfo *)*((_QWORD *)jj + 12))
      JSC::CallLinkInfo::visitWeak(jj, *(JSC::VM **)(v9 + 72), v428, v435, v429, v430, v431, v432, v433);
    for (kk = *(JSC::DirectCallLinkInfo **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 72))(*(_QWORD *)(v9 + 120))
                                           + 160); kk; kk = (JSC::DirectCallLinkInfo *)*((_QWORD *)kk + 13))
      JSC::DirectCallLinkInfo::visitWeak(kk, *(JSC::VM **)(v9 + 72), v443, (uint64_t)v436, v437, v438, v439, v440, v441);
    v369 = *(unsigned int **)(v9 + 120);
    if (!v369)
      goto LABEL_1247;
    v370 = *((_BYTE *)v369 + 12);
    if ((v370 & 0xFE) == 4
      && (v444 = *(_QWORD *)(v9 + 128)) != 0
      && (v445 = *(unsigned int **)(v444 + 24)) != 0
      && (v448 = *v445, v446 = (JSC::CallLinkInfo *)(v445 + 2), (v447 = v448) != 0))
    {
      v449 = 96 * v447;
      do
      {
        v450 = v446;
        JSC::CallLinkInfo::visitWeak(v446, *(JSC::VM **)(v9 + 72), v436, v443, v437, v438, v439, v440, v441);
        v446 = (JSC::CallLinkInfo *)((char *)v450 + 96);
        v449 -= 96;
      }
      while (v449);
      v369 = *(unsigned int **)(v9 + 120);
      if (v369)
      {
        v370 = *((_BYTE *)v369 + 12);
        goto LABEL_1127;
      }
LABEL_1247:
      v451 = *(unsigned int **)(v9 + 128);
      if (v451)
      {
        v452 = *v451;
        if ((_DWORD)v452)
        {
          v453 = -34 * v452;
          do
          {
            JSC::StructureStubInfo::visitWeakReferences((uint64_t)&v451[v453], (uint64_t)v492, v9);
            v453 += 34;
          }
          while (v453 * 4);
        }
      }
LABEL_1251:
      v454 = *(_BYTE **)(v9 + 120);
      if (v454)
      {
        if ((v454[12] & 0xFE) == 4)
        {
          v462 = *(JSC::RecordedStatuses **)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v454 + 72))(v454) + 120);
          if (v462)
            JSC::RecordedStatuses::finalize(v462, a2, v463, v464, v465, v466, v467, v468);
        }
      }
    }
    else
    {
LABEL_1127:
      if ((v370 & 0xFE) != 4)
        goto LABEL_1247;
      v371 = v369 + 2;
      do
        v372 = __ldaxr(v371);
      while (__stlxr(v372 + 1, v371));
      v373 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v369 + 72))(v369);
      do
      {
        v374 = __ldaxr(v371);
        v375 = v374 - 1;
      }
      while (__stlxr(v375, v371));
      if (!v375)
      {
        atomic_store(1u, v369 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v369 + 32))(v369);
      }
      for (mm = *(_QWORD *)(v373 + 144); mm; mm = *(_QWORD *)(mm + 136))
        JSC::StructureStubInfo::visitWeakReferences(mm, (uint64_t)v492, v9);
      v377 = *(_QWORD *)(v9 + 120);
      if (v377)
      {
        if ((*(_BYTE *)(v377 + 12) & 0xFE) == 4)
        {
          v378 = *(unsigned int **)(v9 + 128);
          if (v378)
          {
            v379 = *v378;
            if ((_DWORD)v379)
            {
              v380 = -34 * v379;
              do
              {
                JSC::StructureStubInfo::visitWeakReferences((uint64_t)&v378[v380], (uint64_t)v492, v9);
                v380 += 34;
              }
              while (v380 * 4);
            }
          }
        }
        goto LABEL_1251;
      }
    }
  }
LABEL_1253:
  if ((_BYTE)word_1ECF4C758)
    v455 = 1;
  else
    v455 = BYTE1(dword_1ECF4C240) == 0;
  if (v455 || BYTE1(dword_1ECF4C723) != 0)
  {
    v457 = *(_QWORD *)(v9 + 120);
    if (v457)
    {
      v458 = 0.0;
      switch(*(_BYTE *)(v457 + 12))
      {
        case 0:
        case 1:
          break;
        case 2:
          v459 = *(_QWORD *)(v9 + 56);
          v460 = (int *)(v459 + 168);
          v461 = (float *)(v459 + 172);
          goto LABEL_1277;
        case 3:
          v460 = (int *)(v9 + 200);
          v461 = (float *)(v9 + 204);
          goto LABEL_1277;
        case 4:
          v460 = (int *)(v457 + 348);
          v461 = (float *)(v457 + 352);
LABEL_1277:
          v458 = *v461 + (double)*v460;
          goto LABEL_1278;
        case 5:
          goto LABEL_1279;
        default:
LABEL_1278:
          if (*(float *)(v9 + 212) < v458)
          {
LABEL_1279:
            v475 = *(_QWORD *)(v9 + 56);
            v476 = *(unsigned __int16 *)(v475 + 28);
            v475 += 28;
            v477 = (v476 | (*(unsigned __int8 *)(v475 + 2) << 16)) & 0xFFFE3FFF;
            *(_WORD *)v475 = v476 & 0x3FFF;
            *(_BYTE *)(v475 + 2) = BYTE2(v477);
          }
          *(float *)(v9 + 212) = v458;
          break;
      }
    }
  }
  if ((v9 & 8) != 0)
  {
    v483 = *(unsigned __int8 *)(v9 - 76);
    v484 = 1 << v483;
    v485 = (unsigned int *)(*(_QWORD *)(v9 - 72) + ((v483 >> 3) & 0x1C) + 264);
    while (1)
    {
      v486 = *v485;
      if ((*v485 & v484) == 0)
        break;
      v487 = __ldxr(v485);
      if (v487 == v486)
      {
        if (!__stxr(v486 & ~v484, v485))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v478 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v9 & 0xFFFFFFFFFFFFC000) + 0x10) + 304)
                                 + (*(_DWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                 + 8)
                     + 8 * (*(_DWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFC000) + 12) & 7));
    if (v478)
    {
      v479 = 1 << (v9 >> 4);
      v480 = (unint64_t *)(v478 + 8 * ((v9 >> 10) & 0xF));
      while (1)
      {
        v481 = *v480;
        if ((*v480 & v479) == 0)
          break;
        v482 = __ldxr(v480);
        if (v482 == v481)
        {
          if (!__stxr(v481 & ~v479, v480))
            break;
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  *(_BYTE *)(v9 + 19) = 0;
}

_QWORD *JSC::CodeBlock::updateAllPredictions(JSC::CodeBlock *this, int8x8_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _BOOL8 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  __int16 v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  void *i;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int **v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  unint64_t *v61;
  unsigned int v62;
  unint64_t j;
  uint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  unsigned int *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t ValueProfileForBytecodeIndex;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  BOOL v123;
  uint64_t v125;
  unint64_t v126;
  BOOL v127;
  uint64_t v129;
  BOOL v130;
  unsigned int *v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v149;
  char v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unint64_t *v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t k;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v163;
  char v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unint64_t *v169;
  unsigned int v170;
  unint64_t m;
  unsigned int v172;
  unsigned int v173;
  unint64_t v174;
  uint64_t v176;
  char v177;
  int v178;
  int v179;
  int v180;
  unint64_t *v181;
  unsigned int v182;
  unint64_t n;
  unsigned int v184;
  unsigned int v185;
  unint64_t v186;
  uint64_t v188;
  char v189;
  int v190;
  int v191;
  int v192;

  v10 = *((_QWORD *)this + 7);
  v11 = *(_WORD *)(v10 + 28);
  v12 = (unsigned int *)*((_QWORD *)this + 19);
  v13 = qword_1ECF4C080;
  v14 = 0;
  v15 = (uint64_t *)(v12 + 6);
  if ((v11 & 1) == 0)
  {
    if (!v12)
      goto LABEL_84;
LABEL_3:
    for (i = (void *)*v12; ; i = 0)
    {
      if (v14 >= (unint64_t)i)
        goto LABEL_175;
      if (v14 >= *v12)
        goto LABEL_285;
      v17 = *(v15 - 2);
      if (!v17)
      {
        v18 = 0;
        v19 = *(v15 - 1);
        if (!v19)
          goto LABEL_8;
        goto LABEL_25;
      }
      if (v17 >= 0xFFFE000000000000)
      {
        if ((v17 & 0xFFFFFFFE) != 0)
          v18 = 0x200000000;
        else
          v18 = 0x100000000;
        goto LABEL_24;
      }
      if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a2 = (int8x8_t)(v17 - 0x2000000000000);
        v33 = (uint64_t)COERCE_DOUBLE(v17 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 != *(double *)&a2)
          goto LABEL_68;
        if (v33)
        {
          if ((unint64_t)(v33 + 0x8000000000000) >> 52)
            goto LABEL_68;
        }
        else if ((uint64_t)v17 < 0x2000000000000)
        {
LABEL_68:
          v18 = 0x2000000000;
          goto LABEL_24;
        }
        v18 = 0x1000000000;
        goto LABEL_24;
      }
      v23 = v17 & 0xFFFE000000000002;
      v24 = v17 >> 36;
      v25 = (v17 & 0xFFFFFFFFFLL) != 0 && v24 == 0;
      a6 = v25;
      if (v13 <= v17 && (a6 & 1) != 0)
        break;
      if (v23)
      {
        v18 = 0x20000000000;
        if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
          v18 = 0x10000000000;
        goto LABEL_24;
      }
      if (v13 > v17)
        goto LABEL_92;
      v18 = 0;
      if (!v24 && (v17 & 0xFFFFFFFFFLL) != 0)
      {
        v26 = *(unsigned __int8 *)(v17 + 5);
        if (v26 != 2)
        {
LABEL_23:
          v18 = JSC::speculatedTypeMapping[v26];
          goto LABEL_24;
        }
        v31 = *(_QWORD *)(v17 + 8);
        v18 = 805306368;
        if (v31)
          goto LABEL_53;
      }
LABEL_24:
      *(v15 - 2) = 0;
      v19 = *(v15 - 1);
      if (!v19)
        goto LABEL_8;
LABEL_25:
      if (v19 >= 0xFFFE000000000000)
      {
        if ((v19 & 0xFFFFFFFE) != 0)
          v30 = 0x200000000;
        else
          v30 = 0x100000000;
        goto LABEL_38;
      }
      if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a2 = (int8x8_t)(v19 - 0x2000000000000);
        v34 = (uint64_t)COERCE_DOUBLE(v19 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 == *(double *)&a2)
        {
          if (v34)
          {
            if (!((unint64_t)(v34 + 0x8000000000000) >> 52))
              goto LABEL_78;
          }
          else if ((uint64_t)v19 >= 0x2000000000000)
          {
LABEL_78:
            v30 = 0x1000000000;
            goto LABEL_38;
          }
        }
        v30 = 0x2000000000;
      }
      else
      {
        v27 = v19 & 0xFFFE000000000002;
        a6 = v19 >> 36;
        a7 = (v19 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v13 <= v19 && a7)
        {
          if (v27)
          {
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v30 = 0x10000000000;
            else
              v30 = 0x20000000000;
            goto LABEL_38;
          }
          v29 = *(unsigned __int8 *)(v19 + 5);
          if (v29 != 2)
            goto LABEL_37;
          v32 = *(_QWORD *)(v19 + 8);
          if (!v32)
            goto LABEL_72;
          v30 = 805306368;
        }
        else
        {
          if (v27)
          {
            v30 = 0x20000000000;
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v30 = 0x10000000000;
            goto LABEL_38;
          }
          if (v13 > v19)
          {
LABEL_100:
            v30 = 0;
            goto LABEL_38;
          }
          v30 = 0;
          if (a6)
            goto LABEL_38;
          a6 = v19 & 0xFFFFFFFFFLL;
          if ((v19 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_38;
          v29 = *(unsigned __int8 *)(v19 + 5);
          if (v29 != 2)
          {
LABEL_37:
            v30 = JSC::speculatedTypeMapping[v29];
            goto LABEL_38;
          }
          v32 = *(_QWORD *)(v19 + 8);
          v30 = 805306368;
          if (!v32)
            goto LABEL_38;
        }
        if ((v32 & 1) == 0)
        {
          if (v32 < v13)
            goto LABEL_100;
          v30 = 0;
          a6 = v32 >> 36;
          if (v32 >> 36)
            goto LABEL_38;
          a6 = v32 & 0xFFFFFFFFFLL;
          if ((v32 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_38;
          if ((*(_BYTE *)(v32 + 16) & 0x10) == 0)
          {
LABEL_72:
            v30 = 805306368;
            goto LABEL_38;
          }
          v30 = 0x10000000;
        }
      }
LABEL_38:
      v18 |= v30;
      *(v15 - 1) = 0;
LABEL_8:
      v20 = *v15 | v18;
      *v15 = v20;
      v21 = *(unsigned int **)(v10 + 184);
      if (v14 >= *v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198158CACLL);
      }
      a4 = (uint64_t)&v21[2 * v14];
      a5 = *(_QWORD *)(a4 + 8);
      v22 = a5 | v20;
      *v15 = v22;
      v15 += 3;
      *(_QWORD *)(a4 + 8) = v22;
      ++v14;
      if (v12)
        goto LABEL_3;
LABEL_84:
      ;
    }
    if (v23)
    {
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
        v18 = 0x10000000000;
      else
        v18 = 0x20000000000;
      goto LABEL_24;
    }
    v26 = *(unsigned __int8 *)(v17 + 5);
    if (v26 != 2)
      goto LABEL_23;
    v31 = *(_QWORD *)(v17 + 8);
    if (!v31)
      goto LABEL_71;
    v18 = 805306368;
LABEL_53:
    if ((v31 & 1) != 0)
      goto LABEL_24;
    if (v31 < v13)
    {
LABEL_92:
      v18 = 0;
      goto LABEL_24;
    }
    v18 = 0;
    if (!(v31 >> 36) && (v31 & 0xFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)(v31 + 16) & 0x10) != 0)
      {
        v18 = 0x10000000;
        goto LABEL_24;
      }
LABEL_71:
      v18 = 805306368;
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  while (1)
  {
    i = v12 ? (void *)*v12 : 0;
    if (v14 >= (unint64_t)i)
      break;
    if (v14 >= *v12)
    {
LABEL_285:
      __break(0xC471u);
      JUMPOUT(0x198159338);
    }
    v37 = *(v15 - 2);
    if (!v37)
    {
      v36 = 0;
      a5 = *(v15 - 1);
      if (a5)
        goto LABEL_118;
      goto LABEL_111;
    }
    if (v37 >= 0xFFFE000000000000)
    {
      if ((v37 & 0xFFFFFFFE) != 0)
        v36 = 0x200000000;
      else
        v36 = 0x100000000;
      goto LABEL_144;
    }
    if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a2 = (int8x8_t)(v37 - 0x2000000000000);
      v47 = (uint64_t)COERCE_DOUBLE(v37 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
        goto LABEL_174;
      if (v47)
      {
        if ((unint64_t)(v47 + 0x8000000000000) >> 52)
          goto LABEL_174;
      }
      else if ((uint64_t)v37 < 0x2000000000000)
      {
LABEL_174:
        v36 = 0x2000000000;
        goto LABEL_144;
      }
      v36 = 0x1000000000;
      goto LABEL_144;
    }
    v41 = v37 & 0xFFFE000000000002;
    v42 = v37 >> 36;
    a6 = (v37 & 0xFFFFFFFFFLL) != 0 && v42 == 0;
    if (v13 <= v37 && (a6 & 1) != 0)
    {
      if (v41)
      {
        if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 6)
          v36 = 0x10000000000;
        else
          v36 = 0x20000000000;
        goto LABEL_144;
      }
      v44 = *(unsigned __int8 *)(v37 + 5);
      if (v44 != 2)
        goto LABEL_143;
      v45 = *(_QWORD *)(v37 + 8);
      if (!v45)
        goto LABEL_278;
      v36 = 805306368;
LABEL_165:
      if ((v45 & 1) != 0)
        goto LABEL_144;
      if (v45 < v13)
      {
LABEL_412:
        v36 = 0;
        goto LABEL_144;
      }
      v36 = 0;
      if (!(v45 >> 36) && (v45 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v45 + 16) & 0x10) != 0)
        {
          v36 = 0x10000000;
          goto LABEL_144;
        }
LABEL_278:
        v36 = 805306368;
        goto LABEL_144;
      }
      goto LABEL_144;
    }
    if (v41)
    {
      v36 = 0x20000000000;
      if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 6)
        v36 = 0x10000000000;
      goto LABEL_144;
    }
    if (v13 > v37)
      goto LABEL_412;
    v36 = 0;
    if (!v42 && (v37 & 0xFFFFFFFFFLL) != 0)
    {
      v44 = *(unsigned __int8 *)(v37 + 5);
      if (v44 != 2)
      {
LABEL_143:
        v36 = JSC::speculatedTypeMapping[v44];
        goto LABEL_144;
      }
      v45 = *(_QWORD *)(v37 + 8);
      v36 = 805306368;
      if (v45)
        goto LABEL_165;
    }
LABEL_144:
    *(v15 - 2) = 0;
    a5 = *(v15 - 1);
    if (a5)
    {
LABEL_118:
      if (a5 >= 0xFFFE000000000000)
      {
        if ((a5 & 0xFFFFFFFE) != 0)
          v35 = 0x200000000;
        else
          v35 = 0x100000000;
        goto LABEL_110;
      }
      if (a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v38 = a5 & 0xFFFE000000000002;
        a6 = a5 >> 36;
        a7 = (a5 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v13 <= a5 && a7)
        {
          if (v38)
          {
            if ((a5 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v35 = 0x10000000000;
            else
              v35 = 0x20000000000;
          }
          else
          {
            v40 = *(unsigned __int8 *)(a5 + 5);
            if (v40 != 2)
              goto LABEL_130;
            a5 = *(_QWORD *)(a5 + 8);
            if (a5)
            {
              v35 = 805306368;
              goto LABEL_157;
            }
LABEL_277:
            v35 = 805306368;
          }
          goto LABEL_110;
        }
        if (v38)
        {
          v25 = (a5 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v35 = 0x20000000000;
          a5 = 0x10000000000;
          if (v25)
            v35 = 0x10000000000;
          goto LABEL_110;
        }
        if (v13 <= a5)
        {
          v35 = 0;
          if (a6)
            goto LABEL_110;
          a6 = a5 & 0xFFFFFFFFFLL;
          if ((a5 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_110;
          v40 = *(unsigned __int8 *)(a5 + 5);
          if (v40 != 2)
          {
LABEL_130:
            v35 = JSC::speculatedTypeMapping[v40];
            goto LABEL_110;
          }
          a5 = *(_QWORD *)(a5 + 8);
          v35 = 805306368;
          if (!a5)
            goto LABEL_110;
LABEL_157:
          if ((a5 & 1) != 0)
          {
LABEL_110:
            v36 |= v35;
            *(v15 - 1) = 0;
            goto LABEL_111;
          }
          if (a5 >= v13)
          {
            v35 = 0;
            a6 = a5 >> 36;
            if (!(a5 >> 36))
            {
              a6 = a5 & 0xFFFFFFFFFLL;
              if ((a5 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(a5 + 16) & 0x10) == 0)
                  goto LABEL_277;
                v35 = 0x10000000;
              }
            }
            goto LABEL_110;
          }
        }
        v35 = 0;
        goto LABEL_110;
      }
      a2 = (int8x8_t)(a5 - 0x2000000000000);
      v46 = (uint64_t)COERCE_DOUBLE(a5 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
      {
LABEL_172:
        v35 = 0x2000000000;
        goto LABEL_110;
      }
      if (v46)
      {
        if ((unint64_t)(v46 + 0x8000000000000) >> 52)
          goto LABEL_172;
      }
      else if ((uint64_t)a5 < 0x2000000000000)
      {
        goto LABEL_172;
      }
      v35 = 0x1000000000;
      goto LABEL_110;
    }
LABEL_111:
    a4 = *v15;
    *v15 |= v36;
    v15 += 3;
    ++v14;
  }
LABEL_175:
  v48 = *((_QWORD *)this + 17);
  if (!v48)
  {
    v54 = 0;
    goto LABEL_190;
  }
  v49 = *(_QWORD *)(v48 - 16);
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = -*(_DWORD *)(v49 + 8);
  do
  {
    v52 = __ldaxr((unsigned int *)v49);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)v49));
  if (!v53)
  {
    atomic_store(1u, (unsigned int *)v49);
    if ((*(_BYTE *)(v49 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v49 + 16), i, a4, a5, a6, a7, a8, a9);
    WTF::fastFree(v49, i, a4, a5, a6, a7, a8, a9);
  }
  if (v51 < 0)
  {
    v64 = v51;
    if ((v11 & 1) == 0)
    {
      v65 = *(unsigned int **)(v10 + 184);
      v66 = *v65;
      v67 = v66 >= v14;
      v68 = v66 - v14;
      if (!v67)
        v68 = 0;
      v69 = &v65[2 * v14 + 2];
      v70 = qword_1ECF4C080;
      v71 = (unint64_t *)(v48 - 32);
      while (1)
      {
        v73 = *v71;
        v72 = v71[1];
        v74 = *v71 | v72;
        if (!v74)
        {
          v72 = 0;
          goto LABEL_219;
        }
        if (!v73)
        {
          v74 = 0;
          goto LABEL_219;
        }
        if (v73 >= 0xFFFE000000000000)
        {
          if ((v73 & 0xFFFFFFFE) != 0)
            v74 = 0x200000000;
          else
            v74 = 0x100000000;
          goto LABEL_217;
        }
        if (v73 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          a2 = (int8x8_t)(v73 - 0x2000000000000);
          v83 = (uint64_t)COERCE_DOUBLE(v73 - 0x2000000000000);
          if ((double)*(uint64_t *)&a2 == *(double *)&a2)
          {
            if (v83)
            {
              if (!((unint64_t)(v83 + 0x8000000000000) >> 52))
                goto LABEL_297;
            }
            else if ((uint64_t)v73 >= 0x2000000000000)
            {
LABEL_297:
              v74 = 0x1000000000;
              goto LABEL_217;
            }
          }
          v74 = 0x2000000000;
        }
        else
        {
          v75 = v73 & 0xFFFE000000000002;
          v76 = v73 >> 36;
          v78 = (v73 & 0xFFFFFFFFFLL) != 0 && v76 == 0;
          if (v70 <= v73 && v78)
          {
            if (v75)
            {
              if ((v73 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v74 = 0x10000000000;
              else
                v74 = 0x20000000000;
              goto LABEL_217;
            }
            v79 = *(unsigned __int8 *)(v73 + 5);
            if (v79 != 2)
              goto LABEL_216;
            v82 = *(_QWORD *)(v73 + 8);
            if (!v82)
              goto LABEL_291;
            v74 = 805306368;
          }
          else
          {
            if (v75)
            {
              v74 = 0x20000000000;
              if ((v73 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v74 = 0x10000000000;
              goto LABEL_217;
            }
            if (v70 > v73)
            {
LABEL_428:
              v74 = 0;
              goto LABEL_217;
            }
            v74 = 0;
            if (v76 || (v73 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_217;
            v79 = *(unsigned __int8 *)(v73 + 5);
            if (v79 != 2)
            {
LABEL_216:
              v74 = JSC::speculatedTypeMapping[v79];
              goto LABEL_217;
            }
            v82 = *(_QWORD *)(v73 + 8);
            v74 = 805306368;
            if (!v82)
              goto LABEL_217;
          }
          if ((v82 & 1) == 0)
          {
            if (v82 < v70)
              goto LABEL_428;
            v74 = 0;
            if (v82 >> 36 || (v82 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_217;
            if ((*(_BYTE *)(v82 + 16) & 0x10) == 0)
            {
LABEL_291:
              v74 = 805306368;
              goto LABEL_217;
            }
            v74 = 0x10000000;
          }
        }
LABEL_217:
        *v71 = 0;
LABEL_219:
        v80 = v74 | v72;
        v71[1] = v80;
        if (!v68)
        {
          __break(0xC471u);
          JUMPOUT(0x1981593C8);
        }
        v81 = *(_QWORD *)v69 | v80;
        v71[1] = v81;
        *(_QWORD *)v69 = v81;
        v69 += 2;
        --v68;
        v71 -= 2;
        v67 = __CFADD__(v64++, 1);
        if (v67)
          goto LABEL_182;
      }
    }
    v84 = 0;
    v85 = (unint64_t *)(v48 - 32);
    v86 = qword_1ECF4C080;
    do
    {
      v88 = *v85;
      v87 = v85[1];
      v89 = *v85 | v87;
      if (!v89)
      {
        v87 = 0;
        goto LABEL_258;
      }
      if (!v88)
      {
        v89 = 0;
        goto LABEL_258;
      }
      if (v88 >= 0xFFFE000000000000)
      {
        if ((v88 & 0xFFFFFFFE) != 0)
          v89 = 0x200000000;
        else
          v89 = 0x100000000;
        goto LABEL_256;
      }
      if (v88 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a2 = (int8x8_t)(v88 - 0x2000000000000);
        v96 = (uint64_t)COERCE_DOUBLE(v88 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 == *(double *)&a2)
        {
          if (v96)
          {
            if (!((unint64_t)(v96 + 0x8000000000000) >> 52))
              goto LABEL_294;
          }
          else if ((uint64_t)v88 >= 0x2000000000000)
          {
LABEL_294:
            v89 = 0x1000000000;
            goto LABEL_256;
          }
        }
        v89 = 0x2000000000;
      }
      else
      {
        v90 = v88 & 0xFFFE000000000002;
        v91 = v88 >> 36;
        v93 = (v88 & 0xFFFFFFFFFLL) != 0 && v91 == 0;
        if (v86 <= v88 && v93)
        {
          if (v90)
          {
            if ((v88 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v89 = 0x10000000000;
            else
              v89 = 0x20000000000;
            goto LABEL_256;
          }
          v94 = *(unsigned __int8 *)(v88 + 5);
          if (v94 != 2)
            goto LABEL_255;
          v95 = *(_QWORD *)(v88 + 8);
          if (!v95)
            goto LABEL_290;
          v89 = 805306368;
        }
        else
        {
          if (v90)
          {
            v89 = 0x20000000000;
            if ((v88 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v89 = 0x10000000000;
            goto LABEL_256;
          }
          if (v86 > v88)
          {
LABEL_420:
            v89 = 0;
            goto LABEL_256;
          }
          v89 = 0;
          if (v91 || (v88 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_256;
          v94 = *(unsigned __int8 *)(v88 + 5);
          if (v94 != 2)
          {
LABEL_255:
            v89 = JSC::speculatedTypeMapping[v94];
            goto LABEL_256;
          }
          v95 = *(_QWORD *)(v88 + 8);
          v89 = 805306368;
          if (!v95)
            goto LABEL_256;
        }
        if ((v95 & 1) == 0)
        {
          if (v95 < v86)
            goto LABEL_420;
          v89 = 0;
          if (v95 >> 36 || (v95 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_256;
          if ((*(_BYTE *)(v95 + 16) & 0x10) == 0)
          {
LABEL_290:
            v89 = 805306368;
            goto LABEL_256;
          }
          v89 = 0x10000000;
        }
      }
LABEL_256:
      *v85 = 0;
LABEL_258:
      v85[1] = v89 | v87;
      --v84;
      v85 -= 2;
    }
    while (v84 > v51);
  }
LABEL_182:
  v54 = *((_QWORD *)this + 17);
  if (v54)
  {
    v55 = *(unsigned __int16 *)(v54 + 30);
    if (!*(_WORD *)(v54 + 30))
      v55 = *(_DWORD *)(v54 + 156);
    v56 = (unsigned int **)((v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    v57 = *(unsigned __int16 *)(v54 + 32);
    if (!*(_WORD *)(v54 + 32))
      v57 = *(_DWORD *)(v54 + 160);
    v58 = v54 + v57;
    if (v58 > (unint64_t)v56)
    {
      while (1)
      {
        v132 = *v56;
        if (*v56)
        {
          v133 = *v132;
          if ((_DWORD)v133)
            break;
        }
LABEL_459:
        if ((unint64_t)++v56 >= v58)
          goto LABEL_190;
      }
      v134 = qword_1ECF4C080;
      v135 = v132 + 4;
      while (2)
      {
        while (1)
        {
          v136 = *(v135 - 1);
          if (v136)
            break;
          *v135 = *v135;
          v135 += 3;
          if (!--v133)
            goto LABEL_459;
        }
        if (v136 >= 0xFFFE000000000000)
        {
          if ((v136 & 0xFFFFFFFE) != 0)
            v142 = 0x200000000;
          else
            v142 = 0x100000000;
          goto LABEL_478;
        }
        if (v136 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v137 = v136 & 0xFFFE000000000002;
          v138 = v136 >> 36;
          v140 = (v136 & 0xFFFFFFFFFLL) != 0 && v138 == 0;
          if (v134 <= v136 && v140)
          {
            if (v137)
            {
              if ((v136 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v142 = 0x10000000000;
              else
                v142 = 0x20000000000;
            }
            else
            {
              v141 = *(unsigned __int8 *)(v136 + 5);
              if (v141 != 2)
                goto LABEL_477;
              v143 = *(_QWORD *)(v136 + 8);
              if (v143)
              {
                v142 = 805306368;
                goto LABEL_488;
              }
LABEL_496:
              v142 = 805306368;
            }
            goto LABEL_478;
          }
          if (v137)
          {
            v142 = 0x20000000000;
            if ((v136 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v142 = 0x10000000000;
            goto LABEL_478;
          }
          if (v134 <= v136)
          {
            v142 = 0;
            if (v138 || (v136 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_478;
            v141 = *(unsigned __int8 *)(v136 + 5);
            if (v141 != 2)
            {
LABEL_477:
              v142 = JSC::speculatedTypeMapping[v141];
              goto LABEL_478;
            }
            v143 = *(_QWORD *)(v136 + 8);
            v142 = 805306368;
            if (!v143)
            {
LABEL_478:
              *(v135 - 1) = 0;
              *v135 |= v142;
              v135 += 3;
              if (!--v133)
                goto LABEL_459;
              continue;
            }
LABEL_488:
            if ((v143 & 1) != 0)
              goto LABEL_478;
            if (v143 >= v134)
            {
              v142 = 0;
              if (!(v143 >> 36) && (v143 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v143 + 16) & 0x10) == 0)
                  goto LABEL_496;
                v142 = 0x10000000;
              }
              goto LABEL_478;
            }
          }
          v142 = 0;
          goto LABEL_478;
        }
        break;
      }
      a2 = (int8x8_t)(v136 - 0x2000000000000);
      v144 = (uint64_t)COERCE_DOUBLE(v136 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
      {
LABEL_495:
        v142 = 0x2000000000;
        goto LABEL_478;
      }
      if (v144)
      {
        if ((unint64_t)(v144 + 0x8000000000000) >> 52)
          goto LABEL_495;
      }
      else if ((uint64_t)v136 < 0x2000000000000)
      {
        goto LABEL_495;
      }
      v142 = 0x1000000000;
      goto LABEL_478;
    }
  }
LABEL_190:
  v59 = (uint64_t *)*((_QWORD *)this + 18);
  if (!v59)
    goto LABEL_191;
  v97 = *v59;
  if (*v59)
  {
    v110 = 0;
    v111 = v59[1];
    v112 = qword_1ECF4C080;
    while (1)
    {
      v113 = (unint64_t *)(*(_QWORD *)(v111 + (v110 & 0xFFFFFFFFFFFFFFF8) + 8) + 32 * (v110 & 7));
      v114 = *v113;
      if (*v113)
        break;
LABEL_329:
      v113[1] |= v114;
      if (v97 == ++v110)
        goto LABEL_304;
    }
    if (v114 >= 0xFFFE000000000000)
    {
      if ((v114 & 0xFFFFFFFE) != 0)
        v114 = 0x200000000;
      else
        v114 = 0x100000000;
      goto LABEL_331;
    }
    if (v114 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v115 = v114 & 0xFFFE000000000002;
      v116 = v114 >> 36;
      v118 = (v114 & 0xFFFFFFFFFLL) != 0 && v116 == 0;
      if (v112 <= v114 && v118)
      {
        if (v115)
        {
          if ((v114 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v114 = 0x10000000000;
          else
            v114 = 0x20000000000;
          goto LABEL_331;
        }
      }
      else
      {
        if (v115)
        {
          v25 = (v114 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v114 = 0x20000000000;
          if (v25)
            v114 = 0x10000000000;
          goto LABEL_331;
        }
        if (v112 > v114)
          goto LABEL_455;
        if (v116 || (v114 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_455;
      }
      v119 = *(unsigned __int8 *)(v114 + 5);
      if (v119 != 2)
      {
        v114 = JSC::speculatedTypeMapping[v119];
LABEL_331:
        *v113 = 0;
        goto LABEL_329;
      }
      v126 = *(_QWORD *)(v114 + 8);
      if (v126)
        v127 = (v126 & 1) == 0;
      else
        v127 = 0;
      if (!v127)
      {
LABEL_391:
        v114 = 805306368;
        goto LABEL_331;
      }
      if (v126 >= v112 && !(v126 >> 36) && (v126 & 0xFFFFFFFFFLL) != 0)
      {
        if ((*(_BYTE *)(v126 + 16) & 0x10) != 0)
        {
          v114 = 0x10000000;
          goto LABEL_331;
        }
        goto LABEL_391;
      }
LABEL_455:
      v114 = 0;
      goto LABEL_331;
    }
    a2 = (int8x8_t)(v114 - 0x2000000000000);
    v129 = (uint64_t)COERCE_DOUBLE(v114 - 0x2000000000000);
    if ((double)*(uint64_t *)&a2 != *(double *)&a2)
    {
LABEL_384:
      v114 = 0x2000000000;
      goto LABEL_331;
    }
    if (v129)
    {
      if ((unint64_t)(v129 + 0x8000000000000) >> 52)
        goto LABEL_384;
    }
    else if ((uint64_t)v114 < 0x2000000000000)
    {
      goto LABEL_384;
    }
    v114 = 0x1000000000;
    goto LABEL_331;
  }
LABEL_304:
  v98 = v59[5];
  if (!v98)
    goto LABEL_191;
  v99 = 0;
  while (2)
  {
    v100 = *(_QWORD *)(v59[6] + (v99 & 0xFFFFFFFFFFFFFFF8) + 8) + 16 * (v99 & 7);
    ValueProfileForBytecodeIndex = JSC::CodeBlock::tryGetValueProfileForBytecodeIndex((uint64_t)this, *(_DWORD *)v100, a2);
    v104 = *(_QWORD *)(v100 + 8);
    v103 = (_QWORD *)(v100 + 8);
    v102 = v104;
    if (v104)
    {
      if (v102 >= 0xFFFE000000000000)
      {
        v120 = (v102 & 0xFFFFFFFE) == 0;
        v109 = 0x200000000;
        v121 = 0x100000000;
        goto LABEL_346;
      }
      if (v102 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        if ((v102 & 0xFFFE000000000002) == 0)
        {
          v105 = v102 >> 36;
          v107 = (v102 & 0xFFFFFFFFFLL) != 0 && v105 == 0;
          if (qword_1ECF4C080 <= v102 && v107
            || qword_1ECF4C080 <= v102 && (!v105 ? (v130 = (v102 & 0xFFFFFFFFFLL) == 0) : (v130 = 1), !v130))
          {
            v108 = *(unsigned __int8 *)(v102 + 5);
            if (v108 != 2)
            {
              v109 = JSC::speculatedTypeMapping[v108];
LABEL_309:
              *(_QWORD *)(ValueProfileForBytecodeIndex + 8) |= v109;
              goto LABEL_307;
            }
            v122 = *(_QWORD *)(v102 + 8);
            if (v122)
              v123 = (v122 & 1) == 0;
            else
              v123 = 0;
            if (!v123)
            {
LABEL_370:
              v109 = 805306368;
              goto LABEL_309;
            }
            if (v122 >= qword_1ECF4C080 && !(v122 >> 36) && (v122 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v122 + 16) & 0x10) != 0)
              {
                v109 = 0x10000000;
                goto LABEL_309;
              }
              goto LABEL_370;
            }
          }
          v109 = 0;
          goto LABEL_309;
        }
        v120 = (v102 & 0xFFFFFFFFFFFFFFFELL) == 6;
        v109 = 0x20000000000;
        v121 = 0x10000000000;
LABEL_346:
        if (v120)
          v109 = v121;
        goto LABEL_309;
      }
      a2 = (int8x8_t)(v102 - 0x2000000000000);
      v125 = (uint64_t)COERCE_DOUBLE(v102 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
      {
LABEL_363:
        v109 = 0x2000000000;
        goto LABEL_309;
      }
      if (v125)
      {
        if ((unint64_t)(v125 + 0x8000000000000) >> 52)
          goto LABEL_363;
      }
      else if ((uint64_t)v102 < 0x2000000000000)
      {
        goto LABEL_363;
      }
      v109 = 0x1000000000;
      goto LABEL_309;
    }
LABEL_307:
    *v103 = 0;
    if (v98 != ++v99)
      continue;
    break;
  }
  v54 = *((_QWORD *)this + 17);
LABEL_191:
  if (v54)
  {
    v60 = *(unsigned __int16 *)(v54 + 60);
    if (!*(_WORD *)(v54 + 60))
      v60 = *(_DWORD *)(v54 + 216);
    v61 = (unint64_t *)((v54 + v60 + 7) & 0xFFFFFFFFFFFFFFF8);
    v62 = *(unsigned __int16 *)(v54 + 62);
    if (!*(_WORD *)(v54 + 62))
      v62 = *(_DWORD *)(v54 + 220);
    for (j = v54 + v62; (unint64_t)v61 < j; ++v61)
    {
      v147 = *v61;
      *v61 &= 0xFFFF000000000000;
      if ((v147 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v149 = HIBYTE(v147) & 0xF;
        v150 = *(_BYTE *)((v147 & 0xFFFFFFFFFFFFLL) + 4);
        if (v149 <= (v150 & 0xFu))
          LODWORD(v149) = v150 & 0xF;
        if (v149 >= 0xA)
          v151 = 9;
        else
          v151 = v149;
        v152 = v151 | 0x10;
        if ((v147 & 0x1000000000000000) != 0)
          v153 = v152;
        else
          v153 = v149;
        if ((*(_BYTE *)((v147 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v145 = *(_DWORD *)(*(_QWORD *)((v147 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v145 = 0;
        v146 = BYTE6(v147);
        if (BYTE6(v147) <= v145)
          v146 = v145;
        if (v146 >= 0x19)
          v146 = 25;
        *v61 = (unint64_t)(v146 | (v153 << 8)) << 48;
      }
    }
    v154 = *(unsigned __int16 *)(v54 + 32);
    if (!*(_WORD *)(v54 + 32))
      v154 = *(_DWORD *)(v54 + 160);
    v155 = (unint64_t *)((v54 + v154 + 7) & 0xFFFFFFFFFFFFFFF8);
    v156 = *(unsigned __int16 *)(v54 + 34);
    v157 = v156;
    if (!*(_WORD *)(v54 + 34))
      v157 = *(_DWORD *)(v54 + 164);
    for (k = v54 + v157; (unint64_t)v155 < k; ++v155)
    {
      v161 = *v155;
      *v155 &= 0xFFFF000000000000;
      if ((v161 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v163 = HIBYTE(v161) & 0xF;
        v164 = *(_BYTE *)((v161 & 0xFFFFFFFFFFFFLL) + 4);
        if (v163 <= (v164 & 0xFu))
          LODWORD(v163) = v164 & 0xF;
        if (v163 >= 0xA)
          v165 = 9;
        else
          v165 = v163;
        v166 = v165 | 0x10;
        if ((v161 & 0x1000000000000000) != 0)
          v167 = v166;
        else
          v167 = v163;
        if ((*(_BYTE *)((v161 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v159 = *(_DWORD *)(*(_QWORD *)((v161 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v159 = 0;
        v160 = BYTE6(v161);
        if (BYTE6(v161) <= v159)
          v160 = v159;
        if (v160 >= 0x19)
          v160 = 25;
        *v155 = (unint64_t)(v160 | (v167 << 8)) << 48;
      }
    }
    v168 = *(unsigned __int16 *)(v54 + 44);
    if (!*(_WORD *)(v54 + 44))
      v168 = *(_DWORD *)(v54 + 184);
    v169 = (unint64_t *)((v54 + v168 + 7) & 0xFFFFFFFFFFFFFFF8);
    v170 = *(unsigned __int16 *)(v54 + 46);
    if (!*(_WORD *)(v54 + 46))
      v170 = *(_DWORD *)(v54 + 188);
    for (m = v54 + v170; (unint64_t)v169 < m; v169 += 3)
    {
      v174 = *v169;
      *v169 &= 0xFFFF000000000000;
      if ((v174 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v176 = HIBYTE(v174) & 0xF;
        v177 = *(_BYTE *)((v174 & 0xFFFFFFFFFFFFLL) + 4);
        if (v176 <= (v177 & 0xFu))
          LODWORD(v176) = v177 & 0xF;
        if (v176 >= 0xA)
          v178 = 9;
        else
          v178 = v176;
        v179 = v178 | 0x10;
        if ((v174 & 0x1000000000000000) != 0)
          v180 = v179;
        else
          v180 = v176;
        if ((*(_BYTE *)((v174 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v172 = *(_DWORD *)(*(_QWORD *)((v174 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v172 = 0;
        v173 = BYTE6(v174);
        if (BYTE6(v174) <= v172)
          v173 = v172;
        if (v173 >= 0x19)
          v173 = 25;
        *v169 = (unint64_t)(v173 | (v180 << 8)) << 48;
      }
    }
    if (!v156)
      v156 = *(_DWORD *)(v54 + 164);
    v181 = (unint64_t *)((v54 + v156 + 7) & 0xFFFFFFFFFFFFFFF8);
    v182 = *(unsigned __int16 *)(v54 + 36);
    if (!*(_WORD *)(v54 + 36))
      v182 = *(_DWORD *)(v54 + 168);
    for (n = v54 + v182; (unint64_t)v181 < n; ++v181)
    {
      v186 = *v181;
      *v181 &= 0xFFFF000000000000;
      if ((v186 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v188 = HIBYTE(v186) & 0xF;
        v189 = *(_BYTE *)((v186 & 0xFFFFFFFFFFFFLL) + 4);
        if (v188 <= (v189 & 0xFu))
          LODWORD(v188) = v189 & 0xF;
        if (v188 >= 0xA)
          v190 = 9;
        else
          v190 = v188;
        v191 = v190 | 0x10;
        if ((v186 & 0x1000000000000000) != 0)
          v192 = v191;
        else
          v192 = v188;
        if ((*(_BYTE *)((v186 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v184 = *(_DWORD *)(*(_QWORD *)((v186 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v184 = 0;
        v185 = BYTE6(v186);
        if (BYTE6(v186) <= v184)
          v185 = v184;
        if (v185 >= 0x19)
          v185 = 25;
        *v181 = (unint64_t)(v185 | (v192 << 8)) << 48;
      }
    }
  }
  return JSC::CodeBlock::updateAllArrayProfilePredictions(this, a2);
}

void JSC::CodeBlock::getICStatusMap(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t StatusReg, uint64_t a8)
{
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  char *v13;
  unsigned int *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t casual;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  char v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unint64_t v177;
  unsigned int v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  _QWORD *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  char v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unint64_t v232;
  unsigned int v233;
  char *v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  _QWORD *v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  unint64_t v255;
  int v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  char v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  unint64_t v287;
  unsigned int v288;
  char *v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  _QWORD *v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  int v308;
  uint64_t v309;
  unint64_t v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t *v331;
  char v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unsigned int v341;
  unint64_t v342;
  unsigned int v343;
  char *v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  int v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t *v354;
  unint64_t v355;
  _QWORD *v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  unint64_t v365;
  int v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  char v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unsigned int v398;
  char *v399;
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  int v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  _QWORD *v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  unint64_t v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t *v441;
  char v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  unint64_t v452;
  unsigned int v453;
  char *v454;
  __int128 v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  _QWORD *v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  unint64_t v475;
  int v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t *v496;
  char v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  unint64_t v507;
  unsigned int v508;
  char *v509;
  __int128 v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t *v519;
  unint64_t v520;
  _QWORD *v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  int v528;
  uint64_t v529;
  unint64_t v530;
  int v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t *v551;
  char v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unsigned int v561;
  unint64_t v562;
  unsigned int v563;
  char *v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  int v570;
  int v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t *v574;
  unint64_t v575;
  _QWORD *v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  uint64_t v580;
  int v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  unint64_t v585;
  int v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t *v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t *v606;
  char v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  unsigned int *v618;
  unsigned int v619;
  void *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  unsigned int v629;
  uint64_t *v630;
  unint64_t *v631;
  __int128 v632;
  unsigned int *v633;
  uint64_t v634;
  unsigned int *v635;
  __int128 v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  int v640;
  int v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  unint64_t v655;
  int v656;
  uint64_t v657;
  unint64_t v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t *v661;
  uint64_t v662;
  uint64_t *v663;
  uint64_t v664;
  uint64_t *v665;
  uint64_t *v666;
  char v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  BOOL v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  BOOL v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  BOOL v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  BOOL v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  BOOL v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  BOOL v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  BOOL v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  BOOL v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  BOOL v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  BOOL v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  BOOL v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  unint64_t v781;
  uint64_t v782;
  unint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  unint64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  unint64_t v805;
  uint64_t v806;
  unint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  uint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unint64_t v819;
  uint64_t v820;
  unint64_t v821;
  uint64_t v822;
  unint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  uint64_t v828;
  unint64_t v829;
  uint64_t v830;
  unint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  unint64_t v835;
  uint64_t v836;
  unint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unint64_t v851;
  uint64_t v852;
  unint64_t v853;
  uint64_t v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  uint64_t v860;
  unint64_t v861;
  uint64_t v862;
  unint64_t v863;
  uint64_t v864;
  uint64_t v866;
  uint64_t v868;
  uint64_t v869;
  uint64_t v871;
  uint64_t v873;
  uint64_t v874;
  uint64_t v876;
  uint64_t v878;
  uint64_t v879;
  uint64_t v881;
  uint64_t v883;
  uint64_t v884;
  uint64_t v886;
  uint64_t v888;
  uint64_t v889;
  uint64_t v891;
  uint64_t v893;
  uint64_t v894;
  uint64_t v896;
  uint64_t v898;
  uint64_t v899;
  uint64_t v901;
  uint64_t v903;
  uint64_t v904;
  uint64_t v906;
  uint64_t v908;
  uint64_t v909;
  uint64_t v911;
  uint64_t v913;
  uint64_t v914;
  uint64_t v916;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  BOOL v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  BOOL v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v940;
  uint64_t v942;
  uint64_t v943;
  unsigned int v944;
  unint64_t *v945;
  uint64_t v946;
  unint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unsigned int v950;
  unint64_t *v951;
  uint64_t v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t v955;
  unsigned int v956;
  unint64_t *v957;
  uint64_t v958;
  unint64_t v959;
  unint64_t v960;
  uint64_t v961;
  unsigned int v962;
  unint64_t *v963;
  uint64_t v964;
  unint64_t v965;
  unint64_t v966;
  uint64_t v967;
  unsigned int v968;
  unint64_t *v969;
  uint64_t v970;
  unint64_t v971;
  unint64_t v972;
  uint64_t v973;
  unsigned int v974;
  unint64_t *v975;
  uint64_t v976;
  unint64_t v977;
  unint64_t v978;
  uint64_t v979;
  unsigned int v980;
  unint64_t *v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  unsigned int v986;
  unint64_t *v987;
  uint64_t v988;
  unint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unsigned int v992;
  unint64_t *v993;
  uint64_t v994;
  unint64_t v995;
  unint64_t v996;
  uint64_t v997;
  unsigned int v998;
  unint64_t *v999;
  uint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  unsigned int v1004;
  unint64_t *v1005;
  uint64_t v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  int v1244;
  int v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  uint64_t v1254;
  int v1255;
  uint64_t v1256;
  int v1257;
  uint64_t v1258;
  unint64_t v1259;
  uint64_t v1260;
  int v1261;
  uint64_t v1262;
  unint64_t v1263;
  unint64_t v1264;
  unint64_t v1265;
  uint64_t *v1266;
  uint64_t v1267;
  uint64_t *v1268;
  uint64_t v1269;
  uint64_t *v1270;
  uint64_t *v1271;
  char v1272;
  uint64_t v1273;
  unint64_t v1274;
  unint64_t v1275;
  unint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  unsigned int *v1282;
  uint64_t v1283;
  unsigned int *v1284;
  __int128 v1285;
  uint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  int v1289;
  int v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  uint64_t v1299;
  int v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  unint64_t v1304;
  int v1305;
  uint64_t v1306;
  unint64_t v1307;
  unint64_t v1308;
  unint64_t v1309;
  uint64_t *v1310;
  uint64_t v1311;
  uint64_t *v1312;
  uint64_t v1313;
  uint64_t *v1314;
  uint64_t *v1315;
  char v1316;
  uint64_t v1317;
  unint64_t v1318;
  unint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  _BYTE *v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t i;
  uint64_t v1333;
  uint64_t v1334;
  unsigned int *v1335;
  uint64_t v1336;
  uint64_t *v1337;
  uint64_t v1338;
  JSC::CodeOrigin *v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  JSC::CodeOrigin *v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  JSC::CodeOrigin *v1349;
  uint64_t v1350;
  uint64_t v1351;
  JSC::CodeOrigin *v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  void *v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  BOOL v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  BOOL v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1380;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  BOOL v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  BOOL v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1404;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  JSC::CodeOrigin *v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  BOOL v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unsigned int v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  void *v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t *v1472;
  uint64_t *v1473;
  uint64_t *v1474;
  uint64_t *v1475;
  uint64_t *v1476;
  uint64_t *v1477;
  uint64_t *v1478;
  uint64_t *v1479;
  uint64_t *v1480;
  uint64_t *v1481;
  uint64_t *v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  unsigned int v1505;
  unsigned int v1506;
  unsigned int v1507;
  unsigned int v1508;
  unsigned int v1509;
  unsigned int v1510;
  unsigned int v1511;
  unsigned int v1512;
  unsigned int v1513;
  unsigned int v1514;
  unsigned int v1515;
  unsigned int v1516;
  unsigned int v1517;
  unsigned int v1518;
  unsigned int v1519;
  unsigned int v1520;
  unsigned int v1521;
  unsigned int v1522;
  unsigned int v1523;
  unsigned int v1524;
  unsigned int v1525;
  unsigned int v1526;
  unsigned int v1527;
  unsigned int v1528;
  unsigned int v1529;
  unsigned int v1530;
  unsigned int v1531;
  unsigned int v1532;
  unsigned int v1533;
  unsigned int v1534;
  unsigned int v1535;
  unsigned int v1536;
  unsigned int v1537;
  unsigned int v1538;
  unsigned int v1539;
  unsigned int v1540;
  unsigned int v1541;
  unsigned int v1542;
  unsigned int v1543;
  unsigned int v1544;
  unsigned int v1545;
  unsigned int v1546;
  unsigned int v1547;
  unsigned int v1548;
  unint64_t v1549;
  unint64_t v1550;
  unint64_t v1551;
  unint64_t v1552;
  unint64_t v1553;
  unint64_t v1554;
  unint64_t v1555;
  unint64_t v1556;
  unint64_t v1557;
  unint64_t v1558;
  unint64_t v1559;
  unint64_t v1560;
  unint64_t v1561;
  unint64_t v1562;
  unint64_t v1563;
  unint64_t v1564;
  unint64_t v1565;
  unint64_t v1566;
  unint64_t v1567;
  unint64_t v1568;
  unint64_t v1569;
  unint64_t v1570;
  unint64_t v1571;
  unint64_t v1572;
  unint64_t v1573;
  unint64_t v1574;
  unint64_t v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  unint64_t v1579;
  unint64_t v1580;
  unint64_t v1581;
  unint64_t v1582;
  unint64_t v1583;
  unint64_t v1584;
  unint64_t v1585;
  unint64_t v1586;
  unint64_t v1587;
  unint64_t v1588;
  unint64_t v1589;
  unint64_t v1590;
  unint64_t v1591;
  unint64_t v1592;
  unint64_t v1593;
  unint64_t v1594;
  unint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  unint64_t v1598;
  unint64_t v1599;
  unint64_t v1600;
  unint64_t v1601;
  unint64_t v1602;
  unint64_t v1603;
  unsigned int v1604;
  unint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  unint64_t v1608;
  unint64_t v1609;
  unint64_t v1610;
  unint64_t v1611;
  unint64_t v1612;
  unint64_t v1613;
  unint64_t v1614;
  unint64_t v1615;
  unint64_t v1616;
  unint64_t v1617;
  unint64_t v1618;
  unint64_t v1619;
  unint64_t v1620;
  unint64_t v1621;
  unint64_t v1622;
  unint64_t v1623;
  unint64_t v1624;
  unint64_t v1625;
  unint64_t v1626;
  unsigned int v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  unsigned int v1643;
  unsigned int v1644;
  uint64_t v1645;
  uint64_t v1646;
  char *v1647;
  char *v1648;
  char *v1649;
  char *v1650;
  char *v1651;
  char *v1652;
  char *v1653;
  char *v1654;
  char *v1655;
  char *v1656;
  char *v1657;
  unsigned int *v1658;
  uint64_t v1659;
  unsigned int *v1660;
  uint64_t v1661;
  uint64_t *v1663;
  uint64_t v1664;
  _QWORD v1665[3];
  __int128 v1666;
  __int128 v1667;
  __int128 v1668;
  uint64_t v1669;

  v8 = a1[15];
  if (!v8)
    return;
  v1663 = a3;
  if ((*(_BYTE *)(v8 + 12) & 0xFE) != 2)
    goto LABEL_1027;
  v9 = (unsigned __int16 *)a1[17];
  if (!v9)
    goto LABEL_1027;
  v10 = v9[23];
  if (!v9[23])
    v10 = *((_DWORD *)v9 + 47);
  v11 = ((unint64_t)v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v9[24];
  if (!v9[24])
    v12 = *((_DWORD *)v9 + 48);
  v13 = (char *)v9 + v12;
  v14 = (unsigned int *)&unk_1ECF54000;
  if ((unint64_t)v13 > v11)
  {
    v15 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1628 = StatusReg;
    v1647 = (char *)v9 + v12;
    while (1)
    {
      v16 = *(_QWORD *)(v11 + 72);
      if ((v16 & 1) != 0)
      {
        v677 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        if ((v16 & 2) != 0
          || ((v678 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v678 != 0x3FFFFFFF)
            ? (v679 = (_DWORD)v678 == -1)
            : (v679 = 1),
              v679))
        {
          v680 = 2;
        }
        else if (v678 >> 28)
        {
          v1141 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1628;
          v13 = v1647;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v15 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1141 = v677;
          *(_DWORD *)(v1141 + 8) = v678;
          v680 = 1;
          v677 = v1141;
        }
        else
        {
          v680 = v677;
          v677 = v678 << 36;
        }
        v16 = v677 | v680;
      }
      v1669 = 0;
      v1667 = v15;
      v1668 = v15;
      v1666 = v15;
      v17 = *a3;
      if (*a3)
      {
LABEL_12:
        v18 = *(unsigned int *)(v17 - 8);
        goto LABEL_13;
      }
      v46 = *(_QWORD *)(StatusReg + 752);
      if (!v46)
        goto LABEL_1995;
      v47 = v14[521];
      if (*(_DWORD *)(v46 + 8052) <= v47)
        goto LABEL_1995;
      v48 = v46 + 8 * v47;
      v49 = v48 + 8064;
      *(_BYTE *)(v48 + 8064) = 1;
      v50 = *(unsigned int *)(v48 + 8080);
      if ((_DWORD)v50)
      {
        *(_DWORD *)(v49 + 16) = v50 - *(_DWORD *)(v49 + 20);
        casual = *(_QWORD *)(v49 + 8) - v50;
        goto LABEL_71;
      }
      v53 = *(_QWORD *)(v49 + 40);
      v54 = *(_QWORD *)(v49 + 24);
      if (v53)
        goto LABEL_75;
      if (*(_BYTE *)(v49 + 5) != 6)
        goto LABEL_1994;
      v943 = *(unsigned int *)(v49 + 32);
      v944 = *(_DWORD *)(v49 + 36);
      if (v943 >= v944)
        goto LABEL_1994;
      *(_QWORD *)(v49 + 8 * v943 + 56) = 0;
      v945 = (unint64_t *)(v46 + 8128 + 8 * v47 + 8 * v943);
      v946 = v944 - 1 - v943;
      do
      {
        if (!v946)
        {
          *(_DWORD *)(v49 + 32) = v944;
LABEL_1994:
          *(_BYTE *)v49 = 0;
LABEL_1995:
          casual = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1628;
          v13 = v1647;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v15 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_72;
        }
        v54 += 1024;
        v948 = *v945++;
        v947 = v948;
        LODWORD(v943) = v943 + 1;
        --v946;
      }
      while (!v948);
      v53 = __rbit64(v947);
      *(_DWORD *)(v49 + 32) = v943;
      *(_QWORD *)(v49 + 24) = v54;
LABEL_75:
      v55 = __clz(v53);
      *(_QWORD *)(v49 + 40) = v53 & ~(0x8000000000000000 >> v55);
      casual = v54 + 16 * v55;
LABEL_71:
      *(_BYTE *)v49 = 0;
LABEL_72:
      *(_QWORD *)(casual + 16) = 2;
      v52 = casual + 16;
      *(_OWORD *)(v52 + 8) = v15;
      *(_OWORD *)(v52 + 24) = v15;
      *(_OWORD *)(v52 + 40) = v15;
      *(_QWORD *)(v52 + 56) = 0;
      *(_QWORD *)(v52 + 64) = 2;
      *(_OWORD *)(v52 + 72) = v15;
      *(_OWORD *)(v52 + 88) = v15;
      *(_OWORD *)(v52 + 104) = v15;
      *(_QWORD *)(v52 + 120) = 0;
      *(_QWORD *)(v52 + 128) = 2;
      *(_OWORD *)(v52 + 136) = v15;
      *(_OWORD *)(v52 + 152) = v15;
      *(_OWORD *)(v52 + 168) = v15;
      *(_QWORD *)(v52 + 184) = 0;
      *(_QWORD *)(v52 + 192) = 2;
      *(_OWORD *)(v52 + 232) = v15;
      *(_OWORD *)(v52 + 216) = v15;
      *(_OWORD *)(v52 + 200) = v15;
      *(_QWORD *)(v52 + 248) = 0;
      *(_QWORD *)(v52 + 256) = 2;
      *(_OWORD *)(v52 + 280) = v15;
      *(_OWORD *)(v52 + 296) = v15;
      *(_OWORD *)(v52 + 264) = v15;
      *(_QWORD *)(v52 + 312) = 0;
      *(_QWORD *)(v52 + 320) = 2;
      *(_OWORD *)(v52 + 344) = v15;
      *(_OWORD *)(v52 + 360) = v15;
      *(_OWORD *)(v52 + 328) = v15;
      *(_QWORD *)(v52 + 376) = 0;
      *(_QWORD *)(v52 + 384) = 2;
      *(_OWORD *)(v52 + 408) = v15;
      *(_OWORD *)(v52 + 424) = v15;
      *(_OWORD *)(v52 + 392) = v15;
      *(_QWORD *)(v52 + 440) = 0;
      *(_QWORD *)(v52 + 448) = 2;
      *(_QWORD *)(v52 + 504) = 0;
      *(_OWORD *)(v52 + 472) = v15;
      *(_OWORD *)(v52 + 488) = v15;
      *(_OWORD *)(v52 + 456) = v15;
      *a3 = v52;
      *(_DWORD *)(v52 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v17 = *a3;
      if (*a3)
        goto LABEL_12;
      v18 = 0;
LABEL_13:
      if ((v16 & 2) != 0)
      {
        v21 = 0;
        goto LABEL_19;
      }
      v19 = v16;
      if ((v16 & 1) != 0)
      {
        v721 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v722 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v722 == 0x3FFFFFFF || (_DWORD)v722 == -1)
        {
          v724 = 2;
        }
        else if (v722 >> 28)
        {
          v1119 = v18;
          v1120 = WTF::fastMalloc((WTF *)0x10);
          v18 = v1119;
          a8 = 8064;
          StatusReg = v1628;
          v13 = v1647;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v15 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1120 = v721;
          *(_DWORD *)(v1120 + 8) = v722;
          v724 = 1;
          v721 = v1120;
        }
        else
        {
          v724 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
          v721 = v722 << 36;
        }
        v19 = v721 | v724;
      }
      v20 = 2;
      while (2)
      {
        if ((v19 & 2) != 0)
        {
          v21 = v20 - 1;
          v56 = (uint64_t *)(v19 & 0xFFFFFFFF8);
          if ((v19 & 1) == 0)
          {
            if (!v56)
              goto LABEL_19;
            v57 = 1;
            v22 = (uint64_t)v56;
            goto LABEL_80;
          }
        }
        else
        {
          if ((v19 & 1) == 0)
          {
            v21 = v20 + (v19 >> 36);
            v22 = v19 & 0xFFFFFFFF8;
            if ((v19 & 0xFFFFFFFF8) == 0)
              goto LABEL_19;
            v57 = 1;
            v56 = (uint64_t *)v22;
            goto LABEL_80;
          }
          v56 = (uint64_t *)(v19 & 0xFFFFFFFF8);
          v21 = *(_DWORD *)((v19 & 0xFFFFFFFF8) + 8) + v20;
        }
        v22 = *v56;
        if (*v56)
        {
          v57 = 0;
LABEL_80:
          v58 = *(_QWORD *)(v22 + 8);
          if ((v57 & 1) == 0 && v56)
          {
            v1009 = v18;
            WTF::fastFree((unint64_t)v56, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v18 = v1009;
            a8 = 8064;
            StatusReg = v1628;
            v13 = v1647;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v15 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v59 = (~(v58 << 32) + v58) ^ ((unint64_t)(~(v58 << 32) + v58) >> 22);
          v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
          v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
          v20 = v21 + ((v61 >> 31) ^ v61);
          v19 = *(_QWORD *)(v22 + 16);
          if ((v19 & 1) != 0)
          {
            v1010 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
            if ((v19 & 2) != 0
              || (v1011 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v1011 == 0x3FFFFFFF)
              || (_DWORD)v1011 == -1)
            {
              v1012 = 2;
            }
            else if (v1011 >> 28)
            {
              v1194 = v18;
              v1195 = WTF::fastMalloc((WTF *)0x10);
              v18 = v1194;
              a8 = 8064;
              StatusReg = v1628;
              v13 = v1647;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v15 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1195 = v1010;
              *(_DWORD *)(v1195 + 8) = v1011;
              v1012 = 1;
              v1010 = v1195;
            }
            else
            {
              v1012 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
              v1010 = v1011 << 36;
            }
            v19 = v1010 | v1012;
          }
          continue;
        }
        break;
      }
      if (v56)
      {
        v765 = v18;
        WTF::fastFree((unint64_t)v56, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v18 = v765;
        a8 = 8064;
        StatusReg = v1628;
        v13 = v1647;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v15 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_19:
      v23 = v21 & v18;
      v24 = (unint64_t *)(v17 + (v23 << 6));
      v25 = *v24;
      if (*v24 == 2)
        goto LABEL_20;
      v36 = 0;
      v26 = 0;
      v37 = v16 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v25 & 2) != 0)
        {
          v45 = (uint64_t *)(v25 & 0xFFFFFFFF8);
          if ((v25 & 1) == 0)
          {
            if (!v45)
              break;
            goto LABEL_33;
          }
          v864 = *v45;
          if (!*v45)
            break;
LABEL_1461:
          v868 = 2;
          goto LABEL_1462;
        }
        if ((v25 & 1) == 0)
          goto LABEL_33;
        v864 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v25 & 0xFFFFFFFF8) + 8) == -1 && v864 == 0)
          break;
        v866 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v866 == 0x3FFFFFFF || (_DWORD)v866 == -1)
          goto LABEL_1461;
        if (v866 >> 28)
        {
          v1163 = v18;
          v1616 = v37;
          v1164 = WTF::fastMalloc((WTF *)0x10);
          v37 = v1616;
          StatusReg = v1628;
          v18 = v1163;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v15 = 0uLL;
          v13 = v1647;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1164 = v864;
          *(_DWORD *)(v1164 + 8) = v866;
          v868 = 1;
          v864 = v1164;
        }
        else
        {
          v868 = v864;
          v864 = v866 << 36;
        }
LABEL_1462:
        v25 = v864 | v868;
LABEL_33:
        v38 = v16;
        if ((v16 & 1) != 0)
        {
          v776 = *(_QWORD *)v37;
          if ((v16 & 2) != 0 || (v777 = *(unsigned int *)(v37 + 8), (_DWORD)v777 == 0x3FFFFFFF) || (_DWORD)v777 == -1)
          {
            v778 = 2;
          }
          else if (v777 >> 28)
          {
            v1538 = v18;
            v1605 = v37;
            v1152 = WTF::fastMalloc((WTF *)0x10);
            v37 = v1605;
            StatusReg = v1628;
            v18 = v1538;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v15 = 0uLL;
            v13 = v1647;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1152 = v776;
            *(_DWORD *)(v1152 + 8) = v777;
            v778 = 1;
            v776 = v1152;
          }
          else
          {
            v778 = *(_QWORD *)v37;
            v776 = v777 << 36;
          }
          v38 = v776 | v778;
        }
        if ((v25 & 2) != 0)
        {
          v42 = (v38 >> 1) & 1;
        }
        else
        {
          if ((v38 & 2) == 0)
          {
            while (1)
            {
              if ((v25 & 2) != 0)
              {
                LODWORD(v39) = -1;
              }
              else if ((v25 & 1) != 0)
              {
                LODWORD(v39) = *(_DWORD *)((v25 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v39 = v25 >> 36;
              }
              if ((v38 & 2) != 0)
              {
                LODWORD(v40) = -1;
              }
              else if ((v38 & 1) != 0)
              {
                LODWORD(v40) = *(_DWORD *)((v38 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v40 = v38 >> 36;
              }
              if ((_DWORD)v39 != (_DWORD)v40)
                break;
              v41 = (uint64_t *)(v25 & 0xFFFFFFFF8);
              v42 = v25 & 0xFFFFFFFF8;
              if ((v25 & 1) != 0)
                v42 = *v41;
              v43 = (uint64_t *)(v38 & 0xFFFFFFFF8);
              v44 = v38 & 0xFFFFFFFF8;
              if ((v38 & 1) != 0)
                v44 = *v43;
              if (!v42 || !v44)
              {
                LOBYTE(v42) = (v42 != 0) == (v44 != 0);
                goto LABEL_51;
              }
              if (*(_QWORD *)(v42 + 8) != *(_QWORD *)(v44 + 8))
                break;
              if ((v25 & 1) != 0 && v41)
              {
                v1516 = v18;
                v1571 = v37;
                v1483 = v44;
                WTF::fastFree(v25 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v44 = v1483;
                v37 = v1571;
                StatusReg = v1628;
                v18 = v1516;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v15 = 0uLL;
                v13 = v1647;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v43 = (uint64_t *)(v38 & 0xFFFFFFFF8);
              }
              v25 = *(_QWORD *)(v42 + 16);
              if ((v25 & 1) != 0)
              {
                v1472 = v43;
                v1484 = v44;
                v1572 = v37;
                v1517 = v18;
                v1058 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
                if ((v25 & 2) != 0
                  || (v1059 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v1059 == 0x3FFFFFFF)
                  || (_DWORD)v1059 == -1)
                {
                  v1060 = 2;
                }
                else if (v1059 >> 28)
                {
                  v1228 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1228 = v1058;
                  *(_DWORD *)(v1228 + 8) = v1059;
                  v1060 = 1;
                  v1058 = v1228;
                }
                else
                {
                  v1060 = v1058;
                  v1058 = v1059 << 36;
                }
                v25 = v1058 | v1060;
                v43 = v1472;
                v44 = v1484;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1628;
                v13 = v1647;
                v15 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v18 = v1517;
                v37 = v1572;
              }
              if ((v38 & 1) != 0 && v43)
              {
                v1061 = v18;
                v1573 = v37;
                v1062 = v44;
                WTF::fastFree((unint64_t)v43, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v44 = v1062;
                v37 = v1573;
                StatusReg = v1628;
                v18 = v1061;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v15 = 0uLL;
                v13 = v1647;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v38 = *(_QWORD *)(v44 + 16);
              if ((v38 & 1) != 0)
              {
                v1549 = v37;
                v1505 = v18;
                v63 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
                if ((v38 & 2) != 0
                  || (v64 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v64 == 0x3FFFFFFF)
                  || (_DWORD)v64 == -1)
                {
                  v65 = 2;
                }
                else if (v64 >> 28)
                {
                  v1217 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1217 = v63;
                  *(_DWORD *)(v1217 + 8) = v64;
                  v65 = 1;
                  v63 = v1217;
                }
                else
                {
                  v65 = v63;
                  v63 = v64 << 36;
                }
                v38 = v63 | v65;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1628;
                v13 = v1647;
                v15 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v18 = v1505;
                v37 = v1549;
              }
            }
          }
          LOBYTE(v42) = 0;
        }
LABEL_51:
        if ((v38 & 1) != 0)
        {
          v779 = v38 & 0xFFFFFFFF8;
          if ((v38 & 0xFFFFFFFF8) != 0)
          {
            v780 = v18;
            v1560 = v37;
            WTF::fastFree(v779, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v37 = v1560;
            StatusReg = v1628;
            v18 = v780;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v15 = 0uLL;
            v13 = v1647;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v25 & 1) != 0)
        {
          v781 = v25 & 0xFFFFFFFF8;
          if ((v25 & 0xFFFFFFFF8) != 0)
          {
            v782 = v18;
            v783 = v37;
            WTF::fastFree(v781, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v37 = v783;
            v18 = v782;
            a8 = 8064;
            StatusReg = v1628;
            v13 = v1647;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v15 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v42 & 1) != 0)
        {
          v24[2] = v11;
          if ((v16 & 1) != 0 && v37)
          {
            WTF::fastFree(v37, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1628;
            v13 = v1647;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v15 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_28;
        }
        if ((*v24 & 2) != 0 && (*v24 & 0xFFFFFFFF8) != 0)
          v26 = v24;
        v23 = (++v36 + (_DWORD)v23) & v18;
        v24 = (unint64_t *)(v17 + (v23 << 6));
        v25 = *v24;
        if (*v24 != 2)
          continue;
        break;
      }
      if (v26)
      {
        *v26 = 2;
        *(_OWORD *)(v26 + 1) = 0u;
        *(_OWORD *)(v26 + 3) = 0u;
        *(_OWORD *)(v26 + 5) = 0u;
        v26[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_21;
      }
      if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v25 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1628;
        v13 = v1647;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v15 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_20:
      v26 = v24;
LABEL_21:
      *v26 = v16;
      v27 = v1666;
      v28 = v1667;
      v29 = v1668;
      v26[7] = v1669;
      *(_OWORD *)(v26 + 5) = v29;
      *(_OWORD *)(v26 + 3) = v28;
      *(_OWORD *)(v26 + 1) = v27;
      v30 = *a3;
      if (*a3)
        v31 = *(_DWORD *)(v30 - 12) + 1;
      else
        v31 = 1;
      *(_DWORD *)(v30 - 12) = v31;
      v32 = *a3;
      if (*a3)
        v33 = *(_DWORD *)(v32 - 12);
      else
        v33 = 0;
      v34 = (*(_DWORD *)(v32 - 16) + v33);
      v35 = *(unsigned int *)(v32 - 4);
      if (v35 > 0x400)
      {
        if (v35 > 2 * v34)
          goto LABEL_27;
LABEL_86:
        v62 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v26);
        a8 = 8064;
        StatusReg = v1628;
        v13 = v1647;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v15 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v26 = (_QWORD *)v62;
        goto LABEL_27;
      }
      if (3 * v35 <= 4 * v34)
        goto LABEL_86;
LABEL_27:
      v26[2] = v11;
LABEL_28:
      v11 += 96;
      if (v11 >= (unint64_t)v13)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v66 = v9[9];
  if (!v9[9])
    v66 = *((_DWORD *)v9 + 33);
  v67 = ((unint64_t)v9 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  v68 = v9[10];
  if (v9[10])
    v69 = v9[10];
  else
    v69 = *((_DWORD *)v9 + 34);
  v70 = (char *)v9 + v69;
  if ((unint64_t)v70 > v67)
  {
    v71 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1629 = StatusReg;
    v1648 = (char *)v9 + v69;
    while (1)
    {
      v72 = *(_QWORD *)(v67 + 72);
      if ((v72 & 1) != 0)
      {
        v681 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
        if ((v72 & 2) != 0
          || ((v682 = *(unsigned int *)((v72 & 0xFFFFFFFF8) + 8), (_DWORD)v682 != 0x3FFFFFFF)
            ? (v683 = (_DWORD)v682 == -1)
            : (v683 = 1),
              v683))
        {
          v684 = 2;
        }
        else if (v682 >> 28)
        {
          v1142 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1629;
          v70 = v1648;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v71 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1142 = v681;
          *(_DWORD *)(v1142 + 8) = v682;
          v684 = 1;
          v681 = v1142;
        }
        else
        {
          v684 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
          v681 = v682 << 36;
        }
        v72 = v681 | v684;
      }
      v1669 = 0;
      v1667 = v71;
      v1668 = v71;
      v1666 = v71;
      v73 = *a3;
      if (*a3)
      {
LABEL_105:
        v74 = *(unsigned int *)(v73 - 8);
        goto LABEL_106;
      }
      v102 = *(_QWORD *)(StatusReg + 752);
      if (!v102)
        goto LABEL_1998;
      v103 = v14[521];
      if (*(_DWORD *)(v102 + 8052) <= v103)
        goto LABEL_1998;
      v104 = v102 + 8 * v103;
      v105 = v104 + 8064;
      *(_BYTE *)(v104 + 8064) = 1;
      v106 = *(unsigned int *)(v104 + 8080);
      if ((_DWORD)v106)
      {
        *(_DWORD *)(v105 + 16) = v106 - *(_DWORD *)(v105 + 20);
        v107 = *(_QWORD *)(v105 + 8) - v106;
        goto LABEL_164;
      }
      v109 = *(_QWORD *)(v105 + 40);
      v110 = *(_QWORD *)(v105 + 24);
      if (v109)
        goto LABEL_168;
      if (*(_BYTE *)(v105 + 5) != 6)
        goto LABEL_1997;
      v949 = *(unsigned int *)(v105 + 32);
      v950 = *(_DWORD *)(v105 + 36);
      if (v949 >= v950)
        goto LABEL_1997;
      *(_QWORD *)(v105 + 8 * v949 + 56) = 0;
      v951 = (unint64_t *)(v102 + 8128 + 8 * v103 + 8 * v949);
      v952 = v950 - 1 - v949;
      do
      {
        if (!v952)
        {
          *(_DWORD *)(v105 + 32) = v950;
LABEL_1997:
          *(_BYTE *)v105 = 0;
LABEL_1998:
          v107 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1629;
          v70 = v1648;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v71 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_165;
        }
        v110 += 1024;
        v954 = *v951++;
        v953 = v954;
        LODWORD(v949) = v949 + 1;
        --v952;
      }
      while (!v954);
      v109 = __rbit64(v953);
      *(_DWORD *)(v105 + 32) = v949;
      *(_QWORD *)(v105 + 24) = v110;
LABEL_168:
      v111 = __clz(v109);
      *(_QWORD *)(v105 + 40) = v109 & ~(0x8000000000000000 >> v111);
      v107 = v110 + 16 * v111;
LABEL_164:
      *(_BYTE *)v105 = 0;
LABEL_165:
      *(_QWORD *)(v107 + 16) = 2;
      v108 = v107 + 16;
      *(_OWORD *)(v108 + 8) = v71;
      *(_OWORD *)(v108 + 24) = v71;
      *(_OWORD *)(v108 + 40) = v71;
      *(_QWORD *)(v108 + 56) = 0;
      *(_QWORD *)(v108 + 64) = 2;
      *(_OWORD *)(v108 + 72) = v71;
      *(_OWORD *)(v108 + 88) = v71;
      *(_OWORD *)(v108 + 104) = v71;
      *(_QWORD *)(v108 + 120) = 0;
      *(_QWORD *)(v108 + 128) = 2;
      *(_OWORD *)(v108 + 136) = v71;
      *(_OWORD *)(v108 + 152) = v71;
      *(_OWORD *)(v108 + 168) = v71;
      *(_QWORD *)(v108 + 184) = 0;
      *(_QWORD *)(v108 + 192) = 2;
      *(_OWORD *)(v108 + 232) = v71;
      *(_OWORD *)(v108 + 216) = v71;
      *(_OWORD *)(v108 + 200) = v71;
      *(_QWORD *)(v108 + 248) = 0;
      *(_QWORD *)(v108 + 256) = 2;
      *(_OWORD *)(v108 + 280) = v71;
      *(_OWORD *)(v108 + 296) = v71;
      *(_OWORD *)(v108 + 264) = v71;
      *(_QWORD *)(v108 + 312) = 0;
      *(_QWORD *)(v108 + 320) = 2;
      *(_OWORD *)(v108 + 344) = v71;
      *(_OWORD *)(v108 + 360) = v71;
      *(_OWORD *)(v108 + 328) = v71;
      *(_QWORD *)(v108 + 376) = 0;
      *(_QWORD *)(v108 + 384) = 2;
      *(_OWORD *)(v108 + 408) = v71;
      *(_OWORD *)(v108 + 424) = v71;
      *(_OWORD *)(v108 + 392) = v71;
      *(_QWORD *)(v108 + 440) = 0;
      *(_QWORD *)(v108 + 448) = 2;
      *(_QWORD *)(v108 + 504) = 0;
      *(_OWORD *)(v108 + 472) = v71;
      *(_OWORD *)(v108 + 488) = v71;
      *(_OWORD *)(v108 + 456) = v71;
      *a3 = v108;
      *(_DWORD *)(v108 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v73 = *a3;
      if (*a3)
        goto LABEL_105;
      v74 = 0;
LABEL_106:
      if ((v72 & 2) != 0)
      {
        v77 = 0;
        goto LABEL_112;
      }
      v75 = v72;
      if ((v72 & 1) != 0)
      {
        v725 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
        v726 = *(unsigned int *)((v72 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v726 == 0x3FFFFFFF || (_DWORD)v726 == -1)
        {
          v728 = 2;
        }
        else if (v726 >> 28)
        {
          v1121 = v74;
          v1122 = WTF::fastMalloc((WTF *)0x10);
          v74 = v1121;
          a8 = 8064;
          StatusReg = v1629;
          v70 = v1648;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v71 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1122 = v725;
          *(_DWORD *)(v1122 + 8) = v726;
          v728 = 1;
          v725 = v1122;
        }
        else
        {
          v728 = *(_QWORD *)(v72 & 0xFFFFFFFF8);
          v725 = v726 << 36;
        }
        v75 = v725 | v728;
      }
      v76 = 2;
      while (2)
      {
        if ((v75 & 2) != 0)
        {
          v77 = v76 - 1;
          v112 = (uint64_t *)(v75 & 0xFFFFFFFF8);
          if ((v75 & 1) == 0)
          {
            if (!v112)
              goto LABEL_112;
            v113 = 1;
            v78 = (uint64_t)v112;
            goto LABEL_173;
          }
        }
        else
        {
          if ((v75 & 1) == 0)
          {
            v77 = v76 + (v75 >> 36);
            v78 = v75 & 0xFFFFFFFF8;
            if ((v75 & 0xFFFFFFFF8) == 0)
              goto LABEL_112;
            v113 = 1;
            v112 = (uint64_t *)v78;
            goto LABEL_173;
          }
          v112 = (uint64_t *)(v75 & 0xFFFFFFFF8);
          v77 = *(_DWORD *)((v75 & 0xFFFFFFFF8) + 8) + v76;
        }
        v78 = *v112;
        if (*v112)
        {
          v113 = 0;
LABEL_173:
          v114 = *(_QWORD *)(v78 + 8);
          if ((v113 & 1) == 0 && v112)
          {
            v1013 = v74;
            WTF::fastFree((unint64_t)v112, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v74 = v1013;
            a8 = 8064;
            StatusReg = v1629;
            v70 = v1648;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v71 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v115 = (~(v114 << 32) + v114) ^ ((unint64_t)(~(v114 << 32) + v114) >> 22);
          v116 = 9 * ((v115 + ~(v115 << 13)) ^ ((v115 + ~(v115 << 13)) >> 8));
          v117 = (v116 ^ (v116 >> 15)) + ~((v116 ^ (v116 >> 15)) << 27);
          v76 = v77 + ((v117 >> 31) ^ v117);
          v75 = *(_QWORD *)(v78 + 16);
          if ((v75 & 1) != 0)
          {
            v1014 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
            if ((v75 & 2) != 0
              || (v1015 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v1015 == 0x3FFFFFFF)
              || (_DWORD)v1015 == -1)
            {
              v1016 = 2;
            }
            else if (v1015 >> 28)
            {
              v1196 = v74;
              v1197 = WTF::fastMalloc((WTF *)0x10);
              v74 = v1196;
              a8 = 8064;
              StatusReg = v1629;
              v70 = v1648;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v71 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1197 = v1014;
              *(_DWORD *)(v1197 + 8) = v1015;
              v1016 = 1;
              v1014 = v1197;
            }
            else
            {
              v1016 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
              v1014 = v1015 << 36;
            }
            v75 = v1014 | v1016;
          }
          continue;
        }
        break;
      }
      if (v112)
      {
        v766 = v74;
        WTF::fastFree((unint64_t)v112, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v74 = v766;
        a8 = 8064;
        StatusReg = v1629;
        v70 = v1648;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v71 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_112:
      v79 = v77 & v74;
      v80 = (unint64_t *)(v73 + (v79 << 6));
      v81 = *v80;
      if (*v80 == 2)
        goto LABEL_113;
      v92 = 0;
      v82 = 0;
      v93 = v72 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v81 & 2) != 0)
        {
          v101 = (uint64_t *)(v81 & 0xFFFFFFFF8);
          if ((v81 & 1) == 0)
          {
            if (!v101)
              break;
            goto LABEL_126;
          }
          v869 = *v101;
          if (!*v101)
            break;
LABEL_1472:
          v873 = 2;
          goto LABEL_1473;
        }
        if ((v81 & 1) == 0)
          goto LABEL_126;
        v869 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v81 & 0xFFFFFFFF8) + 8) == -1 && v869 == 0)
          break;
        v871 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v871 == 0x3FFFFFFF || (_DWORD)v871 == -1)
          goto LABEL_1472;
        if (v871 >> 28)
        {
          v1165 = v74;
          v1617 = v93;
          v1166 = WTF::fastMalloc((WTF *)0x10);
          v93 = v1617;
          StatusReg = v1629;
          v74 = v1165;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v71 = 0uLL;
          v70 = v1648;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1166 = v869;
          *(_DWORD *)(v1166 + 8) = v871;
          v873 = 1;
          v869 = v1166;
        }
        else
        {
          v873 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
          v869 = v871 << 36;
        }
LABEL_1473:
        v81 = v869 | v873;
LABEL_126:
        v94 = v72;
        if ((v72 & 1) != 0)
        {
          v784 = *(_QWORD *)v93;
          if ((v72 & 2) != 0 || (v785 = *(unsigned int *)(v93 + 8), (_DWORD)v785 == 0x3FFFFFFF) || (_DWORD)v785 == -1)
          {
            v786 = 2;
          }
          else if (v785 >> 28)
          {
            v1539 = v74;
            v1606 = v93;
            v1153 = WTF::fastMalloc((WTF *)0x10);
            v93 = v1606;
            StatusReg = v1629;
            v74 = v1539;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v71 = 0uLL;
            v70 = v1648;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1153 = v784;
            *(_DWORD *)(v1153 + 8) = v785;
            v786 = 1;
            v784 = v1153;
          }
          else
          {
            v786 = *(_QWORD *)v93;
            v784 = v785 << 36;
          }
          v94 = v784 | v786;
        }
        if ((v81 & 2) != 0)
        {
          v98 = (v94 >> 1) & 1;
        }
        else
        {
          if ((v94 & 2) == 0)
          {
            while (1)
            {
              if ((v81 & 2) != 0)
              {
                LODWORD(v95) = -1;
              }
              else if ((v81 & 1) != 0)
              {
                LODWORD(v95) = *(_DWORD *)((v81 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v95 = v81 >> 36;
              }
              if ((v94 & 2) != 0)
              {
                LODWORD(v96) = -1;
              }
              else if ((v94 & 1) != 0)
              {
                LODWORD(v96) = *(_DWORD *)((v94 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v96 = v94 >> 36;
              }
              if ((_DWORD)v95 != (_DWORD)v96)
                break;
              v97 = (uint64_t *)(v81 & 0xFFFFFFFF8);
              v98 = v81 & 0xFFFFFFFF8;
              if ((v81 & 1) != 0)
                v98 = *v97;
              v99 = (uint64_t *)(v94 & 0xFFFFFFFF8);
              v100 = v94 & 0xFFFFFFFF8;
              if ((v94 & 1) != 0)
                v100 = *v99;
              if (!v98 || !v100)
              {
                LOBYTE(v98) = (v98 != 0) == (v100 != 0);
                goto LABEL_144;
              }
              if (*(_QWORD *)(v98 + 8) != *(_QWORD *)(v100 + 8))
                break;
              if ((v81 & 1) != 0 && v97)
              {
                v1518 = v74;
                v1574 = v93;
                v1485 = v100;
                WTF::fastFree(v81 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v100 = v1485;
                v93 = v1574;
                StatusReg = v1629;
                v74 = v1518;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v71 = 0uLL;
                v70 = v1648;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v99 = (uint64_t *)(v94 & 0xFFFFFFFF8);
              }
              v81 = *(_QWORD *)(v98 + 16);
              if ((v81 & 1) != 0)
              {
                v1473 = v99;
                v1486 = v100;
                v1575 = v93;
                v1519 = v74;
                v1063 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
                if ((v81 & 2) != 0
                  || (v1064 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v1064 == 0x3FFFFFFF)
                  || (_DWORD)v1064 == -1)
                {
                  v1065 = 2;
                }
                else if (v1064 >> 28)
                {
                  v1229 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1229 = v1063;
                  *(_DWORD *)(v1229 + 8) = v1064;
                  v1065 = 1;
                  v1063 = v1229;
                }
                else
                {
                  v1065 = v1063;
                  v1063 = v1064 << 36;
                }
                v81 = v1063 | v1065;
                v99 = v1473;
                v100 = v1486;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1629;
                v70 = v1648;
                v71 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v74 = v1519;
                v93 = v1575;
              }
              if ((v94 & 1) != 0 && v99)
              {
                v1066 = v74;
                v1576 = v93;
                v1067 = v100;
                WTF::fastFree((unint64_t)v99, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v100 = v1067;
                v93 = v1576;
                StatusReg = v1629;
                v74 = v1066;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v71 = 0uLL;
                v70 = v1648;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v94 = *(_QWORD *)(v100 + 16);
              if ((v94 & 1) != 0)
              {
                v1550 = v93;
                v1506 = v74;
                v119 = *(_QWORD *)(v94 & 0xFFFFFFFF8);
                if ((v94 & 2) != 0
                  || (v120 = *(unsigned int *)((v94 & 0xFFFFFFFF8) + 8), (_DWORD)v120 == 0x3FFFFFFF)
                  || (_DWORD)v120 == -1)
                {
                  v121 = 2;
                }
                else if (v120 >> 28)
                {
                  v1218 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1218 = v119;
                  *(_DWORD *)(v1218 + 8) = v120;
                  v121 = 1;
                  v119 = v1218;
                }
                else
                {
                  v121 = v119;
                  v119 = v120 << 36;
                }
                v94 = v119 | v121;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1629;
                v70 = v1648;
                v71 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v74 = v1506;
                v93 = v1550;
              }
            }
          }
          LOBYTE(v98) = 0;
        }
LABEL_144:
        if ((v94 & 1) != 0)
        {
          v787 = v94 & 0xFFFFFFFF8;
          if ((v94 & 0xFFFFFFFF8) != 0)
          {
            v788 = v74;
            v1561 = v93;
            WTF::fastFree(v787, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v93 = v1561;
            StatusReg = v1629;
            v74 = v788;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v71 = 0uLL;
            v70 = v1648;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v81 & 1) != 0)
        {
          v789 = v81 & 0xFFFFFFFF8;
          if ((v81 & 0xFFFFFFFF8) != 0)
          {
            v790 = v74;
            v791 = v93;
            WTF::fastFree(v789, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v93 = v791;
            v74 = v790;
            a8 = 8064;
            StatusReg = v1629;
            v70 = v1648;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v71 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v98 & 1) != 0)
        {
          v80[2] = v67;
          if ((v72 & 1) != 0 && v93)
          {
            WTF::fastFree(v93, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1629;
            v70 = v1648;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v71 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_121;
        }
        if ((*v80 & 2) != 0 && (*v80 & 0xFFFFFFFF8) != 0)
          v82 = v80;
        v79 = (++v92 + (_DWORD)v79) & v74;
        v80 = (unint64_t *)(v73 + (v79 << 6));
        v81 = *v80;
        if (*v80 != 2)
          continue;
        break;
      }
      if (v82)
      {
        *v82 = 2;
        *(_OWORD *)(v82 + 1) = 0u;
        *(_OWORD *)(v82 + 3) = 0u;
        *(_OWORD *)(v82 + 5) = 0u;
        v82[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_114;
      }
      if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v81 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1629;
        v70 = v1648;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v71 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_113:
      v82 = v80;
LABEL_114:
      *v82 = v72;
      v83 = v1666;
      v84 = v1667;
      v85 = v1668;
      v82[7] = v1669;
      *(_OWORD *)(v82 + 5) = v85;
      *(_OWORD *)(v82 + 3) = v84;
      *(_OWORD *)(v82 + 1) = v83;
      v86 = *a3;
      if (*a3)
        v87 = *(_DWORD *)(v86 - 12) + 1;
      else
        v87 = 1;
      *(_DWORD *)(v86 - 12) = v87;
      v88 = *a3;
      if (*a3)
        v89 = *(_DWORD *)(v88 - 12);
      else
        v89 = 0;
      v90 = (*(_DWORD *)(v88 - 16) + v89);
      v91 = *(unsigned int *)(v88 - 4);
      if (v91 > 0x400)
      {
        if (v91 > 2 * v90)
          goto LABEL_120;
LABEL_179:
        v118 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v82);
        a8 = 8064;
        StatusReg = v1629;
        v70 = v1648;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v71 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v82 = (_QWORD *)v118;
        goto LABEL_120;
      }
      if (3 * v91 <= 4 * v90)
        goto LABEL_179;
LABEL_120:
      v82[2] = v67;
LABEL_121:
      v67 += 96;
      if (v67 >= (unint64_t)v70)
      {
        v9 = (unsigned __int16 *)a1[17];
        v68 = v9[10];
        break;
      }
    }
  }
  if (!v68)
    v68 = *((_DWORD *)v9 + 34);
  v122 = ((unint64_t)v9 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  v123 = v9[11];
  if (!v9[11])
    v123 = *((_DWORD *)v9 + 35);
  v124 = (char *)v9 + v123;
  if ((unint64_t)v124 > v122)
  {
    v125 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1630 = StatusReg;
    v1649 = (char *)v9 + v123;
    while (1)
    {
      v126 = *(_QWORD *)(v122 + 72);
      if ((v126 & 1) != 0)
      {
        v685 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
        if ((v126 & 2) != 0
          || ((v686 = *(unsigned int *)((v126 & 0xFFFFFFFF8) + 8), (_DWORD)v686 != 0x3FFFFFFF)
            ? (v687 = (_DWORD)v686 == -1)
            : (v687 = 1),
              v687))
        {
          v688 = 2;
        }
        else if (v686 >> 28)
        {
          v1143 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1630;
          v124 = v1649;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v125 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1143 = v685;
          *(_DWORD *)(v1143 + 8) = v686;
          v688 = 1;
          v685 = v1143;
        }
        else
        {
          v688 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
          v685 = v686 << 36;
        }
        v126 = v685 | v688;
      }
      v1669 = 0;
      v1667 = v125;
      v1668 = v125;
      v1666 = v125;
      v127 = *a3;
      if (*a3)
      {
LABEL_198:
        v128 = *(unsigned int *)(v127 - 8);
        goto LABEL_199;
      }
      v156 = *(_QWORD *)(StatusReg + 752);
      if (!v156)
        goto LABEL_2001;
      v157 = v14[521];
      if (*(_DWORD *)(v156 + 8052) <= v157)
        goto LABEL_2001;
      v158 = v156 + 8 * v157;
      v159 = v158 + 8064;
      *(_BYTE *)(v158 + 8064) = 1;
      v160 = *(unsigned int *)(v158 + 8080);
      if ((_DWORD)v160)
      {
        *(_DWORD *)(v159 + 16) = v160 - *(_DWORD *)(v159 + 20);
        v161 = *(_QWORD *)(v159 + 8) - v160;
        goto LABEL_257;
      }
      v163 = *(_QWORD *)(v159 + 40);
      v164 = *(_QWORD *)(v159 + 24);
      if (v163)
        goto LABEL_261;
      if (*(_BYTE *)(v159 + 5) != 6)
        goto LABEL_2000;
      v955 = *(unsigned int *)(v159 + 32);
      v956 = *(_DWORD *)(v159 + 36);
      if (v955 >= v956)
        goto LABEL_2000;
      *(_QWORD *)(v159 + 8 * v955 + 56) = 0;
      v957 = (unint64_t *)(v156 + 8128 + 8 * v157 + 8 * v955);
      v958 = v956 - 1 - v955;
      do
      {
        if (!v958)
        {
          *(_DWORD *)(v159 + 32) = v956;
LABEL_2000:
          *(_BYTE *)v159 = 0;
LABEL_2001:
          v161 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1630;
          v124 = v1649;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v125 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_258;
        }
        v164 += 1024;
        v960 = *v957++;
        v959 = v960;
        LODWORD(v955) = v955 + 1;
        --v958;
      }
      while (!v960);
      v163 = __rbit64(v959);
      *(_DWORD *)(v159 + 32) = v955;
      *(_QWORD *)(v159 + 24) = v164;
LABEL_261:
      v165 = __clz(v163);
      *(_QWORD *)(v159 + 40) = v163 & ~(0x8000000000000000 >> v165);
      v161 = v164 + 16 * v165;
LABEL_257:
      *(_BYTE *)v159 = 0;
LABEL_258:
      *(_QWORD *)(v161 + 16) = 2;
      v162 = v161 + 16;
      *(_OWORD *)(v162 + 8) = v125;
      *(_OWORD *)(v162 + 24) = v125;
      *(_OWORD *)(v162 + 40) = v125;
      *(_QWORD *)(v162 + 56) = 0;
      *(_QWORD *)(v162 + 64) = 2;
      *(_OWORD *)(v162 + 72) = v125;
      *(_OWORD *)(v162 + 88) = v125;
      *(_OWORD *)(v162 + 104) = v125;
      *(_QWORD *)(v162 + 120) = 0;
      *(_QWORD *)(v162 + 128) = 2;
      *(_OWORD *)(v162 + 136) = v125;
      *(_OWORD *)(v162 + 152) = v125;
      *(_OWORD *)(v162 + 168) = v125;
      *(_QWORD *)(v162 + 184) = 0;
      *(_QWORD *)(v162 + 192) = 2;
      *(_OWORD *)(v162 + 232) = v125;
      *(_OWORD *)(v162 + 216) = v125;
      *(_OWORD *)(v162 + 200) = v125;
      *(_QWORD *)(v162 + 248) = 0;
      *(_QWORD *)(v162 + 256) = 2;
      *(_OWORD *)(v162 + 280) = v125;
      *(_OWORD *)(v162 + 296) = v125;
      *(_OWORD *)(v162 + 264) = v125;
      *(_QWORD *)(v162 + 312) = 0;
      *(_QWORD *)(v162 + 320) = 2;
      *(_OWORD *)(v162 + 344) = v125;
      *(_OWORD *)(v162 + 360) = v125;
      *(_OWORD *)(v162 + 328) = v125;
      *(_QWORD *)(v162 + 376) = 0;
      *(_QWORD *)(v162 + 384) = 2;
      *(_OWORD *)(v162 + 408) = v125;
      *(_OWORD *)(v162 + 424) = v125;
      *(_OWORD *)(v162 + 392) = v125;
      *(_QWORD *)(v162 + 440) = 0;
      *(_QWORD *)(v162 + 448) = 2;
      *(_QWORD *)(v162 + 504) = 0;
      *(_OWORD *)(v162 + 472) = v125;
      *(_OWORD *)(v162 + 488) = v125;
      *(_OWORD *)(v162 + 456) = v125;
      *a3 = v162;
      *(_DWORD *)(v162 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v127 = *a3;
      if (*a3)
        goto LABEL_198;
      v128 = 0;
LABEL_199:
      if ((v126 & 2) != 0)
      {
        v131 = 0;
        goto LABEL_205;
      }
      v129 = v126;
      if ((v126 & 1) != 0)
      {
        v729 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
        v730 = *(unsigned int *)((v126 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v730 == 0x3FFFFFFF || (_DWORD)v730 == -1)
        {
          v732 = 2;
        }
        else if (v730 >> 28)
        {
          v1123 = v128;
          v1124 = WTF::fastMalloc((WTF *)0x10);
          v128 = v1123;
          a8 = 8064;
          StatusReg = v1630;
          v124 = v1649;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v125 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1124 = v729;
          *(_DWORD *)(v1124 + 8) = v730;
          v732 = 1;
          v729 = v1124;
        }
        else
        {
          v732 = *(_QWORD *)(v126 & 0xFFFFFFFF8);
          v729 = v730 << 36;
        }
        v129 = v729 | v732;
      }
      v130 = 2;
      while (2)
      {
        if ((v129 & 2) != 0)
        {
          v131 = v130 - 1;
          v166 = (uint64_t *)(v129 & 0xFFFFFFFF8);
          if ((v129 & 1) == 0)
          {
            if (!v166)
              goto LABEL_205;
            v167 = 1;
            v132 = (uint64_t)v166;
            goto LABEL_266;
          }
        }
        else
        {
          if ((v129 & 1) == 0)
          {
            v131 = v130 + (v129 >> 36);
            v132 = v129 & 0xFFFFFFFF8;
            if ((v129 & 0xFFFFFFFF8) == 0)
              goto LABEL_205;
            v167 = 1;
            v166 = (uint64_t *)v132;
            goto LABEL_266;
          }
          v166 = (uint64_t *)(v129 & 0xFFFFFFFF8);
          v131 = *(_DWORD *)((v129 & 0xFFFFFFFF8) + 8) + v130;
        }
        v132 = *v166;
        if (*v166)
        {
          v167 = 0;
LABEL_266:
          v168 = *(_QWORD *)(v132 + 8);
          if ((v167 & 1) == 0 && v166)
          {
            v1017 = v128;
            WTF::fastFree((unint64_t)v166, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v128 = v1017;
            a8 = 8064;
            StatusReg = v1630;
            v124 = v1649;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v125 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v169 = (~(v168 << 32) + v168) ^ ((unint64_t)(~(v168 << 32) + v168) >> 22);
          v170 = 9 * ((v169 + ~(v169 << 13)) ^ ((v169 + ~(v169 << 13)) >> 8));
          v171 = (v170 ^ (v170 >> 15)) + ~((v170 ^ (v170 >> 15)) << 27);
          v130 = v131 + ((v171 >> 31) ^ v171);
          v129 = *(_QWORD *)(v132 + 16);
          if ((v129 & 1) != 0)
          {
            v1018 = *(_QWORD *)(v129 & 0xFFFFFFFF8);
            if ((v129 & 2) != 0
              || (v1019 = *(unsigned int *)((v129 & 0xFFFFFFFF8) + 8), (_DWORD)v1019 == 0x3FFFFFFF)
              || (_DWORD)v1019 == -1)
            {
              v1020 = 2;
            }
            else if (v1019 >> 28)
            {
              v1198 = v128;
              v1199 = WTF::fastMalloc((WTF *)0x10);
              v128 = v1198;
              a8 = 8064;
              StatusReg = v1630;
              v124 = v1649;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v125 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1199 = v1018;
              *(_DWORD *)(v1199 + 8) = v1019;
              v1020 = 1;
              v1018 = v1199;
            }
            else
            {
              v1020 = *(_QWORD *)(v129 & 0xFFFFFFFF8);
              v1018 = v1019 << 36;
            }
            v129 = v1018 | v1020;
          }
          continue;
        }
        break;
      }
      if (v166)
      {
        v767 = v128;
        WTF::fastFree((unint64_t)v166, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v128 = v767;
        a8 = 8064;
        StatusReg = v1630;
        v124 = v1649;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v125 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_205:
      v133 = v131 & v128;
      v134 = (unint64_t *)(v127 + (v133 << 6));
      v135 = *v134;
      if (*v134 == 2)
        goto LABEL_206;
      v146 = 0;
      v136 = 0;
      v147 = v126 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v135 & 2) != 0)
        {
          v155 = (uint64_t *)(v135 & 0xFFFFFFFF8);
          if ((v135 & 1) == 0)
          {
            if (!v155)
              break;
            goto LABEL_219;
          }
          v874 = *v155;
          if (!*v155)
            break;
LABEL_1483:
          v878 = 2;
          goto LABEL_1484;
        }
        if ((v135 & 1) == 0)
          goto LABEL_219;
        v874 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v135 & 0xFFFFFFFF8) + 8) == -1 && v874 == 0)
          break;
        v876 = *(unsigned int *)((v135 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v876 == 0x3FFFFFFF || (_DWORD)v876 == -1)
          goto LABEL_1483;
        if (v876 >> 28)
        {
          v1167 = v128;
          v1618 = v147;
          v1168 = WTF::fastMalloc((WTF *)0x10);
          v147 = v1618;
          StatusReg = v1630;
          v128 = v1167;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v125 = 0uLL;
          v124 = v1649;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1168 = v874;
          *(_DWORD *)(v1168 + 8) = v876;
          v878 = 1;
          v874 = v1168;
        }
        else
        {
          v878 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
          v874 = v876 << 36;
        }
LABEL_1484:
        v135 = v874 | v878;
LABEL_219:
        v148 = v126;
        if ((v126 & 1) != 0)
        {
          v792 = *(_QWORD *)v147;
          if ((v126 & 2) != 0 || (v793 = *(unsigned int *)(v147 + 8), (_DWORD)v793 == 0x3FFFFFFF) || (_DWORD)v793 == -1)
          {
            v794 = 2;
          }
          else if (v793 >> 28)
          {
            v1540 = v128;
            v1607 = v147;
            v1154 = WTF::fastMalloc((WTF *)0x10);
            v147 = v1607;
            StatusReg = v1630;
            v128 = v1540;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v125 = 0uLL;
            v124 = v1649;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1154 = v792;
            *(_DWORD *)(v1154 + 8) = v793;
            v794 = 1;
            v792 = v1154;
          }
          else
          {
            v794 = *(_QWORD *)v147;
            v792 = v793 << 36;
          }
          v148 = v792 | v794;
        }
        if ((v135 & 2) != 0)
        {
          v152 = (v148 >> 1) & 1;
        }
        else
        {
          if ((v148 & 2) == 0)
          {
            while (1)
            {
              if ((v135 & 2) != 0)
              {
                LODWORD(v149) = -1;
              }
              else if ((v135 & 1) != 0)
              {
                LODWORD(v149) = *(_DWORD *)((v135 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v149 = v135 >> 36;
              }
              if ((v148 & 2) != 0)
              {
                LODWORD(v150) = -1;
              }
              else if ((v148 & 1) != 0)
              {
                LODWORD(v150) = *(_DWORD *)((v148 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v150 = v148 >> 36;
              }
              if ((_DWORD)v149 != (_DWORD)v150)
                break;
              v151 = (uint64_t *)(v135 & 0xFFFFFFFF8);
              v152 = v135 & 0xFFFFFFFF8;
              if ((v135 & 1) != 0)
                v152 = *v151;
              v153 = (uint64_t *)(v148 & 0xFFFFFFFF8);
              v154 = v148 & 0xFFFFFFFF8;
              if ((v148 & 1) != 0)
                v154 = *v153;
              if (!v152 || !v154)
              {
                LOBYTE(v152) = (v152 != 0) == (v154 != 0);
                goto LABEL_237;
              }
              if (*(_QWORD *)(v152 + 8) != *(_QWORD *)(v154 + 8))
                break;
              if ((v135 & 1) != 0 && v151)
              {
                v1520 = v128;
                v1577 = v147;
                v1487 = v154;
                WTF::fastFree(v135 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v154 = v1487;
                v147 = v1577;
                StatusReg = v1630;
                v128 = v1520;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v125 = 0uLL;
                v124 = v1649;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v153 = (uint64_t *)(v148 & 0xFFFFFFFF8);
              }
              v135 = *(_QWORD *)(v152 + 16);
              if ((v135 & 1) != 0)
              {
                v1474 = v153;
                v1488 = v154;
                v1578 = v147;
                v1521 = v128;
                v1068 = *(_QWORD *)(v135 & 0xFFFFFFFF8);
                if ((v135 & 2) != 0
                  || (v1069 = *(unsigned int *)((v135 & 0xFFFFFFFF8) + 8), (_DWORD)v1069 == 0x3FFFFFFF)
                  || (_DWORD)v1069 == -1)
                {
                  v1070 = 2;
                }
                else if (v1069 >> 28)
                {
                  v1230 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1230 = v1068;
                  *(_DWORD *)(v1230 + 8) = v1069;
                  v1070 = 1;
                  v1068 = v1230;
                }
                else
                {
                  v1070 = v1068;
                  v1068 = v1069 << 36;
                }
                v135 = v1068 | v1070;
                v153 = v1474;
                v154 = v1488;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1630;
                v124 = v1649;
                v125 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v128 = v1521;
                v147 = v1578;
              }
              if ((v148 & 1) != 0 && v153)
              {
                v1071 = v128;
                v1579 = v147;
                v1072 = v154;
                WTF::fastFree((unint64_t)v153, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v154 = v1072;
                v147 = v1579;
                StatusReg = v1630;
                v128 = v1071;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v125 = 0uLL;
                v124 = v1649;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v148 = *(_QWORD *)(v154 + 16);
              if ((v148 & 1) != 0)
              {
                v1551 = v147;
                v1507 = v128;
                v173 = *(_QWORD *)(v148 & 0xFFFFFFFF8);
                if ((v148 & 2) != 0
                  || (v174 = *(unsigned int *)((v148 & 0xFFFFFFFF8) + 8), (_DWORD)v174 == 0x3FFFFFFF)
                  || (_DWORD)v174 == -1)
                {
                  v175 = 2;
                }
                else if (v174 >> 28)
                {
                  v1219 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1219 = v173;
                  *(_DWORD *)(v1219 + 8) = v174;
                  v175 = 1;
                  v173 = v1219;
                }
                else
                {
                  v175 = v173;
                  v173 = v174 << 36;
                }
                v148 = v173 | v175;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1630;
                v124 = v1649;
                v125 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v128 = v1507;
                v147 = v1551;
              }
            }
          }
          LOBYTE(v152) = 0;
        }
LABEL_237:
        if ((v148 & 1) != 0)
        {
          v795 = v148 & 0xFFFFFFFF8;
          if ((v148 & 0xFFFFFFFF8) != 0)
          {
            v796 = v128;
            v1562 = v147;
            WTF::fastFree(v795, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v147 = v1562;
            StatusReg = v1630;
            v128 = v796;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v125 = 0uLL;
            v124 = v1649;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v135 & 1) != 0)
        {
          v797 = v135 & 0xFFFFFFFF8;
          if ((v135 & 0xFFFFFFFF8) != 0)
          {
            v798 = v128;
            v799 = v147;
            WTF::fastFree(v797, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v147 = v799;
            v128 = v798;
            a8 = 8064;
            StatusReg = v1630;
            v124 = v1649;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v125 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v152 & 1) != 0)
        {
          v134[2] = v122;
          if ((v126 & 1) != 0 && v147)
          {
            WTF::fastFree(v147, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1630;
            v124 = v1649;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v125 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_214;
        }
        if ((*v134 & 2) != 0 && (*v134 & 0xFFFFFFFF8) != 0)
          v136 = v134;
        v133 = (++v146 + (_DWORD)v133) & v128;
        v134 = (unint64_t *)(v127 + (v133 << 6));
        v135 = *v134;
        if (*v134 != 2)
          continue;
        break;
      }
      if (v136)
      {
        *v136 = 2;
        *(_OWORD *)(v136 + 1) = 0u;
        *(_OWORD *)(v136 + 3) = 0u;
        *(_OWORD *)(v136 + 5) = 0u;
        v136[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_207;
      }
      if ((v135 & 1) != 0 && (v135 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v135 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1630;
        v124 = v1649;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v125 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_206:
      v136 = v134;
LABEL_207:
      *v136 = v126;
      v137 = v1666;
      v138 = v1667;
      v139 = v1668;
      v136[7] = v1669;
      *(_OWORD *)(v136 + 5) = v139;
      *(_OWORD *)(v136 + 3) = v138;
      *(_OWORD *)(v136 + 1) = v137;
      v140 = *a3;
      if (*a3)
        v141 = *(_DWORD *)(v140 - 12) + 1;
      else
        v141 = 1;
      *(_DWORD *)(v140 - 12) = v141;
      v142 = *a3;
      if (*a3)
        v143 = *(_DWORD *)(v142 - 12);
      else
        v143 = 0;
      v144 = (*(_DWORD *)(v142 - 16) + v143);
      v145 = *(unsigned int *)(v142 - 4);
      if (v145 > 0x400)
      {
        if (v145 > 2 * v144)
          goto LABEL_213;
LABEL_272:
        v172 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v136);
        a8 = 8064;
        StatusReg = v1630;
        v124 = v1649;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v125 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v136 = (_QWORD *)v172;
        goto LABEL_213;
      }
      if (3 * v145 <= 4 * v144)
        goto LABEL_272;
LABEL_213:
      v136[2] = v122;
LABEL_214:
      v122 += 80;
      if (v122 >= (unint64_t)v124)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v176 = v9[8];
  if (!v9[8])
    v176 = *((_DWORD *)v9 + 32);
  v177 = ((unint64_t)v9 + v176 + 7) & 0xFFFFFFFFFFFFFFF8;
  v178 = v9[9];
  if (!v9[9])
    v178 = *((_DWORD *)v9 + 33);
  v179 = (char *)v9 + v178;
  if ((unint64_t)v179 > v177)
  {
    v180 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1631 = StatusReg;
    v1650 = (char *)v9 + v178;
    while (1)
    {
      v181 = *(_QWORD *)(v177 + 72);
      if ((v181 & 1) != 0)
      {
        v689 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
        if ((v181 & 2) != 0
          || ((v690 = *(unsigned int *)((v181 & 0xFFFFFFFF8) + 8), (_DWORD)v690 != 0x3FFFFFFF)
            ? (v691 = (_DWORD)v690 == -1)
            : (v691 = 1),
              v691))
        {
          v692 = 2;
        }
        else if (v690 >> 28)
        {
          v1144 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1631;
          v179 = v1650;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v180 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1144 = v689;
          *(_DWORD *)(v1144 + 8) = v690;
          v692 = 1;
          v689 = v1144;
        }
        else
        {
          v692 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
          v689 = v690 << 36;
        }
        v181 = v689 | v692;
      }
      v1669 = 0;
      v1667 = v180;
      v1668 = v180;
      v1666 = v180;
      v182 = *a3;
      if (*a3)
      {
LABEL_291:
        v183 = *(unsigned int *)(v182 - 8);
        goto LABEL_292;
      }
      v211 = *(_QWORD *)(StatusReg + 752);
      if (!v211)
        goto LABEL_2004;
      v212 = v14[521];
      if (*(_DWORD *)(v211 + 8052) <= v212)
        goto LABEL_2004;
      v213 = v211 + 8 * v212;
      v214 = v213 + 8064;
      *(_BYTE *)(v213 + 8064) = 1;
      v215 = *(unsigned int *)(v213 + 8080);
      if ((_DWORD)v215)
      {
        *(_DWORD *)(v214 + 16) = v215 - *(_DWORD *)(v214 + 20);
        v216 = *(_QWORD *)(v214 + 8) - v215;
        goto LABEL_350;
      }
      v218 = *(_QWORD *)(v214 + 40);
      v219 = *(_QWORD *)(v214 + 24);
      if (v218)
        goto LABEL_354;
      if (*(_BYTE *)(v214 + 5) != 6)
        goto LABEL_2003;
      v961 = *(unsigned int *)(v214 + 32);
      v962 = *(_DWORD *)(v214 + 36);
      if (v961 >= v962)
        goto LABEL_2003;
      *(_QWORD *)(v214 + 8 * v961 + 56) = 0;
      v963 = (unint64_t *)(v211 + 8128 + 8 * v212 + 8 * v961);
      v964 = v962 - 1 - v961;
      do
      {
        if (!v964)
        {
          *(_DWORD *)(v214 + 32) = v962;
LABEL_2003:
          *(_BYTE *)v214 = 0;
LABEL_2004:
          v216 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1631;
          v179 = v1650;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v180 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_351;
        }
        v219 += 1024;
        v966 = *v963++;
        v965 = v966;
        LODWORD(v961) = v961 + 1;
        --v964;
      }
      while (!v966);
      v218 = __rbit64(v965);
      *(_DWORD *)(v214 + 32) = v961;
      *(_QWORD *)(v214 + 24) = v219;
LABEL_354:
      v220 = __clz(v218);
      *(_QWORD *)(v214 + 40) = v218 & ~(0x8000000000000000 >> v220);
      v216 = v219 + 16 * v220;
LABEL_350:
      *(_BYTE *)v214 = 0;
LABEL_351:
      *(_QWORD *)(v216 + 16) = 2;
      v217 = v216 + 16;
      *(_OWORD *)(v217 + 8) = v180;
      *(_OWORD *)(v217 + 24) = v180;
      *(_OWORD *)(v217 + 40) = v180;
      *(_QWORD *)(v217 + 56) = 0;
      *(_QWORD *)(v217 + 64) = 2;
      *(_OWORD *)(v217 + 72) = v180;
      *(_OWORD *)(v217 + 88) = v180;
      *(_OWORD *)(v217 + 104) = v180;
      *(_QWORD *)(v217 + 120) = 0;
      *(_QWORD *)(v217 + 128) = 2;
      *(_OWORD *)(v217 + 136) = v180;
      *(_OWORD *)(v217 + 152) = v180;
      *(_OWORD *)(v217 + 168) = v180;
      *(_QWORD *)(v217 + 184) = 0;
      *(_QWORD *)(v217 + 192) = 2;
      *(_OWORD *)(v217 + 232) = v180;
      *(_OWORD *)(v217 + 216) = v180;
      *(_OWORD *)(v217 + 200) = v180;
      *(_QWORD *)(v217 + 248) = 0;
      *(_QWORD *)(v217 + 256) = 2;
      *(_OWORD *)(v217 + 280) = v180;
      *(_OWORD *)(v217 + 296) = v180;
      *(_OWORD *)(v217 + 264) = v180;
      *(_QWORD *)(v217 + 312) = 0;
      *(_QWORD *)(v217 + 320) = 2;
      *(_OWORD *)(v217 + 344) = v180;
      *(_OWORD *)(v217 + 360) = v180;
      *(_OWORD *)(v217 + 328) = v180;
      *(_QWORD *)(v217 + 376) = 0;
      *(_QWORD *)(v217 + 384) = 2;
      *(_OWORD *)(v217 + 408) = v180;
      *(_OWORD *)(v217 + 424) = v180;
      *(_OWORD *)(v217 + 392) = v180;
      *(_QWORD *)(v217 + 440) = 0;
      *(_QWORD *)(v217 + 448) = 2;
      *(_QWORD *)(v217 + 504) = 0;
      *(_OWORD *)(v217 + 472) = v180;
      *(_OWORD *)(v217 + 488) = v180;
      *(_OWORD *)(v217 + 456) = v180;
      *a3 = v217;
      *(_DWORD *)(v217 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v182 = *a3;
      if (*a3)
        goto LABEL_291;
      v183 = 0;
LABEL_292:
      if ((v181 & 2) != 0)
      {
        v186 = 0;
        goto LABEL_298;
      }
      v184 = v181;
      if ((v181 & 1) != 0)
      {
        v733 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
        v734 = *(unsigned int *)((v181 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v734 == 0x3FFFFFFF || (_DWORD)v734 == -1)
        {
          v736 = 2;
        }
        else if (v734 >> 28)
        {
          v1125 = v183;
          v1126 = WTF::fastMalloc((WTF *)0x10);
          v183 = v1125;
          a8 = 8064;
          StatusReg = v1631;
          v179 = v1650;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v180 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1126 = v733;
          *(_DWORD *)(v1126 + 8) = v734;
          v736 = 1;
          v733 = v1126;
        }
        else
        {
          v736 = *(_QWORD *)(v181 & 0xFFFFFFFF8);
          v733 = v734 << 36;
        }
        v184 = v733 | v736;
      }
      v185 = 2;
      while (2)
      {
        if ((v184 & 2) != 0)
        {
          v186 = v185 - 1;
          v221 = (uint64_t *)(v184 & 0xFFFFFFFF8);
          if ((v184 & 1) == 0)
          {
            if (!v221)
              goto LABEL_298;
            v222 = 1;
            v187 = (uint64_t)v221;
            goto LABEL_359;
          }
        }
        else
        {
          if ((v184 & 1) == 0)
          {
            v186 = v185 + (v184 >> 36);
            v187 = v184 & 0xFFFFFFFF8;
            if ((v184 & 0xFFFFFFFF8) == 0)
              goto LABEL_298;
            v222 = 1;
            v221 = (uint64_t *)v187;
            goto LABEL_359;
          }
          v221 = (uint64_t *)(v184 & 0xFFFFFFFF8);
          v186 = *(_DWORD *)((v184 & 0xFFFFFFFF8) + 8) + v185;
        }
        v187 = *v221;
        if (*v221)
        {
          v222 = 0;
LABEL_359:
          v223 = *(_QWORD *)(v187 + 8);
          if ((v222 & 1) == 0 && v221)
          {
            v1021 = v183;
            WTF::fastFree((unint64_t)v221, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v183 = v1021;
            a8 = 8064;
            StatusReg = v1631;
            v179 = v1650;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v180 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v224 = (~(v223 << 32) + v223) ^ ((unint64_t)(~(v223 << 32) + v223) >> 22);
          v225 = 9 * ((v224 + ~(v224 << 13)) ^ ((v224 + ~(v224 << 13)) >> 8));
          v226 = (v225 ^ (v225 >> 15)) + ~((v225 ^ (v225 >> 15)) << 27);
          v185 = v186 + ((v226 >> 31) ^ v226);
          v184 = *(_QWORD *)(v187 + 16);
          if ((v184 & 1) != 0)
          {
            v1022 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
            if ((v184 & 2) != 0
              || (v1023 = *(unsigned int *)((v184 & 0xFFFFFFFF8) + 8), (_DWORD)v1023 == 0x3FFFFFFF)
              || (_DWORD)v1023 == -1)
            {
              v1024 = 2;
            }
            else if (v1023 >> 28)
            {
              v1200 = v183;
              v1201 = WTF::fastMalloc((WTF *)0x10);
              v183 = v1200;
              a8 = 8064;
              StatusReg = v1631;
              v179 = v1650;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v180 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1201 = v1022;
              *(_DWORD *)(v1201 + 8) = v1023;
              v1024 = 1;
              v1022 = v1201;
            }
            else
            {
              v1024 = *(_QWORD *)(v184 & 0xFFFFFFFF8);
              v1022 = v1023 << 36;
            }
            v184 = v1022 | v1024;
          }
          continue;
        }
        break;
      }
      if (v221)
      {
        v768 = v183;
        WTF::fastFree((unint64_t)v221, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v183 = v768;
        a8 = 8064;
        StatusReg = v1631;
        v179 = v1650;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v180 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_298:
      v188 = v186 & v183;
      v189 = (unint64_t *)(v182 + (v188 << 6));
      v190 = *v189;
      if (*v189 == 2)
        goto LABEL_299;
      v201 = 0;
      v191 = 0;
      v202 = v181 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v190 & 2) != 0)
        {
          v210 = (uint64_t *)(v190 & 0xFFFFFFFF8);
          if ((v190 & 1) == 0)
          {
            if (!v210)
              break;
            goto LABEL_312;
          }
          v879 = *v210;
          if (!*v210)
            break;
LABEL_1494:
          v883 = 2;
          goto LABEL_1495;
        }
        if ((v190 & 1) == 0)
          goto LABEL_312;
        v879 = *(_QWORD *)(v190 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v190 & 0xFFFFFFFF8) + 8) == -1 && v879 == 0)
          break;
        v881 = *(unsigned int *)((v190 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v881 == 0x3FFFFFFF || (_DWORD)v881 == -1)
          goto LABEL_1494;
        if (v881 >> 28)
        {
          v1169 = v183;
          v1619 = v202;
          v1170 = WTF::fastMalloc((WTF *)0x10);
          v202 = v1619;
          StatusReg = v1631;
          v183 = v1169;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v180 = 0uLL;
          v179 = v1650;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1170 = v879;
          *(_DWORD *)(v1170 + 8) = v881;
          v883 = 1;
          v879 = v1170;
        }
        else
        {
          v883 = *(_QWORD *)(v190 & 0xFFFFFFFF8);
          v879 = v881 << 36;
        }
LABEL_1495:
        v190 = v879 | v883;
LABEL_312:
        v203 = v181;
        if ((v181 & 1) != 0)
        {
          v800 = *(_QWORD *)v202;
          if ((v181 & 2) != 0 || (v801 = *(unsigned int *)(v202 + 8), (_DWORD)v801 == 0x3FFFFFFF) || (_DWORD)v801 == -1)
          {
            v802 = 2;
          }
          else if (v801 >> 28)
          {
            v1541 = v183;
            v1608 = v202;
            v1155 = WTF::fastMalloc((WTF *)0x10);
            v202 = v1608;
            StatusReg = v1631;
            v183 = v1541;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v180 = 0uLL;
            v179 = v1650;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1155 = v800;
            *(_DWORD *)(v1155 + 8) = v801;
            v802 = 1;
            v800 = v1155;
          }
          else
          {
            v802 = *(_QWORD *)v202;
            v800 = v801 << 36;
          }
          v203 = v800 | v802;
        }
        if ((v190 & 2) != 0)
        {
          v207 = (v203 >> 1) & 1;
        }
        else
        {
          if ((v203 & 2) == 0)
          {
            while (1)
            {
              if ((v190 & 2) != 0)
              {
                LODWORD(v204) = -1;
              }
              else if ((v190 & 1) != 0)
              {
                LODWORD(v204) = *(_DWORD *)((v190 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v204 = v190 >> 36;
              }
              if ((v203 & 2) != 0)
              {
                LODWORD(v205) = -1;
              }
              else if ((v203 & 1) != 0)
              {
                LODWORD(v205) = *(_DWORD *)((v203 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v205 = v203 >> 36;
              }
              if ((_DWORD)v204 != (_DWORD)v205)
                break;
              v206 = (uint64_t *)(v190 & 0xFFFFFFFF8);
              v207 = v190 & 0xFFFFFFFF8;
              if ((v190 & 1) != 0)
                v207 = *v206;
              v208 = (uint64_t *)(v203 & 0xFFFFFFFF8);
              v209 = v203 & 0xFFFFFFFF8;
              if ((v203 & 1) != 0)
                v209 = *v208;
              if (!v207 || !v209)
              {
                LOBYTE(v207) = (v207 != 0) == (v209 != 0);
                goto LABEL_330;
              }
              if (*(_QWORD *)(v207 + 8) != *(_QWORD *)(v209 + 8))
                break;
              if ((v190 & 1) != 0 && v206)
              {
                v1522 = v183;
                v1580 = v202;
                v1489 = v209;
                WTF::fastFree(v190 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v209 = v1489;
                v202 = v1580;
                StatusReg = v1631;
                v183 = v1522;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v180 = 0uLL;
                v179 = v1650;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v208 = (uint64_t *)(v203 & 0xFFFFFFFF8);
              }
              v190 = *(_QWORD *)(v207 + 16);
              if ((v190 & 1) != 0)
              {
                v1475 = v208;
                v1490 = v209;
                v1581 = v202;
                v1523 = v183;
                v1073 = *(_QWORD *)(v190 & 0xFFFFFFFF8);
                if ((v190 & 2) != 0
                  || (v1074 = *(unsigned int *)((v190 & 0xFFFFFFFF8) + 8), (_DWORD)v1074 == 0x3FFFFFFF)
                  || (_DWORD)v1074 == -1)
                {
                  v1075 = 2;
                }
                else if (v1074 >> 28)
                {
                  v1231 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1231 = v1073;
                  *(_DWORD *)(v1231 + 8) = v1074;
                  v1075 = 1;
                  v1073 = v1231;
                }
                else
                {
                  v1075 = v1073;
                  v1073 = v1074 << 36;
                }
                v190 = v1073 | v1075;
                v208 = v1475;
                v209 = v1490;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1631;
                v179 = v1650;
                v180 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v183 = v1523;
                v202 = v1581;
              }
              if ((v203 & 1) != 0 && v208)
              {
                v1076 = v183;
                v1582 = v202;
                v1077 = v209;
                WTF::fastFree((unint64_t)v208, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v209 = v1077;
                v202 = v1582;
                StatusReg = v1631;
                v183 = v1076;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v180 = 0uLL;
                v179 = v1650;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v203 = *(_QWORD *)(v209 + 16);
              if ((v203 & 1) != 0)
              {
                v1552 = v202;
                v1508 = v183;
                v228 = *(_QWORD *)(v203 & 0xFFFFFFFF8);
                if ((v203 & 2) != 0
                  || (v229 = *(unsigned int *)((v203 & 0xFFFFFFFF8) + 8), (_DWORD)v229 == 0x3FFFFFFF)
                  || (_DWORD)v229 == -1)
                {
                  v230 = 2;
                }
                else if (v229 >> 28)
                {
                  v1220 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1220 = v228;
                  *(_DWORD *)(v1220 + 8) = v229;
                  v230 = 1;
                  v228 = v1220;
                }
                else
                {
                  v230 = v228;
                  v228 = v229 << 36;
                }
                v203 = v228 | v230;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1631;
                v179 = v1650;
                v180 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v183 = v1508;
                v202 = v1552;
              }
            }
          }
          LOBYTE(v207) = 0;
        }
LABEL_330:
        if ((v203 & 1) != 0)
        {
          v803 = v203 & 0xFFFFFFFF8;
          if ((v203 & 0xFFFFFFFF8) != 0)
          {
            v804 = v183;
            v1563 = v202;
            WTF::fastFree(v803, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v202 = v1563;
            StatusReg = v1631;
            v183 = v804;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v180 = 0uLL;
            v179 = v1650;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v190 & 1) != 0)
        {
          v805 = v190 & 0xFFFFFFFF8;
          if ((v190 & 0xFFFFFFFF8) != 0)
          {
            v806 = v183;
            v807 = v202;
            WTF::fastFree(v805, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v202 = v807;
            v183 = v806;
            a8 = 8064;
            StatusReg = v1631;
            v179 = v1650;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v180 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v207 & 1) != 0)
        {
          v189[2] = v177;
          if ((v181 & 1) != 0 && v202)
          {
            WTF::fastFree(v202, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1631;
            v179 = v1650;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v180 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_307;
        }
        if ((*v189 & 2) != 0 && (*v189 & 0xFFFFFFFF8) != 0)
          v191 = v189;
        v188 = (++v201 + (_DWORD)v188) & v183;
        v189 = (unint64_t *)(v182 + (v188 << 6));
        v190 = *v189;
        if (*v189 != 2)
          continue;
        break;
      }
      if (v191)
      {
        *v191 = 2;
        *(_OWORD *)(v191 + 1) = 0u;
        *(_OWORD *)(v191 + 3) = 0u;
        *(_OWORD *)(v191 + 5) = 0u;
        v191[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_300;
      }
      if ((v190 & 1) != 0 && (v190 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v190 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1631;
        v179 = v1650;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v180 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_299:
      v191 = v189;
LABEL_300:
      *v191 = v181;
      v192 = v1666;
      v193 = v1667;
      v194 = v1668;
      v191[7] = v1669;
      *(_OWORD *)(v191 + 5) = v194;
      *(_OWORD *)(v191 + 3) = v193;
      *(_OWORD *)(v191 + 1) = v192;
      v195 = *a3;
      if (*a3)
        v196 = *(_DWORD *)(v195 - 12) + 1;
      else
        v196 = 1;
      *(_DWORD *)(v195 - 12) = v196;
      v197 = *a3;
      if (*a3)
        v198 = *(_DWORD *)(v197 - 12);
      else
        v198 = 0;
      v199 = (*(_DWORD *)(v197 - 16) + v198);
      v200 = *(unsigned int *)(v197 - 4);
      if (v200 > 0x400)
      {
        if (v200 > 2 * v199)
          goto LABEL_306;
LABEL_365:
        v227 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v191);
        a8 = 8064;
        StatusReg = v1631;
        v179 = v1650;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v180 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v191 = (_QWORD *)v227;
        goto LABEL_306;
      }
      if (3 * v200 <= 4 * v199)
        goto LABEL_365;
LABEL_306:
      v191[2] = v177;
LABEL_307:
      v177 += 80;
      if (v177 >= (unint64_t)v179)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v231 = v9[4];
  if (!v9[4])
    v231 = *((_DWORD *)v9 + 28);
  v232 = ((unint64_t)v9 + v231 + 7) & 0xFFFFFFFFFFFFFFF8;
  v233 = v9[5];
  if (!v9[5])
    v233 = *((_DWORD *)v9 + 29);
  v234 = (char *)v9 + v233;
  if ((unint64_t)v234 > v232)
  {
    v235 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1632 = StatusReg;
    v1651 = (char *)v9 + v233;
    while (1)
    {
      v236 = *(_QWORD *)(v232 + 72);
      if ((v236 & 1) != 0)
      {
        v693 = *(_QWORD *)(v236 & 0xFFFFFFFF8);
        if ((v236 & 2) != 0
          || ((v694 = *(unsigned int *)((v236 & 0xFFFFFFFF8) + 8), (_DWORD)v694 != 0x3FFFFFFF)
            ? (v695 = (_DWORD)v694 == -1)
            : (v695 = 1),
              v695))
        {
          v696 = 2;
        }
        else if (v694 >> 28)
        {
          v1145 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1632;
          v234 = v1651;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v235 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1145 = v693;
          *(_DWORD *)(v1145 + 8) = v694;
          v696 = 1;
          v693 = v1145;
        }
        else
        {
          v696 = *(_QWORD *)(v236 & 0xFFFFFFFF8);
          v693 = v694 << 36;
        }
        v236 = v693 | v696;
      }
      v1669 = 0;
      v1667 = v235;
      v1668 = v235;
      v1666 = v235;
      v237 = *a3;
      if (*a3)
      {
LABEL_384:
        v238 = *(unsigned int *)(v237 - 8);
        goto LABEL_385;
      }
      v266 = *(_QWORD *)(StatusReg + 752);
      if (!v266)
        goto LABEL_2007;
      v267 = v14[521];
      if (*(_DWORD *)(v266 + 8052) <= v267)
        goto LABEL_2007;
      v268 = v266 + 8 * v267;
      v269 = v268 + 8064;
      *(_BYTE *)(v268 + 8064) = 1;
      v270 = *(unsigned int *)(v268 + 8080);
      if ((_DWORD)v270)
      {
        *(_DWORD *)(v269 + 16) = v270 - *(_DWORD *)(v269 + 20);
        v271 = *(_QWORD *)(v269 + 8) - v270;
        goto LABEL_443;
      }
      v273 = *(_QWORD *)(v269 + 40);
      v274 = *(_QWORD *)(v269 + 24);
      if (v273)
        goto LABEL_447;
      if (*(_BYTE *)(v269 + 5) != 6)
        goto LABEL_2006;
      v967 = *(unsigned int *)(v269 + 32);
      v968 = *(_DWORD *)(v269 + 36);
      if (v967 >= v968)
        goto LABEL_2006;
      *(_QWORD *)(v269 + 8 * v967 + 56) = 0;
      v969 = (unint64_t *)(v266 + 8128 + 8 * v267 + 8 * v967);
      v970 = v968 - 1 - v967;
      do
      {
        if (!v970)
        {
          *(_DWORD *)(v269 + 32) = v968;
LABEL_2006:
          *(_BYTE *)v269 = 0;
LABEL_2007:
          v271 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1632;
          v234 = v1651;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v235 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_444;
        }
        v274 += 1024;
        v972 = *v969++;
        v971 = v972;
        LODWORD(v967) = v967 + 1;
        --v970;
      }
      while (!v972);
      v273 = __rbit64(v971);
      *(_DWORD *)(v269 + 32) = v967;
      *(_QWORD *)(v269 + 24) = v274;
LABEL_447:
      v275 = __clz(v273);
      *(_QWORD *)(v269 + 40) = v273 & ~(0x8000000000000000 >> v275);
      v271 = v274 + 16 * v275;
LABEL_443:
      *(_BYTE *)v269 = 0;
LABEL_444:
      *(_QWORD *)(v271 + 16) = 2;
      v272 = v271 + 16;
      *(_OWORD *)(v272 + 8) = v235;
      *(_OWORD *)(v272 + 24) = v235;
      *(_OWORD *)(v272 + 40) = v235;
      *(_QWORD *)(v272 + 56) = 0;
      *(_QWORD *)(v272 + 64) = 2;
      *(_OWORD *)(v272 + 72) = v235;
      *(_OWORD *)(v272 + 88) = v235;
      *(_OWORD *)(v272 + 104) = v235;
      *(_QWORD *)(v272 + 120) = 0;
      *(_QWORD *)(v272 + 128) = 2;
      *(_OWORD *)(v272 + 136) = v235;
      *(_OWORD *)(v272 + 152) = v235;
      *(_OWORD *)(v272 + 168) = v235;
      *(_QWORD *)(v272 + 184) = 0;
      *(_QWORD *)(v272 + 192) = 2;
      *(_OWORD *)(v272 + 232) = v235;
      *(_OWORD *)(v272 + 216) = v235;
      *(_OWORD *)(v272 + 200) = v235;
      *(_QWORD *)(v272 + 248) = 0;
      *(_QWORD *)(v272 + 256) = 2;
      *(_OWORD *)(v272 + 280) = v235;
      *(_OWORD *)(v272 + 296) = v235;
      *(_OWORD *)(v272 + 264) = v235;
      *(_QWORD *)(v272 + 312) = 0;
      *(_QWORD *)(v272 + 320) = 2;
      *(_OWORD *)(v272 + 344) = v235;
      *(_OWORD *)(v272 + 360) = v235;
      *(_OWORD *)(v272 + 328) = v235;
      *(_QWORD *)(v272 + 376) = 0;
      *(_QWORD *)(v272 + 384) = 2;
      *(_OWORD *)(v272 + 408) = v235;
      *(_OWORD *)(v272 + 424) = v235;
      *(_OWORD *)(v272 + 392) = v235;
      *(_QWORD *)(v272 + 440) = 0;
      *(_QWORD *)(v272 + 448) = 2;
      *(_QWORD *)(v272 + 504) = 0;
      *(_OWORD *)(v272 + 472) = v235;
      *(_OWORD *)(v272 + 488) = v235;
      *(_OWORD *)(v272 + 456) = v235;
      *a3 = v272;
      *(_DWORD *)(v272 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v237 = *a3;
      if (*a3)
        goto LABEL_384;
      v238 = 0;
LABEL_385:
      if ((v236 & 2) != 0)
      {
        v241 = 0;
        goto LABEL_391;
      }
      v239 = v236;
      if ((v236 & 1) != 0)
      {
        v737 = *(_QWORD *)(v236 & 0xFFFFFFFF8);
        v738 = *(unsigned int *)((v236 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v738 == 0x3FFFFFFF || (_DWORD)v738 == -1)
        {
          v740 = 2;
        }
        else if (v738 >> 28)
        {
          v1127 = v238;
          v1128 = WTF::fastMalloc((WTF *)0x10);
          v238 = v1127;
          a8 = 8064;
          StatusReg = v1632;
          v234 = v1651;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v235 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1128 = v737;
          *(_DWORD *)(v1128 + 8) = v738;
          v740 = 1;
          v737 = v1128;
        }
        else
        {
          v740 = *(_QWORD *)(v236 & 0xFFFFFFFF8);
          v737 = v738 << 36;
        }
        v239 = v737 | v740;
      }
      v240 = 2;
      while (2)
      {
        if ((v239 & 2) != 0)
        {
          v241 = v240 - 1;
          v276 = (uint64_t *)(v239 & 0xFFFFFFFF8);
          if ((v239 & 1) == 0)
          {
            if (!v276)
              goto LABEL_391;
            v277 = 1;
            v242 = (uint64_t)v276;
            goto LABEL_452;
          }
        }
        else
        {
          if ((v239 & 1) == 0)
          {
            v241 = v240 + (v239 >> 36);
            v242 = v239 & 0xFFFFFFFF8;
            if ((v239 & 0xFFFFFFFF8) == 0)
              goto LABEL_391;
            v277 = 1;
            v276 = (uint64_t *)v242;
            goto LABEL_452;
          }
          v276 = (uint64_t *)(v239 & 0xFFFFFFFF8);
          v241 = *(_DWORD *)((v239 & 0xFFFFFFFF8) + 8) + v240;
        }
        v242 = *v276;
        if (*v276)
        {
          v277 = 0;
LABEL_452:
          v278 = *(_QWORD *)(v242 + 8);
          if ((v277 & 1) == 0 && v276)
          {
            v1025 = v238;
            WTF::fastFree((unint64_t)v276, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v238 = v1025;
            a8 = 8064;
            StatusReg = v1632;
            v234 = v1651;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v235 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v279 = (~(v278 << 32) + v278) ^ ((unint64_t)(~(v278 << 32) + v278) >> 22);
          v280 = 9 * ((v279 + ~(v279 << 13)) ^ ((v279 + ~(v279 << 13)) >> 8));
          v281 = (v280 ^ (v280 >> 15)) + ~((v280 ^ (v280 >> 15)) << 27);
          v240 = v241 + ((v281 >> 31) ^ v281);
          v239 = *(_QWORD *)(v242 + 16);
          if ((v239 & 1) != 0)
          {
            v1026 = *(_QWORD *)(v239 & 0xFFFFFFFF8);
            if ((v239 & 2) != 0
              || (v1027 = *(unsigned int *)((v239 & 0xFFFFFFFF8) + 8), (_DWORD)v1027 == 0x3FFFFFFF)
              || (_DWORD)v1027 == -1)
            {
              v1028 = 2;
            }
            else if (v1027 >> 28)
            {
              v1202 = v238;
              v1203 = WTF::fastMalloc((WTF *)0x10);
              v238 = v1202;
              a8 = 8064;
              StatusReg = v1632;
              v234 = v1651;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v235 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1203 = v1026;
              *(_DWORD *)(v1203 + 8) = v1027;
              v1028 = 1;
              v1026 = v1203;
            }
            else
            {
              v1028 = *(_QWORD *)(v239 & 0xFFFFFFFF8);
              v1026 = v1027 << 36;
            }
            v239 = v1026 | v1028;
          }
          continue;
        }
        break;
      }
      if (v276)
      {
        v769 = v238;
        WTF::fastFree((unint64_t)v276, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v238 = v769;
        a8 = 8064;
        StatusReg = v1632;
        v234 = v1651;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v235 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_391:
      v243 = v241 & v238;
      v244 = (unint64_t *)(v237 + (v243 << 6));
      v245 = *v244;
      if (*v244 == 2)
        goto LABEL_392;
      v256 = 0;
      v246 = 0;
      v257 = v236 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v245 & 2) != 0)
        {
          v265 = (uint64_t *)(v245 & 0xFFFFFFFF8);
          if ((v245 & 1) == 0)
          {
            if (!v265)
              break;
            goto LABEL_405;
          }
          v884 = *v265;
          if (!*v265)
            break;
LABEL_1505:
          v888 = 2;
          goto LABEL_1506;
        }
        if ((v245 & 1) == 0)
          goto LABEL_405;
        v884 = *(_QWORD *)(v245 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v245 & 0xFFFFFFFF8) + 8) == -1 && v884 == 0)
          break;
        v886 = *(unsigned int *)((v245 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v886 == 0x3FFFFFFF || (_DWORD)v886 == -1)
          goto LABEL_1505;
        if (v886 >> 28)
        {
          v1171 = v238;
          v1620 = v257;
          v1172 = WTF::fastMalloc((WTF *)0x10);
          v257 = v1620;
          StatusReg = v1632;
          v238 = v1171;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v235 = 0uLL;
          v234 = v1651;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1172 = v884;
          *(_DWORD *)(v1172 + 8) = v886;
          v888 = 1;
          v884 = v1172;
        }
        else
        {
          v888 = *(_QWORD *)(v245 & 0xFFFFFFFF8);
          v884 = v886 << 36;
        }
LABEL_1506:
        v245 = v884 | v888;
LABEL_405:
        v258 = v236;
        if ((v236 & 1) != 0)
        {
          v808 = *(_QWORD *)v257;
          if ((v236 & 2) != 0 || (v809 = *(unsigned int *)(v257 + 8), (_DWORD)v809 == 0x3FFFFFFF) || (_DWORD)v809 == -1)
          {
            v810 = 2;
          }
          else if (v809 >> 28)
          {
            v1542 = v238;
            v1609 = v257;
            v1156 = WTF::fastMalloc((WTF *)0x10);
            v257 = v1609;
            StatusReg = v1632;
            v238 = v1542;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v235 = 0uLL;
            v234 = v1651;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1156 = v808;
            *(_DWORD *)(v1156 + 8) = v809;
            v810 = 1;
            v808 = v1156;
          }
          else
          {
            v810 = *(_QWORD *)v257;
            v808 = v809 << 36;
          }
          v258 = v808 | v810;
        }
        if ((v245 & 2) != 0)
        {
          v262 = (v258 >> 1) & 1;
        }
        else
        {
          if ((v258 & 2) == 0)
          {
            while (1)
            {
              if ((v245 & 2) != 0)
              {
                LODWORD(v259) = -1;
              }
              else if ((v245 & 1) != 0)
              {
                LODWORD(v259) = *(_DWORD *)((v245 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v259 = v245 >> 36;
              }
              if ((v258 & 2) != 0)
              {
                LODWORD(v260) = -1;
              }
              else if ((v258 & 1) != 0)
              {
                LODWORD(v260) = *(_DWORD *)((v258 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v260 = v258 >> 36;
              }
              if ((_DWORD)v259 != (_DWORD)v260)
                break;
              v261 = (uint64_t *)(v245 & 0xFFFFFFFF8);
              v262 = v245 & 0xFFFFFFFF8;
              if ((v245 & 1) != 0)
                v262 = *v261;
              v263 = (uint64_t *)(v258 & 0xFFFFFFFF8);
              v264 = v258 & 0xFFFFFFFF8;
              if ((v258 & 1) != 0)
                v264 = *v263;
              if (!v262 || !v264)
              {
                LOBYTE(v262) = (v262 != 0) == (v264 != 0);
                goto LABEL_423;
              }
              if (*(_QWORD *)(v262 + 8) != *(_QWORD *)(v264 + 8))
                break;
              if ((v245 & 1) != 0 && v261)
              {
                v1524 = v238;
                v1583 = v257;
                v1491 = v264;
                WTF::fastFree(v245 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v264 = v1491;
                v257 = v1583;
                StatusReg = v1632;
                v238 = v1524;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v235 = 0uLL;
                v234 = v1651;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v263 = (uint64_t *)(v258 & 0xFFFFFFFF8);
              }
              v245 = *(_QWORD *)(v262 + 16);
              if ((v245 & 1) != 0)
              {
                v1476 = v263;
                v1492 = v264;
                v1584 = v257;
                v1525 = v238;
                v1078 = *(_QWORD *)(v245 & 0xFFFFFFFF8);
                if ((v245 & 2) != 0
                  || (v1079 = *(unsigned int *)((v245 & 0xFFFFFFFF8) + 8), (_DWORD)v1079 == 0x3FFFFFFF)
                  || (_DWORD)v1079 == -1)
                {
                  v1080 = 2;
                }
                else if (v1079 >> 28)
                {
                  v1232 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1232 = v1078;
                  *(_DWORD *)(v1232 + 8) = v1079;
                  v1080 = 1;
                  v1078 = v1232;
                }
                else
                {
                  v1080 = v1078;
                  v1078 = v1079 << 36;
                }
                v245 = v1078 | v1080;
                v263 = v1476;
                v264 = v1492;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1632;
                v234 = v1651;
                v235 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v238 = v1525;
                v257 = v1584;
              }
              if ((v258 & 1) != 0 && v263)
              {
                v1081 = v238;
                v1585 = v257;
                v1082 = v264;
                WTF::fastFree((unint64_t)v263, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v264 = v1082;
                v257 = v1585;
                StatusReg = v1632;
                v238 = v1081;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v235 = 0uLL;
                v234 = v1651;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v258 = *(_QWORD *)(v264 + 16);
              if ((v258 & 1) != 0)
              {
                v1553 = v257;
                v1509 = v238;
                v283 = *(_QWORD *)(v258 & 0xFFFFFFFF8);
                if ((v258 & 2) != 0
                  || (v284 = *(unsigned int *)((v258 & 0xFFFFFFFF8) + 8), (_DWORD)v284 == 0x3FFFFFFF)
                  || (_DWORD)v284 == -1)
                {
                  v285 = 2;
                }
                else if (v284 >> 28)
                {
                  v1221 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1221 = v283;
                  *(_DWORD *)(v1221 + 8) = v284;
                  v285 = 1;
                  v283 = v1221;
                }
                else
                {
                  v285 = v283;
                  v283 = v284 << 36;
                }
                v258 = v283 | v285;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1632;
                v234 = v1651;
                v235 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v238 = v1509;
                v257 = v1553;
              }
            }
          }
          LOBYTE(v262) = 0;
        }
LABEL_423:
        if ((v258 & 1) != 0)
        {
          v811 = v258 & 0xFFFFFFFF8;
          if ((v258 & 0xFFFFFFFF8) != 0)
          {
            v812 = v238;
            v1564 = v257;
            WTF::fastFree(v811, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v257 = v1564;
            StatusReg = v1632;
            v238 = v812;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v235 = 0uLL;
            v234 = v1651;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v245 & 1) != 0)
        {
          v813 = v245 & 0xFFFFFFFF8;
          if ((v245 & 0xFFFFFFFF8) != 0)
          {
            v814 = v238;
            v815 = v257;
            WTF::fastFree(v813, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v257 = v815;
            v238 = v814;
            a8 = 8064;
            StatusReg = v1632;
            v234 = v1651;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v235 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v262 & 1) != 0)
        {
          v244[2] = v232;
          if ((v236 & 1) != 0 && v257)
          {
            WTF::fastFree(v257, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1632;
            v234 = v1651;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v235 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_400;
        }
        if ((*v244 & 2) != 0 && (*v244 & 0xFFFFFFFF8) != 0)
          v246 = v244;
        v243 = (++v256 + (_DWORD)v243) & v238;
        v244 = (unint64_t *)(v237 + (v243 << 6));
        v245 = *v244;
        if (*v244 != 2)
          continue;
        break;
      }
      if (v246)
      {
        *v246 = 2;
        *(_OWORD *)(v246 + 1) = 0u;
        *(_OWORD *)(v246 + 3) = 0u;
        *(_OWORD *)(v246 + 5) = 0u;
        v246[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_393;
      }
      if ((v245 & 1) != 0 && (v245 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v245 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1632;
        v234 = v1651;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v235 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_392:
      v246 = v244;
LABEL_393:
      *v246 = v236;
      v247 = v1666;
      v248 = v1667;
      v249 = v1668;
      v246[7] = v1669;
      *(_OWORD *)(v246 + 5) = v249;
      *(_OWORD *)(v246 + 3) = v248;
      *(_OWORD *)(v246 + 1) = v247;
      v250 = *a3;
      if (*a3)
        v251 = *(_DWORD *)(v250 - 12) + 1;
      else
        v251 = 1;
      *(_DWORD *)(v250 - 12) = v251;
      v252 = *a3;
      if (*a3)
        v253 = *(_DWORD *)(v252 - 12);
      else
        v253 = 0;
      v254 = (*(_DWORD *)(v252 - 16) + v253);
      v255 = *(unsigned int *)(v252 - 4);
      if (v255 > 0x400)
      {
        if (v255 > 2 * v254)
          goto LABEL_399;
LABEL_458:
        v282 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v246);
        a8 = 8064;
        StatusReg = v1632;
        v234 = v1651;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v235 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v246 = (_QWORD *)v282;
        goto LABEL_399;
      }
      if (3 * v255 <= 4 * v254)
        goto LABEL_458;
LABEL_399:
      v246[2] = v232;
LABEL_400:
      v232 += 112;
      if (v232 >= (unint64_t)v234)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v286 = v9[2];
  if (!v9[2])
    v286 = *((_DWORD *)v9 + 26);
  v287 = ((unint64_t)v9 + v286 + 7) & 0xFFFFFFFFFFFFFFF8;
  v288 = v9[3];
  if (!v9[3])
    v288 = *((_DWORD *)v9 + 27);
  v289 = (char *)v9 + v288;
  if ((unint64_t)v289 > v287)
  {
    v290 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1633 = StatusReg;
    v1652 = (char *)v9 + v288;
    while (1)
    {
      v291 = *(_QWORD *)(v287 + 72);
      if ((v291 & 1) != 0)
      {
        v697 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
        if ((v291 & 2) != 0
          || ((v698 = *(unsigned int *)((v291 & 0xFFFFFFFF8) + 8), (_DWORD)v698 != 0x3FFFFFFF)
            ? (v699 = (_DWORD)v698 == -1)
            : (v699 = 1),
              v699))
        {
          v700 = 2;
        }
        else if (v698 >> 28)
        {
          v1146 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1633;
          v289 = v1652;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v290 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1146 = v697;
          *(_DWORD *)(v1146 + 8) = v698;
          v700 = 1;
          v697 = v1146;
        }
        else
        {
          v700 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
          v697 = v698 << 36;
        }
        v291 = v697 | v700;
      }
      v1669 = 0;
      v1667 = v290;
      v1668 = v290;
      v1666 = v290;
      v292 = *a3;
      if (*a3)
      {
LABEL_477:
        v293 = *(unsigned int *)(v292 - 8);
        goto LABEL_478;
      }
      v321 = *(_QWORD *)(StatusReg + 752);
      if (!v321)
        goto LABEL_2010;
      v322 = v14[521];
      if (*(_DWORD *)(v321 + 8052) <= v322)
        goto LABEL_2010;
      v323 = v321 + 8 * v322;
      v324 = v323 + 8064;
      *(_BYTE *)(v323 + 8064) = 1;
      v325 = *(unsigned int *)(v323 + 8080);
      if ((_DWORD)v325)
      {
        *(_DWORD *)(v324 + 16) = v325 - *(_DWORD *)(v324 + 20);
        v326 = *(_QWORD *)(v324 + 8) - v325;
        goto LABEL_536;
      }
      v328 = *(_QWORD *)(v324 + 40);
      v329 = *(_QWORD *)(v324 + 24);
      if (v328)
        goto LABEL_540;
      if (*(_BYTE *)(v324 + 5) != 6)
        goto LABEL_2009;
      v973 = *(unsigned int *)(v324 + 32);
      v974 = *(_DWORD *)(v324 + 36);
      if (v973 >= v974)
        goto LABEL_2009;
      *(_QWORD *)(v324 + 8 * v973 + 56) = 0;
      v975 = (unint64_t *)(v321 + 8128 + 8 * v322 + 8 * v973);
      v976 = v974 - 1 - v973;
      do
      {
        if (!v976)
        {
          *(_DWORD *)(v324 + 32) = v974;
LABEL_2009:
          *(_BYTE *)v324 = 0;
LABEL_2010:
          v326 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1633;
          v289 = v1652;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v290 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_537;
        }
        v329 += 1024;
        v978 = *v975++;
        v977 = v978;
        LODWORD(v973) = v973 + 1;
        --v976;
      }
      while (!v978);
      v328 = __rbit64(v977);
      *(_DWORD *)(v324 + 32) = v973;
      *(_QWORD *)(v324 + 24) = v329;
LABEL_540:
      v330 = __clz(v328);
      *(_QWORD *)(v324 + 40) = v328 & ~(0x8000000000000000 >> v330);
      v326 = v329 + 16 * v330;
LABEL_536:
      *(_BYTE *)v324 = 0;
LABEL_537:
      *(_QWORD *)(v326 + 16) = 2;
      v327 = v326 + 16;
      *(_OWORD *)(v327 + 8) = v290;
      *(_OWORD *)(v327 + 24) = v290;
      *(_OWORD *)(v327 + 40) = v290;
      *(_QWORD *)(v327 + 56) = 0;
      *(_QWORD *)(v327 + 64) = 2;
      *(_OWORD *)(v327 + 72) = v290;
      *(_OWORD *)(v327 + 88) = v290;
      *(_OWORD *)(v327 + 104) = v290;
      *(_QWORD *)(v327 + 120) = 0;
      *(_QWORD *)(v327 + 128) = 2;
      *(_OWORD *)(v327 + 136) = v290;
      *(_OWORD *)(v327 + 152) = v290;
      *(_OWORD *)(v327 + 168) = v290;
      *(_QWORD *)(v327 + 184) = 0;
      *(_QWORD *)(v327 + 192) = 2;
      *(_OWORD *)(v327 + 232) = v290;
      *(_OWORD *)(v327 + 216) = v290;
      *(_OWORD *)(v327 + 200) = v290;
      *(_QWORD *)(v327 + 248) = 0;
      *(_QWORD *)(v327 + 256) = 2;
      *(_OWORD *)(v327 + 280) = v290;
      *(_OWORD *)(v327 + 296) = v290;
      *(_OWORD *)(v327 + 264) = v290;
      *(_QWORD *)(v327 + 312) = 0;
      *(_QWORD *)(v327 + 320) = 2;
      *(_OWORD *)(v327 + 344) = v290;
      *(_OWORD *)(v327 + 360) = v290;
      *(_OWORD *)(v327 + 328) = v290;
      *(_QWORD *)(v327 + 376) = 0;
      *(_QWORD *)(v327 + 384) = 2;
      *(_OWORD *)(v327 + 408) = v290;
      *(_OWORD *)(v327 + 424) = v290;
      *(_OWORD *)(v327 + 392) = v290;
      *(_QWORD *)(v327 + 440) = 0;
      *(_QWORD *)(v327 + 448) = 2;
      *(_QWORD *)(v327 + 504) = 0;
      *(_OWORD *)(v327 + 472) = v290;
      *(_OWORD *)(v327 + 488) = v290;
      *(_OWORD *)(v327 + 456) = v290;
      *a3 = v327;
      *(_DWORD *)(v327 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v292 = *a3;
      if (*a3)
        goto LABEL_477;
      v293 = 0;
LABEL_478:
      if ((v291 & 2) != 0)
      {
        v296 = 0;
        goto LABEL_484;
      }
      v294 = v291;
      if ((v291 & 1) != 0)
      {
        v741 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
        v742 = *(unsigned int *)((v291 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v742 == 0x3FFFFFFF || (_DWORD)v742 == -1)
        {
          v744 = 2;
        }
        else if (v742 >> 28)
        {
          v1129 = v293;
          v1130 = WTF::fastMalloc((WTF *)0x10);
          v293 = v1129;
          a8 = 8064;
          StatusReg = v1633;
          v289 = v1652;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v290 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1130 = v741;
          *(_DWORD *)(v1130 + 8) = v742;
          v744 = 1;
          v741 = v1130;
        }
        else
        {
          v744 = *(_QWORD *)(v291 & 0xFFFFFFFF8);
          v741 = v742 << 36;
        }
        v294 = v741 | v744;
      }
      v295 = 2;
      while (2)
      {
        if ((v294 & 2) != 0)
        {
          v296 = v295 - 1;
          v331 = (uint64_t *)(v294 & 0xFFFFFFFF8);
          if ((v294 & 1) == 0)
          {
            if (!v331)
              goto LABEL_484;
            v332 = 1;
            v297 = (uint64_t)v331;
            goto LABEL_545;
          }
        }
        else
        {
          if ((v294 & 1) == 0)
          {
            v296 = v295 + (v294 >> 36);
            v297 = v294 & 0xFFFFFFFF8;
            if ((v294 & 0xFFFFFFFF8) == 0)
              goto LABEL_484;
            v332 = 1;
            v331 = (uint64_t *)v297;
            goto LABEL_545;
          }
          v331 = (uint64_t *)(v294 & 0xFFFFFFFF8);
          v296 = *(_DWORD *)((v294 & 0xFFFFFFFF8) + 8) + v295;
        }
        v297 = *v331;
        if (*v331)
        {
          v332 = 0;
LABEL_545:
          v333 = *(_QWORD *)(v297 + 8);
          if ((v332 & 1) == 0 && v331)
          {
            v1029 = v293;
            WTF::fastFree((unint64_t)v331, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v293 = v1029;
            a8 = 8064;
            StatusReg = v1633;
            v289 = v1652;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v290 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v334 = (~(v333 << 32) + v333) ^ ((unint64_t)(~(v333 << 32) + v333) >> 22);
          v335 = 9 * ((v334 + ~(v334 << 13)) ^ ((v334 + ~(v334 << 13)) >> 8));
          v336 = (v335 ^ (v335 >> 15)) + ~((v335 ^ (v335 >> 15)) << 27);
          v295 = v296 + ((v336 >> 31) ^ v336);
          v294 = *(_QWORD *)(v297 + 16);
          if ((v294 & 1) != 0)
          {
            v1030 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
            if ((v294 & 2) != 0
              || (v1031 = *(unsigned int *)((v294 & 0xFFFFFFFF8) + 8), (_DWORD)v1031 == 0x3FFFFFFF)
              || (_DWORD)v1031 == -1)
            {
              v1032 = 2;
            }
            else if (v1031 >> 28)
            {
              v1204 = v293;
              v1205 = WTF::fastMalloc((WTF *)0x10);
              v293 = v1204;
              a8 = 8064;
              StatusReg = v1633;
              v289 = v1652;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v290 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1205 = v1030;
              *(_DWORD *)(v1205 + 8) = v1031;
              v1032 = 1;
              v1030 = v1205;
            }
            else
            {
              v1032 = *(_QWORD *)(v294 & 0xFFFFFFFF8);
              v1030 = v1031 << 36;
            }
            v294 = v1030 | v1032;
          }
          continue;
        }
        break;
      }
      if (v331)
      {
        v770 = v293;
        WTF::fastFree((unint64_t)v331, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v293 = v770;
        a8 = 8064;
        StatusReg = v1633;
        v289 = v1652;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v290 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_484:
      v298 = v296 & v293;
      v299 = (unint64_t *)(v292 + (v298 << 6));
      v300 = *v299;
      if (*v299 == 2)
        goto LABEL_485;
      v311 = 0;
      v301 = 0;
      v312 = v291 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v300 & 2) != 0)
        {
          v320 = (uint64_t *)(v300 & 0xFFFFFFFF8);
          if ((v300 & 1) == 0)
          {
            if (!v320)
              break;
            goto LABEL_498;
          }
          v889 = *v320;
          if (!*v320)
            break;
LABEL_1516:
          v893 = 2;
          goto LABEL_1517;
        }
        if ((v300 & 1) == 0)
          goto LABEL_498;
        v889 = *(_QWORD *)(v300 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v300 & 0xFFFFFFFF8) + 8) == -1 && v889 == 0)
          break;
        v891 = *(unsigned int *)((v300 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v891 == 0x3FFFFFFF || (_DWORD)v891 == -1)
          goto LABEL_1516;
        if (v891 >> 28)
        {
          v1173 = v293;
          v1621 = v312;
          v1174 = WTF::fastMalloc((WTF *)0x10);
          v312 = v1621;
          StatusReg = v1633;
          v293 = v1173;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v290 = 0uLL;
          v289 = v1652;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1174 = v889;
          *(_DWORD *)(v1174 + 8) = v891;
          v893 = 1;
          v889 = v1174;
        }
        else
        {
          v893 = *(_QWORD *)(v300 & 0xFFFFFFFF8);
          v889 = v891 << 36;
        }
LABEL_1517:
        v300 = v889 | v893;
LABEL_498:
        v313 = v291;
        if ((v291 & 1) != 0)
        {
          v816 = *(_QWORD *)v312;
          if ((v291 & 2) != 0 || (v817 = *(unsigned int *)(v312 + 8), (_DWORD)v817 == 0x3FFFFFFF) || (_DWORD)v817 == -1)
          {
            v818 = 2;
          }
          else if (v817 >> 28)
          {
            v1543 = v293;
            v1610 = v312;
            v1157 = WTF::fastMalloc((WTF *)0x10);
            v312 = v1610;
            StatusReg = v1633;
            v293 = v1543;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v290 = 0uLL;
            v289 = v1652;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1157 = v816;
            *(_DWORD *)(v1157 + 8) = v817;
            v818 = 1;
            v816 = v1157;
          }
          else
          {
            v818 = *(_QWORD *)v312;
            v816 = v817 << 36;
          }
          v313 = v816 | v818;
        }
        if ((v300 & 2) != 0)
        {
          v317 = (v313 >> 1) & 1;
        }
        else
        {
          if ((v313 & 2) == 0)
          {
            while (1)
            {
              if ((v300 & 2) != 0)
              {
                LODWORD(v314) = -1;
              }
              else if ((v300 & 1) != 0)
              {
                LODWORD(v314) = *(_DWORD *)((v300 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v314 = v300 >> 36;
              }
              if ((v313 & 2) != 0)
              {
                LODWORD(v315) = -1;
              }
              else if ((v313 & 1) != 0)
              {
                LODWORD(v315) = *(_DWORD *)((v313 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v315 = v313 >> 36;
              }
              if ((_DWORD)v314 != (_DWORD)v315)
                break;
              v316 = (uint64_t *)(v300 & 0xFFFFFFFF8);
              v317 = v300 & 0xFFFFFFFF8;
              if ((v300 & 1) != 0)
                v317 = *v316;
              v318 = (uint64_t *)(v313 & 0xFFFFFFFF8);
              v319 = v313 & 0xFFFFFFFF8;
              if ((v313 & 1) != 0)
                v319 = *v318;
              if (!v317 || !v319)
              {
                LOBYTE(v317) = (v317 != 0) == (v319 != 0);
                goto LABEL_516;
              }
              if (*(_QWORD *)(v317 + 8) != *(_QWORD *)(v319 + 8))
                break;
              if ((v300 & 1) != 0 && v316)
              {
                v1526 = v293;
                v1586 = v312;
                v1493 = v319;
                WTF::fastFree(v300 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v319 = v1493;
                v312 = v1586;
                StatusReg = v1633;
                v293 = v1526;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v290 = 0uLL;
                v289 = v1652;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v318 = (uint64_t *)(v313 & 0xFFFFFFFF8);
              }
              v300 = *(_QWORD *)(v317 + 16);
              if ((v300 & 1) != 0)
              {
                v1477 = v318;
                v1494 = v319;
                v1587 = v312;
                v1527 = v293;
                v1083 = *(_QWORD *)(v300 & 0xFFFFFFFF8);
                if ((v300 & 2) != 0
                  || (v1084 = *(unsigned int *)((v300 & 0xFFFFFFFF8) + 8), (_DWORD)v1084 == 0x3FFFFFFF)
                  || (_DWORD)v1084 == -1)
                {
                  v1085 = 2;
                }
                else if (v1084 >> 28)
                {
                  v1233 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1233 = v1083;
                  *(_DWORD *)(v1233 + 8) = v1084;
                  v1085 = 1;
                  v1083 = v1233;
                }
                else
                {
                  v1085 = v1083;
                  v1083 = v1084 << 36;
                }
                v300 = v1083 | v1085;
                v318 = v1477;
                v319 = v1494;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1633;
                v289 = v1652;
                v290 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v293 = v1527;
                v312 = v1587;
              }
              if ((v313 & 1) != 0 && v318)
              {
                v1086 = v293;
                v1588 = v312;
                v1087 = v319;
                WTF::fastFree((unint64_t)v318, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v319 = v1087;
                v312 = v1588;
                StatusReg = v1633;
                v293 = v1086;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v290 = 0uLL;
                v289 = v1652;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v313 = *(_QWORD *)(v319 + 16);
              if ((v313 & 1) != 0)
              {
                v1554 = v312;
                v1510 = v293;
                v338 = *(_QWORD *)(v313 & 0xFFFFFFFF8);
                if ((v313 & 2) != 0
                  || (v339 = *(unsigned int *)((v313 & 0xFFFFFFFF8) + 8), (_DWORD)v339 == 0x3FFFFFFF)
                  || (_DWORD)v339 == -1)
                {
                  v340 = 2;
                }
                else if (v339 >> 28)
                {
                  v1222 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1222 = v338;
                  *(_DWORD *)(v1222 + 8) = v339;
                  v340 = 1;
                  v338 = v1222;
                }
                else
                {
                  v340 = v338;
                  v338 = v339 << 36;
                }
                v313 = v338 | v340;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1633;
                v289 = v1652;
                v290 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v293 = v1510;
                v312 = v1554;
              }
            }
          }
          LOBYTE(v317) = 0;
        }
LABEL_516:
        if ((v313 & 1) != 0)
        {
          v819 = v313 & 0xFFFFFFFF8;
          if ((v313 & 0xFFFFFFFF8) != 0)
          {
            v820 = v293;
            v1565 = v312;
            WTF::fastFree(v819, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v312 = v1565;
            StatusReg = v1633;
            v293 = v820;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v290 = 0uLL;
            v289 = v1652;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v300 & 1) != 0)
        {
          v821 = v300 & 0xFFFFFFFF8;
          if ((v300 & 0xFFFFFFFF8) != 0)
          {
            v822 = v293;
            v823 = v312;
            WTF::fastFree(v821, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v312 = v823;
            v293 = v822;
            a8 = 8064;
            StatusReg = v1633;
            v289 = v1652;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v290 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v317 & 1) != 0)
        {
          v299[2] = v287;
          if ((v291 & 1) != 0 && v312)
          {
            WTF::fastFree(v312, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1633;
            v289 = v1652;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v290 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_493;
        }
        if ((*v299 & 2) != 0 && (*v299 & 0xFFFFFFFF8) != 0)
          v301 = v299;
        v298 = (++v311 + (_DWORD)v298) & v293;
        v299 = (unint64_t *)(v292 + (v298 << 6));
        v300 = *v299;
        if (*v299 != 2)
          continue;
        break;
      }
      if (v301)
      {
        *v301 = 2;
        *(_OWORD *)(v301 + 1) = 0u;
        *(_OWORD *)(v301 + 3) = 0u;
        *(_OWORD *)(v301 + 5) = 0u;
        v301[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_486;
      }
      if ((v300 & 1) != 0 && (v300 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v300 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1633;
        v289 = v1652;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v290 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_485:
      v301 = v299;
LABEL_486:
      *v301 = v291;
      v302 = v1666;
      v303 = v1667;
      v304 = v1668;
      v301[7] = v1669;
      *(_OWORD *)(v301 + 5) = v304;
      *(_OWORD *)(v301 + 3) = v303;
      *(_OWORD *)(v301 + 1) = v302;
      v305 = *a3;
      if (*a3)
        v306 = *(_DWORD *)(v305 - 12) + 1;
      else
        v306 = 1;
      *(_DWORD *)(v305 - 12) = v306;
      v307 = *a3;
      if (*a3)
        v308 = *(_DWORD *)(v307 - 12);
      else
        v308 = 0;
      v309 = (*(_DWORD *)(v307 - 16) + v308);
      v310 = *(unsigned int *)(v307 - 4);
      if (v310 > 0x400)
      {
        if (v310 > 2 * v309)
          goto LABEL_492;
LABEL_551:
        v337 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v301);
        a8 = 8064;
        StatusReg = v1633;
        v289 = v1652;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v290 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v301 = (_QWORD *)v337;
        goto LABEL_492;
      }
      if (3 * v310 <= 4 * v309)
        goto LABEL_551;
LABEL_492:
      v301[2] = v287;
LABEL_493:
      v287 += 128;
      if (v287 >= (unint64_t)v289)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v341 = v9[1];
  if (!v9[1])
    v341 = *((_DWORD *)v9 + 25);
  v342 = ((unint64_t)v9 + v341 + 7) & 0xFFFFFFFFFFFFFFF8;
  v343 = v9[2];
  if (!v9[2])
    v343 = *((_DWORD *)v9 + 26);
  v344 = (char *)v9 + v343;
  if ((unint64_t)v344 > v342)
  {
    v345 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1634 = StatusReg;
    v1653 = (char *)v9 + v343;
    while (1)
    {
      v346 = *(_QWORD *)(v342 + 72);
      if ((v346 & 1) != 0)
      {
        v701 = *(_QWORD *)(v346 & 0xFFFFFFFF8);
        if ((v346 & 2) != 0
          || ((v702 = *(unsigned int *)((v346 & 0xFFFFFFFF8) + 8), (_DWORD)v702 != 0x3FFFFFFF)
            ? (v703 = (_DWORD)v702 == -1)
            : (v703 = 1),
              v703))
        {
          v704 = 2;
        }
        else if (v702 >> 28)
        {
          v1147 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1634;
          v344 = v1653;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v345 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1147 = v701;
          *(_DWORD *)(v1147 + 8) = v702;
          v704 = 1;
          v701 = v1147;
        }
        else
        {
          v704 = *(_QWORD *)(v346 & 0xFFFFFFFF8);
          v701 = v702 << 36;
        }
        v346 = v701 | v704;
      }
      v1669 = 0;
      v1667 = v345;
      v1668 = v345;
      v1666 = v345;
      v347 = *a3;
      if (*a3)
      {
LABEL_570:
        v348 = *(unsigned int *)(v347 - 8);
        goto LABEL_571;
      }
      v376 = *(_QWORD *)(StatusReg + 752);
      if (!v376)
        goto LABEL_2013;
      v377 = v14[521];
      if (*(_DWORD *)(v376 + 8052) <= v377)
        goto LABEL_2013;
      v378 = v376 + 8 * v377;
      v379 = v378 + 8064;
      *(_BYTE *)(v378 + 8064) = 1;
      v380 = *(unsigned int *)(v378 + 8080);
      if ((_DWORD)v380)
      {
        *(_DWORD *)(v379 + 16) = v380 - *(_DWORD *)(v379 + 20);
        v381 = *(_QWORD *)(v379 + 8) - v380;
        goto LABEL_629;
      }
      v383 = *(_QWORD *)(v379 + 40);
      v384 = *(_QWORD *)(v379 + 24);
      if (v383)
        goto LABEL_633;
      if (*(_BYTE *)(v379 + 5) != 6)
        goto LABEL_2012;
      v979 = *(unsigned int *)(v379 + 32);
      v980 = *(_DWORD *)(v379 + 36);
      if (v979 >= v980)
        goto LABEL_2012;
      *(_QWORD *)(v379 + 8 * v979 + 56) = 0;
      v981 = (unint64_t *)(v376 + 8128 + 8 * v377 + 8 * v979);
      v982 = v980 - 1 - v979;
      do
      {
        if (!v982)
        {
          *(_DWORD *)(v379 + 32) = v980;
LABEL_2012:
          *(_BYTE *)v379 = 0;
LABEL_2013:
          v381 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1634;
          v344 = v1653;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v345 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_630;
        }
        v384 += 1024;
        v984 = *v981++;
        v983 = v984;
        LODWORD(v979) = v979 + 1;
        --v982;
      }
      while (!v984);
      v383 = __rbit64(v983);
      *(_DWORD *)(v379 + 32) = v979;
      *(_QWORD *)(v379 + 24) = v384;
LABEL_633:
      v385 = __clz(v383);
      *(_QWORD *)(v379 + 40) = v383 & ~(0x8000000000000000 >> v385);
      v381 = v384 + 16 * v385;
LABEL_629:
      *(_BYTE *)v379 = 0;
LABEL_630:
      *(_QWORD *)(v381 + 16) = 2;
      v382 = v381 + 16;
      *(_OWORD *)(v382 + 8) = v345;
      *(_OWORD *)(v382 + 24) = v345;
      *(_OWORD *)(v382 + 40) = v345;
      *(_QWORD *)(v382 + 56) = 0;
      *(_QWORD *)(v382 + 64) = 2;
      *(_OWORD *)(v382 + 72) = v345;
      *(_OWORD *)(v382 + 88) = v345;
      *(_OWORD *)(v382 + 104) = v345;
      *(_QWORD *)(v382 + 120) = 0;
      *(_QWORD *)(v382 + 128) = 2;
      *(_OWORD *)(v382 + 136) = v345;
      *(_OWORD *)(v382 + 152) = v345;
      *(_OWORD *)(v382 + 168) = v345;
      *(_QWORD *)(v382 + 184) = 0;
      *(_QWORD *)(v382 + 192) = 2;
      *(_OWORD *)(v382 + 232) = v345;
      *(_OWORD *)(v382 + 216) = v345;
      *(_OWORD *)(v382 + 200) = v345;
      *(_QWORD *)(v382 + 248) = 0;
      *(_QWORD *)(v382 + 256) = 2;
      *(_OWORD *)(v382 + 280) = v345;
      *(_OWORD *)(v382 + 296) = v345;
      *(_OWORD *)(v382 + 264) = v345;
      *(_QWORD *)(v382 + 312) = 0;
      *(_QWORD *)(v382 + 320) = 2;
      *(_OWORD *)(v382 + 344) = v345;
      *(_OWORD *)(v382 + 360) = v345;
      *(_OWORD *)(v382 + 328) = v345;
      *(_QWORD *)(v382 + 376) = 0;
      *(_QWORD *)(v382 + 384) = 2;
      *(_OWORD *)(v382 + 408) = v345;
      *(_OWORD *)(v382 + 424) = v345;
      *(_OWORD *)(v382 + 392) = v345;
      *(_QWORD *)(v382 + 440) = 0;
      *(_QWORD *)(v382 + 448) = 2;
      *(_QWORD *)(v382 + 504) = 0;
      *(_OWORD *)(v382 + 472) = v345;
      *(_OWORD *)(v382 + 488) = v345;
      *(_OWORD *)(v382 + 456) = v345;
      *a3 = v382;
      *(_DWORD *)(v382 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v347 = *a3;
      if (*a3)
        goto LABEL_570;
      v348 = 0;
LABEL_571:
      if ((v346 & 2) != 0)
      {
        v351 = 0;
        goto LABEL_577;
      }
      v349 = v346;
      if ((v346 & 1) != 0)
      {
        v745 = *(_QWORD *)(v346 & 0xFFFFFFFF8);
        v746 = *(unsigned int *)((v346 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v746 == 0x3FFFFFFF || (_DWORD)v746 == -1)
        {
          v748 = 2;
        }
        else if (v746 >> 28)
        {
          v1131 = v348;
          v1132 = WTF::fastMalloc((WTF *)0x10);
          v348 = v1131;
          a8 = 8064;
          StatusReg = v1634;
          v344 = v1653;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v345 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1132 = v745;
          *(_DWORD *)(v1132 + 8) = v746;
          v748 = 1;
          v745 = v1132;
        }
        else
        {
          v748 = *(_QWORD *)(v346 & 0xFFFFFFFF8);
          v745 = v746 << 36;
        }
        v349 = v745 | v748;
      }
      v350 = 2;
      while (2)
      {
        if ((v349 & 2) != 0)
        {
          v351 = v350 - 1;
          v386 = (uint64_t *)(v349 & 0xFFFFFFFF8);
          if ((v349 & 1) == 0)
          {
            if (!v386)
              goto LABEL_577;
            v387 = 1;
            v352 = (uint64_t)v386;
            goto LABEL_638;
          }
        }
        else
        {
          if ((v349 & 1) == 0)
          {
            v351 = v350 + (v349 >> 36);
            v352 = v349 & 0xFFFFFFFF8;
            if ((v349 & 0xFFFFFFFF8) == 0)
              goto LABEL_577;
            v387 = 1;
            v386 = (uint64_t *)v352;
            goto LABEL_638;
          }
          v386 = (uint64_t *)(v349 & 0xFFFFFFFF8);
          v351 = *(_DWORD *)((v349 & 0xFFFFFFFF8) + 8) + v350;
        }
        v352 = *v386;
        if (*v386)
        {
          v387 = 0;
LABEL_638:
          v388 = *(_QWORD *)(v352 + 8);
          if ((v387 & 1) == 0 && v386)
          {
            v1033 = v348;
            WTF::fastFree((unint64_t)v386, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v348 = v1033;
            a8 = 8064;
            StatusReg = v1634;
            v344 = v1653;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v345 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v389 = (~(v388 << 32) + v388) ^ ((unint64_t)(~(v388 << 32) + v388) >> 22);
          v390 = 9 * ((v389 + ~(v389 << 13)) ^ ((v389 + ~(v389 << 13)) >> 8));
          v391 = (v390 ^ (v390 >> 15)) + ~((v390 ^ (v390 >> 15)) << 27);
          v350 = v351 + ((v391 >> 31) ^ v391);
          v349 = *(_QWORD *)(v352 + 16);
          if ((v349 & 1) != 0)
          {
            v1034 = *(_QWORD *)(v349 & 0xFFFFFFFF8);
            if ((v349 & 2) != 0
              || (v1035 = *(unsigned int *)((v349 & 0xFFFFFFFF8) + 8), (_DWORD)v1035 == 0x3FFFFFFF)
              || (_DWORD)v1035 == -1)
            {
              v1036 = 2;
            }
            else if (v1035 >> 28)
            {
              v1206 = v348;
              v1207 = WTF::fastMalloc((WTF *)0x10);
              v348 = v1206;
              a8 = 8064;
              StatusReg = v1634;
              v344 = v1653;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v345 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1207 = v1034;
              *(_DWORD *)(v1207 + 8) = v1035;
              v1036 = 1;
              v1034 = v1207;
            }
            else
            {
              v1036 = *(_QWORD *)(v349 & 0xFFFFFFFF8);
              v1034 = v1035 << 36;
            }
            v349 = v1034 | v1036;
          }
          continue;
        }
        break;
      }
      if (v386)
      {
        v771 = v348;
        WTF::fastFree((unint64_t)v386, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v348 = v771;
        a8 = 8064;
        StatusReg = v1634;
        v344 = v1653;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v345 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_577:
      v353 = v351 & v348;
      v354 = (unint64_t *)(v347 + (v353 << 6));
      v355 = *v354;
      if (*v354 == 2)
        goto LABEL_578;
      v366 = 0;
      v356 = 0;
      v367 = v346 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v355 & 2) != 0)
        {
          v375 = (uint64_t *)(v355 & 0xFFFFFFFF8);
          if ((v355 & 1) == 0)
          {
            if (!v375)
              break;
            goto LABEL_591;
          }
          v894 = *v375;
          if (!*v375)
            break;
LABEL_1527:
          v898 = 2;
          goto LABEL_1528;
        }
        if ((v355 & 1) == 0)
          goto LABEL_591;
        v894 = *(_QWORD *)(v355 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v355 & 0xFFFFFFFF8) + 8) == -1 && v894 == 0)
          break;
        v896 = *(unsigned int *)((v355 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v896 == 0x3FFFFFFF || (_DWORD)v896 == -1)
          goto LABEL_1527;
        if (v896 >> 28)
        {
          v1175 = v348;
          v1622 = v367;
          v1176 = WTF::fastMalloc((WTF *)0x10);
          v367 = v1622;
          StatusReg = v1634;
          v348 = v1175;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v345 = 0uLL;
          v344 = v1653;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1176 = v894;
          *(_DWORD *)(v1176 + 8) = v896;
          v898 = 1;
          v894 = v1176;
        }
        else
        {
          v898 = *(_QWORD *)(v355 & 0xFFFFFFFF8);
          v894 = v896 << 36;
        }
LABEL_1528:
        v355 = v894 | v898;
LABEL_591:
        v368 = v346;
        if ((v346 & 1) != 0)
        {
          v824 = *(_QWORD *)v367;
          if ((v346 & 2) != 0 || (v825 = *(unsigned int *)(v367 + 8), (_DWORD)v825 == 0x3FFFFFFF) || (_DWORD)v825 == -1)
          {
            v826 = 2;
          }
          else if (v825 >> 28)
          {
            v1544 = v348;
            v1611 = v367;
            v1158 = WTF::fastMalloc((WTF *)0x10);
            v367 = v1611;
            StatusReg = v1634;
            v348 = v1544;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v345 = 0uLL;
            v344 = v1653;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1158 = v824;
            *(_DWORD *)(v1158 + 8) = v825;
            v826 = 1;
            v824 = v1158;
          }
          else
          {
            v826 = *(_QWORD *)v367;
            v824 = v825 << 36;
          }
          v368 = v824 | v826;
        }
        if ((v355 & 2) != 0)
        {
          v372 = (v368 >> 1) & 1;
        }
        else
        {
          if ((v368 & 2) == 0)
          {
            while (1)
            {
              if ((v355 & 2) != 0)
              {
                LODWORD(v369) = -1;
              }
              else if ((v355 & 1) != 0)
              {
                LODWORD(v369) = *(_DWORD *)((v355 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v369 = v355 >> 36;
              }
              if ((v368 & 2) != 0)
              {
                LODWORD(v370) = -1;
              }
              else if ((v368 & 1) != 0)
              {
                LODWORD(v370) = *(_DWORD *)((v368 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v370 = v368 >> 36;
              }
              if ((_DWORD)v369 != (_DWORD)v370)
                break;
              v371 = (uint64_t *)(v355 & 0xFFFFFFFF8);
              v372 = v355 & 0xFFFFFFFF8;
              if ((v355 & 1) != 0)
                v372 = *v371;
              v373 = (uint64_t *)(v368 & 0xFFFFFFFF8);
              v374 = v368 & 0xFFFFFFFF8;
              if ((v368 & 1) != 0)
                v374 = *v373;
              if (!v372 || !v374)
              {
                LOBYTE(v372) = (v372 != 0) == (v374 != 0);
                goto LABEL_609;
              }
              if (*(_QWORD *)(v372 + 8) != *(_QWORD *)(v374 + 8))
                break;
              if ((v355 & 1) != 0 && v371)
              {
                v1528 = v348;
                v1589 = v367;
                v1495 = v374;
                WTF::fastFree(v355 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v374 = v1495;
                v367 = v1589;
                StatusReg = v1634;
                v348 = v1528;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v345 = 0uLL;
                v344 = v1653;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v373 = (uint64_t *)(v368 & 0xFFFFFFFF8);
              }
              v355 = *(_QWORD *)(v372 + 16);
              if ((v355 & 1) != 0)
              {
                v1478 = v373;
                v1496 = v374;
                v1590 = v367;
                v1529 = v348;
                v1088 = *(_QWORD *)(v355 & 0xFFFFFFFF8);
                if ((v355 & 2) != 0
                  || (v1089 = *(unsigned int *)((v355 & 0xFFFFFFFF8) + 8), (_DWORD)v1089 == 0x3FFFFFFF)
                  || (_DWORD)v1089 == -1)
                {
                  v1090 = 2;
                }
                else if (v1089 >> 28)
                {
                  v1234 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1234 = v1088;
                  *(_DWORD *)(v1234 + 8) = v1089;
                  v1090 = 1;
                  v1088 = v1234;
                }
                else
                {
                  v1090 = v1088;
                  v1088 = v1089 << 36;
                }
                v355 = v1088 | v1090;
                v373 = v1478;
                v374 = v1496;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1634;
                v344 = v1653;
                v345 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v348 = v1529;
                v367 = v1590;
              }
              if ((v368 & 1) != 0 && v373)
              {
                v1091 = v348;
                v1591 = v367;
                v1092 = v374;
                WTF::fastFree((unint64_t)v373, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v374 = v1092;
                v367 = v1591;
                StatusReg = v1634;
                v348 = v1091;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v345 = 0uLL;
                v344 = v1653;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v368 = *(_QWORD *)(v374 + 16);
              if ((v368 & 1) != 0)
              {
                v1555 = v367;
                v1511 = v348;
                v393 = *(_QWORD *)(v368 & 0xFFFFFFFF8);
                if ((v368 & 2) != 0
                  || (v394 = *(unsigned int *)((v368 & 0xFFFFFFFF8) + 8), (_DWORD)v394 == 0x3FFFFFFF)
                  || (_DWORD)v394 == -1)
                {
                  v395 = 2;
                }
                else if (v394 >> 28)
                {
                  v1223 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1223 = v393;
                  *(_DWORD *)(v1223 + 8) = v394;
                  v395 = 1;
                  v393 = v1223;
                }
                else
                {
                  v395 = v393;
                  v393 = v394 << 36;
                }
                v368 = v393 | v395;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1634;
                v344 = v1653;
                v345 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v348 = v1511;
                v367 = v1555;
              }
            }
          }
          LOBYTE(v372) = 0;
        }
LABEL_609:
        if ((v368 & 1) != 0)
        {
          v827 = v368 & 0xFFFFFFFF8;
          if ((v368 & 0xFFFFFFFF8) != 0)
          {
            v828 = v348;
            v1566 = v367;
            WTF::fastFree(v827, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v367 = v1566;
            StatusReg = v1634;
            v348 = v828;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v345 = 0uLL;
            v344 = v1653;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v355 & 1) != 0)
        {
          v829 = v355 & 0xFFFFFFFF8;
          if ((v355 & 0xFFFFFFFF8) != 0)
          {
            v830 = v348;
            v831 = v367;
            WTF::fastFree(v829, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v367 = v831;
            v348 = v830;
            a8 = 8064;
            StatusReg = v1634;
            v344 = v1653;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v345 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v372 & 1) != 0)
        {
          v354[2] = v342;
          if ((v346 & 1) != 0 && v367)
          {
            WTF::fastFree(v367, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1634;
            v344 = v1653;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v345 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_586;
        }
        if ((*v354 & 2) != 0 && (*v354 & 0xFFFFFFFF8) != 0)
          v356 = v354;
        v353 = (++v366 + (_DWORD)v353) & v348;
        v354 = (unint64_t *)(v347 + (v353 << 6));
        v355 = *v354;
        if (*v354 != 2)
          continue;
        break;
      }
      if (v356)
      {
        *v356 = 2;
        *(_OWORD *)(v356 + 1) = 0u;
        *(_OWORD *)(v356 + 3) = 0u;
        *(_OWORD *)(v356 + 5) = 0u;
        v356[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_579;
      }
      if ((v355 & 1) != 0 && (v355 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v355 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1634;
        v344 = v1653;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v345 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_578:
      v356 = v354;
LABEL_579:
      *v356 = v346;
      v357 = v1666;
      v358 = v1667;
      v359 = v1668;
      v356[7] = v1669;
      *(_OWORD *)(v356 + 5) = v359;
      *(_OWORD *)(v356 + 3) = v358;
      *(_OWORD *)(v356 + 1) = v357;
      v360 = *a3;
      if (*a3)
        v361 = *(_DWORD *)(v360 - 12) + 1;
      else
        v361 = 1;
      *(_DWORD *)(v360 - 12) = v361;
      v362 = *a3;
      if (*a3)
        v363 = *(_DWORD *)(v362 - 12);
      else
        v363 = 0;
      v364 = (*(_DWORD *)(v362 - 16) + v363);
      v365 = *(unsigned int *)(v362 - 4);
      if (v365 > 0x400)
      {
        if (v365 > 2 * v364)
          goto LABEL_585;
LABEL_644:
        v392 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v356);
        a8 = 8064;
        StatusReg = v1634;
        v344 = v1653;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v345 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v356 = (_QWORD *)v392;
        goto LABEL_585;
      }
      if (3 * v365 <= 4 * v364)
        goto LABEL_644;
LABEL_585:
      v356[2] = v342;
LABEL_586:
      v342 += 80;
      if (v342 >= (unint64_t)v344)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v396 = *v9;
  if (!*v9)
    v396 = *((_DWORD *)v9 + 24);
  v397 = ((unint64_t)v9 + v396 + 7) & 0xFFFFFFFFFFFFFFF8;
  v398 = v9[1];
  if (!v9[1])
    v398 = *((_DWORD *)v9 + 25);
  v399 = (char *)v9 + v398;
  if ((unint64_t)v399 > v397)
  {
    v400 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1635 = StatusReg;
    v1654 = (char *)v9 + v398;
    while (1)
    {
      v401 = *(_QWORD *)(v397 + 72);
      if ((v401 & 1) != 0)
      {
        v705 = *(_QWORD *)(v401 & 0xFFFFFFFF8);
        if ((v401 & 2) != 0
          || ((v706 = *(unsigned int *)((v401 & 0xFFFFFFFF8) + 8), (_DWORD)v706 != 0x3FFFFFFF)
            ? (v707 = (_DWORD)v706 == -1)
            : (v707 = 1),
              v707))
        {
          v708 = 2;
        }
        else if (v706 >> 28)
        {
          v1148 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1635;
          v399 = v1654;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v400 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1148 = v705;
          *(_DWORD *)(v1148 + 8) = v706;
          v708 = 1;
          v705 = v1148;
        }
        else
        {
          v708 = *(_QWORD *)(v401 & 0xFFFFFFFF8);
          v705 = v706 << 36;
        }
        v401 = v705 | v708;
      }
      v1669 = 0;
      v1667 = v400;
      v1668 = v400;
      v1666 = v400;
      v402 = *a3;
      if (*a3)
      {
LABEL_663:
        v403 = *(unsigned int *)(v402 - 8);
        goto LABEL_664;
      }
      v431 = *(_QWORD *)(StatusReg + 752);
      if (!v431)
        goto LABEL_2016;
      v432 = v14[521];
      if (*(_DWORD *)(v431 + 8052) <= v432)
        goto LABEL_2016;
      v433 = v431 + 8 * v432;
      v434 = v433 + 8064;
      *(_BYTE *)(v433 + 8064) = 1;
      v435 = *(unsigned int *)(v433 + 8080);
      if ((_DWORD)v435)
      {
        *(_DWORD *)(v434 + 16) = v435 - *(_DWORD *)(v434 + 20);
        v436 = *(_QWORD *)(v434 + 8) - v435;
        goto LABEL_722;
      }
      v438 = *(_QWORD *)(v434 + 40);
      v439 = *(_QWORD *)(v434 + 24);
      if (v438)
        goto LABEL_726;
      if (*(_BYTE *)(v434 + 5) != 6)
        goto LABEL_2015;
      v985 = *(unsigned int *)(v434 + 32);
      v986 = *(_DWORD *)(v434 + 36);
      if (v985 >= v986)
        goto LABEL_2015;
      *(_QWORD *)(v434 + 8 * v985 + 56) = 0;
      v987 = (unint64_t *)(v431 + 8128 + 8 * v432 + 8 * v985);
      v988 = v986 - 1 - v985;
      do
      {
        if (!v988)
        {
          *(_DWORD *)(v434 + 32) = v986;
LABEL_2015:
          *(_BYTE *)v434 = 0;
LABEL_2016:
          v436 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1635;
          v399 = v1654;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v400 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_723;
        }
        v439 += 1024;
        v990 = *v987++;
        v989 = v990;
        LODWORD(v985) = v985 + 1;
        --v988;
      }
      while (!v990);
      v438 = __rbit64(v989);
      *(_DWORD *)(v434 + 32) = v985;
      *(_QWORD *)(v434 + 24) = v439;
LABEL_726:
      v440 = __clz(v438);
      *(_QWORD *)(v434 + 40) = v438 & ~(0x8000000000000000 >> v440);
      v436 = v439 + 16 * v440;
LABEL_722:
      *(_BYTE *)v434 = 0;
LABEL_723:
      *(_QWORD *)(v436 + 16) = 2;
      v437 = v436 + 16;
      *(_OWORD *)(v437 + 8) = v400;
      *(_OWORD *)(v437 + 24) = v400;
      *(_OWORD *)(v437 + 40) = v400;
      *(_QWORD *)(v437 + 56) = 0;
      *(_QWORD *)(v437 + 64) = 2;
      *(_OWORD *)(v437 + 72) = v400;
      *(_OWORD *)(v437 + 88) = v400;
      *(_OWORD *)(v437 + 104) = v400;
      *(_QWORD *)(v437 + 120) = 0;
      *(_QWORD *)(v437 + 128) = 2;
      *(_OWORD *)(v437 + 136) = v400;
      *(_OWORD *)(v437 + 152) = v400;
      *(_OWORD *)(v437 + 168) = v400;
      *(_QWORD *)(v437 + 184) = 0;
      *(_QWORD *)(v437 + 192) = 2;
      *(_OWORD *)(v437 + 232) = v400;
      *(_OWORD *)(v437 + 216) = v400;
      *(_OWORD *)(v437 + 200) = v400;
      *(_QWORD *)(v437 + 248) = 0;
      *(_QWORD *)(v437 + 256) = 2;
      *(_OWORD *)(v437 + 280) = v400;
      *(_OWORD *)(v437 + 296) = v400;
      *(_OWORD *)(v437 + 264) = v400;
      *(_QWORD *)(v437 + 312) = 0;
      *(_QWORD *)(v437 + 320) = 2;
      *(_OWORD *)(v437 + 344) = v400;
      *(_OWORD *)(v437 + 360) = v400;
      *(_OWORD *)(v437 + 328) = v400;
      *(_QWORD *)(v437 + 376) = 0;
      *(_QWORD *)(v437 + 384) = 2;
      *(_OWORD *)(v437 + 408) = v400;
      *(_OWORD *)(v437 + 424) = v400;
      *(_OWORD *)(v437 + 392) = v400;
      *(_QWORD *)(v437 + 440) = 0;
      *(_QWORD *)(v437 + 448) = 2;
      *(_QWORD *)(v437 + 504) = 0;
      *(_OWORD *)(v437 + 472) = v400;
      *(_OWORD *)(v437 + 488) = v400;
      *(_OWORD *)(v437 + 456) = v400;
      *a3 = v437;
      *(_DWORD *)(v437 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v402 = *a3;
      if (*a3)
        goto LABEL_663;
      v403 = 0;
LABEL_664:
      if ((v401 & 2) != 0)
      {
        v406 = 0;
        goto LABEL_670;
      }
      v404 = v401;
      if ((v401 & 1) != 0)
      {
        v749 = *(_QWORD *)(v401 & 0xFFFFFFFF8);
        v750 = *(unsigned int *)((v401 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v750 == 0x3FFFFFFF || (_DWORD)v750 == -1)
        {
          v752 = 2;
        }
        else if (v750 >> 28)
        {
          v1133 = v403;
          v1134 = WTF::fastMalloc((WTF *)0x10);
          v403 = v1133;
          a8 = 8064;
          StatusReg = v1635;
          v399 = v1654;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v400 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1134 = v749;
          *(_DWORD *)(v1134 + 8) = v750;
          v752 = 1;
          v749 = v1134;
        }
        else
        {
          v752 = *(_QWORD *)(v401 & 0xFFFFFFFF8);
          v749 = v750 << 36;
        }
        v404 = v749 | v752;
      }
      v405 = 2;
      while (2)
      {
        if ((v404 & 2) != 0)
        {
          v406 = v405 - 1;
          v441 = (uint64_t *)(v404 & 0xFFFFFFFF8);
          if ((v404 & 1) == 0)
          {
            if (!v441)
              goto LABEL_670;
            v442 = 1;
            v407 = (uint64_t)v441;
            goto LABEL_731;
          }
        }
        else
        {
          if ((v404 & 1) == 0)
          {
            v406 = v405 + (v404 >> 36);
            v407 = v404 & 0xFFFFFFFF8;
            if ((v404 & 0xFFFFFFFF8) == 0)
              goto LABEL_670;
            v442 = 1;
            v441 = (uint64_t *)v407;
            goto LABEL_731;
          }
          v441 = (uint64_t *)(v404 & 0xFFFFFFFF8);
          v406 = *(_DWORD *)((v404 & 0xFFFFFFFF8) + 8) + v405;
        }
        v407 = *v441;
        if (*v441)
        {
          v442 = 0;
LABEL_731:
          v443 = *(_QWORD *)(v407 + 8);
          if ((v442 & 1) == 0 && v441)
          {
            v1037 = v403;
            WTF::fastFree((unint64_t)v441, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v403 = v1037;
            a8 = 8064;
            StatusReg = v1635;
            v399 = v1654;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v400 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v444 = (~(v443 << 32) + v443) ^ ((unint64_t)(~(v443 << 32) + v443) >> 22);
          v445 = 9 * ((v444 + ~(v444 << 13)) ^ ((v444 + ~(v444 << 13)) >> 8));
          v446 = (v445 ^ (v445 >> 15)) + ~((v445 ^ (v445 >> 15)) << 27);
          v405 = v406 + ((v446 >> 31) ^ v446);
          v404 = *(_QWORD *)(v407 + 16);
          if ((v404 & 1) != 0)
          {
            v1038 = *(_QWORD *)(v404 & 0xFFFFFFFF8);
            if ((v404 & 2) != 0
              || (v1039 = *(unsigned int *)((v404 & 0xFFFFFFFF8) + 8), (_DWORD)v1039 == 0x3FFFFFFF)
              || (_DWORD)v1039 == -1)
            {
              v1040 = 2;
            }
            else if (v1039 >> 28)
            {
              v1208 = v403;
              v1209 = WTF::fastMalloc((WTF *)0x10);
              v403 = v1208;
              a8 = 8064;
              StatusReg = v1635;
              v399 = v1654;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v400 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1209 = v1038;
              *(_DWORD *)(v1209 + 8) = v1039;
              v1040 = 1;
              v1038 = v1209;
            }
            else
            {
              v1040 = *(_QWORD *)(v404 & 0xFFFFFFFF8);
              v1038 = v1039 << 36;
            }
            v404 = v1038 | v1040;
          }
          continue;
        }
        break;
      }
      if (v441)
      {
        v772 = v403;
        WTF::fastFree((unint64_t)v441, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v403 = v772;
        a8 = 8064;
        StatusReg = v1635;
        v399 = v1654;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v400 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_670:
      v408 = v406 & v403;
      v409 = (unint64_t *)(v402 + (v408 << 6));
      v410 = *v409;
      if (*v409 == 2)
        goto LABEL_671;
      v421 = 0;
      v411 = 0;
      v422 = v401 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v410 & 2) != 0)
        {
          v430 = (uint64_t *)(v410 & 0xFFFFFFFF8);
          if ((v410 & 1) == 0)
          {
            if (!v430)
              break;
            goto LABEL_684;
          }
          v899 = *v430;
          if (!*v430)
            break;
LABEL_1538:
          v903 = 2;
          goto LABEL_1539;
        }
        if ((v410 & 1) == 0)
          goto LABEL_684;
        v899 = *(_QWORD *)(v410 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v410 & 0xFFFFFFFF8) + 8) == -1 && v899 == 0)
          break;
        v901 = *(unsigned int *)((v410 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v901 == 0x3FFFFFFF || (_DWORD)v901 == -1)
          goto LABEL_1538;
        if (v901 >> 28)
        {
          v1177 = v403;
          v1623 = v422;
          v1178 = WTF::fastMalloc((WTF *)0x10);
          v422 = v1623;
          StatusReg = v1635;
          v403 = v1177;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v400 = 0uLL;
          v399 = v1654;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1178 = v899;
          *(_DWORD *)(v1178 + 8) = v901;
          v903 = 1;
          v899 = v1178;
        }
        else
        {
          v903 = *(_QWORD *)(v410 & 0xFFFFFFFF8);
          v899 = v901 << 36;
        }
LABEL_1539:
        v410 = v899 | v903;
LABEL_684:
        v423 = v401;
        if ((v401 & 1) != 0)
        {
          v832 = *(_QWORD *)v422;
          if ((v401 & 2) != 0 || (v833 = *(unsigned int *)(v422 + 8), (_DWORD)v833 == 0x3FFFFFFF) || (_DWORD)v833 == -1)
          {
            v834 = 2;
          }
          else if (v833 >> 28)
          {
            v1545 = v403;
            v1612 = v422;
            v1159 = WTF::fastMalloc((WTF *)0x10);
            v422 = v1612;
            StatusReg = v1635;
            v403 = v1545;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v400 = 0uLL;
            v399 = v1654;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1159 = v832;
            *(_DWORD *)(v1159 + 8) = v833;
            v834 = 1;
            v832 = v1159;
          }
          else
          {
            v834 = *(_QWORD *)v422;
            v832 = v833 << 36;
          }
          v423 = v832 | v834;
        }
        if ((v410 & 2) != 0)
        {
          v427 = (v423 >> 1) & 1;
        }
        else
        {
          if ((v423 & 2) == 0)
          {
            while (1)
            {
              if ((v410 & 2) != 0)
              {
                LODWORD(v424) = -1;
              }
              else if ((v410 & 1) != 0)
              {
                LODWORD(v424) = *(_DWORD *)((v410 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v424 = v410 >> 36;
              }
              if ((v423 & 2) != 0)
              {
                LODWORD(v425) = -1;
              }
              else if ((v423 & 1) != 0)
              {
                LODWORD(v425) = *(_DWORD *)((v423 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v425 = v423 >> 36;
              }
              if ((_DWORD)v424 != (_DWORD)v425)
                break;
              v426 = (uint64_t *)(v410 & 0xFFFFFFFF8);
              v427 = v410 & 0xFFFFFFFF8;
              if ((v410 & 1) != 0)
                v427 = *v426;
              v428 = (uint64_t *)(v423 & 0xFFFFFFFF8);
              v429 = v423 & 0xFFFFFFFF8;
              if ((v423 & 1) != 0)
                v429 = *v428;
              if (!v427 || !v429)
              {
                LOBYTE(v427) = (v427 != 0) == (v429 != 0);
                goto LABEL_702;
              }
              if (*(_QWORD *)(v427 + 8) != *(_QWORD *)(v429 + 8))
                break;
              if ((v410 & 1) != 0 && v426)
              {
                v1530 = v403;
                v1592 = v422;
                v1497 = v429;
                WTF::fastFree(v410 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v429 = v1497;
                v422 = v1592;
                StatusReg = v1635;
                v403 = v1530;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v400 = 0uLL;
                v399 = v1654;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v428 = (uint64_t *)(v423 & 0xFFFFFFFF8);
              }
              v410 = *(_QWORD *)(v427 + 16);
              if ((v410 & 1) != 0)
              {
                v1479 = v428;
                v1498 = v429;
                v1593 = v422;
                v1531 = v403;
                v1093 = *(_QWORD *)(v410 & 0xFFFFFFFF8);
                if ((v410 & 2) != 0
                  || (v1094 = *(unsigned int *)((v410 & 0xFFFFFFFF8) + 8), (_DWORD)v1094 == 0x3FFFFFFF)
                  || (_DWORD)v1094 == -1)
                {
                  v1095 = 2;
                }
                else if (v1094 >> 28)
                {
                  v1235 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1235 = v1093;
                  *(_DWORD *)(v1235 + 8) = v1094;
                  v1095 = 1;
                  v1093 = v1235;
                }
                else
                {
                  v1095 = v1093;
                  v1093 = v1094 << 36;
                }
                v410 = v1093 | v1095;
                v428 = v1479;
                v429 = v1498;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1635;
                v399 = v1654;
                v400 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v403 = v1531;
                v422 = v1593;
              }
              if ((v423 & 1) != 0 && v428)
              {
                v1096 = v403;
                v1594 = v422;
                v1097 = v429;
                WTF::fastFree((unint64_t)v428, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v429 = v1097;
                v422 = v1594;
                StatusReg = v1635;
                v403 = v1096;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v400 = 0uLL;
                v399 = v1654;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v423 = *(_QWORD *)(v429 + 16);
              if ((v423 & 1) != 0)
              {
                v1556 = v422;
                v1512 = v403;
                v448 = *(_QWORD *)(v423 & 0xFFFFFFFF8);
                if ((v423 & 2) != 0
                  || (v449 = *(unsigned int *)((v423 & 0xFFFFFFFF8) + 8), (_DWORD)v449 == 0x3FFFFFFF)
                  || (_DWORD)v449 == -1)
                {
                  v450 = 2;
                }
                else if (v449 >> 28)
                {
                  v1224 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1224 = v448;
                  *(_DWORD *)(v1224 + 8) = v449;
                  v450 = 1;
                  v448 = v1224;
                }
                else
                {
                  v450 = v448;
                  v448 = v449 << 36;
                }
                v423 = v448 | v450;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1635;
                v399 = v1654;
                v400 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v403 = v1512;
                v422 = v1556;
              }
            }
          }
          LOBYTE(v427) = 0;
        }
LABEL_702:
        if ((v423 & 1) != 0)
        {
          v835 = v423 & 0xFFFFFFFF8;
          if ((v423 & 0xFFFFFFFF8) != 0)
          {
            v836 = v403;
            v1567 = v422;
            WTF::fastFree(v835, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v422 = v1567;
            StatusReg = v1635;
            v403 = v836;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v400 = 0uLL;
            v399 = v1654;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v410 & 1) != 0)
        {
          v837 = v410 & 0xFFFFFFFF8;
          if ((v410 & 0xFFFFFFFF8) != 0)
          {
            v838 = v403;
            v839 = v422;
            WTF::fastFree(v837, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v422 = v839;
            v403 = v838;
            a8 = 8064;
            StatusReg = v1635;
            v399 = v1654;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v400 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v427 & 1) != 0)
        {
          v409[2] = v397;
          if ((v401 & 1) != 0 && v422)
          {
            WTF::fastFree(v422, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1635;
            v399 = v1654;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v400 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_679;
        }
        if ((*v409 & 2) != 0 && (*v409 & 0xFFFFFFFF8) != 0)
          v411 = v409;
        v408 = (++v421 + (_DWORD)v408) & v403;
        v409 = (unint64_t *)(v402 + (v408 << 6));
        v410 = *v409;
        if (*v409 != 2)
          continue;
        break;
      }
      if (v411)
      {
        *v411 = 2;
        *(_OWORD *)(v411 + 1) = 0u;
        *(_OWORD *)(v411 + 3) = 0u;
        *(_OWORD *)(v411 + 5) = 0u;
        v411[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_672;
      }
      if ((v410 & 1) != 0 && (v410 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v410 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1635;
        v399 = v1654;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v400 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_671:
      v411 = v409;
LABEL_672:
      *v411 = v401;
      v412 = v1666;
      v413 = v1667;
      v414 = v1668;
      v411[7] = v1669;
      *(_OWORD *)(v411 + 5) = v414;
      *(_OWORD *)(v411 + 3) = v413;
      *(_OWORD *)(v411 + 1) = v412;
      v415 = *a3;
      if (*a3)
        v416 = *(_DWORD *)(v415 - 12) + 1;
      else
        v416 = 1;
      *(_DWORD *)(v415 - 12) = v416;
      v417 = *a3;
      if (*a3)
        v418 = *(_DWORD *)(v417 - 12);
      else
        v418 = 0;
      v419 = (*(_DWORD *)(v417 - 16) + v418);
      v420 = *(unsigned int *)(v417 - 4);
      if (v420 > 0x400)
      {
        if (v420 > 2 * v419)
          goto LABEL_678;
LABEL_737:
        v447 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v411);
        a8 = 8064;
        StatusReg = v1635;
        v399 = v1654;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v400 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v411 = (_QWORD *)v447;
        goto LABEL_678;
      }
      if (3 * v420 <= 4 * v419)
        goto LABEL_737;
LABEL_678:
      v411[2] = v397;
LABEL_679:
      v397 += 80;
      if (v397 >= (unint64_t)v399)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v451 = v9[11];
  if (!v9[11])
    v451 = *((_DWORD *)v9 + 35);
  v452 = ((unint64_t)v9 + v451 + 7) & 0xFFFFFFFFFFFFFFF8;
  v453 = v9[12];
  if (!v9[12])
    v453 = *((_DWORD *)v9 + 36);
  v454 = (char *)v9 + v453;
  if ((unint64_t)v454 > v452)
  {
    v455 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1636 = StatusReg;
    v1655 = (char *)v9 + v453;
    while (1)
    {
      v456 = *(_QWORD *)(v452 + 72);
      if ((v456 & 1) != 0)
      {
        v709 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
        if ((v456 & 2) != 0
          || ((v710 = *(unsigned int *)((v456 & 0xFFFFFFFF8) + 8), (_DWORD)v710 != 0x3FFFFFFF)
            ? (v711 = (_DWORD)v710 == -1)
            : (v711 = 1),
              v711))
        {
          v712 = 2;
        }
        else if (v710 >> 28)
        {
          v1149 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1636;
          v454 = v1655;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v455 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1149 = v709;
          *(_DWORD *)(v1149 + 8) = v710;
          v712 = 1;
          v709 = v1149;
        }
        else
        {
          v712 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
          v709 = v710 << 36;
        }
        v456 = v709 | v712;
      }
      v1669 = 0;
      v1667 = v455;
      v1668 = v455;
      v1666 = v455;
      v457 = *a3;
      if (*a3)
      {
LABEL_756:
        v458 = *(unsigned int *)(v457 - 8);
        goto LABEL_757;
      }
      v486 = *(_QWORD *)(StatusReg + 752);
      if (!v486)
        goto LABEL_2019;
      v487 = v14[521];
      if (*(_DWORD *)(v486 + 8052) <= v487)
        goto LABEL_2019;
      v488 = v486 + 8 * v487;
      v489 = v488 + 8064;
      *(_BYTE *)(v488 + 8064) = 1;
      v490 = *(unsigned int *)(v488 + 8080);
      if ((_DWORD)v490)
      {
        *(_DWORD *)(v489 + 16) = v490 - *(_DWORD *)(v489 + 20);
        v491 = *(_QWORD *)(v489 + 8) - v490;
        goto LABEL_815;
      }
      v493 = *(_QWORD *)(v489 + 40);
      v494 = *(_QWORD *)(v489 + 24);
      if (v493)
        goto LABEL_819;
      if (*(_BYTE *)(v489 + 5) != 6)
        goto LABEL_2018;
      v991 = *(unsigned int *)(v489 + 32);
      v992 = *(_DWORD *)(v489 + 36);
      if (v991 >= v992)
        goto LABEL_2018;
      *(_QWORD *)(v489 + 8 * v991 + 56) = 0;
      v993 = (unint64_t *)(v486 + 8128 + 8 * v487 + 8 * v991);
      v994 = v992 - 1 - v991;
      do
      {
        if (!v994)
        {
          *(_DWORD *)(v489 + 32) = v992;
LABEL_2018:
          *(_BYTE *)v489 = 0;
LABEL_2019:
          v491 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1636;
          v454 = v1655;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v455 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_816;
        }
        v494 += 1024;
        v996 = *v993++;
        v995 = v996;
        LODWORD(v991) = v991 + 1;
        --v994;
      }
      while (!v996);
      v493 = __rbit64(v995);
      *(_DWORD *)(v489 + 32) = v991;
      *(_QWORD *)(v489 + 24) = v494;
LABEL_819:
      v495 = __clz(v493);
      *(_QWORD *)(v489 + 40) = v493 & ~(0x8000000000000000 >> v495);
      v491 = v494 + 16 * v495;
LABEL_815:
      *(_BYTE *)v489 = 0;
LABEL_816:
      *(_QWORD *)(v491 + 16) = 2;
      v492 = v491 + 16;
      *(_OWORD *)(v492 + 8) = v455;
      *(_OWORD *)(v492 + 24) = v455;
      *(_OWORD *)(v492 + 40) = v455;
      *(_QWORD *)(v492 + 56) = 0;
      *(_QWORD *)(v492 + 64) = 2;
      *(_OWORD *)(v492 + 72) = v455;
      *(_OWORD *)(v492 + 88) = v455;
      *(_OWORD *)(v492 + 104) = v455;
      *(_QWORD *)(v492 + 120) = 0;
      *(_QWORD *)(v492 + 128) = 2;
      *(_OWORD *)(v492 + 136) = v455;
      *(_OWORD *)(v492 + 152) = v455;
      *(_OWORD *)(v492 + 168) = v455;
      *(_QWORD *)(v492 + 184) = 0;
      *(_QWORD *)(v492 + 192) = 2;
      *(_OWORD *)(v492 + 232) = v455;
      *(_OWORD *)(v492 + 216) = v455;
      *(_OWORD *)(v492 + 200) = v455;
      *(_QWORD *)(v492 + 248) = 0;
      *(_QWORD *)(v492 + 256) = 2;
      *(_OWORD *)(v492 + 280) = v455;
      *(_OWORD *)(v492 + 296) = v455;
      *(_OWORD *)(v492 + 264) = v455;
      *(_QWORD *)(v492 + 312) = 0;
      *(_QWORD *)(v492 + 320) = 2;
      *(_OWORD *)(v492 + 344) = v455;
      *(_OWORD *)(v492 + 360) = v455;
      *(_OWORD *)(v492 + 328) = v455;
      *(_QWORD *)(v492 + 376) = 0;
      *(_QWORD *)(v492 + 384) = 2;
      *(_OWORD *)(v492 + 408) = v455;
      *(_OWORD *)(v492 + 424) = v455;
      *(_OWORD *)(v492 + 392) = v455;
      *(_QWORD *)(v492 + 440) = 0;
      *(_QWORD *)(v492 + 448) = 2;
      *(_QWORD *)(v492 + 504) = 0;
      *(_OWORD *)(v492 + 472) = v455;
      *(_OWORD *)(v492 + 488) = v455;
      *(_OWORD *)(v492 + 456) = v455;
      *a3 = v492;
      *(_DWORD *)(v492 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v457 = *a3;
      if (*a3)
        goto LABEL_756;
      v458 = 0;
LABEL_757:
      if ((v456 & 2) != 0)
      {
        v461 = 0;
        goto LABEL_763;
      }
      v459 = v456;
      if ((v456 & 1) != 0)
      {
        v753 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
        v754 = *(unsigned int *)((v456 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v754 == 0x3FFFFFFF || (_DWORD)v754 == -1)
        {
          v756 = 2;
        }
        else if (v754 >> 28)
        {
          v1135 = v458;
          v1136 = WTF::fastMalloc((WTF *)0x10);
          v458 = v1135;
          a8 = 8064;
          StatusReg = v1636;
          v454 = v1655;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v455 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1136 = v753;
          *(_DWORD *)(v1136 + 8) = v754;
          v756 = 1;
          v753 = v1136;
        }
        else
        {
          v756 = *(_QWORD *)(v456 & 0xFFFFFFFF8);
          v753 = v754 << 36;
        }
        v459 = v753 | v756;
      }
      v460 = 2;
      while (2)
      {
        if ((v459 & 2) != 0)
        {
          v461 = v460 - 1;
          v496 = (uint64_t *)(v459 & 0xFFFFFFFF8);
          if ((v459 & 1) == 0)
          {
            if (!v496)
              goto LABEL_763;
            v497 = 1;
            v462 = (uint64_t)v496;
            goto LABEL_824;
          }
        }
        else
        {
          if ((v459 & 1) == 0)
          {
            v461 = v460 + (v459 >> 36);
            v462 = v459 & 0xFFFFFFFF8;
            if ((v459 & 0xFFFFFFFF8) == 0)
              goto LABEL_763;
            v497 = 1;
            v496 = (uint64_t *)v462;
            goto LABEL_824;
          }
          v496 = (uint64_t *)(v459 & 0xFFFFFFFF8);
          v461 = *(_DWORD *)((v459 & 0xFFFFFFFF8) + 8) + v460;
        }
        v462 = *v496;
        if (*v496)
        {
          v497 = 0;
LABEL_824:
          v498 = *(_QWORD *)(v462 + 8);
          if ((v497 & 1) == 0 && v496)
          {
            v1041 = v458;
            WTF::fastFree((unint64_t)v496, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v458 = v1041;
            a8 = 8064;
            StatusReg = v1636;
            v454 = v1655;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v455 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v499 = (~(v498 << 32) + v498) ^ ((unint64_t)(~(v498 << 32) + v498) >> 22);
          v500 = 9 * ((v499 + ~(v499 << 13)) ^ ((v499 + ~(v499 << 13)) >> 8));
          v501 = (v500 ^ (v500 >> 15)) + ~((v500 ^ (v500 >> 15)) << 27);
          v460 = v461 + ((v501 >> 31) ^ v501);
          v459 = *(_QWORD *)(v462 + 16);
          if ((v459 & 1) != 0)
          {
            v1042 = *(_QWORD *)(v459 & 0xFFFFFFFF8);
            if ((v459 & 2) != 0
              || (v1043 = *(unsigned int *)((v459 & 0xFFFFFFFF8) + 8), (_DWORD)v1043 == 0x3FFFFFFF)
              || (_DWORD)v1043 == -1)
            {
              v1044 = 2;
            }
            else if (v1043 >> 28)
            {
              v1210 = v458;
              v1211 = WTF::fastMalloc((WTF *)0x10);
              v458 = v1210;
              a8 = 8064;
              StatusReg = v1636;
              v454 = v1655;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v455 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1211 = v1042;
              *(_DWORD *)(v1211 + 8) = v1043;
              v1044 = 1;
              v1042 = v1211;
            }
            else
            {
              v1044 = *(_QWORD *)(v459 & 0xFFFFFFFF8);
              v1042 = v1043 << 36;
            }
            v459 = v1042 | v1044;
          }
          continue;
        }
        break;
      }
      if (v496)
      {
        v773 = v458;
        WTF::fastFree((unint64_t)v496, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v458 = v773;
        a8 = 8064;
        StatusReg = v1636;
        v454 = v1655;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v455 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_763:
      v463 = v461 & v458;
      v464 = (unint64_t *)(v457 + (v463 << 6));
      v465 = *v464;
      if (*v464 == 2)
        goto LABEL_764;
      v476 = 0;
      v466 = 0;
      v477 = v456 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v465 & 2) != 0)
        {
          v485 = (uint64_t *)(v465 & 0xFFFFFFFF8);
          if ((v465 & 1) == 0)
          {
            if (!v485)
              break;
            goto LABEL_777;
          }
          v904 = *v485;
          if (!*v485)
            break;
LABEL_1549:
          v908 = 2;
          goto LABEL_1550;
        }
        if ((v465 & 1) == 0)
          goto LABEL_777;
        v904 = *(_QWORD *)(v465 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v465 & 0xFFFFFFFF8) + 8) == -1 && v904 == 0)
          break;
        v906 = *(unsigned int *)((v465 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v906 == 0x3FFFFFFF || (_DWORD)v906 == -1)
          goto LABEL_1549;
        if (v906 >> 28)
        {
          v1179 = v458;
          v1624 = v477;
          v1180 = WTF::fastMalloc((WTF *)0x10);
          v477 = v1624;
          StatusReg = v1636;
          v458 = v1179;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v455 = 0uLL;
          v454 = v1655;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1180 = v904;
          *(_DWORD *)(v1180 + 8) = v906;
          v908 = 1;
          v904 = v1180;
        }
        else
        {
          v908 = *(_QWORD *)(v465 & 0xFFFFFFFF8);
          v904 = v906 << 36;
        }
LABEL_1550:
        v465 = v904 | v908;
LABEL_777:
        v478 = v456;
        if ((v456 & 1) != 0)
        {
          v840 = *(_QWORD *)v477;
          if ((v456 & 2) != 0 || (v841 = *(unsigned int *)(v477 + 8), (_DWORD)v841 == 0x3FFFFFFF) || (_DWORD)v841 == -1)
          {
            v842 = 2;
          }
          else if (v841 >> 28)
          {
            v1546 = v458;
            v1613 = v477;
            v1160 = WTF::fastMalloc((WTF *)0x10);
            v477 = v1613;
            StatusReg = v1636;
            v458 = v1546;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v455 = 0uLL;
            v454 = v1655;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1160 = v840;
            *(_DWORD *)(v1160 + 8) = v841;
            v842 = 1;
            v840 = v1160;
          }
          else
          {
            v842 = *(_QWORD *)v477;
            v840 = v841 << 36;
          }
          v478 = v840 | v842;
        }
        if ((v465 & 2) != 0)
        {
          v482 = (v478 >> 1) & 1;
        }
        else
        {
          if ((v478 & 2) == 0)
          {
            while (1)
            {
              if ((v465 & 2) != 0)
              {
                LODWORD(v479) = -1;
              }
              else if ((v465 & 1) != 0)
              {
                LODWORD(v479) = *(_DWORD *)((v465 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v479 = v465 >> 36;
              }
              if ((v478 & 2) != 0)
              {
                LODWORD(v480) = -1;
              }
              else if ((v478 & 1) != 0)
              {
                LODWORD(v480) = *(_DWORD *)((v478 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v480 = v478 >> 36;
              }
              if ((_DWORD)v479 != (_DWORD)v480)
                break;
              v481 = (uint64_t *)(v465 & 0xFFFFFFFF8);
              v482 = v465 & 0xFFFFFFFF8;
              if ((v465 & 1) != 0)
                v482 = *v481;
              v483 = (uint64_t *)(v478 & 0xFFFFFFFF8);
              v484 = v478 & 0xFFFFFFFF8;
              if ((v478 & 1) != 0)
                v484 = *v483;
              if (!v482 || !v484)
              {
                LOBYTE(v482) = (v482 != 0) == (v484 != 0);
                goto LABEL_795;
              }
              if (*(_QWORD *)(v482 + 8) != *(_QWORD *)(v484 + 8))
                break;
              if ((v465 & 1) != 0 && v481)
              {
                v1532 = v458;
                v1595 = v477;
                v1499 = v484;
                WTF::fastFree(v465 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v484 = v1499;
                v477 = v1595;
                StatusReg = v1636;
                v458 = v1532;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v455 = 0uLL;
                v454 = v1655;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v483 = (uint64_t *)(v478 & 0xFFFFFFFF8);
              }
              v465 = *(_QWORD *)(v482 + 16);
              if ((v465 & 1) != 0)
              {
                v1480 = v483;
                v1500 = v484;
                v1596 = v477;
                v1533 = v458;
                v1098 = *(_QWORD *)(v465 & 0xFFFFFFFF8);
                if ((v465 & 2) != 0
                  || (v1099 = *(unsigned int *)((v465 & 0xFFFFFFFF8) + 8), (_DWORD)v1099 == 0x3FFFFFFF)
                  || (_DWORD)v1099 == -1)
                {
                  v1100 = 2;
                }
                else if (v1099 >> 28)
                {
                  v1236 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1236 = v1098;
                  *(_DWORD *)(v1236 + 8) = v1099;
                  v1100 = 1;
                  v1098 = v1236;
                }
                else
                {
                  v1100 = v1098;
                  v1098 = v1099 << 36;
                }
                v465 = v1098 | v1100;
                v483 = v1480;
                v484 = v1500;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1636;
                v454 = v1655;
                v455 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v458 = v1533;
                v477 = v1596;
              }
              if ((v478 & 1) != 0 && v483)
              {
                v1101 = v458;
                v1597 = v477;
                v1102 = v484;
                WTF::fastFree((unint64_t)v483, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v484 = v1102;
                v477 = v1597;
                StatusReg = v1636;
                v458 = v1101;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v455 = 0uLL;
                v454 = v1655;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v478 = *(_QWORD *)(v484 + 16);
              if ((v478 & 1) != 0)
              {
                v1557 = v477;
                v1513 = v458;
                v503 = *(_QWORD *)(v478 & 0xFFFFFFFF8);
                if ((v478 & 2) != 0
                  || (v504 = *(unsigned int *)((v478 & 0xFFFFFFFF8) + 8), (_DWORD)v504 == 0x3FFFFFFF)
                  || (_DWORD)v504 == -1)
                {
                  v505 = 2;
                }
                else if (v504 >> 28)
                {
                  v1225 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1225 = v503;
                  *(_DWORD *)(v1225 + 8) = v504;
                  v505 = 1;
                  v503 = v1225;
                }
                else
                {
                  v505 = v503;
                  v503 = v504 << 36;
                }
                v478 = v503 | v505;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1636;
                v454 = v1655;
                v455 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v458 = v1513;
                v477 = v1557;
              }
            }
          }
          LOBYTE(v482) = 0;
        }
LABEL_795:
        if ((v478 & 1) != 0)
        {
          v843 = v478 & 0xFFFFFFFF8;
          if ((v478 & 0xFFFFFFFF8) != 0)
          {
            v844 = v458;
            v1568 = v477;
            WTF::fastFree(v843, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v477 = v1568;
            StatusReg = v1636;
            v458 = v844;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v455 = 0uLL;
            v454 = v1655;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v465 & 1) != 0)
        {
          v845 = v465 & 0xFFFFFFFF8;
          if ((v465 & 0xFFFFFFFF8) != 0)
          {
            v846 = v458;
            v847 = v477;
            WTF::fastFree(v845, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v477 = v847;
            v458 = v846;
            a8 = 8064;
            StatusReg = v1636;
            v454 = v1655;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v455 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v482 & 1) != 0)
        {
          v464[2] = v452;
          if ((v456 & 1) != 0 && v477)
          {
            WTF::fastFree(v477, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1636;
            v454 = v1655;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v455 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_772;
        }
        if ((*v464 & 2) != 0 && (*v464 & 0xFFFFFFFF8) != 0)
          v466 = v464;
        v463 = (++v476 + (_DWORD)v463) & v458;
        v464 = (unint64_t *)(v457 + (v463 << 6));
        v465 = *v464;
        if (*v464 != 2)
          continue;
        break;
      }
      if (v466)
      {
        *v466 = 2;
        *(_OWORD *)(v466 + 1) = 0u;
        *(_OWORD *)(v466 + 3) = 0u;
        *(_OWORD *)(v466 + 5) = 0u;
        v466[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_765;
      }
      if ((v465 & 1) != 0 && (v465 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v465 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1636;
        v454 = v1655;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v455 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_764:
      v466 = v464;
LABEL_765:
      *v466 = v456;
      v467 = v1666;
      v468 = v1667;
      v469 = v1668;
      v466[7] = v1669;
      *(_OWORD *)(v466 + 5) = v469;
      *(_OWORD *)(v466 + 3) = v468;
      *(_OWORD *)(v466 + 1) = v467;
      v470 = *a3;
      if (*a3)
        v471 = *(_DWORD *)(v470 - 12) + 1;
      else
        v471 = 1;
      *(_DWORD *)(v470 - 12) = v471;
      v472 = *a3;
      if (*a3)
        v473 = *(_DWORD *)(v472 - 12);
      else
        v473 = 0;
      v474 = (*(_DWORD *)(v472 - 16) + v473);
      v475 = *(unsigned int *)(v472 - 4);
      if (v475 > 0x400)
      {
        if (v475 > 2 * v474)
          goto LABEL_771;
LABEL_830:
        v502 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v466);
        a8 = 8064;
        StatusReg = v1636;
        v454 = v1655;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v455 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v466 = (_QWORD *)v502;
        goto LABEL_771;
      }
      if (3 * v475 <= 4 * v474)
        goto LABEL_830;
LABEL_771:
      v466[2] = v452;
LABEL_772:
      v452 += 80;
      if (v452 >= (unint64_t)v454)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v506 = v9[3];
  if (!v9[3])
    v506 = *((_DWORD *)v9 + 27);
  v507 = ((unint64_t)v9 + v506 + 7) & 0xFFFFFFFFFFFFFFF8;
  v508 = v9[4];
  if (!v9[4])
    v508 = *((_DWORD *)v9 + 28);
  v509 = (char *)v9 + v508;
  if ((unint64_t)v509 > v507)
  {
    v510 = 0uLL;
    a2 = 1;
    a4 = 2;
    a5 = 8;
    a6 = 7;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    a8 = 8064;
    v1637 = StatusReg;
    v1656 = (char *)v9 + v508;
    while (1)
    {
      v511 = *(_QWORD *)(v507 + 72);
      if ((v511 & 1) != 0)
      {
        v713 = *(_QWORD *)(v511 & 0xFFFFFFFF8);
        if ((v511 & 2) != 0
          || ((v714 = *(unsigned int *)((v511 & 0xFFFFFFFF8) + 8), (_DWORD)v714 != 0x3FFFFFFF)
            ? (v715 = (_DWORD)v714 == -1)
            : (v715 = 1),
              v715))
        {
          v716 = 2;
        }
        else if (v714 >> 28)
        {
          v1150 = WTF::fastMalloc((WTF *)0x10);
          a8 = 8064;
          StatusReg = v1637;
          v509 = v1656;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v510 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1150 = v713;
          *(_DWORD *)(v1150 + 8) = v714;
          v716 = 1;
          v713 = v1150;
        }
        else
        {
          v716 = *(_QWORD *)(v511 & 0xFFFFFFFF8);
          v713 = v714 << 36;
        }
        v511 = v713 | v716;
      }
      v1669 = 0;
      v1667 = v510;
      v1668 = v510;
      v1666 = v510;
      v512 = *a3;
      if (*a3)
      {
LABEL_849:
        v513 = *(unsigned int *)(v512 - 8);
        goto LABEL_850;
      }
      v541 = *(_QWORD *)(StatusReg + 752);
      if (!v541)
        goto LABEL_2022;
      v542 = v14[521];
      if (*(_DWORD *)(v541 + 8052) <= v542)
        goto LABEL_2022;
      v543 = v541 + 8 * v542;
      v544 = v543 + 8064;
      *(_BYTE *)(v543 + 8064) = 1;
      v545 = *(unsigned int *)(v543 + 8080);
      if ((_DWORD)v545)
      {
        *(_DWORD *)(v544 + 16) = v545 - *(_DWORD *)(v544 + 20);
        v546 = *(_QWORD *)(v544 + 8) - v545;
        goto LABEL_908;
      }
      v548 = *(_QWORD *)(v544 + 40);
      v549 = *(_QWORD *)(v544 + 24);
      if (v548)
        goto LABEL_912;
      if (*(_BYTE *)(v544 + 5) != 6)
        goto LABEL_2021;
      v997 = *(unsigned int *)(v544 + 32);
      v998 = *(_DWORD *)(v544 + 36);
      if (v997 >= v998)
        goto LABEL_2021;
      *(_QWORD *)(v544 + 8 * v997 + 56) = 0;
      v999 = (unint64_t *)(v541 + 8128 + 8 * v542 + 8 * v997);
      v1000 = v998 - 1 - v997;
      do
      {
        if (!v1000)
        {
          *(_DWORD *)(v544 + 32) = v998;
LABEL_2021:
          *(_BYTE *)v544 = 0;
LABEL_2022:
          v546 = bmalloc_allocate_casual(528, 1);
          a8 = 8064;
          StatusReg = v1637;
          v509 = v1656;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v510 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          goto LABEL_909;
        }
        v549 += 1024;
        v1002 = *v999++;
        v1001 = v1002;
        LODWORD(v997) = v997 + 1;
        --v1000;
      }
      while (!v1002);
      v548 = __rbit64(v1001);
      *(_DWORD *)(v544 + 32) = v997;
      *(_QWORD *)(v544 + 24) = v549;
LABEL_912:
      v550 = __clz(v548);
      *(_QWORD *)(v544 + 40) = v548 & ~(0x8000000000000000 >> v550);
      v546 = v549 + 16 * v550;
LABEL_908:
      *(_BYTE *)v544 = 0;
LABEL_909:
      *(_QWORD *)(v546 + 16) = 2;
      v547 = v546 + 16;
      *(_OWORD *)(v547 + 8) = v510;
      *(_OWORD *)(v547 + 24) = v510;
      *(_OWORD *)(v547 + 40) = v510;
      *(_QWORD *)(v547 + 56) = 0;
      *(_QWORD *)(v547 + 64) = 2;
      *(_OWORD *)(v547 + 72) = v510;
      *(_OWORD *)(v547 + 88) = v510;
      *(_OWORD *)(v547 + 104) = v510;
      *(_QWORD *)(v547 + 120) = 0;
      *(_QWORD *)(v547 + 128) = 2;
      *(_OWORD *)(v547 + 136) = v510;
      *(_OWORD *)(v547 + 152) = v510;
      *(_OWORD *)(v547 + 168) = v510;
      *(_QWORD *)(v547 + 184) = 0;
      *(_QWORD *)(v547 + 192) = 2;
      *(_OWORD *)(v547 + 232) = v510;
      *(_OWORD *)(v547 + 216) = v510;
      *(_OWORD *)(v547 + 200) = v510;
      *(_QWORD *)(v547 + 248) = 0;
      *(_QWORD *)(v547 + 256) = 2;
      *(_OWORD *)(v547 + 280) = v510;
      *(_OWORD *)(v547 + 296) = v510;
      *(_OWORD *)(v547 + 264) = v510;
      *(_QWORD *)(v547 + 312) = 0;
      *(_QWORD *)(v547 + 320) = 2;
      *(_OWORD *)(v547 + 344) = v510;
      *(_OWORD *)(v547 + 360) = v510;
      *(_OWORD *)(v547 + 328) = v510;
      *(_QWORD *)(v547 + 376) = 0;
      *(_QWORD *)(v547 + 384) = 2;
      *(_OWORD *)(v547 + 408) = v510;
      *(_OWORD *)(v547 + 424) = v510;
      *(_OWORD *)(v547 + 392) = v510;
      *(_QWORD *)(v547 + 440) = 0;
      *(_QWORD *)(v547 + 448) = 2;
      *(_QWORD *)(v547 + 504) = 0;
      *(_OWORD *)(v547 + 472) = v510;
      *(_OWORD *)(v547 + 488) = v510;
      *(_OWORD *)(v547 + 456) = v510;
      *a3 = v547;
      *(_DWORD *)(v547 - 4) = 8;
      *(_DWORD *)(*a3 - 8) = 7;
      *(_DWORD *)(*a3 - 16) = 0;
      *(_DWORD *)(*a3 - 12) = 0;
      v512 = *a3;
      if (*a3)
        goto LABEL_849;
      v513 = 0;
LABEL_850:
      if ((v511 & 2) != 0)
      {
        v516 = 0;
        goto LABEL_856;
      }
      v514 = v511;
      if ((v511 & 1) != 0)
      {
        v757 = *(_QWORD *)(v511 & 0xFFFFFFFF8);
        v758 = *(unsigned int *)((v511 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v758 == 0x3FFFFFFF || (_DWORD)v758 == -1)
        {
          v760 = 2;
        }
        else if (v758 >> 28)
        {
          v1137 = v513;
          v1138 = WTF::fastMalloc((WTF *)0x10);
          v513 = v1137;
          a8 = 8064;
          StatusReg = v1637;
          v509 = v1656;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v510 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1138 = v757;
          *(_DWORD *)(v1138 + 8) = v758;
          v760 = 1;
          v757 = v1138;
        }
        else
        {
          v760 = *(_QWORD *)(v511 & 0xFFFFFFFF8);
          v757 = v758 << 36;
        }
        v514 = v757 | v760;
      }
      v515 = 2;
      while (2)
      {
        if ((v514 & 2) != 0)
        {
          v516 = v515 - 1;
          v551 = (uint64_t *)(v514 & 0xFFFFFFFF8);
          if ((v514 & 1) == 0)
          {
            if (!v551)
              goto LABEL_856;
            v552 = 1;
            v517 = (uint64_t)v551;
            goto LABEL_917;
          }
        }
        else
        {
          if ((v514 & 1) == 0)
          {
            v516 = v515 + (v514 >> 36);
            v517 = v514 & 0xFFFFFFFF8;
            if ((v514 & 0xFFFFFFFF8) == 0)
              goto LABEL_856;
            v552 = 1;
            v551 = (uint64_t *)v517;
            goto LABEL_917;
          }
          v551 = (uint64_t *)(v514 & 0xFFFFFFFF8);
          v516 = *(_DWORD *)((v514 & 0xFFFFFFFF8) + 8) + v515;
        }
        v517 = *v551;
        if (*v551)
        {
          v552 = 0;
LABEL_917:
          v553 = *(_QWORD *)(v517 + 8);
          if ((v552 & 1) == 0 && v551)
          {
            v1045 = v513;
            WTF::fastFree((unint64_t)v551, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v513 = v1045;
            a8 = 8064;
            StatusReg = v1637;
            v509 = v1656;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v510 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          v554 = (~(v553 << 32) + v553) ^ ((unint64_t)(~(v553 << 32) + v553) >> 22);
          v555 = 9 * ((v554 + ~(v554 << 13)) ^ ((v554 + ~(v554 << 13)) >> 8));
          v556 = (v555 ^ (v555 >> 15)) + ~((v555 ^ (v555 >> 15)) << 27);
          v515 = v516 + ((v556 >> 31) ^ v556);
          v514 = *(_QWORD *)(v517 + 16);
          if ((v514 & 1) != 0)
          {
            v1046 = *(_QWORD *)(v514 & 0xFFFFFFFF8);
            if ((v514 & 2) != 0
              || (v1047 = *(unsigned int *)((v514 & 0xFFFFFFFF8) + 8), (_DWORD)v1047 == 0x3FFFFFFF)
              || (_DWORD)v1047 == -1)
            {
              v1048 = 2;
            }
            else if (v1047 >> 28)
            {
              v1212 = v513;
              v1213 = WTF::fastMalloc((WTF *)0x10);
              v513 = v1212;
              a8 = 8064;
              StatusReg = v1637;
              v509 = v1656;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v510 = 0uLL;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              *(_QWORD *)v1213 = v1046;
              *(_DWORD *)(v1213 + 8) = v1047;
              v1048 = 1;
              v1046 = v1213;
            }
            else
            {
              v1048 = *(_QWORD *)(v514 & 0xFFFFFFFF8);
              v1046 = v1047 << 36;
            }
            v514 = v1046 | v1048;
          }
          continue;
        }
        break;
      }
      if (v551)
      {
        v774 = v513;
        WTF::fastFree((unint64_t)v551, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v513 = v774;
        a8 = 8064;
        StatusReg = v1637;
        v509 = v1656;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v510 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_856:
      v518 = v516 & v513;
      v519 = (unint64_t *)(v512 + (v518 << 6));
      v520 = *v519;
      if (*v519 == 2)
        goto LABEL_857;
      v531 = 0;
      v521 = 0;
      v532 = v511 & 0xFFFFFFFF8;
      while (2)
      {
        if ((v520 & 2) != 0)
        {
          v540 = (uint64_t *)(v520 & 0xFFFFFFFF8);
          if ((v520 & 1) == 0)
          {
            if (!v540)
              break;
            goto LABEL_870;
          }
          v909 = *v540;
          if (!*v540)
            break;
LABEL_1560:
          v913 = 2;
          goto LABEL_1561;
        }
        if ((v520 & 1) == 0)
          goto LABEL_870;
        v909 = *(_QWORD *)(v520 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v520 & 0xFFFFFFFF8) + 8) == -1 && v909 == 0)
          break;
        v911 = *(unsigned int *)((v520 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v911 == 0x3FFFFFFF || (_DWORD)v911 == -1)
          goto LABEL_1560;
        if (v911 >> 28)
        {
          v1181 = v513;
          v1625 = v532;
          v1182 = WTF::fastMalloc((WTF *)0x10);
          v532 = v1625;
          StatusReg = v1637;
          v513 = v1181;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v510 = 0uLL;
          v509 = v1656;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1182 = v909;
          *(_DWORD *)(v1182 + 8) = v911;
          v913 = 1;
          v909 = v1182;
        }
        else
        {
          v913 = *(_QWORD *)(v520 & 0xFFFFFFFF8);
          v909 = v911 << 36;
        }
LABEL_1561:
        v520 = v909 | v913;
LABEL_870:
        v533 = v511;
        if ((v511 & 1) != 0)
        {
          v848 = *(_QWORD *)v532;
          if ((v511 & 2) != 0 || (v849 = *(unsigned int *)(v532 + 8), (_DWORD)v849 == 0x3FFFFFFF) || (_DWORD)v849 == -1)
          {
            v850 = 2;
          }
          else if (v849 >> 28)
          {
            v1547 = v513;
            v1614 = v532;
            v1161 = WTF::fastMalloc((WTF *)0x10);
            v532 = v1614;
            StatusReg = v1637;
            v513 = v1547;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v510 = 0uLL;
            v509 = v1656;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
            *(_QWORD *)v1161 = v848;
            *(_DWORD *)(v1161 + 8) = v849;
            v850 = 1;
            v848 = v1161;
          }
          else
          {
            v850 = *(_QWORD *)v532;
            v848 = v849 << 36;
          }
          v533 = v848 | v850;
        }
        if ((v520 & 2) != 0)
        {
          v537 = (v533 >> 1) & 1;
        }
        else
        {
          if ((v533 & 2) == 0)
          {
            while (1)
            {
              if ((v520 & 2) != 0)
              {
                LODWORD(v534) = -1;
              }
              else if ((v520 & 1) != 0)
              {
                LODWORD(v534) = *(_DWORD *)((v520 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v534 = v520 >> 36;
              }
              if ((v533 & 2) != 0)
              {
                LODWORD(v535) = -1;
              }
              else if ((v533 & 1) != 0)
              {
                LODWORD(v535) = *(_DWORD *)((v533 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v535 = v533 >> 36;
              }
              if ((_DWORD)v534 != (_DWORD)v535)
                break;
              v536 = (uint64_t *)(v520 & 0xFFFFFFFF8);
              v537 = v520 & 0xFFFFFFFF8;
              if ((v520 & 1) != 0)
                v537 = *v536;
              v538 = (uint64_t *)(v533 & 0xFFFFFFFF8);
              v539 = v533 & 0xFFFFFFFF8;
              if ((v533 & 1) != 0)
                v539 = *v538;
              if (!v537 || !v539)
              {
                LOBYTE(v537) = (v537 != 0) == (v539 != 0);
                goto LABEL_888;
              }
              if (*(_QWORD *)(v537 + 8) != *(_QWORD *)(v539 + 8))
                break;
              if ((v520 & 1) != 0 && v536)
              {
                v1534 = v513;
                v1598 = v532;
                v1501 = v539;
                WTF::fastFree(v520 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v539 = v1501;
                v532 = v1598;
                StatusReg = v1637;
                v513 = v1534;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v510 = 0uLL;
                v509 = v1656;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
                v538 = (uint64_t *)(v533 & 0xFFFFFFFF8);
              }
              v520 = *(_QWORD *)(v537 + 16);
              if ((v520 & 1) != 0)
              {
                v1481 = v538;
                v1502 = v539;
                v1599 = v532;
                v1535 = v513;
                v1103 = *(_QWORD *)(v520 & 0xFFFFFFFF8);
                if ((v520 & 2) != 0
                  || (v1104 = *(unsigned int *)((v520 & 0xFFFFFFFF8) + 8), (_DWORD)v1104 == 0x3FFFFFFF)
                  || (_DWORD)v1104 == -1)
                {
                  v1105 = 2;
                }
                else if (v1104 >> 28)
                {
                  v1237 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1237 = v1103;
                  *(_DWORD *)(v1237 + 8) = v1104;
                  v1105 = 1;
                  v1103 = v1237;
                }
                else
                {
                  v1105 = v1103;
                  v1103 = v1104 << 36;
                }
                v520 = v1103 | v1105;
                v538 = v1481;
                v539 = v1502;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1637;
                v509 = v1656;
                v510 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v513 = v1535;
                v532 = v1599;
              }
              if ((v533 & 1) != 0 && v538)
              {
                v1106 = v513;
                v1600 = v532;
                v1107 = v539;
                WTF::fastFree((unint64_t)v538, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
                v539 = v1107;
                v532 = v1600;
                StatusReg = v1637;
                v513 = v1106;
                a8 = 8064;
                a6 = 7;
                a5 = 8;
                a4 = 2;
                a2 = 1;
                v510 = 0uLL;
                v509 = v1656;
                v14 = (_DWORD *)&unk_1ECF54000;
                a3 = v1663;
              }
              v533 = *(_QWORD *)(v539 + 16);
              if ((v533 & 1) != 0)
              {
                v1558 = v532;
                v1514 = v513;
                v558 = *(_QWORD *)(v533 & 0xFFFFFFFF8);
                if ((v533 & 2) != 0
                  || (v559 = *(unsigned int *)((v533 & 0xFFFFFFFF8) + 8), (_DWORD)v559 == 0x3FFFFFFF)
                  || (_DWORD)v559 == -1)
                {
                  v560 = 2;
                }
                else if (v559 >> 28)
                {
                  v1226 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1226 = v558;
                  *(_DWORD *)(v1226 + 8) = v559;
                  v560 = 1;
                  v558 = v1226;
                }
                else
                {
                  v560 = v558;
                  v558 = v559 << 36;
                }
                v533 = v558 | v560;
                a3 = v1663;
                v14 = (_DWORD *)&unk_1ECF54000;
                StatusReg = v1637;
                v509 = v1656;
                v510 = 0uLL;
                a2 = 1;
                a4 = 2;
                a5 = 8;
                a6 = 7;
                a8 = 8064;
                v513 = v1514;
                v532 = v1558;
              }
            }
          }
          LOBYTE(v537) = 0;
        }
LABEL_888:
        if ((v533 & 1) != 0)
        {
          v851 = v533 & 0xFFFFFFFF8;
          if ((v533 & 0xFFFFFFFF8) != 0)
          {
            v852 = v513;
            v1569 = v532;
            WTF::fastFree(v851, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v532 = v1569;
            StatusReg = v1637;
            v513 = v852;
            a8 = 8064;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v510 = 0uLL;
            v509 = v1656;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v520 & 1) != 0)
        {
          v853 = v520 & 0xFFFFFFFF8;
          if ((v520 & 0xFFFFFFFF8) != 0)
          {
            v854 = v513;
            v855 = v532;
            WTF::fastFree(v853, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            v532 = v855;
            v513 = v854;
            a8 = 8064;
            StatusReg = v1637;
            v509 = v1656;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v510 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
        }
        if ((v537 & 1) != 0)
        {
          v519[2] = v507;
          if ((v511 & 1) != 0 && v532)
          {
            WTF::fastFree(v532, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
            a8 = 8064;
            StatusReg = v1637;
            v509 = v1656;
            a6 = 7;
            a5 = 8;
            a4 = 2;
            a2 = 1;
            v510 = 0uLL;
            v14 = (_DWORD *)&unk_1ECF54000;
            a3 = v1663;
          }
          goto LABEL_865;
        }
        if ((*v519 & 2) != 0 && (*v519 & 0xFFFFFFFF8) != 0)
          v521 = v519;
        v518 = (++v531 + (_DWORD)v518) & v513;
        v519 = (unint64_t *)(v512 + (v518 << 6));
        v520 = *v519;
        if (*v519 != 2)
          continue;
        break;
      }
      if (v521)
      {
        *v521 = 2;
        *(_OWORD *)(v521 + 1) = 0u;
        *(_OWORD *)(v521 + 3) = 0u;
        *(_OWORD *)(v521 + 5) = 0u;
        v521[7] = 0;
        --*(_DWORD *)(*a3 - 16);
        goto LABEL_858;
      }
      if ((v520 & 1) != 0 && (v520 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v520 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        a8 = 8064;
        StatusReg = v1637;
        v509 = v1656;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v510 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
LABEL_857:
      v521 = v519;
LABEL_858:
      *v521 = v511;
      v522 = v1666;
      v523 = v1667;
      v524 = v1668;
      v521[7] = v1669;
      *(_OWORD *)(v521 + 5) = v524;
      *(_OWORD *)(v521 + 3) = v523;
      *(_OWORD *)(v521 + 1) = v522;
      v525 = *a3;
      if (*a3)
        v526 = *(_DWORD *)(v525 - 12) + 1;
      else
        v526 = 1;
      *(_DWORD *)(v525 - 12) = v526;
      v527 = *a3;
      if (*a3)
        v528 = *(_DWORD *)(v527 - 12);
      else
        v528 = 0;
      v529 = (*(_DWORD *)(v527 - 16) + v528);
      v530 = *(unsigned int *)(v527 - 4);
      if (v530 > 0x400)
      {
        if (v530 > 2 * v529)
          goto LABEL_864;
LABEL_923:
        v557 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v521);
        a8 = 8064;
        StatusReg = v1637;
        v509 = v1656;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v510 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        v521 = (_QWORD *)v557;
        goto LABEL_864;
      }
      if (3 * v530 <= 4 * v529)
        goto LABEL_923;
LABEL_864:
      v521[2] = v507;
LABEL_865:
      v507 += 80;
      if (v507 >= (unint64_t)v509)
      {
        v9 = (unsigned __int16 *)a1[17];
        break;
      }
    }
  }
  v561 = v9[24];
  if (!v9[24])
    v561 = *((_DWORD *)v9 + 48);
  v562 = ((unint64_t)v9 + v561 + 7) & 0xFFFFFFFFFFFFFFF8;
  v563 = v9[25];
  if (!v9[25])
    v563 = *((_DWORD *)v9 + 49);
  v564 = (char *)v9 + v563;
  if ((unint64_t)v564 <= v562)
    goto LABEL_1027;
  v565 = 0uLL;
  a2 = 1;
  a4 = 2;
  a5 = 8;
  a6 = 7;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  a8 = 8064;
  v1638 = StatusReg;
  v1657 = (char *)v9 + v563;
  do
  {
    v566 = *(_QWORD *)(v562 + 72);
    if ((v566 & 1) != 0)
    {
      v717 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
      if ((v566 & 2) != 0
        || ((v718 = *(unsigned int *)((v566 & 0xFFFFFFFF8) + 8), (_DWORD)v718 != 0x3FFFFFFF)
          ? (v719 = (_DWORD)v718 == -1)
          : (v719 = 1),
            v719))
      {
        v720 = 2;
      }
      else if (v718 >> 28)
      {
        v1151 = WTF::fastMalloc((WTF *)0x10);
        a8 = 8064;
        StatusReg = v1638;
        v564 = v1657;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v565 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        *(_QWORD *)v1151 = v717;
        *(_DWORD *)(v1151 + 8) = v718;
        v720 = 1;
        v717 = v1151;
      }
      else
      {
        v720 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
        v717 = v718 << 36;
      }
      v566 = v717 | v720;
    }
    v1669 = 0;
    v1667 = v565;
    v1668 = v565;
    v1666 = v565;
    v567 = *a3;
    if (*a3)
      goto LABEL_942;
    v596 = *(_QWORD *)(StatusReg + 752);
    if (v596)
    {
      v597 = v14[521];
      if (*(_DWORD *)(v596 + 8052) > v597)
      {
        v598 = v596 + 8 * v597;
        v599 = v598 + 8064;
        *(_BYTE *)(v598 + 8064) = 1;
        v600 = *(unsigned int *)(v598 + 8080);
        if ((_DWORD)v600)
        {
          *(_DWORD *)(v599 + 16) = v600 - *(_DWORD *)(v599 + 20);
          v601 = *(_QWORD *)(v599 + 8) - v600;
LABEL_1001:
          *(_BYTE *)v599 = 0;
          goto LABEL_1002;
        }
        v603 = *(_QWORD *)(v599 + 40);
        v604 = *(_QWORD *)(v599 + 24);
        if (v603)
        {
LABEL_1005:
          v605 = __clz(v603);
          *(_QWORD *)(v599 + 40) = v603 & ~(0x8000000000000000 >> v605);
          v601 = v604 + 16 * v605;
          goto LABEL_1001;
        }
        if (*(_BYTE *)(v599 + 5) == 6)
        {
          v1003 = *(unsigned int *)(v599 + 32);
          v1004 = *(_DWORD *)(v599 + 36);
          if (v1003 < v1004)
          {
            *(_QWORD *)(v599 + 8 * v1003 + 56) = 0;
            v1005 = (unint64_t *)(v596 + 8128 + 8 * v597 + 8 * v1003);
            v1006 = v1004 - 1 - v1003;
            while (v1006)
            {
              v604 += 1024;
              v1008 = *v1005++;
              v1007 = v1008;
              LODWORD(v1003) = v1003 + 1;
              --v1006;
              if (v1008)
              {
                v603 = __rbit64(v1007);
                *(_DWORD *)(v599 + 32) = v1003;
                *(_QWORD *)(v599 + 24) = v604;
                goto LABEL_1005;
              }
            }
            *(_DWORD *)(v599 + 32) = v1004;
          }
        }
        *(_BYTE *)v599 = 0;
      }
    }
    v601 = bmalloc_allocate_casual(528, 1);
    a8 = 8064;
    StatusReg = v1638;
    v564 = v1657;
    a6 = 7;
    a5 = 8;
    a4 = 2;
    a2 = 1;
    v565 = 0uLL;
    v14 = (_DWORD *)&unk_1ECF54000;
    a3 = v1663;
LABEL_1002:
    *(_QWORD *)(v601 + 16) = 2;
    v602 = v601 + 16;
    *(_OWORD *)(v602 + 8) = v565;
    *(_OWORD *)(v602 + 24) = v565;
    *(_OWORD *)(v602 + 40) = v565;
    *(_QWORD *)(v602 + 56) = 0;
    *(_QWORD *)(v602 + 64) = 2;
    *(_OWORD *)(v602 + 72) = v565;
    *(_OWORD *)(v602 + 88) = v565;
    *(_OWORD *)(v602 + 104) = v565;
    *(_QWORD *)(v602 + 120) = 0;
    *(_QWORD *)(v602 + 128) = 2;
    *(_OWORD *)(v602 + 136) = v565;
    *(_OWORD *)(v602 + 152) = v565;
    *(_OWORD *)(v602 + 168) = v565;
    *(_QWORD *)(v602 + 184) = 0;
    *(_QWORD *)(v602 + 192) = 2;
    *(_OWORD *)(v602 + 232) = v565;
    *(_OWORD *)(v602 + 216) = v565;
    *(_OWORD *)(v602 + 200) = v565;
    *(_QWORD *)(v602 + 248) = 0;
    *(_QWORD *)(v602 + 256) = 2;
    *(_OWORD *)(v602 + 280) = v565;
    *(_OWORD *)(v602 + 296) = v565;
    *(_OWORD *)(v602 + 264) = v565;
    *(_QWORD *)(v602 + 312) = 0;
    *(_QWORD *)(v602 + 320) = 2;
    *(_OWORD *)(v602 + 344) = v565;
    *(_OWORD *)(v602 + 360) = v565;
    *(_OWORD *)(v602 + 328) = v565;
    *(_QWORD *)(v602 + 376) = 0;
    *(_QWORD *)(v602 + 384) = 2;
    *(_OWORD *)(v602 + 408) = v565;
    *(_OWORD *)(v602 + 424) = v565;
    *(_OWORD *)(v602 + 392) = v565;
    *(_QWORD *)(v602 + 440) = 0;
    *(_QWORD *)(v602 + 448) = 2;
    *(_QWORD *)(v602 + 504) = 0;
    *(_OWORD *)(v602 + 472) = v565;
    *(_OWORD *)(v602 + 488) = v565;
    *(_OWORD *)(v602 + 456) = v565;
    *a3 = v602;
    *(_DWORD *)(v602 - 4) = 8;
    *(_DWORD *)(*a3 - 8) = 7;
    *(_DWORD *)(*a3 - 16) = 0;
    *(_DWORD *)(*a3 - 12) = 0;
    v567 = *a3;
    if (!*a3)
    {
      v568 = 0;
      goto LABEL_943;
    }
LABEL_942:
    v568 = *(unsigned int *)(v567 - 8);
LABEL_943:
    if ((v566 & 2) != 0)
    {
      v571 = 0;
      goto LABEL_949;
    }
    v569 = v566;
    if ((v566 & 1) != 0)
    {
      v761 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
      v762 = *(unsigned int *)((v566 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v762 == 0x3FFFFFFF || (_DWORD)v762 == -1)
      {
        v764 = 2;
      }
      else if (v762 >> 28)
      {
        v1139 = v568;
        v1140 = WTF::fastMalloc((WTF *)0x10);
        v568 = v1139;
        a8 = 8064;
        StatusReg = v1638;
        v564 = v1657;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v565 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        *(_QWORD *)v1140 = v761;
        *(_DWORD *)(v1140 + 8) = v762;
        v764 = 1;
        v761 = v1140;
      }
      else
      {
        v764 = *(_QWORD *)(v566 & 0xFFFFFFFF8);
        v761 = v762 << 36;
      }
      v569 = v761 | v764;
    }
    v570 = 2;
    while ((v569 & 2) != 0)
    {
      v571 = v570 - 1;
      v606 = (uint64_t *)(v569 & 0xFFFFFFFF8);
      if ((v569 & 1) != 0)
        goto LABEL_1350;
      if (!v606)
        goto LABEL_949;
      v607 = 1;
      v572 = (uint64_t)v606;
LABEL_1010:
      v608 = *(_QWORD *)(v572 + 8);
      if ((v607 & 1) == 0 && v606)
      {
        v1049 = v568;
        WTF::fastFree((unint64_t)v606, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
        v568 = v1049;
        a8 = 8064;
        StatusReg = v1638;
        v564 = v1657;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v565 = 0uLL;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
      }
      v609 = (~(v608 << 32) + v608) ^ ((unint64_t)(~(v608 << 32) + v608) >> 22);
      v610 = 9 * ((v609 + ~(v609 << 13)) ^ ((v609 + ~(v609 << 13)) >> 8));
      v611 = (v610 ^ (v610 >> 15)) + ~((v610 ^ (v610 >> 15)) << 27);
      v570 = v571 + ((v611 >> 31) ^ v611);
      v569 = *(_QWORD *)(v572 + 16);
      if ((v569 & 1) != 0)
      {
        v1050 = *(_QWORD *)(v569 & 0xFFFFFFFF8);
        if ((v569 & 2) != 0
          || (v1051 = *(unsigned int *)((v569 & 0xFFFFFFFF8) + 8), (_DWORD)v1051 == 0x3FFFFFFF)
          || (_DWORD)v1051 == -1)
        {
          v1052 = 2;
        }
        else if (v1051 >> 28)
        {
          v1214 = v568;
          v1215 = WTF::fastMalloc((WTF *)0x10);
          v568 = v1214;
          a8 = 8064;
          StatusReg = v1638;
          v564 = v1657;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v565 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1215 = v1050;
          *(_DWORD *)(v1215 + 8) = v1051;
          v1052 = 1;
          v1050 = v1215;
        }
        else
        {
          v1052 = *(_QWORD *)(v569 & 0xFFFFFFFF8);
          v1050 = v1051 << 36;
        }
        v569 = v1050 | v1052;
      }
    }
    if ((v569 & 1) == 0)
    {
      v571 = v570 + (v569 >> 36);
      v572 = v569 & 0xFFFFFFFF8;
      if ((v569 & 0xFFFFFFFF8) == 0)
        goto LABEL_949;
      v607 = 1;
      v606 = (uint64_t *)v572;
      goto LABEL_1010;
    }
    v606 = (uint64_t *)(v569 & 0xFFFFFFFF8);
    v571 = *(_DWORD *)((v569 & 0xFFFFFFFF8) + 8) + v570;
LABEL_1350:
    v572 = *v606;
    if (*v606)
    {
      v607 = 0;
      goto LABEL_1010;
    }
    if (v606)
    {
      v775 = v568;
      WTF::fastFree((unint64_t)v606, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
      v568 = v775;
      a8 = 8064;
      StatusReg = v1638;
      v564 = v1657;
      a6 = 7;
      a5 = 8;
      a4 = 2;
      a2 = 1;
      v565 = 0uLL;
      v14 = (_DWORD *)&unk_1ECF54000;
      a3 = v1663;
    }
LABEL_949:
    v573 = v571 & v568;
    v574 = (unint64_t *)(v567 + (v573 << 6));
    v575 = *v574;
    if (*v574 == 2)
      goto LABEL_950;
    v586 = 0;
    v576 = 0;
    v587 = v566 & 0xFFFFFFFF8;
    while (2)
    {
      if ((v575 & 2) != 0)
      {
        v595 = (uint64_t *)(v575 & 0xFFFFFFFF8);
        if ((v575 & 1) == 0)
        {
          if (!v595)
            break;
          goto LABEL_963;
        }
        v914 = *v595;
        if (!*v595)
          break;
LABEL_1571:
        v918 = 2;
        goto LABEL_1572;
      }
      if ((v575 & 1) == 0)
        goto LABEL_963;
      v914 = *(_QWORD *)(v575 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v575 & 0xFFFFFFFF8) + 8) == -1 && v914 == 0)
        break;
      v916 = *(unsigned int *)((v575 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v916 == 0x3FFFFFFF || (_DWORD)v916 == -1)
        goto LABEL_1571;
      if (v916 >> 28)
      {
        v1183 = v568;
        v1626 = v587;
        v1184 = WTF::fastMalloc((WTF *)0x10);
        v587 = v1626;
        StatusReg = v1638;
        v568 = v1183;
        a8 = 8064;
        a6 = 7;
        a5 = 8;
        a4 = 2;
        a2 = 1;
        v565 = 0uLL;
        v564 = v1657;
        v14 = (_DWORD *)&unk_1ECF54000;
        a3 = v1663;
        *(_QWORD *)v1184 = v914;
        *(_DWORD *)(v1184 + 8) = v916;
        v918 = 1;
        v914 = v1184;
      }
      else
      {
        v918 = *(_QWORD *)(v575 & 0xFFFFFFFF8);
        v914 = v916 << 36;
      }
LABEL_1572:
      v575 = v914 | v918;
LABEL_963:
      v588 = v566;
      if ((v566 & 1) != 0)
      {
        v856 = *(_QWORD *)v587;
        if ((v566 & 2) != 0 || (v857 = *(unsigned int *)(v587 + 8), (_DWORD)v857 == 0x3FFFFFFF) || (_DWORD)v857 == -1)
        {
          v858 = 2;
        }
        else if (v857 >> 28)
        {
          v1548 = v568;
          v1615 = v587;
          v1162 = WTF::fastMalloc((WTF *)0x10);
          v587 = v1615;
          StatusReg = v1638;
          v568 = v1548;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v565 = 0uLL;
          v564 = v1657;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
          *(_QWORD *)v1162 = v856;
          *(_DWORD *)(v1162 + 8) = v857;
          v858 = 1;
          v856 = v1162;
        }
        else
        {
          v858 = *(_QWORD *)v587;
          v856 = v857 << 36;
        }
        v588 = v856 | v858;
      }
      if ((v575 & 2) != 0)
      {
        v592 = (v588 >> 1) & 1;
      }
      else
      {
        if ((v588 & 2) == 0)
        {
          while (1)
          {
            if ((v575 & 2) != 0)
            {
              LODWORD(v589) = -1;
            }
            else if ((v575 & 1) != 0)
            {
              LODWORD(v589) = *(_DWORD *)((v575 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v589 = v575 >> 36;
            }
            if ((v588 & 2) != 0)
            {
              LODWORD(v590) = -1;
            }
            else if ((v588 & 1) != 0)
            {
              LODWORD(v590) = *(_DWORD *)((v588 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v590 = v588 >> 36;
            }
            if ((_DWORD)v589 != (_DWORD)v590)
              break;
            v591 = (uint64_t *)(v575 & 0xFFFFFFFF8);
            v592 = v575 & 0xFFFFFFFF8;
            if ((v575 & 1) != 0)
              v592 = *v591;
            v593 = (uint64_t *)(v588 & 0xFFFFFFFF8);
            v594 = v588 & 0xFFFFFFFF8;
            if ((v588 & 1) != 0)
              v594 = *v593;
            if (!v592 || !v594)
            {
              LOBYTE(v592) = (v592 != 0) == (v594 != 0);
              goto LABEL_981;
            }
            if (*(_QWORD *)(v592 + 8) != *(_QWORD *)(v594 + 8))
              break;
            if ((v575 & 1) != 0 && v591)
            {
              v1536 = v568;
              v1601 = v587;
              v1503 = v594;
              WTF::fastFree(v575 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
              v594 = v1503;
              v587 = v1601;
              StatusReg = v1638;
              v568 = v1536;
              a8 = 8064;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v565 = 0uLL;
              v564 = v1657;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
              v593 = (uint64_t *)(v588 & 0xFFFFFFFF8);
            }
            v575 = *(_QWORD *)(v592 + 16);
            if ((v575 & 1) != 0)
            {
              v1482 = v593;
              v1504 = v594;
              v1602 = v587;
              v1537 = v568;
              v1108 = *(_QWORD *)(v575 & 0xFFFFFFFF8);
              if ((v575 & 2) != 0
                || (v1109 = *(unsigned int *)((v575 & 0xFFFFFFFF8) + 8), (_DWORD)v1109 == 0x3FFFFFFF)
                || (_DWORD)v1109 == -1)
              {
                v1110 = 2;
              }
              else if (v1109 >> 28)
              {
                v1238 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1238 = v1108;
                *(_DWORD *)(v1238 + 8) = v1109;
                v1110 = 1;
                v1108 = v1238;
              }
              else
              {
                v1110 = v1108;
                v1108 = v1109 << 36;
              }
              v575 = v1108 | v1110;
              v593 = v1482;
              v594 = v1504;
              a3 = v1663;
              v14 = (_DWORD *)&unk_1ECF54000;
              StatusReg = v1638;
              v564 = v1657;
              v565 = 0uLL;
              a2 = 1;
              a4 = 2;
              a5 = 8;
              a6 = 7;
              a8 = 8064;
              v568 = v1537;
              v587 = v1602;
            }
            if ((v588 & 1) != 0 && v593)
            {
              v1111 = v568;
              v1603 = v587;
              v1112 = v594;
              WTF::fastFree((unint64_t)v593, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
              v594 = v1112;
              v587 = v1603;
              StatusReg = v1638;
              v568 = v1111;
              a8 = 8064;
              a6 = 7;
              a5 = 8;
              a4 = 2;
              a2 = 1;
              v565 = 0uLL;
              v564 = v1657;
              v14 = (_DWORD *)&unk_1ECF54000;
              a3 = v1663;
            }
            v588 = *(_QWORD *)(v594 + 16);
            if ((v588 & 1) != 0)
            {
              v1559 = v587;
              v1515 = v568;
              v613 = *(_QWORD *)(v588 & 0xFFFFFFFF8);
              if ((v588 & 2) != 0
                || (v614 = *(unsigned int *)((v588 & 0xFFFFFFFF8) + 8), (_DWORD)v614 == 0x3FFFFFFF)
                || (_DWORD)v614 == -1)
              {
                v615 = 2;
              }
              else if (v614 >> 28)
              {
                v1227 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1227 = v613;
                *(_DWORD *)(v1227 + 8) = v614;
                v615 = 1;
                v613 = v1227;
              }
              else
              {
                v615 = v613;
                v613 = v614 << 36;
              }
              v588 = v613 | v615;
              a3 = v1663;
              v14 = (_DWORD *)&unk_1ECF54000;
              StatusReg = v1638;
              v564 = v1657;
              v565 = 0uLL;
              a2 = 1;
              a4 = 2;
              a5 = 8;
              a6 = 7;
              a8 = 8064;
              v568 = v1515;
              v587 = v1559;
            }
          }
        }
        LOBYTE(v592) = 0;
      }
LABEL_981:
      if ((v588 & 1) != 0)
      {
        v859 = v588 & 0xFFFFFFFF8;
        if ((v588 & 0xFFFFFFFF8) != 0)
        {
          v860 = v568;
          v1570 = v587;
          WTF::fastFree(v859, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
          v587 = v1570;
          StatusReg = v1638;
          v568 = v860;
          a8 = 8064;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v565 = 0uLL;
          v564 = v1657;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
        }
      }
      if ((v575 & 1) != 0)
      {
        v861 = v575 & 0xFFFFFFFF8;
        if ((v575 & 0xFFFFFFFF8) != 0)
        {
          v862 = v568;
          v863 = v587;
          WTF::fastFree(v861, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
          v587 = v863;
          v568 = v862;
          a8 = 8064;
          StatusReg = v1638;
          v564 = v1657;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v565 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
        }
      }
      if ((v592 & 1) != 0)
      {
        v574[2] = v562;
        if ((v566 & 1) != 0 && v587)
        {
          WTF::fastFree(v587, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
          a8 = 8064;
          StatusReg = v1638;
          v564 = v1657;
          a6 = 7;
          a5 = 8;
          a4 = 2;
          a2 = 1;
          v565 = 0uLL;
          v14 = (_DWORD *)&unk_1ECF54000;
          a3 = v1663;
        }
        goto LABEL_958;
      }
      if ((*v574 & 2) != 0 && (*v574 & 0xFFFFFFFF8) != 0)
        v576 = v574;
      v573 = (++v586 + (_DWORD)v573) & v568;
      v574 = (unint64_t *)(v567 + (v573 << 6));
      v575 = *v574;
      if (*v574 != 2)
        continue;
      break;
    }
    if (v576)
    {
      *v576 = 2;
      *(_OWORD *)(v576 + 1) = 0u;
      *(_OWORD *)(v576 + 3) = 0u;
      *(_OWORD *)(v576 + 5) = 0u;
      v576[7] = 0;
      --*(_DWORD *)(*a3 - 16);
      goto LABEL_951;
    }
    if ((v575 & 1) != 0 && (v575 & 0xFFFFFFFF8) != 0)
    {
      WTF::fastFree(v575 & 0xFFFFFFFF8, (void *)1, (uint64_t)a3, 2, 8, 7, StatusReg, 8064);
      a8 = 8064;
      StatusReg = v1638;
      v564 = v1657;
      a6 = 7;
      a5 = 8;
      a4 = 2;
      a2 = 1;
      v565 = 0uLL;
      v14 = (_DWORD *)&unk_1ECF54000;
      a3 = v1663;
    }
LABEL_950:
    v576 = v574;
LABEL_951:
    *v576 = v566;
    v577 = v1666;
    v578 = v1667;
    v579 = v1668;
    v576[7] = v1669;
    *(_OWORD *)(v576 + 5) = v579;
    *(_OWORD *)(v576 + 3) = v578;
    *(_OWORD *)(v576 + 1) = v577;
    v580 = *a3;
    if (*a3)
      v581 = *(_DWORD *)(v580 - 12) + 1;
    else
      v581 = 1;
    *(_DWORD *)(v580 - 12) = v581;
    v582 = *a3;
    if (*a3)
      v583 = *(_DWORD *)(v582 - 12);
    else
      v583 = 0;
    v584 = (*(_DWORD *)(v582 - 16) + v583);
    v585 = *(unsigned int *)(v582 - 4);
    if (v585 > 0x400)
    {
      if (v585 > 2 * v584)
        goto LABEL_957;
LABEL_1016:
      v612 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, v576);
      a8 = 8064;
      StatusReg = v1638;
      v564 = v1657;
      a6 = 7;
      a5 = 8;
      a4 = 2;
      a2 = 1;
      v565 = 0uLL;
      v14 = (_DWORD *)&unk_1ECF54000;
      a3 = v1663;
      v576 = (_QWORD *)v612;
      goto LABEL_957;
    }
    if (3 * v585 <= 4 * v584)
      goto LABEL_1016;
LABEL_957:
    v576[2] = v562;
LABEL_958:
    v562 += 96;
  }
  while (v562 < (unint64_t)v564);
LABEL_1027:
  v616 = a1[15];
  if (!v616)
    return;
  v617 = *(unsigned __int8 *)(v616 + 12);
  if ((v617 - 3) > 2)
    return;
  if ((v617 & 0xFE) != 4)
  {
    v633 = (unsigned int *)a1[16];
    if (!v633)
      goto LABEL_2453;
    v634 = *v633;
    if (!(_DWORD)v634)
      goto LABEL_2453;
    v635 = &v633[-34 * v634];
    v636 = 0uLL;
    v1658 = (unsigned int *)a1[16];
    while (1)
    {
      v1669 = 0;
      v1667 = v636;
      v1668 = v636;
      v1666 = v636;
      v637 = *a3;
      if (*a3
        || (WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, 0), v636 = 0uLL, v633 = v1658, a3 = v1663, (v637 = *v1663) != 0))
      {
        v638 = *(unsigned int *)(v637 - 8);
      }
      else
      {
        v638 = 0;
      }
      v639 = *(_QWORD *)v635;
      if ((*(_QWORD *)v635 & 2) != 0)
      {
        v641 = 0;
        goto LABEL_1049;
      }
      if ((v639 & 1) != 0)
      {
        v919 = v639 & 0xFFFFFFFF8;
        v920 = *(_QWORD *)v919;
        v921 = *(unsigned int *)(v919 + 8);
        if ((_DWORD)v921 == 0x3FFFFFFF || (_DWORD)v921 == -1)
        {
          v923 = 2;
        }
        else if (v921 >> 28)
        {
          v1185 = v638;
          v1186 = WTF::fastMalloc((WTF *)0x10);
          v638 = v1185;
          v636 = 0uLL;
          v633 = v1658;
          a3 = v1663;
          *(_QWORD *)v1186 = v920;
          *(_DWORD *)(v1186 + 8) = v921;
          v923 = 1;
          v920 = v1186;
        }
        else
        {
          v923 = *(_QWORD *)v919;
          v920 = v921 << 36;
        }
        v639 = v920 | v923;
      }
      v640 = 2;
      while ((v639 & 2) != 0)
      {
        v641 = v640 - 1;
        v666 = (uint64_t *)(v639 & 0xFFFFFFFF8);
        if ((v639 & 1) != 0)
          goto LABEL_1613;
        if (!v666)
          goto LABEL_1049;
        v667 = 1;
        v642 = (uint64_t)v666;
LABEL_1104:
        v668 = *(_QWORD *)(v642 + 8);
        if ((v667 & 1) == 0 && v666)
        {
          v1053 = v638;
          WTF::fastFree((unint64_t)v666, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
          v638 = v1053;
          v636 = 0uLL;
          v633 = v1658;
          a3 = v1663;
        }
        v669 = (~(v668 << 32) + v668) ^ ((unint64_t)(~(v668 << 32) + v668) >> 22);
        v670 = 9 * ((v669 + ~(v669 << 13)) ^ ((v669 + ~(v669 << 13)) >> 8));
        v671 = (v670 ^ (v670 >> 15)) + ~((v670 ^ (v670 >> 15)) << 27);
        v640 = v641 + ((v671 >> 31) ^ v671);
        v639 = *(_QWORD *)(v642 + 16);
        if ((v639 & 1) != 0)
        {
          v1054 = *(_QWORD *)(v639 & 0xFFFFFFFF8);
          if ((v639 & 2) != 0
            || (v1055 = *(unsigned int *)((v639 & 0xFFFFFFFF8) + 8), (_DWORD)v1055 == 0x3FFFFFFF)
            || (_DWORD)v1055 == -1)
          {
            v1056 = 2;
          }
          else
          {
            v1057 = v638;
            if (v1055 >> 28)
            {
              v1216 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1216 = v1054;
              *(_DWORD *)(v1216 + 8) = v1055;
              v1056 = 1;
              v1054 = v1216;
            }
            else
            {
              v1056 = *(_QWORD *)(v639 & 0xFFFFFFFF8);
              v1054 = v1055 << 36;
            }
            a3 = v1663;
            v633 = v1658;
            v636 = 0uLL;
            v638 = v1057;
          }
          v639 = v1054 | v1056;
        }
      }
      if ((v639 & 1) == 0)
        break;
      v666 = (uint64_t *)(v639 & 0xFFFFFFFF8);
      v641 = *(_DWORD *)((v639 & 0xFFFFFFFF8) + 8) + v640;
LABEL_1613:
      v642 = *v666;
      if (*v666)
      {
        v667 = 0;
        goto LABEL_1104;
      }
      if (v666)
      {
        v928 = v638;
        WTF::fastFree((unint64_t)v666, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
        v638 = v928;
        v636 = 0uLL;
        v633 = v1658;
        a3 = v1663;
      }
LABEL_1049:
      v643 = v641 & v638;
      v644 = v637 + (v643 << 6);
      v645 = *(_QWORD *)v644;
      if (*(_QWORD *)v644 == 2)
        goto LABEL_1050;
      v656 = 0;
      v657 = 0;
      while (2)
      {
        if ((v645 & 2) != 0)
        {
          v665 = (uint64_t *)(v645 & 0xFFFFFFFF8);
          if ((v645 & 1) == 0)
          {
            if (!v665)
              break;
            goto LABEL_1065;
          }
          v938 = *v665;
          if (!*v665)
            break;
LABEL_1637:
          v942 = 2;
          goto LABEL_1638;
        }
        if ((v645 & 1) == 0)
          goto LABEL_1065;
        v938 = *(_QWORD *)(v645 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v645 & 0xFFFFFFFF8) + 8) == -1 && v938 == 0)
          break;
        v940 = *(unsigned int *)((v645 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v940 == 0x3FFFFFFF || (_DWORD)v940 == -1)
          goto LABEL_1637;
        if (v940 >> 28)
        {
          v1191 = v638;
          v1192 = v657;
          v1193 = WTF::fastMalloc((WTF *)0x10);
          v657 = v1192;
          v638 = v1191;
          v636 = 0uLL;
          v633 = v1658;
          a3 = v1663;
          *(_QWORD *)v1193 = v938;
          *(_DWORD *)(v1193 + 8) = v940;
          v942 = 1;
          v938 = v1193;
        }
        else
        {
          v942 = v938;
          v938 = v940 << 36;
        }
LABEL_1638:
        v645 = v938 | v942;
LABEL_1065:
        v658 = *(_QWORD *)v635;
        if ((*(_QWORD *)v635 & 1) != 0)
        {
          v929 = *(_QWORD *)(v658 & 0xFFFFFFFF8);
          if ((v658 & 2) != 0
            || ((v930 = *(unsigned int *)((v658 & 0xFFFFFFFF8) + 8), (_DWORD)v930 != 0x3FFFFFFF)
              ? (v931 = (_DWORD)v930 == -1)
              : (v931 = 1),
                v931))
          {
            v932 = 2;
          }
          else if (v930 >> 28)
          {
            v1188 = v638;
            v1189 = v657;
            v1190 = WTF::fastMalloc((WTF *)0x10);
            v657 = v1189;
            v638 = v1188;
            v636 = 0uLL;
            v633 = v1658;
            a3 = v1663;
            *(_QWORD *)v1190 = v929;
            *(_DWORD *)(v1190 + 8) = v930;
            v932 = 1;
            v929 = v1190;
          }
          else
          {
            v932 = *(_QWORD *)(v658 & 0xFFFFFFFF8);
            v929 = v930 << 36;
          }
          v658 = v929 | v932;
        }
        if ((v645 & 2) != 0)
        {
          v664 = (v658 >> 1) & 1;
        }
        else if ((v658 & 2) != 0)
        {
LABEL_1082:
          LOBYTE(v664) = 0;
        }
        else
        {
          while (1)
          {
            if ((v645 & 2) != 0)
            {
              LODWORD(v659) = -1;
            }
            else if ((v645 & 1) != 0)
            {
              LODWORD(v659) = *(_DWORD *)((v645 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v659 = v645 >> 36;
            }
            if ((v658 & 2) != 0)
            {
              LODWORD(v660) = -1;
            }
            else if ((v658 & 1) != 0)
            {
              LODWORD(v660) = *(_DWORD *)((v658 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v660 = v658 >> 36;
            }
            if ((_DWORD)v659 != (_DWORD)v660)
              goto LABEL_1082;
            v661 = (uint64_t *)(v645 & 0xFFFFFFFF8);
            v662 = v645 & 0xFFFFFFFF8;
            if ((v645 & 1) != 0)
              v662 = *v661;
            v663 = (uint64_t *)(v658 & 0xFFFFFFFF8);
            v664 = v658 & 0xFFFFFFFF8;
            if ((v658 & 1) != 0)
              v664 = *v663;
            if (!v662 || !v664)
              break;
            if (*(_QWORD *)(v662 + 8) != *(_QWORD *)(v664 + 8))
              goto LABEL_1082;
            if ((v645 & 1) != 0 && v661)
            {
              v1113 = v638;
              v1640 = v657;
              WTF::fastFree((unint64_t)v661, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
              v657 = v1640;
              v633 = v1658;
              v638 = v1113;
              v636 = 0uLL;
              a3 = v1663;
            }
            v645 = *(_QWORD *)(v662 + 16);
            if ((v645 & 1) != 0)
            {
              v1641 = v657;
              v1604 = v638;
              v1114 = *(_QWORD *)(v645 & 0xFFFFFFFF8);
              if ((v645 & 2) != 0
                || (v1115 = *(unsigned int *)((v645 & 0xFFFFFFFF8) + 8), (_DWORD)v1115 == 0x3FFFFFFF)
                || (_DWORD)v1115 == -1)
              {
                v1116 = 2;
              }
              else if (v1115 >> 28)
              {
                v1240 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1240 = v1114;
                *(_DWORD *)(v1240 + 8) = v1115;
                v1116 = 1;
                v1114 = v1240;
              }
              else
              {
                v1116 = v1114;
                v1114 = v1115 << 36;
              }
              v645 = v1114 | v1116;
              a3 = v1663;
              v657 = v1641;
              v633 = v1658;
              v636 = 0uLL;
              v638 = v1604;
            }
            if ((v658 & 1) != 0 && v663)
            {
              v1117 = v638;
              v1118 = v657;
              WTF::fastFree(v658 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
              v657 = v1118;
              v638 = v1117;
              v636 = 0uLL;
              v633 = v1658;
              a3 = v1663;
            }
            v658 = *(_QWORD *)(v664 + 16);
            if ((v658 & 1) != 0)
            {
              v1639 = v657;
              v673 = v638;
              v674 = *(_QWORD *)(v658 & 0xFFFFFFFF8);
              if ((v658 & 2) != 0
                || (v675 = *(unsigned int *)((v658 & 0xFFFFFFFF8) + 8), (_DWORD)v675 == 0x3FFFFFFF)
                || (_DWORD)v675 == -1)
              {
                v676 = 2;
              }
              else if (v675 >> 28)
              {
                v1239 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1239 = v674;
                *(_DWORD *)(v1239 + 8) = v675;
                v676 = 1;
                v674 = v1239;
              }
              else
              {
                v676 = *(_QWORD *)(v658 & 0xFFFFFFFF8);
                v674 = v675 << 36;
              }
              v658 = v674 | v676;
              a3 = v1663;
              v657 = v1639;
              v633 = v1658;
              v636 = 0uLL;
              v638 = v673;
            }
          }
          LOBYTE(v664) = (v662 != 0) == (v664 != 0);
        }
        if ((v658 & 1) != 0 && (v658 & 0xFFFFFFFF8) != 0)
        {
          v933 = v638;
          v934 = v657;
          WTF::fastFree(v658 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
          v657 = v934;
          v638 = v933;
          v636 = 0uLL;
          v633 = v1658;
          a3 = v1663;
        }
        if ((v645 & 1) != 0)
        {
          v935 = v645 & 0xFFFFFFFF8;
          if ((v645 & 0xFFFFFFFF8) != 0)
          {
            v936 = v638;
            v937 = v657;
            WTF::fastFree(v935, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
            v657 = v937;
            v638 = v936;
            v636 = 0uLL;
            v633 = v1658;
            a3 = v1663;
          }
        }
        if ((v664 & 1) != 0)
          goto LABEL_1060;
        if ((*(_QWORD *)v644 & 2) != 0 && (*(_QWORD *)v644 & 0xFFFFFFFF8) != 0)
          v657 = v644;
        v643 = (++v656 + (_DWORD)v643) & v638;
        v644 = v637 + (v643 << 6);
        v645 = *(_QWORD *)v644;
        if (*(_QWORD *)v644 != 2)
          continue;
        break;
      }
      if (v657)
      {
        v645 = 2;
        *(_QWORD *)v657 = 2;
        *(_OWORD *)(v657 + 8) = 0u;
        *(_OWORD *)(v657 + 24) = 0u;
        *(_OWORD *)(v657 + 40) = 0u;
        *(_QWORD *)(v657 + 56) = 0;
        --*(_DWORD *)(*a3 - 16);
        v644 = v657;
      }
LABEL_1050:
      if ((unsigned int *)v644 != v635)
      {
        if ((v645 & 1) != 0 && (v645 & 0xFFFFFFFF8) != 0)
        {
          WTF::fastFree(v645 & 0xFFFFFFFF8, (void *)a2, (uint64_t)a3, a4, a5, a6, StatusReg, a8);
          v636 = 0uLL;
          v633 = v1658;
          a3 = v1663;
        }
        v646 = *(_QWORD *)v635;
        if ((*(_QWORD *)v635 & 1) != 0)
        {
          v924 = *(_QWORD *)(v646 & 0xFFFFFFFF8);
          if ((v646 & 2) != 0
            || ((v925 = *(unsigned int *)((v646 & 0xFFFFFFFF8) + 8), (_DWORD)v925 != 0x3FFFFFFF)
              ? (v926 = (_DWORD)v925 == -1)
              : (v926 = 1),
                v926))
          {
            v927 = 2;
          }
          else if (v925 >> 28)
          {
            v1187 = WTF::fastMalloc((WTF *)0x10);
            v636 = 0uLL;
            v633 = v1658;
            a3 = v1663;
            *(_QWORD *)v1187 = v924;
            *(_DWORD *)(v1187 + 8) = v925;
            v927 = 1;
            v924 = v1187;
          }
          else
          {
            v927 = *(_QWORD *)(v646 & 0xFFFFFFFF8);
            v924 = v925 << 36;
          }
          v646 = v924 | v927;
        }
        *(_QWORD *)v644 = v646;
      }
      v647 = v1666;
      v648 = v1667;
      v649 = v1668;
      *(_QWORD *)(v644 + 56) = v1669;
      *(_OWORD *)(v644 + 40) = v649;
      *(_OWORD *)(v644 + 24) = v648;
      *(_OWORD *)(v644 + 8) = v647;
      v650 = *a3;
      if (*a3)
        v651 = *(_DWORD *)(v650 - 12) + 1;
      else
        v651 = 1;
      *(_DWORD *)(v650 - 12) = v651;
      v652 = *a3;
      if (*a3)
        v653 = *(_DWORD *)(v652 - 12);
      else
        v653 = 0;
      v654 = (*(_DWORD *)(v652 - 16) + v653);
      v655 = *(unsigned int *)(v652 - 4);
      if (v655 > 0x400)
      {
        if (v655 > 2 * v654)
          goto LABEL_1060;
LABEL_1110:
        v672 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a3, (uint64_t *)v644);
        v636 = 0uLL;
        v633 = v1658;
        a3 = v1663;
        v644 = v672;
        goto LABEL_1060;
      }
      if (3 * v655 <= 4 * v654)
        goto LABEL_1110;
LABEL_1060:
      *(_QWORD *)(v644 + 8) = v635;
      v635 += 34;
      if (v635 == v633)
        goto LABEL_2453;
    }
    v641 = v640 + (v639 >> 36);
    v642 = v639 & 0xFFFFFFFF8;
    if ((v639 & 0xFFFFFFFF8) == 0)
      goto LABEL_1049;
    v667 = 1;
    v666 = (uint64_t *)v642;
    goto LABEL_1104;
  }
  v618 = (unsigned int *)(v616 + 8);
  do
    v619 = __ldaxr(v618);
  while (__stlxr(v619 + 1, v618));
  v627 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v616 + 72))(v616);
  do
  {
    v628 = __ldaxr(v618);
    v629 = v628 - 1;
  }
  while (__stlxr(v629, v618));
  v630 = v1663;
  if (!v629)
  {
    atomic_store(1u, (unsigned int *)(v616 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v616 + 32))(v616);
    v630 = v1663;
  }
  v631 = *(unint64_t **)(v627 + 144);
  if (v631)
  {
    v632 = 0uLL;
    while (1)
    {
      v1669 = 0;
      v1667 = v632;
      v1668 = v632;
      v1666 = v632;
      v1241 = *v630;
      if (*v630
        || (WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(v630, 0), v632 = 0uLL, v630 = v1663, (v1241 = *v1663) != 0))
      {
        v1242 = *(unsigned int *)(v1241 - 8);
      }
      else
      {
        v1242 = 0;
      }
      v1243 = *v631;
      if ((*v631 & 2) != 0)
      {
        v1245 = 0;
        goto LABEL_2299;
      }
      if ((v1243 & 1) != 0)
      {
        v1359 = v1243 & 0xFFFFFFFF8;
        v1360 = *(_QWORD *)v1359;
        v1361 = *(unsigned int *)(v1359 + 8);
        if ((_DWORD)v1361 == 0x3FFFFFFF || (_DWORD)v1361 == -1)
        {
          v1363 = 2;
        }
        else if (v1361 >> 28)
        {
          v1435 = v1242;
          v1436 = WTF::fastMalloc((WTF *)0x10);
          v1242 = v1435;
          v632 = 0uLL;
          v630 = v1663;
          *(_QWORD *)v1436 = v1360;
          *(_DWORD *)(v1436 + 8) = v1361;
          v1363 = 1;
          v1360 = v1436;
        }
        else
        {
          v1363 = *(_QWORD *)v1359;
          v1360 = v1361 << 36;
        }
        v1243 = v1360 | v1363;
      }
      v1244 = 2;
      while ((v1243 & 2) != 0)
      {
        v1245 = v1244 - 1;
        v1271 = (uint64_t *)(v1243 & 0xFFFFFFFF8);
        if ((v1243 & 1) != 0)
          goto LABEL_2499;
        if (!v1271)
          goto LABEL_2299;
        v1272 = 1;
        v1246 = (uint64_t)v1271;
LABEL_2353:
        v1273 = *(_QWORD *)(v1246 + 8);
        if ((v1272 & 1) == 0 && v1271)
        {
          v1407 = v1242;
          WTF::fastFree((unint64_t)v1271, v620, v621, v622, v623, v624, v625, v626);
          v1242 = v1407;
          v632 = 0uLL;
          v630 = v1663;
        }
        v1274 = (~(v1273 << 32) + v1273) ^ ((unint64_t)(~(v1273 << 32) + v1273) >> 22);
        v1275 = 9 * ((v1274 + ~(v1274 << 13)) ^ ((v1274 + ~(v1274 << 13)) >> 8));
        v1276 = (v1275 ^ (v1275 >> 15)) + ~((v1275 ^ (v1275 >> 15)) << 27);
        v1244 = v1245 + ((v1276 >> 31) ^ v1276);
        v1243 = *(_QWORD *)(v1246 + 16);
        if ((v1243 & 1) != 0)
        {
          v1408 = *(_QWORD *)(v1243 & 0xFFFFFFFF8);
          if ((v1243 & 2) != 0
            || (v1409 = *(unsigned int *)((v1243 & 0xFFFFFFFF8) + 8), (_DWORD)v1409 == 0x3FFFFFFF)
            || (_DWORD)v1409 == -1)
          {
            v1410 = 2;
          }
          else if (v1409 >> 28)
          {
            v1464 = v1242;
            v1465 = WTF::fastMalloc((WTF *)0x10);
            v1242 = v1464;
            v632 = 0uLL;
            v630 = v1663;
            *(_QWORD *)v1465 = v1408;
            *(_DWORD *)(v1465 + 8) = v1409;
            v1410 = 1;
            v1408 = v1465;
          }
          else
          {
            v1410 = *(_QWORD *)(v1243 & 0xFFFFFFFF8);
            v1408 = v1409 << 36;
          }
          v1243 = v1408 | v1410;
        }
      }
      if ((v1243 & 1) == 0)
        break;
      v1271 = (uint64_t *)(v1243 & 0xFFFFFFFF8);
      v1245 = *(_DWORD *)((v1243 & 0xFFFFFFFF8) + 8) + v1244;
LABEL_2499:
      v1246 = *v1271;
      if (*v1271)
      {
        v1272 = 0;
        goto LABEL_2353;
      }
      if (v1271)
      {
        v1368 = v1242;
        WTF::fastFree((unint64_t)v1271, v620, v621, v622, v623, v624, v625, v626);
        v1242 = v1368;
        v632 = 0uLL;
        v630 = v1663;
      }
LABEL_2299:
      v1247 = v1245 & v1242;
      v1248 = v1241 + (v1247 << 6);
      v1249 = *(_QWORD *)v1248;
      if (*(_QWORD *)v1248 == 2)
        goto LABEL_2300;
      v1261 = 0;
      v1262 = 0;
      while (2)
      {
        if ((v1249 & 2) != 0)
        {
          v1270 = (uint64_t *)(v1249 & 0xFFFFFFFF8);
          if ((v1249 & 1) == 0)
          {
            if (!v1270)
              break;
            goto LABEL_2314;
          }
          v1378 = *v1270;
          if (!*v1270)
            break;
LABEL_2523:
          v1382 = 2;
          goto LABEL_2524;
        }
        if ((v1249 & 1) == 0)
          goto LABEL_2314;
        v1378 = *(_QWORD *)(v1249 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v1249 & 0xFFFFFFFF8) + 8) == -1 && v1378 == 0)
          break;
        v1380 = *(unsigned int *)((v1249 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v1380 == 0x3FFFFFFF || (_DWORD)v1380 == -1)
          goto LABEL_2523;
        if (v1380 >> 28)
        {
          v1452 = v1242;
          v1453 = v1262;
          v1454 = WTF::fastMalloc((WTF *)0x10);
          v1262 = v1453;
          v1242 = v1452;
          v632 = 0uLL;
          v630 = v1663;
          *(_QWORD *)v1454 = v1378;
          *(_DWORD *)(v1454 + 8) = v1380;
          v1382 = 1;
          v1378 = v1454;
        }
        else
        {
          v1382 = *(_QWORD *)(v1249 & 0xFFFFFFFF8);
          v1378 = v1380 << 36;
        }
LABEL_2524:
        v1249 = v1378 | v1382;
LABEL_2314:
        v1263 = *v631;
        if ((*v631 & 1) != 0)
        {
          v1369 = *(_QWORD *)(v1263 & 0xFFFFFFFF8);
          if ((v1263 & 2) != 0
            || ((v1370 = *(unsigned int *)((v1263 & 0xFFFFFFFF8) + 8), (_DWORD)v1370 != 0x3FFFFFFF)
              ? (v1371 = (_DWORD)v1370 == -1)
              : (v1371 = 1),
                v1371))
          {
            v1372 = 2;
          }
          else if (v1370 >> 28)
          {
            v1449 = v1242;
            v1450 = v1262;
            v1451 = WTF::fastMalloc((WTF *)0x10);
            v1262 = v1450;
            v1242 = v1449;
            v632 = 0uLL;
            v630 = v1663;
            *(_QWORD *)v1451 = v1369;
            *(_DWORD *)(v1451 + 8) = v1370;
            v1372 = 1;
            v1369 = v1451;
          }
          else
          {
            v1372 = *(_QWORD *)(v1263 & 0xFFFFFFFF8);
            v1369 = v1370 << 36;
          }
          v1263 = v1369 | v1372;
        }
        if ((v1249 & 2) != 0)
        {
          v1269 = (v1263 >> 1) & 1;
        }
        else
        {
          if ((v1263 & 2) == 0)
          {
            while (1)
            {
              if ((v1249 & 2) != 0)
              {
                LODWORD(v1264) = -1;
              }
              else if ((v1249 & 1) != 0)
              {
                LODWORD(v1264) = *(_DWORD *)((v1249 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v1264 = v1249 >> 36;
              }
              if ((v1263 & 2) != 0)
              {
                LODWORD(v1265) = -1;
              }
              else if ((v1263 & 1) != 0)
              {
                LODWORD(v1265) = *(_DWORD *)((v1263 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v1265 = v1263 >> 36;
              }
              if ((_DWORD)v1264 != (_DWORD)v1265)
                break;
              v1266 = (uint64_t *)(v1249 & 0xFFFFFFFF8);
              v1267 = v1249 & 0xFFFFFFFF8;
              if ((v1249 & 1) != 0)
                v1267 = *v1266;
              v1268 = (uint64_t *)(v1263 & 0xFFFFFFFF8);
              v1269 = v1263 & 0xFFFFFFFF8;
              if ((v1263 & 1) != 0)
                v1269 = *v1268;
              if (!v1267 || !v1269)
              {
                LOBYTE(v1269) = (v1267 != 0) == (v1269 != 0);
                goto LABEL_2332;
              }
              if (*(_QWORD *)(v1267 + 8) != *(_QWORD *)(v1269 + 8))
                break;
              if ((v1249 & 1) != 0 && v1266)
              {
                v1643 = v1242;
                v1419 = v1262;
                WTF::fastFree((unint64_t)v1266, v620, v621, v622, v623, v624, v625, v626);
                v1262 = v1419;
                v1242 = v1643;
                v632 = 0uLL;
                v630 = v1663;
              }
              v1249 = *(_QWORD *)(v1267 + 16);
              if ((v1249 & 1) != 0)
              {
                v1661 = v1262;
                v1644 = v1242;
                v1420 = *(_QWORD *)(v1249 & 0xFFFFFFFF8);
                if ((v1249 & 2) != 0
                  || (v1421 = *(unsigned int *)((v1249 & 0xFFFFFFFF8) + 8), (_DWORD)v1421 == 0x3FFFFFFF)
                  || (_DWORD)v1421 == -1)
                {
                  v1422 = 2;
                }
                else if (v1421 >> 28)
                {
                  v1468 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1468 = v1420;
                  *(_DWORD *)(v1468 + 8) = v1421;
                  v1422 = 1;
                  v1420 = v1468;
                }
                else
                {
                  v1422 = v1420;
                  v1420 = v1421 << 36;
                }
                v1249 = v1420 | v1422;
                v630 = v1663;
                v632 = 0uLL;
                v1242 = v1644;
                v1262 = v1661;
              }
              if ((v1263 & 1) != 0 && v1268)
              {
                v1423 = v1242;
                v1424 = v1262;
                WTF::fastFree(v1263 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
                v1262 = v1424;
                v1242 = v1423;
                v632 = 0uLL;
                v630 = v1663;
              }
              v1263 = *(_QWORD *)(v1269 + 16);
              if ((v1263 & 1) != 0)
              {
                v1659 = v1262;
                v1277 = v1242;
                v1278 = *(_QWORD *)(v1263 & 0xFFFFFFFF8);
                if ((v1263 & 2) != 0
                  || (v1279 = *(unsigned int *)((v1263 & 0xFFFFFFFF8) + 8), (_DWORD)v1279 == 0x3FFFFFFF)
                  || (_DWORD)v1279 == -1)
                {
                  v1280 = 2;
                }
                else if (v1279 >> 28)
                {
                  v1467 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v1467 = v1278;
                  *(_DWORD *)(v1467 + 8) = v1279;
                  v1280 = 1;
                  v1278 = v1467;
                }
                else
                {
                  v1280 = *(_QWORD *)(v1263 & 0xFFFFFFFF8);
                  v1278 = v1279 << 36;
                }
                v1263 = v1278 | v1280;
                v630 = v1663;
                v632 = 0uLL;
                v1242 = v1277;
                v1262 = v1659;
              }
            }
          }
          LOBYTE(v1269) = 0;
        }
LABEL_2332:
        if ((v1263 & 1) != 0 && (v1263 & 0xFFFFFFFF8) != 0)
        {
          v1373 = v1242;
          v1374 = v1262;
          WTF::fastFree(v1263 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
          v1262 = v1374;
          v1242 = v1373;
          v632 = 0uLL;
          v630 = v1663;
        }
        if ((v1249 & 1) != 0)
        {
          v1375 = v1249 & 0xFFFFFFFF8;
          if ((v1249 & 0xFFFFFFFF8) != 0)
          {
            v1376 = v1242;
            v1377 = v1262;
            WTF::fastFree(v1375, v620, v621, v622, v623, v624, v625, v626);
            v1262 = v1377;
            v1242 = v1376;
            v632 = 0uLL;
            v630 = v1663;
          }
        }
        if ((v1269 & 1) != 0)
          goto LABEL_2290;
        if ((*(_QWORD *)v1248 & 2) != 0 && (*(_QWORD *)v1248 & 0xFFFFFFFF8) != 0)
          v1262 = v1248;
        v1247 = (++v1261 + (_DWORD)v1247) & v1242;
        v1248 = v1241 + (v1247 << 6);
        v1249 = *(_QWORD *)v1248;
        if (*(_QWORD *)v1248 != 2)
          continue;
        break;
      }
      if (v1262)
      {
        v1249 = 2;
        *(_QWORD *)v1262 = 2;
        *(_OWORD *)(v1262 + 8) = 0u;
        *(_OWORD *)(v1262 + 24) = 0u;
        *(_OWORD *)(v1262 + 40) = 0u;
        *(_QWORD *)(v1262 + 56) = 0;
        --*(_DWORD *)(*v630 - 16);
        v1248 = v1262;
      }
LABEL_2300:
      if ((unint64_t *)v1248 != v631)
      {
        if ((v1249 & 1) != 0 && (v1249 & 0xFFFFFFFF8) != 0)
        {
          WTF::fastFree(v1249 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
          v632 = 0uLL;
          v630 = v1663;
        }
        v1250 = *v631;
        if ((*v631 & 1) != 0)
        {
          v1364 = *(_QWORD *)(v1250 & 0xFFFFFFFF8);
          if ((v1250 & 2) != 0
            || ((v1365 = *(unsigned int *)((v1250 & 0xFFFFFFFF8) + 8), (_DWORD)v1365 != 0x3FFFFFFF)
              ? (v1366 = (_DWORD)v1365 == -1)
              : (v1366 = 1),
                v1366))
          {
            v1367 = 2;
          }
          else if (v1365 >> 28)
          {
            v1448 = WTF::fastMalloc((WTF *)0x10);
            v632 = 0uLL;
            v630 = v1663;
            *(_QWORD *)v1448 = v1364;
            *(_DWORD *)(v1448 + 8) = v1365;
            v1367 = 1;
            v1364 = v1448;
          }
          else
          {
            v1367 = *(_QWORD *)(v1250 & 0xFFFFFFFF8);
            v1364 = v1365 << 36;
          }
          v1250 = v1364 | v1367;
        }
        *(_QWORD *)v1248 = v1250;
      }
      v1251 = v1666;
      v1252 = v1667;
      v1253 = v1668;
      *(_QWORD *)(v1248 + 56) = v1669;
      *(_OWORD *)(v1248 + 40) = v1253;
      *(_OWORD *)(v1248 + 24) = v1252;
      *(_OWORD *)(v1248 + 8) = v1251;
      v1254 = *v630;
      if (*v630)
        v1255 = *(_DWORD *)(v1254 - 12) + 1;
      else
        v1255 = 1;
      *(_DWORD *)(v1254 - 12) = v1255;
      v1256 = *v630;
      if (*v630)
        v1257 = *(_DWORD *)(v1256 - 12);
      else
        v1257 = 0;
      v1258 = (*(_DWORD *)(v1256 - 16) + v1257);
      v1259 = *(unsigned int *)(v1256 - 4);
      if (v1259 > 0x400)
      {
        if (v1259 <= 2 * v1258)
          goto LABEL_2310;
      }
      else if (3 * v1259 <= 4 * v1258)
      {
LABEL_2310:
        v1260 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(v630, (uint64_t *)v1248);
        v632 = 0uLL;
        v630 = v1663;
        v1248 = v1260;
      }
LABEL_2290:
      *(_QWORD *)(v1248 + 8) = v631;
      v631 = (unint64_t *)v631[17];
      if (!v631)
        goto LABEL_2368;
    }
    v1245 = v1244 + (v1243 >> 36);
    v1246 = v1243 & 0xFFFFFFFF8;
    if ((v1243 & 0xFFFFFFFF8) == 0)
      goto LABEL_2299;
    v1272 = 1;
    v1271 = (uint64_t *)v1246;
    goto LABEL_2353;
  }
LABEL_2368:
  v1281 = a1[15];
  if (!v1281)
    return;
  if ((*(_BYTE *)(v1281 + 12) & 0xFE) != 4)
    goto LABEL_2453;
  v1282 = (unsigned int *)a1[16];
  if (!v1282)
    goto LABEL_2453;
  v1283 = *v1282;
  if (!(_DWORD)v1283)
    goto LABEL_2453;
  v1284 = &v1282[-34 * v1283];
  v1285 = 0uLL;
  v1660 = (unsigned int *)a1[16];
  while (2)
  {
    v1669 = 0;
    v1667 = v1285;
    v1668 = v1285;
    v1666 = v1285;
    v1286 = *v630;
    if (*v630
      || (WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(v630, 0), v1285 = 0uLL, v1282 = v1660, v630 = v1663, (v1286 = *v1663) != 0))
    {
      v1287 = *(unsigned int *)(v1286 - 8);
    }
    else
    {
      v1287 = 0;
    }
    v1288 = *(_QWORD *)v1284;
    if ((*(_QWORD *)v1284 & 2) != 0)
    {
      v1290 = 0;
      goto LABEL_2381;
    }
    if ((v1288 & 1) != 0)
    {
      v1383 = v1288 & 0xFFFFFFFF8;
      v1384 = *(_QWORD *)v1383;
      v1385 = *(unsigned int *)(v1383 + 8);
      if ((_DWORD)v1385 == 0x3FFFFFFF || (_DWORD)v1385 == -1)
      {
        v1387 = 2;
      }
      else if (v1385 >> 28)
      {
        v1455 = v1287;
        v1456 = WTF::fastMalloc((WTF *)0x10);
        v1287 = v1455;
        v1285 = 0uLL;
        v1282 = v1660;
        v630 = v1663;
        *(_QWORD *)v1456 = v1384;
        *(_DWORD *)(v1456 + 8) = v1385;
        v1387 = 1;
        v1384 = v1456;
      }
      else
      {
        v1387 = *(_QWORD *)v1383;
        v1384 = v1385 << 36;
      }
      v1288 = v1384 | v1387;
    }
    v1289 = 2;
    while (2)
    {
      if ((v1288 & 2) != 0)
      {
        v1290 = v1289 - 1;
        v1315 = (uint64_t *)(v1288 & 0xFFFFFFFF8);
        if ((v1288 & 1) == 0)
        {
          if (!v1315)
            goto LABEL_2381;
          v1316 = 1;
          v1291 = (uint64_t)v1315;
          goto LABEL_2436;
        }
      }
      else
      {
        if ((v1288 & 1) == 0)
        {
          v1290 = v1289 + (v1288 >> 36);
          v1291 = v1288 & 0xFFFFFFFF8;
          if ((v1288 & 0xFFFFFFFF8) == 0)
            goto LABEL_2381;
          v1316 = 1;
          v1315 = (uint64_t *)v1291;
          goto LABEL_2436;
        }
        v1315 = (uint64_t *)(v1288 & 0xFFFFFFFF8);
        v1290 = *(_DWORD *)((v1288 & 0xFFFFFFFF8) + 8) + v1289;
      }
      v1291 = *v1315;
      if (*v1315)
      {
        v1316 = 0;
LABEL_2436:
        v1317 = *(_QWORD *)(v1291 + 8);
        if ((v1316 & 1) == 0 && v1315)
        {
          v1411 = v1287;
          WTF::fastFree((unint64_t)v1315, v620, v621, v622, v623, v624, v625, v626);
          v1287 = v1411;
          v1285 = 0uLL;
          v1282 = v1660;
          v630 = v1663;
        }
        v1318 = (~(v1317 << 32) + v1317) ^ ((unint64_t)(~(v1317 << 32) + v1317) >> 22);
        v1319 = 9 * ((v1318 + ~(v1318 << 13)) ^ ((v1318 + ~(v1318 << 13)) >> 8));
        v1320 = (v1319 ^ (v1319 >> 15)) + ~((v1319 ^ (v1319 >> 15)) << 27);
        v1289 = v1290 + ((v1320 >> 31) ^ v1320);
        v1288 = *(_QWORD *)(v1291 + 16);
        if ((v1288 & 1) != 0)
        {
          v1412 = *(_QWORD *)(v1288 & 0xFFFFFFFF8);
          if ((v1288 & 2) != 0
            || (v1413 = *(unsigned int *)((v1288 & 0xFFFFFFFF8) + 8), (_DWORD)v1413 == 0x3FFFFFFF)
            || (_DWORD)v1413 == -1)
          {
            v1414 = 2;
          }
          else
          {
            v1418 = v1287;
            if (v1413 >> 28)
            {
              v1466 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v1466 = v1412;
              *(_DWORD *)(v1466 + 8) = v1413;
              v1414 = 1;
              v1412 = v1466;
            }
            else
            {
              v1414 = *(_QWORD *)(v1288 & 0xFFFFFFFF8);
              v1412 = v1413 << 36;
            }
            v630 = v1663;
            v1282 = v1660;
            v1285 = 0uLL;
            v1287 = v1418;
          }
          v1288 = v1412 | v1414;
        }
        continue;
      }
      break;
    }
    if (v1315)
    {
      v1392 = v1287;
      WTF::fastFree((unint64_t)v1315, v620, v621, v622, v623, v624, v625, v626);
      v1287 = v1392;
      v1285 = 0uLL;
      v1282 = v1660;
      v630 = v1663;
    }
LABEL_2381:
    v1292 = v1290 & v1287;
    v1293 = v1286 + (v1292 << 6);
    v1294 = *(_QWORD *)v1293;
    if (*(_QWORD *)v1293 == 2)
      goto LABEL_2382;
    v1305 = 0;
    v1306 = 0;
    while (2)
    {
      if ((v1294 & 2) != 0)
      {
        v1314 = (uint64_t *)(v1294 & 0xFFFFFFFF8);
        if ((v1294 & 1) == 0)
        {
          if (!v1314)
            break;
          goto LABEL_2397;
        }
        v1402 = *v1314;
        if (!*v1314)
          break;
LABEL_2569:
        v1406 = 2;
        goto LABEL_2570;
      }
      if ((v1294 & 1) == 0)
        goto LABEL_2397;
      v1402 = *(_QWORD *)(v1294 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v1294 & 0xFFFFFFFF8) + 8) == -1 && v1402 == 0)
        break;
      v1404 = *(unsigned int *)((v1294 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v1404 == 0x3FFFFFFF || (_DWORD)v1404 == -1)
        goto LABEL_2569;
      if (v1404 >> 28)
      {
        v1461 = v1287;
        v1462 = v1306;
        v1463 = WTF::fastMalloc((WTF *)0x10);
        v1306 = v1462;
        v1287 = v1461;
        v1285 = 0uLL;
        v1282 = v1660;
        v630 = v1663;
        *(_QWORD *)v1463 = v1402;
        *(_DWORD *)(v1463 + 8) = v1404;
        v1406 = 1;
        v1402 = v1463;
      }
      else
      {
        v1406 = v1402;
        v1402 = v1404 << 36;
      }
LABEL_2570:
      v1294 = v1402 | v1406;
LABEL_2397:
      v1307 = *(_QWORD *)v1284;
      if ((*(_QWORD *)v1284 & 1) != 0)
      {
        v1393 = *(_QWORD *)(v1307 & 0xFFFFFFFF8);
        if ((v1307 & 2) != 0
          || ((v1394 = *(unsigned int *)((v1307 & 0xFFFFFFFF8) + 8), (_DWORD)v1394 != 0x3FFFFFFF)
            ? (v1395 = (_DWORD)v1394 == -1)
            : (v1395 = 1),
              v1395))
        {
          v1396 = 2;
        }
        else if (v1394 >> 28)
        {
          v1458 = v1287;
          v1459 = v1306;
          v1460 = WTF::fastMalloc((WTF *)0x10);
          v1306 = v1459;
          v1287 = v1458;
          v1285 = 0uLL;
          v1282 = v1660;
          v630 = v1663;
          *(_QWORD *)v1460 = v1393;
          *(_DWORD *)(v1460 + 8) = v1394;
          v1396 = 1;
          v1393 = v1460;
        }
        else
        {
          v1396 = *(_QWORD *)(v1307 & 0xFFFFFFFF8);
          v1393 = v1394 << 36;
        }
        v1307 = v1393 | v1396;
      }
      if ((v1294 & 2) != 0)
      {
        v1313 = (v1307 >> 1) & 1;
      }
      else
      {
        if ((v1307 & 2) == 0)
        {
          while (1)
          {
            if ((v1294 & 2) != 0)
            {
              LODWORD(v1308) = -1;
            }
            else if ((v1294 & 1) != 0)
            {
              LODWORD(v1308) = *(_DWORD *)((v1294 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v1308 = v1294 >> 36;
            }
            if ((v1307 & 2) != 0)
            {
              LODWORD(v1309) = -1;
            }
            else if ((v1307 & 1) != 0)
            {
              LODWORD(v1309) = *(_DWORD *)((v1307 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v1309 = v1307 >> 36;
            }
            if ((_DWORD)v1308 != (_DWORD)v1309)
              break;
            v1310 = (uint64_t *)(v1294 & 0xFFFFFFFF8);
            v1311 = v1294 & 0xFFFFFFFF8;
            if ((v1294 & 1) != 0)
              v1311 = *v1310;
            v1312 = (uint64_t *)(v1307 & 0xFFFFFFFF8);
            v1313 = v1307 & 0xFFFFFFFF8;
            if ((v1307 & 1) != 0)
              v1313 = *v1312;
            if (!v1311 || !v1313)
            {
              LOBYTE(v1313) = (v1311 != 0) == (v1313 != 0);
              goto LABEL_2415;
            }
            if (*(_QWORD *)(v1311 + 8) != *(_QWORD *)(v1313 + 8))
              break;
            if ((v1294 & 1) != 0 && v1310)
            {
              v1425 = v1287;
              v1645 = v1306;
              WTF::fastFree((unint64_t)v1310, v620, v621, v622, v623, v624, v625, v626);
              v1306 = v1645;
              v1282 = v1660;
              v1287 = v1425;
              v1285 = 0uLL;
              v630 = v1663;
            }
            v1294 = *(_QWORD *)(v1311 + 16);
            if ((v1294 & 1) != 0)
            {
              v1646 = v1306;
              v1627 = v1287;
              v1426 = *(_QWORD *)(v1294 & 0xFFFFFFFF8);
              if ((v1294 & 2) != 0
                || (v1427 = *(unsigned int *)((v1294 & 0xFFFFFFFF8) + 8), (_DWORD)v1427 == 0x3FFFFFFF)
                || (_DWORD)v1427 == -1)
              {
                v1428 = 2;
              }
              else if (v1427 >> 28)
              {
                v1470 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1470 = v1426;
                *(_DWORD *)(v1470 + 8) = v1427;
                v1428 = 1;
                v1426 = v1470;
              }
              else
              {
                v1428 = v1426;
                v1426 = v1427 << 36;
              }
              v1294 = v1426 | v1428;
              v630 = v1663;
              v1306 = v1646;
              v1282 = v1660;
              v1285 = 0uLL;
              v1287 = v1627;
            }
            if ((v1307 & 1) != 0 && v1312)
            {
              v1429 = v1287;
              v1430 = v1306;
              WTF::fastFree(v1307 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
              v1306 = v1430;
              v1287 = v1429;
              v1285 = 0uLL;
              v1282 = v1660;
              v630 = v1663;
            }
            v1307 = *(_QWORD *)(v1313 + 16);
            if ((v1307 & 1) != 0)
            {
              v1642 = v1306;
              v1322 = v1287;
              v1323 = *(_QWORD *)(v1307 & 0xFFFFFFFF8);
              if ((v1307 & 2) != 0
                || (v1324 = *(unsigned int *)((v1307 & 0xFFFFFFFF8) + 8), (_DWORD)v1324 == 0x3FFFFFFF)
                || (_DWORD)v1324 == -1)
              {
                v1325 = 2;
              }
              else if (v1324 >> 28)
              {
                v1469 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v1469 = v1323;
                *(_DWORD *)(v1469 + 8) = v1324;
                v1325 = 1;
                v1323 = v1469;
              }
              else
              {
                v1325 = *(_QWORD *)(v1307 & 0xFFFFFFFF8);
                v1323 = v1324 << 36;
              }
              v1307 = v1323 | v1325;
              v630 = v1663;
              v1306 = v1642;
              v1282 = v1660;
              v1285 = 0uLL;
              v1287 = v1322;
            }
          }
        }
        LOBYTE(v1313) = 0;
      }
LABEL_2415:
      if ((v1307 & 1) != 0 && (v1307 & 0xFFFFFFFF8) != 0)
      {
        v1397 = v1287;
        v1398 = v1306;
        WTF::fastFree(v1307 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
        v1306 = v1398;
        v1287 = v1397;
        v1285 = 0uLL;
        v1282 = v1660;
        v630 = v1663;
      }
      if ((v1294 & 1) != 0)
      {
        v1399 = v1294 & 0xFFFFFFFF8;
        if ((v1294 & 0xFFFFFFFF8) != 0)
        {
          v1400 = v1287;
          v1401 = v1306;
          WTF::fastFree(v1399, v620, v621, v622, v623, v624, v625, v626);
          v1306 = v1401;
          v1287 = v1400;
          v1285 = 0uLL;
          v1282 = v1660;
          v630 = v1663;
        }
      }
      if ((v1313 & 1) != 0)
        goto LABEL_2392;
      if ((*(_QWORD *)v1293 & 2) != 0 && (*(_QWORD *)v1293 & 0xFFFFFFFF8) != 0)
        v1306 = v1293;
      v1292 = (++v1305 + (_DWORD)v1292) & v1287;
      v1293 = v1286 + (v1292 << 6);
      v1294 = *(_QWORD *)v1293;
      if (*(_QWORD *)v1293 != 2)
        continue;
      break;
    }
    if (v1306)
    {
      v1294 = 2;
      *(_QWORD *)v1306 = 2;
      *(_OWORD *)(v1306 + 8) = 0u;
      *(_OWORD *)(v1306 + 24) = 0u;
      *(_OWORD *)(v1306 + 40) = 0u;
      *(_QWORD *)(v1306 + 56) = 0;
      --*(_DWORD *)(*v630 - 16);
      v1293 = v1306;
    }
LABEL_2382:
    if ((unsigned int *)v1293 != v1284)
    {
      if ((v1294 & 1) != 0 && (v1294 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v1294 & 0xFFFFFFFF8, v620, v621, v622, v623, v624, v625, v626);
        v1285 = 0uLL;
        v1282 = v1660;
        v630 = v1663;
      }
      v1295 = *(_QWORD *)v1284;
      if ((*(_QWORD *)v1284 & 1) != 0)
      {
        v1388 = *(_QWORD *)(v1295 & 0xFFFFFFFF8);
        if ((v1295 & 2) != 0
          || ((v1389 = *(unsigned int *)((v1295 & 0xFFFFFFFF8) + 8), (_DWORD)v1389 != 0x3FFFFFFF)
            ? (v1390 = (_DWORD)v1389 == -1)
            : (v1390 = 1),
              v1390))
        {
          v1391 = 2;
        }
        else if (v1389 >> 28)
        {
          v1457 = WTF::fastMalloc((WTF *)0x10);
          v1285 = 0uLL;
          v1282 = v1660;
          v630 = v1663;
          *(_QWORD *)v1457 = v1388;
          *(_DWORD *)(v1457 + 8) = v1389;
          v1391 = 1;
          v1388 = v1457;
        }
        else
        {
          v1391 = *(_QWORD *)(v1295 & 0xFFFFFFFF8);
          v1388 = v1389 << 36;
        }
        v1295 = v1388 | v1391;
      }
      *(_QWORD *)v1293 = v1295;
    }
    v1296 = v1666;
    v1297 = v1667;
    v1298 = v1668;
    *(_QWORD *)(v1293 + 56) = v1669;
    *(_OWORD *)(v1293 + 40) = v1298;
    *(_OWORD *)(v1293 + 24) = v1297;
    *(_OWORD *)(v1293 + 8) = v1296;
    v1299 = *v630;
    if (*v630)
      v1300 = *(_DWORD *)(v1299 - 12) + 1;
    else
      v1300 = 1;
    *(_DWORD *)(v1299 - 12) = v1300;
    v1301 = *v630;
    if (*v630)
      v1302 = *(_DWORD *)(v1301 - 12);
    else
      v1302 = 0;
    v1303 = (*(_DWORD *)(v1301 - 16) + v1302);
    v1304 = *(unsigned int *)(v1301 - 4);
    if (v1304 > 0x400)
    {
      if (v1304 <= 2 * v1303)
        goto LABEL_2442;
    }
    else
    {
      if (3 * v1304 > 4 * v1303)
        goto LABEL_2392;
LABEL_2442:
      v1321 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(v630, (uint64_t *)v1293);
      v1285 = 0uLL;
      v1282 = v1660;
      v630 = v1663;
      v1293 = v1321;
    }
LABEL_2392:
    *(_QWORD *)(v1293 + 8) = v1284;
    v1284 += 34;
    if (v1284 != v1282)
      continue;
    break;
  }
LABEL_2453:
  v1326 = (_BYTE *)a1[15];
  if (v1326 && (v1326[12] & 0xFE) == 4)
  {
    v1331 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1326 + 72))(v1326);
    for (i = *(_QWORD *)(v1331 + 152); i; i = *(_QWORD *)(i + 96))
    {
      v1355 = *(_QWORD *)(i + 72);
      if ((v1355 & 1) != 0)
      {
        v1431 = *(_QWORD *)(v1355 & 0xFFFFFFFF8);
        if ((v1355 & 2) != 0
          || ((v1432 = *(unsigned int *)((v1355 & 0xFFFFFFFF8) + 8), (_DWORD)v1432 != 0x3FFFFFFF)
            ? (v1433 = (_DWORD)v1432 == -1)
            : (v1433 = 1),
              v1433))
        {
          v1434 = 2;
        }
        else if (v1432 >> 28)
        {
          v1471 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v1471 = v1431;
          *(_DWORD *)(v1471 + 8) = v1432;
          v1434 = 1;
          v1431 = v1471;
        }
        else
        {
          v1434 = *(_QWORD *)(v1355 & 0xFFFFFFFF8);
          v1431 = v1432 << 36;
        }
        v1355 = v1431 | v1434;
      }
      v1664 = v1355;
      v1669 = 0;
      v1667 = 0u;
      v1668 = 0u;
      v1666 = 0u;
      WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1663, (JSC::CodeOrigin *)&v1664, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
      *(_QWORD *)(v1665[0] + 16) = i;
      if ((v1664 & 1) != 0 && (v1664 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v1664 & 0xFFFFFFFF8, v1356, v1357, v1358, v1327, v1328, v1329, v1330);
    }
    v1333 = a1[15];
    if (v1333)
    {
      if ((*(_BYTE *)(v1333 + 12) & 0xFE) == 4)
      {
        v1334 = a1[16];
        if (v1334)
        {
          v1335 = *(unsigned int **)(v1334 + 24);
          if (v1335)
          {
            v1439 = *v1335;
            v1438 = (uint64_t)(v1335 + 2);
            v1437 = v1439;
            if (v1439)
            {
              v1440 = 96 * v1437;
              do
              {
                JSC::CallLinkInfo::codeOrigin(v1438, &v1664);
                v1669 = 0;
                v1667 = 0u;
                v1668 = 0u;
                v1666 = 0u;
                WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1663, (JSC::CodeOrigin *)&v1664, (uint64_t)&v1666, v1441, v1442, v1443, v1444);
                *(_QWORD *)(v1665[0] + 16) = v1438;
                if ((v1664 & 1) != 0 && (v1664 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v1664 & 0xFFFFFFFF8, v1445, v1446, v1447, v1327, v1328, v1329, v1330);
                v1438 += 96;
                v1440 -= 96;
              }
              while (v1440);
            }
          }
        }
      }
    }
    v1336 = *(_QWORD *)(v1331 + 120);
    v1337 = v1663;
    if (v1336)
    {
      v1338 = *(unsigned int *)(v1336 + 12);
      if ((_DWORD)v1338)
      {
        v1339 = *(JSC::CodeOrigin **)v1336;
        v1340 = 16 * v1338;
        do
        {
          v1341 = *((_QWORD *)v1339 + 1);
          v1669 = 0;
          v1667 = 0u;
          v1668 = 0u;
          v1666 = 0u;
          WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1337, v1339, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
          v1337 = v1663;
          *(_QWORD *)(v1665[0] + 24) = v1341;
          v1339 = (JSC::CodeOrigin *)((char *)v1339 + 16);
          v1340 -= 16;
        }
        while (v1340);
      }
      v1342 = *(unsigned int *)(v1336 + 28);
      if ((_DWORD)v1342)
      {
        v1343 = *(JSC::CodeOrigin **)(v1336 + 16);
        v1344 = 16 * v1342;
        do
        {
          v1345 = *((_QWORD *)v1343 + 1);
          v1669 = 0;
          v1667 = 0u;
          v1668 = 0u;
          v1666 = 0u;
          WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1337, v1343, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
          v1337 = v1663;
          *(_QWORD *)(v1665[0] + 32) = v1345;
          v1343 = (JSC::CodeOrigin *)((char *)v1343 + 16);
          v1344 -= 16;
        }
        while (v1344);
      }
      v1346 = *(unsigned int *)(v1336 + 44);
      if ((_DWORD)v1346)
      {
        v1352 = *(JSC::CodeOrigin **)(v1336 + 32);
        v1353 = 16 * v1346;
        do
        {
          v1354 = *((_QWORD *)v1352 + 1);
          v1669 = 0;
          v1667 = 0u;
          v1668 = 0u;
          v1666 = 0u;
          WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1337, v1352, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
          v1337 = v1663;
          *(_QWORD *)(v1665[0] + 48) = v1354;
          v1352 = (JSC::CodeOrigin *)((char *)v1352 + 16);
          v1353 -= 16;
        }
        while (v1353);
      }
      v1347 = *(unsigned int *)(v1336 + 60);
      if ((_DWORD)v1347)
      {
        v1415 = *(JSC::CodeOrigin **)(v1336 + 48);
        v1416 = 16 * v1347;
        do
        {
          v1417 = *((_QWORD *)v1415 + 1);
          v1669 = 0;
          v1667 = 0u;
          v1668 = 0u;
          v1666 = 0u;
          WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1337, v1415, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
          v1337 = v1663;
          *(_QWORD *)(v1665[0] + 40) = v1417;
          v1415 = (JSC::CodeOrigin *)((char *)v1415 + 16);
          v1416 -= 16;
        }
        while (v1416);
      }
      v1348 = *(unsigned int *)(v1336 + 76);
      if ((_DWORD)v1348)
      {
        v1349 = *(JSC::CodeOrigin **)(v1336 + 64);
        v1350 = 16 * v1348;
        do
        {
          v1351 = *((_QWORD *)v1349 + 1);
          v1669 = 0;
          v1667 = 0u;
          v1668 = 0u;
          v1666 = 0u;
          WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>((uint64_t)v1665, v1337, v1349, (uint64_t)&v1666, v1327, v1328, v1329, v1330);
          v1337 = v1663;
          *(_QWORD *)(v1665[0] + 56) = v1351;
          v1349 = (JSC::CodeOrigin *)((char *)v1349 + 16);
          v1350 -= 16;
        }
        while (v1350);
      }
    }
  }
}

void WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::add<JSC::ICStatus>(uint64_t a1, uint64_t *a2, JSC::CodeOrigin *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a2, 0), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v21 = JSC::CodeOrigin::approximateHash(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v13;
  v22 = v12 + (v21 << 6);
  v23 = *(_QWORD *)v22;
  if (*(_QWORD *)v22 == 2)
    goto LABEL_4;
  v36 = 0;
  v37 = 1;
  do
  {
    if ((v23 & 2) != 0)
    {
      v39 = (_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 1) == 0)
        goto LABEL_27;
    }
    else
    {
      if ((v23 & 1) == 0)
        goto LABEL_18;
      v39 = (_QWORD *)(v23 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v23 & 0xFFFFFFFF8) + 8) != -1)
        goto LABEL_18;
    }
    v39 = (_QWORD *)*v39;
LABEL_27:
    if (!v39)
      break;
LABEL_18:
    if (JSC::CodeOrigin::isApproximatelyEqualTo((JSC::CodeOrigin *)v22, a3, 0, v16, v17, v18, v19, v20))
    {
      v40 = *a2;
      if (*a2)
        v41 = *(unsigned int *)(v40 - 4);
      else
        v41 = 0;
      v35 = 0;
      v34 = v40 + (v41 << 6);
      goto LABEL_14;
    }
    if ((*(_QWORD *)v22 & 0xFFFFFFFF8) != 0)
      v38 = v22;
    else
      v38 = v36;
    if ((*(_QWORD *)v22 & 2) != 0)
      v36 = v38;
    v21 = ((_DWORD)v21 + v37) & v13;
    v22 = v12 + (v21 << 6);
    v23 = *(_QWORD *)v22;
    ++v37;
  }
  while (*(_QWORD *)v22 != 2);
  if (v36)
  {
    v23 = 2;
    *(_QWORD *)v36 = 2;
    *(_OWORD *)(v36 + 8) = 0u;
    *(_OWORD *)(v36 + 24) = 0u;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_QWORD *)(v36 + 56) = 0;
    --*(_DWORD *)(*a2 - 16);
    v22 = v36;
  }
LABEL_4:
  if ((JSC::CodeOrigin *)v22 != a3)
  {
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v23 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    v24 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)v22 = v24;
  }
  v25 = *(_OWORD *)a4;
  v26 = *(_OWORD *)(a4 + 16);
  v27 = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v22 + 56) = *(_QWORD *)(a4 + 48);
  *(_OWORD *)(v22 + 40) = v27;
  *(_OWORD *)(v22 + 24) = v26;
  *(_OWORD *)(v22 + 8) = v25;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a2;
  if (*a2)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_13;
LABEL_35:
    v22 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a2, (uint64_t *)v22);
    v30 = *a2;
    if (*a2)
      v33 = *(unsigned int *)(v30 - 4);
    else
      v33 = 0;
    goto LABEL_13;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_35;
LABEL_13:
  v34 = v30 + (v33 << 6);
  v35 = 1;
LABEL_14:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v35;
}

{
  uint64_t v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a2, 0), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v21 = JSC::CodeOrigin::approximateHash(a3, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v13;
  v22 = v12 + (v21 << 6);
  v23 = *(_QWORD *)v22;
  if (*(_QWORD *)v22 == 2)
    goto LABEL_4;
  v36 = 0;
  v37 = 1;
  do
  {
    if ((v23 & 2) != 0)
    {
      v39 = (_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 1) == 0)
        goto LABEL_28;
    }
    else
    {
      if ((v23 & 1) == 0)
        goto LABEL_19;
      v39 = (_QWORD *)(v23 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v23 & 0xFFFFFFFF8) + 8) != -1)
        goto LABEL_19;
    }
    v39 = (_QWORD *)*v39;
LABEL_28:
    if (!v39)
      break;
LABEL_19:
    if (JSC::CodeOrigin::isApproximatelyEqualTo((JSC::CodeOrigin *)v22, a3, 0, v16, v17, v18, v19, v20))
    {
      v40 = *a2;
      if (*a2)
        v41 = *(unsigned int *)(v40 - 4);
      else
        v41 = 0;
      v35 = 0;
      v34 = v40 + (v41 << 6);
      goto LABEL_15;
    }
    if ((*(_QWORD *)v22 & 0xFFFFFFFF8) != 0)
      v38 = v22;
    else
      v38 = v36;
    if ((*(_QWORD *)v22 & 2) != 0)
      v36 = v38;
    v21 = ((_DWORD)v21 + v37) & v13;
    v22 = v12 + (v21 << 6);
    v23 = *(_QWORD *)v22;
    ++v37;
  }
  while (*(_QWORD *)v22 != 2);
  if (v36)
  {
    v23 = 2;
    *(_QWORD *)v36 = 2;
    *(_OWORD *)(v36 + 8) = 0u;
    *(_OWORD *)(v36 + 24) = 0u;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_QWORD *)(v36 + 56) = 0;
    --*(_DWORD *)(*a2 - 16);
    v22 = v36;
  }
LABEL_4:
  if ((JSC::CodeOrigin *)v22 != a3)
  {
    if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v23 & 0xFFFFFFFF8, v14, v15, v16, v17, v18, v19, v20);
    v24 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v42 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v43 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
          ? (v44 = (_DWORD)v43 == -1)
          : (v44 = 1),
            v44))
      {
        v45 = 2;
      }
      else if (v43 >> 28)
      {
        v46 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v46 = v42;
        *(_DWORD *)(v46 + 8) = v43;
        v45 = 1;
        v42 = v46;
      }
      else
      {
        v45 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
        v42 = v43 << 36;
      }
      v24 = v42 | v45;
    }
    *(_QWORD *)v22 = v24;
  }
  v25 = *(_OWORD *)a4;
  v26 = *(_OWORD *)(a4 + 16);
  v27 = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v22 + 56) = *(_QWORD *)(a4 + 48);
  *(_OWORD *)(v22 + 40) = v27;
  *(_OWORD *)(v22 + 24) = v26;
  *(_OWORD *)(v22 + 8) = v25;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12) + 1;
  else
    v29 = 1;
  *(_DWORD *)(v28 - 12) = v29;
  v30 = *a2;
  if (*a2)
    v31 = *(_DWORD *)(v30 - 12);
  else
    v31 = 0;
  v32 = (*(_DWORD *)(v30 - 16) + v31);
  v33 = *(unsigned int *)(v30 - 4);
  if (v33 > 0x400)
  {
    if (v33 > 2 * v32)
      goto LABEL_14;
LABEL_36:
    v22 = WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(a2, (uint64_t *)v22);
    v30 = *a2;
    if (*a2)
      v33 = *(unsigned int *)(v30 - 4);
    else
      v33 = 0;
    goto LABEL_14;
  }
  if (3 * v33 <= 4 * v32)
    goto LABEL_36;
LABEL_14:
  v34 = v30 + (v33 << 6);
  v35 = 1;
LABEL_15:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v35;
}

unsigned int *JSC::CodeBlock::findStubInfo(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int v13;
  unsigned int *v15;

  v4 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v15 = 0;
  JSC::CodeBlock::forEachStructureStubInfo<JSC::CodeBlock::findStubInfo(JSC::CodeOrigin)::$_0>(a1, a2, &v15);
  v12 = v15;
  v13 = __ldxr(v4);
  if (v13 == 1)
  {
    if (!__stlxr(0, v4))
      return v12;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v4, 0, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::CodeBlock::forEachStructureStubInfo<JSC::CodeBlock::findStubInfo(JSC::CodeOrigin)::$_0>(uint64_t result, unint64_t *a2, unsigned int **a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;

  v5 = result;
  v6 = *(unsigned int **)(result + 120);
  if (v6 && (v6[3] & 0xFE) == 4)
  {
    v7 = v6 + 2;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 72))(v6);
    v9 = result;
    do
    {
      v10 = __ldaxr(v7);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v7));
    if (!v11)
    {
      atomic_store(1u, v6 + 2);
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 32))(v6);
    }
    v12 = *(unsigned int **)(v9 + 144);
    if (v12)
    {
      v13 = *a2;
      v14 = (uint64_t *)(*a2 & 0xFFFFFFFF8);
      if ((*a2 & 2) == 0)
      {
        while (1)
        {
          v15 = *(_QWORD *)v12;
          if (*(_QWORD *)v12 == v13)
            goto LABEL_88;
          if ((v15 & 2) != 0)
          {
            LODWORD(v16) = -1;
          }
          else if ((v15 & 1) != 0)
          {
            LODWORD(v16) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v16 = v15 >> 36;
          }
          v17 = v13 >> 36;
          if ((v13 & 1) != 0)
            LODWORD(v17) = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
          if ((_DWORD)v16 == (_DWORD)v17)
          {
            v18 = (_QWORD *)(v15 & 0xFFFFFFFF8);
            if ((v15 & 1) != 0)
              v18 = (_QWORD *)*v18;
            v19 = *a2 & 0xFFFFFFFF8;
            if ((v13 & 1) != 0)
              v19 = *v14;
            if (v18 == (_QWORD *)v19)
              goto LABEL_88;
          }
          v12 = (unsigned int *)*((_QWORD *)v12 + 17);
          if (!v12)
            goto LABEL_63;
        }
      }
      do
      {
        v32 = *(_QWORD *)v12;
        if (*(_QWORD *)v12 == v13)
          goto LABEL_88;
        if ((v32 & 2) != 0)
        {
          v30 = (_QWORD *)(v32 & 0xFFFFFFFF8);
          if ((v32 & 1) == 0)
            goto LABEL_55;
        }
        else
        {
          if ((v32 & 1) == 0)
            goto LABEL_52;
          v30 = (_QWORD *)(v32 & 0xFFFFFFFF8);
          if (*(_DWORD *)((v32 & 0xFFFFFFFF8) + 8) != -1)
            goto LABEL_52;
        }
        v30 = (_QWORD *)*v30;
LABEL_55:
        v31 = *a2 & 0xFFFFFFFF8;
        if ((v13 & 1) != 0)
          v31 = *v14;
        if (v30 == (_QWORD *)v31)
          goto LABEL_88;
LABEL_52:
        v12 = (unsigned int *)*((_QWORD *)v12 + 17);
      }
      while (v12);
    }
LABEL_63:
    v33 = *(_QWORD *)(v5 + 120);
    if (v33)
    {
      if ((*(_BYTE *)(v33 + 12) & 0xFE) == 4)
      {
        v20 = *(unsigned int **)(v5 + 128);
        if (v20)
        {
          v34 = *v20;
          if ((_DWORD)v34)
          {
            v35 = *a2;
            v36 = *a2 >> 36;
            if ((*a2 & 2) != 0)
              LODWORD(v36) = -1;
            v24 = -34 * v34;
            while (1)
            {
              v37 = *(_QWORD *)&v20[v24];
              if (v37 == v35)
                break;
              if ((v37 & 2) != 0)
              {
                LODWORD(v38) = -1;
              }
              else if ((v37 & 1) != 0)
              {
                LODWORD(v38) = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v38 = v37 >> 36;
              }
              v39 = v36;
              if ((*a2 & 3) == 1)
                v39 = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
              if ((_DWORD)v38 == v39)
              {
                v40 = (_QWORD *)(v37 & 0xFFFFFFFF8);
                if ((v37 & 1) != 0)
                  v40 = (_QWORD *)*v40;
                v41 = *a2 & 0xFFFFFFFF8;
                if ((v35 & 1) != 0)
                  v41 = *(_QWORD *)(*a2 & 0xFFFFFFFF8);
                if (v40 == (_QWORD *)v41)
                  break;
              }
              v24 += 34;
              if (!(v24 * 4))
                return result;
            }
LABEL_87:
            v12 = &v20[v24];
LABEL_88:
            *a3 = v12;
          }
        }
      }
    }
  }
  else
  {
    v20 = *(unsigned int **)(result + 128);
    if (v20)
    {
      v21 = *v20;
      if ((_DWORD)v21)
      {
        v22 = *a2;
        v23 = *a2 >> 36;
        if ((*a2 & 2) != 0)
          LODWORD(v23) = -1;
        v24 = -34 * v21;
        while (1)
        {
          v25 = *(_QWORD *)&v20[v24];
          if (v25 == v22)
            break;
          if ((v25 & 2) != 0)
          {
            LODWORD(v26) = -1;
          }
          else if ((v25 & 1) != 0)
          {
            LODWORD(v26) = *(_DWORD *)((v25 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v26 = v25 >> 36;
          }
          v27 = v23;
          if ((*a2 & 3) == 1)
            v27 = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
          if ((_DWORD)v26 == v27)
          {
            v28 = (_QWORD *)(v25 & 0xFFFFFFFF8);
            if ((v25 & 1) != 0)
              v28 = (_QWORD *)*v28;
            v29 = *a2 & 0xFFFFFFFF8;
            if ((v22 & 1) != 0)
              v29 = *(_QWORD *)(*a2 & 0xFFFFFFFF8);
            if (v28 == (_QWORD *)v29)
              break;
          }
          v24 += 34;
          if (!(v24 * 4))
            return result;
        }
        goto LABEL_87;
      }
    }
  }
  return result;
}

uint64_t JSC::CodeBlock::baselineAlternative(uint64_t this)
{
  uint64_t v1;
  int v2;

  if (*(_QWORD *)(this + 192))
    this = *(_QWORD *)(this + 192);
  v1 = *(_QWORD *)(this + 120);
  if (v1)
  {
    v2 = *(unsigned __int8 *)(v1 + 12);
    if ((v2 & 0xFE) != 2 && v2 != 0)
    {
      this = 1878;
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t JSC::CodeBlock::baselineVersion(uint64_t this)
{
  uint64_t v1;
  int v2;
  char **v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v1 = *(_QWORD *)(this + 120);
  if (v1)
  {
    LODWORD(v1) = *(unsigned __int8 *)(v1 + 12);
    v2 = v1 & 0xFE;
    if (v2 == 2)
      return this;
  }
  else
  {
    v2 = 0;
  }
  v3 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v3 == &JSC::FunctionCodeBlock::s_info)
  {
    v4 = *(_QWORD *)(this + 64);
    v5 = (uint64_t *)(v4 + 96);
    v6 = (uint64_t *)(v4 + 104);
    if (*(int *)(*(_QWORD *)(this + 56) + 20) >= 0)
      v6 = v5;
  }
  else
  {
    if (v3 != &JSC::EvalCodeBlock::s_info
      && v3 != &JSC::ProgramCodeBlock::s_info
      && v3 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198164254);
    }
    v6 = (uint64_t *)(*(_QWORD *)(this + 64) + 72);
  }
  v7 = *v6;
  if (!v7)
  {
    if (v2 != 4)
    {
      if ((_DWORD)v1)
        goto LABEL_26;
      return this;
    }
    v7 = this;
  }
  if (*(_QWORD *)(v7 + 192))
    this = *(_QWORD *)(v7 + 192);
  else
    this = v7;
  v8 = *(_QWORD *)(this + 120);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v8 + 12);
    if ((v9 & 0xFE) != 2 && v9 != 0)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x1981641F8);
    }
  }
  return this;
}

uint64_t JSC::CodeBlock::replacement(JSC::CodeBlock *this)
{
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v1 == &JSC::FunctionCodeBlock::s_info)
  {
    v2 = *((_QWORD *)this + 8);
    v3 = v2 + 96;
    v4 = v2 + 104;
    if (*(int *)(*((_QWORD *)this + 7) + 20) >= 0)
      v4 = v3;
    return *(_QWORD *)v4;
  }
  if (v1 == &JSC::EvalCodeBlock::s_info
    || v1 == &JSC::ProgramCodeBlock::s_info
    || v1 == &JSC::ModuleProgramCodeBlock::s_info)
  {
    v4 = *((_QWORD *)this + 8) + 72;
    return *(_QWORD *)v4;
  }
  result = 2120;
  __break(0xC471u);
  return result;
}

BOOL JSC::CodeBlock::hasOptimizedReplacement(JSC::CodeBlock *this)
{
  uint64_t v1;
  char **v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    LODWORD(v1) = *(unsigned __int8 *)(v1 + 12);
  v2 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v2 == &JSC::FunctionCodeBlock::s_info)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (uint64_t *)(v3 + 96);
    v5 = (uint64_t *)(v3 + 104);
    if (*(int *)(*((_QWORD *)this + 7) + 20) >= 0)
      v5 = v4;
  }
  else
  {
    if (v2 != &JSC::EvalCodeBlock::s_info
      && v2 != &JSC::ProgramCodeBlock::s_info
      && v2 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198164444);
    }
    v5 = (uint64_t *)(*((_QWORD *)this + 8) + 72);
  }
  v6 = *v5;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
    {
      if (v1 > 1)
      {
        v8 = *(unsigned __int8 *)(v7 + 12);
        if (v8 > 1)
          return v8 > v1;
LABEL_12:
        __break(0xC471u);
        JUMPOUT(0x1981643C8);
      }
    }
    else if (v1 > 1)
    {
      goto LABEL_12;
    }
    __break(0xC471u);
    JUMPOUT(0x198164414);
  }
  return 0;
}

uint64_t JSC::CodeBlock::handlerForIndex(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(a1 + 224);
  if (!v3)
    return 0;
  v5 = *((unsigned int *)v3 + 3);
  if (!(_DWORD)v5)
    return 0;
  v6 = *v3;
  v7 = 24 * v5;
  if (a3)
  {
    while (*(_DWORD *)v6 > a2 || *(_DWORD *)(v6 + 4) <= a2)
    {
      result = 0;
      v6 += 24;
      v7 -= 24;
      if (!v7)
        return result;
    }
  }
  else
  {
    while ((*(_BYTE *)(v6 + 12) & 3) != 0 || *(_DWORD *)v6 > a2 || *(_DWORD *)(v6 + 4) <= a2)
    {
      result = 0;
      v6 += 24;
      v7 -= 24;
      if (!v7)
        return result;
    }
  }
  return v6;
}

uint64_t JSC::CodeBlock::newExceptionHandlingCallSiteIndex(uint64_t a1, unsigned int a2)
{
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_BYTE **)(a1 + 120);
  if (!v3 || (v3[12] & 0xFE) != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1981645B4);
  }
  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 72))(v3) + 40) + 20) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1981645D4);
  }
  JSC::CodeBlock::codeOrigin(a1, a2, &v22);
  v5 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120)) + 40);
  JSC::CodeOrigin::CodeOrigin(&v21, (const JSC::CodeOrigin *)&v22);
  v19 = JSC::DFG::CodeOriginPool::addDisposableCallSiteIndex(v5, &v21, v6, v7, v8, v9, v10, v11);
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((v22 & 1) != 0 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  return v19;
}

uint64_t JSC::CodeBlock::codeOrigin@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120));
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 8 * a2);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v8 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v11 = v8;
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = v7;
      *(_DWORD *)(result + 8) = v11;
      v10 = 1;
      v7 = result;
    }
    else
    {
      v10 = v7;
      v7 = v8 << 36;
    }
    v6 = v7 | v10;
  }
  *a3 = v6;
  return result;
}

void JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeIndexSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned int v9;
  JSC::UnlinkedCodeBlock *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  char v19;
  _BOOL4 v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8x8_t v26;
  WTF *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  _DWORD *v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  WTF *v49;
  _DWORD *v50;
  uint64_t v51;
  unsigned int v52;
  WTF *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  int v65;

  v9 = a3;
  v12 = *(JSC::UnlinkedCodeBlock **)(a1 + 56);
  v13 = *((_QWORD *)v12 + 11);
  if (!v13)
  {
    v13 = JSC::UnlinkedCodeBlock::livenessAnalysisSlow(v12, (JSC::UnlinkedCodeBlock **)a1, a3, a4, a5, a6, a7, a8);
    v12 = *(JSC::UnlinkedCodeBlock **)(a1 + 56);
  }
  v14 = (_QWORD *)*((_QWORD *)v12 + 10);
  v15 = v9 >> 2;
  v16 = (unsigned __int8 *)(*v14 + v15);
  v17 = *v16;
  v18 = v17;
  if ((v17 | 2) == 0x82)
    v18 = v16[1];
  v19 = v17 == 128;
  if (v17 == 130)
    v19 = 2;
  v20 = v17 == 128 || v17 == 130;
  v21 = JSC::opcodeLengths[v18] << v19;
  if (v20)
    v22 = 2;
  else
    v22 = 1;
  JSC::BytecodeLivenessAnalysis::getLivenessInfoAtInstruction(v13, a1, 4 * (v22 + v15 + v21), a7, a8, &v63, a9);
  v61 = 0;
  v62 = 0;
  v23 = v64 + 31;
  if ((unint64_t)(v64 + 31) >= 0x20)
  {
    v24 = 0;
    v25 = (v23 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)((char *)v63 + v25 - 4));
      v26.i16[0] = vaddlv_u8(v26);
      v24 += v26.u32[0];
      v25 -= 4;
    }
    while (v25);
    if (v24)
    {
      if (v24 >> 30)
      {
        __break(0xC471u);
LABEL_59:
        JUMPOUT(0x1981649A4);
      }
      v27 = (WTF *)WTF::fastMalloc((WTF *)(4 * v24));
      LODWORD(v62) = v24;
      v61 = v27;
      v23 = v64 + 31;
    }
    else
    {
      v27 = 0;
    }
    if (v23 >= 0x20)
    {
      v28 = 0;
      v29 = v23 >> 5;
      v30 = -1;
      do
      {
        v31 = *((_DWORD *)v63 + v28);
        if (v31)
        {
          v32 = v30;
          do
          {
            if ((v31 & 1) != 0)
            {
              v65 = v32;
              if (HIDWORD(v62) == (_DWORD)v62)
              {
                v34 = (_DWORD *)WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v61, HIDWORD(v62) + 1, (unint64_t)&v65);
                v27 = v61;
                *((_DWORD *)v61 + HIDWORD(v62)) = *v34;
              }
              else
              {
                *((_DWORD *)v27 + HIDWORD(v62)) = v32;
              }
              ++HIDWORD(v62);
            }
            --v32;
            v33 = v31 > 1;
            v31 >>= 1;
          }
          while (v33);
        }
        ++v28;
        v30 -= 32;
      }
      while (v28 != v29);
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    v35 = 0;
    do
    {
      v65 = v35 + 5;
      if (HIDWORD(v62) == (_DWORD)v62)
      {
        WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister>((uint64_t)&v61, (unint64_t)&v65);
      }
      else
      {
        *((_DWORD *)v61 + HIDWORD(v62)) = v35 + 5;
        ++HIDWORD(v62);
      }
      ++v35;
    }
    while (v35 < *(_DWORD *)(a1 + 28));
  }
  v36 = HIDWORD(v62);
  v37 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v62) + 8));
  v45 = v37;
  *v37 = v36;
  if (!(_DWORD)v36)
  {
    if (!HIDWORD(v62))
      goto LABEL_45;
    goto LABEL_55;
  }
  v46 = v37 + 6;
  v47 = v36;
  do
  {
    *(v46 - 1) = 0;
    *v46 = 0;
    *(v46 - 2) = 0;
    *(_DWORD *)v46 = 0x3FFFFFFF;
    v46 += 3;
    --v47;
  }
  while (v47);
  if (HIDWORD(v62) != (_DWORD)v36)
  {
LABEL_55:
    __break(0xC471u);
    goto LABEL_59;
  }
  v48 = 0;
  v49 = v61;
  v50 = v37 + 6;
  do
  {
    if (v48 >= HIDWORD(v62))
    {
      __break(0xC471u);
      JUMPOUT(0x198164A0CLL);
    }
    *v50 = *((_DWORD *)v49 + v48);
    v50 += 6;
    ++v48;
  }
  while (v36 != v48);
LABEL_45:
  if (!*(_QWORD *)(a1 + 224))
  {
    v54 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v54 = 0u;
    *((_OWORD *)v54 + 1) = 0u;
    __dmb(0xAu);
    std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(a1 + 224), v54, v55, v56, v57, v58, v59, v60);
  }
  __dmb(0xAu);
  v51 = *(_QWORD *)(a1 + 136);
  v52 = *(unsigned __int16 *)(v51 + 30);
  if (!*(_WORD *)(v51 + 30))
    v52 = *(_DWORD *)(v51 + 156);
  *(_QWORD *)(((v51 + v52 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 * *(unsigned int *)(a2 + 8)) = v45;
  v53 = v61;
  if (v61)
  {
    v61 = 0;
    LODWORD(v62) = 0;
    WTF::fastFree((unint64_t)v53, v38, v39, v40, v41, v42, v43, v44);
  }
  if (v63)
    WTF::fastFree((unint64_t)v63, v38, v39, v40, v41, v42, v43, v44);
}

unint64_t JSC::BytecodeLivenessAnalysis::getLivenessInfoAtInstruction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>, int8x8_t a7@<D0>)
{
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  WTF *v21;
  void *v22;

  v11 = a3 >> 2;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(_QWORD *)a1;
  if (v12 < 2)
  {
    v14 = 0;
LABEL_19:
    v15 = v13 + 80 * v14;
    v18 = *(_DWORD *)v15;
  }
  else
  {
    v14 = 0;
    while (1)
    {
      v15 = v13 + 80 * (v14 + ((v12 - 1) >> 1));
      if (*(_DWORD *)v15 == v11)
        break;
      v16 = (v12 - 1) >> 1;
      v12 -= v16 + 1;
      if (*(_DWORD *)v15 <= v11)
      {
        v17 = v16 + 1;
      }
      else
      {
        v12 = v16;
        v17 = 0;
      }
      v14 += v17;
      if (v12 <= 1)
        goto LABEL_19;
    }
    v18 = a3 >> 2;
  }
  v19 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 80);
  if (v18 > v11 || *(_DWORD *)(v15 + 4) + v18 <= v11)
  {
    if (v18 > v11)
      v15 -= 80;
    else
      v15 += 80;
  }
  *a6 = 0;
  v20 = *(_QWORD *)(v15 + 72);
  if ((unint64_t)(v20 + 31) >= 0x20)
  {
    v21 = (WTF *)(((unint64_t)(v20 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
    v22 = (void *)WTF::fastMalloc(v21);
    bzero(v22, (size_t)v21);
    *a6 = v22;
  }
  a6[1] = v20;
  return JSC::BytecodeLivenessPropagation::computeLocalLivenessForInstruction<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>(a2, v19, a1, v15, a3, (uint64_t)a6, a4, a5, a7);
}

char *JSC::CodeBlock::removeExceptionHandlerForCallSite(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *result;

  v2 = *(uint64_t **)(a1 + 224);
  if (!v2 || (v3 = *((unsigned int *)v2 + 3), !(_DWORD)v3))
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198164BD0);
  }
  v4 = 0;
  v5 = *v2;
  v6 = 24 * v3;
  v7 = 24 * v3 - 48;
  while (1)
  {
    result = (char *)(v5 + v4);
    if (*(_DWORD *)(v5 + v4) <= a2 && *(_DWORD *)(v5 + v4 + 4) > a2)
      break;
    v4 += 24;
    v7 -= 24;
    if (v6 == v4)
      goto LABEL_13;
  }
  if (v6 - 24 != v4)
  {
    result = (char *)memmove(result, result + 24, 24 * (v7 / 0x18) + 24);
    LODWORD(v3) = *((_DWORD *)v2 + 3);
  }
  *((_DWORD *)v2 + 3) = v3 - 1;
  return result;
}

unint64_t JSC::CodeBlock::lineColumnForBytecodeIndex(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;

  v2 = a2 >> 2;
  v3 = *(_QWORD *)(a1 + 56);
  if (v2 >= *(unsigned int *)(*(_QWORD *)(v3 + 80) + 12))
  {
    result = 2038;
    __break(0xC471u);
  }
  else
  {
    v5 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v3 + 160), v2);
    v6 = *(_QWORD *)(a1 + 64);
    if ((_DWORD)v5)
      v7 = 1;
    else
      v7 = *(_DWORD *)(v6 + 60) + 1;
    return (v5 + *(_DWORD *)(v6 + 56) + 1) | ((unint64_t)(v7 + HIDWORD(v5)) << 32);
  }
  return result;
}

uint64_t JSC::CodeBlock::hasOpDebugForLineAndColumn(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  int v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  char v22;
  _BOOL4 v23;
  int v24;
  int v25;
  uint64_t result;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 56) + 80);
  v4 = *((_DWORD *)v3 + 3);
  if (v4)
  {
    v5 = a3;
    v8 = 0;
    v9 = a3 & 0xFF00000000;
    v10 = *v3;
    do
    {
      v11 = (unsigned __int8 *)(v10 + v8);
      v12 = *v11;
      if ((v12 | 2) == 0x82)
        v12 = v11[1];
      v13 = v8;
      if (v12 == 114)
      {
        v14 = *(_QWORD *)(a1 + 56);
        if ((v8 & 0x3FFFFFFF) >= *(_DWORD *)(*(_QWORD *)(v14 + 80) + 12))
        {
          result = 2038;
          __break(0xC471u);
          return result;
        }
        v15 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v14 + 160), v8 & 0x3FFFFFFF);
        v16 = *(_QWORD *)(a1 + 64);
        if ((_DWORD)v15)
          v17 = 1;
        else
          v17 = *(_DWORD *)(v16 + 60) + 1;
        if ((_DWORD)v15 + *(_DWORD *)(v16 + 56) + 1 == a2)
        {
          v18 = 1;
          if (!v9 || v17 + HIDWORD(v15) == v5)
            return v18;
        }
      }
      v10 = *v3;
      v19 = (unsigned __int8 *)(*v3 + v13);
      v20 = *v19;
      v21 = v20;
      if ((v20 | 2) == 0x82)
        v21 = v19[1];
      v22 = v20 == 128;
      if (v20 == 130)
        v22 = 2;
      v23 = v20 == 128 || v20 == 130;
      v24 = JSC::opcodeLengths[v21] << v22;
      if (v23)
        v25 = 2;
      else
        v25 = 1;
      v8 = v25 + v13 + v24;
    }
    while (v8 != v4);
  }
  return 0;
}

uint64_t JSC::CodeBlock::linkIncomingCall(uint64_t this, JSC::JSCell *a2, JSC::CallLinkInfoBase *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];

  v4 = this;
  if (!a2)
    goto LABEL_2;
  if ((*(_BYTE *)(this + 18) & 0x20) != 0)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  if (*((_BYTE *)a2 + 5) == 18)
    v7 = a2;
  else
    v7 = 0;
  if (BYTE4(qword_1ECF4C332))
  {
    v31[0] = (uint64_t)v7;
    this = WTF::dataLog<char [25],WTF::PointerDump<JSC::CodeBlock>,char [5],JSC::CodeBlock,char [2]>("Noticing call link from ", v31, " to ", this, "\n");
  }
  if (!*(_BYTE *)(v4 + 17))
    goto LABEL_2;
  if (!v7)
  {
    *(_BYTE *)(v4 + 17) = 0;
    if (BYTE4(qword_1ECF4C332))
      this = WTF::dataLog<char [88],char [2]>("    Clearing SABI because caller is native.", "\n");
    goto LABEL_2;
  }
  v8 = *(_QWORD *)(v4 + 120);
  if (!v8 || *(_BYTE *)(v8 + 12) != 3)
    goto LABEL_2;
  v9 = *(_QWORD *)(v4 + 64);
  v10 = *(unsigned __int8 *)(v9 + 5);
  if ((*(_QWORD *)(*(_QWORD *)(v4 + 56) + 20) & 0x80000000) != 0)
  {
    if (v10 == 12 && (*(_WORD *)(*(_QWORD *)(v9 + 88) + 51) & 0x100) != 0)
      goto LABEL_18;
    v11 = *(_DWORD *)(v4 + 44);
    v12 = DWORD2(xmmword_1ECF4C4A0);
  }
  else
  {
    if (v10 == 12 && (*(_WORD *)(*(_QWORD *)(v9 + 88) + 51) & 0x100) != 0)
      goto LABEL_18;
    v11 = *(_DWORD *)(v4 + 44);
    v12 = xmmword_1ECF4C4A0;
  }
  if (v11 > v12)
    goto LABEL_2;
LABEL_18:
  if ((*(_WORD *)(v9 + 70) & 2) != 0 || (*(_BYTE *)(v4 + 18) & 3) != 2)
    goto LABEL_2;
  if (*((_DWORD *)v7 + 11) > DWORD2(xmmword_1ECF4C4B0))
  {
    *(_BYTE *)(v4 + 17) = 0;
    if (BYTE4(qword_1ECF4C332))
      this = WTF::dataLog<char [88],char [2]>("    Clearing SABI because caller is too large.", "\n");
  }
  else
  {
    v13 = *((_QWORD *)v7 + 15);
    if (v13)
    {
      v14 = *(unsigned __int8 *)(v13 + 12);
      if (v14 == 2)
      {
        *(_BYTE *)(v4 + 17) = 0;
        if (BYTE4(qword_1ECF4C332))
          this = WTF::dataLog<char [88],char [2]>("    Clearing SABI because caller is in LLInt.", "\n");
        goto LABEL_2;
      }
      if ((v14 & 0xFE) == 4)
      {
        *(_BYTE *)(v4 + 17) = 0;
        if (BYTE4(qword_1ECF4C332))
          this = WTF::dataLog<char [88],char [2]>("    Clearing SABI bcause caller was already optimized.", "\n");
        goto LABEL_2;
      }
    }
    if ((*(_WORD *)(*((_QWORD *)v7 + 7) + 28) & 0x3000) == 0x2000)
    {
      v15 = *((_BYTE *)v7 + 18) & 3;
      if (v15 != 3)
      {
        if ((v15 - 1) >= 2)
        {
          if (BYTE4(qword_1ECF4C332))
            this = WTF::dataLog<char [88],char [2]>("    Clearing SABI because the caller is not a DFG candidate.", "\n");
          *(_BYTE *)(v4 + 17) = 0;
        }
        goto LABEL_2;
      }
      v30 = 2;
      JSC::FullCodeOrigin::FullCodeOrigin(v31, (uint64_t)v7, &v30);
      WTF::dataLog<char [14],JSC::FullCodeOrigin,char [5],JSC::CodeBlock,char [45]>("In call from ", (JSC::FullCodeOrigin *)v31, " to ", v4, ": caller's DFG capability level is not set.\n");
      JSC::FullCodeOrigin::~FullCodeOrigin((JSC::FullCodeOrigin *)v31, v16, v17, v18, v19, v20, v21, v22);
      JSC::CodeOrigin::~CodeOrigin((JSC::CodeOrigin *)&v30, v23, v24, v25, v26, v27, v28, v29);
      __break(0xC471u);
LABEL_45:
      JUMPOUT(0x198165018);
    }
    *(_BYTE *)(v4 + 17) = 0;
    if (BYTE4(qword_1ECF4C332))
      this = WTF::dataLog<char [88],char [2]>("    Clearing SABI because caller is not a function.", "\n");
  }
LABEL_2:
  v6 = *(_QWORD *)(v4 + 88);
  v5 = (_QWORD *)(v4 + 88);
  *(_QWORD *)a3 = v6;
  *((_QWORD *)a3 + 1) = v5;
  *v5 = a3;
  *(_QWORD *)(v6 + 8) = a3;
  return this;
}

uint64_t JSC::CodeBlock::computeCapabilityLevel(JSC::CodeBlock *this)
{
  char **v1;
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;

  v1 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v1 == &JSC::FunctionCodeBlock::s_info)
  {
    v2 = HIBYTE(dword_1ECF4C240);
    if ((*(_DWORD *)(*((_QWORD *)this + 7) + 20) & 0x80000000) != 0)
    {
      if (HIBYTE(dword_1ECF4C240))
        v2 = *((_DWORD *)this + 11) <= xmmword_1ECF4C490
          && (*(_WORD *)(*((_QWORD *)this + 8) + 70) & 4) == 0;
      v3 = *((_QWORD *)this + 8);
      if (*(_BYTE *)(v3 + 5) == 12 && (*(_WORD *)(*(_QWORD *)(v3 + 88) + 51) & 0x100) != 0)
        goto LABEL_10;
      v4 = *((_DWORD *)this + 11);
      v5 = DWORD2(xmmword_1ECF4C4A0);
    }
    else
    {
      if (HIBYTE(dword_1ECF4C240))
        v2 = *((_DWORD *)this + 11) <= xmmword_1ECF4C490
          && (*(_WORD *)(*((_QWORD *)this + 8) + 70) & 4) == 0;
      v3 = *((_QWORD *)this + 8);
      if (*(_BYTE *)(v3 + 5) == 12 && (*(_WORD *)(*(_QWORD *)(v3 + 88) + 51) & 0x100) != 0)
        goto LABEL_10;
      v4 = *((_DWORD *)this + 11);
      v5 = xmmword_1ECF4C4A0;
    }
    if (v4 > v5)
    {
      v6 = 0;
LABEL_11:
      if ((v2 & v6) != 0)
        return 2;
      else
        return v2 & !v6;
    }
LABEL_10:
    v6 = (*(_WORD *)(v3 + 70) & 2) == 0;
    goto LABEL_11;
  }
  if (v1 != &JSC::EvalCodeBlock::s_info
    && v1 != &JSC::ProgramCodeBlock::s_info
    && v1 != &JSC::ModuleProgramCodeBlock::s_info)
  {
    __break(0xC471u);
    JUMPOUT(0x1981652A4);
  }
  if (HIBYTE(dword_1ECF4C240) && *((_DWORD *)this + 11) <= xmmword_1ECF4C490)
    return ~(*(unsigned __int16 *)(*((_QWORD *)this + 8) + 70) >> 1) & 2;
  else
    return 0;
}

void JSC::CodeBlock::jettison(uint64_t a1, unsigned int a2, int a3, int64_t a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  JSC::Profiler::Database *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  JSC::DFG::CommonData *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  JSC::DFG::CommonData *v51;
  uint64_t v52;
  void *v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 v61;
  char **v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  WTF *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  void (***v88)(WTF::StringPrintStream *__hidden);
  void (**v89)(WTF::StringPrintStream *__hidden);
  unint64_t v90;
  WTF *v91;
  unsigned int *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  char v109;
  int v110;
  unint64_t StatusReg;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF *v129;
  unint64_t v130;
  unint64_t v131;
  unsigned int v132;
  WTF *v133;
  const void *v134;
  BOOL v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v132 = a2;
  v13 = *(_QWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 18) |= 0x20u;
  v14 = *(JSC::Profiler::Database **)(v13 + 93016);
  if (v14)
  {
    v135 = a3 == 1;
    v134 = (const void *)a4;
    v136 = off_1E3572250;
    v137 = (WTF *)v139;
    v138 = xmmword_199122F80;
    v139[0] = 0;
    WTF::PrintStream::printImpl<char [8],JSC::Profiler::JettisonReason,char [14],BOOL,char [12],WTF::PointerDump<JSC::FireDetail>>((WTF::PrintStream *)&v136, (int *)&v132, &v135, &v134);
    v136[5]((WTF::StringPrintStream *)&v136);
    WTF::StringPrintStream::toCString(&v136, (uint64_t *)&v133);
    if (v137 != (WTF *)v139)
      WTF::fastFree((unint64_t)v137, v117, v118, v119, v120, v121, v122, v123);
    JSC::Profiler::Database::logEvent(v14, a1, "jettison", &v133, v120, v121, v122, v123);
    v129 = v133;
    v133 = 0;
    if (v129)
    {
      if (*(_DWORD *)v129 == 1)
        WTF::fastFree((unint64_t)v129, v124, v125, v126, v127, v128, a8, a9);
      else
        --*(_DWORD *)v129;
    }
  }
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198165BACLL);
  }
  if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
  {
    WTF::dataLog<char [13],JSC::CodeBlock>(a1);
    if (a3 == 1)
      WTF::dataLog<char [16]>(" and counting reoptimization");
    WTF::dataLog<char [9],JSC::Profiler::JettisonReason>((int *)&v132);
    if (a4)
      WTF::dataLog<char [3],JSC::FireDetail>(a4);
    WTF::dataLog<char [16]>(".\n");
  }
  if (a2 == 1 && (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A)))
  {
    WTF::dataLog<JSC::CodeBlock,char [63]>(a1);
    v85 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120));
    v86 = 0;
    v87 = *(unsigned int **)(v85 + 56);
    if (v87)
      v88 = (void (***)(WTF::StringPrintStream *__hidden))(v87 + 2);
    else
      v88 = 0;
    if (v87)
      v86 = (uint64_t)&v87[6 * *v87 + 2];
    while (v88 != (void (***)(WTF::StringPrintStream *__hidden))v86)
    {
      v89 = *v88;
      v90 = (unint64_t)v88[1];
      v91 = (WTF *)v88[2];
      if (*v88)
      {
        if ((v89 & 8) != 0)
        {
          if ((*((_BYTE *)v89 - 79) & 1) == 0)
            goto LABEL_115;
        }
        else if (*(_DWORD *)((unint64_t)v89 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v13 + 432)
               || ((*(_QWORD *)(((unint64_t)v89 & 0xFFFFFFFFFFFFC000)
                              + 8 * (((unint64_t)v89 >> 10) & 0xF)
                              + 0x28) >> ((unint64_t)v89 >> 4)) & 1) == 0)
        {
LABEL_115:
          v136 = *v88;
          v133 = v91;
          v134 = (const void *)v90;
          WTF::dataLog<char [22],WTF::RawPointer,char [3],WTF::RawPointer,char [5],WTF::RawPointer,char [3]>((const void **)&v136, &v134, (const void **)&v133);
          goto LABEL_116;
        }
      }
      if ((v90 & 8) != 0)
      {
        if ((*(_BYTE *)(v90 - 79) & 1) == 0)
          goto LABEL_115;
      }
      else if (*(_DWORD *)(v90 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v13 + 432)
             || ((*(_QWORD *)((v90 & 0xFFFFFFFFFFFFC000) + 8 * ((v90 >> 10) & 0xF) + 0x28) >> (v90 >> 4)) & 1) == 0)
      {
        goto LABEL_115;
      }
LABEL_116:
      v88 += 3;
    }
    v92 = *(unsigned int **)(v85 + 64);
    if (v92)
    {
      v93 = 0;
      do
      {
        if (v93 >= *v92)
          break;
        v94 = *(_QWORD *)&v92[2 * v93 + 2];
        if ((v94 & 8) != 0)
        {
          if ((*(_BYTE *)(v94 - 79) & 1) != 0)
            goto LABEL_128;
        }
        else if (*(_DWORD *)(v94 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(v13 + 432)
               && ((*(_QWORD *)((v94 & 0xFFFFFFFFFFFFC000) + 8 * ((v94 >> 10) & 0xF) + 0x28) >> (v94 >> 4)) & 1) != 0)
        {
          goto LABEL_128;
        }
        v136 = (void (**)(WTF::StringPrintStream *__hidden))v94;
        WTF::dataLog<char [20],WTF::RawPointer,char [3]>((const void **)&v136);
LABEL_128:
        ++v93;
        v92 = *(unsigned int **)(v85 + 64);
      }
      while (v92);
    }
  }
  ++*(_DWORD *)(v13 + 916);
  v15 = *(unsigned int **)(a1 + 120);
  if (v15)
  {
    if ((v15[3] & 0xFE) == 4)
    {
      v16 = v15 + 2;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v18 = (JSC::DFG::CommonData *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 72))(v15);
      JSC::DFG::CommonData::clearWatchpoints(v18, v19, v20, v21, v22, v23, v24, v25);
      do
      {
        v26 = __ldaxr(v16);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v16));
      if (!v27)
      {
        atomic_store(1u, v15 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 32))(v15);
      }
    }
  }
  if (v132 != 9)
  {
    v28 = *(unsigned int **)(a1 + 120);
    if (v28)
    {
      v29 = v28 + 2;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    v31 = v28 + 2;
    v35 = *(_QWORD *)((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v28 + 72))(v28) + 192);
    do
    {
      v36 = __ldaxr(v31);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v31));
    if (!v37)
    {
      atomic_store(1u, v28 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 32))(v28);
    }
    if (v35)
      JSC::Profiler::Compilation::setJettisonReason(v35, (void *)v132, a4, v32, v33, v34, a8, a9);
    v38 = *(_QWORD *)(a1 + 120);
    if (v38)
    {
      if ((*(_BYTE *)(v38 + 12) & 0xFE) == 4)
      {
        v39 = *(_QWORD *)(a1 + 128);
        if (v39)
        {
          if (*(_BYTE *)(v39 + 48))
          {
            if (JSC::CodeBlock::replacement((JSC::CodeBlock *)a1) == a1)
            {
              if (JSC::Heap::currentThreadIsDoingGCWork((JSC::Heap *)(v13 + 192)))
              {
                v130 = *(_QWORD *)(a1 + 64);
                if ((v130 & 8) != 0)
                {
                  if ((*(_BYTE *)(v130 - 79) & 1) == 0)
                    goto LABEL_172;
                }
                else if (!JSC::MarkedBlock::isMarked(v130 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(v13 + 432), v130))
                {
                  goto LABEL_172;
                }
              }
              __break(0xC471u);
              JUMPOUT(0x198165CD8);
            }
            goto LABEL_172;
          }
          *(_BYTE *)(v39 + 48) = 1;
        }
      }
      v40 = (unsigned int *)(v38 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      v42 = *(unsigned __int8 *)(v38 + 12);
      if (v42 == 4)
      {
        v43 = (unsigned __int8 *)(v38 + 248);
      }
      else
      {
        if (v42 != 5)
        {
          do
          {
            v115 = __ldaxr(v40);
            v116 = v115 - 1;
          }
          while (__stlxr(v116, v40));
          if (!v116)
          {
            atomic_store(1u, (unsigned int *)(v38 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
          }
          goto LABEL_50;
        }
        v43 = (unsigned __int8 *)(v38 + 232);
      }
      v44 = *v43;
      do
      {
        v45 = __ldaxr(v40);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v40));
      if (!v46)
      {
        atomic_store(1u, (unsigned int *)(v38 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
      }
      if (v44)
        goto LABEL_50;
    }
    else
    {
      if (MEMORY[0xC] == 4)
      {
        v95 = 248;
      }
      else
      {
        if (MEMORY[0xC] != 5)
          goto LABEL_50;
        v95 = 232;
      }
      if (*(_BYTE *)v95)
        goto LABEL_50;
    }
    v47 = *(unsigned int **)(a1 + 120);
    if (v47)
    {
      v48 = v47 + 2;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
    }
    v50 = v47 + 2;
    v51 = (JSC::DFG::CommonData *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v47 + 72))(v47);
    v54 = JSC::DFG::CommonData::invalidateLinkedCode(v51, v52, v53);
    do
    {
      v55 = __ldaxr(v50);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v50));
    if (!v56)
    {
      atomic_store(1u, v47 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 32))(v47);
    }
    if ((v54 & 1) == 0)
    {
      if (JSC::CodeBlock::replacement((JSC::CodeBlock *)a1) == a1)
      {
        if (JSC::Heap::currentThreadIsDoingGCWork((JSC::Heap *)(v13 + 192)))
        {
          v131 = *(_QWORD *)(a1 + 64);
          if ((v131 & 8) != 0)
          {
            if ((*(_BYTE *)(v131 - 79) & 1) == 0)
              goto LABEL_172;
          }
          else if (!JSC::MarkedBlock::isMarked(v131 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(v13 + 432), v131))
          {
            goto LABEL_172;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x198165D34);
      }
      goto LABEL_172;
    }
  }
LABEL_50:
  if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
    WTF::dataLog<char [20],JSC::CodeBlock,char [2]>(a1);
  if (a3 == 1)
  {
    v57 = *(_QWORD *)(a1 + 192);
    if (!v57)
      v57 = a1;
    v58 = *(_QWORD *)(v57 + 120);
    if (v58)
    {
      v59 = *(unsigned __int8 *)(v58 + 12);
      if ((v59 & 0xFE) != 2 && v59 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198165DD0);
      }
    }
    v61 = *(_WORD *)(v57 + 106) + 1;
    *(_WORD *)(v57 + 106) = v61;
    if (DWORD2(xmmword_1ECF4C534) < v61)
      *(_WORD *)(v57 + 106) = WORD4(xmmword_1ECF4C534);
    if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
      WTF::dataLog<char [34],JSC::CodeBlock,char [2]>(a1);
  }
  v62 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
  if (v62 == &JSC::FunctionCodeBlock::s_info)
  {
    v63 = *(_QWORD *)(a1 + 64);
    v64 = (_QWORD *)(v63 + 96);
    v65 = (_QWORD *)(v63 + 104);
    if (*(int *)(*(_QWORD *)(a1 + 56) + 20) >= 0)
      v65 = v64;
  }
  else
  {
    if (v62 != &JSC::EvalCodeBlock::s_info
      && v62 != &JSC::ProgramCodeBlock::s_info
      && v62 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198165C50);
    }
    v65 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 72);
  }
  if (*v65 != a1)
    goto LABEL_172;
  v66 = *(_QWORD *)(a1 + 192);
  if (v66)
    JSC::CodeBlock::optimizeAfterWarmUp(v66, a5);
  v67 = v132;
  if (v132 - 11 > 0xFFFFFFFD)
    goto LABEL_163;
  v68 = *(unsigned __int8 **)(a1 + 120);
  if (!v68)
    goto LABEL_177;
  v69 = *(WTF **)(a1 + 192);
  v70 = v68[12];
  if (v70 != 4)
  {
    if (v70 == 5)
    {
      v96 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v68 + 96))(v68);
      v101 = *(unsigned int *)(v96 + 252);
      if ((_DWORD)v101)
      {
        v102 = *(_QWORD *)(v96 + 240);
        v103 = 72 * v101;
        do
        {
          if (*(_DWORD *)v102)
          {
            v104 = *(_QWORD *)(v102 + 16);
            v105 = (uint64_t *)(v104 & 0xFFFFFFFF8);
            v106 = v104 & 0xFFFFFFFF8;
            if ((v104 & 1) != 0)
              v106 = *v105;
            v107 = v69;
            if (v106)
              v107 = *(WTF **)(v106 + 8);
            if (v107)
            {
              v108 = v104 & 0xFFFFFFFF8;
              if ((v104 & 1) != 0)
                v108 = *v105;
              if (v108)
                v109 = 2;
              else
                v109 = 1;
              LODWORD(v136) = 0;
              if (*(_BYTE *)(v102 + 5))
              {
                LOBYTE(v110) = 21;
              }
              else
              {
                if ((v104 & 2) != 0)
                {
                  LODWORD(v104) = -1;
                }
                else if ((v104 & 1) != 0)
                {
                  LODWORD(v104) = *(_DWORD *)((v104 & 0xFFFFFFFF8) + 8);
                }
                else
                {
                  v104 >>= 36;
                }
                v110 = *(unsigned __int8 *)(v102 + 4);
                if (v110 == 17)
                  LODWORD(v104) = 0;
                LODWORD(v136) = v104;
              }
              BYTE4(v136) = v110;
              BYTE5(v136) = 2;
              BYTE6(v136) = v109;
              JSC::DFG::ExitProfile::add(v107, (unsigned __int8 *)&v136, v97, v98, v99, v100, a8, a9);
            }
          }
          v102 += 72;
          v103 -= 72;
        }
        while (v103);
      }
      goto LABEL_163;
    }
LABEL_177:
    __break(0xC471u);
    JUMPOUT(0x198165A38);
  }
  v75 = *(unsigned int **)((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v68 + 88))(v68) + 264);
  if (v75)
    v76 = v75 + 2;
  else
    v76 = 0;
  if (v75)
    v77 = (uint64_t)&v75[18 * *v75 + 2];
  else
    v77 = 0;
  for (; v76 != (unsigned int *)v77; v76 += 18)
  {
    if (*v76)
    {
      v78 = *((_QWORD *)v76 + 2);
      v79 = (uint64_t *)(v78 & 0xFFFFFFFF8);
      v80 = v78 & 0xFFFFFFFF8;
      if ((v78 & 1) != 0)
        v80 = *v79;
      v81 = v69;
      if (v80)
        v81 = *(WTF **)(v80 + 8);
      if (v81)
      {
        v82 = v78 & 0xFFFFFFFF8;
        if ((v78 & 1) != 0)
          v82 = *v79;
        if (v82)
          v83 = 2;
        else
          v83 = 1;
        LODWORD(v136) = 0;
        if (*((_BYTE *)v76 + 5))
        {
          LOBYTE(v84) = 21;
        }
        else
        {
          if ((v78 & 2) != 0)
          {
            LODWORD(v78) = -1;
          }
          else if ((v78 & 1) != 0)
          {
            LODWORD(v78) = *(_DWORD *)((v78 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            v78 >>= 36;
          }
          v84 = *((unsigned __int8 *)v76 + 4);
          if (v84 == 17)
            LODWORD(v78) = 0;
          LODWORD(v136) = v78;
        }
        BYTE4(v136) = v84;
        BYTE5(v136) = 1;
        BYTE6(v136) = v83;
        JSC::DFG::ExitProfile::add(v81, (unsigned __int8 *)&v136, v71, v72, v73, v74, a8, a9);
      }
    }
  }
LABEL_163:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v112 = *(_QWORD *)(StatusReg + 736);
  if (!v112)
    v112 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v112 + 5) > 0x3Fu)
    goto LABEL_173;
  v113 = *(_QWORD *)(StatusReg + 736);
  if (!v113)
    v113 = WTF::Thread::initializeCurrentTLS(0);
  if ((*(_BYTE *)(v113 + 5) & 8) != 0 || *(_BYTE *)(v13 + 202))
  {
LABEL_173:
    v114 = *(_QWORD *)(a1 + 64);
    if ((v114 & 8) != 0)
    {
      if ((*(_BYTE *)(v114 - 79) & 1) == 0)
        goto LABEL_172;
    }
    else if (*(_DWORD *)(v114 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(v13 + 432)
           || ((*(_QWORD *)((v114 & 0xFFFFFFFFFFFFC000) + 8 * ((v114 >> 10) & 0xF) + 0x28) >> (v114 >> 4)) & 1) == 0)
    {
      goto LABEL_172;
    }
  }
  JSC::ScriptExecutable::installCode(*(_QWORD *)(a1 + 64), (JSC::VM *)v13, *(JSC::CodeBlock **)(a1 + 192), (*(unsigned __int16 *)(*(_QWORD *)(a1 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(a1 + 56) + 20) >> 31, v67, a8, a9, *(uint8x8_t *)&a5);
  if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
    WTF::dataLog<char [37],JSC::CodeBlock,char [2]>("    Did install baseline version of ", a1, "\n");
LABEL_172:
  --*(_DWORD *)(v13 + 916);
}

uint64_t WTF::dataLog<char [13],JSC::CodeBlock>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Jettisoning ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [9],JSC::Profiler::JettisonReason>(int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  uint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  uint64_t result;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", " due to ");
  v5 = *a1;
  if (v5 >= 0xB)
  {
    result = 72;
    __break(0xC471u);
  }
  else
  {
    v6 = off_1E3580FE0[v5];
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v7, "%s", v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

uint64_t WTF::dataLog<char [3],JSC::FireDetail>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", ", ");
  (*(void (**)(uint64_t, WTF::PrintStream *))(*(_QWORD *)a1 + 16))(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [63]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", " will be jettisoned because of the following dead references:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [22],WTF::RawPointer,char [3],WTF::RawPointer,char [5],WTF::RawPointer,char [3]>(const void **a1, const void **a2, const void **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "    Transition under ");
  WTF::PrintStream::printf(v8, "%p", *a1);
  WTF::PrintStream::printf(v8, "%s", ", ");
  WTF::PrintStream::printf(v8, "%p", *a2);
  WTF::PrintStream::printf(v8, "%s", " -> ");
  WTF::PrintStream::printf(v8, "%p", *a3);
  WTF::PrintStream::printf(v8, "%s", ".\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [20],WTF::RawPointer,char [3]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Weak reference ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", ".\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [20],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Did invalidate ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::CodeBlock::countReoptimization(uint64_t this)
{
  unsigned __int16 v1;

  v1 = *(_WORD *)(this + 106) + 1;
  *(_WORD *)(this + 106) = v1;
  if (DWORD2(xmmword_1ECF4C534) < v1)
    *(_WORD *)(this + 106) = WORD4(xmmword_1ECF4C534);
  return this;
}

uint64_t WTF::dataLog<char [34],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Did count reoptimization for ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [37],JSC::CodeBlock,char [2]>(const char *a1, uint64_t a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::CodeBlock::globalObjectFor(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(*a2 & 0xFFFFFFFF8);
  if ((*a2 & 1) != 0)
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      return *(_QWORD *)(a1 + 8);
    goto LABEL_3;
  }
  if (v2)
LABEL_3:
    a1 = v2[1];
  return *(_QWORD *)(a1 + 8);
}

uint64_t WTF::dataLog<char [14],JSC::FullCodeOrigin,char [5],JSC::CodeBlock,char [45]>(const char *a1, JSC::FullCodeOrigin *a2, const char *a3, uint64_t a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  JSC::FullCodeOrigin::dump(a2, v12);
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::CodeBlock::dumpAssumingJITType(a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

_QWORD *JSC::FullCodeOrigin::FullCodeOrigin(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;

  *result = a2;
  v3 = *a3;
  if ((*a3 & 1) != 0)
  {
    v4 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v5 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v5 != 0x3FFFFFFF)
        ? (v6 = (_DWORD)v5 == -1)
        : (v6 = 1),
          v6))
    {
      v7 = 2;
    }
    else if (v5 >> 28)
    {
      v10 = result;
      v8 = v4;
      v9 = v5;
      v4 = WTF::fastMalloc((WTF *)0x10);
      result = v10;
      *(_QWORD *)v4 = v8;
      *(_DWORD *)(v4 + 8) = v9;
      v7 = 1;
    }
    else
    {
      v7 = v4;
      v4 = v5 << 36;
    }
    v3 = v4 | v7;
  }
  result[1] = v3;
  return result;
}

void JSC::FullCodeOrigin::~FullCodeOrigin(JSC::FullCodeOrigin *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0 && (v8 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v8 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::CodeBlock::reoptimizationRetryCounter(JSC::CodeBlock *this)
{
  return *((unsigned __int16 *)this + 53);
}

double JSC::CodeBlock::optimizationThresholdScalingFactor(JSC::CodeBlock *this, double a2)
{
  double result;
  int v3;
  int v4;
  double v5;
  double v6;

  LODWORD(a2) = *((_DWORD *)this + 11);
  v6 = (double)*(unint64_t *)&a2;
  result = sqrt((double)*(unint64_t *)&a2 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) != 0x1000)
  {
    v5 = result;
    if (!BYTE1(qword_1ECF4C332))
      return result;
    v3 = 1;
LABEL_7:
    v4 = v3;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)this, ": bytecode cost is ", &v6, ", scaling execution counter by ", &v5, " * ", &v4, "\n");
    return v5;
  }
  v3 = DWORD1(xmmword_1ECF4C514);
  result = result * (double)SDWORD1(xmmword_1ECF4C514);
  v5 = result;
  if (BYTE1(qword_1ECF4C332))
    goto LABEL_7;
  return result;
}

uint64_t JSC::CodeBlock::adjustedCounterValue(JSC::CodeBlock *this, int a2, double a3)
{
  double v4;
  double v5;
  uint64_t result;
  double v7;
  int v8;
  int v9;
  double v10;
  double v11;

  v4 = (double)a2;
  LODWORD(a3) = *((_DWORD *)this + 11);
  v11 = (double)*(unint64_t *)&a3;
  v5 = sqrt((double)*(unint64_t *)&a3 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) == 0x1000)
  {
    v8 = DWORD1(xmmword_1ECF4C514);
    v5 = v5 * (double)SDWORD1(xmmword_1ECF4C514);
    v10 = v5;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_3;
  }
  else
  {
    v10 = v5;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_3;
    v8 = 1;
  }
  v9 = v8;
  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)this, ": bytecode cost is ", &v11, ", scaling execution counter by ", &v10, " * ", &v9, "\n");
  v5 = v10;
LABEL_3:
  result = 1;
  v7 = v5 * v4 * (double)(1 << *((_WORD *)this + 53));
  if (v7 >= 1.0)
  {
    if (v7 > 2147483650.0)
      return 0x7FFFFFFFLL;
    else
      return (int)v7;
  }
  return result;
}

uint64_t JSC::CodeBlock::checkIfOptimizationThresholdReached(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  JSC::CodeBlock *v19;
  int v20;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  unsigned int v48;
  int v49;
  double v50;
  JSC::Profiler::Database *v51;
  uint64_t result;
  int v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  double *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  double v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  double v74;
  double v75;
  double v76;
  int v77;
  unsigned int v78;
  double v79;
  float v80;
  float v81;
  double v82;
  double v83;
  double v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  int v100;
  double v101;
  double v102;
  double v103;
  double v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  double v109;
  int v110;
  unint64_t v111;
  double v112;
  unint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  int v118;
  double v119;
  WTF *v120;

  v9 = JSC::theGlobalJITWorklist;
  if (!JSC::theGlobalJITWorklist)
    goto LABEL_21;
  v10 = (unsigned __int8 *)(*(_QWORD *)(JSC::theGlobalJITWorklist + 304) + 4);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  v12 = *(_QWORD *)(v9 + 144);
  if (!v12)
    goto LABEL_61;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((0xD7862706ELL
              * (unint64_t)(277951225 * ((v16 >> 31) ^ v16) + 190375932)) >> 4);
  v18 = v12 + 24 * v17;
  v19 = *(JSC::CodeBlock **)v18;
  v20 = *(_DWORD *)(v18 + 8);
  if (*(_QWORD *)v18 != this || v20 != 2)
  {
    v53 = 1;
    while (v19 || v20)
    {
      v17 = (v17 + v53) & v13;
      v18 = v12 + 24 * v17;
      v19 = *(JSC::CodeBlock **)v18;
      v20 = *(_DWORD *)(v18 + 8);
      ++v53;
      if (*(_QWORD *)v18 == this && v20 == 2)
        goto LABEL_11;
    }
    v18 = v12 + 24 * *(unsigned int *)(v12 - 4);
  }
LABEL_11:
  if (v18 == v12 + 24 * *(unsigned int *)(v12 - 4))
  {
LABEL_61:
    v22 = 0;
  }
  else if (*(_DWORD *)(*(_QWORD *)(v18 + 16) + 12) == 2)
  {
    v22 = 2;
  }
  else
  {
    v22 = 1;
  }
  v23 = __ldxr(v10);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, v10))
LABEL_19:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (v22 == 2)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(this, ": Optimizing next invocation.", "\n");
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(this + 200, 0, this);
    return 1;
  }
LABEL_21:
  v24 = (int *)(this + 208);
  v25 = *(_QWORD *)(this + 192);
  if (!v25)
    v25 = this;
  v26 = *(_QWORD *)(v25 + 120);
  if (v26)
  {
    v27 = *(unsigned __int8 *)(v26 + 12);
    if ((v27 & 0xFE) != 2 && v27 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198167268);
    }
  }
  v29 = *(_QWORD *)(v25 + 72);
  if (!v29)
    goto LABEL_35;
  v30 = *(double **)(v29 + 64752);
  v31 = *v30;
  if (*v30 == 0.0)
    goto LABEL_35;
  v32 = v30[1] / v31;
  if (v31 < 2.0)
  {
    v33 = 0.0;
  }
  else
  {
    v33 = v30[2] / v31 - v32 * v32;
    if (v33 <= 0.0)
      v33 = 0.0;
  }
  v34 = v32 + sqrt(v33);
  if (v34 < 0.0 || (HIDWORD(v111) = 1083129856, v34 > 1000.0))
  {
LABEL_35:
    v35 = 0;
  }
  else
  {
    LODWORD(v111) = *(_DWORD *)(v25 + 44);
    v112 = v34 * (double)v111;
    v35 = (unint64_t)v112;
    if (v112 >= 1.84467441e19)
      v35 = 0;
  }
  if (!qword_1ECF4C1F0)
    goto LABEL_147;
  v36 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v35;
  v37 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v38 = (double)v37 * 0.25;
  v39 = v37 - (unint64_t)v38;
  v40 = v37 - 0x40000;
  if ((unint64_t)v38 >> 18)
    v40 = v39;
  if (v36 >= v40)
    v36 = v40;
  v41 = v40 - v36;
  v42 = v40 != v36;
  v43 = (double)v40 / (double)v41;
  v44 = v42 && v43 >= 1.0 ? (double)v40 / (double)v41 : 1.0;
  if (v43 < 1.0 && v42)
  {
    v44 = (double)v40 / (double)v41;
    if (v43 < 1.0)
LABEL_147:
      v44 = 1.0;
  }
  v45 = v44 * (double)*(int *)(this + 208);
  v46 = *(float *)(this + 204) + (double)*(int *)(this + 200);
  v116 = v46;
  v117 = v45;
  v47 = HIDWORD(xmmword_1ECF4C514);
  v48 = *(_DWORD *)(this + 44);
  if ((int)v48 >= SDWORD1(xmmword_1ECF4C524))
  {
    *(double *)&v120 = (double)v48;
    v82 = sqrt((double)v48 + 1.02406) * 0.061504 + 0.825914 + 0.0;
    if ((*(_WORD *)(*(_QWORD *)(this + 56) + 28) & 0x3000) == 0x1000)
    {
      v108 = DWORD1(xmmword_1ECF4C514);
      v82 = v82 * (double)SDWORD1(xmmword_1ECF4C514);
      v119 = v82;
      if (!BYTE1(qword_1ECF4C332))
        goto LABEL_102;
      v109 = v45;
    }
    else
    {
      v119 = v82;
      if (!BYTE1(qword_1ECF4C332))
      {
LABEL_102:
        v83 = sqrt(v82);
        v84 = (double)v47;
        if (v83 < 1.0)
          v83 = 1.0;
        v85 = v83 * v84;
        v86 = (COERCE_UNSIGNED_INT64(v83 * v84) >> 52) & 0x7FF;
        if ((v86 - 1023) <= 0x53)
        {
          v99 = *(_QWORD *)&v85 >> (51 - (COERCE_UNSIGNED_INT64(v83 * v84) >> 52));
          if (v86 > 0x433)
            LODWORD(v99) = *(_QWORD *)&v85 << ((COERCE_UNSIGNED_INT64(v83 * v84) >> 52) - 51);
          if (v86 >= 0x41F)
            v100 = v99;
          else
            v100 = (((1 << ((COERCE_UNSIGNED_INT64(v83 * v84) >> 52) + 1)) - 1) & v99)
                 + (1 << ((COERCE_UNSIGNED_INT64(v83 * v84) >> 52) + 1));
          if (v85 >= 0.0)
            v47 = v100;
          else
            v47 = -v100;
        }
        else
        {
          v47 = 0;
        }
        goto LABEL_47;
      }
      v109 = v45;
      v108 = 1;
    }
    v118 = v108;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(this, ": bytecode cost is ", (double *)&v120, ", scaling execution counter by ", &v119, " * ", &v118, "\n");
    v82 = v119;
    v45 = v109;
    goto LABEL_102;
  }
LABEL_47:
  v49 = *(_DWORD *)(this + 208);
  if (v47 < v49)
    v49 = v47;
  v50 = v45 + (double)v49 * -0.5;
  v119 = v50;
  v51 = *(JSC::Profiler::Database **)(*(_QWORD *)(this + 72) + 93016);
  if (v51)
  {
    WTF::toCString<char [19],int,char [23],double,char [17],double,char [18],double>("activeThreshold = ", (_DWORD *)(this + 208), ", modifiedThreshold = ", &v117, ", actualCount = ", &v116, ", desiredCount = ", &v119, (uint64_t *)&v120);
    JSC::Profiler::Database::logEvent(v51, this, "thresholdCheck", &v120, v87, v88, v89, v90);
    v98 = v120;
    *(double *)&v120 = 0.0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 1)
        WTF::fastFree((unint64_t)v98, v91, v92, v93, v94, v95, v96, v97);
      else
        --*(_DWORD *)v98;
    }
  }
  if (v46 >= v50)
    return 1;
  if (*v24 == 0x7FFFFFFF)
  {
    result = 0;
    *(_DWORD *)(this + 208) = 0x7FFFFFFF;
    *(_QWORD *)(this + 200) = 0x80000000;
    return result;
  }
  v55 = *(_QWORD *)(this + 192);
  if (!v55)
    v55 = this;
  v56 = *(_QWORD *)(v55 + 120);
  if (v56)
  {
    v57 = *(unsigned __int8 *)(v56 + 12);
    if ((v57 & 0xFE) != 2 && v57 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981672D4);
    }
  }
  v59 = *(_QWORD *)(v55 + 72);
  if (!v59)
    goto LABEL_77;
  v60 = *(double **)(v59 + 64752);
  v61 = *v60;
  if (*v60 == 0.0)
    goto LABEL_77;
  v62 = v60[1] / v61;
  if (v61 < 2.0)
  {
    v63 = 0.0;
  }
  else
  {
    v63 = v60[2] / v61 - v62 * v62;
    if (v63 <= 0.0)
      v63 = 0.0;
  }
  v64 = v62 + sqrt(v63);
  if (v64 < 0.0 || (HIDWORD(v113) = 1083129856, v64 > 1000.0))
  {
LABEL_77:
    v65 = 0;
  }
  else
  {
    LODWORD(v113) = *(_DWORD *)(v55 + 44);
    v114 = v64 * (double)v113;
    v65 = (unint64_t)v114;
    if (v114 >= 1.84467441e19)
      v65 = 0;
  }
  v66 = *(float *)(this + 204) + (double)*(int *)(this + 200);
  if (!qword_1ECF4C1F0)
    goto LABEL_153;
  v67 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v65;
  v68 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v69 = (double)v68 * 0.25;
  v70 = v68 - (unint64_t)v69;
  v71 = v68 - 0x40000;
  if ((unint64_t)v69 >> 18)
    v71 = v70;
  if (v67 >= v71)
    v67 = v71;
  v72 = v71 - v67;
  v73 = v71 != v67;
  v74 = (double)v71 / (double)v72;
  v75 = v73 && v74 >= 1.0 ? (double)v71 / (double)v72 : 1.0;
  if (v74 < 1.0 && v73)
  {
    v75 = (double)v71 / (double)v72;
    if (v74 < 1.0)
LABEL_153:
      v75 = 1.0;
  }
  v76 = v75 * (double)*v24 - v66;
  if (v76 <= 0.0)
  {
    *(_DWORD *)(this + 200) = 0;
    v81 = v66;
    *(float *)(this + 204) = v81;
    return 1;
  }
  v77 = HIDWORD(xmmword_1ECF4C514);
  v78 = *(_DWORD *)(this + 44);
  if ((int)v78 >= SDWORD1(xmmword_1ECF4C524))
  {
    v115 = *(float *)(this + 204) + (double)*(int *)(this + 200);
    *(double *)&v120 = (double)v78;
    v101 = sqrt((double)v78 + 1.02406) * 0.061504 + 0.825914 + 0.0;
    if ((*(_WORD *)(*(_QWORD *)(this + 56) + 28) & 0x3000) == 0x1000)
    {
      v110 = DWORD1(xmmword_1ECF4C514);
      v101 = v101 * (double)SDWORD1(xmmword_1ECF4C514);
      v119 = v101;
      if (!BYTE1(qword_1ECF4C332))
        goto LABEL_119;
    }
    else
    {
      v119 = v101;
      if (!BYTE1(qword_1ECF4C332))
      {
LABEL_119:
        v102 = sqrt(v101);
        v103 = (double)v77;
        if (v102 < 1.0)
          v102 = 1.0;
        v104 = v102 * v103;
        v105 = (COERCE_UNSIGNED_INT64(v102 * v103) >> 52) & 0x7FF;
        if ((v105 - 1023) <= 0x53)
        {
          v106 = *(_QWORD *)&v104 >> (51 - (COERCE_UNSIGNED_INT64(v102 * v103) >> 52));
          if (v105 > 0x433)
            LODWORD(v106) = *(_QWORD *)&v104 << ((COERCE_UNSIGNED_INT64(v102 * v103) >> 52) - 51);
          if (v105 >= 0x41F)
            v107 = v106;
          else
            v107 = (((1 << ((COERCE_UNSIGNED_INT64(v102 * v103) >> 52) + 1)) - 1) & v106)
                 + (1 << ((COERCE_UNSIGNED_INT64(v102 * v103) >> 52) + 1));
          if (v104 >= 0.0)
            v77 = v107;
          else
            v77 = -v107;
        }
        else
        {
          v77 = 0;
        }
        v66 = v115;
        goto LABEL_90;
      }
      v110 = 1;
    }
    LODWORD(v117) = v110;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(this, ": bytecode cost is ", (double *)&v120, ", scaling execution counter by ", &v119, " * ", &v117, "\n");
    v101 = v119;
    goto LABEL_119;
  }
LABEL_90:
  result = 0;
  v79 = (double)v77;
  if (v76 <= (double)v77)
    v79 = v76;
  *(_DWORD *)(this + 200) = (int)-v79;
  v80 = v66 + v79;
  *(float *)(this + 204) = v80;
  return result;
}

uint64_t JSC::CodeBlock::optimizeNextInvocation(JSC::CodeBlock *this)
{
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": Optimizing next invocation.", "\n");
  return JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold((uint64_t)this + 200, 0, (uint64_t)this);
}

uint64_t JSC::CodeBlock::optimizeAfterLongWarmUp(JSC::CodeBlock *this, double a2)
{
  double v3;
  double v4;
  int v5;
  double v6;
  int v8;
  int v9;
  double v10;
  double v11;

  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": Optimizing after long warm-up.", "\n");
  v3 = (double)SHIDWORD(xmmword_1ECF4C4E4);
  LODWORD(a2) = *((_DWORD *)this + 11);
  v11 = (double)*(unint64_t *)&a2;
  v4 = sqrt((double)*(unint64_t *)&a2 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) == 0x1000)
  {
    v8 = DWORD1(xmmword_1ECF4C514);
    v4 = v4 * (double)SDWORD1(xmmword_1ECF4C514);
    v10 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
  }
  else
  {
    v10 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
    v8 = 1;
  }
  v9 = v8;
  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)this, ": bytecode cost is ", &v11, ", scaling execution counter by ", &v10, " * ", &v9, "\n");
  v4 = v10;
LABEL_5:
  v5 = 1;
  v6 = v4 * v3 * (double)(1 << *((_WORD *)this + 53));
  if (v6 >= 1.0)
  {
    if (v6 > 2147483650.0)
      v5 = 0x7FFFFFFF;
    else
      v5 = (int)v6;
  }
  return JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold((uint64_t)this + 200, v5, (uint64_t)this);
}

uint64_t JSC::CodeBlock::optimizeSoon(JSC::CodeBlock *this, double a2)
{
  double v3;
  double v4;
  int v5;
  double v6;
  int v8;
  int v9;
  double v10;
  double v11;

  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::CodeBlock,char [30],char [2]>((uint64_t)this, ": Optimizing soon.", "\n");
  v3 = (double)(int)xmmword_1ECF4C4F4;
  LODWORD(a2) = *((_DWORD *)this + 11);
  v11 = (double)*(unint64_t *)&a2;
  v4 = sqrt((double)*(unint64_t *)&a2 + 1.02406) * 0.061504 + 0.825914 + 0.0;
  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) == 0x1000)
  {
    v8 = DWORD1(xmmword_1ECF4C514);
    v4 = v4 * (double)SDWORD1(xmmword_1ECF4C514);
    v10 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
  }
  else
  {
    v10 = v4;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_5;
    v8 = 1;
  }
  v9 = v8;
  WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>((uint64_t)this, ": bytecode cost is ", &v11, ", scaling execution counter by ", &v10, " * ", &v9, "\n");
  v4 = v10;
LABEL_5:
  v5 = 1;
  v6 = v4 * v3 * (double)(1 << *((_WORD *)this + 53));
  if (v6 >= 1.0)
  {
    if (v6 > 2147483650.0)
      v5 = 0x7FFFFFFF;
    else
      v5 = (int)v6;
  }
  return JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold((uint64_t)this + 200, v5, (uint64_t)this);
}

uint64_t JSC::CodeBlock::setOptimizationThresholdBasedOnCompilationResult(uint64_t this, int a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  char **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  double v13;
  double v14;
  int v15;
  double v16;
  _DWORD *v17;
  _DWORD *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  double v38;
  double v39;
  double v40;
  int v41;
  unsigned int v42;
  float v43;
  uint64_t v44;
  unsigned __int16 v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  double v55;
  _DWORD *v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  double v66;
  float *v67;
  int v68;
  unsigned __int8 v69;
  int v70;
  int v71;
  double v72;
  double v73;

  v3 = this;
  v70 = a2;
  v4 = *(_QWORD *)(this + 120);
  if (!v4)
  {
    v69 = 0;
    goto LABEL_106;
  }
  v5 = *(unsigned __int8 *)(v4 + 12);
  v69 = v5;
  if (v5 != 3)
  {
LABEL_106:
    WTF::dataLog<JSC::CodeBlock,char [43],JSC::JITType,char [2]>(this, ": expected to have baseline code but have ", &v69, "\n");
    v57 = *(unsigned int **)(v3 + 120);
    if (v57)
    {
      v61 = v57 + 2;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 + 1, v61));
      do
      {
        v63 = __ldaxr(v61);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v61));
      if (!v64)
      {
        atomic_store(1u, v57 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 32))(v57);
      }
    }
    v58 = *(_QWORD *)(v3 + 120);
    if (v58)
    {
      v59 = (unsigned int *)(v58 + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 + 1, v59));
    }
    __break(0xC471u);
    JUMPOUT(0x198167D68);
  }
  v6 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v6 == &JSC::FunctionCodeBlock::s_info)
  {
    v7 = *(_QWORD *)(this + 64);
    v8 = (uint64_t *)(v7 + 96);
    v9 = (uint64_t *)(v7 + 104);
    if (*(int *)(*(_QWORD *)(this + 56) + 20) >= 0)
      v9 = v8;
  }
  else
  {
    if (v6 != &JSC::EvalCodeBlock::s_info
      && v6 != &JSC::ProgramCodeBlock::s_info
      && v6 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198167B54);
    }
    v9 = (uint64_t *)(*(_QWORD *)(this + 64) + 72);
  }
  v10 = *v9;
  if (*v9)
    v11 = v10 == this;
  else
    v11 = 1;
  v12 = !v11;
  if ((((a2 != 2) ^ v12) & 1) == 0)
  {
    WTF::dataLog<JSC::CodeBlock,char [20],JSC::CompilationResult,char [6]>(this, ": we have result = ", &v70, " but ");
    if (v10 == v3)
    {
      WTF::dataLog<char [16]>("we are our own replacement.\n");
    }
    else
    {
      v73 = *(double *)&v10;
      WTF::dataLog<char [20],WTF::PointerDump<JSC::CodeBlock>,char [2]>("our replacement is ", (uint64_t *)&v73, "\n");
    }
    __break(0xC471u);
    JUMPOUT(0x198167D08);
  }
  switch(a2)
  {
    case 3:
      if (BYTE1(qword_1ECF4C332))
        this = WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(this, ": Optimizing after warm-up.", "\n");
      v13 = (double)SDWORD2(xmmword_1ECF4C4E4);
      LODWORD(a3) = *(_DWORD *)(v3 + 44);
      v73 = (double)*(unint64_t *)&a3;
      v14 = sqrt((double)*(unint64_t *)&a3 + 1.02406) * 0.061504 + 0.825914 + 0.0;
      if ((*(_WORD *)(*(_QWORD *)(v3 + 56) + 28) & 0x3000) == 0x1000)
      {
        v51 = DWORD1(xmmword_1ECF4C514);
        v14 = v14 * (double)SDWORD1(xmmword_1ECF4C514);
        v72 = v14;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_18;
      }
      else
      {
        v72 = v14;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_18;
        v51 = 1;
      }
      v71 = v51;
      this = WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v3, ": bytecode cost is ", &v73, ", scaling execution counter by ", &v72, " * ", &v71, "\n");
      v14 = v72;
LABEL_18:
      v15 = 1;
      v16 = v14 * v13 * (double)(1 << *(_WORD *)(v3 + 106));
      if (v16 >= 1.0)
      {
        if (v16 > 2147483650.0)
        {
          v17 = (_DWORD *)(v3 + 200);
          *(_DWORD *)(v3 + 204) = 0;
          v18 = (_DWORD *)(v3 + 208);
        }
        else
        {
          v15 = (int)v16;
          *(_QWORD *)(v3 + 200) = 0;
          v17 = (_DWORD *)(v3 + 200);
          *(_DWORD *)(v3 + 208) = (int)v16;
          v18 = (_DWORD *)(v3 + 208);
          if ((int)v16 != 0x7FFFFFFF)
          {
            v19 = (float *)(v3 + 204);
            goto LABEL_22;
          }
        }
        *v18 = 0x7FFFFFFF;
        *v17 = 0x80000000;
        return this;
      }
      *(_QWORD *)(v3 + 200) = 0;
      v17 = (_DWORD *)(v3 + 200);
      v19 = (float *)(v3 + 204);
      *(_DWORD *)(v3 + 208) = 1;
LABEL_22:
      v20 = *(_QWORD *)(v3 + 192);
      if (!v20)
        v20 = v3;
      v21 = *(_QWORD *)(v20 + 120);
      if (v21)
      {
        v22 = *(unsigned __int8 *)(v21 + 12);
        if ((v22 & 0xFE) != 2 && v22 != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198167DCCLL);
        }
      }
      v24 = *(_QWORD *)(v20 + 72);
      if (!v24)
        goto LABEL_36;
      v25 = *(double **)(v24 + 64752);
      v26 = *v25;
      if (*v25 == 0.0)
        goto LABEL_36;
      v27 = v25[1] / v26;
      if (v26 < 2.0)
      {
        v28 = 0.0;
      }
      else
      {
        v28 = v25[2] / v26 - v27 * v27;
        if (v28 <= 0.0)
          v28 = 0.0;
      }
      v29 = v27 + sqrt(v28);
      if (v29 < 0.0 || (HIDWORD(v65) = 1083129856, v29 > 1000.0))
      {
LABEL_36:
        v30 = 0;
      }
      else
      {
        LODWORD(v65) = *(_DWORD *)(v20 + 44);
        v66 = v29 * (double)v65;
        v30 = (unint64_t)v66;
        if (v66 >= 1.84467441e19)
          v30 = 0;
      }
      if (!qword_1ECF4C1F0)
        goto LABEL_121;
      v31 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v30;
      v32 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
      v33 = (double)v32 * 0.25;
      v34 = v32 - (unint64_t)v33;
      v35 = v32 - 0x40000;
      if ((unint64_t)v33 >> 18)
        v35 = v34;
      if (v31 >= v35)
        v31 = v35;
      v36 = v35 - v31;
      v37 = v35 != v31;
      v38 = (double)v35 / (double)v36;
      v39 = v37 && v38 >= 1.0 ? (double)v35 / (double)v36 : 1.0;
      if (v38 < 1.0 && v37)
      {
        v39 = (double)v35 / (double)v36;
        if (v38 < 1.0)
LABEL_121:
          v39 = 1.0;
      }
      v40 = v39 * (double)v15;
      if (v40 <= 0.0)
      {
        *v17 = 0;
        *v19 = 0.0;
        return this;
      }
      v41 = HIDWORD(xmmword_1ECF4C514);
      v42 = *(_DWORD *)(v3 + 44);
      if ((int)v42 < SDWORD1(xmmword_1ECF4C524))
        goto LABEL_49;
      v73 = (double)v42;
      v46 = sqrt((double)v42 + 1.02406) * 0.061504 + 0.825914 + 0.0;
      if ((*(_WORD *)(*(_QWORD *)(v3 + 56) + 28) & 0x3000) == 0x1000)
      {
        v54 = DWORD1(xmmword_1ECF4C514);
        v46 = v46 * (double)SDWORD1(xmmword_1ECF4C514);
        v72 = v46;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_71;
        v68 = HIDWORD(xmmword_1ECF4C514);
        v55 = v40;
        v67 = v19;
        v56 = v17;
      }
      else
      {
        v72 = v46;
        if (!BYTE1(qword_1ECF4C332))
        {
LABEL_71:
          v47 = sqrt(v46);
          v48 = (double)v41;
          if (v47 < 1.0)
            v47 = 1.0;
          v49 = v47 * v48;
          v50 = (COERCE_UNSIGNED_INT64(v47 * v48) >> 52) & 0x7FF;
          if ((v50 - 1023) <= 0x53)
          {
            v52 = *(_QWORD *)&v49 >> (51 - (COERCE_UNSIGNED_INT64(v47 * v48) >> 52));
            if (v50 > 0x433)
              LODWORD(v52) = *(_QWORD *)&v49 << ((COERCE_UNSIGNED_INT64(v47 * v48) >> 52) - 51);
            if (v50 >= 0x41F)
              v53 = v52;
            else
              v53 = (((1 << ((COERCE_UNSIGNED_INT64(v47 * v48) >> 52) + 1)) - 1) & v52)
                  + (1 << ((COERCE_UNSIGNED_INT64(v47 * v48) >> 52) + 1));
            if (v49 >= 0.0)
              v41 = v53;
            else
              v41 = -v53;
          }
          else
          {
            v41 = 0;
          }
LABEL_49:
          if (v40 > (double)v41)
            v40 = (double)v41;
          *v17 = (int)-v40;
          v43 = v40 + 0.0;
          *v19 = v43;
          return this;
        }
        v68 = HIDWORD(xmmword_1ECF4C514);
        v55 = v40;
        v67 = v19;
        v56 = v17;
        v54 = 1;
      }
      v71 = v54;
      this = WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(v3, ": bytecode cost is ", &v73, ", scaling execution counter by ", &v72, " * ", &v71, "\n");
      v46 = v72;
      v17 = v56;
      v19 = v67;
      v40 = v55;
      v41 = v68;
      goto LABEL_71;
    case 2:
      if (*(double *)&v10 == 0.0 || (v44 = *(_QWORD *)(v10 + 120)) == 0 || (*(_BYTE *)(v44 + 12) & 0xFE) != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x1981679B4);
      }
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(this, ": Optimizing next invocation.", "\n");
      return JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(v3 + 200, 0, v3);
    case 1:
      v45 = *(_WORD *)(this + 106) + 1;
      *(_WORD *)(this + 106) = v45;
      if (DWORD2(xmmword_1ECF4C534) < v45)
        *(_WORD *)(this + 106) = WORD4(xmmword_1ECF4C534);
      return JSC::CodeBlock::optimizeAfterWarmUp(this, a3);
    default:
      if (a2)
      {
        LODWORD(v73) = a2;
        WTF::dataLog<char [22],int,char [2]>("Unrecognized result: ", &v73, "\n");
        __break(0xC471u);
        JUMPOUT(0x198167C00);
      }
      if (BYTE1(qword_1ECF4C332))
        this = WTF::dataLog<JSC::CodeBlock,char [31],char [2]>(this);
      *(_DWORD *)(v3 + 208) = 0x7FFFFFFF;
      *(_QWORD *)(v3 + 200) = 0x80000000;
      break;
  }
  return this;
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [20],JSC::CompilationResult,char [6]>(uint64_t a1, const char *a2, int *a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  const char *v12;
  WTF::PrintStream *v13;
  uint64_t result;
  char v15;
  char **v16;
  char *v17;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v10, "%s", a2);
  v11 = *a3;
  if (v11 >= 4)
  {
    result = 50;
    __break(0xC471u);
  }
  else
  {
    v12 = off_1E3580FC0[v11];
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v13, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    WTF::PrintStream::printf(v10, "%s", a4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  }
  return result;
}

uint64_t WTF::dataLog<char [20],WTF::PointerDump<JSC::CodeBlock>,char [2]>(const char *a1, uint64_t *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  char v11;
  char **v12;
  char *v13;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  if (*a2)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a2);
  }
  else
  {
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    WTF::PrintStream::printf(v9, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  }
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [22],int,char [2]>(const char *a1, _DWORD *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%d", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::CodeBlock::adjustedExitCountThreshold(JSC::CodeBlock *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  _BOOL4 v4;
  int v6;
  BOOL v7;
  char **v8;
  uint64_t v9;
  JSC::CodeBlock **v10;
  JSC::CodeBlock **v11;
  JSC::CodeBlock *v12;
  uint64_t v13;
  int v14;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    LODWORD(v2) = *(unsigned __int8 *)(v2 + 12);
    v3 = v2 & 0xFE;
    if (v3 == 2)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
  }
  v8 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v8 == &JSC::FunctionCodeBlock::s_info)
  {
    v9 = *((_QWORD *)this + 8);
    v10 = (JSC::CodeBlock **)(v9 + 96);
    v11 = (JSC::CodeBlock **)(v9 + 104);
    if (*(int *)(*((_QWORD *)this + 7) + 20) >= 0)
      v11 = v10;
  }
  else
  {
    if (v8 != &JSC::EvalCodeBlock::s_info
      && v8 != &JSC::ProgramCodeBlock::s_info
      && v8 != &JSC::ModuleProgramCodeBlock::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x1981682B8);
    }
    v11 = (JSC::CodeBlock **)(*((_QWORD *)this + 8) + 72);
  }
  v12 = *v11;
  if (!v12)
  {
    if (v3 != 4)
    {
      if (!(_DWORD)v2)
        goto LABEL_3;
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19816825CLL);
    }
    v12 = this;
  }
  if (*((_QWORD *)v12 + 24))
    this = (JSC::CodeBlock *)*((_QWORD *)v12 + 24);
  else
    this = v12;
  v13 = *((_QWORD *)this + 15);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 12);
    if ((v14 & 0xFE) != 2 && v14 != 0)
      goto LABEL_38;
  }
LABEL_3:
  v4 = *((_WORD *)this + 53) != 0;
  if ((a2 & 0x80000000) == 0 && *((_WORD *)this + 53))
  {
    v6 = *((unsigned __int16 *)this + 53) - 1;
    do
    {
      a2 *= 2;
      v7 = v6-- != 0;
      v4 = v7;
    }
    while (v7 && (a2 & 0x80000000) == 0);
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return a2;
}

BOOL JSC::CodeBlock::shouldReoptimizeNow(JSC::CodeBlock *this)
{
  unsigned int v1;
  int v2;

  if ((*(_WORD *)(*((_QWORD *)this + 7) + 28) & 0x3000) == 0x1000)
    v2 = DWORD1(xmmword_1ECF4C514);
  else
    v2 = 1;
  v1 = *((_DWORD *)this + 9);
  return v1 >= JSC::CodeBlock::adjustedExitCountThreshold(this, v2 * (int)xmmword_1ECF4C534);
}

unint64_t JSC::CodeBlock::getArrayProfile(uint64_t a1, int8x8_t a2, uint64_t a3, unsigned int a4)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t result;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint32x4_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  v5 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a4 >> 2));
  v6 = *v5;
  v7 = v6;
  v8 = v6;
  if ((v6 | 2) == 0x82)
    v8 = v5[1];
  if (v8 == 2)
  {
    JSC::OpIteratorNext::decode((_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a4 >> 2)), (uint64_t)&v36, a2);
    v34 = *(_QWORD *)(a1 + 136);
    v35 = *(unsigned __int16 *)(v34 + 4);
    if (!*(_WORD *)(v34 + 4))
      v35 = *(_DWORD *)(v34 + 104);
    return ((v34 + v35 + 7) & 0xFFFFFFFFFFFFFFF8) + ((unint64_t)v42 << 7) + 112;
  }
  else
  {
    if ((v6 | 2) == 0x82)
      v7 = v5[1];
    if (v7 == 19)
    {
      if (v6 == 128)
      {
        v9 = *((unsigned __int16 *)v5 + 4);
      }
      else if (v6 == 130)
      {
        v9 = *(_DWORD *)(v5 + 14);
      }
      else
      {
        v9 = v5[4];
      }
      v10 = *(_QWORD *)(a1 + 136);
      v11 = *(unsigned __int16 *)(v10 + 38);
      if (!*(_WORD *)(v10 + 38))
        v11 = *(_DWORD *)(v10 + 172);
      return ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v9 + 16;
    }
    else
    {
      result = 0;
      switch(v7)
      {
        case 22:
          if (v6 == 128)
          {
            v22 = *((unsigned __int16 *)v5 + 5);
          }
          else if (v6 == 130)
          {
            v22 = *(_DWORD *)(v5 + 18);
          }
          else
          {
            v22 = v5[5];
          }
          v23 = *(_QWORD *)(a1 + 136);
          v24 = *(unsigned __int16 *)(v23 + 44);
          if (!*(_WORD *)(v23 + 44))
            v24 = *(_DWORD *)(v23 + 184);
          return ((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v22 + 8;
        case 23:
          if (v6 == 128)
          {
            v17 = *((unsigned __int16 *)v5 + 6);
          }
          else if (v6 == 130)
          {
            v17 = *(_DWORD *)(v5 + 22);
          }
          else
          {
            v17 = v5[6];
          }
          v18 = *(_QWORD *)(a1 + 136);
          v19 = *(unsigned __int16 *)(v18 + 46);
          if (!*(_WORD *)(v18 + 46))
            v19 = *(_DWORD *)(v18 + 188);
          goto LABEL_27;
        case 24:
          if (v6 == 130)
          {
            v13 = *(_DWORD *)(v5 + 14);
          }
          else if (v6 == 128)
          {
            v13 = *((unsigned __int16 *)v5 + 4);
          }
          else
          {
            v13 = v5[4];
          }
          v14 = *(_QWORD *)(a1 + 136);
          v15 = *(unsigned __int16 *)(v14 + 48);
          if (!*(_WORD *)(v14 + 48))
            v15 = *(_DWORD *)(v14 + 192);
          v16 = ((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 96 * v13;
          goto LABEL_21;
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 34:
        case 42:
          return result;
        case 32:
          if (v6 == 128)
          {
            v25 = *((unsigned __int16 *)v5 + 5);
          }
          else if (v6 == 130)
          {
            v25 = *(_DWORD *)(v5 + 18);
          }
          else
          {
            v25 = v5[5];
          }
          v26 = *(_QWORD *)(a1 + 136);
          v27 = *(unsigned __int16 *)(v26 + 64);
          if (!*(_WORD *)(v26 + 64))
            v27 = *(_DWORD *)(v26 + 224);
          return ((v26 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) + 24 * v25;
        case 35:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByVal>((int8x8_t *)&v36, v5);
          v28 = v37;
          v29 = *(_QWORD *)(a1 + 136);
          v30 = *(unsigned __int16 *)(v29 + 70);
          if (!*(_WORD *)(v29 + 70))
            v30 = *(_DWORD *)(v29 + 236);
          return ((v29 + v30 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v28;
        case 36:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPutByValDirect>((int8x8_t *)&v36, v5);
          v28 = v37;
          v29 = *(_QWORD *)(a1 + 136);
          v30 = *(unsigned __int16 *)(v29 + 72);
          if (!*(_WORD *)(v29 + 72))
            v30 = *(_DWORD *)(v29 + 240);
          return ((v29 + v30 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v28;
        case 37:
          if (v6 == 130)
          {
            v28 = *(_DWORD *)(v5 + 14);
          }
          else if (v6 == 128)
          {
            v28 = *((unsigned __int16 *)v5 + 4);
          }
          else
          {
            v28 = v5[4];
          }
          v29 = *(_QWORD *)(a1 + 136);
          v30 = *(unsigned __int16 *)(v29 + 74);
          if (!*(_WORD *)(v29 + 74))
            v30 = *(_DWORD *)(v29 + 244);
          return ((v29 + v30 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 12 * v28;
        case 38:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorNext>((uint64_t)&v36, v5, a2);
          v31 = v38;
          v32 = *(_QWORD *)(a1 + 136);
          v33 = *(unsigned __int16 *)(v32 + 76);
          if (!*(_WORD *)(v32 + 76))
            v33 = *(_DWORD *)(v32 + 248);
          goto LABEL_62;
        case 39:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorInByVal>((int *)v5, (uint64_t)&v36);
          v31 = v39;
          v32 = *(_QWORD *)(a1 + 136);
          v33 = *(unsigned __int16 *)(v32 + 78);
          if (!*(_WORD *)(v32 + 78))
            v33 = *(_DWORD *)(v32 + 252);
          goto LABEL_62;
        case 40:
          JSC::OpEnumeratorHasOwnProperty::decode((int *)v5, (uint64_t)&v36, a2);
          v31 = v39;
          v32 = *(_QWORD *)(a1 + 136);
          v33 = *(unsigned __int16 *)(v32 + 80);
          if (!*(_WORD *)(v32 + 80))
            v33 = *(_DWORD *)(v32 + 256);
          goto LABEL_62;
        case 41:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorPutByVal>(v5, (uint64_t)&v36);
          v31 = v40;
          v32 = *(_QWORD *)(a1 + 136);
          v33 = *(unsigned __int16 *)(v32 + 82);
          if (!*(_WORD *)(v32 + 82))
            v33 = *(_DWORD *)(v32 + 260);
          goto LABEL_62;
        case 43:
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpEnumeratorGetByVal>((int *)v5, (uint64_t)&v36);
          v31 = v40;
          v32 = *(_QWORD *)(a1 + 136);
          v33 = *(unsigned __int16 *)(v32 + 86);
          if (!*(_WORD *)(v32 + 86))
            v33 = *(_DWORD *)(v32 + 268);
LABEL_62:
          result = ((v32 + v33 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 16 * v31;
          break;
        default:
          if (v7 == 9)
          {
            if (v6 == 128)
            {
              v17 = *((unsigned __int16 *)v5 + 5);
            }
            else if (v6 == 130)
            {
              v17 = *(_DWORD *)(v5 + 18);
            }
            else
            {
              v17 = v5[5];
            }
            v18 = *(_QWORD *)(a1 + 136);
            v19 = *(unsigned __int16 *)(v18 + 18);
            if (!*(_WORD *)(v18 + 18))
              v19 = *(_DWORD *)(v18 + 132);
LABEL_27:
            v16 = ((v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 96 * v17;
LABEL_21:
            result = v16 + 80;
          }
          else if (v7 == 4)
          {
            JSC::OpIteratorOpen::decode(v5, &v36, a2);
            v20 = *(_QWORD *)(a1 + 136);
            v21 = *(unsigned __int16 *)(v20 + 8);
            if (!*(_WORD *)(v20 + 8))
              v21 = *(_DWORD *)(v20 + 112);
            result = ((v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 112 * v41 + 96;
          }
          break;
      }
    }
  }
  return result;
}

void JSC::CodeBlock::updateAllNonLazyValueProfilePredictions(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _BOOL8 a7, uint64_t a8)
{
  uint64_t v9;
  __int16 v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t i;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int **v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;

  v9 = a1[7];
  v10 = *(_WORD *)(v9 + 28);
  v11 = (unsigned int *)a1[19];
  v12 = qword_1ECF4C080;
  v13 = 0;
  v14 = (uint64_t *)(v11 + 6);
  v15 = JSC::speculatedTypeMapping;
  if ((v10 & 1) == 0)
  {
    if (!v11)
      goto LABEL_86;
LABEL_3:
    for (i = *v11; ; i = 0)
    {
      if (v13 >= i)
        goto LABEL_179;
      if (v13 >= *v11)
        goto LABEL_245;
      v17 = *(v14 - 2);
      if (!v17)
      {
        v18 = 0;
        v19 = *(v14 - 1);
        if (!v19)
          goto LABEL_8;
        goto LABEL_25;
      }
      if (v17 >= 0xFFFE000000000000)
      {
        if ((v17 & 0xFFFFFFFE) != 0)
          v18 = 0x200000000;
        else
          v18 = 0x100000000;
        *(v14 - 2) = 0;
        v19 = *(v14 - 1);
        if (!v19)
          goto LABEL_8;
        goto LABEL_25;
      }
      if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v33 = (uint64_t)COERCE_DOUBLE(v17 - 0x2000000000000);
        if ((double)v33 != COERCE_DOUBLE(v17 - 0x2000000000000))
          goto LABEL_70;
        if (v33)
        {
          if ((unint64_t)(v33 + 0x8000000000000) >> 52)
            goto LABEL_70;
        }
        else if ((uint64_t)v17 < 0x2000000000000)
        {
LABEL_70:
          v18 = 0x2000000000;
          goto LABEL_24;
        }
        v18 = 0x1000000000;
        goto LABEL_24;
      }
      v23 = v17 & 0xFFFE000000000002;
      v24 = v17 >> 36;
      v25 = (v17 & 0xFFFFFFFFFLL) != 0 && v24 == 0;
      a6 = v25;
      if (v12 <= v17 && (a6 & 1) != 0)
        break;
      if (v23)
      {
        v18 = 0x20000000000;
        if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
          v18 = 0x10000000000;
        goto LABEL_24;
      }
      if (v12 > v17)
        goto LABEL_94;
      v18 = 0;
      if (!v24 && (v17 & 0xFFFFFFFFFLL) != 0)
      {
        v26 = *(unsigned __int8 *)(v17 + 5);
        if (v26 != 2)
        {
LABEL_23:
          v18 = JSC::speculatedTypeMapping[v26];
          goto LABEL_24;
        }
        v31 = *(_QWORD *)(v17 + 8);
        v18 = 805306368;
        if (v31)
          goto LABEL_55;
      }
LABEL_24:
      *(v14 - 2) = 0;
      v19 = *(v14 - 1);
      if (!v19)
        goto LABEL_8;
LABEL_25:
      if (v19 >= 0xFFFE000000000000)
      {
        if ((v19 & 0xFFFFFFFE) != 0)
          v30 = 0x200000000;
        else
          v30 = 0x100000000;
        goto LABEL_38;
      }
      if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v34 = (uint64_t)COERCE_DOUBLE(v19 - 0x2000000000000);
        if ((double)v34 == COERCE_DOUBLE(v19 - 0x2000000000000))
        {
          if (v34)
          {
            if (!((unint64_t)(v34 + 0x8000000000000) >> 52))
              goto LABEL_80;
          }
          else if ((uint64_t)v19 >= 0x2000000000000)
          {
LABEL_80:
            v30 = 0x1000000000;
            goto LABEL_38;
          }
        }
        v30 = 0x2000000000;
      }
      else
      {
        v27 = v19 & 0xFFFE000000000002;
        a6 = v19 >> 36;
        a7 = (v19 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v12 <= v19 && a7)
        {
          if (v27)
          {
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v30 = 0x10000000000;
            else
              v30 = 0x20000000000;
            goto LABEL_38;
          }
          v29 = *(unsigned __int8 *)(v19 + 5);
          if (v29 != 2)
            goto LABEL_37;
          v32 = *(_QWORD *)(v19 + 8);
          if (!v32)
            goto LABEL_74;
          v30 = 805306368;
        }
        else
        {
          if (v27)
          {
            v30 = 0x20000000000;
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v30 = 0x10000000000;
            goto LABEL_38;
          }
          if (v12 > v19)
          {
LABEL_102:
            v30 = 0;
            goto LABEL_38;
          }
          v30 = 0;
          if (a6)
            goto LABEL_38;
          a6 = v19 & 0xFFFFFFFFFLL;
          if ((v19 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_38;
          v29 = *(unsigned __int8 *)(v19 + 5);
          if (v29 != 2)
          {
LABEL_37:
            v30 = JSC::speculatedTypeMapping[v29];
            goto LABEL_38;
          }
          v32 = *(_QWORD *)(v19 + 8);
          v30 = 805306368;
          if (!v32)
            goto LABEL_38;
        }
        if ((v32 & 1) == 0)
        {
          if (v32 < v12)
            goto LABEL_102;
          v30 = 0;
          a6 = v32 >> 36;
          if (v32 >> 36)
            goto LABEL_38;
          a6 = v32 & 0xFFFFFFFFFLL;
          if ((v32 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_38;
          if ((*(_BYTE *)(v32 + 16) & 0x10) == 0)
          {
LABEL_74:
            v30 = 805306368;
            goto LABEL_38;
          }
          v30 = 0x10000000;
        }
      }
LABEL_38:
      v18 |= v30;
      *(v14 - 1) = 0;
LABEL_8:
      v20 = *v14 | v18;
      *v14 = v20;
      v21 = *(unsigned int **)(v9 + 184);
      if (v13 >= *v21)
      {
        __break(0xC471u);
        JUMPOUT(0x198168AACLL);
      }
      a4 = (uint64_t)&v21[2 * v13];
      a5 = *(_QWORD *)(a4 + 8);
      v22 = a5 | v20;
      *v14 = v22;
      v14 += 3;
      *(_QWORD *)(a4 + 8) = v22;
      ++v13;
      if (v11)
        goto LABEL_3;
LABEL_86:
      ;
    }
    if (v23)
    {
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
        v18 = 0x10000000000;
      else
        v18 = 0x20000000000;
      goto LABEL_24;
    }
    v26 = *(unsigned __int8 *)(v17 + 5);
    if (v26 != 2)
      goto LABEL_23;
    v31 = *(_QWORD *)(v17 + 8);
    if (!v31)
      goto LABEL_73;
    v18 = 805306368;
LABEL_55:
    if ((v31 & 1) != 0)
      goto LABEL_24;
    if (v31 < v12)
    {
LABEL_94:
      v18 = 0;
      goto LABEL_24;
    }
    v18 = 0;
    if (!(v31 >> 36) && (v31 & 0xFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)(v31 + 16) & 0x10) != 0)
      {
        v18 = 0x10000000;
        goto LABEL_24;
      }
LABEL_73:
      v18 = 805306368;
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  while (1)
  {
    i = v11 ? *v11 : 0;
    if (v13 >= i)
      break;
    if (v13 >= *v11)
    {
LABEL_245:
      __break(0xC471u);
      JUMPOUT(0x19816900CLL);
    }
    v37 = *(v14 - 2);
    if (!v37)
    {
      v36 = 0;
      a5 = *(v14 - 1);
      if (a5)
        goto LABEL_120;
      goto LABEL_113;
    }
    if (v37 < 0xFFFE000000000000)
    {
      if (v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v41 = v37 & 0xFFFE000000000002;
        v42 = v37 >> 36;
        a6 = (v37 & 0xFFFFFFFFFLL) != 0 && v42 == 0;
        if (v12 <= v37 && (a6 & 1) != 0)
        {
          if (v41)
          {
            if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v36 = 0x10000000000;
            else
              v36 = 0x20000000000;
          }
          else
          {
            v44 = *(unsigned __int8 *)(v37 + 5);
            if (v44 != 2)
              goto LABEL_145;
            v45 = *(_QWORD *)(v37 + 8);
            if (v45)
            {
              v36 = 805306368;
              goto LABEL_169;
            }
LABEL_238:
            v36 = 805306368;
          }
          goto LABEL_146;
        }
        if (v41)
        {
          v36 = 0x20000000000;
          if ((v37 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v36 = 0x10000000000;
          goto LABEL_146;
        }
        if (v12 <= v37)
        {
          v36 = 0;
          if (v42 || (v37 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_146;
          v44 = *(unsigned __int8 *)(v37 + 5);
          if (v44 != 2)
          {
LABEL_145:
            v36 = JSC::speculatedTypeMapping[v44];
            goto LABEL_146;
          }
          v45 = *(_QWORD *)(v37 + 8);
          v36 = 805306368;
          if (!v45)
          {
LABEL_146:
            *(v14 - 2) = 0;
            a5 = *(v14 - 1);
            if (a5)
              goto LABEL_120;
            goto LABEL_113;
          }
LABEL_169:
          if ((v45 & 1) != 0)
            goto LABEL_146;
          if (v45 >= v12)
          {
            v36 = 0;
            if (!(v45 >> 36) && (v45 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(v45 + 16) & 0x10) == 0)
                goto LABEL_238;
              v36 = 0x10000000;
            }
            goto LABEL_146;
          }
        }
        v36 = 0;
        goto LABEL_146;
      }
      v47 = (uint64_t)COERCE_DOUBLE(v37 - 0x2000000000000);
      if ((double)v47 != COERCE_DOUBLE(v37 - 0x2000000000000))
      {
LABEL_178:
        v36 = 0x2000000000;
        goto LABEL_146;
      }
      if (v47)
      {
        if ((unint64_t)(v47 + 0x8000000000000) >> 52)
          goto LABEL_178;
      }
      else if ((uint64_t)v37 < 0x2000000000000)
      {
        goto LABEL_178;
      }
      v36 = 0x1000000000;
      goto LABEL_146;
    }
    if ((v37 & 0xFFFFFFFE) != 0)
      v36 = 0x200000000;
    else
      v36 = 0x100000000;
    *(v14 - 2) = 0;
    a5 = *(v14 - 1);
    if (a5)
    {
LABEL_120:
      if (a5 >= 0xFFFE000000000000)
      {
        if ((a5 & 0xFFFFFFFE) != 0)
          v35 = 0x200000000;
        else
          v35 = 0x100000000;
        goto LABEL_112;
      }
      if (a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v38 = a5 & 0xFFFE000000000002;
        a6 = a5 >> 36;
        a7 = (a5 & 0xFFFFFFFFFLL) != 0 && a6 == 0;
        if (v12 <= a5 && a7)
        {
          if (v38)
          {
            if ((a5 & 0xFFFFFFFFFFFFFFFELL) == 6)
              v35 = 0x10000000000;
            else
              v35 = 0x20000000000;
          }
          else
          {
            v40 = *(unsigned __int8 *)(a5 + 5);
            if (v40 != 2)
              goto LABEL_132;
            a5 = *(_QWORD *)(a5 + 8);
            if (a5)
            {
              v35 = 805306368;
              goto LABEL_161;
            }
LABEL_237:
            v35 = 805306368;
          }
          goto LABEL_112;
        }
        if (v38)
        {
          v25 = (a5 & 0xFFFFFFFFFFFFFFFELL) == 6;
          v35 = 0x20000000000;
          a5 = 0x10000000000;
          if (v25)
            v35 = 0x10000000000;
          goto LABEL_112;
        }
        if (v12 <= a5)
        {
          v35 = 0;
          if (a6)
            goto LABEL_112;
          a6 = a5 & 0xFFFFFFFFFLL;
          if ((a5 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_112;
          v40 = *(unsigned __int8 *)(a5 + 5);
          if (v40 != 2)
          {
LABEL_132:
            v35 = JSC::speculatedTypeMapping[v40];
            goto LABEL_112;
          }
          a5 = *(_QWORD *)(a5 + 8);
          v35 = 805306368;
          if (!a5)
            goto LABEL_112;
LABEL_161:
          if ((a5 & 1) != 0)
          {
LABEL_112:
            v36 |= v35;
            *(v14 - 1) = 0;
            goto LABEL_113;
          }
          if (a5 >= v12)
          {
            v35 = 0;
            a6 = a5 >> 36;
            if (!(a5 >> 36))
            {
              a6 = a5 & 0xFFFFFFFFFLL;
              if ((a5 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(a5 + 16) & 0x10) == 0)
                  goto LABEL_237;
                v35 = 0x10000000;
              }
            }
            goto LABEL_112;
          }
        }
        v35 = 0;
        goto LABEL_112;
      }
      v46 = (uint64_t)COERCE_DOUBLE(a5 - 0x2000000000000);
      if ((double)v46 != COERCE_DOUBLE(a5 - 0x2000000000000))
      {
LABEL_176:
        v35 = 0x2000000000;
        goto LABEL_112;
      }
      if (v46)
      {
        if ((unint64_t)(v46 + 0x8000000000000) >> 52)
          goto LABEL_176;
      }
      else if ((uint64_t)a5 < 0x2000000000000)
      {
        goto LABEL_176;
      }
      v35 = 0x1000000000;
      goto LABEL_112;
    }
LABEL_113:
    a4 = *v14;
    *v14 |= v36;
    v14 += 3;
    ++v13;
  }
LABEL_179:
  v48 = a1[17];
  if (!v48)
    return;
  v49 = *(_QWORD *)(v48 - 16);
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = -*(_DWORD *)(v49 + 8);
  do
  {
    v52 = __ldaxr((unsigned int *)v49);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)v49));
  if (!v53)
  {
    atomic_store(1u, (unsigned int *)v49);
    if ((*(_BYTE *)(v49 + 4) & 1) != 0)
      WTF::fastFree(*(_QWORD *)(v49 + 16), JSC::speculatedTypeMapping, i, a4, a5, a6, a7, a8);
    WTF::fastFree(v49, v15, i, a4, a5, a6, a7, a8);
  }
  if (v51 < 0)
  {
    v59 = v51;
    if ((v10 & 1) == 0)
    {
      v60 = *(_DWORD **)(v9 + 184);
      LODWORD(v61) = *v60;
      if (*v60 <= v13)
        v61 = v13;
      else
        v61 = v61;
      v62 = v61 - v13;
      v63 = &v60[2 * v13];
      v64 = qword_1ECF4C080;
      v65 = (uint64_t *)(v63 + 2);
      v66 = (unint64_t *)(v48 - 32);
      while (1)
      {
        v68 = *v66;
        v67 = v66[1];
        v69 = *v66 | v67;
        if (!v69)
        {
          v67 = 0;
          goto LABEL_215;
        }
        if (!v68)
        {
          v69 = 0;
          goto LABEL_215;
        }
        if (v68 >= 0xFFFE000000000000)
        {
          if ((v68 & 0xFFFFFFFE) != 0)
            v69 = 0x200000000;
          else
            v69 = 0x100000000;
          goto LABEL_213;
        }
        if (v68 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v79 = (uint64_t)COERCE_DOUBLE(v68 - 0x2000000000000);
          if ((double)v79 == COERCE_DOUBLE(v68 - 0x2000000000000))
          {
            if (v79)
            {
              if (!((unint64_t)(v79 + 0x8000000000000) >> 52))
                goto LABEL_253;
            }
            else if ((uint64_t)v68 >= 0x2000000000000)
            {
LABEL_253:
              v69 = 0x1000000000;
              goto LABEL_213;
            }
          }
          v69 = 0x2000000000;
        }
        else
        {
          v70 = v68 & 0xFFFE000000000002;
          v71 = v68 >> 36;
          v73 = (v68 & 0xFFFFFFFFFLL) != 0 && v71 == 0;
          if (v64 <= v68 && v73)
          {
            if (v70)
            {
              if ((v68 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v69 = 0x10000000000;
              else
                v69 = 0x20000000000;
              goto LABEL_213;
            }
            v74 = *(unsigned __int8 *)(v68 + 5);
            if (v74 != 2)
              goto LABEL_212;
            v78 = *(_QWORD *)(v68 + 8);
            if (!v78)
              goto LABEL_250;
            v69 = 805306368;
          }
          else
          {
            if (v70)
            {
              v69 = 0x20000000000;
              if ((v68 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v69 = 0x10000000000;
              goto LABEL_213;
            }
            if (v64 > v68)
            {
LABEL_284:
              v69 = 0;
              goto LABEL_213;
            }
            v69 = 0;
            if (v71 || (v68 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_213;
            v74 = *(unsigned __int8 *)(v68 + 5);
            if (v74 != 2)
            {
LABEL_212:
              v69 = JSC::speculatedTypeMapping[v74];
              goto LABEL_213;
            }
            v78 = *(_QWORD *)(v68 + 8);
            v69 = 805306368;
            if (!v78)
              goto LABEL_213;
          }
          if ((v78 & 1) == 0)
          {
            if (v78 < v64)
              goto LABEL_284;
            v69 = 0;
            if (v78 >> 36 || (v78 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_213;
            if ((*(_BYTE *)(v78 + 16) & 0x10) == 0)
            {
LABEL_250:
              v69 = 805306368;
              goto LABEL_213;
            }
            v69 = 0x10000000;
          }
        }
LABEL_213:
        *v66 = 0;
LABEL_215:
        v75 = v69 | v67;
        v66[1] = v75;
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x198169070);
        }
        v76 = *v65 | v75;
        v66[1] = v76;
        *v65++ = v76;
        --v62;
        v66 -= 2;
        if (__CFADD__(v59++, 1))
          goto LABEL_186;
      }
    }
    v80 = 0;
    v81 = (unint64_t *)(v48 - 32);
    v82 = qword_1ECF4C080;
    while (1)
    {
      v84 = *v81;
      v83 = v81[1];
      v85 = *v81 | v83;
      if (v85)
        break;
      v83 = 0;
LABEL_295:
      v81[1] = v85 | v83;
      --v80;
      v81 -= 2;
      if (v80 <= v51)
        goto LABEL_186;
    }
    if (!v84)
    {
      v85 = 0;
      goto LABEL_295;
    }
    if (v84 >= 0xFFFE000000000000)
    {
      if ((v84 & 0xFFFFFFFE) != 0)
        v85 = 0x200000000;
      else
        v85 = 0x100000000;
      goto LABEL_311;
    }
    if (v84 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v86 = v84 & 0xFFFE000000000002;
      v87 = v84 >> 36;
      v89 = (v84 & 0xFFFFFFFFFLL) != 0 && v87 == 0;
      if (v82 <= v84 && v89)
      {
        if (v86)
        {
          if ((v84 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v85 = 0x10000000000;
          else
            v85 = 0x20000000000;
          goto LABEL_311;
        }
        v90 = *(unsigned __int8 *)(v84 + 5);
        if (v90 != 2)
          goto LABEL_310;
        v91 = *(_QWORD *)(v84 + 8);
        if (!v91)
        {
LABEL_329:
          v85 = 805306368;
          goto LABEL_311;
        }
        v85 = 805306368;
      }
      else
      {
        if (v86)
        {
          v85 = 0x20000000000;
          if ((v84 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v85 = 0x10000000000;
          goto LABEL_311;
        }
        if (v82 > v84)
          goto LABEL_342;
        v85 = 0;
        if (v87 || (v84 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_311;
        v90 = *(unsigned __int8 *)(v84 + 5);
        if (v90 != 2)
        {
LABEL_310:
          v85 = JSC::speculatedTypeMapping[v90];
LABEL_311:
          *v81 = 0;
          goto LABEL_295;
        }
        v91 = *(_QWORD *)(v84 + 8);
        v85 = 805306368;
        if (!v91)
          goto LABEL_311;
      }
      if ((v91 & 1) != 0)
        goto LABEL_311;
      if (v91 >= v82)
      {
        v85 = 0;
        if (v91 >> 36 || (v91 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_311;
        if ((*(_BYTE *)(v91 + 16) & 0x10) != 0)
        {
          v85 = 0x10000000;
          goto LABEL_311;
        }
        goto LABEL_329;
      }
LABEL_342:
      v85 = 0;
      goto LABEL_311;
    }
    v92 = (uint64_t)COERCE_DOUBLE(v84 - 0x2000000000000);
    if ((double)v92 != COERCE_DOUBLE(v84 - 0x2000000000000))
    {
LABEL_328:
      v85 = 0x2000000000;
      goto LABEL_311;
    }
    if (v92)
    {
      if ((unint64_t)(v92 + 0x8000000000000) >> 52)
        goto LABEL_328;
    }
    else if ((uint64_t)v84 < 0x2000000000000)
    {
      goto LABEL_328;
    }
    v85 = 0x1000000000;
    goto LABEL_311;
  }
LABEL_186:
  v54 = a1[17];
  if (v54)
  {
    v55 = *(unsigned __int16 *)(v54 + 30);
    if (!*(_WORD *)(v54 + 30))
      v55 = *(_DWORD *)(v54 + 156);
    v56 = (unsigned int **)((v54 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
    v57 = *(unsigned __int16 *)(v54 + 32);
    if (!*(_WORD *)(v54 + 32))
      v57 = *(_DWORD *)(v54 + 160);
    v58 = v54 + v57;
    if (v58 > (unint64_t)v56)
    {
      while (1)
      {
        v93 = *v56;
        if (*v56)
        {
          v94 = *v93;
          if ((_DWORD)v94)
            break;
        }
LABEL_346:
        if ((unint64_t)++v56 >= v58)
          return;
      }
      v95 = qword_1ECF4C080;
      v96 = v93 + 4;
      while (2)
      {
        while (1)
        {
          v97 = *(v96 - 1);
          if (v97)
            break;
          *v96 = *v96;
          v96 += 3;
          if (!--v94)
            goto LABEL_346;
        }
        if (v97 >= 0xFFFE000000000000)
        {
          if ((v97 & 0xFFFFFFFE) != 0)
            v103 = 0x200000000;
          else
            v103 = 0x100000000;
          goto LABEL_365;
        }
        if (v97 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          v98 = v97 & 0xFFFE000000000002;
          v99 = v97 >> 36;
          v101 = (v97 & 0xFFFFFFFFFLL) != 0 && v99 == 0;
          if (v95 <= v97 && v101)
          {
            if (v98)
            {
              if ((v97 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v103 = 0x10000000000;
              else
                v103 = 0x20000000000;
              goto LABEL_365;
            }
            v102 = *(unsigned __int8 *)(v97 + 5);
            if (v102 != 2)
              goto LABEL_364;
            v104 = *(_QWORD *)(v97 + 8);
            if (!v104)
              goto LABEL_382;
            v103 = 805306368;
            if ((v104 & 1) != 0)
              goto LABEL_365;
            if (v104 >= v95)
            {
LABEL_376:
              v103 = 0;
              if (!(v104 >> 36) && (v104 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v104 + 16) & 0x10) != 0)
                {
                  v103 = 0x10000000;
                  goto LABEL_365;
                }
LABEL_382:
                v103 = 805306368;
              }
LABEL_365:
              *(v96 - 1) = 0;
              *v96 |= v103;
              v96 += 3;
              if (!--v94)
                goto LABEL_346;
              continue;
            }
          }
          else
          {
            if (v98)
            {
              v103 = 0x20000000000;
              if ((v97 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v103 = 0x10000000000;
              goto LABEL_365;
            }
            if (v95 <= v97)
            {
              v103 = 0;
              if (v99 || (v97 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_365;
              v102 = *(unsigned __int8 *)(v97 + 5);
              if (v102 != 2)
              {
LABEL_364:
                v103 = JSC::speculatedTypeMapping[v102];
                goto LABEL_365;
              }
              v104 = *(_QWORD *)(v97 + 8);
              v103 = 805306368;
              if (!v104 || (v104 & 1) != 0)
                goto LABEL_365;
              if (v104 >= v95)
                goto LABEL_376;
            }
          }
          v103 = 0;
          goto LABEL_365;
        }
        break;
      }
      v105 = (uint64_t)COERCE_DOUBLE(v97 - 0x2000000000000);
      if ((double)v105 != COERCE_DOUBLE(v97 - 0x2000000000000))
      {
LABEL_381:
        v103 = 0x2000000000;
        goto LABEL_365;
      }
      if (v105)
      {
        if ((unint64_t)(v105 + 0x8000000000000) >> 52)
          goto LABEL_381;
      }
      else if ((uint64_t)v97 < 0x2000000000000)
      {
        goto LABEL_381;
      }
      v103 = 0x1000000000;
      goto LABEL_365;
    }
  }
}

_QWORD *JSC::CodeBlock::updateAllArrayProfilePredictions(_QWORD *this, int8x8_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  char v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unint64_t i;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t j;
  int v60;
  int v61;
  unsigned int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unsigned int *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _QWORD *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned int v81;
  int *v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t k;
  int v86;
  int v87;
  unsigned int *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  _QWORD *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  int *v107;
  unint64_t m;
  int v109;
  int v110;
  unsigned int *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int *v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  _QWORD *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t *v128;
  uint64_t v129;
  int *v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t n;
  int v134;
  int v135;
  int v136;
  unsigned int *v137;
  unsigned int *v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  _QWORD *v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  int *v156;
  unsigned int v157;
  unint64_t ii;
  int v159;
  int v160;
  int v161;
  unsigned int *v162;
  unsigned int *v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  _QWORD *v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t *v178;
  uint64_t v179;
  int *v180;
  unsigned int v181;
  unint64_t v182;
  int v183;
  int v184;
  unsigned int *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  unsigned int *v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  _QWORD *v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t *v202;
  uint64_t v203;
  unsigned int v204;
  int *v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  int v209;
  unsigned int *v210;
  int v211;
  int v212;
  int v213;
  int v214;
  unsigned int *v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  int v220;
  _QWORD *v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int v229;
  int *v230;
  unsigned int v231;
  unint64_t v232;
  int v233;
  int v234;
  int v235;
  unsigned int *v236;
  unsigned int *v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  _QWORD *v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t *v252;
  uint64_t v253;
  unsigned int v254;
  _DWORD *v255;
  unsigned int v256;
  unsigned int v257;
  unint64_t v258;
  int v259;
  int v260;
  int v261;
  unsigned int *v262;
  unsigned int *v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  _QWORD *v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t *v278;
  uint64_t v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unint64_t v283;
  int v284;
  int v285;
  int v286;
  unsigned int *v287;
  unsigned int *v288;
  int v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  int v294;
  int v295;
  int v296;
  _QWORD *v297;
  unsigned int v298;
  unsigned int v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  _DWORD *v305;
  unsigned int v306;
  unint64_t v307;
  int v308;
  int v309;
  unsigned int *v310;
  int v311;
  int v312;
  int v313;
  int v314;
  unsigned int *v315;
  uint64_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  _QWORD *v321;
  unsigned int v322;
  unsigned int v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t *v327;
  uint64_t v328;
  unsigned int v329;
  _DWORD *v330;
  unsigned int v331;
  unint64_t v332;
  int v333;
  int v334;
  int v335;
  unsigned int *v336;
  unsigned int *v337;
  int v338;
  int v339;
  int v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  int v345;
  _QWORD *v346;
  unsigned int v347;
  unsigned int v348;
  int v349;
  uint64_t v350;
  int v351;
  uint64_t *v352;
  uint64_t v353;
  unsigned int v354;
  _DWORD *v355;
  unsigned int v356;
  unint64_t v357;
  int v358;
  int v359;
  unsigned int *v360;
  int v361;
  int v362;
  int v363;
  int v364;
  unsigned int *v365;
  uint64_t v366;
  int v367;
  int v368;
  int v369;
  int v370;
  _QWORD *v371;
  unsigned int v372;
  unsigned int v373;
  int v374;
  uint64_t v375;
  int v376;
  uint64_t *v377;
  uint64_t v378;
  unsigned int v379;
  _DWORD *v380;
  unsigned int v381;
  unint64_t jj;
  int v383;
  int v384;
  unsigned int *v385;
  int v386;
  int v387;
  int v388;
  int v389;
  unsigned int *v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  _QWORD *v396;
  unsigned int v397;
  unsigned int v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t *v402;
  uint64_t v403;
  int v404;
  int v405;

  v2 = this[17];
  if (v2)
  {
    v3 = *(unsigned __int16 *)(v2 + 38);
    if (!*(_WORD *)(v2 + 38))
      v3 = *(_DWORD *)(v2 + 172);
    v4 = this[7];
    v5 = (_DWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
    v6 = *(unsigned __int16 *)(v2 + 40);
    if (!*(_WORD *)(v2 + 40))
      v6 = *(_DWORD *)(v2 + 176);
    v7 = *(_BYTE *)(v4 + 28);
    v8 = v2 + v6;
    if (v8 <= (unint64_t)v5)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      do
      {
        v18 = v5[4];
        v5[4] = 0;
        if (v18)
        {
          v20 = 16 * (v18 & 0xFFFFFFFE);
          v21 = *(unsigned __int8 *)(v20 + 9);
          if ((v21 - 39) <= 0xA)
            v22 = JSC::typedArrayModes[v21 - 39];
          else
            v22 = 1 << *(_BYTE *)(v20 + 8);
          v23 = v5[5];
          v24 = v5[6] | v22;
          v5[6] = v24;
          if ((v23 & 0x40) == 0)
          {
            a2.i32[0] = v24;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v33 = *(unsigned __int8 *)(v20 + 9);
              if ((v33 - 39) <= 0xA)
                v34 = JSC::typedArrayModes[v33 - 39];
              else
                v34 = 1 << *(_BYTE *)(v20 + 8);
              v23 |= 0x40u;
              v5[5] = v23;
              v5[6] = v34;
            }
          }
          if ((*(_WORD *)(v20 + 12) & 0x100) != 0)
          {
            v23 |= 8u;
            v5[5] = v23;
          }
          v25 = (_QWORD *)this[1];
          v26 = *(unsigned __int8 *)(v20 + 8);
          if ((v26 & 0x10) != 0)
            v27 = ((v26 & 0xE) + 10) >> 1;
          else
            v27 = (v26 >> 1) & 7;
          v28 = *((_DWORD *)v25 + v27 + 213);
          v29 = 16 * (v28 & 0xFFFFFFFE);
          if (!v28)
            v29 = 0;
          v30 = *(unsigned __int8 *)(v20 + 9);
          if (v29 != v20)
          {
            switch(*(_BYTE *)(v20 + 9))
            {
              case '\'':
                v31 = v25 + 208;
                goto LABEL_35;
              case '(':
                v31 = v25 + 211;
                goto LABEL_35;
              case ')':
                v31 = v25 + 214;
                goto LABEL_35;
              case '*':
                v31 = v25 + 217;
                goto LABEL_35;
              case '+':
                v31 = v25 + 220;
                goto LABEL_35;
              case ',':
                v31 = v25 + 223;
                goto LABEL_35;
              case '-':
                v31 = v25 + 226;
                goto LABEL_35;
              case '.':
                v31 = v25 + 229;
                goto LABEL_35;
              case '/':
                v31 = v25 + 232;
                goto LABEL_35;
              case '0':
                v31 = v25 + 235;
                goto LABEL_35;
              case '1':
                v31 = v25 + 238;
                goto LABEL_35;
              case '2':
                v31 = v25 + 241;
LABEL_35:
                v32 = *v31;
                if ((v32 & 1) != 0)
                  v32 = 0;
                if (v32 != v20)
                  goto LABEL_38;
                break;
              default:
LABEL_38:
                v23 |= 0x10u;
                v5[5] = v23;
                v30 = *(unsigned __int8 *)(v20 + 9);
                break;
            }
          }
          if ((v30 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v20 + 76) + 0xF4))
            v5[5] = v23 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v19 = *(unsigned int **)(v4 + 192);
          if (*v19 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x1981697C0);
          }
          v14 = &v19[2 * v9];
          v15 = v5[5];
          v16 = v14[1] | v5[6];
          v5[6] = v16;
          v17 = v15 | v14[2];
          v5[5] = v17;
          v14[1] = v16;
          v14[2] = v17 & 0xFFFFFFBF;
        }
        ++v9;
        v5 += 8;
      }
      while ((unint64_t)v5 < v8);
    }
    v10 = *(unsigned __int16 *)(v2 + 64);
    if (!*(_WORD *)(v2 + 64))
      v10 = *(_DWORD *)(v2 + 224);
    v11 = (int *)((v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = *(unsigned __int16 *)(v2 + 66);
    if (!*(_WORD *)(v2 + 66))
      v12 = *(_DWORD *)(v2 + 228);
    for (i = v2 + v12; (unint64_t)v11 < i; v11 += 6)
    {
      v39 = *v11;
      *v11 = 0;
      if (v39)
      {
        v41 = 16 * (v39 & 0xFFFFFFFE);
        v42 = *(unsigned __int8 *)(v41 + 9);
        if ((v42 - 39) <= 0xA)
          v43 = JSC::typedArrayModes[v42 - 39];
        else
          v43 = 1 << *(_BYTE *)(v41 + 8);
        v44 = v11[1];
        v45 = v11[2] | v43;
        v11[2] = v45;
        if ((v44 & 0x40) == 0)
        {
          a2.i32[0] = v45;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v60 = *(unsigned __int8 *)(v41 + 9);
            if ((v60 - 39) <= 0xA)
              v61 = JSC::typedArrayModes[v60 - 39];
            else
              v61 = 1 << *(_BYTE *)(v41 + 8);
            v44 |= 0x40u;
            v11[1] = v44;
            v11[2] = v61;
          }
        }
        if ((*(_WORD *)(v41 + 12) & 0x100) != 0)
        {
          v44 |= 8u;
          v11[1] = v44;
        }
        v46 = (_QWORD *)this[1];
        v47 = *(unsigned __int8 *)(v41 + 8);
        if ((v47 & 0x10) != 0)
          v48 = ((v47 & 0xE) + 10) >> 1;
        else
          v48 = (v47 >> 1) & 7;
        v49 = *((_DWORD *)v46 + v48 + 213);
        v50 = 16 * (v49 & 0xFFFFFFFE);
        if (!v49)
          v50 = 0;
        v51 = *(unsigned __int8 *)(v41 + 9);
        if (v50 != v41)
        {
          switch(*(_BYTE *)(v41 + 9))
          {
            case '\'':
              v52 = v46 + 208;
              goto LABEL_78;
            case '(':
              v52 = v46 + 211;
              goto LABEL_78;
            case ')':
              v52 = v46 + 214;
              goto LABEL_78;
            case '*':
              v52 = v46 + 217;
              goto LABEL_78;
            case '+':
              v52 = v46 + 220;
              goto LABEL_78;
            case ',':
              v52 = v46 + 223;
              goto LABEL_78;
            case '-':
              v52 = v46 + 226;
              goto LABEL_78;
            case '.':
              v52 = v46 + 229;
              goto LABEL_78;
            case '/':
              v52 = v46 + 232;
              goto LABEL_78;
            case '0':
              v52 = v46 + 235;
              goto LABEL_78;
            case '1':
              v52 = v46 + 238;
              goto LABEL_78;
            case '2':
              v52 = v46 + 241;
LABEL_78:
              v53 = *v52;
              if ((v53 & 1) != 0)
                v53 = 0;
              if (v53 != v41)
                goto LABEL_81;
              break;
            default:
LABEL_81:
              v44 |= 0x10u;
              v11[1] = v44;
              v51 = *(unsigned __int8 *)(v41 + 9);
              break;
          }
        }
        if ((v51 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v41 + 76) + 0xF4))
          v11[1] = v44 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v40 = *(unsigned int **)(v4 + 192);
        if (*v40 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198169A34);
        }
        v35 = &v40[2 * v9];
        v36 = v11[1];
        v37 = v35[1] | v11[2];
        v11[2] = v37;
        v38 = v36 | v35[2];
        v11[1] = v38;
        v35[1] = v37;
        v35[2] = v38 & 0xFFFFFFBF;
      }
      ++v9;
    }
    v54 = *(unsigned __int16 *)(v2 + 74);
    v55 = v54;
    if (!*(_WORD *)(v2 + 74))
      v55 = *(_DWORD *)(v2 + 244);
    v56 = (int *)((v2 + v55 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v57 = *(unsigned __int16 *)(v2 + 76);
    v58 = v57;
    if (!*(_WORD *)(v2 + 76))
      v58 = *(_DWORD *)(v2 + 248);
    for (j = v2 + v58; (unint64_t)v56 < j; v56 += 3)
    {
      v66 = *v56;
      *v56 = 0;
      if (v66)
      {
        v68 = 16 * (v66 & 0xFFFFFFFE);
        v69 = *(unsigned __int8 *)(v68 + 9);
        if ((v69 - 39) <= 0xA)
          v70 = JSC::typedArrayModes[v69 - 39];
        else
          v70 = 1 << *(_BYTE *)(v68 + 8);
        v71 = v56[1];
        v72 = v56[2] | v70;
        v56[2] = v72;
        if ((v71 & 0x40) == 0)
        {
          a2.i32[0] = v72;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v86 = *(unsigned __int8 *)(v68 + 9);
            if ((v86 - 39) <= 0xA)
              v87 = JSC::typedArrayModes[v86 - 39];
            else
              v87 = 1 << *(_BYTE *)(v68 + 8);
            v71 |= 0x40u;
            v56[1] = v71;
            v56[2] = v87;
          }
        }
        if ((*(_WORD *)(v68 + 12) & 0x100) != 0)
        {
          v71 |= 8u;
          v56[1] = v71;
        }
        v73 = (_QWORD *)this[1];
        v74 = *(unsigned __int8 *)(v68 + 8);
        if ((v74 & 0x10) != 0)
          v75 = ((v74 & 0xE) + 10) >> 1;
        else
          v75 = (v74 >> 1) & 7;
        v76 = *((_DWORD *)v73 + v75 + 213);
        v77 = 16 * (v76 & 0xFFFFFFFE);
        if (!v76)
          v77 = 0;
        v78 = *(unsigned __int8 *)(v68 + 9);
        if (v77 != v68)
        {
          switch(*(_BYTE *)(v68 + 9))
          {
            case '\'':
              v79 = v73 + 208;
              goto LABEL_127;
            case '(':
              v79 = v73 + 211;
              goto LABEL_127;
            case ')':
              v79 = v73 + 214;
              goto LABEL_127;
            case '*':
              v79 = v73 + 217;
              goto LABEL_127;
            case '+':
              v79 = v73 + 220;
              goto LABEL_127;
            case ',':
              v79 = v73 + 223;
              goto LABEL_127;
            case '-':
              v79 = v73 + 226;
              goto LABEL_127;
            case '.':
              v79 = v73 + 229;
              goto LABEL_127;
            case '/':
              v79 = v73 + 232;
              goto LABEL_127;
            case '0':
              v79 = v73 + 235;
              goto LABEL_127;
            case '1':
              v79 = v73 + 238;
              goto LABEL_127;
            case '2':
              v79 = v73 + 241;
LABEL_127:
              v80 = *v79;
              if ((v80 & 1) != 0)
                v80 = 0;
              if (v80 != v68)
                goto LABEL_130;
              break;
            default:
LABEL_130:
              v71 |= 0x10u;
              v56[1] = v71;
              v78 = *(unsigned __int8 *)(v68 + 9);
              break;
          }
        }
        if ((v78 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v68 + 76) + 0xF4))
          v56[1] = v71 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v67 = *(unsigned int **)(v4 + 192);
        if (*v67 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198169CA4);
        }
        v62 = &v67[2 * v9];
        v63 = v56[1];
        v64 = v62[1] | v56[2];
        v56[2] = v64;
        v65 = v63 | v62[2];
        v56[1] = v65;
        v62[1] = v64;
        v62[2] = v65 & 0xFFFFFFBF;
      }
      ++v9;
    }
    v81 = *(unsigned __int16 *)(v2 + 70);
    if (!*(_WORD *)(v2 + 70))
      v81 = *(_DWORD *)(v2 + 236);
    v82 = (int *)((v2 + v81 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v83 = *(unsigned __int16 *)(v2 + 72);
    v84 = v83;
    if (!*(_WORD *)(v2 + 72))
      v84 = *(_DWORD *)(v2 + 240);
    for (k = v2 + v84; (unint64_t)v82 < k; v82 += 3)
    {
      v92 = *v82;
      *v82 = 0;
      if (v92)
      {
        v94 = 16 * (v92 & 0xFFFFFFFE);
        v95 = *(unsigned __int8 *)(v94 + 9);
        if ((v95 - 39) <= 0xA)
          v96 = JSC::typedArrayModes[v95 - 39];
        else
          v96 = 1 << *(_BYTE *)(v94 + 8);
        v97 = v82[1];
        v98 = v82[2] | v96;
        v82[2] = v98;
        if ((v97 & 0x40) == 0)
        {
          a2.i32[0] = v98;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v109 = *(unsigned __int8 *)(v94 + 9);
            if ((v109 - 39) <= 0xA)
              v110 = JSC::typedArrayModes[v109 - 39];
            else
              v110 = 1 << *(_BYTE *)(v94 + 8);
            v97 |= 0x40u;
            v82[1] = v97;
            v82[2] = v110;
          }
        }
        if ((*(_WORD *)(v94 + 12) & 0x100) != 0)
        {
          v97 |= 8u;
          v82[1] = v97;
        }
        v99 = (_QWORD *)this[1];
        v100 = *(unsigned __int8 *)(v94 + 8);
        if ((v100 & 0x10) != 0)
          v101 = ((v100 & 0xE) + 10) >> 1;
        else
          v101 = (v100 >> 1) & 7;
        v102 = *((_DWORD *)v99 + v101 + 213);
        v103 = 16 * (v102 & 0xFFFFFFFE);
        if (!v102)
          v103 = 0;
        v104 = *(unsigned __int8 *)(v94 + 9);
        if (v103 != v94)
        {
          switch(*(_BYTE *)(v94 + 9))
          {
            case '\'':
              v105 = v99 + 208;
              goto LABEL_176;
            case '(':
              v105 = v99 + 211;
              goto LABEL_176;
            case ')':
              v105 = v99 + 214;
              goto LABEL_176;
            case '*':
              v105 = v99 + 217;
              goto LABEL_176;
            case '+':
              v105 = v99 + 220;
              goto LABEL_176;
            case ',':
              v105 = v99 + 223;
              goto LABEL_176;
            case '-':
              v105 = v99 + 226;
              goto LABEL_176;
            case '.':
              v105 = v99 + 229;
              goto LABEL_176;
            case '/':
              v105 = v99 + 232;
              goto LABEL_176;
            case '0':
              v105 = v99 + 235;
              goto LABEL_176;
            case '1':
              v105 = v99 + 238;
              goto LABEL_176;
            case '2':
              v105 = v99 + 241;
LABEL_176:
              v106 = *v105;
              if ((v106 & 1) != 0)
                v106 = 0;
              if (v106 != v94)
                goto LABEL_179;
              break;
            default:
LABEL_179:
              v97 |= 0x10u;
              v82[1] = v97;
              v104 = *(unsigned __int8 *)(v94 + 9);
              break;
          }
        }
        if ((v104 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v94 + 76) + 0xF4))
          v82[1] = v97 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v93 = *(unsigned int **)(v4 + 192);
        if (*v93 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198169F08);
        }
        v88 = &v93[2 * v9];
        v89 = v82[1];
        v90 = v88[1] | v82[2];
        v82[2] = v90;
        v91 = v89 | v88[2];
        v82[1] = v91;
        v88[1] = v90;
        v88[2] = v91 & 0xFFFFFFBF;
      }
      ++v9;
    }
    if (!v83)
      v83 = *(_DWORD *)(v2 + 240);
    v107 = (int *)((v2 + v83 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if (!v54)
      v54 = *(_DWORD *)(v2 + 244);
    for (m = v2 + v54; (unint64_t)v107 < m; v107 += 3)
    {
      v115 = *v107;
      *v107 = 0;
      if (v115)
      {
        v117 = 16 * (v115 & 0xFFFFFFFE);
        v118 = *(unsigned __int8 *)(v117 + 9);
        if ((v118 - 39) <= 0xA)
          v119 = JSC::typedArrayModes[v118 - 39];
        else
          v119 = 1 << *(_BYTE *)(v117 + 8);
        v120 = v107[1];
        v121 = v107[2] | v119;
        v107[2] = v121;
        if ((v120 & 0x40) == 0)
        {
          a2.i32[0] = v121;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v134 = *(unsigned __int8 *)(v117 + 9);
            if ((v134 - 39) <= 0xA)
              v135 = JSC::typedArrayModes[v134 - 39];
            else
              v135 = 1 << *(_BYTE *)(v117 + 8);
            v120 |= 0x40u;
            v107[1] = v120;
            v107[2] = v135;
          }
        }
        if ((*(_WORD *)(v117 + 12) & 0x100) != 0)
        {
          v120 |= 8u;
          v107[1] = v120;
        }
        v122 = (_QWORD *)this[1];
        v123 = *(unsigned __int8 *)(v117 + 8);
        if ((v123 & 0x10) != 0)
          v124 = ((v123 & 0xE) + 10) >> 1;
        else
          v124 = (v123 >> 1) & 7;
        v125 = *((_DWORD *)v122 + v124 + 213);
        v126 = 16 * (v125 & 0xFFFFFFFE);
        if (!v125)
          v126 = 0;
        v127 = *(unsigned __int8 *)(v117 + 9);
        if (v126 != v117)
        {
          switch(*(_BYTE *)(v117 + 9))
          {
            case '\'':
              v128 = v122 + 208;
              goto LABEL_225;
            case '(':
              v128 = v122 + 211;
              goto LABEL_225;
            case ')':
              v128 = v122 + 214;
              goto LABEL_225;
            case '*':
              v128 = v122 + 217;
              goto LABEL_225;
            case '+':
              v128 = v122 + 220;
              goto LABEL_225;
            case ',':
              v128 = v122 + 223;
              goto LABEL_225;
            case '-':
              v128 = v122 + 226;
              goto LABEL_225;
            case '.':
              v128 = v122 + 229;
              goto LABEL_225;
            case '/':
              v128 = v122 + 232;
              goto LABEL_225;
            case '0':
              v128 = v122 + 235;
              goto LABEL_225;
            case '1':
              v128 = v122 + 238;
              goto LABEL_225;
            case '2':
              v128 = v122 + 241;
LABEL_225:
              v129 = *v128;
              if ((v129 & 1) != 0)
                v129 = 0;
              if (v129 != v117)
                goto LABEL_228;
              break;
            default:
LABEL_228:
              v120 |= 0x10u;
              v107[1] = v120;
              v127 = *(unsigned __int8 *)(v117 + 9);
              break;
          }
        }
        if ((v127 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v117 + 76) + 0xF4))
          v107[1] = v120 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v116 = *(unsigned int **)(v4 + 192);
        if (*v116 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19816A174);
        }
        v111 = &v116[2 * v9];
        v112 = v107[1];
        v113 = v111[1] | v107[2];
        v107[2] = v113;
        v114 = v112 | v111[2];
        v107[1] = v114;
        v111[1] = v113;
        v111[2] = v114 & 0xFFFFFFBF;
      }
      ++v9;
    }
    if (!v57)
      v57 = *(_DWORD *)(v2 + 248);
    v130 = (int *)((v2 + v57 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v131 = *(unsigned __int16 *)(v2 + 78);
    v132 = v131;
    if (!*(_WORD *)(v2 + 78))
      v132 = *(_DWORD *)(v2 + 252);
    for (n = v2 + v132; (unint64_t)v130 < n; v130 += 4)
    {
      v136 = *v130;
      *v130 = 0;
      if (v136)
      {
        v142 = 16 * (v136 & 0xFFFFFFFE);
        v143 = *(unsigned __int8 *)(v142 + 9);
        if ((v143 - 39) <= 0xA)
          v144 = JSC::typedArrayModes[v143 - 39];
        else
          v144 = 1 << *(_BYTE *)(v142 + 8);
        v145 = v130[1];
        v146 = v130[2] | v144;
        v130[2] = v146;
        if ((v145 & 0x40) == 0)
        {
          a2.i32[0] = v146;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v159 = *(unsigned __int8 *)(v142 + 9);
            if ((v159 - 39) <= 0xA)
              v160 = JSC::typedArrayModes[v159 - 39];
            else
              v160 = 1 << *(_BYTE *)(v142 + 8);
            v145 |= 0x40u;
            v130[1] = v145;
            v130[2] = v160;
          }
        }
        if ((*(_WORD *)(v142 + 12) & 0x100) != 0)
        {
          v145 |= 8u;
          v130[1] = v145;
        }
        v147 = (_QWORD *)this[1];
        v148 = *(unsigned __int8 *)(v142 + 8);
        if ((v148 & 0x10) != 0)
          v149 = ((v148 & 0xE) + 10) >> 1;
        else
          v149 = (v148 >> 1) & 7;
        v150 = *((_DWORD *)v147 + v149 + 213);
        v151 = 16 * (v150 & 0xFFFFFFFE);
        if (!v150)
          v151 = 0;
        v152 = *(unsigned __int8 *)(v142 + 9);
        if (v151 != v142)
        {
          switch(*(_BYTE *)(v142 + 9))
          {
            case '\'':
              v153 = v147 + 208;
              goto LABEL_273;
            case '(':
              v153 = v147 + 211;
              goto LABEL_273;
            case ')':
              v153 = v147 + 214;
              goto LABEL_273;
            case '*':
              v153 = v147 + 217;
              goto LABEL_273;
            case '+':
              v153 = v147 + 220;
              goto LABEL_273;
            case ',':
              v153 = v147 + 223;
              goto LABEL_273;
            case '-':
              v153 = v147 + 226;
              goto LABEL_273;
            case '.':
              v153 = v147 + 229;
              goto LABEL_273;
            case '/':
              v153 = v147 + 232;
              goto LABEL_273;
            case '0':
              v153 = v147 + 235;
              goto LABEL_273;
            case '1':
              v153 = v147 + 238;
              goto LABEL_273;
            case '2':
              v153 = v147 + 241;
LABEL_273:
              v154 = *v153;
              if ((v154 & 1) != 0)
                v154 = 0;
              if (v154 != v142)
                goto LABEL_276;
              break;
            default:
LABEL_276:
              v145 |= 0x10u;
              v130[1] = v145;
              v152 = *(unsigned __int8 *)(v142 + 9);
              break;
          }
        }
        if ((v152 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v142 + 76) + 0xF4))
          v130[1] = v145 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v137 = *(unsigned int **)(v4 + 192);
        if (*v137 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19816A3E0);
        }
        v138 = &v137[2 * v9];
        v139 = v130[1];
        v140 = v138[1] | v130[2];
        v130[2] = v140;
        v141 = v139 | v138[2];
        v130[1] = v141;
        v138[1] = v140;
        v138[2] = v141 & 0xFFFFFFBF;
      }
      ++v9;
    }
    v155 = *(unsigned __int16 *)(v2 + 86);
    if (!*(_WORD *)(v2 + 86))
      v155 = *(_DWORD *)(v2 + 268);
    v156 = (int *)((v2 + v155 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v157 = *(unsigned __int16 *)(v2 + 88);
    if (!*(_WORD *)(v2 + 88))
      v157 = *(_DWORD *)(v2 + 272);
    for (ii = v2 + v157; (unint64_t)v156 < ii; v156 += 4)
    {
      v161 = *v156;
      *v156 = 0;
      if (v161)
      {
        v167 = 16 * (v161 & 0xFFFFFFFE);
        v168 = *(unsigned __int8 *)(v167 + 9);
        if ((v168 - 39) <= 0xA)
          v169 = JSC::typedArrayModes[v168 - 39];
        else
          v169 = 1 << *(_BYTE *)(v167 + 8);
        v170 = v156[1];
        v171 = v156[2] | v169;
        v156[2] = v171;
        if ((v170 & 0x40) == 0)
        {
          a2.i32[0] = v171;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v183 = *(unsigned __int8 *)(v167 + 9);
            if ((v183 - 39) <= 0xA)
              v184 = JSC::typedArrayModes[v183 - 39];
            else
              v184 = 1 << *(_BYTE *)(v167 + 8);
            v170 |= 0x40u;
            v156[1] = v170;
            v156[2] = v184;
          }
        }
        if ((*(_WORD *)(v167 + 12) & 0x100) != 0)
        {
          v170 |= 8u;
          v156[1] = v170;
        }
        v172 = (_QWORD *)this[1];
        v173 = *(unsigned __int8 *)(v167 + 8);
        if ((v173 & 0x10) != 0)
          v174 = ((v173 & 0xE) + 10) >> 1;
        else
          v174 = (v173 >> 1) & 7;
        v175 = *((_DWORD *)v172 + v174 + 213);
        v176 = 16 * (v175 & 0xFFFFFFFE);
        if (!v175)
          v176 = 0;
        v177 = *(unsigned __int8 *)(v167 + 9);
        if (v176 != v167)
        {
          switch(*(_BYTE *)(v167 + 9))
          {
            case '\'':
              v178 = v172 + 208;
              goto LABEL_322;
            case '(':
              v178 = v172 + 211;
              goto LABEL_322;
            case ')':
              v178 = v172 + 214;
              goto LABEL_322;
            case '*':
              v178 = v172 + 217;
              goto LABEL_322;
            case '+':
              v178 = v172 + 220;
              goto LABEL_322;
            case ',':
              v178 = v172 + 223;
              goto LABEL_322;
            case '-':
              v178 = v172 + 226;
              goto LABEL_322;
            case '.':
              v178 = v172 + 229;
              goto LABEL_322;
            case '/':
              v178 = v172 + 232;
              goto LABEL_322;
            case '0':
              v178 = v172 + 235;
              goto LABEL_322;
            case '1':
              v178 = v172 + 238;
              goto LABEL_322;
            case '2':
              v178 = v172 + 241;
LABEL_322:
              v179 = *v178;
              if ((v179 & 1) != 0)
                v179 = 0;
              if (v179 != v167)
                goto LABEL_325;
              break;
            default:
LABEL_325:
              v170 |= 0x10u;
              v156[1] = v170;
              v177 = *(unsigned __int8 *)(v167 + 9);
              break;
          }
        }
        if ((v177 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v167 + 76) + 0xF4))
          v156[1] = v170 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v162 = *(unsigned int **)(v4 + 192);
        if (*v162 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19816A648);
        }
        v163 = &v162[2 * v9];
        v164 = v156[1];
        v165 = v163[1] | v156[2];
        v156[2] = v165;
        v166 = v164 | v163[2];
        v156[1] = v166;
        v163[1] = v165;
        v163[2] = v166 & 0xFFFFFFBF;
      }
      ++v9;
    }
    if (!v131)
      v131 = *(_DWORD *)(v2 + 252);
    v180 = (int *)((v2 + v131 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v181 = *(unsigned __int16 *)(v2 + 80);
    if (!*(_WORD *)(v2 + 80))
      v181 = *(_DWORD *)(v2 + 256);
    v182 = v2 + v181;
    if (v182 > (unint64_t)v180)
    {
      do
      {
        v189 = *v180;
        *v180 = 0;
        if (v189)
        {
          v191 = 16 * (v189 & 0xFFFFFFFE);
          v192 = *(unsigned __int8 *)(v191 + 9);
          if ((v192 - 39) <= 0xA)
            v193 = JSC::typedArrayModes[v192 - 39];
          else
            v193 = 1 << *(_BYTE *)(v191 + 8);
          v194 = v180[1];
          v195 = v180[2] | v193;
          v180[2] = v195;
          if ((v194 & 0x40) == 0)
          {
            a2.i32[0] = v195;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v208 = *(unsigned __int8 *)(v191 + 9);
              if ((v208 - 39) <= 0xA)
                v209 = JSC::typedArrayModes[v208 - 39];
              else
                v209 = 1 << *(_BYTE *)(v191 + 8);
              v194 |= 0x40u;
              v180[1] = v194;
              v180[2] = v209;
            }
          }
          if ((*(_WORD *)(v191 + 12) & 0x100) != 0)
          {
            v194 |= 8u;
            v180[1] = v194;
          }
          v196 = (_QWORD *)this[1];
          v197 = *(unsigned __int8 *)(v191 + 8);
          if ((v197 & 0x10) != 0)
            v198 = ((v197 & 0xE) + 10) >> 1;
          else
            v198 = (v197 >> 1) & 7;
          v199 = *((_DWORD *)v196 + v198 + 213);
          v200 = 16 * (v199 & 0xFFFFFFFE);
          if (!v199)
            v200 = 0;
          v201 = *(unsigned __int8 *)(v191 + 9);
          if (v200 != v191)
          {
            switch(*(_BYTE *)(v191 + 9))
            {
              case '\'':
                v202 = v196 + 208;
                goto LABEL_372;
              case '(':
                v202 = v196 + 211;
                goto LABEL_372;
              case ')':
                v202 = v196 + 214;
                goto LABEL_372;
              case '*':
                v202 = v196 + 217;
                goto LABEL_372;
              case '+':
                v202 = v196 + 220;
                goto LABEL_372;
              case ',':
                v202 = v196 + 223;
                goto LABEL_372;
              case '-':
                v202 = v196 + 226;
                goto LABEL_372;
              case '.':
                v202 = v196 + 229;
                goto LABEL_372;
              case '/':
                v202 = v196 + 232;
                goto LABEL_372;
              case '0':
                v202 = v196 + 235;
                goto LABEL_372;
              case '1':
                v202 = v196 + 238;
                goto LABEL_372;
              case '2':
                v202 = v196 + 241;
LABEL_372:
                v203 = *v202;
                if ((v203 & 1) != 0)
                  v203 = 0;
                if (v203 != v191)
                  goto LABEL_375;
                break;
              default:
LABEL_375:
                v194 |= 0x10u;
                v180[1] = v194;
                v201 = *(unsigned __int8 *)(v191 + 9);
                break;
            }
          }
          if ((v201 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v191 + 76) + 0xF4))
            v180[1] = v194 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v190 = *(unsigned int **)(v4 + 192);
          if (*v190 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816A8B8);
          }
          v185 = &v190[2 * v9];
          v186 = v180[1];
          v187 = v185[1] | v180[2];
          v180[2] = v187;
          v188 = v186 | v185[2];
          v180[1] = v188;
          v185[1] = v187;
          v185[2] = v188 & 0xFFFFFFBF;
        }
        ++v9;
        v180 += 4;
      }
      while ((unint64_t)v180 < v182);
      v2 = this[17];
    }
    v204 = *(unsigned __int16 *)(v2 + 82);
    if (!*(_WORD *)(v2 + 82))
      v204 = *(_DWORD *)(v2 + 260);
    v205 = (int *)((v2 + v204 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v206 = *(unsigned __int16 *)(v2 + 84);
    if (!*(_WORD *)(v2 + 84))
      v206 = *(_DWORD *)(v2 + 264);
    v207 = v2 + v206;
    if (v207 > (unint64_t)v205)
    {
      do
      {
        v214 = *v205;
        *v205 = 0;
        if (v214)
        {
          v216 = 16 * (v214 & 0xFFFFFFFE);
          v217 = *(unsigned __int8 *)(v216 + 9);
          if ((v217 - 39) <= 0xA)
            v218 = JSC::typedArrayModes[v217 - 39];
          else
            v218 = 1 << *(_BYTE *)(v216 + 8);
          v219 = v205[1];
          v220 = v205[2] | v218;
          v205[2] = v220;
          if ((v219 & 0x40) == 0)
          {
            a2.i32[0] = v220;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v233 = *(unsigned __int8 *)(v216 + 9);
              if ((v233 - 39) <= 0xA)
                v234 = JSC::typedArrayModes[v233 - 39];
              else
                v234 = 1 << *(_BYTE *)(v216 + 8);
              v219 |= 0x40u;
              v205[1] = v219;
              v205[2] = v234;
            }
          }
          if ((*(_WORD *)(v216 + 12) & 0x100) != 0)
          {
            v219 |= 8u;
            v205[1] = v219;
          }
          v221 = (_QWORD *)this[1];
          v222 = *(unsigned __int8 *)(v216 + 8);
          if ((v222 & 0x10) != 0)
            v223 = ((v222 & 0xE) + 10) >> 1;
          else
            v223 = (v222 >> 1) & 7;
          v224 = *((_DWORD *)v221 + v223 + 213);
          v225 = 16 * (v224 & 0xFFFFFFFE);
          if (!v224)
            v225 = 0;
          v226 = *(unsigned __int8 *)(v216 + 9);
          if (v225 != v216)
          {
            switch(*(_BYTE *)(v216 + 9))
            {
              case '\'':
                v227 = v221 + 208;
                goto LABEL_422;
              case '(':
                v227 = v221 + 211;
                goto LABEL_422;
              case ')':
                v227 = v221 + 214;
                goto LABEL_422;
              case '*':
                v227 = v221 + 217;
                goto LABEL_422;
              case '+':
                v227 = v221 + 220;
                goto LABEL_422;
              case ',':
                v227 = v221 + 223;
                goto LABEL_422;
              case '-':
                v227 = v221 + 226;
                goto LABEL_422;
              case '.':
                v227 = v221 + 229;
                goto LABEL_422;
              case '/':
                v227 = v221 + 232;
                goto LABEL_422;
              case '0':
                v227 = v221 + 235;
                goto LABEL_422;
              case '1':
                v227 = v221 + 238;
                goto LABEL_422;
              case '2':
                v227 = v221 + 241;
LABEL_422:
                v228 = *v227;
                if ((v228 & 1) != 0)
                  v228 = 0;
                if (v228 != v216)
                  goto LABEL_425;
                break;
              default:
LABEL_425:
                v219 |= 0x10u;
                v205[1] = v219;
                v226 = *(unsigned __int8 *)(v216 + 9);
                break;
            }
          }
          if ((v226 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v216 + 76) + 0xF4))
            v205[1] = v219 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v215 = *(unsigned int **)(v4 + 192);
          if (*v215 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816AB28);
          }
          v210 = &v215[2 * v9];
          v211 = v205[1];
          v212 = v210[1] | v205[2];
          v205[2] = v212;
          v213 = v211 | v210[2];
          v205[1] = v213;
          v210[1] = v212;
          v210[2] = v213 & 0xFFFFFFBF;
        }
        ++v9;
        v205 += 4;
      }
      while ((unint64_t)v205 < v207);
      v2 = this[17];
    }
    v229 = *(unsigned __int16 *)(v2 + 80);
    if (!*(_WORD *)(v2 + 80))
      v229 = *(_DWORD *)(v2 + 256);
    v230 = (int *)((v2 + v229 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    v231 = *(unsigned __int16 *)(v2 + 82);
    if (!*(_WORD *)(v2 + 82))
      v231 = *(_DWORD *)(v2 + 260);
    v232 = v2 + v231;
    if (v232 > (unint64_t)v230)
    {
      do
      {
        v235 = *v230;
        *v230 = 0;
        if (v235)
        {
          v241 = 16 * (v235 & 0xFFFFFFFE);
          v242 = *(unsigned __int8 *)(v241 + 9);
          if ((v242 - 39) <= 0xA)
            v243 = JSC::typedArrayModes[v242 - 39];
          else
            v243 = 1 << *(_BYTE *)(v241 + 8);
          v244 = v230[1];
          v245 = v230[2] | v243;
          v230[2] = v245;
          if ((v244 & 0x40) == 0)
          {
            a2.i32[0] = v245;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v259 = *(unsigned __int8 *)(v241 + 9);
              if ((v259 - 39) <= 0xA)
                v260 = JSC::typedArrayModes[v259 - 39];
              else
                v260 = 1 << *(_BYTE *)(v241 + 8);
              v244 |= 0x40u;
              v230[1] = v244;
              v230[2] = v260;
            }
          }
          if ((*(_WORD *)(v241 + 12) & 0x100) != 0)
          {
            v244 |= 8u;
            v230[1] = v244;
          }
          v246 = (_QWORD *)this[1];
          v247 = *(unsigned __int8 *)(v241 + 8);
          if ((v247 & 0x10) != 0)
            v248 = ((v247 & 0xE) + 10) >> 1;
          else
            v248 = (v247 >> 1) & 7;
          v249 = *((_DWORD *)v246 + v248 + 213);
          v250 = 16 * (v249 & 0xFFFFFFFE);
          if (!v249)
            v250 = 0;
          v251 = *(unsigned __int8 *)(v241 + 9);
          if (v250 != v241)
          {
            switch(*(_BYTE *)(v241 + 9))
            {
              case '\'':
                v252 = v246 + 208;
                goto LABEL_471;
              case '(':
                v252 = v246 + 211;
                goto LABEL_471;
              case ')':
                v252 = v246 + 214;
                goto LABEL_471;
              case '*':
                v252 = v246 + 217;
                goto LABEL_471;
              case '+':
                v252 = v246 + 220;
                goto LABEL_471;
              case ',':
                v252 = v246 + 223;
                goto LABEL_471;
              case '-':
                v252 = v246 + 226;
                goto LABEL_471;
              case '.':
                v252 = v246 + 229;
                goto LABEL_471;
              case '/':
                v252 = v246 + 232;
                goto LABEL_471;
              case '0':
                v252 = v246 + 235;
                goto LABEL_471;
              case '1':
                v252 = v246 + 238;
                goto LABEL_471;
              case '2':
                v252 = v246 + 241;
LABEL_471:
                v253 = *v252;
                if ((v253 & 1) != 0)
                  v253 = 0;
                if (v253 != v241)
                  goto LABEL_474;
                break;
              default:
LABEL_474:
                v244 |= 0x10u;
                v230[1] = v244;
                v251 = *(unsigned __int8 *)(v241 + 9);
                break;
            }
          }
          if ((v251 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v241 + 76) + 0xF4))
            v230[1] = v244 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v236 = *(unsigned int **)(v4 + 192);
          if (*v236 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816AD9CLL);
          }
          v237 = &v236[2 * v9];
          v238 = v230[1];
          v239 = v237[1] | v230[2];
          v230[2] = v239;
          v240 = v238 | v237[2];
          v230[1] = v240;
          v237[1] = v239;
          v237[2] = v240 & 0xFFFFFFBF;
        }
        ++v9;
        v230 += 4;
      }
      while ((unint64_t)v230 < v232);
      v2 = this[17];
    }
    v254 = *(unsigned __int16 *)(v2 + 44);
    if (!*(_WORD *)(v2 + 44))
      v254 = *(_DWORD *)(v2 + 184);
    v255 = (_DWORD *)((v2 + v254 + 7) & 0xFFFFFFFFFFFFFFF8);
    v256 = *(unsigned __int16 *)(v2 + 46);
    if (*(_WORD *)(v2 + 46))
      v257 = *(unsigned __int16 *)(v2 + 46);
    else
      v257 = *(_DWORD *)(v2 + 188);
    v258 = v2 + v257;
    if (v258 > (unint64_t)v255)
    {
      do
      {
        v261 = v255[2];
        v255[2] = 0;
        if (v261)
        {
          v267 = 16 * (v261 & 0xFFFFFFFE);
          v268 = *(unsigned __int8 *)(v267 + 9);
          if ((v268 - 39) <= 0xA)
            v269 = JSC::typedArrayModes[v268 - 39];
          else
            v269 = 1 << *(_BYTE *)(v267 + 8);
          v270 = v255[3];
          v271 = v255[4] | v269;
          v255[4] = v271;
          if ((v270 & 0x40) == 0)
          {
            a2.i32[0] = v271;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v284 = *(unsigned __int8 *)(v267 + 9);
              if ((v284 - 39) <= 0xA)
                v285 = JSC::typedArrayModes[v284 - 39];
              else
                v285 = 1 << *(_BYTE *)(v267 + 8);
              v270 |= 0x40u;
              v255[3] = v270;
              v255[4] = v285;
            }
          }
          if ((*(_WORD *)(v267 + 12) & 0x100) != 0)
          {
            v270 |= 8u;
            v255[3] = v270;
          }
          v272 = (_QWORD *)this[1];
          v273 = *(unsigned __int8 *)(v267 + 8);
          if ((v273 & 0x10) != 0)
            v274 = ((v273 & 0xE) + 10) >> 1;
          else
            v274 = (v273 >> 1) & 7;
          v275 = *((_DWORD *)v272 + v274 + 213);
          v276 = 16 * (v275 & 0xFFFFFFFE);
          if (!v275)
            v276 = 0;
          v277 = *(unsigned __int8 *)(v267 + 9);
          if (v276 != v267)
          {
            switch(*(_BYTE *)(v267 + 9))
            {
              case '\'':
                v278 = v272 + 208;
                goto LABEL_522;
              case '(':
                v278 = v272 + 211;
                goto LABEL_522;
              case ')':
                v278 = v272 + 214;
                goto LABEL_522;
              case '*':
                v278 = v272 + 217;
                goto LABEL_522;
              case '+':
                v278 = v272 + 220;
                goto LABEL_522;
              case ',':
                v278 = v272 + 223;
                goto LABEL_522;
              case '-':
                v278 = v272 + 226;
                goto LABEL_522;
              case '.':
                v278 = v272 + 229;
                goto LABEL_522;
              case '/':
                v278 = v272 + 232;
                goto LABEL_522;
              case '0':
                v278 = v272 + 235;
                goto LABEL_522;
              case '1':
                v278 = v272 + 238;
                goto LABEL_522;
              case '2':
                v278 = v272 + 241;
LABEL_522:
                v279 = *v278;
                if ((v279 & 1) != 0)
                  v279 = 0;
                if (v279 != v267)
                  goto LABEL_525;
                break;
              default:
LABEL_525:
                v270 |= 0x10u;
                v255[3] = v270;
                v277 = *(unsigned __int8 *)(v267 + 9);
                break;
            }
          }
          if ((v277 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v267 + 76) + 0xF4))
            v255[3] = v270 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v262 = *(unsigned int **)(v4 + 192);
          if (*v262 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816B010);
          }
          v263 = &v262[2 * v9];
          v264 = v255[3];
          v265 = v263[1] | v255[4];
          v255[4] = v265;
          v266 = v264 | v263[2];
          v255[3] = v266;
          v263[1] = v265;
          v263[2] = v266 & 0xFFFFFFBF;
        }
        ++v9;
        v255 += 6;
      }
      while ((unint64_t)v255 < v258);
      v2 = this[17];
      v256 = *(unsigned __int16 *)(v2 + 46);
    }
    if (!v256)
      v256 = *(_DWORD *)(v2 + 188);
    v280 = (_DWORD *)((v2 + v256 + 7) & 0xFFFFFFFFFFFFFFF8);
    v281 = *(unsigned __int16 *)(v2 + 48);
    if (*(_WORD *)(v2 + 48))
      v282 = *(unsigned __int16 *)(v2 + 48);
    else
      v282 = *(_DWORD *)(v2 + 192);
    v283 = v2 + v282;
    if (v283 > (unint64_t)v280)
    {
      do
      {
        v286 = v280[20];
        v280[20] = 0;
        if (v286)
        {
          v292 = 16 * (v286 & 0xFFFFFFFE);
          v293 = *(unsigned __int8 *)(v292 + 9);
          if ((v293 - 39) <= 0xA)
            v294 = JSC::typedArrayModes[v293 - 39];
          else
            v294 = 1 << *(_BYTE *)(v292 + 8);
          v295 = v280[21];
          v296 = v280[22] | v294;
          v280[22] = v296;
          if ((v295 & 0x40) == 0)
          {
            a2.i32[0] = v296;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v308 = *(unsigned __int8 *)(v292 + 9);
              if ((v308 - 39) <= 0xA)
                v309 = JSC::typedArrayModes[v308 - 39];
              else
                v309 = 1 << *(_BYTE *)(v292 + 8);
              v295 |= 0x40u;
              v280[21] = v295;
              v280[22] = v309;
            }
          }
          if ((*(_WORD *)(v292 + 12) & 0x100) != 0)
          {
            v295 |= 8u;
            v280[21] = v295;
          }
          v297 = (_QWORD *)this[1];
          v298 = *(unsigned __int8 *)(v292 + 8);
          if ((v298 & 0x10) != 0)
            v299 = ((v298 & 0xE) + 10) >> 1;
          else
            v299 = (v298 >> 1) & 7;
          v300 = *((_DWORD *)v297 + v299 + 213);
          v301 = 16 * (v300 & 0xFFFFFFFE);
          if (!v300)
            v301 = 0;
          v302 = *(unsigned __int8 *)(v292 + 9);
          if (v301 != v292)
          {
            switch(*(_BYTE *)(v292 + 9))
            {
              case '\'':
                v303 = v297 + 208;
                goto LABEL_573;
              case '(':
                v303 = v297 + 211;
                goto LABEL_573;
              case ')':
                v303 = v297 + 214;
                goto LABEL_573;
              case '*':
                v303 = v297 + 217;
                goto LABEL_573;
              case '+':
                v303 = v297 + 220;
                goto LABEL_573;
              case ',':
                v303 = v297 + 223;
                goto LABEL_573;
              case '-':
                v303 = v297 + 226;
                goto LABEL_573;
              case '.':
                v303 = v297 + 229;
                goto LABEL_573;
              case '/':
                v303 = v297 + 232;
                goto LABEL_573;
              case '0':
                v303 = v297 + 235;
                goto LABEL_573;
              case '1':
                v303 = v297 + 238;
                goto LABEL_573;
              case '2':
                v303 = v297 + 241;
LABEL_573:
                v304 = *v303;
                if ((v304 & 1) != 0)
                  v304 = 0;
                if (v304 != v292)
                  goto LABEL_576;
                break;
              default:
LABEL_576:
                v295 |= 0x10u;
                v280[21] = v295;
                v302 = *(unsigned __int8 *)(v292 + 9);
                break;
            }
          }
          if ((v302 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v292 + 76) + 0xF4))
            v280[21] = v295 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v287 = *(unsigned int **)(v4 + 192);
          if (*v287 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816B280);
          }
          v288 = &v287[2 * v9];
          v289 = v280[21];
          v290 = v288[1] | v280[22];
          v280[22] = v290;
          v291 = v289 | v288[2];
          v280[21] = v291;
          v288[1] = v290;
          v288[2] = v291 & 0xFFFFFFBF;
        }
        ++v9;
        v280 += 24;
      }
      while ((unint64_t)v280 < v283);
      v2 = this[17];
      v281 = *(unsigned __int16 *)(v2 + 48);
    }
    if (!v281)
      v281 = *(_DWORD *)(v2 + 192);
    v305 = (_DWORD *)((v2 + v281 + 7) & 0xFFFFFFFFFFFFFFF8);
    v306 = *(unsigned __int16 *)(v2 + 50);
    if (!*(_WORD *)(v2 + 50))
      v306 = *(_DWORD *)(v2 + 196);
    v307 = v2 + v306;
    if (v307 > (unint64_t)v305)
    {
      do
      {
        v314 = v305[20];
        v305[20] = 0;
        if (v314)
        {
          v316 = 16 * (v314 & 0xFFFFFFFE);
          v317 = *(unsigned __int8 *)(v316 + 9);
          if ((v317 - 39) <= 0xA)
            v318 = JSC::typedArrayModes[v317 - 39];
          else
            v318 = 1 << *(_BYTE *)(v316 + 8);
          v319 = v305[21];
          v320 = v305[22] | v318;
          v305[22] = v320;
          if ((v319 & 0x40) == 0)
          {
            a2.i32[0] = v320;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v333 = *(unsigned __int8 *)(v316 + 9);
              if ((v333 - 39) <= 0xA)
                v334 = JSC::typedArrayModes[v333 - 39];
              else
                v334 = 1 << *(_BYTE *)(v316 + 8);
              v319 |= 0x40u;
              v305[21] = v319;
              v305[22] = v334;
            }
          }
          if ((*(_WORD *)(v316 + 12) & 0x100) != 0)
          {
            v319 |= 8u;
            v305[21] = v319;
          }
          v321 = (_QWORD *)this[1];
          v322 = *(unsigned __int8 *)(v316 + 8);
          if ((v322 & 0x10) != 0)
            v323 = ((v322 & 0xE) + 10) >> 1;
          else
            v323 = (v322 >> 1) & 7;
          v324 = *((_DWORD *)v321 + v323 + 213);
          v325 = 16 * (v324 & 0xFFFFFFFE);
          if (!v324)
            v325 = 0;
          v326 = *(unsigned __int8 *)(v316 + 9);
          if (v325 != v316)
          {
            switch(*(_BYTE *)(v316 + 9))
            {
              case '\'':
                v327 = v321 + 208;
                goto LABEL_624;
              case '(':
                v327 = v321 + 211;
                goto LABEL_624;
              case ')':
                v327 = v321 + 214;
                goto LABEL_624;
              case '*':
                v327 = v321 + 217;
                goto LABEL_624;
              case '+':
                v327 = v321 + 220;
                goto LABEL_624;
              case ',':
                v327 = v321 + 223;
                goto LABEL_624;
              case '-':
                v327 = v321 + 226;
                goto LABEL_624;
              case '.':
                v327 = v321 + 229;
                goto LABEL_624;
              case '/':
                v327 = v321 + 232;
                goto LABEL_624;
              case '0':
                v327 = v321 + 235;
                goto LABEL_624;
              case '1':
                v327 = v321 + 238;
                goto LABEL_624;
              case '2':
                v327 = v321 + 241;
LABEL_624:
                v328 = *v327;
                if ((v328 & 1) != 0)
                  v328 = 0;
                if (v328 != v316)
                  goto LABEL_627;
                break;
              default:
LABEL_627:
                v319 |= 0x10u;
                v305[21] = v319;
                v326 = *(unsigned __int8 *)(v316 + 9);
                break;
            }
          }
          if ((v326 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v316 + 76) + 0xF4))
            v305[21] = v319 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v315 = *(unsigned int **)(v4 + 192);
          if (*v315 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816B4F0);
          }
          v310 = &v315[2 * v9];
          v311 = v305[21];
          v312 = v310[1] | v305[22];
          v305[22] = v312;
          v313 = v311 | v310[2];
          v305[21] = v313;
          v310[1] = v312;
          v310[2] = v313 & 0xFFFFFFBF;
        }
        ++v9;
        v305 += 24;
      }
      while ((unint64_t)v305 < v307);
      v2 = this[17];
    }
    v329 = *(unsigned __int16 *)(v2 + 18);
    if (!*(_WORD *)(v2 + 18))
      v329 = *(_DWORD *)(v2 + 132);
    v330 = (_DWORD *)((v2 + v329 + 7) & 0xFFFFFFFFFFFFFFF8);
    v331 = *(unsigned __int16 *)(v2 + 20);
    if (!*(_WORD *)(v2 + 20))
      v331 = *(_DWORD *)(v2 + 136);
    v332 = v2 + v331;
    if (v332 > (unint64_t)v330)
    {
      do
      {
        v335 = v330[20];
        v330[20] = 0;
        if (v335)
        {
          v341 = 16 * (v335 & 0xFFFFFFFE);
          v342 = *(unsigned __int8 *)(v341 + 9);
          if ((v342 - 39) <= 0xA)
            v343 = JSC::typedArrayModes[v342 - 39];
          else
            v343 = 1 << *(_BYTE *)(v341 + 8);
          v344 = v330[21];
          v345 = v330[22] | v343;
          v330[22] = v345;
          if ((v344 & 0x40) == 0)
          {
            a2.i32[0] = v345;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v358 = *(unsigned __int8 *)(v341 + 9);
              if ((v358 - 39) <= 0xA)
                v359 = JSC::typedArrayModes[v358 - 39];
              else
                v359 = 1 << *(_BYTE *)(v341 + 8);
              v344 |= 0x40u;
              v330[21] = v344;
              v330[22] = v359;
            }
          }
          if ((*(_WORD *)(v341 + 12) & 0x100) != 0)
          {
            v344 |= 8u;
            v330[21] = v344;
          }
          v346 = (_QWORD *)this[1];
          v347 = *(unsigned __int8 *)(v341 + 8);
          if ((v347 & 0x10) != 0)
            v348 = ((v347 & 0xE) + 10) >> 1;
          else
            v348 = (v347 >> 1) & 7;
          v349 = *((_DWORD *)v346 + v348 + 213);
          v350 = 16 * (v349 & 0xFFFFFFFE);
          if (!v349)
            v350 = 0;
          v351 = *(unsigned __int8 *)(v341 + 9);
          if (v350 != v341)
          {
            switch(*(_BYTE *)(v341 + 9))
            {
              case '\'':
                v352 = v346 + 208;
                goto LABEL_673;
              case '(':
                v352 = v346 + 211;
                goto LABEL_673;
              case ')':
                v352 = v346 + 214;
                goto LABEL_673;
              case '*':
                v352 = v346 + 217;
                goto LABEL_673;
              case '+':
                v352 = v346 + 220;
                goto LABEL_673;
              case ',':
                v352 = v346 + 223;
                goto LABEL_673;
              case '-':
                v352 = v346 + 226;
                goto LABEL_673;
              case '.':
                v352 = v346 + 229;
                goto LABEL_673;
              case '/':
                v352 = v346 + 232;
                goto LABEL_673;
              case '0':
                v352 = v346 + 235;
                goto LABEL_673;
              case '1':
                v352 = v346 + 238;
                goto LABEL_673;
              case '2':
                v352 = v346 + 241;
LABEL_673:
                v353 = *v352;
                if ((v353 & 1) != 0)
                  v353 = 0;
                if (v353 != v341)
                  goto LABEL_676;
                break;
              default:
LABEL_676:
                v344 |= 0x10u;
                v330[21] = v344;
                v351 = *(unsigned __int8 *)(v341 + 9);
                break;
            }
          }
          if ((v351 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v341 + 76) + 0xF4))
            v330[21] = v344 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v336 = *(unsigned int **)(v4 + 192);
          if (*v336 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816B760);
          }
          v337 = &v336[2 * v9];
          v338 = v330[21];
          v339 = v337[1] | v330[22];
          v330[22] = v339;
          v340 = v338 | v337[2];
          v330[21] = v340;
          v337[1] = v339;
          v337[2] = v340 & 0xFFFFFFBF;
        }
        ++v9;
        v330 += 24;
      }
      while ((unint64_t)v330 < v332);
      v2 = this[17];
    }
    v354 = *(unsigned __int16 *)(v2 + 8);
    if (!*(_WORD *)(v2 + 8))
      v354 = *(_DWORD *)(v2 + 112);
    v355 = (_DWORD *)((v2 + v354 + 7) & 0xFFFFFFFFFFFFFFF8);
    v356 = *(unsigned __int16 *)(v2 + 10);
    if (!*(_WORD *)(v2 + 10))
      v356 = *(_DWORD *)(v2 + 116);
    v357 = v2 + v356;
    if (v357 > (unint64_t)v355)
    {
      do
      {
        v364 = v355[24];
        v355[24] = 0;
        if (v364)
        {
          v366 = 16 * (v364 & 0xFFFFFFFE);
          v367 = *(unsigned __int8 *)(v366 + 9);
          if ((v367 - 39) <= 0xA)
            v368 = JSC::typedArrayModes[v367 - 39];
          else
            v368 = 1 << *(_BYTE *)(v366 + 8);
          v369 = v355[25];
          v370 = v355[26] | v368;
          v355[26] = v370;
          if ((v369 & 0x40) == 0)
          {
            a2.i32[0] = v370;
            a2 = vcnt_s8(a2);
            a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
            if (a2.i32[0] >= 2u)
            {
              v383 = *(unsigned __int8 *)(v366 + 9);
              if ((v383 - 39) <= 0xA)
                v384 = JSC::typedArrayModes[v383 - 39];
              else
                v384 = 1 << *(_BYTE *)(v366 + 8);
              v369 |= 0x40u;
              v355[25] = v369;
              v355[26] = v384;
            }
          }
          if ((*(_WORD *)(v366 + 12) & 0x100) != 0)
          {
            v369 |= 8u;
            v355[25] = v369;
          }
          v371 = (_QWORD *)this[1];
          v372 = *(unsigned __int8 *)(v366 + 8);
          if ((v372 & 0x10) != 0)
            v373 = ((v372 & 0xE) + 10) >> 1;
          else
            v373 = (v372 >> 1) & 7;
          v374 = *((_DWORD *)v371 + v373 + 213);
          v375 = 16 * (v374 & 0xFFFFFFFE);
          if (!v374)
            v375 = 0;
          v376 = *(unsigned __int8 *)(v366 + 9);
          if (v375 != v366)
          {
            switch(*(_BYTE *)(v366 + 9))
            {
              case '\'':
                v377 = v371 + 208;
                goto LABEL_724;
              case '(':
                v377 = v371 + 211;
                goto LABEL_724;
              case ')':
                v377 = v371 + 214;
                goto LABEL_724;
              case '*':
                v377 = v371 + 217;
                goto LABEL_724;
              case '+':
                v377 = v371 + 220;
                goto LABEL_724;
              case ',':
                v377 = v371 + 223;
                goto LABEL_724;
              case '-':
                v377 = v371 + 226;
                goto LABEL_724;
              case '.':
                v377 = v371 + 229;
                goto LABEL_724;
              case '/':
                v377 = v371 + 232;
                goto LABEL_724;
              case '0':
                v377 = v371 + 235;
                goto LABEL_724;
              case '1':
                v377 = v371 + 238;
                goto LABEL_724;
              case '2':
                v377 = v371 + 241;
LABEL_724:
                v378 = *v377;
                if ((v378 & 1) != 0)
                  v378 = 0;
                if (v378 != v366)
                  goto LABEL_727;
                break;
              default:
LABEL_727:
                v369 |= 0x10u;
                v355[25] = v369;
                v376 = *(unsigned __int8 *)(v366 + 9);
                break;
            }
          }
          if ((v376 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v366 + 76) + 0xF4))
            v355[25] = v369 | 0x20;
        }
        if ((v7 & 1) == 0)
        {
          v365 = *(unsigned int **)(v4 + 192);
          if (*v365 <= v9)
          {
            __break(0xC471u);
            JUMPOUT(0x19816B9D0);
          }
          v360 = &v365[2 * v9];
          v361 = v355[25];
          v362 = v360[1] | v355[26];
          v355[26] = v362;
          v363 = v361 | v360[2];
          v355[25] = v363;
          v360[1] = v362;
          v360[2] = v363 & 0xFFFFFFBF;
        }
        ++v9;
        v355 += 28;
      }
      while ((unint64_t)v355 < v357);
      v2 = this[17];
    }
    v379 = *(unsigned __int16 *)(v2 + 4);
    if (!*(_WORD *)(v2 + 4))
      v379 = *(_DWORD *)(v2 + 104);
    v380 = (_DWORD *)((v2 + v379 + 7) & 0xFFFFFFFFFFFFFFF8);
    v381 = *(unsigned __int16 *)(v2 + 6);
    if (!*(_WORD *)(v2 + 6))
      v381 = *(_DWORD *)(v2 + 108);
    for (jj = v2 + v381; (unint64_t)v380 < jj; v380 += 32)
    {
      v389 = v380[28];
      v380[28] = 0;
      if (v389)
      {
        v391 = 16 * (v389 & 0xFFFFFFFE);
        v392 = *(unsigned __int8 *)(v391 + 9);
        if ((v392 - 39) <= 0xA)
          v393 = JSC::typedArrayModes[v392 - 39];
        else
          v393 = 1 << *(_BYTE *)(v391 + 8);
        v394 = v380[29];
        v395 = v380[30] | v393;
        v380[30] = v395;
        if ((v394 & 0x40) == 0)
        {
          a2.i32[0] = v395;
          a2 = vcnt_s8(a2);
          a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
          if (a2.i32[0] >= 2u)
          {
            v404 = *(unsigned __int8 *)(v391 + 9);
            if ((v404 - 39) <= 0xA)
              v405 = JSC::typedArrayModes[v404 - 39];
            else
              v405 = 1 << *(_BYTE *)(v391 + 8);
            v394 |= 0x40u;
            v380[29] = v394;
            v380[30] = v405;
          }
        }
        if ((*(_WORD *)(v391 + 12) & 0x100) != 0)
        {
          v394 |= 8u;
          v380[29] = v394;
        }
        v396 = (_QWORD *)this[1];
        v397 = *(unsigned __int8 *)(v391 + 8);
        if ((v397 & 0x10) != 0)
          v398 = ((v397 & 0xE) + 10) >> 1;
        else
          v398 = (v397 >> 1) & 7;
        v399 = *((_DWORD *)v396 + v398 + 213);
        v400 = 16 * (v399 & 0xFFFFFFFE);
        if (!v399)
          v400 = 0;
        v401 = *(unsigned __int8 *)(v391 + 9);
        if (v400 != v391)
        {
          switch(*(_BYTE *)(v391 + 9))
          {
            case '\'':
              v402 = v396 + 208;
              goto LABEL_774;
            case '(':
              v402 = v396 + 211;
              goto LABEL_774;
            case ')':
              v402 = v396 + 214;
              goto LABEL_774;
            case '*':
              v402 = v396 + 217;
              goto LABEL_774;
            case '+':
              v402 = v396 + 220;
              goto LABEL_774;
            case ',':
              v402 = v396 + 223;
              goto LABEL_774;
            case '-':
              v402 = v396 + 226;
              goto LABEL_774;
            case '.':
              v402 = v396 + 229;
              goto LABEL_774;
            case '/':
              v402 = v396 + 232;
              goto LABEL_774;
            case '0':
              v402 = v396 + 235;
              goto LABEL_774;
            case '1':
              v402 = v396 + 238;
              goto LABEL_774;
            case '2':
              v402 = v396 + 241;
LABEL_774:
              v403 = *v402;
              if ((v403 & 1) != 0)
                v403 = 0;
              if (v403 != v391)
                goto LABEL_777;
              break;
            default:
LABEL_777:
              v394 |= 0x10u;
              v380[29] = v394;
              v401 = *(unsigned __int8 *)(v391 + 9);
              break;
          }
        }
        if ((v401 - 39) <= 0xB && *(_BYTE *)(16 * *(unsigned int *)(v391 + 76) + 0xF4))
          v380[29] = v394 | 0x20;
      }
      if ((v7 & 1) == 0)
      {
        v390 = *(unsigned int **)(v4 + 192);
        if (*v390 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x19816BBF8);
        }
        v385 = &v390[2 * v9];
        v386 = v380[29];
        v387 = v385[1] | v380[30];
        v380[30] = v387;
        v388 = v386 | v385[2];
        v380[29] = v388;
        v385[1] = v387;
        v385[2] = v388 & 0xFFFFFFBF;
      }
      ++v9;
    }
  }
  return this;
}

uint64_t JSC::CodeBlock::shouldOptimizeNowFromBaseline(JSC::CodeBlock *this, int8x8_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  JSC::CodeBlock *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int **v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t *v60;
  unsigned int v61;
  unint64_t i;
  unint64_t v63;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t *v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t j;
  unint64_t v76;
  uint64_t v78;
  char v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t *v85;
  unsigned int v86;
  unint64_t k;
  unint64_t v88;
  uint64_t v90;
  char v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unint64_t *v96;
  unsigned int v97;
  unint64_t m;
  unint64_t v99;
  uint64_t v101;
  char v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  const char *v107;
  unsigned int *v108;
  unsigned int v109;
  int *v110;
  int v111;
  unsigned int v112;
  int v113;
  double v114;
  unsigned int v115;
  double v116;
  BOOL v117;
  JSC::Profiler::Database *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  unint64_t v128;
  unint64_t v129;
  int *v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  int v145;
  unsigned int v146;
  double v147;
  double v148;
  JSC::CodeBlock *v149;
  double v150;
  double v151;
  int v152;
  int v153;
  WTF *v154;
  char v155;
  char v156;
  uint64_t v157;

  v7 = this;
  v157 = *MEMORY[0x1E0C80C00];
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [24],JSC::CodeBlock,char [4],char [2]>((uint64_t)this);
  if (dword_1ECF4C544 <= *((unsigned __int16 *)v7 + 52))
    return 1;
  v155 = 0;
  v156 = 0;
  v8 = *((_QWORD *)v7 + 7);
  v9 = *(unsigned __int16 *)(v8 + 28) | ((unint64_t)*(unsigned __int8 *)(v8 + 30) << 16);
  v10 = (unsigned int *)*((_QWORD *)v7 + 19);
  v11 = qword_1ECF4C080;
  v12 = JSC::speculatedTypeMapping;
  v13 = 0;
  v14 = 0;
  v15 = (uint64_t *)(v10 + 6);
  if ((*(_WORD *)(v8 + 28) & 1) == 0)
  {
    while (1)
    {
      if (v10)
        v16 = (void *)*v10;
      else
        v16 = 0;
      if (v14 >= (unint64_t)v16)
        goto LABEL_151;
      if (v14 >= *v10)
        goto LABEL_348;
      a6 = *(v15 - 2);
      v17 = *(v15 - 1);
      if (v17)
        v18 = (a6 != 0) + 1;
      else
        v18 = a6 != 0;
      v19 = *v15;
      if (*v15)
        a7 = 0xFFFFFFFFLL;
      else
        a7 = 0;
      if (v18 == (_DWORD)a7)
        v13 = v13;
      else
        v13 = (v13 + 1);
      if (!a6)
      {
        v20 = 0;
        if (!v17)
          goto LABEL_20;
        goto LABEL_31;
      }
      if (a6 >= 0xFFFE000000000000)
      {
        if ((a6 & 0xFFFFFFFE) != 0)
          v20 = 0x200000000;
        else
          v20 = 0x100000000;
      }
      else if (a6 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a2 = (int8x8_t)(a6 - 0x2000000000000);
        v27 = (uint64_t)COERCE_DOUBLE(a6 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 != *(double *)&a2)
          goto LABEL_67;
        if (v27)
        {
          if ((unint64_t)(v27 + 0x8000000000000) >> 52)
            goto LABEL_67;
        }
        else if ((uint64_t)a6 < 0x2000000000000)
        {
LABEL_67:
          v20 = 0x2000000000;
          goto LABEL_30;
        }
        v20 = 0x1000000000;
      }
      else if ((a6 & 0xFFFE000000000002) != 0)
      {
        if ((a6 & 0xFFFFFFFFFFFFFFFELL) == 6)
          v20 = 0x10000000000;
        else
          v20 = 0x20000000000;
      }
      else
      {
        if (v11 > a6)
          goto LABEL_84;
        v20 = 0;
        a7 = a6 >> 36;
        if (!(a6 >> 36))
        {
          a7 = a6 & 0xFFFFFFFFFLL;
          if ((a6 & 0xFFFFFFFFFLL) != 0)
          {
            v24 = *(unsigned __int8 *)(a6 + 5);
            if (v24 != 2)
            {
              v20 = JSC::speculatedTypeMapping[v24];
              goto LABEL_30;
            }
            a6 = *(_QWORD *)(a6 + 8);
            if (!a6)
              goto LABEL_70;
            v20 = 805306368;
            if ((a6 & 1) != 0)
              goto LABEL_30;
            if (a6 < v11)
            {
LABEL_84:
              v20 = 0;
              goto LABEL_30;
            }
            v20 = 0;
            a7 = a6 >> 36;
            if (!(a6 >> 36))
            {
              a7 = a6 & 0xFFFFFFFFFLL;
              if ((a6 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(a6 + 16) & 0x10) != 0)
                {
                  v20 = 0x10000000;
                  goto LABEL_30;
                }
LABEL_70:
                v20 = 805306368;
              }
            }
          }
        }
      }
LABEL_30:
      *(v15 - 2) = 0;
      if (!v17)
        goto LABEL_20;
LABEL_31:
      if (v17 >= 0xFFFE000000000000)
      {
        if ((v17 & 0xFFFFFFFE) != 0)
          a6 = 0x200000000;
        else
          a6 = 0x100000000;
        goto LABEL_39;
      }
      if (v17 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        a2 = (int8x8_t)(v17 - 0x2000000000000);
        v28 = (uint64_t)COERCE_DOUBLE(v17 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 == *(double *)&a2)
        {
          if (v28)
          {
            if (!((unint64_t)(v28 + 0x8000000000000) >> 52))
              goto LABEL_77;
          }
          else if ((uint64_t)v17 >= 0x2000000000000)
          {
LABEL_77:
            a6 = 0x1000000000;
            goto LABEL_39;
          }
        }
        a6 = 0x2000000000;
      }
      else
      {
        if ((v17 & 0xFFFE000000000002) != 0)
        {
          if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 6)
            a6 = 0x10000000000;
          else
            a6 = 0x20000000000;
          goto LABEL_39;
        }
        if (v11 > v17)
        {
LABEL_85:
          a6 = 0;
          goto LABEL_39;
        }
        a6 = 0;
        a7 = v17 >> 36;
        if (v17 >> 36)
          goto LABEL_39;
        a7 = v17 & 0xFFFFFFFFFLL;
        if ((v17 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_39;
        v25 = *(unsigned __int8 *)(v17 + 5);
        if (v25 == 2)
        {
          v26 = *(_QWORD *)(v17 + 8);
          if (!v26)
            goto LABEL_71;
          a6 = 805306368;
          if ((v26 & 1) == 0)
          {
            if (v26 < v11)
              goto LABEL_85;
            a6 = 0;
            a7 = v26 >> 36;
            if (v26 >> 36)
              goto LABEL_39;
            a7 = v26 & 0xFFFFFFFFFLL;
            if ((v26 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_39;
            if ((*(_BYTE *)(v26 + 16) & 0x10) == 0)
            {
LABEL_71:
              a6 = 805306368;
              goto LABEL_39;
            }
            a6 = 0x10000000;
          }
        }
        else
        {
          a6 = JSC::speculatedTypeMapping[v25];
        }
      }
LABEL_39:
      v20 |= a6;
      *(v15 - 1) = 0;
LABEL_20:
      v21 = v19 | v20;
      *v15 = v21;
      v22 = *(unsigned int **)(v8 + 184);
      if (v14 >= *v22)
      {
        __break(0xC471u);
        JUMPOUT(0x19816C288);
      }
      a4 = (uint64_t)&v22[2 * v14];
      a5 = *(_QWORD *)(a4 + 8);
      v23 = a5 | v21;
      *v15 = v23;
      v15 += 3;
      *(_QWORD *)(a4 + 8) = v23;
      ++v14;
    }
  }
  while (1)
  {
    v16 = v10 ? (void *)*v10 : 0;
    if (v14 >= (unint64_t)v16)
      break;
    if (v14 >= *v10)
    {
LABEL_348:
      __break(0xC471u);
      JUMPOUT(0x19816CC20);
    }
    a6 = *(v15 - 2);
    a5 = *(v15 - 1);
    if (a5)
      v30 = (a6 != 0) + 1;
    else
      v30 = a6 != 0;
    v31 = *v15;
    if (*v15)
      a7 = 0xFFFFFFFFLL;
    else
      a7 = 0;
    if (v30 == (_DWORD)a7)
      v13 = v13;
    else
      v13 = (v13 + 1);
    if (!a6)
    {
      a4 = 0;
      if (!a5)
        goto LABEL_102;
      goto LABEL_112;
    }
    if (a6 >= 0xFFFE000000000000)
    {
      if ((a6 & 0xFFFFFFFE) != 0)
        a4 = 0x200000000;
      else
        a4 = 0x100000000;
    }
    else if (a6 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a2 = (int8x8_t)(a6 - 0x2000000000000);
      v34 = (uint64_t)COERCE_DOUBLE(a6 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 != *(double *)&a2)
        goto LABEL_148;
      if (v34)
      {
        if ((unint64_t)(v34 + 0x8000000000000) >> 52)
          goto LABEL_148;
      }
      else if ((uint64_t)a6 < 0x2000000000000)
      {
LABEL_148:
        a4 = 0x2000000000;
        goto LABEL_111;
      }
      a4 = 0x1000000000;
    }
    else if ((a6 & 0xFFFE000000000002) != 0)
    {
      if ((a6 & 0xFFFFFFFFFFFFFFFELL) == 6)
        a4 = 0x10000000000;
      else
        a4 = 0x20000000000;
    }
    else
    {
      if (v11 > a6)
        goto LABEL_386;
      a4 = 0;
      a7 = a6 >> 36;
      if (!(a6 >> 36))
      {
        a7 = a6 & 0xFFFFFFFFFLL;
        if ((a6 & 0xFFFFFFFFFLL) != 0)
        {
          v32 = *(unsigned __int8 *)(a6 + 5);
          if (v32 != 2)
          {
            a4 = JSC::speculatedTypeMapping[v32];
            goto LABEL_111;
          }
          a6 = *(_QWORD *)(a6 + 8);
          if (!a6)
            goto LABEL_340;
          a4 = 805306368;
          if ((a6 & 1) != 0)
            goto LABEL_111;
          if (a6 < v11)
          {
LABEL_386:
            a4 = 0;
            goto LABEL_111;
          }
          a4 = 0;
          a7 = a6 >> 36;
          if (!(a6 >> 36))
          {
            a7 = a6 & 0xFFFFFFFFFLL;
            if ((a6 & 0xFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)(a6 + 16) & 0x10) != 0)
              {
                a4 = 0x10000000;
                goto LABEL_111;
              }
LABEL_340:
              a4 = 805306368;
            }
          }
        }
      }
    }
LABEL_111:
    *(v15 - 2) = 0;
    if (!a5)
      goto LABEL_102;
LABEL_112:
    if (a5 >= 0xFFFE000000000000)
    {
      if ((a5 & 0xFFFFFFFE) != 0)
        a6 = 0x200000000;
      else
        a6 = 0x100000000;
      goto LABEL_120;
    }
    if (a5 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a2 = (int8x8_t)(a5 - 0x2000000000000);
      v35 = (uint64_t)COERCE_DOUBLE(a5 - 0x2000000000000);
      if ((double)*(uint64_t *)&a2 == *(double *)&a2)
      {
        if (v35)
        {
          a5 = (unint64_t)(v35 + 0x8000000000000) >> 52;
          if (!a5)
            goto LABEL_347;
        }
        else if ((uint64_t)a5 >= 0x2000000000000)
        {
LABEL_347:
          a6 = 0x1000000000;
          goto LABEL_120;
        }
      }
      a6 = 0x2000000000;
    }
    else
    {
      if ((a5 & 0xFFFE000000000002) != 0)
      {
        a5 &= ~1uLL;
        if (a5 == 6)
          a6 = 0x10000000000;
        else
          a6 = 0x20000000000;
        goto LABEL_120;
      }
      if (v11 > a5)
      {
LABEL_387:
        a6 = 0;
        goto LABEL_120;
      }
      a6 = 0;
      a7 = a5 >> 36;
      if (a5 >> 36)
        goto LABEL_120;
      a7 = a5 & 0xFFFFFFFFFLL;
      if ((a5 & 0xFFFFFFFFFLL) == 0)
        goto LABEL_120;
      v33 = *(unsigned __int8 *)(a5 + 5);
      if (v33 == 2)
      {
        a5 = *(_QWORD *)(a5 + 8);
        if (!a5)
          goto LABEL_341;
        a6 = 805306368;
        if ((a5 & 1) == 0)
        {
          if (a5 < v11)
            goto LABEL_387;
          a6 = 0;
          a7 = a5 >> 36;
          if (a5 >> 36)
            goto LABEL_120;
          a7 = a5 & 0xFFFFFFFFFLL;
          if ((a5 & 0xFFFFFFFFFLL) == 0)
            goto LABEL_120;
          a5 = *(unsigned __int8 *)(a5 + 16);
          if ((a5 & 0x10) == 0)
          {
LABEL_341:
            a6 = 805306368;
            goto LABEL_120;
          }
          a6 = 0x10000000;
        }
      }
      else
      {
        a6 = JSC::speculatedTypeMapping[v33];
      }
    }
LABEL_120:
    a4 |= a6;
    *(v15 - 1) = 0;
LABEL_102:
    *v15 = v31 | a4;
    v15 += 3;
    ++v14;
  }
LABEL_151:
  v36 = *((_QWORD *)v7 + 17);
  if (v36)
  {
    v149 = v7;
    v37 = *(_QWORD *)(v36 - 16);
    do
      v38 = __ldaxr((unsigned int *)v37);
    while (__stlxr(v38 + 1, (unsigned int *)v37));
    v39 = -*(_DWORD *)(v37 + 8);
    do
    {
      v40 = __ldaxr((unsigned int *)v37);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, (unsigned int *)v37));
    if (!v41)
    {
      v129 = v9;
      atomic_store(1u, (unsigned int *)v37);
      if ((*(_BYTE *)(v37 + 4) & 1) != 0)
        WTF::fastFree(*(_QWORD *)(v37 + 16), v16, a4, a5, a6, a7, v9, (uint64_t)JSC::speculatedTypeMapping);
      WTF::fastFree(v37, v16, a4, a5, a6, a7, v9, (uint64_t)v12);
      v9 = v129;
    }
    if (v39 < 0)
    {
      v119 = 0;
      v42 = 0;
      v120 = (unint64_t *)(v36 - 32);
      do
      {
        v121 = *v120;
        v122 = v120[1];
        v123 = v122 | *v120;
        if (v123)
          v13 = (v13 + 1);
        else
          v13 = v13;
        if (v123)
        {
          v42 = (v42 + 1);
          if (v121)
          {
            v124 = v42;
            v125 = v9;
            v121 = JSC::speculationFromValue(v121);
            v9 = v125;
            v42 = v124;
            *v120 = 0;
          }
        }
        else
        {
          v122 = 0;
          v121 = 0;
        }
        v120[1] = v121 | v122;
        if ((v9 & 1) == 0)
        {
          v126 = *(_DWORD **)(v8 + 184);
          if (*v126 <= v14)
          {
            __break(0xC471u);
            JUMPOUT(0x19816CC60);
          }
          v127 = &v126[2 * v14];
          v128 = *((_QWORD *)v127 + 1) | v121 | v122;
          v120[1] = v128;
          *((_QWORD *)v127 + 1) = v128;
        }
        LODWORD(v14) = v14 + 1;
        --v119;
        v120 -= 2;
      }
      while (v119 > v39);
    }
    else
    {
      v42 = 0;
    }
    v7 = v149;
    v43 = *((_QWORD *)v149 + 17);
    if (v43)
    {
      v44 = *(unsigned __int16 *)(v43 + 30);
      if (!*(_WORD *)(v43 + 30))
        v44 = *(_DWORD *)(v43 + 156);
      v45 = (unsigned int **)((v43 + v44 + 7) & 0xFFFFFFFFFFFFFFF8);
      v46 = *(unsigned __int16 *)(v43 + 32);
      if (!*(_WORD *)(v43 + 32))
        v46 = *(_DWORD *)(v43 + 160);
      v47 = v43 + v46;
      if (v47 > (unint64_t)v45)
      {
        while (1)
        {
          v48 = *v45;
          if (*v45)
          {
            v49 = *v48;
            if ((_DWORD)v49)
              break;
          }
LABEL_195:
          if ((unint64_t)++v45 >= v47)
            goto LABEL_204;
        }
        v50 = qword_1ECF4C080;
        v51 = v48 + 4;
        while (2)
        {
          v53 = *(v51 - 1);
          if (!v53)
          {
            v52 = 0;
            goto LABEL_169;
          }
          if (v53 >= 0xFFFE000000000000)
          {
            if ((v53 & 0xFFFFFFFE) != 0)
              v52 = 0x200000000;
            else
              v52 = 0x100000000;
            goto LABEL_179;
          }
          if (v53 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v53 & 0xFFFE000000000002) != 0)
            {
              if ((v53 & 0xFFFFFFFFFFFFFFFELL) == 6)
                v52 = 0x10000000000;
              else
                v52 = 0x20000000000;
            }
            else
            {
              if (v50 > v53)
                goto LABEL_385;
              v52 = 0;
              if (v53 >> 36 || (v53 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_179;
              v54 = *(unsigned __int8 *)(v53 + 5);
              if (v54 != 2)
              {
                v52 = JSC::speculatedTypeMapping[v54];
                goto LABEL_179;
              }
              v55 = *(_QWORD *)(v53 + 8);
              if (!v55)
                goto LABEL_197;
              v52 = 805306368;
              if ((v55 & 1) != 0)
                goto LABEL_179;
              if (v55 < v50)
              {
LABEL_385:
                v52 = 0;
                goto LABEL_179;
              }
              v52 = 0;
              if (!(v55 >> 36) && (v55 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v55 + 16) & 0x10) != 0)
                {
                  v52 = 0x10000000;
                  goto LABEL_179;
                }
LABEL_197:
                v52 = 805306368;
              }
            }
LABEL_179:
            *(v51 - 1) = 0;
LABEL_169:
            *v51 |= v52;
            v51 += 3;
            if (!--v49)
              goto LABEL_195;
            continue;
          }
          break;
        }
        a2 = (int8x8_t)(v53 - 0x2000000000000);
        v56 = (uint64_t)COERCE_DOUBLE(v53 - 0x2000000000000);
        if ((double)*(uint64_t *)&a2 != *(double *)&a2)
        {
LABEL_194:
          v52 = 0x2000000000;
          goto LABEL_179;
        }
        if (v56)
        {
          if ((unint64_t)(v56 + 0x8000000000000) >> 52)
            goto LABEL_194;
        }
        else if ((uint64_t)v53 < 0x2000000000000)
        {
          goto LABEL_194;
        }
        v52 = 0x1000000000;
        goto LABEL_179;
      }
    }
  }
  else
  {
    v42 = 0;
  }
LABEL_204:
  JSC::CompressedLazyValueProfileHolder::computeUpdatedPredictions((uint64_t)v7 + 144, a2, (uint64_t)&v154, (uint64_t)v7);
  v58 = *((_QWORD *)v7 + 17);
  if (v58)
  {
    v59 = *(unsigned __int16 *)(v58 + 60);
    if (!*(_WORD *)(v58 + 60))
      v59 = *(_DWORD *)(v58 + 216);
    v60 = (unint64_t *)((v58 + v59 + 7) & 0xFFFFFFFFFFFFFFF8);
    v61 = *(unsigned __int16 *)(v58 + 62);
    if (!*(_WORD *)(v58 + 62))
      v61 = *(_DWORD *)(v58 + 220);
    for (i = v58 + v61; (unint64_t)v60 < i; ++v60)
    {
      v63 = *v60;
      *v60 &= 0xFFFF000000000000;
      if ((v63 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v65 = HIBYTE(v63) & 0xF;
        v66 = *(_BYTE *)((v63 & 0xFFFFFFFFFFFFLL) + 4);
        if (v65 <= (v66 & 0xFu))
          LODWORD(v65) = v66 & 0xF;
        if (v65 >= 0xA)
          v67 = 9;
        else
          v67 = v65;
        v68 = v67 | 0x10;
        if ((v63 & 0x1000000000000000) != 0)
          v69 = v68;
        else
          v69 = v65;
        if ((*(_BYTE *)((v63 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v70 = *(_DWORD *)(*(_QWORD *)((v63 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v70 = 0;
        LODWORD(v63) = BYTE6(v63);
        if (BYTE6(v63) <= v70)
          LODWORD(v63) = v70;
        if (v63 >= 0x19)
          LODWORD(v63) = 25;
        *v60 = (unint64_t)(v63 | (v69 << 8)) << 48;
      }
    }
    v71 = *(unsigned __int16 *)(v58 + 32);
    if (!*(_WORD *)(v58 + 32))
      v71 = *(_DWORD *)(v58 + 160);
    v72 = (unint64_t *)((v58 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
    v73 = *(unsigned __int16 *)(v58 + 34);
    v74 = v73;
    if (!*(_WORD *)(v58 + 34))
      v74 = *(_DWORD *)(v58 + 164);
    for (j = v58 + v74; (unint64_t)v72 < j; ++v72)
    {
      v76 = *v72;
      *v72 &= 0xFFFF000000000000;
      if ((v76 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v78 = HIBYTE(v76) & 0xF;
        v79 = *(_BYTE *)((v76 & 0xFFFFFFFFFFFFLL) + 4);
        if (v78 <= (v79 & 0xFu))
          LODWORD(v78) = v79 & 0xF;
        if (v78 >= 0xA)
          v80 = 9;
        else
          v80 = v78;
        v81 = v80 | 0x10;
        if ((v76 & 0x1000000000000000) != 0)
          v82 = v81;
        else
          v82 = v78;
        if ((*(_BYTE *)((v76 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v83 = *(_DWORD *)(*(_QWORD *)((v76 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v83 = 0;
        LODWORD(v76) = BYTE6(v76);
        if (BYTE6(v76) <= v83)
          LODWORD(v76) = v83;
        if (v76 >= 0x19)
          LODWORD(v76) = 25;
        *v72 = (unint64_t)(v76 | (v82 << 8)) << 48;
      }
    }
    v84 = *(unsigned __int16 *)(v58 + 44);
    if (!*(_WORD *)(v58 + 44))
      v84 = *(_DWORD *)(v58 + 184);
    v85 = (unint64_t *)((v58 + v84 + 7) & 0xFFFFFFFFFFFFFFF8);
    v86 = *(unsigned __int16 *)(v58 + 46);
    if (!*(_WORD *)(v58 + 46))
      v86 = *(_DWORD *)(v58 + 188);
    for (k = v58 + v86; (unint64_t)v85 < k; v85 += 3)
    {
      v88 = *v85;
      *v85 &= 0xFFFF000000000000;
      if ((v88 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v90 = HIBYTE(v88) & 0xF;
        v91 = *(_BYTE *)((v88 & 0xFFFFFFFFFFFFLL) + 4);
        if (v90 <= (v91 & 0xFu))
          LODWORD(v90) = v91 & 0xF;
        if (v90 >= 0xA)
          v92 = 9;
        else
          v92 = v90;
        v93 = v92 | 0x10;
        if ((v88 & 0x1000000000000000) != 0)
          v94 = v93;
        else
          v94 = v90;
        if ((*(_BYTE *)((v88 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v95 = *(_DWORD *)(*(_QWORD *)((v88 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v95 = 0;
        LODWORD(v88) = BYTE6(v88);
        if (BYTE6(v88) <= v95)
          LODWORD(v88) = v95;
        if (v88 >= 0x19)
          LODWORD(v88) = 25;
        *v85 = (unint64_t)(v88 | (v94 << 8)) << 48;
      }
    }
    if (!v73)
      v73 = *(_DWORD *)(v58 + 164);
    v96 = (unint64_t *)((v58 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
    v97 = *(unsigned __int16 *)(v58 + 36);
    if (!*(_WORD *)(v58 + 36))
      v97 = *(_DWORD *)(v58 + 168);
    for (m = v58 + v97; (unint64_t)v96 < m; ++v96)
    {
      v99 = *v96;
      *v96 &= 0xFFFF000000000000;
      if ((v99 & 0xFFFFFFFFFFFFLL) != 0 && byte_1ECF4C722 != 0)
      {
        v101 = HIBYTE(v99) & 0xF;
        v102 = *(_BYTE *)((v99 & 0xFFFFFFFFFFFFLL) + 4);
        if (v101 <= (v102 & 0xFu))
          LODWORD(v101) = v102 & 0xF;
        if (v101 >= 0xA)
          v103 = 9;
        else
          v103 = v101;
        v104 = v103 | 0x10;
        if ((v99 & 0x1000000000000000) != 0)
          v105 = v104;
        else
          v105 = v101;
        if ((*(_BYTE *)((v99 & 0xFFFFFFFFFFFFLL) + 4) & 0xE) != 0)
          v106 = *(_DWORD *)(*(_QWORD *)((v99 & 0xFFFFFFFFFFFFLL) + 8) - 4);
        else
          v106 = 0;
        LODWORD(v99) = BYTE6(v99);
        if (BYTE6(v99) <= v106)
          LODWORD(v99) = v106;
        if (v99 >= 0x19)
          LODWORD(v99) = 25;
        *v96 = (unint64_t)(v99 | (v105 << 8)) << 48;
      }
    }
  }
  JSC::CodeBlock::updateAllArrayProfilePredictions(v7, v57);
  v151 = 1.0;
  v108 = *(unsigned int **)(*((_QWORD *)v7 + 7) + 184);
  v109 = v108 ? *v108 : 0;
  v110 = (int *)*((_QWORD *)v7 + 19);
  v111 = v110 ? *v110 : 0;
  if (v109 == v111)
  {
    v114 = 1.0;
  }
  else
  {
    v112 = v108 ? *v108 : 0;
    v113 = v110 ? *v110 : 0;
    v114 = (double)v42 / (double)(v112 - v113);
    v151 = v114;
  }
  v150 = 1.0;
  if (v108)
  {
    v115 = *v108;
    if (*v108)
    {
      v116 = (double)v13 / (double)v115;
      v150 = v116;
    }
    else
    {
      v116 = 1.0;
    }
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_319;
  }
  else
  {
    v116 = 1.0;
    if (!BYTE1(qword_1ECF4C332))
      goto LABEL_319;
    v115 = 0;
  }
  if (v110)
    v145 = *v110;
  else
    v145 = 0;
  if (v108)
    v146 = *v108;
  else
    v146 = 0;
  if (v110)
    LODWORD(v110) = *v110;
  v147 = v116;
  v148 = v114;
  WTF::dataLogF((WTF *)"Profile hotness: %lf (%u / %u), %lf (%u / %u)\n", v107, *(_QWORD *)&v114, v42, v115 - v145, *(_QWORD *)&v116, v13, v146 - v110);
  v116 = v147;
  v114 = v148;
LABEL_319:
  v117 = v114 < *(double *)&xmmword_1ECF4C548 || v116 < *((double *)&xmmword_1ECF4C548 + 1);
  if (!v117 && *((unsigned __int16 *)v7 + 52) + 1 >= HIDWORD(xmmword_1ECF4C534))
    return 1;
  v118 = *(JSC::Profiler::Database **)(*((_QWORD *)v7 + 9) + 93016);
  if (v118)
  {
    v130 = *(int **)(*((_QWORD *)v7 + 7) + 184);
    if (v130)
      v131 = *v130;
    else
      v131 = 0;
    v132 = (_DWORD *)*((_QWORD *)v7 + 19);
    if (v132)
      LODWORD(v132) = *v132;
    v153 = v131 - (_DWORD)v132;
    if (v130)
      LODWORD(v130) = *v130;
    v152 = (int)v130;
    WTF::toCString<char [25],double,char [4],double,char [7],unsigned int,char [2],unsigned int>((uint64_t *)&v154, &v151, &v150, &v153, &v152);
    JSC::Profiler::Database::logEvent(v118, (uint64_t)v7, "delayOptimizeToDFG", &v154, v133, v134, v135, v136);
    v144 = v154;
    v154 = 0;
    if (v144)
    {
      if (*(_DWORD *)v144 == 1)
        WTF::fastFree((unint64_t)v144, v137, v138, v139, v140, v141, v142, v143);
      else
        --*(_DWORD *)v144;
    }
  }
  ++*((_WORD *)v7 + 52);
  JSC::CodeBlock::optimizeAfterWarmUp((uint64_t)v7, v114);
  return 0;
}

void JSC::CodeBlock::notifyLexicalBindingUpdate(JSC::CodeBlock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  unsigned int *v26;
  unint64_t v27;
  unsigned int *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  char v37;
  _BOOL4 v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v48 = *((_QWORD *)this + 1);
  v50 = *(_QWORD *)(*(_QWORD *)(v48 + 72) + 24);
  v9 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
LABEL_5:
  v47 = v9;
  v49 = *(uint64_t **)(*((_QWORD *)this + 7) + 80);
  v11 = *((_DWORD *)v49 + 3);
  if (v11)
  {
    v12 = 0;
    v13 = (unsigned __int8 *)(v50 + 20);
    v14 = *v49;
    do
    {
      v15 = (unsigned __int8 *)(v14 + v12);
      v16 = *v15;
      v17 = v16;
      if ((v16 | 2) == 0x82)
        v17 = v15[1];
      v18 = v12;
      if (v17 != 25)
        goto LABEL_40;
      if (v16 == 128)
      {
        v19 = *((unsigned __int16 *)v15 + 3);
        v20 = *((unsigned __int16 *)v15 + 6);
      }
      else if (v16 == 130)
      {
        v19 = *(unsigned int *)(v15 + 10);
        v20 = *(unsigned int *)(v15 + 22);
      }
      else
      {
        v19 = v15[3];
        v20 = v15[6];
      }
      v21 = *((_QWORD *)this + 17);
      v22 = *(unsigned __int16 *)(v21 + 50);
      if (!*(_WORD *)(v21 + 50))
        v22 = *(_DWORD *)(v21 + 196);
      v23 = (v21 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = *(_DWORD *)(v23 + 16 * v20);
      if (v24 != 6 && v24 != 0)
        goto LABEL_40;
      v26 = *(unsigned int **)(*((_QWORD *)this + 7) + 104);
      if (v26)
      {
        v27 = *v26;
        if (v27 > v19)
        {
          v28 = &v26[2 * v19];
          goto LABEL_26;
        }
      }
      else
      {
        LODWORD(v27) = 0;
      }
      v29 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 72))(*((_QWORD *)this + 15))
                       + 48);
      if (*v29 <= (v19 - v27))
      {
        __break(0xC471u);
        return;
      }
      v28 = &v29[2 * (v19 - v27)];
LABEL_26:
      v30 = *((_QWORD *)v28 + 1);
      if (__ldaxr(v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v13))
      {
        goto LABEL_30;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_30:
      v32 = *(_QWORD *)(v50 + 8);
      if (v32)
      {
        v41 = *(_DWORD *)(v30 + 16);
        if ((v41 & 0x20) != 0)
          v41 = *(_DWORD *)(v30 + 32);
        v42 = *(_DWORD *)(v32 - 8);
        v43 = v42 & (v41 >> 8);
        v44 = *(_QWORD *)(v32 + 16 * v43);
        if (v44 == v30)
        {
          v33 = 1;
        }
        else
        {
          v45 = 1;
          do
          {
            v33 = v44 != 0;
            if (!v44)
              break;
            v43 = (v43 + v45) & v42;
            v44 = *(_QWORD *)(v32 + 16 * v43);
            ++v45;
          }
          while (v44 != v30);
        }
      }
      else
      {
        v33 = 0;
      }
      v34 = __ldxr(v13);
      if (v34 == 1)
      {
        if (!__stlxr(0, v13))
        {
          if (!v33)
            goto LABEL_38;
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
      if (!v33)
      {
LABEL_38:
        v35 = *(_DWORD *)(v48 + 3176);
        goto LABEL_39;
      }
LABEL_35:
      v35 = 0;
LABEL_39:
      *(_DWORD *)(v23 + 16 * v20 + 4) = v35;
      v14 = *v49;
      v16 = *(unsigned __int8 *)(*v49 + v18);
LABEL_40:
      v36 = v16;
      if ((v16 | 2) == 0x82)
        v36 = *(unsigned __int8 *)(v14 + v18 + 1);
      v37 = v16 == 128;
      if (v16 == 130)
        v37 = 2;
      v38 = v16 == 128 || v16 == 130;
      v39 = JSC::opcodeLengths[v36] << v37;
      if (v38)
        v40 = 2;
      else
        v40 = 1;
      v12 = v40 + v18 + v39;
    }
    while (v12 != v11);
  }
  v46 = __ldxr(v47);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_66;
  }
  if (__stlxr(0, v47))
LABEL_66:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v47, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::CodeBlock::stackPointerOffset(JSC::CodeBlock *this, JSC::CodeBlock *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 12);
    if (v3 == 3)
    {
      v4 = (((*(_DWORD *)(*((_QWORD *)this + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
      return -v4;
    }
    if ((v3 - 4) < 2)
    {
      v5 = (unsigned int *)(v2 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      v4 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2) + 200);
      do
      {
        v7 = __ldaxr(v5);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v5));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)(v2 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
      }
      return -v4;
    }
    if (v3 == 2)
    {
      v4 = JSC::LLInt::frameRegisterCountFor(this, a2);
      return -v4;
    }
  }
  result = 3046;
  __break(0xC471u);
  return result;
}

unint64_t JSC::CodeBlock::predictedMachineCodeSize(JSC::CodeBlock *this)
{
  uint64_t v1;
  double *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  unint64_t v8;
  double v9;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(double **)(v1 + 64752);
  v3 = *v2;
  if (*v2 == 0.0)
    return 0;
  v4 = v2[1] / v3;
  if (v3 < 2.0)
  {
    v5 = 0.0;
  }
  else
  {
    v5 = v2[2] / v3 - v4 * v4;
    if (v5 <= 0.0)
      v5 = 0.0;
  }
  v6 = v4 + sqrt(v5);
  if (v6 < 0.0)
    return 0;
  HIDWORD(v8) = 1083129856;
  if (v6 > 1000.0)
    return 0;
  LODWORD(v8) = *((_DWORD *)this + 11);
  v9 = v6 * (double)v8;
  if (v9 >= 1.84467441e19)
    return 0;
  else
    return (unint64_t)v9;
}

void JSC::CodeBlock::nameForRegister(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  int v21;
  int v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v30;
  _DWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  void (**v46)(WTF::StringPrintStream *__hidden);
  WTF *v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v45 = a2;
  v10 = *(unsigned int *)(a1 + 172);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a1 + 160);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      if (*v11)
        v14 = (*v11 & 0xFFFE000000000002) == 0;
      else
        v14 = 0;
      if (!v14
        || &JSC::SymbolTable::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_26;
      }
      v15 = (unsigned __int8 *)(v13 + 20);
      if (__ldaxr((unsigned __int8 *)(v13 + 20)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v15))
      {
        goto LABEL_13;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 20);
LABEL_13:
      v17 = *(_QWORD *)(v13 + 8);
      if (v17 && *(_DWORD *)(v17 - 12))
      {
        v18 = *(unsigned int *)(v17 - 4);
        if ((_DWORD)v18)
        {
          v19 = 16 * v18;
          v20 = *(unint64_t **)(v13 + 8);
          while (*v20 + 1 <= 1)
          {
            v20 += 2;
            v19 -= 16;
            if (!v19)
              goto LABEL_19;
          }
        }
        else
        {
          v20 = *(unint64_t **)(v13 + 8);
        }
        v23 = (unint64_t *)(v17 + 16 * v18);
        if (v20 != v23)
        {
          if (v45 == 0x3FFFFFFF)
            v24 = -1;
          else
            v24 = v45;
          if (v45 == 0x3FFFFFFF)
          {
            while (1)
            {
              v20 += 2;
              if (v20 == v23)
                break;
              if (*v20 + 1 > 1)
              {
                v21 = 1;
                if (v20 == v23)
                  goto LABEL_20;
              }
            }
          }
          else
          {
            v25 = v20 + 1;
            if ((v20[1] & 1) == 0)
              v25 = (unint64_t *)v20[1];
            v26 = *v25;
            v27 = v26 & 0x30;
            v28 = v26 >> 6;
            if (v27 == 32 && v45 == (_DWORD)v28)
            {
              v31 = (_DWORD *)*v20;
LABEL_59:
              if (v31)
                *v31 += 2;
              v21 = 0;
              *a9 = (uint64_t)v31;
              goto LABEL_20;
            }
            while (v20 + 2 != v23)
            {
              v30 = v20 + 3;
              while (1)
              {
                v31 = (_DWORD *)*(v30 - 1);
                if ((unint64_t)v31 + 1 > 1)
                  break;
                v32 = v30 + 1;
                v30 += 2;
                if (v32 == v23)
                  goto LABEL_19;
              }
              v20 = v30 - 1;
              if (v30 - 1 == v23)
                break;
              if ((*v30 & 1) == 0)
                v30 = (unint64_t *)*v30;
              v33 = *v30;
              v34 = v33 & 0x30;
              v35 = v33 >> 6;
              if (v34 == 32 && v24 == (_DWORD)v35)
                goto LABEL_59;
            }
          }
        }
      }
LABEL_19:
      v21 = 1;
LABEL_20:
      v22 = __ldxr(v15);
      if (v22 != 1)
      {
        __clrex();
LABEL_25:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v15, 0, a3, a4, a5, a6, a7, a8);
        if (!v21)
          return;
        goto LABEL_26;
      }
      if (__stlxr(0, v15))
        goto LABEL_25;
      if (!v21)
        return;
LABEL_26:
      ++v11;
    }
    while (v11 != v12);
  }
  v46 = off_1E3572250;
  v47 = (WTF *)v49;
  v48 = xmmword_199122F80;
  v49[0] = 0;
  JSC::VirtualRegister::dump(&v45, (WTF::PrintStream *)&v46);
  v46[5]((WTF::StringPrintStream *)&v46);
  v44 = v47;
  if (!v47)
  {
    *a9 = 0;
    goto LABEL_66;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v47, v48, a9);
  v44 = v47;
  if (v47 != (WTF *)v49)
LABEL_66:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t JSC::CodeBlock::tryGetValueProfileForBytecodeIndex(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  char v3;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int8x16_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v3 = a2;
  v5 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a2 >> 2));
  v6 = *v5;
  v7 = v6;
  if ((v6 | 2) == 0x82)
    v7 = v5[1];
  v8 = 0;
  switch(v7)
  {
    case 1:
      v16 = *(_QWORD *)(a1 + 136);
      JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)v5, &v20, a3);
      goto LABEL_33;
    case 2:
      v13 = *(_QWORD *)(a1 + 136);
      JSC::OpIteratorNext::decode(v5, (uint64_t)&v20, a3);
      v14 = v3 & 3;
      if ((v3 & 3) == 0)
        goto LABEL_39;
      if (v14 == 2)
      {
        v15 = (unsigned int *)&v24;
        return v13 - 16 - 16 * *v15;
      }
      if (v14 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19816D88CLL);
      }
      goto LABEL_42;
    case 3:
      v16 = *(_QWORD *)(a1 + 136);
      JSC::OpConstructVarargs::decode((int *)v5, (uint64_t)&v20, a3);
LABEL_33:
      v17 = v22;
      return v16 - 16 * v17 - 16;
    case 4:
      v13 = *(_QWORD *)(a1 + 136);
      JSC::OpIteratorOpen::decode(v5, (uint32x4_t *)&v20, a3);
      if ((v3 & 3) != 0)
      {
        if ((v3 & 3) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19816D840);
        }
LABEL_42:
        v15 = &v23;
      }
      else
      {
LABEL_39:
        v15 = &v22;
      }
      return v13 - 16 - 16 * *v15;
    case 8:
    case 23:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 128)
        goto LABEL_37;
      if (v6 != 130)
        goto LABEL_11;
LABEL_53:
      v10 = *(_DWORD *)(v5 + 18);
      return v9 - 16 * v10;
    case 10:
      v16 = *(_QWORD *)(a1 + 136);
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCallDirectEval>(v5, (int8x8_t *)&v20);
      v17 = v23;
      return v16 - 16 * v17 - 16;
    case 18:
    case 22:
    case 32:
    case 45:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 128)
        goto LABEL_24;
      if (v6 != 130)
        goto LABEL_6;
LABEL_51:
      v10 = *(_DWORD *)(v5 + 14);
      return v9 - 16 * v10;
    case 19:
    case 42:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 128)
        goto LABEL_21;
      if (v6 != 130)
        goto LABEL_17;
LABEL_52:
      v10 = *(_DWORD *)(v5 + 10);
      return v9 - 16 * v10;
    case 26:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 128)
      {
        v10 = *((unsigned __int16 *)v5 + 7);
      }
      else if (v6 == 130)
      {
        v10 = *(_DWORD *)(v5 + 26);
      }
      else
      {
        v10 = v5[7];
      }
      return v9 - 16 * v10;
    case 31:
      v18 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 130)
      {
        v19 = *(_DWORD *)(v5 + 18);
      }
      else if (v6 == 128)
      {
        JSC::OpGetByValWithThis::OpGetByValWithThis(v20.i32, (const unsigned __int16 *)v5 + 1);
        v19 = v21;
      }
      else
      {
        v19 = v5[5];
      }
      return v18 - 16 * v19;
    case 34:
    case 44:
    case 48:
    case 50:
    case 52:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 130)
        goto LABEL_51;
      if (v6 == 128)
LABEL_24:
        v10 = *((unsigned __int16 *)v5 + 4);
      else
LABEL_6:
        v10 = v5[4];
      return v9 - 16 * v10;
    case 43:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 130)
      {
        v22 = *(_DWORD *)(v5 + 26);
      }
      else if (v6 == 128)
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v20.i32, (const unsigned __int16 *)v5 + 1);
      }
      else
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v20.i32, v5 + 1);
      }
      return v12 - 16 * v22;
    case 47:
    case 49:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 130)
        goto LABEL_52;
      if (v6 == 128)
LABEL_21:
        v10 = *((unsigned __int16 *)v5 + 3);
      else
LABEL_17:
        v10 = v5[3];
      return v9 - 16 * v10;
    case 51:
      v9 = *(_QWORD *)(a1 + 136) - 16;
      if (v6 == 130)
        goto LABEL_53;
      if (v6 == 128)
LABEL_37:
        v10 = *((unsigned __int16 *)v5 + 5);
      else
LABEL_11:
        v10 = v5[5];
      return v9 - 16 * v10;
    default:
      return v8;
  }
}

unint64_t JSC::CodeBlock::valueProfilePredictionForBytecodeIndex(uint64_t a1, int8x8_t a2, uint64_t a3, unsigned int a4, unint64_t *a5)
{
  char v6;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint32x4_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;

  v6 = a4;
  v8 = (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a4 >> 2));
  v9 = *v8;
  v10 = v9;
  if ((v9 | 2) == 0x82)
    v10 = v8[1];
  v11 = 0;
  switch(v10)
  {
    case 1:
      v21 = *(_QWORD *)(a1 + 136);
      JSC::OpCallVarargs::decode((JSC::OpCallVarargs *)v8, (int8x16_t *)&v25, a2);
      goto LABEL_40;
    case 2:
      v18 = *(_QWORD *)(a1 + 136);
      JSC::OpIteratorNext::decode(v8, (uint64_t)&v25, a2);
      v19 = v6 & 3;
      if ((v6 & 3) == 0)
        goto LABEL_46;
      if (v19 == 2)
      {
        v20 = (unsigned int *)&v29;
        goto LABEL_47;
      }
      if (v19 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19816DCBCLL);
      }
      goto LABEL_49;
    case 3:
      v21 = *(_QWORD *)(a1 + 136);
      JSC::OpConstructVarargs::decode((int *)v8, (uint64_t)&v25, a2);
LABEL_40:
      v22 = v27;
      goto LABEL_41;
    case 4:
      v18 = *(_QWORD *)(a1 + 136);
      JSC::OpIteratorOpen::decode(v8, &v25, a2);
      if ((v6 & 3) != 0)
      {
        if ((v6 & 3) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19816DC5CLL);
        }
LABEL_49:
        v20 = &v28;
      }
      else
      {
LABEL_46:
        v20 = &v27;
      }
LABEL_47:
      v14 = (unint64_t *)(v18 - 16 - 16 * *v20);
LABEL_8:
      if (a5)
      {
        if (*a5)
          v14[1] |= JSC::speculationFromValue(*a5);
        *a5 = 0;
      }
      v15 = *v14;
      if (*v14)
      {
        v15 = JSC::speculationFromValue(v15);
        *v14 = 0;
      }
      v11 = v14[1] | v15;
      v14[1] = v11;
      return v11;
    case 8:
    case 23:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 128)
        goto LABEL_44;
      if (v9 != 130)
        goto LABEL_15;
LABEL_60:
      v13 = *(_DWORD *)(v8 + 18);
      goto LABEL_7;
    case 10:
      v21 = *(_QWORD *)(a1 + 136);
      JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpCallDirectEval>(v8, (int8x8_t *)&v25);
      v22 = v28;
LABEL_41:
      v14 = (unint64_t *)(v21 - 16 * v22 - 16);
      goto LABEL_8;
    case 18:
    case 22:
    case 32:
    case 45:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 128)
        goto LABEL_28;
      if (v9 != 130)
        goto LABEL_6;
LABEL_58:
      v13 = *(_DWORD *)(v8 + 14);
      goto LABEL_7;
    case 19:
    case 42:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 128)
        goto LABEL_25;
      if (v9 != 130)
        goto LABEL_21;
LABEL_59:
      v13 = *(_DWORD *)(v8 + 10);
      goto LABEL_7;
    case 26:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 128)
      {
        v13 = *((unsigned __int16 *)v8 + 7);
      }
      else if (v9 == 130)
      {
        v13 = *(_DWORD *)(v8 + 26);
      }
      else
      {
        v13 = v8[7];
      }
      goto LABEL_7;
    case 31:
      v23 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 130)
      {
        v24 = *(_DWORD *)(v8 + 18);
      }
      else if (v9 == 128)
      {
        JSC::OpGetByValWithThis::OpGetByValWithThis(v25.i32, (const unsigned __int16 *)v8 + 1);
        v24 = v26;
      }
      else
      {
        v24 = v8[5];
      }
      v14 = (unint64_t *)(v23 - 16 * v24);
      goto LABEL_8;
    case 34:
    case 44:
    case 48:
    case 50:
    case 52:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 130)
        goto LABEL_58;
      if (v9 == 128)
LABEL_28:
        v13 = *((unsigned __int16 *)v8 + 4);
      else
LABEL_6:
        v13 = v8[4];
      goto LABEL_7;
    case 43:
      v17 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 130)
      {
        v27 = *(_DWORD *)(v8 + 26);
      }
      else if (v9 == 128)
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v25.i32, (const unsigned __int16 *)v8 + 1);
      }
      else
      {
        JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal(v25.i32, v8 + 1);
      }
      v14 = (unint64_t *)(v17 - 16 * v27);
      goto LABEL_8;
    case 47:
    case 49:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 130)
        goto LABEL_59;
      if (v9 == 128)
LABEL_25:
        v13 = *((unsigned __int16 *)v8 + 3);
      else
LABEL_21:
        v13 = v8[3];
      goto LABEL_7;
    case 51:
      v12 = *(_QWORD *)(a1 + 136) - 16;
      if (v9 == 130)
        goto LABEL_60;
      if (v9 == 128)
LABEL_44:
        v13 = *((unsigned __int16 *)v8 + 5);
      else
LABEL_15:
        v13 = v8[5];
LABEL_7:
      v14 = (unint64_t *)(v12 - 16 * v13);
      goto LABEL_8;
    default:
      return v11;
  }
}

uint64_t JSC::CodeBlock::validate(JSC::CodeBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  int8x8_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  JSC::CodeBlock *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  char v27;
  _BOOL4 v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  int v35;
  char v36;
  _BOOL4 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  char v45;
  _BOOL4 v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _QWORD v54[2];

  JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>::computeImpl<JSC::CodeBlock>((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 7) + 80), v54);
  JSC::BytecodeLivenessPropagation::runLivenessFixpoint<JSC::CodeBlock,JSC::InstructionStream<JSC::BaseInstruction<JSC::JSOpcodeTraits>>>((uint64_t)this, *(_QWORD **)(*((_QWORD *)this + 7) + 80), (uint64_t)v54);
  if (BYTE2(dword_1ECF4C270))
    JSC::BytecodeLivenessAnalysis::dumpResults((JSC::BytecodeLivenessAnalysis *)v54, this);
  JSC::BytecodeLivenessAnalysis::getLivenessInfoAtInstruction((uint64_t)v54, (uint64_t)this, 0, v2, v3, &v52, v4);
  v12 = *((unsigned int *)this + 5);
  if (v53 != v12)
  {
    JSC::CodeBlock::beginValidationDidFail(this);
    WTF::dataLog<char [16]>("    Wrong number of bits in result!\n");
    WTF::dataLog<char [13],WTF::FastBitVector,char [2]>(&v52);
    v51 = v53;
    WTF::dataLog<char [16],unsigned long,char [2]>(&v51);
    goto LABEL_66;
  }
  if ((_DWORD)v12)
  {
    v13 = -(int)v12;
    v14 = v12 - 1;
    while (1)
    {
      LODWORD(v51) = v13;
      if (((*((_DWORD *)v52 + (v14 >> 5)) >> v14) & 1) != 0)
        break;
      --v14;
      if (__CFADD__(v13++, 1))
        goto LABEL_9;
    }
    JSC::CodeBlock::beginValidationDidFail(this);
    WTF::dataLog<char [14],JSC::VirtualRegister,char [26]>((unsigned int *)&v51);
    WTF::dataLog<char [13],WTF::FastBitVector,char [2]>(&v52);
LABEL_66:
    JSC::CodeBlock::endValidationDidFail(this);
  }
LABEL_9:
  v16 = *(uint64_t **)(*((_QWORD *)this + 7) + 80);
  v17 = *((_DWORD *)v16 + 3);
  if (v17)
  {
    v18 = *v16;
    v19 = (JSC::CodeBlock *)*((_QWORD *)this + 24);
    if (!v19)
      v19 = this;
    v20 = *((_QWORD *)v19 + 15);
    if (v20)
    {
      v21 = *(unsigned __int8 *)(v20 + 12);
      if ((v21 & 0xFE) == 2)
      {
        v22 = 0;
        while (1)
        {
          v23 = (unsigned __int8 *)(v18 + v22);
          v24 = *v23;
          v25 = v24;
          v26 = v24;
          if ((v24 | 2) == 0x82)
            v26 = v23[1];
          v6 = v22 & 0x3FFFFFFF;
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 7) + 80) + 12) <= v6)
            break;
          v7 = *((_QWORD *)v19 + 28);
          if (v7)
          {
            v8 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v8)
            {
              v31 = *(_QWORD *)v7;
              v7 = 24 * v8;
              v8 = v31 + 4;
              while (1)
              {
                v9 = *(unsigned int *)(v8 - 4);
                if (v9 <= v6)
                {
                  v9 = *(unsigned int *)v8;
                  if (v9 > v6)
                    break;
                }
                v8 += 24;
                v7 -= 24;
                if (!v7)
                  goto LABEL_19;
              }
              if (v26 == 15 || v26 == 131)
                goto LABEL_39;
            }
          }
LABEL_19:
          if ((v24 | 2) == 0x82)
            v25 = v23[1];
          v27 = v24 == 128;
          v5 = v24 == 130;
          if (v24 == 130)
            v27 = 2;
          v28 = v24 == 128 || v24 == 130;
          v29 = JSC::opcodeLengths[v25] << v27;
          if (v28)
            v30 = 2;
          else
            v30 = 1;
          v22 += v30 + v29;
          if (v22 == v17)
            goto LABEL_94;
        }
      }
      else if (!v21)
      {
        while (1)
        {
          v41 = (unsigned __int8 *)(v18 + v21);
          v42 = *v41;
          v43 = v42;
          v44 = v42;
          if ((v42 | 2) == 0x82)
            v44 = v41[1];
          v6 = v21 & 0x3FFFFFFF;
          if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 7) + 80) + 12) <= v6)
            break;
          v7 = *((_QWORD *)v19 + 28);
          if (v7)
          {
            v8 = *(unsigned int *)(v7 + 12);
            if ((_DWORD)v8)
            {
              v49 = *(_QWORD *)v7;
              v7 = 24 * v8;
              v8 = v49 + 4;
              while (1)
              {
                v9 = *(unsigned int *)(v8 - 4);
                if (v9 <= v6)
                {
                  v9 = *(unsigned int *)v8;
                  if (v9 > v6)
                    break;
                }
                v8 += 24;
                v7 -= 24;
                if (!v7)
                  goto LABEL_73;
              }
              if (v44 == 15 || v44 == 131)
                goto LABEL_39;
            }
          }
LABEL_73:
          if ((v42 | 2) == 0x82)
            v43 = v41[1];
          v45 = v42 == 128;
          v5 = v42 == 130;
          if (v42 == 130)
            v45 = 2;
          v46 = v42 == 128 || v42 == 130;
          v47 = JSC::opcodeLengths[v43] << v45;
          if (v46)
            v48 = 2;
          else
            v48 = 1;
          v21 += v48 + v47;
          if (v21 == v17)
            goto LABEL_94;
        }
      }
LABEL_97:
      __break(0xC471u);
      JUMPOUT(0x19816E138);
    }
    while (1)
    {
      v32 = (unsigned __int8 *)(v18 + v20);
      v33 = *v32;
      v34 = v33;
      v35 = v33;
      if ((v33 | 2) == 0x82)
        v35 = v32[1];
      v6 = v20 & 0x3FFFFFFF;
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v19 + 7) + 80) + 12) <= v6)
        goto LABEL_97;
      v7 = *((_QWORD *)v19 + 28);
      if (v7)
      {
        v8 = *(unsigned int *)(v7 + 12);
        if ((_DWORD)v8)
        {
          v40 = *(_QWORD *)v7;
          v7 = 24 * v8;
          v8 = v40 + 4;
          while (1)
          {
            v9 = *(unsigned int *)(v8 - 4);
            if (v9 <= v6)
            {
              v9 = *(unsigned int *)v8;
              if (v9 > v6)
                break;
            }
            v8 += 24;
            v7 -= 24;
            if (!v7)
              goto LABEL_44;
          }
          if (v35 == 15 || v35 == 131)
            break;
        }
      }
LABEL_44:
      if ((v33 | 2) == 0x82)
        v34 = v32[1];
      v36 = v33 == 128;
      v5 = v33 == 130;
      if (v33 == 130)
        v36 = 2;
      v37 = v33 == 128 || v33 == 130;
      v38 = JSC::opcodeLengths[v34] << v36;
      if (v37)
        v39 = 2;
      else
        v39 = 1;
      LODWORD(v20) = v39 + v20 + v38;
      if ((_DWORD)v20 == v17)
        goto LABEL_94;
    }
LABEL_39:
    JSC::CodeBlock::beginValidationDidFail(this);
    WTF::dataLog<char [16]>("    entrypoint not allowed inside a try block.");
    goto LABEL_66;
  }
LABEL_94:
  if (v52)
    WTF::fastFree((unint64_t)v52, (void *)v5, v6, v7, v8, v9, v10, v11);
  return WTF::Vector<JSC::BytecodeBasicBlock<JSC::JSOpcodeTraits>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, (void *)v5, v6, v7, v8, v9, v10, v11);
}

uint64_t JSC::CodeBlock::beginValidationDidFail(JSC::CodeBlock *this)
{
  WTF::dataLog<char [37],JSC::CodeBlock,char [2]>("Validation failure in ", (uint64_t)this, ":\n");
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLog<char [13],WTF::FastBitVector,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  unint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Result: ");
  if (a1[1])
  {
    v5 = 0;
    do
    {
      if (((*(_DWORD *)(*a1 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v5) & 1) != 0)
        v6 = "1";
      else
        v6 = "-";
      v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
      WTF::PrintStream::printf(v7, "%s", v6);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
      ++v5;
    }
    while (v5 < a1[1]);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [16],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Bit count: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::CodeBlock::endValidationDidFail(JSC::CodeBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::dataLog<char [16]>("\n");
  JSC::CodeBlock::dumpBytecode(this, v2, v3, v4, v5, v6, v7, v8);
  WTF::dataLog<char [16]>("\n");
  WTF::dataLog<char [16]>("Validation failure.\n");
  __break(0xC471u);
}

uint64_t WTF::dataLog<char [14],JSC::VirtualRegister,char [26]>(unsigned int *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "    Variable ");
  JSC::VirtualRegister::dump(a1, v4);
  WTF::PrintStream::printf(v4, "%s", " is expected to be dead.\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::CodeBlock::outOfLineJumpOffset(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unint64_t **)(v2 + 80);
  v4 = *v3;
  v5 = *((unsigned int *)v3 + 3) + *v3;
  if (v4 > a2 || v5 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19816E6BCLL);
  }
  v7 = *(_QWORD *)(v2 + 144);
  if (v7)
  {
    v8 = a2 - v4;
    v9 = *(_DWORD *)(v7 - 8);
    v10 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
    v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
    v12 = v9 & (v11 ^ HIWORD(v11));
    v13 = *(_DWORD *)(v7 + 8 * v12);
    if (v13 == v8)
      return *(unsigned int *)(v7 + 8 * v12 + 4);
    v15 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v15) & v9;
      v13 = *(_DWORD *)(v7 + 8 * v12);
      ++v15;
      if (v13 == v8)
        return *(unsigned int *)(v7 + 8 * v12 + 4);
    }
  }
  return 0;
}

uint64_t JSC::CodeBlock::binaryArithProfileForBytecodeIndex(uint64_t a1, unsigned int a2)
{
  return JSC::CodeBlock::binaryArithProfileForPC(a1, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a2 >> 2)));
}

uint64_t JSC::CodeBlock::binaryArithProfileForPC(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t result;

  v2 = *a2;
  v3 = v2;
  if ((v2 | 2) == 0x82)
    v3 = a2[1];
  switch(v3)
  {
    case 157:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E790);
      }
      goto LABEL_8;
    case 158:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E950);
      }
      goto LABEL_8;
    case 159:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E820);
      }
      goto LABEL_8;
    case 160:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E9B8);
      }
      goto LABEL_8;
    case 161:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E9E0);
      }
      goto LABEL_8;
    case 162:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E7D8);
      }
      goto LABEL_8;
    case 163:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E870);
      }
      goto LABEL_8;
    case 164:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E8B8);
      }
      goto LABEL_8;
    case 165:
      if (v2 == 128)
      {
        v4 = *((unsigned __int16 *)a2 + 4);
      }
      else if (v2 == 130)
      {
        v4 = *(_DWORD *)(a2 + 14);
      }
      else
      {
        v4 = a2[4];
      }
      v5 = *(unsigned int **)(*(_QWORD *)(a1 + 56) + 200);
      if (*v5 <= v4)
      {
        __break(0xC471u);
        JUMPOUT(0x19816E900);
      }
LABEL_8:
      result = (uint64_t)v5 + 2 * v4 + 4;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t JSC::CodeBlock::unaryArithProfileForBytecodeIndex(uint64_t a1, unsigned int a2)
{
  return JSC::CodeBlock::unaryArithProfileForPC(a1, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 80) + (a2 >> 2)));
}

uint64_t JSC::CodeBlock::unaryArithProfileForPC(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = v3;
  if ((v3 | 2) == 0x82)
    v4 = a2[1];
  result = 0;
  switch(v4)
  {
    case 181:
      v6 = *(_QWORD *)(a1 + 56);
      if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 2);
      }
      else if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 6);
      }
      else
      {
        v7 = a2[2];
      }
      v8 = *(unsigned int **)(v6 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EC88);
      }
      goto LABEL_8;
    case 182:
      v10 = *(_QWORD *)(a1 + 56);
      if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 6);
      }
      else if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 2);
      }
      else
      {
        v7 = a2[2];
      }
      v8 = *(unsigned int **)(v10 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EB90);
      }
      goto LABEL_8;
    case 183:
      v12 = *(_QWORD *)(a1 + 56);
      if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 3);
      }
      else if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 10);
      }
      else
      {
        v7 = a2[3];
      }
      v8 = *(unsigned int **)(v12 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EC20);
      }
      goto LABEL_8;
    case 192:
      v11 = *(_QWORD *)(a1 + 56);
      if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 3);
      }
      else if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 10);
      }
      else
      {
        v7 = a2[3];
      }
      v8 = *(unsigned int **)(v11 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EBD8);
      }
      goto LABEL_8;
    case 193:
      v9 = *(_QWORD *)(a1 + 56);
      if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 10);
      }
      else if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 3);
      }
      else
      {
        v7 = a2[3];
      }
      v8 = *(unsigned int **)(v9 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EB40);
      }
      goto LABEL_8;
    case 194:
      v13 = *(_QWORD *)(a1 + 56);
      if (v3 == 130)
      {
        v7 = *(_DWORD *)(a2 + 10);
      }
      else if (v3 == 128)
      {
        v7 = *((unsigned __int16 *)a2 + 3);
      }
      else
      {
        v7 = a2[3];
      }
      v8 = *(unsigned int **)(v13 + 208);
      if (*v8 <= v7)
      {
        __break(0xC471u);
        JUMPOUT(0x19816EC68);
      }
LABEL_8:
      result = (uint64_t)v8 + 2 * v7 + 4;
      break;
    default:
      return result;
  }
  return result;
}

void JSC::CodeBlock::findPC(JSC::CodeBlock *this@<X0>, void *a2@<X1>, unsigned int *a3@<X8>)
{
  JSC::PCToCodeOriginMap *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = (JSC::PCToCodeOriginMap *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 15) + 160))(*((_QWORD *)this + 15));
  if (v6)
  {
    JSC::PCToCodeOriginMap::findPC(v6, a2, v8, v9, v10, v11, v12, v13, a3);
    if (*((_BYTE *)a3 + 8))
      return;
  }
  v14 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 16);
    goto LABEL_7;
  }
  if (__stxr(1u, v14))
    goto LABEL_6;
LABEL_7:
  *(_BYTE *)a3 = 0;
  *((_BYTE *)a3 + 8) = 0;
  v16 = (unsigned int *)*((_QWORD *)this + 15);
  if (v16 && (v16[3] & 0xFE) == 4)
  {
    v17 = v16 + 2;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 72))(v16);
    do
    {
      v20 = __ldaxr(v17);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v17));
    if (!v21)
    {
      atomic_store(1u, v16 + 2);
      v45 = v19;
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 32))(v16);
      v19 = v45;
    }
    v22 = *(unsigned int **)(v19 + 144);
    if (v22)
    {
      while (1)
      {
        if (*((_BYTE *)v22 + 123) == 4)
        {
          v23 = *((_QWORD *)v22 + 9);
          if (v23)
            break;
        }
LABEL_22:
        v22 = (unsigned int *)*((_QWORD *)v22 + 17);
        if (!v22)
          goto LABEL_23;
      }
      while (1)
      {
        v24 = *(_QWORD *)(v23 + 64);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 8);
          v26 = *(_QWORD *)(v25 + 8);
          if (v26 <= (unint64_t)a2 && *(unsigned int *)(v25 + 4) + v26 >= (unint64_t)a2)
            goto LABEL_47;
        }
        v23 = *(_QWORD *)(v23 + 88);
        if (!v23)
          goto LABEL_22;
      }
    }
LABEL_23:
    v27 = *((_QWORD *)this + 15);
    if (v27)
    {
      if ((*(_BYTE *)(v27 + 12) & 0xFE) == 4)
      {
        v28 = (unsigned int *)*((_QWORD *)this + 16);
        if (v28)
        {
          v29 = *v28;
          if ((_DWORD)v29)
          {
            v22 = &v28[-34 * v29];
            while (1)
            {
              if (*((_BYTE *)v22 + 123) == 4)
              {
                v30 = *((_QWORD *)v22 + 9);
                if (v30)
                  break;
              }
LABEL_34:
              v22 += 34;
              if (v22 == v28)
                goto LABEL_52;
            }
            while (1)
            {
              v31 = *(_QWORD *)(v30 + 64);
              if (v31)
              {
                v32 = *(_QWORD *)(v31 + 8);
                v33 = *(_QWORD *)(v32 + 8);
                if (v33 <= (unint64_t)a2 && *(unsigned int *)(v32 + 4) + v33 >= (unint64_t)a2)
                  goto LABEL_47;
              }
              v30 = *(_QWORD *)(v30 + 88);
              if (!v30)
                goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_52:
    v42 = *((_BYTE *)a3 + 8) == 0;
    goto LABEL_53;
  }
  v34 = (unsigned int *)*((_QWORD *)this + 16);
  if (!v34)
    goto LABEL_52;
  v35 = *v34;
  if (!(_DWORD)v35)
    goto LABEL_52;
  v22 = &v34[-34 * v35];
  while (1)
  {
    if (*((_BYTE *)v22 + 123) == 4)
    {
      v36 = *((_QWORD *)v22 + 9);
      if (v36)
        break;
    }
LABEL_45:
    v22 += 34;
    if (v22 == v34)
      goto LABEL_52;
  }
  while (1)
  {
    v37 = *(_QWORD *)(v36 + 64);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      v39 = *(_QWORD *)(v38 + 8);
      if (v39 <= (unint64_t)a2 && *(unsigned int *)(v38 + 4) + v39 >= (unint64_t)a2)
        break;
    }
    v36 = *(_QWORD *)(v36 + 88);
    if (!v36)
      goto LABEL_45;
  }
LABEL_47:
  if (*((_BYTE *)a3 + 8))
  {
    if (v22 != a3)
    {
      v40 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v40 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
      v41 = *(_QWORD *)v22;
      if ((*(_QWORD *)v22 & 1) != 0)
      {
        v46 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
        if ((v41 & 2) != 0
          || ((v47 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v47 != 0x3FFFFFFF)
            ? (v48 = (_DWORD)v47 == -1)
            : (v48 = 1),
              v48))
        {
          v49 = 2;
        }
        else if (v47 >> 28)
        {
          v54 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v54 = v46;
          *(_DWORD *)(v54 + 8) = v47;
          v49 = 1;
          v46 = v54;
        }
        else
        {
          v49 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
          v46 = v47 << 36;
        }
        v41 = v46 | v49;
      }
      *(_QWORD *)a3 = v41;
      goto LABEL_52;
    }
    v42 = 0;
  }
  else
  {
    v44 = *(_QWORD *)v22;
    if ((*(_QWORD *)v22 & 1) != 0)
    {
      v50 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      if ((v44 & 2) != 0
        || ((v51 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
          ? (v52 = (_DWORD)v51 == -1)
          : (v52 = 1),
            v52))
      {
        v53 = 2;
      }
      else if (v51 >> 28)
      {
        v55 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v55 = v50;
        *(_DWORD *)(v55 + 8) = v51;
        v53 = 1;
        v50 = v55;
      }
      else
      {
        v53 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
        v50 = v51 << 36;
      }
      v44 = v50 | v53;
    }
    v42 = 0;
    *(_QWORD *)a3 = v44;
    *((_BYTE *)a3 + 8) = 1;
  }
LABEL_53:
  v43 = __ldxr(v14);
  if (v43 != 1)
  {
    __clrex();
LABEL_58:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 16, 0, v8, v9, v10, v11, v12, v13);
    if (v42)
      goto LABEL_56;
    return;
  }
  if (__stlxr(0, v14))
    goto LABEL_58;
  if (v42)
LABEL_56:
    (*(void (**)(_QWORD, JSC::CodeBlock *, void *))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15), this, a2);
}

uint64_t JSC::CodeBlock::bytecodeIndexFromCallSiteIndex(uint64_t a1, unsigned int a2)
{
  _BYTE *v3;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = *(_BYTE **)(a1 + 120);
  if (!v3)
    goto LABEL_6;
  v5 = v3[12] & 0xFE;
  if (v5 == 4)
  {
    if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 72))(v3) + 40) + 20) <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x19816F1BCLL);
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120))
                                            + 40)
                                + 8)
                    + 8 * a2);
    if ((v16 & 1) != 0)
    {
      v18 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v19 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
          ? (v20 = (_DWORD)v19 == -1)
          : (v20 = 1),
            v20))
      {
        v21 = 2;
      }
      else if (v19 >> 28)
      {
        v23 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v23 = v18;
        *(_DWORD *)(v23 + 8) = v19;
        v21 = 1;
        v18 = v23;
      }
      else
      {
        v21 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v18 = v19 << 36;
      }
      v16 = v18 | v21;
      if ((v16 & 2) == 0)
      {
LABEL_10:
        if ((v16 & 1) == 0)
        {
          v6 = v16 >> 36;
          v7 = (v16 >> 36) >> 8;
          v8 = 0x100000000;
          return v8 | v6 | (v7 << 8);
        }
        v22 = v16 & 0xFFFFFFFF8;
        LODWORD(v6) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
        v7 = v6 >> 8;
        if ((v16 & 0xFFFFFFFF8) == 0)
          goto LABEL_5;
LABEL_22:
        WTF::fastFree(v22, v9, v10, v11, v12, v13, v14, v15);
        goto LABEL_5;
      }
    }
    else if ((v16 & 2) == 0)
    {
      goto LABEL_10;
    }
    if ((v16 & 1) == 0)
    {
      v7 = 0xFFFFFF;
      LOBYTE(v6) = -1;
      goto LABEL_5;
    }
    v22 = v16 & 0xFFFFFFFF8;
    LOBYTE(v6) = -1;
    v7 = 0xFFFFFF;
    if ((v16 & 0xFFFFFFFF8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
  if (v5 != 2)
  {
LABEL_6:
    v8 = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
    return v8 | v6 | (v7 << 8);
  }
  LOBYTE(v6) = 4 * a2;
  v7 = (a2 >> 6) & 0xFFFFFF;
LABEL_5:
  v8 = 0x100000000;
  return v8 | v6 | (v7 << 8);
}

uint64_t JSC::CodeBlock::jitSoon(JSC::CodeBlock *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v1 = *((_QWORD *)this + 7);
  v2 = DWORD1(xmmword_1ECF4C4E4);
  v3 = (*(unsigned __int8 *)(*(_QWORD *)(v1 + 72) + 4) >> 4) & 3;
  if ((SDWORD1(xmmword_1ECF4C4E4) & 0x80000000) == 0)
    v4 = DWORD1(xmmword_1ECF4C4E4);
  else
    v4 = DWORD1(xmmword_1ECF4C4E4) + 1;
  v5 = v4 >> 1;
  if (v3 == 1)
    v2 = v5;
  if (v3)
    v6 = v2;
  else
    v6 = 4 * DWORD1(xmmword_1ECF4C4E4);
  return JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(v1 + 168, v6, (uint64_t)this);
}

unsigned __int8 *JSC::CodeBlock::hasInstalledVMTrapsBreakpoints(JSC::CodeBlock *this)
{
  unsigned __int8 *result;
  int v2;
  _BYTE *v3;
  uint64_t v4;

  result = (unsigned __int8 *)*((_QWORD *)this + 15);
  if (result)
  {
    v2 = result[12];
    if ((v2 & 0xFE) == 4)
    {
      if (v2 == 4)
      {
        v3 = result + 248;
LABEL_5:
        if (!*v3)
        {
          v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 72))(result);
          if (*(_BYTE *)(v4 + 209))
            return (unsigned __int8 *)(*(_BYTE *)(v4 + 210) != 0);
        }
        return 0;
      }
      if (v2 == 5)
      {
        v3 = result + 232;
        goto LABEL_5;
      }
    }
    return 0;
  }
  return result;
}

BOOL JSC::CodeBlock::canInstallVMTrapBreakpoints(JSC::CodeBlock *this)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 15);
  if (v1)
  {
    v2 = v1[12];
    if ((v2 & 0xFE) == 4)
    {
      if (v2 == 4)
      {
        v3 = v1 + 248;
        return *v3 == 0;
      }
      if (v2 == 5)
      {
        v3 = v1 + 232;
        return *v3 == 0;
      }
    }
  }
  return 0;
}

unsigned __int8 *JSC::CodeBlock::installVMTrapBreakpoints(JSC::CodeBlock *this)
{
  unsigned __int8 *result;
  int v3;
  _BYTE *v4;
  JSC::DFG::CommonData *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (unsigned __int8 *)*((_QWORD *)this + 15);
  if (result)
  {
    v3 = result[12];
    if ((v3 & 0xFE) == 4)
    {
      if (v3 == 4)
      {
        v4 = result + 248;
        goto LABEL_5;
      }
      if (v3 == 5)
      {
        v4 = result + 232;
LABEL_5:
        if (!*v4)
        {
          v5 = (JSC::DFG::CommonData *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 72))(result);
          JSC::DFG::CommonData::installVMTrapBreakpoints(v5, this, v6, v7, v8, v9, v10, v11);
          return (unsigned __int8 *)1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t WTF::printInternal(WTF *this, WTF::PrintStream *a2, JSC::CodeBlock *a3)
{
  WTF::PrintStream *v5;

  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *, WTF::PrintStream *, JSC::CodeBlock *))(*(_QWORD *)this
                                                                                                  + 32))(this, a2, a3);
  if (a2)
    JSC::CodeBlock::dumpAssumingJITType((uint64_t)a2);
  else
    WTF::PrintStream::printf(v5, "%s", "<null codeBlock>");
  return (*(uint64_t (**)(WTF *))(*(_QWORD *)this + 40))(this);
}

int *JSC::CodeBlockHash::CodeBlockHash(int *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  CC_SHA1_CTX c;
  unsigned __int8 data[20];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  CC_SHA1_Init(&c);
  v13 = *((unsigned int *)a2 + 2);
  v14 = *((_DWORD *)a2 + 3) - v13;
  v15 = *a2;
  if (v14 >> 22 > 0x7C)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
    v23 = v22;
    *(_DWORD *)data = v22;
    v24 = (v22 >> 10) + 1;
    CC_SHA1_Update(&c, data, 4u);
    if ((v23 & 0xFF00000000) != 0)
    {
      v25 = 0;
      while (1)
      {
        v31 = 0;
        if (v25 >= v23)
          break;
        v31 = *(unsigned __int8 *)(v21 + v25);
        CC_SHA1_Update(&c, &v31, 2u);
        v26 = v25 + v24;
        if (v25 + v24 > v25)
        {
          v25 += v24;
          if (v26 < *(_DWORD *)data)
            continue;
        }
        goto LABEL_20;
      }
    }
    else
    {
      v29 = 0;
      while (1)
      {
        v31 = 0;
        if (v29 >= v23)
          break;
        v31 = *(_WORD *)(v21 + 2 * v29);
        CC_SHA1_Update(&c, &v31, 2u);
        v30 = v29 + v24;
        if (v29 + v24 > v29)
        {
          v29 += v24;
          if (v30 < *(_DWORD *)data)
            continue;
        }
        goto LABEL_20;
      }
    }
    goto LABEL_28;
  }
  if (!v15)
  {
LABEL_29:
    v18 = 0;
    v19 = 0x100000000;
    goto LABEL_19;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  if (v17 <= v13)
  {
    v19 = 0x100000000;
    v18 = &str_3_16;
    goto LABEL_19;
  }
  v18 = (void *)v16;
  if ((int)v17 - (int)v13 <= v14)
  {
    v14 = v17 - v13;
    if (!(_DWORD)v13)
    {
      v19 = v17;
      goto LABEL_19;
    }
  }
  v19 = v14;
  v20 = v17 - v13;
  if ((v17 & 0xFF00000000) == 0)
  {
    if (v20 >= v14)
    {
      v18 = (void *)(v16 + 2 * v13);
      goto LABEL_19;
    }
    goto LABEL_28;
  }
  if (v20 < v14)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v18 = (void *)(v16 + v13);
  v19 = v14 | 0x100000000;
LABEL_19:
  WTF::SHA1::addUTF8Bytes(&c, (unint64_t)v18, v19, v6, v7, v8, v9, v10, v11, v12);
LABEL_20:
  CC_SHA1_Final(data, &c);
  v27 = *(_DWORD *)data;
  if (*(_DWORD *)data < 2u)
    v27 = *(_DWORD *)data + 760910800;
  *a1 = v27 ^ a3;
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,false>(__int128 *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  char v29;
  BOOL v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  __int128 v39;
  __n128 v40;

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_DWORD *)(v4 + 24);
        if (v6 > *(_DWORD *)(v4 + 8))
        {
          v7 = *(_QWORD *)(v4 + 16);
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + v8);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(result + v8 + 8);
            if (!v8)
              break;
            v8 -= 16;
            if (v6 <= *(_DWORD *)(v9 - 8))
            {
              v10 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v7;
          *(_DWORD *)(v10 + 8) = v6;
        }
        v2 = v5 + 16;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 16 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = -2;
      v5 = 1;
      v6 = result;
      while (1)
      {
        v7 = &result[2 * v3];
        v3 = v5;
        v8 = *((_DWORD *)v6 + 6);
        if (v8 > *((_DWORD *)v7 + 2))
          break;
LABEL_9:
        v6 = &result[2 * v3];
        v5 = v3 + 1;
        v2 += 2;
        --v4;
        if (v2 == a2)
          return result;
      }
      v9 = *v2;
      v10 = v2;
      v11 = v4;
      v12 = v2;
      while (1)
      {
        v13 = *(v12 - 2);
        v12 -= 2;
        *v10 = v13;
        *((_DWORD *)v10 + 2) = *((_DWORD *)v10 - 2);
        if (__CFADD__(v11++, 1))
          break;
        v15 = *((_DWORD *)v10 - 6);
        v10 = v12;
        if (v8 <= v15)
        {
          *v12 = v9;
          *((_DWORD *)v12 + 2) = v8;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *,JSC::CallEdge *>(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  __int128 *v21;
  int v22;
  __int128 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t)a2 - result;
    v4 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17 && (unint64_t)v3 >= 0x20)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = (uint64_t *)(result + 16 * v7);
          if (2 * v6 + 2 < v4)
          {
            v9 = *((_DWORD *)v8 + 2);
            v10 = *((_DWORD *)v8 + 6);
            v8 += 2 * (v9 > v10);
            if (v9 > v10)
              v7 = 2 * v6 + 2;
          }
          v11 = (uint64_t *)(result + 16 * v6);
          v12 = *((_DWORD *)v11 + 2);
          if (*((_DWORD *)v8 + 2) <= v12)
          {
            v13 = *v11;
            do
            {
              v14 = v8;
              v15 = *v8;
              *((_DWORD *)v11 + 2) = *((_DWORD *)v14 + 2);
              *v11 = v15;
              if (v5 < v7)
                break;
              v16 = (2 * v7) | 1;
              v8 = (uint64_t *)(result + 16 * v16);
              v17 = 2 * v7 + 2;
              if (v17 < v4)
              {
                v18 = *((_DWORD *)v8 + 2);
                v19 = *((_DWORD *)v8 + 6);
                v8 += 2 * (v18 > v19);
                if (v18 > v19)
                  v16 = v17;
              }
              v11 = v14;
              v7 = v16;
            }
            while (*((_DWORD *)v8 + 2) <= v12);
            *v14 = v13;
            *((_DWORD *)v14 + 2) = v12;
          }
        }
        v20 = v6-- <= 0;
      }
      while (!v20);
    }
    if (a2 != (uint64_t *)a3)
    {
      if (v3 >= 32)
      {
        v23 = (__int128 *)a2;
        do
        {
          if (*((_DWORD *)v23 + 2) > *(_DWORD *)(result + 8))
          {
            v54 = *v23;
            v24 = *(_DWORD *)(result + 8);
            *(_QWORD *)v23 = *(_QWORD *)result;
            *((_DWORD *)v23 + 2) = v24;
            *(_QWORD *)result = v54;
            *(_DWORD *)(result + 8) = DWORD2(v54);
            if (v3 == 32)
            {
              v25 = result + 16;
              v26 = 1;
            }
            else
            {
              v25 = result + 16 + 16 * (*(_DWORD *)(result + 24) > *(_DWORD *)(result + 40));
              v26 = *(_DWORD *)(result + 24) <= *(_DWORD *)(result + 40) ? 1 : 2;
            }
            v27 = *(_DWORD *)(result + 8);
            if (*(_DWORD *)(v25 + 8) <= v27)
            {
              v28 = *(_QWORD *)result;
              v29 = result;
              do
              {
                v30 = v25;
                v31 = *(_QWORD *)v25;
                *(_DWORD *)(v29 + 8) = *(_DWORD *)(v30 + 8);
                *(_QWORD *)v29 = v31;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v26)
                  break;
                v32 = (2 * v26) | 1;
                v25 = result + 16 * v32;
                v33 = 2 * v26 + 2;
                if (v33 < v4)
                {
                  v34 = *(_DWORD *)(v25 + 8);
                  v35 = *(_DWORD *)(v25 + 24);
                  v25 += 16 * (v34 > v35);
                  if (v34 > v35)
                    v32 = v33;
                }
                v29 = v30;
                v26 = v32;
              }
              while (*(_DWORD *)(v25 + 8) <= v27);
              *(_QWORD *)v30 = v28;
              *(_DWORD *)(v30 + 8) = v27;
            }
          }
          ++v23;
        }
        while (v23 != a3);
      }
      else
      {
        v21 = (__int128 *)a2;
        do
        {
          if (*((_DWORD *)v21 + 2) > *(_DWORD *)(result + 8))
          {
            v53 = *v21;
            v22 = *(_DWORD *)(result + 8);
            *(_QWORD *)v21 = *(_QWORD *)result;
            *((_DWORD *)v21 + 2) = v22;
            *(_QWORD *)result = v53;
            *(_DWORD *)(result + 8) = DWORD2(v53);
          }
          ++v21;
        }
        while (v21 != a3);
      }
    }
    if (v3 >= 17)
    {
      v36 = (unint64_t)v3 >> 4;
      do
      {
        v37 = 0;
        v55 = *(_OWORD *)result;
        v38 = result;
        do
        {
          v39 = v38 + 16 * v37 + 16;
          v40 = (2 * v37) | 1;
          v41 = 2 * v37 + 2;
          if (v41 < v36)
          {
            v42 = *(_DWORD *)(v39 + 8);
            v43 = *(_DWORD *)(v39 + 24);
            v39 += 16 * (v42 > v43);
            if (v42 > v43)
              v40 = v41;
          }
          v44 = *(_QWORD *)v39;
          *(_DWORD *)(v38 + 8) = *(_DWORD *)(v39 + 8);
          *(_QWORD *)v38 = v44;
          v38 = v39;
          v37 = v40;
        }
        while (v40 <= (uint64_t)((unint64_t)(v36 - 2) >> 1));
        a2 -= 2;
        if ((uint64_t *)v39 == a2)
        {
          *(_DWORD *)(v39 + 8) = DWORD2(v55);
          *(_QWORD *)v39 = v55;
        }
        else
        {
          v45 = *a2;
          *(_DWORD *)(v39 + 8) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v39 = v45;
          *a2 = v55;
          *((_DWORD *)a2 + 2) = DWORD2(v55);
          v46 = v39 - result + 16;
          if (v46 >= 17)
          {
            v47 = (((unint64_t)v46 >> 4) - 2) >> 1;
            v48 = result + 16 * v47;
            v49 = *(_DWORD *)(v39 + 8);
            if (*(_DWORD *)(v48 + 8) > v49)
            {
              v50 = *(_QWORD *)v39;
              do
              {
                v51 = v48;
                v52 = *(_QWORD *)v48;
                *(_DWORD *)(v39 + 8) = *(_DWORD *)(v51 + 8);
                *(_QWORD *)v39 = v52;
                if (!v47)
                  break;
                v47 = (v47 - 1) >> 1;
                v48 = result + 16 * v47;
                v39 = v51;
              }
              while (*(_DWORD *)(v48 + 8) > v49);
              *(_QWORD *)v51 = v50;
              *(_DWORD *)(v51 + 8) = v49;
            }
          }
        }
        v20 = v36-- <= 2;
      }
      while (!v20);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(__int128 *result, __int128 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *(_DWORD *)(a3 + 8);
  if (v3 <= *((_DWORD *)result + 2))
  {
    if (v4 > v3)
    {
      v11 = *a2;
      v6 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v6;
      *(_QWORD *)a3 = v11;
      *(_DWORD *)(a3 + 8) = DWORD2(v11);
      if (*((_DWORD *)a2 + 2) > *((_DWORD *)result + 2))
      {
        v12 = *result;
        v7 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v7;
        *(_QWORD *)a2 = v12;
        *((_DWORD *)a2 + 2) = DWORD2(v12);
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v13 = *result;
      v8 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v8;
      *(_QWORD *)a2 = v13;
      *((_DWORD *)a2 + 2) = DWORD2(v13);
      if (*(_DWORD *)(a3 + 8) <= *((_DWORD *)a2 + 2))
        return result;
      v10 = *a2;
      v9 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      v10 = *result;
      v5 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v5;
    }
    *(_QWORD *)a3 = v10;
    *(_DWORD *)(a3 + 8) = DWORD2(v10);
  }
  return result;
}

__int128 *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallEdge *,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &>(__int128 *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  __int128 *v6;
  __int128 *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  __int128 *v13;
  unsigned int v14;
  __int128 *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)result;
  v3 = *((_DWORD *)result + 2);
  if (v3 > *((_DWORD *)a2 - 2))
  {
    v4 = (uint64_t *)(result + 1);
    while (v4 != a2)
    {
      v5 = *((_DWORD *)v4 + 2);
      v4 += 2;
      if (v3 > v5)
      {
        v6 = (__int128 *)(v4 - 2);
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v7 = result + 1;
  do
  {
    v6 = v7;
    if (v7 >= (__int128 *)a2)
      break;
    v8 = *((_DWORD *)v7++ + 2);
  }
  while (v3 <= v8);
LABEL_9:
  v9 = a2;
  if (v6 < (__int128 *)a2)
  {
    v10 = a2;
    while (v10 != (uint64_t *)result)
    {
      v9 = v10 - 2;
      v11 = *((_DWORD *)v10 - 2);
      v10 -= 2;
      if (v3 <= v11)
        goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_13:
  if (v6 < (__int128 *)v9)
  {
LABEL_14:
    v18 = *v6;
    v12 = *v9;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v9 + 2);
    *(_QWORD *)v6 = v12;
    v13 = v6 + 1;
    *((_DWORD *)v9 + 2) = DWORD2(v18);
    *v9 = v18;
    while (v13 != (__int128 *)a2)
    {
      v14 = *((_DWORD *)v13++ + 2);
      if (v3 > v14)
      {
        v6 = v13 - 1;
        while (v9 != (uint64_t *)result)
        {
          v15 = (__int128 *)(v9 - 2);
          v16 = *((_DWORD *)v9 - 2);
          v9 -= 2;
          if (v3 <= v16)
          {
            v9 = (uint64_t *)v15;
            if (v6 < v15)
              goto LABEL_14;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
LABEL_21:
  if (v6 - 1 != result)
  {
    v17 = *((_QWORD *)v6 - 2);
    *((_DWORD *)result + 2) = *((_DWORD *)v6 - 2);
    *(_QWORD *)result = v17;
  }
  *((_QWORD *)v6 - 2) = v2;
  *((_DWORD *)v6 - 2) = v3;
  return v6;
}

__int128 *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallEdge *,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &>(__int128 *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  __int128 *v6;
  uint64_t *v7;
  __int128 *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  unsigned int v16;
  __int128 *v17;
  unsigned int v18;
  uint64_t v19;
  __int128 v20;

  v2 = 0;
  v3 = *(_QWORD *)result;
  v4 = *((_DWORD *)result + 2);
  do
  {
    if (&result[v2 + 1] == (__int128 *)a2)
      goto LABEL_26;
    v5 = DWORD2(result[++v2]);
  }
  while (v5 > v4);
  v6 = &result[v2];
  if (v2 != 1)
  {
    v7 = a2;
    while (v7 != (uint64_t *)result)
    {
      v8 = (__int128 *)(v7 - 2);
      v9 = *((_DWORD *)v7 - 2);
      v7 -= 2;
      if (v9 > v4)
        goto LABEL_14;
    }
    goto LABEL_26;
  }
  v10 = (unint64_t)a2;
  while ((unint64_t)v6 < v10)
  {
    v8 = (__int128 *)(v10 - 16);
    v11 = *(_DWORD *)(v10 - 8);
    v10 -= 16;
    if (v11 > v4)
      goto LABEL_14;
  }
  v8 = (__int128 *)v10;
LABEL_14:
  v12 = v6;
  if (v6 < v8)
  {
    v13 = v8;
LABEL_16:
    v20 = *v12;
    v14 = *(_QWORD *)v13;
    *((_DWORD *)v12 + 2) = *((_DWORD *)v13 + 2);
    *(_QWORD *)v12 = v14;
    v15 = v12 + 1;
    *((_DWORD *)v13 + 2) = DWORD2(v20);
    *(_QWORD *)v13 = v20;
    while (v15 != (__int128 *)a2)
    {
      v16 = *((_DWORD *)v15++ + 2);
      if (v16 <= v4)
      {
        v12 = v15 - 1;
        while (v13 != result)
        {
          v17 = v13 - 1;
          v18 = *((_DWORD *)v13-- - 2);
          if (v18 > v4)
          {
            v13 = v17;
            if (v12 < v17)
              goto LABEL_16;
            goto LABEL_23;
          }
        }
        break;
      }
    }
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_23:
  if (v12 - 1 != result)
  {
    v19 = *((_QWORD *)v12 - 2);
    *((_DWORD *)result + 2) = *((_DWORD *)v12 - 2);
    *(_QWORD *)result = v19;
  }
  *((_QWORD *)v12 - 2) = v3;
  *((_DWORD *)v12 - 2) = v4;
  return v12 - 1;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  __n128 *v7;
  unint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __n128 *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
      {
        v31 = *(__n128 *)a1;
        v6 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 8) = v6;
        *(_QWORD *)(a2 - 16) = v31.n128_u64[0];
        *(_DWORD *)(a2 - 8) = v31.n128_u32[2];
      }
      return result;
    case 3:
      v7 = (__n128 *)(a1 + 16);
      v8 = (unint64_t *)(a2 - 16);
      v9 = *(_DWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a2 - 8);
      if (v9 <= *(_DWORD *)(a1 + 8))
      {
        if (v10 > v9)
        {
          v38 = *v7;
          v21 = *(_DWORD *)(a2 - 8);
          v7->n128_u64[0] = *v8;
          *(_DWORD *)(a1 + 24) = v21;
          *v8 = v38.n128_u64[0];
          *(_DWORD *)(a2 - 8) = v38.n128_u32[2];
          if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a1 + 8))
          {
            v39 = *(__n128 *)a1;
            *(_QWORD *)a1 = v7->n128_u64[0];
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            v7->n128_u64[0] = v39.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v39.n128_u32[2];
          }
        }
      }
      else
      {
        if (v10 <= v9)
        {
          v42 = *(__n128 *)a1;
          *(_QWORD *)a1 = v7->n128_u64[0];
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
          v7->n128_u64[0] = v42.n128_u64[0];
          *(_DWORD *)(a1 + 24) = v42.n128_u32[2];
          if (*(_DWORD *)(a2 - 8) <= *(_DWORD *)(a1 + 24))
            return result;
          v32 = *v7;
          v22 = *(_DWORD *)(a2 - 8);
          v7->n128_u64[0] = *v8;
          *(_DWORD *)(a1 + 24) = v22;
        }
        else
        {
          v32 = *(__n128 *)a1;
          v11 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)a1 = *v8;
          *(_DWORD *)(a1 + 8) = v11;
        }
        *v8 = v32.n128_u64[0];
        *(_DWORD *)(a2 - 8) = v32.n128_u32[2];
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((__n128 *)a1, (__n128 *)(a1 + 16), (__int128 *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>((__n128 *)a1, (__n128 *)(a1 + 16), (__int128 *)(a1 + 32), a1 + 48);
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 56))
      {
        v34 = *v19;
        v20 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)v19 = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 56) = v20;
        *(_QWORD *)(a2 - 16) = v34;
        *(_DWORD *)(a2 - 8) = DWORD2(v34);
        if (*(_DWORD *)(a1 + 56) > *(_DWORD *)(a1 + 40))
        {
          v35 = *v18;
          *(_QWORD *)v18 = *(_QWORD *)v19;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 56);
          *(_QWORD *)v19 = v35;
          *(_DWORD *)(a1 + 56) = DWORD2(v35);
          if (*(_DWORD *)(a1 + 40) > *(_DWORD *)(a1 + 24))
          {
            v36 = *v17;
            *(_QWORD *)v17 = *(_QWORD *)v18;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)v18 = v36;
            *(_DWORD *)(a1 + 40) = DWORD2(v36);
            if (*(_DWORD *)(a1 + 24) > *(_DWORD *)(a1 + 8))
            {
              v37 = *(__n128 *)a1;
              *(_QWORD *)a1 = *(_QWORD *)v17;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
              *(_QWORD *)v17 = v37.n128_u64[0];
              *(_DWORD *)(a1 + 24) = v37.n128_u32[2];
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 32;
      v13 = (__n128 *)(a1 + 16);
      v14 = *(_DWORD *)(a1 + 24);
      v15 = *(_DWORD *)(a1 + 8);
      v16 = *(_DWORD *)(a1 + 40);
      if (v14 <= v15)
      {
        if (v16 > v14)
        {
          v40 = *v13;
          v13->n128_u64[0] = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)v12 = v40.n128_u64[0];
          *(_DWORD *)(a1 + 40) = v40.n128_u32[2];
          if (*(_DWORD *)(a1 + 24) > v15)
          {
            v41 = *(__n128 *)a1;
            *(_QWORD *)a1 = v13->n128_u64[0];
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            v13->n128_u64[0] = v41.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v41.n128_u32[2];
          }
        }
      }
      else
      {
        if (v16 <= v14)
        {
          v43 = *(__n128 *)a1;
          *(_QWORD *)a1 = v13->n128_u64[0];
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
          v13->n128_u64[0] = v43.n128_u64[0];
          *(_DWORD *)(a1 + 24) = v43.n128_u32[2];
          if (v16 <= *(_DWORD *)(a1 + 24))
            goto LABEL_28;
          v33 = *v13;
          v13->n128_u64[0] = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v33 = *(__n128 *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 40);
        }
        *(_QWORD *)v12 = v33.n128_u64[0];
        *(_DWORD *)(a1 + 40) = v33.n128_u32[2];
      }
LABEL_28:
      v23 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    v26 = *(_DWORD *)(v23 + 8);
    if (v26 > *(_DWORD *)(v12 + 8))
    {
      v27 = *(_QWORD *)v23;
      v28 = v24;
      while (1)
      {
        v29 = a1 + v28;
        *(_QWORD *)(v29 + 48) = *(_QWORD *)(a1 + v28 + 32);
        *(_DWORD *)(v29 + 56) = *(_DWORD *)(a1 + v28 + 40);
        if (v28 == -32)
          break;
        v28 -= 16;
        if (v26 <= *(_DWORD *)(v29 + 24))
        {
          v30 = a1 + v28 + 48;
          goto LABEL_36;
        }
      }
      v30 = a1;
LABEL_36:
      *(_QWORD *)v30 = v27;
      *(_DWORD *)(v30 + 8) = v26;
      if (++v25 == 8)
        return v23 + 16 == a2;
    }
    v12 = v23;
    v24 += 16;
    v23 += 16;
    if (v23 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::CallLinkStatus::computeFromCallLinkInfo(JSC::ConcurrentJSLocker const&,JSC::CallLinkInfo &)::$_0 &,JSC::CallEdge *>(__n128 *a1, __n128 *a2, __int128 *a3, uint64_t a4)
{
  unsigned __int32 v4;
  unsigned __int32 v5;
  __n128 result;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  int v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;

  v4 = a2->n128_u32[2];
  v5 = *((_DWORD *)a3 + 2);
  if (v4 <= a1->n128_u32[2])
  {
    if (v5 > v4)
    {
      result = *a2;
      v16 = *a2;
      v8 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v8;
      *(_QWORD *)a3 = v16.n128_u64[0];
      *((_DWORD *)a3 + 2) = v16.n128_u32[2];
      if (a2->n128_u32[2] > a1->n128_u32[2])
      {
        result = *a1;
        v17 = *a1;
        v9 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v9;
        a2->n128_u64[0] = v17.n128_u64[0];
        a2->n128_u32[2] = v17.n128_u32[2];
      }
    }
  }
  else
  {
    if (v5 > v4)
    {
      result = *a1;
      v15 = *a1;
      v7 = *((_DWORD *)a3 + 2);
      a1->n128_u64[0] = *(_QWORD *)a3;
      a1->n128_u32[2] = v7;
LABEL_9:
      *(_QWORD *)a3 = v15.n128_u64[0];
      *((_DWORD *)a3 + 2) = v15.n128_u32[2];
      goto LABEL_10;
    }
    result = *a1;
    v18 = *a1;
    v10 = a2->n128_u32[2];
    a1->n128_u64[0] = a2->n128_u64[0];
    a1->n128_u32[2] = v10;
    a2->n128_u64[0] = v18.n128_u64[0];
    a2->n128_u32[2] = v18.n128_u32[2];
    if (*((_DWORD *)a3 + 2) > a2->n128_u32[2])
    {
      result = *a2;
      v15 = *a2;
      v11 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 8) > *((_DWORD *)a3 + 2))
  {
    result = (__n128)*a3;
    v19 = *a3;
    v12 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v12;
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = DWORD2(v19);
    if (*((_DWORD *)a3 + 2) > a2->n128_u32[2])
    {
      result = *a2;
      v20 = *a2;
      v13 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v13;
      *(_QWORD *)a3 = v20.n128_u64[0];
      *((_DWORD *)a3 + 2) = v20.n128_u32[2];
      if (a2->n128_u32[2] > a1->n128_u32[2])
      {
        result = *a1;
        v21 = *a1;
        v14 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v14;
        a2->n128_u64[0] = v21.n128_u64[0];
        a2->n128_u32[2] = v21.n128_u32[2];
      }
    }
  }
  return result;
}

void JSC::CallLinkStatus::computeFor(JSC::CodeBlock *,JSC::CodeOrigin,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> const&,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  uint64_t v42;

  v10 = **(_QWORD ***)a1;
  v11 = **(_QWORD **)(a1 + 8);
  v12 = (uint64_t *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 1) == 0)
    goto LABEL_2;
  v31 = *v12;
  if ((v11 & 2) != 0
    || ((v32 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v32 != 0x3FFFFFFF) ? (v33 = v32 == -1) : (v33 = 1), v33))
  {
    v34 = 2;
  }
  else if (v32 >> 28)
  {
    v36 = v10;
    v37 = *v12;
    v38 = v32;
    v39 = WTF::fastMalloc((WTF *)0x10);
    v10 = v36;
    *(_QWORD *)v39 = v37;
    *(_DWORD *)(v39 + 8) = v38;
    v34 = 1;
    v31 = v39;
  }
  else
  {
    v34 = *v12;
    v31 = 0;
  }
  v35 = v31 | v34;
  v12 = (uint64_t *)(v35 & 0xFFFFFFFF8);
  if ((v35 & 1) != 0)
  {
    v13 = 0;
    v14 = (uint64_t *)*v12;
    if (*v12)
    {
LABEL_25:
      v15 = v14 != (uint64_t *)*v10;
      if ((v13 & 1) != 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else
  {
LABEL_2:
    v13 = 1;
    v14 = v12;
    if (v12)
      goto LABEL_25;
  }
  v15 = 0;
  if ((v13 & 1) != 0)
    goto LABEL_4;
LABEL_26:
  if (v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
LABEL_4:
  if (!v15)
  {
    v16 = **(_QWORD **)(a1 + 8);
    if ((v16 & 2) != 0)
    {
      LODWORD(v16) = -1;
    }
    else if ((v16 & 1) != 0)
    {
      LODWORD(v16) = *(_DWORD *)((v16 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v16 >>= 36;
    }
    JSC::CallLinkStatus::computeFor((unint64_t)&v40, **(_QWORD **)(a1 + 16), v16, *(uint64_t **)(a1 + 24), **(unsigned __int16 **)(a1 + 32), a6, a7, a8);
    JSC::CallLinkStatus::merge((uint64_t)a2, (uint64_t)&v40, v17, v18, v19, v20, v21, v22);
    v30 = v40;
    if (&v42 != (uint64_t *)v40)
    {
      if (v40)
      {
        v40 = 0;
        v41 = 0;
        WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
      }
    }
  }
}

uint64_t JSC::MarkedBlock::isMarked(uint64_t this, int a2, unint64_t a3)
{
  unint64_t v3;

  if (*(_DWORD *)(this + 32) != a2)
    return 0;
  v3 = ((a3 - this) >> 4);
  if (v3 < 0x400)
    return (*(_QWORD *)(this + ((v3 >> 3) & 0x1FFFFFF8) + 40) >> ((a3 - this) >> 4)) & 1;
  __break(1u);
  return this;
}

void WTF::VectorTypeOperations<JSC::CheckPrivateBrandVariant>::move(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  _QWORD *v10;

  if (a1 != a2)
  {
    v8 = (uint64_t *)a3;
    v10 = a1;
    do
    {
      *v8 = 0;
      if ((*v10 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v8, v10);
      else
        *v8 = *v10 & 0xFFFFFFFFFFFFFFFDLL;
      v8[1] = v10[1];
      if ((*v10 & 1) != 0)
        WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v8 += 2;
      v10 += 2;
    }
    while (v10 != a2);
  }
}

uint64_t *JSC::CheckPrivateBrandVariant::CheckPrivateBrandVariant(uint64_t *a1, _QWORD *a2)
{
  *a1 = 0;
  if ((*a2 & 1) != 0)
    WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(a1, a2);
  else
    *a1 = *a2 & 0xFFFFFFFFFFFFFFFDLL;
  a1[1] = a2[1];
  return a1;
}

uint64_t WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(uint64_t **)WTF::VectorBuffer<JSC::CheckPrivateBrandVariant,1ul,WTF::FastMalloc>::VectorBuffer(a1, *(unsigned int *)(a2 + 12), *(_DWORD *)(a2 + 12));
  if (v4)
  {
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)a2;
      v7 = 16 * v5;
      do
      {
        v4 = JSC::CheckPrivateBrandVariant::CheckPrivateBrandVariant(v4, v6) + 2;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  return a1;
}

uint64_t WTF::VectorBuffer<JSC::CheckPrivateBrandVariant,1ul,WTF::FastMalloc>::VectorBuffer(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = result;
  *(_QWORD *)result = result + 16;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = a3;
  if (a2 < 2)
    return v3;
  v4 = a2;
  if (!(a2 >> 28))
  {
    v5 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = v5;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;

  if (a2 != (unsigned int *)a1)
  {
    v10 = *(unsigned int *)(a1 + 12);
    v11 = a2[3];
    if (v10 <= v11)
    {
      v14 = v11 > *(_DWORD *)(a1 + 8);
      LODWORD(v11) = *(_DWORD *)(a1 + 12);
      if (v14)
      {
        WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0, a3, a4, a5, a6, a7, a8);
        WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3], v15, v16, v17, v18, v19, v20);
        LODWORD(v11) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v12 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v13 = 16 * v10 - 16 * v11;
      do
      {
        if ((*v12 & 1) != 0)
          WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
      *(_DWORD *)(a1 + 12) = v11;
    }
    v21 = *(uint64_t **)a2;
    v22 = *(uint64_t **)a1;
    if ((_DWORD)v11)
    {
      v23 = 16 * v11;
      do
      {
        if (v21 != v22)
        {
          if ((*v22 & 1) != 0)
            WTF::fastFree(*v22 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v24 = *v21;
          if ((*v21 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v22, v21);
          }
          else
          {
            v25 = v24 & 0xFFFFFFFFFFFFFFFDLL;
            v26 = v24 | 2;
            if ((*(_BYTE *)v22 & 2) == 0)
              v26 = v25;
            *v22 = v26;
          }
        }
        v22[1] = v21[1];
        v21 += 2;
        v22 += 2;
        v23 -= 16;
      }
      while (v23);
      v21 = *(uint64_t **)a2;
      v27 = *(_DWORD *)(a1 + 12);
      v22 = *(uint64_t **)a1;
    }
    else
    {
      v27 = 0;
    }
    v28 = a2[3];
    if (v27 != (_DWORD)v28)
    {
      v29 = &v22[2 * v27];
      v30 = &v21[2 * v27];
      v31 = 16 * v28 - 16 * v27;
      do
      {
        *v29 = 0;
        if ((*v30 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v29, v30);
        else
          *v29 = *v30 & 0xFFFFFFFFFFFFFFFDLL;
        v29[1] = v30[1];
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      v27 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v27;
  }
  return a1;
}

void WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * (_QWORD)a2);
    v12 = 16 * v10 - 16 * (_QWORD)a2;
    do
    {
      if ((*v11 & 1) != 0)
        WTF::fastFree(*v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v11 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

void WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) > (unint64_t)a2)
  {
    if (*(unsigned int *)(a1 + 12) > (unint64_t)a2)
      WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD **)a1;
    if (a2)
    {
      v11 = *(unsigned int *)(a1 + 12);
      WTF::VectorBuffer<JSC::CheckPrivateBrandVariant,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, (unint64_t)a2);
      a3 = *(_QWORD *)a1;
      if (*(_QWORD **)a1 != v10)
        WTF::VectorTypeOperations<JSC::CheckPrivateBrandVariant>::move(v10, &v10[2 * v11], a3, a4, a5, a6, a7, a8);
    }
    if ((_QWORD *)(a1 + 16) != v10 && v10 != 0)
    {
      if (*(_QWORD **)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
    if (!*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::CheckPrivateBrandVariant,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 >= 2)
  {
    if (a2 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v12 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_7;
    goto LABEL_9;
  }
  v12 = (uint64_t *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 1;
  if ((_DWORD)v11)
  {
LABEL_9:
    v13 = 16 * v11;
    v14 = (_QWORD *)v10;
    do
    {
      *v12 = 0;
      if ((*v14 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v12, v14);
      else
        *v12 = *v14 & 0xFFFFFFFFFFFFFFFDLL;
      v12[1] = v14[1];
      if ((*v14 & 1) != 0)
        WTF::fastFree(*v14 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
      v12 += 2;
      v14 += 2;
      v13 -= 16;
    }
    while (v13);
  }
LABEL_7:
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(uint64_t *a1, _QWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *v3;
  result = WTF::fastMalloc((WTF *)(8 * v4 + 8));
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = v4;
  *(_DWORD *)result = *v3;
  v6 = *v3;
  if ((_DWORD)v6)
  {
    v7 = v6 - 1;
    do
      *(_QWORD *)(result + 8 + 8 * v7) = *(_QWORD *)&v3[2 * v7 + 2];
    while ((unint64_t)v7--);
  }
  *a1 = *a1 & 2 | result | 1;
  return result;
}

uint64_t JSC::MarkedBlock::aboutToMark(JSC::MarkedBlock *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 8) != a2)
    JSC::MarkedBlock::aboutToMarkSlow(this, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

void std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *a1;
  *a1 = (unint64_t)a2;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v11 = *(unsigned int *)(v9 - 4);
      if ((_DWORD)v11)
      {
        v12 = *(WTF::StringImpl ***)(v8 + 16);
        do
        {
          v13 = *v12;
          if (*v12 != (WTF::StringImpl *)-1)
          {
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
              {
                WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
              }
              else
              {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          v12 += 3;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    v10 = *(_QWORD *)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::JSObject::getDirect(_DWORD *a1, JSC::VM *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;

  if ((a3 >> 4))
  {
    v8 = 16 * (*a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) == 0)
    {
      v10 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x58);
      if (v10
        || (v21 = *(_QWORD *)(v8 + 64)) != 0
        && (*(_BYTE *)(v21 + 5) == 1 || *(_DWORD *)(v21 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v8, a2, 1, a4, a5, a6, a7, a8), v10))
      {
        if (*(_DWORD *)(v10 + 24))
        {
          v11 = *(_QWORD *)(v10 + 16);
          v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
          v13 = *(unsigned int *)(v10 + 8);
          v14 = *(_DWORD *)(a3 + 16);
          if ((v11 & 1) != 0)
          {
            if ((v14 & 0x20) != 0)
              v14 = *(_DWORD *)(a3 + 32);
            v15 = *(_DWORD *)(v10 + 12);
            v16 = (v14 >> 8) & *(_QWORD *)&v15;
            v17 = *(unsigned __int8 *)(v12 + v16);
            if (*(_BYTE *)(v12 + v16))
            {
              v18 = v12 + v13;
              v19 = 1;
              do
              {
                v20 = *(_QWORD *)(v18 + 8 * (v17 - 1));
                if (a3 == (v20 & 0xFFFFFFFFFFFFLL))
                  break;
                v16 = ((_DWORD)v16 + v19) & v15;
                v17 = *(unsigned __int8 *)(v12 + v16);
                ++v19;
              }
              while (*(_BYTE *)(v12 + v16));
            }
          }
          else
          {
            if ((v14 & 0x20) != 0)
              v14 = *(_DWORD *)(a3 + 32);
            v22 = *(_DWORD *)(v10 + 12);
            v23 = v22 & (v14 >> 8);
            v24 = *(_DWORD *)(v12 + 4 * v23);
            if (v24)
            {
              v25 = v12 + 4 * v13;
              v26 = 1;
              do
              {
                if (*(_QWORD *)(v25 + 16 * (v24 - 1)) == a3)
                  break;
                v23 = (v23 + v26) & v22;
                v24 = *(_DWORD *)(v12 + 4 * v23);
                ++v26;
              }
              while (v24);
            }
          }
        }
      }
    }
  }
}

{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int i;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int j;
  uint64_t v29;

  if ((a3 >> 4))
  {
    v8 = 16 * (*a1 & 0xFFFFFFFE);
    if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) == 0)
    {
      v11 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x58);
      if (v11
        || (v22 = *(_QWORD *)(v8 + 64)) != 0
        && (*(_BYTE *)(v22 + 5) == 1 || *(_DWORD *)(v22 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)v8, a2, 1, a4, a5, a6, a7, a8), v11))
      {
        if (*(_DWORD *)(v11 + 24))
        {
          v12 = *(_QWORD *)(v11 + 16);
          v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          v14 = *(unsigned int *)(v11 + 8);
          v15 = *(_DWORD *)(a3 + 16);
          if ((v12 & 1) != 0)
          {
            if ((v15 & 0x20) != 0)
              v15 = *(_DWORD *)(a3 + 32);
            v16 = *(_DWORD *)(v11 + 12);
            v17 = (v15 >> 8) & *(_QWORD *)&v16;
            v18 = *(unsigned __int8 *)(v13 + v17);
            if (*(_BYTE *)(v13 + v17))
            {
              v19 = v13 + v14;
              for (i = 1; ; ++i)
              {
                v21 = *(_QWORD *)(v19 + 8 * (v18 - 1));
                if (a3 == (v21 & 0xFFFFFFFFFFFFLL))
                  break;
                v17 = ((_DWORD)v17 + i) & v16;
                v18 = *(unsigned __int8 *)(v13 + v17);
                if (!*(_BYTE *)(v13 + v17))
                  return;
              }
              v23 = (v21 >> 16) & 0xFF00000000 | HIBYTE(v21);
LABEL_19:
              if ((_DWORD)v23 != -1)
                *(_DWORD *)a4 = HIDWORD(v23);
            }
          }
          else
          {
            if ((v15 & 0x20) != 0)
              v15 = *(_DWORD *)(a3 + 32);
            v24 = *(_DWORD *)(v11 + 12);
            v25 = v24 & (v15 >> 8);
            v26 = *(_DWORD *)(v13 + 4 * v25);
            if (v26)
            {
              v27 = v13 + 4 * v14;
              for (j = 1; ; ++j)
              {
                v29 = (v26 - 1);
                if (*(_QWORD *)(v27 + 16 * v29) == a3)
                  break;
                v25 = (v25 + j) & v24;
                v26 = *(_DWORD *)(v13 + 4 * v25);
                if (!v26)
                  return;
              }
              v23 = *(unsigned int *)(v27 + 16 * v29 + 8) | ((unint64_t)*(unsigned __int8 *)(v27 + 16 * v29 + 12) << 32);
              goto LABEL_19;
            }
          }
        }
      }
    }
  }
}

void JSC::PropertyNameArray::~PropertyNameArray(JSC::PropertyNameArray *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v9 = *((_QWORD *)this + 1);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v11 = *(unsigned int *)(v10 + 20);
      if ((_DWORD)v11)
      {
        v12 = *(WTF::StringImpl ***)(v10 + 8);
        v13 = 8 * v11;
        do
        {
          v14 = *v12;
          *v12 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v23 = *(_QWORD *)(v10 + 8);
      if (v10 + 24 != v23 && v23 != 0)
      {
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = 0;
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
}

void JSC::`anonymous namespace'::PutToScopeFireDetail::~PutToScopeFireDetail(JSC::_anonymous_namespace_::PutToScopeFireDetail *this)
{
  JUMPOUT(0x19AEBAEF0);
}

uint64_t JSC::`anonymous namespace'::PutToScopeFireDetail::dump(JSC::_anonymous_namespace_::PutToScopeFireDetail *this, WTF::PrintStream *a2)
{
  JSC::Identifier *v3;
  WTF::PrintStream *v4;
  WTF *v6;

  v3 = (JSC::Identifier *)*((_QWORD *)this + 2);
  v6 = *(WTF **)(*((_QWORD *)this + 1) + 64);
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "Linking put_to_scope in ");
  JSC::FunctionExecutableDump::dump(&v6, v4);
  WTF::PrintStream::printf(v4, "%s", " for ");
  JSC::Identifier::dump(v3, v4);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::StructureShape **v13;
  uint64_t v14;
  JSC::StructureShape *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  do
  {
    v9 = __ldaxr((unsigned int *)this);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)this));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)this);
    v11 = *((_QWORD *)this + 3);
    if ((v11 & 1) != 0)
      WTF::fastFree(v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((unsigned int *)this + 5);
    if ((_DWORD)v12)
    {
      v13 = (JSC::StructureShape **)*((_QWORD *)this + 1);
      v14 = 8 * v12;
      do
      {
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
          {
            JSC::StructureShape::~StructureShape(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
          }
          else
          {
            --*(_DWORD *)v15;
          }
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
    }
    v24 = *((_QWORD *)this + 1);
    if (v24)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::StructureShape::~StructureShape(JSC::StructureShape *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  JSC::StructureShape *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    v11 = *v10;
    *v10 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::StructureShape *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
    {
      JSC::StructureShape::~StructureShape(v12);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      --*(_DWORD *)v12;
    }
  }
  v13 = *((_QWORD *)this + 2);
  if (v13)
  {
    v15 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v15)
    {
      v16 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v17 = *v16;
        if (*v16 != (WTF::StringImpl *)-1)
        {
          *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    v26 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v26)
    {
      v27 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v28 = *v27;
        if (*v27 != (WTF::StringImpl *)-1)
        {
          *v27 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
            {
              WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
            }
            else
            {
              *(_DWORD *)v28 -= 2;
            }
          }
        }
        ++v27;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder::~LazyValueProfileHolder(JSC::CompressedLazyValueProfileHolder::LazyValueProfileHolder *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v9 = (unint64_t *)*((_QWORD *)this + 6);
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = 0;
      do
      {
        v12 = &v9[v11];
        v13 = v12[1];
        v12[1] = 0;
        if (v13)
        {
          WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
          v10 = *v9;
        }
        ++v11;
      }
      while (v11 < v10);
    }
  }
  v14 = (unint64_t *)*((_QWORD *)this + 7);
  v15 = *((unsigned int *)this + 17);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      v17 = *v14++;
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      v16 -= 8;
    }
    while (v16);
    v14 = (unint64_t *)*((_QWORD *)this + 7);
  }
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = (unint64_t *)*((_QWORD *)this + 1);
  if (v18)
  {
    v21 = *v18;
    if (*v18)
    {
      v22 = 0;
      do
      {
        v23 = &v18[v22];
        v24 = v23[1];
        v23[1] = 0;
        if (v24)
        {
          WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
          v21 = *v18;
        }
        ++v22;
      }
      while (v22 < v21);
    }
  }
  v19 = (unint64_t *)*((_QWORD *)this + 2);
  v20 = *((unsigned int *)this + 7);
  if (!(_DWORD)v20)
  {
    if (!v19)
      return;
LABEL_26:
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v25 = 8 * v20;
  do
  {
    v26 = *v19++;
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
    v25 -= 8;
  }
  while (v25);
  v19 = (unint64_t *)*((_QWORD *)this + 2);
  if (v19)
    goto LABEL_26;
}

uint64_t WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 2)
  {
    v16 = (_QWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v14 >> 29))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      v18 = (uint64_t *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 8;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::CallVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 2)
  {
    v15 = (_QWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 1;
    goto LABEL_11;
  }
  if (!(v11 >> 29))
  {
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v17 = (uint64_t *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 8;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::CheckPrivateBrandVariant::overlaps(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;

  v2 = a1[1];
  v3 = a2[1];
  if ((v2 != 0) != (v3 != 0))
    return 1;
  if (!v2)
    return WTF::TinyPtrSet<JSC::Structure *>::overlaps(a1, a2);
  if ((v2 & 1) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (!v3)
      goto LABEL_8;
  }
  if ((v3 & 1) != 0)
    v3 &= ~1uLL;
  else
    v3 = *(_QWORD *)(v3 + 8);
LABEL_8:
  if (v5 != v3)
    return 0;
  return WTF::TinyPtrSet<JSC::Structure *>::overlaps(a1, a2);
}

BOOL WTF::TinyPtrSet<JSC::Structure *>::overlaps(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v6 = *a2;
    if ((*a2 & 1) != 0)
    {
      v17 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
      if ((_DWORD)v18)
      {
        v19 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = v17 + 8;
          v23 = *(_QWORD *)(v19 + 8);
          v24 = v19 + 16;
          while (1)
          {
            v25 = *(_QWORD *)(v22 + 8 * v21);
            if (v23 == v25)
              return 1;
            v26 = 0;
            while (v20 - 1 != v26)
            {
              v27 = *(_QWORD *)(v24 + 8 * v26++);
              if (v27 == v25)
              {
                if (v26 < v20)
                  return 1;
                break;
              }
            }
            result = 0;
            if (++v21 == v18)
              return result;
          }
        }
      }
    }
    else
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      if (v7)
      {
        v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
        v9 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
        if ((_DWORD)v9)
        {
          if (*(_QWORD *)(v8 + 8) != v7)
          {
            v10 = 0;
            v11 = v8 + 16;
            while (v9 - 1 != v10)
            {
              v12 = *(_QWORD *)(v11 + 8 * v10++);
              if (v12 == v7)
                goto LABEL_31;
            }
            v10 = v9;
LABEL_31:
            v28 = v10 >= v9;
            return !v28;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v3)
    return 0;
  v4 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a2 & 1) == 0)
    return v4 == (unsigned int *)v3;
  v13 = *v4;
  if (!(_DWORD)v13)
    return 0;
  if (*((_QWORD *)v4 + 1) == v3)
    return 1;
  v14 = 0;
  v15 = v4 + 4;
  while (v13 - 1 != v14)
  {
    v16 = *(_QWORD *)&v15[2 * v14++];
    if (v16 == v3)
      goto LABEL_37;
  }
  v14 = v13;
LABEL_37:
  v28 = v14 >= v13;
  return !v28;
}

uint64_t *WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::CheckPrivateBrandVariant const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  int v13;

  v9 = (_QWORD *)WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  result = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  *result = 0;
  if ((*v9 & 1) != 0)
  {
    result = (uint64_t *)WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(result, v9);
    v13 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    *result = *v9 & 0xFFFFFFFFFFFFFFFDLL;
    v13 = v10;
  }
  *(_QWORD *)(v11 + 16 * v10 + 8) = v9[1];
  *(_DWORD *)(a1 + 12) = v13 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::CheckPrivateBrandVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::TinyPtrSet<JSC::Structure *>::filter(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((*a2 & 1) != 0)
  {
    v17 = a2;
    WTF::TinyPtrSet<JSC::Structure *>::genericFilter<WTF::TinyPtrSet<JSC::Structure *>::filter(WTF::TinyPtrSet<JSC::Structure *> const&)::{lambda(JSC::Structure *)#1}>(a1, &v17, a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = *a1;
  v11 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v11)
  {
    if ((v10 & 1) == 0)
      goto LABEL_19;
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
LABEL_18:
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    v10 = *a1;
    goto LABEL_19;
  }
  v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v10 & 1) != 0)
  {
    v14 = *v12;
    if ((_DWORD)v14)
    {
      if (*((_QWORD *)v12 + 1) == v11)
      {
LABEL_15:
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        v10 = *a1;
        goto LABEL_5;
      }
      v15 = 0;
      while (v14 - 1 != v15)
      {
        v16 = *(_QWORD *)&v12[2 * v15++ + 4];
        if (v16 == v11)
        {
          if (v15 >= v14)
            goto LABEL_18;
          goto LABEL_15;
        }
      }
    }
    goto LABEL_18;
  }
  if (v12 != (unsigned int *)v11)
  {
LABEL_19:
    v13 = v10 & 2;
    goto LABEL_6;
  }
LABEL_5:
  *a1 = v10 & 2;
  v13 = *a2 & 0xFFFFFFFFFFFFFFFCLL | v10 & 2;
LABEL_6:
  *a1 = v13;
}

void WTF::TinyPtrSet<JSC::Structure *>::genericFilter<WTF::TinyPtrSet<JSC::Structure *>::filter(WTF::TinyPtrSet<JSC::Structure *> const&)::{lambda(JSC::Structure *)#1}>(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int *v25;

  v9 = *a1;
  v10 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v9 & 1) != 0)
  {
    v11 = *v10;
    if (!*v10)
      goto LABEL_14;
    v12 = 0;
    v13 = v10 + 2;
    while (1)
    {
      v14 = (unsigned int *)(**a2 & 0xFFFFFFFFFFFFFFFCLL);
      v15 = *v14;
      if (!(_DWORD)v15)
        goto LABEL_10;
      v16 = *(_QWORD *)&v13[2 * v12];
      if (*((_QWORD *)v14 + 1) != v16)
        break;
LABEL_11:
      if (++v12 >= v11)
      {
        if (v11)
          return;
LABEL_14:
        WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
        v9 = *a1;
LABEL_15:
        *a1 = v9 & 2;
        return;
      }
    }
    v17 = 0;
    v18 = v14 + 4;
    while (v15 - 1 != v17)
    {
      v19 = *(_QWORD *)&v18[2 * v17++];
      if (v19 == v16)
      {
        if (v17 < v15)
          goto LABEL_11;
        break;
      }
    }
LABEL_10:
    v20 = v12;
    *v10 = --v11;
    --v12;
    *(_QWORD *)&v13[2 * v20] = *(_QWORD *)&v13[2 * v11];
    goto LABEL_11;
  }
  if (v10)
  {
    v21 = (unsigned int *)(**a2 & 0xFFFFFFFFFFFFFFFCLL);
    v22 = *v21;
    if (!(_DWORD)v22)
      goto LABEL_15;
    if (*((unsigned int **)v21 + 1) != v10)
    {
      v23 = 0;
      v24 = v21 + 4;
      do
      {
        if (v22 - 1 == v23)
          goto LABEL_15;
        v25 = *(unsigned int **)&v24[2 * v23++];
      }
      while (v25 != v10);
      if (v23 >= v22)
        goto LABEL_15;
    }
  }
}

BOOL WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(uint64_t *a1, _QWORD *a2)
{
  unsigned int *v3;
  unint64_t v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if (*v3 >= 2)
  {
    if ((*a1 & 1) != 0)
      goto LABEL_3;
    v7 = (unint64_t)*a1 <= 3 ? *v3 : *v3 + 1;
    v8 = WTF::fastMalloc((WTF *)(8 * v7 + 8));
    *(_DWORD *)v8 = 0;
    *(_DWORD *)(v8 + 4) = v7;
    v9 = *a1;
    v10 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
    if (v10)
    {
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = v10;
    }
    *a1 = v9 & 2 | v8 | 1;
    if (*v3)
    {
LABEL_3:
      v4 = 0;
      v5 = 0;
      do
        v5 |= WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a1, *(_QWORD *)&v3[2 * v4++ + 2]);
      while (v4 < *v3);
      return v5 & 1;
    }
LABEL_12:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v11 = *((_QWORD *)v3 + 1);
  v12 = *a1;
  if ((*a1 & 1) == 0)
  {
    if (v11 != (v12 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v14 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v14 = 0x400000002;
        v15 = *a1;
        *(_QWORD *)(v14 + 8) = *a1 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v14 + 16) = v11;
        v13 = v15 & 2 | v14 | 1;
      }
      else
      {
        v13 = *a1 & 2 | v11;
      }
      *a1 = v13;
      LOBYTE(v5) = 1;
      return v5 & 1;
    }
    goto LABEL_12;
  }
  return WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a1, v11);
}

void JSC::CacheableIdentifier::visitAggregate<JSC::SlotVisitor>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v13;

  if (!a1)
    return;
  v8 = a1;
  if ((a1 & 1) != 0)
    return;
  if ((a1 & 8) != 0)
  {
    if ((*(_BYTE *)(a1 - 79) & 1) != 0)
    {
      v8 = a1;
      if (!*(_QWORD *)(a2 + 168))
        return;
    }
    else
    {
      v8 = a1;
    }
LABEL_9:
    JSC::SlotVisitor::appendSlow(a2, v8, 0, a4, a5, a6, a7, a8);
    return;
  }
  v9 = a1 & 0xFFFFFFFFFFFFC000;
  v10 = *(_DWORD *)(a2 + 132);
  if (*(_DWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 0x20) != v10)
  {
    v13 = a1 & 0xFFFFFFFFFFFFC000;
    v11 = a2;
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a1 & 0xFFFFFFFFFFFFC000), v10, a3, a4, a5, a6, a7, a8);
    v9 = v13;
    a2 = v11;
    v8 = a1;
  }
  if (((*(_QWORD *)(v9 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) == 0 || *(_QWORD *)(a2 + 168))
    goto LABEL_9;
}

void JSC::DFG::JITData::~JITData(JSC::DFG::JITData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  JSC::CallLinkInfo *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    v12 = v10 + 2;
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v13 = &v12[4 * v11];
      do
      {
        v14 = (unsigned int *)*((_QWORD *)v12 + 1);
        *((_QWORD *)v12 + 1) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v25)
  {
    v26 = (uint64_t *)(v25 + 2);
    v27 = *v25;
    if ((_DWORD)v27)
    {
      v28 = 24 * v27;
      do
      {
        v29 = (uint64_t *)v26[1];
        if (v29)
        {
          v30 = *v26;
          *v29 = *v26;
          *(_QWORD *)(v30 + 8) = v29;
          *v26 = 0;
          v26[1] = 0;
        }
        v26 += 3;
        v28 -= 24;
      }
      while (v28);
    }
    WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
  }
  v31 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v31)
  {
    v32 = (JSC::CallLinkInfo *)(v31 + 2);
    v33 = *v31;
    if ((_DWORD)v33)
    {
      v34 = 96 * v33;
      do
      {
        JSC::CallLinkInfo::~CallLinkInfo(v32, a2, a3, a4, a5, a6, a7, a8, a9);
        v32 = (JSC::CallLinkInfo *)(v35 + 96);
        v34 -= 96;
      }
      while (v34);
    }
    WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
  }
  v36 = *(unsigned int *)this;
  if ((_DWORD)v36)
  {
    v37 = -136 * v36;
    do
    {
      JSC::StructureStubInfo::~StructureStubInfo((JSC::DFG::JITData *)((char *)this + v37), a2, a3, a4, a5, a6, a7, a8, a9);
      v37 += 136;
    }
    while (v37);
  }
}

uint64_t WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 <= v2)
    return 1;
  if (v4 < 0xAAAAAAB)
  {
    v5 = result;
    v6 = *(_QWORD *)result;
    v7 = *(unsigned int *)(result + 12);
    v8 = 24 * v4;
    v9 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v5 = v9;
    if ((_DWORD)v7)
    {
      v17 = 24 * v7;
      v18 = v6;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v9 = v19;
        v9 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v6)
    {
      if (*(_QWORD *)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::OpCallDirectEval::OpCallDirectEval(uint64_t this, const unsigned int *a2)
{
  *(_DWORD *)this = *a2;
  *(_DWORD *)(this + 4) = a2[1];
  *(_DWORD *)(this + 8) = a2[2];
  *(_DWORD *)(this + 12) = a2[3];
  *(_DWORD *)(this + 16) = a2[4];
  *(_DWORD *)(this + 20) = a2[5];
  *(_BYTE *)(this + 24) = a2[6];
  *(_DWORD *)(this + 28) = a2[7];
  *(_DWORD *)(this + 32) = a2[8];
  return this;
}

void WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v9 = *a1;
  if (!*a1)
  {
    LODWORD(v10) = 0;
    v11 = 0;
    goto LABEL_3;
  }
  LODWORD(v10) = *(_DWORD *)(v9 - 4);
  v11 = *(_DWORD *)(v9 - 12);
  if (!(_DWORD)v10)
  {
LABEL_3:
    v12 = 8;
    goto LABEL_4;
  }
  v12 = (_DWORD)v10 << (6 * v11 >= (2 * v10));
LABEL_4:
  v13 = WTF::fastZeroedMalloc(8 * v12 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if ((_DWORD)v10)
  {
    v10 = v10;
    v21 = (void **)v9;
    do
    {
      v14 = *v21;
      if ((unint64_t)*v21 + 1 >= 2)
        WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::reinsert(*a1, (uint64_t)v14);
      ++v21;
      --v10;
    }
    while (v10);
    goto LABEL_13;
  }
  if (v9)
LABEL_13:
    WTF::fastFree(v9 - 16, v14, v15, v16, v17, v18, v19, v20);
}

_QWORD *WTF::HashTable<JSC::JSModuleEnvironment *,JSC::JSModuleEnvironment *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>,WTF::HashTraits<JSC::JSModuleEnvironment *>>::reinsert(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *result;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = 1;
  do
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 8 * v6);
    v6 = (v6 + v7++) & v2;
  }
  while (v9);
  result = (_QWORD *)(a1 + 8 * v8);
  *result = a2;
  return result;
}

uint64_t WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    *(_DWORD *)(*(_QWORD *)v3 + 4 * (*(_DWORD *)(v3 + 12))++) = *a2;
    return 1;
  }
  if (!(v8 >> 30))
  {
    v9 = *(const void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 4 * v5);
    if (v9)
    {
      if (*(const void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::dataLog<char [10],WTF::ASCIILiteral,char [24],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char *v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  char v12;
  char **v13;
  char *v14;
  int v15;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Clearing ");
  v5 = *(char **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
  {
    v9 = v6 - 1;
    if (!v6)
      v9 = 0;
    WTF::StringImpl::utf8ForCharacters(v5, v9, (uint64_t)&v14, v8);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 0;
    v14 = (char *)v10;
    v15 = 0;
  }
  WTF::printExpectedCStringHelper(v7, "StringView", &v14);
  if (v15 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v15])(&v13, &v14);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  WTF::PrintStream::printf(v4, "%s", " LLInt property access.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [49],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Clearing get_by_id_direct LLInt property access.");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [45],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Clearing LLInt set_private_brand transition.");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [16],WTF::ASCIILiteral,char [21],WTF::RawPointer,char [2],char [2]>(uint64_t a1, const void **a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  char v14;
  char **v15;
  char *v16;
  int v17;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "Clearing LLInt ");
  v7 = *(char **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  if (v7)
  {
    v11 = v8 - 1;
    if (!v8)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(v7, v11, (uint64_t)&v16, v10);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v16 = (char *)v12;
    v17 = 0;
  }
  WTF::printExpectedCStringHelper(v9, "StringView", &v16);
  if (v17 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v17])(&v15, &v16);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", " with cached callee ");
  WTF::PrintStream::printf(v6, "%p", *a2);
  WTF::PrintStream::printf(v6, "%s", ".");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [27],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Clearing dead symbolTable ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [38],WTF::RawPointer,char [2]>(const void **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Clearing scope access with structure ");
  WTF::PrintStream::printf(v4, "%p", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_DWORD *WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::computeBestTableSize(v2);
  return WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::rehash(a1, v3, 0);
}

_DWORD *WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  BOOL v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD *v37;
  unsigned int *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 24);
    do
    {
      *(v18 - 1) = 0xFFFFFFFF00000000;
      *v18 = 0;
      v18 += 2;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = v7;
    do
    {
      v22 = (int *)(v6 + 16 * v19);
      v23 = *v22;
      if (*v22 != 1)
      {
        v24 = v22[1];
        if (v23)
          v25 = 0;
        else
          v25 = v24 == -1;
        if (v25)
        {
          v52 = v6 + 16 * v19;
          v53 = *(unsigned int **)(v52 + 8);
          *(_QWORD *)(v52 + 8) = 0;
          if (v53)
          {
            v54 = (uint64_t *)(v53 + 2);
            v55 = *v53;
            if ((_DWORD)v55)
            {
              v56 = 56 * v55;
              do
              {
                v57 = (uint64_t *)v54[1];
                if (v57)
                {
                  v58 = *v54;
                  *v57 = *v54;
                  *(_QWORD *)(v58 + 8) = v57;
                  *v54 = 0;
                  v54[1] = 0;
                }
                v54 += 7;
                v56 -= 56;
              }
              while (v56);
            }
            WTF::fastFree((unint64_t)v53, v10, v11, v12, v13, v14, v15, v16);
          }
        }
        else
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = 9 * ((v24 + ~(v24 << 15)) ^ ((v24 + ~(v24 << 15)) >> 10));
          v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
          v30 = v27 & ((0xD7862706ELL * (unint64_t)(277951225 * v23 + 95187966 * (v29 ^ HIWORD(v29)))) >> 4);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = (_DWORD *)(v26 + 16 * v30);
            v30 = (v30 + v31++) & v27;
            if (*v33)
              v34 = 0;
            else
              v34 = v33[1] == -1;
          }
          while (!v34);
          v35 = v26 + 16 * v32;
          v38 = *(unsigned int **)(v35 + 8);
          v37 = (_QWORD *)(v35 + 8);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            v39 = (uint64_t *)(v36 + 2);
            v40 = *v36;
            if ((_DWORD)v40)
            {
              v41 = 56 * v40;
              do
              {
                v42 = (uint64_t *)v39[1];
                if (v42)
                {
                  v43 = *v39;
                  *v42 = *v39;
                  *(_QWORD *)(v43 + 8) = v42;
                  *v39 = 0;
                  v39[1] = 0;
                }
                v39 += 7;
                v41 -= 56;
              }
              while (v41);
            }
            WTF::fastFree((unint64_t)v36, v10, v11, v12, v13, v14, v15, v16);
          }
          *(_QWORD *)v33 = *(_QWORD *)v22;
          v44 = v6 + 16 * v19;
          v45 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          *v37 = v45;
          v46 = *(unsigned int **)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          if (v46)
          {
            v47 = (uint64_t *)(v46 + 2);
            v48 = *v46;
            if ((_DWORD)v48)
            {
              v49 = 56 * v48;
              do
              {
                v50 = (uint64_t *)v47[1];
                if (v50)
                {
                  v51 = *v47;
                  *v50 = *v47;
                  *(_QWORD *)(v51 + 8) = v50;
                  *v47 = 0;
                  v47[1] = 0;
                }
                v47 += 7;
                v49 -= 56;
              }
              while (v49);
            }
            WTF::fastFree((unint64_t)v46, v10, v11, v12, v13, v14, v15, v16);
          }
          if (v22 == a3)
            v20 = v33;
        }
      }
      ++v19;
    }
    while (v19 != v21);
  }
  else
  {
    v20 = 0;
  }
  if (v6)
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::HashTable<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashMap<std::tuple<JSC::StructureID,JSC::BytecodeIndex>,WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>,WTF::DefaultHash<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>,WTF::HashTraits<WTF::FixedVector<JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<JSC::StructureID,JSC::BytecodeIndex>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<JSC::CodeOrigin,WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeOrigin,JSC::ICStatus>>,JSC::CodeOriginApproximateHash,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeOrigin>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = v7;
  v9 = WTF::fastMalloc((WTF *)(((unint64_t)v7 << 6) | 0x10));
  if (v7)
  {
    v17 = v9 + 24;
    do
    {
      *(_QWORD *)(v17 - 8) = 2;
      *(_OWORD *)v17 = 0uLL;
      *(_OWORD *)(v17 + 16) = 0uLL;
      *(_OWORD *)(v17 + 32) = 0uLL;
      *(_QWORD *)(v17 + 48) = 0;
      v17 += 64;
      --v8;
    }
    while (v8);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    v20 = v5;
    while (1)
    {
      v21 = (uint64_t *)(v4 + (v18 << 6));
      v22 = *v21;
      v23 = (uint64_t *)(*v21 & 0xFFFFFFFF8);
      if (*v21 == 2 || (((*v21 & 0xFFFFFFFF8) != 0) & (v22 >> 1)) != 0)
        goto LABEL_19;
      if ((v22 & 2) != 0)
        break;
      if ((v22 & 1) != 0 && *(_DWORD *)((*v21 & 0xFFFFFFFF8) + 8) == -1)
        goto LABEL_42;
LABEL_13:
      v24 = *a1;
      if (*a1)
        v25 = *(_DWORD *)(v24 - 8);
      else
        v25 = 0;
      v26 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)(v4 + (v18 << 6)), 0, v11, v12, v13, v14, v15, v16) & v25;
      v27 = *(_QWORD *)(v24 + (v26 << 6));
      if (v27 == 2)
        goto LABEL_16;
      v35 = 1;
      while ((v27 & 2) != 0)
      {
        v36 = (_QWORD *)(v27 & 0xFFFFFFFF8);
        if ((v27 & 1) != 0)
          goto LABEL_44;
        if (!v36)
          goto LABEL_16;
LABEL_24:
        v26 = ((_DWORD)v26 + v35) & v25;
        v27 = *(_QWORD *)(v24 + ((unint64_t)v26 << 6));
        ++v35;
        if (v27 == 2)
          goto LABEL_16;
      }
      if ((v27 & 1) == 0)
        goto LABEL_24;
      v36 = (_QWORD *)(v27 & 0xFFFFFFFF8);
      if (*(_DWORD *)((v27 & 0xFFFFFFFF8) + 8) != -1)
        goto LABEL_24;
LABEL_44:
      if (*v36)
        goto LABEL_24;
      v39 = v26;
      if ((v27 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v27 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
      v26 = v39;
LABEL_16:
      v28 = v24 + (v26 << 6);
      v29 = *v21;
      *v21 = 0;
      *(_QWORD *)v28 = v29;
      v30 = v4 + (v18 << 6);
      v31 = *(_OWORD *)(v30 + 8);
      v32 = *(_OWORD *)(v30 + 24);
      v33 = *(_OWORD *)(v30 + 40);
      *(_QWORD *)(v28 + 56) = *(_QWORD *)(v30 + 56);
      *(_OWORD *)(v28 + 40) = v33;
      *(_OWORD *)(v28 + 24) = v32;
      *(_OWORD *)(v28 + 8) = v31;
      v34 = *v21;
      if ((*v21 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v34 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
      if (v21 == a2)
        v19 = v28;
LABEL_19:
      if (++v18 == v20)
      {
LABEL_36:
        WTF::fastFree(v4 - 16, v10, v11, v12, v13, v14, v15, v16);
        return v19;
      }
    }
    v37 = *v21 & 0xFFFFFFFF8;
    if ((v22 & 1) != 0)
LABEL_42:
      v37 = *v23;
    if (!v37)
    {
      if ((v22 & 1) != 0 && v23)
        WTF::fastFree((unint64_t)v23, v10, v11, v12, v13, v14, v15, v16);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  v19 = 0;
  result = 0;
  if (v4)
    goto LABEL_36;
  return result;
}

_DWORD *WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 4 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 30))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 4 * v10;
      v20 = (_DWORD *)v11;
      v21 = (int *)v5;
      do
      {
        v22 = *v21++;
        *v20++ = v22;
        v19 -= 4;
      }
      while (v19);
    }
    if (v5)
    {
      if (v11 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 30))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 4 * v8;
      v18 = (_DWORD *)v9;
      v19 = (int *)v7;
      do
      {
        v20 = *v19++;
        *v18++ = v20;
        v17 -= 4;
      }
      while (v17);
    }
    if (v7)
    {
      if (v9 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::PrintStream::printImpl<char [8],JSC::Profiler::JettisonReason,char [14],BOOL,char [12],WTF::PointerDump<JSC::FireDetail>>(WTF::PrintStream *a1, int *a2, _BYTE *a3, _QWORD *a4)
{
  uint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  const char *v11;
  WTF::PrintStream *v12;
  uint64_t result;
  WTF::PrintStream *v14;

  WTF::PrintStream::printf(a1, "%s", "due to ");
  v8 = *a2;
  if (v8 >= 0xB)
  {
    result = 72;
    __break(0xC471u);
  }
  else
  {
    v9 = off_1E3580FE0[v8];
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v10, "%s", v9);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    WTF::PrintStream::printf(a1, "%s", ", counting = ");
    if (*a3)
      v11 = "true";
    else
      v11 = "false";
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v12, "%s", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    WTF::PrintStream::printf(a1, "%s", ", detail = ");
    if (*a4)
    {
      return (*(uint64_t (**)(_QWORD, WTF::PrintStream *))(*(_QWORD *)*a4 + 16))(*a4, a1);
    }
    else
    {
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printf(v14, "%s", "(null)");
      return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    }
  }
  return result;
}

uint64_t WTF::dataLog<char [25],WTF::PointerDump<JSC::CodeBlock>,char [5],JSC::CodeBlock,char [2]>(const char *a1, uint64_t *a2, const char *a3, uint64_t a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  if (*a2)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a2);
  }
  else
  {
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
    WTF::PrintStream::printf(v13, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  }
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::CodeBlock::dumpAssumingJITType(a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(uint64_t a1, const char *a2, double *a3, const char *a4, double *a5, const char *a6, _DWORD *a7, const char *a8)
{
  unint64_t v16;
  uint64_t v17;
  WTF::PrintStream *v18;
  char v20;
  char **v21;
  char *v22;

  v16 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v16 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v17 = WTF::s_file;
  v18 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v18, "%s", a2);
  WTF::PrintStream::printf(v18, "%lf", *a3);
  WTF::PrintStream::printf(v18, "%s", a4);
  WTF::PrintStream::printf(v18, "%lf", *a5);
  WTF::PrintStream::printf(v18, "%s", a6);
  WTF::PrintStream::printf(v18, "%d", *a7);
  WTF::PrintStream::printf(v18, "%s", a8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [30],char [2]>(uint64_t a1, const char *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v8, "%s", a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [31],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", ": Not optimizing anytime soon.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [43],JSC::JITType,char [2]>(uint64_t a1, const char *a2, unsigned __int8 *a3, const char *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v10, "%s", a2);
  WTF::printInternal((uint64_t)v10, *a3);
  WTF::PrintStream::printf(v10, "%s", a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<char [24],JSC::CodeBlock,char [4],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Considering optimizing ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "...");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void WTF::toCString<char [25],double,char [4],double,char [7],unsigned int,char [2],unsigned int>(uint64_t *a1, double *a2, double *a3, _DWORD *a4, _DWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(WTF::StringPrintStream *__hidden);
  _BYTE *v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = off_1E3572250;
  v23 = v25;
  v24 = xmmword_199122F80;
  v25[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "insufficient profiling (");
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%lf", *a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", " / ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%lf", *a3);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", ") for ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%u", *a4);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", " ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%u", *a5);
  v22[5]((WTF::StringPrintStream *)&v22);
  v18 = v23;
  v17 = v24;
  *a1 = 0;
  if (!v18)
  {
    v21 = 0;
LABEL_6:
    WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  if (v17 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198173F44);
  }
  v19 = WTF::fastMalloc((WTF *)(v17 + 17));
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  *a1 = v19;
  v20 = v19 + 16;
  memcpy((void *)(v19 + 16), v18, v17);
  *(_BYTE *)(v20 + v17) = 0;
  v21 = (unint64_t)v23;
  if (v23 != v25)
    goto LABEL_6;
}

void JSC::CodeBlockJettisoningWatchpoint::fireInternal(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  const void *v20;

  v11 = *(unsigned int *)(a1 + 17);
  v12 = v11 | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32);
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) == 0 && (*(_BYTE *)(v12 - 80) & 1) == 0)
      return;
  }
  else
  {
    v13 = *(_QWORD *)(v12 & 0xFFFFFFC000);
    if (*(_BYTE *)(v13 + 10))
    {
      v14 = *(_QWORD *)(v13 + 24);
      v17 = *(_QWORD **)(v14 + 104);
      v16 = (_QWORD *)(v14 + 104);
      v15 = v17;
      if (v17 != v16)
      {
        v18 = 0;
        do
        {
          v19 = (_QWORD *)*v15;
          v18 |= JSC::FreeList::contains(v15 + 3, v12);
          v15 = v19;
        }
        while (v19 != v16);
        if ((_BYTE)v18)
          return;
      }
    }
    else if ((JSC::MarkedBlock::Handle::isLive(v13, v12, a4, a5, a6, a7, a8, a9) & 1) == 0)
    {
      return;
    }
  }
  if (HIBYTE(word_1ECF4C286) || BYTE1(dword_1ECF4C28A))
  {
    v20 = (const void *)a1;
    WTF::dataLog<char [19],WTF::RawPointer,char [5],JSC::CodeBlock,char [2]>("Firing watchpoint ", &v20, " on ", *(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32), "\n");
  }
  JSC::CodeBlock::jettison(*(unsigned int *)(a1 + 17) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 32), 8u, 1, a4, a2, a6, a7, a8, a9);
}

uint64_t WTF::dataLog<char [19],WTF::RawPointer,char [5],JSC::CodeBlock,char [2]>(const char *a1, const void **a2, const char *a3, uint64_t a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%p", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  JSC::CodeBlock::dumpAssumingJITType(a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t JSC::CodeOrigin::isApproximatelyEqualTo(JSC::CodeOrigin *this, const JSC::CodeOrigin *a2, JSC::InlineCallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  JSC::InlineCallFrame **v12;
  JSC::InlineCallFrame *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  JSC::InlineCallFrame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  JSC::InlineCallFrame *v33;
  char v34;
  JSC::InlineCallFrame *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::InlineCallFrame *v39;
  JSC::InlineCallFrame *v40;
  const JSC::CodeOrigin *v41;
  uint64_t v42;
  JSC::InlineCallFrame *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::InlineCallFrame *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;

  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v24 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v25 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v40 = a3;
      v41 = a2;
      v42 = WTF::fastMalloc((WTF *)0x10);
      a2 = v41;
      a3 = v40;
      *(_QWORD *)v42 = v24;
      *(_DWORD *)(v42 + 8) = v25;
      v27 = 1;
      v24 = v42;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v8 = v24 | v27;
  }
  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v28 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v29 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v43 = a3;
      v44 = WTF::fastMalloc((WTF *)0x10);
      a3 = v43;
      *(_QWORD *)v44 = v28;
      *(_DWORD *)(v44 + 8) = v29;
      v31 = 1;
      v28 = v44;
    }
    else
    {
      v31 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v28 = v29 << 36;
    }
    v9 = v28 | v31;
  }
  if ((v8 & 2) != 0)
  {
    v18 = (v9 >> 1) & 1;
  }
  else
  {
    if ((v9 & 2) == 0)
    {
      while (1)
      {
        if ((v8 & 2) != 0)
        {
          LODWORD(v10) = -1;
        }
        else if ((v8 & 1) != 0)
        {
          LODWORD(v10) = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v10 = v8 >> 36;
        }
        if ((v9 & 2) != 0)
        {
          LODWORD(v11) = -1;
        }
        else if ((v9 & 1) != 0)
        {
          LODWORD(v11) = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v11 = v9 >> 36;
        }
        if ((_DWORD)v10 != (_DWORD)v11)
          break;
        v12 = (JSC::InlineCallFrame **)(v8 & 0xFFFFFFFF8);
        v13 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
        if ((v8 & 1) != 0)
          v13 = *v12;
        v14 = (uint64_t *)(v9 & 0xFFFFFFFF8);
        v15 = v9 & 0xFFFFFFFF8;
        if ((v9 & 1) != 0)
          v15 = *v14;
        if (v13)
          v16 = v13 == a3;
        else
          v16 = 1;
        v17 = !v16;
        if (v16 || !v15)
        {
          v18 = v17 ^ (v15 != 0) ^ 1u;
          goto LABEL_38;
        }
        if (*((_QWORD *)v13 + 1) != *(_QWORD *)(v15 + 8))
          break;
        if ((v8 & 1) != 0 && v12)
        {
          v49 = v9 & 0xFFFFFFFF8;
          v32 = v8 & 0xFFFFFFFF8;
          v33 = a3;
          v34 = v9;
          v35 = v13;
          WTF::fastFree(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v13 = v35;
          LOBYTE(v9) = v34;
          v14 = (uint64_t *)v49;
          a3 = v33;
        }
        v8 = *((_QWORD *)v13 + 2);
        if ((v8 & 1) != 0)
        {
          v48 = v9;
          v50 = v14;
          v47 = a3;
          v36 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
          if ((v8 & 2) != 0
            || (v37 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v37 == 0x3FFFFFFF)
            || (_DWORD)v37 == -1)
          {
            v38 = 2;
          }
          else if (v37 >> 28)
          {
            v46 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v46 = v36;
            *(_DWORD *)(v46 + 8) = v37;
            v38 = 1;
            v36 = v46;
          }
          else
          {
            v38 = v36;
            v36 = v37 << 36;
          }
          v8 = v36 | v38;
          a3 = v47;
          LOBYTE(v9) = v48;
          v14 = v50;
        }
        if ((v9 & 1) != 0 && v14)
        {
          v39 = a3;
          WTF::fastFree((unint64_t)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          a3 = v39;
        }
        v9 = *(_QWORD *)(v15 + 16);
        if ((v9 & 1) != 0)
        {
          v19 = a3;
          v20 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
          if ((v9 & 2) != 0
            || (v21 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v21 == 0x3FFFFFFF)
            || (_DWORD)v21 == -1)
          {
            v22 = 2;
          }
          else if (v21 >> 28)
          {
            v45 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v45 = v20;
            *(_DWORD *)(v45 + 8) = v21;
            v22 = 1;
            v20 = v45;
          }
          else
          {
            v22 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
            v20 = v21 << 36;
          }
          v9 = v20 | v22;
          a3 = v19;
        }
      }
    }
    v18 = 0;
  }
LABEL_38:
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v8 & 1) != 0 && (v8 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v8 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return v18;
}

uint64_t JSC::CodeOrigin::approximateHash(JSC::CodeOrigin *this, JSC::InlineCallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  JSC::InlineCallFrame *v11;
  char i;
  JSC::InlineCallFrame *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  JSC::InlineCallFrame *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  JSC::InlineCallFrame *v41;
  uint64_t v42;
  JSC::InlineCallFrame *v43;

  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 3) != 0)
  {
    v43 = a2;
    if ((v8 & 2) != 0)
      return 0;
    if ((v8 & 1) != 0)
    {
      v24 = v8 & 0xFFFFFFFF8;
      v25 = *(_QWORD *)v24;
      v26 = *(unsigned int *)(v24 + 8);
      if ((_DWORD)v26 == -1 || (_DWORD)v26 == 0x3FFFFFFF)
      {
        v28 = *(_QWORD *)v24;
        v25 = 2;
      }
      else if (v26 >> 28)
      {
        v28 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v28 = v25;
        *(_DWORD *)(v28 + 8) = v26;
        v25 = 1;
      }
      else
      {
        v28 = v26 << 36;
      }
      v8 = v28 | v25;
    }
    v14 = 2;
    while (1)
    {
      if ((v8 & 2) != 0)
      {
        v10 = (v14 - 1);
        v11 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
        if ((v8 & 1) == 0)
        {
          if (!v11 || v11 == v43)
            return v10;
          v16 = 1;
          v15 = (uint64_t)v11;
          goto LABEL_15;
        }
      }
      else
      {
        if ((v8 & 1) == 0)
        {
          v10 = v14 + (v8 >> 36);
          v15 = v8 & 0xFFFFFFFF8;
          if ((v8 & 0xFFFFFFFF8) == 0 || (JSC::InlineCallFrame *)v15 == v43)
            return v10;
          v16 = 1;
          v11 = (JSC::InlineCallFrame *)v15;
          goto LABEL_15;
        }
        v11 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
        v10 = (*(_DWORD *)((v8 & 0xFFFFFFFF8) + 8) + v14);
      }
      v15 = *(_QWORD *)v11;
      if (*(_QWORD *)v11)
        v29 = v15 == (_QWORD)v43;
      else
        v29 = 1;
      if (v29)
      {
LABEL_67:
        if (v11)
          WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
        return v10;
      }
      v16 = 0;
LABEL_15:
      v17 = *(_QWORD *)(v15 + 8);
      if (!v16 && v11)
        WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
      v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v14 = v10 + ((v20 >> 31) ^ v20);
      v8 = *(_QWORD *)(v15 + 16);
      if ((v8 & 1) != 0)
      {
        v21 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
        if ((v8 & 2) != 0
          || (v22 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v22 == -1)
          || (_DWORD)v22 == 0x3FFFFFFF)
        {
          v23 = 2;
        }
        else if (v22 >> 28)
        {
          v30 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v30 = v21;
          *(_DWORD *)(v30 + 8) = v22;
          v23 = 1;
          v21 = v30;
        }
        else
        {
          v23 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
          v21 = v22 << 36;
        }
        v8 = v21 | v23;
      }
    }
  }
  v9 = 2;
  if ((v8 & 2) == 0)
    goto LABEL_49;
  while (1)
  {
    v10 = (v9 - 1);
    v11 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 1) == 0)
      break;
LABEL_62:
    v13 = *(JSC::InlineCallFrame **)v11;
    if (*(_QWORD *)v11)
      v40 = v13 == a2;
    else
      v40 = 1;
    if (v40)
      goto LABEL_67;
    for (i = 0; ; i = 1)
    {
LABEL_54:
      v32 = *((_QWORD *)v13 + 1);
      if ((i & 1) == 0 && v11)
      {
        v41 = a2;
        WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
        a2 = v41;
      }
      v33 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
      v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
      v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
      v9 = v10 + ((v35 >> 31) ^ v35);
      v8 = *((_QWORD *)v13 + 2);
      if ((v8 & 1) != 0)
      {
        v36 = a2;
        v37 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
        if ((v8 & 2) != 0
          || (v38 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v38 == 0x3FFFFFFF)
          || (_DWORD)v38 == -1)
        {
          v39 = 2;
        }
        else if (v38 >> 28)
        {
          v42 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v42 = v37;
          *(_DWORD *)(v42 + 8) = v38;
          v39 = 1;
          v37 = v42;
        }
        else
        {
          v39 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
          v37 = v38 << 36;
        }
        v8 = v37 | v39;
        a2 = v36;
      }
      if ((v8 & 2) != 0)
        break;
LABEL_49:
      if ((v8 & 1) != 0)
      {
        v11 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
        v10 = (*(_DWORD *)((v8 & 0xFFFFFFFF8) + 8) + v9);
        goto LABEL_62;
      }
      v10 = v9 + (v8 >> 36);
      v13 = (JSC::InlineCallFrame *)(v8 & 0xFFFFFFFF8);
      if ((v8 & 0xFFFFFFFF8) == 0 || v13 == a2)
        return v10;
      v11 = v13;
    }
  }
  if (v11 && v11 != a2)
  {
    i = 1;
    v13 = v11;
    goto LABEL_54;
  }
  return v10;
}

void JSC::CodeOrigin::inlineStack(JSC::CodeOrigin *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::CodeOrigin *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFF8);
  if ((*(_QWORD *)this & 1) != 0)
    v4 = (_QWORD *)*v4;
  v5 = 1;
  if (v4)
  {
    do
    {
      v34 = v4[2];
      v4 = (_QWORD *)(v34 & 0xFFFFFFFF8);
      if ((v34 & 1) != 0)
        v4 = (_QWORD *)*v4;
      v5 = (v5 + 1);
    }
    while (v4);
    *(_DWORD *)(a2 + 12) = v5;
    if (!(_DWORD)v5)
      goto LABEL_60;
    if (v5 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198174A08);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 12) = 1;
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)a2 = v6;
  memset_pattern16(v6, &unk_199153030, 8 * v5);
  v14 = (JSC::CodeOrigin *)&v6[v5 - 1];
  if (v14 != this)
  {
    v15 = *(_QWORD *)v14;
    if ((*(_QWORD *)v14 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
    v16 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 1) != 0)
    {
      v30 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
      if ((v16 & 2) != 0
        || ((v31 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v31 != 0x3FFFFFFF)
          ? (v32 = (_DWORD)v31 == -1)
          : (v32 = 1),
            v32))
      {
        v33 = 2;
      }
      else if (v31 >> 28)
      {
        v35 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v35 = v30;
        *(_DWORD *)(v35 + 8) = v31;
        v33 = 1;
        v30 = v35;
      }
      else
      {
        v33 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
        v30 = v31 << 36;
      }
      v16 = v30 | v33;
    }
    *(_QWORD *)v14 = v16;
  }
  v17 = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFF8);
  if ((*(_QWORD *)this & 1) != 0)
  {
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_35;
  }
  else if (!v17)
  {
    goto LABEL_35;
  }
  v18 = v5 - 2;
  do
  {
    if (v18 >= v5)
    {
      __break(0xC471u);
      JUMPOUT(0x198174A2CLL);
    }
    v19 = v17 + 2;
    v20 = &v6[v18];
    if (v20 != v17 + 2)
    {
      v21 = *v20;
      if ((*v20 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v21 & 0xFFFFFFFF8, v7, v8, v9, v10, v11, v12, v13);
      v22 = *v19;
      if ((*v19 & 1) != 0)
      {
        v23 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
        if ((v22 & 2) != 0
          || ((v24 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
            ? (v25 = (_DWORD)v24 == -1)
            : (v25 = 1),
              v25))
        {
          v26 = 2;
        }
        else if (v24 >> 28)
        {
          v27 = v23;
          v28 = v24;
          v23 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v23 = v27;
          *(_DWORD *)(v23 + 8) = v28;
          v26 = 1;
        }
        else
        {
          v26 = v23;
          v23 = v24 << 36;
        }
        v22 = v23 | v26;
      }
      *v20 = v22;
    }
    v17 = (_QWORD *)(*v19 & 0xFFFFFFFF8);
    if ((*v19 & 1) != 0)
      v17 = (_QWORD *)*v17;
    --v18;
  }
  while (v17);
LABEL_35:
  v29 = (_QWORD *)(*v6 & 0xFFFFFFFF8);
  if ((*v6 & 1) == 0)
  {
    if (!v29)
      return;
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x198174984);
  }
  if (*v29)
    goto LABEL_60;
}

uint64_t JSC::CodeOrigin::stackOffset(JSC::CodeOrigin *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFF8);
  if ((*(_QWORD *)this & 1) != 0)
    v1 = (_QWORD *)*v1;
  if (v1)
    return HIDWORD(v1[3]) & 0xFFFFF | ((int)(v1[3] >> 28) >> 24 << 20);
  else
    return 0;
}

void JSC::CodeOrigin::dump(JSC::CodeOrigin *this, WTF::PrintStream *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  const void *v13;
  WTF::PrintStream *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  float v22;
  WTF::PrintStream *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  int v28;
  WTF::PrintStream *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  uint64_t v34;
  unint64_t *v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  const void *v38;
  WTF::PrintStream *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  WTF::PrintStream *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  WTF::PrintStream *v52;
  int v53;
  WTF::PrintStream *v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  unsigned int v58;

  if ((*(_BYTE *)this & 2) != 0)
  {
    v33 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v33, "%s", "<none>");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    return;
  }
  JSC::CodeOrigin::inlineStack(this, (uint64_t)&v57);
  v10 = v58;
  v11 = v57;
  if (v58)
  {
    v12 = *(_QWORD *)v57 & 0xFFFFFFFF8;
    if ((*(_QWORD *)v57 & 1) != 0)
    {
      v12 = *(_QWORD *)v12;
      if (v12)
      {
LABEL_5:
        v13 = *(const void **)(v12 + 8);
        v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        JSC::InlineCallFrame::dumpBriefFunctionInformation((JSC::InlineCallFrame *)v12, v14, v21, v22, v15, v16, v17, v18, v19, v20);
        WTF::PrintStream::printf(v14, "%s", ":<");
        WTF::PrintStream::printf(v14, "%p", v13);
        WTF::PrintStream::printf(v14, "%s", "> ");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        if ((*(_BYTE *)(v12 + 32) & 1) != 0)
        {
          v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v23, "%s", "(closure) ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        }
      }
    }
    else if (v12)
    {
      goto LABEL_5;
    }
    v24 = *(_QWORD *)v11;
    if ((*(_QWORD *)v11 & 2) != 0)
    {
      LODWORD(v25) = -1;
    }
    else if ((v24 & 1) != 0)
    {
      LODWORD(v25) = *(_DWORD *)((v24 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v25 = v24 >> 36;
    }
    v56 = v11;
    v26 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    WTF::PrintStream::printf(v27, "%s", "bc#");
    WTF::PrintStream::printf(v27, "%u", v25 >> 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    v28 = v25 & 3;
    if (v28)
    {
      v29 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
      WTF::PrintStream::printf(v29, "%s", "cp#");
      WTF::PrintStream::printf(v29, "%u", v28);
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    }
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v55 = v10;
    if ((_DWORD)v10 == 1)
    {
LABEL_13:
      v11 = v56;
      v30 = 8 * v55;
      v31 = v56;
      do
      {
        v32 = *(_QWORD *)v31;
        if ((*(_QWORD *)v31 & 1) != 0 && (v32 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v32 & 0xFFFFFFFF8, v3, v4, v5, v6, v7, v8, v9);
        v31 = (WTF *)((char *)v31 + 8);
        v30 -= 8;
      }
      while (v30);
      goto LABEL_20;
    }
    v34 = v10 - 1;
    v35 = (unint64_t *)((char *)v11 + 8);
    while (1)
    {
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v36, "%s", " --> ");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v37 = *v35 & 0xFFFFFFFF8;
      if ((*v35 & 1) != 0)
      {
        v37 = *(_QWORD *)v37;
        if (v37)
        {
LABEL_25:
          v38 = *(const void **)(v37 + 8);
          v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          JSC::InlineCallFrame::dumpBriefFunctionInformation((JSC::InlineCallFrame *)v37, v39, v46, v47, v40, v41, v42, v43, v44, v45);
          WTF::PrintStream::printf(v39, "%s", ":<");
          WTF::PrintStream::printf(v39, "%p", v38);
          WTF::PrintStream::printf(v39, "%s", "> ");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          if ((*(_BYTE *)(v37 + 32) & 1) != 0)
          {
            v48 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v48, "%s", "(closure) ");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          }
        }
      }
      else if (v37)
      {
        goto LABEL_25;
      }
      v49 = *v35;
      if ((*v35 & 2) != 0)
      {
        LODWORD(v50) = -1;
      }
      else if ((v49 & 1) != 0)
      {
        LODWORD(v50) = *(_DWORD *)((v49 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v50 = v49 >> 36;
      }
      v51 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v52 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
      WTF::PrintStream::printf(v52, "%s", "bc#");
      WTF::PrintStream::printf(v52, "%u", v50 >> 2);
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
      v53 = v50 & 3;
      if (v53)
      {
        v54 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 32))(v51);
        WTF::PrintStream::printf(v54, "%s", "cp#");
        WTF::PrintStream::printf(v54, "%u", v53);
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      ++v35;
      if (!--v34)
        goto LABEL_13;
    }
  }
LABEL_20:
  if (v11)
    WTF::fastFree((unint64_t)v11, v3, v4, v5, v6, v7, v8, v9);
}

double JSC::ComplexGetStatus::computeFor@<D0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  double result;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int Concurrently;
  uint64_t v31;
  int v32;

  if ((*(_WORD *)(a1 + 12) & 0x10) != 0)
  {
    a9[1] = 0;
    result = NAN;
    *a9 = 0xFFFFFFFF00000001;
    return result;
  }
  v10 = *a2;
  if (*a2)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v12 = v10[1];
    if (!(_DWORD)v12)
    {
LABEL_15:
      result = NAN;
      *a9 = 0xFFFFFFFF00000000;
      a9[1] = 0;
      goto LABEL_16;
    }
    v13 = 24 * v12;
    v14 = v10 + 4;
    do
    {
      if ((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_15;
      v15 = 16 * (**((_DWORD **)v14 - 1) & 0xFFFFFFFE);
      JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)v14, (void *)1, v15, 0, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_15;
      v18 = *((unsigned __int8 *)v14 + 6);
      if (v18 <= 6)
      {
        if (((1 << v18) & 0x63) != 0)
        {
          if ((*(_WORD *)(v15 + 12) & 0x10) != 0)
            goto LABEL_15;
        }
        else if (v18 == 2 && (*(_WORD *)(v15 + 12) & 0x90) != 0)
        {
          goto LABEL_15;
        }
      }
      v14 += 6;
      v13 -= 24;
    }
    while (v13);
    v21 = v10[1];
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = 24 * v21;
      v24 = v10 + 4;
      do
      {
        if (!*((_BYTE *)v24 + 6))
          ++v22;
        v24 += 6;
        v23 -= 24;
      }
      while (v23);
      if (v22 >= 2)
        goto LABEL_45;
      if (v22)
      {
        v25 = 0;
        v26 = 0;
        v27 = (uint64_t *)(v10 + 6);
        v28 = 24 * v21;
        do
        {
          v29 = *((unsigned __int8 *)v27 - 2);
          if (v29 < 2 || v29 - 5 <= 1)
          {
            v25 = *v27;
            ++v26;
          }
          v27 += 3;
          v28 -= 24;
        }
        while (v28);
        if (v26 == 1)
        {
          Concurrently = v25;
          goto LABEL_35;
        }
LABEL_45:
        __break(0xC471u);
        JUMPOUT(0x198175194);
      }
    }
    v31 = 0xFFFFFFFF00000002;
    goto LABEL_37;
  }
  v32 = 0;
  Concurrently = JSC::Structure::getConcurrently(a1, a3, &v32, a4, a5, a6, a7, a8);
  v25 = Concurrently;
LABEL_35:
  if (Concurrently != -1)
  {
    v31 = (v25 << 32) | 2;
LABEL_37:
    *a9 = v31;
    a9[1] = (uint64_t)v10;
    return result;
  }
  a9[1] = 0;
  result = NAN;
  *a9 = 0xFFFFFFFF00000001;
LABEL_16:
  if (v10)
  {
    do
    {
      v19 = __ldaxr(v10);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v10));
    if (!v20)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

uint64_t JSC::DFG::ExitProfile::add(WTF *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  JSC::Profiler::Database *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  WTF *v35;
  WTF *v36;

  if (!a2[5])
  {
    __break(0xC471u);
    JUMPOUT(0x1981753DCLL);
  }
  v8 = a2;
  if (!a2[6])
  {
    __break(0xC471u);
    JUMPOUT(0x1981753FCLL);
  }
  v10 = (unsigned __int8 *)(*((_QWORD *)a1 + 7) + 31);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_6:
  v12 = *(JSC::Profiler::Database **)(*((_QWORD *)a1 + 9) + 93016);
  if (v12)
  {
    WTF::toCString<JSC::DFG::FrequentExitSite>((uint64_t *)&v36, (JSC::BytecodeIndex *)v8);
    JSC::Profiler::Database::logEvent(v12, (uint64_t)a1, "frequentExit", &v36, v30, v31, v32, v33);
    v35 = v36;
    v36 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree((unint64_t)v35, v34, a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v35;
    }
  }
  if (byte_1ECF4C341)
  {
    v36 = a1;
    WTF::dataLog<WTF::PointerDump<JSC::CodeBlock>,char [21],JSC::DFG::FrequentExitSite,char [2]>((uint64_t *)&v36, (uint64_t)v8);
  }
  v13 = *((_QWORD *)a1 + 7);
  v14 = *(_QWORD *)(v13 + 96);
  if (!v14)
  {
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = 0;
    v21[1] = 0;
    v23 = *(_QWORD *)(v13 + 96);
    *(_QWORD *)(v13 + 96) = v21;
    if (v23)
    {
      v24 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
      {
        *(_QWORD *)v23 = 0;
        *(_DWORD *)(v23 + 8) = 0;
        WTF::fastFree(v24, v22, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v23, v22, a3, a4, a5, a6, a7, a8);
      v14 = *(_QWORD *)(v13 + 96);
    }
    else
    {
      v14 = (uint64_t)v21;
    }
    v16 = (_DWORD *)(v14 + 12);
    v25 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v25 != *(_DWORD *)(v14 + 8))
      goto LABEL_27;
    v20 = v25 + 1;
LABEL_26:
    v8 = (unsigned __int8 *)WTF::Vector<JSC::DFG::FrequentExitSite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v20, (unint64_t)v8);
    v25 = *(unsigned int *)(v14 + 12);
LABEL_27:
    v26 = (_QWORD *)(*(_QWORD *)v14 + 8 * v25);
LABEL_28:
    *v26 = *(_QWORD *)v8;
    ++*v16;
    v27 = 1;
    goto LABEL_29;
  }
  v16 = (_DWORD *)(v14 + 12);
  v15 = *(_DWORD *)(v14 + 12);
  if (!v15)
  {
    v19 = 0;
LABEL_18:
    if (v15 != *(_DWORD *)(v14 + 8))
    {
      v26 = (_QWORD *)(*(_QWORD *)v14 + 8 * v19);
      goto LABEL_28;
    }
    v20 = v19 + 1;
    goto LABEL_26;
  }
  v17 = (unsigned __int8 *)(*(_QWORD *)v14 + 6);
  v18 = *(unsigned int *)(v14 + 12);
  while (*(_DWORD *)(v17 - 6) != *(_DWORD *)v8 || *(v17 - 2) != v8[4] || *(v17 - 1) != v8[5] || *v17 != v8[6])
  {
    v17 += 8;
    if (!--v18)
    {
      v19 = *(unsigned int *)(v14 + 12);
      goto LABEL_18;
    }
  }
  v27 = 0;
LABEL_29:
  v28 = __ldxr(v10);
  if (v28 == 1)
  {
    if (!__stlxr(0, v10))
      return v27;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v27;
}

uint64_t JSC::DFG::ExitProfile::hasExitSite(uint64_t **a1, uint64_t a2, int *a3)
{
  uint64_t *v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned int k;
  uint64_t v12;
  uint64_t v13;
  unsigned int m;
  uint64_t v15;
  unsigned int i;
  uint64_t v17;
  uint64_t v18;
  unsigned int j;
  uint64_t v20;
  uint64_t v21;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = *((_DWORD *)v3 + 3);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = *((unsigned __int8 *)a3 + 4);
  v8 = *((_BYTE *)a3 + 5);
  v9 = *((_BYTE *)a3 + 6);
  v10 = *v3;
  if (v8)
  {
    if (*((_BYTE *)a3 + 6))
    {
      for (i = v5 - 1; ; --i)
      {
        v17 = i;
        if (v6 == *(_DWORD *)(v10 + 8 * i))
        {
          v18 = v10 + 8 * i;
          if (v7 == *(unsigned __int8 *)(v18 + 4)
            && *(unsigned __int8 *)(v18 + 5) == v8
            && *(unsigned __int8 *)(v10 + 8 * i + 6) == v9)
          {
            break;
          }
        }
        result = 0;
        if (!v17)
          return result;
      }
    }
    else
    {
      for (j = v5 - 1; ; --j)
      {
        v20 = j;
        if (v6 == *(_DWORD *)(v10 + 8 * j))
        {
          v21 = v10 + 8 * j;
          if (v7 == *(unsigned __int8 *)(v21 + 4) && *(unsigned __int8 *)(v21 + 5) == v8)
            break;
        }
        result = 0;
        if (!v20)
          return result;
      }
    }
  }
  else if (*((_BYTE *)a3 + 6))
  {
    for (k = v5 - 1; ; --k)
    {
      v12 = k;
      if (v6 == *(_DWORD *)(v10 + 8 * k))
      {
        v13 = v10 + 8 * k;
        if (v7 == *(unsigned __int8 *)(v13 + 4) && *(unsigned __int8 *)(v13 + 6) == v9)
          break;
      }
      result = 0;
      if (!v12)
        return result;
    }
  }
  else
  {
    for (m = v5 - 1; ; --m)
    {
      v15 = m;
      if (v6 == *(_DWORD *)(v10 + 8 * m) && v7 == *(unsigned __int8 *)(v10 + 8 * m + 4))
        break;
      result = 0;
      if (!v15)
        return result;
    }
  }
  return 1;
}

uint64_t JSC::DeferredCompilationCallback::compilationDidComplete(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  JSC::DeferredSourceDump *v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v8 = a4;
    v9 = 0;
    v5 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v5)
    {
      v6 = *(JSC::DeferredSourceDump **)v4;
      v7 = 24 * v5;
      do
      {
        ++v9;
        WTF::dataLog<char [2],unsigned int,char [3]>("[", &v9, "] ");
        JSC::DeferredSourceDump::dump(v6);
        v6 = (JSC::DeferredSourceDump *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
    result = WTF::dataLog<char [16]>("\n");
    a4 = v8;
  }
  if (a4 == 3)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::dataLog<char [2],unsigned int,char [3]>(const char *a1, _DWORD *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  WTF::PrintStream::printf(v8, "%u", *a2);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::DeferredSourceDump::dump(JSC::DeferredSourceDump *this)
{
  _QWORD *v2;
  char v3;
  char *v4;
  char *v5;
  char v6;
  JSC::CodeBlock *v7;
  unint64_t v8;
  char *v10;
  char v11;
  char v12;
  char **v13;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2 && *v2)
  {
    WTF::dataLog<char [16]>("Inlined ");
    v3 = 0;
  }
  else
  {
    WTF::dataLog<char [16]>("Compiled ");
    v3 = 1;
  }
  v4 = *(char **)this;
  if (*(_QWORD *)this)
    v4 = *(char **)v4;
  v10 = v4;
  WTF::dataLog<JSC::CodeBlock *>((uint64_t *)&v10);
  if ((v3 & 1) == 0)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if (v5)
      v5 = *(char **)v5;
    v6 = *((_BYTE *)this + 16);
    v10 = v5;
    v11 = v6;
    WTF::dataLog<char [5],JSC::CodeBlockWithJITType,char [2],JSC::BytecodeIndex>((uint64_t *)&v10, (JSC::DeferredSourceDump *)((char *)this + 20));
  }
  WTF::dataLog<char [16]>("\n'''");
  if (*(_QWORD *)this)
    v7 = **(JSC::CodeBlock ***)this;
  else
    v7 = 0;
  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v10 = &v12;
    v13 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  JSC::CodeBlock::dumpSource(v7, (WTF::PrintStream *)WTF::s_file);
  return WTF::dataLog<char [16]>("'''\n");
}

uint64_t JSC::DeferredSourceDump::DeferredSourceDump(uint64_t this, JSC::CodeBlock *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  JSC::CodeBlock *v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *((_QWORD *)a2 + 9);
  v9 = *(_QWORD *)(v8 + 712);
  if (!v9)
  {
    v14 = *((_QWORD *)a2 + 9);
    v12 = a2;
    v13 = this;
    JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v8 = v14;
    a2 = v12;
    this = v13;
    v9 = *(_QWORD *)(v14 + 712);
  }
  *(_QWORD *)(v8 + 712) = *(_QWORD *)v9;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)this = v9 + 16;
  if (!*(_QWORD *)(v9 + 16))
  {
    v10 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = v10[3];
    v10 += 3;
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v10;
    *v10 = v9;
    *(_QWORD *)(v11 + 8) = v9;
  }
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = -1;
  return this;
}

uint64_t JSC::DeferredSourceDump::DeferredSourceDump(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(v8 + 712);
  if (!v9)
  {
    v20 = *(_QWORD *)(a2 + 72);
    v26 = a5;
    v28 = result;
    v22 = a4;
    v24 = a3;
    v19 = a2;
    JSC::HandleSet::grow((JSC::HandleSet *)(v8 + 672), a2, a3, a4, a5, a6, a7, a8);
    a2 = v19;
    v8 = v20;
    a3 = v24;
    a4 = v22;
    a5 = v26;
    result = v28;
    v9 = *(_QWORD *)(v20 + 712);
  }
  *(_QWORD *)(v8 + 712) = *(_QWORD *)v9;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)result = v9 + 16;
  if (!*(_QWORD *)(v9 + 16))
  {
    v10 = *(unint64_t **)((v9 & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = v10[3];
    v10 += 3;
    *(_QWORD *)v9 = v11;
    *(_QWORD *)(v9 + 8) = v10;
    *v10 = v9;
    *(_QWORD *)(v11 + 8) = v9;
  }
  *(_QWORD *)(v9 + 16) = a2;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(v12 + 712);
  if (!v13)
  {
    v27 = a5;
    v29 = result;
    v23 = a4;
    v25 = a3;
    v21 = *(_QWORD *)(a2 + 72);
    JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672), a2, a3, a4, a5, a6, a7, a8);
    v12 = v21;
    a3 = v25;
    LOBYTE(a4) = v23;
    LODWORD(a5) = v27;
    result = v29;
    v13 = *(_QWORD *)(v21 + 712);
  }
  *(_QWORD *)(v12 + 712) = *(_QWORD *)v13;
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (unint64_t *)(v13 + 16);
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(result + 8) = v13 + 16;
  if ((a3 != 0) != (*(_QWORD *)(v13 + 16) != 0))
  {
    if (a3)
    {
      v15 = *(unint64_t **)((v13 & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = v15[3];
      v15 += 3;
      *(_QWORD *)v13 = v16;
      *(_QWORD *)(v13 + 8) = v15;
      *v15 = v13;
      *(_QWORD *)(v16 + 8) = v13;
    }
    else
    {
      v18 = *(_QWORD *)v13;
      v17 = *(_QWORD **)(v13 + 8);
      *v17 = *(_QWORD *)v13;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      v14 = *(unint64_t **)(result + 8);
    }
  }
  *v14 = a3;
  *(_BYTE *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a5;
  return result;
}

uint64_t WTF::dataLog<JSC::CodeBlock *>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = *a1;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  if (v5)
    JSC::CodeBlock::dumpAssumingJITType(v5);
  else
    WTF::PrintStream::printf(v6, "%s", "<null codeBlock>");
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [5],JSC::CodeBlockWithJITType,char [2],JSC::BytecodeIndex>(uint64_t *a1, JSC::BytecodeIndex *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", " at ");
  JSC::CodeBlock::dumpAssumingJITType(*a1);
  WTF::PrintStream::printf(v6, "%s", " ");
  JSC::BytecodeIndex::dump(a2, v6);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void std::default_delete<WTF::Vector<JSC::DeferredSourceDump,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  if (this)
  {
    v9 = *((unsigned int *)this + 3);
    v10 = *(_QWORD *)this;
    if ((_DWORD)v9)
    {
      v11 = 24 * v9;
      v12 = (uint64_t *)(v10 + 8);
      do
      {
        v13 = *v12;
        if (*v12)
        {
          v14 = (uint64_t *)(v13 - 16);
          v15 = *(_QWORD *)(((v13 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v16 = *(uint64_t **)(v13 - 8);
          if (v16)
          {
            v17 = *v14;
            *v16 = *v14;
            *(_QWORD *)(v17 + 8) = v16;
            *v14 = 0;
            v14[1] = 0;
          }
          *v14 = *(_QWORD *)(v15 + 40);
          *(_QWORD *)(v15 + 40) = v14;
          *v12 = 0;
        }
        v18 = *(v12 - 1);
        if (v18)
        {
          v19 = (uint64_t *)(v18 - 16);
          v20 = *(_QWORD *)(((v18 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v21 = *(uint64_t **)(v18 - 8);
          if (v21)
          {
            v22 = *v19;
            *v21 = *v19;
            *(_QWORD *)(v22 + 8) = v21;
            *v19 = 0;
            v19[1] = 0;
          }
          *v19 = *(_QWORD *)(v20 + 40);
          *(_QWORD *)(v20 + 40) = v19;
          *(v12 - 1) = 0;
        }
        v12 += 3;
        v11 -= 24;
      }
      while (v11);
      v10 = *(_QWORD *)this;
    }
    if (v10)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v10, this, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::toCString<JSC::DFG::FrequentExitSite>(uint64_t *a1, JSC::BytecodeIndex *this)
{
  unint64_t v4;
  const char *v5;
  WTF::PrintStream *v6;
  unint64_t v7;
  const char *v8;
  WTF::PrintStream *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (**v22)(WTF::StringPrintStream *__hidden);
  _BYTE *v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = off_1E3572250;
  v23 = v25;
  v24 = xmmword_199122F80;
  v25[0] = 0;
  JSC::BytecodeIndex::dump(this, (WTF::PrintStream *)&v22);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", ": ");
  WTF::printInternal((uint64_t)&v22, *((unsigned __int8 *)this + 4));
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "/");
  v4 = *((char *)this + 5);
  if (v4 >= 3)
    goto LABEL_13;
  v5 = off_1E3581178[v4];
  v6 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v22[4])(&v22);
  WTF::PrintStream::printf(v6, "%s", v5);
  v22[5]((WTF::StringPrintStream *)&v22);
  WTF::PrintStream::printf((WTF::PrintStream *)&v22, "%s", "/");
  v7 = *((char *)this + 6);
  if (v7 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198175FF8);
  }
  v8 = off_1E3581190[v7];
  v9 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v22[4])(&v22);
  WTF::PrintStream::printf(v9, "%s", v8);
  v22[5]((WTF::StringPrintStream *)&v22);
  v22[5]((WTF::StringPrintStream *)&v22);
  v22[5]((WTF::StringPrintStream *)&v22);
  v18 = v23;
  v17 = v24;
  *a1 = 0;
  if (!v18)
  {
    v21 = 0;
    goto LABEL_9;
  }
  if (v17 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x198176004);
  }
  if (v17 == -17)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198175FD8);
  }
  v19 = WTF::fastMalloc((WTF *)(v17 + 17));
  *(_DWORD *)v19 = 1;
  *(_QWORD *)(v19 + 8) = v17;
  *a1 = v19;
  v20 = v19 + 16;
  memcpy((void *)(v19 + 16), v18, v17);
  *(_BYTE *)(v20 + v17) = 0;
  v21 = (unint64_t)v23;
  if (v23 != v25)
LABEL_9:
    WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t WTF::dataLog<WTF::PointerDump<JSC::CodeBlock>,char [21],JSC::DFG::FrequentExitSite,char [2]>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  const char *v10;
  WTF::PrintStream *v11;
  unint64_t v12;
  const char *v13;
  WTF::PrintStream *v14;
  char v16;
  char **v17;
  char *v18;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  if (*a1)
  {
    JSC::CodeBlock::dumpAssumingJITType(*a1);
  }
  else
  {
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
    WTF::PrintStream::printf(v7, "%s", "(null)");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  }
  WTF::PrintStream::printf(v6, "%s", ": Adding exit site: ");
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  JSC::BytecodeIndex::dump((JSC::BytecodeIndex *)a2, v8);
  WTF::PrintStream::printf(v8, "%s", ": ");
  WTF::printInternal((uint64_t)v8, *(unsigned __int8 *)(a2 + 4));
  WTF::PrintStream::printf(v8, "%s", "/");
  v9 = *(char *)(a2 + 5);
  if (v9 >= 3
    || (v10 = off_1E3581178[v9],
        v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8),
        WTF::PrintStream::printf(v11, "%s", v10),
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8),
        WTF::PrintStream::printf(v8, "%s", "/"),
        v12 = *(char *)(a2 + 6),
        v12 >= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198176274);
  }
  v13 = off_1E3581190[v12];
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v14, "%s", v13);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::Vector<JSC::DFG::FrequentExitSite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::FrequentExitSite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::FrequentExitSite,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 8 * v8;
        v18 = (uint64_t *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 8;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::HashTable<JSC::DFG::FrequentExitSite,JSC::DFG::FrequentExitSite,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>>::add@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  char v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int i;
  uint64_t v23;
  unsigned int *v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  BOOL v41;
  unint64_t v43;
  uint64_t v44;

  v11 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::DFG::FrequentExitSite,JSC::DFG::FrequentExitSite,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>>::rehash(a1, 8uLL, 0, a3, a4, a5, a6, a7), (v11 = *a1) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = 0;
  v15 = *a2;
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = *((unsigned __int8 *)a2 + 4);
  v19 = *((unsigned __int8 *)a2 + 5);
  v20 = *((unsigned __int8 *)a2 + 6);
  v21 = v18 - v19 + 8 * v19 + 11 * v20 + (v17 ^ HIWORD(v17));
  for (i = 1; ; ++i)
  {
    v23 = v21 & v13;
    v24 = (unsigned int *)(v11 + 8 * v23);
    result = *v24;
    v26 = *((unsigned __int8 *)v24 + 4);
    v27 = *((unsigned __int8 *)v24 + 5);
    if ((_DWORD)result)
      v28 = 0;
    else
      v28 = v26 == 0;
    if (v28 && (_DWORD)v27 == 0)
    {
      v30 = *(unsigned __int8 *)(v11 + 8 * v23 + 6);
      if (!*(_BYTE *)(v11 + 8 * v23 + 6))
      {
        if (v14)
        {
          *(_QWORD *)v14 = 0;
          --*(_DWORD *)(*a1 - 16);
          v24 = v14;
        }
        v31 = *a2;
        *(unsigned int *)((char *)v24 + 3) = *(int *)((char *)a2 + 3);
        *v24 = v31;
        v32 = *a1;
        if (*a1)
          v33 = *(_DWORD *)(v32 - 12) + 1;
        else
          v33 = 1;
        *(_DWORD *)(v32 - 12) = v33;
        v34 = *a1;
        if (*a1)
          v35 = *(_DWORD *)(v34 - 12);
        else
          v35 = 0;
        v36 = (*(_DWORD *)(v34 - 16) + v35);
        v37 = *(unsigned int *)(v34 - 4);
        if (v37 > 0x400)
        {
          if (v37 > 2 * v36)
            goto LABEL_22;
        }
        else
        {
          if (3 * v37 > 4 * v36)
          {
LABEL_22:
            v38 = v34 + 8 * v37;
            v39 = 1;
            goto LABEL_23;
          }
          if (!(_DWORD)v37)
          {
            v43 = 8;
LABEL_46:
            result = WTF::HashTable<JSC::DFG::FrequentExitSite,JSC::DFG::FrequentExitSite,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>>::rehash(a1, v43, (uint64_t)v24, v27, v30, a5, a6, a7);
            v24 = (unsigned int *)result;
            v34 = *a1;
            if (*a1)
              v37 = *(unsigned int *)(v34 - 4);
            else
              v37 = 0;
            goto LABEL_22;
          }
        }
        v43 = ((_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37)));
        goto LABEL_46;
      }
    }
    v40 = (_DWORD)result == v15 && v26 == v18;
    v41 = v40 && (_DWORD)v27 == v19;
    if (v41 && *(unsigned __int8 *)(v11 + 8 * v23 + 6) == v20)
      break;
    if ((_DWORD)result == -2 && v26 == 0)
      v14 = (unsigned int *)(v11 + 8 * v23);
    v21 = i + v23;
  }
  if ((v12 & 1) != 0)
    v44 = 0;
  else
    v44 = *(unsigned int *)(v11 - 4);
  v39 = 0;
  v38 = v11 + 8 * v44;
LABEL_23:
  *(_QWORD *)a8 = v24;
  *(_QWORD *)(a8 + 8) = v38;
  *(_BYTE *)(a8 + 16) = v39;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::FrequentExitSite,JSC::DFG::FrequentExitSite,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>,WTF::HashTraits<JSC::DFG::FrequentExitSite>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int *v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int i;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v42;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (int *)(v11 + 8 * v24);
      v26 = *v25;
      if (*((_BYTE *)v25 + 4))
        v27 = 0;
      else
        v27 = v26 == -2;
      if (!v27)
      {
        v28 = *((unsigned __int8 *)v25 + 5);
        v29 = !*((_BYTE *)v25 + 4) && v26 == 0;
        v30 = v29 && v28 == 0;
        if (!v30 || *(_BYTE *)(v11 + 8 * v24 + 6))
        {
          v31 = *a1;
          if (*a1)
            v32 = *(_DWORD *)(v31 - 8);
          else
            v32 = 0;
          v33 = 0;
          v34 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
          for (i = (((v34 ^ (v34 >> 6)) + ~((v34 ^ (v34 >> 6)) << 11)) ^ (((v34 ^ (v34 >> 6))
                                                                          + ~((v34 ^ (v34 >> 6)) << 11)) >> 16))
                  + *((unsigned __int8 *)v25 + 4)
                  - v28
                  + 8 * v28
                  + 11 * *(unsigned __int8 *)(v11 + 8 * v24 + 6); ; i = v33 + v36)
          {
            v36 = i & v32;
            v37 = (int *)(v31 + 8 * v36);
            v38 = *v37;
            v15 = (void *)*((unsigned __int8 *)v37 + 4);
            v39 = *((unsigned __int8 *)v37 + 5);
            v40 = !v38 && (_DWORD)v15 == 0;
            if (v40 && v39 == 0)
            {
              v42 = v31 + 8 * v36;
              if (!*(_BYTE *)(v42 + 6))
                break;
            }
            ++v33;
          }
          *(_QWORD *)v42 = *(_QWORD *)v25;
          if (v25 == (int *)a3)
            v22 = v31 + 8 * v36;
        }
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_36;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_36:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t JSC::DeleteByStatus::markIfCheap<JSC::AbstractSlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = (uint64_t *)(*(_QWORD *)result + 16);
    do
    {
      v6 = *(v5 - 1);
      if (v6)
      {
        if ((!*(_QWORD *)(v6 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
          && ((*(_QWORD *)(v6 + 48) | 2) == 2
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v6);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v6);
        }
      }
      v7 = *v5;
      if (*v5)
      {
        if ((!*(_QWORD *)(v7 + 40) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
          && ((*(_QWORD *)(v7 + 48) | 2) == 2
           || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0))
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v7);
        }
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

unint64_t JSC::DeleteByStatus::markIfCheap<JSC::SlotVisitor>(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v8 = *(unsigned int *)(result + 12);
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD *)result;
    v11 = 40 * v8;
    do
    {
      result = JSC::DeleteByVariant::markIfCheap<JSC::SlotVisitor>(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 += 40;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

unint64_t JSC::DeleteByVariant::markIfCheap<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t result;

  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
    JSC::Structure::markIfCheap<JSC::SlotVisitor>(v10, a2, a3, a4, a5, a6, a7, a8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return JSC::Structure::markIfCheap<JSC::SlotVisitor>(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t JSC::appendICStatusVariant<WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DeleteByVariant>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t *i;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *((_QWORD *)a2 + 4);
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 6);
    v7 = *((_QWORD *)a2 + 1);
    v8 = 0;
    if (v4)
    {
      v9 = (_QWORD *)(v3 + 32);
      while (1)
      {
        v10 = *v9;
        if (*v9 && *((unsigned __int8 *)v9 - 32) == v5)
        {
          if ((v10 & 1) != 0)
            v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          else
            v11 = *(_QWORD *)(v10 + 8);
          v12 = v4 & 0xFFFFFFFFFFFFFFFELL;
          if ((v4 & 1) == 0)
            v12 = *(_QWORD *)(v4 + 8);
          if (v11 == v12 && *((_DWORD *)v9 - 2) == v6 && *(v9 - 3) == v7)
            break;
        }
        ++v8;
        v9 += 5;
        if (v2 == v8)
          goto LABEL_14;
      }
LABEL_40:
      if (v2 <= 1)
        v2 = 1;
      else
        v2 = v2;
      for (i = (uint64_t *)(v3 + 32); ; i += 5)
      {
        if (v8)
        {
          v23 = *i;
          if ((v4 != 0) != (*i != 0))
            break;
          if (!v23)
            goto LABEL_52;
          if ((v23 & 1) != 0)
            v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
          else
            v24 = *(_QWORD *)(v23 + 8);
          v25 = v10 & 0xFFFFFFFFFFFFFFFELL;
          if (!((v10 == 0) | v10 & 1))
            v25 = *(_QWORD *)(v10 + 8);
          if (v24 == v25)
          {
LABEL_52:
            if (*(i - 3) == v7)
              break;
          }
        }
        --v8;
        if (!--v2)
          return 1;
      }
    }
    else
    {
      v21 = (_QWORD *)(v3 + 32);
      do
      {
        if (!*v21 && *((unsigned __int8 *)v21 - 32) == v5 && *((_DWORD *)v21 - 2) == v6 && *(v21 - 3) == v7)
        {
          v10 = 0;
          goto LABEL_40;
        }
        ++v8;
        v21 += 5;
      }
      while (v2 != v8);
LABEL_14:
      v13 = (uint64_t *)(v3 + 32);
      v14 = *(unsigned int *)(a1 + 12);
      while (1)
      {
        v15 = *v13;
        if ((v4 != 0) != (*v13 != 0))
          break;
        if (!v15)
          goto LABEL_22;
        v16 = (v15 & 1) != 0 ? v15 & 0xFFFFFFFFFFFFFFFELL : *(_QWORD *)(v15 + 8);
        v17 = v4 & 0xFFFFFFFFFFFFFFFELL;
        if (!((v4 == 0) | v4 & 1))
          v17 = *(_QWORD *)(v4 + 8);
        if (v16 == v17)
        {
LABEL_22:
          if (*(v13 - 3) == v7)
            break;
        }
        v13 += 5;
        if (!--v14)
        {
          v18 = *(_DWORD *)(a1 + 12);
          goto LABEL_25;
        }
      }
    }
    return 0;
  }
  else
  {
    v18 = 0;
LABEL_25:
    if ((_DWORD)v2 == *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DeleteByVariant const&>(a1, (unint64_t)a2);
    }
    else
    {
      v19 = *(_QWORD *)a1 + 40 * v18;
      *(_QWORD *)(v19 + 32) = 0;
      *(_QWORD *)(v19 + 32) = *((_QWORD *)a2 + 4);
      *(_BYTE *)v19 = *a2;
      *(_OWORD *)(v19 + 8) = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(v19 + 24) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(a1 + 12) = v2 + 1;
    }
    return 1;
  }
}

void JSC::DeleteByStatus::computeForBaseline(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  JSC::CodeOrigin *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  unsigned int v41;
  int v42;
  WTF *v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  char v56;
  WTF *v57;
  uint64_t v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  _BYTE v62[48];
  WTF *v63;
  unint64_t v64;
  _BYTE v65[40];
  char v66;

  v8 = a5;
  v13 = (unsigned __int8 *)(a2 + 16);
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
LABEL_4:
  v15 = 0;
  v63 = (WTF *)v65;
  v64 = 1;
  v66 = 0;
  v16 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = a4;
      v16 = 1;
    }
    else
    {
      v16 = 0;
      v15 = a4 << 36;
    }
  }
  v58 = v15 | v16;
  v17 = *a3;
  if (*a3)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v58, 0, (uint64_t)a3, a4, a5, a6, a7, a8) & v18;
    v20 = (JSC::CodeOrigin *)(v17 + (v19 << 6));
    if ((JSC::CodeOrigin::isApproximatelyEqualTo(v20, (const JSC::CodeOrigin *)&v58, 0, v21, v22, v23, v24, v25) & 1) != 0)
    {
LABEL_10:
      v31 = *(_QWORD *)(v17 + (v19 << 6) + 8);
      goto LABEL_11;
    }
    v46 = 1;
    while (1)
    {
      v47 = *(_QWORD *)v20;
      if (*(_QWORD *)v20 == 2)
        break;
      if ((v47 & 2) != 0)
      {
        v55 = (_QWORD *)(v47 & 0xFFFFFFFF8);
        if ((v47 & 1) == 0)
          goto LABEL_45;
      }
      else
      {
        if ((v47 & 1) == 0)
          goto LABEL_32;
        v55 = (_QWORD *)(v47 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v47 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_32;
      }
      v55 = (_QWORD *)*v55;
LABEL_45:
      if (!v55)
        break;
LABEL_32:
      v19 = ((_DWORD)v19 + v46) & v18;
      v20 = (JSC::CodeOrigin *)(v17 + (v19 << 6));
      ++v46;
      if (JSC::CodeOrigin::isApproximatelyEqualTo(v20, (const JSC::CodeOrigin *)&v58, 0, v26, v27, v28, v29, v30))goto LABEL_10;
    }
  }
  v31 = 0;
LABEL_11:
  JSC::DeleteByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v59, *(_QWORD *)(a2 + 72), v31);
  v39 = v63;
  if (v63 != (WTF *)v65)
  {
    if (v63)
    {
      v63 = 0;
      LODWORD(v64) = 0;
      WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
    }
    v63 = (WTF *)v65;
  }
  v40 = v59;
  if (v59 == (WTF *)v62)
  {
    v41 = v61;
    if (v61)
    {
      v48 = 0;
      v49 = 40 * v61;
      do
      {
        v50 = (char *)&v63 + v48;
        *((_QWORD *)v50 + 6) = 0;
        *((_QWORD *)v50 + 6) = *(_QWORD *)((char *)v40 + v48 + 32);
        v50[16] = *((_BYTE *)v40 + v48);
        *(_OWORD *)(v50 + 24) = *(_OWORD *)((char *)v40 + v48 + 8);
        *((_DWORD *)v50 + 10) = *(_DWORD *)((char *)v40 + v48 + 24);
        v48 += 40;
      }
      while (v49 != v48);
    }
    v42 = v60;
  }
  else
  {
    v59 = (WTF *)v62;
    v63 = v40;
    v42 = v60;
    v41 = v61;
    v40 = (WTF *)v62;
    v60 = 1;
  }
  v61 = 0;
  v64 = __PAIR64__(v41, v42);
  v66 = v62[40];
  if (v62 != (_BYTE *)v40 && v40)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v40, v32, v33, v34, v35, v36, v37, v38);
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
  if (v8)
  {
    if (v66 == 3)
      v56 = 3;
    else
      v56 = 2;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    *(_BYTE *)(a1 + 56) = v56;
    v57 = v63;
    if (v65 != (_BYTE *)v63 && v63)
    {
      v63 = 0;
      LODWORD(v64) = 0;
      WTF::fastFree((unint64_t)v57, v32, v33, v34, v35, v36, v37, v38);
    }
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 1;
    v43 = v63;
    if (v63 == (WTF *)v65)
    {
      v44 = HIDWORD(v64);
      if (HIDWORD(v64))
      {
        v51 = 0;
        v52 = 40 * HIDWORD(v64);
        do
        {
          v53 = a1 + v51;
          *(_QWORD *)(v53 + 48) = *(_QWORD *)&v65[v51 + 32];
          *(_BYTE *)(v53 + 16) = v65[v51];
          *(_OWORD *)(v53 + 24) = *(_OWORD *)&v65[v51 + 8];
          *(_DWORD *)(v53 + 40) = *(_DWORD *)&v65[v51 + 24];
          v51 += 40;
        }
        while (v52 != v51);
      }
    }
    else
    {
      v63 = (WTF *)v65;
      *(_QWORD *)a1 = v43;
      v54 = v64;
      v44 = HIDWORD(v64);
      LODWORD(v64) = 1;
      *(_DWORD *)(a1 + 8) = v54;
    }
    HIDWORD(v64) = 0;
    *(_DWORD *)(a1 + 12) = v44;
    *(_BYTE *)(a1 + 56) = v66;
  }
  v45 = __ldxr(v13);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v13))
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v33, v34, v35, v36, v37, v38);
}

void JSC::DeleteByStatus::computeForStubInfoWithoutExitSiteFeedback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  WTF *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  unsigned __int8 *v32;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  WTF *v48;
  uint64_t v49;
  char *v50;
  unsigned __int8 v51[8];
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  _BYTE v58[40];
  char v59;

  v5 = JSC::StructureStubInfo::summary(a2, a3);
  v13 = v5;
  if (v5 - 1 >= 3)
  {
    if (v5 > 5u || ((1 << v5) & 0x31) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981774C8);
    }
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
    if (v5 == 4)
    {
      if ((*(_WORD *)(a3 + 129) & 2) != 0)
        LOBYTE(v13) = 3;
      else
        LOBYTE(v13) = 2;
    }
    else if ((_BYTE)v5)
    {
      if (v5 - 1 >= 3 && v5 != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1981774A8);
      }
      __break(0xC471u);
      JUMPOUT(0x198177374);
    }
    *(_BYTE *)(a1 + 56) = v13;
    return;
  }
  v14 = (WTF *)v58;
  v56 = (WTF *)v58;
  v57 = 1;
  v59 = 1;
  if (*(_BYTE *)(a3 + 123) != 4)
  {
    if (*(_BYTE *)(a3 + 123))
    {
      if (v5 - 1 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1981774E8);
      }
      v46 = (0x50404u >> (8 * (v5 - 1)));
LABEL_81:
      JSC::DeleteByStatus::DeleteByStatus(a1, v46, a3);
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 1;
      *(_BYTE *)(a1 + 56) = 0;
    }
    goto LABEL_47;
  }
  v15 = *(_QWORD *)(a3 + 64);
  if (!*(_DWORD *)(v15 + 12))
  {
    LODWORD(v38) = 0;
LABEL_59:
    v41 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
LABEL_45:
    if ((_DWORD)v38)
    {
      v43 = 0;
      do
      {
        v44 = v41 + v43;
        *(_QWORD *)(v44 + 32) = *(_QWORD *)&v58[v43 + 32];
        *(_BYTE *)v44 = v58[v43];
        *(_OWORD *)(v44 + 8) = *(_OWORD *)&v58[v43 + 8];
        *(_DWORD *)(v44 + 24) = *(_DWORD *)&v58[v43 + 24];
        v43 += 40;
      }
      while (40 * v38 != v43);
    }
    goto LABEL_46;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(*(_QWORD *)v15 + 8 * v16);
    v18 = *(unsigned __int8 *)(v17 + 4);
    if (v18 > 0x20 || ((1 << v18) & 0x100000014) == 0)
    {
      v20 = *(_DWORD *)(v17 + 12);
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(16 * (*(_DWORD *)(v17 + 12) & 0xFFFFFFFE) + 0x40);
    if (v21 && *(_BYTE *)(v21 + 5) != 1)
    {
      v20 = *(_DWORD *)(v21 + 80);
LABEL_11:
      if (v20)
        v21 = 16 * (v20 & 0xFFFFFFFE);
      else
        v21 = 0;
    }
    if (v18 - 5 < 2)
    {
      v22 = *(_QWORD *)(v17 + 32);
      v51[0] = v18 == 6;
      v52 = v21;
      v53 = 0;
      v54 = -1;
      v55 = v22;
      if ((JSC::appendICStatusVariant<WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DeleteByVariant>((uint64_t)&v56, v51) & 1) == 0)
      {
        if (v13 >= 6)
        {
          __break(0xC471u);
          JUMPOUT(0x1981773FCLL);
        }
LABEL_80:
        v46 = (0x50405040404uLL >> (8 * v13));
        goto LABEL_81;
      }
      goto LABEL_16;
    }
    if (v18 != 4)
    {
      if (v13 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198177424);
      }
      goto LABEL_80;
    }
    v23 = *(_QWORD *)(v17 + 32);
    if (v23)
    {
      if ((v23 & 1) != 0)
        v24 = (_DWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      else
        v24 = *(_DWORD **)(v23 + 8);
    }
    else
    {
      v24 = 0;
    }
    *(_DWORD *)v51 = 0;
    if (JSC::Structure::getConcurrently(v21, v24, v51, v8, v9, v10, v11, v12) == -1)
    {
LABEL_77:
      if (v13 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x19817744CLL);
      }
      goto LABEL_80;
    }
    v31 = v14;
    v32 = (unsigned __int8 *)(v21 + 15);
    if (__ldaxr((unsigned __int8 *)(v21 + 15)))
    {
      __clrex();
LABEL_25:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 15);
      goto LABEL_26;
    }
    if (__stxr(1u, v32))
      goto LABEL_25;
LABEL_26:
    if ((*(_BYTE *)(v21 + 19) & 8) != 0)
      v34 = 0;
    else
      v34 = JSC::StructureTransitionTable::get((uint64_t *)(v21 + 80), (uint64_t)v24, *(unsigned int *)v51, 2);
    v35 = __ldxr(v32);
    if (v35 != 1)
    {
      __clrex();
LABEL_35:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 15), 0, v25, v26, v27, v28, v29, v30);
      goto LABEL_36;
    }
    if (__stlxr(0, v32))
      goto LABEL_35;
LABEL_36:
    v14 = v31;
    if (!v34)
      goto LABEL_77;
    v36 = *(_QWORD *)(v17 + 32);
    v37 = *(_DWORD *)(v17 + 8);
    v51[0] = 1;
    v52 = v21;
    v53 = v34;
    v54 = v37;
    v55 = v36;
    if (!JSC::appendICStatusVariant<WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DeleteByVariant>((uint64_t)&v56, v51))
    {
      if (v13 >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198177508);
      }
      goto LABEL_80;
    }
LABEL_16:
    ++v16;
  }
  while (v16 < *(unsigned int *)(v15 + 12));
  v38 = HIDWORD(v57);
  v39 = v56;
  if (v57 <= HIDWORD(v57))
  {
    v40 = v56;
    goto LABEL_44;
  }
  v40 = v56;
  if (HIDWORD(v57))
  {
    if (HIDWORD(v57) == 1)
    {
      v48 = v14;
      v56 = v14;
      LODWORD(v57) = 1;
    }
    else
    {
      if (HIDWORD(v57) >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x198177608);
      }
      v47 = 40 * HIDWORD(v57);
      v48 = (WTF *)WTF::fastMalloc((WTF *)(40 * HIDWORD(v57)));
      LODWORD(v57) = (v47 & 0xFFFFFFF8) / 0x28;
      v56 = v48;
    }
    v40 = v39;
    if (v48 != v39)
    {
      v49 = 0;
      do
      {
        v50 = (char *)v48 + v49;
        *((_QWORD *)v50 + 4) = 0;
        *((_QWORD *)v50 + 4) = *(_QWORD *)((char *)v39 + v49 + 32);
        *v50 = *((_BYTE *)v39 + v49);
        *(_OWORD *)(v50 + 8) = *(_OWORD *)((char *)v39 + v49 + 8);
        *((_DWORD *)v50 + 6) = *(_DWORD *)((char *)v39 + v49 + 24);
        v49 += 40;
      }
      while (40 * v38 != v49);
      v40 = v48;
    }
  }
  if (v14 != v39 && v39)
  {
    if (v40 == v39)
    {
      v56 = 0;
      LODWORD(v57) = 0;
    }
    WTF::fastFree((unint64_t)v39, v6, v7, v8, v9, v10, v11, v12);
    v40 = v56;
  }
  if (!v40)
  {
    v56 = v14;
    LODWORD(v57) = 1;
    LODWORD(v38) = HIDWORD(v57);
    goto LABEL_59;
  }
  LODWORD(v38) = HIDWORD(v57);
LABEL_44:
  v41 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  if (v40 == v14)
    goto LABEL_45;
  v56 = v14;
  *(_QWORD *)a1 = v40;
  v45 = v57;
  LODWORD(v57) = 1;
  *(_DWORD *)(a1 + 8) = v45;
LABEL_46:
  HIDWORD(v57) = 0;
  *(_DWORD *)(a1 + 12) = v38;
  *(_BYTE *)(a1 + 56) = v59;
LABEL_47:
  v42 = v56;
  if (v14 != v56)
  {
    if (v56)
    {
      v56 = 0;
      LODWORD(v57) = 0;
      WTF::fastFree((unint64_t)v42, v6, v7, v8, v9, v10, v11, v12);
    }
  }
}

uint64_t JSC::DeleteByStatus::DeleteByStatus(uint64_t result, int a2, uint64_t a3)
{
  char v3;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  if (a2 != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198177680);
  }
  if ((*(_WORD *)(a3 + 129) & 2) != 0)
    v3 = 3;
  else
    v3 = 2;
  *(_BYTE *)(result + 56) = v3;
  return result;
}

void JSC::DeleteByStatus::computeFor(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 hasBadCacheExitSite;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  unsigned __int8 *v28;
  void *v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  unsigned int v34;
  int v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[48];
  WTF *v62;
  unint64_t v63;
  _BYTE v64[40];
  char v65;
  uint64_t ***v66[6];
  uint64_t v67;
  uint64_t v68[6];
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned int v72;
  uint64_t v73;

  v12 = a1;
  v73 = a1;
  v14 = (unint64_t)*a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v14) = -1;
  }
  else if ((v14 & 1) != 0)
  {
    LODWORD(v14) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v14 >>= 36;
  }
  v72 = v14;
  v15 = v14;
  hasBadCacheExitSite = JSC::hasBadCacheExitSite(a1, v14, a3, (uint64_t)a4, a5, a6, a7, a8);
  v71 = hasBadCacheExitSite;
  v23 = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)v23)
  {
LABEL_37:
    JSC::DeleteByStatus::computeForBaseline(a9, v12, a2, v15, hasBadCacheExitSite, v20, v21, v22);
    return;
  }
  v24 = *(uint64_t **)a3;
  v25 = *(_QWORD *)a3 + 8 * v23;
  while (1)
  {
    v26 = *v24;
    v70 = *v24;
    v27 = *a4;
    if ((*a4 & 1) != 0)
    {
      v49 = *(_QWORD *)((unint64_t)v27 & 0xFFFFFFFF8);
      if ((v27 & 2) != 0
        || ((v50 = *(unsigned int *)(((unint64_t)v27 & 0xFFFFFFFF8) + 8), (_DWORD)v50 != 0x3FFFFFFF)
          ? (v51 = (_DWORD)v50 == -1)
          : (v51 = 1),
            v51))
      {
        v52 = 2;
      }
      else if (v50 >> 28)
      {
        v55 = *(_DWORD *)(((unint64_t)v27 & 0xFFFFFFFF8) + 8);
        v57 = *(_QWORD *)((unint64_t)v27 & 0xFFFFFFFF8);
        v49 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v49 = v57;
        *(_DWORD *)(v49 + 8) = v55;
        v52 = 1;
      }
      else
      {
        v52 = *(_QWORD *)((unint64_t)v27 & 0xFFFFFFFF8);
        v49 = v50 << 36;
      }
      v56 = v49 | v52;
      v67 = v49 | v52;
      JSC::ICStatusContext::get(v26, &v67, v17, v18, v19, v20, v21, v22, (uint64_t)v68);
      if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v56 & 0xFFFFFFFF8, v53, v54, v18, v19, v20, v21, v22);
    }
    else
    {
      v67 = (uint64_t)*a4;
      JSC::ICStatusContext::get(v26, &v67, v17, v18, v19, v20, v21, v22, (uint64_t)v68);
    }
    v66[0] = (uint64_t ***)&v70;
    v66[1] = a4;
    v66[2] = (uint64_t ***)&v73;
    v66[3] = (uint64_t ***)a2;
    v66[4] = (uint64_t ***)&v72;
    v66[5] = (uint64_t ***)&v71;
    if (v68[0])
      break;
LABEL_25:
    v17 = v69;
    if (v69)
    {
      JSC::DeleteByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v66, v69, v18, v19, v20, v21, v22);
      return;
    }
    if (++v24 == (uint64_t *)v25)
    {
      v12 = v73;
      v15 = v72;
      hasBadCacheExitSite = v71;
      goto LABEL_37;
    }
  }
  v62 = (WTF *)v64;
  v63 = 1;
  v65 = 0;
  v28 = (unsigned __int8 *)(*(_QWORD *)(v70 + 8) + 16);
  if (__ldaxr(v28))
  {
    __clrex();
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v28);
    goto LABEL_12;
  }
  if (__stxr(1u, v28))
    goto LABEL_11;
LABEL_12:
  JSC::DeleteByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v58, *(_QWORD *)(*(_QWORD *)(v70 + 8) + 72), v68[0]);
  v32 = v62;
  if (v62 != (WTF *)v64)
  {
    if (v62)
    {
      v62 = 0;
      LODWORD(v63) = 0;
      WTF::fastFree((unint64_t)v32, v30, v31, v18, v19, v20, v21, v22);
    }
    v62 = (WTF *)v64;
  }
  v33 = v58;
  if (v58 == (WTF *)v61)
  {
    v34 = v60;
    if (v60)
    {
      v38 = 0;
      v39 = 40 * v60;
      do
      {
        v40 = (char *)&v62 + v38;
        *((_QWORD *)v40 + 6) = *(_QWORD *)&v61[v38 + 32];
        v40[16] = v61[v38];
        *(_OWORD *)(v40 + 24) = *(_OWORD *)&v61[v38 + 8];
        *((_DWORD *)v40 + 10) = *(_DWORD *)&v61[v38 + 24];
        v38 += 40;
      }
      while (v39 != v38);
    }
    v35 = v59;
  }
  else
  {
    v58 = (WTF *)v61;
    v62 = v33;
    v35 = v59;
    v34 = v60;
    v59 = 1;
  }
  v63 = __PAIR64__(v34, v35);
  v65 = v61[40];
  v36 = __ldxr(v28);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v28))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v28, 0, v31, v18, v19, v20, v21, v22);
  if (!v65)
  {
    v37 = v62;
    if (v64 != (_BYTE *)v62)
    {
      if (v62)
      {
        v62 = 0;
        LODWORD(v63) = 0;
        WTF::fastFree((unint64_t)v37, v30, v31, v18, v19, v20, v21, v22);
      }
    }
    goto LABEL_25;
  }
  JSC::DeleteByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v66, (uint64_t)&v62, v18, v19, v20, v21, v22);
  v48 = v62;
  if (v64 != (_BYTE *)v62 && v62)
  {
    v62 = 0;
    LODWORD(v63) = 0;
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  }
}

void JSC::DeleteByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(unint64_t a1, uint64_t ****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;

  v11 = **a2;
  v12 = (uint64_t)*a2[1];
  v13 = (uint64_t *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 1) == 0)
    goto LABEL_2;
  v35 = *v13;
  if ((v12 & 2) != 0
    || ((v36 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v36 != 0x3FFFFFFF) ? (v37 = v36 == -1) : (v37 = 1), v37))
  {
    v38 = 2;
  }
  else if (v36 >> 28)
  {
    v42 = **a2;
    v40 = *v13;
    v41 = WTF::fastMalloc((WTF *)0x10);
    v11 = v42;
    *(_QWORD *)v41 = v40;
    *(_DWORD *)(v41 + 8) = v36;
    v38 = 1;
    v35 = v41;
  }
  else
  {
    v38 = *v13;
    v35 = 0;
  }
  v39 = v35 | v38;
  v13 = (uint64_t *)(v39 & 0xFFFFFFFF8);
  if ((v39 & 1) != 0)
  {
    v14 = 0;
    v15 = (uint64_t *)*v13;
  }
  else
  {
LABEL_2:
    v14 = 1;
    v15 = v13;
  }
  if (v15)
    v16 = v15 != *v11;
  else
    v16 = 0;
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)a2[5] & 2) == 0)
    {
      JSC::DeleteByStatus::DeleteByStatus((JSC::DeleteByStatus *)a1, (const JSC::DeleteByStatus *)a3);
      return;
    }
    if (*(_BYTE *)(a3 + 56) == 3)
      v34 = 3;
    else
      v34 = 2;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 1;
LABEL_30:
    *(_BYTE *)(a1 + 56) = v34;
    return;
  }
  JSC::DeleteByStatus::computeForBaseline(a1, (uint64_t)*a2[2], (uint64_t *)a2[3], *(unsigned int *)a2[4], *(unsigned __int8 *)a2[5], a6, a7, a8);
  v23 = (void *)*(unsigned __int8 *)(a3 + 56);
  if (!*(_BYTE *)(a3 + 56))
    return;
  v24 = *(unsigned __int8 *)(a1 + 56);
  if ((v24 - 2) < 2)
  {
LABEL_9:
    JSC::DeleteByStatus::merge(JSC::DeleteByStatus const&)::$_0::operator()(a1, v23, v17, v18, v19, v20, v21, v22);
    return;
  }
  if (v24 != 1)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      __break(0xC471u);
      JUMPOUT(0x198177C40);
    }
    WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, (_DWORD *)a3, v17, v18, v19, v20, v21, v22);
    v34 = *(_BYTE *)(a3 + 56);
    goto LABEL_30;
  }
  if ((_DWORD)v23 != 1)
    goto LABEL_9;
  v25 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v25)
  {
    v26 = *(unsigned __int8 **)a3;
    v27 = 40 * v25;
    while ((JSC::appendICStatusVariant<WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::DeleteByVariant>(a1, v26) & 1) != 0)
    {
      v26 += 40;
      v27 -= 40;
      if (!v27)
        goto LABEL_16;
    }
    v23 = (void *)*(unsigned __int8 *)(a3 + 56);
    goto LABEL_9;
  }
LABEL_16:
  v28 = *(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) > v28)
  {
    v29 = *(_QWORD *)a1;
    v30 = *(_QWORD *)a1;
    if ((_DWORD)v28)
    {
      WTF::VectorBuffer<JSC::DeleteByVariant,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12));
      v31 = *(_QWORD *)a1;
      v30 = v29;
      if (*(_QWORD *)a1 != v29)
      {
        v32 = 0;
        do
        {
          v33 = v31 + v32;
          *(_QWORD *)(v33 + 32) = 0;
          *(_QWORD *)(v33 + 32) = *(_QWORD *)(v29 + v32 + 32);
          *(_BYTE *)v33 = *(_BYTE *)(v29 + v32);
          *(_OWORD *)(v33 + 8) = *(_OWORD *)(v29 + v32 + 8);
          *(_DWORD *)(v33 + 24) = *(_DWORD *)(v29 + v32 + 24);
          v32 += 40;
        }
        while (40 * v28 != v32);
        v30 = v31;
      }
    }
    if (a1 + 16 != v29 && v29)
    {
      if (v30 == v29)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v29, v23, v17, v18, v19, v20, v21, v22);
      v30 = *(_QWORD *)a1;
    }
    if (!v30)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

void JSC::DeleteByStatus::merge(JSC::DeleteByStatus const&)::$_0::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  unint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[40];
  char v25;

  v9 = (_BYTE *)(a1 + 16);
  if (*(_BYTE *)(a1 + 56) == 3 || a2 == 3)
  {
    v22 = v24;
    v23 = 1;
    v25 = 3;
    v11 = *(_QWORD *)a1;
    if (*(_BYTE **)a1 == v9)
    {
LABEL_14:
      v13 = 0;
      goto LABEL_15;
    }
    if (!v11)
      goto LABEL_17;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v12 = v9;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    v9 = v22;
    *(_QWORD *)a1 = v12;
    v13 = HIDWORD(v23);
    if (v9 != v24)
    {
LABEL_18:
      *(_QWORD *)a1 = v9;
      goto LABEL_15;
    }
    if (HIDWORD(v23))
    {
      v14 = 0;
      v15 = 40 * HIDWORD(v23);
      do
      {
        v16 = a1 + v14;
        *(_QWORD *)(v16 + 48) = *(_QWORD *)&v24[v14 + 32];
        *(_BYTE *)(v16 + 16) = v24[v14];
        *(_OWORD *)(v16 + 24) = *(_OWORD *)&v24[v14 + 8];
        *(_DWORD *)(v16 + 40) = *(_DWORD *)&v24[v14 + 24];
        v14 += 40;
      }
      while (v15 != v14);
    }
  }
  else
  {
    v22 = v24;
    v23 = 1;
    v25 = 2;
    v17 = *(_QWORD *)a1;
    if (*(_BYTE **)a1 == v9)
      goto LABEL_14;
    if (!v17)
    {
LABEL_17:
      v13 = 0;
      goto LABEL_18;
    }
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    v18 = v9;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    v9 = v22;
    *(_QWORD *)a1 = v18;
    v13 = HIDWORD(v23);
    if (v9 != v24)
      goto LABEL_18;
    if (HIDWORD(v23))
    {
      v19 = 0;
      v20 = 40 * HIDWORD(v23);
      do
      {
        v21 = a1 + v19;
        *(_QWORD *)(v21 + 48) = *(_QWORD *)&v24[v19 + 32];
        *(_BYTE *)(v21 + 16) = v24[v19];
        *(_OWORD *)(v21 + 24) = *(_OWORD *)&v24[v19 + 8];
        *(_DWORD *)(v21 + 40) = *(_DWORD *)&v24[v19 + 24];
        v19 += 40;
      }
      while (v20 != v19);
    }
  }
LABEL_15:
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 12) = v13;
  *(_BYTE *)(a1 + 56) = v25;
}

uint64_t JSC::DeleteByStatus::filter(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 56) == 1)
  {
    v2 = result;
    result = WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<JSC::DeleteByStatus::filter(JSC::StructureSet const&)::$_0>(result, a2);
    if (!*(_DWORD *)(v2 + 12))
      *(_BYTE *)(v2 + 56) = 0;
  }
  return result;
}

uint64_t WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<JSC::DeleteByStatus::filter(JSC::StructureSet const&)::$_0>(uint64_t result, _QWORD *a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = *(_DWORD *)(result + 12);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_33;
  }
  v3 = 0;
  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)result + 40 * v2;
  v6 = v5;
  v7 = v5;
  do
  {
    v8 = *(unsigned int **)(v4 + 8);
    v9 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((*a2 & 1) != 0)
    {
      v16 = *v9;
      if ((_DWORD)v16)
      {
        if (*((unsigned int **)v9 + 1) == v8)
          goto LABEL_16;
        v17 = 0;
        v18 = v9 + 4;
        while (v16 - 1 != v17)
        {
          v19 = *(unsigned int **)&v18[2 * v17++];
          if (v19 == v8)
          {
            if (v17 >= v16)
              break;
            goto LABEL_16;
          }
        }
      }
    }
    else if (v8 == v9)
    {
      goto LABEL_16;
    }
    v10 = v4;
    if (v7 != v5)
    {
      if (v6 == v4)
      {
        v10 = v7;
      }
      else
      {
        if (v6 <= v7)
        {
          v14 = 0;
          v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v6) >> 3);
          do
          {
            v15 = v7 + v4 - v6 + v14;
            *(_QWORD *)(v15 - 8) = 0;
            *(_QWORD *)(v15 - 8) = *(_QWORD *)(v4 + v14 - 8);
            *(_BYTE *)(v15 - 40) = *(_BYTE *)(v4 + v14 - 40);
            *(_OWORD *)(v15 - 32) = *(_OWORD *)(v4 + v14 - 32);
            *(_DWORD *)(v15 - 16) = *(_DWORD *)(v4 + v14 - 16);
            v14 -= 40;
          }
          while (v4 + v14 != v6);
        }
        else
        {
          v11 = 0;
          do
          {
            v12 = v7 + v11;
            *(_QWORD *)(v12 + 32) = 0;
            *(_QWORD *)(v12 + 32) = *(_QWORD *)(v6 + v11 + 32);
            *(_BYTE *)v12 = *(_BYTE *)(v6 + v11);
            *(_OWORD *)(v12 + 8) = *(_OWORD *)(v6 + v11 + 8);
            *(_DWORD *)(v12 + 24) = *(_DWORD *)(v6 + v11 + 24);
            v11 += 40;
          }
          while (v6 + v11 != v4);
          v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v6) >> 3);
        }
        v10 = v7 + 40 * v13;
      }
    }
    v6 = v4 + 40;
    ++v3;
    v7 = v10;
LABEL_16:
    v4 += 40;
  }
  while (v4 < v5);
  if (v6 != v5)
  {
    if (v6 <= v7)
    {
      v22 = 0;
      v23 = v7 + v5 - v6;
      do
      {
        v24 = v23 + v22;
        *(_QWORD *)(v24 - 8) = 0;
        *(_QWORD *)(v24 - 8) = *(_QWORD *)(v5 + v22 - 8);
        *(_BYTE *)(v24 - 40) = *(_BYTE *)(v5 + v22 - 40);
        *(_OWORD *)(v24 - 32) = *(_OWORD *)(v5 + v22 - 32);
        *(_DWORD *)(v24 - 16) = *(_DWORD *)(v5 + v22 - 16);
        v22 -= 40;
      }
      while (v5 + v22 != v6);
    }
    else
    {
      v20 = 0;
      do
      {
        v21 = v7 + v20;
        *(_QWORD *)(v21 + 32) = 0;
        *(_QWORD *)(v21 + 32) = *(_QWORD *)(v6 + v20 + 32);
        *(_BYTE *)v21 = *(_BYTE *)(v6 + v20);
        *(_OWORD *)(v21 + 8) = *(_OWORD *)(v6 + v20 + 8);
        *(_DWORD *)(v21 + 24) = *(_DWORD *)(v6 + v20 + 24);
        v20 += 40;
      }
      while (v6 + v20 != v5);
    }
  }
LABEL_33:
  *(_DWORD *)(result + 12) = v2 - v3;
  return result;
}

uint64_t JSC::DeleteByStatus::visitAggregate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = (uint64_t *)(*(_QWORD *)result + 32);
    do
    {
      v6 = *v5;
      v5 += 5;
      v7 = v6 & 1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 0;
      if (v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v4 -= 40;
    }
    while (v4);
  }
  return result;
}

void JSC::DeleteByStatus::visitAggregate(JSC::DeleteByStatus *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v8 = *((unsigned int *)this + 3);
  if ((_DWORD)v8)
  {
    v10 = (unint64_t *)(*(_QWORD *)this + 32);
    v11 = 40 * v8;
    do
    {
      v12 = *v10;
      v10 += 5;
      JSC::CacheableIdentifier::visitAggregate<JSC::SlotVisitor>(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v11 -= 40;
    }
    while (v11);
  }
}

uint64_t JSC::DeleteByVariant::finalize(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 8) != 0)
  {
    if ((*(_BYTE *)(v4 - 79) & 1) == 0)
      return 0;
  }
  else
  {
    result = JSC::MarkedBlock::isMarked(v4 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(a2 + 432), v4);
    if (!(_DWORD)result)
      return result;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return 1;
  if ((v6 & 8) != 0)
    return (*(_BYTE *)(v6 - 79) & 1) != 0;
  result = JSC::MarkedBlock::isMarked(v6 & 0xFFFFFFFFFFFFC000, *(_DWORD *)(a2 + 432), v6);
  if ((_DWORD)result)
    return 1;
  return result;
}

__n128 JSC::DeleteByVariant::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

__n128 JSC::DeleteByVariant::DeleteByVariant(JSC::DeleteByVariant *this, const JSC::DeleteByVariant *a2)
{
  __n128 result;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *(_BYTE *)this = *(_BYTE *)a2;
  result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  return result;
}

BOOL JSC::DeleteByVariant::writesStructures(JSC::DeleteByVariant *this)
{
  return *((_QWORD *)this + 2) != 0;
}

uint64_t JSC::DeleteByVariant::dumpInContext(JSC::DeleteByVariant *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;
  const char *v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  WTF::PrintStream *v10;
  unint64_t v11;
  WTF::PrintStream *v12;
  int v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;

  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "<");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", "id='");
  JSC::CacheableIdentifier::dump((JSC::DeleteByVariant *)((char *)this + 32), v6);
  WTF::PrintStream::printf(v6, "%s", "', result=");
  if (*(_BYTE *)this)
    v7 = "true";
  else
    v7 = "false";
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v8, "%s", v7);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v10, "%s", ", ");
    JSC::Structure::dump(v9, v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v12, "%s", " -> ");
    JSC::Structure::dump(v11, v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v13 = *((_DWORD *)this + 6);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v14, "%s", ", offset = ");
  WTF::PrintStream::printf(v14, "%d", v13);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v15, "%s", ">");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::DirectEvalCodeCache::setSlow(uint64_t a1, uint64_t a2, unint64_t a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned __int8 *v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;

  if ((*(_WORD *)(*(_QWORD *)(a6 + 80) + 40) & 0x800) != 0)
    return;
  v9 = a5;
  v14 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 8);
LABEL_5:
  v16 = *a4;
  if (*a4)
    *(_DWORD *)v16 += 2;
  v36 = a6;
  v37 = v16;
  v38 = v9;
  v17 = *(_QWORD *)(a2 + 56);
  if (a3 && *(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(a3 + 7))
    JSC::Heap::writeBarrierSlowPath(v17 + 192, a3);
  WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::inlineSet<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>((uint64_t *)a1, (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v36, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v35);
  v25 = v37;
  v37 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = __ldxr(v14);
  if (v26 == 1)
  {
    if (!__stlxr(0, v14))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, v19, v20, v21, v22, v23, v24);
}

void JSC::DirectEvalCodeCache::visitAggregate(JSC::DirectEvalCodeCache *this, JSC::AbstractSlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v20;
  uint64_t v21;
  BOOL v22;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v12 = *(_QWORD *)this;
  if (!v12)
  {
    v13 = 0;
    v14 = 0;
    LODWORD(v15) = 0;
LABEL_7:
    v16 = v12 + 24 * v15;
    v12 = v14;
    goto LABEL_8;
  }
  v15 = *(unsigned int *)(v12 - 4);
  v13 = v12 + 24 * v15;
  if (!*(_DWORD *)(v12 - 12))
  {
    v14 = v12 + 24 * v15;
    goto LABEL_7;
  }
  if ((_DWORD)v15)
  {
    v21 = 24 * v15;
    while (1)
    {
      v22 = !*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == -1;
      if (!v22 && *(_QWORD *)v12 != -1)
        break;
      v12 += 24;
      v21 -= 24;
      if (!v21)
      {
        v12 = v13;
        break;
      }
    }
  }
  v16 = v13;
LABEL_8:
  while (v12 != v13)
  {
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v12 + 16));
    v17 = v12 + 24;
    v12 = v16;
    if (v17 != v16)
    {
      v12 = v17;
      while (1)
      {
        v18 = !*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == -1;
        if (!v18 && *(_QWORD *)v12 != -1)
          break;
        v12 += 24;
        if (v12 == v16)
        {
          v12 = v16;
          break;
        }
      }
    }
  }
  v20 = __ldxr(v10);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v10))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::DirectEvalCodeCache::visitAggregate(JSC::DirectEvalCodeCache *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v24;
  BOOL v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *(_QWORD *)this;
  if (!v12)
  {
    v13 = 0;
    v14 = 0;
    LODWORD(v15) = 0;
LABEL_6:
    v16 = v12 + 24 * v15;
    v12 = v14;
    goto LABEL_7;
  }
  v15 = *(unsigned int *)(v12 - 4);
  v13 = v12 + 24 * v15;
  if (!*(_DWORD *)(v12 - 12))
  {
    v14 = v12 + 24 * v15;
    goto LABEL_6;
  }
  if ((_DWORD)v15)
  {
    v24 = 24 * v15;
    while (1)
    {
      v25 = !*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == -1;
      if (!v25 && *(_QWORD *)v12 != -1)
        break;
      v12 += 24;
      v24 -= 24;
      if (!v24)
      {
        v12 = v13;
        break;
      }
    }
  }
  v16 = v13;
LABEL_7:
  while (v12 != v13)
  {
    v18 = *(_QWORD *)(v12 + 16);
    if (v18)
    {
      if ((v18 & 8) != 0)
      {
        if ((*(_BYTE *)(v18 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_21;
      }
      else
      {
        v19 = v18 & 0xFFFFFFFFFFFFC000;
        v20 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
        {
          v28 = *(_QWORD *)(v12 + 16);
          v29 = v12;
          v27 = v18 & 0xFFFFFFFFFFFFC000;
          v30 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v20, a3, a4, a5, a6, a7, a8);
          v19 = v27;
          v12 = v29;
          v16 = v30;
          v18 = v28;
        }
        if (((*(_QWORD *)(v19 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_21;
      }
      v31 = v16;
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, a4, a5, a6, a7, a8);
      v16 = v31;
    }
LABEL_21:
    v21 = v12 + 24;
    v12 = v16;
    if (v21 != v16)
    {
      v12 = v21;
      while (1)
      {
        v22 = !*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == -1;
        if (!v22 && *(_QWORD *)v12 != -1)
          break;
        v12 += 24;
        if (v12 == v16)
        {
          v12 = v16;
          break;
        }
      }
    }
  }
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v10))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet(int *a1, uint64_t a2)
{
  int *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  int v27;
  unsigned int v28;
  int v29;
  double v30;
  JSC::Profiler::Database *v31;
  uint64_t result;
  int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  double v53;
  double v54;
  double v55;
  int v56;
  unsigned int v57;
  double v58;
  float v59;
  float v60;
  double v61;
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  int v79;
  double v80;
  double v81;
  double v82;
  double v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  double v88;
  int v89;
  unint64_t v90;
  double v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  int v97;
  double v98;
  WTF *v99;

  v4 = a1 + 2;
  v5 = 1.0;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 192);
    if (!v6)
      v6 = a2;
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
    {
      v8 = *(unsigned __int8 *)(v7 + 12);
      if ((v8 & 0xFE) != 2 && v8 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198179028);
      }
    }
    v10 = *(_QWORD *)(v6 + 72);
    if (!v10)
      goto LABEL_16;
    v11 = *(double **)(v10 + 64752);
    v12 = *v11;
    if (*v11 == 0.0)
      goto LABEL_16;
    v13 = v11[1] / v12;
    if (v12 < 2.0)
    {
      v14 = 0.0;
    }
    else
    {
      v14 = v11[2] / v12 - v13 * v13;
      if (v14 <= 0.0)
        v14 = 0.0;
    }
    v15 = v13 + sqrt(v14);
    if (v15 < 0.0 || (HIDWORD(v90) = 1083129856, v15 > 1000.0))
    {
LABEL_16:
      v16 = 0;
    }
    else
    {
      LODWORD(v90) = *(_DWORD *)(v6 + 44);
      v91 = v15 * (double)v90;
      v16 = (unint64_t)v91;
      if (v91 >= 1.84467441e19)
        v16 = 0;
    }
    if (qword_1ECF4C1F0)
    {
      v17 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v16;
      v18 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
      v19 = (double)v18 * 0.25;
      v20 = v18 - (unint64_t)v19;
      v21 = v18 - 0x40000;
      if ((unint64_t)v19 >> 18)
        v21 = v20;
      if (v17 >= v21)
        v17 = v21;
      v22 = v21 - v17;
      v23 = v21 != v17;
      v24 = (double)v21 / (double)v22;
      if (v23 && v24 >= 1.0)
        v5 = (double)v21 / (double)v22;
      else
        v5 = 1.0;
      if (v24 < 1.0 && v23)
      {
        v5 = (double)v21 / (double)v22;
        if (v24 < 1.0)
          v5 = 1.0;
      }
    }
  }
  v25 = v5 * (double)a1[2];
  v26 = *((float *)a1 + 1) + (double)*a1;
  v95 = v26;
  v96 = v25;
  v27 = HIDWORD(xmmword_1ECF4C514);
  if (a2)
  {
    v28 = *(_DWORD *)(a2 + 44);
    if ((int)v28 >= SDWORD1(xmmword_1ECF4C524))
    {
      *(double *)&v99 = (double)v28;
      v61 = sqrt((double)v28 + 1.02406) * 0.061504 + 0.825914 + 0.0;
      if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 28) & 0x3000) == 0x1000)
      {
        v87 = DWORD1(xmmword_1ECF4C514);
        v61 = v61 * (double)SDWORD1(xmmword_1ECF4C514);
        v98 = v61;
        if (!BYTE1(qword_1ECF4C332))
          goto LABEL_74;
        v88 = v25;
      }
      else
      {
        v98 = v61;
        if (!BYTE1(qword_1ECF4C332))
        {
LABEL_74:
          v62 = sqrt(v61);
          v63 = (double)v27;
          if (v62 < 1.0)
            v62 = 1.0;
          v64 = v62 * v63;
          v65 = (COERCE_UNSIGNED_INT64(v62 * v63) >> 52) & 0x7FF;
          if ((v65 - 1023) <= 0x53)
          {
            v78 = *(_QWORD *)&v64 >> (51 - (COERCE_UNSIGNED_INT64(v62 * v63) >> 52));
            if (v65 > 0x433)
              LODWORD(v78) = *(_QWORD *)&v64 << ((COERCE_UNSIGNED_INT64(v62 * v63) >> 52) - 51);
            if (v65 >= 0x41F)
              v79 = v78;
            else
              v79 = (((1 << ((COERCE_UNSIGNED_INT64(v62 * v63) >> 52) + 1)) - 1) & v78)
                  + (1 << ((COERCE_UNSIGNED_INT64(v62 * v63) >> 52) + 1));
            if (v64 >= 0.0)
              v27 = v79;
            else
              v27 = -v79;
          }
          else
          {
            v27 = 0;
          }
          goto LABEL_29;
        }
        v88 = v25;
        v87 = 1;
      }
      v97 = v87;
      WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(a2, ": bytecode cost is ", (double *)&v99, ", scaling execution counter by ", &v98, " * ", &v97, "\n");
      v61 = v98;
      v25 = v88;
      goto LABEL_74;
    }
  }
LABEL_29:
  v29 = *v4;
  if (v27 < *v4)
    v29 = v27;
  v30 = v25 + (double)v29 * -0.5;
  v98 = v30;
  if (a2)
  {
    v31 = *(JSC::Profiler::Database **)(*(_QWORD *)(a2 + 72) + 93016);
    if (v31)
    {
      WTF::toCString<char [19],int,char [23],double,char [17],double,char [18],double>("activeThreshold = ", v4, ", modifiedThreshold = ", &v96, ", actualCount = ", &v95, ", desiredCount = ", &v98, (uint64_t *)&v99);
      JSC::Profiler::Database::logEvent(v31, a2, "thresholdCheck", &v99, v66, v67, v68, v69);
      v77 = v99;
      *(double *)&v99 = 0.0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1)
          WTF::fastFree((unint64_t)v77, v70, v71, v72, v73, v74, v75, v76);
        else
          --*(_DWORD *)v77;
      }
    }
  }
  if (v26 >= v30)
    return 1;
  v33 = *v4;
  if (*v4 == 0x7FFFFFFF)
  {
    result = 0;
    a1[2] = 0x7FFFFFFF;
    *(_QWORD *)a1 = 0x80000000;
    return result;
  }
  v34 = *((float *)a1 + 1) + (double)*a1;
  if (!a2)
  {
    v55 = (double)v33 - v34;
    if (v55 > 0.0)
    {
      v56 = HIDWORD(xmmword_1ECF4C514);
      goto LABEL_64;
    }
LABEL_71:
    *a1 = 0;
    v60 = v34;
    *((float *)a1 + 1) = v60;
    return 1;
  }
  v35 = *(_QWORD *)(a2 + 192);
  if (!v35)
    v35 = a2;
  v36 = *(_QWORD *)(v35 + 120);
  if (v36)
  {
    v37 = *(unsigned __int8 *)(v36 + 12);
    if ((v37 & 0xFE) != 2 && v37 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198179094);
    }
  }
  v39 = *(_QWORD *)(v35 + 72);
  if (!v39)
    goto LABEL_51;
  v40 = *(double **)(v39 + 64752);
  v41 = *v40;
  if (*v40 == 0.0)
    goto LABEL_51;
  v42 = v40[1] / v41;
  if (v41 < 2.0)
  {
    v43 = 0.0;
  }
  else
  {
    v43 = v40[2] / v41 - v42 * v42;
    if (v43 <= 0.0)
      v43 = 0.0;
  }
  v44 = v42 + sqrt(v43);
  if (v44 < 0.0 || (HIDWORD(v92) = 1083129856, v44 > 1000.0))
  {
LABEL_51:
    v45 = 0;
  }
  else
  {
    LODWORD(v92) = *(_DWORD *)(v35 + 44);
    v93 = v44 * (double)v92;
    v45 = (unint64_t)v93;
    if (v93 >= 1.84467441e19)
      v45 = 0;
  }
  if (!qword_1ECF4C1F0)
    goto LABEL_125;
  v46 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v45;
  v47 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v48 = (double)v47 * 0.25;
  v49 = v47 - (unint64_t)v48;
  v50 = v47 - 0x40000;
  if ((unint64_t)v48 >> 18)
    v50 = v49;
  if (v46 >= v50)
    v46 = v50;
  v51 = v50 - v46;
  v52 = v50 != v46;
  v53 = (double)v50 / (double)v51;
  v54 = v52 && v53 >= 1.0 ? (double)v50 / (double)v51 : 1.0;
  if (v53 < 1.0 && v52)
  {
    v54 = (double)v50 / (double)v51;
    if (v53 < 1.0)
LABEL_125:
      v54 = 1.0;
  }
  v55 = v54 * (double)v33 - v34;
  if (v55 <= 0.0)
    goto LABEL_71;
  v56 = HIDWORD(xmmword_1ECF4C514);
  v57 = *(_DWORD *)(a2 + 44);
  if ((int)v57 >= SDWORD1(xmmword_1ECF4C524))
  {
    v94 = *((float *)a1 + 1) + (double)*a1;
    *(double *)&v99 = (double)v57;
    v80 = sqrt((double)v57 + 1.02406) * 0.061504 + 0.825914 + 0.0;
    if ((*(_WORD *)(*(_QWORD *)(a2 + 56) + 28) & 0x3000) == 0x1000)
    {
      v89 = DWORD1(xmmword_1ECF4C514);
      v80 = v80 * (double)SDWORD1(xmmword_1ECF4C514);
      v98 = v80;
      if (!BYTE1(qword_1ECF4C332))
        goto LABEL_91;
    }
    else
    {
      v98 = v80;
      if (!BYTE1(qword_1ECF4C332))
      {
LABEL_91:
        v81 = sqrt(v80);
        v82 = (double)v56;
        if (v81 < 1.0)
          v81 = 1.0;
        v83 = v81 * v82;
        v84 = (COERCE_UNSIGNED_INT64(v81 * v82) >> 52) & 0x7FF;
        if ((v84 - 1023) <= 0x53)
        {
          v85 = *(_QWORD *)&v83 >> (51 - (COERCE_UNSIGNED_INT64(v81 * v82) >> 52));
          if (v84 > 0x433)
            LODWORD(v85) = *(_QWORD *)&v83 << ((COERCE_UNSIGNED_INT64(v81 * v82) >> 52) - 51);
          if (v84 >= 0x41F)
            v86 = v85;
          else
            v86 = (((1 << ((COERCE_UNSIGNED_INT64(v81 * v82) >> 52) + 1)) - 1) & v85)
                + (1 << ((COERCE_UNSIGNED_INT64(v81 * v82) >> 52) + 1));
          if (v83 >= 0.0)
            v56 = v86;
          else
            v56 = -v86;
        }
        else
        {
          v56 = 0;
        }
        v34 = v94;
        goto LABEL_64;
      }
      v89 = 1;
    }
    LODWORD(v96) = v89;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(a2, ": bytecode cost is ", (double *)&v99, ", scaling execution counter by ", &v98, " * ", &v96, "\n");
    v80 = v98;
    goto LABEL_91;
  }
LABEL_64:
  result = 0;
  v58 = (double)v56;
  if (v55 <= (double)v56)
    v58 = v55;
  *a1 = (int)-v58;
  v59 = v34 + v58;
  *((float *)a1 + 1) = v59;
  return result;
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  int v23;
  unsigned int v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  int v37;
  double v38;
  int v39;
  double v40;
  double v41;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  if (a2 == 0x7FFFFFFF)
  {
    *(_DWORD *)(result + 8) = 0x7FFFFFFF;
    *(_DWORD *)result = 0x80000000;
    return result;
  }
  if (!a3)
  {
    if (a2 > 0)
    {
      v22 = (double)a2;
      v23 = HIDWORD(xmmword_1ECF4C514);
      goto LABEL_30;
    }
LABEL_36:
    *(_QWORD *)result = 0;
    return result;
  }
  v3 = *(_QWORD *)(a3 + 192);
  if (!v3)
    v3 = a3;
  v4 = *(_QWORD *)(v3 + 120);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 12);
    if ((v5 & 0xFE) != 2 && v5 != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198179410);
    }
  }
  v7 = *(_QWORD *)(v3 + 72);
  if (v7)
  {
    v8 = *(double **)(v7 + 64752);
    v9 = *v8;
    if (*v8 == 0.0)
      goto LABEL_17;
    v10 = v8[1] / v9;
    if (v9 < 2.0)
    {
      v11 = 0.0;
    }
    else
    {
      v11 = v8[2] / v9 - v10 * v10;
      if (v11 <= 0.0)
        v11 = 0.0;
    }
    v12 = v10 + sqrt(v11);
    if (v12 < 0.0 || (HIDWORD(v34) = 1083129856, v12 > 1000.0))
    {
LABEL_17:
      v7 = 0;
    }
    else
    {
      LODWORD(v34) = *(_DWORD *)(v3 + 44);
      v35 = v12 * (double)v34;
      if (v35 >= 1.84467441e19)
        v7 = 0;
      else
        v7 = (unint64_t)v35;
    }
  }
  if (!qword_1ECF4C1F0)
    goto LABEL_61;
  v13 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v7;
  v14 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v15 = (double)v14 * 0.25;
  v16 = v14 - (unint64_t)v15;
  v17 = v14 - 0x40000;
  if ((unint64_t)v15 >> 18)
    v17 = v16;
  if (v13 >= v17)
    v13 = v17;
  v18 = v17 - v13;
  v19 = v17 != v13;
  v20 = (double)v17 / (double)v18;
  v21 = v19 && v20 >= 1.0 ? (double)v17 / (double)v18 : 1.0;
  if (v20 < 1.0 && v19)
  {
    v21 = (double)v17 / (double)v18;
    if (v20 < 1.0)
LABEL_61:
      v21 = 1.0;
  }
  v22 = v21 * (double)a2;
  if (v22 <= 0.0)
    goto LABEL_36;
  v23 = HIDWORD(xmmword_1ECF4C514);
  v24 = *(_DWORD *)(a3 + 44);
  if ((int)v24 >= SDWORD1(xmmword_1ECF4C524))
  {
    v41 = (double)v24;
    v26 = sqrt((double)v24 + 1.02406) * 0.061504 + 0.825914 + 0.0;
    if ((*(_WORD *)(*(_QWORD *)(a3 + 56) + 28) & 0x3000) == 0x1000)
    {
      v33 = DWORD1(xmmword_1ECF4C514);
      v26 = v26 * (double)SDWORD1(xmmword_1ECF4C514);
      v40 = v26;
      if (!BYTE1(qword_1ECF4C332))
        goto LABEL_39;
      v37 = HIDWORD(xmmword_1ECF4C514);
      v38 = v22;
      v36 = result;
    }
    else
    {
      v40 = v26;
      if (!BYTE1(qword_1ECF4C332))
      {
LABEL_39:
        v27 = sqrt(v26);
        v28 = (double)v23;
        if (v27 < 1.0)
          v27 = 1.0;
        v29 = v27 * v28;
        v30 = (COERCE_UNSIGNED_INT64(v27 * v28) >> 52) & 0x7FF;
        if ((v30 - 1023) <= 0x53)
        {
          v31 = *(_QWORD *)&v29 >> (51 - (COERCE_UNSIGNED_INT64(v27 * v28) >> 52));
          if (v30 > 0x433)
            LODWORD(v31) = *(_QWORD *)&v29 << ((COERCE_UNSIGNED_INT64(v27 * v28) >> 52) - 51);
          if (v30 >= 0x41F)
            v32 = v31;
          else
            v32 = (((1 << ((COERCE_UNSIGNED_INT64(v27 * v28) >> 52) + 1)) - 1) & v31)
                + (1 << ((COERCE_UNSIGNED_INT64(v27 * v28) >> 52) + 1));
          if (v29 >= 0.0)
            v23 = v32;
          else
            v23 = -v32;
        }
        else
        {
          v23 = 0;
        }
        goto LABEL_30;
      }
      v37 = HIDWORD(xmmword_1ECF4C514);
      v38 = v22;
      v36 = result;
      v33 = 1;
    }
    v39 = v33;
    WTF::dataLog<JSC::CodeBlock,char [20],double,char [32],double,char [4],int,char [2]>(a3, ": bytecode cost is ", &v41, ", scaling execution counter by ", &v40, " * ", &v39, "\n");
    v26 = v40;
    result = v36;
    v22 = v38;
    v23 = v37;
    goto LABEL_39;
  }
LABEL_30:
  if (v22 > (double)v23)
    v22 = (double)v23;
  *(_DWORD *)result = (int)-v22;
  v25 = v22 + 0.0;
  *(float *)(result + 4) = v25;
  return result;
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)0>::deferIndefinitely(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0x7FFFFFFF;
  *(_QWORD *)result = 0x80000000;
  return result;
}

double JSC::applyMemoryUsageHeuristics(JSC *this, JSC::CodeBlock *a2, JSC::CodeBlock *a3)
{
  int v3;
  JSC::CodeBlock *v4;
  JSC::ExecutableAllocator *v5;
  double v6;

  v3 = (int)this;
  if (a2)
  {
    v4 = (JSC::CodeBlock *)JSC::CodeBlock::baselineAlternative((uint64_t)a2);
    v5 = (JSC::ExecutableAllocator *)JSC::CodeBlock::predictedMachineCodeSize(v4);
    v6 = JSC::ExecutableAllocator::memoryPressureMultiplier(v5);
  }
  else
  {
    v6 = 1.0;
  }
  return v6 * (double)v3;
}

uint64_t JSC::maximumExecutionCountsBetweenCheckpoints(int a1, JSC::CodeBlock *this, double a3)
{
  uint64_t v3;
  uint64_t result;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  if (!a1)
  {
    v3 = HIDWORD(xmmword_1ECF4C514);
    if (this && *((_DWORD *)this + 11) >= SDWORD1(xmmword_1ECF4C524))
    {
      v5 = sqrt(JSC::CodeBlock::optimizationThresholdScalingFactor(this, a3));
      if (v5 < 1.0)
        v5 = 1.0;
      v6 = v5 * (double)(int)v3;
      v7 = (*(_QWORD *)&v6 >> 52) & 0x7FFLL;
      if ((v7 - 1023) <= 0x53)
      {
        v8 = *(_QWORD *)&v6 >> (51 - (*(_QWORD *)&v6 >> 52));
        if (v7 > 0x433)
          LODWORD(v8) = *(_QWORD *)&v6 << ((*(_QWORD *)&v6 >> 52) - 51);
        if (v7 >= 0x41F)
          v9 = v8;
        else
          v9 = (((1 << ((*(_QWORD *)&v6 >> 52) + 1)) - 1) & v8) + (1 << ((*(_QWORD *)&v6 >> 52) + 1));
        if (v6 >= 0.0)
          return v9;
        else
          return -v9;
      }
      else
      {
        return 0;
      }
    }
    return v3;
  }
  if (a1 == 1)
    return xmmword_1ECF4C524;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)1>::checkIfThresholdCrossedAndSet(uint64_t a1, uint64_t a2)
{
  int v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  uint64_t result;
  float v26;
  float v27;
  unint64_t v28;
  double v29;

  if (JSC::ExecutionCounter<(JSC::CountingVariant)1>::hasCrossedThreshold(a1, a2))
    return 1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 0x7FFFFFFF)
  {
    result = 0;
    *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
    *(_QWORD *)a1 = 0x80000000;
    return result;
  }
  v5 = 1.0;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 192);
    if (!v6)
      v6 = a2;
    v7 = *(_QWORD *)(v6 + 120);
    if (v7)
    {
      v8 = *(unsigned __int8 *)(v7 + 12);
      if ((v8 & 0xFE) != 2 && v8 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198179784);
      }
    }
    v10 = *(_QWORD *)(v6 + 72);
    if (!v10)
      goto LABEL_18;
    v11 = *(double **)(v10 + 64752);
    v12 = *v11;
    if (*v11 == 0.0)
      goto LABEL_18;
    v13 = v11[1] / v12;
    if (v12 < 2.0)
    {
      v14 = 0.0;
    }
    else
    {
      v14 = v11[2] / v12 - v13 * v13;
      if (v14 <= 0.0)
        v14 = 0.0;
    }
    v15 = v13 + sqrt(v14);
    if (v15 < 0.0 || (HIDWORD(v28) = 1083129856, v15 > 1000.0))
    {
LABEL_18:
      v16 = 0;
    }
    else
    {
      LODWORD(v28) = *(_DWORD *)(v6 + 44);
      v29 = v15 * (double)v28;
      v16 = (unint64_t)v29;
      if (v29 >= 1.84467441e19)
        v16 = 0;
    }
    if (qword_1ECF4C1F0)
    {
      v17 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v16;
      v18 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
      v19 = (double)v18 * 0.25;
      v20 = v18 - (unint64_t)v19;
      v21 = v18 - 0x40000;
      if ((unint64_t)v19 >> 18)
        v21 = v20;
      if (v17 >= v21)
        v17 = v21;
      v22 = v21 - v17;
      if (v22)
      {
        v5 = (double)v21 / (double)v22;
        if (v5 < 1.0)
          v5 = 1.0;
      }
    }
  }
  v23 = *(float *)(a1 + 4) + (double)*(int *)a1;
  v24 = v5 * (double)v4 - v23;
  if (v24 <= 0.0)
  {
    *(_DWORD *)a1 = 0;
    v27 = v23;
    *(float *)(a1 + 4) = v27;
    return 1;
  }
  result = 0;
  if (v24 > (double)(int)xmmword_1ECF4C524)
    v24 = (double)(int)xmmword_1ECF4C524;
  *(_DWORD *)a1 = (int)-v24;
  v26 = v23 + v24;
  *(float *)(a1 + 4) = v26;
  return result;
}

BOOL JSC::ExecutionCounter<(JSC::CountingVariant)1>::hasCrossedThreshold(uint64_t a1, uint64_t a2)
{
  int v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  JSC::Profiler::Database *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  WTF *v44;

  v3 = *(_DWORD *)(a1 + 8);
  v4 = 1.0;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 192);
    if (!v5)
      v5 = a2;
    v6 = *(_QWORD *)(v5 + 120);
    if (v6)
    {
      v7 = *(unsigned __int8 *)(v6 + 12);
      if ((v7 & 0xFE) != 2 && v7 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1981799ECLL);
      }
    }
    v9 = *(_QWORD *)(v5 + 72);
    if (!v9)
      goto LABEL_16;
    v10 = *(double **)(v9 + 64752);
    v11 = *v10;
    if (*v10 == 0.0)
      goto LABEL_16;
    v12 = v10[1] / v11;
    if (v11 < 2.0)
    {
      v13 = 0.0;
    }
    else
    {
      v13 = v10[2] / v11 - v12 * v12;
      if (v13 <= 0.0)
        v13 = 0.0;
    }
    v14 = v12 + sqrt(v13);
    if (v14 < 0.0 || (HIDWORD(v39) = 1083129856, v14 > 1000.0))
    {
LABEL_16:
      v15 = 0;
    }
    else
    {
      LODWORD(v39) = *(_DWORD *)(v5 + 44);
      v40 = v14 * (double)v39;
      v15 = (unint64_t)v40;
      if (v40 >= 1.84467441e19)
        v15 = 0;
    }
    if (qword_1ECF4C1F0)
    {
      v16 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v15;
      v17 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
      v18 = (double)v17 * 0.25;
      v19 = v17 - (unint64_t)v18;
      v20 = v17 - 0x40000;
      if ((unint64_t)v18 >> 18)
        v20 = v19;
      if (v16 >= v20)
        v16 = v20;
      v21 = v20 - v16;
      if (v21)
      {
        v4 = (double)v20 / (double)v21;
        if (v4 < 1.0)
          v4 = 1.0;
      }
    }
  }
  v22 = v4 * (double)v3;
  v23 = *(float *)(a1 + 4) + (double)*(int *)a1;
  v42 = v23;
  v43 = v22;
  if ((int)xmmword_1ECF4C524 < v3)
    v3 = xmmword_1ECF4C524;
  v24 = v22 + (double)v3 * -0.5;
  v41 = v24;
  if (a2)
  {
    v25 = *(JSC::Profiler::Database **)(*(_QWORD *)(a2 + 72) + 93016);
    if (v25)
    {
      WTF::toCString<char [19],int,char [23],double,char [17],double,char [18],double>("activeThreshold = ", (_DWORD *)(a1 + 8), ", modifiedThreshold = ", &v43, ", actualCount = ", &v42, ", desiredCount = ", &v41, (uint64_t *)&v44);
      JSC::Profiler::Database::logEvent(v25, a2, "thresholdCheck", &v44, v27, v28, v29, v30);
      v38 = v44;
      v44 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 1)
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        else
          --*(_DWORD *)v38;
      }
    }
  }
  return v23 >= v24;
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)1>::setNewThreshold(uint64_t result, int a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  float v22;
  unint64_t v23;
  double v24;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a2;
  if (a2 == 0x7FFFFFFF)
  {
    *(_DWORD *)(result + 8) = 0x7FFFFFFF;
    *(_DWORD *)result = 0x80000000;
  }
  else
  {
    v3 = 1.0;
    if (a3)
    {
      v4 = *(_QWORD *)(a3 + 192);
      if (!v4)
        v4 = a3;
      v5 = *(_QWORD *)(v4 + 120);
      if (v5)
      {
        v6 = *(unsigned __int8 *)(v5 + 12);
        if ((v6 & 0xFE) != 2 && v6 != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198179BB8);
        }
      }
      v8 = *(_QWORD *)(v4 + 72);
      if (!v8)
        goto LABEL_17;
      v9 = *(double **)(v8 + 64752);
      v10 = *v9;
      if (*v9 == 0.0)
        goto LABEL_17;
      v11 = v9[1] / v10;
      if (v10 < 2.0)
      {
        v12 = 0.0;
      }
      else
      {
        v12 = v9[2] / v10 - v11 * v11;
        if (v12 <= 0.0)
          v12 = 0.0;
      }
      v13 = v11 + sqrt(v12);
      if (v13 < 0.0 || (HIDWORD(v23) = 1083129856, v13 > 1000.0))
      {
LABEL_17:
        v14 = 0;
      }
      else
      {
        LODWORD(v23) = *(_DWORD *)(v4 + 44);
        v24 = v13 * (double)v23;
        v14 = (unint64_t)v24;
        if (v24 >= 1.84467441e19)
          v14 = 0;
      }
      if (qword_1ECF4C1F0)
      {
        v15 = *(_QWORD *)(qword_1ECF4C1F0 + 80) + v14;
        v16 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
        v17 = (double)v16 * 0.25;
        v18 = v16 - (unint64_t)v17;
        v19 = v16 - 0x40000;
        if ((unint64_t)v17 >> 18)
          v19 = v18;
        if (v15 >= v19)
          v15 = v19;
        v20 = v19 - v15;
        if (v20)
        {
          v3 = (double)v19 / (double)v20;
          if (v3 < 1.0)
            v3 = 1.0;
        }
      }
    }
    v21 = v3 * (double)a2;
    if (v21 <= 0.0)
    {
      *(_QWORD *)result = 0;
    }
    else
    {
      if (v21 > (double)(int)xmmword_1ECF4C524)
        v21 = (double)(int)xmmword_1ECF4C524;
      *(_DWORD *)result = (int)-v21;
      v22 = v21 + 0.0;
      *(float *)(result + 4) = v22;
    }
  }
  return result;
}

uint64_t JSC::ExecutionCounter<(JSC::CountingVariant)1>::dump(uint64_t a1, WTF::PrintStream *this)
{
  return WTF::PrintStream::printf(this, "%lf/%lf, %d", *(float *)(a1 + 4) + (double)*(int *)a1, (double)*(int *)(a1 + 8), *(_DWORD *)a1);
}

JSC::DeleteByStatus *JSC::DeleteByStatus::DeleteByStatus(JSC::DeleteByStatus *this, const JSC::DeleteByStatus *a2)
{
  uint64_t v4;
  JSC::DeleteByStatus *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;

  v4 = *((unsigned int *)a2 + 3);
  result = (JSC::DeleteByStatus *)((char *)this + 16);
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 3) = v4;
  if (v4 >= 2)
  {
    if (v4 >= 0x6666667)
    {
      __break(0xC471u);
      return result;
    }
    v11 = 40 * v4;
    result = (JSC::DeleteByStatus *)WTF::fastMalloc((WTF *)(40 * v4));
    *((_DWORD *)this + 2) = (v11 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)this = result;
  }
  v6 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)a2;
    v9 = 40 * v6;
    do
    {
      v10 = (char *)result + v7;
      *((_QWORD *)v10 + 4) = 0;
      *((_QWORD *)v10 + 4) = *(_QWORD *)(v8 + v7 + 32);
      *v10 = *(_BYTE *)(v8 + v7);
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v8 + v7 + 8);
      *((_DWORD *)v10 + 6) = *(_DWORD *)(v8 + v7 + 24);
      v7 += 40;
    }
    while (v9 != v7);
  }
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  return this;
}

unint64_t WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 != (_DWORD *)a1)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = a2[3];
    if (v10 > v11)
    {
      *(_DWORD *)(a1 + 12) = v11;
      v10 = v11;
    }
    else if (v11 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, a2, a3, a4, a5, a6, a7, a8);
      WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
      v10 = *(_DWORD *)(a1 + 12);
    }
    std::copy_n[abi:sn180100]<JSC::DeleteByVariant const*,unsigned long,JSC::DeleteByVariant*,0>(*(_QWORD *)a2, v10, *(_QWORD *)a1);
    v12 = *(unsigned int *)(a1 + 12);
    v13 = a2[3];
    if ((_DWORD)v12 != (_DWORD)v13)
    {
      v14 = *(_QWORD *)a2;
      v15 = *(_QWORD *)a1;
      v16 = 40 * v12;
      v17 = 40 * v13;
      do
      {
        v18 = v15 + v16;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 32) = *(_QWORD *)(v14 + v16 + 32);
        *(_BYTE *)v18 = *(_BYTE *)(v14 + v16);
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v14 + v16 + 8);
        *(_DWORD *)(v18 + 24) = *(_DWORD *)(v14 + v16 + 24);
        v15 += 40;
        v17 -= 40;
        v14 += 40;
      }
      while (v16 != v17);
    }
    *(_DWORD *)(a1 + 12) = v13;
  }
  return a1;
}

__n128 std::copy_n[abi:sn180100]<JSC::DeleteByVariant const*,unsigned long,JSC::DeleteByVariant*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  if (a2)
  {
    v3 = 0;
    do
    {
      v4 = a3 + v3;
      *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + v3 + 32);
      *(_BYTE *)v4 = *(_BYTE *)(a1 + v3);
      result = *(__n128 *)(a1 + v3 + 8);
      *(__n128 *)(v4 + 8) = result;
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(a1 + v3 + 24);
      v3 += 40;
    }
    while (40 * a2 != v3);
  }
  return result;
}

unint64_t WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v8 = result;
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8 && result != 0)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (!result)
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 1;
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<JSC::DeleteByVariant,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else if (a2 >= 0x6666667)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = 40 * a2;
    result = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = result;
  }
  return result;
}

void WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::DeleteByVariant,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    v12 = *(_QWORD *)a1;
    if ((_DWORD)v4)
    {
      v13 = 0;
      do
      {
        v14 = v12 + v13;
        *(_QWORD *)(v14 + 32) = 0;
        *(_QWORD *)(v14 + 32) = *(_QWORD *)(v3 + v13 + 32);
        *(_BYTE *)v14 = *(_BYTE *)(v3 + v13);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v3 + v13 + 8);
        *(_DWORD *)(v14 + 24) = *(_DWORD *)(v3 + v13 + 24);
        v13 += 40;
      }
      while (40 * v4 != v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (v12 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

__n128 WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DeleteByVariant const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  __n128 result;

  v3 = WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v3 + 32);
  *(_BYTE *)v6 = *(_BYTE *)v3;
  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(v6 + 8) = result;
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::DeleteByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::inlineSet<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>(uint64_t *a1@<X0>, WTF::AtomStringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  WTF::AtomStringImpl *v9;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  _QWORD *v20;
  int v22;
  const WTF::StringImpl *v23;
  _BOOL4 v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  const WTF::StringImpl *v34;
  const WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;

  v9 = a2;
  v12 = *a1;
  if (*a1
    || (v34 = a3,
        WTF::HashTable<JSC::DirectEvalCodeCache::CacheKey,WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>>::rehash(a1, 8u, 0), a3 = v34, (v12 = *a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(_DWORD *)(*(_QWORD *)v9 + 16);
  if (v14 < 0x100)
  {
    v35 = a3;
    v15 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v9);
    a3 = v35;
  }
  else
  {
    v15 = v14 >> 8;
  }
  v16 = (*((_DWORD *)v9 + 2) ^ v15) & v13;
  v17 = v12 + 24 * v16;
  v18 = *(_DWORD *)(v17 + 8);
  v19 = *(WTF **)v17;
  v20 = 0;
  if (v18 == -1 && v19 == 0)
  {
LABEL_21:
    if (v20)
    {
      *v20 = 0;
      v20[1] = 0;
      *((_DWORD *)v20 + 2) = -1;
      v20[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v17 = (uint64_t)v20;
    }
    v26 = *(WTF::StringImpl **)v9;
    *(_QWORD *)v9 = 0;
    v27 = *(WTF::StringImpl **)v17;
    *(_QWORD *)v17 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        v36 = a3;
        WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        a3 = v36;
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    *(_DWORD *)(v17 + 8) = *((_DWORD *)v9 + 2);
    *(_QWORD *)(v17 + 16) = *(_QWORD *)a3;
    v28 = *a1;
    if (*a1)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *a1;
    if (*a1)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_32;
    }
    else if (3 * v33 > 4 * v32)
    {
LABEL_32:
      *(_QWORD *)a9 = v17;
      *(_QWORD *)(a9 + 8) = v30 + 24 * v33;
      *(_BYTE *)(a9 + 16) = 1;
      return;
    }
    v17 = WTF::HashTable<JSC::DirectEvalCodeCache::CacheKey,WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>>::expand(a1, v17);
    v30 = *a1;
    if (*a1)
      LODWORD(v33) = *(_DWORD *)(v30 - 4);
    else
      LODWORD(v33) = 0;
    goto LABEL_32;
  }
  v22 = 1;
  while (1)
  {
    if (v19 == (WTF *)-1)
    {
      v20 = (_QWORD *)v17;
      goto LABEL_16;
    }
    if (v18 == *((_DWORD *)v9 + 2))
    {
      a2 = *(WTF::AtomStringImpl **)v9;
      if (v19 == *(WTF **)v9)
        break;
      if (v19)
      {
        if (a2)
        {
          v23 = a3;
          v24 = WTF::equal(v19, a2, a3);
          a3 = v23;
          if (v24)
            break;
        }
      }
    }
LABEL_16:
    v16 = ((_DWORD)v16 + v22) & v13;
    v17 = v12 + 24 * v16;
    v18 = *(_DWORD *)(v17 + 8);
    v19 = *(WTF **)v17;
    ++v22;
    if (v18 == -1 && v19 == 0)
      goto LABEL_21;
  }
  v45 = *a1;
  if (*a1)
    v46 = *(_DWORD *)(v45 - 4);
  else
    v46 = 0;
  *(_QWORD *)a9 = v17;
  *(_QWORD *)(a9 + 8) = v45 + 24 * v46;
  *(_BYTE *)(a9 + 16) = 0;
  *(_QWORD *)(v12 + 24 * v16 + 16) = *(_QWORD *)a3;
}

uint64_t WTF::HashTable<JSC::DirectEvalCodeCache::CacheKey,WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::DirectEvalCodeCache::CacheKey,WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>>::rehash(a1, v4, a2);
}

uint64_t WTF::HashTable<JSC::DirectEvalCodeCache::CacheKey,WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::HashMap<JSC::DirectEvalCodeCache::CacheKey,JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>,JSC::DirectEvalCodeCache::CacheKey::Hash,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>,WTF::HashTraits<JSC::WriteBarrier<JSC::DirectEvalExecutable,WTF::RawPtrTraits<JSC::DirectEvalExecutable>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::SimpleClassHashTraits<JSC::DirectEvalCodeCache::CacheKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int i;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 32);
    do
    {
      *(v18 - 2) = 0;
      *(v18 - 1) = 0;
      *((_DWORD *)v18 - 2) = -1;
      *v18 = 0;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    v21 = a3;
    do
    {
      v22 = v5 + 24 * v19;
      v23 = *(WTF::StringImpl **)v22;
      if (*(_QWORD *)v22 != -1)
      {
        v24 = *(_DWORD *)(v22 + 8);
        if (v23)
          v25 = 0;
        else
          v25 = v24 == -1;
        if (v25)
        {
          *(_QWORD *)v22 = 0;
        }
        else
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v23 + 4);
          if (v28 < 0x100)
          {
            v36 = v21;
            v29 = WTF::StringImpl::hashSlowCase(v23);
            v21 = v36;
            v24 = *(_DWORD *)(v22 + 8);
          }
          else
          {
            v29 = v28 >> 8;
          }
          v30 = 0;
          for (i = v24 ^ v29; ; i = v30 + v32)
          {
            v32 = i & v27;
            v33 = v26 + 24 * v32;
            if (*(_DWORD *)(v33 + 8) == -1 && !*(_QWORD *)v33)
              break;
            ++v30;
          }
          *(_QWORD *)v33 = 0;
          v34 = *(WTF::StringImpl **)v22;
          *(_QWORD *)v22 = 0;
          *(_QWORD *)v33 = v34;
          *(_DWORD *)(v33 + 8) = v24;
          *(_QWORD *)(v26 + 24 * v32 + 16) = *(_QWORD *)(v5 + 24 * v19 + 16);
          v35 = *(WTF::StringImpl **)v22;
          *(_QWORD *)v22 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              v37 = v21;
              WTF::StringImpl::~StringImpl(v35, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
              v21 = v37;
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v22 == v21)
            v20 = v33;
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

void WTF::toCString<char [19],int,char [23],double,char [17],double,char [18],double>(const char *a1@<X0>, _DWORD *a2@<X1>, const char *a3@<X2>, double *a4@<X3>, const char *a5@<X4>, double *a6@<X5>, const char *a7@<X6>, double *a8@<X7>, uint64_t *a9@<X8>)
{
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (**v29)(WTF::StringPrintStream *__hidden);
  _BYTE *v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = off_1E3572250;
  v30 = v32;
  v31 = xmmword_199122F80;
  v32[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a1);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%d", *a2);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a3);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%lf", *a4);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a5);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%lf", *a6);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%s", a7);
  WTF::PrintStream::printf((WTF::PrintStream *)&v29, "%lf", *a8);
  v29[5]((WTF::StringPrintStream *)&v29);
  v25 = v30;
  v24 = v31;
  *a9 = 0;
  if (!v25)
  {
    v28 = 0;
LABEL_6:
    WTF::fastFree(v28, v17, v18, v19, v20, v21, v22, v23);
    return;
  }
  if (v24 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x19817AAA8);
  }
  v26 = WTF::fastMalloc((WTF *)(v24 + 17));
  *(_DWORD *)v26 = 1;
  *(_QWORD *)(v26 + 8) = v24;
  *a9 = v26;
  v27 = v26 + 16;
  memcpy((void *)(v26 + 16), v25, v24);
  *(_BYTE *)(v27 + v24) = 0;
  v28 = (unint64_t)v30;
  if (v30 != v32)
    goto LABEL_6;
}

uint64_t JSC::ExpressionInfo::Encoder::adjustInstPC(uint64_t result, unsigned int *a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;

  v3 = *(unsigned int *)(result + 60);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19817AE00);
  }
  v6 = result;
  v7 = (uint64_t *)(result + 48);
  v8 = *(_QWORD *)(result + 48);
  v9 = (unint64_t)a2 - v8;
  v10 = ((unint64_t)a2 - v8) >> 2;
  v11 = *a2;
  v12 = v11 >> 27;
  if (v11 >> 27 == 30)
  {
    v13 = (v11 >> 23) & 7;
    if ((v11 & 0x4000000) != 0)
    {
      if (v13 == 7)
      {
        if ((v11 & 0x38000) == 0)
        {
          v32 = (v10 + 1);
          if (v32 < v3)
          {
            *(_DWORD *)(v8 + 4 * v32) += a3;
            return result;
          }
          __break(0xC471u);
LABEL_59:
          JUMPOUT(0x19817ADE8);
        }
        v28 = (v11 >> 18) & 0x1F;
        v33 = *a2;
        if ((_DWORD)v3 == *(_DWORD *)(result + 56))
        {
          result = WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>(result + 48, (unint64_t)&v33);
        }
        else
        {
          *(_DWORD *)(v8 + 4 * v3) = v11;
          ++*(_DWORD *)(result + 60);
        }
        if (v28 >= 2)
        {
          v29 = v28 - 1;
          v30 = a2 + 1;
          do
          {
            v31 = *(unsigned int *)(v6 + 60);
            if ((_DWORD)v31 == *(_DWORD *)(v6 + 56))
            {
              result = (uint64_t)WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo&>((uint64_t)v7, (unint64_t)v30);
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v31) = *v30;
              ++*(_DWORD *)(v6 + 60);
            }
            *v30++ = -268435456;
            --v29;
          }
          while (v29);
        }
        v14 = 0;
        LODWORD(v11) = a2[v28];
        a2[v28] = -268435456;
        LODWORD(v3) = *(_DWORD *)(v6 + 60);
      }
      else
      {
        v14 = 0;
        if (!v13)
        {
          v24 = ((v11 >> 13) & 0x3FF) + a3;
          if (v24 <= 0x3FF)
          {
            v16 = (*a2 & 0x1FFF | ((v24 & 0x3FF) << 13) | 0xF3800000) + 0x800000;
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      v14 = 0;
      if (!v13)
      {
        v15 = (v11 & 0x7FFFFF) + a3;
        if (!(v15 >> 23))
        {
          v16 = v15 | 0xF0000000;
LABEL_7:
          *a2 = v16;
          return result;
        }
      }
    }
  }
  else if (v12 == 31)
  {
    v27 = (v11 & 0x3FFFFFF) + a3;
    if (!(v27 >> 26))
    {
      v16 = v27 | 0xF8000000;
      goto LABEL_7;
    }
    v14 = 0;
  }
  else
  {
    if (v12 + a3 <= 0x1C)
    {
      *a2 = v11 & 0x7FFFFFF | ((v12 + a3) << 27);
      return result;
    }
    v14 = 1;
  }
  v17 = v3 - v10;
  if ((v3 - v10) >> 26)
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  v18 = (v9 >> 2);
  if (v18 >= v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19817AE08);
  }
  v19 = *v7;
  *(_DWORD *)(*v7 + 4 * v18) = v17 | 0xFC000000;
  if ((v14 & 1) == 0)
  {
    v33 = v11;
    v20 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v20 == *(_DWORD *)(v6 + 56))
    {
      result = WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v7, (unint64_t)&v33);
    }
    else
    {
      *(_DWORD *)(v19 + 4 * v20) = v11;
      ++*(_DWORD *)(v6 + 60);
    }
  }
  if (a3 >> 23)
  {
    v33 = -142344192;
    v25 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v25 == *(_DWORD *)(v6 + 56))
    {
      result = WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v7, (unint64_t)&v33);
      v26 = *(_DWORD *)(v6 + 60);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v25) = -142344192;
      v26 = *(_DWORD *)(v6 + 60) + 1;
      *(_DWORD *)(v6 + 60) = v26;
    }
    v33 = a3;
    if (v26 != *(_DWORD *)(v6 + 56))
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v26) = a3;
      goto LABEL_19;
    }
LABEL_36:
    result = WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v7, (unint64_t)&v33);
    goto LABEL_20;
  }
  v33 = a3 | 0xF0000000;
  v21 = *(unsigned int *)(v6 + 60);
  if ((_DWORD)v21 == *(_DWORD *)(v6 + 56))
    goto LABEL_36;
  *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v21) = a3 | 0xF0000000;
LABEL_19:
  ++*(_DWORD *)(v6 + 60);
LABEL_20:
  if (v14)
  {
    v33 = v11;
    v23 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v23 != *(_DWORD *)(v6 + 56))
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v23) = v11;
      goto LABEL_23;
    }
  }
  else
  {
    v33 = -209715200;
    v22 = *(unsigned int *)(v6 + 60);
    if ((_DWORD)v22 != *(_DWORD *)(v6 + 56))
    {
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v22) = -209715200;
LABEL_23:
      ++*(_DWORD *)(v6 + 60);
      return result;
    }
  }
  return WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>((uint64_t)v7, (unint64_t)&v33);
}

uint64_t JSC::ExpressionInfo::Decoder::decode(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;
  int v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int *v18;
  int v19;
  int v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(unsigned int **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v2;
  if (v2 == *(unsigned int **)(a1 + 40))
    return 1;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *v2;
  if (*v2 >> 28 == 15)
  {
    v7 = 0;
    v6 = 0;
    do
    {
      v18 = v7;
      if (v4 >> 27 == 31)
      {
        if ((v4 & 0x4000000) != 0)
        {
          v7 = v2;
          v2 += (v4 & 0x3FFFFFF) - 1;
        }
        else
        {
          v3 = 0;
          v32 = 0;
          v33 = 0;
          v6 = 1;
          LODWORD(v34) = 0;
          HIDWORD(v34) = v4 & 0x3FFFFFF;
        }
      }
      else
      {
        v19 = (v4 >> 23) & 7;
        if ((v4 & 0x4000000) == 0 && v19 == 7)
        {
          v7 = 0;
          v2 = v18;
        }
        else
        {
          if (v19 == 7)
          {
            v26 = (v4 >> 18) & 0x1F;
            if (v26)
            {
              v27 = 3 * v26;
              v28 = 15;
              do
              {
                v30 = v2[1];
                ++v2;
                v29 = v30;
                v31 = (char *)&v34 + 4;
                switch((v4 >> v28) & 7)
                {
                  case 0u:
                    goto LABEL_66;
                  case 1u:
                    v31 = (char *)&v34;
                    goto LABEL_66;
                  case 2u:
                    v31 = (char *)&v33 + 4;
                    goto LABEL_66;
                  case 3u:
                    v31 = (char *)&v33;
                    goto LABEL_66;
                  case 4u:
                    v31 = (char *)&v32 + 4;
                    goto LABEL_66;
                  case 5u:
                    v31 = (char *)&v32;
LABEL_66:
                    *(_DWORD *)v31 += v29;
                    break;
                  default:
                    break;
                }
                v28 -= 3;
              }
              while (v27 + v28 != 15);
            }
          }
          else if ((v4 & 0x4000000) != 0)
          {
            v22 = v4 >> 13;
            switch(v19)
            {
              case 0:
                v24 = (v4 >> 13) & 0x3FF;
                v25 = (char *)&v34 + 4;
                goto LABEL_28;
              case 1:
                v24 = (int)(v22 << 22) >> 22;
                v25 = (char *)&v34;
                goto LABEL_28;
              case 2:
                v24 = (v4 >> 13) & 0x3FF;
                v25 = (char *)&v33 + 4;
                goto LABEL_28;
              case 3:
                v24 = (v4 >> 13) & 0x3FF;
                v25 = (char *)&v33;
                goto LABEL_28;
              case 4:
                v24 = (int)(v22 << 22) >> 22;
                v25 = (char *)&v32 + 4;
                goto LABEL_28;
              case 5:
                v24 = (int)(v22 << 22) >> 22;
                v25 = (char *)&v32;
LABEL_28:
                *(_DWORD *)v25 += v24;
                break;
              default:
                break;
            }
            switch((v4 >> 10) & 7)
            {
              case 0u:
                v20 = v4 & 0x3FF;
LABEL_44:
                v21 = (char *)&v34 + 4;
                goto LABEL_35;
              case 1u:
                v20 = (int)(v4 << 22) >> 22;
LABEL_34:
                v21 = (char *)&v34;
                goto LABEL_35;
              case 2u:
                v20 = v4 & 0x3FF;
LABEL_31:
                v21 = (char *)&v33 + 4;
                goto LABEL_35;
              case 3u:
                v20 = v4 & 0x3FF;
LABEL_26:
                v21 = (char *)&v33;
                goto LABEL_35;
              case 4u:
                v20 = (int)(v4 << 22) >> 22;
LABEL_49:
                v21 = (char *)&v32 + 4;
                goto LABEL_35;
              case 5u:
                v20 = (int)(v4 << 22) >> 22;
LABEL_32:
                v21 = (char *)&v32;
LABEL_35:
                *(_DWORD *)v21 += v20;
                break;
              default:
                break;
            }
          }
          else
          {
            switch(v19)
            {
              case 0:
                v20 = v4 & 0x7FFFFF;
                goto LABEL_44;
              case 1:
                v20 = (int)(v4 << 9) >> 9;
                goto LABEL_34;
              case 2:
                v20 = v4 & 0x7FFFFF;
                goto LABEL_31;
              case 3:
                v20 = v4 & 0x7FFFFF;
                goto LABEL_26;
              case 4:
                v20 = (int)(v4 << 9) >> 9;
                goto LABEL_49;
              case 5:
                v20 = (int)(v4 << 9) >> 9;
                goto LABEL_32;
              default:
                break;
            }
          }
          v7 = v18;
        }
      }
      v23 = v2[1];
      ++v2;
      v4 = v23;
    }
    while (v23 >> 28 == 15);
    v5 = HIDWORD(v34);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  v8 = v3 + v5 + (v4 >> 27);
  if ((a2 & 0xFF00000000) != 0 && *(_BYTE *)(a1 + 72) && v8 > a2)
  {
    v14 = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    if ((v6 & 1) != 0)
    {
      v9 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      v9 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 4) = v8;
    v10 = v34 + (((int)(32 * v4) >> 25) ^ 0xFFFFFFC0);
    v11 = HIDWORD(v33) + ((v4 >> 14) & 0x3F);
    *(_DWORD *)(a1 + 16) = v10 + v9;
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v33 + ((v4 >> 8) & 0x3F);
    v12 = HIDWORD(v32) + (((char)v4 >> 5) ^ 0xFFFFFFFC);
    if (v12)
      v13 = 0;
    else
      v13 = *(_DWORD *)(a1 + 12);
    v14 = 0;
    v15 = *(_DWORD *)(a1 + 8) + v12;
    if ((~v4 & 0x1F) != 0)
      v10 = ((int)(v4 << 27) >> 27) ^ 0xFFFFFFF0;
    v16 = v13 + v32 + v10;
    *(_DWORD *)(a1 + 8) = v15;
    *(_DWORD *)(a1 + 12) = v16;
  }
  if (v7)
    v2 = v7;
  *(_QWORD *)(a1 + 64) = v2 + 1;
  return v14;
}

uint64_t JSC::ExpressionInfo::lineColumnForInstPC(JSC::ExpressionInfo *this, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  int v45;

  v4 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_6;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = (int *)(v4 + 12 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v31 = 1;
    while (v10 != -1)
    {
      v8 = (v8 + v31) & v5;
      v9 = (int *)(v4 + 12 * v8);
      v10 = *v9;
      ++v31;
      if (*v9 == a2)
        goto LABEL_3;
    }
    v9 = (int *)(v4 + 12 * *(unsigned int *)(v4 - 4));
  }
LABEL_3:
  if (v9 != (int *)(v4 + 12 * *(unsigned int *)(v4 - 4)))
    return *(_QWORD *)(v9 + 1);
LABEL_6:
  v13 = 0;
  v14 = (char *)this + 24;
  v15 = *((unsigned int *)this + 2);
  v16 = *((unsigned int *)this + 3);
  v17 = (char *)this + 8 * v15 + 24;
  v39 = v17;
  v40 = &v17[4 * v16];
  v18 = *((_DWORD *)this + 4);
  v35 = 0;
  v36 = 0;
  v38 = 0;
  v37 = 0;
  v41 = &v17[4 * (v18 + v16)];
  v42 = v17;
  v44 = 0;
  v45 = 0;
  if ((_DWORD)v15)
  {
    v34 = 0;
    do
    {
      if (*(_DWORD *)&v14[8 * ((v34 + v15) >> 1)] > a2)
        LODWORD(v15) = (v34 + v15) >> 1;
      else
        v34 = ((v34 + v15) >> 1) + 1;
    }
    while (v34 < v15);
    if (v34)
      v13 = *(unsigned int *)&v14[8 * v34 - 4];
    else
      v13 = 0;
  }
  v43 = &v17[4 * v13];
  while (!JSC::ExpressionInfo::Decoder::decode((uint64_t)&v35, a2 | 0x100000000))
    ;
  v11 = v36;
  if (v4
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::LineColumn>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::LineColumn>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::LineColumn,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::LineColumn>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash((uint64_t *)this, 8u), (v4 = *(_QWORD *)this) != 0))
  {
    v19 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
  v22 = v19 & (v21 ^ HIWORD(v21));
  v23 = (unsigned int *)(v4 + 12 * v22);
  v24 = *v23;
  if (*v23 == -1)
  {
LABEL_13:
    *v23 = a2;
    *(_QWORD *)(v23 + 1) = v11;
    v25 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v26 = *(_DWORD *)(v25 - 12) + 1;
    else
      v26 = 1;
    *(_DWORD *)(v25 - 12) = v26;
    v27 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 > 2 * v29)
        return v11;
    }
    else if (3 * v30 > 4 * v29)
    {
      return v11;
    }
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::LineColumn>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::LineColumn>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::LineColumn,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::LineColumn>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand((uint64_t *)this);
    return v11;
  }
  v32 = 0;
  v33 = 1;
  while (v24 != a2)
  {
    if (v24 == -2)
      v32 = v23;
    v22 = (v22 + v33) & v19;
    v23 = (unsigned int *)(v4 + 12 * v22);
    v24 = *v23;
    ++v33;
    if (*v23 == -1)
    {
      if (v32)
      {
        *v32 = -1;
        *(_QWORD *)(v32 + 1) = 0;
        --*(_DWORD *)(*(_QWORD *)this - 16);
        v23 = v32;
      }
      goto LABEL_13;
    }
  }
  return v11;
}

double JSC::ExpressionInfo::entryForInstPC@<D0>(JSC::ExpressionInfo *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  unsigned int v11;
  _OWORD v12[2];
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  int v19;

  v4 = 0;
  v5 = (char *)this + 24;
  v6 = *((unsigned int *)this + 2);
  v7 = *((unsigned int *)this + 3);
  v8 = (char *)this + 8 * v6 + 24;
  v13 = v8;
  v14 = &v8[4 * v7];
  memset(v12, 0, 28);
  v15 = &v8[4 * (*((_DWORD *)this + 4) + v7)];
  v16 = v8;
  v18 = 0;
  v19 = 0;
  if ((_DWORD)v6)
  {
    v11 = 0;
    do
    {
      if (*(_DWORD *)&v5[8 * ((v11 + v6) >> 1)] > a2)
        LODWORD(v6) = (v11 + v6) >> 1;
      else
        v11 = ((v11 + v6) >> 1) + 1;
    }
    while (v11 < v6);
    if (v11)
      v4 = *(unsigned int *)&v5[8 * v11 - 4];
    else
      v4 = 0;
  }
  v17 = &v8[4 * v4];
  v9 = a2 | 0x100000000;
  while (!JSC::ExpressionInfo::Decoder::decode((uint64_t)v12, v9))
    ;
  result = *(double *)((char *)v12 + 4);
  *(_OWORD *)a3 = *(_OWORD *)((char *)v12 + 4);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)((char *)&v12[1] + 4);
  return result;
}

uint64_t JSC::FullCodeOrigin::dump(JSC::FullCodeOrigin *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  WTF::PrintStream *v6;

  v4 = *(_QWORD *)this;
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  if (v4)
    JSC::CodeBlock::dumpAssumingJITType(v4);
  else
    WTF::PrintStream::printf(v5, "%s", "<none>");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", " ");
  JSC::CodeOrigin::dump((JSC::FullCodeOrigin *)((char *)this + 8), v6);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::GetByStatus::appendVariant(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  _DWORD *v14;
  unint64_t *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  JSC::ObjectPropertyConditionSet *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  char v52;
  char *v53;
  char *v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  const JSC::GetByVariant *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  JSType v97;
  unint64_t v98;
  char v99;
  int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  int v121;
  WTF *v122;

  v8 = (unint64_t)a2;
  if (*(_DWORD *)(a1 + 12))
  {
    v30 = 0;
    while (1)
    {
      v31 = *(_QWORD *)a1;
      v32 = (uint64_t *)(*(_QWORD *)a1 + (v30 << 6));
      v34 = v32 + 7;
      v33 = v32[7];
      v35 = *(_QWORD *)(v8 + 56);
      if ((v33 != 0) != (v35 != 0))
        goto LABEL_64;
      if (v33)
      {
        if ((v33 & 1) != 0)
          v36 = v33 & 0xFFFFFFFFFFFFFFFELL;
        else
          v36 = *(_QWORD *)(v33 + 8);
        if (v35)
        {
          if ((v35 & 1) != 0)
            v35 &= ~1uLL;
          else
            v35 = *(_QWORD *)(v35 + 8);
        }
        if (v36 != v35)
          goto LABEL_64;
      }
      v37 = v31 + (v30 << 6);
      v38 = (_DWORD *)(v37 + 16);
      if (*(_DWORD *)(v37 + 16) != *(_DWORD *)(v8 + 16))
        goto LABEL_64;
      v40 = *(_QWORD *)(v37 + 24);
      v39 = (uint64_t *)(v37 + 24);
      v41 = *(_QWORD *)(v8 + 24);
      if (v40)
      {
        if (!v41)
          goto LABEL_64;
      }
      else if (v41)
      {
        goto LABEL_64;
      }
      v42 = *(_QWORD *)(v31 + (v30 << 6) + 32);
      if (v42 != *(_QWORD *)(v8 + 32))
        goto LABEL_64;
      if (v42)
      {
        v94 = *(_QWORD *)(v42 + 24);
        if ((v94 & 1) != 0)
          v94 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v94 + 5) == 8)
        {
          v101 = *(_QWORD *)(v94 + 8);
          v102 = (unsigned int *)(v101 + 8);
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 + 1, v102));
          v95 = *(unsigned __int8 *)(v101 + 14);
          do
          {
            v104 = __ldaxr(v102);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v102));
          if (!v105)
          {
            atomic_store(1u, (unsigned int *)(v101 + 8));
            v121 = v95;
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 32))(v101);
            v95 = v121;
          }
        }
        else
        {
          v95 = *(unsigned __int8 *)(v94 + 64);
        }
        if (v95 == 152)
        {
          v96 = *v32 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*v32 & 1) != 0)
            v96 = *(_QWORD *)(v96 + 8);
          v120 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v96 + 9), (JSType)a2);
          v98 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*(_QWORD *)v8 & 1) != 0)
            v98 = *(_QWORD *)(v98 + 8);
          v99 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v98 + 9), v97);
          v100 = (v120 - 4) > 7u ? 0 : dword_199153064[(char)(v120 - 4)];
          v119 = (v99 - 4) > 7u ? 0 : dword_199153064[(char)(v99 - 4)];
          if (v100 != v119)
            goto LABEL_64;
        }
      }
      v43 = v31 + (v30 << 6);
      if (*(_QWORD *)(v43 + 40) != *(_QWORD *)(v8 + 40))
        goto LABEL_64;
      v44 = *(uint64_t **)(v43 + 48);
      v45 = *(uint64_t **)(v8 + 48);
      if (v44)
      {
        if (!v45)
          goto LABEL_64;
        v86 = *v44;
        v85 = v44[1];
        v88 = *v45;
        v87 = v45[1];
        if (v86 != v88 || v85 != v87)
          goto LABEL_64;
      }
      else if (v45)
      {
        goto LABEL_64;
      }
      a2 = (void *)(v8 + 8);
      v46 = v31 + (v30 << 6);
      v49 = *(_QWORD *)(v46 + 8);
      v48 = (JSC::ObjectPropertyConditionSet *)(v46 + 8);
      v47 = v49;
      if ((v49 == 0) == (*(_QWORD *)(v8 + 8) == 0))
      {
        if (!v47)
          goto LABEL_130;
        JSC::ObjectPropertyConditionSet::mergedWith(v48, (unint64_t)a2, a3, a4, a5, a6, a7, a8, &v122);
        v50 = (unsigned int *)v122;
        if (v122)
        {
          v51 = *((_DWORD *)v122 + 1);
          if (!v51)
            goto LABEL_80;
          if (*v38 == -1)
            goto LABEL_170;
          v52 = 0;
          v53 = (char *)v122 + 8;
          v54 = (char *)v122 + 24 * v51 + 8;
          do
          {
            while (1)
            {
              v55 = v53[14];
              v56 = v55 > 6;
              v57 = (1 << v55) & 0x63;
              if (v56 || v57 == 0)
                break;
              if ((v52 & 1) != 0)
                goto LABEL_80;
              v53 += 24;
              v52 = 1;
              if (v53 == v54)
                goto LABEL_55;
            }
            v53 += 24;
          }
          while (v53 != v54);
          if ((v52 & 1) != 0)
          {
LABEL_170:
            do
LABEL_55:
              v59 = __ldaxr(v50);
            while (__stlxr(v59 + 1, v50));
LABEL_56:
            v60 = *(unsigned int **)v48;
            *(_QWORD *)v48 = v50;
            if (v60)
            {
              do
                v61 = __ldaxr(v60);
              while (__stlxr(v61 - 1, v60));
              v62 = 1;
              if (v61 == 1)
              {
                atomic_store(1u, v60);
                WTF::fastFree((unint64_t)v60, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              v62 = 1;
            }
          }
          else
          {
LABEL_80:
            v62 = 0;
          }
          v63 = (unsigned int *)v122;
          v122 = 0;
          if (!v63)
            goto LABEL_63;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            atomic_store(1u, v63);
            WTF::fastFree((unint64_t)v63, a2, a3, a4, a5, a6, a7, a8);
            if ((v62 & 1) != 0)
            {
LABEL_130:
              v106 = *(_QWORD *)v8;
              if ((*(_QWORD *)v8 & 1) != 0)
              {
                WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v32, (_QWORD *)v8);
              }
              else
              {
                v107 = v106 & 0xFFFFFFFFFFFFFFFCLL;
                if ((v106 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                {
                  v108 = *v32;
                  if ((*v32 & 1) != 0)
                  {
                    WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v32, v107);
                  }
                  else if ((v108 & 0xFFFFFFFFFFFFFFFCLL) != v107)
                  {
                    if ((v108 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                    {
                      v117 = WTF::fastMalloc((WTF *)0x28);
                      *(_QWORD *)v117 = 0x400000002;
                      v118 = *v32;
                      *(_QWORD *)(v117 + 8) = *v32 & 0xFFFFFFFFFFFFFFFCLL;
                      *(_QWORD *)(v117 + 16) = v107;
                      v109 = v118 & 2 | v117 | 1;
                    }
                    else
                    {
                      v109 = *v32 & 2 | v107;
                    }
                    *v32 = v109;
                  }
                }
              }
              if (*v39)
                JSC::CallLinkStatus::merge(*v39, *(_QWORD *)(v8 + 24), a3, a4, a5, a6, a7, a8);
              v110 = *(unsigned int *)(a1 + 12);
              if ((_DWORD)v110)
              {
                v111 = 0;
                v112 = 0;
                while (1)
                {
                  if (v30 != v112)
                  {
                    v113 = (uint64_t *)(*(_QWORD *)a1 + v111);
                    v114 = v113[7];
                    v115 = *v34;
                    if ((v114 != 0) != (*v34 != 0))
                      return 0;
                    if (!v114)
                      goto LABEL_152;
                    if ((v114 & 1) != 0)
                      v116 = v114 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v116 = *(_QWORD *)(v114 + 8);
                    if (v115)
                    {
                      if ((v115 & 1) != 0)
                        v115 &= ~1uLL;
                      else
                        v115 = *(_QWORD *)(v115 + 8);
                    }
                    if (v116 == v115)
                    {
LABEL_152:
                      if (WTF::TinyPtrSet<JSC::Structure *>::overlaps(v113, v32))
                        return 0;
                      v110 = *(unsigned int *)(a1 + 12);
                    }
                  }
                  ++v112;
                  v111 += 64;
                  result = 1;
                  if (v112 >= v110)
                    return result;
                }
              }
              return 1;
            }
          }
          else
          {
LABEL_63:
            if (v62)
              goto LABEL_130;
          }
          goto LABEL_64;
        }
        if (*v38 == -1)
          goto LABEL_56;
      }
LABEL_64:
      ++v30;
      v10 = *(unsigned int *)(a1 + 12);
      if (v30 >= v10)
      {
        if (!*(_DWORD *)(a1 + 12))
          goto LABEL_3;
        v66 = 0;
        v67 = 56;
        while (1)
        {
          v68 = (uint64_t *)(*(_QWORD *)a1 + v67);
          v71 = *v68;
          v69 = v68 - 7;
          v70 = v71;
          v72 = *(_QWORD *)(v8 + 56);
          if ((v71 != 0) != (v72 != 0))
            return 0;
          if (!v70)
            goto LABEL_75;
          if ((v70 & 1) != 0)
            v73 = v70 & 0xFFFFFFFFFFFFFFFELL;
          else
            v73 = *(_QWORD *)(v70 + 8);
          if (v72)
          {
            if ((v72 & 1) != 0)
              v72 &= ~1uLL;
            else
              v72 = *(_QWORD *)(v72 + 8);
          }
          if (v73 == v72)
          {
LABEL_75:
            if (WTF::TinyPtrSet<JSC::Structure *>::overlaps(v69, (uint64_t *)v8))
              return 0;
            v10 = *(unsigned int *)(a1 + 12);
          }
          ++v66;
          v67 += 64;
          if (v66 >= v10)
            goto LABEL_3;
        }
      }
    }
  }
  v10 = 0;
LABEL_3:
  if (v10 != *(_DWORD *)(a1 + 8))
  {
    v11 = *(_QWORD *)a1 + (v10 << 6);
    v12 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)(v11 + 8) = 0;
    v13 = (unsigned int **)(v11 + 8);
    *(_DWORD *)(v11 + 16) = -1;
    v14 = (_DWORD *)(v11 + 16);
    *(_QWORD *)v11 = 0;
    *(_OWORD *)(v11 + 24) = 0u;
    v15 = (unint64_t *)(v11 + 24);
    *(_OWORD *)(v11 + 40) = 0u;
    v16 = (_QWORD *)(v11 + 40);
    *(_QWORD *)(v11 + 56) = v12;
    *(_QWORD *)(v11 + 56) = *(_QWORD *)(v8 + 56);
    if (v11 != v8)
    {
      if ((*(_QWORD *)v8 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v11, (_QWORD *)v8);
      else
        *(_QWORD *)v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFDLL;
    }
    v17 = *(unsigned int **)(v8 + 8);
    if (v17)
    {
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }
    v19 = (_QWORD *)(v11 + 32);
    v20 = *v13;
    *v13 = v17;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    v23 = (unint64_t *)(v11 + 48);
    *v14 = *(_DWORD *)(v8 + 16);
    *v19 = *(_QWORD *)(v8 + 32);
    *v16 = *(_QWORD *)(v8 + 40);
    v24 = *(_OWORD **)(v8 + 48);
    if (v24)
    {
      v90 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
      *v90 = *v24;
      v25 = *v23;
      *v23 = (unint64_t)v90;
      if (!v25)
      {
LABEL_16:
        v26 = *(_QWORD *)(v8 + 24);
        if (v26)
        {
          v81 = WTF::fastMalloc((WTF *)0x20);
          v82 = *(unsigned int *)(v26 + 12);
          result = v81 + 16;
          *(_QWORD *)v81 = v81 + 16;
          *(_DWORD *)(v81 + 8) = 1;
          *(_DWORD *)(v81 + 12) = v82;
          if (v82 >= 2)
          {
            if (v82 >> 29)
            {
              __break(0xC471u);
              return result;
            }
            result = WTF::fastMalloc((WTF *)(8 * v82));
            *(_DWORD *)(v81 + 8) = v82;
            *(_QWORD *)v81 = result;
          }
          v83 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v83)
          {
            v91 = *(uint64_t **)v26;
            v92 = 8 * v83;
            do
            {
              v93 = *v91++;
              *(_QWORD *)result = v93;
              result += 8;
              v92 -= 8;
            }
            while (v92);
          }
          *(_DWORD *)(v81 + 24) = *(_DWORD *)(v26 + 24);
          v27 = *v15;
          *v15 = v81;
          if (!v27)
            goto LABEL_21;
          v28 = *(_QWORD *)v27;
          if (v27 + 16 == *(_QWORD *)v27 || v28 == 0)
            goto LABEL_20;
        }
        else
        {
          v27 = *v15;
          *v15 = 0;
          if (!v27)
            goto LABEL_21;
          v28 = *(_QWORD *)v27;
          if (v27 + 16 == *(_QWORD *)v27 || !v28)
            goto LABEL_20;
        }
        *(_QWORD *)v27 = 0;
        *(_DWORD *)(v27 + 8) = 0;
        WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
LABEL_20:
        WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_21;
      }
    }
    else
    {
      v25 = *v23;
      *v23 = 0;
      if (!v25)
        goto LABEL_16;
    }
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_16;
  }
  v74 = (const JSC::GetByVariant *)WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v10 + 1, v8, a4, a5, a6, a7, a8);
  JSC::GetByVariant::GetByVariant((JSC::GetByVariant *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6)), v74, v75, v76, v77, v78, v79, v80);
LABEL_21:
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unsigned __int8 *JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByIdDirect>@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int32x2_t v3;
  int v4;
  int v5;
  int32x2_t v6;
  int v7;

  v2 = *result;
  if (v2 == 130)
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 2);
    v5 = *(_DWORD *)(result + 18);
  }
  else if (v2 == 128)
  {
    v6.i32[0] = *((__int16 *)result + 1);
    v6.i32[1] = *((__int16 *)result + 2);
    *(int8x8_t *)a2 = vbsl_s8((int8x8_t)vcgt_s32(v6, (int32x2_t)0x3F0000003FLL), (int8x8_t)vadd_s32(v6, vdup_n_s32(0x3FFFFFC0u)), (int8x8_t)v6);
    v7 = *((unsigned __int16 *)result + 4);
    *(_DWORD *)(a2 + 8) = *((unsigned __int16 *)result + 3);
    *(_DWORD *)(a2 + 12) = v7;
    v5 = *((unsigned __int16 *)result + 5);
  }
  else
  {
    v3.i32[0] = (char)result[1];
    v3.i32[1] = (char)result[2];
    *(int8x8_t *)a2 = vbsl_s8((int8x8_t)vcgt_s32(v3, (int32x2_t)0xF0000000FLL), (int8x8_t)vadd_s32(v3, vdup_n_s32(0x3FFFFFF0u)), (int8x8_t)v3);
    v4 = result[4];
    *(_DWORD *)(a2 + 8) = result[3];
    *(_DWORD *)(a2 + 12) = v4;
    v5 = result[5];
  }
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

void JSC::GetByVariant::~GetByVariant(JSC::GetByVariant *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (v10 + 16 != *(_QWORD *)v10 && v11 != 0)
    {
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((*(_QWORD *)this & 1) != 0)
    WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::GetByStatus::computeFor(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 *v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int i;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  WTF *v49;
  uint64_t v50;
  __int32 v51;
  __int32 v52;
  WTF *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  int v65;
  WTF *v66;
  unsigned __int8 *v68;
  int v69;
  _BYTE *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  __int128 *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  unint64_t *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  _OWORD *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  WTF *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unsigned __int8 *v133;
  int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  int v140;
  unsigned int v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int *v144;
  _DWORD **v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t *v149;
  char v150;
  _DWORD *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  int v168;
  _QWORD *v169;
  char v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _OWORD *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  _OWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int Concurrently;
  char v202;
  WTF *v203;
  WTF *v204;
  unint64_t v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  BOOL v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  unint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int16 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v289;
  uint32x4_t v290;
  unsigned int v291;
  WTF *v292[2];
  WTF *v293[2];
  uint64_t v294;
  WTF *v295;
  __int16 v296;
  WTF *v297;
  unint64_t v298;
  _BYTE v299[64];
  WTF *v300;
  __int16 v301;
  int v302;
  int v303;
  unsigned __int8 *v304;
  char v305;
  char v306;
  uint64_t v307;

  v9 = a4;
  v307 = *MEMORY[0x1E0C80C00];
  v12 = (unsigned __int8 *)(a2 + 16);
  v306 = 0;
  v304 = (unsigned __int8 *)(a2 + 16);
  v305 = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_4;
  }
  v14 = a5;
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
  a5 = v14;
LABEL_4:
  v306 = 1;
  v297 = (WTF *)v299;
  v298 = 1;
  v300 = 0;
  v301 &= 0xFC00u;
  v15 = *a6;
  v286 = a1;
  v287 = a6;
  v285 = v9;
  if ((*a6 & 2) != 0
    || ((v15 & 1) != 0 ? (LODWORD(v16) = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8)) : (v16 = v15 >> 36),
        (_DWORD)v16 != -1 ? (v17 = (_DWORD)v16 == 0x3FFFFFFF) : (v17 = 1),
        v17))
  {
    v18 = 0;
    v19 = 2;
  }
  else if (v16 >> 28)
  {
    v230 = a5;
    v18 = WTF::fastMalloc((WTF *)0x10);
    a5 = v230;
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = v16;
    v19 = 1;
  }
  else
  {
    v19 = 0;
    v18 = (unint64_t)v16 << 36;
  }
  v284 = v18;
  v20 = v18 | v19;
  v21 = *a3;
  if (*a3)
  {
    v22 = *(unsigned int *)(v21 - 8);
    if ((v20 & 3) == 0)
    {
      v23 = 2;
      v24 = v18 | v19;
      while (1)
      {
        if ((v24 & 2) != 0)
        {
          v25 = v23 - 1;
          v149 = (uint64_t *)(v24 & 0xFFFFFFFF8);
          if ((v24 & 1) == 0)
          {
            if (!v149)
              goto LABEL_19;
            v150 = 1;
            v26 = (uint64_t)v149;
            goto LABEL_234;
          }
        }
        else
        {
          if ((v24 & 1) == 0)
          {
            v25 = v23 + (v24 >> 36);
            v26 = v24 & 0xFFFFFFFF8;
            if ((v24 & 0xFFFFFFFF8) == 0)
              goto LABEL_19;
            v150 = 1;
            v149 = (uint64_t *)v26;
            goto LABEL_234;
          }
          v149 = (uint64_t *)(v24 & 0xFFFFFFFF8);
          v25 = *(_DWORD *)((v24 & 0xFFFFFFFF8) + 8) + v23;
        }
        v26 = *v149;
        if (!*v149)
          goto LABEL_368;
        v150 = 0;
LABEL_234:
        v152 = *(_QWORD *)(v26 + 8);
        if ((v150 & 1) == 0 && v149)
        {
          v235 = a5;
          v236 = v22;
          WTF::fastFree((unint64_t)v149, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          v22 = v236;
          a5 = v235;
        }
        v153 = (~(v152 << 32) + v152) ^ ((unint64_t)(~(v152 << 32) + v152) >> 22);
        v154 = 9 * ((v153 + ~(v153 << 13)) ^ ((v153 + ~(v153 << 13)) >> 8));
        v155 = (v154 ^ (v154 >> 15)) + ~((v154 ^ (v154 >> 15)) << 27);
        v23 = v25 + ((v155 >> 31) ^ v155);
        v24 = *(_QWORD *)(v26 + 16);
        if ((v24 & 1) != 0)
        {
          v156 = v22;
          v157 = a5;
          v158 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
          if ((v24 & 2) != 0
            || (v159 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v159 == 0x3FFFFFFF)
            || (_DWORD)v159 == -1)
          {
            v160 = 2;
          }
          else if (v159 >> 28)
          {
            v258 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v258 = v158;
            *(_DWORD *)(v258 + 8) = v159;
            v160 = 1;
            v158 = v258;
          }
          else
          {
            v160 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
            v158 = v159 << 36;
          }
          v24 = v158 | v160;
          a5 = v157;
          v22 = v156;
        }
      }
    }
    v261 = *(unsigned int *)(v21 - 8);
    v262 = a5;
    if ((v20 & 2) == 0)
    {
      v263 = v18 | v19;
      if ((v20 & 1) != 0)
      {
        v274 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v275 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v275 == -1 || (_DWORD)v275 == 0x3FFFFFFF)
        {
          v276 = 2;
        }
        else if (v275 >> 28)
        {
          v277 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v277 = v274;
          *(_DWORD *)(v277 + 8) = v275;
          v276 = 1;
          v274 = v277;
        }
        else
        {
          v276 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
          v274 = v275 << 36;
        }
        v263 = v274 | v276;
      }
      v264 = 2;
      while (1)
      {
        if ((v263 & 2) != 0)
        {
          v25 = v264 - 1;
          v149 = (uint64_t *)(v263 & 0xFFFFFFFF8);
          if ((v263 & 1) == 0)
          {
            if (!v149)
              goto LABEL_451;
            v266 = 1;
            v265 = (uint64_t)v149;
            goto LABEL_458;
          }
        }
        else
        {
          if ((v263 & 1) == 0)
          {
            v25 = v264 + (v263 >> 36);
            v265 = v263 & 0xFFFFFFFF8;
            if ((v263 & 0xFFFFFFFF8) == 0)
              goto LABEL_451;
            v266 = 1;
            v149 = (uint64_t *)v265;
            goto LABEL_458;
          }
          v149 = (uint64_t *)(v263 & 0xFFFFFFFF8);
          v25 = *(_DWORD *)((v263 & 0xFFFFFFFF8) + 8) + v264;
        }
        v265 = *v149;
        if (!*v149)
        {
          a5 = v262;
          v22 = v261;
LABEL_368:
          if (v149)
          {
            v228 = a5;
            v229 = v22;
            WTF::fastFree((unint64_t)v149, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            v22 = v229;
            a5 = v228;
          }
          goto LABEL_19;
        }
        v266 = 0;
LABEL_458:
        v267 = *(_QWORD *)(v265 + 8);
        if (!v266 && v149)
          WTF::fastFree((unint64_t)v149, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
        v268 = (~(v267 << 32) + v267) ^ ((unint64_t)(~(v267 << 32) + v267) >> 22);
        v269 = 9 * ((v268 + ~(v268 << 13)) ^ ((v268 + ~(v268 << 13)) >> 8));
        v270 = (v269 ^ (v269 >> 15)) + ~((v269 ^ (v269 >> 15)) << 27);
        v264 = v25 + ((v270 >> 31) ^ v270);
        v263 = *(_QWORD *)(v265 + 16);
        if ((v263 & 1) != 0)
        {
          v271 = *(_QWORD *)(v263 & 0xFFFFFFFF8);
          if ((v263 & 2) != 0
            || (v272 = *(unsigned int *)((v263 & 0xFFFFFFFF8) + 8), (_DWORD)v272 == -1)
            || (_DWORD)v272 == 0x3FFFFFFF)
          {
            v273 = 2;
          }
          else if (v272 >> 28)
          {
            v278 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v278 = v271;
            *(_DWORD *)(v278 + 8) = v272;
            v273 = 1;
            v271 = v278;
          }
          else
          {
            v273 = *(_QWORD *)(v263 & 0xFFFFFFFF8);
            v271 = v272 << 36;
          }
          v263 = v271 | v273;
        }
      }
    }
    v25 = 0;
LABEL_451:
    a5 = v262;
    v22 = v261;
LABEL_19:
    for (i = 0; ; v25 = i + v28)
    {
      v28 = v25 & v22;
      v29 = (unint64_t *)(v21 + (v28 << 6));
      v30 = *v29;
      if ((*v29 & 1) != 0)
      {
        v211 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
        if ((v30 & 2) != 0
          || ((v212 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v212 != 0x3FFFFFFF)
            ? (v213 = (_DWORD)v212 == -1)
            : (v213 = 1),
              v213))
        {
          v214 = 2;
        }
        else if (v212 >> 28)
        {
          v251 = a5;
          v252 = v22;
          v253 = WTF::fastMalloc((WTF *)0x10);
          v22 = v252;
          a5 = v251;
          *(_QWORD *)v253 = v211;
          *(_DWORD *)(v253 + 8) = v212;
          v214 = 1;
          v211 = v253;
        }
        else
        {
          v214 = v211;
          v211 = v212 << 36;
        }
        v30 = v211 | v214;
      }
      v31 = v20;
      if ((v20 & 1) != 0)
      {
        v215 = *(_QWORD *)(v284 & 0xFFFFFFFF8);
        if ((v20 & 2) != 0
          || ((v216 = *(unsigned int *)((v284 & 0xFFFFFFFF8) + 8), (_DWORD)v216 != 0x3FFFFFFF)
            ? (v217 = (_DWORD)v216 == -1)
            : (v217 = 1),
              v217))
        {
          v218 = 2;
        }
        else if (v216 >> 28)
        {
          v281 = a5;
          v254 = v22;
          v255 = WTF::fastMalloc((WTF *)0x10);
          v22 = v254;
          a5 = v281;
          *(_QWORD *)v255 = v215;
          *(_DWORD *)(v255 + 8) = v216;
          v218 = 1;
          v215 = v255;
        }
        else
        {
          v218 = *(_QWORD *)(v284 & 0xFFFFFFFF8);
          v215 = v216 << 36;
        }
        v31 = v215 | v218;
      }
      if ((v30 & 2) != 0)
      {
        v37 = (v31 >> 1) & 1;
      }
      else
      {
        if ((v31 & 2) == 0)
        {
          while (1)
          {
            if ((v30 & 2) != 0)
            {
              LODWORD(v32) = -1;
            }
            else if ((v30 & 1) != 0)
            {
              LODWORD(v32) = *(_DWORD *)((v30 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v32 = v30 >> 36;
            }
            if ((v31 & 2) != 0)
            {
              LODWORD(v33) = -1;
            }
            else if ((v31 & 1) != 0)
            {
              LODWORD(v33) = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8);
            }
            else
            {
              v33 = v31 >> 36;
            }
            if ((_DWORD)v32 != (_DWORD)v33)
              break;
            v34 = (uint64_t *)(v30 & 0xFFFFFFFF8);
            v35 = v30 & 0xFFFFFFFF8;
            if ((v30 & 1) != 0)
              v35 = *v34;
            v36 = (uint64_t *)(v31 & 0xFFFFFFFF8);
            v37 = v31 & 0xFFFFFFFF8;
            if ((v31 & 1) != 0)
              v37 = *v36;
            if (!v35 || !v37)
            {
              LOBYTE(v37) = (v35 != 0) == (v37 != 0);
              goto LABEL_39;
            }
            if (*(_QWORD *)(v35 + 8) != *(_QWORD *)(v37 + 8))
            {
              LOBYTE(v37) = 0;
              goto LABEL_39;
            }
            if ((v30 & 1) != 0 && v34)
            {
              v279 = a5;
              v241 = v22;
              WTF::fastFree((unint64_t)v34, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              v22 = v241;
              a5 = v279;
            }
            v30 = *(_QWORD *)(v35 + 16);
            if ((v30 & 1) != 0)
            {
              v283 = v22;
              v280 = a5;
              v242 = *(_QWORD *)(v30 & 0xFFFFFFFF8);
              if ((v30 & 2) != 0
                || (v243 = *(unsigned int *)((v30 & 0xFFFFFFFF8) + 8), (_DWORD)v243 == 0x3FFFFFFF)
                || (_DWORD)v243 == -1)
              {
                v244 = 2;
              }
              else if (v243 >> 28)
              {
                v260 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v260 = v242;
                *(_DWORD *)(v260 + 8) = v243;
                v244 = 1;
                v242 = v260;
              }
              else
              {
                v244 = v242;
                v242 = v243 << 36;
              }
              v30 = v242 | v244;
              a5 = v280;
              v22 = v283;
            }
            if ((v31 & 1) != 0 && v36)
            {
              v245 = v31 & 0xFFFFFFFF8;
              v246 = a5;
              v247 = v22;
              WTF::fastFree(v245, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              v22 = v247;
              a5 = v246;
            }
            v31 = *(_QWORD *)(v37 + 16);
            if ((v31 & 1) != 0)
            {
              v282 = v22;
              v193 = a5;
              v194 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
              if ((v31 & 2) != 0
                || (v195 = *(unsigned int *)((v31 & 0xFFFFFFFF8) + 8), (_DWORD)v195 == 0x3FFFFFFF)
                || (_DWORD)v195 == -1)
              {
                v196 = 2;
              }
              else if (v195 >> 28)
              {
                v259 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v259 = v194;
                *(_DWORD *)(v259 + 8) = v195;
                v196 = 1;
                v194 = v259;
              }
              else
              {
                v196 = v194;
                v194 = v195 << 36;
              }
              v31 = v194 | v196;
              a5 = v193;
              v22 = v282;
            }
          }
        }
        LOBYTE(v37) = 0;
      }
LABEL_39:
      if ((v31 & 1) != 0)
      {
        v219 = v31 & 0xFFFFFFFF8;
        if ((v31 & 0xFFFFFFFF8) != 0)
        {
          v220 = a5;
          v221 = v22;
          WTF::fastFree(v219, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          v22 = v221;
          a5 = v220;
        }
      }
      if ((v30 & 1) != 0)
      {
        v222 = v30 & 0xFFFFFFFF8;
        if ((v30 & 0xFFFFFFFF8) != 0)
        {
          v223 = a5;
          v224 = v22;
          WTF::fastFree(v222, (void *)a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          v22 = v224;
          a5 = v223;
        }
      }
      if ((v37 & 1) != 0)
      {
        v39 = *(_QWORD *)(v21 + (v28 << 6) + 8);
        goto LABEL_47;
      }
      v38 = *v29;
      if (*v29 == 2)
        break;
      if ((v38 & 2) != 0)
      {
        v169 = (_QWORD *)(v38 & 0xFFFFFFFF8);
        if ((v38 & 1) == 0)
          goto LABEL_258;
      }
      else
      {
        if ((v38 & 1) == 0)
          goto LABEL_45;
        v169 = (_QWORD *)(v38 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v38 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_45;
      }
      v169 = (_QWORD *)*v169;
LABEL_258:
      if (!v169)
        break;
LABEL_45:
      ++i;
    }
  }
  v39 = 0;
LABEL_47:
  v40 = *v287;
  if ((*v287 & 1) != 0)
  {
    v225 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || (v226 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v226 == 0x3FFFFFFF)
      || (_DWORD)v226 == -1)
    {
      v227 = 2;
    }
    else if (v226 >> 28)
    {
      v256 = a5;
      v257 = WTF::fastMalloc((WTF *)0x10);
      LOWORD(a5) = v256;
      *(_QWORD *)v257 = v225;
      *(_DWORD *)(v257 + 8) = v226;
      v227 = 1;
      v225 = v257;
    }
    else
    {
      v227 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v225 = v226 << 36;
    }
    v40 = v225 | v227;
  }
  v289 = v40;
  JSC::GetByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v290, &v303, (WTF *)a2, v39, (unsigned __int16)a5, &v289, a7, a8);
  if (HIDWORD(v298))
    WTF::VectorTypeOperations<JSC::GetByVariant>::destruct(v297, (_QWORD *)v297 + 8 * (unint64_t)HIDWORD(v298), v42, v43, v44, v45, v46, v47);
  v49 = v297;
  if (v297 != (WTF *)v299)
  {
    if (v297)
    {
      v297 = 0;
      LODWORD(v298) = 0;
      WTF::fastFree((unint64_t)v49, v41, v42, v43, v44, v45, v46, v47);
    }
    v297 = (WTF *)v299;
  }
  v50 = v290.i64[0];
  if ((unsigned int *)v290.i64[0] == &v291)
  {
    if (!v290.i32[3])
    {
LABEL_53:
      v51 = v290.i32[2];
      goto LABEL_54;
    }
    v70 = v299;
    v71 = v290.i64[0] + ((unint64_t)v290.u32[3] << 6);
    while (1)
    {
      v72 = *(_QWORD *)(v50 + 56);
      *(_QWORD *)v70 = 0;
      *((_QWORD *)v70 + 1) = 0;
      *(_QWORD *)&v48 = 0;
      *(_OWORD *)(v70 + 24) = 0u;
      v73 = (unint64_t *)(v70 + 24);
      *((_DWORD *)v70 + 4) = -1;
      *(_OWORD *)(v70 + 40) = 0u;
      *((_QWORD *)v70 + 7) = v72;
      *((_QWORD *)v70 + 7) = *(_QWORD *)(v50 + 56);
      if (v70 != (_BYTE *)v50)
      {
        if ((*(_QWORD *)v50 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v70, (_QWORD *)v50);
        else
          *(_QWORD *)v70 = *(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFDLL;
      }
      v74 = *(unsigned int **)(v50 + 8);
      if (v74)
      {
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 + 1, v74));
      }
      v76 = (unsigned int *)*((_QWORD *)v70 + 1);
      *((_QWORD *)v70 + 1) = v74;
      if (v76)
      {
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          atomic_store(1u, v76);
          WTF::fastFree((unint64_t)v76, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      *((_DWORD *)v70 + 4) = *(_DWORD *)(v50 + 16);
      *((_QWORD *)v70 + 4) = *(_QWORD *)(v50 + 32);
      *((_QWORD *)v70 + 5) = *(_QWORD *)(v50 + 40);
      v79 = *(__int128 **)(v50 + 48);
      if (!v79)
        break;
      v183 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
      v48 = *v79;
      *v183 = *v79;
      v80 = *((_QWORD *)v70 + 6);
      *((_QWORD *)v70 + 6) = v183;
      if (v80)
        goto LABEL_98;
LABEL_99:
      v81 = *(_QWORD *)(v50 + 24);
      if (v81)
      {
        v173 = WTF::fastMalloc((WTF *)0x20);
        v174 = *(unsigned int *)(v81 + 12);
        v175 = (_QWORD *)(v173 + 16);
        *(_QWORD *)v173 = v173 + 16;
        *(_DWORD *)(v173 + 8) = 1;
        *(_DWORD *)(v173 + 12) = v174;
        if (v174 >= 2)
        {
          if (v174 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19817D5B8);
          }
          v175 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v174));
          *(_DWORD *)(v173 + 8) = v174;
          *(_QWORD *)v173 = v175;
        }
        v176 = *(unsigned int *)(v81 + 12);
        if ((_DWORD)v176)
        {
          v184 = *(uint64_t **)v81;
          v185 = 8 * v176;
          do
          {
            v186 = *v184++;
            *v175++ = v186;
            v185 -= 8;
          }
          while (v185);
        }
        *(_DWORD *)(v173 + 24) = *(_DWORD *)(v81 + 24);
        v82 = *v73;
        *v73 = v173;
        if (!v82)
          goto LABEL_104;
        v83 = *(_QWORD *)v82;
        if (v82 + 16 == *(_QWORD *)v82 || v83 == 0)
          goto LABEL_103;
LABEL_272:
        *(_QWORD *)v82 = 0;
        *(_DWORD *)(v82 + 8) = 0;
        WTF::fastFree(v83, v41, v42, v43, v44, v45, v46, v47);
LABEL_103:
        WTF::fastFree(v82, v41, v42, v43, v44, v45, v46, v47);
        goto LABEL_104;
      }
      v82 = *v73;
      *v73 = 0;
      if (v82)
      {
        v83 = *(_QWORD *)v82;
        if (v82 + 16 == *(_QWORD *)v82 || !v83)
          goto LABEL_103;
        goto LABEL_272;
      }
LABEL_104:
      v84 = *(_QWORD *)(v50 + 48);
      *(_QWORD *)(v50 + 48) = 0;
      if (v84)
        WTF::fastFree(v84, v41, v42, v43, v44, v45, v46, v47);
      v85 = *(_QWORD *)(v50 + 24);
      *(_QWORD *)(v50 + 24) = 0;
      if (v85)
      {
        v86 = *(_QWORD *)v85;
        if (v85 + 16 != *(_QWORD *)v85 && v86 != 0)
        {
          *(_QWORD *)v85 = 0;
          *(_DWORD *)(v85 + 8) = 0;
          WTF::fastFree(v86, v41, v42, v43, v44, v45, v46, v47);
        }
        WTF::fastFree(v85, v41, v42, v43, v44, v45, v46, v47);
      }
      v88 = *(unsigned int **)(v50 + 8);
      *(_QWORD *)(v50 + 8) = 0;
      if (v88)
      {
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          atomic_store(1u, v88);
          WTF::fastFree((unint64_t)v88, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      if ((*(_QWORD *)v50 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v50 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
      v70 += 64;
      v50 += 64;
      if (v50 == v71)
        goto LABEL_53;
    }
    v80 = *((_QWORD *)v70 + 6);
    *((_QWORD *)v70 + 6) = 0;
    if (!v80)
      goto LABEL_99;
LABEL_98:
    WTF::fastFree(v80, v41, v42, v43, v44, v45, v46, v47);
    goto LABEL_99;
  }
  v290.i64[0] = (uint64_t)&v291;
  v297 = (WTF *)v50;
  v51 = v290.i32[2];
  v290.i32[2] = 1;
LABEL_54:
  v52 = v290.i32[3];
  v290.i32[3] = 0;
  v298 = __PAIR64__(v52, v51);
  v53 = v295;
  v295 = 0;
  v54 = (unsigned int *)v300;
  v300 = v53;
  if (v54)
  {
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::fastFree((unint64_t)v54, v41, v42, v43, v44, v45, v46, v47);
    }
    v57 = (unsigned int *)v295;
    v301 = v296;
    v295 = 0;
    if (v57)
    {
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        atomic_store(1u, v57);
        WTF::fastFree((unint64_t)v57, v41, v42, v43, v44, v45, v46, v47);
      }
    }
  }
  else
  {
    v301 = v296;
    v295 = 0;
  }
  v60 = v290.i64[0];
  if (v290.i32[3])
  {
    v113 = v290.i64[0] + ((unint64_t)v290.u32[3] << 6);
    do
    {
      v114 = *(_QWORD *)(v60 + 48);
      *(_QWORD *)(v60 + 48) = 0;
      if (v114)
        WTF::fastFree(v114, v41, v42, v43, v44, v45, v46, v47);
      v115 = *(_QWORD *)(v60 + 24);
      *(_QWORD *)(v60 + 24) = 0;
      if (v115)
      {
        v116 = *(_QWORD *)v115;
        if (v115 + 16 != *(_QWORD *)v115 && v116 != 0)
        {
          *(_QWORD *)v115 = 0;
          *(_DWORD *)(v115 + 8) = 0;
          WTF::fastFree(v116, v41, v42, v43, v44, v45, v46, v47);
        }
        WTF::fastFree(v115, v41, v42, v43, v44, v45, v46, v47);
      }
      v118 = *(unsigned int **)(v60 + 8);
      *(_QWORD *)(v60 + 8) = 0;
      if (v118)
      {
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
        {
          atomic_store(1u, v118);
          WTF::fastFree((unint64_t)v118, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      if ((*(_QWORD *)v60 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v60 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
      v60 += 64;
    }
    while (v60 != v113);
    v60 = v290.i64[0];
  }
  if (&v291 != (unsigned int *)v60 && v60 != 0)
  {
    v290.i64[0] = 0;
    v290.i32[2] = 0;
    WTF::fastFree(v60, v41, v42, v43, v44, v45, v46, v47);
  }
  if ((v289 & 1) != 0 && (v289 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v289 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  if ((v20 & 1) != 0 && (v284 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v284 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  if (v285)
  {
    v170 = v301;
    v171 = 6;
    switch((char)v301)
    {
      case 0:
      case 2:
      case 4:
      case 6:
        goto LABEL_333;
      case 1:
        v209 = (unint64_t)HIDWORD(v298) << 6;
        break;
      case 3:
      case 5:
      case 8:
        goto LABEL_331;
      case 7:
      case 9:
        goto LABEL_262;
      default:
        __break(0xC471u);
        JUMPOUT(0x19817D4F0);
    }
    while (v209)
    {
      v210 = *(_QWORD *)((char *)v297 + v209 - 40);
      v209 -= 64;
      if (v210)
      {
LABEL_331:
        v171 = 8;
        goto LABEL_333;
      }
    }
    v171 = 6;
LABEL_333:
    v170 = v171;
LABEL_262:
    v172 = HIBYTE(v301);
    *(_QWORD *)v286 = v286 + 16;
    *(_QWORD *)(v286 + 8) = 1;
    *(_QWORD *)(v286 + 80) = 0;
    *(_BYTE *)(v286 + 88) = v170;
    *(_BYTE *)(v286 + 89) = *(_BYTE *)(v286 + 89) & 0xFC | v172 & 1;
    goto LABEL_218;
  }
  v62 = v286;
  if ((_BYTE)v301)
  {
    v63 = v286 + 16;
    *(_QWORD *)v286 = v286 + 16;
    *(_QWORD *)(v286 + 8) = 1;
    v64 = v297;
    if (v297 != (WTF *)v299)
    {
      v297 = (WTF *)v299;
      *(_QWORD *)v286 = v64;
      v168 = v298;
      LODWORD(v298) = 1;
      *(_DWORD *)(v286 + 8) = v168;
      goto LABEL_74;
    }
    if (!HIDWORD(v298))
    {
LABEL_74:
      v65 = HIDWORD(v298);
      HIDWORD(v298) = 0;
      *(_DWORD *)(v286 + 12) = v65;
      *(_QWORD *)(v286 + 80) = v300;
      *(_WORD *)(v286 + 88) = v301;
      v300 = 0;
      goto LABEL_75;
    }
    v91 = v299;
    v92 = &v299[64 * (unint64_t)HIDWORD(v298)];
    while (1)
    {
      v93 = *((_QWORD *)v91 + 7);
      *(_QWORD *)v63 = 0;
      *(_QWORD *)(v63 + 8) = 0;
      *(_DWORD *)(v63 + 16) = -1;
      *(_OWORD *)(v63 + 24) = 0u;
      v94 = (unint64_t *)(v63 + 24);
      *(_OWORD *)(v63 + 40) = 0u;
      *(_QWORD *)(v63 + 56) = v93;
      if ((_BYTE *)v63 != v91)
      {
        if ((*(_QWORD *)v91 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v63, v91);
        else
          *(_QWORD *)v63 = *(_QWORD *)v91 & 0xFFFFFFFFFFFFFFFDLL;
      }
      v95 = (unsigned int *)*((_QWORD *)v91 + 1);
      if (v95)
      {
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 + 1, v95));
      }
      v97 = *(unsigned int **)(v63 + 8);
      *(_QWORD *)(v63 + 8) = v95;
      if (v97)
      {
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          atomic_store(1u, v97);
          WTF::fastFree((unint64_t)v97, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      *(_DWORD *)(v63 + 16) = *((_DWORD *)v91 + 4);
      v100 = *((_QWORD *)v91 + 5);
      *(_QWORD *)(v63 + 32) = *((_QWORD *)v91 + 4);
      *(_QWORD *)(v63 + 40) = v100;
      v101 = (_OWORD *)*((_QWORD *)v91 + 6);
      if (!v101)
        break;
      v192 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
      *v192 = *v101;
      v102 = *(_QWORD *)(v63 + 48);
      *(_QWORD *)(v63 + 48) = v192;
      if (v102)
        goto LABEL_137;
LABEL_138:
      v103 = *((_QWORD *)v91 + 3);
      if (v103)
      {
        v178 = WTF::fastMalloc((WTF *)0x20);
        v179 = *(unsigned int *)(v103 + 12);
        v180 = (_QWORD *)(v178 + 16);
        *(_QWORD *)v178 = v178 + 16;
        *(_DWORD *)(v178 + 8) = 1;
        *(_DWORD *)(v178 + 12) = v179;
        if (v179 >= 2)
        {
          if (v179 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19817D5C0);
          }
          v180 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v179));
          *(_DWORD *)(v178 + 8) = v179;
          *(_QWORD *)v178 = v180;
        }
        v181 = *(unsigned int *)(v103 + 12);
        if ((_DWORD)v181)
        {
          v197 = *(uint64_t **)v103;
          v198 = 8 * v181;
          do
          {
            v199 = *v197++;
            *v180++ = v199;
            v198 -= 8;
          }
          while (v198);
        }
        *(_DWORD *)(v178 + 24) = *(_DWORD *)(v103 + 24);
        v104 = *v94;
        *v94 = v178;
        if (!v104)
          goto LABEL_143;
        v105 = *(_QWORD *)v104;
        if (v104 + 16 == *(_QWORD *)v104 || v105 == 0)
          goto LABEL_142;
LABEL_281:
        *(_QWORD *)v104 = 0;
        *(_DWORD *)(v104 + 8) = 0;
        WTF::fastFree(v105, v41, v42, v43, v44, v45, v46, v47);
LABEL_142:
        WTF::fastFree(v104, v41, v42, v43, v44, v45, v46, v47);
        goto LABEL_143;
      }
      v104 = *v94;
      *v94 = 0;
      if (v104)
      {
        v105 = *(_QWORD *)v104;
        if (v104 + 16 == *(_QWORD *)v104 || !v105)
          goto LABEL_142;
        goto LABEL_281;
      }
LABEL_143:
      v106 = *((_QWORD *)v91 + 6);
      *((_QWORD *)v91 + 6) = 0;
      if (v106)
        WTF::fastFree(v106, v41, v42, v43, v44, v45, v46, v47);
      v107 = *((_QWORD *)v91 + 3);
      *((_QWORD *)v91 + 3) = 0;
      if (v107)
      {
        v108 = *(_QWORD *)v107;
        if (v107 + 16 != *(_QWORD *)v107 && v108 != 0)
        {
          *(_QWORD *)v107 = 0;
          *(_DWORD *)(v107 + 8) = 0;
          WTF::fastFree(v108, v41, v42, v43, v44, v45, v46, v47);
        }
        WTF::fastFree(v107, v41, v42, v43, v44, v45, v46, v47);
      }
      v110 = (unsigned int *)*((_QWORD *)v91 + 1);
      *((_QWORD *)v91 + 1) = 0;
      if (v110)
      {
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((unint64_t)v110, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      if ((*(_QWORD *)v91 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v91 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
      v63 += 64;
      v91 += 64;
      if (v91 == v92)
        goto LABEL_74;
    }
    v102 = *(_QWORD *)(v63 + 48);
    *(_QWORD *)(v63 + 48) = 0;
    if (!v102)
      goto LABEL_138;
LABEL_137:
    WTF::fastFree(v102, v41, v42, v43, v44, v45, v46, v47);
    goto LABEL_138;
  }
  v129 = *v287;
  if ((*v287 & 2) != 0)
  {
    LODWORD(v129) = -1;
  }
  else if ((v129 & 1) != 0)
  {
    LODWORD(v129) = *(_DWORD *)((v129 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v129 >>= 36;
  }
  v130 = v129;
  v131 = *(_QWORD *)(a2 + 56);
  v132 = *(_QWORD **)(v131 + 80);
  v133 = (unsigned __int8 *)(*v132 + (v130 >> 2));
  v134 = *v133;
  v135 = v134;
  if ((v134 | 2) == 0x82)
    v135 = v133[1];
  if (v135 != 18)
  {
    if (v135 > 30)
    {
      switch(v135)
      {
        case ',':
          v248 = v130 >> 2;
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByIdDirect>(v133, (uint64_t)&v290);
          v249 = *(_QWORD *)(a2 + 136);
          v250 = *(unsigned __int16 *)(v249 + 88);
          if (!*(_WORD *)(v249 + 88))
            v250 = *(_DWORD *)(v249 + 272);
          v140 = *(_DWORD *)(((v249 + v250 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8 * v291);
          JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpGetByIdDirect>((unsigned __int8 *)(*v132 + v248), (uint64_t)&v290);
          v145 = (_DWORD **)JSC::CodeBlock::identifier((JSC::CodeBlock *)a2, v290.u32[2]);
          goto LABEL_255;
        case '-':
          if (v134 == 128)
          {
            v161 = *((unsigned __int16 *)v133 + 5);
          }
          else if (v134 == 130)
          {
            v161 = *(_DWORD *)(v133 + 18);
          }
          else
          {
            v161 = v133[5];
          }
          v162 = *(_QWORD *)(a2 + 136);
          v163 = *(unsigned __int16 *)(v162 + 90);
          if (!*(_WORD *)(v162 + 90))
            v163 = *(_DWORD *)(v162 + 276);
          v140 = *(_DWORD *)(((v162 + v163 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 8 * v161);
          if (v134 == 128)
          {
            v164 = *((unsigned __int16 *)v133 + 3);
          }
          else if (v134 == 130)
          {
            v164 = *(_DWORD *)(v133 + 10);
          }
          else
          {
            v164 = v133[3];
          }
          v165 = *(unsigned int **)(v131 + 104);
          if (v165)
          {
            v166 = *v165;
            if (*v165 > v164)
            {
              v167 = &v165[2 * v164];
              goto LABEL_254;
            }
          }
          else
          {
            v166 = 0;
          }
          v234 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 120) + 72))(*(_QWORD *)(a2 + 120))
                            + 48);
          if (*v234 <= v164 - v166)
          {
            __break(0xC471u);
            JUMPOUT(0x19817D4C0);
          }
          v167 = &v234[2 * (v164 - v166)];
LABEL_254:
          v145 = (_DWORD **)(v167 + 2);
          break;
        default:
          goto LABEL_216;
      }
      goto LABEL_255;
    }
    v187 = *(_QWORD *)(a2 + 72);
    if (v135 == 19)
    {
      if (v134 == 128)
      {
        v188 = *((unsigned __int16 *)v133 + 4);
      }
      else if (v134 == 130)
      {
        v188 = *(_DWORD *)(v133 + 14);
      }
      else
      {
        v188 = v133[4];
      }
      v189 = *(_QWORD *)(a2 + 136);
      v190 = *(unsigned __int16 *)(v189 + 38);
      if (!*(_WORD *)(v189 + 38))
        v190 = *(_DWORD *)(v189 + 172);
      v191 = ((v189 + v190 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * v188;
      if (*(_BYTE *)(v191 + 14) != 1)
        goto LABEL_216;
      v140 = *(_DWORD *)v191;
      v145 = (_DWORD **)(*(_QWORD *)(v187 + 41952) + 1768);
      goto LABEL_215;
    }
    if (v135 == 4)
    {
      JSC::OpIteratorOpen::decode(v133, &v290, *(int8x8_t *)&v48);
      v231 = *(_QWORD *)(a2 + 136);
      v232 = *(unsigned __int16 *)(v231 + 8);
      if (!*(_WORD *)(v231 + 8))
        v232 = *(_DWORD *)(v231 + 112);
      v233 = (v231 + v232 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (*(_BYTE *)(v233 + 112 * LODWORD(v292[1]) + 94) == 1)
      {
        v140 = *(_DWORD *)(v233 + 112 * LODWORD(v292[1]) + 80);
        v145 = (_DWORD **)(*(_QWORD *)(v187 + 41952) + 2000);
LABEL_255:
        v62 = v286;
        goto LABEL_215;
      }
    }
    else
    {
      v62 = v286;
      if (v135 != 2)
        goto LABEL_216;
      JSC::OpIteratorNext::decode(v133, (uint64_t)&v290, *(int8x8_t *)&v48);
      v237 = *(_QWORD *)(a2 + 136);
      v238 = *(unsigned __int16 *)(v237 + 4);
      if (!*(_WORD *)(v237 + 4))
        v238 = *(_DWORD *)(v237 + 104);
      v239 = (v237 + v238 + 7) & 0xFFFFFFFFFFFFFFF8;
      v240 = v239 + ((unint64_t)HIDWORD(v292[1]) << 7);
      if ((v130 & 3) == 1)
      {
        if (*(_BYTE *)(v240 + 94) == 1)
        {
          v140 = *(_DWORD *)(v239 + ((unint64_t)HIDWORD(v292[1]) << 7) + 80);
          v145 = (_DWORD **)(*(_QWORD *)(v187 + 41952) + 1200);
          goto LABEL_255;
        }
      }
      else if (*(_BYTE *)(v240 + 110) == 1)
      {
        v140 = *(_DWORD *)(v239 + ((unint64_t)HIDWORD(v292[1]) << 7) + 96);
        v145 = (_DWORD **)(*(_QWORD *)(v187 + 41952) + 2608);
        goto LABEL_255;
      }
    }
    *(_QWORD *)v286 = v286 + 16;
    *(_QWORD *)(v286 + 8) = 1;
    *(_QWORD *)(v286 + 80) = 0;
    *(_BYTE *)(v286 + 88) = 0;
    *(_BYTE *)(v286 + 89) &= 0xFCu;
    goto LABEL_218;
  }
  if (v134 == 128)
  {
    v136 = *((unsigned __int16 *)v133 + 5);
  }
  else if (v134 == 130)
  {
    v136 = *(_DWORD *)(v133 + 18);
  }
  else
  {
    v136 = v133[5];
  }
  v137 = *(_QWORD *)(a2 + 136);
  v138 = *(unsigned __int16 *)(v137 + 36);
  if (!*(_WORD *)(v137 + 36))
    v138 = *(_DWORD *)(v137 + 168);
  v139 = ((v137 + v138 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 * v136;
  if (*(_BYTE *)(v139 + 14) != 1)
    goto LABEL_216;
  v140 = *(_DWORD *)v139;
  if (v134 == 128)
  {
    v141 = *((unsigned __int16 *)v133 + 3);
  }
  else if (v134 == 130)
  {
    v141 = *(_DWORD *)(v133 + 10);
  }
  else
  {
    v141 = v133[3];
  }
  v142 = *(unsigned int **)(v131 + 104);
  if (!v142)
  {
    v143 = 0;
    goto LABEL_231;
  }
  v143 = *v142;
  if (*v142 <= v141)
  {
LABEL_231:
    v151 = *(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 120) + 72))(*(_QWORD *)(a2 + 120)) + 48);
    if (*v151 <= v141 - v143)
    {
      __break(0xC471u);
      JUMPOUT(0x19817D1E4);
    }
    v144 = &v151[2 * (v141 - v143)];
    goto LABEL_214;
  }
  v144 = &v142[2 * v141];
LABEL_214:
  v145 = (_DWORD **)(v144 + 2);
LABEL_215:
  if (v140)
  {
    v200 = 16 * (v140 & 0xFFFFFFFE);
    if ((*(_WORD *)(v200 + 12) & 0x10) == 0)
    {
      v302 = 0;
      Concurrently = JSC::Structure::getConcurrently(v200, *v145, &v302, v43, v44, v45, v46, v47);
      if (Concurrently != -1)
      {
        v202 = v302;
        *(_QWORD *)v62 = v62 + 16;
        *(_QWORD *)(v62 + 8) = 1;
        *(_QWORD *)(v62 + 80) = 0;
        if ((v202 & 0x60) == 0)
        {
          *(_BYTE *)(v62 + 88) = 1;
          *(_BYTE *)(v62 + 89) &= 0xFCu;
          v290 = (uint32x4_t)(unint64_t)v200;
          v291 = Concurrently;
          *(_OWORD *)v292 = 0u;
          *(_OWORD *)v293 = 0u;
          v294 = 0;
          JSC::GetByStatus::appendVariant(v62, &v290, v42, v43, v44, v45, v46, v47);
          v203 = v293[1];
          v293[1] = 0;
          if (v203)
            WTF::fastFree((unint64_t)v203, v41, v42, v43, v44, v45, v46, v47);
          v204 = v292[0];
          v292[0] = 0;
          if (v204)
          {
            v205 = *(_QWORD *)v204;
            if ((WTF *)((char *)v204 + 16) != *(WTF **)v204 && v205)
            {
              *(_QWORD *)v204 = 0;
              *((_DWORD *)v204 + 2) = 0;
              WTF::fastFree(v205, v41, v42, v43, v44, v45, v46, v47);
            }
            WTF::fastFree((unint64_t)v204, v41, v42, v43, v44, v45, v46, v47);
          }
          v206 = (unsigned int *)v290.i64[1];
          v290.i64[1] = 0;
          if (v206)
          {
            do
            {
              v207 = __ldaxr(v206);
              v208 = v207 - 1;
            }
            while (__stlxr(v208, v206));
            if (!v208)
            {
              atomic_store(1u, v206);
              WTF::fastFree((unint64_t)v206, v41, v42, v43, v44, v45, v46, v47);
            }
          }
          if ((v290.i8[0] & 1) != 0)
            WTF::fastFree(v290.i64[0] & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
          goto LABEL_218;
        }
        goto LABEL_217;
      }
    }
  }
LABEL_216:
  *(_QWORD *)v62 = v62 + 16;
  *(_QWORD *)(v62 + 8) = 1;
  *(_QWORD *)(v62 + 80) = 0;
LABEL_217:
  *(_BYTE *)(v62 + 88) = 0;
  *(_BYTE *)(v62 + 89) &= 0xFCu;
LABEL_218:
  v146 = (unsigned int *)v300;
  v300 = 0;
  if (v146)
  {
    do
    {
      v147 = __ldaxr(v146);
      v148 = v147 - 1;
    }
    while (__stlxr(v148, v146));
    if (!v148)
    {
      atomic_store(1u, v146);
      WTF::fastFree((unint64_t)v146, v41, v42, v43, v44, v45, v46, v47);
    }
  }
LABEL_75:
  v66 = v297;
  if (HIDWORD(v298))
  {
    v121 = (WTF *)((char *)v297 + 64 * (unint64_t)HIDWORD(v298));
    do
    {
      v122 = *((_QWORD *)v66 + 6);
      *((_QWORD *)v66 + 6) = 0;
      if (v122)
        WTF::fastFree(v122, v41, v42, v43, v44, v45, v46, v47);
      v123 = *((_QWORD *)v66 + 3);
      *((_QWORD *)v66 + 3) = 0;
      if (v123)
      {
        v124 = *(_QWORD *)v123;
        if (v123 + 16 != *(_QWORD *)v123 && v124 != 0)
        {
          *(_QWORD *)v123 = 0;
          *(_DWORD *)(v123 + 8) = 0;
          WTF::fastFree(v124, v41, v42, v43, v44, v45, v46, v47);
        }
        WTF::fastFree(v123, v41, v42, v43, v44, v45, v46, v47);
      }
      v126 = (unsigned int *)*((_QWORD *)v66 + 1);
      *((_QWORD *)v66 + 1) = 0;
      if (v126)
      {
        do
        {
          v127 = __ldaxr(v126);
          v128 = v127 - 1;
        }
        while (__stlxr(v128, v126));
        if (!v128)
        {
          atomic_store(1u, v126);
          WTF::fastFree((unint64_t)v126, v41, v42, v43, v44, v45, v46, v47);
        }
      }
      if ((*(_QWORD *)v66 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v66 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
      v66 = (WTF *)((char *)v66 + 64);
    }
    while (v66 != v121);
    v66 = v297;
  }
  if (v299 != (_BYTE *)v66 && v66 != 0)
  {
    v297 = 0;
    LODWORD(v298) = 0;
    WTF::fastFree((unint64_t)v66, v41, v42, v43, v44, v45, v46, v47);
  }
  if (v306 && v305)
  {
    v68 = v304;
    v69 = __ldxr(v304);
    if (v69 == 1)
    {
      if (!__stlxr(0, v304))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v68, 0, v42, v43, v44, v45, v46, v47);
  }
}

void JSC::GetByStatus::computeForStubInfoWithoutExitSiteFeedback(uint64_t a1, _DWORD *a2, WTF *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF *v11;
  int v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unsigned int *v24;
  unint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  BOOL v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  char v72;
  WTF *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  WTF *v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  WTF **v118;
  WTF *v119;
  unsigned int **v120;
  unint64_t *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t *v127;
  WTF *v128;
  unint64_t v129;
  WTF *v130;
  unint64_t v131;
  unint64_t v132;
  int v133;
  int v134;
  WTF *v135;
  WTF *v136;
  unint64_t v137;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unint64_t v143;
  WTF *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  _DWORD *v151;
  uint64_t *v152;
  uint64_t v153;
  _QWORD *v154;
  WTF **v155;
  WTF *v156;
  char *v157;
  uint64_t v158;
  JSC::ObjectPropertyConditionSet *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  unsigned int v169;
  unsigned int *v170;
  unsigned int v171;
  int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  const JSC::PropertyTable *v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  unsigned int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  int v194;
  uint64_t v195;
  _DWORD *AlternateBase;
  WTF *v197;
  WTF *v198;
  unint64_t v199;
  WTF *v200;
  WTF *v201;
  unint64_t v202;
  unsigned int *v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  WTF *v207;
  int v208;
  WTF *v209;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  char *v217;
  WTF *v218;
  uint64_t v219;
  uint64_t v220;
  const JSC::GetByVariant *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  BOOL v232;
  uint64_t v233;
  int *p_Concurrently;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v244;
  uint64_t v245;
  uint64_t v247;
  char v248;
  _OWORD *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  char v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  BOOL v268;
  char v269;
  uint64_t v270;
  unsigned int *v271;
  uint64_t v272;
  int v273;
  unint64_t v274;
  JSType v275;
  char v276;
  unint64_t v277;
  char v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  void *v289;
  unint64_t v290;
  WTF *v291;
  int v292;
  WTF *v293;
  unint64_t v295;
  WTF *v296;
  WTF *v297;
  unint64_t v298;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  BOOL v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int *v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  char v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  WTF *v328;
  unsigned int v329;
  uint64_t **v330;
  char v331;
  unsigned __int16 v332;
  uint64_t v333;
  uint64_t v334;
  WTF *v335[2];
  int Concurrently;
  WTF *v337[2];
  WTF *v338[2];
  unint64_t v339;
  WTF *v340;
  uint64_t v341;
  _BYTE v342[64];
  WTF *v343;
  __int16 v344;
  unint64_t v345;
  unsigned int *v346;

  v332 = a5;
  if (!a4)
    goto LABEL_91;
  v10 = a4;
  v11 = a3;
  if (*(_BYTE *)(a4 + 123) != 4 || (v24 = *(unsigned int **)(a4 + 64), v25 = v24[3], !(_DWORD)v25))
  {
    v12 = 1;
    v13 = 4;
    goto LABEL_4;
  }
  v26 = a3;
  v27 = 0;
  while (2)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v24 + 8 * v27);
    v12 = 3;
    v13 = 5;
    switch(*(_BYTE *)(v28 + 4))
    {
      case 2:
        v29 = *(_DWORD *)(v28 + 12);
        v30 = 16 * (v29 & 0xFFFFFFFE);
        if (v29)
          v31 = 16 * (v29 & 0xFFFFFFFE);
        else
          v31 = 0;
        v32 = *(unsigned __int16 *)(v31 + 24);
        if (v32 == 65534)
          goto LABEL_28;
        if (v32 == 0xFFFF)
          v32 = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 84);
        if (v32 < 64)
        {
LABEL_28:
          v33 = 0;
        }
        else if ((v32 - 63) >= 5)
        {
          v228 = (v32 - 64) | ((v32 - 64) >> 1) | (((v32 - 64) | ((v32 - 64) >> 1)) >> 2);
          v229 = v228 | (v228 >> 4) | ((v228 | (v228 >> 4)) >> 8);
          v33 = (v229 | HIWORD(v229)) + 1;
        }
        else
        {
          v33 = 4;
        }
        v34 = *(_QWORD *)(v30 + 64);
        if (v34)
        {
          v35 = v34;
          if (*(_BYTE *)(v34 + 5) != 1)
          {
            v216 = *(_DWORD *)(v34 + 80);
            v35 = 16 * (v216 & 0xFFFFFFFE);
            if (!v216)
              v35 = 0;
          }
        }
        else
        {
          v35 = 0;
        }
        v36 = *(unsigned __int16 *)(v35 + 24);
        if (v36 == 65534)
          goto LABEL_35;
        if (v36 == 0xFFFF)
          v36 = *(_DWORD *)(*(_QWORD *)(v35 + 64) + 84);
        if (v36 < 64)
        {
LABEL_35:
          v37 = 0;
        }
        else if ((v36 - 63) >= 5)
        {
          v230 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
          v231 = v230 | (v230 >> 4) | ((v230 | (v230 >> 4)) >> 8);
          v37 = (v231 | HIWORD(v231)) + 1;
        }
        else
        {
          v37 = 4;
        }
        if (v33 == v37)
          goto LABEL_43;
        if (v34 && *(_BYTE *)(v34 + 5) != 1)
        {
          v262 = *(_DWORD *)(v34 + 80);
          if (v262)
            v34 = 16 * (v262 & 0xFFFFFFFE);
          else
            v34 = 0;
        }
        if ((*(_BYTE *)(v34 + 8) & 0xE) == 0 && *(unsigned __int8 *)(v34 + 9) - 39 >= 0xB)
          goto LABEL_43;
        goto LABEL_441;
      case 3:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x21:
        goto LABEL_45;
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_43;
      case 7:
        if (!*(_BYTE *)(v28 + 5))
          goto LABEL_43;
        v12 = 3;
        goto LABEL_45;
      case 0x10:
        v247 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 24);
        if ((v247 & 1) != 0)
          v247 = *(_QWORD *)((v247 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v247 + 5) == 8)
        {
          v263 = *(_QWORD *)(v247 + 8);
          v264 = (unsigned int *)(v263 + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 + 1, v264));
          v248 = *(_BYTE *)(v263 + 14);
          do
          {
            v266 = __ldaxr(v264);
            v267 = v266 - 1;
          }
          while (__stlxr(v267, v264));
          if (!v267)
          {
            atomic_store(1u, (unsigned int *)(v263 + 8));
            v331 = v248;
            (*(void (**)(uint64_t))(*(_QWORD *)v263 + 32))(v263);
            v248 = v331;
          }
        }
        else
        {
          v248 = *(_BYTE *)(v247 + 64);
        }
        if ((v248 + 105) >= 3u)
        {
          v25 = v24[3];
LABEL_43:
          if (++v27 >= v25)
          {
            v12 = 1;
            v13 = 4;
            goto LABEL_45;
          }
          continue;
        }
        v256 = *(unsigned __int8 *)(v28 + 4);
        v39 = v256 > 0x20;
        v257 = (1 << v256) & 0x100000014;
        if (v39 || v257 == 0)
        {
          v259 = *(_DWORD *)(v28 + 12);
LABEL_497:
          if (v259)
            v260 = 16 * (v259 & 0xFFFFFFFE);
          else
            v260 = 0;
        }
        else
        {
          v260 = *(_QWORD *)(16 * (*(_DWORD *)(v28 + 12) & 0xFFFFFFFE) + 0x40);
          if (*(_BYTE *)(v260 + 5) != 1)
          {
            v259 = *(_DWORD *)(v260 + 80);
            goto LABEL_497;
          }
        }
        v261 = *(unsigned __int8 *)(16 * *(unsigned int *)(v260 + 76) + 0xF4);
        v25 = v24[3];
        if (!v261)
          goto LABEL_43;
LABEL_441:
        v12 = 3;
        v13 = 5;
LABEL_45:
        if (v25 != 1)
        {
          v11 = v26;
          goto LABEL_4;
        }
        v42 = *(unsigned __int8 *)(**(_QWORD **)v24 + 4);
        v15 = 2;
        v43 = v42 > 0x3E || ((1 << v42) & 0x400000040008000ALL) == 0;
        v11 = v26;
        if (v43 && v42 != 112)
        {
LABEL_4:
          v14 = *(_WORD *)(v10 + 129);
          v15 = v13;
          if ((v14 & 0x12) != 0 || (v15 = v12, (v14 & 4) != 0))
          {
            if (v15 - 1 < 3)
              goto LABEL_7;
            if (v15 - 4 >= 2)
            {
              __break(0xC471u);
              JUMPOUT(0x19817F910);
            }
            *(_QWORD *)a1 = a1 + 16;
            *(_QWORD *)(a1 + 8) = 1;
            *(_QWORD *)(a1 + 80) = 0;
            *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
            if (v15 == 4)
            {
              v232 = (v14 & 2) == 0;
              v72 = 6;
            }
            else
            {
              if (v15 != 5)
              {
                __break(0xC471u);
                JUMPOUT(0x19817F930);
              }
              v232 = (v14 & 2) == 0;
              v72 = 8;
            }
            if (!v232)
              ++v72;
            goto LABEL_92;
          }
LABEL_91:
          v72 = 0;
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
LABEL_92:
          *(_BYTE *)(a1 + 88) = v72;
          return;
        }
LABEL_7:
        v340 = (WTF *)v342;
        v341 = 1;
        v343 = 0;
        v344 = 257;
        v16 = *(unsigned __int8 *)(v10 + 123);
        if (v16 != 4)
        {
          if (v16 != 1)
          {
            if (*(_BYTE *)(v10 + 123))
            {
              if (v15 - 1 < 2)
              {
                v236 = a1 + 16;
                goto LABEL_432;
              }
              if (v15 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x19817FA30);
              }
              v255 = a1 + 16;
LABEL_490:
              *(_QWORD *)a1 = v255;
              *(_QWORD *)(a1 + 8) = 1;
              *(_QWORD *)(a1 + 80) = 0;
              *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
              v237 = (*(_WORD *)(v10 + 129) & 2) == 0;
              v238 = 8;
LABEL_433:
              if (!v237)
                ++v238;
              goto LABEL_435;
            }
            *(_QWORD *)a1 = a1 + 16;
            *(_QWORD *)(a1 + 8) = 1;
            *(_QWORD *)(a1 + 80) = 0;
            *(_BYTE *)(a1 + 88) = 0;
            *(_BYTE *)(a1 + 89) &= 0xFCu;
LABEL_80:
            v67 = (unsigned int *)v343;
            v343 = 0;
            if (v67)
            {
              do
              {
                v68 = __ldaxr(v67);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, v67));
              if (!v69)
              {
                atomic_store(1u, v67);
                WTF::fastFree((unint64_t)v67, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
            }
            goto LABEL_84;
          }
          v44 = *(_DWORD *)(v10 + 12);
          if (v44)
            v45 = 16 * (v44 & 0xFFFFFFFE);
          else
            v45 = 0;
          if ((*(_WORD *)(v45 + 12) & 0x10) != 0)
          {
            if (v15 - 1 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19817FB18);
            }
            JSC::GetByStatus::GetByStatus(a1, (0x50404u >> (8 * (v15 - 1))), v10);
            goto LABEL_80;
          }
          v46 = *(_QWORD *)(v10 + 16);
          if (!v46
            || ((v46 & 1) == 0 ? (v47 = *(_DWORD **)(v46 + 8)) : (v47 = (_DWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL)), !v47))
          {
            __break(0xC471u);
            JUMPOUT(0x19817ECD8);
          }
          v335[0] = 0;
          v335[1] = 0;
          *(_OWORD *)v337 = 0u;
          *(_OWORD *)v338 = 0u;
          v339 = v46;
          LODWORD(v345) = 0;
          Concurrently = JSC::Structure::getConcurrently(v45, v47, &v345, a4, a5, (uint64_t)a6, a7, a8);
          if (Concurrently == -1)
          {
            v321 = v15 - 1;
            if (v15 - 1 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19817F7A0);
            }
          }
          else
          {
            if ((v345 & 0x60) == 0)
            {
              if (v45 != ((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL))
                v335[0] = (WTF *)((uint64_t)v335[0] & 2 | (unint64_t)v45);
              JSC::GetByStatus::appendVariant((uint64_t)&v340, v335, v48, v49, v50, v51, v52, v53);
              WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, &v340, v54, v55, v56, v57, v58, v59);
              v60 = v343;
              v343 = 0;
              *(_QWORD *)(a1 + 80) = v60;
              *(_WORD *)(a1 + 88) = v344;
              goto LABEL_67;
            }
            v321 = v15 - 1;
            if (v15 - 1 >= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19817FB38);
            }
          }
          JSC::GetByStatus::GetByStatus(a1, (0x50404u >> (8 * v321)), v10);
LABEL_67:
          v61 = v338[1];
          v338[1] = 0;
          if (v61)
            WTF::fastFree((unint64_t)v61, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          v62 = v337[0];
          v337[0] = 0;
          if (v62)
          {
            v63 = *(_QWORD *)v62;
            if ((WTF *)((char *)v62 + 16) != *(WTF **)v62 && v63)
            {
              *(_QWORD *)v62 = 0;
              *((_DWORD *)v62 + 2) = 0;
              WTF::fastFree(v63, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            }
            WTF::fastFree((unint64_t)v62, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          }
          v64 = (unsigned int *)v335[1];
          v335[1] = 0;
          if (!v64)
            goto LABEL_78;
          do
          {
            v65 = __ldaxr(v64);
            v66 = --v65 == 0;
          }
          while (__stlxr(v65, v64));
          goto LABEL_76;
        }
        v17 = *(uint64_t ***)(v10 + 64);
        v18 = *((_DWORD *)v17 + 3);
        v330 = v17;
        v328 = v11;
        if (v18 != 1)
          goto LABEL_115;
        v19 = **v17;
        v20 = *(unsigned __int8 *)(v19 + 4);
        if (v20 > 0x17)
        {
          if (v20 == 34)
            goto LABEL_11;
          if (v20 != 26)
          {
            if (v20 == 24)
            {
              JSC::GetByStatus::GetByStatus(a1, **v17);
              goto LABEL_80;
            }
            goto LABEL_114;
          }
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 1;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a1 + 88) = 5;
          *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
          v286 = WTF::fastMalloc((WTF *)0x20);
          v287 = (_QWORD *)(v286 + 16);
          *(_QWORD *)v286 = v286 + 16;
          *(_QWORD *)(v286 + 8) = 1;
          *(_DWORD *)(v286 + 24) = 0;
          v288 = *(_QWORD *)(v10 + 72);
          if (!v288)
            goto LABEL_575;
          if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
          {
            while (*(_QWORD *)(v288 + 72) != v19)
            {
              v288 = *(_QWORD *)(v288 + 88);
              if (!v288)
                goto LABEL_575;
            }
          }
          if (*(_DWORD *)(v288 + 4))
          {
            v280 = v288 + 96;
          }
          else
          {
            v319 = *(_QWORD *)(v288 + 64);
            if (!v319
              || (*(_BYTE *)(v319 + 24) & 0xFE) != 4
              || (v320 = *(_QWORD *)(v319 + 104)) == 0
              || !*(_DWORD *)v320
              || (v280 = *(_QWORD *)(v320 + 8)) == 0)
            {
LABEL_575:
              v295 = *(_QWORD *)(v19 + 32);
              v335[0] = 0;
              v335[1] = 0;
              Concurrently = -1;
              v337[0] = (WTF *)v286;
              v337[1] = 0;
              v338[0] = 0;
              v338[1] = 0;
              v339 = v295;
              JSC::GetByStatus::appendVariant(a1, v335, v280, v281, v282, v283, v284, v285);
              v296 = v338[1];
              v338[1] = 0;
              if (v296)
                WTF::fastFree((unint64_t)v296, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              v297 = v337[0];
              v337[0] = 0;
              if (v297)
              {
                v298 = *(_QWORD *)v297;
                if ((WTF *)((char *)v297 + 16) != *(WTF **)v297 && v298 != 0)
                {
                  *(_QWORD *)v297 = 0;
                  *((_DWORD *)v297 + 2) = 0;
                  WTF::fastFree(v298, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                }
                WTF::fastFree((unint64_t)v297, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
              v64 = (unsigned int *)v335[1];
              v335[1] = 0;
              if (!v64)
                goto LABEL_78;
              do
              {
                v300 = __ldaxr(v64);
                v66 = --v300 == 0;
              }
              while (__stlxr(v300, v64));
LABEL_76:
              if (v66)
              {
                atomic_store(1u, v64);
                WTF::fastFree((unint64_t)v64, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
LABEL_78:
              if (((uint64_t)v335[0] & 1) != 0)
                WTF::fastFree((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              goto LABEL_80;
            }
          }
          JSC::CallLinkStatus::computeFor(v280, v332, 0, v283, v284, v285, (unint64_t)v335);
          v290 = *(_QWORD *)v286;
          if (*(_QWORD **)v286 != v287)
          {
            if (v290)
            {
              *(_QWORD *)v286 = 0;
              *(_DWORD *)(v286 + 8) = 0;
              WTF::fastFree(v290, v289, v280, v281, v282, v283, v284, v285);
            }
            *(_QWORD *)v286 = v287;
          }
          v291 = v335[0];
          if ((int *)v335[0] == &Concurrently)
          {
            if (HIDWORD(v335[1]))
            {
              v307 = 8 * HIDWORD(v335[1]);
              do
              {
                v308 = *(_QWORD *)v291;
                v291 = (WTF *)((char *)v291 + 8);
                *v287++ = v308;
                v307 -= 8;
              }
              while (v307);
            }
          }
          else
          {
            v335[0] = (WTF *)&Concurrently;
            *(_QWORD *)v286 = v291;
          }
          *(_DWORD *)(v286 + 8) = v335[1];
          v292 = HIDWORD(v335[1]);
          HIDWORD(v335[1]) = 0;
          *(_DWORD *)(v286 + 12) = v292;
          *(_DWORD *)(v286 + 24) = v337[0];
          v293 = v335[0];
          if (&Concurrently != (int *)v335[0] && v335[0] != 0)
          {
            v335[0] = 0;
            LODWORD(v335[1]) = 0;
            WTF::fastFree((unint64_t)v293, v289, v280, v281, v282, v283, v284, v285);
          }
          goto LABEL_575;
        }
        if (v20 == 1)
        {
LABEL_11:
          v21 = *(_QWORD *)v10;
          if ((*(_QWORD *)v10 & 1) != 0)
          {
            v311 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
            if ((v21 & 2) != 0
              || (v312 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v312 == 0x3FFFFFFF)
              || (_DWORD)v312 == -1)
            {
              v313 = 2;
            }
            else if (v312 >> 28)
            {
              v324 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v324 = v311;
              *(_DWORD *)(v324 + 8) = v312;
              v313 = 1;
              v311 = v324;
            }
            else
            {
              v313 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
              v311 = v312 << 36;
            }
            v21 = v311 | v313;
          }
          v334 = v21;
          v22 = *a6;
          if ((*a6 & 1) != 0)
          {
            v314 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
            if ((v22 & 2) != 0
              || (v315 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v315 == 0x3FFFFFFF)
              || (_DWORD)v315 == -1)
            {
              v316 = 2;
            }
            else if (v315 >> 28)
            {
              v325 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v325 = v314;
              *(_DWORD *)(v325 + 8) = v315;
              v316 = 1;
              v314 = v325;
            }
            else
            {
              v316 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
              v314 = v315 << 36;
            }
            v22 = v314 | v316;
          }
          v333 = v22;
          if (JSC::isSameStyledCodeOrigin(&v334, &v333, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8))
          {
            v23 = *(_WORD *)(v10 + 129);
            if ((v333 & 1) != 0 && (v333 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v333 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            if ((v334 & 1) != 0 && (v334 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v334 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            if ((v23 & 2) == 0)
            {
              *(_QWORD *)a1 = a1 + 16;
              *(_QWORD *)(a1 + 8) = 1;
              *(_QWORD *)(a1 + 80) = 0;
              *(_BYTE *)(a1 + 88) = 3;
              *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
              goto LABEL_80;
            }
          }
          else
          {
            if ((v333 & 1) != 0 && (v333 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v333 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            if ((v334 & 1) != 0 && (v334 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v334 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
          }
        }
LABEL_114:
        v18 = *((_DWORD *)v17 + 3);
LABEL_115:
        if (v18)
        {
          v81 = 0;
          v327 = a1 + 16;
          v329 = v15;
          while (1)
          {
            v82 = (*v17)[v81];
            if (*(_BYTE *)(v82 + 5))
            {
              if (v15 < 3 || v15 == 4)
                goto LABEL_431;
LABEL_554:
              *(_QWORD *)a1 = v327;
              *(_QWORD *)(a1 + 8) = 1;
              *(_QWORD *)(a1 + 80) = 0;
              *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
              if ((*(_WORD *)(v10 + 129) & 2) != 0)
                v238 = 9;
              else
                v238 = 8;
LABEL_435:
              *(_BYTE *)(a1 + 88) = v238;
              goto LABEL_80;
            }
            if (*(_QWORD *)(v82 + 24))
            {
              if (v15 < 3 || v15 != 3 && v15 == 4)
                goto LABEL_431;
              goto LABEL_554;
            }
            v83 = *(unsigned __int8 *)(v82 + 4);
            if (v83 >= 0x1C)
            {
              if (v83 - 33 < 0x50 || v83 - 28 < 3)
              {
                if (v15 >= 3 && (v15 == 3 || v15 != 4))
                {
LABEL_489:
                  v255 = a1 + 16;
                  goto LABEL_490;
                }
LABEL_431:
                v236 = a1 + 16;
LABEL_432:
                *(_QWORD *)a1 = v236;
                *(_QWORD *)(a1 + 8) = 1;
                *(_QWORD *)(a1 + 80) = 0;
                *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                v237 = (*(_WORD *)(v10 + 129) & 2) == 0;
                v238 = 6;
                goto LABEL_433;
              }
              if (v83 - 31 >= 2)
              {
                __break(0xC471u);
                JUMPOUT(0x19817F6DCLL);
              }
            }
            if (v83 > 0x20 || ((1 << v83) & 0x100000014) == 0)
              break;
            v87 = *(_QWORD *)(16 * (*(_DWORD *)(v82 + 12) & 0xFFFFFFFE) + 0x40);
            if (!v87)
              goto LABEL_312;
            if (*(_BYTE *)(v87 + 5) != 1)
            {
              v85 = *(_DWORD *)(v87 + 80);
              if (!v85)
              {
LABEL_312:
                if (v15 >= 3 && v15 != 4)
                  goto LABEL_489;
                goto LABEL_431;
              }
              goto LABEL_126;
            }
LABEL_128:
            if (v83 == 13)
            {
              v89 = *(unsigned int **)(v82 + 16);
              if (!v89)
                goto LABEL_327;
              do
                v100 = __ldaxr(v89);
              while (__stlxr(v100 + 1, v89));
              v192 = v89[1];
              if ((_DWORD)v192)
              {
                v190 = 24 * v192;
                v189 = v89 + 4;
                do
                {
                  if ((*(_QWORD *)v189 & 0xFFFFFFFFFFFFFFLL) == 0
                    || (v185 = (const JSC::PropertyTable *)*((_QWORD *)v189 - 1),
                        v186 = 16 * (*(_DWORD *)v185 & 0xFFFFFFFE),
                        JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)v189, (void *)1, v186, v185, a5, (uint64_t)a6, a7, a8), !v187))
                  {
LABEL_621:
                    v133 = 10;
                    v17 = v330;
                    goto LABEL_363;
                  }
                  v188 = *((unsigned __int8 *)v189 + 6);
                  if (v188 <= 6)
                  {
                    if (((1 << v188) & 0x63) != 0)
                    {
                      if ((*(_WORD *)(v186 + 12) & 0x10) != 0)
                        goto LABEL_621;
                    }
                    else if (v188 == 2 && (*(_WORD *)(v186 + 12) & 0x90) != 0)
                    {
                      goto LABEL_621;
                    }
                  }
                  v189 += 6;
                  v190 -= 24;
                }
                while (v190);
                v193 = *(unsigned __int8 *)(v82 + 4);
                if (v193 <= 0x20 && ((1 << v193) & 0x100000014) != 0)
                {
                  v195 = *(_QWORD *)(16 * (*(_DWORD *)(v82 + 12) & 0xFFFFFFFE) + 0x40);
                  if (v195 && *(_BYTE *)(v195 + 5) != 1)
                  {
                    v194 = *(_DWORD *)(v195 + 80);
                    goto LABEL_328;
                  }
                }
                else
                {
LABEL_327:
                  v194 = *(_DWORD *)(v82 + 12);
LABEL_328:
                  if (v194)
                    v195 = 16 * (v194 & 0xFFFFFFFE);
                  else
                    v195 = 0;
                }
                AlternateBase = (_DWORD *)JSC::AccessCase::tryGetAlternateBase((JSC::AccessCase *)v82);
                if (AlternateBase)
                  v195 = 16 * (*AlternateBase & 0xFFFFFFFE);
                if (*(_QWORD *)(v195 + 40) == *((_QWORD *)v328 + 1))
                {
                  v197 = *(WTF **)(v82 + 56);
                  if (*(_BYTE *)(v82 + 80))
                  {
                    *(_OWORD *)v335 = *(_OWORD *)(v82 + 64);
                    v198 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                    *(_OWORD *)v198 = *(_OWORD *)v335;
                  }
                  else
                  {
                    v198 = 0;
                  }
                  v199 = *(_QWORD *)(v82 + 32);
                  v345 = v87;
                  v335[0] = 0;
                  if ((v87 & 1) != 0)
                    WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v335, &v345);
                  else
                    v335[0] = (WTF *)(v87 & 0xFFFFFFFFFFFFFFFDLL);
                  v17 = v330;
                  if (v89)
                  {
                    do
                      v103 = __ldaxr(v89);
                    while (__stlxr(v103 + 1, v89));
                  }
                  v335[1] = (WTF *)v89;
                  Concurrently = -1;
                  v337[0] = 0;
                  v337[1] = 0;
                  v338[0] = v197;
                  v338[1] = v198;
                  v339 = v199;
                  if ((v345 & 1) != 0)
                    WTF::fastFree(v345 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                  if ((JSC::GetByStatus::appendVariant((uint64_t)&v340, v335, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8) & 1) != 0)
                  {
                    if ((v344 & 0x200) == 0)
                    {
                      LOBYTE(v344) = 2;
                      v133 = 11;
                      goto LABEL_344;
                    }
                    v322 = v329;
                  }
                  else
                  {
                    v322 = v329;
                  }
                  JSC::GetByStatus::GetByStatus(a1, (0x50405040404uLL >> (8 * v322)), v10);
                  v133 = 1;
                  v17 = v330;
LABEL_344:
                  v200 = v338[1];
                  v338[1] = 0;
                  if (v200)
                    WTF::fastFree((unint64_t)v200, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                  v201 = v337[0];
                  v337[0] = 0;
                  if (v201)
                  {
                    v202 = *(_QWORD *)v201;
                    if ((WTF *)((char *)v201 + 16) != *(WTF **)v201 && v202)
                    {
                      *(_QWORD *)v201 = 0;
                      *((_DWORD *)v201 + 2) = 0;
                      WTF::fastFree(v202, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                    }
                    WTF::fastFree((unint64_t)v201, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                  }
                  v203 = (unsigned int *)v335[1];
                  v335[1] = 0;
                  if (v203)
                  {
                    do
                    {
                      v104 = __ldaxr(v203);
                      v105 = v104 - 1;
                    }
                    while (__stlxr(v105, v203));
                    if (!v105)
                    {
                      atomic_store(1u, v203);
                      WTF::fastFree((unint64_t)v203, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                    }
                  }
                  if (((uint64_t)v335[0] & 1) != 0)
                    WTF::fastFree((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                }
                else
                {
                  if (v329 < 3 || v329 != 3 && v329 == 4)
                  {
                    *(_QWORD *)a1 = v327;
                    *(_QWORD *)(a1 + 8) = 1;
                    *(_QWORD *)(a1 + 80) = 0;
                    *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                    v268 = (*(_WORD *)(v10 + 129) & 2) == 0;
                    v269 = 6;
                  }
                  else
                  {
                    *(_QWORD *)a1 = v327;
                    *(_QWORD *)(a1 + 8) = 1;
                    *(_QWORD *)(a1 + 80) = 0;
                    *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                    v268 = (*(_WORD *)(v10 + 129) & 2) == 0;
                    v269 = 8;
                  }
                  if (!v268)
                    ++v269;
                  v17 = v330;
                  *(_BYTE *)(a1 + 88) = v269;
                  v133 = 1;
                }
LABEL_363:
                if (!v89)
                  goto LABEL_224;
              }
              else
              {
                v133 = 10;
                v17 = v330;
              }
              do
              {
                v101 = __ldaxr(v89);
                v102 = --v101 == 0;
              }
              while (__stlxr(v101, v89));
LABEL_222:
              if (v102)
              {
                atomic_store(1u, v89);
                WTF::fastFree((unint64_t)v89, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
              goto LABEL_224;
            }
            v88 = *(_QWORD *)(v82 + 32);
            if (v88)
            {
              if ((v88 & 1) != 0)
                a2 = (_DWORD *)(v88 & 0xFFFFFFFFFFFFFFFELL);
              else
                a2 = *(_DWORD **)(v88 + 8);
            }
            else
            {
              a2 = 0;
            }
            if ((*(_WORD *)(v87 + 12) & 0x10) != 0)
            {
              v89 = 0;
LABEL_483:
              v17 = v330;
              if (v329 < 3 || v329 != 3 && v329 == 4)
              {
                *(_QWORD *)a1 = v327;
                *(_QWORD *)(a1 + 8) = 1;
                *(_QWORD *)(a1 + 80) = 0;
                *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                v253 = (*(_WORD *)(v10 + 129) & 2) == 0;
                v254 = 6;
              }
              else
              {
                *(_QWORD *)a1 = v327;
                *(_QWORD *)(a1 + 8) = 1;
                *(_QWORD *)(a1 + 80) = 0;
                *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                v253 = (*(_WORD *)(v10 + 129) & 2) == 0;
                v254 = 8;
              }
              if (!v253)
                ++v254;
              *(_BYTE *)(a1 + 88) = v254;
              v133 = 1;
              goto LABEL_220;
            }
            v346 = 0;
            v345 = 0xFFFFFFFF00000002;
            v89 = *(unsigned int **)(v82 + 16);
            if (v89)
            {
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 + 1, v89));
              v91 = v346;
              v346 = v89;
              if (v91)
              {
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                {
                  atomic_store(1u, v91);
                  WTF::fastFree((unint64_t)v91, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                }
                v89 = v346;
                if (!v346)
                  goto LABEL_170;
              }
              v94 = v89[1];
              if ((_DWORD)v94)
              {
                v95 = 0;
                v96 = 24 * v94;
                do
                {
                  if ((*(_QWORD *)&v89[v95 / 4 + 4] & 0xFFFFFFFFFFFFFFLL) == 0
                    || (v97 = 16 * (**(_DWORD **)&v89[v95 / 4 + 2] & 0xFFFFFFFE),
                        JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint((unint64_t *)&v89[v95 / 4 + 4], (void *)1, v97, 0, a5, (uint64_t)a6, a7, a8), !v98))
                  {
LABEL_590:
                    v111 = 0xFFFFFFFF00000000;
                    goto LABEL_591;
                  }
                  v99 = BYTE2(v89[v95 / 4 + 5]);
                  if (v99 <= 6)
                  {
                    if (((1 << v99) & 0x63) != 0)
                    {
                      if ((*(_WORD *)(v97 + 12) & 0x10) != 0)
                        goto LABEL_590;
                    }
                    else if (v99 == 2 && (*(_WORD *)(v97 + 12) & 0x90) != 0)
                    {
                      goto LABEL_590;
                    }
                  }
                  v95 += 24;
                }
                while (v96 != v95);
                v106 = v89[1];
                if ((_DWORD)v106)
                {
                  v107 = 0;
                  v108 = 0;
                  v109 = 24 * v106;
                  do
                  {
                    if (!BYTE2(v89[v107 / 4 + 5]))
                      ++v108;
                    v107 += 24;
                  }
                  while (v109 != v107);
                  if (v108 >= 2)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19817F328);
                  }
                  if (v108)
                  {
                    JSC::ObjectPropertyConditionSet::slotBaseCondition((uint64_t *)&v346, v335);
                    v110 = Concurrently;
                    goto LABEL_169;
                  }
                }
LABEL_170:
                v111 = v345;
                goto LABEL_171;
              }
              v346 = 0;
              v111 = 0xFFFFFFFF00000000;
              do
LABEL_592:
                v301 = __ldaxr(v89);
              while (__stlxr(v301 - 1, v89));
              if (v301 == 1)
              {
                atomic_store(1u, v89);
                WTF::fastFree((unint64_t)v89, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
              v89 = 0;
              goto LABEL_171;
            }
            LODWORD(v335[0]) = 0;
            v110 = JSC::Structure::getConcurrently(v87, a2, v335, a4, a5, (uint64_t)a6, a7, a8);
LABEL_169:
            HIDWORD(v345) = v110;
            if (v110 != -1)
              goto LABEL_170;
            v111 = 0xFFFFFFFF00000001;
LABEL_591:
            v346 = 0;
            if (v89)
              goto LABEL_592;
LABEL_171:
            if ((_DWORD)v111 == 2)
            {
              v112 = 0;
              v113 = *(unsigned __int8 *)(v82 + 4);
              if (*(_BYTE *)(v82 + 4) && (v113 - 8) >= 2)
              {
                if (v113 == 10)
                {
                  v112 = WTF::fastMalloc((WTF *)0x20);
                  v204 = (_QWORD *)(v112 + 16);
                  *(_QWORD *)v112 = v112 + 16;
                  *(_QWORD *)(v112 + 8) = 1;
                  *(_DWORD *)(v112 + 24) = 0;
                  v205 = *(_QWORD *)(v10 + 72);
                  if (v205)
                  {
                    if ((*(_WORD *)(v10 + 129) & 0x200) != 0)
                    {
                      while (*(_QWORD *)(v205 + 72) != v82)
                      {
                        v205 = *(_QWORD *)(v205 + 88);
                        if (!v205)
                          goto LABEL_377;
                      }
                      if (*(_DWORD *)(v205 + 4))
                      {
LABEL_368:
                        a3 = (WTF *)(v205 + 96);
                        a4 = v326;
                        goto LABEL_369;
                      }
                      v270 = *(_QWORD *)(v205 + 64);
                      if (v270)
                      {
                        if ((*(_BYTE *)(v270 + 24) & 0xFE) == 4)
                        {
                          v271 = *(unsigned int **)(v270 + 104);
                          if (v271)
                          {
                            if (*v271)
                            {
LABEL_534:
                              a3 = (WTF *)*((_QWORD *)v271 + 1);
                              a4 = v326;
                              if (a3)
                              {
LABEL_369:
                                v326 = a4 & 0xFFFFFFFFFFFF0000 | v332;
                                JSC::CallLinkStatus::computeFor((uint64_t)a3, v326, 0, (uint64_t)a6, a7, a8, (unint64_t)v335);
                                v206 = *(_QWORD *)v112;
                                if (*(_QWORD **)v112 != v204)
                                {
                                  if (v206)
                                  {
                                    *(_QWORD *)v112 = 0;
                                    *(_DWORD *)(v112 + 8) = 0;
                                    WTF::fastFree(v206, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                                  }
                                  *(_QWORD *)v112 = v204;
                                }
                                v207 = v335[0];
                                if ((int *)v335[0] == &Concurrently)
                                {
                                  if (HIDWORD(v335[1]))
                                  {
                                    v233 = 8 * HIDWORD(v335[1]);
                                    p_Concurrently = &Concurrently;
                                    do
                                    {
                                      v235 = *(_QWORD *)p_Concurrently;
                                      p_Concurrently += 2;
                                      *v204++ = v235;
                                      v233 -= 8;
                                    }
                                    while (v233);
                                  }
                                }
                                else
                                {
                                  v335[0] = (WTF *)&Concurrently;
                                  *(_QWORD *)v112 = v207;
                                }
                                *(_DWORD *)(v112 + 8) = v335[1];
                                v208 = HIDWORD(v335[1]);
                                HIDWORD(v335[1]) = 0;
                                *(_DWORD *)(v112 + 12) = v208;
                                *(_DWORD *)(v112 + 24) = v337[0];
                                v209 = v335[0];
                                if (&Concurrently != (int *)v335[0] && v335[0] != 0)
                                {
                                  v335[0] = 0;
                                  LODWORD(v335[1]) = 0;
                                  WTF::fastFree((unint64_t)v209, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      if (v81 < *(unsigned int *)(v205 + 4))
                      {
                        v205 += 80 * v81;
                        goto LABEL_368;
                      }
                      v317 = *(_QWORD *)(v205 + 64);
                      if (v317)
                      {
                        if ((*(_BYTE *)(v317 + 24) & 0xFE) == 4)
                        {
                          v318 = *(unsigned int **)(v317 + 104);
                          if (v318)
                          {
                            if (v81 < *v318)
                            {
                              v271 = &v318[2 * v81];
                              goto LABEL_534;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_377:
                  v114 = 0;
                }
                else
                {
                  if (v113 != 16)
                  {
                    JSC::GetByStatus::GetByStatus(a1, (0x50405040404uLL >> (8 * v329)), v10);
                    v133 = 1;
                    v17 = v330;
                    goto LABEL_220;
                  }
                  v112 = 0;
                  v114 = *(WTF **)(v82 + 40);
                }
              }
              else
              {
                v114 = 0;
              }
              v115 = *(_QWORD *)(v82 + 32);
              v345 = v87;
              v335[0] = 0;
              if ((v87 & 1) != 0)
                WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v335, &v345);
              else
                v335[0] = (WTF *)(v87 & 0xFFFFFFFFFFFFFFFDLL);
              if (v89)
              {
                do
                  v116 = __ldaxr(v89);
                while (__stlxr(v116 + 1, v89));
              }
              v335[1] = (WTF *)v89;
              Concurrently = HIDWORD(v111);
              v337[0] = (WTF *)v112;
              v337[1] = v114;
              v338[0] = 0;
              v338[1] = 0;
              v339 = v115;
              if ((v345 & 1) != 0)
                WTF::fastFree(v345 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              if (!HIDWORD(v341))
              {
                v117 = 0;
LABEL_182:
                if (v117 == v341)
                {
                  v221 = (const JSC::GetByVariant *)WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v340, v117 + 1, (unint64_t)v335, a4, a5, (uint64_t)a6, a7, a8);
                  JSC::GetByVariant::GetByVariant((WTF *)((char *)v340 + 64 * (unint64_t)HIDWORD(v341)), v221, v222, v223, v224, v225, v226, v227);
                }
                else
                {
                  v118 = (WTF **)((char *)v340 + 64 * v117);
                  v119 = (WTF *)v339;
                  v118[1] = 0;
                  v120 = (unsigned int **)(v118 + 1);
                  *((_DWORD *)v118 + 4) = -1;
                  *v118 = 0;
                  *(_OWORD *)(v118 + 3) = 0u;
                  v121 = (unint64_t *)(v118 + 3);
                  *(_OWORD *)(v118 + 5) = 0u;
                  v118[7] = v119;
                  v118[7] = (WTF *)v339;
                  if (v118 != v335)
                  {
                    if (((uint64_t)v335[0] & 1) != 0)
                      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v118, v335);
                    else
                      *v118 = (WTF *)((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFDLL);
                  }
                  v122 = (unsigned int *)v335[1];
                  if (v335[1])
                  {
                    do
                      v123 = __ldaxr(v122);
                    while (__stlxr(v123 + 1, v122));
                  }
                  v124 = *v120;
                  *v120 = v122;
                  if (v124)
                  {
                    do
                    {
                      v125 = __ldaxr(v124);
                      v126 = v125 - 1;
                    }
                    while (__stlxr(v126, v124));
                    if (!v126)
                    {
                      atomic_store(1u, v124);
                      WTF::fastFree((unint64_t)v124, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                    }
                  }
                  v127 = (unint64_t *)(v118 + 6);
                  *((_DWORD *)v118 + 4) = Concurrently;
                  v118[4] = v337[1];
                  v118[5] = v338[0];
                  v128 = v338[1];
                  if (v338[1])
                  {
                    v249 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
                    *v249 = *(_OWORD *)v128;
                    v129 = *v127;
                    *v127 = (unint64_t)v249;
                    if (v129)
LABEL_194:
                      WTF::fastFree(v129, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                  }
                  else
                  {
                    v129 = *v127;
                    *v127 = 0;
                    if (v129)
                      goto LABEL_194;
                  }
                  v130 = v337[0];
                  if (v337[0])
                  {
                    v239 = WTF::fastMalloc((WTF *)0x20);
                    v240 = *((unsigned int *)v130 + 3);
                    v241 = (_QWORD *)(v239 + 16);
                    *(_QWORD *)v239 = v239 + 16;
                    *(_DWORD *)(v239 + 8) = 1;
                    *(_DWORD *)(v239 + 12) = v240;
                    if (v240 >= 2)
                    {
                      if (v240 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19817FA70);
                      }
                      v241 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v240));
                      *(_DWORD *)(v239 + 8) = v240;
                      *(_QWORD *)v239 = v241;
                    }
                    v242 = *((unsigned int *)v130 + 3);
                    if ((_DWORD)v242)
                    {
                      v250 = *(uint64_t **)v130;
                      v251 = 8 * v242;
                      do
                      {
                        v252 = *v250++;
                        *v241++ = v252;
                        v251 -= 8;
                      }
                      while (v251);
                    }
                    *(_DWORD *)(v239 + 24) = *((_DWORD *)v130 + 6);
                    v131 = *v121;
                    *v121 = v239;
                    if (v131)
                    {
                      v132 = *(_QWORD *)v131;
                      if (v131 + 16 != *(_QWORD *)v131 && v132 != 0)
                        goto LABEL_453;
LABEL_199:
                      WTF::fastFree(v131, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                    }
                  }
                  else
                  {
                    v131 = *v121;
                    *v121 = 0;
                    if (v131)
                    {
                      v132 = *(_QWORD *)v131;
                      if (v131 + 16 == *(_QWORD *)v131 || !v132)
                        goto LABEL_199;
LABEL_453:
                      *(_QWORD *)v131 = 0;
                      *(_DWORD *)(v131 + 8) = 0;
                      WTF::fastFree(v132, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                      goto LABEL_199;
                    }
                  }
                }
                ++HIDWORD(v341);
LABEL_201:
                if (v344 != 2)
                {
                  v133 = 12;
                  v134 = 1;
                  goto LABEL_203;
                }
                if (v329 >= 3 && v329 != 4)
                  goto LABEL_670;
                goto LABEL_616;
              }
              v143 = 0;
              while (2)
              {
                v144 = v340;
                v145 = (uint64_t *)((char *)v340 + 64 * v143);
                v147 = v145 + 7;
                v146 = v145[7];
                v148 = v339;
                if ((v146 != 0) != (v339 != 0))
                  goto LABEL_269;
                if (v146)
                {
                  if ((v146 & 1) != 0)
                    v149 = v146 & 0xFFFFFFFFFFFFFFFELL;
                  else
                    v149 = *(_QWORD *)(v146 + 8);
                  if (v339)
                  {
                    if ((v339 & 1) != 0)
                      v148 = v339 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v148 = *(_QWORD *)(v339 + 8);
                  }
                  if (v149 != v148)
                    goto LABEL_269;
                }
                v150 = (char *)v340 + 64 * v143;
                v151 = v150 + 16;
                if (*((_DWORD *)v150 + 4) != Concurrently)
                  goto LABEL_269;
                v153 = *((_QWORD *)v150 + 3);
                v152 = (uint64_t *)(v150 + 24);
                if (!v153)
                {
                  if (!v337[0])
                    goto LABEL_240;
                  goto LABEL_269;
                }
                if (!v337[0])
                  goto LABEL_269;
LABEL_240:
                v154 = (_QWORD *)*((_QWORD *)v340 + 8 * v143 + 4);
                if (v154 != (_QWORD *)v337[1])
                  goto LABEL_269;
                if (v154)
                {
                  v272 = v154[3];
                  if ((v272 & 1) != 0)
                    v272 = *(_QWORD *)((v272 & 0xFFFFFFFFFFFFFFFELL) + 48);
                  if (*(_BYTE *)(v272 + 5) == 8)
                  {
                    v302 = *(_QWORD *)(v272 + 8);
                    v303 = (unsigned int *)(v302 + 8);
                    do
                      v304 = __ldaxr(v303);
                    while (__stlxr(v304 + 1, v303));
                    v273 = *(unsigned __int8 *)(v302 + 14);
                    do
                    {
                      v305 = __ldaxr(v303);
                      v306 = v305 - 1;
                    }
                    while (__stlxr(v306, v303));
                    if (!v306)
                    {
                      atomic_store(1u, (unsigned int *)(v302 + 8));
                      (*(void (**)(uint64_t))(*(_QWORD *)v302 + 32))(v302);
                    }
                  }
                  else
                  {
                    v273 = *(unsigned __int8 *)(v272 + 64);
                  }
                  v41 = v273 == 152;
                  v147 = v145 + 7;
                  if (v41)
                  {
                    v274 = *v145 & 0xFFFFFFFFFFFFFFFCLL;
                    if ((*v145 & 1) != 0)
                      v274 = *(_QWORD *)(v274 + 8);
                    v276 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v274 + 9), (JSType)a2);
                    v277 = (unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL;
                    if (((uint64_t)v335[0] & 1) != 0)
                      v277 = *(_QWORD *)(v277 + 8);
                    v278 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v277 + 9), v275);
                    v279 = (v276 - 4) > 7u ? 0 : dword_199153064[(char)(v276 - 4)];
                    v323 = (v278 - 4) > 7u ? 0 : dword_199153064[(char)(v278 - 4)];
                    v147 = v145 + 7;
                    if (v279 != v323)
                      goto LABEL_269;
                  }
                }
                v155 = (WTF **)((char *)v144 + 64 * v143);
                if (v155[5] != v338[0])
                {
LABEL_269:
                  ++v143;
                  v117 = HIDWORD(v341);
                  if (v143 >= HIDWORD(v341))
                  {
                    if (!HIDWORD(v341))
                      goto LABEL_182;
                    v211 = 0;
                    v212 = 56;
                    while (1)
                    {
                      v213 = *(_QWORD *)((char *)v340 + v212);
                      v214 = v339;
                      if ((v213 != 0) != (v339 != 0))
                        break;
                      if (!v213)
                        goto LABEL_388;
                      if ((v213 & 1) != 0)
                        v215 = v213 & 0xFFFFFFFFFFFFFFFELL;
                      else
                        v215 = *(_QWORD *)(v213 + 8);
                      if (v339)
                      {
                        if ((v339 & 1) != 0)
                          v214 = v339 & 0xFFFFFFFFFFFFFFFELL;
                        else
                          v214 = *(_QWORD *)(v339 + 8);
                      }
                      if (v215 == v214)
                      {
LABEL_388:
                        if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)((char *)v340 + v212 - 56), (uint64_t *)v335))
                        {
                          break;
                        }
                        v117 = HIDWORD(v341);
                      }
                      ++v211;
                      v212 += 64;
                      if (v211 >= v117)
                        goto LABEL_182;
                    }
LABEL_615:
                    if (v329 >= 3 && (v329 == 3 || v329 != 4))
                    {
LABEL_670:
                      *(_QWORD *)a1 = v327;
                      *(_QWORD *)(a1 + 8) = 1;
                      *(_QWORD *)(a1 + 80) = 0;
                      *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                      v309 = (*(_WORD *)(v10 + 129) & 2) == 0;
                      v310 = 8;
LABEL_617:
                      if (!v309)
                        ++v310;
                      v134 = 0;
                      *(_BYTE *)(a1 + 88) = v310;
                      v133 = 1;
LABEL_203:
                      v17 = v330;
                      v135 = v338[1];
                      v338[1] = 0;
                      if (v135)
                        WTF::fastFree((unint64_t)v135, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                      v136 = v337[0];
                      v337[0] = 0;
                      if (v136)
                      {
                        v137 = *(_QWORD *)v136;
                        if ((WTF *)((char *)v136 + 16) != *(WTF **)v136 && v137 != 0)
                        {
                          *(_QWORD *)v136 = 0;
                          *((_DWORD *)v136 + 2) = 0;
                          WTF::fastFree(v137, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                        }
                        WTF::fastFree((unint64_t)v136, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                      }
                      v139 = (unsigned int *)v335[1];
                      v335[1] = 0;
                      if (v139)
                      {
                        do
                        {
                          v140 = __ldaxr(v139);
                          v141 = v140 - 1;
                        }
                        while (__stlxr(v141, v139));
                        if (!v141)
                        {
                          atomic_store(1u, v139);
                          WTF::fastFree((unint64_t)v139, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                        }
                      }
                      if (((uint64_t)v335[0] & 1) != 0)
                        WTF::fastFree((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                      if (v134)
LABEL_219:
                        v133 = 11;
                      goto LABEL_220;
                    }
LABEL_616:
                    *(_QWORD *)a1 = v327;
                    *(_QWORD *)(a1 + 8) = 1;
                    *(_QWORD *)(a1 + 80) = 0;
                    *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
                    v309 = (*(_WORD *)(v10 + 129) & 2) == 0;
                    v310 = 6;
                    goto LABEL_617;
                  }
                  continue;
                }
                break;
              }
              v156 = v155[6];
              if (v156)
              {
                if (!v338[1])
                  goto LABEL_269;
                v245 = *(_QWORD *)v156;
                v244 = *((_QWORD *)v156 + 1);
                if (v245 != *(_QWORD *)v338[1] || v244 != *((_QWORD *)v338[1] + 1))
                  goto LABEL_269;
              }
              else if (v338[1])
              {
                goto LABEL_269;
              }
              v157 = (char *)v144 + 64 * v143;
              v160 = *((_QWORD *)v157 + 1);
              v159 = (JSC::ObjectPropertyConditionSet *)(v157 + 8);
              v158 = v160;
              if ((v160 == 0) != (v335[1] == 0))
                goto LABEL_269;
              if (!v158)
                goto LABEL_271;
              JSC::ObjectPropertyConditionSet::mergedWith(v159, (unint64_t)&v335[1], (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8, &v345);
              v161 = (unsigned int *)v345;
              if (v345)
              {
                v162 = *(_DWORD *)(v345 + 4);
                if (!v162)
                  goto LABEL_399;
                if (*v151 != -1)
                {
                  v163 = 0;
                  v164 = v345 + 8;
                  v165 = v345 + 8 + 24 * v162;
                  do
                  {
                    while (1)
                    {
                      v166 = *(unsigned __int8 *)(v164 + 14);
                      v39 = v166 > 6;
                      v167 = (1 << v166) & 0x63;
                      if (v39 || v167 == 0)
                        break;
                      if ((v163 & 1) != 0)
                        goto LABEL_399;
                      v164 += 24;
                      v163 = 1;
                      if (v164 == v165)
                        goto LABEL_260;
                    }
                    v164 += 24;
                  }
                  while (v164 != v165);
                  if ((v163 & 1) == 0)
                  {
LABEL_399:
                    v172 = 0;
                    goto LABEL_265;
                  }
                }
                do
LABEL_260:
                  v169 = __ldaxr(v161);
                while (__stlxr(v169 + 1, v161));
              }
              else if (*v151 != -1)
              {
                goto LABEL_269;
              }
              v170 = *(unsigned int **)v159;
              *(_QWORD *)v159 = v161;
              if (v170)
              {
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                v172 = 1;
                if (v171 == 1)
                {
                  atomic_store(1u, v170);
                  WTF::fastFree((unint64_t)v170, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                }
              }
              else
              {
                v172 = 1;
              }
LABEL_265:
              v173 = (unsigned int *)v345;
              v345 = 0;
              if (!v173)
                goto LABEL_268;
              do
              {
                v174 = __ldaxr(v173);
                v175 = v174 - 1;
              }
              while (__stlxr(v175, v173));
              if (!v175)
              {
                atomic_store(1u, v173);
                WTF::fastFree((unint64_t)v173, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                if ((v172 & 1) != 0)
                {
LABEL_271:
                  if (((uint64_t)v335[0] & 1) != 0)
                  {
                    WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v145, v335);
                  }
                  else
                  {
                    v176 = (unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL;
                    if (((unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
                    {
                      v177 = *v145;
                      if ((*v145 & 1) != 0)
                      {
                        WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v145, (unint64_t)v335[0] & 0xFFFFFFFFFFFFFFFCLL);
                      }
                      else if ((v177 & 0xFFFFFFFFFFFFFFFCLL) != v176)
                      {
                        if ((v177 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                        {
                          v219 = WTF::fastMalloc((WTF *)0x28);
                          *(_QWORD *)v219 = 0x400000002;
                          v220 = *v145;
                          *(_QWORD *)(v219 + 8) = *v145 & 0xFFFFFFFFFFFFFFFCLL;
                          *(_QWORD *)(v219 + 16) = v176;
                          v178 = v220 & 2 | v219 | 1;
                        }
                        else
                        {
                          v178 = *v145 & 2 | v176;
                        }
                        *v145 = v178;
                      }
                    }
                  }
                  if (*v152)
                    JSC::CallLinkStatus::merge(*v152, (uint64_t)v337[0], (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
                  v179 = HIDWORD(v341);
                  if (HIDWORD(v341))
                  {
                    v180 = 0;
                    v181 = 0;
                    while (1)
                    {
                      if (v143 != v181)
                      {
                        v182 = *(_QWORD *)((char *)v340 + v180 + 56);
                        v183 = *v147;
                        if ((v182 != 0) != (*v147 != 0))
                          goto LABEL_615;
                        if (!v182)
                          goto LABEL_293;
                        if ((v182 & 1) != 0)
                          v184 = v182 & 0xFFFFFFFFFFFFFFFELL;
                        else
                          v184 = *(_QWORD *)(v182 + 8);
                        if (v183)
                        {
                          if ((v183 & 1) != 0)
                            v183 &= ~1uLL;
                          else
                            v183 = *(_QWORD *)(v183 + 8);
                        }
                        if (v184 == v183)
                        {
LABEL_293:
                          if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)((char *)v340 + v180), v145))
                            goto LABEL_615;
                          v179 = HIDWORD(v341);
                        }
                      }
                      ++v181;
                      v180 += 64;
                      if (v181 >= v179)
                        goto LABEL_201;
                    }
                  }
                  goto LABEL_201;
                }
              }
              else
              {
LABEL_268:
                if (v172)
                  goto LABEL_271;
              }
              goto LABEL_269;
            }
            if ((_DWORD)v111 == 1)
              goto LABEL_483;
            if ((_DWORD)v111)
            {
              v17 = v330;
              goto LABEL_219;
            }
            v133 = 10;
            v17 = v330;
LABEL_220:
            if (v89)
            {
              do
              {
                v142 = __ldaxr(v89);
                v102 = --v142 == 0;
              }
              while (__stlxr(v142, v89));
              goto LABEL_222;
            }
LABEL_224:
            if (v133 != 11 && v133 != 10)
              goto LABEL_80;
            ++v81;
            v15 = v329;
            if (v81 >= *((unsigned int *)v17 + 3))
              goto LABEL_315;
          }
          v85 = *(_DWORD *)(v82 + 12);
          if (!v85)
            goto LABEL_312;
LABEL_126:
          v86 = v85 & 0xFFFFFFFE;
          if (!v86)
            goto LABEL_312;
          v87 = 16 * v86;
          goto LABEL_128;
        }
LABEL_315:
        v191 = HIDWORD(v341);
        if (v341 > HIDWORD(v341))
        {
          v217 = (char *)v340;
          v218 = v340;
          if (HIDWORD(v341))
          {
            if (HIDWORD(v341) == 1)
            {
              v340 = (WTF *)v342;
              LODWORD(v341) = 1;
              a3 = (WTF *)v342;
            }
            else
            {
              if (HIDWORD(v341) >> 26)
              {
                __break(0xC471u);
                JUMPOUT(0x19817FAF8);
              }
              a3 = (WTF *)WTF::fastMalloc((WTF *)((unint64_t)HIDWORD(v341) << 6));
              LODWORD(v341) = v191;
              v340 = a3;
            }
            v218 = (WTF *)v217;
            if (a3 != (WTF *)v217)
            {
              WTF::VectorTypeOperations<JSC::GetByVariant>::move(v217, &v217[64 * v191], (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              v218 = v340;
            }
          }
          if (v342 != v217 && v217)
          {
            if (v218 == (WTF *)v217)
            {
              v340 = 0;
              LODWORD(v341) = 0;
            }
            WTF::fastFree((unint64_t)v217, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            v218 = v340;
          }
          if (!v218)
          {
            v340 = (WTF *)v342;
            LODWORD(v341) = 1;
          }
        }
        WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, &v340, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
        *(_QWORD *)(a1 + 80) = v343;
        *(_WORD *)(a1 + 88) = v344;
        v343 = 0;
LABEL_84:
        v70 = v340;
        if (HIDWORD(v341))
        {
          v73 = (WTF *)((char *)v340 + 64 * (unint64_t)HIDWORD(v341));
          do
          {
            v74 = *((_QWORD *)v70 + 6);
            *((_QWORD *)v70 + 6) = 0;
            if (v74)
              WTF::fastFree(v74, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            v75 = *((_QWORD *)v70 + 3);
            *((_QWORD *)v70 + 3) = 0;
            if (v75)
            {
              v76 = *(_QWORD *)v75;
              if (v75 + 16 != *(_QWORD *)v75 && v76 != 0)
              {
                *(_QWORD *)v75 = 0;
                *(_DWORD *)(v75 + 8) = 0;
                WTF::fastFree(v76, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
              WTF::fastFree(v75, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            }
            v78 = (unsigned int *)*((_QWORD *)v70 + 1);
            *((_QWORD *)v70 + 1) = 0;
            if (v78)
            {
              do
              {
                v79 = __ldaxr(v78);
                v80 = v79 - 1;
              }
              while (__stlxr(v80, v78));
              if (!v80)
              {
                atomic_store(1u, v78);
                WTF::fastFree((unint64_t)v78, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
              }
            }
            if ((*(_QWORD *)v70 & 1) != 0)
              WTF::fastFree(*(_QWORD *)v70 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
            v70 = (WTF *)((char *)v70 + 64);
          }
          while (v70 != v73);
          v70 = v340;
        }
        if (v342 != (_BYTE *)v70 && v70 != 0)
        {
          v340 = 0;
          LODWORD(v341) = 0;
          WTF::fastFree((unint64_t)v70, a2, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8);
        }
        return;
      default:
        v38 = *(unsigned __int8 *)(v28 + 4) - 61;
        v39 = v38 > 0x32;
        v40 = (1 << v38) & 0x4000000000003;
        v41 = v39 || v40 == 0;
        if (!v41)
          goto LABEL_45;
        goto LABEL_43;
    }
  }
}

uint64_t JSC::GetByStatus::GetByStatus(uint64_t result, int a2, uint64_t a3)
{
  BOOL v3;
  char v4;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 89) = *(_BYTE *)(result + 89) & 0xFC | 1;
  if (a2 == 4)
  {
    v3 = (*(_WORD *)(a3 + 129) & 2) == 0;
    v4 = 6;
  }
  else
  {
    if (a2 != 5)
    {
      result = 216;
      __break(0xC471u);
      return result;
    }
    v3 = (*(_WORD *)(a3 + 129) & 2) == 0;
    v4 = 8;
  }
  if (!v3)
    ++v4;
  *(_BYTE *)(result + 88) = v4;
  return result;
}

uint64_t JSC::GetByStatus::GetByStatus(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v3 = *(_DWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 40);
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v5 = 1;
  *(_OWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 24) = v3;
  *(_QWORD *)(v5 + 32) = v4;
  *(_QWORD *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 88) = 4;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a1 + 89) & 0xFC | 1;
  return a1;
}

uint64_t JSC::isSameStyledCodeOrigin(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;

  while (1)
  {
    v8 = *a1;
    if ((*a1 & 2) != 0)
    {
      LODWORD(v9) = -1;
    }
    else if ((v8 & 1) != 0)
    {
      LODWORD(v9) = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v9 = v8 >> 36;
    }
    v10 = *a2;
    if ((*a2 & 2) != 0)
    {
      LODWORD(v11) = -1;
    }
    else if ((v10 & 1) != 0)
    {
      LODWORD(v11) = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v11 = v10 >> 36;
    }
    if ((_DWORD)v9 != (_DWORD)v11)
      return 0;
    v12 = (uint64_t *)(v8 & 0xFFFFFFFF8);
    v13 = v8 & 0xFFFFFFFF8;
    if ((v8 & 1) != 0)
      v13 = *v12;
    v14 = (uint64_t *)(v10 & 0xFFFFFFFF8);
    v15 = v10 & 0xFFFFFFFF8;
    if ((v10 & 1) != 0)
      v15 = *v14;
    if ((v13 == 0) == (v15 != 0))
      return 0;
    if ((v8 & 1) != 0)
    {
      v21 = *v12;
      if (!*v12)
        return 1;
      v37 = a2;
      v17 = (uint64_t *)(v21 + 16);
      v22 = a1;
      if ((uint64_t *)(v21 + 16) == a1)
        goto LABEL_22;
      if (v12)
        WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
      a2 = v37;
      a1 = v22;
    }
    else
    {
      if (!v12)
        return 1;
      v17 = v12 + 2;
      if (v12 + 2 == a1)
        goto LABEL_22;
    }
    v18 = *v17;
    if ((*v17 & 1) != 0)
    {
      v35 = a1;
      v38 = a2;
      v24 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
      if ((v18 & 2) != 0
        || ((v25 = *(unsigned int *)((v18 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
          ? (v26 = (_DWORD)v25 == -1)
          : (v26 = 1),
            v26))
      {
        v27 = 2;
      }
      else if (v25 >> 28)
      {
        v32 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v32 = v24;
        *(_DWORD *)(v32 + 8) = v25;
        v27 = 1;
        v24 = v32;
      }
      else
      {
        v27 = *(_QWORD *)(v18 & 0xFFFFFFFF8);
        v24 = v25 << 36;
      }
      v18 = v24 | v27;
      a1 = v35;
      a2 = v38;
    }
    *a1 = v18;
    v10 = *a2;
    v14 = (uint64_t *)(*a2 & 0xFFFFFFFF8);
LABEL_22:
    if ((v10 & 1) != 0)
    {
      v19 = (uint64_t *)(*v14 + 16);
      if (v19 != a2)
      {
        v34 = a1;
        v23 = a2;
        if (v14)
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        a2 = v23;
        a1 = v34;
LABEL_24:
        v20 = *v19;
        if ((*v19 & 1) != 0)
        {
          v36 = a1;
          v39 = a2;
          v28 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          if ((v20 & 2) != 0
            || ((v29 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
              ? (v30 = (_DWORD)v29 == -1)
              : (v30 = 1),
                v30))
          {
            v31 = 2;
          }
          else if (v29 >> 28)
          {
            v33 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v33 = v28;
            *(_DWORD *)(v33 + 8) = v29;
            v31 = 1;
            v28 = v33;
          }
          else
          {
            v31 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
            v28 = v29 << 36;
          }
          v20 = v28 | v31;
          a1 = v36;
          a2 = v39;
        }
        *a2 = v20;
      }
    }
    else
    {
      v19 = v14 + 2;
      if (v14 + 2 != a2)
        goto LABEL_24;
    }
  }
}

void JSC::GetByStatus::computeFor(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t a9@<X8>)
{
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD **v38;
  uint64_t **v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  int i;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unsigned __int8 *v70;
  WTF *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  WTF *v76;
  int v77;
  unsigned int v78;
  WTF *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  WTF *v86;
  unsigned __int8 *v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  unint64_t *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  _OWORD *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  WTF *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  _QWORD *v124;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t *v133;
  char v134;
  uint64_t *v135;
  BOOL v136;
  unsigned int *v137;
  unsigned int v138;
  unint64_t v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int **v147;
  _DWORD *v148;
  unint64_t *v149;
  _QWORD *v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  _QWORD *v156;
  unint64_t *v157;
  _OWORD *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  _DWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t *v178;
  char *v179;
  uint64_t v180;
  JSC::ObjectPropertyConditionSet *v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  char v185;
  char *v186;
  char *v187;
  unsigned int v188;
  BOOL v189;
  int v190;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  char v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  char v255;
  uint64_t v256;
  BOOL v257;
  unsigned int *v258;
  unsigned int v259;
  uint64_t *v260;
  char v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  _QWORD *v265;
  _QWORD *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unsigned int *v272;
  unsigned int v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  char v296;
  char v297;
  char v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  _OWORD *v314;
  unint64_t v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  const JSC::GetByVariant *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _OWORD *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  BOOL v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  BOOL v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  BOOL v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  BOOL v375;
  uint64_t v376;
  BOOL v377;
  unint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  char v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  unint64_t v394;
  JSType v395;
  unint64_t v396;
  char v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int v408;
  BOOL v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned int *v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  int v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t *v456;
  unint64_t v457;
  unint64_t v458;
  int v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v472;
  BOOL v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  int v493;
  int v494;
  int v495;
  unsigned int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  uint64_t v502;
  uint64_t *v503;
  unint64_t v504;
  _QWORD **v505;
  uint64_t v506;
  uint64_t **v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v512;
  char v514;
  int v515;
  unint64_t v516;
  uint64_t v517;
  WTF *v518;
  int v519;
  unsigned int v520;
  _BYTE v521[64];
  WTF *v522;
  __int16 v523;
  _QWORD *v524;
  unint64_t v525;
  _BYTE v526[64];
  WTF *v527;
  __int16 v528;
  unint64_t v529;
  unsigned __int8 *v530;
  char v531;
  char v532;
  uint64_t v533;

  v9 = a3;
  v503 = a2;
  v533 = *MEMORY[0x1E0C80C00];
  v11 = *a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v12) = -1;
  }
  else if ((v11 & 1) != 0)
  {
    LODWORD(v12) = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v12 = v11 >> 36;
  }
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (unsigned __int8 *)(v13 + 31);
  if (__ldaxr((unsigned __int8 *)(v13 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 31);
LABEL_7:
  v16 = *(uint64_t **)(v13 + 96);
  v510 = v9;
  if (v16 && (v211 = *((unsigned int *)v16 + 3), (_DWORD)v211))
  {
    v212 = *v16;
    v213 = v211 - 1;
    v214 = v213;
    while (1)
    {
      v215 = v214;
      if (*(_DWORD *)(v212 + 8 * v214) == (_DWORD)v12)
      {
        v216 = v212 + 8 * v214;
        if (*(_BYTE *)(v216 + 4) == 1 && *(_BYTE *)(v216 + 6) == 1)
          break;
      }
      --v214;
      if (!v215)
      {
        v226 = v213;
        while (1)
        {
          v227 = v226;
          if (*(_DWORD *)(v212 + 8 * v226) == (_DWORD)v12)
          {
            v228 = v212 + 8 * v226;
            if (*(_BYTE *)(v228 + 4) == 4 && *(_BYTE *)(v228 + 6) == 1)
              goto LABEL_345;
          }
          --v226;
          if (!v227)
          {
            v508 = 0;
            goto LABEL_380;
          }
        }
      }
    }
LABEL_345:
    v508 = 1;
LABEL_380:
    v243 = v213;
    while (1)
    {
      v244 = v243;
      if (*(_DWORD *)(v212 + 8 * v243) == (_DWORD)v12)
      {
        v245 = v212 + 8 * v243;
        if (*(_BYTE *)(v245 + 4) == 1 && *(_BYTE *)(v245 + 6) == 2)
          break;
      }
      --v243;
      if (!v244)
      {
        v246 = v213;
        while (1)
        {
          v247 = v246;
          if (*(_DWORD *)(v212 + 8 * v246) == (_DWORD)v12)
          {
            v248 = v212 + 8 * v246;
            if (*(_BYTE *)(v248 + 4) == 4 && *(_BYTE *)(v248 + 6) == 2)
              goto LABEL_392;
          }
          --v246;
          if (!v247)
          {
            v17 = 0;
            goto LABEL_393;
          }
        }
      }
    }
LABEL_392:
    v17 = 2;
LABEL_393:
    v249 = v213;
    do
    {
      v250 = v249;
      if (*(_DWORD *)(v212 + 8 * v249) == (_DWORD)v12)
      {
        v251 = v212 + 8 * v249;
        if (*(_BYTE *)(v251 + 4) == 2 && *(_BYTE *)(v251 + 6) == 1)
        {
          v18 = 1;
          goto LABEL_400;
        }
      }
      --v249;
    }
    while (v250);
    v18 = 0;
LABEL_400:
    while (1)
    {
      v252 = v213;
      if (*(_DWORD *)(v212 + 8 * v213) == (_DWORD)v12)
      {
        v253 = v212 + 8 * v213;
        if (*(_BYTE *)(v253 + 4) == 2 && *(_BYTE *)(v253 + 6) == 2)
          break;
      }
      --v213;
      if (!v252)
        goto LABEL_9;
    }
    v19 = 2;
  }
  else
  {
    v17 = 0;
    v508 = 0;
    v18 = 0;
LABEL_9:
    v19 = 0;
  }
  v20 = __ldxr(v14);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v14))
LABEL_14:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v13 + 31), 0, a3, (uint64_t)a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = (unsigned __int8 *)(v21 + 31);
  if (__ldaxr((unsigned __int8 *)(v21 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 31);
LABEL_18:
  v24 = *(uint64_t **)(v21 + 96);
  v512 = a9;
  if (v24 && (v217 = *((unsigned int *)v24 + 3), (_DWORD)v217))
  {
    v218 = *v24;
    v219 = v217 - 1;
    v220 = v219;
    while (1)
    {
      v221 = v220;
      if (*(_DWORD *)(v218 + 8 * v220) == (_DWORD)v12)
      {
        v222 = v218 + 8 * v220;
        if (*(_BYTE *)(v222 + 4) == 5 && *(_BYTE *)(v222 + 6) == 1)
          break;
      }
      --v220;
      if (!v221)
      {
        v27 = 0;
        goto LABEL_346;
      }
    }
    v27 = 1;
LABEL_346:
    v229 = v219;
    while (1)
    {
      v230 = v229;
      if (*(_DWORD *)(v218 + 8 * v229) == (_DWORD)v12)
      {
        v231 = v218 + 8 * v229;
        if (*(_BYTE *)(v231 + 4) == 5 && *(_BYTE *)(v231 + 6) == 2)
          break;
      }
      --v229;
      if (!v230)
      {
        v28 = 0;
        goto LABEL_353;
      }
    }
    v28 = 1;
LABEL_353:
    v232 = v219;
    while (1)
    {
      v233 = v232;
      if (*(_DWORD *)(v218 + 8 * v232) == (_DWORD)v12)
      {
        v234 = v218 + 8 * v232;
        if (*(_BYTE *)(v234 + 4) == 6 && *(_BYTE *)(v234 + 6) == 1)
          break;
      }
      --v232;
      if (!v233)
      {
        v26 = 0;
        goto LABEL_360;
      }
    }
    v26 = 1;
LABEL_360:
    v235 = v219;
    while (1)
    {
      v236 = v235;
      if (*(_DWORD *)(v218 + 8 * v235) == (_DWORD)v12)
      {
        v237 = v218 + 8 * v235;
        if (*(_BYTE *)(v237 + 4) == 6 && *(_BYTE *)(v237 + 6) == 2)
          break;
      }
      --v235;
      if (!v236)
      {
        v29 = 0;
        goto LABEL_367;
      }
    }
    v29 = 1;
LABEL_367:
    v238 = v219;
    do
    {
      v239 = v238;
      if (*(_DWORD *)(v218 + 8 * v238) == (_DWORD)v12)
      {
        v240 = v218 + 8 * v238;
        if (*(_BYTE *)(v240 + 4) == 1 && *(_BYTE *)(v240 + 6) == 1)
        {
          v25 = 1;
          goto LABEL_374;
        }
      }
      --v238;
    }
    while (v239);
    v25 = 0;
LABEL_374:
    while (1)
    {
      v241 = v219;
      if (*(_DWORD *)(v218 + 8 * v219) == (_DWORD)v12)
      {
        v242 = v218 + 8 * v219;
        if (*(_BYTE *)(v242 + 4) == 1 && *(_BYTE *)(v242 + 6) == 2)
          break;
      }
      --v219;
      if (!v241)
        goto LABEL_20;
    }
    v30 = 2;
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
LABEL_20:
    v30 = 0;
  }
  v31 = v19 | v18;
  v32 = v508 | v17;
  v33 = __ldxr(v22);
  if (v33 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_26:
  v509 = v32 | (v31 << 8);
  if (v29)
    v34 = 2;
  else
    v34 = 0;
  if (v28)
    v35 = 2;
  else
    v35 = 0;
  v506 = v35 | v25 | v26 | v27 | v34 | v30;
  v36 = *(unsigned int *)(v510 + 12);
  v37 = v512;
  if (!(_DWORD)v36)
  {
LABEL_320:
    v210 = *a4;
    if ((*a4 & 1) != 0)
    {
      v403 = *(_QWORD *)(v210 & 0xFFFFFFFF8);
      if ((v210 & 2) != 0
        || (v404 = *(unsigned int *)((v210 & 0xFFFFFFFF8) + 8), (_DWORD)v404 == 0x3FFFFFFF)
        || (_DWORD)v404 == -1)
      {
        v405 = 2;
      }
      else
      {
        if (v404 >> 28)
        {
          v449 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v449 = v403;
          *(_DWORD *)(v449 + 8) = v404;
          v405 = 1;
          v403 = v449;
        }
        else
        {
          v405 = *(_QWORD *)(v210 & 0xFFFFFFFF8);
          v403 = v404 << 36;
        }
        v37 = v512;
      }
      v406 = v403 | v405;
      v516 = v406;
      JSC::GetByStatus::computeFor(v37, a1, v503, v506, v509, (uint64_t *)&v516, a7, a8);
      if ((v406 & 1) != 0)
      {
        v315 = v406 & 0xFFFFFFFF8;
        if ((v406 & 0xFFFFFFFF8) != 0)
LABEL_515:
          WTF::fastFree(v315, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
    else
    {
      v516 = *a4;
      JSC::GetByStatus::computeFor(v37, a1, v503, v506, v509, (uint64_t *)&v516, a7, a8);
    }
    return;
  }
  v38 = *(_QWORD ***)v510;
  v502 = *(_QWORD *)v510 + 8 * v36;
  while (1)
  {
    v505 = v38;
    v39 = (uint64_t **)*v38;
    v40 = *a4;
    if ((*a4 & 1) == 0)
    {
      v41 = *v39;
LABEL_36:
      v42 = 1;
      v43 = v40;
      goto LABEL_37;
    }
    v369 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v370 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v370 != 0x3FFFFFFF)
        ? (v371 = (_DWORD)v370 == -1)
        : (v371 = 1),
          v371))
    {
      v372 = 2;
    }
    else if (v370 >> 28)
    {
      v442 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v442 = v369;
      *(_DWORD *)(v442 + 8) = v370;
      v372 = 1;
      v369 = v442;
    }
    else
    {
      v372 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v369 = v370 << 36;
    }
    v40 = v369 | v372;
    v41 = *v39;
    if (((v369 | v372) & 1) == 0)
      goto LABEL_36;
    v373 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v374 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v374 != 0x3FFFFFFF)
        ? (v375 = (_DWORD)v374 == -1)
        : (v375 = 1),
          v375))
    {
      v376 = 2;
    }
    else if (v374 >> 28)
    {
      v443 = v40;
      v444 = *v39;
      v445 = WTF::fastMalloc((WTF *)0x10);
      v41 = v444;
      v40 = v443;
      *(_QWORD *)v445 = v373;
      *(_DWORD *)(v445 + 8) = v374;
      v376 = 1;
      v373 = v445;
    }
    else
    {
      v376 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v373 = v374 << 36;
    }
    v42 = 0;
    v43 = v373 | v376;
LABEL_37:
    v44 = (uint64_t)v39[2];
    v507 = v39;
    if (v44)
    {
      v45 = *(unsigned int *)(v44 - 8);
      v46 = v43 & 1;
      if ((v43 & 3) == 0)
      {
        v47 = 2;
        v48 = v43;
        while (1)
        {
          if ((v48 & 2) != 0)
          {
            v49 = v47 - 1;
            v260 = (uint64_t *)(v48 & 0xFFFFFFFF8);
            if ((v48 & 1) == 0)
            {
              if (!v260 || v41 == v260)
                goto LABEL_44;
              v261 = 1;
              v50 = (uint64_t)v260;
              goto LABEL_454;
            }
          }
          else
          {
            if ((v48 & 1) == 0)
            {
              v49 = v47 + (v48 >> 36);
              v50 = v48 & 0xFFFFFFFF8;
              if ((v48 & 0xFFFFFFFF8) == 0 || v41 == (uint64_t *)v50)
                goto LABEL_44;
              v261 = 1;
              v260 = (uint64_t *)v50;
              goto LABEL_454;
            }
            v260 = (uint64_t *)(v48 & 0xFFFFFFFF8);
            v49 = *(_DWORD *)((v48 & 0xFFFFFFFF8) + 8) + v47;
          }
          v50 = *v260;
          if (*v260)
            v377 = v50 == (_QWORD)v41;
          else
            v377 = 1;
          if (v377)
            goto LABEL_624;
          v261 = 0;
LABEL_454:
          v275 = *(_QWORD *)(v50 + 8);
          if ((v261 & 1) == 0 && v260)
          {
            v417 = v40;
            v418 = v41;
            v419 = v42;
            v420 = v46;
            v496 = v45;
            WTF::fastFree((unint64_t)v260, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            v45 = v496;
            v46 = v420;
            v42 = v419;
            v41 = v418;
            v40 = v417;
          }
          v276 = (~(v275 << 32) + v275) ^ ((unint64_t)(~(v275 << 32) + v275) >> 22);
          v277 = 9 * ((v276 + ~(v276 << 13)) ^ ((v276 + ~(v276 << 13)) >> 8));
          v278 = (v277 ^ (v277 >> 15)) + ~((v277 ^ (v277 >> 15)) << 27);
          v47 = v49 + ((v278 >> 31) ^ v278);
          v48 = *(_QWORD *)(v50 + 16);
          if ((v48 & 1) != 0)
          {
            v279 = v45;
            v280 = v46;
            v281 = v42;
            v282 = v41;
            v283 = v40;
            v284 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
            if ((v48 & 2) != 0
              || (v285 = *(unsigned int *)((v48 & 0xFFFFFFFF8) + 8), (_DWORD)v285 == 0x3FFFFFFF)
              || (_DWORD)v285 == -1)
            {
              v286 = 2;
            }
            else if (v285 >> 28)
            {
              v451 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v451 = v284;
              *(_DWORD *)(v451 + 8) = v285;
              v286 = 1;
              v284 = v451;
            }
            else
            {
              v286 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
              v284 = v285 << 36;
            }
            v48 = v284 | v286;
            v39 = v507;
            v40 = v283;
            v41 = v282;
            v42 = v281;
            v46 = v280;
            v45 = v279;
          }
        }
      }
      v455 = *(_DWORD *)(v44 - 8);
      v485 = v42;
      v456 = v41;
      v457 = v40;
      if ((v43 & 2) == 0)
      {
        v458 = v43;
        if ((v43 & 1) != 0)
        {
          v469 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
          v470 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8);
          if ((_DWORD)v470 == -1 || (_DWORD)v470 == 0x3FFFFFFF)
          {
            v472 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
            v469 = 2;
          }
          else if (v470 >> 28)
          {
            v472 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v472 = v469;
            *(_DWORD *)(v472 + 8) = v470;
            v469 = 1;
          }
          else
          {
            v472 = v470 << 36;
          }
          v458 = v472 | v469;
        }
        v459 = 2;
        while (1)
        {
          if ((v458 & 2) != 0)
          {
            v49 = v459 - 1;
            v260 = (uint64_t *)(v458 & 0xFFFFFFFF8);
            if ((v458 & 1) == 0)
            {
              if (!v260 || v456 == v260)
                goto LABEL_790;
              v461 = 1;
              v460 = (uint64_t)v260;
              goto LABEL_798;
            }
          }
          else
          {
            if ((v458 & 1) == 0)
            {
              v49 = v459 + (v458 >> 36);
              v460 = v458 & 0xFFFFFFFF8;
              if ((v458 & 0xFFFFFFFF8) == 0 || v456 == (uint64_t *)v460)
                goto LABEL_790;
              v461 = 1;
              v260 = (uint64_t *)v460;
              goto LABEL_798;
            }
            v260 = (uint64_t *)(v458 & 0xFFFFFFFF8);
            v49 = *(_DWORD *)((v458 & 0xFFFFFFFF8) + 8) + v459;
          }
          v460 = *v260;
          if (*v260)
            v473 = v460 == (_QWORD)v456;
          else
            v473 = 1;
          if (v473)
          {
            v39 = v507;
            v40 = v457;
            v41 = v456;
            v42 = v485;
            v46 = v43 & 1;
            LODWORD(v45) = v455;
LABEL_624:
            if (v260)
            {
              v378 = v40;
              v379 = v41;
              v380 = v42;
              v381 = v46;
              v382 = v45;
              WTF::fastFree((unint64_t)v260, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              LODWORD(v45) = v382;
              v46 = v381;
              v42 = v380;
              v41 = v379;
              v40 = v378;
            }
            goto LABEL_44;
          }
          v461 = 0;
LABEL_798:
          v462 = *(_QWORD *)(v460 + 8);
          if (!v461 && v260)
            WTF::fastFree((unint64_t)v260, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          v463 = (~(v462 << 32) + v462) ^ ((unint64_t)(~(v462 << 32) + v462) >> 22);
          v464 = 9 * ((v463 + ~(v463 << 13)) ^ ((v463 + ~(v463 << 13)) >> 8));
          v465 = (v464 ^ (v464 >> 15)) + ~((v464 ^ (v464 >> 15)) << 27);
          v459 = v49 + ((v465 >> 31) ^ v465);
          v458 = *(_QWORD *)(v460 + 16);
          if ((v458 & 1) != 0)
          {
            v466 = *(_QWORD *)(v458 & 0xFFFFFFFF8);
            if ((v458 & 2) != 0
              || (v467 = *(unsigned int *)((v458 & 0xFFFFFFFF8) + 8), (_DWORD)v467 == -1)
              || (_DWORD)v467 == 0x3FFFFFFF)
            {
              v468 = 2;
            }
            else if (v467 >> 28)
            {
              v474 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v474 = v466;
              *(_DWORD *)(v474 + 8) = v467;
              v468 = 1;
              v466 = v474;
            }
            else
            {
              v468 = *(_QWORD *)(v458 & 0xFFFFFFFF8);
              v466 = v467 << 36;
            }
            v458 = v466 | v468;
          }
        }
      }
      v49 = 0;
LABEL_790:
      v39 = v507;
      v40 = v457;
      v41 = v456;
      v42 = v485;
      v46 = v43 & 1;
      LODWORD(v45) = v455;
LABEL_44:
      for (i = 0; ; v49 = i + v53)
      {
        v52 = v43;
        if (v46)
        {
          v349 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
          if ((v43 & 2) != 0
            || ((v350 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v350 != 0x3FFFFFFF)
              ? (v351 = (_DWORD)v350 == -1)
              : (v351 = 1),
                v351))
          {
            v352 = 2;
          }
          else if (v350 >> 28)
          {
            v491 = v40;
            v435 = v41;
            v436 = v42;
            v437 = v46;
            v500 = v45;
            v438 = WTF::fastMalloc((WTF *)0x10);
            LODWORD(v45) = v500;
            v46 = v437;
            v42 = v436;
            v41 = v435;
            v40 = v491;
            *(_QWORD *)v438 = v349;
            *(_DWORD *)(v438 + 8) = v350;
            v352 = 1;
            v349 = v438;
          }
          else
          {
            v352 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
            v349 = v350 << 36;
          }
          v52 = v349 | v352;
        }
        v53 = v49 & v45;
        v54 = (unint64_t *)(v44 + (v53 << 6));
        v55 = *v54;
        if ((*v54 & 1) != 0)
        {
          v353 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
          if ((v55 & 2) != 0
            || ((v354 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v354 != 0x3FFFFFFF)
              ? (v355 = (_DWORD)v354 == -1)
              : (v355 = 1),
                v355))
          {
            v356 = 2;
          }
          else if (v354 >> 28)
          {
            v492 = v40;
            v439 = v41;
            v484 = v42;
            v440 = v46;
            v501 = v45;
            v441 = WTF::fastMalloc((WTF *)0x10);
            LODWORD(v45) = v501;
            v46 = v440;
            v42 = v484;
            v41 = v439;
            v40 = v492;
            *(_QWORD *)v441 = v353;
            *(_DWORD *)(v441 + 8) = v354;
            v356 = 1;
            v353 = v441;
          }
          else
          {
            v356 = v353;
            v353 = v354 << 36;
          }
          v55 = v353 | v356;
          v39 = v507;
        }
        if ((v52 & 2) != 0)
        {
          v64 = (v55 >> 1) & 1;
        }
        else
        {
          if ((v55 & 2) == 0)
          {
            while (1)
            {
              if ((v52 & 2) != 0)
              {
                LODWORD(v56) = -1;
              }
              else if ((v52 & 1) != 0)
              {
                LODWORD(v56) = *(_DWORD *)((v52 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v56 = v52 >> 36;
              }
              if ((v55 & 2) != 0)
              {
                LODWORD(v57) = -1;
              }
              else if ((v55 & 1) != 0)
              {
                LODWORD(v57) = *(_DWORD *)((v55 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v57 = v55 >> 36;
              }
              if ((_DWORD)v56 != (_DWORD)v57)
                goto LABEL_70;
              v58 = (uint64_t *)(v52 & 0xFFFFFFFF8);
              v59 = v52 & 0xFFFFFFFF8;
              if ((v52 & 1) != 0)
                v59 = *v58;
              v60 = (uint64_t *)(v55 & 0xFFFFFFFF8);
              v61 = v55 & 0xFFFFFFFF8;
              if ((v55 & 1) != 0)
                v61 = *v60;
              v62 = !v59 || v59 == (_QWORD)v41;
              v63 = !v62;
              if (v62 || !v61)
                break;
              if (*(_QWORD *)(v59 + 8) != *(_QWORD *)(v61 + 8))
              {
                LOBYTE(v64) = 0;
                goto LABEL_69;
              }
              if ((v52 & 1) != 0 && v58)
              {
                v488 = v40;
                v427 = v41;
                v481 = v42;
                v477 = v46;
                v497 = v45;
                WTF::fastFree((unint64_t)v58, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                LODWORD(v45) = v497;
                v46 = v477;
                v42 = v481;
                v41 = v427;
                v40 = v488;
              }
              v52 = *(_QWORD *)(v59 + 16);
              if ((v52 & 1) != 0)
              {
                v498 = v45;
                v475 = v41;
                v478 = v46;
                v482 = v42;
                v489 = v40;
                v428 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
                if ((v52 & 2) != 0
                  || (v429 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v429 == 0x3FFFFFFF)
                  || (_DWORD)v429 == -1)
                {
                  v430 = 2;
                }
                else if (v429 >> 28)
                {
                  v454 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v454 = v428;
                  *(_DWORD *)(v454 + 8) = v429;
                  v430 = 1;
                  v428 = v454;
                }
                else
                {
                  v430 = v428;
                  v428 = v429 << 36;
                }
                v52 = v428 | v430;
                v39 = v507;
                v40 = v489;
                v41 = v475;
                v46 = v478;
                v42 = v482;
                LODWORD(v45) = v498;
              }
              else
              {
                v39 = v507;
              }
              if ((v55 & 1) != 0 && v60)
              {
                v431 = v55 & 0xFFFFFFFF8;
                v490 = v40;
                v432 = v41;
                v483 = v42;
                v433 = v46;
                v499 = v45;
                WTF::fastFree(v431, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
                LODWORD(v45) = v499;
                v46 = v433;
                v42 = v483;
                v41 = v432;
                v40 = v490;
              }
              v55 = *(_QWORD *)(v61 + 16);
              if ((v55 & 1) != 0)
              {
                v493 = v45;
                v476 = v46;
                v479 = v42;
                v316 = v41;
                v317 = v40;
                v318 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
                if ((v55 & 2) != 0
                  || (v319 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v319 == 0x3FFFFFFF)
                  || (_DWORD)v319 == -1)
                {
                  v320 = 2;
                }
                else if (v319 >> 28)
                {
                  v453 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v453 = v318;
                  *(_DWORD *)(v453 + 8) = v319;
                  v320 = 1;
                  v318 = v453;
                }
                else
                {
                  v320 = v318;
                  v318 = v319 << 36;
                }
                v55 = v318 | v320;
                v39 = v507;
                v40 = v317;
                v41 = v316;
                v42 = v479;
                v46 = v476;
                LODWORD(v45) = v493;
              }
            }
            LOBYTE(v64) = v63 ^ (v61 != 0) ^ 1;
LABEL_69:
            v39 = v507;
            goto LABEL_71;
          }
LABEL_70:
          LOBYTE(v64) = 0;
        }
LABEL_71:
        if ((v55 & 1) != 0)
        {
          v357 = v55 & 0xFFFFFFFF8;
          if ((v55 & 0xFFFFFFFF8) != 0)
          {
            v486 = v40;
            v358 = v41;
            v480 = v42;
            v359 = v46;
            v494 = v45;
            WTF::fastFree(v357, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            LODWORD(v45) = v494;
            v46 = v359;
            v42 = v480;
            v41 = v358;
            v40 = v486;
          }
        }
        if ((v52 & 1) != 0)
        {
          v360 = v52 & 0xFFFFFFFF8;
          if ((v52 & 0xFFFFFFFF8) != 0)
          {
            v487 = v40;
            v361 = v41;
            v362 = v42;
            v363 = v46;
            v495 = v45;
            WTF::fastFree(v360, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            LODWORD(v45) = v495;
            v46 = v363;
            v42 = v362;
            v41 = v361;
            v40 = v487;
          }
        }
        if ((v64 & 1) != 0)
        {
          v66 = v44 + (v53 << 6);
          v44 = *(_QWORD *)(v66 + 8);
          v67 = *(_QWORD *)(v66 + 32);
          goto LABEL_79;
        }
        v65 = *v54;
        if (*v54 == 2)
        {
LABEL_117:
          v67 = 0;
          v44 = 0;
          goto LABEL_79;
        }
        if ((v65 & 2) != 0)
        {
          v295 = (_QWORD *)(v65 & 0xFFFFFFFF8);
          if ((v65 & 1) == 0)
            goto LABEL_468;
        }
        else
        {
          if ((v65 & 1) == 0)
            goto LABEL_77;
          v295 = (_QWORD *)(v65 & 0xFFFFFFFF8);
          if (*(_DWORD *)((v65 & 0xFFFFFFFF8) + 8) != -1)
            goto LABEL_77;
        }
        v295 = (_QWORD *)*v295;
LABEL_468:
        if (!v295)
          goto LABEL_117;
LABEL_77:
        ++i;
      }
    }
    v67 = 0;
    v46 = v43 & 1;
LABEL_79:
    v68 = v43 & 0xFFFFFFFF8;
    if (v46)
      v69 = v68 == 0;
    else
      v69 = 1;
    if (!v69)
    {
      v386 = v40;
      v387 = v42;
      WTF::fastFree(v68, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      LOBYTE(v42) = v387;
      v40 = v386;
    }
    v37 = v512;
    if ((v42 & 1) == 0 && (v40 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v40 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v44)
      break;
LABEL_186:
    if (v67)
    {
      v254 = (uint64_t *)(*a4 & 0xFFFFFFFF8);
      if ((*a4 & 1) != 0)
      {
        v407 = *v254;
        if ((*a4 & 2) != 0
          || ((v408 = *(_DWORD *)((*a4 & 0xFFFFFFFF8) + 8), v408 != 0x3FFFFFFF) ? (v409 = v408 == -1) : (v409 = 1),
              v409))
        {
          v410 = 2;
        }
        else if (v408 >> 28)
        {
          v450 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v450 = v407;
          *(_DWORD *)(v450 + 8) = v408;
          v410 = 1;
          v407 = v450;
        }
        else
        {
          v410 = *v254;
          v407 = 0;
        }
        v411 = v407 | v410;
        v254 = (uint64_t *)(v411 & 0xFFFFFFFF8);
        if ((v411 & 1) != 0)
        {
          v255 = 0;
          v256 = *v254;
        }
        else
        {
          v255 = 1;
          v256 = (uint64_t)v254;
        }
        v37 = v512;
        v39 = v507;
      }
      else
      {
        v255 = 1;
        v256 = *a4 & 0xFFFFFFFF8;
      }
      if (v256)
        v257 = v256 != (_QWORD)*v39;
      else
        v257 = 0;
      if ((v255 & 1) == 0 && v254)
        WTF::fastFree((unint64_t)v254, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (v257)
      {
        if (v506 >= 2)
        {
          v296 = *(_BYTE *)(v67 + 88);
          v297 = 6;
          switch(v296)
          {
            case 0:
            case 2:
            case 4:
            case 6:
              goto LABEL_547;
            case 1:
              v333 = (unint64_t)*(unsigned int *)(v67 + 12) << 6;
              break;
            case 3:
            case 5:
            case 8:
              goto LABEL_545;
            case 7:
            case 9:
              goto LABEL_471;
            default:
              __break(0xC471u);
              JUMPOUT(0x1981822A8);
          }
          while (v333)
          {
            v334 = *(_QWORD *)(*(_QWORD *)v67 - 40 + v333);
            v333 -= 64;
            if (v334)
            {
LABEL_545:
              v297 = 8;
              goto LABEL_547;
            }
          }
          v297 = 6;
LABEL_547:
          v296 = v297;
LABEL_471:
          v298 = *(_BYTE *)(v67 + 89);
          *(_QWORD *)v37 = v37 + 16;
          *(_QWORD *)(v37 + 8) = 1;
          *(_QWORD *)(v37 + 80) = 0;
          *(_BYTE *)(v37 + 88) = v296;
          *(_BYTE *)(v37 + 89) = *(_BYTE *)(v37 + 89) & 0xFC | v298 & 1;
        }
        else
        {
          WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v37, v67, a3, (uint64_t)a4, a5, a6, a7, a8);
          v258 = *(unsigned int **)(v67 + 80);
          if (v258)
          {
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 + 1, v258));
          }
          *(_QWORD *)(v37 + 80) = v258;
          *(_WORD *)(v37 + 88) = *(_WORD *)(v67 + 88);
        }
      }
      else
      {
        v288 = *a4;
        if ((*a4 & 1) != 0)
        {
          v421 = *(_QWORD *)(v288 & 0xFFFFFFFF8);
          if ((v288 & 2) != 0
            || (v422 = *(unsigned int *)((v288 & 0xFFFFFFFF8) + 8), (_DWORD)v422 == 0x3FFFFFFF)
            || (_DWORD)v422 == -1)
          {
            v423 = 2;
          }
          else if (v422 >> 28)
          {
            v452 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v452 = v421;
            *(_DWORD *)(v452 + 8) = v422;
            v423 = 1;
            v421 = v452;
          }
          else
          {
            v423 = *(_QWORD *)(v288 & 0xFFFFFFFF8);
            v421 = v422 << 36;
          }
          v424 = v421 | v423;
          v524 = (_QWORD *)v424;
          v37 = v512;
          JSC::GetByStatus::computeFor(v512, a1, v503, v506, v509, (uint64_t *)&v524, a7, a8);
          if ((v424 & 1) != 0 && (v424 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v424 & 0xFFFFFFFF8, v425, v289, v290, v291, v292, v293, v294);
        }
        else
        {
          v524 = (_QWORD *)*a4;
          JSC::GetByStatus::computeFor(v37, a1, v503, v506, v509, (uint64_t *)&v524, a7, a8);
        }
        JSC::GetByStatus::merge(v37, (_BYTE *)v67, v289, v290, v291, v292, v293, v294);
      }
      return;
    }
    v38 = v505 + 1;
    if (v505 + 1 == (_QWORD **)v502)
      goto LABEL_320;
  }
  v524 = v526;
  v525 = 1;
  v527 = 0;
  v528 &= 0xFC00u;
  v70 = (unsigned __int8 *)(v39[1] + 2);
  v532 = 0;
  v530 = v70;
  v531 = 1;
  if (__ldaxr(v70))
  {
    __clrex();
    goto LABEL_88;
  }
  if (__stxr(1u, v70))
LABEL_88:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v70);
  v532 = 1;
  v72 = (WTF *)v39[1];
  v73 = *a4;
  if ((*a4 & 1) != 0)
  {
    v383 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
    v74 = v504;
    if ((v73 & 2) != 0
      || (v384 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v384 == 0x3FFFFFFF)
      || (_DWORD)v384 == -1)
    {
      v385 = 2;
    }
    else if (v384 >> 28)
    {
      v446 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v446 = v383;
      *(_DWORD *)(v446 + 8) = v384;
      v385 = 1;
      v383 = v446;
      v74 = v504;
    }
    else
    {
      v385 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
      v383 = v384 << 36;
    }
    v73 = v383 | v385;
  }
  else
  {
    v74 = v504;
  }
  v517 = v73;
  v504 = v74 & 0xFFFFFFFFFFFF0000 | v509;
  JSC::GetByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v518, &v529, v72, v44, v504, &v517, a7, a8);
  if (HIDWORD(v525))
    WTF::VectorTypeOperations<JSC::GetByVariant>::destruct(v524, &v524[8 * (unint64_t)HIDWORD(v525)], a3, (uint64_t)a4, a5, a6, a7, a8);
  v75 = v524;
  if (v524 != (_QWORD *)v526)
  {
    if (v524)
    {
      v524 = 0;
      LODWORD(v525) = 0;
      WTF::fastFree((unint64_t)v75, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v524 = v526;
  }
  v76 = v518;
  if (v518 == (WTF *)v521)
  {
    if (!v520)
    {
LABEL_96:
      v77 = v519;
      v39 = v507;
      goto LABEL_97;
    }
    v90 = v521;
    v91 = &v521[64 * (unint64_t)v520];
    v92 = v526;
    while (2)
    {
      v93 = *((_QWORD *)v90 + 7);
      *(_QWORD *)v92 = 0;
      *((_QWORD *)v92 + 1) = 0;
      *((_DWORD *)v92 + 4) = -1;
      *(_OWORD *)(v92 + 24) = 0u;
      v94 = (unint64_t *)(v92 + 24);
      *(_OWORD *)(v92 + 40) = 0u;
      *((_QWORD *)v92 + 7) = v93;
      if (v92 != v90)
      {
        if ((*(_QWORD *)v90 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v92, v90);
        else
          *(_QWORD *)v92 = *(_QWORD *)v90 & 0xFFFFFFFFFFFFFFFDLL;
      }
      v95 = (unsigned int *)*((_QWORD *)v90 + 1);
      if (v95)
      {
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 + 1, v95));
      }
      v97 = (unsigned int *)*((_QWORD *)v92 + 1);
      *((_QWORD *)v92 + 1) = v95;
      if (v97)
      {
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          atomic_store(1u, v97);
          WTF::fastFree((unint64_t)v97, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      *((_DWORD *)v92 + 4) = *((_DWORD *)v90 + 4);
      v100 = *((_QWORD *)v90 + 5);
      *((_QWORD *)v92 + 4) = *((_QWORD *)v90 + 4);
      *((_QWORD *)v92 + 5) = v100;
      v101 = (_OWORD *)*((_QWORD *)v90 + 6);
      if (v101)
      {
        v314 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v314 = *v101;
        v102 = *((_QWORD *)v92 + 6);
        *((_QWORD *)v92 + 6) = v314;
        if (v102)
LABEL_130:
          WTF::fastFree(v102, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        v102 = *((_QWORD *)v92 + 6);
        *((_QWORD *)v92 + 6) = 0;
        if (v102)
          goto LABEL_130;
      }
      v103 = *((_QWORD *)v90 + 3);
      if (v103)
      {
        v301 = WTF::fastMalloc((WTF *)0x20);
        v302 = *(unsigned int *)(v103 + 12);
        v303 = (_QWORD *)(v301 + 16);
        *(_QWORD *)v301 = v301 + 16;
        *(_DWORD *)(v301 + 8) = 1;
        *(_DWORD *)(v301 + 12) = v302;
        if (v302 >= 2)
        {
          if (v302 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x19818239CLL);
          }
          v303 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v302));
          *(_DWORD *)(v301 + 8) = v302;
          *(_QWORD *)v301 = v303;
        }
        v304 = *(unsigned int *)(v103 + 12);
        if ((_DWORD)v304)
        {
          v321 = *(uint64_t **)v103;
          v322 = 8 * v304;
          do
          {
            v323 = *v321++;
            *v303++ = v323;
            v322 -= 8;
          }
          while (v322);
        }
        *(_DWORD *)(v301 + 24) = *(_DWORD *)(v103 + 24);
        v104 = *v94;
        *v94 = v301;
        if (v104)
        {
          v105 = *(_QWORD *)v104;
          if (v104 + 16 != *(_QWORD *)v104 && v105 != 0)
            goto LABEL_488;
LABEL_135:
          WTF::fastFree(v104, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      else
      {
        v104 = *v94;
        *v94 = 0;
        if (v104)
        {
          v105 = *(_QWORD *)v104;
          if (v104 + 16 == *(_QWORD *)v104 || !v105)
            goto LABEL_135;
LABEL_488:
          *(_QWORD *)v104 = 0;
          *(_DWORD *)(v104 + 8) = 0;
          WTF::fastFree(v105, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_135;
        }
      }
      v106 = *((_QWORD *)v90 + 6);
      *((_QWORD *)v90 + 6) = 0;
      if (v106)
        WTF::fastFree(v106, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v107 = *((_QWORD *)v90 + 3);
      *((_QWORD *)v90 + 3) = 0;
      if (v107)
      {
        v108 = *(_QWORD *)v107;
        if (v107 + 16 != *(_QWORD *)v107 && v108 != 0)
        {
          *(_QWORD *)v107 = 0;
          *(_DWORD *)(v107 + 8) = 0;
          WTF::fastFree(v108, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v107, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v110 = (unsigned int *)*((_QWORD *)v90 + 1);
      *((_QWORD *)v90 + 1) = 0;
      if (v110)
      {
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((unint64_t)v110, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      if ((*(_QWORD *)v90 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v90 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v92 += 64;
      v90 += 64;
      if (v90 == v91)
        goto LABEL_96;
      continue;
    }
  }
  v518 = (WTF *)v521;
  v524 = v76;
  v77 = v519;
  v519 = 1;
LABEL_97:
  v78 = v520;
  v520 = 0;
  v525 = __PAIR64__(v78, v77);
  v79 = v522;
  v522 = 0;
  v80 = (unsigned int *)v527;
  v527 = v79;
  if (v80)
  {
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((unint64_t)v80, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v83 = (unsigned int *)v522;
    v528 = v523;
    v522 = 0;
    if (v83)
    {
      do
      {
        v84 = __ldaxr(v83);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v83));
      if (!v85)
      {
        atomic_store(1u, v83);
        WTF::fastFree((unint64_t)v83, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    v528 = v523;
    v522 = 0;
  }
  v86 = v518;
  if (v520)
  {
    v113 = (WTF *)((char *)v518 + 64 * (unint64_t)v520);
    do
    {
      v114 = *((_QWORD *)v86 + 6);
      *((_QWORD *)v86 + 6) = 0;
      if (v114)
        WTF::fastFree(v114, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v115 = *((_QWORD *)v86 + 3);
      *((_QWORD *)v86 + 3) = 0;
      if (v115)
      {
        v116 = *(_QWORD *)v115;
        if (v115 + 16 != *(_QWORD *)v115 && v116 != 0)
        {
          *(_QWORD *)v115 = 0;
          *(_DWORD *)(v115 + 8) = 0;
          WTF::fastFree(v116, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v115, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v118 = (unsigned int *)*((_QWORD *)v86 + 1);
      *((_QWORD *)v86 + 1) = 0;
      if (v118)
      {
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
        {
          atomic_store(1u, v118);
          WTF::fastFree((unint64_t)v118, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      if ((*(_QWORD *)v86 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v86 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v86 = (WTF *)((char *)v86 + 64);
    }
    while (v86 != v113);
    v86 = v518;
  }
  if (v521 != (_BYTE *)v86 && v86 != 0)
  {
    v518 = 0;
    v519 = 0;
    WTF::fastFree((unint64_t)v86, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if ((v517 & 1) != 0 && (v517 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v517 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v532 && v531)
  {
    v88 = v530;
    v89 = __ldxr(v530);
    if (v89 == 1)
    {
      if (!__stlxr(0, v530))
        goto LABEL_175;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v88, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
LABEL_175:
  if (!(_BYTE)v528)
  {
    v121 = (unsigned int *)v527;
    v527 = 0;
    if (v121)
    {
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        atomic_store(1u, v121);
        WTF::fastFree((unint64_t)v121, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
    v124 = v524;
    if (HIDWORD(v525))
    {
      v287 = &v524[8 * (unint64_t)HIDWORD(v525)];
      do
      {
        v126 = v124[6];
        v124[6] = 0;
        if (v126)
          WTF::fastFree(v126, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v127 = v124[3];
        v124[3] = 0;
        if (v127)
        {
          v128 = *(_QWORD *)v127;
          if (v127 + 16 != *(_QWORD *)v127 && v128 != 0)
          {
            *(_QWORD *)v127 = 0;
            *(_DWORD *)(v127 + 8) = 0;
            WTF::fastFree(v128, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          WTF::fastFree(v127, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        v130 = (unsigned int *)v124[1];
        v124[1] = 0;
        if (v130)
        {
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          if (!v132)
          {
            atomic_store(1u, v130);
            WTF::fastFree((unint64_t)v130, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        if ((*v124 & 1) != 0)
          WTF::fastFree(*v124 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v124 += 8;
      }
      while (v124 != v287);
      v124 = v524;
    }
    if (v526 != (_BYTE *)v124 && v124 != 0)
    {
      v524 = 0;
      LODWORD(v525) = 0;
      WTF::fastFree((unint64_t)v124, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    goto LABEL_186;
  }
  v133 = (uint64_t *)(*a4 & 0xFFFFFFFF8);
  if ((*a4 & 1) == 0)
    goto LABEL_209;
  v388 = *v133;
  if ((*a4 & 2) != 0 || (v389 = *(_DWORD *)((*a4 & 0xFFFFFFFF8) + 8), v389 == 0x3FFFFFFF) || v389 == -1)
  {
    v390 = 2;
  }
  else if (v389 >> 28)
  {
    v447 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v447 = v388;
    *(_DWORD *)(v447 + 8) = v389;
    v390 = 1;
    v388 = v447;
  }
  else
  {
    v390 = *v133;
    v388 = 0;
  }
  v391 = v388 | v390;
  v133 = (uint64_t *)(v391 & 0xFFFFFFFF8);
  if ((v391 & 1) != 0)
  {
    v134 = 0;
    v135 = (uint64_t *)*v133;
  }
  else
  {
LABEL_209:
    v134 = 1;
    v135 = v133;
  }
  if (v135)
    v136 = v135 != *v39;
  else
    v136 = 0;
  if ((v134 & 1) == 0 && v133)
    WTF::fastFree((unint64_t)v133, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v136)
  {
    if (v506 >= 2)
    {
      v223 = v528;
      v224 = 6;
      switch((char)v528)
      {
        case 0:
        case 2:
        case 4:
        case 6:
          goto LABEL_477;
        case 1:
          v299 = (unint64_t)HIDWORD(v525) << 6;
          break;
        case 3:
        case 5:
        case 8:
          goto LABEL_475;
        case 7:
        case 9:
          goto LABEL_339;
        default:
          __break(0xC471u);
          JUMPOUT(0x198182218);
      }
      while (v299)
      {
        v300 = *(_QWORD *)((char *)v524 + v299 - 40);
        v299 -= 64;
        if (v300)
        {
LABEL_475:
          v224 = 8;
          goto LABEL_477;
        }
      }
      v224 = 6;
LABEL_477:
      v223 = v224;
LABEL_339:
      v225 = HIBYTE(v528);
      *(_QWORD *)v512 = v512 + 16;
      *(_QWORD *)(v512 + 8) = 1;
      *(_QWORD *)(v512 + 80) = 0;
      *(_BYTE *)(v512 + 88) = v223;
      *(_BYTE *)(v512 + 89) = *(_BYTE *)(v512 + 89) & 0xFC | v225 & 1;
    }
    else
    {
      WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v512, (unint64_t)&v524, a3, (uint64_t)a4, a5, a6, a7, a8);
      v137 = (unsigned int *)v527;
      if (v527)
      {
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 + 1, v137));
      }
      *(_QWORD *)(v512 + 80) = v137;
LABEL_218:
      *(_WORD *)(v37 + 88) = v528;
    }
    goto LABEL_422;
  }
  v139 = *a4;
  if ((*a4 & 1) != 0)
  {
    v399 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
    if ((v139 & 2) != 0
      || (v400 = *(unsigned int *)((v139 & 0xFFFFFFFF8) + 8), (_DWORD)v400 == 0x3FFFFFFF)
      || (_DWORD)v400 == -1)
    {
      v401 = 2;
    }
    else
    {
      if (v400 >> 28)
      {
        v448 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v448 = v399;
        *(_DWORD *)(v448 + 8) = v400;
        v401 = 1;
        v399 = v448;
      }
      else
      {
        v401 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
        v399 = v400 << 36;
      }
      v37 = v512;
    }
    v402 = v399 | v401;
    v529 = v402;
    JSC::GetByStatus::computeFor(v37, a1, v503, v506, v509, (uint64_t *)&v529, a7, a8);
    if ((v402 & 1) != 0 && (v402 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v402 & 0xFFFFFFFF8, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    v529 = *a4;
    JSC::GetByStatus::computeFor(v512, a1, v503, v506, v509, (uint64_t *)&v529, a7, a8);
  }
  if (!(_BYTE)v528)
    goto LABEL_422;
  v140 = *(unsigned __int8 *)(v37 + 88);
  if ((v140 - 1) >= 2)
  {
    switch(*(_BYTE *)(v37 + 88))
    {
      case 0:
        WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v37, (uint64_t)&v524, a3, (uint64_t)a4, a5, a6, a7, a8);
        v364 = (unsigned int *)v527;
        if (v527)
        {
          do
            v365 = __ldaxr(v364);
          while (__stlxr(v365 + 1, v364));
        }
        v366 = *(unsigned int **)(v37 + 80);
        *(_QWORD *)(v37 + 80) = v364;
        if (v366)
        {
          do
          {
            v367 = __ldaxr(v366);
            v368 = v367 - 1;
          }
          while (__stlxr(v368, v366));
          if (!v368)
          {
            atomic_store(1u, v366);
            WTF::fastFree((unint64_t)v366, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_218;
      case 3:
        if (v528 == 3)
          goto LABEL_422;
        if (v528 - 1 > 1)
          goto LABEL_741;
        JSC::GetByStatus::operator=(v512, (uint64_t)&v524, a3, (uint64_t)a4, a5, a6, a7, a8);
        break;
      case 4:
        if (v528 != 4)
          goto LABEL_741;
        v426 = *(_QWORD *)(v512 + 80);
        if (*(_QWORD *)(v426 + 8) != *((_QWORD *)v527 + 1)
          || *(_QWORD *)(v426 + 16) != *((_QWORD *)v527 + 2)
          || *(_DWORD *)(v426 + 24) != *((_DWORD *)v527 + 6))
        {
          goto LABEL_741;
        }
        goto LABEL_422;
      case 5:
        goto LABEL_227;
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_462;
      default:
        __break(0xC471u);
        JUMPOUT(0x1981820B4);
    }
    goto LABEL_422;
  }
LABEL_227:
  if (v140 != v528)
  {
LABEL_462:
    JSC::GetByStatus::merge(JSC::GetByStatus const&)::$_0::operator()(v37, (uint64_t)&v524, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_422;
  }
  if (!HIDWORD(v525))
  {
    v143 = *(_DWORD *)(v37 + 12);
LABEL_421:
    if (*(_DWORD *)(v37 + 8) > v143)
    {
      v312 = *(char **)v37;
      v313 = *(char **)v37;
      if (v143)
      {
        if (v143 == 1)
        {
          a3 = v37 + 16;
          *(_QWORD *)v37 = v37 + 16;
          *(_DWORD *)(v37 + 8) = 1;
        }
        else
        {
          if (v143 >> 26)
          {
            __break(0xC471u);
            JUMPOUT(0x198182450);
          }
          a3 = WTF::fastMalloc((WTF *)((unint64_t)v143 << 6));
          *(_DWORD *)(v37 + 8) = v143;
          *(_QWORD *)v37 = a3;
        }
        v313 = v312;
        if ((char *)a3 != v312)
        {
          WTF::VectorTypeOperations<JSC::GetByVariant>::move(v312, &v312[64 * (unint64_t)v143], a3, (uint64_t)a4, a5, a6, a7, a8);
          v313 = *(char **)v37;
        }
      }
      if ((char *)(v37 + 16) != v312 && v312)
      {
        if (v313 == v312)
        {
          *(_QWORD *)v37 = 0;
          *(_DWORD *)(v37 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v312, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        v313 = *(char **)v37;
      }
      if (!v313)
      {
        *(_QWORD *)v37 = v37 + 16;
        *(_DWORD *)(v37 + 8) = 1;
      }
    }
    goto LABEL_422;
  }
  v141 = v524;
  v142 = &v524[8 * (unint64_t)HIDWORD(v525)];
  v143 = *(_DWORD *)(v37 + 12);
  while (2)
  {
    if (!v143)
    {
      v144 = 0;
LABEL_232:
      if (v144 == *(_DWORD *)(v37 + 8))
      {
        v326 = (const JSC::GetByVariant *)WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v144 + 1, (unint64_t)v141, (uint64_t)a4, a5, a6, a7, a8);
        JSC::GetByVariant::GetByVariant((JSC::GetByVariant *)(*(_QWORD *)v37 + ((unint64_t)*(unsigned int *)(v37 + 12) << 6)), v326, v327, v328, v329, v330, v331, v332);
      }
      else
      {
        v145 = *(_QWORD *)v37 + (v144 << 6);
        v146 = v141[7];
        *(_QWORD *)(v145 + 8) = 0;
        v147 = (unsigned int **)(v145 + 8);
        *(_DWORD *)(v145 + 16) = -1;
        v148 = (_DWORD *)(v145 + 16);
        *(_QWORD *)v145 = 0;
        *(_OWORD *)(v145 + 24) = 0u;
        v149 = (unint64_t *)(v145 + 24);
        *(_OWORD *)(v145 + 40) = 0u;
        v150 = (_QWORD *)(v145 + 40);
        *(_QWORD *)(v145 + 56) = v146;
        *(_QWORD *)(v145 + 56) = v141[7];
        if ((_QWORD *)v145 != v141)
        {
          if ((*v141 & 1) != 0)
            WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v145, v141);
          else
            *(_QWORD *)v145 = *v141 & 0xFFFFFFFFFFFFFFFDLL;
        }
        v151 = (unsigned int *)v141[1];
        if (v151)
        {
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 + 1, v151));
        }
        v153 = *v147;
        *v147 = v151;
        if (v153)
        {
          do
          {
            v154 = __ldaxr(v153);
            v155 = v154 - 1;
          }
          while (__stlxr(v155, v153));
          if (!v155)
          {
            atomic_store(1u, v153);
            WTF::fastFree((unint64_t)v153, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        v156 = (_QWORD *)(v145 + 32);
        v157 = (unint64_t *)(v145 + 48);
        *v148 = *((_DWORD *)v141 + 4);
        *v156 = v141[4];
        *v150 = v141[5];
        v158 = (_OWORD *)v141[6];
        if (v158)
        {
          v345 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
          *v345 = *v158;
          v159 = *v157;
          *v157 = (unint64_t)v345;
          if (v159)
LABEL_244:
            WTF::fastFree(v159, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        else
        {
          v159 = *v157;
          *v157 = 0;
          if (v159)
            goto LABEL_244;
        }
        v160 = v141[3];
        if (v160)
        {
          v335 = WTF::fastMalloc((WTF *)0x20);
          v336 = *(unsigned int *)(v160 + 12);
          v337 = (_QWORD *)(v335 + 16);
          *(_QWORD *)v335 = v335 + 16;
          *(_DWORD *)(v335 + 8) = 1;
          *(_DWORD *)(v335 + 12) = v336;
          if (v336 >= 2)
          {
            if (v336 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1981823C8);
            }
            v337 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v336));
            *(_DWORD *)(v335 + 8) = v336;
            *(_QWORD *)v335 = v337;
          }
          v338 = *(unsigned int *)(v160 + 12);
          if ((_DWORD)v338)
          {
            v346 = *(uint64_t **)v160;
            v347 = 8 * v338;
            do
            {
              v348 = *v346++;
              *v337++ = v348;
              v347 -= 8;
            }
            while (v347);
          }
          *(_DWORD *)(v335 + 24) = *(_DWORD *)(v160 + 24);
          v161 = *v149;
          *v149 = v335;
          v37 = v512;
          if (v161)
          {
            v162 = *(_QWORD *)v161;
            if (v161 + 16 != *(_QWORD *)v161 && v162 != 0)
              goto LABEL_556;
LABEL_249:
            WTF::fastFree(v161, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
        }
        else
        {
          v161 = *v149;
          *v149 = 0;
          v37 = v512;
          if (v161)
          {
            v162 = *(_QWORD *)v161;
            if (v161 + 16 == *(_QWORD *)v161 || !v162)
              goto LABEL_249;
LABEL_556:
            *(_QWORD *)v161 = 0;
            *(_DWORD *)(v161 + 8) = 0;
            WTF::fastFree(v162, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_249;
          }
        }
      }
      v143 = *(_DWORD *)(v37 + 12) + 1;
      *(_DWORD *)(v37 + 12) = v143;
LABEL_251:
      v141 += 8;
      v37 = v512;
      if (v141 == v142)
        goto LABEL_421;
      continue;
    }
    break;
  }
  v163 = 0;
  while (2)
  {
    v164 = *(char **)v37;
    v165 = (uint64_t *)(*(_QWORD *)v37 + (v163 << 6));
    v167 = v165 + 7;
    v166 = v165[7];
    v168 = v141[7];
    if ((v166 != 0) != (v168 != 0))
      goto LABEL_294;
    if (v166)
    {
      if ((v166 & 1) != 0)
        v169 = v166 & 0xFFFFFFFFFFFFFFFELL;
      else
        v169 = *(_QWORD *)(v166 + 8);
      if (v168)
      {
        if ((v168 & 1) != 0)
          v168 &= ~1uLL;
        else
          v168 = *(_QWORD *)(v168 + 8);
      }
      if (v169 != v168)
        goto LABEL_294;
    }
    v170 = &v164[64 * v163];
    v171 = v170 + 16;
    if (*((_DWORD *)v170 + 4) != *((_DWORD *)v141 + 4))
      goto LABEL_294;
    v173 = *((_QWORD *)v170 + 3);
    v172 = (uint64_t *)(v170 + 24);
    v174 = v141[3];
    if (!v173)
    {
      if (!v174)
        goto LABEL_265;
      goto LABEL_294;
    }
    if (!v174)
      goto LABEL_294;
LABEL_265:
    v175 = *(_QWORD *)&v164[64 * v163 + 32];
    if (v175 == v141[4])
    {
      if (!v175)
        goto LABEL_267;
      v392 = *(_QWORD *)(v175 + 24);
      if ((v392 & 1) != 0)
        v392 = *(_QWORD *)((v392 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v392 + 5) == 8)
      {
        v412 = *(_QWORD *)(v392 + 8);
        v413 = (unsigned int *)(v412 + 8);
        do
          v414 = __ldaxr(v413);
        while (__stlxr(v414 + 1, v413));
        v515 = *(unsigned __int8 *)(v412 + 14);
        do
        {
          v415 = __ldaxr(v413);
          v416 = v415 - 1;
        }
        while (__stlxr(v416, v413));
        if (!v416)
        {
          atomic_store(1u, (unsigned int *)(v412 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v412 + 32))(v412);
        }
        v393 = v515;
      }
      else
      {
        v393 = *(unsigned __int8 *)(v392 + 64);
      }
      if (v393 != 152)
        goto LABEL_267;
      v394 = *v165 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v165 & 1) != 0)
        v394 = *(_QWORD *)(v394 + 8);
      v514 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v394 + 9), (JSType)a2);
      v396 = *v141 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*v141 & 1) != 0)
        v396 = *(_QWORD *)(v396 + 8);
      v397 = JSC::typedArrayType((JSC *)*(unsigned __int8 *)(v396 + 9), v395);
      v398 = (v514 - 4) > 7u ? 0 : dword_199153064[(char)(v514 - 4)];
      v434 = (v397 - 4) > 7u ? 0 : dword_199153064[(char)(v397 - 4)];
      if (v398 == v434)
      {
LABEL_267:
        v176 = &v164[64 * v163];
        if (*((_QWORD *)v176 + 5) == v141[5])
        {
          v177 = (uint64_t *)*((_QWORD *)v176 + 6);
          v178 = (uint64_t *)v141[6];
          if (v177)
          {
            if (!v178)
              goto LABEL_294;
            v341 = *v177;
            v340 = v177[1];
            v343 = *v178;
            v342 = v178[1];
            if (v341 != v343 || v340 != v342)
              goto LABEL_294;
          }
          else if (v178)
          {
            goto LABEL_294;
          }
          a2 = v141 + 1;
          v179 = &v164[64 * v163];
          v182 = *((_QWORD *)v179 + 1);
          v181 = (JSC::ObjectPropertyConditionSet *)(v179 + 8);
          v180 = v182;
          if ((v182 == 0) != (v141[1] == 0))
            goto LABEL_294;
          if (!v180)
            goto LABEL_296;
          JSC::ObjectPropertyConditionSet::mergedWith(v181, (unint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v518);
          v183 = (unsigned int *)v518;
          if (v518)
          {
            v184 = *((_DWORD *)v518 + 1);
            if (!v184)
              goto LABEL_528;
            if (*v171 != -1)
            {
              v185 = 0;
              v186 = (char *)v518 + 8;
              v187 = (char *)v518 + 24 * v184 + 8;
              do
              {
                while (1)
                {
                  v188 = v186[14];
                  v189 = v188 > 6;
                  v190 = (1 << v188) & 0x63;
                  if (v189 || v190 == 0)
                    break;
                  if ((v185 & 1) != 0)
                    goto LABEL_528;
                  v186 += 24;
                  v185 = 1;
                  if (v186 == v187)
                    goto LABEL_285;
                }
                v186 += 24;
              }
              while (v186 != v187);
              if ((v185 & 1) == 0)
              {
LABEL_528:
                v195 = 0;
                goto LABEL_290;
              }
            }
            do
LABEL_285:
              v192 = __ldaxr(v183);
            while (__stlxr(v192 + 1, v183));
          }
          else if (*v171 != -1)
          {
            goto LABEL_294;
          }
          v193 = *(unsigned int **)v181;
          *(_QWORD *)v181 = v183;
          if (v193)
          {
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            v195 = 1;
            if (v194 == 1)
            {
              atomic_store(1u, v193);
              WTF::fastFree((unint64_t)v193, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            }
          }
          else
          {
            v195 = 1;
          }
LABEL_290:
          v196 = (unsigned int *)v518;
          v518 = 0;
          if (!v196)
            goto LABEL_293;
          do
          {
            v197 = __ldaxr(v196);
            v198 = v197 - 1;
          }
          while (__stlxr(v198, v196));
          if (!v198)
          {
            atomic_store(1u, v196);
            WTF::fastFree((unint64_t)v196, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
            if ((v195 & 1) != 0)
            {
LABEL_296:
              v199 = *v141;
              if ((*v141 & 1) != 0)
              {
                WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v165, v141);
                v201 = v512;
              }
              else
              {
                v200 = v199 & 0xFFFFFFFFFFFFFFFCLL;
                v201 = v512;
                if ((v199 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                {
                  v202 = *v165;
                  if ((*v165 & 1) != 0)
                  {
                    WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v165, v200);
                  }
                  else if ((v202 & 0xFFFFFFFFFFFFFFFCLL) != v200)
                  {
                    if ((v202 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                    {
                      v324 = WTF::fastMalloc((WTF *)0x28);
                      *(_QWORD *)v324 = 0x400000002;
                      v325 = *v165;
                      *(_QWORD *)(v324 + 8) = *v165 & 0xFFFFFFFFFFFFFFFCLL;
                      *(_QWORD *)(v324 + 16) = v200;
                      v203 = v325 & 2 | v324 | 1;
                    }
                    else
                    {
                      v203 = *v165 & 2 | v200;
                    }
                    *v165 = v203;
                  }
                }
              }
              if (*v172)
                JSC::CallLinkStatus::merge(*v172, v141[3], a3, (uint64_t)a4, a5, a6, a7, a8);
              v143 = *(_DWORD *)(v201 + 12);
              if (v143)
              {
                v204 = 0;
                v205 = 0;
                while (1)
                {
                  if (v163 != v205)
                  {
                    v206 = (uint64_t *)(*(_QWORD *)v512 + v204);
                    v207 = v206[7];
                    v208 = *v167;
                    if ((v207 != 0) != (*v167 != 0))
                      goto LABEL_741;
                    if (!v207)
                      goto LABEL_318;
                    if ((v207 & 1) != 0)
                      v209 = v207 & 0xFFFFFFFFFFFFFFFELL;
                    else
                      v209 = *(_QWORD *)(v207 + 8);
                    if (v208)
                    {
                      if ((v208 & 1) != 0)
                        v208 &= ~1uLL;
                      else
                        v208 = *(_QWORD *)(v208 + 8);
                    }
                    if (v209 == v208)
                    {
LABEL_318:
                      if (WTF::TinyPtrSet<JSC::Structure *>::overlaps(v206, v165))
                        goto LABEL_741;
                      v143 = *(_DWORD *)(v512 + 12);
                    }
                  }
                  ++v205;
                  v204 += 64;
                  if (v205 >= v143)
                    goto LABEL_251;
                }
              }
              goto LABEL_251;
            }
          }
          else
          {
LABEL_293:
            if (v195)
              goto LABEL_296;
          }
        }
      }
    }
LABEL_294:
    ++v163;
    v37 = v512;
    v144 = *(unsigned int *)(v512 + 12);
    if (v163 < v144)
      continue;
    break;
  }
  if (!*(_DWORD *)(v512 + 12))
    goto LABEL_232;
  v306 = 0;
  v307 = *(_QWORD *)v512;
  v308 = 56;
  while (1)
  {
    v309 = *(_QWORD *)(v307 + v308);
    v310 = v141[7];
    if ((v309 != 0) != (v310 != 0))
      break;
    v37 = v512;
    if (!v309)
      goto LABEL_499;
    if ((v309 & 1) != 0)
      v311 = v309 & 0xFFFFFFFFFFFFFFFELL;
    else
      v311 = *(_QWORD *)(v309 + 8);
    if (v310)
    {
      if ((v310 & 1) != 0)
        v310 &= ~1uLL;
      else
        v310 = *(_QWORD *)(v310 + 8);
    }
    if (v311 == v310)
    {
LABEL_499:
      if (WTF::TinyPtrSet<JSC::Structure *>::overlaps((uint64_t *)(v307 + v308 - 56), v141))
        break;
      v37 = v512;
      v307 = *(_QWORD *)v512;
      v144 = *(unsigned int *)(v512 + 12);
    }
    ++v306;
    v308 += 64;
    if (v306 >= v144)
      goto LABEL_232;
  }
LABEL_741:
  JSC::GetByStatus::merge(JSC::GetByStatus const&)::$_0::operator()(v512, (uint64_t)&v524, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_422:
  v262 = (unsigned int *)v527;
  v527 = 0;
  if (v262)
  {
    do
    {
      v263 = __ldaxr(v262);
      v264 = v263 - 1;
    }
    while (__stlxr(v264, v262));
    if (!v264)
    {
      atomic_store(1u, v262);
      WTF::fastFree((unint64_t)v262, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  v265 = v524;
  if (HIDWORD(v525))
  {
    v267 = &v524[8 * (unint64_t)HIDWORD(v525)];
    do
    {
      v268 = v265[6];
      v265[6] = 0;
      if (v268)
        WTF::fastFree(v268, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v269 = v265[3];
      v265[3] = 0;
      if (v269)
      {
        v270 = *(_QWORD *)v269;
        if (v269 + 16 != *(_QWORD *)v269 && v270 != 0)
        {
          *(_QWORD *)v269 = 0;
          *(_DWORD *)(v269 + 8) = 0;
          WTF::fastFree(v270, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v269, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      v272 = (unsigned int *)v265[1];
      v265[1] = 0;
      if (v272)
      {
        do
        {
          v273 = __ldaxr(v272);
          v274 = v273 - 1;
        }
        while (__stlxr(v274, v272));
        if (!v274)
        {
          atomic_store(1u, v272);
          WTF::fastFree((unint64_t)v272, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
      if ((*v265 & 1) != 0)
        WTF::fastFree(*v265 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      v265 += 8;
    }
    while (v265 != v267);
    v265 = v524;
  }
  if (v526 != (_BYTE *)v265 && v265 != 0)
  {
    v524 = 0;
    LODWORD(v525) = 0;
    v315 = (unint64_t)v265;
    goto LABEL_515;
  }
}

void JSC::ICStatusContext::get(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  JSC::InlineCallFrame *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const JSC::CodeOrigin *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v10 = *(JSC::InlineCallFrame **)a1;
  v11 = *a2;
  if ((*a2 & 1) != 0)
  {
    v26 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v27 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v27 != 0x3FFFFFFF)
        ? (v28 = (_DWORD)v27 == -1)
        : (v28 = 1),
          v28))
    {
      v29 = 2;
    }
    else if (v27 >> 28)
    {
      v30 = a1;
      v31 = WTF::fastMalloc((WTF *)0x10);
      a1 = v30;
      *(_QWORD *)v31 = v26;
      *(_DWORD *)(v31 + 8) = v27;
      v29 = 1;
      v26 = v31;
    }
    else
    {
      v29 = v26;
      v26 = v27 << 36;
    }
    v11 = v26 | v29;
  }
  v32[0] = v11;
  v32[1] = v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)v32, v10, a3, a4, a5, a6, a7, a8) & v13;
    v15 = (const JSC::CodeOrigin *)(v12 + (v14 << 6));
    if ((JSC::CodeOrigin::isApproximatelyEqualTo((JSC::CodeOrigin *)v32, v15, v10, v16, v17, v18, v19, v20) & 1) == 0)
    {
      v21 = 1;
      do
      {
        v22 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 == 2)
          goto LABEL_14;
        if ((v22 & 2) != 0)
        {
          v25 = (_QWORD *)(v22 & 0xFFFFFFFF8);
          if ((v22 & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          if ((v22 & 1) == 0)
            goto LABEL_8;
          v25 = (_QWORD *)(v22 & 0xFFFFFFFF8);
          if (*(_DWORD *)((v22 & 0xFFFFFFFF8) + 8) != -1)
            goto LABEL_8;
        }
        v25 = (_QWORD *)*v25;
LABEL_13:
        if (!v25)
          goto LABEL_14;
LABEL_8:
        v14 = ((_DWORD)v14 + v21) & v13;
        v15 = (const JSC::CodeOrigin *)(v12 + (v14 << 6));
        ++v21;
      }
      while ((JSC::CodeOrigin::isApproximatelyEqualTo((JSC::CodeOrigin *)v32, v15, v10, a4, a5, a6, a7, a8) & 1) == 0);
    }
    v23 = v12 + (v14 << 6);
    v24 = *(_OWORD *)(v23 + 24);
    *(_OWORD *)a9 = *(_OWORD *)(v23 + 8);
    *(_OWORD *)(a9 + 16) = v24;
    *(_OWORD *)(a9 + 32) = *(_OWORD *)(v23 + 40);
    *(_QWORD *)(a9 + 48) = *(_QWORD *)(v23 + 56);
  }
  else
  {
LABEL_14:
    *(_QWORD *)(a9 + 48) = 0;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
  }
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::GetByStatus::computeFor(unint64_t *a1@<X0>, uint64_t a2@<X1>, WTF *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  __int16 v19;
  int Concurrently;
  int v21;
  char appended;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  char v34;
  unsigned int *v35;
  uint64_t v36;
  char *v37;
  WTF *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  WTF *v47;
  int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[64];
  WTF *v56;
  __int16 v57;

  v10 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    *(_QWORD *)a9 = a9 + 16;
    *(_QWORD *)(a9 + 8) = 1;
    *(_QWORD *)(a9 + 80) = 0;
    *(_BYTE *)(a9 + 88) = 0;
LABEL_94:
    *(_BYTE *)(a9 + 89) &= 0xFCu;
    return;
  }
  v13 = *(_BYTE **)(a2 + 8);
  v14 = *(unsigned int *)(a2 + 4);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0)
  {
    if ((_DWORD)v14)
    {
      v15 = *v13 - 48;
      if (v15 <= 9 && (v14 < 2 || *v13 != 48))
      {
        v42 = v13 + 1;
        v43 = v14 - 1;
        while (v43)
        {
          if (v15 <= 0x19999999)
          {
            v44 = *v42 - 48;
            if (v44 <= 9)
            {
              v33 = __CFADD__(v44, 10 * v15);
              v15 = v44 + 10 * v15;
              ++v42;
              --v43;
              if (!v33)
                continue;
            }
          }
          goto LABEL_5;
        }
LABEL_92:
        if (v15 != -1)
        {
          *(_QWORD *)a9 = a9 + 16;
          *(_QWORD *)(a9 + 8) = 1;
          *(_QWORD *)(a9 + 80) = 0;
          *(_BYTE *)(a9 + 88) = 6;
          goto LABEL_94;
        }
      }
    }
  }
  else if ((_DWORD)v14)
  {
    v15 = *(unsigned __int16 *)v13 - 48;
    if (v15 <= 9 && (*(_WORD *)v13 != 48 || v14 <= 1))
    {
      v30 = (unsigned __int16 *)(v13 + 2);
      v31 = v14 - 1;
      while (v31)
      {
        if (v15 <= 0x19999999)
        {
          v32 = *v30 - 48;
          if (v32 <= 9)
          {
            v33 = __CFADD__(v32, 10 * v15);
            v15 = v32 + 10 * v15;
            ++v30;
            --v31;
            if (!v33)
              continue;
          }
        }
        goto LABEL_5;
      }
      goto LABEL_92;
    }
  }
LABEL_5:
  v16 = 0;
  v53 = (WTF *)v55;
  v54 = 1;
  v56 = 0;
  v57 = 1;
  while ((v10 & 1) != 0)
  {
    v35 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16 >= *v35)
      goto LABEL_55;
    v17 = *(_QWORD *)&v35[2 * v16 + 2];
LABEL_10:
    v18 = *(_BYTE *)(v17 + 9) == 51 || (*(_BYTE *)(v17 + 10) & 8) == 0;
    if (!v18
      || (v19 = *(_WORD *)(v17 + 12), (v19 & 8) != 0)
      || (*(_DWORD *)(v17 + 16) & 3) == 2
      || (v19 & 0x10) != 0 && (v19 & 0x20) == 0)
    {
      *(_QWORD *)a9 = a9 + 16;
      *(_QWORD *)(a9 + 8) = 1;
      *(_QWORD *)(a9 + 80) = 0;
      v34 = 6;
      goto LABEL_73;
    }
    v52 = 0;
    Concurrently = JSC::Structure::getConcurrently(v17, (_DWORD *)a2, &v52, a4, a5, a6, a7, a8);
    if (Concurrently == -1)
      goto LABEL_51;
    if ((v52 & 0x10) != 0)
    {
      v34 = 8;
LABEL_52:
      *(_QWORD *)a9 = a9 + 16;
      *(_QWORD *)(a9 + 8) = 1;
      *(_QWORD *)(a9 + 80) = 0;
LABEL_73:
      *(_BYTE *)(a9 + 88) = v34;
      *(_BYTE *)(a9 + 89) &= 0xFCu;
      v39 = (unsigned int *)v56;
      v56 = 0;
      if (v39)
      {
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          WTF::fastFree((unint64_t)v39, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
LABEL_57:
      WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      return;
    }
    if ((v52 & 0x60) != 0)
      goto LABEL_51;
    v21 = Concurrently;
    v45 = v17;
    v46 = 0;
    if ((v17 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v46, &v45);
    else
      v46 = v17 & 0xFFFFFFFFFFFFFFFDLL;
    v47 = 0;
    v48 = v21;
    v49 = 0u;
    v50 = 0u;
    v51 = 0;
    appended = JSC::GetByStatus::appendVariant((uint64_t)&v53, &v46, (uint64_t)a3, a4, a5, a6, a7, a8);
    v23 = *((_QWORD *)&v50 + 1);
    *((_QWORD *)&v50 + 1) = 0;
    if (v23)
      WTF::fastFree(v23, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v24 = v49;
    *(_QWORD *)&v49 = 0;
    if (v24)
    {
      v25 = *(_QWORD *)v24;
      if (v24 + 16 != *(_QWORD *)v24 && v25)
      {
        *(_QWORD *)v24 = 0;
        *(_DWORD *)(v24 + 8) = 0;
        WTF::fastFree(v25, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v24, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    v26 = (unsigned int *)v47;
    v47 = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((unint64_t)v26, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    if ((v46 & 1) != 0)
      WTF::fastFree(v46 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((v45 & 1) != 0)
      WTF::fastFree(v45 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((appended & 1) == 0)
    {
LABEL_51:
      v34 = 6;
      goto LABEL_52;
    }
    ++v16;
    v10 = *a1;
  }
  if (v10 >= 4 && !v16)
  {
    v17 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    goto LABEL_10;
  }
LABEL_55:
  v36 = HIDWORD(v54);
  if (v54 <= HIDWORD(v54))
  {
LABEL_56:
    WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a9, &v53, (uint64_t)a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(a9 + 80) = v56;
    *(_WORD *)(a9 + 88) = v57;
    v56 = 0;
    goto LABEL_57;
  }
  v37 = (char *)v53;
  v38 = v53;
  if (!HIDWORD(v54))
    goto LABEL_65;
  if (HIDWORD(v54) == 1)
  {
    v53 = (WTF *)v55;
    LODWORD(v54) = 1;
    a3 = (WTF *)v55;
    goto LABEL_63;
  }
  if (!(HIDWORD(v54) >> 26))
  {
    a3 = (WTF *)WTF::fastMalloc((WTF *)((unint64_t)HIDWORD(v54) << 6));
    LODWORD(v54) = v36;
    v53 = a3;
LABEL_63:
    v38 = (WTF *)v37;
    if (a3 != (WTF *)v37)
    {
      WTF::VectorTypeOperations<JSC::GetByVariant>::move(v37, &v37[64 * v36], (uint64_t)a3, a4, a5, a6, a7, a8);
      v38 = v53;
    }
LABEL_65:
    if (v55 != v37 && v37)
    {
      if (v38 == (WTF *)v37)
      {
        v53 = 0;
        LODWORD(v54) = 0;
      }
      WTF::fastFree((unint64_t)v37, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v38 = v53;
    }
    if (!v38)
    {
      v53 = (WTF *)v55;
      LODWORD(v54) = 1;
    }
    goto LABEL_56;
  }
  __break(0xC471u);
}

void JSC::GetByStatus::merge(unint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;

  v8 = a2[88];
  if (a2[88])
  {
    v11 = *(unsigned __int8 *)(a1 + 88);
    if ((v11 - 1) >= 2)
    {
      switch(*(_BYTE *)(a1 + 88))
      {
        case 0:
          WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v25 = (unsigned int *)*((_QWORD *)a2 + 10);
          if (v25)
          {
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 + 1, v25));
          }
          v27 = *(unsigned int **)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v25;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((unint64_t)v27, v18, v19, v20, v21, v22, v23, v24);
            }
          }
          *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
          return;
        case 3:
          if (v8 == 3)
            return;
          if ((v8 - 1) > 1)
            goto LABEL_11;
          JSC::GetByStatus::operator=(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          break;
        case 4:
          if (v8 != 4)
            goto LABEL_11;
          v30 = *(_QWORD *)(a1 + 80);
          v31 = *((_QWORD *)a2 + 10);
          if (*(_QWORD *)(v30 + 8) != *(_QWORD *)(v31 + 8)
            || *(_QWORD *)(v30 + 16) != *(_QWORD *)(v31 + 16)
            || *(_DWORD *)(v30 + 24) != *(_DWORD *)(v31 + 24))
          {
            goto LABEL_11;
          }
          return;
        case 5:
          goto LABEL_3;
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_11;
        default:
          __break(0xC471u);
          JUMPOUT(0x198182E14);
      }
    }
    else
    {
LABEL_3:
      if (v11 != v8)
      {
LABEL_11:
        JSC::GetByStatus::merge(JSC::GetByStatus const&)::$_0::operator()(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      v12 = *((unsigned int *)a2 + 3);
      if ((_DWORD)v12)
      {
        v13 = *(char **)a2;
        v14 = v12 << 6;
        while ((JSC::GetByStatus::appendVariant(a1, v13, a3, a4, a5, a6, a7, a8) & 1) != 0)
        {
          v13 += 64;
          v14 -= 64;
          if (!v14)
            goto LABEL_8;
        }
        goto LABEL_11;
      }
LABEL_8:
      v15 = *(unsigned int *)(a1 + 12);
      if (*(_DWORD *)(a1 + 8) > v15)
      {
        v16 = *(char **)a1;
        v17 = *(char **)a1;
        if ((_DWORD)v15)
        {
          if ((_DWORD)v15 == 1)
          {
            a3 = a1 + 16;
            *(_QWORD *)a1 = a1 + 16;
            *(_DWORD *)(a1 + 8) = 1;
          }
          else
          {
            if (v15 >> 26)
            {
              __break(0xC471u);
              JUMPOUT(0x198182E40);
            }
            a3 = WTF::fastMalloc((WTF *)(v15 << 6));
            *(_DWORD *)(a1 + 8) = v15;
            *(_QWORD *)a1 = a3;
          }
          v17 = v16;
          if ((char *)a3 != v16)
          {
            WTF::VectorTypeOperations<JSC::GetByVariant>::move(v16, &v16[64 * v15], a3, a4, a5, a6, a7, a8);
            v17 = *(char **)a1;
          }
        }
        if ((char *)(a1 + 16) != v16 && v16)
        {
          if (v17 == v16)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
          v17 = *(char **)a1;
        }
        if (!v17)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_DWORD *)(a1 + 8) = 1;
        }
      }
    }
  }
}

unint64_t JSC::GetByStatus::operator=(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned int **)(a2 + 80);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  return a1;
}

uint64_t JSC::GetByStatus::merge(JSC::GetByStatus const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  BOOL v32;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  WTF *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE v47[64];
  WTF *v48;
  __int16 v49;

  v9 = *(unsigned __int8 *)(a1 + 88);
  if (v9 != 7 && v9 != 9)
  {
    v11 = *(unsigned __int8 *)(a2 + 88);
    if (v11 != 9 && v11 != 7)
    {
      if (v9 <= 8)
      {
        if (v9 == 1)
        {
          v34 = ((unint64_t)*(unsigned int *)(a1 + 12) << 6) - 40;
          while (v34 != -40)
          {
            v35 = *(_QWORD *)(*(_QWORD *)a1 + v34);
            v34 -= 64;
            if (v35)
              goto LABEL_62;
          }
LABEL_43:
          if (v11 <= 9)
          {
            if (v11 == 1)
            {
              v37 = ((unint64_t)*(unsigned int *)(a2 + 12) << 6) - 40;
              while (v37 != -40)
              {
                v38 = *(_QWORD *)(*(_QWORD *)a2 + v37);
                v39 = 8;
                v37 -= 64;
                if (v38)
                  goto LABEL_53;
              }
              v39 = 6;
            }
            else if (((1 << v11) & 0xD5) != 0)
            {
              v39 = 6;
            }
            else
            {
              v39 = 8;
            }
LABEL_53:
            v45 = v47;
            v46 = 1;
            v48 = 0;
            v49 = v39;
            WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, &v45, a3, a4, a5, a6, a7, a8);
            v40 = v48;
            v48 = 0;
            v41 = *(unsigned int **)(a1 + 80);
            *(_QWORD *)(a1 + 80) = v40;
            if (v41)
            {
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v41);
                WTF::fastFree((unint64_t)v41, v19, v20, v21, v22, v23, v24, v25);
              }
              v30 = (unsigned int *)v48;
              *(_WORD *)(a1 + 88) = v49;
              v48 = 0;
              if (v30)
              {
                do
                {
                  v44 = __ldaxr(v30);
                  v32 = --v44 == 0;
                }
                while (__stlxr(v44, v30));
                goto LABEL_33;
              }
              return WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v19, v20, v21, v22, v23, v24, v25);
            }
LABEL_63:
            *(_WORD *)(a1 + 88) = v49;
            v48 = 0;
            return WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v19, v20, v21, v22, v23, v24, v25);
          }
LABEL_67:
          __break(0xC471u);
          JUMPOUT(0x198183214);
        }
        v36 = 1 << v9;
        if ((v36 & 0x55) != 0)
          goto LABEL_43;
        if ((v36 & 0x128) != 0)
        {
LABEL_62:
          v39 = 8;
          goto LABEL_53;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x198183254);
    }
  }
  if (v9 > 9)
    goto LABEL_67;
  if (v9 == 1)
  {
    v13 = ((unint64_t)*(unsigned int *)(a1 + 12) << 6) - 40;
    while (v13 != -40)
    {
      v14 = *(_QWORD *)(*(_QWORD *)a1 + v13);
      v13 -= 64;
      if (v14)
        goto LABEL_60;
    }
  }
  else if (((1 << v9) & 0xD5) == 0)
  {
LABEL_60:
    v18 = 9;
    goto LABEL_27;
  }
  v15 = *(unsigned __int8 *)(a2 + 88);
  if (v15 > 9)
  {
    __break(0xC471u);
    JUMPOUT(0x198183234);
  }
  if (v15 == 1)
  {
    v16 = ((unint64_t)*(unsigned int *)(a2 + 12) << 6) - 40;
    while (v16 != -40)
    {
      v17 = *(_QWORD *)(*(_QWORD *)a2 + v16);
      v18 = 9;
      v16 -= 64;
      if (v17)
        goto LABEL_27;
    }
    v18 = 7;
  }
  else if (((1 << v15) & 0xD5) != 0)
  {
    v18 = 7;
  }
  else
  {
    v18 = 9;
  }
LABEL_27:
  v45 = v47;
  v46 = 1;
  v48 = 0;
  v49 = v18;
  WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1, &v45, a3, a4, a5, a6, a7, a8);
  v26 = v48;
  v48 = 0;
  v27 = *(unsigned int **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v26;
  if (!v27)
    goto LABEL_63;
  do
  {
    v28 = __ldaxr(v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v27));
  if (!v29)
  {
    atomic_store(1u, v27);
    WTF::fastFree((unint64_t)v27, v19, v20, v21, v22, v23, v24, v25);
  }
  v30 = (unsigned int *)v48;
  *(_WORD *)(a1 + 88) = v49;
  v48 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = --v31 == 0;
    }
    while (__stlxr(v31, v30));
LABEL_33:
    if (v32)
    {
      atomic_store(1u, v30);
      WTF::fastFree((unint64_t)v30, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  return WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v45, v19, v20, v21, v22, v23, v24, v25);
}

void JSC::GetByStatus::filter(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a1 + 88) == 1)
  {
    JSC::filterICStatusVariants<WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(a1 + 12))
      *(_BYTE *)(a1 + 88) = 0;
  }
}

void JSC::filterICStatusVariants<WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;

  v9 = *(uint64_t **)a1;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1 + (v10 << 6);
  if ((_DWORD)v10)
  {
    v13 = 0;
    v14 = *(uint64_t **)a1;
    v15 = (char *)(*(_QWORD *)a1 + (v10 << 6));
    v16 = (unint64_t)v15;
    do
    {
      WTF::TinyPtrSet<JSC::Structure *>::filter(v9, a2, a3, a4, a5, a6, a7, a8);
      if ((*v9 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      {
        v20 = (unint64_t)v9;
        if (v16 != *(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6))
        {
          if (v9 == (uint64_t *)v15)
          {
            v20 = v16;
          }
          else
          {
            WTF::VectorMover<false,JSC::GetByVariant>::moveOverlapping(v15, (char *)v9, v16, a4, a5, a6, a7, a8);
            v20 = v16 + (char *)v14 - v15;
          }
        }
        v15 = (char *)(v9 + 8);
        JSC::GetByVariant::~GetByVariant((JSC::GetByVariant *)v9, v17, a3, a4, a5, a6, a7, a8);
        ++v13;
        v16 = v20;
      }
      v9 += 8;
      v14 += 8;
    }
    while ((unint64_t)v9 < v11);
    v9 = *(uint64_t **)a1;
    v18 = *(unsigned int *)(a1 + 12);
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
    v11 = v16;
  }
  else
  {
    v18 = 0;
    v13 = 0;
    v15 = (char *)(*(_QWORD *)a1 + (v10 << 6));
  }
  v19 = (char *)&v9[8 * v18];
  if (v15 != v19)
  {
    WTF::VectorMover<false,JSC::GetByVariant>::moveOverlapping(v15, v19, v11, a4, a5, a6, a7, a8);
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v10 - v13;
}

uint64_t JSC::GetByStatus::finalize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v3 = *(unint64_t **)a1;
    v4 = (unint64_t *)(*(_QWORD *)a1 + (v2 << 6));
    do
    {
      v5 = *v3;
      if ((*v3 & 1) != 0)
        v6 = *(unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      else
        v6 = v5 > 3;
      if (v6)
      {
        v7 = 0;
        v8 = 8 * v6;
        do
        {
          v9 = *v3 & 0xFFFFFFFFFFFFFFFCLL;
          if ((*v3 & 1) != 0)
            v9 = *(_QWORD *)(v9 + v7 + 8);
          if ((v9 & 8) != 0)
          {
            if ((*(_BYTE *)(v9 - 79) & 1) == 0)
              return 0;
          }
          else if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
                 || ((*(_QWORD *)((v9 & 0xFFFFFFFFFFFFC000) + 8 * ((v9 >> 10) & 0xF) + 0x28) >> (v9 >> 4)) & 1) == 0)
          {
            return 0;
          }
          v7 += 8;
        }
        while (v8 != v7);
      }
      v10 = v3[1];
      v11 = v10 ? (unint64_t *)(v10 + 8) : 0;
      v12 = v10 ? v10 + 8 + 24 * *(unsigned int *)(v10 + 4) : 0;
      if (v11 != (unint64_t *)v12)
      {
        LOBYTE(v13) = 1;
        do
        {
          v15 = *v11;
          if ((*v11 & 8) != 0)
          {
            LODWORD(v15) = *(_BYTE *)(v15 - 79) & 1;
          }
          else if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
          {
            v15 = (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1;
          }
          else
          {
            LODWORD(v15) = 0;
          }
          if ((_BYTE)v13)
            v13 = v15;
          else
            v13 = 0;
          v16 = v11[1];
          if ((v16 & 0xFFFFFFFFFFFFFFLL) != 0 && BYTE6(v16) <= 7u && ((1 << BYTE6(v11[1])) & 0x9C) != 0)
          {
            v19 = v11[2];
            if (v19)
            {
              if ((v19 & 8) != 0)
              {
                LODWORD(v19) = *(_BYTE *)(v19 - 79) & 1;
              }
              else if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
              {
                v19 = (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1;
              }
              else
              {
                LODWORD(v19) = 0;
              }
              v13 &= v19;
              v16 = v11[1];
            }
          }
          if ((v16 & 0xFF000000000000) == 0x5000000000000)
          {
            v14 = v11[2];
            if (v14)
            {
              if ((v14 & 0xFFFE000000000002) == 0)
              {
                if ((v14 & 8) != 0)
                {
                  LODWORD(v14) = *(_BYTE *)(v14 - 79) & 1;
                }
                else if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
                {
                  v14 = (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1;
                }
                else
                {
                  LODWORD(v14) = 0;
                }
                v13 &= v14;
              }
            }
          }
          v11 += 3;
        }
        while (v11 != (unint64_t *)v12);
        if (!v13)
          return 0;
      }
      v20 = v3[3];
      if (v20)
      {
        v23 = *(unsigned int *)(v20 + 12);
        if ((_DWORD)v23)
        {
          v24 = *(unint64_t **)v20;
          for (i = 8 * v23; i; i -= 8)
          {
            v26 = *v24;
            if (*v24)
            {
              if ((v26 & 8) != 0)
              {
                if ((*(_BYTE *)(v26 - 79) & 1) == 0)
                  return 0;
              }
              else if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
                     || ((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) == 0)
              {
                return 0;
              }
            }
            ++v24;
          }
        }
      }
      v21 = v3[4];
      if (v21)
      {
        if ((v21 & 8) != 0)
        {
          if ((*(_BYTE *)(v21 - 79) & 1) == 0)
            return 0;
        }
        else if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
               || ((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFC000) + 8 * ((v21 >> 10) & 0xF) + 0x28) >> (v21 >> 4)) & 1) == 0)
        {
          return 0;
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  if (*(_BYTE *)(a1 + 88) != 4)
    return 1;
  v27 = *(_QWORD *)(a1 + 80);
  v28 = *(_QWORD *)(v27 + 8);
  if (v28)
  {
    if ((v28 & 8) != 0)
    {
      if ((*(_BYTE *)(v28 - 79) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_DWORD *)(v28 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
        || ((*(_QWORD *)((v28 & 0xFFFFFFFFFFFFC000) + 8 * ((v28 >> 10) & 0xF) + 0x28) >> (v28 >> 4)) & 1) == 0)
      {
        return 0;
      }
      v27 = *(_QWORD *)(a1 + 80);
    }
  }
  v29 = *(_QWORD *)(v27 + 16);
  if (!v29)
    return 1;
  if ((v29 & 8) != 0)
  {
    if ((*(_BYTE *)(v29 - 79) & 1) != 0)
      return 1;
  }
  else if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432)
         && ((*(_QWORD *)((v29 & 0xFFFFFFFFFFFFC000) + 8 * ((v29 >> 10) & 0xF) + 0x28) >> (v29 >> 4)) & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t JSC::GetByStatus::dump(JSC::GetByVariant **this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  unint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  char v8;
  WTF::PrintStream *v9;
  const char *v10;
  WTF::PrintStream *v11;
  JSC::GetByVariant **v13[5];
  char v14;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "(");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v5 = *((char *)this + 88);
  if (v5 <= 9)
  {
    v6 = off_1E35813E8[v5];
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%s", v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v13[0] = this;
  v13[1] = (JSC::GetByVariant **)", ";
  v13[2] = (JSC::GetByVariant **)3;
  v13[3] = (JSC::GetByVariant **)&str_56_0;
  v13[4] = (JSC::GetByVariant **)1;
  v14 = 0;
  v8 = *((_BYTE *)this + 89);
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v9, "%s", ", ");
  WTF::ListDump<WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v13, (uint64_t)v9);
  WTF::PrintStream::printf(v9, "%s", ", seenInJIT = ");
  if ((v8 & 1) != 0)
    v10 = "true";
  else
    v10 = "false";
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 32))(v9);
  WTF::PrintStream::printf(v11, "%s", v10);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v9 + 40))(v9);
  WTF::PrintStream::printf(v9, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

_QWORD *JSC::GetByVariant::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  *(_QWORD *)(a1 + 56) = a2[7];
  if ((uint64_t *)a1 != a2)
  {
    if ((*(_QWORD *)a1 & 1) != 0)
      WTF::fastFree(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v10 = *a2;
    if ((*a2 & 1) != 0)
    {
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)a1, a2);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFDLL;
      v12 = v10 | 2;
      if ((*(_BYTE *)a1 & 2) == 0)
        v12 = v11;
      *(_QWORD *)a1 = v12;
    }
  }
  v13 = (unsigned int *)a2[1];
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  v15 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v13;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  v18 = (_OWORD *)a2[6];
  if (!v18)
  {
    v19 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (!v19)
      goto LABEL_17;
    goto LABEL_16;
  }
  v28 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = *v18;
  v19 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v28;
  if (v19)
LABEL_16:
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
LABEL_17:
  v20 = a2[3];
  if (!v20)
  {
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (!v21)
      return (_QWORD *)a1;
    v22 = *(_QWORD *)v21;
    if (v21 + 16 == *(_QWORD *)v21 || !v22)
    {
LABEL_21:
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
      return (_QWORD *)a1;
    }
LABEL_31:
    *(_QWORD *)v21 = 0;
    *(_DWORD *)(v21 + 8) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_21;
  }
  v24 = WTF::fastMalloc((WTF *)0x20);
  v25 = *(unsigned int *)(v20 + 12);
  result = (_QWORD *)(v24 + 16);
  *(_QWORD *)v24 = v24 + 16;
  *(_DWORD *)(v24 + 8) = 1;
  *(_DWORD *)(v24 + 12) = v25;
  if (v25 < 2)
  {
LABEL_25:
    v26 = *(unsigned int *)(v20 + 12);
    if ((_DWORD)v26)
    {
      v29 = *(uint64_t **)v20;
      v30 = 8 * v26;
      do
      {
        v31 = *v29++;
        *result++ = v31;
        v30 -= 8;
      }
      while (v30);
    }
    *(_DWORD *)(v24 + 24) = *(_DWORD *)(v20 + 24);
    v21 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v24;
    if (!v21)
      return (_QWORD *)a1;
    v22 = *(_QWORD *)v21;
    if (v21 + 16 == *(_QWORD *)v21 || v22 == 0)
      goto LABEL_21;
    goto LABEL_31;
  }
  if (!(v25 >> 29))
  {
    v32 = v25;
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v24 + 8) = v32;
    *(_QWORD *)v24 = result;
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

JSC::GetByVariant *JSC::GetByVariant::GetByVariant(JSC::GetByVariant *this, const JSC::GetByVariant *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  JSC::GetByVariant *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v10 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 4) = -1;
  *(_OWORD *)((char *)this + 24) = 0u;
  v11 = (unint64_t *)((char *)this + 24);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = v10;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  if (this != a2)
  {
    if ((*(_QWORD *)a2 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)this, a2);
    else
      *(_QWORD *)this = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  v12 = (unsigned int *)*((_QWORD *)a2 + 1);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v12;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  v17 = (_OWORD *)*((_QWORD *)a2 + 6);
  if (!v17)
  {
    v18 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v18)
      goto LABEL_13;
    goto LABEL_12;
  }
  v27 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
  *v27 = *v17;
  v18 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v27;
  if (v18)
LABEL_12:
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
LABEL_13:
  v19 = *((_QWORD *)a2 + 3);
  if (!v19)
  {
    v20 = *v11;
    *v11 = 0;
    if (!v20)
      return this;
    v21 = *(_QWORD *)v20;
    if (v20 + 16 == *(_QWORD *)v20 || !v21)
    {
LABEL_17:
      WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      return this;
    }
LABEL_27:
    *(_QWORD *)v20 = 0;
    *(_DWORD *)(v20 + 8) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_17;
  }
  v23 = WTF::fastMalloc((WTF *)0x20);
  v24 = *(unsigned int *)(v19 + 12);
  result = (JSC::GetByVariant *)(v23 + 16);
  *(_QWORD *)v23 = v23 + 16;
  *(_DWORD *)(v23 + 8) = 1;
  *(_DWORD *)(v23 + 12) = v24;
  if (v24 < 2)
  {
LABEL_21:
    v25 = *(unsigned int *)(v19 + 12);
    if ((_DWORD)v25)
    {
      v28 = *(uint64_t **)v19;
      v29 = 8 * v25;
      do
      {
        v30 = *v28++;
        *(_QWORD *)result = v30;
        result = (JSC::GetByVariant *)((char *)result + 8);
        v29 -= 8;
      }
      while (v29);
    }
    *(_DWORD *)(v23 + 24) = *(_DWORD *)(v19 + 24);
    v20 = *v11;
    *v11 = v23;
    if (!v20)
      return this;
    v21 = *(_QWORD *)v20;
    if (v20 + 16 == *(_QWORD *)v20 || v21 == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
  if (!(v24 >> 29))
  {
    v31 = v24;
    result = (JSC::GetByVariant *)WTF::fastMalloc((WTF *)(8 * v24));
    *(_DWORD *)(v23 + 8) = v31;
    *(_QWORD *)v23 = result;
    goto LABEL_21;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::GetByVariant::dumpInContext(JSC::GetByVariant *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  unint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  int v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  _DWORD *v15;
  WTF::PrintStream *v16;
  const void *v17;
  WTF::PrintStream *v18;
  const void **v19;
  const void *v20;
  WTF::PrintStream *v21;
  const void *v22;
  WTF::PrintStream *v23;
  WTF::PrintStream *v24;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v6, "%s", "<");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "id='");
  JSC::CacheableIdentifier::dump((JSC::GetByVariant *)((char *)this + 56), v7);
  WTF::PrintStream::printf(v7, "%s", "', ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    if (!*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_3;
  }
  else if (v8 <= 3)
  {
LABEL_3:
    v9 = "empty>";
    goto LABEL_15;
  }
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  JSC::StructureSet::dumpInContext(this, v10, a3);
  WTF::PrintStream::printf(v10, "%s", ", ");
  JSC::ObjectPropertyConditionSet::dumpInContext((JSC::GetByVariant *)((char *)this + 8), v10, a3);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v11 = *((_DWORD *)this + 4);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v12, "%s", ", offset = ");
  WTF::PrintStream::printf(v12, "%d", v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v14, "%s", ", call = ");
    JSC::CallLinkStatus::dump(v13, v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v15 = (_DWORD *)*((_QWORD *)this + 4);
  if (v15)
  {
    v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v16, "%s", ", intrinsic = ");
    (*(void (**)(_DWORD *, WTF::PrintStream *))(16 * *(unsigned int *)(16 * (*v15 & 0xFFFFFFFE) + 0x4C)
                                                         + 0xB8))(v15, v16);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v17 = (const void *)*((_QWORD *)this + 5);
  if (v17)
  {
    v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v18, "%s", ", customaccessorgetter = ");
    WTF::PrintStream::printf(v18, "%p", v17);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v19 = (const void **)*((_QWORD *)this + 6);
  if (v19)
  {
    v20 = *v19;
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v21, "%s", ", domclass = ");
    WTF::PrintStream::printf(v21, "%p", v20);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v22 = *(const void **)(*((_QWORD *)this + 6) + 8);
    if (v22)
    {
      v23 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v23, "%s", ", domjit = ");
      WTF::PrintStream::printf(v23, "%p", v22);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  v9 = ">";
LABEL_15:
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v24, "%s", v9);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::GetterSetterAccessCase::create(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, unsigned int **a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, unsigned int *a10, uint64_t a11, uint64_t a12, __int128 *a13, uint64_t *a14)
{
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;

  v22 = WTF::fastMalloc((WTF *)0x58);
  v30 = v22;
  *(_DWORD *)v22 = 1;
  *(_BYTE *)(v22 + 4) = a3;
  *(_BYTE *)(v22 + 5) = 0;
  *(_DWORD *)(v22 + 8) = a5;
  *(_QWORD *)(v22 + 16) = 0;
  v31 = *a14;
  *a14 = 0;
  *(_QWORD *)(v22 + 24) = v31;
  *(_QWORD *)(v22 + 32) = a4;
  if (a6)
  {
    *(_DWORD *)(v22 + 12) = a6 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  else
  {
    *(_DWORD *)(v22 + 12) = 0;
  }
  v32 = *a7;
  if (*a7)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v34 = *(unsigned int **)(v30 + 16);
  *(_QWORD *)(v30 + 16) = v32;
  if (v34)
  {
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, v34);
      WTF::fastFree((unint64_t)v34, v23, v24, v25, v26, v27, v28, v29);
    }
    v32 = *(unsigned int **)(v30 + 16);
  }
  if (v32 && !v32[1])
  {
    __break(0xC471u);
    JUMPOUT(0x1981842B8);
  }
  if (a10)
  {
    do
      v37 = __ldaxr(a10);
    while (__stlxr(v37 + 1, a10));
  }
  *(_QWORD *)(v30 + 48) = 0;
  *(_QWORD *)(v30 + 40) = a10;
  *(_BYTE *)(v30 + 5) = a8;
  *(_BYTE *)(v30 + 80) = 0;
  *(_QWORD *)(v30 + 56) = 0;
  *(_BYTE *)(v30 + 64) = 0;
  if (a12)
  {
    *(_QWORD *)(v30 + 48) = a12;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
    }
  }
  v38 = *a13;
  *(_BYTE *)(v30 + 80) = *((_BYTE *)a13 + 16);
  *(_OWORD *)(v30 + 64) = v38;
  if (a11)
    *(_QWORD *)(v30 + 56) = a11;
  *a9 = v30;
}

void JSC::GetterSetterAccessCase::create(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unsigned int **a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  v21 = WTF::fastMalloc((WTF *)0x58);
  v29 = v21;
  *(_DWORD *)v21 = 1;
  *(_BYTE *)(v21 + 4) = a3;
  *(_BYTE *)(v21 + 5) = 0;
  *(_DWORD *)(v21 + 8) = a6;
  *(_QWORD *)(v21 + 16) = 0;
  v30 = *a8;
  *a8 = 0;
  *(_QWORD *)(v21 + 24) = v30;
  *(_QWORD *)(v21 + 32) = a5;
  if (a4)
  {
    *(_DWORD *)(v21 + 12) = a4 >> 4;
    if (a2 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
  }
  else
  {
    *(_DWORD *)(v21 + 12) = 0;
  }
  v31 = *a7;
  if (*a7)
  {
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  v33 = *(unsigned int **)(v29 + 16);
  *(_QWORD *)(v29 + 16) = v31;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((unint64_t)v33, v22, v23, v24, v25, v26, v27, v28);
    }
    v31 = *(unsigned int **)(v29 + 16);
  }
  if (v31 && !v31[1])
  {
    __break(0xC471u);
    JUMPOUT(0x198184460);
  }
  *(_QWORD *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_BYTE *)(v29 + 5) = a10;
  *(_BYTE *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_BYTE *)(v29 + 64) = 0;
  if (a12)
  {
    *(_QWORD *)(v29 + 48) = a12;
    if (a2)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
        JSC::Heap::writeBarrierSlowPath(a1 + 192, a2);
    }
  }
  if (a11)
    *(_QWORD *)(v29 + 56) = a11;
  *a9 = v29;
}

uint64_t JSC::GetterSetterAccessCase::dumpImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;

  LOBYTE(v10) = *(_BYTE *)(a1 + 5);
  v11 = a3;
  v12 = "viaGlobalProxy = ";
  v13 = &v10;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [18],BOOL>(WTF::CommaPrinter,char [18],BOOL const&)::{lambda(WTF::PrintStream&)#1}>(a2, &v11);
  v6 = *(unsigned __int8 *)(a1 + 4);
  if ((v6 - 8) < 8 || v6 == 0)
    v9 = *(_QWORD *)(a1 + 40);
  else
    v9 = 0;
  v10 = v9;
  v11 = a3;
  v12 = "additionalSet = ";
  v13 = &v10;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [17],WTF::RawPointer>(WTF::CommaPrinter,char [17],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(a2, &v11);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = a3;
  v12 = "customSlotBase = ";
  v13 = &v10;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],WTF::RawPointer>(WTF::CommaPrinter,char [13],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(a2, &v11);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = a3;
  v12 = "customAccessor = ";
  v13 = &v10;
  return WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],WTF::RawPointer>(WTF::CommaPrinter,char [13],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(a2, &v11);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,false>(uint64_t *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;

uint64_t *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,0>(uint64_t a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)a1, a2, a3);
  v11 = *((unsigned __int8 *)a4 + 5);
  v12 = *((unsigned __int8 *)a3 + 5);
  if (v11 < v12
    || (v11 == v12 ? (v13 = *((unsigned __int8 *)a4 + 4) >= *((unsigned __int8 *)a3 + 4)) : (v13 = 1), !v13))
  {
    v14 = *(_QWORD *)a3;
    v15 = *a4;
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *a3 = v15;
    *a4 = v14;
    *((_WORD *)a4 + 2) = WORD2(v14);
    if (__PAIR64__(*((unsigned __int8 *)a3 + 5), *((unsigned __int8 *)a3 + 4)) < __PAIR64__(*((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 4)))
    {
      v16 = *(_QWORD *)a2;
      v17 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v17;
      *a3 = v16;
      *((_WORD *)a3 + 2) = WORD2(v16);
      if (__PAIR64__(*((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 4)) < __PAIR64__(*(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 4)))
      {
        v18 = *(_QWORD *)a1;
        v19 = *a2;
        *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v19;
        *a2 = v18;
        *((_WORD *)a2 + 2) = WORD2(v18);
      }
    }
  }
  if (__PAIR64__(*((unsigned __int8 *)a5 + 5), *((unsigned __int8 *)a5 + 4)) < __PAIR64__(*((unsigned __int8 *)a4 + 5), *((unsigned __int8 *)a4 + 4)))
  {
    v20 = *(_QWORD *)a4;
    v21 = *a5;
    *((_WORD *)a4 + 2) = *((_WORD *)a5 + 2);
    *a4 = v21;
    *a5 = v20;
    *((_WORD *)a5 + 2) = WORD2(v20);
    if (__PAIR64__(*((unsigned __int8 *)a4 + 5), *((unsigned __int8 *)a4 + 4)) < __PAIR64__(*((unsigned __int8 *)a3 + 5), *((unsigned __int8 *)a3 + 4)))
    {
      v22 = *(_QWORD *)a3;
      v23 = *a4;
      *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
      *a3 = v23;
      *a4 = v22;
      *((_WORD *)a4 + 2) = WORD2(v22);
      if (__PAIR64__(*((unsigned __int8 *)a3 + 5), *((unsigned __int8 *)a3 + 4)) < __PAIR64__(*((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 4)))
      {
        v24 = *(_QWORD *)a2;
        v25 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v25;
        *a3 = v24;
        *((_WORD *)a3 + 2) = WORD2(v24);
        if (__PAIR64__(*((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 4)) < __PAIR64__(*(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 4)))
        {
          v26 = *(_QWORD *)a1;
          v27 = *a2;
          *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
          *(_DWORD *)a1 = v27;
          *a2 = v26;
          *((_WORD *)a2 + 2) = WORD2(v26);
        }
      }
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(unsigned __int8 *)(v4 + 13);
        v7 = *(unsigned __int8 *)(v4 + 5);
        if (v6 < v7
          || (v6 == v7 ? (v8 = *(unsigned __int8 *)(v4 + 12) >= *(unsigned __int8 *)(v4 + 4)) : (v8 = 1),
              !v8))
        {
          v9 = *(_QWORD *)(v4 + 8);
          *(_DWORD *)v5 = *(_DWORD *)v4;
          *(_WORD *)(v5 + 4) = *(_WORD *)(v4 + 4);
          v10 = result;
          if (v4 != result)
          {
            v11 = v3;
            while (1)
            {
              v12 = result + v11;
              if (__PAIR64__(*(unsigned __int8 *)(result + v11 - 3), *(unsigned __int8 *)(result + v11 - 4)) <= __PAIR64__(BYTE5(v9), BYTE4(v9)))
                break;
              *(_DWORD *)v12 = *(_DWORD *)(v12 - 8);
              *(_WORD *)(v12 + 4) = *(_WORD *)(v12 - 4);
              v11 -= 8;
              if (!v11)
              {
                v10 = result;
                goto LABEL_15;
              }
            }
            v10 = result + v11;
          }
LABEL_15:
          *(_DWORD *)v10 = v9;
          *(_BYTE *)(v10 + 4) = BYTE4(v9);
          *(_BYTE *)(v10 + 5) = BYTE5(v9);
        }
        v2 = v5 + 8;
        v3 += 8;
        v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

unsigned __int8 *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 *i;

  if (result != a2)
  {
    v2 = result + 8;
    if (result + 8 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      v6 = result;
      do
      {
        v7 = v5;
        v8 = v6[13];
        v9 = v6[5];
        if (v8 < v9 || (v8 == v9 ? (v10 = v6[12] >= v6[4]) : (v10 = 1), !v10))
        {
          v11 = *(_QWORD *)v2;
          v12 = &result[8 * v3];
          v13 = *(_DWORD *)v12;
          v14 = *((_WORD *)v12 + 2);
          v15 = ((unsigned __int16)WORD2(*(_QWORD *)v2) >> 8);
          *((_WORD *)v2 + 2) = v14;
          *(_DWORD *)v2 = v13;
          v16 = v4;
          for (i = v6; __PAIR64__(*(i - 3), *(i - 4)) > __PAIR64__(v15, BYTE4(v11)); i -= 8)
          {
            *(_DWORD *)i = *((_DWORD *)i - 2);
            *((_WORD *)i + 2) = *((_WORD *)i - 2);
            v10 = __CFADD__(v16++, 1);
            if (v10)
            {
              __break(1u);
              return result;
            }
          }
          *(_DWORD *)i = v11;
          i[4] = BYTE4(v11);
          i[5] = v15;
        }
        v6 += 8;
        v5 = v7 + 1;
        v2 = &result[8 * v7 + 8];
        --v4;
        v3 = v7;
      }
      while (v2 != a2);
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::Wide *>(uint64_t result, int *a2, uint64_t *a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;

  if ((int *)result != a2)
  {
    v4 = a2;
    v5 = result;
    v6 = (uint64_t)a2 - result;
    v7 = ((uint64_t)a2 - result) >> 3;
    if ((uint64_t)a2 - result >= 9)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8 + 1;
      v10 = (uint64_t *)(result + 8 * v8);
      do
      {
        result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(v5, v7, v10--);
        --v9;
      }
      while (v9);
    }
    if (v4 != (int *)a3)
    {
      v11 = (uint64_t *)v4;
      do
      {
        v12 = *((unsigned __int8 *)v11 + 5);
        v13 = *(unsigned __int8 *)(v5 + 5);
        if (v12 < v13
          || (v12 == v13
            ? (v14 = *((unsigned __int8 *)v11 + 4) >= *(unsigned __int8 *)(v5 + 4))
            : (v14 = 1),
              !v14))
        {
          v15 = *v11;
          v16 = *(_DWORD *)v5;
          *((_WORD *)v11 + 2) = *(_WORD *)(v5 + 4);
          *(_DWORD *)v11 = v16;
          *(_DWORD *)v5 = v15;
          *(_WORD *)(v5 + 4) = WORD2(v15);
          result = std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(v5, v7, (uint64_t *)v5);
        }
        ++v11;
      }
      while (v11 != a3);
    }
    if (v6 >= 9)
    {
      v17 = (unint64_t)v6 >> 3;
      do
      {
        v18 = 0;
        v19 = *(_QWORD *)v5;
        v20 = v5;
        do
        {
          v21 = v20;
          v20 += 8 * v18 + 8;
          v22 = 2 * v18;
          v18 = (2 * v18) | 1;
          v23 = v22 + 2;
          if (v23 < v17)
          {
            v24 = *(unsigned __int8 *)(v20 + 5);
            v25 = *(unsigned __int8 *)(v20 + 13);
            if (v24 < v25
              || ((result = *(unsigned __int8 *)(v20 + 4), v24 == v25)
                ? (v26 = result >= *(unsigned __int8 *)(v20 + 12))
                : (v26 = 1),
                  !v26))
            {
              v20 += 8;
              v18 = v23;
            }
          }
          v27 = *(_DWORD *)v20;
          *(_WORD *)(v21 + 4) = *(_WORD *)(v20 + 4);
          *(_DWORD *)v21 = v27;
        }
        while (v18 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        v4 -= 2;
        if ((int *)v20 == v4)
        {
          *(_DWORD *)v20 = v19;
          *(_WORD *)(v20 + 4) = WORD2(v19);
        }
        else
        {
          v28 = *v4;
          *(_WORD *)(v20 + 4) = *((_WORD *)v4 + 2);
          *(_DWORD *)v20 = v28;
          *((_WORD *)v4 + 2) = WORD2(v19);
          *v4 = v19;
          v29 = v20 - v5 + 8;
          if (v29 >= 9)
          {
            v30 = ((unint64_t)v29 >> 3) - 2;
            v31 = v30 >> 1;
            v32 = v5 + 8 * (v30 >> 1);
            v33 = *(unsigned __int8 *)(v32 + 5);
            v34 = *(unsigned __int8 *)(v20 + 5);
            if (v33 < v34
              || (v33 == v34
                ? (v35 = *(unsigned __int8 *)(v32 + 4) >= *(unsigned __int8 *)(v20 + 4))
                : (v35 = 1),
                  !v35))
            {
              v36 = *(_QWORD *)v20;
              v37 = ((unsigned __int16)WORD2(*(_QWORD *)v20) >> 8);
              v38 = *(_DWORD *)v32;
              *(_WORD *)(v20 + 4) = *(_WORD *)(v32 + 4);
              *(_DWORD *)v20 = v38;
              if (v30 >= 2)
              {
                while (1)
                {
                  v40 = v31 - 1;
                  v31 = (v31 - 1) >> 1;
                  v39 = v5 + 8 * v31;
                  if (__PAIR64__(*(unsigned __int8 *)(v39 + 5), *(unsigned __int8 *)(v39 + 4)) >= __PAIR64__(v37, BYTE4(v36)))break;
                  v41 = *(_DWORD *)v39;
                  *(_WORD *)(v32 + 4) = *(_WORD *)(v39 + 4);
                  *(_DWORD *)v32 = v41;
                  v32 = v5 + 8 * v31;
                  if (v40 <= 1)
                    goto LABEL_36;
                }
              }
              v39 = v32;
LABEL_36:
              *(_DWORD *)v39 = v36;
              *(_BYTE *)(v39 + 4) = BYTE4(v36);
              *(_BYTE *)(v39 + 5) = v37;
            }
          }
        }
      }
      while (v17-- > 2);
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(uint64_t *result, int *a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  v3 = *((unsigned __int8 *)a2 + 4);
  v4 = *((unsigned __int8 *)a2 + 5);
  v5 = *((unsigned __int8 *)result + 5);
  if (v4 < v5 || (v4 == v5 ? (v6 = v3 >= *((unsigned __int8 *)result + 4)) : (v6 = 1), !v6))
  {
    v13 = *((unsigned __int8 *)a3 + 5);
    if (v13 >= v4 && (v13 == v4 ? (v14 = *((unsigned __int8 *)a3 + 4) >= v3) : (v14 = 1), v14))
    {
      v15 = *result;
      v16 = *a2;
      *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
      *(_DWORD *)result = v16;
      *a2 = v15;
      *((_WORD *)a2 + 2) = WORD2(v15);
      if (__PAIR64__(*((unsigned __int8 *)a3 + 5), *((unsigned __int8 *)a3 + 4)) >= __PAIR64__(BYTE5(v15), BYTE4(v15)))
        return result;
      v11 = *(_QWORD *)a2;
      v17 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v17;
    }
    else
    {
      v11 = *result;
      v18 = *a3;
      *((_WORD *)result + 2) = *((_WORD *)a3 + 2);
      *(_DWORD *)result = v18;
    }
    a2 = a3;
    goto LABEL_24;
  }
  v7 = *((unsigned __int8 *)a3 + 5);
  if (v7 < v4 || (v7 == v4 ? (v8 = *((unsigned __int8 *)a3 + 4) >= v3) : (v8 = 1), !v8))
  {
    v9 = *(_QWORD *)a2;
    v10 = *a3;
    *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
    *a2 = v10;
    *a3 = v9;
    *((_WORD *)a3 + 2) = WORD2(v9);
    if (__PAIR64__(*((unsigned __int8 *)a2 + 5), *((unsigned __int8 *)a2 + 4)) < __PAIR64__(*((unsigned __int8 *)result + 5), *((unsigned __int8 *)result + 4)))
    {
      v11 = *result;
      v12 = *a2;
      *((_WORD *)result + 2) = *((_WORD *)a2 + 2);
      *(_DWORD *)result = v12;
LABEL_24:
      *a2 = v11;
      *((_WORD *)a2 + 2) = WORD2(v11);
    }
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &>(uint64_t *a1, int *a2)
{
  unint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int *v25;
  unsigned int v26;
  unsigned int v27;
  int v29;

  v2 = *a1;
  v3 = BYTE4(*a1);
  v4 = ((unsigned __int16)WORD2(*a1) >> 8);
  v5 = *((unsigned __int8 *)a2 - 3);
  if (v5 > v4 || ((_DWORD)v5 == v4 ? (v6 = *((unsigned __int8 *)a2 - 4) > v3) : (v6 = 0), v6))
  {
    v11 = (int *)(a1 + 1);
    do
    {
      if (v11 == a2)
        goto LABEL_33;
      v5 = (unint64_t)v11;
      v12 = *((unsigned __int8 *)v11 + 5);
      if (v12 > v4)
        break;
      v13 = *((unsigned __int8 *)v11 + 4);
      v11 += 2;
    }
    while (v12 != v4 || v13 <= v3);
  }
  else
  {
    v7 = (unint64_t)(a1 + 1);
    do
    {
      v5 = v7;
      if (v7 >= (unint64_t)a2)
        break;
      v8 = *(unsigned __int8 *)(v7 + 5);
      if (v8 > v4)
        break;
      v9 = *(unsigned __int8 *)(v7 + 4);
      v7 += 8;
    }
    while (v8 != v4 || v9 <= v3);
  }
  v11 = a2;
  if (v5 < (unint64_t)a2)
  {
    if (a2 == (int *)a1)
      goto LABEL_33;
    v15 = a2;
    while (1)
    {
      v11 = v15 - 2;
      v16 = *((unsigned __int8 *)v15 - 3);
      if (v16 <= v4)
      {
        v17 = *((unsigned __int8 *)v15 - 4);
        if (v16 != v4 || v17 <= v3)
          break;
      }
      v15 = v11;
      if (v11 == (int *)a1)
        goto LABEL_33;
    }
  }
  while (v5 < (unint64_t)v11)
  {
LABEL_35:
    v19 = *(_QWORD *)v5;
    v20 = *v11;
    *(_WORD *)(v5 + 4) = *((_WORD *)v11 + 2);
    *(_DWORD *)v5 = v20;
    *v11 = v19;
    *((_WORD *)v11 + 2) = WORD2(v19);
    v21 = v5 + 8;
    while ((int *)v21 != a2)
    {
      v5 = v21;
      v22 = *(unsigned __int8 *)(v21 + 5);
      if (v22 <= v4)
      {
        v23 = *(unsigned __int8 *)(v21 + 4);
        v21 += 8;
        if (v22 != v4 || v23 <= v3)
          continue;
      }
      if (v11 == (int *)a1)
        break;
      while (1)
      {
        v25 = v11 - 2;
        v26 = *((unsigned __int8 *)v11 - 3);
        if (v26 <= v4)
        {
          v27 = *((unsigned __int8 *)v11 - 4);
          if (v26 != v4 || v27 <= v3)
            break;
        }
        v11 = v25;
        if (v25 == (int *)a1)
          goto LABEL_33;
      }
      v11 = v25;
      if (v5 < (unint64_t)v25)
        goto LABEL_35;
      goto LABEL_53;
    }
LABEL_33:
    __break(1u);
  }
LABEL_53:
  if ((uint64_t *)(v5 - 8) != a1)
  {
    v29 = *(_DWORD *)(v5 - 8);
    *((_WORD *)a1 + 2) = *(_WORD *)(v5 - 4);
    *(_DWORD *)a1 = v29;
  }
  *(_DWORD *)(v5 - 8) = v2;
  *(_BYTE *)(v5 - 4) = v3;
  *(_BYTE *)(v5 - 3) = v4;
  return v5;
}

unint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::Wide *,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &>(uint64_t *a1, unint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v26;

  v4 = (unint64_t)(a1 + 1);
  v5 = *a1;
  if (a1 + 1 != (uint64_t *)a2)
  {
    v4 = 0;
    v2 = BYTE4(v5);
    v3 = BYTE5(v5);
    do
    {
      v6 = *((unsigned __int8 *)a1 + v4 + 13);
      if (v6 >= BYTE5(v5) && (v6 != BYTE5(v5) || *((unsigned __int8 *)a1 + v4 + 12) >= BYTE4(v5)))
        goto LABEL_10;
      v4 += 8;
    }
    while ((uint64_t *)((char *)a1 + v4 + 8) != (uint64_t *)a2);
  }
  while (1)
  {
LABEL_9:
    while (1)
    {
      __break(1u);
LABEL_10:
      v8 = (unint64_t)a1 + v4 + 8;
      v9 = a2;
      if (!v4)
        break;
      while ((uint64_t *)v9 != a1)
      {
        v4 = v9;
        v10 = *(unsigned __int8 *)(v9 - 3);
        if (v10 >= v3)
        {
          v11 = *(unsigned __int8 *)(v9 - 4);
          v9 -= 8;
          if (v10 != v3 || v11 >= v2)
            continue;
        }
        v9 = v4 - 8;
        goto LABEL_27;
      }
    }
    while (v8 < v9)
    {
      v13 = v9 - 8;
      v14 = *(unsigned __int8 *)(v9 - 3);
      if (v14 >= v3)
      {
        v15 = *(unsigned __int8 *)(v9 - 4);
        v16 = v14 != v3 || v15 >= v2;
        v9 = v13;
        if (v16)
          continue;
      }
      v9 = v13;
      break;
    }
LABEL_27:
    v17 = v8;
    if (v8 >= v9)
      break;
    v4 = v9;
LABEL_29:
    v18 = *(_QWORD *)v17;
    v19 = *(_DWORD *)v4;
    *(_WORD *)(v17 + 4) = *(_WORD *)(v4 + 4);
    *(_DWORD *)v17 = v19;
    *(_DWORD *)v4 = v18;
    *(_WORD *)(v4 + 4) = WORD2(v18);
    while (1)
    {
      v17 += 8;
      if (v17 == a2)
        break;
      v20 = *(unsigned __int8 *)(v17 + 5);
      if (v20 >= v3 && (v20 != v3 || *(unsigned __int8 *)(v17 + 4) >= v2))
      {
        while ((uint64_t *)v4 != a1)
        {
          v22 = v4;
          v23 = *(unsigned __int8 *)(v4 - 3);
          if (v23 >= v3)
          {
            v24 = *(unsigned __int8 *)(v4 - 4);
            v4 -= 8;
            if (v23 != v3 || v24 >= v2)
              continue;
          }
          v4 = v22 - 8;
          if (v17 < v22 - 8)
            goto LABEL_29;
          goto LABEL_44;
        }
        goto LABEL_9;
      }
    }
  }
LABEL_44:
  if ((uint64_t *)(v17 - 8) != a1)
  {
    v26 = *(_DWORD *)(v17 - 8);
    *((_WORD *)a1 + 2) = *(_WORD *)(v17 - 4);
    *(_DWORD *)a1 = v26;
  }
  *(_DWORD *)(v17 - 8) = v5;
  *(_BYTE *)(v17 - 4) = v2;
  *(_BYTE *)(v17 - 3) = v3;
  return v17 - 8;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(unsigned __int8 *)(a2 - 3);
      v7 = *(unsigned __int8 *)(a1 + 5);
      if (v6 < v7
        || (v6 == v7 ? (v8 = *(unsigned __int8 *)(a2 - 4) >= *(unsigned __int8 *)(a1 + 4)) : (v8 = 1), !v8))
      {
        v9 = a2 - 8;
        v10 = *(_QWORD *)a1;
        v11 = *(_DWORD *)(a2 - 8);
        *(_WORD *)(a1 + 4) = *(_WORD *)(a2 - 4);
        *(_DWORD *)a1 = v11;
        *(_DWORD *)v9 = v10;
        *(_WORD *)(v9 + 4) = WORD2(v10);
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a2 - 8));
      return 1;
    case 4:
      v24 = (_DWORD *)(a1 + 8);
      v25 = (_DWORD *)(a1 + 16);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      v26 = *(unsigned __int8 *)(a2 - 3);
      v27 = *(unsigned __int8 *)(a1 + 21);
      if (v26 >= v27)
      {
        result = 1;
        if (v26 != v27 || *(unsigned __int8 *)(a2 - 4) >= *(unsigned __int8 *)(a1 + 20))
          return result;
      }
      v28 = a2 - 8;
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_DWORD *)(a2 - 8);
      *(_WORD *)(a1 + 20) = *(_WORD *)(a2 - 4);
      *v25 = v30;
      *(_DWORD *)v28 = v29;
      *(_WORD *)(v28 + 4) = WORD2(v29);
      v31 = *(unsigned __int8 *)(a1 + 21);
      v32 = *(unsigned __int8 *)(a1 + 13);
      if (v31 >= v32)
      {
        result = 1;
        if (v31 != v32 || *(unsigned __int8 *)(a1 + 20) >= *(unsigned __int8 *)(a1 + 12))
          return result;
      }
      v33 = *(_QWORD *)(a1 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a1 + 20);
      *v24 = *v25;
      *(_DWORD *)(a1 + 16) = v33;
      *(_WORD *)(a1 + 20) = WORD2(v33);
      v34 = *(unsigned __int8 *)(a1 + 13);
      v35 = *(unsigned __int8 *)(a1 + 5);
      if (v34 >= v35)
      {
        result = 1;
        if (v34 != v35 || *(unsigned __int8 *)(a1 + 12) >= *(unsigned __int8 *)(a1 + 4))
          return result;
      }
      v36 = *(_QWORD *)a1;
      *(_DWORD *)a1 = *v24;
      *(_WORD *)(a1 + 4) = *(_WORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v36;
      *(_WORD *)(a1 + 12) = WORD2(v36);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *,0>(a1, (int *)(a1 + 8), (int *)(a1 + 16), (int *)(a1 + 24), (int *)(a2 - 8));
      return 1;
    default:
      v12 = a1 + 16;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16));
      v13 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(unsigned __int8 *)(v13 + 5);
    v17 = *(unsigned __int8 *)(v12 + 5);
    if (v16 < v17
      || (v16 == v17 ? (v18 = *(unsigned __int8 *)(v13 + 4) >= *(unsigned __int8 *)(v12 + 4)) : (v18 = 1),
          !v18))
    {
      v19 = *(_QWORD *)v13;
      v20 = ((unsigned __int16)WORD2(*(_QWORD *)v13) >> 8);
      *(_DWORD *)v13 = *(_DWORD *)v12;
      *(_WORD *)(v13 + 4) = *(_WORD *)(v12 + 4);
      v21 = a1;
      if (v12 != a1)
      {
        v22 = v14;
        while (1)
        {
          v23 = a1 + v22;
          if (__PAIR64__(*(unsigned __int8 *)(a1 + v22 + 13), *(unsigned __int8 *)(a1 + v22 + 12)) <= __PAIR64__(v20, BYTE4(v19)))
            break;
          *(_DWORD *)(v23 + 16) = *(_DWORD *)(v23 + 8);
          *(_WORD *)(v23 + 20) = *(_WORD *)(v23 + 12);
          v22 -= 8;
          if (v22 == -16)
          {
            v21 = a1;
            goto LABEL_21;
          }
        }
        v21 = a1 + v22 + 16;
      }
LABEL_21:
      *(_DWORD *)v21 = v19;
      *(_BYTE *)(v21 + 4) = BYTE4(v19);
      *(_BYTE *)(v21 + 5) = v20;
      if (++v15 == 8)
        return v13 + 8 == a2;
    }
    v12 = v13;
    v14 += 8;
    v13 += 8;
    if (v13 == a2)
      return 1;
  }
}

uint64_t std::__sift_down[abi:sn180100]<std::_ClassicAlgPolicy,JSC::ExpressionInfo::Encoder::encode(unsigned int,unsigned int,unsigned int,unsigned int,JSC::LineColumn)::$_0 &,JSC::ExpressionInfo::Encoder::Wide *>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) + 1;
      v7 = (int *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2)
      {
        v9 = *((unsigned __int8 *)v7 + 5);
        v10 = *((unsigned __int8 *)v7 + 13);
        if (v9 < v10
          || (v9 == v10
            ? (v11 = *((unsigned __int8 *)v7 + 4) >= *((unsigned __int8 *)v7 + 12))
            : (v11 = 1),
              !v11))
        {
          v7 += 2;
          v6 = v8;
        }
      }
      v12 = *((unsigned __int8 *)v7 + 5);
      v13 = *((unsigned __int8 *)a3 + 5);
      if (v12 >= v13 && (v12 != v13 || *((unsigned __int8 *)v7 + 4) >= *((unsigned __int8 *)a3 + 4)))
      {
        v15 = *a3;
        v16 = BYTE4(*a3);
        v17 = ((unsigned __int16)WORD2(*a3) >> 8);
        do
        {
          v18 = a3;
          a3 = (uint64_t *)v7;
          v19 = *v7;
          *((_WORD *)v18 + 2) = *((_WORD *)a3 + 2);
          *(_DWORD *)v18 = v19;
          if (v4 < v6)
            break;
          v20 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 8 * v6);
          v21 = v20 + 2;
          if (v21 < a2)
          {
            v22 = *((unsigned __int8 *)v7 + 5);
            v23 = *((unsigned __int8 *)v7 + 13);
            if (v22 < v23
              || (v22 == v23
                ? (v24 = *((unsigned __int8 *)v7 + 4) >= *((unsigned __int8 *)v7 + 12))
                : (v24 = 1),
                  !v24))
            {
              v7 += 2;
              v6 = v21;
            }
          }
          v25 = *((unsigned __int8 *)v7 + 5);
          if (v25 < v17)
            break;
        }
        while (v25 != v17 || *((unsigned __int8 *)v7 + 4) >= v16);
        *(_DWORD *)a3 = v15;
        *((_BYTE *)a3 + 4) = v16;
        *((_BYTE *)a3 + 5) = v17;
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v13 = *(_QWORD **)a1;
    v14 = (_QWORD *)(*(_QWORD *)a1 + (v9 << 6));
    do
    {
      v15 = v13[6];
      v13[6] = 0;
      if (v15)
        WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v16 = v13[3];
      v13[3] = 0;
      if (v16)
      {
        v17 = *(_QWORD *)v16;
        if (v16 + 16 != *(_QWORD *)v16 && v17 != 0)
        {
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v19 = (unsigned int *)v13[1];
      v13[1] = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v13 & 1) != 0)
        WTF::fastFree(*v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v13 += 8;
    }
    while (v13 != v14);
  }
  v10 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::VectorTypeOperations<JSC::GetByVariant>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[6];
      v9[6] = 0;
      if (v10)
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      v11 = v9[3];
      v9[3] = 0;
      if (v11)
      {
        v12 = *(_QWORD *)v11;
        if (v11 + 16 != *(_QWORD *)v11 && v12 != 0)
        {
          *(_QWORD *)v11 = 0;
          *(_DWORD *)(v11 + 8) = 0;
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = (unsigned int *)v9[1];
      v9[1] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v9 & 1) != 0)
        WTF::fastFree(*v9 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v9 += 8;
    }
    while (v9 != a2);
  }
}

_QWORD *WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
    WTF::VectorTypeOperations<JSC::GetByVariant>::destruct(*(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + (v10 << 6)), a3, a4, a5, a6, a7, a8);
  v12 = a1 + 16;
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    if (v11)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v12;
  }
  v13 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 != a2 + 4)
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v13;
    v15 = a2[2];
    a2[2] = 1;
    goto LABEL_7;
  }
  v14 = a2[3];
  if (!(_DWORD)v14)
  {
LABEL_6:
    v15 = a2[2];
LABEL_7:
    *(_DWORD *)(a1 + 8) = v15;
    v16 = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v16;
    return (_QWORD *)a1;
  }
  v18 = v13 + (v14 << 6);
  while (1)
  {
    v19 = *(_QWORD *)(v13 + 56);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_OWORD *)(v12 + 24) = 0u;
    v20 = (unint64_t *)(v12 + 24);
    *(_DWORD *)(v12 + 16) = -1;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_QWORD *)(v12 + 56) = v19;
    *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
    if (v12 != v13)
    {
      if ((*(_QWORD *)v13 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v12, (_QWORD *)v13);
      else
        *(_QWORD *)v12 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFDLL;
    }
    v21 = *(unsigned int **)(v13 + 8);
    if (v21)
    {
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    v23 = *(unsigned int **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v21;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    *(_DWORD *)(v12 + 16) = *(_DWORD *)(v13 + 16);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
    v26 = *(_OWORD **)(v13 + 48);
    if (!v26)
    {
      v27 = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 48) = 0;
      if (!v27)
        goto LABEL_21;
LABEL_20:
      WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_21;
    }
    v42 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    *v42 = *v26;
    v27 = *(_QWORD *)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v42;
    if (v27)
      goto LABEL_20;
LABEL_21:
    v28 = *(_QWORD *)(v13 + 24);
    if (v28)
      break;
    v29 = *v20;
    *v20 = 0;
    if (v29)
    {
      v30 = *(_QWORD *)v29;
      if (v29 + 16 == *(_QWORD *)v29 || !v30)
        goto LABEL_25;
      goto LABEL_52;
    }
LABEL_26:
    v31 = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v13 + 48) = 0;
    if (v31)
      WTF::fastFree(v31, a2, a3, a4, a5, a6, a7, a8);
    v32 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = 0;
    if (v32)
    {
      v33 = *(_QWORD *)v32;
      if (v32 + 16 != *(_QWORD *)v32 && v33 != 0)
      {
        *(_QWORD *)v32 = 0;
        *(_DWORD *)(v32 + 8) = 0;
        WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
    }
    v35 = *(unsigned int **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    if (v35)
    {
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((unint64_t)v35, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if ((*(_QWORD *)v13 & 1) != 0)
      WTF::fastFree(*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v12 += 64;
    v13 += 64;
    if (v13 == v18)
      goto LABEL_6;
  }
  v38 = WTF::fastMalloc((WTF *)0x20);
  v39 = *(unsigned int *)(v28 + 12);
  result = (_QWORD *)(v38 + 16);
  *(_QWORD *)v38 = v38 + 16;
  *(_DWORD *)(v38 + 8) = 1;
  *(_DWORD *)(v38 + 12) = v39;
  if (v39 < 2)
    goto LABEL_46;
  if (!(v39 >> 29))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v39));
    *(_DWORD *)(v38 + 8) = v39;
    *(_QWORD *)v38 = result;
LABEL_46:
    v40 = *(unsigned int *)(v28 + 12);
    if ((_DWORD)v40)
    {
      v43 = *(uint64_t **)v28;
      v44 = 8 * v40;
      do
      {
        v45 = *v43++;
        *result++ = v45;
        v44 -= 8;
      }
      while (v44);
    }
    *(_DWORD *)(v38 + 24) = *(_DWORD *)(v28 + 24);
    v29 = *v20;
    *v20 = v38;
    if (!v29)
      goto LABEL_26;
    v30 = *(_QWORD *)v29;
    if (v29 + 16 == *(_QWORD *)v29 || v30 == 0)
      goto LABEL_25;
LABEL_52:
    *(_QWORD *)v29 = 0;
    *(_DWORD *)(v29 + 8) = 0;
    WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
LABEL_25:
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_26;
  }
  __break(0xC471u);
  return result;
}

void WTF::VectorTypeOperations<JSC::GetByVariant>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _OWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  if (a1 != a2)
  {
    v8 = a3;
    v10 = a1;
    while (1)
    {
      v11 = *((_QWORD *)v10 + 7);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 24) = 0u;
      v12 = (unint64_t *)(v8 + 24);
      *(_DWORD *)(v8 + 16) = -1;
      *(_OWORD *)(v8 + 40) = 0u;
      *(_QWORD *)(v8 + 56) = v11;
      *(_QWORD *)(v8 + 56) = *((_QWORD *)v10 + 7);
      if ((char *)v8 != v10)
      {
        if ((*(_QWORD *)v10 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v8, v10);
        else
          *(_QWORD *)v8 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFDLL;
      }
      v13 = (unsigned int *)*((_QWORD *)v10 + 1);
      if (v13)
      {
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
      }
      v15 = *(unsigned int **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v13;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_DWORD *)(v8 + 16) = *((_DWORD *)v10 + 4);
      *(_QWORD *)(v8 + 32) = *((_QWORD *)v10 + 4);
      *(_QWORD *)(v8 + 40) = *((_QWORD *)v10 + 5);
      v18 = (_OWORD *)*((_QWORD *)v10 + 6);
      if (!v18)
        break;
      v35 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = *v18;
      v19 = *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v8 + 48) = v35;
      if (v19)
        goto LABEL_15;
LABEL_16:
      v20 = *((_QWORD *)v10 + 3);
      if (v20)
      {
        v30 = WTF::fastMalloc((WTF *)0x20);
        v31 = *(unsigned int *)(v20 + 12);
        v32 = (_QWORD *)(v30 + 16);
        *(_QWORD *)v30 = v30 + 16;
        *(_DWORD *)(v30 + 8) = 1;
        *(_DWORD *)(v30 + 12) = v31;
        if (v31 >= 2)
        {
          if (v31 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v39 = v31;
          v32 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v31));
          *(_DWORD *)(v30 + 8) = v39;
          *(_QWORD *)v30 = v32;
        }
        v33 = *(unsigned int *)(v20 + 12);
        if ((_DWORD)v33)
        {
          v36 = *(uint64_t **)v20;
          v37 = 8 * v33;
          do
          {
            v38 = *v36++;
            *v32++ = v38;
            v37 -= 8;
          }
          while (v37);
        }
        *(_DWORD *)(v30 + 24) = *(_DWORD *)(v20 + 24);
        v21 = *v12;
        *v12 = v30;
        if (v21)
        {
          v22 = *(_QWORD *)v21;
          if (v21 + 16 != *(_QWORD *)v21 && v22 != 0)
          {
LABEL_46:
            *(_QWORD *)v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
          }
LABEL_20:
          WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      else
      {
        v21 = *v12;
        *v12 = 0;
        if (v21)
        {
          v22 = *(_QWORD *)v21;
          if (v21 + 16 != *(_QWORD *)v21 && v22)
            goto LABEL_46;
          goto LABEL_20;
        }
      }
      v23 = *((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 6) = 0;
      if (v23)
        WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
      v24 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      if (v24)
      {
        v25 = *(_QWORD *)v24;
        if (v24 + 16 != *(_QWORD *)v24 && v25 != 0)
        {
          *(_QWORD *)v24 = 0;
          *(_DWORD *)(v24 + 8) = 0;
          WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      v27 = (unsigned int *)*((_QWORD *)v10 + 1);
      *((_QWORD *)v10 + 1) = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*(_QWORD *)v10 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v8 += 64;
      v10 += 64;
      if (v10 == a2)
        return;
    }
    v19 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)(v8 + 48) = 0;
    if (!v19)
      goto LABEL_16;
LABEL_15:
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_16;
  }
}

_QWORD *WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _OWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v10 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 1;
  v11 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 != a2 + 4)
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v11;
    v35 = a2[2];
    a2[2] = 1;
    *(_DWORD *)(a1 + 8) = v35;
    goto LABEL_3;
  }
  v12 = a2[3];
  if (!(_DWORD)v12)
  {
LABEL_3:
    v13 = a2[3];
    a2[3] = 0;
    *(_DWORD *)(a1 + 12) = v13;
    return (_QWORD *)a1;
  }
  v15 = v11 + (v12 << 6);
  while (1)
  {
    v16 = *(_QWORD *)(v11 + 56);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_OWORD *)(v10 + 24) = 0u;
    v17 = (unint64_t *)(v10 + 24);
    *(_DWORD *)(v10 + 16) = -1;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_QWORD *)(v10 + 56) = v16;
    *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
    if (v10 != v11)
    {
      if ((*(_QWORD *)v11 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v10, (_QWORD *)v11);
      else
        *(_QWORD *)v10 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFDLL;
    }
    v18 = *(unsigned int **)(v11 + 8);
    if (v18)
    {
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }
    v20 = *(unsigned int **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v18;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 40);
    v23 = *(_OWORD **)(v11 + 48);
    if (!v23)
    {
      v24 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 48) = 0;
      if (!v24)
        goto LABEL_17;
LABEL_16:
      WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_17;
    }
    v40 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = *v23;
    v24 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(v10 + 48) = v40;
    if (v24)
      goto LABEL_16;
LABEL_17:
    v25 = *(_QWORD *)(v11 + 24);
    if (v25)
      break;
    v26 = *v17;
    *v17 = 0;
    if (v26)
    {
      v27 = *(_QWORD *)v26;
      if (v26 + 16 == *(_QWORD *)v26 || !v27)
        goto LABEL_21;
      goto LABEL_48;
    }
LABEL_22:
    v28 = *(_QWORD *)(v11 + 48);
    *(_QWORD *)(v11 + 48) = 0;
    if (v28)
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    v29 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v11 + 24) = 0;
    if (v29)
    {
      v30 = *(_QWORD *)v29;
      if (v29 + 16 != *(_QWORD *)v29 && v30 != 0)
      {
        *(_QWORD *)v29 = 0;
        *(_DWORD *)(v29 + 8) = 0;
        WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
    }
    v32 = *(unsigned int **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((unint64_t)v32, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if ((*(_QWORD *)v11 & 1) != 0)
      WTF::fastFree(*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v10 += 64;
    v11 += 64;
    if (v11 == v15)
      goto LABEL_3;
  }
  v36 = WTF::fastMalloc((WTF *)0x20);
  v37 = *(unsigned int *)(v25 + 12);
  result = (_QWORD *)(v36 + 16);
  *(_QWORD *)v36 = v36 + 16;
  *(_DWORD *)(v36 + 8) = 1;
  *(_DWORD *)(v36 + 12) = v37;
  if (v37 < 2)
    goto LABEL_42;
  if (!(v37 >> 29))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v37));
    *(_DWORD *)(v36 + 8) = v37;
    *(_QWORD *)v36 = result;
LABEL_42:
    v38 = *(unsigned int *)(v25 + 12);
    if ((_DWORD)v38)
    {
      v41 = *(uint64_t **)v25;
      v42 = 8 * v38;
      do
      {
        v43 = *v41++;
        *result++ = v43;
        v42 -= 8;
      }
      while (v42);
    }
    *(_DWORD *)(v36 + 24) = *(_DWORD *)(v25 + 24);
    v26 = *v17;
    *v17 = v36;
    if (!v26)
      goto LABEL_22;
    v27 = *(_QWORD *)v26;
    if (v26 + 16 == *(_QWORD *)v26 || v27 == 0)
      goto LABEL_21;
LABEL_48:
    *(_QWORD *)v26 = 0;
    *(_DWORD *)(v26 + 8) = 0;
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
LABEL_21:
    WTF::fastFree(v26, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_22;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  uint64_t v17;
  unint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;

  v8 = a2;
  v10 = *(unsigned int *)(a2 + 12);
  v11 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v10;
  if (v10 >= 2)
  {
    if (v10 >> 26)
    {
LABEL_64:
      __break(0xC471u);
      JUMPOUT(0x198186984);
    }
    v11 = WTF::fastMalloc((WTF *)(v10 << 6));
    *(_DWORD *)(a1 + 8) = v10;
    *(_QWORD *)a1 = v11;
  }
  v12 = *(unsigned int *)(v8 + 12);
  if ((_DWORD)v12)
  {
    v14 = *(_QWORD *)v8;
    v15 = v14 + (v12 << 6);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v17 = *(_QWORD *)(v14 + 56);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_OWORD *)(v11 + 24) = 0u;
      v18 = (unint64_t *)(v11 + 24);
      *(_DWORD *)(v11 + 16) = -1;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_QWORD *)(v11 + 56) = v17;
      *(_QWORD *)(v11 + 56) = *(_QWORD *)(v14 + 56);
      if (v11 != v14)
      {
        if ((*(_QWORD *)v14 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v11, (_QWORD *)v14);
        else
          *(_QWORD *)v11 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFDLL;
      }
      v19 = *(unsigned int **)(v14 + 8);
      if (v19)
      {
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      v21 = *(unsigned int **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v19;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((unint64_t)v21, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v14 + 16);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v11 + 40) = *(_QWORD *)(v14 + 40);
      v24 = *(_OWORD **)(v14 + 48);
      if (v24)
      {
        v37 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
        *v37 = *v24;
        a2 = *(_QWORD *)(v11 + 48);
        *(_QWORD *)(v11 + 48) = v37;
        if (!a2)
          goto LABEL_21;
      }
      else
      {
        a2 = *(_QWORD *)(v11 + 48);
        *(_QWORD *)(v11 + 48) = 0;
        if (!a2)
          goto LABEL_21;
      }
      v25 = *(_QWORD *)(StatusReg + 752);
      if (v25)
      {
        if (a2 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
        {
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
LABEL_51:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v25, a2, 1, a4, a5, a6, a7, a8);
            goto LABEL_21;
          }
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 != 1)
            goto LABEL_51;
        }
        v26 = *(unsigned int *)(v25 + 8000);
        if (v26 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v25, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v25 + 8 * v26) = a2 | 0x5000000000000;
          *(_DWORD *)(v25 + 8000) = v26 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_21:
      v27 = *(_QWORD *)(v14 + 24);
      if (!v27)
      {
        v28 = *v18;
        *v18 = 0;
        if (!v28)
          goto LABEL_30;
        v29 = *(_QWORD *)v28;
        if (v28 + 16 == *(_QWORD *)v28 || !v29)
          goto LABEL_25;
LABEL_40:
        *(_QWORD *)v28 = 0;
        *(_DWORD *)(v28 + 8) = 0;
        WTF::fastFree(v29, (void *)a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_25;
      }
      v32 = WTF::fastMalloc((WTF *)0x20);
      v33 = *(unsigned int *)(v27 + 12);
      v34 = (_QWORD *)(v32 + 16);
      *(_QWORD *)v32 = v32 + 16;
      *(_DWORD *)(v32 + 8) = 1;
      *(_DWORD *)(v32 + 12) = v33;
      if (v33 >= 2)
      {
        if (v33 >> 29)
          goto LABEL_64;
        v41 = v33;
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v33));
        *(_DWORD *)(v32 + 8) = v41;
        *(_QWORD *)v32 = v34;
      }
      v35 = *(unsigned int *)(v27 + 12);
      if ((_DWORD)v35)
      {
        v38 = *(uint64_t **)v27;
        v39 = 8 * v35;
        do
        {
          v40 = *v38++;
          *v34++ = v40;
          v39 -= 8;
        }
        while (v39);
      }
      *(_DWORD *)(v32 + 24) = *(_DWORD *)(v27 + 24);
      v28 = *v18;
      *v18 = v32;
      if (!v28)
        goto LABEL_30;
      v29 = *(_QWORD *)v28;
      if (v28 + 16 != *(_QWORD *)v28 && v29 != 0)
        goto LABEL_40;
LABEL_25:
      v30 = *(_QWORD *)(StatusReg + 752);
      if (v30)
      {
        if (!(v28 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v28 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v28)) & 1) != 0)
        {
LABEL_28:
          v31 = *(unsigned int *)(v30 + 8000);
          if (v31 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v30, v28, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v30 + 8 * v31) = v28 | 0x5000000000000;
            *(_DWORD *)(v30 + 8000) = v31 + 1;
          }
          goto LABEL_30;
        }
        if (v28 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v28 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v28 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v28) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_28;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v30, v28, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v28, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_30:
      v11 += 64;
      v14 += 64;
    }
    while (v14 != v15);
  }
  return a1;
}

_QWORD *WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  if (a2 == a1)
    return (_QWORD *)a1;
  v10 = (void *)*(unsigned int *)(a2 + 12);
  if (*(_DWORD *)(a1 + 12) > v10)
  {
    WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v10, a3, a4, a5, a6, a7, a8);
  }
  else if (v10 > *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, v10, a3, a4, a5, a6, a7, a8);
    WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12), v34, v35, v36, v37, v38, v39);
  }
  v11 = *(uint64_t **)a2;
  v12 = *(unsigned int *)(a1 + 12);
  v13 = *(_QWORD *)a1;
  if ((_DWORD)v12)
  {
    v14 = v12 << 6;
    do
    {
      v15 = JSC::GetByVariant::operator=(v13, v11, a3, a4, a5, a6, a7, a8);
      v11 += 8;
      v13 = (uint64_t)(v15 + 8);
      v14 -= 64;
    }
    while (v14);
    v11 = *(uint64_t **)a2;
    v16 = *(unsigned int *)(a1 + 12);
    v13 = *(_QWORD *)a1;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned int *)(a2 + 12);
  if (v16 == v17)
  {
LABEL_10:
    *(_DWORD *)(a1 + 12) = v17;
    return (_QWORD *)a1;
  }
  v19 = &v11[8 * v17];
  v20 = v13 + (v16 << 6);
  v21 = &v11[8 * v16];
  while (1)
  {
    v22 = v21[7];
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v20 + 8) = 0;
    *(_OWORD *)(v20 + 24) = 0u;
    v23 = (unint64_t *)(v20 + 24);
    *(_DWORD *)(v20 + 16) = -1;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_QWORD *)(v20 + 56) = v22;
    *(_QWORD *)(v20 + 56) = v21[7];
    if ((uint64_t *)v20 != v21)
    {
      if ((*v21 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v20, v21);
      else
        *(_QWORD *)v20 = *v21 & 0xFFFFFFFFFFFFFFFDLL;
    }
    v24 = (unsigned int *)v21[1];
    if (v24)
    {
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
    }
    v26 = *(unsigned int **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v24;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((unint64_t)v26, v10, a3, a4, a5, a6, a7, a8);
      }
    }
    *(_DWORD *)(v20 + 16) = *((_DWORD *)v21 + 4);
    *(_QWORD *)(v20 + 32) = v21[4];
    *(_QWORD *)(v20 + 40) = v21[5];
    v29 = (_OWORD *)v21[6];
    if (!v29)
    {
      v30 = *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v20 + 48) = 0;
      if (!v30)
        goto LABEL_25;
LABEL_24:
      WTF::fastFree(v30, v10, a3, a4, a5, a6, a7, a8);
      goto LABEL_25;
    }
    v44 = (_OWORD *)WTF::fastMalloc((WTF *)0x10);
    *v44 = *v29;
    v30 = *(_QWORD *)(v20 + 48);
    *(_QWORD *)(v20 + 48) = v44;
    if (v30)
      goto LABEL_24;
LABEL_25:
    v31 = v21[3];
    if (v31)
      break;
    v32 = *v23;
    *v23 = 0;
    if (v32)
    {
      v33 = *(_QWORD *)v32;
      if (v32 + 16 == *(_QWORD *)v32 || !v33)
        goto LABEL_29;
      goto LABEL_41;
    }
LABEL_30:
    v20 += 64;
    v21 += 8;
    if (v21 == v19)
    {
      LODWORD(v17) = *(_DWORD *)(a2 + 12);
      goto LABEL_10;
    }
  }
  v40 = WTF::fastMalloc((WTF *)0x20);
  v41 = *(unsigned int *)(v31 + 12);
  result = (_QWORD *)(v40 + 16);
  *(_QWORD *)v40 = v40 + 16;
  *(_DWORD *)(v40 + 8) = 1;
  *(_DWORD *)(v40 + 12) = v41;
  if (v41 < 2)
    goto LABEL_35;
  if (!(v41 >> 29))
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v41));
    *(_DWORD *)(v40 + 8) = v41;
    *(_QWORD *)v40 = result;
LABEL_35:
    v42 = *(unsigned int *)(v31 + 12);
    if ((_DWORD)v42)
    {
      v45 = *(uint64_t **)v31;
      v46 = 8 * v42;
      do
      {
        v47 = *v45++;
        *result++ = v47;
        v46 -= 8;
      }
      while (v46);
    }
    *(_DWORD *)(v40 + 24) = *(_DWORD *)(v31 + 24);
    v32 = *v23;
    *v23 = v40;
    if (!v32)
      goto LABEL_30;
    v33 = *(_QWORD *)v32;
    if (v32 + 16 == *(_QWORD *)v32 || v33 == 0)
      goto LABEL_29;
LABEL_41:
    *(_QWORD *)v32 = 0;
    *(_DWORD *)(v32 + 8) = 0;
    WTF::fastFree(v33, v10, a3, a4, a5, a6, a7, a8);
LABEL_29:
    WTF::fastFree(v32, v10, a3, a4, a5, a6, a7, a8);
    goto LABEL_30;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  v8 = (int)a2;
  v10 = *(unsigned int *)(a1 + 12);
  if ((void *)v10 != a2)
  {
    v11 = (_QWORD *)(*(_QWORD *)a1 + (v10 << 6));
    v12 = (_QWORD *)(*(_QWORD *)a1 + ((_QWORD)a2 << 6));
    do
    {
      v13 = v12[6];
      v12[6] = 0;
      if (v13)
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      v14 = v12[3];
      v12[3] = 0;
      if (v14)
      {
        v15 = *(_QWORD *)v14;
        if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
        {
          *(_QWORD *)v14 = 0;
          *(_DWORD *)(v14 + 8) = 0;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = (unsigned int *)v12[1];
      v12[1] = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v12 & 1) != 0)
        WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v12 += 8;
    }
    while (v12 != v11);
  }
  *(_DWORD *)(a1 + 12) = v8;
}

unint64_t WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*(_DWORD *)(result + 8))
  {
    v8 = result;
    if (*(_DWORD *)(result + 12))
      WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, 0, a3, a4, a5, a6, a7, a8);
    result = *(_QWORD *)v8;
    if (v8 + 16 != *(_QWORD *)v8 && result != 0)
    {
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (!result)
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_DWORD *)(v8 + 8) = 1;
    }
  }
  return result;
}

void WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(char **)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 2)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >> 26)
      {
        __break(0xC471u);
        return;
      }
      v12 = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    WTF::VectorTypeOperations<JSC::GetByVariant>::move(v10, &v10[64 * v11], v12, a4, a5, a6, a7, a8);
    if ((char *)(a1 + 16) != v10 && v10 != 0)
    {
      if (*(char **)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

uint64_t JSC::typedArrayType(JSC *this, JSType a2)
{
  if (((_DWORD)this - 39) >= 0xC)
    return 0;
  else
    return ((_BYTE)this - 38);
}

uint64_t WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo>(uint64_t a1, unint64_t a2)
{
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

_DWORD *WTF::Vector<JSC::ExpressionInfo::EncodedInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::EncodedInfo&>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ExpressionInfo::Chapter>(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::ExpressionInfo::Chapter,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::LineColumn>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::LineColumn>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::LineColumn,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::LineColumn>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::LineColumn>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::LineColumn>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::LineColumn,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::LineColumn>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v3);
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::LineColumn>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::LineColumn>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,JSC::LineColumn,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::LineColumn>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t i;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(12 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 20);
    do
    {
      *((_DWORD *)v16 - 1) = -1;
      *v16 = 0;
      v16 = (_QWORD *)((char *)v16 + 12);
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (_DWORD *)(v4 + 12 * i);
      if (*v18 <= 0xFFFFFFFD)
      {
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 8);
        else
          v20 = 0;
        v21 = 0;
        v22 = 9 * ((*v18 + ~(*v18 << 15)) ^ ((*v18 + ~(*v18 << 15)) >> 10));
        v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
        v24 = v23 ^ HIWORD(v23);
        do
        {
          v25 = v24 & v20;
          v26 = (unsigned int *)(v19 + 12 * v25);
          v8 = (void *)*v26;
          v24 = ++v21 + v25;
        }
        while ((_DWORD)v8 != -1);
        v27 = *(_QWORD *)v18;
        v26[2] = v18[2];
        *(_QWORD *)v26 = v27;
      }
    }
    goto LABEL_17;
  }
  if (v4)
LABEL_17:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = result;
  v10 = *(char **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)&v10[64 * (unint64_t)*(unsigned int *)(result + 12)] > a3)
  {
    WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - (_QWORD)v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= a2)
    v14 = a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 2)
  {
    v16 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    goto LABEL_12;
  }
  if (!(v14 >> 26))
  {
    v16 = WTF::fastMalloc((WTF *)(v14 << 6));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    WTF::VectorTypeOperations<JSC::GetByVariant>::move(v10, &v10[64 * v15], v16, a4, a5, a6, a7, a8);
    if ((char *)(v9 + 16) != v10 && v10)
    {
      if (*(char **)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v17, v18, v19, v20, v21, v22, v23);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(char **)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 2)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v11 >> 26)
      {
        __break(0xC471u);
        return;
      }
      v15 = WTF::fastMalloc((WTF *)(v11 << 6));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    WTF::VectorTypeOperations<JSC::GetByVariant>::move(v13, &v13[64 * v14], v15, a4, a5, a6, a7, a8);
    if ((char *)(a1 + 16) != v13 && v13)
    {
      if (*(char **)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v13, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void WTF::VectorMover<false,JSC::GetByVariant>::moveOverlapping(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::GetByVariant *v8;
  JSC::GetByVariant *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = (const JSC::GetByVariant *)a2;
  if ((unint64_t)a1 <= a3)
  {
    if (a2 != a1)
    {
      v10 = (JSC::GetByVariant *)(((a2 - a1) & 0xFFFFFFFFFFFFFFC0) + a3 - 64);
      do
      {
        v8 = (const JSC::GetByVariant *)((char *)v8 - 64);
        JSC::GetByVariant::GetByVariant(v10, v8, a3, a4, a5, a6, a7, a8);
        JSC::GetByVariant::~GetByVariant(v8, v11, v12, v13, v14, v15, v16, v17);
        v10 = (JSC::GetByVariant *)((char *)v10 - 64);
      }
      while (v8 != (const JSC::GetByVariant *)a1);
    }
  }
  else
  {
    WTF::VectorTypeOperations<JSC::GetByVariant>::move(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

JSC::GetByVariant ***WTF::ListDump<WTF::Vector<JSC::GetByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(JSC::GetByVariant ***result, uint64_t a2)
{
  JSC::GetByVariant ***v3;
  JSC::GetByVariant *v4;
  WTF::PrintStream *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  JSC::GetByVariant **v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  char *v15;
  JSC::GetByVariant **v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v10 = (char *)v3[1];
        v11 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v10)
        {
          v14 = (_DWORD)v11 - 1;
          if (!v11)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v10, v14, (uint64_t)&v22, v13);
        }
        else
        {
          v20 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = 0;
          *(_BYTE *)(v20 + 16) = 0;
          v22 = v20;
          v23 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v22);
        if (v23 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v15 = (char *)v3[3];
        v16 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v15)
        {
          v19 = (_DWORD)v16 - 1;
          if (!v16)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v22, v18);
        }
        else
        {
          v21 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = 0;
          *(_BYTE *)(v21 + 16) = 0;
          v22 = v21;
          v23 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v22);
        if (v23 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      JSC::GetByVariant::dumpInContext(v4, v5, 0);
      result = (JSC::GetByVariant ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 = (JSC::GetByVariant *)((char *)v4 + 64);
    }
    while (v4 != (JSC::GetByVariant *)((char *)**v3 + 64 * (unint64_t)*((unsigned int *)*v3 + 3)));
  }
  return result;
}

uint64_t JSC::hasBadCacheExitSite(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v9 = *(_QWORD *)(a1 + 56);
  v10 = (unsigned __int8 *)(v9 + 31);
  if (__ldaxr((unsigned __int8 *)(v9 + 31)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 31);
LABEL_4:
  v12 = *(uint64_t **)(v9 + 96);
  if (v12 && (v23 = *((_DWORD *)v12 + 3)) != 0)
  {
    v24 = *v12;
    v25 = v23 - 1;
    v26 = v25;
    while (1)
    {
      v27 = v26;
      if (*(_DWORD *)(v24 + 8 * v26) == a2)
      {
        v28 = v24 + 8 * v26;
        if (*(_BYTE *)(v28 + 4) == 5 && *(_BYTE *)(v28 + 6) == 1)
          break;
      }
      --v26;
      if (!v27)
      {
        v15 = 0;
        goto LABEL_29;
      }
    }
    v15 = 1;
LABEL_29:
    v29 = *v12;
    v30 = v25;
    while (1)
    {
      v31 = v30;
      if (*(_DWORD *)(v29 + 8 * v30) == a2)
      {
        v32 = v29 + 8 * v30;
        if (*(_BYTE *)(v32 + 4) == 5 && *(_BYTE *)(v32 + 6) == 2)
          break;
      }
      --v30;
      if (!v31)
      {
        v16 = 0;
        goto LABEL_36;
      }
    }
    v16 = 1;
LABEL_36:
    v33 = *v12;
    v34 = v25;
    while (1)
    {
      v35 = v34;
      if (*(_DWORD *)(v33 + 8 * v34) == a2)
      {
        v36 = v33 + 8 * v34;
        if (*(_BYTE *)(v36 + 4) == 6 && *(_BYTE *)(v36 + 6) == 1)
          break;
      }
      --v34;
      if (!v35)
      {
        v14 = 0;
        goto LABEL_43;
      }
    }
    v14 = 1;
LABEL_43:
    v37 = *v12;
    v38 = v25;
    while (1)
    {
      v39 = v38;
      if (*(_DWORD *)(v37 + 8 * v38) == a2)
      {
        v40 = v37 + 8 * v38;
        if (*(_BYTE *)(v40 + 4) == 6 && *(_BYTE *)(v40 + 6) == 2)
          break;
      }
      --v38;
      if (!v39)
      {
        v17 = 0;
        goto LABEL_50;
      }
    }
    v17 = 1;
LABEL_50:
    v41 = *v12;
    v42 = v25;
    while (1)
    {
      v43 = v42;
      if (*(_DWORD *)(v41 + 8 * v42) == a2)
      {
        v44 = v41 + 8 * v42;
        if (*(_BYTE *)(v44 + 4) == 1 && *(_BYTE *)(v44 + 6) == 1)
          break;
      }
      --v42;
      if (!v43)
      {
        v13 = 0;
        goto LABEL_57;
      }
    }
    v13 = 1;
LABEL_57:
    v45 = *v12;
    while (1)
    {
      v46 = v25;
      if (*(_DWORD *)(v45 + 8 * v25) == a2)
      {
        v47 = v45 + 8 * v25;
        if (*(_BYTE *)(v47 + 4) == 1 && *(_BYTE *)(v47 + 6) == 2)
          break;
      }
      --v25;
      if (!v46)
        goto LABEL_6;
    }
    v18 = 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
LABEL_6:
    v18 = 0;
  }
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v10))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  if (v17)
    v20 = 2;
  else
    v20 = 0;
  if (v16)
    v21 = 2;
  else
    v21 = 0;
  return v21 | v14 | v13 | v15 | v20 | v18;
}

_QWORD *JSC::InByStatus::markIfCheap<JSC::AbstractSlotVisitor>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *((unsigned int *)result + 5);
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)result[1];
    v5 = 32 * v2;
    do
    {
      result = JSC::StructureSet::markIfCheap<JSC::AbstractSlotVisitor>(v4, a2);
      v4 += 4;
      v5 -= 32;
    }
    while (v5);
  }
  return result;
}

uint64_t JSC::appendICStatusVariant<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::InByVariant>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  void *v19;
  uint64_t v20;
  JSC::ObjectPropertyConditionSet *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t result;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  WTF *v56;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = (uint64_t *)(*(_QWORD *)a1 + 32 * v11);
      v14 = v12 + 3;
      v13 = v12[3];
      v15 = *(_QWORD *)(a2 + 24);
      if ((v13 != 0) == (v15 != 0))
      {
        if (!v13)
          goto LABEL_85;
        if ((v13 & 1) != 0)
          v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
        else
          v16 = *(_QWORD *)(v13 + 8);
        if (v15)
        {
          if ((v15 & 1) != 0)
            v15 &= ~1uLL;
          else
            v15 = *(_QWORD *)(v15 + 8);
        }
        if (v16 == v15)
        {
LABEL_85:
          v17 = *(_QWORD *)a1 + 32 * v11;
          v18 = (_DWORD *)(v17 + 16);
          if (*(_DWORD *)(v17 + 16) == *(_DWORD *)(a2 + 16))
          {
            v19 = (void *)(a2 + 8);
            v22 = *(_QWORD *)(v17 + 8);
            v21 = (JSC::ObjectPropertyConditionSet *)(v17 + 8);
            v20 = v22;
            if ((v22 == 0) == (*(_QWORD *)(a2 + 8) == 0))
              break;
          }
        }
      }
LABEL_36:
      if (++v11 >= v10)
      {
        if (!v10)
          goto LABEL_58;
        v43 = 0;
        v44 = 0;
        while ((JSC::InByVariant::overlaps((uint64_t *)(*(_QWORD *)a1 + v43), (uint64_t *)a2) & 1) == 0)
        {
          ++v44;
          v10 = *(unsigned int *)(a1 + 12);
          v43 += 32;
          if (v44 >= v10)
            goto LABEL_58;
        }
        return 0;
      }
    }
    v56 = 0;
    if (!v20)
    {
      v23 = 0;
LABEL_19:
      v25 = *(unsigned int **)v21;
      *(_QWORD *)v21 = v23;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          WTF::fastFree((unint64_t)v25, v19, a3, a4, a5, a6, a7, a8);
        }
      }
      v28 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::Structure *>::mergeOtherOutOfLine(v12, (_QWORD *)a2);
      }
      else
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v28 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v30 = *v12;
          if ((*v12 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v12, v29);
          }
          else if ((v30 & 0xFFFFFFFFFFFFFFFCLL) != v29)
          {
            if ((v30 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v53 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v53 = 0x400000002;
              v54 = *v12;
              *(_QWORD *)(v53 + 8) = *v12 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v53 + 16) = v29;
              v31 = v54 & 2 | v53 | 1;
            }
            else
            {
              v31 = *v12 & 2 | v29;
            }
            *v12 = v31;
          }
        }
      }
      v32 = 1;
LABEL_31:
      v33 = (unsigned int *)v56;
      v56 = 0;
      if (v33)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((unint64_t)v33, v19, a3, a4, a5, a6, a7, a8);
        }
      }
      v10 = *(unsigned int *)(a1 + 12);
      if (v32)
      {
        if (*(_DWORD *)(a1 + 12))
        {
          v36 = 0;
          v37 = 0;
          while (1)
          {
            if (v11 != v37)
            {
              v39 = (uint64_t *)(*(_QWORD *)a1 + v36);
              v40 = v39[3];
              v41 = *v14;
              if ((v40 != 0) != (*v14 != 0))
                return 0;
              if (!v40)
                goto LABEL_52;
              if ((v40 & 1) != 0)
                v42 = v40 & 0xFFFFFFFFFFFFFFFELL;
              else
                v42 = *(_QWORD *)(v40 + 8);
              if (v41)
              {
                if ((v41 & 1) != 0)
                  v41 &= ~1uLL;
                else
                  v41 = *(_QWORD *)(v41 + 8);
              }
              if (v42 == v41)
              {
LABEL_52:
                if (WTF::TinyPtrSet<JSC::Structure *>::overlaps(v39, v12))
                  return 0;
                v10 = *(unsigned int *)(a1 + 12);
              }
            }
            ++v37;
            v36 += 32;
            result = 1;
            if (v37 >= v10)
              return result;
          }
        }
        return 1;
      }
      goto LABEL_36;
    }
    JSC::ObjectPropertyConditionSet::mergedWith(v21, (unint64_t)v19, a3, a4, a5, a6, a7, a8, &v55);
    v23 = v55;
    v56 = (WTF *)v55;
    if (!v55 || v55[1])
    {
      if (*v18 == -1)
        goto LABEL_17;
      if (JSC::ObjectPropertyConditionSet::hasOneSlotBaseCondition((JSC::ObjectPropertyConditionSet *)&v56))
      {
        v23 = (unsigned int *)v56;
LABEL_17:
        if (v23)
        {
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
        }
        goto LABEL_19;
      }
    }
    v32 = 0;
    goto LABEL_31;
  }
LABEL_58:
  v45 = v10;
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    a2 = WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v10 + 1, a2, a4, a5, a6, a7, a8);
    v45 = *(unsigned int *)(a1 + 12);
    v46 = *(_QWORD *)a1;
    v51 = (uint64_t *)(*(_QWORD *)a1 + 32 * v45);
    *v51 = 0;
    if ((*(_QWORD *)a2 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v51, (_QWORD *)a2);
    else
      *v51 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFDLL;
    v48 = *(unsigned int **)(a2 + 8);
    if (v48)
    {
      do
        v52 = __ldaxr(v48);
      while (__stlxr(v52 + 1, v48));
    }
  }
  else
  {
    v46 = *(_QWORD *)a1;
    v47 = (uint64_t *)(*(_QWORD *)a1 + 32 * v10);
    *v47 = 0;
    if ((*(_QWORD *)a2 & 1) != 0)
      WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine(v47, (_QWORD *)a2);
    else
      *v47 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFDLL;
    v48 = *(unsigned int **)(a2 + 8);
    if (v48)
    {
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 + 1, v48));
    }
  }
  v50 = v46 + 32 * v45;
  *(_QWORD *)(v50 + 8) = v48;
  *(_OWORD *)(v50 + 16) = *(_OWORD *)(a2 + 16);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void JSC::InByStatus::computeFor(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  JSC::CodeOrigin *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v49;
  int v51;
  int v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  WTF *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  WTF *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  WTF *v80;
  uint64_t v81;
  _BYTE v82[40];

  v13 = (unsigned __int8 *)(a2 + 16);
  v14 = __ldaxr((unsigned __int8 *)(a2 + 16));
  v71 = a5;
  if (v14)
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 16);
LABEL_4:
  v15 = 0;
  v79 = 0;
  v80 = (WTF *)v82;
  v81 = 1;
  v16 = *(_QWORD *)(a2 + 72);
  v17 = 2;
  if ((_DWORD)a4 != -1 && (_DWORD)a4 != 0x3FFFFFFF)
  {
    if (a4 >> 28)
    {
      v15 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = 0;
      *(_DWORD *)(v15 + 8) = a4;
      v17 = 1;
    }
    else
    {
      v17 = 0;
      v15 = a4 << 36;
    }
  }
  v73 = v15 | v17;
  v18 = *a3;
  if (*a3)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = JSC::CodeOrigin::approximateHash((JSC::CodeOrigin *)&v73, 0, (uint64_t)a3, a4, a5, (uint64_t)a6, a7, a8) & v19;
    v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
    if ((JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v73, 0, v22, v23, v24, v25, v26) & 1) != 0)
    {
LABEL_10:
      v32 = *(_QWORD *)(v18 + (v20 << 6) + 8);
      goto LABEL_11;
    }
    v52 = 1;
    while (1)
    {
      v53 = *(_QWORD *)v21;
      if (*(_QWORD *)v21 == 2)
      {
LABEL_64:
        v32 = 0;
        goto LABEL_11;
      }
      if ((v53 & 2) != 0)
      {
        v64 = (_QWORD *)(v53 & 0xFFFFFFFF8);
        if ((v53 & 1) == 0)
          goto LABEL_63;
      }
      else
      {
        if ((v53 & 1) == 0)
          goto LABEL_40;
        v64 = (_QWORD *)(v53 & 0xFFFFFFFF8);
        if (*(_DWORD *)((v53 & 0xFFFFFFFF8) + 8) != -1)
          goto LABEL_40;
      }
      v64 = (_QWORD *)*v64;
LABEL_63:
      if (!v64)
        goto LABEL_64;
LABEL_40:
      v20 = ((_DWORD)v20 + v52) & v19;
      v21 = (JSC::CodeOrigin *)(v18 + (v20 << 6));
      ++v52;
      if (JSC::CodeOrigin::isApproximatelyEqualTo(v21, (const JSC::CodeOrigin *)&v73, 0, v27, v28, v29, v30, v31))goto LABEL_10;
    }
  }
  v32 = 0;
LABEL_11:
  v33 = *a6;
  if ((*a6 & 1) != 0)
  {
    v65 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v66 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
        ? (v67 = (_DWORD)v66 == -1)
        : (v67 = 1),
          v67))
    {
      v68 = 2;
    }
    else if (v66 >> 28)
    {
      v69 = v32;
      v70 = WTF::fastMalloc((WTF *)0x10);
      v32 = v69;
      *(_QWORD *)v70 = v65;
      *(_DWORD *)(v70 + 8) = v66;
      v68 = 1;
      v65 = v70;
    }
    else
    {
      v68 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v65 = v66 << 36;
    }
    v33 = v65 | v68;
  }
  v72 = v33;
  JSC::InByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v74, v16, v32, &v72);
  v79 = v74;
  if (HIDWORD(v81))
    WTF::VectorTypeOperations<JSC::InByVariant>::destruct(v80, (_QWORD *)v80 + 4 * HIDWORD(v81), v34, v35, v36, v37, v38, v39);
  WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt((uint64_t)&v80, &v75, v34, v35, v36, v37, v38, v39);
  if (v77)
  {
    v54 = v75;
    v55 = (WTF *)((char *)v75 + 32 * v77);
    do
    {
      v56 = (unsigned int *)*((_QWORD *)v54 + 1);
      *((_QWORD *)v54 + 1) = 0;
      if (v56)
      {
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          atomic_store(1u, v56);
          WTF::fastFree((unint64_t)v56, v40, v41, v42, v43, v44, v45, v46);
        }
      }
      if ((*(_QWORD *)v54 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v54 & 0xFFFFFFFFFFFFFFFCLL, v40, v41, v42, v43, v44, v45, v46);
      v54 = (WTF *)((char *)v54 + 32);
    }
    while (v54 != v55);
  }
  v47 = v75;
  if (&v78 != (uint64_t *)v75 && v75 != 0)
  {
    v75 = 0;
    v76 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  if ((v72 & 1) != 0 && (v72 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v72 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
  if ((v73 & 1) != 0 && (v73 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v73 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
  if ((v79 & 0xFFFFFFFE) != 2 && v71)
  {
    *(_DWORD *)a1 = 3;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
  }
  else
  {
    *(_DWORD *)a1 = v79;
    WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::VectorBuffer(a1 + 8, &v80, v41, v42, v43, v44, v45, v46);
  }
  if (HIDWORD(v81))
  {
    v59 = v80;
    v60 = (WTF *)((char *)v80 + 32 * HIDWORD(v81));
    do
    {
      v61 = (unsigned int *)*((_QWORD *)v59 + 1);
      *((_QWORD *)v59 + 1) = 0;
      if (v61)
      {
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          atomic_store(1u, v61);
          WTF::fastFree((unint64_t)v61, v40, v41, v42, v43, v44, v45, v46);
        }
      }
      if ((*(_QWORD *)v59 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v59 & 0xFFFFFFFFFFFFFFFCLL, v40, v41, v42, v43, v44, v45, v46);
      v59 = (WTF *)((char *)v59 + 32);
    }
    while (v59 != v60);
  }
  v49 = v80;
  if (v82 != (_BYTE *)v80 && v80 != 0)
  {
    v80 = 0;
    LODWORD(v81) = 0;
    WTF::fastFree((unint64_t)v49, v40, v41, v42, v43, v44, v45, v46);
  }
  v51 = __ldxr(v13);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v13))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v41, v42, v43, v44, v45, v46);
}

void JSC::InByStatus::computeForStubInfoWithoutExitSiteFeedback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  WTF *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  WTF *v90;
  int Concurrently;
  uint64_t v92;
  int v93;
  WTF *v94;
  uint64_t v95;
  _BYTE v96[32];

  v7 = JSC::StructureStubInfo::summary(a2, a3);
  if (v7 - 1 >= 3)
  {
    if (v7 > 5u || ((1 << v7) & 0x31) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1981888C4);
    }
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 1;
    v50 = v7;
    if (v7)
    {
      if (v7 - 4 >= 2)
      {
        if (v7 - 1 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198188724);
        }
        __break(0xC471u);
        JUMPOUT(0x1981887B4);
      }
      v50 = 3;
    }
    *(_DWORD *)a1 = v50;
    return;
  }
  v94 = (WTF *)v96;
  v95 = 1;
  v93 = 1;
  v15 = *(unsigned __int8 *)(a3 + 123);
  if (v15 != 4)
  {
    if (v15 == 3)
    {
      v55 = *(_DWORD *)(a3 + 12);
      if (v55)
        v56 = 16 * (v55 & 0xFFFFFFFE);
      else
        v56 = 0;
      if ((*(_WORD *)(v56 + 12) & 0x10) == 0)
      {
        v57 = *(_QWORD *)(a3 + 16);
        if (!v57
          || ((v57 & 1) == 0 ? (v58 = *(_DWORD **)(v57 + 8)) : (v58 = (_DWORD *)(v57 & 0xFFFFFFFFFFFFFFFELL)), !v58))
        {
          __break(0xC471u);
          JUMPOUT(0x19818877CLL);
        }
        v89 = 0;
        v90 = 0;
        v92 = v57;
        LODWORD(v85) = 0;
        Concurrently = JSC::Structure::getConcurrently(v56, v58, &v85, v10, v11, v12, v13, v14);
        if (Concurrently == -1 || (v85 & 0x60) != 0)
        {
          *(_DWORD *)a1 = 3;
          *(_QWORD *)(a1 + 8) = a1 + 24;
          *(_QWORD *)(a1 + 16) = 1;
          v90 = 0;
        }
        else
        {
          v89 = v56;
          JSC::appendICStatusVariant<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::InByVariant>((uint64_t)&v94, (unint64_t)&v89, v9, v10, v11, v12, v13, v14);
          *(_DWORD *)a1 = v93;
          WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::VectorBuffer(a1 + 8, &v94, v59, v60, v61, v62, v63, v64);
          v65 = (unsigned int *)v90;
          v90 = 0;
          if (v65)
          {
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, v65);
              WTF::fastFree((unint64_t)v65, v8, v9, v10, v11, v12, v13, v14);
            }
          }
        }
        if ((v89 & 1) != 0)
          WTF::fastFree(v89 & 0xFFFFFFFFFFFFFFFCLL, v8, v9, v10, v11, v12, v13, v14);
        goto LABEL_92;
      }
    }
    else if (!*(_BYTE *)(a3 + 123))
    {
      *(_DWORD *)a1 = 0;
      goto LABEL_61;
    }
    v54 = 3;
LABEL_60:
    *(_DWORD *)a1 = v54;
LABEL_61:
    *(_QWORD *)(a1 + 8) = a1 + 24;
    goto LABEL_91;
  }
  v16 = *(_DWORD **)(a3 + 64);
  v17 = v16[3];
  if (v17 == 1)
  {
    v18 = *(unsigned __int8 *)(**(_QWORD **)v16 + 4);
    if (v18 != 112 && v18 != 19)
      goto LABEL_8;
    v51 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) != 0)
    {
      v74 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
      if ((v51 & 2) != 0
        || ((v75 = *(unsigned int *)((v51 & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
          ? (v76 = (_DWORD)v75 == -1)
          : (v76 = 1),
            v76))
      {
        v77 = 2;
      }
      else if (v75 >> 28)
      {
        v82 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v82 = v74;
        *(_DWORD *)(v82 + 8) = v75;
        v77 = 1;
        v74 = v82;
      }
      else
      {
        v77 = *(_QWORD *)(v51 & 0xFFFFFFFF8);
        v74 = v75 << 36;
      }
      v51 = v74 | v77;
    }
    v88 = v51;
    v52 = *a4;
    if ((*a4 & 1) != 0)
    {
      v78 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
      if ((v52 & 2) != 0
        || ((v79 = *(unsigned int *)((v52 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
          ? (v80 = (_DWORD)v79 == -1)
          : (v80 = 1),
            v80))
      {
        v81 = 2;
      }
      else if (v79 >> 28)
      {
        v83 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v83 = v78;
        *(_DWORD *)(v83 + 8) = v79;
        v81 = 1;
        v78 = v83;
      }
      else
      {
        v81 = *(_QWORD *)(v52 & 0xFFFFFFFF8);
        v78 = v79 << 36;
      }
      v52 = v78 | v81;
    }
    v87 = v52;
    if (!JSC::isSameStyledCodeOrigin(&v88, &v87, v9, v10, v11, v12, v13, v14))
    {
      if ((v87 & 1) != 0 && (v87 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v87 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
      if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v88 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
      goto LABEL_8;
    }
    v53 = *(_WORD *)(a3 + 129);
    if ((v87 & 1) != 0 && (v87 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v87 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
    if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v88 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
    if ((v53 & 2) != 0)
    {
LABEL_8:
      v17 = v16[3];
      goto LABEL_9;
    }
    v54 = 2;
    goto LABEL_60;
  }
LABEL_9:
  if (!v17)
  {
LABEL_48:
    WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v94, HIDWORD(v95), v9, v10, v11, v12, v13, v14);
    *(_DWORD *)a1 = v93;
    WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::VectorBuffer(a1 + 8, &v94, v44, v45, v46, v47, v48, v49);
    goto LABEL_92;
  }
  v20 = 0;
  v21 = a1 + 24;
  while (1)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v16 + 8 * v20);
    if (*(_BYTE *)(v22 + 5)
      || *(_QWORD *)(v22 + 24)
      || (JSC::AccessCase::requiresIdentifierNameMatch(*(JSC::AccessCase **)(*(_QWORD *)v16 + 8 * v20)) & 1) == 0)
    {
      break;
    }
    v23 = *(unsigned __int8 *)(v22 + 4);
    v24 = v23 > 0x20;
    v25 = (1 << v23) & 0x100000014;
    if (v24 || v25 == 0)
    {
      v27 = *(_DWORD *)(v22 + 12);
      if (!v27)
        break;
LABEL_20:
      v28 = v27 & 0xFFFFFFFE;
      if (!v28)
        break;
      v29 = 16 * v28;
      goto LABEL_22;
    }
    v29 = *(_QWORD *)(16 * (*(_DWORD *)(v22 + 12) & 0xFFFFFFFE) + 0x40);
    if (!v29)
      break;
    if (*(_BYTE *)(v29 + 5) != 1)
    {
      v27 = *(_DWORD *)(v29 + 80);
      if (!v27)
        break;
      goto LABEL_20;
    }
LABEL_22:
    v30 = *(_QWORD *)(v22 + 32);
    if (v30)
    {
      if ((v30 & 1) != 0)
        v31 = (_DWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
      else
        v31 = *(_DWORD **)(v30 + 8);
    }
    else
    {
      v31 = 0;
    }
    JSC::ComplexGetStatus::computeFor(v29, (unsigned int **)(v22 + 16), v31, v10, v11, v12, v13, v14, &v85);
    if ((_DWORD)v85 == 2)
    {
      if (*(unsigned __int8 *)(v22 + 4) - 17 >= 2)
        goto LABEL_114;
      v32 = *(_QWORD *)(v22 + 32);
      v84 = v29;
      v33 = HIDWORD(v85);
      v89 = 0;
      if ((v29 & 1) != 0)
        WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)&v89, &v84);
      else
        v89 = v29 & 0xFFFFFFFFFFFFFFFDLL;
      v34 = (unsigned int *)v86;
      if (v86)
      {
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      v90 = (WTF *)v34;
      Concurrently = v33;
      v92 = v32;
      if ((v84 & 1) != 0)
        WTF::fastFree(v84 & 0xFFFFFFFFFFFFFFFCLL, v8, v9, v10, v11, v12, v13, v14);
      v36 = JSC::appendICStatusVariant<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::InByVariant>((uint64_t)&v94, (unint64_t)&v89, v9, v10, v11, v12, v13, v14);
      if ((v36 & 1) != 0)
      {
        v37 = 11;
      }
      else
      {
        *(_DWORD *)a1 = 3;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = 1;
        v37 = 1;
      }
      v38 = (unsigned int *)v90;
      v90 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      if ((v89 & 1) != 0)
        WTF::fastFree(v89 & 0xFFFFFFFFFFFFFFFCLL, v8, v9, v10, v11, v12, v13, v14);
      if (v36)
LABEL_122:
        v37 = 0;
    }
    else
    {
      if ((_DWORD)v85 == 1)
      {
LABEL_114:
        *(_DWORD *)a1 = 3;
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = 1;
        v37 = 1;
        goto LABEL_42;
      }
      if ((_DWORD)v85)
        goto LABEL_122;
      v37 = 10;
    }
LABEL_42:
    v41 = (unsigned int *)v86;
    v86 = 0;
    if (v41)
    {
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v41);
        WTF::fastFree((unint64_t)v41, v8, v9, v10, v11, v12, v13, v14);
      }
    }
    if (v37 != 10 && v37)
      goto LABEL_92;
    if (++v20 >= (unint64_t)v16[3])
      goto LABEL_48;
  }
  *(_DWORD *)a1 = 3;
  *(_QWORD *)(a1 + 8) = v21;
LABEL_91:
  *(_QWORD *)(a1 + 16) = 1;
LABEL_92:
  v68 = v94;
  if (HIDWORD(v95))
  {
    v70 = (WTF *)((char *)v94 + 32 * HIDWORD(v95));
    do
    {
      v71 = (unsigned int *)*((_QWORD *)v68 + 1);
      *((_QWORD *)v68 + 1) = 0;
      if (v71)
      {
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          atomic_store(1u, v71);
          WTF::fastFree((unint64_t)v71, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      if ((*(_QWORD *)v68 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v68 & 0xFFFFFFFFFFFFFFFCLL, v8, v9, v10, v11, v12, v13, v14);
      v68 = (WTF *)((char *)v68 + 32);
    }
    while (v68 != v70);
    v68 = v94;
  }
  if (v96 != (_BYTE *)v68 && v68 != 0)
  {
    v94 = 0;
    LODWORD(v95) = 0;
    WTF::fastFree((unint64_t)v68, v8, v9, v10, v11, v12, v13, v14);
  }
}

_DWORD *JSC::InByStatus::operator=(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v9;
  uint64_t v10;
  _DWORD *v12;
  _QWORD **v13;

  *a1 = *a2;
  v9 = (_QWORD **)(a1 + 2);
  v10 = a1[5];
  if ((_DWORD)v10)
  {
    v12 = a2;
    v13 = v9;
    WTF::VectorTypeOperations<JSC::InByVariant>::destruct(*v9, &(*v9)[4 * v10], a3, a4, a5, a6, a7, a8);
    a2 = v12;
    v9 = v13;
  }
  WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt((uint64_t)v9, a2 + 2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::InByStatus::~InByStatus(JSC::InByStatus *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::InByStatus *v10;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 1);
    v13 = &v12[4 * v9];
    do
    {
      v14 = (unsigned int *)v12[1];
      v12[1] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if ((*v12 & 1) != 0)
        WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v12 += 4;
    }
    while (v12 != v13);
  }
  v10 = (JSC::InByStatus *)*((_QWORD *)this + 1);
  if ((JSC::InByStatus *)((char *)this + 24) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::InByStatus::computeFor(uint64_t a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t ***a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t **v14;
  unint64_t v15;
  unsigned __int8 hasBadCacheExitSite;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t **v26;
  unsigned __int8 *v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  int v42;
  WTF *v43;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  WTF *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t **v62;
  unsigned __int8 v63;
  WTF *v64;
  WTF *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t **v94;
  unint64_t v95;
  int v96;
  WTF *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  WTF *v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t ***v105[6];
  uint64_t v106;
  _QWORD v107[4];
  _DWORD *v108;
  uint64_t v109;
  unsigned __int8 v110;
  int v111;
  uint64_t v112;

  v12 = a1;
  v112 = a1;
  v14 = *a4;
  if ((*a4 & 2) != 0)
  {
    LODWORD(v15) = -1;
  }
  else if ((v14 & 1) != 0)
  {
    LODWORD(v15) = *(_DWORD *)(((unint64_t)v14 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v15 = (unint64_t)v14 >> 36;
  }
  v111 = v15;
  hasBadCacheExitSite = JSC::hasBadCacheExitSite(a1, v15, a3, (uint64_t)a4, a5, a6, a7, a8);
  v110 = hasBadCacheExitSite;
  v23 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v23)
  {
    v24 = *(uint64_t **)a3;
    v93 = *(_QWORD *)a3 + 8 * v23;
    while (1)
    {
      v25 = *v24;
      v109 = *v24;
      v26 = *a4;
      if ((*a4 & 1) != 0)
      {
        v70 = *(_QWORD *)((unint64_t)v26 & 0xFFFFFFFF8);
        if ((v26 & 2) != 0
          || ((v71 = *(unsigned int *)(((unint64_t)v26 & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
            ? (v72 = (_DWORD)v71 == -1)
            : (v72 = 1),
              v72))
        {
          v73 = 2;
        }
        else if (v71 >> 28)
        {
          v91 = *(_QWORD *)((unint64_t)v26 & 0xFFFFFFFF8);
          v70 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v70 = v91;
          *(_DWORD *)(v70 + 8) = v71;
          v73 = 1;
        }
        else
        {
          v73 = *(_QWORD *)((unint64_t)v26 & 0xFFFFFFFF8);
          v70 = v71 << 36;
        }
        v74 = v70 | v73;
        v106 = v70 | v73;
        JSC::ICStatusContext::get(v25, &v106, (uint64_t)v17, v18, v19, v20, v21, v22, (uint64_t)v107);
        if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v74 & 0xFFFFFFFF8, v75, v76, v18, v19, v20, v21, v22);
      }
      else
      {
        v106 = (uint64_t)*a4;
        JSC::ICStatusContext::get(v25, &v106, (uint64_t)v17, v18, v19, v20, v21, v22, (uint64_t)v107);
      }
      v105[0] = (uint64_t ***)&v109;
      v105[1] = a4;
      v105[2] = (uint64_t ***)&v112;
      v105[3] = a2;
      v105[4] = (uint64_t ***)&v111;
      v105[5] = (uint64_t ***)&v110;
      if (!v107[0])
        goto LABEL_34;
      v101 = 0;
      v102 = (WTF *)v104;
      v103 = 1;
      v27 = (unsigned __int8 *)(*(_QWORD *)(v109 + 8) + 16);
      if (__ldaxr(v27))
        break;
      if (__stxr(1u, v27))
        goto LABEL_11;
LABEL_12:
      v29 = *(_QWORD *)(v112 + 72);
      v30 = v107[0];
      v31 = (unint64_t)*a4;
      if ((*a4 & 1) != 0)
      {
        v77 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
        if ((v31 & 2) != 0
          || (v78 = *(unsigned int *)((v31 & 0xFFFFFFFF8) + 8), (_DWORD)v78 == 0x3FFFFFFF)
          || (_DWORD)v78 == -1)
        {
          v79 = 2;
        }
        else if (v78 >> 28)
        {
          v87 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
          v88 = v107[0];
          v92 = *(_QWORD *)(v112 + 72);
          v77 = WTF::fastMalloc((WTF *)0x10);
          v30 = v88;
          v29 = v92;
          *(_QWORD *)v77 = v87;
          *(_DWORD *)(v77 + 8) = v78;
          v79 = 1;
        }
        else
        {
          v79 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
          v77 = v78 << 36;
        }
        v31 = v77 | v79;
      }
      v95 = v31;
      JSC::InByStatus::computeForStubInfoWithoutExitSiteFeedback((uint64_t)&v96, v29, v30, (uint64_t *)&v95);
      v101 = v96;
      if (HIDWORD(v103))
        WTF::VectorTypeOperations<JSC::InByVariant>::destruct(v102, (_QWORD *)v102 + 4 * HIDWORD(v103), v32, v33, v34, v35, v36, v37);
      WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt((uint64_t)&v102, &v97, v32, v33, v34, v35, v36, v37);
      if (v99)
      {
        v48 = v97;
        v85 = (WTF *)((char *)v97 + 32 * v99);
        do
        {
          v45 = (unsigned int *)*((_QWORD *)v48 + 1);
          *((_QWORD *)v48 + 1) = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v45);
              v90 = v85;
              WTF::fastFree((unint64_t)v45, v38, v39, v18, v19, v20, v21, v22);
              v85 = v90;
            }
          }
          if ((*(_QWORD *)v48 & 1) != 0)
          {
            v89 = v85;
            WTF::fastFree(*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFCLL, v38, v39, v18, v19, v20, v21, v22);
            v85 = v89;
          }
          v48 = (WTF *)((char *)v48 + 32);
        }
        while (v48 != v85);
      }
      v40 = v97;
      if (&v100 != (uint64_t *)v97 && v97 != 0)
      {
        v97 = 0;
        v98 = 0;
        WTF::fastFree((unint64_t)v40, v38, v39, v18, v19, v20, v21, v22);
      }
      if ((v95 & 1) != 0 && (v95 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v95 & 0xFFFFFFFF8, v38, v39, v18, v19, v20, v21, v22);
      v42 = __ldxr(v27);
      if (v42 == 1)
      {
        if (!__stlxr(0, v27))
          goto LABEL_27;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v27, 0, v39, v18, v19, v20, v21, v22);
LABEL_27:
      if (v101)
      {
        JSC::InByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v105, &v101, v18, v19, v20, v21, v22);
        if (HIDWORD(v103))
        {
          v64 = v102;
          v65 = (WTF *)((char *)v102 + 32 * HIDWORD(v103));
          do
          {
            v66 = (unsigned int *)*((_QWORD *)v64 + 1);
            *((_QWORD *)v64 + 1) = 0;
            if (v66)
            {
              do
              {
                v67 = __ldaxr(v66);
                v68 = v67 - 1;
              }
              while (__stlxr(v68, v66));
              if (!v68)
              {
                atomic_store(1u, v66);
                WTF::fastFree((unint64_t)v66, v53, v54, v55, v56, v57, v58, v59);
              }
            }
            if ((*(_QWORD *)v64 & 1) != 0)
              WTF::fastFree(*(_QWORD *)v64 & 0xFFFFFFFFFFFFFFFCLL, v53, v54, v55, v56, v57, v58, v59);
            v64 = (WTF *)((char *)v64 + 32);
          }
          while (v64 != v65);
        }
        v60 = (unint64_t)v102;
        if (v104 != (_BYTE *)v102 && v102 != 0)
        {
          v102 = 0;
          LODWORD(v103) = 0;
          goto LABEL_78;
        }
        return;
      }
      if (HIDWORD(v103))
      {
        v52 = v102;
        v69 = (WTF *)((char *)v102 + 32 * HIDWORD(v103));
        do
        {
          v49 = (unsigned int *)*((_QWORD *)v52 + 1);
          *((_QWORD *)v52 + 1) = 0;
          if (v49)
          {
            do
            {
              v50 = __ldaxr(v49);
              v51 = v50 - 1;
            }
            while (__stlxr(v51, v49));
            if (!v51)
            {
              atomic_store(1u, v49);
              WTF::fastFree((unint64_t)v49, v38, v39, v18, v19, v20, v21, v22);
            }
          }
          if ((*(_QWORD *)v52 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v52 & 0xFFFFFFFFFFFFFFFCLL, v38, v39, v18, v19, v20, v21, v22);
          v52 = (WTF *)((char *)v52 + 32);
        }
        while (v52 != v69);
      }
      v43 = v102;
      if (v104 != (_BYTE *)v102 && v102 != 0)
      {
        v102 = 0;
        LODWORD(v103) = 0;
        WTF::fastFree((unint64_t)v43, v38, v39, v18, v19, v20, v21, v22);
      }
LABEL_34:
      v17 = v108;
      if (v108)
      {
        JSC::InByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(a9, v105, v108, v18, v19, v20, v21, v22);
        return;
      }
      if (++v24 == (uint64_t *)v93)
      {
        v12 = v112;
        LODWORD(v15) = v111;
        v63 = v110;
        goto LABEL_63;
      }
    }
    __clrex();
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v27);
    goto LABEL_12;
  }
  v63 = hasBadCacheExitSite;
LABEL_63:
  v62 = *a4;
  if ((*a4 & 1) != 0)
  {
    v80 = *(_QWORD *)((unint64_t)v62 & 0xFFFFFFFF8);
    if ((v62 & 2) != 0
      || ((v81 = *(unsigned int *)(((unint64_t)v62 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
        ? (v82 = (_DWORD)v81 == -1)
        : (v82 = 1),
          v82))
    {
      v83 = 2;
    }
    else if (v81 >> 28)
    {
      v86 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v86 = v80;
      *(_DWORD *)(v86 + 8) = v81;
      v83 = 1;
      v80 = v86;
    }
    else
    {
      v83 = *(_QWORD *)((unint64_t)v62 & 0xFFFFFFFF8);
      v80 = v81 << 36;
    }
    v84 = v80 | v83;
    v94 = (uint64_t **)v84;
    JSC::InByStatus::computeFor(a9, v12, (uint64_t *)a2, v15, v63, (uint64_t *)&v94, v21, v22);
    if ((v84 & 1) != 0)
    {
      v60 = v84 & 0xFFFFFFFF8;
      if ((v84 & 0xFFFFFFFF8) != 0)
LABEL_78:
        WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
    }
  }
  else
  {
    v94 = *a4;
    JSC::InByStatus::computeFor(a9, v12, (uint64_t *)a2, v15, v63, (uint64_t *)&v94, v21, v22);
  }
}

void JSC::InByStatus::computeFor(JSC::CodeBlock *,WTF::HashMap<JSC::CodeOrigin,JSC::ICStatus,JSC::CodeOriginApproximateHash,WTF::HashTraits<JSC::CodeOrigin>,WTF::HashTraits<JSC::ICStatus>,WTF::HashTableTraits> &,WTF::Vector<JSC::ICStatusContext *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CodeOrigin)::$_0::operator()(uint64_t a1, uint64_t ****a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  WTF *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF *v69;
  uint64_t v71;
  void *v72;
  WTF *v73;
  WTF *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  int v87;
  WTF *v88;
  uint64_t v89;
  _BYTE v90[32];

  v11 = **a2;
  v12 = (uint64_t)*a2[1];
  v13 = (uint64_t *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 1) == 0)
    goto LABEL_2;
  v53 = *v13;
  if ((v12 & 2) != 0
    || ((v54 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v54 != 0x3FFFFFFF) ? (v55 = v54 == -1) : (v55 = 1), v55))
  {
    v56 = 2;
  }
  else if (v54 >> 28)
  {
    v84 = **a2;
    v78 = v54;
    v79 = WTF::fastMalloc((WTF *)0x10);
    v11 = v84;
    *(_QWORD *)v79 = v53;
    *(_DWORD *)(v79 + 8) = v78;
    v56 = 1;
    v53 = v79;
  }
  else
  {
    v56 = *v13;
    v53 = 0;
  }
  v61 = v53 | v56;
  v13 = (uint64_t *)(v61 & 0xFFFFFFFF8);
  if ((v61 & 1) != 0)
  {
    v14 = 0;
    v15 = (uint64_t *)*v13;
    if (*v13)
    {
LABEL_67:
      v16 = v15 != *v11;
      if ((v14 & 1) != 0)
        goto LABEL_4;
      goto LABEL_68;
    }
  }
  else
  {
LABEL_2:
    v14 = 1;
    v15 = v13;
    if (v13)
      goto LABEL_67;
  }
  v16 = 0;
  if ((v14 & 1) != 0)
    goto LABEL_4;
LABEL_68:
  if (v13)
    WTF::fastFree((unint64_t)v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_4:
  if (v16)
  {
    if ((*(_BYTE *)a2[5] & 2) != 0)
    {
      *(_DWORD *)a1 = 3;
      *(_QWORD *)(a1 + 8) = a1 + 24;
      *(_QWORD *)(a1 + 16) = 1;
      return;
    }
    *(_DWORD *)a1 = *a3;
    v17 = a3[5];
    v18 = a1 + 24;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_DWORD *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 20) = v17;
    if (v17 < 2)
    {
      if (!(_DWORD)v17)
        return;
LABEL_8:
      v19 = *((_QWORD *)a3 + 1);
      v20 = v19 + 32 * v17;
      do
      {
        *(_QWORD *)v18 = 0;
        if ((*(_QWORD *)v19 & 1) != 0)
          WTF::TinyPtrSet<JSC::Structure *>::copyFromOutOfLine((uint64_t *)v18, (_QWORD *)v19);
        else
          *(_QWORD *)v18 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFFDLL;
        v21 = *(unsigned int **)(v19 + 8);
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        *(_QWORD *)(v18 + 8) = v21;
        *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
        v18 += 32;
        v19 += 32;
      }
      while (v19 != v20);
      return;
    }
    if (!(v17 >> 27))
    {
      v18 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 8) = v18;
      v17 = a3[5];
      if (!(_DWORD)v17)
        return;
      goto LABEL_8;
    }
    __break(0xC471u);
LABEL_108:
    JUMPOUT(0x198189310);
  }
  v23 = (uint64_t *)a2[1];
  v24 = (uint64_t)*a2[2];
  v25 = (uint64_t *)a2[3];
  v26 = *(unsigned int *)a2[4];
  v27 = *(unsigned __int8 *)a2[5];
  v28 = *v23;
  if ((*v23 & 1) != 0)
  {
    v57 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
    if ((v28 & 2) != 0
      || ((v58 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
        ? (v59 = (_DWORD)v58 == -1)
        : (v59 = 1),
          v59))
    {
      v60 = 2;
    }
    else if (v58 >> 28)
    {
      v83 = v24;
      v85 = v25;
      v82 = v26;
      v80 = v58;
      v81 = WTF::fastMalloc((WTF *)0x10);
      v26 = v82;
      v24 = v83;
      v25 = v85;
      *(_QWORD *)v81 = v57;
      *(_DWORD *)(v81 + 8) = v80;
      v60 = 1;
      v57 = v81;
    }
    else
    {
      v60 = v57;
      v57 = v58 << 36;
    }
    v71 = v57 | v60;
    v86 = v71;
    JSC::InByStatus::computeFor(a1, v24, v25, v26, v27, &v86, a7, a8);
    if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v71 & 0xFFFFFFFF8, v72, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    v86 = *v23;
    JSC::InByStatus::computeFor(a1, v24, v25, v26, v27, &v86, a7, a8);
  }
  v35 = *a3;
  if (*a3)
  {
    v36 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != 3)
    {
      if (v36 == 1)
      {
        if (v35 == 1)
        {
          v37 = a3[5];
          if (!(_DWORD)v37)
          {
LABEL_26:
            WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1 + 8, *(unsigned int *)(a1 + 20), v29, v30, v31, v32, v33, v34);
            return;
          }
          v38 = *((_QWORD *)a3 + 1);
          v39 = 32 * v37;
          while ((JSC::appendICStatusVariant<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::InByVariant>(a1 + 8, v38, v29, v30, v31, v32, v33, v34) & 1) != 0)
          {
            v38 += 32;
            v39 -= 32;
            if (!v39)
              goto LABEL_26;
          }
          v87 = 3;
          v88 = (WTF *)v90;
          v89 = 1;
          *(_DWORD *)a1 = 3;
          v68 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v68)
            WTF::VectorTypeOperations<JSC::InByVariant>::destruct(*(_QWORD **)(a1 + 8), (_QWORD *)(*(_QWORD *)(a1 + 8) + 32 * v68), v29, v30, v31, v32, v33, v34);
          WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt(a1 + 8, &v88, v29, v30, v31, v32, v33, v34);
          if (HIDWORD(v89))
          {
            v73 = v88;
            v74 = (WTF *)((char *)v88 + 32 * HIDWORD(v89));
            do
            {
              v75 = (unsigned int *)*((_QWORD *)v73 + 1);
              *((_QWORD *)v73 + 1) = 0;
              if (v75)
              {
                do
                {
                  v76 = __ldaxr(v75);
                  v77 = v76 - 1;
                }
                while (__stlxr(v77, v75));
                if (!v77)
                {
                  atomic_store(1u, v75);
                  WTF::fastFree((unint64_t)v75, v41, v42, v43, v44, v45, v46, v47);
                }
              }
              if ((*(_QWORD *)v73 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v73 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
              v73 = (WTF *)((char *)v73 + 32);
            }
            while (v73 != v74);
          }
        }
        else
        {
          v87 = 3;
          v88 = (WTF *)v90;
          v89 = 1;
          *(_DWORD *)a1 = 3;
          v62 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v62)
            WTF::VectorTypeOperations<JSC::InByVariant>::destruct(*(_QWORD **)(a1 + 8), (_QWORD *)(*(_QWORD *)(a1 + 8) + 32 * v62), v29, v30, v31, v32, v33, v34);
          WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt(a1 + 8, &v88, v29, v30, v31, v32, v33, v34);
          if (HIDWORD(v89))
          {
            v63 = v88;
            v64 = (WTF *)((char *)v88 + 32 * HIDWORD(v89));
            do
            {
              v65 = (unsigned int *)*((_QWORD *)v63 + 1);
              *((_QWORD *)v63 + 1) = 0;
              if (v65)
              {
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  atomic_store(1u, v65);
                  WTF::fastFree((unint64_t)v65, v41, v42, v43, v44, v45, v46, v47);
                }
              }
              if ((*(_QWORD *)v63 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v63 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
              v63 = (WTF *)((char *)v63 + 32);
            }
            while (v63 != v64);
          }
        }
        goto LABEL_86;
      }
      if (v36 == 2)
      {
        if (v35 == 2)
          return;
        if (v35 != 1)
        {
          v87 = 3;
          v88 = (WTF *)v90;
          v89 = 1;
          *(_DWORD *)a1 = 3;
          v40 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v40)
            WTF::VectorTypeOperations<JSC::InByVariant>::destruct(*(_QWORD **)(a1 + 8), (_QWORD *)(*(_QWORD *)(a1 + 8) + 32 * v40), v29, v30, v31, v32, v33, v34);
          WTF::VectorBuffer<JSC::InByVariant,1ul,WTF::FastMalloc>::adopt(a1 + 8, &v88, v29, v30, v31, v32, v33, v34);
          if (HIDWORD(v89))
          {
            v48 = v88;
            v49 = (WTF *)((char *)v88 + 32 * HIDWORD(v89));
            do
            {
              v50 = (unsigned int *)*((_QWORD *)v48 + 1);
              *((_QWORD *)v48 + 1) = 0;
              if (v50)
              {
                do
                {
                  v51 = __ldaxr(v50);
                  v52 = v51 - 1;
                }
                while (__stlxr(v52, v50));
                if (!v52)
                {
                  atomic_store(1u, v50);
                  WTF::fastFree((unint64_t)v50, v41, v42, v43, v44, v45, v46, v47);
                }
              }
              if ((*(_QWORD *)v48 & 1) != 0)
                WTF::fastFree(*(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFCLL, v41, v42, v43, v44, v45, v46, v47);
              v48 = (WTF *)((char *)v48 + 32);
            }
            while (v48 != v49);
          }
LABEL_86:
          v69 = v88;
          if (v90 != (_BYTE *)v88 && v88 != 0)
          {
            v88 = 0;
            LODWORD(v89) = 0;
            WTF::fastFree((unint64_t)v69, v41, v42, v43, v44, v45, v46, v47);
          }
          return;
        }
      }
      else if (v36)
      {
        __break(0xC471u);
        goto LABEL_108;
      }
      *(_DWORD *)a1 = v35;
      WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 8, a3 + 2, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::InByVariant::~InByVariant(JSC::InByVariant *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((*(_QWORD *)this & 1) != 0)
    WTF::fastFree(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::filterICStatusVariants<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int v13;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;

  v9 = *(uint64_t **)a1;
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1 + 32 * v10;
  if ((_DWORD)v10)
  {
    v13 = 0;
    v14 = *(uint64_t **)a1;
    v15 = (char *)(*(_QWORD *)a1 + 32 * v10);
    v16 = (unint64_t)v15;
    do
    {
      WTF::TinyPtrSet<JSC::Structure *>::filter(v9, a2, a3, a4, a5, a6, a7, a8);
      if ((*v9 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      {
        v20 = (unint64_t)v9;
        if (v16 != *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12))
        {
          if (v9 == (uint64_t *)v15)
          {
            v20 = v16;
          }
          else
          {
            WTF::VectorMover<false,JSC::InByVariant>::moveOverlapping(v15, (char *)v9, v16, a4, a5, a6, a7, a8);
            v20 = v16 + (char *)v14 - v15;
          }
        }
        v15 = (char *)(v9 + 4);
        JSC::InByVariant::~InByVariant((JSC::InByVariant *)v9, v17, a3, a4, a5, a6, a7, a8);
        ++v13;
        v16 = v20;
      }
      v9 += 4;
      v14 += 4;
    }
    while ((unint64_t)v9 < v11);
    v9 = *(uint64_t **)a1;
    v18 = *(unsigned int *)(a1 + 12);
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
    v11 = v16;
  }
  else
  {
    v18 = 0;
    v13 = 0;
    v15 = (char *)(*(_QWORD *)a1 + 32 * v10);
  }
  v19 = (char *)&v9[4 * v18];
  if (v15 != v19)
  {
    WTF::VectorMover<false,JSC::InByVariant>::moveOverlapping(v15, v19, v11, a4, a5, a6, a7, a8);
    LODWORD(v10) = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 12) = v10 - v13;
}

uint64_t JSC::InByStatus::visitAggregate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(unsigned int *)(result + 20);
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(*(_QWORD *)(result + 8) + 24);
    do
    {
      v6 = *v5;
      v5 += 4;
      v7 = v6 & 1;
      if (v6)
        v8 = v7 == 0;
      else
        v8 = 0;
      if (v8)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      v4 -= 32;
    }
    while (v4);
  }
  return result;
}

void JSC::InByStatus::visitAggregate(JSC::InByStatus *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;

  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v10 = 32 * v8;
    v11 = (unint64_t *)(*((_QWORD *)this + 1) + 24);
    do
    {
      v13 = *v11;
      v11 += 4;
      v12 = v13;
      v14 = v13 & 1;
      if (v13)
        v15 = v14 == 0;
      else
        v15 = 0;
      if (!v15)
        goto LABEL_7;
      if ((v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v12 - 79) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
      else
      {
        v16 = v12 & 0xFFFFFFFFFFFFC000;
        v17 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        {
          v18 = v12;
          v19 = v12 & 0xFFFFFFFFFFFFC000;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v17, a3, a4, a5, a6, a7, a8);
          v12 = v18;
          v16 = v19;
        }
        if (((*(_QWORD *)(v16 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0 && !*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
LABEL_7:
      v10 -= 32;
    }
    while (v10);
  }
}

uint64_t JSC::InByStatus::finalize(JSC::InByStatus *this, JSC::VM *a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    return 1;
  v4 = (unint64_t *)*((_QWORD *)this + 1);
  v5 = &v4[4 * v2];
  do
  {
    v6 = *v4;
    if ((*v4 & 1) != 0)
      v7 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    else
      v7 = v6 > 3;
    if (v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *v4 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*v4 & 1) != 0)
          v10 = *(_QWORD *)(v10 + v8 + 8);
        if ((v10 & 8) != 0)
        {
          if ((*(_BYTE *)(v10 - 79) & 1) == 0)
            return 0;
        }
        else if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
               || ((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) == 0)
        {
          return 0;
        }
        v8 += 8;
      }
      while (v9 != v8);
    }
    result = JSC::ObjectPropertyConditionSet::areStillLive(v4 + 1, (uint64_t)a2);
    if (!(_DWORD)result)
      break;
    v4 += 4;
  }
  while (v4 != v5);
  return result;
}

uint64_t JSC::InByStatus::singleIdentifier(JSC::InByStatus *this)
{
  unsigned int v1;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_DWORD *)this + 5);
  if (!v1)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v7 = result;
  if (result && v1 >= 2)
  {
    v4 = 1;
    for (i = 56; ; i += 32)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 1) + i);
      if (!v6 || !JSC::CacheableIdentifier::operator==(&v6, &v7))
        break;
      if (++v4 >= (unint64_t)*((unsigned int *)this + 5))
        return v7;
    }
    return 0;
  }
  return result;
}

uint64_t JSC::InByStatus::dump(JSC::InByStatus *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  const char *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  JSC::InByVariant **v10[5];
  char v11;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v4, "%s", "(");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v5 = *(int *)this;
  if (v5 <= 3)
  {
    v6 = off_1E3581460[v5];
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v7, "%s", v6);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v10[0] = (JSC::InByVariant **)((char *)this + 8);
  v10[1] = (JSC::InByVariant **)", ";
  v10[2] = (JSC::InByVariant **)3;
  v10[3] = (JSC::InByVariant **)&str_56_1;
  v10[4] = (JSC::InByVariant **)1;
  v11 = 0;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v8, "%s", ", ");
  WTF::ListDump<WTF::Vector<JSC::InByVariant,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(v10, (uint64_t)v8);
  WTF::PrintStream::printf(v8, "%s", ")");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::InByVariant::dumpInContext(JSC::InByVariant *this, WTF::PrintStream *a2, JSC::DumpContext *a3)
{
  JSC::CacheableIdentifier *v6;
  WTF::PrintStream *v7;
  unint64_t v8;
  const char *v9;
  WTF::PrintStream *v10;
  int v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;

  v6 = (JSC::InByVariant *)((char *)this + 24);
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v7, "%s", "<id='");
  JSC::CacheableIdentifier::dump(v6, v7);
  WTF::PrintStream::printf(v7, "%s", "', ");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    if (!*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_3;
LABEL_5:
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    JSC::StructureSet::dumpInContext(this, v10, a3);
    WTF::PrintStream::printf(v10, "%s", ", ");
    JSC::ObjectPropertyConditionSet::dumpInContext((JSC::InByVariant *)((char *)this + 8), v10, a3);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v11 = *((_DWORD *)this + 4);
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v12, "%s", ", offset = ");
    WTF::PrintStream::printf(v12, "%d", v11);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v9 = ">";
    goto LABEL_6;
  }
  if (v8 > 3)
    goto LABEL_5;
LABEL_3:
  v9 = "empty>";
LABEL_6:
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v13, "%s", v9);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::InlineAccess::dumpCacheSizesAndCrash(JSC::InlineAccess *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149[3];
  unsigned int v150[2];
  char v151;
  __int16 v152;
  char v153;
  unsigned int v154[4];
  _DWORD v155[8];
  _DWORD v156[6];
  uint64_t v157;
  unsigned int v158;
  char v159;

  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::patchableBranch8((uint64_t)v154, (uint64_t)v155, 0x500000000, v1, v2, v3, v4, v5);
  JSC::MacroAssembler::loadPtr(v155, v6, v7, v8, v9, v10, v11, v12);
  JSC::AssemblyHelpers::branchIfRopeStringImpl((uint64_t)v154, (uint64_t)v155, v19, v13, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::load32((uint64_t)v155, 0x400000001, 0, v20, v21, v22, v23, v24);
  JSC::ARM64Assembler::label(v156, v25, v26, v27, v28, v29, v30, v31, v149);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v157, 335544320, v32, v33, v34, v35, v36, v37);
  if (v159)
    v44 = 69;
  else
    v44 = 65;
  v150[0] = v149[0];
  v150[1] = 0;
  v151 = v44;
  v152 = 15;
  v153 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v154, (uint64_t)v155, v38, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::load32((uint64_t)v155, 0x1000000000, 0, v45, v46, v47, v48, v49);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v150, (uint64_t)v155, v50, v51, v52, v53, v54, v55);
  JSC::AssemblyHelpers::boxInt32(v155, 0, 0, 1, v56, v57, v58, v59);
  *(_QWORD *)v149 = v158;
  WTF::dataLog<char [21],unsigned long,char [2]>("string length size: ", v149);
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::load8((uint64_t)v155, 0x400000000, 1, v60, v61, v62, v63, v64);
  JSC::MacroAssemblerARM64::and32((uint64_t)v155);
  JSC::MacroAssemblerARM64::patchableBranch32((uint64_t)v154, (uint64_t)v155, v65, v66, v67, v68, v69, v70);
  JSC::MacroAssembler::loadPtr(v155, v71, v72, v73, v74, v75, v76, v77);
  JSC::MacroAssemblerARM64::load32((uint64_t)v155, 0xFFFFFFF800000001, 1, v78, v79, v80, v81, v82);
  JSC::AssemblyHelpers::boxInt32(v155, 1, 0, 1, v83, v84, v85, v86);
  *(_QWORD *)v154 = v158;
  WTF::dataLog<char [20],unsigned long,char [2]>(v154);
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::patchableBranch32((uint64_t)v154, (uint64_t)v155, v87, v88, v89, v90, v91, v92);
  JSC::MacroAssembler::loadPtr(v155, v93, v94, v95, v96, v97, v98, v99);
  JSC::AssemblyHelpers::loadValue((uint64_t)v155, 0xAB21CA00000001, v100, v101, v102, v103, v104, v105);
  *(_QWORD *)v154 = v158;
  WTF::dataLog<char [17],unsigned long,char [2]>("out of line offset cache size: ", v154, "\n");
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::patchableBranch32((uint64_t)v154, (uint64_t)v155, v106, v107, v108, v109, v110, v111);
  JSC::AssemblyHelpers::loadValue((uint64_t)v155, 0xAB21CA00000000, v112, v113, v114, v115, v116, v117);
  *(_QWORD *)v154 = v158;
  WTF::dataLog<char [27],unsigned long,char [2]>(v154);
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::patchableBranch32((uint64_t)v154, (uint64_t)v155, v118, v119, v120, v121, v122, v123);
  JSC::AssemblyHelpers::storeValue((uint64_t)v155, 0xAB21CA00000000, v124, v125, v126, v127, v128, v129);
  *(_QWORD *)v154 = v158;
  WTF::dataLog<char [21],unsigned long,char [2]>("replace cache size: ", v154);
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v155, 0);
  JSC::MacroAssemblerARM64::patchableBranch32((uint64_t)v154, (uint64_t)v155, v130, v131, v132, v133, v134, v135);
  JSC::MacroAssembler::loadPtr(v155, v136, v137, v138, v139, v140, v141, v142);
  JSC::AssemblyHelpers::storeValue((uint64_t)v155, 0x1D61600000000, v143, v144, v145, v146, v147, v148);
  *(_QWORD *)v154 = v158;
  WTF::dataLog<char [17],unsigned long,char [2]>("replace out of line cache size: ", v154, "\n");
  JSC::CCallHelpers::~CCallHelpers((JSC::CCallHelpers *)v155);
  __break(0xC471u);
}

void JSC::MacroAssemblerARM64::patchableBranch8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_BYTE *)(a2 + 328) = 1;
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load8(a2, a3, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a2, 1, 17, 2, v10, v11, v12, v13, (uint64_t)&v15);
    *(_BYTE *)(a2 + 328) = 0;
    v14 = v16;
    *(_DWORD *)a1 = v15;
    *(_QWORD *)(a1 + 4) = v14;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::MacroAssembler::loadPtr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a1[50];
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = -129990655;
  a1[50] += 4;
}

void JSC::AssemblyHelpers::branchIfRopeStringImpl(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, 1, 1, a6, a7, a8, a9, a1, a3);
}

uint64_t WTF::dataLog<char [21],unsigned long,char [2]>(const char *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", a1);
  WTF::PrintStream::printf(v6, "%lu", *a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::MacroAssemblerARM64::and32(uint64_t a1)
{
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xF, 1, 1);
}

void JSC::MacroAssemblerARM64::patchableBranch32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_BYTE *)(a2 + 328) = 1;
  JSC::MacroAssemblerARM64::branch32(a2, 1, 1, 9, a5, a6, a7, a8, (uint64_t)&v11);
  *(_BYTE *)(a2 + 328) = 0;
  v10 = v12;
  *(_DWORD *)a1 = v11;
  *(_QWORD *)(a1 + 4) = v10;
}

{
  char v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)(a2 + 328) = 1;
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19818A37CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v10 = *(_BYTE *)(a2 + 304);
  v11 = *(_DWORD *)(a2 + 200);
  if (v11 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v11) = v10 & 0x1F | 0xB8400000;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(a2, 1, 17, 11215306, a5, a6, a7, a8, (uint64_t)&v13);
  *(_BYTE *)(a2 + 328) = 0;
  v12 = v14;
  *(_DWORD *)a1 = v13;
  *(_QWORD *)(a1 + 4) = v12;
}

uint64_t WTF::dataLog<char [20],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "array length size: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::AssemblyHelpers::loadValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MacroAssemblerARM64::load64(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [27],unsigned long,char [2]>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "inline offset cache size: ");
  WTF::PrintStream::printf(v4, "%lu", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::AssemblyHelpers::storeValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::MacroAssemblerARM64::store64(a1, 0, a2, a4, a5, a6, a7, a8);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, 10, a1 + 264, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store64(a1, 16, a2, v10, v11, v12, v13, v14);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::InlineAccess::generateSelfPropertyAccess(uint64_t a1, unint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v9;
  int v10;
  unint64_t v12;
  pthread_key_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  pthread_key_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  unsigned int v62;
  char v63;
  void **p_start;
  uint64_t v65;
  size_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  __int128 *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  BOOL v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  __int128 *v118;
  JSC::ExecutableMemoryHandle *v119;
  __int128 v120;
  char v121;
  _BYTE v122[32];
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  WTF *v126;
  _BYTE v127[128];
  unsigned int v128;
  unsigned int v129;
  int v130;
  char v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE *v135;
  char v136;
  uint64_t v137;
  int v138;
  _BYTE *v139;
  char v140;
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  WTF *v148;
  _BYTE v149[128];
  unsigned int v150;
  int v151;
  char v152;
  unsigned int v153;
  void *start;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 122);
  if (v6 >= 4)
  {
    v9 = v6 > 0x1C;
    v10 = (1 << v6) & 0x118683C0;
    if (v9 || v10 == 0)
      return 0;
  }
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0)
  {
    v122[0] = 0;
    v122[24] = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0x8000000080000000;
    v126 = (WTF *)v127;
    v128 = 128;
    v12 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v12 != -1)
    {
      *(_QWORD *)&v146 = &v118;
      *(_QWORD *)&v120 = &v146;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v120, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v13 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v21 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v21)
    {
      v21 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v21, v13);
    }
    v22 = v21 + 8;
    v23 = *(WTF **)v21;
    if (*(_QWORD *)v21 != v21 + 8)
    {
      v24 = *(_DWORD *)(v21 + 136);
      if (v128 < v24)
      {
        if (v126 && v126 != (WTF *)v127)
        {
          WTF::fastFree((unint64_t)v126, v14, v15, v16, v17, v18, v19, v20);
          v22 = v21 + 8;
          v23 = *(WTF **)v21;
          v24 = *(_DWORD *)(v21 + 136);
        }
        v126 = v23;
        v128 = v24;
        *(_QWORD *)v21 = v22;
        *(_DWORD *)(v21 + 136) = 128;
      }
    }
    v131 = 1;
    v132 = 0u;
    v133 = 0u;
    v134 = 0u;
    v135 = v122;
    v136 = 16;
    v137 = 0;
    v138 = 0x10000;
    v139 = v122;
    v140 = 17;
    v141 = 0;
    v142 = 0x20000;
    v144 = 0;
    v145 = 0;
    v25 = *(unsigned __int8 *)(a1 + 116);
    v26 = *(unsigned __int8 *)(a1 + 117);
    v143 = 1;
    v129 = 0;
    v130 = 0;
    JSC::MacroAssemblerARM64::load32((uint64_t)v122, v25, 17, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::branch32((uint64_t)v122, 1, 17, (a2 >> 4), v27, v28, v29, v30, (uint64_t)&v146);
    v143 = 0;
    LODWORD(v120) = v146;
    *(_QWORD *)((char *)&v120 + 4) = *(_QWORD *)((char *)&v146 + 4);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>((unsigned int *)&v120, *(_QWORD *)(a1 + 40), (uint64_t)v122, v31, v32, v33, v34, v35);
    if (a3 >= 64)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)v122, v25 | 0x800000000, (char)v26, v36, v37, v38, v39, v40);
      v25 = v26;
    }
    LODWORD(v41) = 8 * a3 + 16;
    if (a3 <= 63)
      v41 = v41;
    else
      v41 = (496 - 8 * a3);
    JSC::MacroAssemblerARM64::load64((uint64_t)v122, v25 & 0x7FFFFFFFFLL | ((unint64_t)(v41 >> 3) << 35), (char)v26, v36, v37, v38, v39, v40);
    if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
    {
      if (!v129)
      {
        v50 = 0;
        v49 = *(void **)(a1 + 24);
LABEL_28:
        *(_QWORD *)&v146 = 0;
        *((_QWORD *)&v146 + 1) = v50;
        v147 = 0;
        v148 = (WTF *)v149;
        v150 = 128;
        v51 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
        if (v51 != -1)
        {
          *(_QWORD *)&v120 = &v121;
          v118 = &v120;
          std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v118, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
        }
        v52 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
        v60 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
        if (!v60)
        {
          v60 = WTF::fastMalloc((WTF *)0x98);
          WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v60, v52);
        }
        v61 = *(WTF **)v60;
        if (*(_QWORD *)v60 != v60 + 8)
        {
          v62 = *(_DWORD *)(v60 + 136);
          if (v150 < v62)
          {
            if (v148 && v148 != (WTF *)v149)
            {
              WTF::fastFree((unint64_t)v148, v53, v54, v55, v56, v57, v58, v59);
              v61 = *(WTF **)v60;
              v62 = *(_DWORD *)(v60 + 136);
            }
            v148 = v61;
            v150 = v62;
            *(_QWORD *)v60 = v60 + 8;
            *(_DWORD *)(v60 + 136) = 128;
          }
        }
        v63 = 1;
        v152 = 1;
        v153 = 6;
        start = v49;
        v155 = 0u;
        v156 = 0u;
        v151 = 1;
        JSC::LinkBuffer::linkCode((uint64_t)&v146, (uint64_t)v122, 1, v55, v56, v57, v58, v59);
        if (!byte_1ECF4C288)
        {
          if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
          {
            if (HIDWORD(v155))
            {
              v86 = (uint64_t *)v155;
              v87 = 8 * HIDWORD(v155);
              do
              {
                v88 = *v86++;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v88 + 16))(v88, &v146);
                v87 -= 8;
              }
              while (v87);
            }
            p_start = &start;
            if (HIDWORD(v156))
            {
              v89 = (uint64_t *)v156;
              v90 = 8 * HIDWORD(v156);
              do
              {
                v91 = *v89++;
                (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v91 + 16))(v91, &v146);
                v90 -= 8;
              }
              while (v90);
            }
            v65 = v153;
            v66 = *((_QWORD *)&v146 + 1);
            *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v153 / 2] += *((_QWORD *)&v146 + 1);
            ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v65);
            sys_icache_invalidate(start, v66);
            v74 = (unsigned int *)v146;
            if ((_QWORD)v146)
            {
              do
                v117 = __ldaxr(v74);
              while (__stlxr(v117 + 1, v74));
              p_start = (void **)(v74 + 2);
            }
            v75 = (__int128 *)*p_start;
            *(_QWORD *)&v120 = v75;
            *((_QWORD *)&v120 + 1) = v74;
            if (byte_1ECF4C2A2)
              JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v146, (uint64_t)&v120, "property access", 16);
            v118 = v75;
            v119 = 0;
            if (!v74)
              goto LABEL_59;
            do
              v76 = __ldaxr(v74);
            while (__stlxr(v76 + 1, v74));
            v77 = (unsigned int *)v119;
            v119 = (JSC::ExecutableMemoryHandle *)v74;
            if (v77)
            {
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                atomic_store(1u, v77);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v77, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
                WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
              }
            }
            v80 = (unsigned int *)*((_QWORD *)&v120 + 1);
            *((_QWORD *)&v120 + 1) = 0;
            if (v80)
            {
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                atomic_store(1u, v80);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v80, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
                WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
              }
            }
            v83 = (unsigned int *)v119;
            v119 = 0;
            if (!v83)
              goto LABEL_59;
            do
            {
              v84 = __ldaxr(v83);
              v85 = --v84 == 0;
            }
            while (__stlxr(v84, v83));
            goto LABEL_57;
          }
          v63 = HIBYTE(word_1ECF4C286) != 0;
        }
        JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(&v118, (uint64_t)&v146, v63, "property access", 16, (uint64_t)"property access");
        v83 = (unsigned int *)v119;
        v119 = 0;
        if (!v83)
        {
LABEL_59:
          JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v146, v67, v68, v69, v70, v71, v72, v73);
          v7 = 1;
LABEL_60:
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v122, v42, v43, v44, v45, v46, v47, v48);
          return v7;
        }
        do
        {
          v92 = __ldaxr(v83);
          v85 = --v92 == 0;
        }
        while (__stlxr(v92, v83));
LABEL_57:
        if (v85)
        {
          atomic_store(1u, v83);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v83, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
          WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        }
        goto LABEL_59;
      }
    }
    else
    {
      v49 = *(void **)(a1 + 24);
      v50 = (*(_DWORD *)(a1 + 32) - (_DWORD)v49);
      if (v50 >= v129)
        goto LABEL_28;
    }
    v7 = 0;
    goto LABEL_60;
  }
  return 1;
}

uint64_t JSC::InlineAccess::canGenerateSelfPropertyReplace(uint64_t result, int a2)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v2 = *(unsigned __int8 *)(result + 122);
  if (v2 >= 4)
  {
    v4 = v2 > 0x1C;
    v5 = (1 << v2) & 0x118683C0;
    if (v4 || v5 == 0)
      return 0;
  }
  v3 = 1;
  if (a2 < 64 || (*(_WORD *)(result + 129) & 0x200) != 0)
    return v3;
  v7 = *(_QWORD *)(result + 104);
  if (v7)
  {
    v8 = 0;
    do
    {
      v8 |= v7 & -v7;
      v7 &= v7 - 1;
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  v18 = v8;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v9 = *(unsigned __int8 *)(result + 116);
  if (v9 == 255)
  {
    v10 = 0;
  }
  else
  {
    if ((v9 & 0x40) != 0)
      goto LABEL_40;
    v10 = 1 << v9;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v11 = *(unsigned __int8 *)(result + 117);
  if (v11 != 255)
  {
    if ((v11 & 0x40) != 0)
      goto LABEL_40;
    v10 |= 1 << v11;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v12 = *(unsigned __int8 *)(result + 118);
  if (v12 != 255)
  {
    if ((v12 & 0x40) != 0)
      goto LABEL_40;
    v10 |= 1 << v12;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v13 = *(unsigned __int8 *)(result + 119);
  if (v13 != 255)
  {
    if ((v13 & 0x40) != 0)
      goto LABEL_40;
    v10 |= 1 << v13;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v14 = *(unsigned __int8 *)(result + 120);
  if (v14 != 255)
  {
    if ((v14 & 0x40) != 0)
      goto LABEL_40;
    v10 |= 1 << v14;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v15 = *(unsigned __int8 *)(result + 121);
  if (v15 == 255)
  {
LABEL_21:
    v16 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v18);
    if (v21)
      v17 = 1;
    else
      v17 = v16 == -1;
    return !v17;
  }
  if ((v15 & 0x40) == 0)
  {
    *((_QWORD *)&v20 + 1) = v10 | (1 << v15);
    goto LABEL_21;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t JSC::InlineAccess::generateSelfPropertyReplace(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v9;
  int v10;
  unint64_t v12;
  pthread_key_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  pthread_key_t *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  void **p_start;
  uint64_t v67;
  size_t v68;
  __int128 *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  __int128 *v128;
  JSC::ExecutableMemoryHandle *v129;
  __int128 v130;
  char v131;
  _BYTE v132[32];
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  WTF *v136;
  _BYTE v137[128];
  unsigned int v138;
  unsigned int v139;
  int v140;
  char v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE *v145;
  char v146;
  uint64_t v147;
  int v148;
  _BYTE *v149;
  char v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[24];
  __int128 v157;
  int v158;
  unsigned int v159;
  int v160;
  char v161;
  unsigned int v162;
  void *start;
  __int128 v164;
  __int128 v165;
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a1 + 122);
  if (v6 >= 4)
  {
    v9 = v6 > 0x1C;
    v10 = (1 << v6) & 0x118683C0;
    if (v9 || v10 == 0)
      return 0;
  }
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0)
  {
    v132[0] = 0;
    v132[24] = 0;
    v133 = 0;
    v134 = 0;
    v135 = 0x8000000080000000;
    v136 = (WTF *)v137;
    v138 = 128;
    v12 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v12 != -1)
    {
      *(_QWORD *)v156 = &v128;
      *(_QWORD *)&v130 = v156;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v130, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v13 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v21 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v21)
    {
      v21 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v21, v13);
    }
    v22 = v21 + 8;
    v23 = *(WTF **)v21;
    if (*(_QWORD *)v21 != v21 + 8)
    {
      v24 = *(_DWORD *)(v21 + 136);
      if (v138 < v24)
      {
        if (v136 && v136 != (WTF *)v137)
        {
          WTF::fastFree((unint64_t)v136, v14, v15, v16, v17, v18, v19, v20);
          v22 = v21 + 8;
          v23 = *(WTF **)v21;
          v24 = *(_DWORD *)(v21 + 136);
        }
        v136 = v23;
        v138 = v24;
        *(_QWORD *)v21 = v22;
        *(_DWORD *)(v21 + 136) = 128;
      }
    }
    v141 = 1;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v145 = v132;
    v146 = 16;
    v147 = 0;
    v148 = 0x10000;
    v149 = v132;
    v150 = 17;
    v151 = 0;
    v152 = 0x20000;
    v154 = 0;
    v155 = 0;
    v25 = *(unsigned __int8 *)(a1 + 116);
    v26 = *(_BYTE *)(a1 + 117);
    v153 = 1;
    v139 = 0;
    v140 = 0;
    JSC::MacroAssemblerARM64::load32((uint64_t)v132, v25, 17, v16, v17, v18, v19, v20);
    JSC::MacroAssemblerARM64::branch32((uint64_t)v132, 1, 17, (a2 >> 4), v27, v28, v29, v30, (uint64_t)v156);
    v153 = 0;
    LODWORD(v130) = *(_DWORD *)v156;
    *(_QWORD *)((char *)&v130 + 4) = *(_QWORD *)&v156[4];
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>((unsigned int *)&v130, *(_QWORD *)(a1 + 40), (uint64_t)v132, v31, v32, v33, v34, v35);
    if ((int)a3 < 64)
    {
LABEL_22:
      LODWORD(v43) = 8 * (_DWORD)a3 + 16;
      if ((int)a3 <= 63)
        v43 = v43;
      else
        v43 = (496 - 8 * (_DWORD)a3);
      JSC::MacroAssemblerARM64::store64((uint64_t)v132, v26, v25 & 0x7FFFFFFFFLL | ((unint64_t)(v43 >> 3) << 35), v38, v39, v40, v41, v42);
      if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
      {
        if (!v139)
        {
          v52 = 0;
          v51 = *(void **)(a1 + 24);
LABEL_27:
          *(_QWORD *)v156 = 0;
          *(_QWORD *)&v156[8] = v52;
          *(_QWORD *)&v156[16] = 0;
          *(_QWORD *)&v157 = (char *)&v157 + 8;
          v159 = 128;
          v53 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
          if (v53 != -1)
          {
            *(_QWORD *)&v130 = &v131;
            v128 = &v130;
            std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v128, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
          }
          v54 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
          v62 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
          if (!v62)
          {
            v62 = WTF::fastMalloc((WTF *)0x98);
            WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v62, v54);
          }
          v63 = *(_QWORD *)v62;
          if (*(_QWORD *)v62 != v62 + 8)
          {
            v64 = *(_DWORD *)(v62 + 136);
            if (v159 < v64)
            {
              if ((_QWORD)v157 && (__int128 *)v157 != (__int128 *)((char *)&v157 + 8))
              {
                WTF::fastFree(v157, v55, v56, v57, v58, v59, v60, v61);
                v63 = *(_QWORD *)v62;
                v64 = *(_DWORD *)(v62 + 136);
              }
              *(_QWORD *)&v157 = v63;
              v159 = v64;
              *(_QWORD *)v62 = v62 + 8;
              *(_DWORD *)(v62 + 136) = 128;
            }
          }
          v65 = 1;
          v161 = 1;
          v162 = 6;
          start = v51;
          v164 = 0u;
          v165 = 0u;
          v160 = 1;
          JSC::LinkBuffer::linkCode((uint64_t)v156, (uint64_t)v132, 1, v57, v58, v59, v60, v61);
          a3 = g_config;
          if (!byte_1ECF4C288)
          {
            if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
            {
              if (HIDWORD(v164))
              {
                v96 = (uint64_t *)v164;
                v97 = 8 * HIDWORD(v164);
                do
                {
                  v98 = *v96++;
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 16))(v98, v156);
                  v97 -= 8;
                }
                while (v97);
              }
              p_start = &start;
              if (HIDWORD(v165))
              {
                v99 = (uint64_t *)v165;
                v100 = 8 * HIDWORD(v165);
                do
                {
                  v101 = *v99++;
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v101 + 16))(v101, v156);
                  v100 -= 8;
                }
                while (v100);
              }
              v67 = v162;
              v68 = *(_QWORD *)&v156[8];
              *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v162 / 2] += *(_QWORD *)&v156[8];
              ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v67);
              sys_icache_invalidate(start, v68);
              v25 = *(_QWORD *)v156;
              if (!*(_QWORD *)v156)
                goto LABEL_42;
              goto LABEL_98;
            }
            v65 = HIBYTE(word_1ECF4C286) != 0;
          }
          JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(&v128, (uint64_t)v156, v65, "property replace", 17, (uint64_t)"property replace");
          v77 = (unsigned int *)v129;
          v129 = 0;
          if (!v77)
          {
LABEL_58:
            JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v156, v36, v37, v38, v39, v40, v41, v42);
            v7 = 1;
LABEL_59:
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v132, v44, v45, v46, v47, v48, v49, v50);
            return v7;
          }
          do
          {
            v102 = __ldaxr(v77);
            v79 = --v102 == 0;
          }
          while (__stlxr(v102, v77));
LABEL_56:
          if (v79)
          {
            atomic_store(1u, v77);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v77, (uint64_t)v36, v37, v38, v39, v40, v41, v42);
            WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
          }
          goto LABEL_58;
        }
      }
      else
      {
        v51 = *(void **)(a1 + 24);
        v52 = (*(_DWORD *)(a1 + 32) - (_DWORD)v51);
        if (v52 >= v139)
          goto LABEL_27;
      }
      v7 = 0;
      goto LABEL_59;
    }
    v80 = *(_QWORD *)(a1 + 104);
    if (v80)
    {
      v81 = 0;
      do
      {
        v81 |= v80 & -v80;
        v80 &= v80 - 1;
      }
      while (v80);
    }
    else
    {
      v81 = 0;
    }
    *(_QWORD *)v156 = v81;
    *(_OWORD *)&v156[8] = 0u;
    v157 = 0u;
    v158 = 0;
    v82 = *(unsigned __int8 *)(a1 + 116);
    if (v82 == 255)
    {
      v83 = 0;
    }
    else
    {
      if ((v82 & 0x40) != 0)
        goto LABEL_97;
      v83 = 1 << v82;
      *((_QWORD *)&v157 + 1) = v83;
    }
    v84 = *(unsigned __int8 *)(a1 + 117);
    if (v84 != 255)
    {
      if ((v84 & 0x40) != 0)
        goto LABEL_97;
      v83 |= 1 << v84;
      *((_QWORD *)&v157 + 1) = v83;
    }
    v85 = *(unsigned __int8 *)(a1 + 118);
    if (v85 != 255)
    {
      if ((v85 & 0x40) != 0)
        goto LABEL_97;
      v83 |= 1 << v85;
      *((_QWORD *)&v157 + 1) = v83;
    }
    v86 = *(unsigned __int8 *)(a1 + 119);
    if (v86 != 255)
    {
      if ((v86 & 0x40) != 0)
        goto LABEL_97;
      v83 |= 1 << v86;
      *((_QWORD *)&v157 + 1) = v83;
    }
    v87 = *(unsigned __int8 *)(a1 + 120);
    if (v87 != 255)
    {
      if ((v87 & 0x40) != 0)
        goto LABEL_97;
      v83 |= 1 << v87;
      *((_QWORD *)&v157 + 1) = v83;
    }
    v88 = *(unsigned __int8 *)(a1 + 121);
    if (v88 == 255)
    {
LABEL_70:
      v89 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v156);
      if (v158)
        v95 = 0xFFFFFFFFLL;
      else
        v95 = v89;
      JSC::MacroAssemblerARM64::load64((uint64_t)v132, v25 | 0x800000000, v95, v90, v91, v92, v93, v94);
      v25 = v95;
      goto LABEL_22;
    }
    if ((v88 & 0x40) == 0)
    {
      *((_QWORD *)&v157 + 1) = v83 | (1 << v88);
      goto LABEL_70;
    }
LABEL_97:
    __break(1u);
    do
LABEL_98:
      v127 = __ldaxr((unsigned int *)v25);
    while (__stlxr(v127 + 1, (unsigned int *)v25));
    p_start = (void **)(v25 + 8);
LABEL_42:
    v69 = (__int128 *)*p_start;
    *(_QWORD *)&v130 = v69;
    *((_QWORD *)&v130 + 1) = v25;
    if (*((_BYTE *)a3 + 674))
      JSC::LinkBuffer::logJITCodeForPerf((uint64_t)v156, (uint64_t)&v130, "property replace", 17);
    v128 = v69;
    v129 = 0;
    if (!v25)
      goto LABEL_58;
    do
      v70 = __ldaxr((unsigned int *)v25);
    while (__stlxr(v70 + 1, (unsigned int *)v25));
    v71 = (unsigned int *)v129;
    v129 = (JSC::ExecutableMemoryHandle *)v25;
    if (v71)
    {
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        atomic_store(1u, v71);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v71, (uint64_t)v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
      }
    }
    v74 = (unsigned int *)*((_QWORD *)&v130 + 1);
    *((_QWORD *)&v130 + 1) = 0;
    if (v74)
    {
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v74);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v74, (uint64_t)v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
      }
    }
    v77 = (unsigned int *)v129;
    v129 = 0;
    if (!v77)
      goto LABEL_58;
    do
    {
      v78 = __ldaxr(v77);
      v79 = --v78 == 0;
    }
    while (__stlxr(v78, v77));
    goto LABEL_56;
  }
  return 1;
}

BOOL JSC::InlineAccess::isCacheableArrayLength(_BOOL8 result, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int v21;

  v3 = *(unsigned __int8 *)(result + 122);
  if (v3 >= 4)
  {
    v4 = v3 > 0x1C;
    v5 = (1 << v3) & 0x118683C0;
    if (v4 || v5 == 0)
      return 0;
  }
  if ((*(_WORD *)(result + 129) & 0x200) != 0)
    return 0;
  v7 = *(_QWORD *)(result + 104);
  if (v7)
  {
    v8 = 0;
    do
    {
      v8 |= v7 & -v7;
      v7 &= v7 - 1;
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  v18 = v8;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v9 = *(unsigned __int8 *)(result + 116);
  if (v9 == 255)
  {
    v10 = 0;
  }
  else
  {
    if ((v9 & 0x40) != 0)
      goto LABEL_42;
    v10 = 1 << v9;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v11 = *(unsigned __int8 *)(result + 117);
  if (v11 != 255)
  {
    if ((v11 & 0x40) != 0)
      goto LABEL_42;
    v10 |= 1 << v11;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v12 = *(unsigned __int8 *)(result + 118);
  if (v12 != 255)
  {
    if ((v12 & 0x40) != 0)
      goto LABEL_42;
    v10 |= 1 << v12;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v13 = *(unsigned __int8 *)(result + 119);
  if (v13 != 255)
  {
    if ((v13 & 0x40) != 0)
      goto LABEL_42;
    v10 |= 1 << v13;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v14 = *(unsigned __int8 *)(result + 120);
  if (v14 != 255)
  {
    if ((v14 & 0x40) != 0)
      goto LABEL_42;
    v10 |= 1 << v14;
    *((_QWORD *)&v20 + 1) = v10;
  }
  v15 = *(unsigned __int8 *)(result + 121);
  if (v15 != 255)
  {
    if ((v15 & 0x40) == 0)
    {
      *((_QWORD *)&v20 + 1) = v10 | (1 << v15);
      goto LABEL_21;
    }
LABEL_42:
    __break(1u);
    return result;
  }
LABEL_21:
  v16 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v18);
  result = 0;
  if (!v21 && v16 != -1)
    return (*(_BYTE *)(a2 + 4) & 0xEu) < 0xA && (*(_BYTE *)(a2 + 4) & 0xF) != 1;
  return result;
}

uint64_t JSC::InlineAccess::generateArrayLength(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  pthread_key_t *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  char v78;
  void **p_start;
  uint64_t v80;
  size_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  __int128 *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  __int128 *v138;
  JSC::ExecutableMemoryHandle *v139;
  __int128 v140;
  char v141;
  _BYTE v142[32];
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  WTF *v146;
  _BYTE v147[128];
  unsigned int v148;
  unsigned int v149;
  int v150;
  char v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE *v155;
  char v156;
  uint64_t v157;
  int v158;
  _BYTE *v159;
  char v160;
  uint64_t v161;
  int v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE v166[24];
  __int128 v167;
  int v168;
  unsigned int v169;
  int v170;
  char v171;
  unsigned int v172;
  void *start;
  __int128 v174;
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 122);
  if (v4 >= 4)
  {
    v106 = v4 > 0x1C;
    v107 = (1 << v4) & 0x118683C0;
    if (v106 || v107 == 0)
      return 0;
  }
  v142[0] = 0;
  v142[24] = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0x8000000080000000;
  v146 = (WTF *)v147;
  v148 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    *(_QWORD *)v166 = &v138;
    *(_QWORD *)&v140 = v166;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v7 = pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  v15 = (uint64_t)v7;
  if (!v7)
  {
    v15 = WTF::fastMalloc((WTF *)0x98);
    v7 = WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v15, v6);
  }
  v17 = (_BYTE *)(v15 + 8);
  v16 = *(WTF **)v15;
  if (*(_QWORD *)v15 == v15 + 8)
    goto LABEL_11;
  v18 = *(_DWORD *)(v15 + 136);
  if (v148 >= v18)
    goto LABEL_11;
  v7 = v146;
  if (v146 && v146 != (WTF *)v147)
    goto LABEL_88;
  while (1)
  {
    v146 = v16;
    v148 = v18;
    *(_QWORD *)v15 = v17;
    *(_DWORD *)(v15 + 136) = 128;
LABEL_11:
    v151 = 1;
    v17 = v166;
    v149 = 0;
    v150 = 0;
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = v142;
    v156 = 16;
    v157 = 0;
    v158 = 0x10000;
    v159 = v142;
    v160 = 17;
    v161 = 0;
    v162 = 0x20000;
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v19 = *(unsigned __int8 *)(a1 + 116);
    v20 = *(_QWORD *)(a1 + 104);
    if (v20)
    {
      v21 = 0;
      do
      {
        v21 |= v20 & -v20;
        v20 &= v20 - 1;
      }
      while (v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = *(unsigned __int8 *)(a1 + 117);
    *(_QWORD *)v166 = v21;
    *(_OWORD *)&v166[8] = 0uLL;
    v167 = 0uLL;
    v168 = 0;
    if ((_DWORD)v19 == 255)
    {
      v23 = 0;
    }
    else
    {
      if ((v19 & 0x40) != 0)
        goto LABEL_87;
      v23 = 1 << v19;
      *((_QWORD *)&v167 + 1) = 1 << v19;
    }
    if ((_DWORD)v22 != 255)
    {
      if ((v22 & 0x40) != 0)
        goto LABEL_87;
      v23 |= 1 << v22;
      *((_QWORD *)&v167 + 1) = v23;
    }
    v24 = *(unsigned __int8 *)(a1 + 118);
    if (v24 != 255)
    {
      if ((v24 & 0x40) != 0)
        goto LABEL_87;
      v23 |= 1 << v24;
      *((_QWORD *)&v167 + 1) = v23;
    }
    v25 = *(unsigned __int8 *)(a1 + 119);
    if (v25 != 255)
    {
      if ((v25 & 0x40) != 0)
        goto LABEL_87;
      v23 |= 1 << v25;
      *((_QWORD *)&v167 + 1) = v23;
    }
    v26 = *(unsigned __int8 *)(a1 + 120);
    if (v26 != 255)
    {
      if ((v26 & 0x40) != 0)
        goto LABEL_87;
      v23 |= 1 << v26;
      *((_QWORD *)&v167 + 1) = v23;
    }
    v27 = *(unsigned __int8 *)(a1 + 121);
    if (v27 == 255)
      goto LABEL_21;
    if ((v27 & 0x40) == 0)
      break;
LABEL_87:
    __break(1u);
LABEL_88:
    WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    v16 = *(WTF **)v15;
    v18 = *(_DWORD *)(v15 + 136);
  }
  *((_QWORD *)&v167 + 1) = v23 | (1 << v27);
LABEL_21:
  v28 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)v166);
  if (v168)
    v34 = 0xFFFFFFFFLL;
  else
    v34 = v28;
  JSC::MacroAssemblerARM64::load8((uint64_t)v142, v19 | 0x400000000, v34, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::and32((uint64_t)v142, (JSC::ARM64LogicalImmediate *)0xF, v34, v34);
  v35 = *(_BYTE *)(a2 + 4) & 0xF;
  v163 = 1;
  JSC::MacroAssemblerARM64::branch32((uint64_t)v142, 1, v34, v35, v36, v37, v38, v39, (uint64_t)v166);
  v163 = 0;
  LODWORD(v140) = *(_DWORD *)v166;
  *(_QWORD *)((char *)&v140 + 4) = *(_QWORD *)&v166[4];
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>((unsigned int *)&v140, *(_QWORD *)(a1 + 40), (uint64_t)v142, v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::load64((uint64_t)v142, v19 | 0x800000000, (char)v22, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::load32((uint64_t)v142, v22 | 0xFFFFFFF800000000, (char)v22, v50, v51, v52, v53, v54);
  v62 = v149;
  if (v149 + 4 > v148)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v146, (uint64_t)v55, v56, v57, v58, v59, v60, v61);
    v62 = v149;
  }
  *(_DWORD *)((char *)v146 + v62) = v22 & 0x1F | ((v22 & 0x1F) << 16) | 0xAA000360;
  v63 = v149 + 4;
  v149 += 4;
  if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
  {
    if (v63)
      goto LABEL_97;
    v65 = 0;
    v64 = *(void **)(a1 + 24);
LABEL_28:
    *(_QWORD *)v166 = 0;
    *(_QWORD *)&v166[8] = v65;
    *(_QWORD *)&v166[16] = 0;
    *(_QWORD *)&v167 = (char *)&v167 + 8;
    v169 = 128;
    v66 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
    if (v66 != -1)
    {
      *(_QWORD *)&v140 = &v141;
      v138 = &v140;
      std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v138, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
    }
    v67 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
    v75 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
    if (!v75)
    {
      v75 = WTF::fastMalloc((WTF *)0x98);
      WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v75, v67);
    }
    v76 = *(_QWORD *)v75;
    if (*(_QWORD *)v75 != v75 + 8)
    {
      v77 = *(_DWORD *)(v75 + 136);
      if (v169 < v77)
      {
        if ((_QWORD)v167 && (__int128 *)v167 != (__int128 *)((char *)&v167 + 8))
        {
          WTF::fastFree(v167, v68, v69, v70, v71, v72, v73, v74);
          v76 = *(_QWORD *)v75;
          v77 = *(_DWORD *)(v75 + 136);
        }
        *(_QWORD *)&v167 = v76;
        v169 = v77;
        *(_QWORD *)v75 = v75 + 8;
        *(_DWORD *)(v75 + 136) = 128;
      }
    }
    v78 = 1;
    v171 = 1;
    v172 = 6;
    start = v64;
    v174 = 0u;
    v175 = 0u;
    v170 = 1;
    JSC::LinkBuffer::linkCode((uint64_t)v166, (uint64_t)v142, 1, v70, v71, v72, v73, v74);
    if (!byte_1ECF4C288)
    {
      if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
      {
        if (HIDWORD(v174))
        {
          v103 = (uint64_t *)v174;
          v104 = 8 * HIDWORD(v174);
          do
          {
            v105 = *v103++;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v105 + 16))(v105, v166);
            v104 -= 8;
          }
          while (v104);
        }
        p_start = &start;
        if (HIDWORD(v175))
        {
          v109 = (uint64_t *)v175;
          v110 = 8 * HIDWORD(v175);
          do
          {
            v111 = *v109++;
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v111 + 16))(v111, v166);
            v110 -= 8;
          }
          while (v110);
        }
        v80 = v172;
        v81 = *(_QWORD *)&v166[8];
        *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v172 / 2] += *(_QWORD *)&v166[8];
        ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v80);
        sys_icache_invalidate(start, v81);
        v89 = *(unsigned int **)v166;
        if (*(_QWORD *)v166)
        {
          do
            v137 = __ldaxr(v89);
          while (__stlxr(v137 + 1, v89));
          p_start = (void **)(v89 + 2);
        }
        v90 = (__int128 *)*p_start;
        *(_QWORD *)&v140 = v90;
        *((_QWORD *)&v140 + 1) = v89;
        if (byte_1ECF4C2A2)
          JSC::LinkBuffer::logJITCodeForPerf((uint64_t)v166, (uint64_t)&v140, "array length", 13);
        v138 = v90;
        v139 = 0;
        if (!v89)
          goto LABEL_59;
        do
          v91 = __ldaxr(v89);
        while (__stlxr(v91 + 1, v89));
        v92 = (unsigned int *)v139;
        v139 = (JSC::ExecutableMemoryHandle *)v89;
        if (v92)
        {
          do
          {
            v93 = __ldaxr(v92);
            v94 = v93 - 1;
          }
          while (__stlxr(v94, v92));
          if (!v94)
          {
            atomic_store(1u, v92);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v92, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
            WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
          }
        }
        v95 = (unsigned int *)*((_QWORD *)&v140 + 1);
        *((_QWORD *)&v140 + 1) = 0;
        if (v95)
        {
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97)
          {
            atomic_store(1u, v95);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v95, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
            WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
          }
        }
        v98 = (unsigned int *)v139;
        v139 = 0;
        if (!v98)
          goto LABEL_59;
        do
        {
          v99 = __ldaxr(v98);
          v100 = --v99 == 0;
        }
        while (__stlxr(v99, v98));
        goto LABEL_57;
      }
      v78 = HIBYTE(word_1ECF4C286) != 0;
    }
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(&v138, (uint64_t)v166, v78, "array length", 13, (uint64_t)"array length");
    v98 = (unsigned int *)v139;
    v139 = 0;
    if (!v98)
    {
LABEL_59:
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v166, v82, v83, v84, v85, v86, v87, v88);
      v101 = 1;
      goto LABEL_60;
    }
    do
    {
      v112 = __ldaxr(v98);
      v100 = --v112 == 0;
    }
    while (__stlxr(v112, v98));
LABEL_57:
    if (v100)
    {
      atomic_store(1u, v98);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v98, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    goto LABEL_59;
  }
  v64 = *(void **)(a1 + 24);
  v65 = (*(_DWORD *)(a1 + 32) - (_DWORD)v64);
  if (v65 >= v63)
    goto LABEL_28;
LABEL_97:
  v101 = 0;
LABEL_60:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v142, v55, v56, v57, v58, v59, v60, v61);
  return v101;
}

BOOL JSC::InlineAccess::isCacheableStringLength(_BOOL8 result)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v1 = *(unsigned __int8 *)(result + 122);
  if (v1 >= 4)
  {
    v2 = v1 > 0x1C;
    v3 = (1 << v1) & 0x118683C0;
    if (v2 || v3 == 0)
      return 0;
  }
  if ((*(_WORD *)(result + 129) & 0x200) != 0)
    return 0;
  v5 = *(_QWORD *)(result + 104);
  if (v5)
  {
    v6 = 0;
    do
    {
      v6 |= v5 & -v5;
      v5 &= v5 - 1;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v16 = v6;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v7 = *(unsigned __int8 *)(result + 116);
  if (v7 == 255)
  {
    v8 = 0;
  }
  else
  {
    if ((v7 & 0x40) != 0)
      goto LABEL_39;
    v8 = 1 << v7;
    *((_QWORD *)&v18 + 1) = v8;
  }
  v9 = *(unsigned __int8 *)(result + 117);
  if (v9 != 255)
  {
    if ((v9 & 0x40) != 0)
      goto LABEL_39;
    v8 |= 1 << v9;
    *((_QWORD *)&v18 + 1) = v8;
  }
  v10 = *(unsigned __int8 *)(result + 118);
  if (v10 != 255)
  {
    if ((v10 & 0x40) != 0)
      goto LABEL_39;
    v8 |= 1 << v10;
    *((_QWORD *)&v18 + 1) = v8;
  }
  v11 = *(unsigned __int8 *)(result + 119);
  if (v11 != 255)
  {
    if ((v11 & 0x40) != 0)
      goto LABEL_39;
    v8 |= 1 << v11;
    *((_QWORD *)&v18 + 1) = v8;
  }
  v12 = *(unsigned __int8 *)(result + 120);
  if (v12 != 255)
  {
    if ((v12 & 0x40) != 0)
      goto LABEL_39;
    v8 |= 1 << v12;
    *((_QWORD *)&v18 + 1) = v8;
  }
  v13 = *(unsigned __int8 *)(result + 121);
  if (v13 != 255)
  {
    if ((v13 & 0x40) == 0)
    {
      *((_QWORD *)&v18 + 1) = v8 | (1 << v13);
      goto LABEL_20;
    }
LABEL_39:
    __break(1u);
    return result;
  }
LABEL_20:
  v14 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v16);
  if (v19)
    v15 = 1;
  else
    v15 = v14 == -1;
  return !v15;
}

uint64_t JSC::InlineAccess::generateStringLength(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v97;
  int v98;
  char v100;
  unsigned int v101[2];
  char v102;
  __int16 v103;
  char v104;
  unsigned int v105[3];
  _QWORD v106[2];
  _DWORD v107[8];
  _DWORD v108[6];
  uint64_t v109;
  unsigned int v110;
  char v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 122);
  if (v2 >= 4)
  {
    v97 = v2 > 0x1C;
    v98 = (1 << v2) & 0x118683C0;
    if (v97 || v98 == 0)
      return 0;
  }
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v107, 0);
  v3 = *(unsigned __int8 *)(a1 + 116);
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    v5 = 0;
    do
    {
      v5 |= v4 & -v4;
      v4 &= v4 - 1;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 117);
  v112 = v5;
  v113 = 0u;
  v114 = 0u;
  v115 = 0;
  if ((_DWORD)v3 == 255)
  {
    v7 = 0;
  }
  else
  {
    if ((v3 & 0x40) != 0)
      goto LABEL_45;
    v7 = 1 << v3;
    *((_QWORD *)&v114 + 1) = 1 << v3;
  }
  if ((_DWORD)v6 != 255)
  {
    if ((v6 & 0x40) != 0)
      goto LABEL_45;
    v7 |= 1 << v6;
    *((_QWORD *)&v114 + 1) = v7;
  }
  v8 = *(unsigned __int8 *)(a1 + 118);
  if (v8 != 255)
  {
    if ((v8 & 0x40) != 0)
      goto LABEL_45;
    v7 |= 1 << v8;
    *((_QWORD *)&v114 + 1) = v7;
  }
  v9 = *(unsigned __int8 *)(a1 + 119);
  if (v9 != 255)
  {
    if ((v9 & 0x40) != 0)
      goto LABEL_45;
    v7 |= 1 << v9;
    *((_QWORD *)&v114 + 1) = v7;
  }
  v10 = *(unsigned __int8 *)(a1 + 120);
  if (v10 != 255)
  {
    if ((v10 & 0x40) != 0)
      goto LABEL_45;
    v7 |= 1 << v10;
    *((_QWORD *)&v114 + 1) = v7;
  }
  v11 = *(unsigned __int8 *)(a1 + 121);
  if (v11 == 255)
    goto LABEL_12;
  if ((v11 & 0x40) != 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *((_QWORD *)&v114 + 1) = v7 | (1 << v11);
LABEL_12:
  v12 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v112);
  if (v115)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v12;
  JSC::MacroAssemblerARM64::patchableBranch8((uint64_t)&v112, (uint64_t)v107, v3 | 0x500000000, v13, v14, v15, v16, v17);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>((unsigned int *)&v112, *(_QWORD *)(a1 + 40), (uint64_t)v107, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::load64((uint64_t)v107, v3 | 0x800000000, v18, v24, v25, v26, v27, v28);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v107, 1, v18, 1, v29, v30, v31, v32, (uint64_t)v105, v33);
  JSC::MacroAssemblerARM64::load32((uint64_t)v107, v18 | 0x400000000, (char)v6, v34, v35, v36, v37, v38);
  JSC::ARM64Assembler::label(v108, v39, v40, v41, v42, v43, v44, v45, (int *)&v112);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)&v109, 335544320, v46, v47, v48, v49, v50, v51);
  if (v111)
    v58 = 69;
  else
    v58 = 65;
  v101[0] = v112;
  v101[1] = 0;
  v102 = v58;
  v103 = 15;
  v104 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v105, (uint64_t)v107, v52, v53, v54, v55, v56, v57);
  JSC::MacroAssemblerARM64::load32((uint64_t)v107, v3 | 0x1000000000, (char)v6, v59, v60, v61, v62, v63);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v101, (uint64_t)v107, v64, v65, v66, v67, v68, v69);
  JSC::AssemblyHelpers::boxInt32(v107, (char)v6, v6, 1, v70, v71, v72, v73);
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0)
  {
    v75 = *(_QWORD *)(a1 + 24);
    v76 = (*(_DWORD *)(a1 + 32) - v75);
    if (v76 >= v110)
      goto LABEL_20;
LABEL_51:
    v95 = 0;
    goto LABEL_24;
  }
  if (v110)
    goto LABEL_51;
  v76 = 0;
  v75 = *(_QWORD *)(a1 + 24);
LABEL_20:
  JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)49594>((uint64_t)&v112, (uint64_t)v107, v75, v76);
  if (byte_1ECF4C288)
  {
LABEL_46:
    v100 = 1;
LABEL_48:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(v106, (uint64_t)&v112, v100, "string length", 14, (uint64_t)"string length");
    goto LABEL_23;
  }
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v100 = HIBYTE(word_1ECF4C286) != 0;
    goto LABEL_48;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)0>((uint64_t)&v112, "string length", 14, v106);
LABEL_23:
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v106, v81, v82, v83, v84, v85, v86, v87);
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v112, v88, v89, v90, v91, v92, v93, v94);
  v95 = 1;
LABEL_24:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v107, v74, v75, v76, v77, v78, v79, v80);
  return v95;
}

uint64_t JSC::InlineAccess::generateSelfInAccess(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  pthread_key_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  pthread_key_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unsigned int v45;
  char v46;
  void **p_start;
  uint64_t v48;
  size_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  __int128 *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  __int128 *v100;
  JSC::ExecutableMemoryHandle *v101;
  __int128 v102;
  char v103;
  _BYTE v104[32];
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  WTF *v108;
  _BYTE v109[128];
  unsigned int v110;
  unsigned int v111;
  int v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _BYTE *v117;
  char v118;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  char v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  WTF *v130;
  _BYTE v131[128];
  unsigned int v132;
  int v133;
  char v134;
  unsigned int v135;
  void *start;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v104[24] = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0x8000000080000000;
  v108 = (WTF *)v109;
  v110 = 128;
  v4 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v4 != -1)
  {
    *(_QWORD *)&v128 = &v100;
    *(_QWORD *)&v102 = &v128;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v102, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v5 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v13 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v13)
  {
    v13 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v13, v5);
  }
  v14 = *(WTF **)v13;
  if (*(_QWORD *)v13 != v13 + 8)
  {
    v15 = *(_DWORD *)(v13 + 136);
    if (v110 < v15)
    {
      if (v108 && v108 != (WTF *)v109)
      {
        WTF::fastFree((unint64_t)v108, v6, v7, v8, v9, v10, v11, v12);
        v14 = *(WTF **)v13;
        v15 = *(_DWORD *)(v13 + 136);
      }
      v108 = v14;
      v110 = v15;
      *(_QWORD *)v13 = v13 + 8;
      *(_DWORD *)(v13 + 136) = 128;
    }
  }
  v113 = 1;
  v111 = 0;
  v112 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = v104;
  v118 = 16;
  v119 = 0;
  v120 = 0x10000;
  v121 = v104;
  v122 = 17;
  v123 = 0;
  v124 = 0x20000;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v16 = *(unsigned __int8 *)(a1 + 122);
  if (v16 >= 4)
  {
    if (v16 > 0x1C)
      goto LABEL_65;
    v17 = 0;
    if (((1 << v16) & 0x118683C0) == 0)
      goto LABEL_13;
  }
  v17 = 1;
  if ((*(_WORD *)(a1 + 129) & 0x200) != 0)
    goto LABEL_13;
  v19 = *(unsigned __int8 *)(a1 + 116);
  v20 = *(char *)(a1 + 117);
  v125 = 1;
  v112 = 0;
  JSC::MacroAssemblerARM64::load32((uint64_t)v104, v19, 17, v8, v9, v10, v11, v12);
  JSC::MacroAssemblerARM64::branch32((uint64_t)v104, 1, 17, (a2 >> 4), v21, v22, v23, v24, (uint64_t)&v128);
  v125 = 0;
  LODWORD(v102) = v128;
  *(_QWORD *)((char *)&v102 + 4) = *(_QWORD *)((char *)&v128 + 4);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)49594>((unsigned int *)&v102, *(_QWORD *)(a1 + 40), (uint64_t)v104, v25, v26, v27, v28, v29);
  v30 = v111;
  if (v111 + 4 > v110)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v108, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v30 = v111;
  }
  *(_DWORD *)((char *)v108 + v30) = v20 | 0x32000BE0;
  v31 = v111 + 4;
  v111 += 4;
  if ((*(_WORD *)(a1 + 129) & 0x200) == 0)
  {
    v32 = *(void **)(a1 + 24);
    v33 = (*(_DWORD *)(a1 + 32) - (_DWORD)v32);
    if (v33 >= v31)
      goto LABEL_18;
LABEL_65:
    v17 = 0;
    goto LABEL_13;
  }
  if (v31)
    goto LABEL_65;
  v33 = 0;
  v32 = *(void **)(a1 + 24);
LABEL_18:
  *(_QWORD *)&v128 = 0;
  *((_QWORD *)&v128 + 1) = v33;
  v129 = 0;
  v130 = (WTF *)v131;
  v132 = 128;
  v34 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v34 != -1)
  {
    *(_QWORD *)&v102 = &v103;
    v100 = &v102;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v100, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v35 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v43 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v43)
  {
    v43 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v43, v35);
  }
  v44 = *(WTF **)v43;
  if (*(_QWORD *)v43 != v43 + 8)
  {
    v45 = *(_DWORD *)(v43 + 136);
    if (v132 < v45)
    {
      if (v130 && v130 != (WTF *)v131)
      {
        WTF::fastFree((unint64_t)v130, v36, v37, v38, v39, v40, v41, v42);
        v44 = *(WTF **)v43;
        v45 = *(_DWORD *)(v43 + 136);
      }
      v130 = v44;
      v132 = v45;
      *(_QWORD *)v43 = v43 + 8;
      *(_DWORD *)(v43 + 136) = 128;
    }
  }
  v46 = 1;
  v134 = 1;
  v135 = 6;
  start = v32;
  v137 = 0u;
  v138 = 0u;
  v133 = 1;
  JSC::LinkBuffer::linkCode((uint64_t)&v128, (uint64_t)v104, 1, v38, v39, v40, v41, v42);
  if (!byte_1ECF4C288)
  {
    if (__PAIR16__(byte_1ECF4C289, 0) == HIBYTE(word_1ECF4C286))
    {
      if (HIDWORD(v137))
      {
        v69 = (uint64_t *)v137;
        v70 = 8 * HIDWORD(v137);
        do
        {
          v71 = *v69++;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v71 + 16))(v71, &v128);
          v70 -= 8;
        }
        while (v70);
      }
      p_start = &start;
      if (HIDWORD(v138))
      {
        v72 = (uint64_t *)v138;
        v73 = 8 * HIDWORD(v138);
        do
        {
          v74 = *v72++;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v74 + 16))(v74, &v128);
          v73 -= 8;
        }
        while (v73);
      }
      v48 = v135;
      v49 = *((_QWORD *)&v128 + 1);
      *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v135 / 2] += *((_QWORD *)&v128 + 1);
      ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v48);
      sys_icache_invalidate(start, v49);
      v57 = (unsigned int *)v128;
      if ((_QWORD)v128)
      {
        do
          v99 = __ldaxr(v57);
        while (__stlxr(v99 + 1, v57));
        p_start = (void **)(v57 + 2);
      }
      v58 = (__int128 *)*p_start;
      *(_QWORD *)&v102 = v58;
      *((_QWORD *)&v102 + 1) = v57;
      if (byte_1ECF4C2A2)
        JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v128, (uint64_t)&v102, "in access", 10);
      v100 = v58;
      v101 = 0;
      if (v57)
      {
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 + 1, v57));
        v60 = (unsigned int *)v101;
        v101 = (JSC::ExecutableMemoryHandle *)v57;
        if (v60)
        {
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
          {
            atomic_store(1u, v60);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v60, (uint64_t)v50, v51, v52, v53, v54, v55, v56);
            WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
          }
        }
        v63 = (unsigned int *)*((_QWORD *)&v102 + 1);
        *((_QWORD *)&v102 + 1) = 0;
        if (v63)
        {
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (!v65)
          {
            atomic_store(1u, v63);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v63, (uint64_t)v50, v51, v52, v53, v54, v55, v56);
            WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
          }
        }
      }
      goto LABEL_45;
    }
    v46 = HIBYTE(word_1ECF4C286) != 0;
  }
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)0,char const*>(&v100, (uint64_t)&v128, v46, "in access", 10, (uint64_t)"in access");
LABEL_45:
  v66 = (unsigned int *)v101;
  v101 = 0;
  if (v66)
  {
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v66);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v66, (uint64_t)v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
  }
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v128, v50, v51, v52, v53, v54, v55, v56);
  v17 = 1;
LABEL_13:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v104, v6, v7, v8, v9, v10, v11, v12);
  return v17;
}

void JSC::InlineCacheCompiler::succeed(JSC::InlineCacheCompiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int i;
  unsigned int v29;
  char v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  int v39;
  int v40;
  char v41;
  __int16 v42;
  char v43;

  JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(*((_QWORD *)this + 5), *((const char **)this + 4), (const char *)this + 168, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v16 + 129) & 0x200) != 0)
  {
    v17 = *((_QWORD *)this + 4);
    if (BYTE6(qword_1ECF4C780))
    {
      v36 = *(_DWORD *)(v17 + 200);
      if (v36 + 4 > *(_DWORD *)(v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 56), v9, v10, v11, v12, v13, v14, v15);
        v36 = *(_DWORD *)(v17 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v17 + 56) + v36) = -1463714819;
      *(_DWORD *)(v17 + 200) += 4;
      v37 = (_DWORD *)*((_QWORD *)this + 4);
      v38 = v37[50];
      if (v38 + 4 > v37[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v37 + 14), v9, v10, v11, v12, v13, v14, v15);
        v38 = v37[50];
      }
      *(_DWORD *)(*((_QWORD *)v37 + 7) + v38) = -698416192;
      v37[50] += 4;
    }
    else
    {
      if (!*(_BYTE *)(v17 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x19818C9B4);
      }
      v18 = *(unsigned __int8 *)(v16 + 120) | 0x2000000000;
      *(_DWORD *)(*(_QWORD *)(v17 + 264) + 208) &= ~*(_DWORD *)(v17 + 288);
      JSC::MacroAssemblerARM64::load64(v17, v18, *(char *)(v17 + 272), v11, v12, v13, v14, v15);
      v26 = *(_DWORD *)(v17 + 200);
      if (v26 + 4 > *(_DWORD *)(v17 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 56), v19, v20, v21, v22, v23, v24, v25);
        v26 = *(_DWORD *)(v17 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v17 + 56) + v26) = -702610944;
      *(_DWORD *)(v17 + 200) += 4;
    }
  }
  else
  {
    v27 = *((_QWORD *)this + 4);
    for (i = *(_DWORD *)(v27 + 200); i < *(_DWORD *)(v27 + 52); *(_DWORD *)(v27 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(v27 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v27 + 56), v9, v10, v11, v12, v13, v14, v15);
        i = *(_DWORD *)(v27 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v27 + 56) + i) = -721215457;
      i = *(_DWORD *)(v27 + 200) + 4;
    }
    v29 = i;
    if ((i + 4) > *(_DWORD *)(v27 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v27 + 56), v9, v10, v11, v12, v13, v14, v15);
      v29 = *(_DWORD *)(v27 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v27 + 56) + v29) = 335544320;
    *(_DWORD *)(v27 + 200) += 4;
    if (*(_BYTE *)(v27 + 328))
      v30 = 69;
    else
      v30 = 65;
    v39 = i;
    v40 = 0;
    v41 = v30;
    v42 = 15;
    v43 = -1;
    if (i != -1)
    {
      v31 = *((unsigned int *)this + 15);
      if ((_DWORD)v31 == *((_DWORD *)this + 14))
      {
        v32 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 48, (void *)(v31 + 1), (unint64_t)&v39, v11, v12, v13, v14, v15);
        v34 = *v32;
        v33 = v32 + 1;
        v35 = *((_QWORD *)this + 6) + 12 * *((unsigned int *)this + 15);
        *(_DWORD *)v35 = v34;
      }
      else
      {
        v33 = &v40;
        v35 = *((_QWORD *)this + 6) + 12 * v31;
        *(_DWORD *)v35 = i;
      }
      *(_QWORD *)(v35 + 4) = *(_QWORD *)v33;
      ++*((_DWORD *)this + 15);
    }
  }
}

uint64_t JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(JSC::InlineCacheCompiler *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint8x8_t v14;
  __int32 v15;
  uint8x8_t v16;
  uint64_t i;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;

  if ((*((_BYTE *)this + 224) & 1) != 0)
    return (uint64_t)this + 192;
  *((_BYTE *)this + 224) |= 1u;
  v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 336);
  v3 = *(unsigned int **)(v2 + 120);
  if (v3)
  {
    v4 = v3 + 2;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v2 = *(_QWORD *)(*((_QWORD *)this + 4) + 336);
  }
  v6 = v3 + 2;
  v7 = (*(uint64_t (**)(unsigned int *, uint64_t, _QWORD))(*(_QWORD *)v3 + 144))(v3, v2, *(unsigned int *)(*((_QWORD *)this + 2) + 112));
  *((_QWORD *)this + 23) = (unint64_t)v8 | v7;
  do
  {
    v11 = __ldaxr(v6);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v6));
  if (!v12)
    goto LABEL_21;
  while (1)
  {
    v13 = *((_QWORD *)this + 23);
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.i32[0];
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v13));
    v16.i16[0] = vaddlv_u8(v16);
    *((_BYTE *)this + 224) = *((_BYTE *)this + 224) & 0xFD | (2 * (v16.i32[0] + v15 != 0));
    if (v16.i32[0] + v15)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 336) + 120);
      if (!v25 || (*(_BYTE *)(v25 + 12) & 0xFE) != 4)
      {
        v8 = "./bytecode/InlineCacheCompiler.cpp";
        v9 = "const ScalarRegisterSet &JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling()";
        v10 = 403;
        __break(0xC471u);
        goto LABEL_20;
      }
    }
    for (i = 0; v13; v13 &= v13 - 1)
      i |= v13 & -(uint64_t)v13;
    v18 = (uint64_t *)*((_QWORD *)this + 5);
    v20 = *v18;
    v19 = v18[1];
    v21 = v20 | i;
    v22 = *((_QWORD *)this + 2);
    if ((*(_WORD *)(v22 + 129) & 0x200) == 0)
      goto LABEL_13;
    v24 = *(_BYTE *)(v22 + 120);
    if ((v24 & 0x40) == 0)
      break;
LABEL_20:
    __break(1u);
LABEL_21:
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *, const char *, const char *, uint64_t))(*(_QWORD *)v3 + 32))(v3, v8, v9, v10);
  }
  v21 |= 1 << v24;
LABEL_13:
  *((_QWORD *)this + 24) = (v21 | v19) & 0xFFFF00FF0003FFFFLL;
  return (uint64_t)this + 192;
}

unint64_t JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall(JSC::ScratchRegisterAllocator **this, const JSC::RegisterSet *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ScratchRegisterAllocator *v10;
  uint64_t v11;
  unint64_t v12;
  JSC::ScratchRegisterAllocator *v13;
  int v14;
  uint8x8_t v15;
  __int32 v16;
  uint8x8_t v17;
  BOOL v18;
  _QWORD v20[2];

  if (((_BYTE)this[28] & 1) == 0)
    JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling((JSC::InlineCacheCompiler *)this);
  v10 = this[24];
  if (v10)
  {
    v11 = 0;
    do
    {
      v11 |= (unint64_t)v10 & -(uint64_t)v10;
      v10 = (JSC::ScratchRegisterAllocator *)(((unint64_t)v10 - 1) & (unint64_t)v10);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)a2 | v11;
  v13 = this[4];
  v20[0] = v12;
  v20[1] = 0;
  v14 = JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(v13, (JSC::AssemblyHelpers *)v20, 0, a4, a5, a6, a7, a8);
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v15.i16[0] = vaddlv_u8(v15);
  v16 = v15.i32[0];
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v12));
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.i32[0] + v16)
    v18 = 1;
  else
    v18 = v14 == 0;
  if (!v18)
    WTFCrashWithInfoImpl(1021, "./bytecode/InlineCacheCompiler.cpp", "SpillState JSC::InlineCacheCompiler::preserveLiveRegistersToStackForCall(const RegisterSet &)");
  return v12;
}

void JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCallWithThrownException(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::ScratchRegisterAllocator *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v8 = *a2;
  if (*a2)
  {
    v9 = 0;
    do
    {
      v9 |= v8 & -v8;
      v8 &= v8 - 1;
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  if ((*(_BYTE *)(a1 + 224) & 1) == 0)
  {
    v17 = a2;
    v18 = a1;
    v16 = v9;
    JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling((JSC::InlineCacheCompiler *)a1);
    v9 = v16;
    a2 = v17;
    a1 = v18;
  }
  v10 = *(_QWORD *)(a1 + 184);
  if (v10)
  {
    v11 = 0;
    do
    {
      v11 |= v10 & -v10;
      v10 &= v10 - 1;
    }
    while (v10);
    v12 = ~v11;
  }
  else
  {
    v12 = -1;
  }
  v19[0] = v12 & v9;
  v19[1] = v12 & v9;
  v13 = *(JSC::ScratchRegisterAllocator **)(a1 + 32);
  v14 = *a2;
  if (*a2)
  {
    v15 = 0;
    do
    {
      v15 |= v14 & -v14;
      v14 &= v14 - 1;
    }
    while (v14);
  }
  else
  {
    v15 = 0;
  }
  v20[0] = v15;
  v20[1] = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v13, (JSC::AssemblyHelpers *)v20, (const JSC::RegisterSet *)v19, (const JSC::RegisterSet *)*((unsigned int *)a2 + 2), 0, a6, a7, a8);
}

void JSC::InlineCacheCompiler::restoreLiveRegistersFromStackForCall(uint64_t a1, uint64_t *a2, const JSC::RegisterSet *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ScratchRegisterAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v8 = *(JSC::ScratchRegisterAllocator **)(a1 + 32);
  v9 = *a2;
  if (*a2)
  {
    v10 = 0;
    do
    {
      v10 |= v9 & -v9;
      v9 &= v9 - 1;
    }
    while (v9);
  }
  else
  {
    v10 = 0;
  }
  v11[0] = v10;
  v11[1] = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(v8, (JSC::AssemblyHelpers *)v11, a3, (const JSC::RegisterSet *)*((unsigned int *)a2 + 2), 0, a6, a7, a8);
}

uint64_t JSC::InlineCacheCompiler::callSiteIndexForExceptionHandlingOrOriginal(JSC::InlineCacheCompiler *this)
{
  char v2;
  uint64_t result;

  v2 = *((_BYTE *)this + 224);
  if ((v2 & 1) == 0)
  {
    JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
    v2 = *((_BYTE *)this + 224);
  }
  if ((v2 & 4) != 0)
    return *((unsigned int *)this + 50);
  *((_BYTE *)this + 224) = v2 | 4;
  if ((v2 & 2) != 0)
    result = JSC::CodeBlock::newExceptionHandlingCallSiteIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112));
  else
    result = *(unsigned int *)(*((_QWORD *)this + 2) + 112);
  *((_DWORD *)this + 50) = result;
  return result;
}

uint64_t JSC::InlineCacheCompiler::callSiteIndexForExceptionHandling(JSC::InlineCacheCompiler *this)
{
  if ((*((_BYTE *)this + 224) & 1) == 0)
    goto LABEL_7;
  if ((*((_BYTE *)this + 224) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19818CE8CLL);
  }
  if ((*((_BYTE *)this + 224) & 4) == 0)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x19818CE6CLL);
  }
  return *((unsigned int *)this + 50);
}

uint64_t JSC::InlineCacheCompiler::originalExceptionHandler(JSC::InlineCacheCompiler *this)
{
  char v2;
  uint64_t result;

  v2 = *((_BYTE *)this + 224);
  if ((v2 & 1) == 0)
  {
    JSC::InlineCacheCompiler::calculateLiveRegistersForCallAndExceptionHandling(this);
    v2 = *((_BYTE *)this + 224);
  }
  if ((v2 & 2) == 0
    || (result = JSC::CodeBlock::handlerForIndex(*(_QWORD *)(*((_QWORD *)this + 4) + 336), *(_DWORD *)(*((_QWORD *)this + 2) + 112), 1)) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19818CF20);
  }
  return result;
}

void JSC::InlineCacheCompiler::emitExplicitExceptionHandler(JSC::InlineCacheCompiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(*((_QWORD *)this + 5), *((const char **)this + 4), (const char *)this + 168, a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*((_QWORD *)this + 4);
  v17 = v16[50];
  if (v17 + 4 > v16[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 14), v9, v10, v11, v12, v13, v14, v15);
    v17 = v16[50];
  }
  *(_DWORD *)(*((_QWORD *)v16 + 7) + v17) = -132182048;
  v16[50] += 4;
  JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 4), *(_QWORD *)this + 48, 0, v11, v12, v13, v14, v15);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl(*((char **)this + 4), 0);
  v25 = (_DWORD *)*((_QWORD *)this + 4);
  v26 = v25[50];
  if (v26 + 4 > v25[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 14), v18, v19, v20, v21, v22, v23, v24);
    v26 = v25[50];
  }
  *(_DWORD *)(*((_QWORD *)v25 + 7) + v26) = -129955872;
  v25[50] += 4;
  v27 = *((_QWORD *)this + 4);
  v28 = *(_QWORD *)this;
  if ((*((_BYTE *)this + 224) & 2) != 0)
  {
    JSC::MacroAssemblerARM64::store64(v27, 29, v28 + 90480, v20, v21, v22, v23, v24);
    v50 = *(_QWORD *)(JSC::InlineCacheCompiler::originalExceptionHandler(this) + 16);
    JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)10924>(*((_QWORD *)this + 4), v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    v29 = *(_QWORD *)(v28 + 90440);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(unsigned int **)(v29 + 16);
    if (v31)
    {
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>(v27, v30, v19, v20, v21, v22, v23, v24);
      do
      {
        v40 = __ldaxr(v31);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v31));
      if (!v41)
      {
        atomic_store(1u, v31);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v31, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }
    else
    {
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>(v27, v30, v19, v20, v21, v22, v23, v24);
    }
  }
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)10924>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16[2];
  char v17;
  __int16 v18;
  char v19;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v16[0] = i;
  v16[1] = 0;
  v17 = v13;
  v18 = 15;
  v19 = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)10924>(v16, a2, a1, a4, a5, a6, a7, a8);
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16[2];
  char v17;
  __int16 v18;
  char v19;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v16[0] = i;
  v16[1] = 0;
  v17 = v13;
  v18 = 15;
  v19 = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v16, a2, a1, a4, a5, a6, a7, a8);
}

uint64_t JSC::InlineCacheCompiler::makeDefaultScratchAllocator(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(a2 + 104);
  if (v3)
  {
    v4 = 0;
    do
    {
      v4 |= v3 & -v3;
      v3 &= v3 - 1;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)result = v4;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 40) = 0;
  v5 = *(unsigned __int8 *)(a2 + 116);
  if (v5 == 255)
  {
    v6 = 0;
  }
  else
  {
    if ((v5 & 0x40) != 0)
      goto LABEL_31;
    v6 = 1 << v5;
    *(_QWORD *)(result + 32) = v6;
  }
  v7 = *(unsigned __int8 *)(a2 + 117);
  if (v7 != 255)
  {
    if ((v7 & 0x40) != 0)
      goto LABEL_31;
    v6 |= 1 << v7;
    *(_QWORD *)(result + 32) = v6;
  }
  v8 = *(unsigned __int8 *)(a2 + 118);
  if (v8 != 255)
  {
    if ((v8 & 0x40) != 0)
      goto LABEL_31;
    v6 |= 1 << v8;
    *(_QWORD *)(result + 32) = v6;
  }
  v9 = *(unsigned __int8 *)(a2 + 119);
  if (v9 != 255)
  {
    if ((v9 & 0x40) != 0)
      goto LABEL_31;
    v6 |= 1 << v9;
    *(_QWORD *)(result + 32) = v6;
  }
  v10 = *(unsigned __int8 *)(a2 + 120);
  if (v10 != 255)
  {
    if ((v10 & 0x40) != 0)
      goto LABEL_31;
    v6 |= 1 << v10;
    *(_QWORD *)(result + 32) = v6;
  }
  v11 = *(unsigned __int8 *)(a2 + 121);
  if (v11 != 255)
  {
    if ((v11 & 0x40) != 0)
      goto LABEL_31;
    v6 |= 1 << v11;
    *(_QWORD *)(result + 32) = v6;
  }
  if (a3 == 255)
    goto LABEL_12;
  if ((a3 & 0x40) != 0)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v6 |= 1 << a3;
  *(_QWORD *)(result + 32) = v6;
LABEL_12:
  if ((*(_WORD *)(a2 + 129) & 0x200) != 0)
  {
    if (BYTE6(qword_1ECF4C780))
      *(_QWORD *)(result + 32) = v6 | 0x200;
  }
  return result;
}

void JSC::InlineCacheCompiler::emitDataICPrologue(JSC::InlineCacheCompiler *this, JSC::CCallHelpers *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::InlineCacheCompiler *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -1447068675;
  *((_DWORD *)this + 50) += 4;
}

void JSC::InlineCacheCompiler::emitDataICCheckUid(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  int *v73;
  int *v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [10]>(a2);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2;
  JSC::AssemblyHelpers::branchIfNotCell(a2, 1, 1, a4, a5, a6, a7, a8, (uint64_t)&v85);
  v19 = v85;
  if (v85 != -1)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v20 == *(_DWORD *)(a1 + 8))
    {
      v21 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v20 + 1), (unint64_t)&v85, v14, v15, v16, v17, v18);
      v23 = *v21;
      v22 = (uint64_t *)(v21 + 1);
      v19 = v23;
      LODWORD(v20) = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v22 = &v86;
    }
    v24 = *(_QWORD *)a1 + 12 * v20;
    *(_DWORD *)v24 = v19;
    *(_QWORD *)(v24 + 4) = *v22;
    ++*(_DWORD *)(a1 + 12);
  }
  if (a3)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19818D91CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    v25 = *(_BYTE *)(a2 + 304) & 0x1F | 0x38405020;
    v26 = *(_DWORD *)(a2 + 200);
    if (v26 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = v25;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::branch32(a2, 1, 17, 4, v15, v16, v17, v18, (uint64_t)&v83);
    v34 = v83;
    if (v83 != -1)
    {
      v35 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v35 == *(_DWORD *)(a1 + 8))
      {
        v36 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v35 + 1), (unint64_t)&v83, v29, v30, v31, v32, v33);
        v38 = *v36;
        v37 = v36 + 1;
        v34 = v38;
        LODWORD(v35) = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v37 = &v84;
      }
      v54 = *(_QWORD *)a1 + 12 * v35;
      *(_DWORD *)v54 = v34;
      *(_QWORD *)(v54 + 4) = *(_QWORD *)v37;
      ++*(_DWORD *)(a1 + 12);
    }
    v55 = *(_DWORD *)(a2 + 200);
    if (v55 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
      v55 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v55) = a4 & 0x1F | 0xF8408020;
    *(_DWORD *)(a2 + 200) += 4;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x19818D94CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    v39 = *(_BYTE *)(a2 + 304) & 0x1F | 0x38405020;
    v40 = *(_DWORD *)(a2 + 200);
    if (v40 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v12, v13, v14, v15, v16, v17, v18);
      v40 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v39;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::branch32(a2, 1, 17, 2, v15, v16, v17, v18, (uint64_t)&v81);
    v49 = v81;
    if (v81 != -1)
    {
      v50 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v50 == *(_DWORD *)(a1 + 8))
      {
        v51 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v50 + 1), (unint64_t)&v81, v43, v44, v45, v46, v47);
        v53 = *v51;
        v52 = (uint64_t *)(v51 + 1);
        v49 = v53;
        LODWORD(v50) = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v52 = &v82;
      }
      v69 = *(_QWORD *)a1 + 12 * v50;
      *(_DWORD *)v69 = v49;
      *(_QWORD *)(v69 + 4) = *v52;
      ++*(_DWORD *)(a1 + 12);
    }
    v70 = *(_DWORD *)(a2 + 200);
    if (v70 + 4 > *(_DWORD *)(a2 + 192))
    {
      v48 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v41, v42, v43, v44, v45, v46, v47).n128_u64[0];
      v70 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v70) = a4 & 0x1F | 0xF8408020;
    *(_DWORD *)(a2 + 200) += 4;
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, a4, 1, v44, v45, v46, v47, (uint64_t)&v79, v48);
    v71 = v79;
    if (v79 != -1)
    {
      v72 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v72 == *(_DWORD *)(a1 + 8))
      {
        v73 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v72 + 1), (unint64_t)&v79, v29, v30, v31, v32, v33);
        v75 = *v73;
        v74 = v73 + 1;
        v71 = v75;
        LODWORD(v72) = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v74 = &v80;
      }
      v76 = *(_QWORD *)a1 + 12 * v72;
      *(_DWORD *)v76 = v71;
      *(_QWORD *)(v76 + 4) = *(_QWORD *)v74;
      ++*(_DWORD *)(a1 + 12);
    }
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19818D8ECLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  v56 = *(_BYTE *)(a2 + 304) & 0x1F | 0xF8420120;
  v57 = *(_DWORD *)(a2 + 200);
  if (v57 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = v56;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a2, 1, a4, 17, v30, v31, v32, v33, (uint64_t)&v77);
  v63 = v77;
  if (v77 != -1)
  {
    v64 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v64 == *(_DWORD *)(a1 + 8))
    {
      v65 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v64 + 1), (unint64_t)&v77, v58, v59, v60, v61, v62);
      v67 = *v65;
      v66 = (uint64_t *)(v65 + 1);
      v63 = v67;
      LODWORD(v64) = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v66 = &v78;
    }
    v68 = *(_QWORD *)a1 + 12 * v64;
    *(_DWORD *)v68 = v63;
    *(_QWORD *)(v68 + 4) = *v66;
    ++*(_DWORD *)(a1 + 12);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [10]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "check uid");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::InlineCacheCompiler::generateSlowPathCode(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  if (a2 >= 0x1F)
    __break(0xC471u);
  else
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1 + 90440), a1, (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3581480[a2], a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::getByIdSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char **v83;
  char *v84;
  _QWORD v85[3];
  WTF *v86;
  _BYTE v87[128];
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[32];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _BYTE v100[128];
  unsigned int v101;
  unsigned int v102;
  int v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v95[0] = 0;
  v95[24] = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0x8000000080000000;
  v99 = v100;
  v101 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v84 = (char *)v85;
    v85[0] = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v101;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v101 < v17)
    {
      if (v99 && v99 != v100)
      {
        WTF::fastFree((unint64_t)v99, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v99 = (_BYTE *)v15;
      v101 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v101;
    }
  }
  v18 = 0;
  v104 = 1;
  v109 = 16;
  v111 = 0x10000;
  v113 = 17;
  v115 = 0x20000;
  v102 = 0;
  v103 = 0;
  v19 = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = v95;
  v110 = 0;
  v112 = v95;
  v114 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v16 <= 3)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v18 = v102;
  }
  *(_DWORD *)&v99[v18] = -1447068675;
  v20 = v102;
  v21 = v102 + 4;
  v102 += 4;
  if (!v104)
  {
    __break(0xC471u);
    JUMPOUT(0x19818E028);
  }
  *((_DWORD *)v108 + 52) &= ~v111;
  v22 = v109 & 0x1F | 0xF8430020;
  if (v20 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v21 = v102;
  }
  *(_DWORD *)&v99[v21] = v22;
  v23 = v102;
  v24 = v102 + 4;
  v102 += 4;
  v103 = 0;
  if (v23 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v24 = v102;
  }
  *(_DWORD *)&v99[v24] = -700513792;
  v102 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v95, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v11, v12, v13, (uint64_t)v85, v19);
  v30 = *((_QWORD *)this + 11305);
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(unsigned int **)(v30 + 16);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
    do
    {
      v41 = __ldaxr(v32);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v32));
    if (!v42)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
  }
  v43 = v102;
  if (v102 + 4 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v43 = v102;
  }
  *(_DWORD *)&v99[v43] = -1463714819;
  v44 = v102;
  v45 = v102 + 4;
  v102 += 4;
  if (v44 + 8 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v45 = v102;
  }
  *(_DWORD *)&v99[v45] = -698416192;
  v102 += 4;
  v85[0] = 0;
  v85[1] = 0;
  v85[2] = -1;
  v86 = (WTF *)v87;
  v88 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v84 = &v82;
    v83 = &v84;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v88 < v57)
    {
      if (v86 && v86 != (WTF *)v87)
      {
        WTF::fastFree((unint64_t)v86, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v86 = v56;
      v88 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v89 = 1;
  v90 = 0;
  v91 = 6;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v85, (uint64_t)v95, 1, v50, v51, v52, v53, v54);
  BYTE2(v90) = 1;
  if (byte_1ECF4C288)
    goto LABEL_43;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_43:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, v58, "get_by_id_slow", 15, "DataIC get_by_id_slow", a2);
    goto LABEL_41;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, "get_by_id_slow", 15, a2);
LABEL_41:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v85, v59, v60, v61, v62, v63, v64, v65);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v95, v66, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::getByIdWithThisSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818E284);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000002, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "get_by_id_with_this_slow", 25, "DataIC get_by_id_with_this_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "get_by_id_with_this_slow", 25, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::getByValSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  pthread_key_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x8_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  pthread_key_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  unsigned int v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char **v83;
  char *v84;
  _QWORD v85[3];
  WTF *v86;
  _BYTE v87[128];
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _BYTE v95[32];
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _BYTE v100[128];
  unsigned int v101;
  unsigned int v102;
  int v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  int v111;
  _BYTE *v112;
  char v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v95[0] = 0;
  v95[24] = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0x8000000080000000;
  v99 = v100;
  v101 = 128;
  v5 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v5 != -1)
  {
    v84 = (char *)v85;
    v85[0] = &v83;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v6 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v14 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v14)
  {
    v14 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v14, v6);
  }
  v15 = *(_QWORD *)v14;
  v16 = v101;
  if (*(_QWORD *)v14 != v14 + 8)
  {
    v17 = *(_DWORD *)(v14 + 136);
    if (v101 < v17)
    {
      if (v99 && v99 != v100)
      {
        WTF::fastFree((unint64_t)v99, v7, v8, v9, v10, v11, v12, v13);
        v15 = *(_QWORD *)v14;
        v17 = *(_DWORD *)(v14 + 136);
      }
      v99 = (_BYTE *)v15;
      v101 = v17;
      *(_QWORD *)v14 = v14 + 8;
      *(_DWORD *)(v14 + 136) = 128;
      v16 = v101;
    }
  }
  v18 = 0;
  v104 = 1;
  v109 = 16;
  v111 = 0x10000;
  v113 = 17;
  v115 = 0x20000;
  v102 = 0;
  v103 = 0;
  v19 = 0;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = v95;
  v110 = 0;
  v112 = v95;
  v114 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v16 <= 3)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v18 = v102;
  }
  *(_DWORD *)&v99[v18] = -1447068675;
  v20 = v102;
  v21 = v102 + 4;
  v102 += 4;
  if (!v104)
  {
    __break(0xC471u);
    JUMPOUT(0x19818E744);
  }
  *((_DWORD *)v108 + 52) &= ~v111;
  v22 = v109 & 0x1F | 0xF8430040;
  if (v20 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v21 = v102;
  }
  *(_DWORD *)&v99[v21] = v22;
  v23 = v102;
  v24 = v102 + 4;
  v102 += 4;
  v103 = 0;
  if (v23 + 8 > v101)
  {
    v19 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, (uint64_t)v7, v8, v9, v10, v11, v12, v13).n128_u64[0];
    v24 = v102;
  }
  *(_DWORD *)&v99[v24] = -700513792;
  v102 += 4;
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v95, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v11, v12, v13, (uint64_t)v85, v19);
  v30 = *((_QWORD *)this + 11305);
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(unsigned int **)(v30 + 16);
  if (v32)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
    do
    {
      v41 = __ldaxr(v32);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v32));
    if (!v42)
    {
      atomic_store(1u, v32);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v32, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>((unsigned int *)v85, v31, (uint64_t)v95, v25, v26, v27, v28, v29);
  }
  v43 = v102;
  if (v102 + 4 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v43 = v102;
  }
  *(_DWORD *)&v99[v43] = -1463714819;
  v44 = v102;
  v45 = v102 + 4;
  v102 += 4;
  if (v44 + 8 > v101)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)&v99, v34, v35, v36, v37, v38, v39, v40);
    v45 = v102;
  }
  *(_DWORD *)&v99[v45] = -698416192;
  v102 += 4;
  v85[0] = 0;
  v85[1] = 0;
  v85[2] = -1;
  v86 = (WTF *)v87;
  v88 = 128;
  v46 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v46 != -1)
  {
    v84 = &v82;
    v83 = &v84;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v83, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v47 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v55 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v55)
  {
    v55 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v55, v47);
  }
  v56 = *(WTF **)v55;
  if (*(_QWORD *)v55 != v55 + 8)
  {
    v57 = *(_DWORD *)(v55 + 136);
    if (v88 < v57)
    {
      if (v86 && v86 != (WTF *)v87)
      {
        WTF::fastFree((unint64_t)v86, v48, v49, v50, v51, v52, v53, v54);
        v56 = *(WTF **)v55;
        v57 = *(_DWORD *)(v55 + 136);
      }
      v86 = v56;
      v88 = v57;
      *(_QWORD *)v55 = v55 + 8;
      *(_DWORD *)(v55 + 136) = 128;
    }
  }
  v58 = 1;
  v89 = 1;
  v90 = 0;
  v91 = 6;
  v92 = 0u;
  v93 = 0u;
  v94 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)v85, (uint64_t)v95, 1, v50, v51, v52, v53, v54);
  BYTE2(v90) = 1;
  if (byte_1ECF4C288)
    goto LABEL_43;
  if (__PAIR16__(byte_1ECF4C289, 0) != HIBYTE(word_1ECF4C286))
  {
    v58 = HIBYTE(word_1ECF4C286) != 0;
LABEL_43:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, v58, "get_by_val_slow", 16, "DataIC get_by_val_slow", a2);
    goto LABEL_41;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v85, "get_by_val_slow", 16, a2);
LABEL_41:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v85, v59, v60, v61, v62, v63, v64, v65);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v95, v66, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::getByValWithThisSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818E9A0);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000003, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "get_by_val_with_this_slow", 26, "DataIC get_by_val_with_this_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "get_by_val_with_this_slow", 26, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::getPrivateNameSlowPathCodeGenerator@<X0>(JSC *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::CCallHelpers *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v73[3];
  _QWORD v74[21];
  char v75;
  _BYTE v76[56];
  _DWORD v77[39];
  char v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  JSC::InlineCacheCompiler::emitDataICPrologue((JSC::InlineCacheCompiler *)v76, v5, v6, v7, v8, v9, v10, v11);
  if (!v78)
  {
    __break(0xC471u);
    JUMPOUT(0x19818EB94);
  }
  *(_DWORD *)(v79 + 208) &= ~v81;
  JSC::MacroAssemblerARM64::load64((uint64_t)v76, 0x3000000002, v80, v12, v13, v14, v15, v16);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453504, v17, v18, v19, v20, v21, v22);
  JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)v76, (uint64_t)this, 0, 0, 0xFFFFFFFFLL, v23, v24, v25, (uint64_t)v73, v26);
  v32 = *((_QWORD *)this + 11305);
  v33 = *(_QWORD *)(v32 + 8);
  v34 = *(unsigned int **)(v32 + 16);
  v74[0] = v33;
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v33 = v74[0];
  }
  v74[1] = v34;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v73, v33, (uint64_t)v76, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v74, v36, v37, v38, v39, v40, v41, v42);
  JSC::AssemblyHelpers::emitFunctionEpilogueWithEmptyFrame((JSC::AssemblyHelpers *)v76, v43, v44, v45, v46, v47, v48, v49);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v50, v51, v52, v53, v54, v55);
  v56 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v74, (uint64_t)v76, -1, 6, 1);
  v75 = 1;
  if (byte_1ECF4C288)
    goto LABEL_13;
  if (HIBYTE(word_1ECF4C286))
    v57 = 0;
  else
    v57 = byte_1ECF4C289 == 0;
  if (!v57)
  {
    v56 = HIBYTE(word_1ECF4C286) != 0;
LABEL_13:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, v56, "get_private_name_slow", 22, "DataIC get_private_name_slow", a2);
    goto LABEL_12;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v74, "get_private_name_slow", 22, a2);
LABEL_12:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v74, v58, v59, v60, v61, v62, v63, v64);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v65, v66, v67, v68, v69, v70, v71);
}

