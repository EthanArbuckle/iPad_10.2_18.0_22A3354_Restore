void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int64_t v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 v64;
  unsigned __int8 *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v10 = (JSC::AssemblerBuffer *)a4;
  v11 = a3;
  v12 = (uint64_t)a2;
  if (a7 == 1)
  {
    if (a8 == 2)
      goto LABEL_61;
    v14 = 0;
    goto LABEL_6;
  }
  v69 = a7 | 0x100;
  v14 = 1;
  v67 = 1;
  if (a8 != 2)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v14++ - 2] = a8 | 0x200;
    v67 = v14;
  }
  v66 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v14 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_70;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v14 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_70;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v66, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v29) = v32;
        *(_DWORD *)(v12 + 200) += 4;
        v17 = v67;
      }
      memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v14 = v67 - 1;
      goto LABEL_57;
    }
    v33 = v69;
    v64 = HIBYTE(v69);
    JSC::MacroAssemblerARM64::swap(v12, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v34 = v67 - 1;
    v31 = v67 == 1;
    v68 = v34;
    v35 = (unsigned __int8 *)&v69;
    v36 = &v70[2 * v34 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v64)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v33;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v70[2 * v68 - 2])
          {
            v63 = v39;
            v65 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v61 = v40 - (char *)a2;
              v62 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v62[v61];
            }
            v36 = v65;
            v39 = v63;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v68;
      v44 = v68;
      v36 = v41;
    }
    v45 = &v70[2 * v43 - 2];
    if (a2 != v45)
    {
      v46 = v39;
      memmove(v36, a2, v45 - a2);
      v39 = v46;
      v44 = v68;
    }
    v14 = v44 - v39;
LABEL_57:
    v67 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_61:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a5 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v53, v54, v55, v56, v57, v58);
  if ((_BYTE)v10)
  {
    if (v10 == 31)
      LODWORD(v11) = -1862270945;
    else
      LODWORD(v11) = v10 & 0x1F | 0xAA0003E0;
    v60 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v59 = v60;
    v10 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v60 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_71:
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v59 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v59) = v11;
    *(_DWORD *)v12 += 4;
  }
}

uint64_t std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_QWORD *)(a1 + 8) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v9 = *(char *)(a1 + 16);
      if (v9 > 15)
        v9 = -1;
      --*(_DWORD *)(*(_QWORD *)a1 + 12 * v9 + 4784);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  result = *a2;
  v11 = *a3;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = -1;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_11;
  v12 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 < *(unsigned int *)(result + 4004))
  {
    if (*(_BYTE *)(*(_QWORD *)(result + 3992) + 24 * (int)v12 + 12))
      *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillJSValue(result, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_11:
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, uint64_t a2, uint64_t a3, JSC::AssemblerBuffer *a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  JSC::AssemblerBuffer *v12;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  __int16 *v47;
  int v48;
  char *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 v75;
  unsigned __int8 *v76;
  unsigned int v78;
  unsigned int v79;
  __int16 v80;
  _BYTE v81[6];

  v8 = a8;
  v9 = a7;
  v12 = a4;
  v15 = (unsigned int *)(a2 + 5752);
  v16 = 1;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, (char)a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  v24 = &v80;
  if (v9 == 1)
  {
    if (v8 == 2)
      goto LABEL_60;
    v16 = 0;
  }
  else
  {
    v80 = v9 | 0x100;
    v78 = 1;
    if (v8 == 2)
      goto LABEL_7;
  }
  *(_WORD *)&v81[2 * v16++ - 2] = v8 | 0x200;
  v78 = v16;
  do
  {
LABEL_7:
    v25 = 0;
    v26 = 0;
    v27 = v16;
    do
    {
      if ((v81[v25 - 1] & 0x40) != 0)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v26 |= 1 << v81[v25 - 1];
      v25 += 2;
    }
    while (2 * v16 != v25);
    v28 = 0;
    do
    {
      v29 = v81[v28 - 2] & 0x7F;
      if (v29 >= 0x40)
        goto LABEL_80;
      v26 &= ~(1 << v29);
      v28 += 2;
    }
    while (2 * v16 != v28);
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] + v31)
    {
      v33 = 0;
      if (v16 <= 1)
        v34 = 1;
      else
        v34 = v16;
      v35 = 2 * v34;
      while (1)
      {
        v36 = v81[v33 - 1];
        if ((v36 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v26 >> (v36 & 0x7F)) & 1) != 0)
          break;
        v33 += 2;
        if (v35 == v33)
          goto LABEL_57;
      }
      v37 = v81[v33 - 2];
      if (v37 != v36)
      {
        if ((char)v37 == 63)
        {
          v38 = *(_DWORD *)(a2 + 200);
          v39 = *(_DWORD *)(a2 + 192);
          if (v36 == 31)
            goto LABEL_51;
          v41 = v36 & 0x1F | 0xD2800000;
        }
        else
        {
          v38 = *(_DWORD *)(a2 + 200);
          v39 = *(_DWORD *)(a2 + 192);
          v40 = (char)v36 == 31 || (char)v37 == 31;
          if (!v40)
          {
            v41 = v36 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v41 = (char)v36 | (32 * (char)v37) | 0x91000000;
        }
LABEL_52:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v38 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
        *(_DWORD *)(a2 + 200) += 4;
        v27 = v78;
      }
      memmove(&v81[v33 - 2], &v81[v33], 2 * v27 - v33 - 2);
      v16 = v78 - 1;
      goto LABEL_56;
    }
    v42 = v80;
    v75 = HIBYTE(v80);
    JSC::MacroAssemblerARM64::swap(a2, (char)v80, SHIBYTE(v80), v19, v20, v21, v22, v23);
    memmove(&v80, v81, 2 * v78 - 2);
    v43 = v78 - 1;
    v40 = v78 == 1;
    v79 = v43;
    v44 = (unsigned __int8 *)&v80;
    v45 = &v81[2 * v43 - 2];
    if (v40)
    {
      v52 = 0;
      v53 = 0;
      v48 = 0;
      v17 = v45;
    }
    else
    {
      v46 = 2 * v43;
      v47 = &v80;
      while (*(unsigned __int8 *)v47 != v75)
      {
        ++v47;
        v46 -= 2;
        if (!v46)
          goto LABEL_35;
      }
      *(_BYTE *)v47 = v42;
LABEL_35:
      v48 = 0;
      v49 = (char *)&v80;
      v17 = v45;
      v50 = v45;
      do
      {
        if (*v44 == v44[1])
        {
          v51 = v44;
          if (v50 != &v81[2 * v79 - 2])
          {
            v74 = v48;
            v76 = v45;
            if (v44 == v17)
            {
              v51 = v50;
            }
            else
            {
              v72 = v49 - (char *)v17;
              v73 = v50;
              memmove(v50, v17, v49 - (char *)v17);
              v51 = &v73[v72];
            }
            v45 = v76;
            v48 = v74;
          }
          v17 = v44 + 2;
          ++v48;
          v50 = v51;
        }
        v44 += 2;
        v49 += 2;
      }
      while (v44 < v45);
      v52 = v79;
      v53 = v79;
      v45 = v50;
    }
    v54 = &v81[2 * v52 - 2];
    if (v17 != v54)
    {
      v55 = v48;
      memmove(v45, v17, v54 - v17);
      v48 = v55;
      v53 = v79;
    }
    v16 = v53 - v48;
LABEL_56:
    v78 = v16;
LABEL_57:
    ;
  }
  while (v16);
LABEL_60:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)a6, 0, v19, v20, v21, v22, v23);
  else
    JSC::MacroAssemblerARM64::load64(a2, (a5 << 35) + 0x380000001ALL, 0, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::appendCall(a2, a3, v56, v57, v58, v59, v60, v61, a1);
  LOWORD(v24) = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v15, (char)v12, v62, v63, v64, v65, v66);
  if ((_BYTE)v12)
  {
    if (v12 == 31)
      LODWORD(a1) = -1862270945;
    else
      LODWORD(a1) = v12 & 0x1F | 0xAA0003E0;
    a6 = (unsigned int *)(a2 + 200);
    v67 = *(_DWORD *)(a2 + 200);
    v12 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v67 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_81:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v67 = *a6;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v67) = (_DWORD)a1;
    *a6 += 4;
  }
  v68 = *(_DWORD *)(a2 + 5764);
  if (v68)
  {
    v69 = v68 - 1;
    v70 = 16 * (v68 - 1);
    while (*(_DWORD *)(a2 + 5764) > v69)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v70, v18, v19, v20, v21, v22, v23);
      v70 -= 16;
      if (--v69 == -1)
        goto LABEL_72;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_72:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v71 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v71, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if ((unsigned __int16)v24 >= 0x100u)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v24, v18, v19, v20, v21, v22, v23);
  }
}

void JSC::JITRightShiftGenerator::~JITRightShiftGenerator(JSC::JITRightShiftGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITRightShiftGenerator *v9;
  JSC::JITRightShiftGenerator *v11;

  v9 = (JSC::JITRightShiftGenerator *)*((_QWORD *)this + 9);
  if ((JSC::JITRightShiftGenerator *)((char *)this + 88) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (JSC::JITRightShiftGenerator *)*((_QWORD *)this + 4);
  if ((JSC::JITRightShiftGenerator *)((char *)this + 48) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::SpeculativeJIT::compileValueLShiftOp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::DFG::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v56, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v53, (uint64_t)this, *((_QWORD *)a2 + 4), v11, v12, v13, v14, v15);
    v22 = v58;
    if (v58 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v56, v57, v16, v17, v18, v19, v20, v21);
      v58 = v22;
    }
    v23 = v55;
    if (v55 == 255)
    {
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v53, v54, v16, v17, v18, v19, v20, v21);
      v55 = v23;
    }
    v24 = (char)v22;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v24, v17, v18, v19, v20, v21);
    v25 = (char)v23;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v25, v26, v27, v28, v29, v30);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v31, v32, v33, v34, v35, v36, v37);
    ++*((_DWORD *)this + 1196);
    v44 = *((unsigned int *)this + 1194);
    if ((_DWORD)v44 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v44, (uint64_t)v38, v39, v40, v41, v42, v43);
    }
    v45 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v38, v39, v40, v41, v42, v43);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v52, (unsigned __int8 *)this, (uint64_t)operationBitLShiftHeapBigInt, 0, v45, v46, v24, v25);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v47, v48, v49);
    --*((_DWORD *)this + 1196);
    if ((v54 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v50 = (char)v55;
      if ((char)v55 > 15)
        v50 = -1;
      --*(_DWORD *)(v53 + 12 * v50 + 4784);
    }
    if ((v57 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v51 = (char)v58;
      if ((char)v58 > 15)
        v51 = -1;
      --*(_DWORD *)(v56 + 12 * v51 + 4784);
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITLeftShiftGenerator,&(operationValueBitLShift)>((JSC::DFG::Graph **)this, (uint64_t)a2, v10, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp<JSC::JITLeftShiftGenerator,&(operationValueBitLShift)>(JSC::DFG::Graph **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  JSC::DFG::Node *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  JSC::AssemblerBuffer *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::DFG::Node *v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  unint64_t v147;
  int v148;
  _DWORD v149[2];
  char v150;
  __int16 v151;
  char v152;
  uint64_t v153;
  unsigned __int8 v154;
  uint64_t v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;
  signed __int8 v163;
  unsigned __int8 v164;
  _BYTE v165[20];
  char v166;
  unsigned __int8 v167;
  char v168;
  char v169;
  char v170;
  _QWORD v171[2];
  uint64_t v172;
  _QWORD v173[2];
  _QWORD v174[5];

  v174[3] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 24);
  v12 = (v11 >> 50) & 0x3F;
  if (((v11 >> 50) & 0x3F) <= 0x1A)
  {
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 26)
      {
        v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
        v14 = 0x68000000000000;
        goto LABEL_5;
      }
    }
    else if ((*(_BYTE *)(a2 + 38) & 0xFC) == 0)
    {
      goto LABEL_6;
    }
LABEL_26:
    JSC::DFG::Graph::logAssertionFailure(this[495], (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x143B, "void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(Node *) [SnippetGenerator = JSC::JITLeftShiftGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitLShift]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
    __break(0xC471u);
    JUMPOUT(0x197BA68F0);
  }
  if ((_DWORD)v12 == 27)
  {
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x6C000000000000;
  }
  else
  {
    if ((_DWORD)v12 != 28)
      goto LABEL_26;
    v13 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
    v14 = 0x70000000000000;
  }
LABEL_5:
  if (v13 != v14)
    goto LABEL_26;
LABEL_6:
  if (JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)this, v11 & 0xFF00FFFFFFFFFFFFLL, a3, a4, a5, a6, a7, a8)|| JSC::DFG::SpeculativeJIT::isKnownNotNumber((JSC::DFG::SpeculativeJIT *)this, *(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL, v15, v16, v17, v18, v19, v20))
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v165, (uint64_t)this, *(_QWORD *)(a2 + 24), 1, v17, v18, v19, v20);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v161, (uint64_t)this, *(_QWORD *)(a2 + 32), 1, v23, v24, v25, v26);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v27, *(_QWORD *)(a2 + 24), v28, v29, v30, v31, v32);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v33, *(_QWORD *)(a2 + 32), v34, v35, v36, v37, v38);
    v46 = v165[16];
    if (v165[16] == 255)
    {
      v46 = JSC::DFG::SpeculativeJIT::fillJSValue(*(uint64_t *)v165, *(uint64_t *)&v165[8], v40, v41, v42, v43, v44, v45);
      v165[16] = v46;
    }
    v47 = v163;
    if (v163 == 255)
    {
      v47 = JSC::DFG::SpeculativeJIT::fillJSValue(v161, v162, v40, v41, v42, v43, v44, v45);
      v163 = v47;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v39, v40, v41, v42, v43, v44, v45);
    ++*((_DWORD *)this + 1196);
    v54 = *((unsigned int *)this + 1194);
    if ((_DWORD)v54 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v54, (uint64_t)v48, v49, v50, v51, v52, v53);
    }
    v55 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, (JSC::DFG::JITCompiler *)a2, v48, v49, v50, v51, v52, v53);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v157, (unsigned __int8 *)this, (uint64_t)operationValueBitLShift, 0, v55, v56, v46, v47);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, a2, 16, 0, v57, v58, v59);
    --*((_DWORD *)this + 1196);
    if ((v162 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v60 = v163;
      if (v163 > 15)
        v60 = -1;
      --*(_DWORD *)(v161 + 12 * v60 + 4784);
    }
    if ((*(_QWORD *)&v165[8] & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v61 = *(_QWORD *)v165;
      v62 = v165[16];
LABEL_20:
      if (v62 > 15)
        v62 = -1;
      --*(_DWORD *)(v61 + 12 * v62 + 4784);
      return;
    }
    return;
  }
  LOBYTE(v161) = 0;
  v164 = 0;
  LOBYTE(v157) = 0;
  v160 = 0;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v155, (JSC::DFG::SpeculativeJIT *)this, v21, v22, v17, v18, v19, v20);
  v63 = (JSC::AssemblerBuffer *)v156;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, (JSC::DFG::SpeculativeJIT *)this, v64, v65, v66, v67, v68, v69);
  v75 = (unsigned int *)v154;
  v76 = *(_QWORD *)(a2 + 24);
  if (*(unsigned __int16 *)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v77 = 0;
    v88 = **(_QWORD **)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v89 = 1;
    v87 = -1;
    goto LABEL_37;
  }
  if (*(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v147 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v8 = v147 < 0xFFFE000000000000;
    if (v147 >= 0xFFFE000000000000)
      v77 = **(_QWORD **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    else
      v77 = 0;
  }
  else
  {
    v77 = 0;
    v8 = 1;
  }
  std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v161, (uint64_t)this, v76, v70, v71, v72, v73, v74);
  JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v78, *(_QWORD *)(a2 + 24), v79, v80, v81, v82, v83);
  v86 = v164;
  if (!v164)
    goto LABEL_80;
  v87 = v163;
  if (v163 == 255)
  {
    v87 = JSC::DFG::SpeculativeJIT::fillJSValue(v161, v162, v84, v70, v71, v72, v73, v74);
    v163 = v87;
  }
  v88 = 0;
  v89 = 0;
  if (v8)
  {
LABEL_37:
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>((uint64_t)&v157, (uint64_t)this, *(_QWORD *)(a2 + 32), v70, v71, v72, v73, v74);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v90, *(_QWORD *)(a2 + 32), v91, v92, v93, v94, v95);
    v86 = v160;
    if (v160)
    {
      LOBYTE(v8) = v159;
      if (v159 == 255)
      {
        LOBYTE(v8) = JSC::DFG::SpeculativeJIT::fillJSValue(v157, v158, v84, v70, v71, v72, v73, v74);
        v96 = 0;
        v159 = v8;
      }
      else
      {
        v96 = 0;
      }
      goto LABEL_42;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    if (v85 != 348)
    {
      v124 = *(uint64_t **)(v86 + 72);
LABEL_49:
      v87 = v63;
      goto LABEL_50;
    }
LABEL_47:
    v124 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
    goto LABEL_49;
  }
  LOBYTE(v8) = -1;
  v96 = 1;
LABEL_42:
  v165[0] = 126;
  v165[1] = v89;
  *(_QWORD *)&v165[2] = v88;
  v165[10] = 126;
  v165[11] = v96;
  *(_QWORD *)&v165[12] = v77;
  v166 = (char)v63;
  v167 = v87;
  v168 = v8;
  v169 = (char)v75;
  v170 = 0;
  v75 = (unsigned int *)v171;
  v171[0] = &v172;
  v171[1] = 2;
  v173[0] = v174;
  v173[1] = 2;
  JSC::JITLeftShiftGenerator::generateFastPath((JSC::JITLeftShiftGenerator *)v165, (JSC::CCallHelpers *)this, v84, v70, v71, v72, v73, v74);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v97, v98, v99, v100, v101, v102, v103, &v148);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v104, v105, v106, v107, v108, v109);
  if (*((_BYTE *)this + 328))
    v116 = 69;
  else
    v116 = 65;
  v149[0] = v148;
  v149[1] = 0;
  v150 = v116;
  v151 = 15;
  v152 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v171, v149, v110, v111, v112, v113, v114, v115);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v173, (uint64_t)this, v117, v118, v119, v120, v121, v122);
  v77 = (char)v63;
  if (v89)
  {
    v86 = *(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL;
    v85 = *(unsigned __int16 *)(v86 + 0x12);
    if (v85 == 355)
      goto LABEL_47;
    goto LABEL_81;
  }
  if (!v96)
    goto LABEL_51;
  v146 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v146 == 355 || v146 == 348)
  {
    v124 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v124 = *(uint64_t **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  }
  LOBYTE(v8) = (_BYTE)v63;
LABEL_50:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *v124, v77, v70, v71, v72, v73, v74);
LABEL_51:
  v125 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, (JSC::DFG::JITCompiler *)a2, v123, v70, v71, v72, v73, v74);
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v148, (uint64_t)this, (uint64_t)operationValueBitLShift, v63, v125, v126, v87, v8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(v75, (uint64_t)this, v127, v128, v129, v130, v131, v132);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v77, a2, 16, 0, v133, v134, v135);
  JSC::JITRightShiftGenerator::~JITRightShiftGenerator((JSC::JITRightShiftGenerator *)v165, v136, v137, v138, v139, v140, v141, v142);
  if (v153)
  {
    v143 = (char)v154;
    if ((char)v154 != -1)
    {
      if ((char)v154 > 15)
        v143 = -1;
      --*(_DWORD *)(v153 + 12 * v143 + 4784);
    }
  }
  if (v155)
  {
    v144 = (char)v156;
    if ((char)v156 != -1)
    {
      if ((char)v156 > 15)
        v144 = -1;
      --*(_DWORD *)(v155 + 12 * v144 + 4784);
    }
  }
  if (v160 && (v158 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v145 = (char)v159;
    if ((char)v159 > 15)
      v145 = -1;
    --*(_DWORD *)(v157 + 12 * v145 + 4784);
  }
  if (v164 && (v162 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v61 = v161;
    v62 = v163;
    goto LABEL_20;
  }
}

void JSC::DFG::SpeculativeJIT::compileValueBitRShift(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::DFG::Node *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000
    && (*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v56, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v53, (uint64_t)this, *((_QWORD *)a2 + 4), v11, v12, v13, v14, v15);
    v22 = v58;
    if (v58 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v56, v57, v16, v17, v18, v19, v20, v21);
      v58 = v22;
    }
    v23 = v55;
    if (v55 == 255)
    {
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v53, v54, v16, v17, v18, v19, v20, v21);
      v55 = v23;
    }
    v24 = (char)v22;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v24, v17, v18, v19, v20, v21);
    v25 = (char)v23;
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v25, v26, v27, v28, v29, v30);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v31, v32, v33, v34, v35, v36, v37);
    ++*((_DWORD *)this + 1196);
    v44 = *((unsigned int *)this + 1194);
    if ((_DWORD)v44 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v44, (uint64_t)v38, v39, v40, v41, v42, v43);
    }
    v45 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v38, v39, v40, v41, v42, v43);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v52, (unsigned __int8 *)this, (uint64_t)operationBitRShiftHeapBigInt, 0, v45, v46, v24, v25);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v47, v48, v49);
    --*((_DWORD *)this + 1196);
    if ((v54 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v50 = (char)v55;
      if ((char)v55 > 15)
        v50 = -1;
      --*(_DWORD *)(v53 + 12 * v50 + 4784);
    }
    if ((v57 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v51 = (char)v58;
      if ((char)v58 > 15)
        v51 = -1;
      --*(_DWORD *)(v56 + 12 * v51 + 4784);
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::emitUntypedOrBigIntRightShiftBitOp(this, a2, v10, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::SpeculativeJIT::compileShiftOp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  char v43;
  int v44;
  __int128 *v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  _BYTE v62[7];
  JSC::DFG::SpeculativeJIT *v63;
  unint64_t v64;
  char v65;
  _BYTE v66[7];

  v10 = *((unsigned __int16 *)a2 + 9);
  v11 = *((_QWORD *)a2 + 3);
  if ((v11 & 0xFC000000000000) != 0)
  {
    v12 = *((_QWORD *)a2 + 4);
    if ((v12 & 0xFC000000000000) != 0)
    {
      v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
      if (*(unsigned __int16 *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
        || **(_QWORD **)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000)
      {
        v63 = this;
        v64 = v11;
        v65 = -1;
        v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v15 = *((unsigned int *)this + 1001);
        if (v14 >= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x197BA7648);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
        {
          v65 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v11, (uint64_t)v66, a4, a5, a6, a7, a8);
          v12 = *((_QWORD *)a2 + 4);
          v15 = *((unsigned int *)this + 1001);
          v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
        }
        v60 = v12;
        v61 = -1;
        v16 = ~*(_DWORD *)(v13 + 48);
        if (v16 >= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x197BA7650);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
        {
          v61 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v12, (uint64_t)v62, a4, a5, a6, a7, a8);
          v15 = *((unsigned int *)this + 1001);
        }
        v17 = v64;
        v18 = ~*(_DWORD *)((v64 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v18 >= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x197BA7658);
        }
        if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 8) == 1)
        {
          v19 = v65;
          if (v65 == 255)
          {
            v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v63, v64, (uint64_t)v66, a4, a5, a6, a7, a8);
            v65 = v19;
          }
          if (v19 > 15)
            v20 = -1;
          else
            v20 = v19;
          ++*((_DWORD *)this + 3 * v20 + 1196);
          v21 = v19;
        }
        else
        {
          v21 = JSC::DFG::SpeculativeJIT::allocate(this, v64, a3, a4, a5, a6, a7, a8);
          v19 = v65;
        }
        if (v19 == -1)
        {
          v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v63, v64, (uint64_t)v66, a4, a5, a6, a7, a8);
          v65 = v19;
        }
        v22 = v61;
        if (v61 == 255)
        {
          v22 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v60, (uint64_t)v62, a4, a5, a6, a7, a8);
          v61 = v22;
        }
        switch(v10)
        {
          case '1':
            v23 = 448798720;
            v25 = (unsigned int *)((char *)this + 200);
            v24 = *((_DWORD *)this + 50);
            v26 = v24 + 4;
            v27 = *((_DWORD *)this + 48);
            break;
          case '3':
            v25 = (unsigned int *)((char *)this + 200);
            v24 = *((_DWORD *)this + 50);
            v26 = v24 + 4;
            v27 = *((_DWORD *)this + 48);
            v23 = 448800768;
            break;
          case '5':
            v25 = (unsigned int *)((char *)this + 200);
            v24 = *((_DWORD *)this + 50);
            v26 = v24 + 4;
            v27 = *((_DWORD *)this + 48);
            v23 = 448799744;
            break;
          default:
            __break(0xC471u);
            goto LABEL_98;
        }
        if (v26 > v27)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 - 36), v17, a3, a4, a5, a6, a7, a8);
          v24 = *v25;
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v24) = v23 | (unsigned __int16)(32 * (v19 & 0x1F)) | ((v22 & 0x1F) << 16) | v21 & 0x1F;
        *((_DWORD *)this + 50) += 4;
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
        v28 = *((_DWORD *)a2 + 12);
        v29 = ~v28;
        if (v29 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BA7660);
        }
        v30 = *((_QWORD *)this + 499);
        v31 = (char *)this + 4776;
        if (v21 > 15)
          v32 = -1;
        else
          v32 = v21;
        v33 = &v31[12 * v32];
        *(_DWORD *)v33 = v28;
        *((_DWORD *)v33 + 1) = 5;
        v34 = v30 + 24 * (int)v29;
        v35 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v34 = a2;
        *(_DWORD *)(v34 + 8) = v35;
        *(_BYTE *)(v34 + 17) = v21;
        *(_DWORD *)(v34 + 12) = 1;
        *(_BYTE *)(v34 + 16) = 0;
        if (v21 != -1)
          --*(_DWORD *)&v31[12 * v32 + 8];
        v36 = v61;
        if (v61 > 15)
          v36 = -1;
        --*((_DWORD *)this + 3 * v36 + 1196);
        v37 = v65;
        if (v65 > 15)
          v37 = -1;
        v38 = (char *)v63 + 12 * v37;
        goto LABEL_37;
      }
      v63 = this;
      v64 = v11;
      v65 = -1;
      v39 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v40 = *((unsigned int *)this + 1001);
      if (v39 >= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197BA7668);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v39 + 12))
      {
        v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v11, (uint64_t)v66, a4, a5, a6, a7, a8);
        v65 = v41;
        v11 = v64;
        v40 = *((unsigned int *)this + 1001);
        v39 = ~*(_DWORD *)((v64 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      }
      else
      {
        v41 = -1;
      }
      if (v39 >= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197BA7670);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v39 + 8) == 1)
      {
        if (v41 == -1)
        {
          v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v63, v11, (uint64_t)v66, a4, a5, a6, a7, a8);
          v65 = v41;
        }
        if (v41 > 15)
          v42 = -1;
        else
          v42 = v41;
        ++*((_DWORD *)this + 3 * v42 + 1196);
        v43 = v41;
      }
      else
      {
        v43 = JSC::DFG::SpeculativeJIT::allocate(this, v11, a3, a4, a5, a6, a7, a8);
        v41 = v65;
      }
      if (v41 == -1)
      {
        v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v63, v64, (uint64_t)v66, a4, a5, a6, a7, a8);
        v65 = v41;
      }
      v44 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v44 == 355 || v44 == 348)
      {
        v45 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v45 = *(__int128 **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      v46 = *(_DWORD *)v45 & 0x1F;
      switch(v10)
      {
        case '3':
          v47 = *((_DWORD *)this + 50);
          if (v47 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v11, a3, a4, a5, a6, a7, a8);
            v47 = *((_DWORD *)this + 50);
          }
          v48 = (32 * (v41 & 0x1F)) | (v46 << 16) | v43 & 0x1F;
          v49 = 318798848;
          break;
        case '1':
          v47 = *((_DWORD *)this + 50);
          if (v47 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v11, a3, a4, a5, a6, a7, a8);
            v47 = *((_DWORD *)this + 50);
          }
          v50 = ((-65536 * v46) & 0x1F0000 | (32 * (v41 & 0x1F)) | (v46 << 10) | v43 & 0x1F) ^ 0x53007C00;
          goto LABEL_60;
        case '5':
          v47 = *((_DWORD *)this + 50);
          if (v47 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v11, a3, a4, a5, a6, a7, a8);
            v47 = *((_DWORD *)this + 50);
          }
          v48 = (32 * (v41 & 0x1F)) | (v46 << 16) | v43 & 0x1F;
          v49 = 1392540672;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197BA75FCLL);
      }
      v50 = v48 | v49;
LABEL_60:
      *(_DWORD *)(*((_QWORD *)this + 7) + v47) = v50;
      *((_DWORD *)this + 50) += 4;
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
      v51 = *((_DWORD *)a2 + 12);
      v52 = ~v51;
      if (v52 < *((unsigned int *)this + 1001))
      {
        v53 = *((_QWORD *)this + 499);
        v54 = (char *)this + 4776;
        if (v43 > 15)
          v55 = -1;
        else
          v55 = v43;
        v56 = &v54[12 * v55];
        *(_DWORD *)v56 = v51;
        *((_DWORD *)v56 + 1) = 5;
        v57 = v53 + 24 * (int)v52;
        v58 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v57 = a2;
        *(_DWORD *)(v57 + 8) = v58;
        *(_BYTE *)(v57 + 17) = v43;
        *(_DWORD *)(v57 + 12) = 1;
        *(_BYTE *)(v57 + 16) = 0;
        if (v43 != -1)
          --*(_DWORD *)&v54[12 * v55 + 8];
        v59 = v65;
        if (v65 > 15)
          v59 = -1;
        v38 = (char *)v63 + 12 * v59;
LABEL_37:
        --*((_DWORD *)v38 + 1196);
        return;
      }
      __break(0xC471u);
LABEL_98:
      JUMPOUT(0x197BA759CLL);
    }
  }
  if (v10 != 53)
  {
    __break(0xC471u);
    JUMPOUT(0x197BA762CLL);
  }
  JSC::DFG::SpeculativeJIT::emitUntypedOrBigIntRightShiftBitOp(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::compileValueAdd(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char *v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  JSC::DFG::Node *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  char *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  unsigned __int8 v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char v105;
  char v106;
  unsigned __int8 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  JSC::DFG::SpeculativeJIT *v111;
  unint64_t v112;
  int v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  signed __int8 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::DFG::Node *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  JSC::DFG::SpeculativeJIT *v153;
  int v154;
  unint64_t v155;
  JSC::DFG::SpeculativeJIT *v156;
  uint64_t v157;
  unint64_t v158;
  int v159;
  unsigned __int8 v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  JSC::DFG::JITCompiler *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  JSC::DFG::Node *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  char *v225;
  char *v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  WTF *v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 v245;
  uint64_t v246;
  char v247;
  JSC::DFG::SpeculativeJIT *v248;
  uint64_t v249;
  signed __int8 v250;
  char v251;
  JSC::DFG::SpeculativeJIT *v252;
  unint64_t v253;
  signed __int8 v254;
  char v255;
  JSC::DFG::SpeculativeJIT *v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  int v265;
  _BYTE v266[10];
  _BYTE v267[10];
  uint64_t v268;

  v268 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 3);
  v12 = (unint64_t *)((char *)a2 + 32);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000 && (*v12 & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v256, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v252, (uint64_t)this, *v12, v115, v116, v117, v118, v119);
    v126 = v258;
    if (v258 == 255)
    {
      v126 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v256, v257, v120, v121, v122, v123, v124, v125);
      LOBYTE(v258) = v126;
    }
    v127 = v254;
    if (v254 == 255)
    {
      v127 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v252, v253, v120, v121, v122, v123, v124, v125);
      v254 = v127;
    }
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v11, v126, v121, v122, v123, v124, v125);
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v12, v127, v128, v129, v130, v131, v132);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v133, v134, v135, v136, v137, v138, v139);
    ++*((_DWORD *)this + 1196);
    v146 = *((unsigned int *)this + 1194);
    if ((_DWORD)v146 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v146, (uint64_t)v140, v141, v142, v143, v144, v145);
    }
    v147 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v140, v141, v142, v143, v144, v145);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v248, (unsigned __int8 *)this, (uint64_t)operationAddHeapBigInt, 0, v147, v148, v126, v127);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v149, v150, v151);
    --*((_DWORD *)this + 1196);
    if ((v253 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v152 = v254;
      if (v254 > 15)
        v152 = -1;
      --*((_DWORD *)v252 + 3 * v152 + 1196);
    }
    if ((v257 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v153 = v256;
      v154 = (char)v258;
      goto LABEL_176;
    }
    return;
  }
  v13 = *((_QWORD *)this + 688);
  v14 = (_QWORD *)(v13 + 24);
  v15 = (_QWORD *)(v13 + 8);
  if ((v10 & 1) != 0)
    v15 = v14;
  v16 = *v15 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = *((unsigned int *)this + 1396);
  if ((_DWORD)v17 != *(_DWORD *)(v16 + 20))
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v16, (void *)v17, v10, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v16 + 20) = v17;
  }
  if (!*(_BYTE *)(v16 + 12))
    goto LABEL_32;
  v18 = *((_QWORD *)this + 688);
  v19 = (_QWORD *)(v18 + 24);
  v20 = (_QWORD *)(v18 + 8);
  if ((*v12 & 1) != 0)
    v21 = v19;
  else
    v21 = v20;
  v22 = *v21 + 32 * *(unsigned int *)((*v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = *((unsigned int *)this + 1396);
  if ((_DWORD)v17 != *(_DWORD *)(v22 + 20))
  {
    if ((*(_QWORD *)(v22 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v22, (void *)v17, v10, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v22 + 20) = v17;
  }
  if (!*(_BYTE *)(v22 + 12))
  {
LABEL_32:
    v48 = *v11;
    v49 = *v11 & 0xFF00FFFFFFFFFFFFLL;
    if (!v49)
      goto LABEL_107;
    v50 = ~*(_DWORD *)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v50 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      goto LABEL_213;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v50 + 12))
      v51 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *v11, v10, a4, a5, a6, a7, a8);
    else
LABEL_107:
      v51 = -1;
    v52 = *v12;
    v53 = *v12 & 0xFF00FFFFFFFFFFFFLL;
    if (!v53)
      goto LABEL_108;
    v54 = ~*(_DWORD *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v54 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA85C8);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v54 + 12))
      v55 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *v12, v10, a4, a5, a6, a7, a8);
    else
LABEL_108:
      v55 = -1;
    if (v51 == -1)
      v51 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v48, v10, a4, a5, a6, a7, a8);
    if (v55 == -1)
      v55 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v52, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v17, v10, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v62 = *((unsigned int *)this + 1194);
    if ((_DWORD)v62 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v62, (uint64_t)v56, v57, v58, v59, v60, v61);
    }
    v63 = (char *)this + 4776;
    v64 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v56, v57, v58, v59, v60, v61);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v256, (unsigned __int8 *)this, (uint64_t)operationValueAddNotNumber, 0, v64, v65, v51, v55);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v66, v67, v68);
    --*((_DWORD *)this + 1196);
    if (v53)
    {
      if (v55 > 15)
        v69 = -1;
      else
        v69 = v55;
      --*(_DWORD *)&v63[12 * v69 + 8];
    }
    if (v49)
    {
      if (v51 > 15)
        v70 = -1;
      else
        v70 = v51;
      --*(_DWORD *)&v63[12 * v70 + 8];
    }
    return;
  }
  v23 = *(_QWORD *)(*((_QWORD *)this + 495) + 40);
  v24 = *(_QWORD *)a2;
  v25 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v25 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v25)
    v23 = *(_QWORD *)(v25 + 8);
  if ((v24 & 2) != 0)
  {
    LODWORD(v26) = -1;
  }
  else if ((v24 & 1) != 0)
  {
    LODWORD(v26) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v26 = v24 >> 36;
  }
  v27 = JSC::CodeBlock::binaryArithProfileForPC(v23, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v23 + 56) + 80) + (v26 >> 2)));
  v28 = *((_QWORD *)this + 46);
  if (v28)
  {
    v29 = (unsigned int *)(v28 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + 1, v29));
    v37 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v37 = v27;
    *(_OWORD *)(v37 + 8) = 0u;
    *(_OWORD *)(v37 + 24) = 0u;
    *(_OWORD *)(v37 + 40) = 0u;
    *(_BYTE *)(v37 + 56) = 0;
    *(_WORD *)(v37 + 57) = 126;
    *(_QWORD *)(v37 + 59) = 0;
    *(_WORD *)(v37 + 67) = 126;
    *(_QWORD *)(v37 + 69) = 0;
    *(_WORD *)(v37 + 77) = -1;
    *(_BYTE *)(v37 + 79) = -1;
    *(_QWORD *)(v37 + 88) = 0;
    *(_QWORD *)(v37 + 88) = *(_QWORD *)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v37;
    do
    {
      v38 = __ldaxr(v29);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v29));
    if (!v39)
    {
      atomic_store(1u, (unsigned int *)(v28 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    }
  }
  else
  {
    JSC::MathICHolder::addJITAddIC((uint64_t *)0x28, v27);
    v37 = v228;
  }
  v40 = 0;
  LOBYTE(v252) = 0;
  v255 = 0;
  LOBYTE(v248) = 0;
  v251 = 0;
  v41 = (char *)this + 4968;
  v42 = (_DWORD *)((char *)this + 4976);
  v43 = 0x17u;
  v44 = -1;
  while (*v42)
  {
LABEL_30:
    ++v40;
    v42 += 3;
    if (v40 == 23)
    {
      v40 = v43;
      v46 = &v41[12 * v43];
      v47 = *(_DWORD *)v46;
      *(_QWORD *)v46 = 0xFFFFFFFF3FFFFFFFLL;
      v42 = v46 + 8;
      goto LABEL_58;
    }
  }
  v45 = *(v42 - 1);
  if (v45 != -1)
  {
    if (v45 < v44)
    {
      v43 = v40;
      v44 = *(v42 - 1);
    }
    goto LABEL_30;
  }
  v47 = *(v42 - 2);
  *((_QWORD *)v42 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_58:
  *v42 = 1;
  v234 = JSC::FPRInfo::toRegister::registerForIndex[v40];
  v237 = JSC::FPRInfo::toRegister::registerForIndex[v40];
  if (v47 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v47, v31, v32, v33, v34, v35, v36);
  v71 = 0;
  v72 = (_DWORD *)((char *)this + 4976);
  v73 = 0x17u;
  v74 = -1;
  while (2)
  {
    if (*v72)
    {
LABEL_65:
      ++v71;
      v72 += 3;
      if (v71 == 23)
      {
        v71 = v73;
        v76 = &v41[12 * v73];
        v77 = *(_DWORD *)v76;
        *(_QWORD *)v76 = 0xFFFFFFFF3FFFFFFFLL;
        v72 = v76 + 8;
        goto LABEL_68;
      }
      continue;
    }
    break;
  }
  v75 = *(v72 - 1);
  if (v75 != -1)
  {
    if (v75 < v74)
    {
      v73 = v71;
      v74 = *(v72 - 1);
    }
    goto LABEL_65;
  }
  v77 = *(v72 - 2);
  *((_QWORD *)v72 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_68:
  *v72 = 1;
  v239 = JSC::FPRInfo::toRegister::registerForIndex[v71];
  if (v77 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v77, v31, v32, v33, v34, v35, v36);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v246, this, v31, v32, v33, v34, v35, v36);
  v236 = v247;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v244, this, v78, v79, v80, v81, v82, v83);
  v238 = v245;
  v90 = *((_QWORD *)this + 688);
  v91 = (_QWORD *)(v90 + 24);
  v92 = (_QWORD *)(v90 + 8);
  if ((*v11 & 1) != 0)
    v93 = v91;
  else
    v93 = v92;
  v94 = *v93 + 32 * *(unsigned int *)((*v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v95 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v95 != *(_DWORD *)(v94 + 20))
  {
    if ((*(_QWORD *)(v94 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v94, v95, v84, v85, v86, v87, v88, v89);
    else
      *(_DWORD *)(v94 + 20) = (_DWORD)v95;
  }
  v96 = *(_QWORD *)(v94 + 8);
  if ((v96 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v96 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v96 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v96 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v96 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v97 = 126;
          else
            v97 = 6;
        }
        else
        {
          v97 = 4;
        }
      }
      else
      {
        v97 = 2;
      }
    }
    else
    {
      v97 = 3;
    }
  }
  else
  {
    v97 = 32;
  }
  *(_WORD *)v267 = v97;
  *(_QWORD *)&v267[2] = 0;
  v98 = *((_QWORD *)this + 688);
  v99 = (_QWORD *)(v98 + 24);
  v100 = (_QWORD *)(v98 + 8);
  if ((*v12 & 1) != 0)
    v101 = v99;
  else
    v101 = v100;
  v102 = *v101 + 32 * *(unsigned int *)((*v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v103 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v103 != *(_DWORD *)(v102 + 20))
  {
    if ((*(_QWORD *)(v102 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v102, v103, v84, v85, v86, v87, v88, v89);
    else
      *(_DWORD *)(v102 + 20) = (_DWORD)v103;
  }
  v104 = *(_QWORD *)(v102 + 8);
  if ((v104 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v104 & 0xFFFFFF8CCFFFFFFFLL) != 0)
      v105 = 126;
    else
      v105 = 6;
    if ((v104 & 0xFFFFFFFFCFFFFFFFLL) == 0)
      v105 = 4;
    if ((v104 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      v106 = v105;
    else
      v106 = 2;
    if ((v104 & 0xFFFFFFFCFFFFFFFFLL) != 0)
      v107 = v106;
    else
      v107 = 3;
  }
  else
  {
    v107 = 32;
  }
  *(_WORD *)v266 = v107;
  *(_QWORD *)&v266[2] = 0;
  v108 = *v11;
  v109 = *v11 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v109 + 0x12) <= 2u
    && (v110 = **(_QWORD **)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v110 > 0xFFFDFFFFFFFFFFFFLL))
  {
    v155 = (unint64_t)v267;
LABEL_126:
    *(_BYTE *)(v155 | 1) = 1;
    *(_QWORD *)(v155 | 2) = v110;
  }
  else if (*(unsigned __int16 *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v110 = **(_QWORD **)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (v110 >= 0xFFFE000000000000)
    {
      v155 = (unint64_t)v266;
      goto LABEL_126;
    }
  }
  v111 = *(JSC::DFG::SpeculativeJIT **)v267;
  v256 = *(JSC::DFG::SpeculativeJIT **)v267;
  v235 = (char *)this + 4968;
  v233 = *(_WORD *)v267 & 0xFF00;
  if (v233 == 256 && *(int *)((char *)&v256 + 2) > 0)
  {
    v114 = -1;
  }
  else
  {
    v252 = this;
    v253 = v108;
    if (!v109)
      goto LABEL_128;
    v112 = ~*(_DWORD *)(v109 + 48);
    if (v112 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA85D0);
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v112 + 12))
    {
LABEL_128:
      v255 = 1;
      goto LABEL_129;
    }
    v113 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v108, v84, v85, v86, v87, v88, v89);
    v114 = v113;
    v254 = v113;
    v255 = 1;
    if (v113 == -1)
    {
LABEL_129:
      v114 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v108, v84, v85, v86, v87, v88, v89);
      v254 = v114;
    }
  }
  v156 = *(JSC::DFG::SpeculativeJIT **)v266;
  v256 = *(JSC::DFG::SpeculativeJIT **)v266;
  v231 = (uint64_t *)v12;
  v232 = *(_WORD *)v266 & 0xFF00;
  if (v232 == 256 && *(int *)((char *)&v256 + 2) > 0)
  {
    v160 = -1;
    goto LABEL_139;
  }
  v157 = *v12;
  v248 = this;
  v249 = v157;
  if ((v157 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_137;
  v158 = ~*(_DWORD *)((v157 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v158 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_212;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v158 + 12))
  {
LABEL_137:
    v251 = 1;
    goto LABEL_138;
  }
  v159 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v157, v84, v85, v86, v87, v88, v89);
  v160 = v159;
  v250 = v159;
  v251 = 1;
  if (v159 == -1)
  {
LABEL_138:
    v160 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v157, v84, v85, v86, v87, v88, v89);
    v250 = v160;
  }
LABEL_139:
  v161 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v161 = 1;
  *(_OWORD *)(v161 + 24) = 0u;
  *(_OWORD *)(v161 + 40) = 0u;
  *(_OWORD *)(v161 + 56) = 0u;
  *(_QWORD *)(v161 + 72) = 0;
  *(_QWORD *)(v161 + 16) = -1;
  *(_QWORD *)(v161 + 8) = -1;
  *(_QWORD *)(v161 + 32) = v161 + 48;
  *(_DWORD *)(v161 + 40) = 2;
  *(_QWORD *)(v37 + 57) = v111;
  *(_WORD *)(v37 + 65) = 0;
  *(_QWORD *)(v37 + 67) = v156;
  *(_WORD *)(v37 + 75) = 0;
  *(_BYTE *)(v37 + 77) = v238;
  *(_BYTE *)(v37 + 78) = v114;
  *(_BYTE *)(v37 + 79) = v160;
  *(_BYTE *)(v37 + 80) = v237;
  *(_BYTE *)(v37 + 81) = v239;
  *(_BYTE *)(v37 + 82) = v236;
  JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateInline(v37, (uint64_t)this, v161 + 8, 0, v162, v163, v164, v165);
  if (!v173)
  {
    v256 = v111;
    if (v233 != 256 || *(int *)((char *)&v256 + 2) < 1)
    {
      v256 = v156;
      if (v232 == 256)
      {
        v183 = a2;
        if (*(int *)((char *)&v256 + 2) >= 1)
        {
          v256 = this;
          std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v248, (uint64_t *)&v256, v231, v168, v169, v170, v171, v172);
          if (v251)
          {
            v160 = v250;
            if (v250 == 255)
            {
              v160 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v248, v249, v167, v168, v169, v170, v171, v172);
              v250 = v160;
            }
            goto LABEL_154;
          }
          goto LABEL_212;
        }
      }
      else
      {
        v183 = a2;
      }
LABEL_154:
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v166, v167, v168, v169, v170, v171, v172);
      v212 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v183, v206, v207, v208, v209, v210, v211);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v256, (unsigned __int8 *)this, (uint64_t)operationValueAdd, v238, v212, v213, v114, v160);
      goto LABEL_155;
    }
    v256 = this;
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v252, (uint64_t *)&v256, v11, v168, v169, v170, v171, v172);
    if (v255)
    {
      v114 = v254;
      v183 = a2;
      if (v254 == 255)
      {
        v114 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v252, v253, v167, v168, v169, v170, v171, v172);
        v254 = v114;
      }
      goto LABEL_154;
    }
LABEL_212:
    __break(1u);
LABEL_213:
    JUMPOUT(0x197BA85C0);
  }
  v242 = 0;
  v243 = 0;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, (uint64_t)&v242, (char)v238, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v171, v172);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(this, v174, v175, v176, v177, v178, v179, v180, &v241);
  v256 = this;
  v257 = (unint64_t)v242;
  v181 = v243;
  v242 = 0;
  v243 = 0;
  v258 = v181;
  do
    v182 = __ldaxr((unsigned int *)v161);
  while (__stlxr(v182 + 1, (unsigned int *)v161));
  LOBYTE(v260) = v114;
  BYTE1(v260) = v160;
  *(_QWORD *)((char *)&v260 + 2) = *(_QWORD *)v267;
  WORD5(v260) = *(_WORD *)&v267[8];
  BYTE12(v260) = v238;
  v183 = a2;
  v184 = *((_QWORD *)a2 + 4);
  *(_QWORD *)&v261 = *((_QWORD *)a2 + 3);
  *((_QWORD *)&v261 + 1) = *(_QWORD *)v266;
  LOWORD(v262) = *(_WORD *)&v266[8];
  *((_QWORD *)&v262 + 1) = v184;
  *(_QWORD *)&v263 = operationValueAddOptimize;
  *((_QWORD *)&v263 + 1) = a2;
  *(_QWORD *)&v264 = v37;
  *((_QWORD *)&v264 + 1) = operationValueAdd;
  v185 = v241;
  v265 = v241;
  v186 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v186 = &off_1E3573420;
  *(_QWORD *)(v186 + 8) = v256;
  *(_QWORD *)(v186 + 16) = v257;
  v187 = v258;
  v257 = 0;
  v258 = 0;
  *(_QWORD *)(v186 + 24) = v187;
  v259 = 0;
  *(_QWORD *)(v186 + 32) = v161;
  v188 = v263;
  v189 = v264;
  v190 = v261;
  *(_OWORD *)(v186 + 72) = v262;
  *(_OWORD *)(v186 + 104) = v189;
  *(_OWORD *)(v186 + 88) = v188;
  *(_OWORD *)(v186 + 40) = v260;
  *(_OWORD *)(v186 + 56) = v190;
  *(_DWORD *)(v186 + 120) = v185;
  v240 = v186;
  JSC::DFG::SpeculativeJIT::addSlowPathGeneratorLambda((uint64_t)this, &v240);
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::~Node((uint64_t)&v256, v191, v192, v193, v194, v195, v196, v197);
  v205 = v242;
  if (v242)
  {
    v242 = 0;
    LODWORD(v243) = 0;
    WTF::fastFree((unint64_t)v205, v198, v199, v200, v201, v202, v203, v204);
  }
LABEL_155:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v238, (uint64_t)v183, 16, 0, v202, v203, v204);
  do
  {
    v221 = __ldaxr((unsigned int *)v161);
    v222 = v221 - 1;
  }
  while (__stlxr(v222, (unsigned int *)v161));
  if (!v222)
  {
    atomic_store(1u, (unsigned int *)v161);
    v229 = *(_QWORD *)(v161 + 32);
    if (v161 + 48 != v229 && v229 != 0)
    {
      *(_QWORD *)(v161 + 32) = 0;
      *(_DWORD *)(v161 + 40) = 0;
      WTF::fastFree(v229, v214, v215, v216, v217, v218, v219, v220);
    }
    WTF::fastFree(v161, v214, v215, v216, v217, v218, v219, v220);
  }
  if (v244)
  {
    v223 = (char)v245;
    if ((char)v245 != -1)
    {
      if ((char)v245 > 15)
        v223 = -1;
      --*(_DWORD *)(v244 + 12 * v223 + 4784);
    }
  }
  if (v246)
  {
    v224 = v247;
    if (v247 != -1)
    {
      if (v247 > 15)
        v224 = -1;
      --*(_DWORD *)(v246 + 12 * v224 + 4784);
    }
  }
  v225 = &v235[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v239]];
  --*((_DWORD *)v225 + 2);
  v226 = &v235[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v234]];
  --*((_DWORD *)v226 + 2);
  if (v251 && (v249 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v227 = v250;
    if (v250 > 15)
      v227 = -1;
    --*((_DWORD *)v248 + 3 * v227 + 1196);
  }
  if (v255 && (v253 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v153 = v252;
    v154 = v254;
LABEL_176:
    if (v154 > 15)
      v154 = -1;
    --*((_DWORD *)v153 + 3 * v154 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileValueSub(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  WTF *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  WTF *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  char *v150;
  char *v151;
  unsigned int v152;
  unsigned int v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  char *v159;
  JSC::DFG::Node *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  unsigned __int8 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  JSC::DFG::Node *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  JSC::AssemblerBuffer *v212;
  char v213;
  char v214;
  JSC::AssemblerBuffer *v215;
  unint64_t v216;
  uint64_t v217;
  char v218;
  char v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  unsigned __int8 v226;
  int v227;
  __int16 v228;
  __int16 v229;
  char v230;
  WTF *v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  unsigned __int8 v238;
  uint64_t v239;
  unint64_t v240;
  int v241;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0x6C000000000000)
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 495) + 40);
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)a2 & 0xFFFFFFFF8;
    if ((*(_QWORD *)a2 & 1) != 0)
      v13 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
    if (v13)
      v11 = *(_QWORD *)(v13 + 8);
    if ((v12 & 2) != 0)
    {
      LODWORD(v14) = -1;
    }
    else if ((v12 & 1) != 0)
    {
      LODWORD(v14) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v14 = v12 >> 36;
    }
    v15 = JSC::CodeBlock::binaryArithProfileForPC(v11, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v11 + 56) + 80) + (v14 >> 2)));
    v16 = *((_QWORD *)this + 46);
    if (v16)
    {
      v17 = (unsigned int *)(v16 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      v25 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v25 = v15;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_BYTE *)(v25 + 56) = 0;
      *(_WORD *)(v25 + 57) = 126;
      *(_QWORD *)(v25 + 59) = 0;
      *(_WORD *)(v25 + 67) = 126;
      *(_QWORD *)(v25 + 69) = 0;
      *(_WORD *)(v25 + 77) = -1;
      *(_BYTE *)(v25 + 79) = -1;
      *(_QWORD *)(v25 + 88) = 0;
      *(_QWORD *)(v25 + 88) = *(_QWORD *)(v16 + 64);
      *(_QWORD *)(v16 + 64) = v25;
      do
      {
        v26 = __ldaxr(v17);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v17));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)(v16 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      }
    }
    else
    {
      JSC::MathICHolder::addJITSubIC(40, v15);
      v25 = v209;
    }
    v28 = 0;
    v29 = (char *)this + 4968;
    v30 = (_DWORD *)((char *)this + 4976);
    v31 = 0x17u;
    v32 = -1;
    while (1)
    {
      if (!*v30)
      {
        v33 = *(v30 - 1);
        if (v33 == -1)
        {
          v35 = *(v30 - 2);
          *((_QWORD *)v30 - 1) = 0xFFFFFFFF3FFFFFFFLL;
          goto LABEL_24;
        }
        if (v33 < v32)
        {
          v31 = v28;
          v32 = *(v30 - 1);
        }
      }
      ++v28;
      v30 += 3;
      if (v28 == 23)
      {
        v28 = v31;
        v34 = &v29[12 * v31];
        v35 = *(_DWORD *)v34;
        *(_QWORD *)v34 = 0xFFFFFFFF3FFFFFFFLL;
        v30 = v34 + 8;
LABEL_24:
        *v30 = 1;
        v36 = JSC::FPRInfo::toRegister::registerForIndex[v28];
        v37 = JSC::FPRInfo::toRegister::registerForIndex[v28];
        if (v35 != 0x3FFFFFFF)
          JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v35, v19, v20, v21, v22, v23, v24);
        v38 = 0;
        v39 = (_DWORD *)((char *)this + 4976);
        v40 = 0x17u;
        v41 = -1;
        while (1)
        {
          if (!*v39)
          {
            v42 = *(v39 - 1);
            if (v42 == -1)
            {
              v44 = *(v39 - 2);
              *((_QWORD *)v39 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_34:
              *v39 = 1;
              v222 = JSC::FPRInfo::toRegister::registerForIndex[v38];
              if (v44 != 0x3FFFFFFF)
                JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v44, v19, v20, v21, v22, v23, v24);
              JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v224, this, v19, v20, v21, v22, v23, v24);
              v45 = v225;
              JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v237, this, v46, v47, v48, v49, v50, v51);
              v221 = v238;
              v58 = *((_QWORD *)a2 + 3);
              v59 = *((_QWORD *)this + 688);
              v60 = *(unsigned int *)((v58 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v61 = (_QWORD *)(v59 + 24);
              v62 = (_QWORD *)(v59 + 8);
              if ((v58 & 1) != 0)
                v63 = v61;
              else
                v63 = v62;
              v64 = *v63 + 32 * v60;
              v65 = (void *)*((unsigned int *)this + 1396);
              if ((_DWORD)v65 != *(_DWORD *)(v64 + 20))
              {
                if ((*(_QWORD *)(v64 + 8) & 0x2800FFFFFFF7) != 0)
                  JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v64, v65, v52, v53, v54, v55, v56, v57);
                else
                  *(_DWORD *)(v64 + 20) = (_DWORD)v65;
              }
              v66 = *(_QWORD *)(v64 + 8);
              if ((v66 & 0xFFFFFF8CCFFFFFFFLL) != 0)
                v67 = 126;
              else
                v67 = 6;
              if ((v66 & 0xFFFFFFFFCFFFFFFFLL) == 0)
                v67 = 4;
              if ((v66 & 0xFFFFFF8CFFFFFFFFLL) != 0)
                v68 = v67;
              else
                v68 = 2;
              if ((v66 & 0xFFFFFFFCFFFFFFFFLL) == 0)
                v68 = 3;
              if ((v66 & 0xFFFFFEFFFFFFFFFFLL) != 0)
                v69 = v68;
              else
                v69 = 32;
              v219 = v69;
              v236 = 0;
              v235 = 0;
              v70 = *((_QWORD *)a2 + 4);
              v71 = *((_QWORD *)this + 688);
              v72 = *(unsigned int *)((v70 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v73 = (_QWORD *)(v71 + 24);
              v74 = (_QWORD *)(v71 + 8);
              if ((v70 & 1) != 0)
                v75 = v73;
              else
                v75 = v74;
              v76 = *v75 + 32 * v72;
              v77 = (void *)*((unsigned int *)this + 1396);
              if ((_DWORD)v77 != *(_DWORD *)(v76 + 20))
              {
                if ((*(_QWORD *)(v76 + 8) & 0x2800FFFFFFF7) != 0)
                  JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v76, v77, v52, v53, v54, v55, v56, v57);
                else
                  *(_DWORD *)(v76 + 20) = (_DWORD)v77;
              }
              v78 = *(_QWORD *)(v76 + 8);
              if ((v78 & 0xFFFFFEFFFFFFFFFFLL) != 0)
              {
                if ((v78 & 0xFFFFFF8CCFFFFFFFLL) != 0)
                  v79 = 126;
                else
                  v79 = 6;
                if ((v78 & 0xFFFFFFFFCFFFFFFFLL) == 0)
                  v79 = 4;
                if ((v78 & 0xFFFFFF8CFFFFFFFFLL) != 0)
                  v80 = v79;
                else
                  v80 = 2;
                if ((v78 & 0xFFFFFFFCFFFFFFFFLL) != 0)
                  v81 = v80;
                else
                  v81 = 3;
              }
              else
              {
                v81 = 32;
              }
              v218 = v81;
              v234 = 0;
              v233 = 0;
              v82 = *((_QWORD *)a2 + 3);
              v213 = v45;
              if (*(unsigned __int16 *)((v82 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
              {
                v157 = **(_QWORD **)((v82 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
                if (v157 > 0xFFFDFFFFFFFFFFFFLL)
                {
                  v158 = &v235;
                  v159 = &v236;
                  goto LABEL_121;
                }
              }
              if (*(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
                || (v157 = **(_QWORD **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48),
                    v157 < 0xFFFE000000000000))
              {
                v83 = 0;
                v84 = 0;
              }
              else
              {
                v158 = &v233;
                v159 = &v234;
LABEL_121:
                *v159 = 1;
                *v158 = v157;
                v84 = v236;
                v83 = v235 | ((unint64_t)WORD2(v235) << 32);
              }
              if ((v82 & 0xFF00FFFFFFFFFFFFLL) == 0)
              {
LABEL_76:
                v86 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v82, v52, v53, v54, v55, v56, v57);
                goto LABEL_77;
              }
              v85 = ~*(_DWORD *)((v82 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
              if (v85 >= *((unsigned int *)this + 1001))
                goto LABEL_158;
              if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v85 + 12))
                goto LABEL_76;
              v86 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v82, v52, v53, v54, v55, v56, v57);
              if (v86 == -1)
                goto LABEL_76;
LABEL_77:
              v223 = v86;
              v214 = v37;
              v216 = v82 & 0xFF00FFFFFFFFFFFFLL;
              v217 = v36;
              v87 = v234;
              v88 = WORD2(v233);
              v89 = v233;
              v90 = *((_QWORD *)a2 + 4);
              v220 = v90 & 0xFF00FFFFFFFFFFFFLL;
              if ((v90 & 0xFF00FFFFFFFFFFFFLL) == 0)
              {
LABEL_81:
                v92 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v90, v52, v53, v54, v55, v56, v57);
                goto LABEL_82;
              }
              v91 = ~*(_DWORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
              if (v91 >= *((unsigned int *)this + 1001))
              {
LABEL_158:
                __break(0xC471u);
                JUMPOUT(0x197BA91C8);
              }
              if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v91 + 12))
                goto LABEL_81;
              v92 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v90, v52, v53, v54, v55, v56, v57);
              if (v92 == -1)
                goto LABEL_81;
LABEL_82:
              v93 = v89 | (v88 << 32);
              v94 = WTF::fastMalloc((WTF *)0x50);
              *(_DWORD *)v94 = 1;
              *(_OWORD *)(v94 + 24) = 0u;
              *(_OWORD *)(v94 + 40) = 0u;
              *(_OWORD *)(v94 + 56) = 0u;
              *(_QWORD *)(v94 + 72) = 0;
              *(_QWORD *)(v94 + 16) = -1;
              *(_QWORD *)(v94 + 8) = -1;
              *(_QWORD *)(v94 + 32) = v94 + 48;
              *(_DWORD *)(v94 + 40) = 2;
              *(_BYTE *)(v25 + 57) = v219;
              *(_BYTE *)(v25 + 58) = v84;
              *(_DWORD *)(v25 + 59) = v83;
              *(_WORD *)(v25 + 63) = WORD2(v83);
              *(_WORD *)(v25 + 65) = 0;
              *(_BYTE *)(v25 + 67) = v218;
              *(_BYTE *)(v25 + 68) = v87;
              *(_DWORD *)(v25 + 69) = v93;
              *(_WORD *)(v25 + 73) = WORD2(v93);
              *(_WORD *)(v25 + 75) = 0;
              *(_BYTE *)(v25 + 77) = v221;
              *(_BYTE *)(v25 + 78) = v223;
              *(_BYTE *)(v25 + 79) = v92;
              *(_BYTE *)(v25 + 80) = v214;
              *(_BYTE *)(v25 + 81) = v222;
              *(_BYTE *)(v25 + 82) = v213;
              JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateInline(v25, (uint64_t)this, v94 + 8, 0, v95, v96, v97, v98);
              if (v106)
              {
                v231 = 0;
                v232 = 0;
                JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, (uint64_t)&v231, (char)v221, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v104, v105);
                v114 = *((_DWORD *)this + 50);
                if (v114 < *((_DWORD *)this + 13))
                {
                  v212 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
                  do
                  {
                    if ((v114 + 4) > *((_DWORD *)this + 48))
                    {
                      v215 = v212;
                      JSC::AssemblerBuffer::outOfLineGrow(v212, v107, v108, v109, v110, v111, v112, v113);
                      v212 = v215;
                      v114 = *((_DWORD *)this + 50);
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v114) = -721215457;
                    v114 = *((_DWORD *)this + 50) + 4;
                    *((_DWORD *)this + 50) = v114;
                  }
                  while (v114 < *((_DWORD *)this + 13));
                }
                *((_DWORD *)this + 52) = 0;
                v115 = v231;
                v116 = v232;
                v231 = 0;
                v232 = 0;
                do
                  v117 = __ldaxr((unsigned int *)v94);
                while (__stlxr(v117 + 1, (unsigned int *)v94));
                v118 = *((_QWORD *)a2 + 3);
                v119 = *((_QWORD *)a2 + 4);
                v120 = WTF::fastMalloc((WTF *)0x80);
                *(_QWORD *)v120 = &off_1E3573470;
                *(_QWORD *)(v120 + 8) = this;
                *(_QWORD *)(v120 + 16) = v115;
                *(_QWORD *)(v120 + 24) = v116;
                *(_QWORD *)(v120 + 32) = v94;
                *(_BYTE *)(v120 + 40) = v223;
                *(_BYTE *)(v120 + 41) = v92;
                *(_BYTE *)(v120 + 42) = v219;
                *(_BYTE *)(v120 + 43) = v236;
                *(_QWORD *)(v120 + 44) = v235;
                *(_BYTE *)(v120 + 52) = v221;
                *(_WORD *)(v120 + 53) = v229;
                *(_BYTE *)(v120 + 55) = v230;
                *(_QWORD *)(v120 + 56) = v118;
                *(_BYTE *)(v120 + 64) = v218;
                *(_BYTE *)(v120 + 65) = v234;
                *(_QWORD *)(v120 + 66) = v233;
                *(_DWORD *)(v120 + 74) = v227;
                *(_WORD *)(v120 + 78) = v228;
                *(_QWORD *)(v120 + 80) = v119;
                *(_QWORD *)(v120 + 88) = operationValueSubOptimize;
                *(_QWORD *)(v120 + 96) = a2;
                *(_QWORD *)(v120 + 104) = v25;
                *(_QWORD *)(v120 + 112) = operationValueSub;
                *(_DWORD *)(v120 + 120) = v114;
                v128 = *((_QWORD *)this + 497);
                v239 = v120;
                v240 = v128;
                v241 = *((_DWORD *)this + 1411);
                v129 = *((unsigned int *)this + 1437);
                if ((_DWORD)v129 == *((_DWORD *)this + 1436))
                {
                  v130 = WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5736, v129 + 1, (unint64_t)&v239);
                  v131 = *((_QWORD *)this + 717) + 24 * *((unsigned int *)this + 1437);
                  v132 = *(_QWORD *)v130;
                  *(_QWORD *)v130 = 0;
                  *(_QWORD *)v131 = v132;
                  v133 = *(_QWORD *)(v130 + 8);
                  *(_DWORD *)(v131 + 16) = *(_DWORD *)(v130 + 16);
                  *(_QWORD *)(v131 + 8) = v133;
                  v134 = v239;
                  ++*((_DWORD *)this + 1437);
                  v239 = 0;
                  v136 = v217;
                  v135 = (char *)this + 4968;
                  v137 = v216;
                  if (v134)
                    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
                }
                else
                {
                  v155 = *((_QWORD *)this + 717) + 24 * v129;
                  *(_QWORD *)v155 = v120;
                  v156 = v240;
                  *(_DWORD *)(v155 + 16) = v241;
                  *(_QWORD *)(v155 + 8) = v156;
                  ++*((_DWORD *)this + 1437);
                  v136 = v217;
                  v135 = (char *)this + 4968;
                  v137 = v216;
                }
                v138 = v231;
                if (v231)
                {
                  v231 = 0;
                  LODWORD(v232) = 0;
                  WTF::fastFree((unint64_t)v138, v121, v122, v123, v124, v125, v126, v127);
                }
              }
              else
              {
                JSC::DFG::SpeculativeJIT::flushRegisters(this, v99, v100, v101, v102, v103, v104, v105);
                v166 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v160, v161, v162, v163, v164, v165);
                JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v239, (unsigned __int8 *)this, (uint64_t)operationValueSub, v221, v166, v167, v223, v92);
                v136 = v217;
                v135 = (char *)this + 4968;
                v137 = v216;
              }
              JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v221, (uint64_t)a2, 16, 0, v125, v126, v127);
              do
              {
                v146 = __ldaxr((unsigned int *)v94);
                v147 = v146 - 1;
              }
              while (__stlxr(v147, (unsigned int *)v94));
              if (!v147)
              {
                atomic_store(1u, (unsigned int *)v94);
                v210 = *(_QWORD *)(v94 + 32);
                if (v94 + 48 != v210 && v210 != 0)
                {
                  *(_QWORD *)(v94 + 32) = 0;
                  *(_DWORD *)(v94 + 40) = 0;
                  WTF::fastFree(v210, v139, v140, v141, v142, v143, v144, v145);
                }
                WTF::fastFree(v94, v139, v140, v141, v142, v143, v144, v145);
              }
              if (v237)
              {
                v148 = (char)v238;
                if ((char)v238 != -1)
                {
                  if ((char)v238 > 15)
                    v148 = -1;
                  --*(_DWORD *)(v237 + 12 * v148 + 4784);
                }
              }
              if (v224)
              {
                v149 = (char)v225;
                if ((char)v225 != -1)
                {
                  if ((char)v225 > 15)
                    v149 = -1;
                  --*(_DWORD *)(v224 + 12 * v149 + 4784);
                }
              }
              v150 = &v135[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v222]];
              --*((_DWORD *)v150 + 2);
              v151 = &v135[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v136]];
              --*((_DWORD *)v151 + 2);
              if (v220)
              {
                if (v92 > 15)
                  v152 = -1;
                else
                  v152 = v92;
                --*((_DWORD *)this + 3 * v152 + 1196);
              }
              if (v137)
              {
                if (v223 > 15)
                  v153 = -1;
                else
                  v153 = v223;
                v154 = (char *)this + 12 * v153;
                goto LABEL_114;
              }
              return;
            }
            if (v42 < v41)
            {
              v40 = v38;
              v41 = *(v39 - 1);
            }
          }
          ++v38;
          v39 += 3;
          if (v38 == 23)
          {
            v38 = v40;
            v43 = &v29[12 * v40];
            v44 = *(_DWORD *)v43;
            *(_QWORD *)v43 = 0xFFFFFFFF3FFFFFFFLL;
            v39 = v43 + 8;
            goto LABEL_34;
          }
        }
      }
    }
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v239, (uint64_t)this, v10, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v224, (uint64_t)this, *((_QWORD *)a2 + 4), v168, v169, v170, v171, v172);
  v179 = v241;
  if (v241 == 255)
  {
    v179 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v239, v240, v173, v174, v175, v176, v177, v178);
    LOBYTE(v241) = v179;
  }
  v180 = v226;
  if (v226 == 255)
  {
    v180 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v224, v225, v173, v174, v175, v176, v177, v178);
    v226 = v180;
  }
  v181 = v179;
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v181, v174, v175, v176, v177, v178);
  v182 = (char)v180;
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v182, v183, v184, v185, v186, v187);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v188, v189, v190, v191, v192, v193, v194);
  ++*((_DWORD *)this + 1196);
  v201 = *((unsigned int *)this + 1194);
  if ((_DWORD)v201 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v201, (uint64_t)v195, v196, v197, v198, v199, v200);
  }
  v202 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v195, v196, v197, v198, v199, v200);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v237, (unsigned __int8 *)this, (uint64_t)operationSubHeapBigInt, 0, v202, v203, v181, v182);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v204, v205, v206);
  --*((_DWORD *)this + 1196);
  if ((v225 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v207 = (char)v226;
    if ((char)v226 > 15)
      v207 = -1;
    --*(_DWORD *)(v224 + 12 * v207 + 4784);
  }
  if ((v240 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v208 = (char)v241;
    if ((char)v241 > 15)
      v208 = -1;
    v154 = (char *)(v239 + 12 * v208);
LABEL_114:
    --*((_DWORD *)v154 + 1196);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileInstanceOfCustom(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;

  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v69, (uint64_t)this, *((_QWORD *)a2 + 3), 0, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v66, (uint64_t)this, *((_QWORD *)a2 + 4), v10, v11, v12, v13, v14);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v63, (uint64_t)this, *((_QWORD *)a2 + 5), 0, v15, v16, v17, v18);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v61, this, v19, v20, v21, v22, v23, v24);
  v32 = v71;
  if (v71 == 255)
  {
    v32 = JSC::DFG::SpeculativeJIT::fillJSValue(v69, v70, v26, v27, v28, v29, v30, v31);
    v71 = v32;
  }
  v33 = v68;
  if (v68 == 255)
  {
    v33 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v66, v67, v26, v27, v28, v29, v30, v31);
    v68 = v33;
  }
  v34 = v65;
  if (v65 == 255)
  {
    v34 = JSC::DFG::SpeculativeJIT::fillJSValue(v63, v64, v26, v27, v28, v29, v30, v31);
    v65 = v34;
  }
  v35 = v62;
  v36 = v62;
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v25, v26, v27, v28, v29, v30, v31, &v72);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v37, v38, v39, v40, v41, v42);
  v49 = v72;
  if (*((_BYTE *)this + 328))
    v50 = 0xFF000F4500000000;
  else
    v50 = 0xFF000F4100000000;
  v51 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v43, v44, v45, v46, v47, v48);
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v60, v49, v50, (uint64_t)this, v35, v51, v52, v32, v33, v59, v34);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v60);
  v53 = v60;
  v60 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v36, (uint64_t)a2, 0);
  if (v61)
  {
    v55 = v62;
    if (v62 != -1)
    {
      if (v62 > 15)
        v55 = -1;
      --*(_DWORD *)(v61 + 12 * v55 + 4784);
    }
  }
  if ((v64 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v56 = v65;
    if (v65 > 15)
      v56 = -1;
    --*(_DWORD *)(v63 + 12 * v56 + 4784);
  }
  if ((v67 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v57 = v68;
    if (v68 > 15)
      v57 = -1;
    --*(_DWORD *)(v66 + 12 * v57 + 4784);
  }
  if ((v70 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v58 = v71;
    if (v71 > 15)
      v58 = -1;
    --*(_DWORD *)(v69 + 12 * v58 + 4784);
  }
  return result;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, int a10, char a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  JSC::AssemblerBuffer *v28;
  JSC::AssemblerBuffer *v29;

  v18 = WTF::fastMalloc((WTF *)0xA0);
  v19 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v18, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v19 = off_1E35746F0;
  *(_DWORD *)(v19 + 48) = a2;
  *(_QWORD *)(v19 + 52) = a3;
  v27 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v19 + 60) = v27;
  if (v27 < *(_DWORD *)(a4 + 52))
  {
    v28 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v27 + 4) > *(_DWORD *)(a4 + 192))
      {
        v29 = v28;
        JSC::AssemblerBuffer::outOfLineGrow(v28, v20, v21, v22, v23, v24, v25, v26);
        v28 = v29;
        v27 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v27;
      *(_DWORD *)(v18 + 60) = v27;
    }
    while (v27 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v18 = off_1E35734F0;
  *(_QWORD *)(v18 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 74) = a5;
  *(_QWORD *)(v18 + 80) = v18 + 96;
  *(_QWORD *)(v18 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v18 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v25, v26);
  *(_QWORD *)v18 = &off_1E35734C0;
  *(_QWORD *)(v18 + 128) = operationInstanceOfCustom;
  *(_QWORD *)(v18 + 136) = a6;
  *(_QWORD *)(v18 + 144) = a7;
  *(_BYTE *)(v18 + 152) = a8;
  *(_BYTE *)(v18 + 153) = a9;
  *(_BYTE *)(v18 + 154) = a11;
  *a1 = v18;
}

uint64_t JSC::DFG::SpeculativeJIT::compileIsCellWithType(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int i;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52[2];
  char v53;
  __int16 v54;
  char v55;
  unsigned int v56[3];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != 8)
      goto LABEL_69;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_60;
    v44 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v44 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA9A74);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v44 + 12))
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_60:
      v13 = -1;
    v45 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v45 >= *((unsigned int *)this + 1001))
    {
LABEL_69:
      __break(0xC471u);
      JUMPOUT(0x197BA9A44);
    }
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v45 + 8) == 1)
    {
      if (v13 == -1)
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      if (v13 > 15)
        v51 = -1;
      else
        v51 = v13;
      ++*((_DWORD *)this + 3 * v51 + 1196);
      v46 = v13;
    }
    else
    {
      v46 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::compare8((uint64_t)this, 0, v13 | 0x500000000, *((unsigned __int8 *)a2 + 72), v46, a6, a7, a8);
    JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v46, v46);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v46, (uint64_t)a2, 21, 0, v47, v48, v49);
    if (v46 != -1)
    {
      if (v46 > 15)
        v50 = -1;
      else
        v50 = v46;
      --*((_DWORD *)this + 3 * v50 + 1196);
    }
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
      goto LABEL_30;
  }
  else
  {
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_52;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA9A64);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_52:
      v13 = -1;
    v14 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v14 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BA9A6CLL);
    }
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 8) == 1)
    {
      if (v13 == -1)
        v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      if (v13 > 15)
        v15 = -1;
      else
        v15 = v13;
      ++*((_DWORD *)this + 3 * v15 + 1196);
      v16 = v13;
    }
    else
    {
      v16 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, a4, a5, a6, a7, a8, (uint64_t)v56);
    JSC::MacroAssemblerARM64::compare8((uint64_t)this, 0, v13 | 0x500000000, *((unsigned __int8 *)a2 + 72), v16, v17, v18, v19);
    JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v16, v16);
    for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v20, v21, v22, v23, v24, v25, v26);
        i = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
      i = *((_DWORD *)this + 50) + 4;
    }
    v28 = i;
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v20, v21, v22, v23, v24, v25, v26);
      v28 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v28) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v29 = 69;
    else
      v29 = 65;
    v52[0] = i;
    v52[1] = 0;
    v53 = v29;
    v54 = 15;
    v55 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v56, (uint64_t)this, v21, v22, v23, v24, v25, v26);
    v37 = *((_DWORD *)this + 50);
    if (v37 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v30, v31, v32, v33, v34, v35, v36);
      v37 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v37) = v16 | 0x321F07E0;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v52, (uint64_t)this, v31, v32, v33, v34, v35, v36);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v16, (uint64_t)a2, 21, 0, v38, v39, v40);
    if (v16 != -1)
    {
      if (v16 > 15)
        v42 = -1;
      else
        v42 = v16;
      --*((_DWORD *)this + 3 * v42 + 1196);
    }
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
LABEL_30:
      if (v13 > 15)
        v43 = -1;
      else
        v43 = v13;
      --*((_DWORD *)this + 3 * v43 + 1196);
    }
  }
  return result;
}

void JSC::MacroAssemblerARM64::compare8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;

  v8 = a5;
  v9 = a2;
  if (a2 < 4 || a2 - 8 <= 1)
    v11 = a4;
  else
    v11 = (char)a4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA9BE0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v12 = *(_BYTE *)(a1 + 304);
  if (a2 < 4 || a2 - 8 <= 1)
    JSC::MacroAssemblerARM64::load8(a1, a3, v12, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load8SignedExtendTo32(a1, a3, v12, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BA9C00);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v11, *(char *)(a1 + 272), v13, v14, v15, v16, v17);
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = 1796211263;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = (v8 & 0x1F | ((v9 & 0xF) << 12)) ^ 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateCellOperand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v12 = *(unsigned __int8 *)(a3 + 16);
      if (v12 == 255)
      {
        LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v12;
      }
      if ((char)v12 > 15)
        v14 = -1;
      else
        v14 = v12;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v12) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v12;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileIsTypedArrayView(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int i;
  unsigned int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  char v56;
  unsigned int v57[2];
  char v58;
  __int16 v59;
  char v60;
  unsigned int v61[3];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_40;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x197BAA0DCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_40:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
    goto LABEL_46;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v14 = -1;
    else
      v14 = v12;
    ++*((_DWORD *)this + 3 * v14 + 1196);
    v15 = v12;
  }
  else
  {
    v15 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v12, 1, a4, a5, a6, a7, a8, (uint64_t)v61);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x500000000, v15, v16, v17, v18, v19, v20);
  v28 = *((_DWORD *)this + 50);
  if (v28 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v28) = v15 | (32 * v15) | 0x51009C00;
  v29 = *((_DWORD *)this + 50);
  v30 = v29 + 4;
  *((_DWORD *)this + 50) = v29 + 4;
  if ((v29 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v30) = (32 * v15) | 0x71002C1F;
  v31 = *((_DWORD *)this + 50);
  v32 = v31 + 4;
  *((_DWORD *)this + 50) = v31 + 4;
  if ((v31 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v21, v22, v23, v24, v25, v26, v27);
    v32 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v32) = v15 & 0x1F | 0x1A9F27E0;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v15, v15);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v33, v34, v35, v36, v37, v38, v39);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v41 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v33, v34, v35, v36, v37, v38, v39);
    v41 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v41) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v42 = 69;
  else
    v42 = 65;
  v57[0] = i;
  v57[1] = 0;
  v58 = v42;
  v59 = 15;
  v60 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v61, (uint64_t)this, v34, v35, v36, v37, v38, v39);
  v50 = *((_DWORD *)this + 50);
  if (v50 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v43, v44, v45, v46, v47, v48, v49);
    v50 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v50) = v15 | 0x321F07E0;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v57, (uint64_t)this, v44, v45, v46, v47, v48, v49);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v15, (uint64_t)a2, 21, 0, v51, v52, v53);
  if (v15 != -1)
  {
    if (v15 > 15)
      v55 = -1;
    else
      v55 = v15;
    --*((_DWORD *)this + 3 * v55 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v56 = -1;
    else
      v56 = v12;
    --*((_DWORD *)this + 3 * v56 + 1196);
  }
  return result;
}

void JSC::MacroAssemblerARM64::compare32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  JSC::AssemblerBuffer *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  int v40;

  v8 = a5;
  v9 = a3;
  v10 = a2;
  if ((_DWORD)a4)
  {
    if (a4 > 0xFFF)
    {
      v16 = -(int)a4;
      if (-(int)a4 > 0xFFF)
      {
        if ((a4 & 0xFFF) != 0)
        {
          v12 = 0;
          v13 = 0;
          v15 = 0;
          LOBYTE(v16) = 0;
          v14 = 0;
        }
        else
        {
          v31 = (int)a4 >> 12;
          v32 = BYTE3(a4);
          v33 = 0xC00000000;
          v34 = 1;
          if (-((int)a4 >> 12) > 0xFFF)
            v33 = 0;
          if (-v31 <= 0xFFF)
          {
            v35 = 0x100000000;
          }
          else
          {
            v34 = 0;
            v35 = 0;
          }
          if (-v31 <= 0xFFF)
            v36 = -v31;
          else
            LOBYTE(v36) = 0;
          if (-v31 <= 0xFFF)
            v37 = -((int)a4 >> 12) & 0xFFFFFF00;
          else
            v37 = 0;
          v15 = 0x100000000;
          v38 = v32 == 0;
          if (v32)
            v12 = v33;
          else
            v12 = 0xC00000000;
          if (v38)
            v13 = 0;
          else
            v13 = v34;
          if (v38)
          {
            LOBYTE(v16) = (int)a4 >> 12;
          }
          else
          {
            v15 = v35;
            LOBYTE(v16) = v36;
          }
          if (v38)
            v14 = v31 & 0xFFFFFF00;
          else
            v14 = v37;
        }
      }
      else
      {
        v12 = 0;
        v14 = v16 & 0xFFFFFF00;
        v15 = 0x100000000;
        v13 = 1;
      }
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = a4 & 0xFFFFFF00;
      v15 = 0x100000000;
      LOBYTE(v16) = a4;
    }
    v17 = v12 | v14 | v16;
    v18 = v15 | v13;
    goto LABEL_16;
  }
  v17 = 0;
  v18 = 0x100000000;
  if ((int)a2 <= 0)
  {
    if (!(_DWORD)a2)
      goto LABEL_35;
    goto LABEL_16;
  }
  if ((_DWORD)a2 == 1)
  {
    v10 = 4096;
    goto LABEL_35;
  }
  if ((_DWORD)a2 == 10)
  {
    v10 = 20480;
    goto LABEL_35;
  }
  if ((_DWORD)a2 != 11)
  {
LABEL_16:
    if ((v18 & 0xFF00000000) != 0)
    {
      v19 = (JSC::AssemblerBuffer *)(a1 + 56);
      v20 = *(_DWORD *)(a1 + 200);
      if ((_BYTE)v18)
        v21 = 822083615;
      else
        v21 = 1895825439;
      if ((v17 & 0xFFFFFFFF00000000) == 0xC00000000)
        v21 |= 0x400000u;
      v23 = v21 | ((v17 & 0xFFF) << 10) | (32 * a3);
      if (v20 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v19, a2, a3, a4, a5, a6, a7, a8);
        v20 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v23;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BAA3E0);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
      if (v9 == 31)
      {
        v22 = *(_DWORD *)(a1 + 200);
        if (v22 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v22 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = 1798333439;
      }
      else
      {
        v39 = *(_DWORD *)(a1 + 200);
        if (v39 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v39 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = (32 * (v9 & 0x1F)) | 0x6B10001F;
      }
    }
    v24 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v24;
    v25 = v8 & 0x1F | ((v10 & 0xF) << 12);
    v26 = (_QWORD *)(a1 + 56);
    v27 = (unsigned int *)(a1 + 200);
    if (v24 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v24 = *v27;
    }
    goto LABEL_32;
  }
  v10 = 0x4000;
LABEL_35:
  v28 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
  v27 = (unsigned int *)(a1 + 200);
  v29 = *(_DWORD *)(a1 + 200);
  v26 = (_QWORD *)(a1 + 56);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    v40 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0x6A00001F;
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v28 = v40;
    v29 = *v27;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
  v30 = *(_DWORD *)(a1 + 200);
  v24 = v30 + 4;
  *(_DWORD *)(a1 + 200) = v30 + 4;
  if ((v30 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v24 = *v27;
  }
  v25 = v10 | v8 & 0x1F;
LABEL_32:
  *(_DWORD *)(*v26 + v24) = v25 ^ 0x1A9F17E0;
  *v27 += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileHasStructureWithFlags(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  JSC::ARM64LogicalImmediate *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  char v42;
  char v43;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_32;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAA720);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_32:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
    goto LABEL_35;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v43 = v12 > 15 ? -1 : v12;
    ++*((_DWORD *)this + 3 * v43 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v12, v14, a4, a5, a6, a7, a8);
  v22 = *((_DWORD *)this + 50);
  if (v22 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v15, v16, v17, v18, v19, v20, v21);
    v22 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v22) = v14 & 0x1F | (32 * (v14 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197BAA708);
  }
  v23 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)a2 + 18);
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v14 | 0x1000000000, *((char *)this + 304), v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::test32((uint64_t)this, 17, v23, v24, v25, v26, v27, v28);
  v36 = *((_DWORD *)this + 50);
  if (v36 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v36) = v14 & 0x1F | 0x1A9F07E0;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v14, v14);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v14, (uint64_t)a2, 21, 0, v37, v38, v39);
  if (v14 != -1)
  {
    if (v14 > 15)
      v41 = -1;
    else
      v41 = v14;
    --*((_DWORD *)this + 3 * v41 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v42 = -1;
    else
      v42 = v12;
    --*((_DWORD *)this + 3 * v42 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileToObjectOrCallObjectConstructor(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  JSC::DFG::Node *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[2];
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD v95[3];
  _DWORD v96[3];
  WTF *v97;
  uint64_t v98;
  _BYTE v99[24];
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;

  v8 = *((_QWORD *)a2 + 3);
  if ((v8 & 0xFC000000000000) != 0)
  {
    __break(0xC471u);
    return;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v102, (uint64_t)this, v8, 0, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((uint64_t)&v100, this, (uint64_t)&v102, v11, v12, v13, v14, v15);
  v22 = v104;
  if (v104 == 255)
  {
    v22 = JSC::DFG::SpeculativeJIT::fillJSValue(v102, v103, v16, v17, v18, v19, v20, v21);
    v104 = v22;
  }
  v23 = v101;
  v24 = v101;
  v97 = (WTF *)v99;
  v98 = 2;
  v25 = v22;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v22, 1, v17, v18, v19, v20, v21, (uint64_t)v96);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v97, v96, v26, v27, v28, v29, v30, v31);
  v32 = v22;
  JSC::AssemblyHelpers::branchIfNotObject((uint64_t)this, v32, v33, v34, v35, v36, v37, (uint64_t)v95);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v97, v95, v38, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::move(this, v32, v23, v44, v45, v46, v47, v48);
  v49 = v24;
  if (*((_WORD *)a2 + 9) == 321)
  {
    v75 = *((_DWORD *)a2 + 18);
    if (v75 == -1)
      v76 = 0;
    else
      v76 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 240), v75);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v91, (uint64_t *)&v97);
    v83 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v77, v78, v79, v80, v81, v82);
    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v94, (uint64_t *)&v91, this, v49, v83, v84, v25, v76);
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v94);
    v85 = v94;
    v94 = 0;
    if (v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
    v63 = v91;
    if (&v93 == (uint64_t *)v91 || !v91)
      goto LABEL_11;
    v64 = &v92;
    v91 = 0;
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v87, (uint64_t *)&v97);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v86, this, **((_QWORD **)a2 + 9), v50, v51, v52, v53, v54);
    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v90, (uint64_t *)&v87, this, v24, v86[0], v86[1], v25);
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v90);
    v62 = v90;
    v90 = 0;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    v63 = v87;
    if (&v89 == (uint64_t *)v87 || !v87)
      goto LABEL_11;
    v64 = &v88;
    v87 = 0;
  }
  *(_DWORD *)v64 = 0;
  WTF::fastFree((unint64_t)v63, v55, v56, v57, v58, v59, v60, v61);
LABEL_11:
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, v49, a2, 0, v58, v59, v60, v61);
  v72 = v97;
  if (v99 != (_BYTE *)v97 && v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree((unint64_t)v72, v65, v66, v67, v68, v69, v70, v71);
  }
  if (v100)
  {
    v73 = v101;
    if (v101 != -1)
    {
      if (v101 > 15)
        v73 = -1;
      --*(_DWORD *)(v100 + 12 * v73 + 4784);
    }
  }
  if ((v103 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v74 = v104;
    if (v104 > 15)
      v74 = -1;
    --*(_DWORD *)(v102 + 12 * v74 + 4784);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  _BYTE *v28;
  WTF *v29;
  WTF *v30;
  unsigned int v31;
  int v32;
  _BYTE *v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v56;
  unsigned int v57;
  _BYTE v58[24];
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE v62[24];
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE v66[24];
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE v70[32];

  v15 = *((unsigned int *)a2 + 3);
  v56 = (WTF *)v58;
  v57 = v15;
  if (v15 < 3)
  {
    v16 = v58;
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  else
  {
    if (v15 >= 0x15555556)
      goto LABEL_47;
    v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v15));
    v56 = (WTF *)v16;
    LODWORD(v15) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  v17 = *a2;
  v18 = *a2 + 12 * v15;
  do
  {
    *(_DWORD *)v16 = *(_DWORD *)v17;
    *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
    v17 += 12;
    v16 += 12;
  }
  while (v17 != v18);
LABEL_8:
  v19 = WTF::fastMalloc((WTF *)0xC0);
  v20 = v57;
  v59 = (WTF *)v62;
  v60 = 2;
  v61 = v57;
  if (v57 < 3)
  {
    v21 = v62;
  }
  else
  {
    if (v57 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAAE18);
    }
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v57));
    v60 = 12 * v57 / 0xC;
    v59 = (WTF *)v21;
    v20 = v57;
  }
  if (v20)
  {
    v22 = v56;
    v23 = (WTF *)((char *)v56 + 12 * v20);
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v22 + 4);
      v22 = (WTF *)((char *)v22 + 12);
      v21 += 12;
    }
    while (v22 != v23);
  }
  v54 = a5;
  v24 = v61;
  v63 = (WTF *)v66;
  v64 = 2;
  v65 = v61;
  if (v61 < 3)
  {
    v25 = a6;
    v26 = a7;
    v28 = v66;
  }
  else
  {
    if (v61 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAAE20);
    }
    v25 = a6;
    v26 = a7;
    v27 = 12 * v61;
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v61));
    v64 = (v27 & 0xFFFFFFFC) / 0xC;
    v63 = (WTF *)v28;
    v24 = v61;
  }
  if (v24)
  {
    v29 = v59;
    v30 = (WTF *)((char *)v59 + 12 * v24);
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)((char *)v29 + 4);
      v29 = (WTF *)((char *)v29 + 12);
      v28 += 12;
    }
    while (v29 != v30);
  }
  v31 = v65;
  v67 = v70;
  v68 = 2;
  v69 = v65;
  if (v65 < 3)
  {
    v33 = v70;
    if (!v65)
      goto LABEL_29;
LABEL_27:
    v34 = v63;
    v35 = (WTF *)((char *)v63 + 12 * v31);
    do
    {
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)((char *)v34 + 4);
      v34 = (WTF *)((char *)v34 + 12);
      v33 += 12;
    }
    while (v34 != v35);
    goto LABEL_29;
  }
  if (v65 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197BAAE10);
  }
  v32 = 12 * v65;
  v33 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v65));
  v68 = (v32 & 0xFFFFFFFC) / 0xC;
  v67 = v33;
  v31 = v65;
  if (v65)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v19, (uint64_t *)&v67, a3);
  v43 = (unint64_t)v67;
  if (v70 != v67 && v67 != 0)
  {
    v67 = 0;
    v68 = 0;
    WTF::fastFree(v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)v19 = off_1E3573550;
  *(_QWORD *)(v19 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v19 + 100) = 0;
  *(_BYTE *)(v19 + 102) = a4;
  *(_QWORD *)(v19 + 104) = v19 + 120;
  *(_QWORD *)(v19 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v19 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v41, v42);
  v52 = v63;
  if (v66 != (_BYTE *)v63 && v63)
  {
    v63 = 0;
    v64 = 0;
    WTF::fastFree((unint64_t)v52, v45, v46, v47, v48, v49, v50, v51);
  }
  *(_QWORD *)v19 = &off_1E3573520;
  *(_QWORD *)(v19 + 152) = operationToObject;
  *(_QWORD *)(v19 + 160) = v54;
  *(_QWORD *)(v19 + 168) = v25;
  *(_BYTE *)(v19 + 176) = v26;
  *(_QWORD *)(v19 + 184) = a8;
  *a1 = v19;
  v53 = v59;
  if (v62 != (_BYTE *)v59 && v59)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v53, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v58 != (_BYTE *)v56)
  {
    if (v56)
      WTF::fastFree((unint64_t)v56, v45, v46, v47, v48, v49, v50, v51);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE *v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v53;
  unsigned int v54;
  _BYTE v55[24];
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[32];

  v13 = *((unsigned int *)a2 + 3);
  v53 = (WTF *)v55;
  v54 = v13;
  if (v13 < 3)
  {
    v14 = v55;
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  else
  {
    if (v13 >= 0x15555556)
      goto LABEL_47;
    v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v13));
    v53 = (WTF *)v14;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  v15 = *a2;
  v16 = *a2 + 12 * v13;
  do
  {
    *(_DWORD *)v14 = *(_DWORD *)v15;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
    v15 += 12;
    v14 += 12;
  }
  while (v15 != v16);
LABEL_8:
  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = v54;
  v56 = (WTF *)v59;
  v57 = 2;
  v58 = v54;
  if (v54 < 3)
  {
    v19 = v59;
  }
  else
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAB204);
    }
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
    v57 = 12 * v54 / 0xC;
    v56 = (WTF *)v19;
    v18 = v54;
  }
  if (v18)
  {
    v20 = v53;
    v21 = (WTF *)((char *)v53 + 12 * v18);
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)((char *)v20 + 4);
      v20 = (WTF *)((char *)v20 + 12);
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  v51 = a5;
  if (v58 < 3)
  {
    v23 = a6;
    v25 = v63;
  }
  else
  {
    if (v58 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAB20CLL);
    }
    v23 = a6;
    v24 = 12 * v58;
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
    v61 = (v24 & 0xFFFFFFFC) / 0xC;
    v60 = (WTF *)v25;
    v22 = v58;
  }
  if (v22)
  {
    v26 = v56;
    v27 = (WTF *)((char *)v56 + 12 * v22);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v62;
  v64 = v67;
  v65 = 2;
  v66 = v62;
  if (v62 < 3)
  {
    v30 = v67;
    if (!v62)
      goto LABEL_29;
LABEL_27:
    v31 = v60;
    v32 = (WTF *)((char *)v60 + 12 * v28);
    do
    {
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)((char *)v31 + 4);
      v31 = (WTF *)((char *)v31 + 12);
      v30 += 12;
    }
    while (v31 != v32);
    goto LABEL_29;
  }
  if (v62 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197BAB1FCLL);
  }
  v29 = 12 * v62;
  v30 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
  v65 = (v29 & 0xFFFFFFFC) / 0xC;
  v64 = v30;
  v28 = v62;
  if (v62)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v64, a3);
  v40 = (unint64_t)v64;
  if (v67 != v64 && v64 != 0)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  }
  *(_QWORD *)v17 = off_1E35735B0;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 100) = 0;
  *(_BYTE *)(v17 + 102) = a4;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  *(_QWORD *)(v17 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v17 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v38, v39);
  v49 = v60;
  if (v63 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v17 = &off_1E3573580;
  *(_QWORD *)(v17 + 152) = operationCallObjectConstructor;
  *(_QWORD *)(v17 + 160) = v51;
  *(_QWORD *)(v17 + 168) = v23;
  *(_BYTE *)(v17 + 176) = a7;
  *a1 = v17;
  v50 = v56;
  if (v59 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
  }
  if (v55 != (_BYTE *)v53)
  {
    if (v53)
      WTF::fastFree((unint64_t)v53, v42, v43, v44, v45, v46, v47, v48);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithAdd(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t *result;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  int v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  int v65;
  char v66;
  JSC::DFG::SpeculativeJIT *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  char *v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  void *v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  unsigned int *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  unsigned int v140;
  char *v141;
  int v142;
  unsigned int v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172[3];
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  __int128 v186;
  char v187;
  _BYTE v188[7];
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  JSC::DFG::SpeculativeJIT *v193;
  unint64_t v194;
  char v195;
  _BYTE v196[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    v12 = *((_QWORD *)a2 + 4);
    v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
    if (*(unsigned __int16 *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
      && **(_QWORD **)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
    {
      v193 = this;
      v194 = v10;
      v195 = -1;
      v42 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v43 = *((unsigned int *)this + 1001);
      if (v42 >= v43)
      {
        __break(0xC471u);
        JUMPOUT(0x197BAC0C0);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v42 + 12))
      {
        v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v196, a4, a5, a6, a7, a8);
        v195 = v44;
        v10 = v194;
        v43 = *((unsigned int *)this + 1001);
        v42 = ~*(_DWORD *)((v194 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      }
      else
      {
        v44 = -1;
      }
      if (v42 >= v43)
      {
        __break(0xC471u);
        JUMPOUT(0x197BAC0C8);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v42 + 8) == 1)
      {
        if (v44 == -1)
        {
          v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v193, v10, (uint64_t)v196, a4, a5, a6, a7, a8);
          v195 = v44;
        }
        if (v44 > 15)
          v45 = -1;
        else
          v45 = v44;
        ++*((_DWORD *)this + 3 * v45 + 1196);
        v46 = v44;
      }
      else
      {
        v46 = JSC::DFG::SpeculativeJIT::allocate(this, v10, a3, a4, a5, a6, a7, a8);
        v44 = v195;
      }
      if (v44 == -1)
      {
        v44 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v193, v194, (uint64_t)v196, a4, a5, a6, a7, a8);
        v195 = v44;
      }
      v47 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v47 == 355 || v47 == 348)
      {
        v48 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v48 = *(__int128 **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      v49 = *(_QWORD *)v48;
      v50 = *(_QWORD *)v48;
      if (*((_DWORD *)a2 + 18) != 1)
      {
        JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, v44, v50, v46, a6, a7, a8, (uint64_t)&v186);
        if (v44 == v46)
        {
          v191 = v186;
          v192 = *(_QWORD *)((char *)&v186 + 4);
          LODWORD(v184) = v49;
          BYTE4(v184) = v46;
          BYTE5(v184) = 2;
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, (uint64_t)&v191, &v184, v51, v52);
        }
        else
        {
          v189 = v186;
          v190 = *(_QWORD *)((char *)&v186 + 4);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, &v189);
        }
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v53, v54, v55, v56, v57, v58);
        v59 = *((_DWORD *)a2 + 12);
        v60 = ~v59;
        if (v60 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BAC0D0);
        }
        goto LABEL_55;
      }
      JSC::MacroAssemblerARM64::add32((uint64_t)this, v50, v44, v46, a5, a6, a7, a8);
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v94, v95, v96, v97, v98, v99);
      v59 = *((_DWORD *)a2 + 12);
      v60 = ~v59;
      if (v60 < *((unsigned int *)this + 1001))
      {
LABEL_55:
        v61 = *((_QWORD *)this + 499);
        if (v46 > 15)
          v62 = -1;
        else
          v62 = v46;
        v63 = (char *)this + 12 * v62;
        *((_DWORD *)v63 + 1194) = v59;
        *((_DWORD *)v63 + 1195) = 5;
        v64 = v61 + 24 * (int)v60;
        v65 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v64 = a2;
        *(_DWORD *)(v64 + 8) = v65;
        *(_BYTE *)(v64 + 17) = v46;
        *(_DWORD *)(v64 + 12) = 1;
        *(_BYTE *)(v64 + 16) = 0;
        if (v46 != -1)
        {
          if (v46 > 15)
            v66 = -1;
          else
            v66 = v46;
          --*((_DWORD *)this + 3 * v66 + 1196);
        }
        v67 = v193;
        v68 = v195;
LABEL_64:
        if (v68 > 15)
          v68 = -1;
        v41 = (char *)v67 + 12 * v68;
LABEL_33:
        --*((_DWORD *)v41 + 1196);
        return result;
      }
      __break(0xC471u);
LABEL_199:
      JUMPOUT(0x197BABA78);
    }
    v193 = this;
    v194 = v10;
    v195 = -1;
    v14 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v15 = *((unsigned int *)this + 1001);
    if (v14 >= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0A8);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    {
      v195 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v196, a4, a5, a6, a7, a8);
      v12 = *((_QWORD *)a2 + 4);
      v15 = *((unsigned int *)this + 1001);
      v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v186 = this;
    *((_QWORD *)&v186 + 1) = v12;
    v187 = -1;
    v16 = ~*(_DWORD *)(v13 + 48);
    if (v16 >= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0B0);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
      v187 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v12, (uint64_t)v188, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateInt32Operand>((uint64_t)&v184, this, (uint64_t)&v193, (uint64_t)&v186, a5, a6, a7, a8);
    v24 = v195;
    if (v195 == 255)
    {
      v24 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v193, v194, (uint64_t)v196, v19, v20, v21, v22, v23);
      v195 = v24;
    }
    v25 = v187;
    if (v187 == 255)
    {
      v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v186, *((unint64_t *)&v186 + 1), (uint64_t)v188, v19, v20, v21, v22, v23);
      v187 = v25;
    }
    v26 = (char)v185;
    if (*((_DWORD *)a2 + 18) == 1)
    {
      if (v25 == 31)
      {
        v25 = v24;
        v24 = 31;
      }
      else if (v24 != 31 && (char)v185 != 31)
      {
        v92 = (unsigned __int16)(32 * (v24 & 0x1F)) | ((v25 & 0x1F) << 16) | v185 & 0x1F | 0xB000000;
        v93 = *((_DWORD *)this + 50);
        if (v93 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v17, v18, v19, v20, v21, v22, v23);
          v93 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v93) = v92;
        *((_DWORD *)this + 50) += 4;
        goto LABEL_19;
      }
      JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (char)v185 | (32 * (char)v24) | ((v25 & 0x1F) << 16) | 0xB206000u, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, (char)v24, (char)v25, (char)v185, v21, v22, v23, (uint64_t)&v182);
      if (v24 == v26 && v25 == v26)
      {
        v180 = v182;
        v181 = v183;
        LOBYTE(v179) = v25;
        BYTE4(v179) = v25;
        BYTE5(v179) = 1;
        v29 = &v180;
      }
      else if (v24 == v26)
      {
        v177 = v182;
        v178 = v183;
        LOBYTE(v179) = v25;
        WORD2(v179) = v24;
        v29 = &v177;
      }
      else
      {
        if (v25 != v26)
        {
          v173 = v182;
          v174 = v183;
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, &v173);
          goto LABEL_19;
        }
        v175 = v182;
        v176 = v183;
        LOBYTE(v179) = v24;
        WORD2(v179) = v25;
        v29 = &v175;
      }
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, (uint64_t)v29, &v179, v27, v28);
    }
LABEL_19:
    result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v18, v19, v20, v21, v22, v23);
    v31 = *((_DWORD *)a2 + 12);
    v32 = ~v31;
    if (v32 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0B8);
    }
    v33 = *((_QWORD *)this + 499);
    if (v26 > 15)
      v34 = -1;
    else
      v34 = v26;
    v35 = (char *)this + 12 * v34;
    *((_DWORD *)v35 + 1194) = v31;
    *((_DWORD *)v35 + 1195) = 5;
    v36 = v33 + 24 * (int)v32;
    v37 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v36 = a2;
    *(_DWORD *)(v36 + 8) = v37;
    *(_BYTE *)(v36 + 17) = v26;
    *(_DWORD *)(v36 + 12) = 1;
    *(_BYTE *)(v36 + 16) = 0;
    if (v184)
    {
      v38 = (char)v185;
      if ((char)v185 != -1)
      {
        if ((char)v185 > 15)
          v38 = -1;
        --*(_DWORD *)(v184 + 12 * v38 + 4784);
      }
    }
    v39 = v187;
    if (v187 > 15)
      v39 = -1;
    --*(_DWORD *)(v186 + 12 * v39 + 4784);
    v40 = v195;
    if (v195 > 15)
      v40 = -1;
    v41 = (char *)v193 + 12 * v40;
    goto LABEL_33;
  }
  if ((_DWORD)v11 == 49)
  {
    v193 = this;
    v194 = v10;
    v195 = -1;
    v69 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v69 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0D8);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v69 + 12))
      v195 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v70 = *((_QWORD *)a2 + 4);
    *(_QWORD *)&v186 = this;
    *((_QWORD *)&v186 + 1) = v70;
    v187 = -1;
    if (((v70 >> 50) & 0x3F) - 49 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x197BABFA0);
    }
    v71 = ~*(_DWORD *)((v70 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v71 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0E0);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v71 + 12))
      v187 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v70, a3, a4, a5, a6, a7, a8);
    JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v184, (uint64_t)this, (uint64_t)&v193, (uint64_t)&v186, a5, a6, a7, a8);
    v79 = v195;
    if (v195 == 255)
      v79 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v193, v194, v73, v74, v75, v76, v77, v78);
    v80 = v187;
    if (v187 == 255)
      v80 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v186, *((unint64_t *)&v186 + 1), v73, v74, v75, v76, v77, v78);
    v81 = (char)v185;
    v82 = *((_DWORD *)this + 50);
    if (v82 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v72, v73, v74, v75, v76, v77, v78);
      v82 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v82) = (32 * v79) | (v80 << 16) | v81 | 0x1E602800;
    *((_DWORD *)this + 50) += 4;
    v83 = (char)v185;
    result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v73, v74, v75, v76, v77, v78);
    v84 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v83];
    v85 = *((_DWORD *)a2 + 12);
    *((_DWORD *)v84 + 1242) = v85;
    *((_DWORD *)v84 + 1243) = 6;
    v86 = ~v85;
    if (v86 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BAC0E8);
    }
    v87 = *((_QWORD *)this + 499) + 24 * (int)v86;
    v88 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v87 = a2;
    *(_DWORD *)(v87 + 8) = v88;
    *(_BYTE *)(v87 + 17) = v83;
    *(_DWORD *)(v87 + 12) = 4;
    *(_BYTE *)(v87 + 16) = 0;
    if (v184)
    {
      v89 = v184 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v185];
      --*(_DWORD *)(v89 + 4976);
    }
    v90 = v186 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v80];
    --*(_DWORD *)(v90 + 4976);
    v91 = (char *)v193 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v79];
    --*((_DWORD *)v91 + 1244);
    return result;
  }
  if ((_DWORD)v11 != 52)
  {
    __break(0xC471u);
    JUMPOUT(0x197BABFE0);
  }
  v100 = *((_QWORD *)this + 688);
  v101 = (_QWORD *)(v100 + 24);
  v102 = (_QWORD *)(v100 + 8);
  if ((v10 & 1) != 0)
    v102 = v101;
  v103 = *v102 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v104 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v104 != *(_DWORD *)(v103 + 20))
  {
    if ((*(_QWORD *)(v103 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v103, v104, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v103 + 20) = (_DWORD)v104;
  }
  if ((*(_BYTE *)(v103 + 12) & 8) != 0)
  {
    v113 = *((_QWORD *)a2 + 3);
  }
  else
  {
    v105 = *((_QWORD *)a2 + 4);
    v106 = *((_QWORD *)this + 688);
    v107 = *(unsigned int *)((v105 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v108 = (_QWORD *)(v106 + 24);
    v109 = (_QWORD *)(v106 + 8);
    if ((v105 & 1) != 0)
      v110 = v108;
    else
      v110 = v109;
    v111 = *v110 + 32 * v107;
    v112 = (void *)*((unsigned int *)this + 1396);
    if ((_DWORD)v112 != *(_DWORD *)(v111 + 20))
    {
      if ((*(_QWORD *)(v111 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v111, v112, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v111 + 20) = (_DWORD)v112;
    }
    v113 = *((_QWORD *)a2 + 3);
    if ((*(_BYTE *)(v111 + 12) & 8) == 0)
    {
      JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v193, (uint64_t)this, *((_QWORD *)a2 + 3));
      JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v186, (uint64_t)this, *((_QWORD *)a2 + 4), (uint64_t)&v193, v146, v147, v148, v149);
      JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateWhicheverInt52Operand>((uint64_t)&v184, this, (JSC::DFG::SpeculateWhicheverInt52Operand *)&v193, v150, v151, v152, v153, v154);
      v160 = v195;
      if (v195 == 255)
      {
        if (v196[0])
          v161 = 3;
        else
          v161 = 2;
        v160 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v193, v194, v161, v155, v156, v157, v158, v159);
        v195 = v160;
      }
      v162 = v187;
      if (v187 == 255)
      {
        if (v188[0])
          v163 = 3;
        else
          v163 = 2;
        v162 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52((JSC::DFG::SpeculativeJIT *)v186, *((unint64_t *)&v186 + 1), v163, v155, v156, v157, v158, v159);
        v187 = v162;
      }
      JSC::MacroAssemblerARM64::add64(this, v160, v162, (char)v185, v156, v157, v158, v159);
      if (v196[0])
        v168 = 3;
      else
        v168 = 2;
      result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v185, a2, v168, v164, v165, v166, v167);
      if (v184)
      {
        v169 = (char)v185;
        if ((char)v185 != -1)
        {
          if ((char)v185 > 15)
            v169 = -1;
          --*(_DWORD *)(v184 + 12 * v169 + 4784);
        }
      }
      v170 = v187;
      if (v187 > 15)
        v170 = -1;
      --*(_DWORD *)(v186 + 12 * v170 + 4784);
      v67 = v193;
      v68 = v195;
      goto LABEL_64;
    }
  }
  if ((v113 & 0xFC000000000000) != 0xD0000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x197BAC054);
  }
  v114 = ~*(_DWORD *)((v113 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v114 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAC0F0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v114 + 12))
    v115 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v113, 2, a4, a5, a6, a7, a8);
  else
    v115 = -1;
  v116 = *((_QWORD *)a2 + 4);
  if ((v116 & 0xFC000000000000) != 0xD0000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x197BAC074);
  }
  v117 = ~*(_DWORD *)((v116 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v117 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAC0F8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v117 + 12))
    v118 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, *((_QWORD *)a2 + 4), 2, a4, a5, a6, a7, a8);
  else
    v118 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v193, this, a3, a4, a5, a6, a7, a8);
  if (v115 == -1)
    v115 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v113, 2, v121, v122, v123, v124, v125);
  if (v194 != v115)
  {
    if (v115 == 63)
    {
      if (v194 != 31)
      {
        v126 = v194 & 0x1F | 0xD2800000;
        goto LABEL_125;
      }
    }
    else if (v115 != 31 && (char)v194 != 31)
    {
      v126 = v194 | ((v115 & 0x1F) << 16) | 0xAA0003E0;
LABEL_125:
      v128 = (unsigned int *)((char *)this + 200);
      v127 = *((_DWORD *)this + 50);
      if (v127 + 4 > *((_DWORD *)this + 48))
      {
        v171 = v126;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v119, v120, v121, v122, v123, v124, v125);
        v126 = v171;
        v127 = *v128;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v127) = v126;
      *v128 += 4;
      goto LABEL_128;
    }
    v126 = (char)v194 | (32 * v115) | 0x91000000;
    goto LABEL_125;
  }
LABEL_128:
  if (v118 == -1)
    v118 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v116, 2, v121, v122, v123, v124, v125);
  JSC::MacroAssemblerARM64::branchAdd64((uint64_t)this, 6, (char)v194, v118, (char)v194, v123, v124, v125, (uint64_t)v172);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xCuLL, (JSC::DFG::Node *)0xFF80000000, 0, v172);
  v129 = (char)v194;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v130, v131, v132, v133, v134, v135);
  v136 = *((_DWORD *)a2 + 12);
  v137 = ~v136;
  if (v137 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_199;
  }
  v138 = *((_QWORD *)this + 499) + 24 * (int)v137;
  v139 = (char *)this + 4776;
  if (v129 > 15)
    v140 = -1;
  else
    v140 = v129;
  v141 = &v139[12 * v140];
  *(_DWORD *)v141 = v136;
  *((_DWORD *)v141 + 1) = 4;
  v142 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v138 = a2;
  *(_DWORD *)(v138 + 8) = v142;
  *(_BYTE *)(v138 + 17) = v129;
  *(_DWORD *)(v138 + 12) = 2;
  *(_BYTE *)(v138 + 16) = 0;
  if (v193)
  {
    v143 = (char)v194;
    if ((char)v194 != -1)
    {
      if ((char)v194 > 15)
        v143 = -1;
      --*((_DWORD *)v193 + 3 * v143 + 1196);
    }
  }
  if (v118 > 15)
    v144 = -1;
  else
    v144 = v118;
  --*(_DWORD *)&v139[12 * v144 + 8];
  if (v115 > 15)
    v145 = -1;
  else
    v145 = v115;
  --*(_DWORD *)&v139[12 * v145 + 8];
  return result;
}

void JSC::MacroAssemblerARM64::branchAdd32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v9;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int i;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;

  v9 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31 || (_DWORD)a5 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v12 | a5 & 0x1F | (32 * a3) | 0x2B206000, a3, a4, a5 & 0x1F | (32 * a3), a6, a7, a8);
  }
  else
  {
    v13 = a5 & 0x1F | (32 * (a3 & 0x1F)) | v12 | 0x2B000000;
    v14 = *(_DWORD *)(a1 + 200);
    if (v14 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v13;
    *(_DWORD *)(a1 + 200) += 4;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a1 + 200);
  }
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = v9 | 0x54000000;
  v16 = *(_DWORD *)(a1 + 200);
  v17 = v16 + 4;
  *(_DWORD *)(a1 + 200) = v16 + 4;
  v18 = v16 + 8;
  v19 = v16 + 4;
  if (v18 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v20 = -122;
  else
    v20 = -126;
  *(_DWORD *)a9 = v17;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v20;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  if (a4 < 0x1000)
  {
    v14 = 0x20000000;
LABEL_3:
    v15 = a5 & 0x1F | (32 * a3) | v14;
    v16 = ((a4 & 0xFFF) << 10) | 0x11000000;
LABEL_7:
    v19 = v15 | v16;
    v20 = *(_DWORD *)(a1 + 200);
    if (v20 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v20 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v19;
    v21 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v21;
    if (*(_BYTE *)(a1 + 328))
    {
      for (; (signed int)v21 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v21)
      {
        if (v21 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v21 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
        v21 = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = a2 | 0x54000000;
    v22 = *(_DWORD *)(a1 + 200);
    v23 = v22 + 4;
    *(_DWORD *)(a1 + 200) = v22 + 4;
    v24 = v22 + 8;
    v25 = v22 + 4;
    if (v24 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v26 = -122;
    else
      v26 = -126;
    *(_DWORD *)a9 = v23;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v26;
    *(_BYTE *)(a9 + 9) = a2;
    *(_WORD *)(a9 + 10) = -256;
    return;
  }
  v17 = -(int)a4;
  if (-(int)a4 < 0x1000)
  {
    v18 = 1610612736;
LABEL_6:
    v15 = a5 & 0x1F | (32 * a3) | v18 | (v17 << 10);
    v16 = 285212672;
    goto LABEL_7;
  }
  if ((a4 & 0xFFF) == 0)
  {
    v30 = (int)a4 >> 12;
    if (!BYTE3(a4))
    {
      v14 = 541065216;
      a4 = ((int)a4 >> 12);
      goto LABEL_3;
    }
    v17 = -v30;
    if (-v30 < 0x1000)
    {
      v18 = 1614807040;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C31278);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchAdd32(a1, a2, a3, 16, a5, v27, v28, v29, a9);
}

void JSC::MacroAssemblerARM64::add64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if ((_DWORD)a3 == 31)
  {
    a3 = a2;
    a2 = 31;
  }
  else if ((_DWORD)a2 != 31 && (_DWORD)a4 != 31)
  {
    v8 = (unsigned __int16)(32 * (a2 & 0x1F)) | ((a3 & 0x1F) << 16) | a4 & 0x1F;
    v9 = -1962934272;
    goto LABEL_5;
  }
  v8 = a4 | (32 * a2) | ((a3 & 0x1F) << 16);
  v9 = -1960812544;
LABEL_5:
  v10 = v8 | v9;
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;

  if ((_DWORD)a2 == 31)
  {
    v9 = a3 | ((a3 & 0x1F) << 16);
    v10 = -1960811552;
    goto LABEL_4;
  }
  v8 = (a2 & 0x1F) << 16;
  if ((_DWORD)a3 != 31)
  {
    v9 = v8 | (32 * (a3 & 0x1F));
    v10 = a3 & 0x1F | 0x8B000000;
LABEL_4:
    v11 = v9 | v10;
    goto LABEL_5;
  }
  v11 = v8 | 0x8B2063FF;
LABEL_5:
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v11;
  *v13 += 4;
}

uint64_t JSC::DFG::SpeculateWhicheverInt52Operand::gpr(JSC::DFG::SpeculateWhicheverInt52Operand *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;

  v9 = *((unsigned __int8 *)this + 16);
  if (v9 == 255)
  {
    if (*((_BYTE *)this + 17))
      v10 = 3;
    else
      v10 = 2;
    LOBYTE(v9) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(*(JSC::DFG::SpeculativeJIT **)this, *((_QWORD *)this + 1), v10, a4, a5, a6, a7, a8);
    *((_BYTE *)this + 16) = v9;
  }
  return (char)v9;
}

uint64_t *JSC::DFG::SpeculativeJIT::int52Result(uint64_t a1, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t *result;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v8 = a4;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = *((_DWORD *)a3 + 12);
  v14 = ~v13;
  if (v14 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    if (a2 > 15)
      v15 = -1;
    else
      v15 = a2;
    v16 = a1 + 12 * v15;
    v17 = *(_QWORD *)(a1 + 3992);
    *(_DWORD *)(v16 + 4776) = v13;
    *(_DWORD *)(v16 + 4780) = 4;
    v18 = *((_DWORD *)a3 + 13);
    v19 = v17 + 24 * (int)v14;
    *(_QWORD *)v19 = a3;
    *(_DWORD *)(v19 + 8) = v18;
    *(_BYTE *)(v19 + 12) = v8;
    *(_BYTE *)(v19 + 17) = a2;
    *(_DWORD *)(v19 + 13) = 0;
  }
  return result;
}

{
  uint64_t *result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = *((_DWORD *)a3 + 12);
  v13 = ~v12;
  if (v13 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 3992) + 24 * (int)v13;
    if (a2 > 15)
      v15 = -1;
    else
      v15 = a2;
    v16 = a1 + 12 * v15;
    *(_DWORD *)(v16 + 4776) = v12;
    *(_DWORD *)(v16 + 4780) = 4;
    v17 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v14 = a3;
    *(_DWORD *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 17) = a2;
    *(_DWORD *)(v14 + 12) = 2;
    *(_BYTE *)(v14 + 16) = 0;
  }
  return result;
}

uint64_t JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v8 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v8 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAC504);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v8 + 12))
    *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52((JSC::DFG::SpeculativeJIT *)a2, a3, 2, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithAbs(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *result;
  int v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  char v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  char v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  char v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  JSC::DFG::Graph *v63;
  char *v64;
  char v65;
  char *v66;
  char *v67;
  int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  JSC::DFG::Node *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  int v100[3];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 1)
    {
      if (!(_DWORD)v11)
      {
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v97, (uint64_t)this, v10, 0, a5, a6, a7, a8);
        v78 = v99;
        if (v99 == 255)
        {
          v78 = JSC::DFG::SpeculativeJIT::fillJSValue(v97, v98, v72, v73, v74, v75, v76, v77);
          v99 = v78;
        }
        JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v71, v72, v73, v74, v75, v76, v77);
        ++*((_DWORD *)this + 1244);
        v85 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v79, v80, v81, v82, v83, v84);
        JSC::DFG::SpeculativeJIT::callOperation<double (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::FPRegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v96, (char *)this, (uint64_t)operationArithAbs, v85, v86, v78, v87, v88);
        result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, 0, a2, 0, v89, v90, v91, v92);
        --*((_DWORD *)this + 1244);
        if ((v98 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v93 = (char)v99;
          if ((char)v99 > 15)
            v93 = -1;
          --*(_DWORD *)(v97 + 12 * v93 + 4784);
        }
        return result;
      }
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x17FF, "void JSC::DFG::SpeculativeJIT::compileArithAbs(Node *)", "node->child1().useKind() == UntypedUse");
      __break(0xC471u);
LABEL_94:
      JUMPOUT(0x197BACD00);
    }
    v32 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v33 = *((unsigned int *)this + 1001);
    if (v32 >= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197BACD18);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v32 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      v35 = v34;
      v33 = *((unsigned int *)this + 1001);
      v32 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v35 = -1;
    }
    if (v32 >= v33)
    {
      __break(0xC471u);
      JUMPOUT(0x197BACD20);
    }
    if (*((_DWORD *)this[499] + 6 * (int)v32 + 2) == 1)
    {
      if (v35 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        v35 = v36;
      }
      if (v35 > 15)
        v37 = -1;
      else
        v37 = v35;
      ++*((_DWORD *)this + 3 * v37 + 1196);
      v38 = v35;
    }
    else
    {
      v38 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v97, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    if (v35 == -1)
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, v40, v41, v42, v43, v44, v45);
      v35 = v47;
    }
    if (v35 == v38)
    {
LABEL_46:
      v53 = v98;
      v54 = *((_DWORD *)this + 50);
      if (v54 + 4 > *((_DWORD *)this + 48))
      {
        v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
        v54 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v54) = v53 & 0x1F | (32 * (v38 & 0x1F)) | 0x131F7C00;
      v55 = *((_DWORD *)this + 50);
      v56 = v55 + 4;
      *((_DWORD *)this + 50) = v55 + 4;
      if (v98 == 31)
      {
        v94 = v38 | ((v38 & 0x1F) << 16) | 0xB2063E0u;
      }
      else
      {
        v57 = (v98 & 0x1F) << 16;
        if (v38 != 31)
        {
          v58 = v57 | (32 * (v38 & 0x1F)) | v38 & 0x1F | 0xB000000;
          if ((v55 + 8) > *((_DWORD *)this + 48))
          {
            v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
            v56 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)((char *)this[7] + v56) = v58;
          *((_DWORD *)this + 50) += 4;
          goto LABEL_53;
        }
        v94 = v57 | 0xB2063FFu;
      }
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), v94, v40, v41, v42, v43, v44, v45);
LABEL_53:
      v59 = v98;
      v60 = *((_DWORD *)this + 50);
      if (v60 + 4 > *((_DWORD *)this + 48))
      {
        v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
        v60 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v60) = (unsigned __int16)(32 * (v38 & 0x1F)) | ((v59 & 0x1F) << 16) | v38 & 0x1F | 0x4A000000;
      *((_DWORD *)this + 50) += 4;
      if (*((_DWORD *)a2 + 18) != 1)
      {
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 4, v38, v42, v43, v44, v45, (uint64_t)v100, v46);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v100);
      }
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v40, v41, v42, v43, v44, v45);
      v61 = *((_DWORD *)a2 + 12);
      v62 = ~v61;
      if (v62 < *((unsigned int *)this + 1001))
      {
        v63 = this[499];
        v64 = (char *)(this + 597);
        if (v38 > 15)
          v65 = -1;
        else
          v65 = v38;
        v66 = &v64[12 * v65];
        *(_DWORD *)v66 = v61;
        *((_DWORD *)v66 + 1) = 5;
        v67 = (char *)v63 + 24 * (int)v62;
        v68 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v67 = a2;
        *((_DWORD *)v67 + 2) = v68;
        v67[17] = v38;
        *((_DWORD *)v67 + 3) = 1;
        v67[16] = 0;
        if (v97)
        {
          v69 = (char)v98;
          if ((char)v98 != -1)
          {
            if ((char)v98 > 15)
              v69 = -1;
            --*(_DWORD *)(v97 + 12 * v69 + 4784);
          }
        }
        if (v38 != -1)
          --*(_DWORD *)&v64[12 * v65 + 8];
        if (v35 > 15)
          v70 = -1;
        else
          v70 = v35;
        v31 = &v64[12 * v70];
        goto LABEL_21;
      }
      __break(0xC471u);
      goto LABEL_94;
    }
    if (v35 == 63)
    {
      if (v38 != 31)
      {
        v50 = v38 & 0x1F | 0xD2800000;
        goto LABEL_43;
      }
    }
    else if (v38 != 31 && v35 != 31)
    {
      v48 = v38 & 0x1F | ((v35 & 0x1F) << 16);
      v49 = -1442839584;
LABEL_42:
      v50 = v48 | v49;
LABEL_43:
      v52 = (unsigned int *)(this + 25);
      v51 = *((_DWORD *)this + 50);
      if (v51 + 4 > *((_DWORD *)this + 48))
      {
        v95 = v50;
        v46 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v39, v40, v41, v42, v43, v44, v45).n128_u64[0];
        v50 = v95;
        v51 = *v52;
      }
      *(_DWORD *)((char *)this[7] + v51) = v50;
      *v52 += 4;
      goto LABEL_46;
    }
    v48 = v38 | (32 * v35);
    v49 = -1862270976;
    goto LABEL_42;
  }
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BACD08);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
    v13 = -1;
  v14 = 0;
  v15 = (char *)(this + 621);
  v16 = this + 622;
  v17 = 0x17u;
  v18 = -1;
  while (*v16)
  {
LABEL_10:
    ++v14;
    v16 += 3;
    if (v14 == 23)
    {
      v14 = v17;
      v20 = &v15[12 * v17];
      v21 = *(_DWORD *)v20;
      *(_QWORD *)v20 = 0xFFFFFFFF3FFFFFFFLL;
      v16 = v20 + 8;
      goto LABEL_13;
    }
  }
  v19 = *(v16 - 1);
  if (v19 != -1)
  {
    if (v19 < v18)
    {
      v17 = v14;
      v18 = *(v16 - 1);
    }
    goto LABEL_10;
  }
  v21 = *(v16 - 2);
  *((_QWORD *)v16 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_13:
  *v16 = 1;
  v22 = JSC::FPRInfo::toRegister::registerForIndex[v14];
  if (v21 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v23 = *((_DWORD *)this + 50);
  if (v23 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v23 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)((char *)this[7] + v23) = v22 | (32 * v13) | 0x1E60C000;
  *((_DWORD *)this + 50) += 4;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
  v25 = *((_DWORD *)a2 + 12);
  v26 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v22];
  v27 = &v15[12 * v26];
  *(_DWORD *)v27 = v25;
  *((_DWORD *)v27 + 1) = 6;
  v28 = ~v25;
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BACD10);
  }
  v29 = (uint64_t)this[499] + 24 * (int)v28;
  v30 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v29 = a2;
  *(_DWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 17) = v22;
  *(_DWORD *)(v29 + 12) = 4;
  *(_BYTE *)(v29 + 16) = 0;
  --*(_DWORD *)&v15[12 * v26 + 8];
  v31 = &v15[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v13]];
LABEL_21:
  --*((_DWORD *)v31 + 2);
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateStrictInt32Operand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v13 = *(unsigned __int8 *)(a3 + 16);
      if (v13 == 255)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v13;
      }
      if ((char)v13 > 15)
        v14 = -1;
      else
        v14 = v13;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v13) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v13;
    return v11;
  }
  return result;
}

void JSC::MacroAssemblerARM64::absDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E60C000;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::callOperation<double (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::FPRegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  __int16 *v58;
  int v59;
  JSC::AssemblerBuffer *v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  _BYTE v64[6];

  v11 = a2;
  v13 = &v63;
  if (a6 != 1)
  {
    v63 = a6 | 0x100;
    v61 = 1;
    v60 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v64[v15 - 1] & 0x40) != 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        v16 |= 1 << v64[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v64[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_58;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v64[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_58;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v64[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *((_DWORD *)v11 + 50);
          if (v30 + 4 > *((_DWORD *)v11 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v60, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *((_DWORD *)v11 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v11 + 7) + v30) = v29;
          *((_DWORD *)v11 + 50) += 4;
          v17 = v61;
        }
        memmove(&v64[v23 - 2], &v64[v23], 2 * v17 - v23 - 2);
        v14 = v61 - 1;
        goto LABEL_32;
      }
      v58 = v13;
      v31 = HIBYTE(v63);
      v32 = v63;
      JSC::MacroAssemblerARM64::swap((uint64_t)v11, (char)v63, SHIBYTE(v63), a4, a5, a6, a7, a8);
      memmove(&v63, v64, 2 * v61 - 2);
      v33 = v61 - 1;
      v28 = v61 == 1;
      v62 = v33;
      v34 = (char *)&v63;
      v35 = &v64[2 * v33 - 2];
      if (v28)
      {
        v36 = 0;
        v37 = 0;
        v59 = 0;
        a2 = &v64[2 * v33 - 2];
      }
      else
      {
        v39 = 2 * v33;
        v40 = &v63;
        while (*(unsigned __int8 *)v40 != v31)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v32;
LABEL_43:
        v59 = 0;
        v41 = (char *)&v63;
        a2 = v35;
        v42 = v35;
        do
        {
          if (*v34 == v34[1])
          {
            v43 = v34;
            if (v42 != &v64[2 * v62 - 2])
            {
              if (v34 == a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - a2;
                memmove(v42, a2, v41 - a2);
                v43 = &v42[v44];
              }
            }
            a2 = v34 + 2;
            ++v59;
            v42 = v43;
          }
          v34 += 2;
          v41 += 2;
        }
        while (v34 < v35);
        v36 = v62;
        v37 = v62;
        v35 = v42;
      }
      v38 = &v64[2 * v36 - 2];
      if (a2 != v38)
      {
        memmove(v35, a2, v38 - a2);
        v37 = v62;
      }
      v14 = v37 - v59;
      v13 = v58;
LABEL_32:
      v61 = v14;
LABEL_33:
      ;
    }
    while (v14);
    if (v13 != &v63 && &v63)
      WTF::fastFree((unint64_t)&v63, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v11, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v11, a3, v45, v46, v47, v48, v49, v50, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v11, 0xFFFFFFFFLL, v51, v52, v53, v54, v55, v56);
  v57 = *((_DWORD *)v11 + 50);
  if (v57 + 4 > *((_DWORD *)v11 + 48))
  {
LABEL_59:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v57 = *((_DWORD *)v11 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v11 + 7) + v57) = 509624320;
  *((_DWORD *)v11 + 50) += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithClz32(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  uint64_t *result;
  int v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  char v59;
  JSC::DFG::SpeculativeJIT *v60;
  unint64_t v61;
  char v62;
  _BYTE v63[7];

  v10 = *((_QWORD *)a2 + 3);
  if (((v10 >> 50) & 0x3F) - 1 <= 1)
  {
    v60 = this;
    v61 = v10;
    v62 = -1;
    v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v12 = *((unsigned int *)this + 1001);
    if (v11 >= v12)
    {
      __break(0xC471u);
    }
    else
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
      {
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v63, a4, a5, a6, a7, a8);
        v62 = v13;
        v10 = v61;
        v12 = *((unsigned int *)this + 1001);
        v11 = ~*(_DWORD *)((v61 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      }
      else
      {
        v13 = -1;
      }
      if (v11 >= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x197BAD5FCLL);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 8) == 1)
      {
        if (v13 == -1)
        {
          v13 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v60, v10, (uint64_t)v63, a4, a5, a6, a7, a8);
          v62 = v13;
        }
        if (v13 > 15)
          v14 = -1;
        else
          v14 = v13;
        ++*((_DWORD *)this + 3 * v14 + 1196);
        v15 = v13;
      }
      else
      {
        v15 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v13 = v62;
      }
      if (v13 == -1)
      {
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v60, v61, (uint64_t)v63, a4, a5, a6, a7, a8);
        v62 = v13;
      }
      v16 = *((_DWORD *)this + 50);
      if (v16 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v16 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v16) = v15 & 0x1F | (32 * (v13 & 0x1F)) | 0x5AC01000;
      *((_DWORD *)this + 50) += 4;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
      v18 = *((_DWORD *)a2 + 12);
      v19 = ~v18;
      if (v19 < *((unsigned int *)this + 1001))
      {
        v20 = *((_QWORD *)this + 499);
        v21 = (char *)this + 4776;
        if (v15 > 15)
          v22 = -1;
        else
          v22 = v15;
        v23 = &v21[12 * v22];
        *(_DWORD *)v23 = v18;
        *((_DWORD *)v23 + 1) = 5;
        v24 = v20 + 24 * (int)v19;
        v25 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v24 = a2;
        *(_DWORD *)(v24 + 8) = v25;
        *(_BYTE *)(v24 + 17) = v15;
        *(_DWORD *)(v24 + 12) = 1;
        *(_BYTE *)(v24 + 16) = 0;
        if (v15 != -1)
          --*(_DWORD *)&v21[12 * v22 + 8];
        v26 = v62;
        if (v62 > 15)
          v26 = -1;
        v27 = (char *)v60 + 12 * v26;
LABEL_26:
        --*((_DWORD *)v27 + 1196);
        return result;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197BAD5F4);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v60, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  v34 = v62;
  if (v62 == 255)
  {
    v34 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v60, v61, v28, v29, v30, v31, v32, v33);
    v62 = v34;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v58, this, v28, v29, v30, v31, v32, v33);
  v35 = v59;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v36, v37, v38, v39, v40, v41, v42);
  v49 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v43, v44, v45, v46, v47, v48);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v57, (unsigned __int8 *)this, (uint64_t)operationArithClz32, v35, v49, v50, v34, v51);
  result = JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, v35, a2, 1, 0, v52, v53, v54);
  if (v58)
  {
    v55 = v59;
    if (v59 != -1)
    {
      if (v59 > 15)
        v55 = -1;
      --*(_DWORD *)(v58 + 12 * v55 + 4784);
    }
  }
  if ((v61 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v56 = v62;
    if (v62 > 15)
      v56 = -1;
    v27 = (char *)v60 + 12 * v56;
    goto LABEL_26;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int64_t v56;
  unsigned __int8 *v57;
  char v58;
  int v59;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (JSC::AssemblerBuffer *)a4;
  v11 = a3;
  v12 = (uint64_t)a2;
  if (a7 != 1)
  {
    v64 = a7 | 0x100;
    v62 = 1;
    v61 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v65[v15 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v16 |= 1 << v65[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v65[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_63;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v65[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v65[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v61, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v62;
        }
        memmove(&v65[v23 - 2], &v65[v23], 2 * v17 - v23 - 2);
        v14 = v62 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v64);
      v58 = v64;
      JSC::MacroAssemblerARM64::swap(v12, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
      memmove(&v64, v65, 2 * v62 - 2);
      v32 = v62 - 1;
      v28 = v62 == 1;
      v63 = v32;
      v33 = (unsigned __int8 *)&v64;
      __src = &v65[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v59 = 0;
        a2 = &v65[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v64;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v58;
LABEL_43:
        v59 = 0;
        v39 = (char *)&v64;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v65[2 * v63 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v56 = v39 - (char *)a2;
                v57 = v40;
                memmove(v40, a2, v39 - (char *)a2);
                v41 = &v57[v56];
              }
            }
            a2 = v33 + 2;
            ++v59;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v63;
        v35 = v63;
        __src = v40;
      }
      v36 = &v65[2 * v34 - 2];
      if (a2 != v36)
      {
        memmove(__src, a2, v36 - a2);
        v35 = v63;
      }
      v14 = v35 - v59;
LABEL_32:
      v62 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a5 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v42, v43, v44, v45, v46, v47, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v48, v49, v50, v51, v52, v53);
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == 31)
    {
      LODWORD(v11) = -1862270945;
    }
    else if ((_DWORD)v10 == -1)
    {
      LODWORD(v11) = -1442774017;
    }
    else
    {
      LODWORD(v11) = v10 & 0x1F | 0xAA0003E0;
    }
    v55 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v54 = v55;
    v10 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v55 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v54 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v54) = v11;
    *(_DWORD *)v12 += 4;
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithDoubleUnaryOp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, double (*a3)(double), double (*a4)(JSC::JSGlobalObject *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *result;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  unint64_t v33;
  uint64_t v34;
  int v35;
  JSC::DFG::Node *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v57;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFC000000000000) == 0xC4000000000000)
  {
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 < *((unsigned int *)this + 1001))
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
        || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (_DWORD)v15 == -1))
      {
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      ++*((_DWORD *)this + 1244);
      JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(&v57, (unsigned __int8 *)this, (uint64_t)a3, v15, v16, v17, v18, v19);
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v20, v21, v22, v23, v24, v25);
      v27 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 1242) = v27;
      *((_DWORD *)this + 1243) = 6;
      v28 = ~v27;
      if (v28 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BADD08);
      }
      v29 = *((_QWORD *)this + 499) + 24 * (int)v28;
      v30 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v29 = a2;
      *(_DWORD *)(v29 + 8) = v30;
      *(_BYTE *)(v29 + 12) = 4;
      *(_DWORD *)(v29 + 13) = 0;
      *(_BYTE *)(v29 + 17) = 0;
      --*((_DWORD *)this + 1244);
      v31 = (char *)this
          + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v15]
          + 4976;
      goto LABEL_8;
    }
    __break(0xC471u);
LABEL_25:
    JUMPOUT(0x197BADD00);
  }
  if (!v11)
    goto LABEL_14;
  v33 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v33 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BADD10);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v33 + 12)
    || (v35 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), v35 == -1))
  {
LABEL_14:
    v35 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v34, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1244);
  v42 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v36, v37, v38, v39, v40, v41);
  JSC::DFG::SpeculativeJIT::callOperation<double (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::FPRegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(&v57, (char *)this, (uint64_t)a4, v42, v43, v35, v44, v45);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v46, v47, v48, v49, v50, v51);
  v52 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1242) = v52;
  *((_DWORD *)this + 1243) = 6;
  v53 = ~v52;
  if (v53 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_25;
  }
  v54 = *((_QWORD *)this + 499) + 24 * (int)v53;
  v55 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v54 = a2;
  *(_DWORD *)(v54 + 8) = v55;
  *(_BYTE *)(v54 + 12) = 4;
  *(_DWORD *)(v54 + 13) = 0;
  *(_BYTE *)(v54 + 17) = 0;
  --*((_DWORD *)this + 1244);
  if (v11)
  {
    if (v35 > 15)
      v56 = -1;
    else
      v56 = v35;
    v31 = (char *)this + 12 * v56 + 4784;
LABEL_8:
    --*(_DWORD *)v31;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint8x8_t v24;
  __int32 v25;
  uint8x8_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  __int16 *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  char *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  int64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  _BYTE v56[6];

  v9 = a2;
  if ((_DWORD)a4)
  {
    v55 = a4;
    v53 = 1;
    v19 = 1;
LABEL_6:
    v20 = 0;
    v21 = 0;
    while (((v56[v20 - 1] + 32) & 0x40) == 0)
    {
      v21 |= 1 << (v56[v20 - 1] + 32);
      v20 += 2;
      if (2 * v19 == v20)
      {
        v22 = 0;
        while (1)
        {
          v23 = (v56[v22 - 2] + 32) & 0x7F;
          if (v23 >= 0x40)
            goto LABEL_47;
          v21 &= ~(1 << v23);
          v22 += 2;
          if (2 * v19 == v22)
          {
            v24 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
            v24.i16[0] = vaddlv_u8(v24);
            v25 = v24.i32[0];
            v26 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.i32[0] + v25)
            {
              v27 = 0;
              if (v19 <= 1)
                v28 = 1;
              else
                v28 = v19;
              v29 = 2 * v28;
              while (1)
              {
                v30 = (char)v56[v27 - 1];
                v31 = (v56[v27 - 1] + 32) & 0x7F;
                if (v31 >= 0x40)
                  goto LABEL_47;
                if (((v21 >> v31) & 1) != 0)
                {
                  v32 = (char)v56[v27 - 2];
                  v33 = *((_DWORD *)v9 + 50);
                  if (v33 + 4 > *((_DWORD *)v9 + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v33 = *((_DWORD *)v9 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)v9 + 7) + v33) = v30 | (32 * v32) | 0x1E604000;
                  *((_DWORD *)v9 + 50) += 4;
                  memmove(&v56[v27 - 2], &v56[v27], 2 * v53 - v27 - 2);
                  v19 = v53 - 1;
                  goto LABEL_24;
                }
                v27 += 2;
                if (v29 == v27)
                  goto LABEL_25;
              }
            }
            v34 = HIBYTE(v55);
            v35 = v55;
            JSC::MacroAssemblerARM64::swapDouble(v9, (char)v55, SHIBYTE(v55), a4, a5, a6, a7, a8);
            memmove(&v55, v56, 2 * v53 - 2);
            v37 = v53 - 1;
            v36 = v53 == 1;
            v54 = v37;
            v38 = (unsigned __int8 *)&v55;
            v39 = &v56[2 * v37 - 2];
            if (v36)
            {
              v42 = 0;
              v43 = 0;
              v44 = 0;
              a2 = &v56[2 * v37 - 2];
            }
            else
            {
              v40 = 2 * v37;
              v41 = &v55;
              while (*(unsigned __int8 *)v41 != v34)
              {
                ++v41;
                v40 -= 2;
                if (!v40)
                  goto LABEL_34;
              }
              *(_BYTE *)v41 = v35;
LABEL_34:
              v44 = 0;
              v45 = (char *)&v55;
              a2 = v39;
              v46 = v39;
              v50 = v39;
              do
              {
                if (*v38 == v38[1])
                {
                  v47 = v38;
                  if (v46 != &v56[2 * v54 - 2])
                  {
                    if (v38 == a2)
                    {
                      v47 = v46;
                    }
                    else
                    {
                      v52 = v44;
                      v48 = v45 - (char *)a2;
                      v51 = v46;
                      memmove(v46, a2, v45 - (char *)a2);
                      v39 = v50;
                      v47 = &v51[v48];
                      v44 = v52;
                    }
                  }
                  a2 = v38 + 2;
                  ++v44;
                  v46 = v47;
                }
                v38 += 2;
                v45 += 2;
              }
              while (v38 < v39);
              v42 = v54;
              v43 = v54;
              v39 = v46;
            }
            v49 = &v56[2 * v42 - 2];
            if (a2 != v49)
            {
              memmove(v39, a2, v49 - a2);
              v43 = v54;
            }
            v19 = v43 - v44;
LABEL_24:
            v53 = v19;
LABEL_25:
            if (!v19)
              goto LABEL_2;
            goto LABEL_6;
          }
        }
      }
    }
LABEL_47:
    __break(1u);
  }
  else
  {
LABEL_2:
    JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, a1);
    v18 = *((_DWORD *)v9 + 50);
    if (v18 + 4 > *((_DWORD *)v9 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v11, v12, v13, v14, v15, v16, v17);
      v18 = *((_DWORD *)v9 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v9 + 7) + v18) = 509624320;
    *((_DWORD *)v9 + 50) += 4;
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithSub(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *result;
  int v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  signed __int8 v49;
  char v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  unsigned int v62;
  char *v63;
  unint64_t v64;
  __int128 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  signed __int8 v74;
  int v75;
  int v76;
  int v77;
  _DWORD *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  signed __int8 v103;
  uint64_t v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  char v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  void *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  signed __int8 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  signed __int8 v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  signed __int8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  int v209[3];
  int v210[3];
  JSC::DFG::SpeculativeJIT *v211;
  unint64_t v212;
  char v213;
  _BYTE v214[7];
  int v215[3];
  int v216[3];
  uint64_t v217;
  int v218;
  JSC::DFG::SpeculativeJIT *v219;
  unint64_t v220;
  unsigned __int8 v221;
  _BYTE v222[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 1)
    {
      if ((_DWORD)v11 != 52)
      {
        __break(0xC471u);
        JUMPOUT(0x197BAED80);
      }
      v126 = *((_QWORD *)this + 688);
      v127 = (_QWORD *)(v126 + 24);
      v128 = (_QWORD *)(v126 + 8);
      if ((v10 & 1) != 0)
        v128 = v127;
      v129 = *v128 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v130 = (void *)*((unsigned int *)this + 1396);
      if ((_DWORD)v130 != *(_DWORD *)(v129 + 20))
      {
        if ((*(_QWORD *)(v129 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v129, v130, a3, a4, a5, a6, a7, a8);
        else
          *(_DWORD *)(v129 + 20) = (_DWORD)v130;
      }
      if ((*(_BYTE *)(v129 + 12) & 8) != 0)
      {
        v131 = *((_QWORD *)a2 + 3);
      }
      else
      {
        v170 = *((_QWORD *)a2 + 4);
        v171 = *((_QWORD *)this + 688);
        v172 = *(unsigned int *)((v170 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v173 = (_QWORD *)(v171 + 24);
        v174 = (_QWORD *)(v171 + 8);
        if ((v170 & 1) != 0)
          v175 = v173;
        else
          v175 = v174;
        v176 = *v175 + 32 * v172;
        v177 = (void *)*((unsigned int *)this + 1396);
        if ((_DWORD)v177 != *(_DWORD *)(v176 + 20))
        {
          if ((*(_QWORD *)(v176 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v176, v177, a3, a4, a5, a6, a7, a8);
          else
            *(_DWORD *)(v176 + 20) = (_DWORD)v177;
        }
        v131 = *((_QWORD *)a2 + 3);
        if ((*(_BYTE *)(v176 + 12) & 8) == 0)
        {
          JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v219, (uint64_t)this, v131);
          JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v211, (uint64_t)this, *((_QWORD *)a2 + 4), (uint64_t)&v219, v178, v179, v180, v181);
          JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateWhicheverInt52Operand>((uint64_t)&v217, this, (JSC::DFG::SpeculateWhicheverInt52Operand *)&v219, v182, v183, v184, v185, v186);
          v192 = v221;
          if (v221 == 255)
          {
            if (v222[0])
              v193 = 3;
            else
              v193 = 2;
            v192 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v219, v220, v193, v187, v188, v189, v190, v191);
            v221 = v192;
          }
          JSC::MacroAssemblerARM64::move(this, v192, (char)v218, v187, v188, v189, v190, v191);
          v199 = v213;
          if (v213 == 255)
          {
            if (v214[0])
              v200 = 3;
            else
              v200 = 2;
            v199 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v211, v212, v200, v194, v195, v196, v197, v198);
            v213 = v199;
          }
          JSC::MacroAssemblerARM64::sub64(this, v199, (char)v218, v194, v195, v196, v197, v198);
          if (v222[0])
            v205 = 3;
          else
            v205 = 2;
          result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v218, a2, v205, v201, v202, v203, v204);
          if (v217)
          {
            v206 = (char)v218;
            if ((char)v218 != -1)
            {
              if ((char)v218 > 15)
                v206 = -1;
              --*(_DWORD *)(v217 + 12 * v206 + 4784);
            }
          }
          v207 = v213;
          if (v213 > 15)
            v207 = -1;
          --*((_DWORD *)v211 + 3 * v207 + 1196);
          v208 = (char)v221;
          if ((char)v221 > 15)
            v208 = -1;
          v63 = (char *)v219 + 12 * v208;
          goto LABEL_50;
        }
      }
      JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand((uint64_t)&v219, (uint64_t)this, v131, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand((uint64_t)&v211, (uint64_t)this, *((_QWORD *)a2 + 4), v132, v133, v134, v135, v136);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v217, this, v137, v138, v139, v140, v141, v142);
      v148 = v221;
      if (v221 == 255)
      {
        v148 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v219, v220, 2, v143, v144, v145, v146, v147);
        v221 = v148;
      }
      JSC::MacroAssemblerARM64::move(this, v148, (char)v218, v143, v144, v145, v146, v147);
      v154 = v213;
      if (v213 == 255)
      {
        v154 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v211, v212, 2, v149, v150, v151, v152, v153);
        v213 = v154;
      }
      JSC::MacroAssemblerARM64::branchSub64((uint64_t)this, 6u, (char)v218, v154, (char)v218, v151, v152, v153, (uint64_t)v209);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xCuLL, (JSC::DFG::Node *)0xFF80000000, 0, v209);
      result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v218, a2, v155, v156, v157, v158, v159);
      if (v217)
      {
        v160 = (char)v218;
        if ((char)v218 != -1)
        {
          if ((char)v218 > 15)
            v160 = -1;
          --*(_DWORD *)(v217 + 12 * v160 + 4784);
        }
      }
      v161 = v213;
      if (v213 > 15)
        v161 = -1;
      --*((_DWORD *)v211 + 3 * v161 + 1196);
      v162 = (char)v221;
      if ((char)v221 > 15)
        v162 = -1;
      v63 = (char *)v219 + 12 * v162;
LABEL_50:
      --*((_DWORD *)v63 + 1196);
      return result;
    }
    v36 = *((_QWORD *)a2 + 4);
    v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
    v38 = *(unsigned __int16 *)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v38 <= 2 && **(_QWORD **)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
    {
      v219 = this;
      v220 = v10;
      v221 = -1;
      v64 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v64 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
LABEL_198:
        JUMPOUT(0x197BAE69CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v64 + 12))
      {
        v221 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v222, a4, a5, a6, a7, a8);
        v37 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
        v38 = *(unsigned __int16 *)(v37 + 0x12);
      }
      if (v38 == 355 || v38 == 348)
      {
        v65 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v65 = *(__int128 **)(v37 + 72);
      }
      v66 = *(unsigned int *)v65;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v211, this, a3, a4, a5, a6, a7, a8);
      if (*((_DWORD *)a2 + 18) != 1)
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v217, this, v68, v69, v70, v71, v72, v73);
        v168 = v221;
        if (v221 == 255)
        {
          v168 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v163, v164, v165, v166, v167);
          v221 = v168;
        }
        JSC::MacroAssemblerARM64::branchSub32((uint64_t)this, 6, v168, v66, (char)v212, v165, v166, v167, (uint64_t)v216);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v216);
        if (v217)
        {
          v169 = (char)v218;
          if ((char)v218 != -1)
          {
            if ((char)v218 > 15)
              v169 = -1;
            --*(_DWORD *)(v217 + 12 * v169 + 4784);
          }
        }
LABEL_71:
        v86 = (char)v212;
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v80, v81, v82, v83, v84, v85);
        v87 = *((_DWORD *)a2 + 12);
        v88 = ~v87;
        if (v88 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          goto LABEL_198;
        }
        goto LABEL_82;
      }
      v74 = v221;
      if (v221 == 255)
      {
        v74 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v69, v70, v71, v72, v73);
        v221 = v74;
      }
      if (v212 == v74)
      {
LABEL_70:
        JSC::MacroAssemblerARM64::sub32((uint64_t)this, v74, v66, v74, v70, v71, v72, v73);
        goto LABEL_71;
      }
      if (v74 == 63)
      {
        if (v212 != 31)
        {
          v77 = v212 & 0x1F | 0xD2800000;
          goto LABEL_67;
        }
      }
      else if (v74 != 31 && (char)v212 != 31)
      {
        v75 = v212 | ((v74 & 0x1F) << 16);
        v76 = -1442839584;
LABEL_66:
        v77 = v75 | v76;
LABEL_67:
        v78 = (_DWORD *)((char *)this + 200);
        v79 = *((_DWORD *)this + 50);
        if (v79 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v67, v68, v69, v70, v71, v72, v73);
          v78 = (_DWORD *)((char *)this + 200);
          v79 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v79) = v77;
        *v78 += 4;
        v74 = v212;
        goto LABEL_70;
      }
      v75 = (char)v212 | (32 * v74);
      v76 = -1862270976;
      goto LABEL_66;
    }
    if (*(unsigned __int16 *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
    {
      v89 = **(_QWORD **)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      if (v89 >= 0xFFFE000000000000)
      {
        v219 = this;
        v220 = v36;
        v221 = -1;
        v90 = ~*(_DWORD *)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v90 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BAEEB0);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v90 + 12))
          v221 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v36, (uint64_t)v222, a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v211, this, a3, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v89, (char)v212, v91, v92, v93, v94, v95);
        v103 = v221;
        if (*((_DWORD *)a2 + 18) == 1)
        {
          if (v221 == 255)
          {
            v103 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v98, v99, v100, v101, v102);
            v221 = v103;
          }
          v110 = (v103 & 0x1F) << 16;
          if (v212 == 31)
          {
            v112 = 1260413951;
          }
          else
          {
            v111 = v212 & 0x1F;
            v110 |= 32 * v111;
            v112 = v111 | 0x4B000000;
          }
          v113 = v110 | v112;
          v114 = *((_DWORD *)this + 50);
          if (v114 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v96, v97, v98, v99, v100, v101, v102);
            v114 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v114) = v113;
          *((_DWORD *)this + 50) += 4;
        }
        else
        {
          if (v221 == 255)
          {
            v103 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v98, v99, v100, v101, v102);
            v221 = v103;
          }
          JSC::MacroAssemblerARM64::branchSub32((uint64_t)this, 6, (char)v212, v103, (char)v212, v100, v101, v102, (uint64_t)v215);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v215);
        }
        v86 = (char)v212;
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v97, v98, v99, v100, v101, v102);
        v87 = *((_DWORD *)a2 + 12);
        v88 = ~v87;
        if (v88 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BAEEB8);
        }
LABEL_82:
        v104 = *((_QWORD *)this + 499);
        if (v86 > 15)
          v105 = -1;
        else
          v105 = v86;
        v106 = (char *)this + 12 * v105;
        *((_DWORD *)v106 + 1194) = v87;
        *((_DWORD *)v106 + 1195) = 5;
        v107 = v104 + 24 * (int)v88;
        v108 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v107 = a2;
        *(_DWORD *)(v107 + 8) = v108;
        *(_BYTE *)(v107 + 17) = v86;
        *(_DWORD *)(v107 + 12) = 1;
        *(_BYTE *)(v107 + 16) = 0;
        if (!v211)
          goto LABEL_47;
        v109 = (char)v212;
        if ((char)v212 == -1)
          goto LABEL_47;
        if ((char)v212 > 15)
          v109 = -1;
        v61 = (char *)v211 + 12 * v109;
LABEL_46:
        --*((_DWORD *)v61 + 1196);
LABEL_47:
        v62 = (char)v221;
        if ((char)v221 > 15)
          v62 = -1;
        v63 = (char *)v219 + 12 * v62;
        goto LABEL_50;
      }
    }
    v219 = this;
    v220 = v10;
    v221 = -1;
    v39 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v40 = *((unsigned int *)this + 1001);
    if (v39 >= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAEE98);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v39 + 12))
    {
      v221 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v222, a4, a5, a6, a7, a8);
      v36 = *((_QWORD *)a2 + 4);
      v40 = *((unsigned int *)this + 1001);
      v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
    }
    v211 = this;
    v212 = v36;
    v213 = -1;
    v41 = ~*(_DWORD *)(v37 + 48);
    if (v41 >= v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197BAEEA0);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v41 + 12))
      v213 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v36, (uint64_t)v214, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v217, this, a3, a4, a5, a6, a7, a8);
    v49 = v221;
    if (*((_DWORD *)a2 + 18) != 1)
    {
      if (v221 == 255)
      {
        v49 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v44, v45, v46, v47, v48);
        v221 = v49;
      }
      v50 = v213;
      if (v213 == 255)
      {
        v50 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v211, v212, (uint64_t)v214, v44, v45, v46, v47, v48);
        v213 = v50;
      }
      JSC::MacroAssemblerARM64::branchSub32((uint64_t)this, 6, v49, v50, (char)v218, v46, v47, v48, (uint64_t)v210);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v210);
LABEL_34:
      v51 = (char)v218;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v43, v44, v45, v46, v47, v48);
      v52 = *((_DWORD *)a2 + 12);
      v53 = ~v52;
      if (v53 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BAEEA8);
      }
      v54 = *((_QWORD *)this + 499);
      if (v51 > 15)
        v55 = -1;
      else
        v55 = v51;
      v56 = (char *)this + 12 * v55;
      *((_DWORD *)v56 + 1194) = v52;
      *((_DWORD *)v56 + 1195) = 5;
      v57 = v54 + 24 * (int)v53;
      v58 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v57 = a2;
      *(_DWORD *)(v57 + 8) = v58;
      *(_BYTE *)(v57 + 17) = v51;
      *(_DWORD *)(v57 + 12) = 1;
      *(_BYTE *)(v57 + 16) = 0;
      if (v217)
      {
        v59 = (char)v218;
        if ((char)v218 != -1)
        {
          if ((char)v218 > 15)
            v59 = -1;
          --*(_DWORD *)(v217 + 12 * v59 + 4784);
        }
      }
      v60 = v213;
      if (v213 > 15)
        v60 = -1;
      v61 = (char *)v211 + 12 * v60;
      goto LABEL_46;
    }
    if (v221 == 255)
    {
      v49 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v219, v220, (uint64_t)v222, v44, v45, v46, v47, v48);
      v221 = v49;
    }
    if (v218 == v49)
    {
LABEL_109:
      v120 = v213;
      if (v213 == 255)
      {
        v120 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v211, v212, (uint64_t)v214, v44, v45, v46, v47, v48);
        v213 = v120;
      }
      v121 = (v120 & 0x1F) << 16;
      if (v218 == 31)
      {
        v123 = 1260413951;
      }
      else
      {
        v122 = v218 & 0x1F;
        v121 |= 32 * v122;
        v123 = v122 | 0x4B000000;
      }
      v124 = v121 | v123;
      v125 = *((_DWORD *)this + 50);
      if (v125 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v42, v43, v44, v45, v46, v47, v48);
        v125 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v125) = v124;
      *((_DWORD *)this + 50) += 4;
      goto LABEL_34;
    }
    if (v49 == 63)
    {
      if (v218 != 31)
      {
        v117 = v218 & 0x1F | 0xD2800000;
        goto LABEL_106;
      }
    }
    else if (v49 != 31 && (char)v218 != 31)
    {
      v115 = v218 | ((v49 & 0x1F) << 16);
      v116 = -1442839584;
LABEL_105:
      v117 = v115 | v116;
LABEL_106:
      v119 = (unsigned int *)((char *)this + 200);
      v118 = *((_DWORD *)this + 50);
      if (v118 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v42, v43, v44, v45, v46, v47, v48);
        v118 = *v119;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v118) = v117;
      *v119 += 4;
      goto LABEL_109;
    }
    v115 = (char)v218 | (32 * v49);
    v116 = -1862270976;
    goto LABEL_105;
  }
  v219 = this;
  v220 = v10;
  v221 = -1;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAEE80);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v221 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)a2 + 4);
  if (((v13 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197BAED44);
  }
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAEE88);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
    v15 = -1;
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v211, (uint64_t)this, (uint64_t)&v219, a4, a5, a6, a7, a8);
  v23 = v221;
  if (v221 == 255)
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v219, v220, v17, v18, v19, v20, v21, v22);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v13, v17, v18, v19, v20, v21, v22);
  v24 = (char)v212;
  v25 = *((_DWORD *)this + 50);
  if (v25 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v16, v17, v18, v19, v20, v21, v22);
    v25 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v25) = (32 * v23) | (v15 << 16) | v24 | 0x1E603800;
  *((_DWORD *)this + 50) += 4;
  v26 = (char)v212;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v17, v18, v19, v20, v21, v22);
  v28 = *((_DWORD *)a2 + 12);
  v29 = (_DWORD *)((char *)this
                 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v26]
                 + 4968);
  *v29 = v28;
  v29[1] = 6;
  v30 = ~v28;
  if (v30 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAEE90);
  }
  v31 = *((_QWORD *)this + 499) + 24 * (int)v30;
  v32 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v31 = a2;
  *(_DWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 17) = v26;
  *(_DWORD *)(v31 + 12) = 4;
  *(_BYTE *)(v31 + 16) = 0;
  if (v211)
  {
    v33 = (char *)v211 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v212];
    --*((_DWORD *)v33 + 1244);
  }
  v34 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v15] + 4968;
  --*((_DWORD *)v34 + 2);
  v35 = (char *)v219 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v23];
  --*((_DWORD *)v35 + 1244);
  return result;
}

void JSC::MacroAssemblerARM64::branchSub32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v9;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;

  v9 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31 || (_DWORD)a5 == 31)
  {
    v13 = a5 & 0x1F | (32 * a3);
    v14 = v12 | v13 | 0x6B206000;
    v15 = *(_DWORD *)(a1 + 200);
    if (v15 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, v13, a6, a7, a8);
      v15 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v14;
    *(_DWORD *)(a1 + 200) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), a5 & 0x1F | (32 * (a3 & 0x1F)) | v12 | 0x6B000000, a3, a4, a5, a6, a7, a8);
  }
  if (*(_BYTE *)(a1 + 328))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, v13, a6, a7, a8);
  v16 = *(_DWORD *)(a1 + 200);
  if (v16 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, v13, a6, a7, a8);
    v16 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v9 | 0x54000000;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  v19 = v17 + 8;
  v20 = v17 + 4;
  if (v19 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, v13, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v21 = -122;
  else
    v21 = -126;
  *(_DWORD *)a9 = v18;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v21;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  if (a4 < 0x1000)
  {
    v14 = 1610612736;
LABEL_3:
    v15 = a5 & 0x1F | (32 * a3) | v14;
    v16 = ((a4 & 0xFFF) << 10) | 0x11000000;
LABEL_7:
    v19 = v15 | v16;
    v20 = *(_DWORD *)(a1 + 200);
    if (v20 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v20 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v19;
    v21 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v21;
    if (*(_BYTE *)(a1 + 328))
    {
      for (; (signed int)v21 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v21)
      {
        if (v21 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v21 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = -721215457;
        v21 = *(_DWORD *)(a1 + 200) + 4;
      }
      *(_DWORD *)(a1 + 208) = 0;
    }
    if (v21 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v21 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = a2 | 0x54000000;
    v22 = *(_DWORD *)(a1 + 200);
    v23 = v22 + 4;
    *(_DWORD *)(a1 + 200) = v22 + 4;
    v24 = v22 + 8;
    v25 = v22 + 4;
    if (v24 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v26 = -122;
    else
      v26 = -126;
    *(_DWORD *)a9 = v23;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v26;
    *(_BYTE *)(a9 + 9) = a2;
    *(_WORD *)(a9 + 10) = -256;
    return;
  }
  v17 = -(int)a4;
  if (-(int)a4 < 0x1000)
  {
    v18 = 0x20000000;
LABEL_6:
    v15 = a5 & 0x1F | (32 * a3) | v18 | (v17 << 10);
    v16 = 285212672;
    goto LABEL_7;
  }
  if ((a4 & 0xFFF) == 0)
  {
    v30 = (int)a4 >> 12;
    if (!BYTE3(a4))
    {
      v14 = 1614807040;
      a4 = ((int)a4 >> 12);
      goto LABEL_3;
    }
    v17 = -v30;
    if (-v30 < 0x1000)
    {
      v18 = 541065216;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C31820);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchSub32(a1, a2, a3, 16, a5, v27, v28, v29, a9);
}

void JSC::MacroAssemblerARM64::sub64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (a2 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v10 = v9 | 0xCB2063FF;
    v11 = a1[50];
    if (v11 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
    a1[50] += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v9 | (32 * (a3 & 0x1F)) | a3 & 0x1F | 0xCB000000, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileIncOrDec(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;

  v9 = (unsigned int *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillJSValue(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v14 == -1))
  {
LABEL_5:
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v13, a3, a4, a5, a6, a7, a8);
  ++v9[1196];
  v21 = v9[1194];
  if ((_DWORD)v21 != 0x3FFFFFFF)
  {
    *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v21, (uint64_t)v15, v16, v17, v18, v19, v20);
  }
  if (*((_WORD *)a2 + 9) == 82)
    v22 = (unsigned __int8 *)operationInc;
  else
    v22 = (unsigned __int8 *)operationDec;
  v23 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v15, v16, v17, v18, v19, v20);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)v9, v22, 0, v23, v24, v14, v25, v26, &v31);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v27, v28, v29);
  --v9[1196];
  if (v11)
  {
    if (v14 > 15)
      v30 = -1;
    else
      v30 = v14;
    --v9[3 * v30 + 1196];
  }
  return this;
}

unint64_t *JSC::DFG::SpeculativeJIT::compileValueNegate(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v23;

  v4 = *(_QWORD *)(*((_QWORD *)this + 495) + 40);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v6 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v6)
    v4 = *(_QWORD *)(v6 + 8);
  if ((v5 & 2) != 0)
  {
    LODWORD(v7) = -1;
  }
  else if ((v5 & 1) != 0)
  {
    LODWORD(v7) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v7 = v5 >> 36;
  }
  v8 = JSC::CodeBlock::unaryArithProfileForBytecodeIndex(v4, v7);
  v9 = (unsigned int *)*((_QWORD *)this + 46);
  if (v9)
  {
    v10 = v9 + 2;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    v17.n128_f64[0] = JSC::MathICHolder::addJITNegIC((uint64_t)(v9 + 10), v8);
    v19 = v18;
    do
    {
      v20 = __ldaxr(v10);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v10));
    if (!v21)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *, __n128))(*(_QWORD *)v9 + 32))(v9, v17);
    }
  }
  else
  {
    JSC::MathICHolder::addJITNegIC(40, v8);
    v19 = v23;
  }
  return JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(this, (uint64_t *)a2, v19, v12, v13, v14, v15, v16);
}

unint64_t *JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::SpeculativeJIT *a1, uint64_t *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *result;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  JSC::DFG::Node *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  int v95;
  WTF *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  uint64_t v104;
  char v105;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v104, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = v105;
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v101, (uint64_t)a1, a2[3], 0, v12, v13, v14, v15);
  v22 = v103;
  if (v103 == 255)
  {
    v22 = JSC::DFG::SpeculativeJIT::fillJSValue(v101, v102, v16, v17, v18, v19, v20, v21);
    v103 = v22;
  }
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::JSValueOperand>((uint64_t)&v99, a1, 0, (uint64_t)&v101, v18, v19, v20, v21);
  v23 = v100;
  v24 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v24 = 1;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_QWORD *)(v24 + 72) = 0;
  *(_QWORD *)(v24 + 16) = -1;
  *(_QWORD *)(v24 + 8) = -1;
  *(_QWORD *)(v24 + 32) = v24 + 48;
  *(_DWORD *)(v24 + 40) = 2;
  v98 = v24;
  a3[57] = v23;
  a3[58] = v22;
  a3[59] = v11;
  if (JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateInline((uint64_t)a3, (uint64_t)a1, v24 + 8, 0, v25, v26, v27, v28))
  {
    v96 = 0;
    v97 = 0;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, 0, (uint64_t)&v96, (char)v23, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v34, v35);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a1, v36, v37, v38, v39, v40, v41, v42, &v95);
    *(_QWORD *)&v87 = a1;
    *((_QWORD *)&v87 + 1) = v96;
    v43 = v97;
    v96 = 0;
    v97 = 0;
    v88 = v43;
    do
      v44 = __ldaxr((unsigned int *)v24);
    while (__stlxr(v44 + 1, (unsigned int *)v24));
    *(_QWORD *)&v90 = operationArithNegateOptimize;
    BYTE8(v90) = v23;
    *(_QWORD *)&v91 = a2;
    BYTE8(v91) = v22;
    *(_QWORD *)&v92 = a3;
    *((_QWORD *)&v92 + 1) = operationArithNegate;
    v45 = v95;
    v93 = v95;
    v46 = v88;
    v86 = v87;
    v47 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v47 = &off_1E35735E0;
    *(_OWORD *)(v47 + 8) = v86;
    *((_QWORD *)&v87 + 1) = 0;
    v88 = 0;
    *(_QWORD *)(v47 + 24) = v46;
    v89 = 0;
    *(_QWORD *)(v47 + 32) = v24;
    v49 = v91;
    v48 = v92;
    *(_OWORD *)(v47 + 40) = v90;
    *(_OWORD *)(v47 + 72) = v48;
    *(_OWORD *)(v47 + 56) = v49;
    *(_DWORD *)(v47 + 88) = v45;
    v94 = v47;
    JSC::DFG::SpeculativeJIT::addSlowPathGeneratorLambda((uint64_t)a1, &v94);
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::~Node((uint64_t)&v87, v50, v51, v52, v53, v54, v55, v56);
    v64 = v96;
    if (v96)
    {
      v96 = 0;
      LODWORD(v97) = 0;
      WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::flushRegisters(a1, v29, v30, v31, v32, v33, v34, v35);
    v82 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(a1, (JSC::DFG::JITCompiler *)a2, v76, v77, v78, v79, v80, v81);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)a1, (unsigned __int8 *)operationArithNegate, v23, v82, v83, v22, v84, v85, (int *)&v87);
  }
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)a1, (char)v23, (uint64_t)a2, 16, 0, v61, v62, v63);
  result = WTF::Box<JSC::MathICGenerationState>::~Box((unint64_t *)&v98, v65, v66, v67, v68, v69, v70, v71);
  if (v99)
  {
    v73 = (char)v100;
    if ((char)v100 != -1)
    {
      if ((char)v100 > 15)
        v73 = -1;
      --*(_DWORD *)(v99 + 12 * v73 + 4784);
    }
  }
  if ((v102 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v74 = (char)v103;
    if ((char)v103 > 15)
      v74 = -1;
    --*(_DWORD *)(v101 + 12 * v74 + 4784);
  }
  if (v104)
  {
    v75 = v105;
    if (v105 != -1)
    {
      if (v105 > 15)
        v75 = -1;
      --*(_DWORD *)(v104 + 12 * v75 + 4784);
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithNegate(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *result;
  int v25;
  unsigned int v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t v40;
  char v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x8_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int8x8_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129[3];
  int v130[3];
  int v131[3];
  int v132[3];
  int v133[3];
  uint64_t v134;
  unsigned __int8 v135;
  JSC::DFG::SpeculativeJIT *v136;
  unint64_t v137;
  char v138;
  _BYTE v139[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 1)
    {
      if ((_DWORD)v11 == 52)
      {
        v69 = *((_QWORD *)this + 688);
        v70 = (_QWORD *)(v69 + 24);
        v71 = (_QWORD *)(v69 + 8);
        if ((v10 & 1) != 0)
          v71 = v70;
        v72 = *v71 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v73 = (void *)*((unsigned int *)this + 1396);
        if ((_DWORD)v73 != *(_DWORD *)(v72 + 20))
        {
          if ((*(_QWORD *)(v72 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v72, v73, a3, a4, a5, a6, a7, a8);
          else
            *(_DWORD *)(v72 + 20) = (_DWORD)v73;
        }
        if ((*(_BYTE *)(v72 + 12) & 8) != 0)
        {
          JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand((uint64_t)&v136, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v134, this, v101, v102, v103, v104, v105, v106);
          v112 = v138;
          if (v138 == 255)
          {
            v112 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v136, v137, 2, v107, v108, v109, v110, v111);
            v138 = v112;
          }
          v113 = (char)v135;
          v114 = v135;
          JSC::MacroAssemblerARM64::move(this, v112, v113, v107, v108, v109, v110, v111);
          JSC::MacroAssemblerARM64::branchNeg64((uint64_t)this, 6, v113, v115, v116, v117, v118, v119, (uint64_t)v130);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xCuLL, (JSC::DFG::Node *)0xFF80000000, 0, v130);
          if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
          {
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v114, 0xFFFFFFFFLL, v121, v122, v123, v124, (uint64_t)v129, v125);
            JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v129);
          }
          result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v114, a2, v120, v121, v122, v123, v124);
        }
        else
        {
          JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v136, (uint64_t)this, *((_QWORD *)a2 + 3));
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v134, this, v74, v75, v76, v77, v78, v79);
          v85 = v138;
          if (v138 == 255)
          {
            if (v139[0])
              v86 = 3;
            else
              v86 = 2;
            v85 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v136, v137, v86, v80, v81, v82, v83, v84);
            v138 = v85;
          }
          v87 = (char)v135;
          v88 = v135;
          JSC::MacroAssemblerARM64::move(this, v85, v87, v80, v81, v82, v83, v84);
          JSC::MacroAssemblerARM64::neg64(this, v87, v89, v90, v91, v92, v93, v94);
          if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
          {
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v88, 0xFFFFFFFFLL, v95, v96, v97, v98, (uint64_t)v131, v99);
            JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v131);
          }
          if (v139[0])
            v100 = 3;
          else
            v100 = 2;
          result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, (char)v88, a2, v100, v95, v96, v97, v98);
        }
        if (v134)
        {
          v126 = (char)v135;
          if ((char)v135 != -1)
          {
            if ((char)v135 > 15)
              v126 = -1;
            --*(_DWORD *)(v134 + 12 * v126 + 4784);
          }
        }
        v127 = v138;
        if (v138 > 15)
          v127 = -1;
        v68 = (char *)v136 + 12 * v127;
        goto LABEL_55;
      }
      __break(0xC471u);
LABEL_102:
      JUMPOUT(0x197BAFC24);
    }
    v136 = this;
    v137 = v10;
    v138 = -1;
    v32 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v32 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BAFE20);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v32 + 12))
      v138 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v139, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v134, this, a3, a4, a5, a6, a7, a8);
    v41 = v138;
    if (v138 == 255)
    {
      v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v136, v137, (uint64_t)v139, v35, v36, v37, v38, v39);
      v138 = v41;
    }
    if (v135 == v41)
    {
LABEL_36:
      v47 = *((_DWORD *)a2 + 18);
      if (v47 == 1)
      {
        JSC::MacroAssemblerARM64::neg32(this, (char)v135, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        v48 = (char)v135;
        if ((v47 - 3) >= 0xFFFFFFFE)
        {
          JSC::MacroAssemblerARM64::branchNeg32((uint64_t)this, 6u, v48, v35, v36, v37, v38, v39, (uint64_t)v133);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v133);
        }
        else
        {
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x7FFFFFFF, (uint64_t)this, 0, v48, v36, v37, v38, v39, (uint64_t)v132, v40);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v132);
          if (v135 == 31)
          {
            v128 = *((_DWORD *)this + 50);
            if (v128 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v49, v50, v51, v52, v53, v54, v55);
              v128 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v128) = 1262446591;
          }
          else
          {
            v56 = v135 | ((v135 & 0x1F) << 16) | 0x4B0003E0;
            v57 = *((_DWORD *)this + 50);
            if (v57 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v49, v50, v51, v52, v53, v54, v55);
              v57 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v57) = v56;
          }
          *((_DWORD *)this + 50) += 4;
        }
      }
      v58 = (char)v135;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v50, v51, v52, v53, v54, v55);
      v59 = *((_DWORD *)a2 + 12);
      v60 = ~v59;
      if (v60 < *((unsigned int *)this + 1001))
      {
        v61 = *((_QWORD *)this + 499);
        if (v58 > 15)
          v62 = -1;
        else
          v62 = v58;
        v63 = (char *)this + 12 * v62;
        *((_DWORD *)v63 + 1194) = v59;
        *((_DWORD *)v63 + 1195) = 5;
        v64 = v61 + 24 * (int)v60;
        v65 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v64 = a2;
        *(_DWORD *)(v64 + 8) = v65;
        *(_BYTE *)(v64 + 17) = v58;
        *(_DWORD *)(v64 + 12) = 1;
        *(_BYTE *)(v64 + 16) = 0;
        if (v134)
        {
          v66 = (char)v135;
          if ((char)v135 != -1)
          {
            if ((char)v135 > 15)
              v66 = -1;
            --*(_DWORD *)(v134 + 12 * v66 + 4784);
          }
        }
        v67 = v138;
        if (v138 > 15)
          v67 = -1;
        v68 = (char *)v136 + 12 * v67;
LABEL_55:
        --*((_DWORD *)v68 + 1196);
        return result;
      }
      __break(0xC471u);
      goto LABEL_102;
    }
    if (v41 == 63)
    {
      if (v135 != 31)
      {
        v44 = v135 & 0x1F | 0xD2800000;
        goto LABEL_33;
      }
    }
    else if (v41 != 31 && v135 != 31)
    {
      v42 = v135 | ((v41 & 0x1F) << 16);
      v43 = -1442839584;
LABEL_32:
      v44 = v42 | v43;
LABEL_33:
      v46 = (unsigned int *)((char *)this + 200);
      v45 = *((_DWORD *)this + 50);
      if (v45 + 4 > *((_DWORD *)this + 48))
      {
        v40 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v33, v34, v35, v36, v37, v38, v39).n128_u64[0];
        v45 = *v46;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v45) = v44;
      *v46 += 4;
      goto LABEL_36;
    }
    v42 = (char)v135 | (32 * v41);
    v43 = -1862270976;
    goto LABEL_32;
  }
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAFE10);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
    v13 = -1;
  v14 = 0;
  v15 = (char *)this + 4968;
  v16 = (_DWORD *)((char *)this + 4976);
  v17 = 0x17u;
  v18 = -1;
  while (*v16)
  {
LABEL_10:
    ++v14;
    v16 += 3;
    if (v14 == 23)
    {
      v14 = v17;
      v20 = &v15[12 * v17];
      v21 = *(_DWORD *)v20;
      *(_QWORD *)v20 = 0xFFFFFFFF3FFFFFFFLL;
      v16 = v20 + 8;
      goto LABEL_13;
    }
  }
  v19 = *(v16 - 1);
  if (v19 != -1)
  {
    if (v19 < v18)
    {
      v17 = v14;
      v18 = *(v16 - 1);
    }
    goto LABEL_10;
  }
  v21 = *(v16 - 2);
  *((_QWORD *)v16 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_13:
  *v16 = 1;
  v22 = JSC::FPRInfo::toRegister::registerForIndex[v14];
  if (v21 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v23 = *((_DWORD *)this + 50);
  if (v23 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v23 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v23) = v22 | (32 * v13) | 0x1E614000;
  *((_DWORD *)this + 50) += 4;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
  v25 = *((_DWORD *)a2 + 12);
  v26 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v22];
  v27 = &v15[12 * v26];
  *(_DWORD *)v27 = v25;
  *((_DWORD *)v27 + 1) = 6;
  v28 = ~v25;
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BAFE18);
  }
  v29 = *((_QWORD *)this + 499) + 24 * (int)v28;
  v30 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v29 = a2;
  *(_DWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 17) = v22;
  *(_DWORD *)(v29 + 12) = 4;
  *(_BYTE *)(v29 + 16) = 0;
  --*(_DWORD *)&v15[12 * v26 + 8];
  v31 = &v15[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v13]];
  --*((_DWORD *)v31 + 2);
  return result;
}

void JSC::MacroAssemblerARM64::neg32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;

  if ((_DWORD)a2 == 31)
    v8 = 1262446591;
  else
    v8 = a2 & 0x1F | ((a2 & 0x1F) << 16) | 0x4B0003E0;
  v10 = a1 + 50;
  v9 = a1[50];
  v11 = a1 + 14;
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = *v10;
  }
  *(_DWORD *)(*v11 + v9) = v8;
  *v10 += 4;
}

{
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;

  if ((_DWORD)a3 == 31)
    v8 = 1260414975;
  else
    v8 = a3 & 0x1F | 0x4B0003E0;
  v9 = ((a2 & 0x1F) << 16) | v8;
  v11 = a1 + 50;
  v10 = a1[50];
  v12 = a1 + 14;
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*v12 + v10) = v9;
  *v11 += 4;
}

void JSC::MacroAssemblerARM64::branchNeg32(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  JSC::AssemblerBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if ((_DWORD)a3 == 31)
    v12 = 1799317503;
  else
    v12 = a3 & 0x1F | ((a3 & 0x1F) << 16) | 0x6B0003E0;
  v13 = (JSC::AssemblerBuffer *)(a1 + 56);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v12, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 328))
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v14, v15, v16, v17, v18, v19, v20);
  JSC::AssemblerBuffer::putInt(v13, a2 | 0x54000000u, v15, v16, v17, v18, v19, v20);
  v21 = *(_DWORD *)(a1 + 200);
  JSC::AssemblerBuffer::putInt(v13, 3573751839, v22, v23, v24, v25, v26, v27);
  if (*(_BYTE *)(a1 + 328))
    v28 = -122;
  else
    v28 = -126;
  *(_DWORD *)a9 = v21;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 9) = a2;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::MacroAssemblerARM64::neg64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  if ((_DWORD)a2 == 31)
  {
    v9 = a1[50];
    if (v9 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v9 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = -885037057;
    a1[50] += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), a2 & 0x1F | ((a2 & 0x1F) << 16) | 0xCB0003E0, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::MacroAssemblerARM64::branchNeg64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v9;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;

  v9 = a2;
  if ((_DWORD)a3 == 31)
  {
    v20 = *(_DWORD *)(a1 + 200);
    if (v20 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v20 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -348166145;
  }
  else
  {
    v12 = a3 & 0x1F | ((a3 & 0x1F) << 16) | 0xEB0003E0;
    v13 = *(_DWORD *)(a1 + 200);
    if (v13 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
  }
  v14 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v14;
  if (*(_BYTE *)(a1 + 328))
  {
    for (; (signed int)v14 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v14)
    {
      if (v14 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v14 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = -721215457;
      v14 = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v9 | 0x54000000;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  v17 = v15 + 8;
  v18 = v15 + 4;
  if (v17 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v19 = -122;
  else
    v19 = -126;
  *(_DWORD *)a9 = v16;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v19;
  *(_BYTE *)(a9 + 9) = v9;
  *(_WORD *)(a9 + 10) = -256;
}

void JSC::DFG::SpeculativeJIT::compileValueMul(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char v84;
  char v85;
  unsigned __int8 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unsigned __int8 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  unsigned __int8 v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int i;
  WTF *v123;
  uint64_t v124;
  unsigned int v125;
  JSC::DFG::Node *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  WTF *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  char *v159;
  char *v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  signed __int8 v176;
  signed __int8 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::DFG::Node *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  JSC::DFG::Node *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  JSC::DFG::Node *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t v250;
  JSC::DFG::JITCompiler *v251;
  char v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  __int16 v257;
  __int16 v258;
  char v259;
  WTF *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 v263;
  uint64_t v264;
  char v265;
  JSC::DFG::SpeculativeJIT *v266;
  unint64_t v267;
  signed __int8 v268;
  char v269;
  JSC::DFG::SpeculativeJIT *v270;
  unint64_t v271;
  unsigned __int8 v272;
  char v273;
  _BYTE v274[10];
  _BYTE v275[10];
  JSC::DFG::SpeculativeJIT *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;

  v279 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 3);
  v12 = (unint64_t *)((char *)a2 + 32);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000 && (*v12 & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v270, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v266, (uint64_t)this, *v12, v165, v166, v167, v168, v169);
    v176 = v272;
    if (v272 == 255)
    {
      v176 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v270, v271, v170, v171, v172, v173, v174, v175);
      v272 = v176;
    }
    v177 = v268;
    if (v268 == 255)
    {
      v177 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v266, v267, v170, v171, v172, v173, v174, v175);
      v268 = v177;
    }
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v11, v176, v171, v172, v173, v174, v175);
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v12, v177, v178, v179, v180, v181, v182);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v183, v184, v185, v186, v187, v188, v189);
    ++*((_DWORD *)this + 1196);
    v196 = *((unsigned int *)this + 1194);
    if ((_DWORD)v196 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v196, (uint64_t)v190, v191, v192, v193, v194, v195);
    }
    v197 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v190, v191, v192, v193, v194, v195);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v276, (unsigned __int8 *)this, (uint64_t)operationMulHeapBigInt, 0, v197, v198, v176, v177);
LABEL_168:
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v199, v200, v201);
    --*((_DWORD *)this + 1196);
    if ((v267 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v236 = v268;
      if (v268 > 15)
        v236 = -1;
      --*((_DWORD *)v266 + 3 * v236 + 1196);
    }
    goto LABEL_126;
  }
  v13 = *((_QWORD *)this + 688);
  v14 = (_QWORD *)(v13 + 24);
  v15 = (_QWORD *)(v13 + 8);
  if ((v10 & 1) != 0)
    v15 = v14;
  v16 = *v15 + 32 * *(unsigned int *)((v10 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v17 != *(_DWORD *)(v16 + 20))
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v16, v17, v10, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v16 + 20) = (_DWORD)v17;
  }
  if (!*(_BYTE *)(v16 + 12))
  {
    v24 = *v11;
LABEL_161:
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v270, (uint64_t)this, v24, 1, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v266, (uint64_t)this, *v12, 1, v202, v203, v204, v205);
    JSC::DFG::SpeculativeJIT::speculate(this, v206, *v11, v207, v208, v209, v210, v211);
    JSC::DFG::SpeculativeJIT::speculate(this, v212, *v12, v213, v214, v215, v216, v217);
    v225 = v272;
    if (v272 == 255)
    {
      v225 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v270, v271, v219, v220, v221, v222, v223, v224);
      v272 = v225;
    }
    v226 = v268;
    if (v268 == 255)
    {
      v226 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v266, v267, v219, v220, v221, v222, v223, v224);
      v268 = v226;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v218, v219, v220, v221, v222, v223, v224);
    ++*((_DWORD *)this + 1196);
    v233 = *((unsigned int *)this + 1194);
    if ((_DWORD)v233 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v233, (uint64_t)v227, v228, v229, v230, v231, v232);
    }
    v234 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v227, v228, v229, v230, v231, v232);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v276, (unsigned __int8 *)this, (uint64_t)operationValueMul, 0, v234, v235, v225, v226);
    goto LABEL_168;
  }
  v18 = *((_QWORD *)this + 688);
  v19 = (_QWORD *)(v18 + 24);
  v20 = (_QWORD *)(v18 + 8);
  if ((*v12 & 1) != 0)
    v21 = v19;
  else
    v21 = v20;
  v22 = *v21 + 32 * *(unsigned int *)((*v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v23 != *(_DWORD *)(v22 + 20))
  {
    if ((*(_QWORD *)(v22 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v22, v23, v10, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v22 + 20) = (_DWORD)v23;
  }
  v24 = *v11;
  if (!*(_BYTE *)(v22 + 12)
    || (v24 & 0xFC000000000000) == 0x68000000000000 && (*v12 & 0xFC000000000000) == 0x68000000000000)
  {
    goto LABEL_161;
  }
  v25 = *(_QWORD *)(*((_QWORD *)this + 495) + 40);
  v26 = *(_QWORD *)a2;
  v27 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v27 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v27)
    v25 = *(_QWORD *)(v27 + 8);
  if ((v26 & 2) != 0)
  {
    LODWORD(v28) = -1;
  }
  else if ((v26 & 1) != 0)
  {
    LODWORD(v28) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v28 = v26 >> 36;
  }
  v29 = JSC::CodeBlock::binaryArithProfileForPC(v25, (unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v25 + 56) + 80) + (v28 >> 2)));
  v30 = *((_QWORD *)this + 46);
  if (v30)
  {
    v31 = (unsigned int *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v39 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v39 = v29;
    *(_OWORD *)(v39 + 8) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_BYTE *)(v39 + 56) = 0;
    *(_WORD *)(v39 + 57) = 126;
    *(_QWORD *)(v39 + 59) = 0;
    *(_WORD *)(v39 + 67) = 126;
    *(_QWORD *)(v39 + 69) = 0;
    *(_WORD *)(v39 + 77) = -1;
    *(_BYTE *)(v39 + 79) = -1;
    *(_QWORD *)(v39 + 88) = 0;
    *(_QWORD *)(v39 + 88) = *(_QWORD *)(v30 + 48);
    *(_QWORD *)(v30 + 48) = v39;
    do
    {
      v40 = __ldaxr(v31);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v31));
    if (!v41)
    {
      atomic_store(1u, (unsigned int *)(v30 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    }
  }
  else
  {
    JSC::MathICHolder::addJITMulIC(40, v29);
    v39 = v245;
  }
  v42 = 0;
  LOBYTE(v270) = 0;
  v273 = 0;
  LOBYTE(v266) = 0;
  v269 = 0;
  v43 = (char *)this + 4968;
  v44 = (_DWORD *)((char *)this + 4976);
  v45 = 0x17u;
  v46 = -1;
  while (*v44)
  {
LABEL_31:
    ++v42;
    v44 += 3;
    if (v42 == 23)
    {
      v42 = v45;
      v48 = &v43[12 * v45];
      v49 = *(_DWORD *)v48;
      *(_QWORD *)v48 = 0xFFFFFFFF3FFFFFFFLL;
      v44 = v48 + 8;
      goto LABEL_34;
    }
  }
  v47 = *(v44 - 1);
  if (v47 != -1)
  {
    if (v47 < v46)
    {
      v45 = v42;
      v46 = *(v44 - 1);
    }
    goto LABEL_31;
  }
  v49 = *(v44 - 2);
  *((_QWORD *)v44 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_34:
  *v44 = 1;
  v250 = JSC::FPRInfo::toRegister::registerForIndex[v42];
  v253 = JSC::FPRInfo::toRegister::registerForIndex[v42];
  if (v49 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v49, v33, v34, v35, v36, v37, v38);
  v50 = 0;
  v51 = (_DWORD *)((char *)this + 4976);
  v52 = 0x17u;
  v53 = -1;
  while (2)
  {
    if (*v51)
    {
LABEL_41:
      ++v50;
      v51 += 3;
      if (v50 == 23)
      {
        v50 = v52;
        v55 = &v43[12 * v52];
        v56 = *(_DWORD *)v55;
        *(_QWORD *)v55 = 0xFFFFFFFF3FFFFFFFLL;
        v51 = v55 + 8;
        goto LABEL_44;
      }
      continue;
    }
    break;
  }
  v54 = *(v51 - 1);
  if (v54 != -1)
  {
    if (v54 < v53)
    {
      v52 = v50;
      v53 = *(v51 - 1);
    }
    goto LABEL_41;
  }
  v56 = *(v51 - 2);
  *((_QWORD *)v51 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_44:
  *v51 = 1;
  v255 = JSC::FPRInfo::toRegister::registerForIndex[v50];
  if (v56 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v56, v33, v34, v35, v36, v37, v38);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v264, this, v33, v34, v35, v36, v37, v38);
  v252 = v265;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v262, this, v57, v58, v59, v60, v61, v62);
  v254 = v263;
  v69 = *((_QWORD *)this + 688);
  v70 = (_QWORD *)(v69 + 24);
  v71 = (_QWORD *)(v69 + 8);
  if ((*v11 & 1) != 0)
    v72 = v70;
  else
    v72 = v71;
  v73 = *v72 + 32 * *(unsigned int *)((*v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v74 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v74 != *(_DWORD *)(v73 + 20))
  {
    if ((*(_QWORD *)(v73 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v73, v74, v63, v64, v65, v66, v67, v68);
    else
      *(_DWORD *)(v73 + 20) = (_DWORD)v74;
  }
  v75 = *(_QWORD *)(v73 + 8);
  if ((v75 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v75 & 0xFFFFFFFCFFFFFFFFLL) != 0)
    {
      if ((v75 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        if ((v75 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
          if ((v75 & 0xFFFFFF8CCFFFFFFFLL) != 0)
            v76 = 126;
          else
            v76 = 6;
        }
        else
        {
          v76 = 4;
        }
      }
      else
      {
        v76 = 2;
      }
    }
    else
    {
      v76 = 3;
    }
  }
  else
  {
    v76 = 32;
  }
  v275[0] = v76;
  v275[1] = 0;
  *(_QWORD *)&v275[2] = 0;
  v77 = *((_QWORD *)this + 688);
  v78 = (_QWORD *)(v77 + 24);
  v79 = (_QWORD *)(v77 + 8);
  if ((*v12 & 1) != 0)
    v80 = v78;
  else
    v80 = v79;
  v81 = *v80 + 32 * *(unsigned int *)((*v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v82 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v82 != *(_DWORD *)(v81 + 20))
  {
    if ((*(_QWORD *)(v81 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v81, v82, v63, v64, v65, v66, v67, v68);
    else
      *(_DWORD *)(v81 + 20) = (_DWORD)v82;
  }
  v83 = *(_QWORD *)(v81 + 8);
  if ((v83 & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    if ((v83 & 0xFFFFFF8CCFFFFFFFLL) != 0)
      v84 = 126;
    else
      v84 = 6;
    if ((v83 & 0xFFFFFFFFCFFFFFFFLL) == 0)
      v84 = 4;
    if ((v83 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      v85 = v84;
    else
      v85 = 2;
    if ((v83 & 0xFFFFFFFCFFFFFFFFLL) != 0)
      v86 = v85;
    else
      v86 = 3;
  }
  else
  {
    v86 = 32;
  }
  *(_WORD *)v274 = v86;
  *(_QWORD *)&v274[2] = 0;
  v87 = *v11;
  v88 = *v11 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v88 + 0x12) <= 2u
    && (v89 = **(_QWORD **)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v89 > 0xFFFDFFFFFFFFFFFFLL))
  {
    v94 = (unint64_t)v275;
LABEL_85:
    *(_BYTE *)(v94 | 1) = 1;
    *(_QWORD *)(v94 | 2) = v89;
  }
  else if (*(unsigned __int16 *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v89 = **(_QWORD **)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (v89 >= 0xFFFE000000000000)
    {
      v94 = (unint64_t)v274;
      goto LABEL_85;
    }
  }
  v249 = (uint64_t *)v12;
  v90 = *(_QWORD *)v275;
  v276 = *(JSC::DFG::SpeculativeJIT **)v275;
  v248 = v11;
  if ((*(_WORD *)v275 & 0xFF00) == 0x100 && *(int *)((char *)&v276 + 2) > 0)
  {
    v93 = -1;
    goto LABEL_89;
  }
  v270 = this;
  v271 = v87;
  if (!v88)
    goto LABEL_87;
  v91 = ~*(_DWORD *)(v88 + 48);
  if (v91 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_200;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v91 + 12))
  {
LABEL_87:
    v273 = 1;
    goto LABEL_88;
  }
  v92 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v87, v63, v64, v65, v66, v67, v68);
  v93 = v92;
  v272 = v92;
  v273 = 1;
  if (v92 == -1)
  {
LABEL_88:
    v93 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v87, v63, v64, v65, v66, v67, v68);
    v272 = v93;
  }
LABEL_89:
  v95 = *(_QWORD *)v274;
  v276 = *(JSC::DFG::SpeculativeJIT **)v274;
  v96 = *(_WORD *)v274 & 0xFF00;
  v251 = a2;
  if (v96 == 256 && *(int *)((char *)&v276 + 2) > 0)
  {
    v100 = -1;
    goto LABEL_98;
  }
  v97 = *v249;
  v266 = this;
  v267 = v97;
  if ((v97 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_96;
  v98 = ~*(_DWORD *)((v97 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v98 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_199:
    __break(1u);
LABEL_200:
    JUMPOUT(0x197BB10F8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v98 + 12))
  {
LABEL_96:
    v269 = 1;
    goto LABEL_97;
  }
  v99 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v97, v63, v64, v65, v66, v67, v68);
  v100 = v99;
  v268 = v99;
  v269 = 1;
  if (v99 == -1)
  {
LABEL_97:
    v100 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v97, v63, v64, v65, v66, v67, v68);
    v268 = v100;
  }
LABEL_98:
  v101 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v101 = 1;
  *(_OWORD *)(v101 + 24) = 0u;
  *(_OWORD *)(v101 + 40) = 0u;
  *(_OWORD *)(v101 + 56) = 0u;
  *(_QWORD *)(v101 + 72) = 0;
  *(_QWORD *)(v101 + 16) = -1;
  *(_QWORD *)(v101 + 8) = -1;
  *(_QWORD *)(v101 + 32) = v101 + 48;
  *(_DWORD *)(v101 + 40) = 2;
  *(_QWORD *)(v39 + 57) = v90;
  *(_WORD *)(v39 + 65) = 0;
  *(_QWORD *)(v39 + 67) = v95;
  *(_WORD *)(v39 + 75) = 0;
  *(_BYTE *)(v39 + 77) = v254;
  *(_BYTE *)(v39 + 78) = v93;
  *(_BYTE *)(v39 + 79) = v100;
  *(_BYTE *)(v39 + 80) = v253;
  *(_BYTE *)(v39 + 81) = v255;
  *(_BYTE *)(v39 + 82) = v252;
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateInline(v39, (uint64_t)this, v101 + 8, 0, v102, v103, v104, v105);
  v113 = (char)v254;
  if (!v114)
  {
    v276 = (JSC::DFG::SpeculativeJIT *)v90;
    if ((v90 & 0xFF00) == 0x100 && *(int *)((char *)&v276 + 2) >= 1)
    {
      v276 = this;
      std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v270, (uint64_t *)&v276, v248, v108, v109, v110, v111, v112);
      if (v273)
      {
        v93 = v272;
        if (v272 == 255)
        {
          v93 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v270, v271, v107, v108, v109, v110, v111, v112);
          v272 = v93;
        }
        goto LABEL_177;
      }
    }
    else
    {
      v276 = (JSC::DFG::SpeculativeJIT *)v95;
      if (v96 != 256 || *(int *)((char *)&v276 + 2) < 1)
      {
LABEL_177:
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v106, v107, v108, v109, v110, v111, v112);
        v126 = a2;
        v243 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v237, v238, v239, v240, v241, v242);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v276, (unsigned __int8 *)this, (uint64_t)operationValueMul, v254, v243, v244, v93, v100);
        v146 = v250;
        v145 = (char *)this + 4968;
        goto LABEL_107;
      }
      v276 = this;
      std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v266, (uint64_t *)&v276, v249, v108, v109, v110, v111, v112);
      if (v269)
      {
        v100 = v268;
        if (v268 == 255)
        {
          v100 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v266, v267, v107, v108, v109, v110, v111, v112);
          v268 = v100;
        }
        goto LABEL_177;
      }
    }
    goto LABEL_199;
  }
  v260 = 0;
  v261 = 0;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, (uint64_t)&v260, v113, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v111, v112);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v115, v116, v117, v118, v119, v120, v121);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v123 = v260;
  v124 = v261;
  v260 = 0;
  v261 = 0;
  do
    v125 = __ldaxr((unsigned int *)v101);
  while (__stlxr(v125 + 1, (unsigned int *)v101));
  v126 = v251;
  v127 = *((_QWORD *)v251 + 3);
  v128 = *((_QWORD *)v251 + 4);
  v129 = WTF::fastMalloc((WTF *)0x80);
  *(_QWORD *)v129 = &off_1E3573630;
  *(_QWORD *)(v129 + 8) = this;
  *(_QWORD *)(v129 + 16) = v123;
  *(_QWORD *)(v129 + 24) = v124;
  *(_QWORD *)(v129 + 32) = v101;
  *(_BYTE *)(v129 + 40) = v93;
  *(_BYTE *)(v129 + 41) = v100;
  *(_QWORD *)(v129 + 42) = *(_QWORD *)v275;
  *(_WORD *)(v129 + 50) = *(_WORD *)&v275[8];
  *(_BYTE *)(v129 + 52) = v254;
  *(_WORD *)(v129 + 53) = v258;
  *(_BYTE *)(v129 + 55) = v259;
  v137 = *(_QWORD *)v274;
  *(_WORD *)(v129 + 72) = *(_WORD *)&v274[8];
  *(_QWORD *)(v129 + 56) = v127;
  *(_QWORD *)(v129 + 64) = v137;
  *(_WORD *)(v129 + 78) = v257;
  *(_DWORD *)(v129 + 74) = v256;
  *(_QWORD *)(v129 + 80) = v128;
  *(_QWORD *)(v129 + 88) = operationValueMulOptimize;
  *(_QWORD *)(v129 + 96) = v251;
  *(_QWORD *)(v129 + 104) = v39;
  *(_QWORD *)(v129 + 112) = operationValueMul;
  *(_DWORD *)(v129 + 120) = i;
  v138 = *((_QWORD *)this + 497);
  v276 = (JSC::DFG::SpeculativeJIT *)v129;
  v277 = v138;
  v278 = *((_DWORD *)this + 1411);
  v139 = *((unsigned int *)this + 1437);
  if ((_DWORD)v139 == *((_DWORD *)this + 1436))
  {
    v140 = WTF::Vector<JSC::DFG::SpeculativeJIT::SlowPathLambda,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5736, v139 + 1, (unint64_t)&v276);
    v141 = *((_QWORD *)this + 717) + 24 * *((unsigned int *)this + 1437);
    v142 = *(_QWORD *)v140;
    *(_QWORD *)v140 = 0;
    *(_QWORD *)v141 = v142;
    v143 = *(_QWORD *)(v140 + 8);
    *(_DWORD *)(v141 + 16) = *(_DWORD *)(v140 + 16);
    *(_QWORD *)(v141 + 8) = v143;
    v144 = (uint64_t)v276;
    ++*((_DWORD *)this + 1437);
    v276 = 0;
    v146 = v250;
    v145 = (char *)this + 4968;
    LODWORD(v113) = (char)v254;
    if (v144)
      (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  }
  else
  {
    v163 = *((_QWORD *)this + 717) + 24 * v139;
    *(_QWORD *)v163 = v129;
    v164 = v277;
    *(_DWORD *)(v163 + 16) = v278;
    *(_QWORD *)(v163 + 8) = v164;
    ++*((_DWORD *)this + 1437);
    v146 = v250;
    v145 = (char *)this + 4968;
    LODWORD(v113) = (char)v254;
  }
  v147 = v260;
  if (v260)
  {
    v260 = 0;
    LODWORD(v261) = 0;
    WTF::fastFree((unint64_t)v147, v130, v131, v132, v133, v134, v135, v136);
  }
LABEL_107:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v113, (uint64_t)v126, 16, 0, v134, v135, v136);
  do
  {
    v155 = __ldaxr((unsigned int *)v101);
    v156 = v155 - 1;
  }
  while (__stlxr(v156, (unsigned int *)v101));
  if (!v156)
  {
    atomic_store(1u, (unsigned int *)v101);
    v246 = *(_QWORD *)(v101 + 32);
    if (v101 + 48 != v246 && v246 != 0)
    {
      *(_QWORD *)(v101 + 32) = 0;
      *(_DWORD *)(v101 + 40) = 0;
      WTF::fastFree(v246, v148, v149, v150, v151, v152, v153, v154);
    }
    WTF::fastFree(v101, v148, v149, v150, v151, v152, v153, v154);
  }
  if (v262)
  {
    v157 = (char)v263;
    if ((char)v263 != -1)
    {
      if ((char)v263 > 15)
        v157 = -1;
      --*(_DWORD *)(v262 + 12 * v157 + 4784);
    }
  }
  if (v264)
  {
    v158 = v265;
    if (v265 != -1)
    {
      if (v265 > 15)
        v158 = -1;
      --*(_DWORD *)(v264 + 12 * v158 + 4784);
    }
  }
  v159 = &v145[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v255]];
  --*((_DWORD *)v159 + 2);
  v160 = &v145[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v146]];
  --*((_DWORD *)v160 + 2);
  if (v269 && (v267 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v161 = v268;
    if (v268 > 15)
      v161 = -1;
    --*((_DWORD *)v266 + 3 * v161 + 1196);
  }
  if (v273)
  {
LABEL_126:
    if ((v271 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v162 = (char)v272;
      if ((char)v272 > 15)
        v162 = -1;
      --*((_DWORD *)v270 + 3 * v162 + 1196);
    }
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithMul(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *result;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  unsigned int v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __int128 *v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x8_t v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  char *v112;
  uint64_t v113;
  int v114;
  unsigned int v115;
  int *v116;
  _BYTE *v117;
  JSC::DFG::SpeculativeJIT *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int8x8_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167[3];
  int v168[3];
  int v169[3];
  int v170[3];
  int v171[3];
  unsigned int v172[3];
  int v173[3];
  uint64_t v174;
  int v175;
  JSC::DFG::SpeculativeJIT *v176;
  unint64_t v177;
  char v178;
  _BYTE v179[11];
  _BYTE v180[12];
  _BYTE v181[12];
  int v182[3];
  JSC::DFG::SpeculativeJIT *v183;
  unint64_t v184;
  char v185;
  _BYTE v186[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 1)
    {
      if ((_DWORD)v11 != 52)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB1AA4);
      }
      JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)&v183, (uint64_t)this, v10);
      JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((JSC::DFG::SpeculateWhicheverInt52Operand *)&v176, (uint64_t)this, *((_QWORD *)a2 + 4), v186[0], v121, v122, v123, v124);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v174, this, v125, v126, v127, v128, v129, v130);
      v136 = v185;
      if (v185 == 255)
      {
        if (v186[0])
          v137 = 3;
        else
          v137 = 2;
        v136 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v183, v184, v137, v131, v132, v133, v134, v135);
        v185 = v136;
      }
      v138 = v178;
      if (v178 == 255)
      {
        if (v179[0])
          v139 = 3;
        else
          v139 = 2;
        v138 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v176, v177, v139, v131, v132, v133, v134, v135);
        v178 = v138;
      }
      v140 = v175;
      v141 = v136;
      v142 = v138;
      JSC::MacroAssemblerARM64::branchMul64((uint64_t)v169, (uint64_t)this, v141, v142, (char)v175, v133, v134, v135);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xCuLL, (JSC::DFG::Node *)0xFF80000000, 0, v169);
      v149 = v140;
      if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
      {
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v149, 0xFFFFFFFFLL, v144, v145, v146, v147, (uint64_t)v172, v148);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 4, v141, v141, v150, v151, v152, v153, (uint64_t)v168);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v168);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 4, v142, v142, v154, v155, v156, v157, (uint64_t)v167);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v167);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v172, (uint64_t)this, v158, v159, v160, v161, v162, v163);
      }
      result = JSC::DFG::SpeculativeJIT::int52Result((uint64_t)this, v149, a2, v143, v144, v145, v146, v147);
      if (v174)
      {
        v164 = (char)v175;
        if ((char)v175 != -1)
        {
          if ((char)v175 > 15)
            v164 = -1;
          --*(_DWORD *)(v174 + 12 * v164 + 4784);
        }
      }
      v165 = v178;
      if (v178 > 15)
        v165 = -1;
      --*((_DWORD *)v176 + 3 * v165 + 1196);
      v166 = v185;
      if (v185 > 15)
        v166 = -1;
      v85 = (char *)v183 + 12 * v166;
      goto LABEL_51;
    }
    v36 = *((_QWORD *)a2 + 4);
    v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
    if (*(unsigned __int16 *)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u
      || **(_QWORD **)((v36 & 0xFF00FFFFFFFFFFFFLL) + 0x48) < 0xFFFE000000000000)
    {
      v183 = this;
      v184 = v10;
      v185 = -1;
      v38 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v39 = *((unsigned int *)this + 1001);
      if (v38 >= v39)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB1B20);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v38 + 12))
      {
        v185 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v186, a4, a5, a6, a7, a8);
        v36 = *((_QWORD *)a2 + 4);
        v39 = *((unsigned int *)this + 1001);
        v37 = v36 & 0xFF00FFFFFFFFFFFFLL;
      }
      v176 = this;
      v177 = v36;
      v178 = -1;
      v40 = ~*(_DWORD *)(v37 + 48);
      if (v40 >= v39)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB1B28);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v40 + 12))
        v178 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v36, (uint64_t)v179, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v174, this, a3, a4, a5, a6, a7, a8);
      v46 = v185;
      if (v185 == 255)
      {
        v46 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v183, v184, (uint64_t)v186, v41, v42, v43, v44, v45);
        v185 = v46;
      }
      v47 = v178;
      if (v178 == 255)
      {
        v47 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v176, v177, (uint64_t)v179, v41, v42, v43, v44, v45);
        v178 = v47;
      }
      v48 = v46;
      v49 = v47;
      if (*((_DWORD *)a2 + 18) == 1)
      {
        JSC::MacroAssemblerARM64::mul32(this, v48, v49, (char)v175, v42, v43, v44, v45);
      }
      else
      {
        JSC::MacroAssemblerARM64::branchMul32((uint64_t)this, 6, v48, v49, (char)v175, v43, v44, v45, (uint64_t)v173);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v173);
      }
      if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
      {
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, (char)v175, v52, v53, v54, v55, (uint64_t)v172, v56);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 4, v48, v57, v58, v59, v60, (uint64_t)v171, v61);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v171);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 4, v49, v62, v63, v64, v65, (uint64_t)v170, v66);
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v170);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v172, (uint64_t)this, v67, v68, v69, v70, v71, v72);
      }
      v73 = (char)v175;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v50, v51, v52, v53, v54, v55);
      v74 = *((_DWORD *)a2 + 12);
      v75 = ~v74;
      if (v75 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB1B30);
      }
      v76 = *((_QWORD *)this + 499);
      if (v73 > 15)
        v77 = -1;
      else
        v77 = v73;
      v78 = (char *)this + 12 * v77;
      *((_DWORD *)v78 + 1194) = v74;
      *((_DWORD *)v78 + 1195) = 5;
      v79 = v76 + 24 * (int)v75;
      v80 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v79 = a2;
      *(_DWORD *)(v79 + 8) = v80;
      *(_BYTE *)(v79 + 17) = v73;
      *(_DWORD *)(v79 + 12) = 1;
      *(_BYTE *)(v79 + 16) = 0;
      if (v174)
      {
        v81 = (char)v175;
        if ((char)v175 != -1)
        {
          if ((char)v175 > 15)
            v81 = -1;
          --*(_DWORD *)(v174 + 12 * v81 + 4784);
        }
      }
      v82 = v178;
      if (v178 > 15)
        v82 = -1;
      v83 = (char *)v176 + 12 * v82;
      goto LABEL_47;
    }
    v183 = this;
    v184 = v10;
    v185 = -1;
    v86 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v86 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB1B38);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v86 + 12))
      v185 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v186, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v176, this, a3, a4, a5, a6, a7, a8);
    v92 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v92 == 355 || v92 == 348)
    {
      v93 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v93 = *(__int128 **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v94 = *(_QWORD *)v93;
    v95 = *(_QWORD *)v93;
    v96 = v185;
    if (v185 == 255)
    {
      v96 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v183, v184, (uint64_t)v186, v87, v88, v89, v90, v91);
      v185 = v96;
    }
    v97 = (char)v177;
    if (*((_DWORD *)a2 + 18) == 1)
    {
      JSC::MacroAssembler::mul32((uint64_t)this, v95, v96, (char)v177, v88, v89, v90, v91);
    }
    else
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB1AC4);
      }
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v95, *((char *)this + 272), v87, v88, v89, v90, v91);
      JSC::MacroAssemblerARM64::branchMul32((uint64_t)this, 6, 16, v96, v97, v98, v99, v100, (uint64_t)v182);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v182);
    }
    if ((*((_DWORD *)a2 + 18) - 3) > 0xFFFFFFFD)
    {
LABEL_65:
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v101, v102, v103, v104, v105, v106);
      v108 = *((_DWORD *)a2 + 12);
      v109 = ~v108;
      if (v109 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
LABEL_117:
        JUMPOUT(0x197BB1898);
      }
      v110 = *((_QWORD *)this + 499);
      if ((int)v97 > 15)
        v111 = -1;
      else
        v111 = v97;
      v112 = (char *)this + 12 * v111;
      *((_DWORD *)v112 + 1194) = v108;
      *((_DWORD *)v112 + 1195) = 5;
      v113 = v110 + 24 * (int)v109;
      v114 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v113 = a2;
      *(_DWORD *)(v113 + 8) = v114;
      *(_BYTE *)(v113 + 17) = v97;
      *(_DWORD *)(v113 + 12) = 1;
      *(_BYTE *)(v113 + 16) = 0;
      if (!v176)
        goto LABEL_48;
      v115 = (char)v177;
      if ((char)v177 == -1)
        goto LABEL_48;
      if ((char)v177 > 15)
        v115 = -1;
      v83 = (char *)v176 + 12 * v115;
LABEL_47:
      --*((_DWORD *)v83 + 1196);
LABEL_48:
      v84 = v185;
      if (v185 > 15)
        v84 = -1;
      v85 = (char *)v183 + 12 * v84;
LABEL_51:
      --*((_DWORD *)v85 + 1196);
      return result;
    }
    if ((_DWORD)v94)
    {
      if ((v94 & 0x80000000) == 0)
        goto LABEL_65;
      v116 = (int *)v180;
      v117 = v180;
      v118 = this;
      v119 = 0;
      v120 = v97;
    }
    else
    {
      v120 = v96;
      v116 = (int *)v181;
      v117 = v181;
      v118 = this;
      v119 = 4;
    }
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v118, v119, v120, v103, v104, v105, v106, (uint64_t)v117, v107);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v116);
    goto LABEL_65;
  }
  v183 = this;
  v184 = v10;
  v185 = -1;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB1B08);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v185 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)a2 + 4);
  v176 = this;
  v177 = v13;
  v178 = -1;
  if (((v13 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    goto LABEL_117;
  }
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB1B10);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v178 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v174, (uint64_t)this, (uint64_t)&v183, (uint64_t)&v176, a5, a6, a7, a8);
  v22 = v185;
  if (v185 == 255)
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v183, v184, v16, v17, v18, v19, v20, v21);
  v23 = v178;
  if (v178 == 255)
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v176, v177, v16, v17, v18, v19, v20, v21);
  v24 = (char)v175;
  v25 = *((_DWORD *)this + 50);
  if (v25 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v15, v16, v17, v18, v19, v20, v21);
    v25 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v25) = (32 * v22) | (v23 << 16) | v24 | 0x1E600800;
  *((_DWORD *)this + 50) += 4;
  v26 = (char)v175;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v16, v17, v18, v19, v20, v21);
  v28 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v26];
  v29 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v28 + 1242) = v29;
  *((_DWORD *)v28 + 1243) = 6;
  v30 = ~v29;
  if (v30 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB1B18);
  }
  v31 = *((_QWORD *)this + 499) + 24 * (int)v30;
  v32 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v31 = a2;
  *(_DWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 17) = v26;
  *(_DWORD *)(v31 + 12) = 4;
  *(_BYTE *)(v31 + 16) = 0;
  if (v174)
  {
    v33 = v174 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v175];
    --*(_DWORD *)(v33 + 4976);
  }
  v34 = (char *)v176 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v23];
  --*((_DWORD *)v34 + 1244);
  v35 = (char *)v183 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v22];
  --*((_DWORD *)v35 + 1244);
  return result;
}

void JSC::MacroAssemblerARM64::mul32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x1B007C00;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0x1B007C00;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::branchMul32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v12;
  JSC::AssemblerBuffer *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;

  v12 = (unsigned __int16)(32 * a3) | ((a4 & 0x1F) << 16) | a5 & 0x1F;
  v13 = (JSC::AssemblerBuffer *)(a1 + 56);
  if ((_DWORD)a2 == 6)
  {
    v14 = a5 & 0x1F;
    v15 = v12 | 0x9B207C00;
    v16 = *(_DWORD *)(a1 + 200);
    if (v16 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v16) = v15;
    v17 = *(_DWORD *)(a1 + 200);
    v18 = v17 + 4;
    *(_DWORD *)(a1 + 200) = v17 + 4;
    v19 = (32 * a5) | (v14 << 16) | 0xEB20C01F;
    if ((v17 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
      v18 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v19;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a5, a5);
    if (*(_BYTE *)(a1 + 328))
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, v20, v21, v22, v23, v24, v25, v26);
    v27 = *(_DWORD *)(a1 + 200);
    if (v27 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, v20, v21, v22, v23, v24, v25, v26);
      v27 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = 1409286145;
    v28 = *(_DWORD *)(a1 + 200);
    v29 = v28 + 4;
    *(_DWORD *)(a1 + 200) = v28 + 4;
    v30 = v28 + 8;
    v31 = v28 + 4;
    if (v30 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, v20, v21, v22, v23, v24, v25, v26);
      v31 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v31) = -721215457;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v32 = -122;
    else
      v32 = -126;
    *(_DWORD *)a9 = v29;
    *(_DWORD *)(a9 + 4) = 0;
    *(_BYTE *)(a9 + 8) = v32;
    *(_WORD *)(a9 + 9) = 1;
    *(_BYTE *)(a9 + 11) = -1;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v12 | 0x1B007C00u, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, a2, a5, v34, v35, v36, v37, a9, v38);
  }
}

void JSC::MacroAssemblerARM64::branchMul64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::branchMul64(a2, 6, a3, a4, *(char *)(a2 + 272), a5, a7, a8, a1);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::SpeculativeJIT::compileValueDiv(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  JSC::DFG::Node *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  JSC::DFG::SpeculativeJIT *v58;
  int v59;
  BOOL isKnownNotNumber;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  _QWORD *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  double v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  int v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  JSC::DFG::Node *v146;
  uint64_t *v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  signed __int8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  JSC::DFG::Node *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t *v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  __int16 v214;
  char v215;
  char v216;
  char v217;
  char v218;
  double v219;
  int v220;
  _DWORD v221[2];
  char v222;
  __int16 v223;
  char v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  unsigned __int8 v234;
  uint64_t v235;
  uint64_t v236;
  signed __int8 v237;
  unsigned __int8 v238;
  JSC::DFG::SpeculativeJIT *v239;
  unint64_t v240;
  unsigned __int8 v241;
  unsigned __int8 v242;
  JSC::DFG::SpeculativeJIT *v243;
  _BYTE v244[12];
  char v245;
  unsigned __int8 v246;
  unsigned __int8 v247;
  char v248;
  char v249;
  char v250;
  char v251;
  char v252;
  uint64_t v253;
  _QWORD v254[2];
  uint64_t v255;
  _QWORD v256[2];
  _QWORD v257[5];

  v257[3] = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 3);
  v12 = (unint64_t *)((char *)a2 + 32);
  if ((v10 & 0xFC000000000000) == 0x6C000000000000 && (*v12 & 0xFC000000000000) == 0x6C000000000000)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v243, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v239, (uint64_t)this, *v12, v172, v173, v174, v175, v176);
    v183 = v244[8];
    if (v244[8] == 255)
    {
      v183 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v243, *(unint64_t *)v244, v177, v178, v179, v180, v181, v182);
      v244[8] = v183;
    }
    v184 = v241;
    if (v241 == 255)
    {
      v184 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v239, v240, v177, v178, v179, v180, v181, v182);
      v241 = v184;
    }
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v11, v183, v178, v179, v180, v181, v182);
    JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *v12, v184, v185, v186, v187, v188, v189);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v190, v191, v192, v193, v194, v195, v196);
    ++*((_DWORD *)this + 1196);
    v203 = *((unsigned int *)this + 1194);
    if ((_DWORD)v203 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v203, (uint64_t)v197, v198, v199, v200, v201, v202);
    }
    v204 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v197, v198, v199, v200, v201, v202);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v235, (unsigned __int8 *)this, (uint64_t)operationDivHeapBigInt, 0, v204, v205, v183, v184);
    goto LABEL_11;
  }
  if (JSC::DFG::SpeculativeJIT::isKnownNotNumber(this, v10 & 0xFF00FFFFFFFFFFFFLL, v10, a4, a5, a6, a7, a8))
  {
    v19 = *v11;
LABEL_4:
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v243, (uint64_t)this, v19, 1, v15, v16, v17, v18);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v239, (uint64_t)this, *v12, 1, v20, v21, v22, v23);
    JSC::DFG::SpeculativeJIT::speculate(this, v24, *v11, v25, v26, v27, v28, v29);
    JSC::DFG::SpeculativeJIT::speculate(this, v30, *v12, v31, v32, v33, v34, v35);
    v43 = v244[8];
    if (v244[8] == 255)
    {
      v43 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v243, *(uint64_t *)v244, v37, v38, v39, v40, v41, v42);
      v244[8] = v43;
    }
    v44 = v241;
    if (v241 == 255)
    {
      v44 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v239, v240, v37, v38, v39, v40, v41, v42);
      v241 = v44;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v36, v37, v38, v39, v40, v41, v42);
    ++*((_DWORD *)this + 1196);
    v51 = *((unsigned int *)this + 1194);
    if ((_DWORD)v51 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v51, (uint64_t)v45, v46, v47, v48, v49, v50);
    }
    v52 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v45, v46, v47, v48, v49, v50);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v235, (unsigned __int8 *)this, (uint64_t)operationValueDiv, 0, v52, v53, v43, v44);
LABEL_11:
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v54, v55, v56);
    --*((_DWORD *)this + 1196);
    if ((v240 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v57 = (char)v241;
      if ((char)v241 > 15)
        v57 = -1;
      --*((_DWORD *)v239 + 3 * v57 + 1196);
    }
    if ((*(_QWORD *)v244 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v58 = v243;
      v59 = v244[8];
LABEL_17:
      if (v59 > 15)
        v59 = -1;
      --*((_DWORD *)v58 + 3 * v59 + 1196);
      return;
    }
    return;
  }
  isKnownNotNumber = JSC::DFG::SpeculativeJIT::isKnownNotNumber(this, *v12 & 0xFF00FFFFFFFFFFFFLL, v13, v14, v15, v16, v17, v18);
  v19 = *v11;
  if (isKnownNotNumber)
    goto LABEL_4;
  v62 = (v19 >> 50) & 0x3F;
  if ((_DWORD)v62 == 26)
  {
    v210 = *v12 & 0xFC000000000000;
    v211 = 0x68000000000000;
  }
  else
  {
    if ((_DWORD)v62 != 28)
      goto LABEL_24;
    v210 = *v12 & 0xFC000000000000;
    v211 = 0x70000000000000;
  }
  if (v210 == v211)
    goto LABEL_4;
LABEL_24:
  LOBYTE(v239) = 0;
  v242 = 0;
  LOBYTE(v235) = 0;
  v238 = 0;
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v233, this, v19, v61, v15, v16, v17, v18);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v231, this, v63, v64, v65, v66, v67, v68);
  v69 = v234;
  v217 = v232;
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v229, this, v70, v71, v72, v73, v74, v75);
  v216 = v230;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v227, this, v76, v77, v78, v79, v80, v81);
  *(_QWORD *)&v219 = v228;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v225, this, v82, v83, v84, v85, v86, v87);
  v215 = v226;
  v94 = *((_QWORD *)this + 688);
  if ((*v11 & 1) != 0)
    v95 = (_QWORD *)(v94 + 24);
  else
    v95 = (_QWORD *)(v94 + 8);
  v96 = *v95 + 32 * *(unsigned int *)((*v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v97 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v97 != *(_DWORD *)(v96 + 20))
  {
    if ((*(_QWORD *)(v96 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v96, v97, v88, v89, v90, v91, v92, v93);
      v94 = *((_QWORD *)this + 688);
    }
    else
    {
      *(_DWORD *)(v96 + 20) = (_DWORD)v97;
    }
  }
  v104 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v96);
  if ((*v12 & 1) != 0)
    v105 = (_QWORD *)(v94 + 24);
  else
    v105 = (_QWORD *)(v94 + 8);
  v106 = *v105 + 32 * *(unsigned int *)((*v12 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v107 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v107 != *(_DWORD *)(v106 + 20))
  {
    if ((*(_QWORD *)(v106 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v106, v107, v98, v99, v100, v101, v102, v103);
    else
      *(_DWORD *)(v106 + 20) = (_DWORD)v107;
  }
  v113 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v106);
  v218 = v69;
  if (*(unsigned __int16 *)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v208 = **(_QWORD **)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    if (v208 < 0xFFFE000000000000)
    {
      if (v208 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        goto LABEL_33;
      v114 = 0.0;
      v214 = v104 | 0x200;
      v69 = JSC::DFG::Node::asNumber((JSC::DFG::Node *)(*v11 & 0xFF00FFFFFFFFFFFFLL));
    }
    else
    {
      v114 = 0.0;
      v214 = v104 | 0x100;
      v69 = **(_QWORD **)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v118 = 1;
    v104 = -1;
    goto LABEL_88;
  }
LABEL_33:
  v214 = v104;
  if (*(unsigned __int16 *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 2u)
  {
LABEL_34:
    v114 = 0.0;
    goto LABEL_35;
  }
  v209 = **(_QWORD **)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  if (v209 < 0xFFFE000000000000)
  {
    if (v209 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      goto LABEL_34;
    v113 = v113 | 0x200;
    v114 = JSC::DFG::Node::asNumber((JSC::DFG::Node *)(*v12 & 0xFF00FFFFFFFFFFFFLL));
  }
  else
  {
    v113 = v113 | 0x100;
    *(_QWORD *)&v114 = **(_QWORD **)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  }
LABEL_35:
  v243 = this;
  std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v239, (uint64_t *)&v243, v11, v108, v109, v110, v111, v112);
  v117 = v242;
  if (!v242)
    goto LABEL_104;
  v104 = v241;
  if (v241 == 255)
  {
    v104 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v239, v240, v115, v108, v109, v110, v111, v112);
    v241 = v104;
  }
  v118 = 0;
  v69 = 0;
  if (v113 <= 0xFF)
  {
LABEL_88:
    v213 = v118;
    v243 = this;
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)&v235, (uint64_t *)&v243, (uint64_t *)v12, v108, v109, v110, v111, v112);
    v117 = v238;
    if (v238)
    {
      v119 = v237;
      if (v237 == 255)
      {
        v119 = JSC::DFG::SpeculativeJIT::fillJSValue(v235, v236, v115, v108, v109, v110, v111, v112);
        v212 = 0;
        v237 = v119;
      }
      else
      {
        v212 = 0;
      }
      goto LABEL_40;
    }
LABEL_104:
    __break(1u);
LABEL_105:
    if (v116 != 348)
    {
      v147 = *(uint64_t **)(v117 + 72);
LABEL_48:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *v147, v69, v108, v109, v110, v111, v112);
      v119 = LOBYTE(v114);
      goto LABEL_49;
    }
LABEL_46:
    v147 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
    goto LABEL_48;
  }
  v213 = 0;
  v119 = -1;
  v212 = 1;
LABEL_40:
  LOWORD(v243) = v214;
  *(_DWORD *)((char *)&v243 + 2) = v69;
  HIWORD(v243) = WORD2(v69);
  *(_WORD *)v244 = HIWORD(v69);
  *(_WORD *)&v244[2] = v113;
  *(double *)&v244[4] = v114;
  v114 = v219;
  v245 = LOBYTE(v219);
  v246 = v104;
  v247 = v119;
  v248 = v218;
  v249 = v217;
  v250 = v215;
  v251 = v216;
  v252 = 0;
  v113 = (unint64_t)v254;
  v253 = 0;
  v254[0] = &v255;
  v254[1] = 2;
  v256[0] = v257;
  v256[1] = 2;
  JSC::JITDivGenerator::generateFastPath((JSC::JITDivGenerator *)&v243, this, v115, v108, v109, v110, v111, v112);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v120, v121, v122, v123, v124, v125, v126, &v220);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v127, v128, v129, v130, v131, v132);
  if (*((_BYTE *)this + 328))
    v139 = 69;
  else
    v139 = 65;
  v221[0] = v220;
  v221[1] = 0;
  v222 = v139;
  v223 = 15;
  v224 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v254, v221, v133, v134, v135, v136, v137, v138);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v256, (uint64_t)this, v140, v141, v142, v143, v144, v145);
  v69 = SLOBYTE(v219);
  if (v213)
  {
    v206 = *(unsigned __int16 *)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v206 == 355 || v206 == 348)
    {
      v207 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v207 = *(uint64_t **)((*v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *v207, SLOBYTE(v219), v108, v109, v110, v111, v112);
    v104 = LOBYTE(v219);
  }
  if (v212)
  {
    v117 = *v12 & 0xFF00FFFFFFFFFFFFLL;
    v116 = *(unsigned __int16 *)(v117 + 0x12);
    if (v116 == 355)
      goto LABEL_46;
    goto LABEL_105;
  }
LABEL_49:
  v148 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v146, v108, v109, v110, v111, v112);
  JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v220, (uint64_t)this, (uint64_t)operationValueDiv, *(JSC::AssemblerBuffer **)&v114, v148, v149, v104, v119);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)v113, (uint64_t)this, v150, v151, v152, v153, v154, v155);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v69, (uint64_t)a2, 16, 0, v156, v157, v158);
  JSC::JITDivGenerator::~JITDivGenerator((JSC::JITDivGenerator *)&v243, v159, v160, v161, v162, v163, v164, v165);
  if (v225)
  {
    v166 = v226;
    if (v226 != -1)
    {
      if (v226 > 15)
        v166 = -1;
      --*(_DWORD *)(v225 + 12 * v166 + 4784);
    }
  }
  if (v227)
  {
    v167 = (char)v228;
    if ((char)v228 != -1)
    {
      if ((char)v228 > 15)
        v167 = -1;
      --*(_DWORD *)(v227 + 12 * v167 + 4784);
    }
  }
  if (v229)
  {
    v168 = v229 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v230];
    --*(_DWORD *)(v168 + 4976);
  }
  if (v231)
  {
    v169 = v231 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v232];
    --*(_DWORD *)(v169 + 4976);
  }
  if (v233)
  {
    v170 = v233 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v234];
    --*(_DWORD *)(v170 + 4976);
  }
  if (v238 && (v236 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v171 = v237;
    if (v237 > 15)
      v171 = -1;
    --*(_DWORD *)(v235 + 12 * v171 + 4784);
  }
  if (v242 && (v240 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v58 = v239;
    v59 = (char)v241;
    goto LABEL_17;
  }
}

void JSC::JITDivGenerator::~JITDivGenerator(JSC::JITDivGenerator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JITDivGenerator *v9;
  JSC::JITDivGenerator *v11;

  v9 = (JSC::JITDivGenerator *)*((_QWORD *)this + 10);
  if ((JSC::JITDivGenerator *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (JSC::JITDivGenerator *)*((_QWORD *)this + 5);
  if ((JSC::JITDivGenerator *)((char *)this + 56) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithDiv(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *result;
  int v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86[3];
  int v87[3];
  int v88[3];
  int v89[3];
  unsigned int v90[3];
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  JSC::DFG::SpeculativeJIT *v95;
  unint64_t v96;
  char v97;
  _BYTE v98[7];
  JSC::DFG::SpeculativeJIT *v99;
  unint64_t v100;
  char v101;
  _BYTE v102[7];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 49)
  {
    v99 = this;
    v100 = v10;
    v101 = -1;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB3200);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      v101 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v13 = *((_QWORD *)a2 + 4);
    if (((v13 >> 50) & 0x3F) - 49 < 3)
    {
      v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v14 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB3208);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
      else
        v15 = -1;
      JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v95, (uint64_t)this, (uint64_t)&v99, a4, a5, a6, a7, a8);
      v23 = v101;
      if (v101 == 255)
        v23 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v99, v100, v17, v18, v19, v20, v21, v22);
      if (v15 == -1)
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v13, v17, v18, v19, v20, v21, v22);
      v24 = (char)v96;
      v25 = *((_DWORD *)this + 50);
      if (v25 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v16, v17, v18, v19, v20, v21, v22);
        v25 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v25) = (32 * v23) | (v15 << 16) | v24 | 0x1E601800;
      *((_DWORD *)this + 50) += 4;
      v26 = (char)v96;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v17, v18, v19, v20, v21, v22);
      v28 = *((_DWORD *)a2 + 12);
      v29 = (_DWORD *)((char *)this
                     + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v26]
                     + 4968);
      *v29 = v28;
      v29[1] = 6;
      v30 = ~v28;
      if (v30 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB3210);
      }
      v31 = *((_QWORD *)this + 499) + 24 * (int)v30;
      v32 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v31 = a2;
      *(_DWORD *)(v31 + 8) = v32;
      *(_BYTE *)(v31 + 17) = v26;
      *(_DWORD *)(v31 + 12) = 4;
      *(_BYTE *)(v31 + 16) = 0;
      if (v95)
      {
        v33 = (char *)v95 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v96];
        --*((_DWORD *)v33 + 1244);
      }
      v34 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v15] + 4968;
      --*((_DWORD *)v34 + 2);
      v35 = (char *)v99 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v23];
      --*((_DWORD *)v35 + 1244);
      return result;
    }
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x197BB31B8);
  }
  if ((_DWORD)v11 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197BB31E8);
  }
  v99 = this;
  v100 = v10;
  v101 = -1;
  v36 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v37 = *((unsigned int *)this + 1001);
  if (v36 >= v37)
  {
    __break(0xC471u);
    JUMPOUT(0x197BB3218);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v36 + 12))
  {
    v38 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v102, a4, a5, a6, a7, a8);
    v101 = v38;
    v37 = *((unsigned int *)this + 1001);
  }
  else
  {
    v38 = -1;
  }
  v39 = *((_QWORD *)a2 + 4);
  v95 = this;
  v96 = v39;
  v97 = -1;
  v40 = ~*(_DWORD *)((v39 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v40 >= v37)
  {
    __break(0xC471u);
    JUMPOUT(0x197BB3220);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v40 + 12))
  {
    v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v39, (uint64_t)v98, a4, a5, a6, a7, a8);
    v97 = v41;
    v38 = v101;
  }
  else
  {
    v41 = -1;
  }
  if (v38 == -1)
  {
    v38 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v99, v100, (uint64_t)v102, a4, a5, a6, a7, a8);
    v101 = v38;
    v41 = v97;
  }
  if (v41 == -1)
  {
    v41 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v95, v96, (uint64_t)v98, a4, a5, a6, a7, a8);
    v97 = v41;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v93, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v91, this, v42, v43, v44, v45, v46, v47);
  v56 = *((_DWORD *)a2 + 18);
  v57 = v38;
  if ((v56 - 3) <= 0xFFFFFFFD)
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v38, v51, v52, v53, v54, (uint64_t)v90, v55);
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 4, v41, v41, v58, v59, v60, v61, (uint64_t)v89);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v89);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v90, (uint64_t)this, v62, v63, v64, v65, v66, v67);
    v56 = *((_DWORD *)a2 + 18);
  }
  if (v56 != 1)
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v41, v51, v52, v53, v54, (uint64_t)v88, v55);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v88);
  }
  v68 = (unsigned __int16)(32 * (v38 & 0x1F)) | ((v41 & 0x1F) << 16) | v94 & 0x1F | 0x1AC00C00;
  v69 = *((_DWORD *)this + 50);
  if (v69 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v48, v49, v50, v51, v52, v53, v54);
    v69 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v69) = v68;
  *((_DWORD *)this + 50) += 4;
  if (*((_DWORD *)a2 + 18) != 1)
  {
    JSC::MacroAssemblerARM64::branchMul32((uint64_t)this, 6, v94, v41, v92, v52, v53, v54, (uint64_t)v87);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v87);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v92, v57, v70, v71, v72, v73, (uint64_t)v86);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v86);
  }
  v74 = v94;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v49, v50, v51, v52, v53, v54);
  v75 = *((_DWORD *)a2 + 12);
  v76 = ~v75;
  if (v76 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  v77 = *((_QWORD *)this + 499);
  if (v74 > 15)
    v78 = -1;
  else
    v78 = v74;
  v79 = (char *)this + 12 * v78;
  *((_DWORD *)v79 + 1194) = v75;
  *((_DWORD *)v79 + 1195) = 5;
  v80 = v77 + 24 * (int)v76;
  v81 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v80 = a2;
  *(_DWORD *)(v80 + 8) = v81;
  *(_BYTE *)(v80 + 17) = v74;
  *(_DWORD *)(v80 + 12) = 1;
  *(_BYTE *)(v80 + 16) = 0;
  if (v91)
  {
    v82 = v92;
    if (v92 != -1)
    {
      if (v92 > 15)
        v82 = -1;
      --*(_DWORD *)(v91 + 12 * v82 + 4784);
    }
  }
  if (v93)
  {
    v83 = v94;
    if (v94 != -1)
    {
      if (v94 > 15)
        v83 = -1;
      --*(_DWORD *)(v93 + 12 * v83 + 4784);
    }
  }
  v84 = v97;
  if (v97 > 15)
    v84 = -1;
  --*((_DWORD *)v95 + 3 * v84 + 1196);
  v85 = v101;
  if (v101 > 15)
    v85 = -1;
  --*((_DWORD *)v99 + 3 * v85 + 1196);
  return result;
}

void JSC::MacroAssemblerARM64::divDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E601800;
  a1[50] += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithFRound(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0xC4000000000000)
  {
    JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v60, (uint64_t)this, v10, a4, a5, a6, a7, a8);
    JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v58, (uint64_t)this, (uint64_t)&v60, v11, v12, v13, v14, v15);
    v22 = v62;
    if (v62 == 255)
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v60, v61, v16, v17, v18, v19, v20, v21);
      v62 = v22;
    }
    JSC::MacroAssemblerARM64::convertDoubleToFloat(this, (char)v22, (char)v59, v17, v18, v19, v20, v21);
    JSC::MacroAssemblerARM64::convertFloatToDouble(this, (char)v59, (char)v59, v23, v24, v25, v26, v27);
    result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, (char)v59, a2, 0, v28, v29, v30, v31);
    if (v58)
    {
      v33 = v58 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v59];
      --*(_DWORD *)(v33 + 4976);
    }
    v34 = v60 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v62];
    --*(_DWORD *)(v34 + 4976);
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v60, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    v42 = v62;
    if (v62 == 255)
    {
      v42 = JSC::DFG::SpeculativeJIT::fillJSValue(v60, v61, v36, v37, v38, v39, v40, v41);
      v62 = v42;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v35, v36, v37, v38, v39, v40, v41);
    ++*((_DWORD *)this + 1244);
    v49 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v43, v44, v45, v46, v47, v48);
    JSC::DFG::SpeculativeJIT::callOperation<double (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::FPRegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v58, (char *)this, (uint64_t)operationArithFRound, v49, v50, v42, v51, v52);
    result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, 0, a2, 0, v53, v54, v55, v56);
    --*((_DWORD *)this + 1244);
    if ((v61 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v57 = (char)v62;
      if ((char)v62 > 15)
        v57 = -1;
      --*(_DWORD *)(v60 + 12 * v57 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileValueMod(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  JSC::DFG::Node *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::DFG::Node *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (!(_DWORD)v11)
  {
LABEL_2:
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v93, (uint64_t)this, v10, 1, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v90, (uint64_t)this, *((_QWORD *)a2 + 4), 1, v12, v13, v14, v15);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v16, *((_QWORD *)a2 + 3), v17, v18, v19, v20, v21);
    JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v22, *((_QWORD *)a2 + 4), v23, v24, v25, v26, v27);
    v35 = v95;
    if (v95 == 255)
    {
      v35 = JSC::DFG::SpeculativeJIT::fillJSValue(v93, v94, v29, v30, v31, v32, v33, v34);
      v95 = v35;
    }
    v36 = v92;
    if (v92 == 255)
    {
      v36 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v29, v30, v31, v32, v33, v34);
      v92 = v36;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v28, v29, v30, v31, v32, v33, v34);
    ++*((_DWORD *)this + 1196);
    v43 = *((unsigned int *)this + 1194);
    if ((_DWORD)v43 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v43, (uint64_t)v37, v38, v39, v40, v41, v42);
    }
    v44 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v37, v38, v39, v40, v41, v42);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v89, (unsigned __int8 *)this, (uint64_t)operationValueMod, 0, v44, v45, v35, v36);
    goto LABEL_9;
  }
  if ((_DWORD)v11 != 27)
  {
    if ((_DWORD)v11 != 26 && (_DWORD)v11 != 28)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1B6B, "void JSC::DFG::SpeculativeJIT::compileValueMod(Node *)", "node->binaryUseKind() == UntypedUse || node->binaryUseKind() == AnyBigIntUse || node->binaryUseKind() == BigInt32Use");
      __break(0xC471u);
      JUMPOUT(0x197BB3720);
    }
    goto LABEL_2;
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v93, (uint64_t)this, v10, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v90, (uint64_t)this, *((_QWORD *)a2 + 4), v52, v53, v54, v55, v56);
  v63 = v95;
  if (v95 == 255)
  {
    v63 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v93, v94, v57, v58, v59, v60, v61, v62);
    v95 = v63;
  }
  v64 = v92;
  if (v92 == 255)
  {
    v64 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v90, v91, v57, v58, v59, v60, v61, v62);
    v92 = v64;
  }
  v65 = (char)v63;
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v65, v58, v59, v60, v61, v62);
  v66 = (char)v64;
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v66, v67, v68, v69, v70, v71);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v72, v73, v74, v75, v76, v77, v78);
  ++*((_DWORD *)this + 1196);
  v85 = *((unsigned int *)this + 1194);
  if ((_DWORD)v85 != 0x3FFFFFFF)
  {
    this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v85, (uint64_t)v79, v80, v81, v82, v83, v84);
  }
  v86 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v79, v80, v81, v82, v83, v84);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v89, (unsigned __int8 *)this, (uint64_t)operationModHeapBigInt, 0, v86, v87, v65, v66);
LABEL_9:
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v46, v47, v48);
  --*((_DWORD *)this + 1196);
  if ((v91 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v50 = (char)v92;
    if ((char)v92 > 15)
      v50 = -1;
    --*(_DWORD *)(v90 + 12 * v50 + 4784);
  }
  if ((v94 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v51 = (char)v95;
    if ((char)v95 > 15)
      v51 = -1;
    --*(_DWORD *)(v93 + 12 * v51 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileArithMod(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  int v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  WTF *v92;
  int v93;
  char v94;
  char *v95;
  unint64_t v96;
  uint8x8_t v97;
  BOOL v98;
  char v100;
  unsigned int v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  char v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int8x8_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  char *v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  char v210;
  int v211[3];
  int v212[3];
  _DWORD v213[2];
  char v214;
  __int16 v215;
  char v216;
  unsigned int v217[3];
  int v218[3];
  WTF *v219;
  uint64_t v220;
  _BYTE v221[24];
  uint64_t v222;
  char v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  char v227;
  JSC::DFG::SpeculativeJIT *v228;
  unint64_t v229;
  char v230;
  _BYTE v231[7];
  int v232[3];
  int v233[3];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v11 == 49)
    {
      v156 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v156 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB43B4);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v156 + 12))
        v157 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      else
        v157 = -1;
      v158 = *((_QWORD *)a2 + 4);
      if (((v158 >> 50) & 0x3F) - 49 >= 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB428CLL);
      }
      v159 = ~*(_DWORD *)((v158 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v159 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB43BCLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v159 + 12))
        v160 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
      else
        v160 = -1;
      if (v157 == -1)
        v157 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      if (v160 == -1)
        v160 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v158, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      ++*((_DWORD *)this + 1244);
      JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double,double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((int *)&v219, this, (uint64_t)fmodDouble, v157, v160, v161, v162, v163);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v164, v165, v166, v167, v168, v169);
      v170 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 1242) = v170;
      *((_DWORD *)this + 1243) = 6;
      v171 = ~v170;
      if (v171 < *((unsigned int *)this + 1001))
      {
        v172 = *((_QWORD *)this + 499) + 24 * (int)v171;
        v173 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v172 = a2;
        *(_DWORD *)(v172 + 8) = v173;
        *(_BYTE *)(v172 + 12) = 4;
        *(_DWORD *)(v172 + 13) = 0;
        *(_BYTE *)(v172 + 17) = 0;
        --*((_DWORD *)this + 1244);
        v174 = (char *)this
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v160]
             + 4968;
        --*((_DWORD *)v174 + 2);
        v95 = (char *)this
            + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v157]
            + 4976;
        goto LABEL_58;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x197BB41F8);
  }
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB4374);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v14 = v13;
  }
  else
  {
    v14 = -1;
  }
  v15 = *((_QWORD *)a2 + 4);
  if (*(unsigned __int16 *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u)
  {
    v96 = **(_QWORD **)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    v97 = (uint8x8_t)vcnt_s8((int8x8_t)v96);
    v97.i16[0] = vaddlv_u8(v97);
    v98 = v96 < 0xFFFE000000000000 || (int)v96 < 2;
    if (!v98 && v97.i32[0] == 1)
    {
      if (v96 >= 0x10000)
      {
        v101 = WORD1(v96);
        v100 = 16;
      }
      else
      {
        v100 = 0;
        v101 = v96;
      }
      if (v101 >= 0x100)
      {
        v101 >>= 8;
        v100 |= 8u;
      }
      if (v101 >= 0x10)
      {
        v101 >>= 4;
        v100 += 4;
      }
      if (v101 < 4)
      {
        v102 = v100;
      }
      else
      {
        v101 >>= 2;
        v102 = v100 + 2;
      }
      if (v101 <= 1)
        v103 = 0;
      else
        v103 = -1;
      if (v14 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        v14 = v104;
      }
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v219, this, a3, a4, a5, a6, a7, a8);
      v112 = v220;
      v113 = (char)v220;
      v210 = v14;
      if (v220 == v14)
      {
LABEL_90:
        v119 = *((_DWORD *)this + 50);
        if (v119 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v105, v106, v107, v108, v109, v110, v111);
          v119 = *((_DWORD *)this + 50);
        }
        v120 = v103 - v102;
        v121 = v112 & 0x1F;
        *(_DWORD *)(*((_QWORD *)this + 7) + v119) = v121 | (32 * v112) | 0x131F7C00;
        v122 = *((_DWORD *)this + 50);
        v123 = v122 + 4;
        *((_DWORD *)this + 50) = v122 + 4;
        if ((v122 + 8) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v105, v106, v107, v108, v109, v110, v111);
          v123 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v123) = (32 * v112) & 0xFFE0FFFF | ((v120 & 0x1F) << 16) | v121 | 0x53007C00;
        v124 = *((_DWORD *)this + 50);
        v125 = v124 + 4;
        *((_DWORD *)this + 50) = v124 + 4;
        v57 = v14;
        if (v14 == 31)
        {
          v208 = v113 | (v121 << 16) | 0xB2063E0;
        }
        else
        {
          v126 = (v14 & 0x1F) << 16;
          if ((_DWORD)v113 != 31)
          {
            v127 = v126 | (32 * v121) | v121 | 0xB000000;
            if ((v124 + 8) > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v105, v106, v107, v108, v109, v110, v111);
              v125 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v125) = v127;
            *((_DWORD *)this + 50) += 4;
LABEL_99:
            JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)-(int)v96, v113, v113);
            if ((_DWORD)v113 == 31)
            {
              v206 = *((_DWORD *)this + 50);
              if (v206 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v128, v129, v130, v131, v132, v133, v134);
                v206 = *((_DWORD *)this + 50);
              }
              v57 = v210;
              *(_DWORD *)(*((_QWORD *)this + 7) + v206) = 1262446591;
              *((_DWORD *)this + 50) += 4;
              if (v210 != 31)
              {
                v207 = ((v210 & 0x1F) << 16) | 0xB2063FFu;
LABEL_145:
                JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v207, v129, v130, v131, v132, v133, v134);
                goto LABEL_106;
              }
            }
            else
            {
              v135 = *((_DWORD *)this + 50);
              if (v135 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v128, v129, v130, v131, v132, v133, v134);
                v135 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v135) = v121 | (v121 << 16) | 0x4B0003E0;
              v136 = *((_DWORD *)this + 50);
              v137 = v136 + 4;
              *((_DWORD *)this + 50) = v136 + 4;
              if (v210 != 31)
              {
                if ((v136 + 8) > *((_DWORD *)this + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v128, v129, v130, v131, v132, v133, v134);
                  v137 = *((_DWORD *)this + 50);
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v137) = ((v210 & 0x1F) << 16) | (32 * v121) | v121 | 0xB000000;
                *((_DWORD *)this + 50) += 4;
LABEL_106:
                if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
                {
                  JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 5, v57, v57, v131, v132, v133, v134, (uint64_t)&v228);
                  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v113, v138, v139, v140, v141, (uint64_t)v232, v142);
                  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0xAuLL, (JSC::DFG::Node *)0xFF80000000, 0, v232);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v228, (uint64_t)this, v143, v144, v145, v146, v147, v148);
                }
                JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v129, v130, v131, v132, v133, v134);
                v149 = *((_DWORD *)a2 + 12);
                v150 = ~v149;
                if (v150 >= *((unsigned int *)this + 1001))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197BB43ACLL);
                }
                v151 = *((_QWORD *)this + 499);
                if ((int)v113 > 15)
                  v152 = -1;
                else
                  v152 = v113;
                v153 = (char *)this + 12 * v152;
                *((_DWORD *)v153 + 1194) = v149;
                *((_DWORD *)v153 + 1195) = 5;
                v154 = v151 + 24 * (int)v150;
                v155 = *((_DWORD *)a2 + 13);
                *(_QWORD *)v154 = a2;
                *(_DWORD *)(v154 + 8) = v155;
                *(_BYTE *)(v154 + 17) = v113;
                *(_DWORD *)(v154 + 12) = 1;
                *(_BYTE *)(v154 + 16) = 0;
                v92 = v219;
                if (!v219)
                  goto LABEL_54;
                v93 = (char)v220;
                if ((char)v220 == -1)
                  goto LABEL_54;
                goto LABEL_51;
              }
            }
            v207 = v113 | (v121 << 16) | 0xB2063E0;
            goto LABEL_145;
          }
          v208 = v126 | 0xB2063FFu;
        }
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v208, v106, v107, v108, v109, v110, v111);
        goto LABEL_99;
      }
      v209 = v103;
      if (v14 == 63)
      {
        if ((_DWORD)v113 != 31)
        {
          v116 = v220 & 0x1F | 0xD2800000;
          goto LABEL_87;
        }
      }
      else if (v14 != 31 && (_DWORD)v113 != 31)
      {
        v114 = v220 | ((v14 & 0x1F) << 16);
        v115 = -1442839584;
LABEL_86:
        v116 = v114 | v115;
LABEL_87:
        v118 = (unsigned int *)((char *)this + 200);
        v117 = *((_DWORD *)this + 50);
        if (v117 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v105, v106, v107, v108, v109, v110, v111);
          v117 = *v118;
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v117) = v116;
        *v118 += 4;
        v103 = v209;
        goto LABEL_90;
      }
      v114 = v113 | (32 * v14);
      v115 = -1862270976;
      goto LABEL_86;
    }
  }
  v228 = this;
  v229 = v15;
  v230 = -1;
  v16 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB437CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v230 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v15, (uint64_t)v231, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v226, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v224, this, v17, v18, v19, v20, v21, v22);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v222, this, v23, v24, v25, v26, v27, v28);
  if (v14 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, v29, v30, v31, v32, v33, v34);
    v14 = v35;
  }
  v36 = v230;
  if (v230 == 255)
  {
    v36 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v228, v229, (uint64_t)v231, v30, v31, v32, v33, v34);
    v230 = v36;
  }
  v37 = v225;
  v38 = v225;
  v39 = v223;
  v219 = (WTF *)v221;
  v220 = 2;
  if (*((_DWORD *)a2 + 18) == 1)
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v36, v31, v32, v33, v34, (uint64_t)v217, (int8x8_t)2);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, 0, v38, v175, v176, v177, v178, v179);
    JSC::ARM64Assembler::label((_DWORD *)this + 8, v180, v181, v182, v183, v184, v185, v186, v233);
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v187, v188, v189, v190, v191, v192);
    if (*((_BYTE *)this + 328))
      v199 = 69;
    else
      v199 = 65;
    v213[0] = v233[0];
    v213[1] = 0;
    v214 = v199;
    v215 = 15;
    v216 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v219, v213, v193, v194, v195, v196, v197, v198);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v217, (uint64_t)this, v200, v201, v202, v203, v204, v205);
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v36, v31, v32, v33, v34, (uint64_t)v218, (int8x8_t)2);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v218);
  }
  v47 = *((_DWORD *)this + 50);
  if (v47 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v40, v41, v42, v43, v44, v45, v46);
    v47 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v47) = (unsigned __int16)(32 * (v14 & 0x1F)) | ((v36 & 0x1F) << 16) | v37 & 0x1F | 0x1AC00C00;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branchMul32((uint64_t)this, 6, v38, v36, v39, v44, v45, v46, (uint64_t)v212);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v212);
  v55 = (v39 & 0x1F) << 16;
  v56 = v14;
  v57 = v14;
  if ((_DWORD)v38 == 31 || v14 == 31)
  {
    v58 = v38 | (32 * v56) | v55 | 0x4B206000;
    v59 = *((_DWORD *)this + 50);
    if (v59 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v48, v49, v50, v51, v52, v53, v54);
      v59 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v59) = v58;
    *((_DWORD *)this + 50) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (32 * (v14 & 0x1F)) | v37 & 0x1F | v55 | 0x4B000000u, v49, v50, v51, v52, v53, v54);
  }
  if ((*((_DWORD *)a2 + 18) - 3) <= 0xFFFFFFFD)
  {
    JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 5, v56, v56, v51, v52, v53, v54, (uint64_t)v217);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v38, v60, v61, v62, v63, (uint64_t)v211, v64);
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v211);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v217, (uint64_t)this, v65, v66, v67, v68, v69, v70);
  }
  if (HIDWORD(v220))
  {
    v71 = 0;
    v72 = 0;
    v73 = 12 * HIDWORD(v220);
    do
    {
      if (v72 >= HIDWORD(v220))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB435CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v219 + v71), (uint64_t)this, v49, v50, v51, v52, v53, v54);
      ++v72;
      v71 += 12;
    }
    while (v73 != v71);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v49, v50, v51, v52, v53, v54);
  v81 = *((_DWORD *)a2 + 12);
  v82 = ~v81;
  if (v82 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB4384);
  }
  v83 = *((_QWORD *)this + 499);
  if ((int)v38 > 15)
    v84 = -1;
  else
    v84 = v38;
  v85 = (char *)this + 12 * v84;
  *((_DWORD *)v85 + 1194) = v81;
  *((_DWORD *)v85 + 1195) = 5;
  v86 = v83 + 24 * (int)v82;
  v87 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v86 = a2;
  *(_DWORD *)(v86 + 8) = v87;
  *(_BYTE *)(v86 + 17) = v38;
  *(_DWORD *)(v86 + 12) = 1;
  *(_BYTE *)(v86 + 16) = 0;
  v88 = v219;
  if (v221 != (_BYTE *)v219 && v219)
  {
    v219 = 0;
    LODWORD(v220) = 0;
    WTF::fastFree((unint64_t)v88, v74, v75, v76, v77, v78, v79, v80);
  }
  if (v222)
  {
    v89 = v223;
    if (v223 != -1)
    {
      if (v223 > 15)
        v89 = -1;
      --*(_DWORD *)(v222 + 12 * v89 + 4784);
    }
  }
  if (v224)
  {
    v90 = v225;
    if (v225 != -1)
    {
      if (v225 > 15)
        v90 = -1;
      --*(_DWORD *)(v224 + 12 * v90 + 4784);
    }
  }
  if (v226)
  {
    v91 = v227;
    if (v227 != -1)
    {
      if (v227 > 15)
        v91 = -1;
      --*(_DWORD *)(v226 + 12 * v91 + 4784);
    }
  }
  v92 = v228;
  v93 = v230;
LABEL_51:
  if (v93 > 15)
    v93 = -1;
  --*((_DWORD *)v92 + 3 * v93 + 1196);
LABEL_54:
  if (v57 > 15)
    v94 = -1;
  else
    v94 = v57;
  v95 = (char *)this + 12 * v94 + 4784;
LABEL_58:
  --*(_DWORD *)v95;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double,double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>(int *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  char v26;
  char v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  void *__dst;
  int v34;
  unsigned int v35;
  _WORD v36[4];

  __dst = v36;
  v34 = 2;
  if ((_DWORD)a4)
  {
    v36[0] = a4;
    v11 = 1;
    v35 = 1;
    if ((_DWORD)a5 == 1)
      goto LABEL_6;
    goto LABEL_5;
  }
  if ((_DWORD)a5 != 1)
  {
    v11 = 0;
LABEL_5:
    v36[v11++] = a5 | 0x100;
    v35 = v11;
LABEL_6:
    v12 = 0;
    v13 = 0;
    while (((*((_BYTE *)__dst + v12 + 1) + 32) & 0x40) == 0)
    {
      v13 |= 1 << (*((_BYTE *)__dst + v12 + 1) + 32);
      v12 += 2;
      if (2 * v11 == v12)
      {
        v14 = 0;
        while (1)
        {
          v15 = (*((_BYTE *)__dst + v14) + 32) & 0x7F;
          if (v15 >= 0x40)
            goto LABEL_38;
          v13 &= ~(1 << v15);
          v14 += 2;
          if (2 * v11 == v14)
          {
            v16 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
            v16.i16[0] = vaddlv_u8(v16);
            v17 = v16.i32[0];
            v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v13));
            v18.i16[0] = vaddlv_u8(v18);
            if (v18.i32[0] + v17)
            {
              v19 = 0;
              if (v11 <= 1)
                v20 = 1;
              else
                v20 = v11;
              v21 = 2 * v20;
              while (1)
              {
                v22 = *((char *)__dst + v19 + 1);
                v23 = (*((_BYTE *)__dst + v19 + 1) + 32) & 0x7F;
                if (v23 >= 0x40)
                  goto LABEL_38;
                if (((v13 >> v23) & 1) != 0)
                {
                  v24 = *((char *)__dst + v19);
                  v25 = a2[50];
                  if (v25 + 4 > a2[48])
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v25 = a2[50];
                  }
                  *(_DWORD *)(*((_QWORD *)a2 + 7) + v25) = v22 | (32 * v24) | 0x1E604000;
                  a2[50] += 4;
                  memmove((char *)__dst + v19, (char *)__dst + v19 + 2, 2 * v35 - v19 - 2);
                  v11 = --v35;
LABEL_24:
                  if (!v11)
                    goto LABEL_33;
                  goto LABEL_6;
                }
                v19 += 2;
                if (v21 == v19)
                  goto LABEL_24;
              }
            }
            v26 = *(_BYTE *)__dst;
            v27 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swapDouble(a2, *(char *)__dst, v27, a4, a5, a6, a7, a8);
            memmove(__dst, (char *)__dst + 2, 2 * v35 - 2);
            v28 = --v35;
            if (v35)
            {
              v29 = __dst;
              v30 = 2 * v28;
              while (*v29 != v27)
              {
                v29 += 2;
                v30 -= 2;
                if (!v30)
                  goto LABEL_32;
              }
              *v29 = v26;
            }
LABEL_32:
            WTF::Vector<std::pair<JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::FPRegisterID,2u>(std::array<JSC::ARM64Registers::FPRegisterID,2u>,std::array<JSC::ARM64Registers::FPRegisterID,2u>)::{lambda(JSC::ARM64Registers::FPRegisterID const&)#1}>((unsigned __int8 **)&__dst);
            v11 = v35;
            if (!v35)
            {
LABEL_33:
              v31 = __dst;
              if (v36 != __dst && __dst)
              {
                __dst = 0;
                v34 = 0;
                WTF::fastFree((unint64_t)v31, a2, a3, a4, a5, a6, a7, a8);
              }
              goto LABEL_34;
            }
            goto LABEL_6;
          }
        }
      }
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_34:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, a3, a3, a4, a5, a6, a7, a8, a1);
  v32 = a2[50];
  if (v32 + 4 > a2[48])
  {
LABEL_39:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v32 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v32) = 509624320;
  a2[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::JITCompiler *v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  JSC::DFG::Node *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t (*v114)(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  unint64_t (*v115)(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::DFG::Node **v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  char v142;
  JSC::DFG::JITCompiler *v143;

  v8 = a2;
  v143 = a2;
  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1CEE, "void JSC::DFG::SpeculativeJIT::compileArithRounding(Node *)", "node->child1().useKind() == UntypedUse");
      __break(0xC471u);
      JUMPOUT(0x197BB4F98);
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v138, (uint64_t)this, v10, 0, a5, a6, a7, a8);
    v105 = v140;
    if (v140 == 255)
    {
      v105 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v138, v139, v99, v100, v101, v102, v103, v104);
      v140 = v105;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v98, v99, v100, v101, v102, v103, v104);
    ++*((_DWORD *)this + 1196);
    v112 = *((unsigned int *)this + 1194);
    if ((_DWORD)v112 != 0x3FFFFFFF)
    {
      this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v112, (uint64_t)v106, v107, v108, v109, v110, v111);
    }
    v113 = *((unsigned __int16 *)v143 + 9);
    v114 = operationArithFloor;
    v115 = (unint64_t (*)(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))operationArithTrunc;
    if (v113 == 78)
      v115 = operationArithCeil;
    if (v113 != 77)
      v114 = v115;
    if (v113 == 76)
      v116 = (unsigned __int8 *)operationArithRound;
    else
      v116 = (unsigned __int8 *)v114;
    v117 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, v143, v106, v107, v108, v109, v110, v111);
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)this, v116, 0, v117, v118, v105, v119, v120, (int *)&v141);
    JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)v143, 16, 0, v121, v122, v123);
    --*((_DWORD *)this + 1196);
    if ((v139 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v124 = (char)v140;
      if ((char)v140 > 15)
        v124 = -1;
      --*((_DWORD *)v138 + 3 * v124 + 1196);
    }
    return;
  }
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB4F60);
  }
  if (!*((_BYTE *)this[499] + 24 * (int)v12 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v14 == -1))
  {
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v138 = &v143;
  v139 = (uint64_t)this;
  switch(*((_WORD *)v8 + 9))
  {
    case 'L':
      v29 = 0;
      v30 = (char *)(this + 621);
      v31 = this + 622;
      v32 = 0x17u;
      v33 = -1;
      while (2)
      {
        if (*v31)
          goto LABEL_29;
        v34 = *(v31 - 1);
        if (v34 != -1)
        {
          if (v34 < v33)
          {
            v32 = v29;
            v33 = *(v31 - 1);
          }
LABEL_29:
          ++v29;
          v31 += 3;
          if (v29 == 23)
          {
            v29 = v32;
            v35 = &v30[12 * v32];
            v36 = *(_DWORD *)v35;
            *(_QWORD *)v35 = 0xFFFFFFFF3FFFFFFFLL;
            v31 = v35 + 8;
            goto LABEL_32;
          }
          continue;
        }
        break;
      }
      v36 = *(v31 - 2);
      *((_QWORD *)v31 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_32:
      *v31 = 1;
      v37 = JSC::FPRInfo::toRegister::registerForIndex[v29];
      if (v36 != 0x3FFFFFFF)
      {
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v36, a3, a4, a5, a6, a7, a8);
        v8 = v143;
      }
      if (!*((_DWORD *)v8 + 18))
      {
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::halfConstant, v37, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::addDouble(this, v14, v37, v88, v89, v90, v91, v92);
        JSC::MacroAssemblerARM64::floorDouble(this, v37, v37, v93, v94, v95, v96, v97);
        goto LABEL_60;
      }
      v38 = *((_DWORD *)this + 50);
      if (v38 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, a3, a4, a5, a6, a7, a8);
        v38 = *((_DWORD *)this + 50);
      }
      v39 = 0;
      *(_DWORD *)((char *)this[7] + v38) = v37 | (32 * v14) | 0x1E64C000;
      *((_DWORD *)this + 50) += 4;
      v40 = this + 622;
      v41 = 0x17u;
      v42 = -1;
      while (2)
      {
        if (*v40)
          goto LABEL_42;
        v43 = *(v40 - 1);
        if (v43 != -1)
        {
          if (v43 < v42)
          {
            v41 = v39;
            v42 = *(v40 - 1);
          }
LABEL_42:
          ++v39;
          v40 += 3;
          if (v39 == 23)
          {
            v39 = v41;
            v44 = &v30[12 * v41];
            v45 = *(_DWORD *)v44;
            *(_QWORD *)v44 = 0xFFFFFFFF3FFFFFFFLL;
            v40 = v44 + 8;
            goto LABEL_45;
          }
          continue;
        }
        break;
      }
      v45 = *(v40 - 2);
      *((_QWORD *)v40 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_45:
      *v40 = 1;
      v46 = JSC::FPRInfo::toRegister::registerForIndex[v39];
      if (v45 != 0x3FFFFFFF)
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v45, a3, a4, a5, a6, a7, a8);
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB4E7CLL);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::halfConstant, (uint64_t)(this + 37), a4, a5, a6, a7, a8);
      v54 = *((_DWORD *)this + 50);
      if (v54 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v47, v48, v49, v50, v51, v52, v53);
        v54 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v54) = v46 | 0xFC7F6A20;
      v55 = *((_DWORD *)this + 50);
      v56 = v55 + 4;
      *((_DWORD *)this + 50) = v55 + 4;
      if ((v55 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v47, v48, v49, v50, v51, v52, v53);
        v56 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v56) = v46 | ((_DWORD)v37 << 16) | (32 * v46) | 0x1E602800;
      v57 = *((_DWORD *)this + 50);
      v58 = v57 + 4;
      *((_DWORD *)this + 50) = v57 + 4;
      if ((v57 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v47, v48, v49, v50, v51, v52, v53);
        v58 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v58) = (32 * v46) | ((_DWORD)v14 << 16) | 0x1E602000;
      *((_DWORD *)this + 50) += 4;
      JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 9, v48, v49, v50, v51, v52, v53, (uint64_t)&v141);
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB4ECCLL);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::oneConstant, (uint64_t)(this + 37), v59, v60, v61, v62, v63);
      v71 = *((_DWORD *)this + 50);
      if (v71 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v64, v65, v66, v67, v68, v69, v70);
        v71 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v71) = v46 | 0xFC7F6A20;
      v72 = *((_DWORD *)this + 50);
      v73 = v72 + 4;
      *((_DWORD *)this + 50) = v72 + 4;
      if ((v72 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v64, v65, v66, v67, v68, v69, v70);
        v73 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)((char *)this[7] + v73) = (32 * v37) | (v46 << 16) | v37 | 0x1E602800;
      *((_DWORD *)this + 50) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v141, (uint64_t)this, v65, v66, v67, v68, v69, v70);
      v80 = &v30[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v46]];
      --*((_DWORD *)v80 + 2);
LABEL_60:
      JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::$_0::operator()(&v138, v37, v74, v75, v76, v77, v78, v79);
      v27 = &v30[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v37]];
LABEL_21:
      --*((_DWORD *)v27 + 2);
LABEL_22:
      v28 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v14];
      --*((_DWORD *)v28 + 1244);
      return;
    case 'M':
      v15 = 0;
      v16 = (char *)(this + 621);
      v17 = this + 622;
      v18 = 0x17u;
      v19 = -1;
      while (1)
      {
        if (!*v17)
        {
          v20 = *(v17 - 1);
          if (v20 == -1)
          {
            v22 = *(v17 - 2);
            *((_QWORD *)v17 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_15:
            *v17 = 1;
            v23 = JSC::FPRInfo::toRegister::registerForIndex[v15];
            if (v22 != 0x3FFFFFFF)
              JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
            v24 = *((_DWORD *)this + 50);
            if (v24 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, a3, a4, a5, a6, a7, a8);
              v24 = *((_DWORD *)this + 50);
            }
            v25 = v23 | (32 * v14);
            v26 = 509949952;
LABEL_20:
            *(_DWORD *)((char *)this[7] + v24) = v25 | (v26 + 2048);
            *((_DWORD *)this + 50) += 4;
            JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::$_0::operator()(&v138, v23, a3, a4, a5, a6, a7, a8);
            v27 = &v16[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v23]];
            goto LABEL_21;
          }
          if (v20 < v19)
          {
            v18 = v15;
            v19 = *(v17 - 1);
          }
        }
        ++v15;
        v17 += 3;
        if (v15 == 23)
        {
          v15 = v18;
          v21 = &v16[12 * v18];
          v22 = *(_DWORD *)v21;
          *(_QWORD *)v21 = 0xFFFFFFFF3FFFFFFFLL;
          v17 = v21 + 8;
          goto LABEL_15;
        }
      }
    case 'N':
      v81 = 0;
      v16 = (char *)(this + 621);
      v82 = this + 622;
      v83 = 0x17u;
      v84 = -1;
      break;
    case 'O':
      JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v141, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
      v125 = v142;
      JSC::MacroAssemblerARM64::roundTowardZeroDouble(this, v14, v125, v126, v127, v128, v129, v130);
      JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::$_0::operator()(&v138, v125, v131, v132, v133, v134, v135, v136);
      if (v141)
      {
        v137 = v141 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v142];
        --*(_DWORD *)(v137 + 4976);
      }
      goto LABEL_22;
    default:
      __break(0xC471u);
      JUMPOUT(0x197BB4DE8);
  }
  while (1)
  {
    if (!*v82)
    {
      v85 = *(v82 - 1);
      if (v85 == -1)
      {
        v87 = *(v82 - 2);
        *((_QWORD *)v82 - 1) = 0xFFFFFFFF3FFFFFFFLL;
        goto LABEL_69;
      }
      if (v85 < v84)
      {
        v83 = v81;
        v84 = *(v82 - 1);
      }
    }
    ++v81;
    v82 += 3;
    if (v81 == 23)
    {
      v81 = v83;
      v86 = &v16[12 * v83];
      v87 = *(_DWORD *)v86;
      *(_QWORD *)v86 = 0xFFFFFFFF3FFFFFFFLL;
      v82 = v86 + 8;
LABEL_69:
      *v82 = 1;
      v23 = JSC::FPRInfo::toRegister::registerForIndex[v81];
      if (v87 != 0x3FFFFFFF)
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v87, a3, a4, a5, a6, a7, a8);
      v24 = *((_DWORD *)this + 50);
      if (v24 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v13, a3, a4, a5, a6, a7, a8);
        v24 = *((_DWORD *)this + 50);
      }
      v25 = v23 | (32 * v14);
      v26 = 509917184;
      goto LABEL_20;
    }
  }
}

void JSC::MacroAssemblerARM64::addDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = (v9 << 16) | (32 * v8) | v8 | 0x1E602800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::floorDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E654000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::branchDouble(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v9;
  int v10;
  unsigned int v14;

  v9 = a4;
  v10 = a3;
  v14 = a1[50];
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (32 * v10) | (v9 << 16) | 0x1E602000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)::$_0::operator()(JSC::DFG::Node ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::DFG::Node *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  JSC::DFG::Node *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WTF *v54;
  uint64_t v55;
  unsigned int v56;
  WTF *v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  char v61;

  v9 = (uint64_t)a1[1];
  v10 = **a1;
  if (*((_DWORD *)v10 + 18) > 1u)
  {
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1[1], v10, a3, a4, a5, a6, a7, a8);
    v26 = v9 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)a2];
    v27 = *((_DWORD *)v10 + 12);
    *(_DWORD *)(v26 + 4968) = v27;
    *(_DWORD *)(v26 + 4972) = 6;
    v28 = ~v27;
    if (v28 < *(unsigned int *)(v9 + 4004))
    {
      v29 = *(_QWORD *)(v9 + 3992) + 24 * (int)v28;
      v30 = *((_DWORD *)v10 + 13);
      *(_QWORD *)v29 = v10;
      *(_DWORD *)(v29 + 8) = v30;
      *(_BYTE *)(v29 + 17) = a2;
      *(_DWORD *)(v29 + 12) = 4;
      *(_BYTE *)(v29 + 16) = 0;
      return;
    }
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197BB53F0);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v60, (JSC::DFG::SpeculativeJIT *)v9, a3, a4, a5, a6, a7, a8);
  v18 = 0;
  v19 = v9 + 4968;
  v20 = (_DWORD *)(v9 + 4976);
  v21 = 0x17u;
  v22 = -1;
  while (*v20)
  {
LABEL_7:
    ++v18;
    v20 += 3;
    if (v18 == 23)
    {
      v18 = v21;
      v24 = (unsigned int *)(v19 + 12 * v21);
      v25 = *v24;
      *(_QWORD *)v24 = 0xFFFFFFFF3FFFFFFFLL;
      v20 = v24 + 2;
      goto LABEL_12;
    }
  }
  v23 = *(v20 - 1);
  if (v23 != -1)
  {
    if (v23 < v22)
    {
      v21 = v18;
      v22 = *(v20 - 1);
    }
    goto LABEL_7;
  }
  v25 = *(v20 - 2);
  *((_QWORD *)v20 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_12:
  *v20 = 1;
  v31 = JSC::FPRInfo::toRegister::registerForIndex[v18];
  if (v25 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(v9, v25, v12, v13, v14, v15, v16, v17);
  v32 = v61;
  v57 = (WTF *)v59;
  v58 = 2;
  JSC::MacroAssemblerARM64::branchConvertDoubleToInt32(v9, a2, v61, (uint64_t)&v57, v31, *((_DWORD *)**a1 + 18) == 1, v16, v17);
  JSC::DFG::SpeculativeJIT::speculationCheck(v9, 9uLL, (JSC::DFG::Node *)0xFF80000000, **a1, (unsigned int *)&v57);
  v33 = **a1;
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, v33, v34, v35, v36, v37, v38, v39);
  v47 = *((_DWORD *)v33 + 12);
  v48 = ~v47;
  if (v48 >= *(unsigned int *)(v9 + 4004))
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  v49 = *(_QWORD *)(v9 + 3992);
  if (v32 > 15)
    v50 = -1;
  else
    v50 = v32;
  v51 = v9 + 12 * v50;
  *(_DWORD *)(v51 + 4776) = v47;
  *(_DWORD *)(v51 + 4780) = 5;
  v52 = v49 + 24 * (int)v48;
  v53 = *((_DWORD *)v33 + 13);
  *(_QWORD *)v52 = v33;
  *(_DWORD *)(v52 + 8) = v53;
  *(_BYTE *)(v52 + 17) = v32;
  *(_DWORD *)(v52 + 12) = 1;
  *(_BYTE *)(v52 + 16) = 0;
  v54 = v57;
  if (v59 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    WTF::fastFree((unint64_t)v54, v40, v41, v42, v43, v44, v45, v46);
  }
  v55 = v19 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v31];
  --*(_DWORD *)(v55 + 8);
  if (v60)
  {
    v56 = v61;
    if (v61 != -1)
    {
      if (v61 > 15)
        v56 = -1;
      --*(_DWORD *)(v60 + 12 * v56 + 4784);
    }
  }
}

void JSC::MacroAssemblerARM64::roundTowardZeroDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E65C000;
  a1[50] += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArithSqrt(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *result;
  char *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  JSC::DFG::Node *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  JSC::DFG::SpeculativeJIT *v65;
  unint64_t v66;
  unsigned __int8 v67;

  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0xC4000000000000)
  {
    v65 = this;
    v66 = v10;
    v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v11 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
    }
    else
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
        || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, a3, a4, a5, a6, a7, a8),
            v67 = v13,
            (_DWORD)v13 == -1))
      {
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
        v67 = v13;
      }
      if (!(_BYTE)word_1ECF4C48C)
      {
        JSC::DFG::SpeculativeJIT::flushRegisters(v9, v12, a3, a4, a5, a6, a7, a8);
        ++*((_DWORD *)v9 + 1244);
        JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((int *)&v63, (unsigned __int8 *)v9, (uint64_t)sqrtDouble, v13, v55, v56, v57, v58);
        result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)v9, 0, a2, 0, v59, v60, v61, v62);
        --*((_DWORD *)v9 + 1244);
LABEL_15:
        v31 = (char *)v9 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v13];
        --*((_DWORD *)v31 + 1244);
        return result;
      }
      JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v63, (uint64_t)v9, (uint64_t)&v65, a4, a5, a6, a7, a8);
      LOBYTE(v13) = v67;
      if (v67 == 255)
        LOBYTE(v13) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v65, v66, v15, v16, v17, v18, v19, v20);
      v21 = v64;
      v22 = *((_DWORD *)v9 + 50);
      if (v22 + 4 > *((_DWORD *)v9 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v14, v15, v16, v17, v18, v19, v20);
        v22 = *((_DWORD *)v9 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v9 + 7) + v22) = v21 | (32 * (char)v13) | 0x1E61C000;
      *((_DWORD *)v9 + 50) += 4;
      v23 = v64;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v15, v16, v17, v18, v19, v20);
      v25 = (char *)v9 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v23];
      v26 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v25 + 1242) = v26;
      *((_DWORD *)v25 + 1243) = 6;
      v27 = ~v26;
      if (v27 < *((unsigned int *)v9 + 1001))
      {
        v28 = *((_QWORD *)v9 + 499) + 24 * (int)v27;
        v29 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v28 = a2;
        *(_DWORD *)(v28 + 8) = v29;
        *(_BYTE *)(v28 + 17) = v23;
        *(_DWORD *)(v28 + 12) = 4;
        *(_BYTE *)(v28 + 16) = 0;
        if (v63)
        {
          v30 = v63 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v64];
          --*(_DWORD *)(v30 + 4976);
        }
        v9 = v65;
        goto LABEL_15;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197BB5778);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v65, (uint64_t)this, v10, 0, a5, a6, a7, a8);
  v39 = v67;
  if (v67 == 255)
  {
    v39 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v65, v66, v33, v34, v35, v36, v37, v38);
    v67 = v39;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(v9, v32, v33, v34, v35, v36, v37, v38);
  ++*((_DWORD *)v9 + 1244);
  v46 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, a2, v40, v41, v42, v43, v44, v45);
  JSC::DFG::SpeculativeJIT::callOperation<double (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::FPRegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v63, (char *)v9, (uint64_t)operationArithSqrt, v46, v47, v39, v48, v49);
  result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)v9, 0, a2, 0, v50, v51, v52, v53);
  --*((_DWORD *)v9 + 1244);
  if ((v66 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v54 = (char)v67;
    if ((char)v67 > 15)
      v54 = -1;
    --*((_DWORD *)v65 + 3 * v54 + 1196);
  }
  return result;
}

void JSC::MacroAssemblerARM64::sqrtDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 | (32 * v9) | 0x1E61C000;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compileArithMinMax(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  char *v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  char *v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  signed __int8 v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  char v95;
  int *v96;
  int *v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  char v119;
  int *v120;
  int *v121;
  int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _DWORD *v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  WTF *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  uint64_t v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double (*v208)(double *, unsigned int);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  unsigned int v221;
  unsigned int *v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  unsigned int v238;
  char *v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  JSC::AssemblerBuffer *v268;
  uint64_t v269;
  _DWORD v270[2];
  char v271;
  __int16 v272;
  char v273;
  int v274;
  int v275;
  char v276;
  __int16 v277;
  char v278;
  unsigned int v279[3];
  int v280;
  int v281;
  char v282;
  __int16 v283;
  char v284;
  unsigned int v285[3];
  unsigned int v286[3];
  WTF *v287;
  uint64_t v288;
  _BYTE v289[24];
  uint64_t v290;
  char v291;
  JSC::DFG::SpeculativeJIT *v292;
  unint64_t v293;
  unsigned __int8 v294;
  int v295[3];

  v10 = *((_QWORD *)this + 495);
  v11 = (unint64_t *)((char *)a2 + 24);
  v12 = (_QWORD *)((char *)a2 + 24);
  if ((*((_DWORD *)a2 + 14) & 0x10) != 0)
  {
    if (*(_DWORD *)(v10 + 164) <= *v11)
    {
      __break(0xC471u);
      JUMPOUT(0x197BB697CLL);
    }
    v12 = (_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * *v11);
  }
  v13 = *((_DWORD *)a2 + 14) & 0x10;
  v14 = (*v12 >> 50) & 0x3FLL;
  if ((_DWORD)v14 == 1)
  {
    v15 = (unint64_t *)((char *)a2 + 32);
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v16 = (unint64_t *)((char *)a2 + 24);
      if (v13)
      {
        if (*(_DWORD *)(v10 + 164) <= *v11)
        {
          __break(0xC471u);
          JUMPOUT(0x197BB699CLL);
        }
        v16 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *v11);
      }
      v17 = *v16;
      v18 = *v16 & 0xFF00FFFFFFFFFFFFLL;
      v19 = ~*(_DWORD *)(v18 + 0x30);
      if (v19 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB6934);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
        v21 = v20;
        v10 = *((_QWORD *)this + 495);
        v13 = *((_DWORD *)a2 + 14) & 0x10;
      }
      else
      {
        v21 = -1;
      }
      if (v13)
      {
        v214 = *(_DWORD *)v11 + 1;
        if (*(_DWORD *)(v10 + 164) <= v214)
        {
          __break(0xC471u);
          JUMPOUT(0x197BB69A4);
        }
        v15 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * v214);
      }
      v22 = *v15;
      v23 = ~*(_DWORD *)((*v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v24 = *((unsigned int *)this + 1001);
      if (v23 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB693CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *v15, a3, a4, a5, a6, a7, a8);
        v26 = v25;
        v24 = *((unsigned int *)this + 1001);
      }
      else
      {
        v26 = -1;
      }
      v27 = ~*(_DWORD *)(v18 + 48);
      if (v27 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB6944);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v27 + 8) == 1)
      {
        if (v21 == -1)
        {
          JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
          v21 = v28;
        }
        if (v21 > 15)
          v29 = -1;
        else
          v29 = v21;
        ++*((_DWORD *)this + 3 * v29 + 1196);
        v30 = v21;
      }
      else
      {
        v30 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      if (v21 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
        v21 = v31;
      }
      if (v26 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
        v26 = v32;
      }
      if (v21 == v30)
        goto LABEL_33;
      if (v21 == 63)
      {
        if (v30 != 31)
        {
          v35 = v30 & 0x1F | 0xD2800000;
          goto LABEL_30;
        }
      }
      else if (v30 != 31 && v21 != 31)
      {
        v33 = v30 & 0x1F | ((v21 & 0x1F) << 16);
        v34 = -1442839584;
LABEL_29:
        v35 = v33 | v34;
LABEL_30:
        v37 = (unsigned int *)((char *)this + 200);
        v36 = *((_DWORD *)this + 50);
        if (v36 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v36 = *v37;
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v36) = v35;
        *v37 += 4;
LABEL_33:
        if (*((_WORD *)a2 + 9) == 71)
          v38 = 12;
        else
          v38 = 11;
        JSC::MacroAssemblerARM64::moveConditionally32(this, v38, v30, v26, v26, v30, a7, a8);
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v39, v40, v41, v42, v43, v44);
        v45 = *((_DWORD *)a2 + 12);
        v46 = ~v45;
        if (v46 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BB694CLL);
        }
        v47 = *((_QWORD *)this + 499);
        v48 = (char *)this + 4776;
        if (v30 > 15)
          v49 = -1;
        else
          v49 = v30;
        v50 = &v48[12 * v49];
        *(_DWORD *)v50 = v45;
        *((_DWORD *)v50 + 1) = 5;
        v51 = v47 + 24 * (int)v46;
        v52 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v51 = a2;
        *(_DWORD *)(v51 + 8) = v52;
        *(_BYTE *)(v51 + 17) = v30;
        *(_DWORD *)(v51 + 12) = 1;
        *(_BYTE *)(v51 + 16) = 0;
        if (v30 != -1)
          --*(_DWORD *)&v48[12 * v49 + 8];
        if (v26 > 15)
          v53 = -1;
        else
          v53 = v26;
        --*(_DWORD *)&v48[12 * v53 + 8];
        if (v21 > 15)
          v54 = -1;
        else
          v54 = v21;
        v55 = &v48[12 * v54];
LABEL_49:
        --*((_DWORD *)v55 + 2);
        return;
      }
      v33 = v30 | (32 * v21);
      v34 = -1862270976;
      goto LABEL_29;
    }
    v157 = (unint64_t *)((char *)a2 + 24);
    if (!v13)
    {
LABEL_129:
      v158 = *v157;
      v159 = ~*(_DWORD *)((*v157 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v159 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BB698CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v159 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v158, a3, a4, a5, a6, a7, a8);
        v161 = v160;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v287, this, v162, v163, v164, v165, v166, v167);
        if (v161 != -1)
          goto LABEL_164;
      }
      else
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v287, this, a3, a4, a5, a6, a7, a8);
      }
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v158, v169, v170, v171, v172, v173, v174);
      v161 = v216;
LABEL_164:
      v217 = (char)v288;
      if (v288 == v161)
      {
LABEL_173:
        if ((*(_DWORD *)v15 & 0xFFFFFFFE) != 0)
        {
          v223 = 1;
          do
          {
            v224 = v15;
            if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
            {
              v232 = *((_QWORD *)this + 495);
              v233 = v223 + *v11;
              if (*(_DWORD *)(v232 + 164) <= v233)
              {
                __break(0xC471u);
                JUMPOUT(0x197BB69ACLL);
              }
              v224 = (unint64_t *)(*(_QWORD *)(v232 + 152) + 8 * v233);
            }
            v225 = *v224;
            v226 = ~*(_DWORD *)((*v224 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v226 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BB6974);
            }
            if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v226 + 12)
              || (JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v225, v169, v170, v171, v172, v173, v174), v228 = v227, (_DWORD)v227 == -1))
            {
              JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v225, v169, v170, v171, v172, v173, v174);
              v228 = v229;
            }
            if (*((_WORD *)a2 + 9) == 71)
              v230 = 12;
            else
              v230 = 11;
            JSC::MacroAssemblerARM64::moveConditionally32(this, v230, v217, v228, v228, v217, v173, v174);
            if ((int)v228 > 15)
              v231 = -1;
            else
              v231 = v228;
            --*((_DWORD *)this + 3 * v231 + 1196);
            ++v223;
            ++v15;
          }
          while (v223 < *((unsigned int *)a2 + 8));
        }
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v169, v170, v171, v172, v173, v174);
        v234 = *((_DWORD *)a2 + 12);
        v235 = ~v234;
        if (v235 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BB6994);
        }
        v236 = *((_QWORD *)this + 499);
        v237 = (char *)this + 4776;
        if ((int)v217 > 15)
          v238 = -1;
        else
          v238 = v217;
        v239 = &v237[12 * v238];
        *(_DWORD *)v239 = v234;
        *((_DWORD *)v239 + 1) = 5;
        v240 = v236 + 24 * (int)v235;
        v241 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v240 = a2;
        *(_DWORD *)(v240 + 8) = v241;
        *(_BYTE *)(v240 + 17) = v217;
        *(_DWORD *)(v240 + 12) = 1;
        *(_BYTE *)(v240 + 16) = 0;
        if (v287)
        {
          v242 = (char)v288;
          if ((char)v288 != -1)
          {
            if ((char)v288 > 15)
              v242 = -1;
            --*((_DWORD *)v287 + 3 * v242 + 1196);
          }
        }
        if (v161 > 15)
          v243 = -1;
        else
          v243 = v161;
        v55 = &v237[12 * v243];
        goto LABEL_49;
      }
      if (v161 == 63)
      {
        if ((_DWORD)v217 != 31)
        {
          v220 = v288 & 0x1F | 0xD2800000;
          goto LABEL_170;
        }
      }
      else if (v161 != 31 && (_DWORD)v217 != 31)
      {
        v218 = v288 | ((v161 & 0x1F) << 16);
        v219 = -1442839584;
LABEL_169:
        v220 = v218 | v219;
LABEL_170:
        v222 = (unsigned int *)((char *)this + 200);
        v221 = *((_DWORD *)this + 50);
        if (v221 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v168, v169, v170, v171, v172, v173, v174);
          v221 = *v222;
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v221) = v220;
        *v222 += 4;
        goto LABEL_173;
      }
      v218 = v217 | (32 * v161);
      v219 = -1862270976;
      goto LABEL_169;
    }
    if (*(_DWORD *)(v10 + 164) > *v11)
    {
      v157 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *v11);
      goto LABEL_129;
    }
    __break(0xC471u);
LABEL_247:
    JUMPOUT(0x197BB66F0);
  }
  if ((_DWORD)v14 != 49)
  {
    JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)v10, a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1DA1, "void JSC::DFG::SpeculativeJIT::compileArithMinMax(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_247;
  }
  v56 = (unint64_t *)((char *)a2 + 32);
  if (*((_DWORD *)a2 + 8) == 2)
  {
    v57 = (unint64_t *)((char *)a2 + 24);
    if (v13)
    {
      if (*(_DWORD *)(v10 + 164) <= *v11)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB69B4);
      }
      v57 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * *v11);
    }
    v58 = *v57;
    v292 = this;
    v293 = v58;
    v294 = -1;
    if (((v58 >> 50) & 0x3F) - 49 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x197BB6784);
    }
    v59 = ~*(_DWORD *)((v58 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v59 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB6954);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v59 + 12))
    {
      v294 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v58, a3, a4, a5, a6, a7, a8);
      v10 = *((_QWORD *)this + 495);
      v13 = *((_DWORD *)a2 + 14) & 0x10;
    }
    if (v13)
    {
      v215 = *(_DWORD *)v11 + 1;
      if (*(_DWORD *)(v10 + 164) <= v215)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB69BCLL);
      }
      v56 = (unint64_t *)(*(_QWORD *)(v10 + 152) + 8 * v215);
    }
    v60 = *v56;
    if (((*v56 >> 50) & 0x3F) - 49 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x197BB67A4);
    }
    v61 = ~*(_DWORD *)((v60 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v61 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB695CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v61 + 12))
      v62 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *v56, a3, a4, a5, a6, a7, a8);
    else
      v62 = -1;
    JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v290, (uint64_t)this, (uint64_t)&v292, a4, a5, a6, a7, a8);
    v70 = v294;
    if (v294 == 255)
    {
      v70 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v292, v293, v64, v65, v66, v67, v68, v69);
      v294 = v70;
    }
    if (v62 == -1)
      v62 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v60, v64, v65, v66, v67, v68, v69);
    v71 = v291;
    v287 = (WTF *)v289;
    v288 = 2;
    if (*((_WORD *)a2 + 9) == 71)
      v72 = 3;
    else
      v72 = 12;
    v268 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v73 = *((_DWORD *)this + 50);
    if (v73 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v63, v64, v65, v66, v67, v68, v69);
      v73 = *((_DWORD *)this + 50);
    }
    v74 = (v62 << 16) | (32 * v70);
    v75 = v74 | 0x1E602000;
    *(_DWORD *)(*((_QWORD *)this + 7) + v73) = v74 | 0x1E602000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, v72, v64, v65, v66, v67, v68, v69, (uint64_t)v286);
    v83 = *((_DWORD *)this + 50);
    if (v83 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v76, v77, v78, v79, v80, v81, v82);
      v83 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v83) = v75;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 1, v77, v78, v79, v80, v81, v82, (uint64_t)v285);
    v91 = *((_DWORD *)this + 50);
    if (*((_WORD *)a2 + 9) == 71)
      v92 = 245373952;
    else
      v92 = 236985344;
    if (v91 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v84, v85, v86, v87, v88, v89, v90);
      v91 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v91) = v92 | v71 | v74;
    v93 = *((_DWORD *)this + 50) + 4;
    for (*((_DWORD *)this + 50) = v93; v93 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v93)
    {
      if ((v93 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v268, v84, v85, v86, v87, v88, v89, v90);
        v93 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v93) = -721215457;
      v93 = *((_DWORD *)this + 50) + 4;
    }
    v94 = v93;
    if ((v93 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v84, v85, v86, v87, v88, v89, v90);
      v94 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v94) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v95 = 69;
    else
      v95 = 65;
    v280 = v93;
    v281 = 0;
    v282 = v95;
    v283 = 15;
    v284 = -1;
    if (v93 != -1)
    {
      if (HIDWORD(v288) == (_DWORD)v288)
      {
        v96 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v287, (void *)(HIDWORD(v288) + 1), (unint64_t)&v280, v86, v87, v88, v89, v90);
        v98 = *v96;
        v97 = v96 + 1;
        v99 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v99 = v98;
      }
      else
      {
        v97 = &v281;
        v99 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v99 = v93;
      }
      *(_QWORD *)(v99 + 4) = *(_QWORD *)v97;
      ++HIDWORD(v288);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v285, (uint64_t)this, v85, v86, v87, v88, v89, v90);
    if (*((_WORD *)a2 + 9) == 71)
      v107 = 12;
    else
      v107 = 3;
    v108 = *((_DWORD *)this + 50);
    if (v108 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v100, v101, v102, v103, v104, v105, v106);
      v108 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v108) = v75;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, v107, v101, v102, v103, v104, v105, v106, (uint64_t)v279);
    v116 = *((_DWORD *)this + 50);
    if (v116 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v109, v110, v111, v112, v113, v114, v115);
      v116 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v116) = v74 | v71 | 0x1E602800;
    v117 = *((_DWORD *)this + 50) + 4;
    for (*((_DWORD *)this + 50) = v117; v117 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v117)
    {
      if ((v117 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v268, v109, v110, v111, v112, v113, v114, v115);
        v117 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v117) = -721215457;
      v117 = *((_DWORD *)this + 50) + 4;
    }
    v118 = v117;
    if ((v117 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v109, v110, v111, v112, v113, v114, v115);
      v118 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v118) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v119 = 69;
    else
      v119 = 65;
    v274 = v117;
    v275 = 0;
    v276 = v119;
    v277 = 15;
    v278 = -1;
    if (v117 != -1)
    {
      if (HIDWORD(v288) == (_DWORD)v288)
      {
        v120 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v287, (void *)(HIDWORD(v288) + 1), (unint64_t)&v274, v111, v112, v113, v114, v115);
        v122 = *v120;
        v121 = v120 + 1;
        v123 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v123 = v122;
      }
      else
      {
        v121 = &v275;
        v123 = (char *)v287 + 12 * HIDWORD(v288);
        *(_DWORD *)v123 = v117;
      }
      *(_QWORD *)(v123 + 4) = *(_QWORD *)v121;
      ++HIDWORD(v288);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v279, (uint64_t)this, v110, v111, v112, v113, v114, v115);
    v131 = *((_DWORD *)this + 50);
    if (v131 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v268, v124, v125, v126, v127, v128, v129, v130);
      v131 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v131) = v71 | (32 * v62) | 0x1E604000;
    *((_DWORD *)this + 50) += 4;
    if (v71 == v70)
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v286, (uint64_t)this, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v124, v125, v126, v127, v128, v129, v130, v295);
      JSC::AssemblerBuffer::putInt(v268, 335544320, v244, v245, v246, v247, v248, v249);
      if (*((_BYTE *)this + 328))
        v256 = 69;
      else
        v256 = 65;
      v270[0] = v295[0];
      v270[1] = 0;
      v271 = v256;
      v272 = 15;
      v273 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v287, v270, v250, v251, v252, v253, v254, v255);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v286, (uint64_t)this, v257, v258, v259, v260, v261, v262);
      JSC::MacroAssemblerARM64::moveDouble(this, v70, (char)v71, v263, v264, v265, v266, v267);
    }
    if (HIDWORD(v288))
    {
      v138 = 0;
      v139 = 0;
      v140 = 12 * HIDWORD(v288);
      do
      {
        if (v139 >= HIDWORD(v288))
        {
          __break(0xC471u);
          JUMPOUT(0x197BB692CLL);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v287 + v138), (uint64_t)this, v132, v133, v134, v135, v136, v137);
        ++v139;
        v138 += 12;
      }
      while (v140 != v138);
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v132, v133, v134, v135, v136, v137);
    v148 = *((_DWORD *)a2 + 12);
    v149 = (_DWORD *)((char *)this
                    + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v71]
                    + 4968);
    *v149 = v148;
    v149[1] = 6;
    v150 = ~v148;
    if (v150 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB6964);
    }
    v151 = *((_QWORD *)this + 499) + 24 * (int)v150;
    v152 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v151 = a2;
    *(_DWORD *)(v151 + 8) = v152;
    *(_BYTE *)(v151 + 17) = v71;
    *(_DWORD *)(v151 + 12) = 4;
    *(_BYTE *)(v151 + 16) = 0;
    v153 = v287;
    if (v289 != (_BYTE *)v287 && v287)
    {
      v287 = 0;
      LODWORD(v288) = 0;
      WTF::fastFree((unint64_t)v153, v141, v142, v143, v144, v145, v146, v147);
    }
    if (v290)
    {
      v154 = v290 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v291];
      --*(_DWORD *)(v154 + 4976);
    }
    v155 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v62] + 4968;
    --*((_DWORD *)v155 + 2);
    v156 = (char *)v292 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v70];
    --*((_DWORD *)v156 + 1244);
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v287, this, a3, a4, a5, a6, a7, a8);
    v175 = (char)v288;
    v269 = v288;
    v182 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * *v56, v176, v177, v178, v179, v180, v181);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v182 + 8, v175, v183, v184, v185, v186, v187);
    if (*(_DWORD *)v56)
    {
      v195 = 0;
      v196 = v11;
      v197 = v269;
      do
      {
        v198 = v196;
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v203 = *((_QWORD *)this + 495);
          v204 = v195 + *v11;
          if (*(_DWORD *)(v203 + 164) <= v204)
          {
            __break(0xC471u);
            JUMPOUT(0x197BB6984);
          }
          v198 = (unint64_t *)(*(_QWORD *)(v203 + 152) + 8 * v204);
        }
        v199 = *v198;
        if (((*v198 >> 50) & 0x3F) - 49 >= 3)
        {
          __break(0xC471u);
          JUMPOUT(0x197BB68ECLL);
        }
        v200 = ~*(_DWORD *)((v199 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v200 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BB696CLL);
        }
        if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v200 + 12)
          || (v201 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v199, v189, v190, v191, v192, v193, v194), (_DWORD)v201 == -1))
        {
          v201 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v199, v189, v190, v191, v192, v193, v194);
        }
        JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v201, v197, v190, v191, v192, v193, v194);
        v202 = (char *)this
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v201]
             + 4968;
        --*((_DWORD *)v202 + 2);
        ++v195;
        v197 += 0x800000000;
        ++v196;
      }
      while (v195 < *(unsigned int *)v56);
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v188, v189, v190, v191, v192, v193, v194);
    ++*((_DWORD *)this + 1244);
    if (*((_WORD *)a2 + 9) == 71)
      v208 = operationArithMinMultipleDouble;
    else
      v208 = operationArithMaxMultipleDouble;
    JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double const*,unsigned int),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>((int *)&v292, (unsigned int *)this, (uint64_t)v208, (char)v269, *((unsigned int *)a2 + 8), v205, v206, v207);
    JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, 0, a2, 0, v209, v210, v211, v212);
    --*((_DWORD *)this + 1244);
    if (v287)
    {
      v213 = (char)v288;
      if ((char)v288 != -1)
      {
        if ((char)v288 > 15)
          v213 = -1;
        --*((_DWORD *)v287 + 3 * v213 + 1196);
      }
    }
  }
}

void JSC::MacroAssemblerARM64::moveConditionally32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned __int8 v10;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;

  v8 = a6;
  v9 = a5;
  v10 = a2;
  v12 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v13 = v12 | 0x6B2063FF;
    v14 = a1[50];
    if (v14 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v14 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = v13;
    v15 = a1[50] + 4;
    a1[50] = v15;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v12 | (32 * (a3 & 0x1F)) | 0x6B00001F, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = (v10 << 12) | ((v8 & 0x1F) << 16) | (32 * (v9 & 0x1F)) | v8 & 0x1F | 0x9A800000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a2;
  v13 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v14 = v13 | 0x6B2063FF;
    v15 = a1[50];
    if (v15 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v15 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v14;
    v16 = a1[50] + 4;
    a1[50] = v16;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v13 | (32 * (a3 & 0x1F)) | 0x6B00001F, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  if (v16 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v16) = (v11 << 12) | ((v9 & 0x1F) << 16) | (32 * (v10 & 0x1F)) | v8 & 0x1F | 0x9A800000;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double const*,unsigned int),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int *v10;
  __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  unsigned int *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  __int16 *v52;
  JSC::AssemblerBuffer *v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  _BYTE v57[6];

  v8 = a5;
  v10 = a2;
  v12 = &v56;
  if ((_DWORD)a4)
  {
    v56 = a4;
    v54 = 1;
    v53 = (JSC::AssemblerBuffer *)(a2 + 14);
    v13 = 1;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = v13;
      do
      {
        if ((v57[v14 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        v15 |= 1 << v57[v14 - 1];
        v14 += 2;
      }
      while (2 * v13 != v14);
      v17 = 0;
      do
      {
        v18 = v57[v17 - 2] & 0x7F;
        if (v18 >= 0x40)
          goto LABEL_56;
        v15 &= ~(1 << v18);
        v17 += 2;
      }
      while (2 * v13 != v17);
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v19.i16[0] = vaddlv_u8(v19);
      v20 = v19.i32[0];
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.i32[0] + v20)
      {
        v22 = 0;
        if (v13 <= 1)
          v23 = 1;
        else
          v23 = v13;
        v24 = 2 * v23;
        while (1)
        {
          v25 = v57[v22 - 1];
          if ((v25 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v15 >> (v25 & 0x7F)) & 1) != 0)
            break;
          v22 += 2;
          if (v24 == v22)
            goto LABEL_33;
        }
        v26 = v57[v22 - 2];
        if (v26 != v25)
        {
          if ((char)v26 == 63)
          {
            if (v25 == 31)
              goto LABEL_27;
            v28 = v25 & 0x1F | 0xD2800000;
          }
          else
          {
            v27 = (char)v25 == 31 || (char)v26 == 31;
            if (!v27)
            {
              v28 = v25 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v28 = (char)v25 | (32 * (char)v26) | 0x91000000;
          }
LABEL_28:
          v29 = v10[50];
          if (v29 + 4 > v10[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow(v53, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v29 = v10[50];
          }
          *(_DWORD *)(*((_QWORD *)v10 + 7) + v29) = v28;
          v10[50] += 4;
          v16 = v54;
        }
        memmove(&v57[v22 - 2], &v57[v22], 2 * v16 - v22 - 2);
        v13 = v54 - 1;
        goto LABEL_32;
      }
      v52 = v12;
      v30 = HIBYTE(v56);
      v31 = v56;
      JSC::MacroAssemblerARM64::swap((uint64_t)v10, (char)v56, SHIBYTE(v56), a4, a5, a6, a7, a8);
      memmove(&v56, v57, 2 * v54 - 2);
      v32 = v54 - 1;
      v27 = v54 == 1;
      v55 = v32;
      v33 = (unsigned int *)&v56;
      v34 = (unsigned int *)&v57[2 * v32 - 2];
      if (v27)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        a2 = (unsigned int *)&v57[2 * v32 - 2];
      }
      else
      {
        v39 = 2 * v32;
        v40 = &v56;
        while (*(unsigned __int8 *)v40 != v30)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v31;
LABEL_43:
        v37 = 0;
        v41 = (char *)&v56;
        a2 = v34;
        v42 = (char *)v34;
        do
        {
          if (*(unsigned __int8 *)v33 == *((unsigned __int8 *)v33 + 1))
          {
            v43 = v33;
            if (v42 != &v57[2 * v55 - 2])
            {
              if (v33 == a2)
              {
                v43 = (unsigned int *)v42;
              }
              else
              {
                v44 = v41 - (char *)a2;
                memmove(v42, a2, v41 - (char *)a2);
                v43 = (unsigned int *)&v42[v44];
              }
            }
            a2 = (unsigned int *)((char *)v33 + 2);
            ++v37;
            v42 = (char *)v43;
          }
          v33 = (unsigned int *)((char *)v33 + 2);
          v41 += 2;
        }
        while (v33 < v34);
        v35 = v55;
        v36 = v55;
        v34 = (unsigned int *)v42;
      }
      v38 = (unsigned int *)&v57[2 * v35 - 2];
      if (a2 != v38)
      {
        memmove(v34, a2, (char *)v38 - (char *)a2);
        v36 = v55;
      }
      v13 = v36 - v37;
      v12 = v52;
LABEL_32:
      v54 = v13;
LABEL_33:
      ;
    }
    while (v13);
    if (v12 != &v56 && &v56)
      WTF::fastFree((unint64_t)&v56, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v10, (JSC::ARM64LogicalImmediate *)v8, 1, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v10, a3, v45, v46, v47, v48, v49, v50, a1);
  v51 = v10[50];
  if (v51 + 4 > v10[48])
  {
LABEL_57:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v51 = v10[50];
  }
  *(_DWORD *)(*((_QWORD *)v10 + 7) + v51) = 509624320;
  v10[50] += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::compileValuePow(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::DFG::Node *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  char *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::DFG::Node *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  int v76;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (((v10 >> 50) & 0x3F) <= 0x1A)
  {
    if ((_DWORD)v11)
      v12 = (_DWORD)v11 == 26;
    else
      v12 = 1;
    if (!v12)
    {
LABEL_57:
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x1DD7, "void JSC::DFG::SpeculativeJIT::compileValuePow(Node *)", "node->binaryUseKind() == UntypedUse || node->binaryUseKind() == AnyBigIntUse || node->binaryUseKind() == BigInt32Use");
      __break(0xC471u);
      JUMPOUT(0x197BB72ECLL);
    }
    goto LABEL_8;
  }
  if ((_DWORD)v11 == 28)
  {
LABEL_8:
    v13 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_31;
    v14 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v14 < *((unsigned int *)this + 1001))
    {
      if (*((_BYTE *)this[499] + 24 * (int)v14 + 12))
      {
        v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
LABEL_32:
        v47 = *((_QWORD *)a2 + 4);
        if ((v47 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_36;
        v48 = ~*(_DWORD *)((v47 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v48 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BB72F4);
        }
        if (*((_BYTE *)this[499] + 24 * (int)v48 + 12))
          v49 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
        else
LABEL_36:
          v49 = -1;
        JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)this, v50, *((_QWORD *)a2 + 4), v51, v52, v53, v54, v55);
        if (v15 == -1)
          v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v57, v58, v59, v60, v61, v62);
        if (v49 == -1)
          v49 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v47, v57, v58, v59, v60, v61, v62);
        JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v56, v57, v58, v59, v60, v61, v62);
        ++*((_DWORD *)this + 1196);
        v69 = *((unsigned int *)this + 1194);
        if ((_DWORD)v69 != 0x3FFFFFFF)
        {
          this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v69, (uint64_t)v63, v64, v65, v66, v67, v68);
        }
        v70 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v63, v64, v65, v66, v67, v68);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(&v76, (unsigned __int8 *)this, (uint64_t)operationValuePow, 0, v70, v71, v15, v49);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v72, v73, v74);
        --*((_DWORD *)this + 1196);
        if ((v47 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v45 = (char *)(this + 597);
          if (v49 > 15)
            v46 = -1;
          else
            v46 = v49;
LABEL_47:
          --*(_DWORD *)&v45[12 * v46 + 8];
          goto LABEL_48;
        }
        goto LABEL_48;
      }
LABEL_31:
      v15 = -1;
      goto LABEL_32;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x197BB72B4);
  }
  if ((_DWORD)v11 != 27)
    goto LABEL_57;
  v13 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_54;
  v16 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB72FCLL);
  }
  if (*((_BYTE *)this[499] + 24 * (int)v16 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_54:
    v15 = -1;
  v17 = *((_QWORD *)a2 + 4);
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_55;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
    goto LABEL_60;
  if (*((_BYTE *)this[499] + 24 * (int)v18 + 12))
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_55:
    v19 = -1;
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v19 == -1)
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v15, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v19, v20, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v25, v26, v27, v28, v29, v30, v31);
  ++*((_DWORD *)this + 1196);
  v38 = *((unsigned int *)this + 1194);
  if ((_DWORD)v38 != 0x3FFFFFFF)
  {
    this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v38, (uint64_t)v32, v33, v34, v35, v36, v37);
  }
  v39 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v32, v33, v34, v35, v36, v37);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v76, (unsigned __int8 *)this, (uint64_t)operationPowHeapBigInt, 0, v39, v40, v15, v19);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v41, v42, v43);
  --*((_DWORD *)this + 1196);
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v45 = (char *)(this + 597);
    if (v19 > 15)
      v46 = -1;
    else
      v46 = v19;
    goto LABEL_47;
  }
LABEL_48:
  if (v13)
  {
    if (v15 > 15)
      v75 = -1;
    else
      v75 = v15;
    --*((_DWORD *)this + 3 * v75 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileArithPow(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  char *v101;
  char *v102;
  unsigned int v103;
  char *v104;
  int v105;
  uint64_t v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  char *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  JSC::DFG::SpeculativeJIT *v159;
  unsigned int v160;
  char *v161;
  char *v162;
  char *v163;
  double v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  JSC::AssemblerBuffer *v359;
  JSC::AssemblerBuffer *v360;
  char v361;
  JSC::DFG::SpeculativeJIT *v362;
  unint64_t v363;
  char v364;
  _BYTE v365[23];
  int v366[2];
  char v367;
  __int16 v368;
  char v369;
  int v370[2];
  char v371;
  __int16 v372;
  char v373;
  uint64_t v374;
  char v375;
  unsigned int v376[2];
  char v377;
  __int16 v378;
  char v379;
  unsigned int v380[3];
  uint64_t v381;
  unsigned __int8 v382;
  int v383[3];

  v10 = *((_QWORD *)a2 + 4);
  if ((v10 & 0xFC000000000000) != 0x4000000000000)
  {
    if (*(unsigned __int16 *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
      && (unint64_t)(**(_QWORD **)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48) - 0x2000000000000) <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v164 = JSC::DFG::Node::asNumber((JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL));
      if (v164 == 0.5)
      {
        JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v362, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
        JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v381, this, v284, v285, v286, v287, v288, v289);
        v296 = v364;
        if (v364 == 255)
        {
          v296 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v362, v363, v290, v291, v292, v293, v294, v295);
          v364 = v296;
        }
        v297 = (char)v382;
        JSC::MacroAssemblerARM64::moveZeroToDouble(this, v297, v290, v291, v292, v293, v294, v295);
        v298 = v296;
        JSC::MacroAssemblerARM64::branchDouble(this, 0, v298, v297, v299, v300, v301, v302, (uint64_t)&v374);
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithPow(JSC::DFG::Node *)::minusInfinityConstant, v297, v303, v304, v305, v306, v307);
        JSC::MacroAssemblerARM64::branchDouble(this, 0, v298, v297, v308, v309, v310, v311, (uint64_t)v380);
        JSC::MacroAssemblerARM64::sqrtDouble(this, v298, v297, v312, v313, v314, v315, v316);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v317, v318, v319, v320, v321, v322, v323, v370);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v324, v325, v326, v327, v328, v329);
        if (*((_BYTE *)this + 328))
          v336 = 69;
        else
          v336 = 65;
        v376[0] = v370[0];
        v376[1] = 0;
        v377 = v336;
        v378 = 15;
        v379 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v380, (uint64_t)this, v330, v331, v332, v333, v334, v335);
        JSC::MacroAssemblerARM64::absDouble(this, v297, v297, v337, v338, v339, v340, v341);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v374, (uint64_t)this, v342, v343, v344, v345, v346, v347);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v376, (uint64_t)this, v348, v349, v350, v351, v352, v353);
        JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, v297, a2, 0, v354, v355, v356, v357);
        goto LABEL_118;
      }
      if (v164 == -0.5)
      {
        JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v362, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
        JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v381, this, v165, v166, v167, v168, v169, v170);
        JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v374, this, v171, v172, v173, v174, v175, v176);
        v183 = v364;
        if (v364 == 255)
        {
          v183 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v362, v363, v177, v178, v179, v180, v181, v182);
          v364 = v183;
        }
        v184 = (char)v382;
        v185 = v375;
        JSC::MacroAssemblerARM64::moveZeroToDouble(this, v185, v177, v178, v179, v180, v181, v182);
        v186 = v183;
        JSC::MacroAssemblerARM64::branchDouble(this, 0, v186, v185, v187, v188, v189, v190, (uint64_t)v380);
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithPow(JSC::DFG::Node *)::minusInfinityConstant, v185, v191, v192, v193, v194, v195);
        JSC::MacroAssemblerARM64::branchDouble(this, 0, v186, v185, v196, v197, v198, v199, (uint64_t)v376);
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithPow(JSC::DFG::Node *)::oneConstant, v185, v200, v201, v202, v203, v204);
        JSC::MacroAssemblerARM64::sqrtDouble(this, v186, v184, v205, v206, v207, v208, v209);
        JSC::MacroAssemblerARM64::divDouble(this, v185, v184, v185, v210, v211, v212, v213);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v214, v215, v216, v217, v218, v219, v220, v366);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v221, v222, v223, v224, v225, v226);
        if (*((_BYTE *)this + 328))
          v233 = 69;
        else
          v233 = 65;
        v370[0] = v366[0];
        v370[1] = 0;
        v371 = v233;
        v372 = 15;
        v373 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v380, (uint64_t)this, v227, v228, v229, v230, v231, v232);
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileArithPow(JSC::DFG::Node *)::infinityConstant, v185, v234, v235, v236, v237, v238);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v239, v240, v241, v242, v243, v244, v245, v383);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v246, v247, v248, v249, v250, v251);
        if (*((_BYTE *)this + 328))
          v258 = 69;
        else
          v258 = 65;
        v366[0] = v383[0];
        v366[1] = 0;
        v367 = v258;
        v368 = 15;
        v369 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v376, (uint64_t)this, v252, v253, v254, v255, v256, v257);
        JSC::MacroAssemblerARM64::moveZeroToDouble(this, v185, v259, v260, v261, v262, v263, v264);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v366, (uint64_t)this, v265, v266, v267, v268, v269, v270);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v370, (uint64_t)this, v271, v272, v273, v274, v275, v276);
        JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, v185, a2, 0, v277, v278, v279, v280);
        if (v374)
        {
          v281 = v374 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v375];
          --*(_DWORD *)(v281 + 4976);
        }
LABEL_118:
        if (v381)
        {
          v282 = v381 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v382];
          --*(_DWORD *)(v282 + 4976);
        }
        v283 = (char *)v362 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v364];
        --*((_DWORD *)v283 + 1244);
        return;
      }
    }
    v11 = *((_QWORD *)a2 + 3);
    if (((v11 >> 50) & 0x3F) - 49 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x197BB8098);
    }
    v12 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB8130);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
      v13 = -1;
    v14 = *((_QWORD *)a2 + 4);
    if (((v14 >> 50) & 0x3F) - 49 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x197BB80B8);
    }
    v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v15 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BB8138);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
      v16 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    else
      v16 = -1;
    if (v13 == -1)
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    if (v16 == -1)
      v16 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v10, a3, a4, a5, a6, a7, a8);
    v23 = 0;
    v24 = (char *)this + 4968;
    ++*((_DWORD *)this + 1244);
    v25 = (_DWORD *)((char *)this + 4976);
    v26 = 0x17u;
    v27 = -1;
    while (1)
    {
      if (!*v25)
      {
        v28 = *(v25 - 1);
        if (v28 == -1)
        {
          v30 = *(v25 - 2);
          *((_QWORD *)v25 - 1) = 0xFFFFFFFF3FFFFFFFLL;
          goto LABEL_77;
        }
        if (v28 < v27)
        {
          v26 = v23;
          v27 = *(v25 - 1);
        }
      }
      ++v23;
      v25 += 3;
      if (v23 == 23)
      {
        v23 = v26;
        v29 = &v24[12 * v26];
        v30 = *(_DWORD *)v29;
        *(_QWORD *)v29 = 0xFFFFFFFF3FFFFFFFLL;
        v25 = v29 + 8;
LABEL_77:
        *v25 = 1;
        v105 = JSC::FPRInfo::toRegister::registerForIndex[v23];
        if (v30 != 0x3FFFFFFF)
          JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v30, v17, v18, v19, v20, v21, v22);
        v106 = 0;
        v358 = v105;
        v107 = (_DWORD *)((char *)this + 4976);
        v108 = 0x17u;
        v109 = -1;
        while (1)
        {
          if (!*v107)
          {
            v110 = *(v107 - 1);
            if (v110 == -1)
            {
              v112 = *(v107 - 2);
              *((_QWORD *)v107 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_87:
              v360 = (JSC::DFG::SpeculativeJIT *)((char *)this + 4968);
              *v107 = 1;
              v113 = JSC::FPRInfo::toRegister::registerForIndex[v106];
              if (v112 != 0x3FFFFFFF)
                JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v112, v17, v18, v19, v20, v21, v22);
              JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v381, this, v17, v18, v19, v20, v21, v22);
              v363 = 2;
              v361 = v16;
              v362 = (JSC::DFG::SpeculativeJIT *)&v364;
              v114 = v16;
              JSC::MacroAssemblerARM64::branchConvertDoubleToInt32((uint64_t)this, v114, (char)v382, (uint64_t)&v362, v113, 0, v115, v116);
              v124 = *((_DWORD *)this + 50);
              if (v124 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v117, v118, v119, v120, v121, v122, v123);
                v124 = *((_DWORD *)this + 50);
              }
              v125 = v13;
              v126 = v13;
              *(_DWORD *)(*((_QWORD *)this + 7) + v124) = v105 | (32 * v126) | 0x1E604000;
              *((_DWORD *)this + 50) += 4;
              JSC::DFG::compileArithPowIntegerFastPath((uint64_t)&v374, (uint64_t)this, v105, (char)v382, v120, v121, v122, v123);
              if (HIDWORD(v363))
              {
                v133 = 0;
                v134 = 0;
                v135 = 12 * HIDWORD(v363);
                do
                {
                  if (v134 >= HIDWORD(v363))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197BB8110);
                  }
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v362 + v133), (uint64_t)this, v127, v128, v129, v130, v131, v132);
                  ++v134;
                  v133 += 12;
                }
                while (v135 != v133);
              }
              JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double,double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((int *)v380, this, (uint64_t)operationMathPow, v126, v114, v130, v131, v132);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v374, (uint64_t)this, v136, v137, v138, v139, v140, v141);
              JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v142, v143, v144, v145, v146, v147);
              v155 = *((_DWORD *)a2 + 12);
              *((_DWORD *)this + 1242) = v155;
              *((_DWORD *)this + 1243) = 6;
              v156 = ~v155;
              if (v156 < *((unsigned int *)this + 1001))
              {
                v157 = *((_QWORD *)this + 499) + 24 * (int)v156;
                v158 = *((_DWORD *)a2 + 13);
                *(_QWORD *)v157 = a2;
                *(_DWORD *)(v157 + 8) = v158;
                *(_BYTE *)(v157 + 12) = 4;
                *(_DWORD *)(v157 + 13) = 0;
                *(_BYTE *)(v157 + 17) = 0;
                v159 = v362;
                if (&v364 != (char *)v362 && v362)
                {
                  v362 = 0;
                  LODWORD(v363) = 0;
                  WTF::fastFree((unint64_t)v159, v148, v149, v150, v151, v152, v153, v154);
                }
                if (v381)
                {
                  v160 = (char)v382;
                  if ((char)v382 != -1)
                  {
                    if ((char)v382 > 15)
                      v160 = -1;
                    --*(_DWORD *)(v381 + 12 * v160 + 4784);
                  }
                }
                v161 = (char *)v360
                     + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v113];
                --*((_DWORD *)v161 + 2);
                v162 = (char *)v360
                     + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v358];
                --*((_DWORD *)v162 + 2);
                --*((_DWORD *)this + 1244);
                v163 = (char *)v360
                     + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v361];
                --*((_DWORD *)v163 + 2);
                v104 = (char *)v360
                     + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v125];
                goto LABEL_75;
              }
              __break(0xC471u);
LABEL_143:
              JUMPOUT(0x197BB8048);
            }
            if (v110 < v109)
            {
              v108 = v106;
              v109 = *(v107 - 1);
            }
          }
          ++v106;
          v107 += 3;
          if (v106 == 23)
          {
            v106 = v108;
            v111 = &v24[12 * v108];
            v112 = *(_DWORD *)v111;
            *(_QWORD *)v111 = 0xFFFFFFFF3FFFFFFFLL;
            v107 = v111 + 8;
            goto LABEL_87;
          }
        }
      }
    }
  }
  v31 = *((_QWORD *)a2 + 3);
  if (((v31 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    goto LABEL_143;
  }
  v32 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v33 = *((unsigned int *)this + 1001);
  if (v32 >= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x197BB8118);
  }
  v34 = -1;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v32 + 12))
  {
    v35 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v10 = *((_QWORD *)a2 + 4);
    v33 = *((unsigned int *)this + 1001);
  }
  else
  {
    v35 = -1;
  }
  v362 = this;
  v363 = v10;
  v364 = -1;
  v36 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v36 >= v33)
  {
    __break(0xC471u);
    JUMPOUT(0x197BB8120);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v36 + 12))
  {
    v34 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v10, (uint64_t)v365, a4, a5, a6, a7, a8);
    v364 = v34;
  }
  if (v35 == -1)
  {
    v35 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
    v34 = v364;
  }
  if (v34 == -1)
  {
    v34 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v362, v363, (uint64_t)v365, a4, a5, a6, a7, a8);
    v364 = v34;
  }
  v37 = 0;
  v38 = (char *)this + 4968;
  v39 = (_DWORD *)((char *)this + 4976);
  v40 = 0x17u;
  v41 = -1;
  while (*v39)
  {
LABEL_38:
    ++v37;
    v39 += 3;
    if (v37 == 23)
    {
      v37 = v40;
      v43 = &v38[12 * v40];
      v44 = *(_DWORD *)v43;
      *(_QWORD *)v43 = 0xFFFFFFFF3FFFFFFFLL;
      v39 = v43 + 8;
      goto LABEL_41;
    }
  }
  v42 = *(v39 - 1);
  if (v42 != -1)
  {
    if (v42 < v41)
    {
      v40 = v37;
      v41 = *(v39 - 1);
    }
    goto LABEL_38;
  }
  v44 = *(v39 - 2);
  *((_QWORD *)v39 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_41:
  *v39 = 1;
  v45 = JSC::FPRInfo::toRegister::registerForIndex[v37];
  if (v44 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v44, a3, a4, a5, a6, a7, a8);
  v46 = (int)v45;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v10, a3, a4, a5, a6, a7, a8);
  v54 = 0;
  ++*((_DWORD *)this + 1244);
  v55 = (_DWORD *)((char *)this + 4976);
  v56 = 0x17u;
  v57 = -1;
  while (2)
  {
    if (*v55)
    {
LABEL_48:
      ++v54;
      v55 += 3;
      if (v54 == 23)
      {
        v54 = v56;
        v59 = &v38[12 * v56];
        v60 = *(_DWORD *)v59;
        *(_QWORD *)v59 = 0xFFFFFFFF3FFFFFFFLL;
        v55 = v59 + 8;
        goto LABEL_51;
      }
      continue;
    }
    break;
  }
  v58 = *(v55 - 1);
  if (v58 != -1)
  {
    if (v58 < v57)
    {
      v56 = v54;
      v57 = *(v55 - 1);
    }
    goto LABEL_48;
  }
  v60 = *(v55 - 2);
  *((_QWORD *)v55 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_51:
  *v55 = 1;
  v61 = JSC::FPRInfo::toRegister::registerForIndex[v54];
  if (v60 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v60, v48, v49, v50, v51, v52, v53);
  v62 = *((_DWORD *)this + 50);
  if (v62 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v47, v48, v49, v50, v51, v52, v53);
    v62 = *((_DWORD *)this + 50);
  }
  v359 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v63 = v35;
  *(_DWORD *)(*((_QWORD *)this + 7) + v62) = v61 | (32 * v63) | 0x1E604000;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v381, this, v48, v49, v50, v51, v52, v53);
  v71 = v382;
  if (v382 != v34)
  {
    if (v34 == 63)
    {
      if (v382 == 31)
        goto LABEL_132;
      v74 = v382 & 0x1F | 0xD2800000;
    }
    else
    {
      if (v34 != 31 && v382 != 31)
      {
        v72 = v382 | ((v34 & 0x1F) << 16);
        v73 = -1442839584;
        goto LABEL_60;
      }
LABEL_132:
      v72 = (char)v382 | (32 * v34);
      v73 = -1862270976;
LABEL_60:
      v74 = v72 | v73;
    }
    v75 = *((_DWORD *)this + 50);
    if (v75 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v359, v64, v65, v66, v67, v68, v69, v70);
      v75 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v75) = v74;
    *((_DWORD *)this + 50) += 4;
    v46 = (int)v45;
    v38 = (char *)this + 4968;
  }
  JSC::DFG::compileArithPowIntegerFastPath((uint64_t)&v374, (uint64_t)this, v61, (char)v71, v67, v68, v69, v70);
  v83 = *((_DWORD *)this + 50);
  if (v83 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v359, v76, v77, v78, v79, v80, v81, v82);
    v83 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v83) = v45 | (32 * (v34 & 0x1F)) | 0x1E620000;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<double (*)(double,double),JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>((int *)v380, this, (uint64_t)operationMathPow, v63, v45, v80, v81, v82);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v374, (uint64_t)this, v84, v85, v86, v87, v88, v89);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v90, v91, v92, v93, v94, v95);
  v96 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1242) = v96;
  *((_DWORD *)this + 1243) = 6;
  v97 = ~v96;
  if (v97 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BB8128);
  }
  v98 = *((_QWORD *)this + 499) + 24 * (int)v97;
  v99 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v98 = a2;
  *(_DWORD *)(v98 + 8) = v99;
  *(_BYTE *)(v98 + 12) = 4;
  *(_DWORD *)(v98 + 13) = 0;
  *(_BYTE *)(v98 + 17) = 0;
  if (v381)
  {
    v100 = (char)v382;
    if ((char)v382 != -1)
    {
      if ((char)v382 > 15)
        v100 = -1;
      --*(_DWORD *)(v381 + 12 * v100 + 4784);
    }
  }
  v101 = &v38[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v61]];
  --*((_DWORD *)v101 + 2);
  --*((_DWORD *)this + 1244);
  v102 = &v38[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v46]];
  --*((_DWORD *)v102 + 2);
  v103 = v364;
  if (v364 > 15)
    v103 = -1;
  --*((_DWORD *)v362 + 3 * v103 + 1196);
  v104 = &v38[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v35]];
LABEL_75:
  --*((_DWORD *)v104 + 2);
}

void JSC::DFG::compileArithPowIntegerFastPath(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int i;
  unsigned int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  WTF *v70;
  int v72;
  unsigned int v73[3];
  unsigned int v74[3];
  int v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[24];

  v77 = (WTF *)v79;
  v78 = 2;
  JSC::MacroAssemblerARM64::branch32(a2, 8, a4, 1000, a5, a6, a7, a8, (uint64_t)&v75);
  v17 = v75;
  if (v75 != -1)
  {
    v18 = HIDWORD(v78);
    if (HIDWORD(v78) == (_DWORD)v78)
    {
      v19 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v77, (void *)(HIDWORD(v78) + 1), (unint64_t)&v75, v12, v13, v14, v15, v16);
      v21 = *v19;
      v20 = (uint64_t *)(v19 + 1);
      v17 = v21;
      v18 = HIDWORD(v78);
    }
    else
    {
      v20 = &v76;
    }
    v22 = (char *)v77 + 12 * v18;
    *(_DWORD *)v22 = v17;
    *(_QWORD *)(v22 + 4) = *v20;
    ++HIDWORD(v78);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a2, (uint64_t)&JSC::DFG::compileArithPowIntegerFastPath(JSC::DFG::JITCompiler &,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::oneConstant, a2 + 296, v12, v13, v14, v15, v16);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -58758624;
  v32 = *(_DWORD *)(a2 + 200) + 4;
  for (*(_DWORD *)(a2 + 200) = v32; v32 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v32)
  {
    if ((v32 + 4) > *(_DWORD *)(a2 + 192))
    {
      v30 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v23, v24, v25, v26, v27, v28, v29).n128_u64[0];
      v32 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -721215457;
    v32 = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a2, 0, a4, v26, v27, v28, v29, (uint64_t)v74, v30);
  v40 = *(_DWORD *)(a2 + 200);
  if (v40 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v33, v34, v35, v36, v37, v38, v39);
    v40 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = (a3 << 16) | 0x1E600800;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v74, a2, v34, v35, v36, v37, v38, v39);
  v49 = *(_DWORD *)(a2 + 200);
  if (v49 + 4 > *(_DWORD *)(a2 + 192))
  {
    v48 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v41, v42, v43, v44, v45, v46, v47).n128_u64[0];
    v49 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v49) = a3 | (32 * a3) | (a3 << 16) | 0x1E600800;
  v50 = *(_DWORD *)(a2 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(a2 + 200) = v50 + 4;
  if ((v50 + 8) > *(_DWORD *)(a2 + 192))
  {
    v48 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v41, v42, v43, v44, v45, v46, v47).n128_u64[0];
    v51 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v51) = a4 & 0x1F | (32 * (a4 & 0x1F)) | 0x13017C00;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, 1, a4, v44, v45, v46, v47, (uint64_t)v73, v48);
  v72 = v32;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v73, (unsigned int *)&v72, a2, v52, v53, v54, v55, v56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v57, v58, v59, v60, v61, v62, v63);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v65 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v57, v58, v59, v60, v61, v62, v63);
    v65 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v66 = 69;
  else
    v66 = 65;
  *(_DWORD *)a1 = i;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v66;
  *(_WORD *)(a1 + 9) = 15;
  *(_BYTE *)(a1 + 11) = -1;
  if (HIDWORD(v78))
  {
    v67 = 0;
    v68 = 0;
    v69 = 12 * HIDWORD(v78);
    while (v68 < HIDWORD(v78))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v77 + v67), a2, v58, v59, v60, v61, v62, v63);
      ++v68;
      v67 += 12;
      if (v69 == v67)
        goto LABEL_26;
    }
    __break(0xC471u);
LABEL_42:
    JUMPOUT(0x197BB845CLL);
  }
LABEL_26:
  v70 = v77;
  if (v79 != (_BYTE *)v77 && v77 != 0)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v70, v57, v58, v59, v60, v61, v62, v63);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compare(JSC::DFG::SpeculativeJIT *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::DFG::Node *v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  JSC::DFG::SpeculativeJIT *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::DFG::Node *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::ARM64LogicalImmediate *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint8x8_t v129;
  __int32 v130;
  uint8x8_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  char v160;
  unsigned int *v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  char *v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned int v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  char v200;
  int v201;
  JSC::DFG::Node *v202;
  unint64_t v203;
  char v204;
  char v205;
  uint64_t v206;
  JSC::DFG::Node *v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  char v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  JSC::DFG::Node *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  void *v258;
  int v259;
  unsigned int v260;
  _DWORD *v261;
  uint64_t *v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  JSC::DFG::Node *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  unint64_t v295;
  char *v296;
  int v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  unsigned int v306;
  int *v307;
  int *v308;
  int v309;
  char *v310;
  int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  void *v319;
  unsigned int v320;
  _BYTE *v321;
  WTF *v322;
  WTF *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  _DWORD *v328;
  WTF *v329;
  WTF *v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  int v346;
  char v347;
  char *v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  WTF *v352;
  char v353;
  char v354;
  int64_t v355;
  unsigned __int8 *v356;
  int v357;
  signed __int8 v358;
  unsigned __int8 *v359;
  JSC::ARM64LogicalImmediate *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t (*v365)(JSC::JSGlobalObject *, JSC::JSRopeString *, JSC::JSRopeString *);
  JSC::DFG::Node *v366;
  unsigned int v367;
  WTF *v368;
  unsigned int v369;
  _BYTE v370[24];
  uint64_t v371;
  int v372;
  int v373;
  int v374;
  uint64_t v375;
  WTF *v376;
  uint64_t v377;
  _BYTE v378[24];
  char *v379;
  unsigned int v380;
  unsigned int v381;
  _WORD v382[14];
  char v383;
  __int16 v384;
  uint64_t v385;
  _DWORD *v386;
  char v387;
  char v388;
  __int128 v389;

  v8 = a3;
  v9 = (JSC::DFG::Node *)a2;
  v11 = *((_QWORD *)this + 496);
  v12 = *(unsigned int *)(v11 + 220);
  v13 = v12 - 1;
  v14 = (*((_DWORD *)this + 997) + 1);
  if (v12 - 1 > v14)
  {
    if (v12 <= v14)
      v29 = (*((_DWORD *)this + 997) + 1);
    else
      v29 = *(unsigned int *)(v11 + 220);
    while (1)
    {
      if (v29 == v14)
      {
        __break(0xC471u);
        JUMPOUT(0x197BB95B0);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 208) + 8 * v14);
      if (*(_DWORD *)(v30 + 52))
      {
        if (*(_WORD *)(v30 + 18) != 23 || (*(_QWORD *)(v30 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
          break;
      }
      if (v13 <= ++v14)
        goto LABEL_2;
    }
  }
  else
  {
    do
    {
LABEL_2:
      if (v13 >= v12)
        goto LABEL_295;
      v15 = *(_QWORD *)(v11 + 208);
      v16 = *(_QWORD *)(v15 + 8 * v13);
      v17 = *(unsigned __int16 *)(v16 + 18);
      --v13;
    }
    while ((v17 - 364) > 0xB);
    if (v17 == 365 && (_DWORD)v12 && *((_QWORD *)this + 497) == (*(_QWORD *)(v16 + 24) & 0xFF00FFFFFFFFFFFFLL))
    {
      v18 = v12 - 1;
      v19 = *(_QWORD *)(v15 + 8 * (v12 - 1));
      a3 = *(_QWORD *)(a2 + 24);
      v20 = (a3 >> 50) & 0x3F;
      if (((a3 >> 50) & 0x3F) <= 0x14)
      {
        if ((_DWORD)v20 == 1)
        {
          if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x4000000000000)
          {
            JSC::DFG::SpeculativeJIT::compilePeepHoleInt32Branch((uint64_t)this, a2, **(_QWORD **)(v19 + 72), *(_QWORD *)(*(_QWORD *)(v19 + 72) + 16), v8, a6, a7, a8);
            goto LABEL_62;
          }
          goto LABEL_39;
        }
        if ((_DWORD)v20 != 20)
          goto LABEL_39;
        v27 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
        v28 = 0x50000000000000;
      }
      else
      {
        if ((_DWORD)v20 == 52)
        {
          if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0xD0000000000000)
          {
            JSC::DFG::SpeculativeJIT::compilePeepHoleInt52Branch((uint64_t)this, a2, *(_QWORD *)(v15 + 8 * v18), v8);
            goto LABEL_62;
          }
          goto LABEL_39;
        }
        if ((_DWORD)v20 != 21)
        {
          if ((_DWORD)v20 == 49)
          {
            if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0xC4000000000000)
            {
              JSC::DFG::SpeculativeJIT::compilePeepHoleDoubleBranch((uint64_t)this, a2, **(_QWORD **)(v19 + 72), *(_QWORD *)(*(_QWORD *)(v19 + 72) + 16), a4, a6, a7, a8);
LABEL_62:
              JSC::DFG::SpeculativeJIT::use((uint64_t)this, *((_QWORD *)v9 + 3), v21, v22, v23, v24, v25, v26);
              JSC::DFG::SpeculativeJIT::use((uint64_t)this, *((_QWORD *)v9 + 4), v54, v55, v56, v57, v58, v59);
              *((_DWORD *)this + 997) = v18;
              *((_QWORD *)this + 497) = v19;
              return 1;
            }
            if (*(_WORD *)(a2 + 18) != 237)
            {
LABEL_298:
              JSC::DFG::SpeculativeJIT::genericJSValuePeepholeBranch((uint64_t)this, (unint64_t *)v9, v19, v8, a5, a6, a7, a8);
              return 1;
            }
            goto LABEL_52;
          }
LABEL_39:
          if (*(_WORD *)(a2 + 18) != 237)
            goto LABEL_298;
          if (((a3 >> 50) & 0x3F) > 0x12)
          {
            if ((_DWORD)v20 == 25)
            {
              if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x64000000000000)
              {
                JSC::DFG::SpeculativeJIT::compilePeepHoleSymbolEquality(this, (JSC::DFG::Node *)a2, *(JSC::DFG::Node **)(v15 + 8 * v18), a4, a5, a6, a7, a8);
                goto LABEL_62;
              }
              goto LABEL_52;
            }
            if ((_DWORD)v20 != 19)
              goto LABEL_52;
            a2 = *(_QWORD *)(a2 + 32);
            if ((a2 & 0xFC000000000000) != 0x2C000000000000)
              goto LABEL_52;
          }
          else
          {
            if ((_DWORD)v20 == 6)
            {
              if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x18000000000000)
              {
                JSC::DFG::SpeculativeJIT::compilePeepHoleBooleanBranch((uint64_t)this, a2, **(_QWORD **)(v19 + 72), *(_QWORD *)(*(_QWORD *)(v19 + 72) + 16), v8, a6, a7, a8);
                goto LABEL_62;
              }
              goto LABEL_52;
            }
            if ((_DWORD)v20 != 11)
              goto LABEL_52;
            v34 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
            if (v34 == 0x2C000000000000)
            {
              JSC::DFG::SpeculativeJIT::compilePeepHoleObjectEquality(this, (JSC::DFG::Node *)a2, **(JSC::DFG::Node ***)(v19 + 72), *(_QWORD *)(*(_QWORD *)(v19 + 72) + 16), a5, a6, a7, a8);
              goto LABEL_62;
            }
            if (v34 != 0x4C000000000000)
            {
LABEL_52:
              v35 = *((_QWORD *)this + 702);
              v36 = *(_QWORD *)(v35 + 8);
              v37 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
              v38 = (uint64_t *)(v36 + 24);
              v39 = (uint64_t *)(v36 + 8);
              if ((a3 & 1) != 0)
                v39 = v38;
              v40 = *v39;
              v41 = *v39 + 32 * v37;
              v42 = *(_DWORD *)(v35 + 88);
              v43 = *(_DWORD *)(v41 + 20);
              if (v42 != v43)
              {
                if ((*(_QWORD *)(v41 + 8) & 0x2800FFFFFFF7) != 0)
                {
                  if ((v43 ^ v42) >= 2)
                  {
                    v81 = *(_QWORD *)v41;
                    if (*(_QWORD *)v41 != 4)
                    {
                      *(_QWORD *)v41 = v81 | 2;
                      v117 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((v81 & 1) != 0)
                      {
                        v180 = 2 * *v117;
                        while (v180 * 4)
                        {
                          v181 = *(_QWORD *)&v117[v180];
                          if ((*(_BYTE *)(v181 + 19) & 0xC) == 0)
                          {
                            v182 = *(_QWORD *)(v181 + 96);
                            v183 = (v182 & 1) != 0 ? (v182 >> 1) & 3 : *(unsigned __int8 *)(v182 + 4);
                            v180 -= 2;
                            if (v183 != 2)
                              continue;
                          }
                          v362 = a5;
                          v367 = v8;
                          WTF::fastFree((unint64_t)v117, (void *)a2, a3, a4, a5, a6, a7, a8);
                          v8 = v367;
                          a5 = v362;
                          goto LABEL_152;
                        }
                      }
                      else if (v117)
                      {
                        if ((*((_BYTE *)v117 + 19) & 0xC) != 0
                          || ((v118 = *((_QWORD *)v117 + 12), (v118 & 1) != 0)
                            ? (v119 = (v118 >> 1) & 3)
                            : (v119 = *(unsigned __int8 *)(v118 + 4)),
                              v119 == 2))
                        {
LABEL_152:
                          *(_QWORD *)v41 = 4;
                        }
                      }
                    }
                    *(_DWORD *)(v40 + 32 * v37 + 16) = -21020677;
                  }
                  if ((v42 & 1) != 0)
                    *(_QWORD *)v41 &= ~2uLL;
                }
                *(_DWORD *)(v41 + 20) = v42;
              }
              v44 = *((_QWORD *)v9 + 4);
              if ((*(_QWORD *)(v41 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
              {
                v45 = *((_QWORD *)this + 702);
                v46 = *(_QWORD *)(v45 + 8);
                v47 = *(unsigned int *)((v44 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                v48 = (uint64_t *)(v46 + 24);
                v49 = (uint64_t *)(v46 + 8);
                if ((v44 & 1) != 0)
                  v49 = v48;
                v50 = *v49;
                v51 = *v49 + 32 * v47;
                v52 = *(_DWORD *)(v45 + 88);
                v53 = *(_DWORD *)(v51 + 20);
                if (v52 != v53)
                {
                  if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
                  {
                    if ((v53 ^ v52) >= 2)
                    {
                      v82 = *(_QWORD *)v51;
                      if (*(_QWORD *)v51 != 4)
                      {
                        *(_QWORD *)v51 = v82 | 2;
                        v120 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFFCLL);
                        if ((v82 & 1) != 0)
                        {
                          v184 = 2 * *v120;
                          while (v184 * 4)
                          {
                            v185 = *(_QWORD *)&v120[v184];
                            if ((*(_BYTE *)(v185 + 19) & 0xC) == 0)
                            {
                              v186 = *(_QWORD *)(v185 + 96);
                              v187 = (v186 & 1) != 0 ? (v186 >> 1) & 3 : *(unsigned __int8 *)(v186 + 4);
                              v184 -= 2;
                              if (v187 != 2)
                                continue;
                            }
                            v363 = a5;
                            v188 = v8;
                            WTF::fastFree((unint64_t)v120, (void *)v44, a3, a4, a5, a6, a7, a8);
                            v8 = v188;
                            a5 = v363;
                            goto LABEL_159;
                          }
                        }
                        else if (v120)
                        {
                          if ((*((_BYTE *)v120 + 19) & 0xC) != 0
                            || ((v121 = *((_QWORD *)v120 + 12), (v121 & 1) != 0)
                              ? (v122 = (v121 >> 1) & 3)
                              : (v122 = *(unsigned __int8 *)(v121 + 4)),
                                v122 == 2))
                          {
LABEL_159:
                            *(_QWORD *)v51 = 4;
                          }
                        }
                      }
                      *(_DWORD *)(v50 + 32 * v47 + 16) = -21020677;
                    }
                    if ((v52 & 1) != 0)
                      *(_QWORD *)v51 &= ~2uLL;
                  }
                  *(_DWORD *)(v51 + 20) = v52;
                }
                if ((*(_QWORD *)(v51 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
                  goto LABEL_298;
                v44 = *((_QWORD *)v9 + 3);
              }
              JSC::DFG::SpeculativeJIT::nonSpeculativePeepholeBranchNullOrUndefined((uint64_t)this, v44, v19, a4, a5, a6, a7, a8);
              goto LABEL_62;
            }
            a2 = *(_QWORD *)(a2 + 24);
            a3 = *((_QWORD *)v9 + 4);
          }
          JSC::DFG::SpeculativeJIT::compilePeepHoleObjectToObjectOrOtherEquality((uint64_t)this, a2, a3, *(_QWORD *)(v15 + 8 * v18), a5, a6, a7, a8);
          goto LABEL_62;
        }
        v27 = *(_QWORD *)(a2 + 32) & 0xFC000000000000;
        v28 = 0x54000000000000;
      }
      if (v27 != v28)
        goto LABEL_39;
    }
  }
  v31 = *(_QWORD *)(a2 + 24);
  v32 = (v31 >> 50) & 0x3F;
  if (((v31 >> 50) & 0x3F) > 0x30)
  {
    if ((_DWORD)v32 == 52)
    {
      if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0xD0000000000000)
      {
        JSC::DFG::SpeculativeJIT::compileInt52Compare((uint64_t *)this, a2, v8);
        return 0;
      }
    }
    else if ((_DWORD)v32 == 49 && (*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0xC4000000000000)
    {
      JSC::DFG::SpeculativeJIT::compileDoubleCompare((uint64_t)this, a2, a4, a4, a5, a6, a7, a8);
      return 0;
    }
    goto LABEL_67;
  }
  if ((_DWORD)v32 == 1)
  {
    if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x4000000000000)
    {
      JSC::DFG::SpeculativeJIT::compileInt32Compare((uint64_t)this, a2, v8, a4, a5, a6, a7, a8);
      return 0;
    }
    goto LABEL_67;
  }
  if ((_DWORD)v32 != 21)
  {
    if ((_DWORD)v32 == 20)
    {
      v33 = *(unsigned __int16 *)(a2 + 18);
      if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x50000000000000)
      {
        if (v33 == 237)
          JSC::DFG::SpeculativeJIT::compileStringIdentEquality(this, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
        else
          JSC::DFG::SpeculativeJIT::compileStringIdentCompare((unsigned int *)this, a2, v8, a4, a5, a6, a7, a8);
        return 0;
      }
      if (v33 != 237)
      {
LABEL_300:
        v202 = (JSC::DFG::Node *)(v31 & 0xFF00FFFFFFFFFFFFLL);
        v364 = a5;
        if ((v31 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v203 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
          if (v203 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197BBA030);
          }
          v204 = v8;
          if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v203 + 12))
          {
            v205 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
            goto LABEL_304;
          }
        }
        else
        {
          v204 = v8;
        }
        v205 = -1;
LABEL_304:
        v206 = *((_QWORD *)v9 + 4);
        v207 = (JSC::DFG::Node *)(v206 & 0xFF00FFFFFFFFFFFFLL);
        if ((v206 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_337;
        v208 = ~*(_DWORD *)((v206 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v208 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BBA038);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v208 + 12))
          v209 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)v9 + 4), a3, a4, a5, a6, a7, a8);
        else
LABEL_337:
          v209 = -1;
        JSC::DFG::SpeculativeJIT::speculate(this, a2, *((_QWORD *)v9 + 3), a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::speculate(this, v210, *((_QWORD *)v9 + 4), v211, v212, v213, v214, v215);
        if (v205 == -1)
          v205 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v31, v216, v217, v218, v219, v220, v221);
        if (v209 == -1)
          v209 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v206, v216, v217, v218, v219, v220, v221);
        v376 = (WTF *)v378;
        v377 = 2;
        v222 = *((_QWORD *)v9 + 3);
        v223 = *((_QWORD *)this + 688);
        v224 = *(unsigned int *)((v222 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v225 = (_QWORD *)(v223 + 24);
        v226 = (_QWORD *)(v223 + 8);
        if ((v222 & 1) != 0)
          v227 = v225;
        else
          v227 = v226;
        v228 = *v227 + 32 * v224;
        v229 = (void *)*((unsigned int *)this + 1396);
        if ((_DWORD)v229 != *(_DWORD *)(v228 + 20))
        {
          if ((*(_QWORD *)(v228 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v228, v229, v216, v217, v218, v219, v220, v221);
          else
            *(_DWORD *)(v228 + 20) = (_DWORD)v229;
        }
        v366 = v207;
        if ((*(_BYTE *)(v228 + 12) & 3) != 0)
        {
          v230 = *((_QWORD *)v9 + 4);
          v231 = *((_QWORD *)this + 688);
          v232 = *(unsigned int *)((v230 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v233 = (_QWORD *)(v231 + 24);
          v234 = (_QWORD *)(v231 + 8);
          if ((v230 & 1) != 0)
            v235 = v233;
          else
            v235 = v234;
          v236 = *v235 + 32 * v232;
          v237 = *((unsigned int *)this + 1396);
          if ((_DWORD)v237 != *(_DWORD *)(v236 + 20))
          {
            if ((*(_QWORD *)(v236 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v236, (void *)v237, v216, v217, v218, v219, v220, v221);
            else
              *(_DWORD *)(v236 + 20) = v237;
          }
          if ((*(_BYTE *)(v236 + 12) & 3) != 0)
          {
            v238 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v238 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BBA040);
            }
            if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v238 + 8) == 1)
            {
              v239 = v205;
              if (v205 == -1)
                v239 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v31, v216, v217, v218, v219, v220, v221);
              if (v239 > 15)
                v240 = -1;
              else
                v240 = v239;
              ++*((_DWORD *)this + 3 * v240 + 1196);
              v241 = v239;
            }
            else
            {
              v241 = JSC::DFG::SpeculativeJIT::allocate(this, v237, v216, v217, v218, v219, v220, v221);
              v239 = v205;
            }
            JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v202, v216, v217, v218, v219, v220, v221);
            JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v366, v242, v243, v244, v245, v246, v247);
            v254 = *((_QWORD *)v9 + 3);
            v255 = *((_QWORD *)this + 688);
            if ((v254 & 1) != 0)
              v256 = (_QWORD *)(v255 + 24);
            else
              v256 = (_QWORD *)(v255 + 8);
            v257 = *v256 + 32 * *(unsigned int *)((v254 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v258 = (void *)*((unsigned int *)this + 1396);
            if ((_DWORD)v258 != *(_DWORD *)(v257 + 20))
            {
              if ((*(_QWORD *)(v257 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v257, v258, (uint64_t)v248, v249, v250, v251, v252, v253);
              else
                *(_DWORD *)(v257 + 20) = (_DWORD)v258;
            }
            if ((*(_QWORD *)(v257 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
            {
              JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, v205, 27, v250, v251, v252, v253, (uint64_t)&v374);
              v259 = v374;
              if (v374 != -1)
              {
                v260 = HIDWORD(v377);
                if (HIDWORD(v377) == (_DWORD)v377)
                {
                  v261 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v376, (void *)(HIDWORD(v377) + 1), (unint64_t)&v374, v249, v250, v251, v252, v253);
                  v263 = *v261;
                  v262 = (uint64_t *)(v261 + 1);
                  v259 = v263;
                  v260 = HIDWORD(v377);
                }
                else
                {
                  v262 = &v375;
                }
                v299 = (char *)v376 + 12 * v260;
                *(_DWORD *)v299 = v259;
                *(_QWORD *)(v299 + 4) = *v262;
                ++HIDWORD(v377);
              }
            }
            v300 = *((_QWORD *)v9 + 4);
            v301 = *((_QWORD *)this + 688);
            if ((v300 & 1) != 0)
              v302 = (_QWORD *)(v301 + 24);
            else
              v302 = (_QWORD *)(v301 + 8);
            v303 = *v302 + 32 * *(unsigned int *)((v300 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v304 = *((unsigned int *)this + 1396);
            if ((_DWORD)v304 != *(_DWORD *)(v303 + 20))
            {
              if ((*(_QWORD *)(v303 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v303, (void *)v304, (uint64_t)v248, v249, v250, v251, v252, v253);
              else
                *(_DWORD *)(v303 + 20) = v304;
            }
            if ((*(_QWORD *)(v303 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0)
            {
              JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, v209, 27, v250, v251, v252, v253, (uint64_t)&v372);
              v305 = v372;
              if (v372 != -1)
              {
                v306 = HIDWORD(v377);
                if (HIDWORD(v377) == (_DWORD)v377)
                {
                  v307 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v376, (void *)(HIDWORD(v377) + 1), (unint64_t)&v372, v249, v250, v251, v252, v253);
                  v309 = *v307;
                  v308 = v307 + 1;
                  v305 = v309;
                  v306 = HIDWORD(v377);
                }
                else
                {
                  v308 = &v373;
                }
                v310 = (char *)v376 + 12 * v306;
                *(_DWORD *)v310 = v305;
                *(_QWORD *)(v310 + 4) = *(_QWORD *)v308;
                ++HIDWORD(v377);
              }
            }
            v311 = (v209 & 0x1F) << 16;
            if (v205 == 31)
            {
              v312 = v311 | 0x6B2063FF;
              v313 = *((_DWORD *)this + 50);
              if (v313 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v304, (uint64_t)v248, v249, v250, v251, v252, v253);
                v313 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v313) = v312;
              v314 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v314;
            }
            else
            {
              JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v311 | (32 * (v205 & 0x1F)) | 0x6B00001Fu, (uint64_t)v248, v249, v250, v251, v252, v253);
              v314 = *((_DWORD *)this + 50);
            }
            if (v314 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v304, (uint64_t)v248, v249, v250, v251, v252, v253);
              v314 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v314) = (v241 & 0x1F | ((v204 & 0xF) << 12)) ^ 0x1A9F17E0;
            *((_DWORD *)this + 50) += 4;
            v315 = *((_QWORD *)v9 + 3);
            v316 = *((_QWORD *)this + 688);
            if ((v315 & 1) != 0)
              v317 = (_QWORD *)(v316 + 24);
            else
              v317 = (_QWORD *)(v316 + 8);
            v318 = *v317 + 32 * *(unsigned int *)((v315 & 0xFF00FFFFFFFFFFFELL) + 0x14);
            v319 = (void *)*((unsigned int *)this + 1396);
            if ((_DWORD)v319 != *(_DWORD *)(v318 + 20))
            {
              if ((*(_QWORD *)(v318 + 8) & 0x2800FFFFFFF7) != 0)
                JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v318, v319, (uint64_t)v248, v249, v250, v251, v252, v253);
              else
                *(_DWORD *)(v318 + 20) = (_DWORD)v319;
            }
            if ((*(_QWORD *)(v318 + 8) & 0xFFFFFFFCFFFFFFFFLL) != 0
              || !JSC::DFG::SpeculativeJIT::isKnownInteger(this, *((_QWORD *)v9 + 4) & 0xFF00FFFFFFFFFFFFLL, (uint64_t)v248, v249, v250, v251, v252, v253))
            {
              v320 = HIDWORD(v377);
              v368 = (WTF *)v370;
              v369 = HIDWORD(v377);
              if (HIDWORD(v377) < 3)
              {
                v321 = v370;
              }
              else
              {
                if (HIDWORD(v377) >= 0x15555556)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197BBA084);
                }
                v321 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v377)));
                v368 = (WTF *)v321;
                v320 = HIDWORD(v377);
              }
              if (v320)
              {
                v322 = v376;
                v323 = (WTF *)((char *)v376 + 12 * v320);
                do
                {
                  *(_DWORD *)v321 = *(_DWORD *)v322;
                  *(_QWORD *)(v321 + 4) = *(_QWORD *)((char *)v322 + 4);
                  v322 = (WTF *)((char *)v322 + 12);
                  v321 += 12;
                }
                while (v322 != v323);
              }
              v324 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v9, v248, v249, v250, v251, v252, v253);
              v326 = v325;
              v327 = v369;
              v379 = (char *)v382;
              v380 = 2;
              v381 = v369;
              if (v369 < 3)
              {
                v328 = v382;
              }
              else
              {
                if (v369 >= 0x15555556)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197BBA08CLL);
                }
                v328 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v369));
                v380 = 12 * v369 / 0xC;
                v379 = (char *)v328;
                v327 = v369;
              }
              if (v327)
              {
                v329 = v368;
                v330 = (WTF *)((char *)v368 + 12 * v327);
                do
                {
                  *v328 = *(_DWORD *)v329;
                  *(_QWORD *)(v328 + 1) = *(_QWORD *)((char *)v329 + 4);
                  v329 = (WTF *)((char *)v329 + 12);
                  v328 += 3;
                }
                while (v329 != v330);
              }
              *(_QWORD *)&v389 = v324;
              *((_QWORD *)&v389 + 1) = v326;
              v388 = v205;
              v387 = v209;
              v385 = v364;
              v386 = this;
              v384 = 0;
              v383 = v241;
              std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<unsigned long> (*&)(JSC::JSGlobalObject *,long long,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&,JSC::JSValueRegs&>((uint64_t *)&v379, &v386, &v385, (unsigned __int8 *)&v384 + 1, (char *)&v384, &v383, &v389, &v388, &v371, &v387);
              v338 = (unint64_t)v379;
              if (v382 != (_WORD *)v379 && v379)
              {
                v379 = 0;
                v380 = 0;
                WTF::fastFree(v338, v331, v332, v333, v334, v335, v336, v337);
              }
              v339 = (_QWORD *)((char *)this + 5656);
              v340 = *((unsigned int *)this + 1417);
              if ((_DWORD)v340 == *((_DWORD *)this + 1416))
              {
                v342 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v339, v340 + 1, (unint64_t)&v371);
                v340 = *((unsigned int *)this + 1417);
                v341 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v340);
              }
              else
              {
                v341 = (uint64_t *)(*v339 + 8 * v340);
                v342 = &v371;
              }
              v343 = *v342;
              *v342 = 0;
              *v341 = v343;
              *((_DWORD *)this + 1417) = v340 + 1;
              v344 = v371;
              v371 = 0;
              if (v344)
                (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
              if (v370 != (_BYTE *)v368 && v368)
                WTF::fastFree((unint64_t)v368, v331, v332, v333, v334, v335, v336, v337);
            }
            JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v241, v241);
            v345 = (char *)this + 4776;
            v346 = *((_DWORD *)v9 + 12);
            if (v241 > 15)
              v347 = -1;
            else
              v347 = v241;
            v348 = &v345[12 * v347];
            *(_DWORD *)v348 = v346;
            *((_DWORD *)v348 + 1) = 4;
            v349 = ~v346;
            if (v349 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BBA06CLL);
            }
            v350 = *((_QWORD *)this + 499) + 24 * (int)v349;
            v351 = *((_DWORD *)v9 + 13);
            *(_QWORD *)v350 = v9;
            *(_DWORD *)(v350 + 8) = v351;
            *(_BYTE *)(v350 + 17) = v241;
            *(_DWORD *)(v350 + 12) = 21;
            *(_BYTE *)(v350 + 16) = 0;
            if (v241 == -1)
              goto LABEL_394;
            v296 = &v345[12 * v347 + 8];
            v205 = v239;
LABEL_393:
            --*(_DWORD *)v296;
            v239 = v205;
LABEL_394:
            v352 = v376;
            if (v378 != (_BYTE *)v376 && v376)
            {
              v376 = 0;
              LODWORD(v377) = 0;
              WTF::fastFree((unint64_t)v352, v287, v288, v289, v290, v291, v292, v293);
            }
            if (v366)
            {
              if (v209 > 15)
                v353 = -1;
              else
                v353 = v209;
              --*((_DWORD *)this + 3 * v353 + 1196);
            }
            if (v202)
            {
              if (v239 > 15)
                v354 = -1;
              else
                v354 = v239;
              --*((_DWORD *)this + 3 * v354 + 1196);
            }
            return 0;
          }
        }
        ++*((_DWORD *)this + 1196);
        v264 = *((unsigned int *)this + 1194);
        if ((_DWORD)v264 != 0x3FFFFFFF)
        {
          *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v264, v216, v217, v218, v219, v220, v221);
        }
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v31 & 0xFF00FFFFFFFFFFFFLL), v216, v217, v218, v219, v220, v221);
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v207, v265, v266, v267, v268, v269, v270);
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v271, v272, v273, v274, v275, v276, v277);
        v284 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v9, v278, v279, v280, v281, v282, v283);
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v379, (int *)this, v364, v284, v285, v205, v209, v286);
        JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
        v294 = *((_DWORD *)v9 + 12);
        *((_DWORD *)this + 1194) = v294;
        *((_DWORD *)this + 1195) = 4;
        v295 = ~v294;
        if (v295 < *((unsigned int *)this + 1001))
        {
          v296 = (char *)this + 4784;
          v297 = *((_DWORD *)v9 + 13);
          v298 = *((_QWORD *)this + 499) + 24 * (int)v295;
          *(_QWORD *)v298 = v9;
          *(_DWORD *)(v298 + 8) = v297;
          *(_BYTE *)(v298 + 12) = 21;
          *(_DWORD *)(v298 + 13) = 0;
          *(_BYTE *)(v298 + 17) = 0;
          goto LABEL_393;
        }
        __break(0xC471u);
LABEL_443:
        JUMPOUT(0x197BB95A8);
      }
      goto LABEL_91;
    }
LABEL_67:
    if (*(_WORD *)(a2 + 18) != 237)
      goto LABEL_300;
    if (((v31 >> 50) & 0x3F) > 0x12)
    {
      if ((_DWORD)v32 == 25)
      {
        if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x64000000000000)
        {
          JSC::DFG::SpeculativeJIT::compileSymbolEquality(this, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
          return 0;
        }
        goto LABEL_91;
      }
      if ((_DWORD)v32 != 19 || (a2 = *(_QWORD *)(a2 + 32), (a2 & 0xFC000000000000) != 0x2C000000000000))
      {
LABEL_91:
        v62 = *((_QWORD *)this + 702);
        v63 = *(_QWORD *)(v62 + 8);
        v64 = *(unsigned int *)((v31 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v65 = (uint64_t *)(v63 + 24);
        v66 = (uint64_t *)(v63 + 8);
        if ((v31 & 1) != 0)
          v66 = v65;
        v67 = *v66;
        v68 = *v66 + 32 * v64;
        v69 = *(_DWORD *)(v62 + 88);
        v70 = *(_DWORD *)(v68 + 20);
        if (v69 != v70)
        {
          if ((*(_QWORD *)(v68 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v70 ^ v69) >= 2)
            {
              v115 = *(_QWORD *)v68;
              if (*(_QWORD *)v68 != 4)
              {
                *(_QWORD *)v68 = v115 | 2;
                v161 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v115 & 1) != 0)
                {
                  v189 = 2 * *v161;
                  while (v189 * 4)
                  {
                    v190 = *(_QWORD *)&v161[v189];
                    if ((*(_BYTE *)(v190 + 19) & 0xC) == 0)
                    {
                      v191 = *(_QWORD *)(v190 + 96);
                      v192 = (v191 & 1) != 0 ? (v191 >> 1) & 3 : *(unsigned __int8 *)(v191 + 4);
                      v189 -= 2;
                      if (v192 != 2)
                        continue;
                    }
                    v197 = a5;
                    v198 = v8;
                    WTF::fastFree((unint64_t)v161, (void *)a2, a3, a4, a5, a6, a7, a8);
                    LOBYTE(v8) = v198;
                    a5 = v197;
                    goto LABEL_212;
                  }
                }
                else if (v161)
                {
                  if ((*((_BYTE *)v161 + 19) & 0xC) != 0
                    || ((v162 = *((_QWORD *)v161 + 12), (v162 & 1) != 0)
                      ? (v163 = (v162 >> 1) & 3)
                      : (v163 = *(unsigned __int8 *)(v162 + 4)),
                        v163 == 2))
                  {
LABEL_212:
                    *(_QWORD *)v68 = 4;
                  }
                }
              }
              *(_DWORD *)(v67 + 32 * v64 + 16) = -21020677;
            }
            if ((v69 & 1) != 0)
              *(_QWORD *)v68 &= ~2uLL;
          }
          *(_DWORD *)(v68 + 20) = v69;
        }
        a2 = *((_QWORD *)v9 + 4);
        if ((*(_QWORD *)(v68 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
        {
          v71 = *((_QWORD *)this + 702);
          v72 = *(_QWORD *)(v71 + 8);
          v73 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
          v74 = (uint64_t *)(v72 + 24);
          v75 = (uint64_t *)(v72 + 8);
          if ((a2 & 1) != 0)
            v75 = v74;
          v76 = *v75;
          v77 = *v75 + 32 * v73;
          v78 = *(_DWORD *)(v71 + 88);
          v79 = *(_DWORD *)(v77 + 20);
          if (v78 != v79)
          {
            if ((*(_QWORD *)(v77 + 8) & 0x2800FFFFFFF7) != 0)
            {
              if ((v79 ^ v78) >= 2)
              {
                v116 = *(_QWORD *)v77;
                if (*(_QWORD *)v77 != 4)
                {
                  *(_QWORD *)v77 = v116 | 2;
                  v164 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((v116 & 1) != 0)
                  {
                    v193 = 2 * *v164;
                    while (v193 * 4)
                    {
                      v194 = *(_QWORD *)&v164[v193];
                      if ((*(_BYTE *)(v194 + 19) & 0xC) == 0)
                      {
                        v195 = *(_QWORD *)(v194 + 96);
                        v196 = (v195 & 1) != 0 ? (v195 >> 1) & 3 : *(unsigned __int8 *)(v195 + 4);
                        v193 -= 2;
                        if (v196 != 2)
                          continue;
                      }
                      v199 = a5;
                      v200 = v8;
                      WTF::fastFree((unint64_t)v164, (void *)a2, a3, a4, a5, a6, a7, a8);
                      LOBYTE(v8) = v200;
                      a5 = v199;
                      goto LABEL_219;
                    }
                  }
                  else if (v164)
                  {
                    if ((*((_BYTE *)v164 + 19) & 0xC) != 0
                      || ((v165 = *((_QWORD *)v164 + 12), (v165 & 1) != 0)
                        ? (v166 = (v165 >> 1) & 3)
                        : (v166 = *(unsigned __int8 *)(v165 + 4)),
                          v166 == 2))
                    {
LABEL_219:
                      *(_QWORD *)v77 = 4;
                    }
                  }
                }
                *(_DWORD *)(v76 + 32 * v73 + 16) = -21020677;
              }
              if ((v78 & 1) != 0)
                *(_QWORD *)v77 &= ~2uLL;
            }
            *(_DWORD *)(v77 + 20) = v78;
          }
          v31 = *((_QWORD *)v9 + 3);
          if ((*(_QWORD *)(v77 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
            goto LABEL_300;
          v80 = this;
          a2 = *((_QWORD *)v9 + 3);
        }
        else
        {
          v80 = this;
        }
        JSC::DFG::SpeculativeJIT::nonSpeculativeNonPeepholeCompareNullOrUndefined((uint64_t)v80, a2, a3, a4, a5, a6, a7, a8);
        return 0;
      }
      a3 = *((_QWORD *)v9 + 3);
    }
    else
    {
      if ((_DWORD)v32 == 6)
      {
        if ((*(_QWORD *)(a2 + 32) & 0xFC000000000000) == 0x18000000000000)
        {
          JSC::DFG::SpeculativeJIT::compileBooleanCompare((uint64_t)this, a2, v8, a4, a5, a6, a7, a8);
          return 0;
        }
        goto LABEL_91;
      }
      if ((_DWORD)v32 != 11)
        goto LABEL_91;
      a3 = *(_QWORD *)(a2 + 32);
      if ((a3 & 0xFC000000000000) == 0x2C000000000000)
      {
        JSC::DFG::SpeculativeJIT::compileObjectEquality(this, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
        return 0;
      }
      if ((a3 & 0xFC000000000000) != 0x4C000000000000)
        goto LABEL_91;
      a2 = *(_QWORD *)(a2 + 24);
    }
    JSC::DFG::SpeculativeJIT::compileObjectToObjectOrOtherEquality((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v61 = *(_QWORD *)(a2 + 32);
  if ((v61 & 0xFC000000000000) != 0x54000000000000)
    goto LABEL_67;
  if (*(_WORD *)(a2 + 18) == 237)
  {
    JSC::DFG::SpeculativeJIT::compileStringEquality(this, (JSC::DFG::Node *)a2, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if ((v31 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v83 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v83 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BBA074);
    }
    v84 = v8;
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v83 + 12))
    {
      v85 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8);
      v61 = *((_QWORD *)v9 + 4);
      goto LABEL_122;
    }
  }
  else
  {
    v84 = v8;
  }
  v85 = -1;
  if ((v61 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_220;
LABEL_122:
  v86 = ~*(_DWORD *)((v61 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v86 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBA07CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v86 + 12))
    v87 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v61, a3, a4, a5, a6, a7, a8);
  else
LABEL_220:
    v87 = -1;
  if (v85 == -1)
    v85 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v31, a3, a4, a5, a6, a7, a8);
  if (v87 == -1)
    v87 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v61, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)v9 + 3), v85, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)v9 + 4), v87, v88, v89, v90, v91, v92);
  if ((v84 - 10) >= 4)
  {
    __break(0xC471u);
LABEL_294:
    __break(1u);
LABEL_295:
    __break(0xC471u);
    goto LABEL_443;
  }
  v365 = off_1E35748B8[v84 - 10];
  ++*((_DWORD *)this + 1196);
  v99 = *((unsigned int *)this + 1194);
  if ((_DWORD)v99 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v99, v93, v94, v95, v96, v97, v98);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v99, v93, v94, v95, v96, v97, v98);
  v106 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v9, v100, v101, v102, v103, v104, v105);
  v360 = v107;
  v361 = v106;
  v379 = (char *)v382;
  v380 = 2;
  if (v85 == 1)
  {
    if (v87 == 2)
      goto LABEL_194;
    v114 = 0;
  }
  else
  {
    v382[0] = v85 | 0x100;
    v114 = 1;
    v381 = 1;
    if (v87 == 2)
      goto LABEL_163;
  }
  v382[v114++] = v87 | 0x200;
  v381 = v114;
  do
  {
LABEL_163:
    v123 = 0;
    v124 = 0;
    v125 = v379;
    v126 = v114;
    do
    {
      if ((v379[v123 + 1] & 0x40) != 0)
        goto LABEL_294;
      v124 |= 1 << v379[v123 + 1];
      v123 += 2;
    }
    while (2 * v114 != v123);
    v127 = 0;
    do
    {
      v128 = v379[v127] & 0x7F;
      if (v128 >= 0x40)
        goto LABEL_294;
      v124 &= ~(1 << v128);
      v127 += 2;
    }
    while (2 * v114 != v127);
    v129 = (uint8x8_t)vcnt_s8((int8x8_t)v124);
    v129.i16[0] = vaddlv_u8(v129);
    v130 = v129.i32[0];
    v131 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v124));
    v131.i16[0] = vaddlv_u8(v131);
    if (v131.i32[0] + v130)
    {
      v132 = 0;
      if (v114 <= 1uLL)
        v133 = 1;
      else
        v133 = v114;
      v134 = 2 * v133;
      while (1)
      {
        v135 = v379[v132 + 1];
        if ((v135 & 0x7Fu) >= 0x40)
          goto LABEL_294;
        if (((v124 >> (v135 & 0x7F)) & 1) != 0)
          break;
        v132 += 2;
        if (v134 == v132)
          goto LABEL_188;
      }
      v136 = v379[v132];
      if (v136 == v135)
        goto LABEL_186;
      v137 = (char)v136;
      if ((char)v136 == 63)
      {
        v138 = *((_DWORD *)this + 50);
        v139 = *((_DWORD *)this + 48);
        if ((char)v135 != 31)
        {
          v141 = v135 & 0x1F | 0xD2800000;
          goto LABEL_183;
        }
      }
      else
      {
        v138 = *((_DWORD *)this + 50);
        v139 = *((_DWORD *)this + 48);
        if (v135 != 31 && v137 != 31)
        {
          v141 = v135 & 0xFFE0FFFF | ((v137 & 0x1F) << 16) | 0xAA0003E0;
LABEL_183:
          if (v138 + 4 > v139)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v107, v108, v109, v110, v111, v112, v113);
            v138 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v138) = v141;
          *((_DWORD *)this + 50) += 4;
          v125 = v379;
          v126 = v381;
LABEL_186:
          memmove(&v125[v132], &v125[v132 + 2], 2 * v126 - v132 - 2);
          v114 = v381 - 1;
          goto LABEL_187;
        }
      }
      v141 = (char)v135 | (32 * v137) | 0x91000000;
      goto LABEL_183;
    }
    v167 = *v379;
    v358 = v379[1];
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *v379, v358, v109, v110, v111, v112, v113);
    memmove(v379, v379 + 2, 2 * v381 - 2);
    v168 = v381;
    v169 = v381 - 1;
    v381 = v169;
    v170 = (unsigned __int8 *)v379;
    v171 = (unsigned __int8 *)&v379[2 * v169];
    if (v168 == 1)
    {
      v177 = 0;
      v178 = 0;
      v107 = (JSC::ARM64LogicalImmediate *)&v379[2 * v169];
    }
    else
    {
      v172 = 2 * v169;
      v173 = v379;
      while (*v173 != v358)
      {
        v173 += 2;
        v172 -= 2;
        if (!v172)
          goto LABEL_229;
      }
      *v173 = v167;
LABEL_229:
      LODWORD(v169) = 0;
      v174 = v170;
      v107 = (JSC::ARM64LogicalImmediate *)v171;
      v175 = v171;
      do
      {
        if (*v170 == v170[1])
        {
          v176 = v170;
          if (v175 != (unsigned __int8 *)&v379[2 * v381])
          {
            v357 = v169;
            v359 = v171;
            if (v170 == (unsigned __int8 *)v107)
            {
              v176 = v175;
            }
            else
            {
              v355 = v174 - (unsigned __int8 *)v107;
              v356 = v175;
              memmove(v175, v107, v174 - (unsigned __int8 *)v107);
              v176 = &v356[v355];
            }
            v171 = v359;
            LODWORD(v169) = v357;
          }
          v107 = (JSC::ARM64LogicalImmediate *)(v170 + 2);
          LODWORD(v169) = v169 + 1;
          v175 = v176;
        }
        v170 += 2;
        v174 += 2;
      }
      while (v170 < v171);
      v170 = (unsigned __int8 *)v379;
      v177 = v381;
      v178 = v381;
      v171 = v175;
    }
    v179 = (char *)&v170[2 * v177];
    if (v107 != (JSC::ARM64LogicalImmediate *)v179)
    {
      v201 = v169;
      memmove(v171, v107, v179 - (char *)v107);
      LODWORD(v169) = v201;
      v178 = v381;
    }
    v114 = v178 - v169;
LABEL_187:
    v381 = v114;
LABEL_188:
    ;
  }
  while (v114);
  v142 = (unint64_t)v379;
  if (v382 != (_WORD *)v379 && v379)
  {
    v379 = 0;
    v380 = 0;
    WTF::fastFree(v142, v107, v108, v109, v110, v111, v112, v113);
  }
LABEL_194:
  if ((_DWORD)v361 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v360, 0, v109, v110, v111, v112, v113);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v361 << 35) + 0x380000001ALL, 0, v109, v110, v111, v112, v113);
  v149 = (char *)this + 4776;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v365, v143, v144, v145, v146, v147, v148, (int *)&v379);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v150, v151, v152, v153, v154, v155);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)v9, 21, 0, v156, v157, v158);
  --*((_DWORD *)this + 1196);
  if ((v61 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v87 > 15)
      v159 = -1;
    else
      v159 = v87;
    --*(_DWORD *)&v149[12 * v159 + 8];
  }
  if ((v31 & 0xFF00FFFFFFFFFFFFLL) == 0)
    return 0;
  result = 0;
  if (v85 > 15)
    v160 = -1;
  else
    v160 = v85;
  --*(_DWORD *)&v149[12 * v160 + 8];
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileInt32Compare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unsigned int v36;
  unsigned int v37;
  JSC::DFG::SpeculativeJIT *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  int v45;
  __int128 *v46;
  uint64_t v47;
  signed __int8 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  int v58;
  __int128 *v59;
  uint64_t v60;
  signed __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  JSC::DFG::SpeculativeJIT *v67;
  unint64_t v68;
  char v69;
  _BYTE v70[7];
  JSC::DFG::SpeculativeJIT *v71;
  unint64_t v72;
  unsigned __int8 v73;
  _BYTE v74[7];

  v8 = a3;
  v11 = *(_QWORD *)(a2 + 24);
  if (*(unsigned __int16 *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v40 = *(_QWORD *)(a2 + 32);
    v71 = (JSC::DFG::SpeculativeJIT *)a1;
    v72 = v40;
    v73 = -1;
    v41 = ~*(_DWORD *)((v40 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v42 = *(unsigned int *)(a1 + 4004);
    if (v41 >= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197BBA76CLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v41 + 12))
    {
      v43 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v40, (uint64_t)v74, a4, a5, a6, a7, a8);
      v73 = v43;
      v40 = v72;
      v42 = *(unsigned int *)(a1 + 4004);
      v41 = ~*(_DWORD *)((v72 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v43 = -1;
    }
    if (v41 >= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197BBA774);
    }
    if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v41 + 8) == 1)
    {
      if (v43 == -1)
      {
        v43 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v71, v40, (uint64_t)v74, a4, a5, a6, a7, a8);
        v73 = v43;
      }
      if (v43 > 15)
        v44 = -1;
      else
        v44 = v43;
      ++*(_DWORD *)(a1 + 12 * v44 + 4784);
    }
    else
    {
      v43 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v40, a3, a4, a5, a6, a7, a8);
    }
    v45 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v45 == 355 || v45 == 348)
    {
      v46 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v46 = *(__int128 **)((*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v47 = *(unsigned int *)v46;
    v48 = v73;
    if (v73 == 255)
    {
      v48 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v71, v72, (uint64_t)v74, a4, a5, a6, a7, a8);
      v73 = v48;
    }
    v49 = v8 - 2;
    if ((v8 - 2) <= 0xB && ((0xFC3u >> v49) & 1) != 0)
      v8 = dword_199123E40[v49];
    JSC::MacroAssemblerARM64::compare32(a1, v8, v48, v47, v43, a6, a7, a8);
    JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v43, v43);
    result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v43, a2, 21, 0, v50, v51, v52);
    if (v43 == -1)
      goto LABEL_53;
    v53 = v43 <= 15;
LABEL_49:
    if (v53)
      v54 = v43;
    else
      v54 = -1;
    --*(_DWORD *)(a1 + 12 * v54 + 4784);
LABEL_53:
    v38 = v71;
    v39 = (char)v73;
    goto LABEL_54;
  }
  v12 = *(_QWORD *)(a2 + 32);
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
    && **(_QWORD **)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >= 0xFFFE000000000000)
  {
    v71 = (JSC::DFG::SpeculativeJIT *)a1;
    v72 = v11;
    v73 = -1;
    v55 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v56 = *(unsigned int *)(a1 + 4004);
    if (v55 >= v56)
    {
      __break(0xC471u);
      JUMPOUT(0x197BBA77CLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v55 + 12))
    {
      v43 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v11, (uint64_t)v74, a4, a5, a6, a7, a8);
      v73 = v43;
      v11 = v72;
      v56 = *(unsigned int *)(a1 + 4004);
      v55 = ~*(_DWORD *)((v72 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v43 = -1;
    }
    if (v55 < v56)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v55 + 8) == 1)
      {
        if (v43 == -1)
        {
          v43 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v71, v11, (uint64_t)v74, a4, a5, a6, a7, a8);
          v73 = v43;
        }
        if (v43 > 15)
          v57 = -1;
        else
          v57 = v43;
        ++*(_DWORD *)(a1 + 12 * v57 + 4784);
      }
      else
      {
        v43 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v11, a3, a4, a5, a6, a7, a8);
      }
      v58 = *(unsigned __int16 *)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v58 == 355 || v58 == 348)
      {
        v59 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
      }
      else
      {
        v59 = *(__int128 **)((*(_QWORD *)(a2 + 32) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      }
      v60 = *(unsigned int *)v59;
      v61 = v73;
      if (v73 == 255)
      {
        v61 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v71, v72, (uint64_t)v74, a4, a5, a6, a7, a8);
        v73 = v61;
      }
      JSC::MacroAssemblerARM64::compare32(a1, v8, v61, v60, v43, a6, a7, a8);
      JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v43, v43);
      result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v43, a2, 21, 0, v62, v63, v64);
      if (v43 == -1)
        goto LABEL_53;
      v53 = v43 <= 15;
      goto LABEL_49;
    }
    __break(0xC471u);
LABEL_91:
    JUMPOUT(0x197BBA738);
  }
  v71 = (JSC::DFG::SpeculativeJIT *)a1;
  v72 = v11;
  v73 = -1;
  v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v15 = *(unsigned int *)(a1 + 4004);
  if (v14 >= v15)
  {
    __break(0xC471u);
    goto LABEL_91;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v14 + 12))
  {
    v73 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v11, (uint64_t)v74, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)(a2 + 32);
    v15 = *(unsigned int *)(a1 + 4004);
    v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  }
  v67 = (JSC::DFG::SpeculativeJIT *)a1;
  v68 = v12;
  v69 = -1;
  v16 = ~*(_DWORD *)(v13 + 48);
  if (v16 >= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197BBA740);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
    v69 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)a1, v12, (uint64_t)v70, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateInt32Operand>((uint64_t)&v65, (JSC::DFG::SpeculativeJIT *)a1, (uint64_t)&v71, (uint64_t)&v67, a5, a6, a7, a8);
  v24 = v73;
  if (v73 == 255)
  {
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v71, v72, (uint64_t)v74, v19, v20, v21, v22, v23);
    v73 = v24;
  }
  v25 = v69;
  if (v69 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v67, v68, (uint64_t)v70, v19, v20, v21, v22, v23);
    v69 = v25;
  }
  v26 = v66;
  v27 = (v25 & 0x1F) << 16;
  if (v24 == 31)
  {
    v28 = v27 | 0x6B2063FF;
    v29 = *(_DWORD *)(a1 + 200);
    if (v29 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
      v29 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
    v30 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v30;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v27 | (32 * (v24 & 0x1F)) | 0x6B00001Fu, v18, v19, v20, v21, v22, v23);
    v30 = *(_DWORD *)(a1 + 200);
  }
  if (v30 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    v30 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v30) = (v26 | ((_DWORD)v8 << 12)) & 0xF01F ^ 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  v31 = (char)v66;
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v66, (char)v66);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v31, a2, 21, 0, v32, v33, v34);
  if (v65)
  {
    v36 = (char)v66;
    if ((char)v66 != -1)
    {
      if ((char)v66 > 15)
        v36 = -1;
      --*(_DWORD *)(v65 + 12 * v36 + 4784);
    }
  }
  v37 = v69;
  if (v69 > 15)
    v37 = -1;
  --*((_DWORD *)v67 + 3 * v37 + 1196);
  v38 = v71;
  v39 = (char)v73;
LABEL_54:
  if (v39 > 15)
    v39 = -1;
  --*((_DWORD *)v38 + 3 * v39 + 1196);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileDoubleCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33[3];
  char v34;
  char v35;

  v8 = *(_QWORD *)(a2 + 24);
  if (((v8 >> 50) & 0x3F) - 49 >= 3)
    goto LABEL_24;
  v10 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBA9DCLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v10 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8);
  else
    v13 = -1;
  v14 = *(_QWORD *)(a2 + 32);
  if (((v14 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197BBA9D4);
  }
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x197BBA9B4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, *(_QWORD *)(a2 + 32), a3, a4, a5, a6, a7, a8);
  else
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v31, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, v8, v17, v18, v19, v20, v21, v22);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, v14, v17, v18, v19, v20, v21, v22);
  v23 = v32;
  v35 = v13;
  v34 = v16;
  v33[0] = (char *)a1;
  v33[1] = &v35;
  v33[2] = &v34;
  JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(a1, a3, v32, v33, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v23, v23);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v23, a2, 21, 0, v24, v25, v26);
  if (v31)
  {
    v28 = v32;
    if (v32 != -1)
    {
      if (v32 > 15)
        v28 = -1;
      --*(_DWORD *)(v31 + 12 * v28 + 4784);
    }
  }
  v29 = a1 + 4968 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v16];
  --*(_DWORD *)(v29 + 8);
  v30 = a1 + 4968 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v13];
  --*(_DWORD *)(v30 + 8);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileStringEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  char v61;
  char v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  WTF *v73;
  uint64_t v74;
  _BYTE v75[24];
  WTF *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_75;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_81;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_75:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_76;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBAEA0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_76:
    v15 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v86, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v84, this, v16, v17, v18, v19, v20, v21);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v82, this, v22, v23, v24, v25, v26, v27);
  v35 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v35 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBAEA8);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v35 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v29, v30, v31, v32, v33, v34);
    if (v12 > 15)
      v68 = -1;
    else
      v68 = v12;
    ++*((_DWORD *)this + 3 * v68 + 1196);
    v70 = v12;
  }
  else
  {
    v70 = JSC::DFG::SpeculativeJIT::allocate(this, v28, v29, v30, v31, v32, v33, v34);
  }
  v36 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v36 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_81:
    JUMPOUT(0x197BBAE98);
  }
  v72 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v71 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v36 + 8) == 1)
  {
    if (v15 == -1)
      v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, v29, v30, v31, v32, v33, v34);
    if (v15 > 15)
      v69 = -1;
    else
      v69 = v15;
    ++*((_DWORD *)this + 3 * v69 + 1196);
    v37 = v15;
  }
  else
  {
    v37 = JSC::DFG::SpeculativeJIT::allocate(this, v28, v29, v30, v31, v32, v33, v34);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v29, v30, v31, v32, v33, v34);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, v29, v30, v31, v32, v33, v34);
  v38 = v87;
  v39 = v85;
  v40 = v83;
  v41 = v12;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v41, v30, v31, v32, v33, v34);
  v42 = v15;
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v41, v42, v43, v44, v45, v46, (uint64_t)&v80);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v42, v47, v48, v49, v50, v51);
  v76 = (WTF *)&v78;
  v77 = 2;
  if (v80 != -1)
  {
    v79 = v81;
    HIDWORD(v77) = 1;
    v78 = v80;
  }
  v73 = (WTF *)v75;
  v74 = 2;
  JSC::DFG::SpeculativeJIT::compileStringEquality((uint64_t)this, a2, v41, v42, v38, v39, v40, v70, v37, (unsigned int *)&v76, (unsigned int *)&v73);
  v59 = v73;
  if (v75 != (_BYTE *)v73 && v73)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  }
  v60 = v76;
  if (&v78 != (int *)v76 && v76)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    WTF::fastFree((unint64_t)v60, v52, v53, v54, v55, v56, v57, v58);
  }
  if (v37 != -1)
  {
    if (v37 > 15)
      v61 = -1;
    else
      v61 = v37;
    --*((_DWORD *)this + 3 * v61 + 1196);
  }
  if (v70 != -1)
  {
    if (v70 > 15)
      v62 = -1;
    else
      v62 = v70;
    --*((_DWORD *)this + 3 * v62 + 1196);
  }
  if (v82)
  {
    v63 = v83;
    if (v83 != -1)
    {
      if (v83 > 15)
        v63 = -1;
      --*(_DWORD *)(v82 + 12 * v63 + 4784);
    }
  }
  if (v84)
  {
    v64 = v85;
    if (v85 != -1)
    {
      if (v85 > 15)
        v64 = -1;
      --*(_DWORD *)(v84 + 12 * v64 + 4784);
    }
  }
  if (v86)
  {
    v65 = v87;
    if (v87 != -1)
    {
      if (v87 > 15)
        v65 = -1;
      --*(_DWORD *)(v86 + 12 * v65 + 4784);
    }
  }
  if (v71)
  {
    if ((int)v42 > 15)
      v66 = -1;
    else
      v66 = v15;
    --*((_DWORD *)this + 3 * v66 + 1196);
  }
  if (v72)
  {
    if ((int)v41 > 15)
      v67 = -1;
    else
      v67 = v12;
    --*((_DWORD *)this + 3 * v67 + 1196);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileStringIdentEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  signed __int8 v12;
  unint64_t v13;
  unint64_t v14;
  signed __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unsigned int v60;
  unsigned int v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  unsigned __int8 v67;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_40;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_43;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_40:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_41;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x197BBB1F8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_41:
  v15 = -1;
LABEL_9:
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v66, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v64, this, v16, v17, v18, v19, v20, v21);
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v22, v23, v24, v25, v26, v27);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, v22, v23, v24, v25, v26, v27);
  v28 = (char)v67;
  v29 = v67;
  v30 = v65;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v12, v23, v24, v25, v26, v27);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v15, v31, v32, v33, v34, v35);
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)this, *((_QWORD *)a2 + 3), v12, v28, v36, v37, v38, v39);
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)this, *((_QWORD *)a2 + 4), v15, v30, v40, v41, v42, v43);
  v51 = (v30 & 0x1F) << 16;
  if ((_DWORD)v28 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v51 | 0xEB2063FF, v45, v46, v47, v48, v49, v50);
    v55 = *((_DWORD *)this + 50);
    v54 = v10 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    v52 = v51 | (32 * (v29 & 0x1F)) | 0xEB00001F;
    v53 = *((_DWORD *)this + 50);
    v54 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if (v53 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v44, v45, v46, v47, v48, v49, v50);
      v53 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v53) = v52;
    v55 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v55;
  }
  if (v55 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v44, v45, v46, v47, v48, v49, v50);
    v55 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v55) = v29 | 0x1A9F17E0;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v29, (char)v29);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v29, (uint64_t)a2, 21, 0, v56, v57, v58);
  if (v64)
  {
    v60 = v65;
    if (v65 != -1)
    {
      if (v65 > 15)
        v60 = -1;
      --*(_DWORD *)(v64 + 12 * v60 + 4784);
    }
  }
  if (v66)
  {
    v61 = (char)v67;
    if ((char)v67 != -1)
    {
      if ((char)v67 > 15)
        v61 = -1;
      --*(_DWORD *)(v66 + 12 * v61 + 4784);
    }
  }
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v62 = -1;
    else
      v62 = v15;
    --*((_DWORD *)this + 3 * v62 + 1196);
  }
  if (v54)
  {
    if (v12 > 15)
      v63 = -1;
    else
      v63 = v12;
    --*((_DWORD *)this + 3 * v63 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileStringIdentCompare(unsigned int *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  signed __int8 v35;
  signed __int8 v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  signed __int8 v75;
  uint64_t v76;
  unint64_t v77;
  signed __int8 v78;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v76, (uint64_t)a1, *(_QWORD *)(a2 + 24), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v73, (uint64_t)a1, *(_QWORD *)(a2 + 32), v11, v12, v13, v14, v15);
  ++a1[1196];
  v22 = a1[1194];
  if ((_DWORD)v22 != 0x3FFFFFFF)
  {
    *((_QWORD *)a1 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)a1, v22, v16, v17, v18, v19, v20, v21);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v71, (JSC::DFG::SpeculativeJIT *)a1, v16, v17, v18, v19, v20, v21);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v69, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
  v35 = v78;
  if (v78 == 255)
  {
    v35 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v76, v77, v29, v30, v31, v32, v33, v34);
    v78 = v35;
  }
  v36 = v75;
  if (v75 == 255)
  {
    v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v73, v74, v29, v30, v31, v32, v33, v34);
    v75 = v36;
  }
  v37 = v72;
  v38 = v70;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, *(_QWORD *)(a2 + 24), v35, v30, v31, v32, v33, v34);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, *(_QWORD *)(a2 + 32), v36, v39, v40, v41, v42, v43);
  if ((a3 - 10) >= 4)
  {
    result = 8572;
    __break(0xC471u);
  }
  else
  {
    v48 = off_1E35748D8[a3 - 10];
    JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)a1, *(_QWORD *)(a2 + 24), v35, v37, v44, v45, v46, v47);
    JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)a1, *(_QWORD *)(a2 + 32), v36, v38, v49, v50, v51, v52);
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v53, v54, v55, v56, v57, v58, v59);
    JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long (*)(WTF::StringImpl *,WTF::StringImpl *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v68, (int *)a1, (uint64_t)v48, v37, v38, v60, v61, v62);
    result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)a1, 0, a2, 0);
    if (v69)
    {
      v64 = v70;
      if (v70 != -1)
      {
        if (v70 > 15)
          v64 = -1;
        --*(_DWORD *)(v69 + 12 * v64 + 4784);
      }
    }
    if (v71)
    {
      v65 = v72;
      if (v72 != -1)
      {
        if (v72 > 15)
          v65 = -1;
        --*(_DWORD *)(v71 + 12 * v65 + 4784);
      }
    }
    --a1[1196];
    if ((v74 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v66 = v75;
      if (v75 > 15)
        v66 = -1;
      --*(_DWORD *)(v73 + 12 * v66 + 4784);
    }
    if ((v77 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v67 = v78;
      if (v78 > 15)
        v67 = -1;
      --*(_DWORD *)(v76 + 12 * v67 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileBooleanCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 v40;

  v8 = *(_QWORD *)(a2 + 24);
  v9 = ~*(_DWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v10 = *(unsigned int *)(a1 + 4004);
  if (v9 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197BBB704);
  }
  v11 = a3;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v9 + 12))
  {
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, *(_QWORD *)(a2 + 24), a3, a4, a5, a6, a7, a8);
    v10 = *(unsigned int *)(a1 + 4004);
  }
  else
  {
    v14 = -1;
  }
  v15 = *(_QWORD *)(a2 + 32);
  v16 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197BBB70CLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, *(_QWORD *)(a2 + 32), a3, a4, a5, a6, a7, a8);
  else
    v17 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v39, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  if (v14 == -1)
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, v8, v19, v20, v21, v22, v23, v24);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, v15, v19, v20, v21, v22, v23, v24);
  v25 = v40;
  v26 = (v17 & 0x1F) << 16;
  if (v14 == 31)
  {
    v27 = v26 | 0x6B2063FF;
    v28 = *(_DWORD *)(a1 + 200);
    if (v28 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
      v28 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v27;
    v29 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v29;
  }
  else
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v26 | (32 * (v14 & 0x1F)) | 0x6B00001Fu, v19, v20, v21, v22, v23, v24);
    v29 = *(_DWORD *)(a1 + 200);
  }
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = (v25 | (v11 << 12)) & 0xF01F ^ 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  v30 = (char)v40;
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v40, (char)v40);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v30, a2, 21, 0, v31, v32, v33);
  if (v39)
  {
    v35 = (char)v40;
    if ((char)v40 != -1)
    {
      if ((char)v40 > 15)
        v35 = -1;
      --*(_DWORD *)(v39 + 12 * v35 + 4784);
    }
  }
  v36 = a1 + 4776;
  if (v17 > 15)
    v37 = -1;
  else
    v37 = v17;
  --*(_DWORD *)(v36 + 12 * v37 + 8);
  if (v14 > 15)
    v38 = -1;
  else
    v38 = v14;
  --*(_DWORD *)(v36 + 12 * v38 + 8);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileSymbolEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 v49;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v47, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v44, (uint64_t)this, *((_QWORD *)a2 + 4), v10, v11, v12, v13, v14);
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateCellOperand>((uint64_t)&v42, this, (uint64_t)&v47, (uint64_t)&v44, v15, v16, v17, v18);
  v25 = v49;
  if (v49 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v47, v48, v19, v20, v21, v22, v23, v24);
    v49 = v25;
  }
  v26 = v46;
  if (v46 == 255)
  {
    v26 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v44, v45, v19, v20, v21, v22, v23, v24);
    v46 = v26;
  }
  v27 = v43;
  v28 = (char)v25;
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 3), v28, v20, v21, v22, v23, v24);
  v29 = (char)v26;
  JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)this, *((_QWORD *)a2 + 4), v29, v30, v31, v32, v33, v34);
  JSC::MacroAssembler::comparePtr(this, 0, v28, v29, v27, v35, v36, v37);
  result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v27, (uint64_t)a2, 0);
  if (v42)
  {
    v39 = v43;
    if (v43 != -1)
    {
      if (v43 > 15)
        v39 = -1;
      --*(_DWORD *)(v42 + 12 * v39 + 4784);
    }
  }
  if ((v45 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v40 = (char)v46;
    if ((char)v46 > 15)
      v40 = -1;
    --*(_DWORD *)(v44 + 12 * v40 + 4784);
  }
  if ((v48 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v41 = (char)v49;
    if ((char)v49 > 15)
      v41 = -1;
    --*(_DWORD *)(v47 + 12 * v41 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileObjectEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  int isWatchingMasqueradesAsUndefinedWatchpointSet;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x8_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x8_t v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned __int8 v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  int v132;
  int v133;
  uint64_t v134;
  _BYTE v135[12];
  int v136;
  uint64_t v137;
  _BYTE v138[12];
  _BYTE v139[12];
  _BYTE v140[12];
  int v141;
  uint64_t v142;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_57;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBC2DCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_57:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_58;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBC2E4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_58:
    v17 = -1;
  v18 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
    goto LABEL_135;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 8) == 1)
  {
    if (v13 == 0xFF)
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if ((char)v13 > 15)
      v72 = -1;
    else
      v72 = v13;
    ++*((_DWORD *)this + 3 * v72 + 1196);
    v131 = v13;
  }
  else
  {
    v131 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v13 == 0xFF)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v17 == 0xFF)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  isWatchingMasqueradesAsUndefinedWatchpointSet = JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), a3, a4, a5, a6, a7, a8);
  v27 = v13;
  v28 = *((_QWORD *)a2 + 3);
  v29 = *((_QWORD *)this + 702);
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(unsigned int *)((v28 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v132 = (char)v17;
  if (!isWatchingMasqueradesAsUndefinedWatchpointSet)
  {
    v75 = (_QWORD *)(v30 + 24);
    v76 = (_QWORD *)(v30 + 8);
    if ((v28 & 1) != 0)
      v76 = v75;
    v77 = *v76 + 32 * v31;
    v78 = (void *)*(unsigned int *)(v29 + 88);
    if ((_DWORD)v78 != *(_DWORD *)(v77 + 20))
    {
      if ((*(_QWORD *)(v77 + 8) & 0x2800FFFFFFF7) != 0)
      {
        v119 = *v76 + 32 * v31;
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v77, v78, v21, v22, v23, v24, v25, v26);
        v77 = v119;
        v27 = v13;
      }
      else
      {
        *(_DWORD *)(v77 + 20) = (_DWORD)v78;
      }
    }
    if ((*(_QWORD *)(v77 + 8) & 0xFFFFDFFFF0000008) != 0)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BBC2D4);
      }
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      v79 = v27;
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v27 | 0x500000000, *((char *)this + 304), v22, v23, v24, v25, v26);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v80, v81, v82, v83, (uint64_t)v138);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v13 << 32) | 0x80000000), v28, 0x20000FFFFFF7uLL, (uint64_t)v138, 1uLL, v84, v85);
      v27 = v79;
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BBC294);
    }
    v86 = *((_QWORD *)a2 + 3);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v27 | 0x600000000, *((char *)this + 304), v22, v23, v24, v25, v26);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 1, 17, v87, v88, v89, v90, (uint64_t)&v136, v91);
    v141 = v136;
    v142 = v137;
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v13 << 32) | 0x80000000), (JSC::DFG::Node *)(v86 & 0xFF00FFFFFFFFFFFFLL), &v141);
    v98 = *((_QWORD *)a2 + 4);
    v99 = *((_QWORD *)this + 702);
    v100 = *(_QWORD *)(v99 + 8);
    v101 = (_QWORD *)(v100 + 24);
    v102 = (_QWORD *)(v100 + 8);
    if ((v98 & 1) != 0)
      v102 = v101;
    v103 = *v102 + 32 * *(unsigned int *)((v98 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v104 = (void *)*(unsigned int *)(v99 + 88);
    if ((_DWORD)v104 != *(_DWORD *)(v103 + 20))
    {
      if ((*(_QWORD *)(v103 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v103, v104, v92, v93, v94, v95, v96, v97);
      else
        *(_DWORD *)(v103 + 20) = (_DWORD)v104;
    }
    if ((*(_QWORD *)(v103 + 8) & 0xFFFFDFFFF0000008) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotObject((uint64_t)this, v17, v93, v94, v95, v96, v97, (uint64_t)v135);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v17 << 32) | 0x80000000), v98, 0x20000FFFFFF7uLL, (uint64_t)v135, 1uLL, v105, v106);
    }
    v54 = v131;
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BBC2B4);
    }
    v107 = *((_QWORD *)a2 + 4);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v17 | 0x600000000, *((char *)this + 304), v93, v94, v95, v96, v97);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 1, 17, v108, v109, v110, v111, (uint64_t)&v133, v112);
    v141 = v133;
    v142 = v134;
    JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v17 << 32) | 0x80000000), (JSC::DFG::Node *)(v107 & 0xFF00FFFFFFFFFFFFLL), &v141);
    goto LABEL_29;
  }
  v128 = v17;
  v129 = v14 & 0xFF00FFFFFFFFFFFFLL;
  v130 = v11;
  v32 = (uint64_t *)(v30 + 24);
  v33 = (uint64_t *)(v30 + 8);
  if ((v28 & 1) != 0)
    v33 = v32;
  v34 = *v33;
  v35 = *v33 + 32 * v31;
  v36 = *(_DWORD *)(v29 + 88);
  v37 = *(_DWORD *)(v35 + 20);
  if (v36 != v37)
  {
    if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v37 ^ v36) >= 2)
      {
        v73 = *(_QWORD *)v35;
        if (*(_QWORD *)v35 != 4)
        {
          *(_QWORD *)v35 = v73 | 2;
          v113 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v73 & 1) != 0)
          {
            v120 = 2 * *v113;
            while (v120 * 4)
            {
              v121 = *(_QWORD *)&v113[v120];
              if ((*(_BYTE *)(v121 + 19) & 0xC) == 0)
              {
                v122 = *(_QWORD *)(v121 + 96);
                v123 = (v122 & 1) != 0 ? (v122 >> 1) & 3 : *(unsigned __int8 *)(v122 + 4);
                v120 -= 2;
                if (v123 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v113, v20, v21, v22, v23, v24, v25, v26);
              v27 = v13;
              goto LABEL_93;
            }
          }
          else if (v113)
          {
            if ((*((_BYTE *)v113 + 19) & 0xC) != 0
              || ((v114 = *((_QWORD *)v113 + 12), (v114 & 1) != 0)
                ? (v115 = (v114 >> 1) & 3)
                : (v115 = *(unsigned __int8 *)(v114 + 4)),
                  v115 == 2))
            {
LABEL_93:
              *(_QWORD *)v35 = 4;
            }
          }
        }
        *(_DWORD *)(v34 + 32 * v31 + 16) = -21020677;
      }
      if ((v36 & 1) != 0)
        *(_QWORD *)v35 &= ~2uLL;
    }
    *(_DWORD *)(v35 + 20) = v36;
  }
  if ((*(_QWORD *)(v35 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (*((_BYTE *)this + 212))
    {
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v27 | 0x500000000, *((char *)this + 304), v22, v23, v24, v25, v26);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v38, v39, v40, v41, (uint64_t)v140);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v13 << 32) | 0x80000000), v28, 0x20000FFFFFF7uLL, (uint64_t)v140, 1uLL, v42, v43);
      goto LABEL_23;
    }
LABEL_135:
    __break(0xC471u);
    JUMPOUT(0x197BBC1A0);
  }
LABEL_23:
  v44 = *((_QWORD *)a2 + 4);
  v45 = *((_QWORD *)this + 702);
  v46 = *(_QWORD *)(v45 + 8);
  v47 = *(unsigned int *)((v44 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v48 = (uint64_t *)(v46 + 24);
  v49 = (uint64_t *)(v46 + 8);
  if ((v44 & 1) != 0)
    v49 = v48;
  v50 = *v49;
  v51 = *v49 + 32 * v47;
  v52 = *(_DWORD *)(v45 + 88);
  v53 = *(_DWORD *)(v51 + 20);
  if (v52 != v53)
  {
    if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v53 ^ v52) >= 2)
      {
        v74 = *(_QWORD *)v51;
        if (*(_QWORD *)v51 != 4)
        {
          *(_QWORD *)v51 = v74 | 2;
          v116 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v74 & 1) != 0)
          {
            v124 = 2 * *v116;
            while (v124 * 4)
            {
              v125 = *(_QWORD *)&v116[v124];
              if ((*(_BYTE *)(v125 + 19) & 0xC) == 0)
              {
                v126 = *(_QWORD *)(v125 + 96);
                v127 = (v126 & 1) != 0 ? (v126 >> 1) & 3 : *(unsigned __int8 *)(v126 + 4);
                v124 -= 2;
                if (v127 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v116, v20, v21, v22, v23, v24, v25, v26);
              goto LABEL_100;
            }
          }
          else if (v116)
          {
            if ((*((_BYTE *)v116 + 19) & 0xC) != 0
              || ((v117 = *((_QWORD *)v116 + 12), (v117 & 1) != 0)
                ? (v118 = (v117 >> 1) & 3)
                : (v118 = *(unsigned __int8 *)(v117 + 4)),
                  v118 == 2))
            {
LABEL_100:
              *(_QWORD *)v51 = 4;
            }
          }
        }
        *(_DWORD *)(v50 + 32 * v47 + 16) = -21020677;
      }
      if ((v52 & 1) != 0)
        *(_QWORD *)v51 &= ~2uLL;
    }
    *(_DWORD *)(v51 + 20) = v52;
  }
  v15 = v129;
  v11 = v130;
  v17 = v128;
  v54 = v131;
  if ((*(_QWORD *)(v51 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BBC258);
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v128 | 0x500000000, *((char *)this + 304), v22, v23, v24, v25, v26);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v55, v56, v57, v58, (uint64_t)v139);
    JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v128 << 32) | 0x80000000), v44, 0x20000FFFFFF7uLL, (uint64_t)v139, 1uLL, v59, v60);
  }
LABEL_29:
  v61 = (v17 & 0x1F) << 16;
  if (v13 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v61 | 0xEB2063FF, v21, v22, v23, v24, v25, v26);
    v64 = *((_DWORD *)this + 50);
  }
  else
  {
    v62 = v61 | (32 * (v13 & 0x1F)) | 0xEB00001F;
    v63 = *((_DWORD *)this + 50);
    if (v63 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
      v63 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v63) = v62;
    v64 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v64;
  }
  if (v64 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
    v64 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v64) = v54 & 0x1F | 0x1A9F17E0;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v54, v54);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v54, (uint64_t)a2, 21, 0, v65, v66, v67);
  if (v54 != -1)
  {
    if (v54 > 15)
      v69 = -1;
    else
      v69 = v54;
    --*((_DWORD *)this + 3 * v69 + 1196);
  }
  if (v15)
  {
    if (v132 > 15)
      v70 = -1;
    else
      v70 = v17;
    --*((_DWORD *)this + 3 * v70 + 1196);
  }
  if (v11)
  {
    if ((char)v13 > 15)
      v71 = -1;
    else
      v71 = v13;
    --*((_DWORD *)this + 3 * v71 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileStrictEq(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  JSC::DFG::Node *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 v229;

  v8 = (uint64_t *)a2;
  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (((v10 >> 50) & 0x3F) > 0x26)
  {
    switch((int)v11)
    {
      case '\'':
        v226 = *((_QWORD *)a2 + 4);
        if ((v226 & 0xFC000000000000) != 0x50000000000000)
          goto LABEL_18;
        a4 = *((_QWORD *)a2 + 3);
LABEL_258:
        JSC::DFG::SpeculativeJIT::compileStringIdentToNotStringVarEquality((uint64_t)this, (uint64_t)a2, v226, a4, a5, a6, a7, a8);
        return 0;
      case '+':
        v110 = *((_QWORD *)a2 + 4);
        if ((v110 & 0xFC000000000000) == 0xB0000000000000)
        {
          v111 = *((_QWORD *)a2 + 4);
          a4 = *((_QWORD *)a2 + 3);
LABEL_89:
          JSC::DFG::SpeculativeJIT::compileNeitherDoubleNorHeapBigIntToNotDoubleStrictEquality((uint64_t)this, a2, v111, a4, a5, a6, a7, a8);
          return 0;
        }
        if ((v110 & 0xFC000000000000) != 0xB4000000000000)
          goto LABEL_18;
        v190 = JSC::DFG::SpeculativeJIT::detectPeepHoleBranch(this);
        if (v190 == -1)
        {
          this = v9;
          a2 = (JSC::DFG::Node *)v8;
          v175 = v10;
          v176 = v110;
          goto LABEL_166;
        }
        v120 = v190;
        v193 = *((_QWORD *)v9 + 496);
        if (*(_DWORD *)(v193 + 220) <= v190)
        {
          __break(0xC471u);
          JUMPOUT(0x197BBD274);
        }
        v121 = *(_QWORD *)(*(_QWORD *)(v193 + 208) + 8 * v190);
        JSC::DFG::SpeculativeJIT::compilePeepHoleNotDoubleNeitherDoubleNorHeapBigIntNorStringStrictEquality((uint64_t)v9, v121, v10, v110, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v10, v194, v195, v196, v197, v198, v199);
        v134 = (uint64_t)v9;
        v135 = v110;
        goto LABEL_98;
      case ',':
        a4 = *((_QWORD *)a2 + 4);
        if ((a4 & 0xFC000000000000) != 0xAC000000000000)
          goto LABEL_18;
        v111 = *((_QWORD *)a2 + 3);
        goto LABEL_89;
      case '-':
        v112 = *((_QWORD *)a2 + 4);
        if ((v112 & 0xFC000000000000) != 0xAC000000000000)
          goto LABEL_18;
        v113 = *((_QWORD *)this + 496);
        v114 = *(unsigned int *)(v113 + 220);
        v115 = v114 - 1;
        v116 = (*((_DWORD *)this + 997) + 1);
        if (v114 - 1 <= v116)
          goto LABEL_92;
        if (v114 <= v116)
          v173 = (*((_DWORD *)this + 997) + 1);
        else
          v173 = *(unsigned int *)(v113 + 220);
        do
        {
          if (v173 == v116)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD21CLL);
          }
          v174 = *(_QWORD *)(*(_QWORD *)(v113 + 208) + 8 * v116);
          if (*(_DWORD *)(v174 + 52)
            && (*(_WORD *)(v174 + 18) != 23 || (*(_QWORD *)(v174 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0))
          {
            goto LABEL_165;
          }
          ++v116;
        }
        while (v115 > v116);
        do
        {
LABEL_92:
          if (v115 >= v114)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD1ECLL);
          }
          v117 = *(_QWORD *)(v113 + 208);
          v118 = *(_QWORD *)(v117 + 8 * v115);
          v119 = *(unsigned __int16 *)(v118 + 18);
          --v115;
        }
        while ((v119 - 364) > 0xB);
        if (v119 != 365 || !(_DWORD)v114 || *((_QWORD *)this + 497) != (*(_QWORD *)(v118 + 24) & 0xFF00FFFFFFFFFFFFLL))
        {
LABEL_165:
          v175 = *((_QWORD *)a2 + 4);
          v176 = *((_QWORD *)a2 + 3);
LABEL_166:
          JSC::DFG::SpeculativeJIT::compileNotDoubleNeitherDoubleNorHeapBigIntNorStringStrictEquality((uint64_t)this, (uint64_t)a2, v175, v176, a5, a6, a7, a8);
          return 0;
        }
        v120 = v114 - 1;
        v121 = *(_QWORD *)(v117 + 8 * (v114 - 1));
        JSC::DFG::SpeculativeJIT::compilePeepHoleNotDoubleNeitherDoubleNorHeapBigIntNorStringStrictEquality((uint64_t)this, v121, v112, v10, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v112, v122, v123, v124, v125, v126, v127);
        v134 = (uint64_t)v9;
        v135 = v10;
LABEL_98:
        JSC::DFG::SpeculativeJIT::use(v134, v135, v128, v129, v130, v131, v132, v133);
        *((_DWORD *)v9 + 997) = v120;
        *((_QWORD *)v9 + 497) = v121;
        return 1;
      case '/':
        v62 = *((_QWORD *)a2 + 4);
        if ((v62 & 0xFC000000000000) != 0 && (v62 & 0xFC000000000000) != 0xBC000000000000)
          goto LABEL_18;
        goto LABEL_37;
      case '0':
        v62 = *((_QWORD *)a2 + 4);
        if ((v62 & 0xFC000000000000) != 0xC0000000000000 && (v62 & 0xFC000000000000) != 0)
          goto LABEL_18;
        goto LABEL_37;
      case '1':
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0xC4000000000000)
          goto LABEL_18;
        v103 = *((_QWORD *)this + 496);
        v104 = *(unsigned int *)(v103 + 220);
        v105 = v104 - 1;
        v106 = (*((_DWORD *)this + 997) + 1);
        if (v104 - 1 <= v106)
          goto LABEL_81;
        if (v104 <= v106)
          v169 = (*((_DWORD *)this + 997) + 1);
        else
          v169 = *(unsigned int *)(v103 + 220);
        break;
      case '4':
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0xD0000000000000)
          goto LABEL_18;
        v222 = JSC::DFG::SpeculativeJIT::detectPeepHoleBranch(this);
        if (v222 == -1)
        {
          JSC::DFG::SpeculativeJIT::compileInt52Compare((uint64_t *)v9, (uint64_t)v8, 0);
          return 0;
        }
        v19 = v222;
        v223 = *((_QWORD *)v9 + 496);
        if (*(_DWORD *)(v223 + 220) <= v222)
        {
          __break(0xC471u);
          JUMPOUT(0x197BBD28CLL);
        }
        v20 = *(_QWORD *)(*(_QWORD *)(v223 + 208) + 8 * v222);
        JSC::DFG::SpeculativeJIT::compilePeepHoleInt52Branch((uint64_t)v9, (uint64_t)v8, v20, 0);
        goto LABEL_13;
      default:
        goto LABEL_18;
    }
    while (1)
    {
      if (v169 == v106)
      {
        __break(0xC471u);
        JUMPOUT(0x197BBD1F4);
      }
      v170 = *(_QWORD *)(*(_QWORD *)(v103 + 208) + 8 * v106);
      if (*(_DWORD *)(v170 + 52))
      {
        if (*(_WORD *)(v170 + 18) != 23 || (*(_QWORD *)(v170 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
          break;
      }
      if (v105 <= ++v106)
      {
        do
        {
LABEL_81:
          if (v105 >= v104)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD1DCLL);
          }
          v107 = *(_QWORD *)(v103 + 208);
          v108 = *(_QWORD *)(v107 + 8 * v105);
          v109 = *(unsigned __int16 *)(v108 + 18);
          --v105;
        }
        while ((v109 - 364) > 0xB);
        if (v109 == 365 && (_DWORD)v104 && *((_QWORD *)this + 497) == (*(_QWORD *)(v108 + 24) & 0xFF00FFFFFFFFFFFFLL))
        {
          v19 = v104 - 1;
          v20 = *(_QWORD *)(v107 + 8 * (v104 - 1));
          JSC::DFG::SpeculativeJIT::compilePeepHoleDoubleBranch((uint64_t)this, (uint64_t)a2, **(_QWORD **)(v20 + 72), *(_QWORD *)(*(_QWORD *)(v20 + 72) + 16), 0, a6, a7, a8);
          goto LABEL_13;
        }
        break;
      }
    }
    JSC::DFG::SpeculativeJIT::compileDoubleCompare((uint64_t)this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
    return 0;
  }
  if (((v10 >> 50) & 0x3F) > 0xA)
  {
    switch((int)v11)
    {
      case 20:
        a4 = *((_QWORD *)a2 + 4);
        if ((a4 & 0xFC000000000000) == 0x50000000000000)
        {
          JSC::DFG::SpeculativeJIT::compileStringIdentEquality(this, a2, a3, a4, a5, a6, a7, a8);
          return 0;
        }
        if ((a4 & 0xFC000000000000) != 0x9C000000000000)
          goto LABEL_18;
        v226 = *((_QWORD *)a2 + 3);
        goto LABEL_258;
      case 21:
        a4 = *((_QWORD *)a2 + 4);
        if ((a4 & 0xFC000000000000) == 0)
        {
          v167 = *((_QWORD *)a2 + 3);
          goto LABEL_133;
        }
        if ((a4 & 0xFC000000000000) != 0x54000000000000)
          goto LABEL_18;
        JSC::DFG::SpeculativeJIT::compileStringEquality(this, a2, a3, a4, a5, a6, a7, a8);
        return 0;
      case 22:
      case 23:
      case 24:
      case 26:
        goto LABEL_18;
      case 25:
        a4 = *((_QWORD *)a2 + 4);
        if ((a4 & 0xFC000000000000) == 0)
        {
          v168 = *((_QWORD *)a2 + 3);
          goto LABEL_137;
        }
        if ((a4 & 0xFC000000000000) != 0x64000000000000)
          goto LABEL_18;
        v41 = *((_QWORD *)this + 496);
        v42 = *(unsigned int *)(v41 + 220);
        v43 = v42 - 1;
        v44 = (*((_DWORD *)this + 997) + 1);
        if (v42 - 1 <= v44)
          goto LABEL_30;
        if (v42 <= v44)
          v171 = (*((_DWORD *)this + 997) + 1);
        else
          v171 = *(unsigned int *)(v41 + 220);
        while (1)
        {
          if (v171 == v44)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD214);
          }
          v172 = *(_QWORD *)(*(_QWORD *)(v41 + 208) + 8 * v44);
          if (*(_DWORD *)(v172 + 52))
          {
            if (*(_WORD *)(v172 + 18) != 23 || (*(_QWORD *)(v172 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
              break;
          }
          if (v43 <= ++v44)
          {
            do
            {
LABEL_30:
              if (v43 >= v42)
              {
                __break(0xC471u);
                JUMPOUT(0x197BBD1E4);
              }
              v45 = *(_QWORD *)(v41 + 208);
              v46 = *(_QWORD *)(v45 + 8 * v43);
              v47 = *(unsigned __int16 *)(v46 + 18);
              --v43;
            }
            while ((v47 - 364) > 0xB);
            if (v47 == 365 && (_DWORD)v42 && *((_QWORD *)this + 497) == (*(_QWORD *)(v46 + 24) & 0xFF00FFFFFFFFFFFFLL))
            {
              v48 = v42 - 1;
              v49 = *(JSC::DFG::Node **)(v45 + 8 * (v42 - 1));
              JSC::DFG::SpeculativeJIT::compilePeepHoleSymbolEquality(this, a2, v49, a4, a5, a6, a7, a8);
              JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[3], v50, v51, v52, v53, v54, v55);
              JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[4], v56, v57, v58, v59, v60, v61);
              goto LABEL_141;
            }
            break;
          }
        }
        JSC::DFG::SpeculativeJIT::compileSymbolEquality(this, a2, a3, a4, a5, a6, a7, a8);
        return 0;
      case 27:
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x6C000000000000)
          goto LABEL_18;
        JSC::DFG::SpeculativeJIT::compileHeapBigIntEquality(this, a2, a3, a4, a5, a6, a7, a8);
        return 0;
      default:
        if ((_DWORD)v11 != 11)
          goto LABEL_18;
        v180 = *((_QWORD *)a2 + 4);
        if ((v180 & 0xFC000000000000) == 0x2C000000000000)
        {
          v183 = *((_QWORD *)this + 496);
          v184 = *(unsigned int *)(v183 + 220);
          v185 = v184 - 1;
          v186 = (*((_DWORD *)this + 997) + 1);
          if (v184 - 1 > v186)
          {
            if (v184 <= v186)
              v191 = (*((_DWORD *)this + 997) + 1);
            else
              v191 = *(unsigned int *)(v183 + 220);
            while (1)
            {
              if (v191 == v186)
              {
                __break(0xC471u);
                JUMPOUT(0x197BBD26CLL);
              }
              v192 = *(_QWORD *)(*(_QWORD *)(v183 + 208) + 8 * v186);
              if (*(_DWORD *)(v192 + 52))
              {
                if (*(_WORD *)(v192 + 18) != 23 || (*(_QWORD *)(v192 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
                  break;
              }
              if (v185 <= ++v186)
                goto LABEL_190;
            }
          }
          else
          {
            do
            {
LABEL_190:
              if (v185 >= v184)
              {
                __break(0xC471u);
                JUMPOUT(0x197BBD264);
              }
              v187 = *(_QWORD *)(v183 + 208);
              v188 = *(_QWORD *)(v187 + 8 * v185);
              v189 = *(unsigned __int16 *)(v188 + 18);
              --v185;
            }
            while ((v189 - 364) > 0xB);
            if (v189 == 365
              && (_DWORD)v184
              && *((_QWORD *)this + 497) == (*(_QWORD *)(v188 + 24) & 0xFF00FFFFFFFFFFFFLL))
            {
              v19 = v184 - 1;
              v20 = *(_QWORD *)(v187 + 8 * (v184 - 1));
              JSC::DFG::SpeculativeJIT::compilePeepHoleObjectEquality(this, a2, **(JSC::DFG::Node ***)(v20 + 72), *(_QWORD *)(*(_QWORD *)(v20 + 72) + 16), a5, a6, a7, a8);
              goto LABEL_13;
            }
          }
          JSC::DFG::SpeculativeJIT::compileObjectEquality(this, a2, v180, a4, a5, a6, a7, a8);
          return 0;
        }
        if ((v180 & 0xFC000000000000) != 0)
          goto LABEL_18;
        v200 = *((_QWORD *)this + 496);
        v201 = *(unsigned int *)(v200 + 220);
        v202 = v201 - 1;
        v203 = (*((_DWORD *)this + 997) + 1);
        if (v201 - 1 <= v203)
          goto LABEL_222;
        if (v201 <= v203)
          v220 = (*((_DWORD *)this + 997) + 1);
        else
          v220 = *(unsigned int *)(v200 + 220);
        break;
    }
    while (1)
    {
      if (v220 == v203)
      {
        __break(0xC471u);
        JUMPOUT(0x197BBD284);
      }
      v221 = *(_QWORD *)(*(_QWORD *)(v200 + 208) + 8 * v203);
      if (*(_DWORD *)(v221 + 52))
      {
        if (*(_WORD *)(v221 + 18) != 23 || (*(_QWORD *)(v221 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
          break;
      }
      if (v202 <= ++v203)
      {
        do
        {
LABEL_222:
          if (v202 >= v201)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD27CLL);
          }
          v204 = *(_QWORD *)(v200 + 208);
          v205 = *(_QWORD *)(v204 + 8 * v202);
          v206 = *(unsigned __int16 *)(v205 + 18);
          --v202;
        }
        while ((v206 - 364) > 0xB);
        if (v206 == 365 && (_DWORD)v201 && *((_QWORD *)this + 497) == (*(_QWORD *)(v205 + 24) & 0xFF00FFFFFFFFFFFFLL))
        {
          v207 = v201 - 1;
          v20 = *(_QWORD *)(v204 + 8 * (v201 - 1));
          JSC::DFG::SpeculativeJIT::compilePeepHoleObjectStrictEquality((uint64_t)this, *((_QWORD *)a2 + 3), v180, v20, a5, a6, a7, a8);
          JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[3], v208, v209, v210, v211, v212, v213);
          JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[4], v214, v215, v216, v217, v218, v219);
          *((_DWORD *)v9 + 997) = v207;
          goto LABEL_14;
        }
        break;
      }
    }
    v179 = *((_QWORD *)a2 + 3);
    goto LABEL_176;
  }
  if ((_DWORD)v11 == 6)
  {
    v62 = *((_QWORD *)a2 + 4);
    if ((v62 & 0xFC000000000000) == 0)
      goto LABEL_37;
    if ((v62 & 0xFC000000000000) == 0x18000000000000)
    {
      v138 = *((_QWORD *)this + 496);
      v139 = *(unsigned int *)(v138 + 220);
      v140 = v139 - 1;
      v141 = (*((_DWORD *)this + 997) + 1);
      if (v139 - 1 > v141)
      {
        if (v139 <= v141)
          v181 = (*((_DWORD *)this + 997) + 1);
        else
          v181 = *(unsigned int *)(v138 + 220);
        while (1)
        {
          if (v181 == v141)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD25CLL);
          }
          v182 = *(_QWORD *)(*(_QWORD *)(v138 + 208) + 8 * v141);
          if (*(_DWORD *)(v182 + 52))
          {
            if (*(_WORD *)(v182 + 18) != 23 || (*(_QWORD *)(v182 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
              break;
          }
          if (v140 <= ++v141)
            goto LABEL_110;
        }
      }
      else
      {
        do
        {
LABEL_110:
          if (v140 >= v139)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD244);
          }
          v142 = *(_QWORD *)(v138 + 208);
          v143 = *(_QWORD *)(v142 + 8 * v140);
          v144 = *(unsigned __int16 *)(v143 + 18);
          --v140;
        }
        while ((v144 - 364) > 0xB);
        if (v144 == 365 && (_DWORD)v139 && *((_QWORD *)this + 497) == (*(_QWORD *)(v143 + 24) & 0xFF00FFFFFFFFFFFFLL))
        {
          v19 = v139 - 1;
          v20 = *(_QWORD *)(v142 + 8 * (v139 - 1));
          JSC::DFG::SpeculativeJIT::compilePeepHoleBooleanBranch((uint64_t)this, (uint64_t)a2, **(_QWORD **)(v20 + 72), *(_QWORD *)(*(_QWORD *)(v20 + 72) + 16), 0, a6, a7, a8);
LABEL_13:
          JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[3], v21, v22, v23, v24, v25, v26);
          JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[4], v27, v28, v29, v30, v31, v32);
          *((_DWORD *)v9 + 997) = v19;
LABEL_14:
          *((_QWORD *)v9 + 497) = v20;
          return 1;
        }
      }
      JSC::DFG::SpeculativeJIT::compileBooleanCompare((uint64_t)this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
      return 0;
    }
LABEL_18:
    v34 = *((_QWORD *)this + 496);
    v35 = *(unsigned int *)(v34 + 220);
    v36 = v35 - 1;
    v37 = (*((_DWORD *)this + 997) + 1);
    if (v35 - 1 > v37)
    {
      if (v35 <= v37)
        v101 = (*((_DWORD *)this + 997) + 1);
      else
        v101 = *(unsigned int *)(v34 + 220);
      while (1)
      {
        if (v101 == v37)
        {
          __break(0xC471u);
          JUMPOUT(0x197BBD198);
        }
        v102 = *(_QWORD *)(*(_QWORD *)(v34 + 208) + 8 * v37);
        if (*(_DWORD *)(v102 + 52))
        {
          if (*(_WORD *)(v102 + 18) != 23 || (*(_QWORD *)(v102 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
            goto LABEL_24;
        }
        if (v36 <= ++v37)
          goto LABEL_19;
      }
    }
    do
    {
LABEL_19:
      if (v36 >= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x197BBD190);
      }
      v38 = *(_QWORD *)(v34 + 208);
      v39 = *(_QWORD *)(v38 + 8 * v36);
      v40 = *(unsigned __int16 *)(v39 + 18);
      --v36;
    }
    while ((v40 - 364) > 0xB);
    if (v40 != 365 || !(_DWORD)v35 || *((_QWORD *)this + 497) != (*(_QWORD *)(v39 + 24) & 0xFF00FFFFFFFFFFFFLL))
    {
LABEL_24:
      JSC::DFG::SpeculativeJIT::genericJSValueNonPeepholeStrictEq(this, a2, 0, a4, a5, a6, a7, a8);
      return 0;
    }
    v48 = v35 - 1;
    v49 = *(JSC::DFG::Node **)(v38 + 8 * (v35 - 1));
    JSC::DFG::SpeculativeJIT::nonSpeculativePeepholeStrictEq(this, a2, v49, 0, a5, a6, a7, a8);
LABEL_141:
    *((_DWORD *)v9 + 997) = v48;
    *((_QWORD *)v9 + 497) = v49;
    return 1;
  }
  if ((_DWORD)v11 == 1)
  {
    if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x4000000000000)
    {
      v12 = *((_QWORD *)this + 496);
      v13 = *(unsigned int *)(v12 + 220);
      v14 = v13 - 1;
      v15 = (*((_DWORD *)this + 997) + 1);
      if (v13 - 1 > v15)
      {
        if (v13 <= v15)
          v136 = (*((_DWORD *)this + 997) + 1);
        else
          v136 = *(unsigned int *)(v12 + 220);
        while (1)
        {
          if (v136 == v15)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD1B8);
          }
          v137 = *(_QWORD *)(*(_QWORD *)(v12 + 208) + 8 * v15);
          if (*(_DWORD *)(v137 + 52))
          {
            if (*(_WORD *)(v137 + 18) != 23 || (*(_QWORD *)(v137 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
              break;
          }
          if (v14 <= ++v15)
            goto LABEL_7;
        }
      }
      else
      {
        do
        {
LABEL_7:
          if (v14 >= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x197BBD1B0);
          }
          v16 = *(_QWORD *)(v12 + 208);
          v17 = *(_QWORD *)(v16 + 8 * v14);
          v18 = *(unsigned __int16 *)(v17 + 18);
          --v14;
        }
        while ((v18 - 364) > 0xB);
        if (v18 == 365 && (_DWORD)v13 && *((_QWORD *)this + 497) == (*(_QWORD *)(v17 + 24) & 0xFF00FFFFFFFFFFFFLL))
        {
          v19 = v13 - 1;
          v20 = *(_QWORD *)(v16 + 8 * (v13 - 1));
          JSC::DFG::SpeculativeJIT::compilePeepHoleInt32Branch((uint64_t)this, (uint64_t)a2, **(_QWORD **)(v20 + 72), *(_QWORD *)(*(_QWORD *)(v20 + 72) + 16), 0, a6, a7, a8);
          goto LABEL_13;
        }
      }
      JSC::DFG::SpeculativeJIT::compileInt32Compare((uint64_t)this, (uint64_t)a2, 0, a4, a5, a6, a7, a8);
      return 0;
    }
    goto LABEL_18;
  }
  if ((_DWORD)v11)
    goto LABEL_18;
  v62 = *((_QWORD *)a2 + 4);
  v145 = v62 & 0xFC000000000000;
  if ((v62 & 0xFC000000000000) != 0xBC000000000000)
  {
    if ((v62 & 0xFC000000000000uLL) > 0x53FFFFFFFFFFFFLL)
    {
      if (v145 == 0x64000000000000)
      {
        v168 = *((_QWORD *)a2 + 4);
        a4 = *((_QWORD *)a2 + 3);
LABEL_137:
        JSC::DFG::SpeculativeJIT::compileSymbolUntypedEquality((uint64_t)this, a2, v168, a4, a5, a6, a7, a8);
        return 0;
      }
      if (v145 == 0x54000000000000)
      {
        v167 = *((_QWORD *)a2 + 4);
        a4 = *((_QWORD *)a2 + 3);
LABEL_133:
        JSC::DFG::SpeculativeJIT::compileStringToUntypedEquality((uint64_t)this, a2, v167, a4, a5, a6, a7, a8);
        return 0;
      }
      v227 = 0xC0000000000000;
    }
    else
    {
      if (v145 == 0x2C000000000000)
      {
        v146 = *((_QWORD *)this + 496);
        v147 = *(unsigned int *)(v146 + 220);
        v148 = v147 - 1;
        v149 = (*((_DWORD *)this + 997) + 1);
        if (v147 - 1 > v149)
        {
          if (v147 <= v149)
            v177 = (*((_DWORD *)this + 997) + 1);
          else
            v177 = *(unsigned int *)(v146 + 220);
          while (1)
          {
            if (v177 == v149)
            {
              __break(0xC471u);
              JUMPOUT(0x197BBD24CLL);
            }
            v178 = *(_QWORD *)(*(_QWORD *)(v146 + 208) + 8 * v149);
            if (*(_DWORD *)(v178 + 52))
            {
              if (*(_WORD *)(v178 + 18) != 23 || (*(_QWORD *)(v178 + 24) & 0xFF00FFFFFFFFFFFFLL) != 0)
                break;
            }
            if (v148 <= ++v149)
              goto LABEL_125;
          }
        }
        else
        {
          do
          {
LABEL_125:
            if (v148 >= v147)
            {
              __break(0xC471u);
              JUMPOUT(0x197BBD20CLL);
            }
            v150 = *(_QWORD *)(v146 + 208);
            v151 = *(_QWORD *)(v150 + 8 * v148);
            v152 = *(unsigned __int16 *)(v151 + 18);
            --v148;
          }
          while ((v152 - 364) > 0xB);
          if (v152 == 365 && (_DWORD)v147 && *((_QWORD *)this + 497) == (*(_QWORD *)(v151 + 24) & 0xFF00FFFFFFFFFFFFLL))
          {
            v153 = v147 - 1;
            v154 = *(_QWORD *)(v150 + 8 * (v147 - 1));
            JSC::DFG::SpeculativeJIT::compilePeepHoleObjectStrictEquality((uint64_t)this, *((_QWORD *)a2 + 4), v10, v154, a5, a6, a7, a8);
            JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[3], v155, v156, v157, v158, v159, v160);
            JSC::DFG::SpeculativeJIT::use((uint64_t)v9, v8[4], v161, v162, v163, v164, v165, v166);
            *((_DWORD *)v9 + 997) = v153;
            *((_QWORD *)v9 + 497) = v154;
            return 1;
          }
        }
        v179 = *((_QWORD *)a2 + 4);
        v180 = v10;
LABEL_176:
        JSC::DFG::SpeculativeJIT::compileObjectStrictEquality((uint64_t)this, v179, v180, a4, a5, a6, a7, a8);
        return 0;
      }
      v227 = 0x18000000000000;
    }
    if (v145 != v227)
      goto LABEL_18;
  }
LABEL_37:
  v63 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_116;
  v64 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v64 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBD1A0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v64 + 12))
  {
    v65 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v62 = v8[4];
  }
  else
  {
LABEL_116:
    v65 = -1;
  }
  v66 = v62 & 0xFF00FFFFFFFFFFFFLL;
  if ((v62 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_117;
  v67 = ~*(_DWORD *)((v62 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v67 >= *((unsigned int *)v9 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBD1A8);
  }
  if (*(_BYTE *)(*((_QWORD *)v9 + 499) + 24 * (int)v67 + 12))
    v68 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v62, a3, a4, a5, a6, a7, a8);
  else
LABEL_117:
    v68 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v228, v9, a3, a4, a5, a6, a7, a8);
  if (v65 == -1)
    v65 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v10, v70, v71, v72, v73, v74, v75);
  if (v68 == -1)
    v68 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v62, v70, v71, v72, v73, v74, v75);
  JSC::DFG::SpeculativeJIT::speculate(v9, v69, v8[3], v71, v72, v73, v74, v75);
  JSC::DFG::SpeculativeJIT::speculate(v9, v76, v8[4], v77, v78, v79, v80, v81);
  v89 = v229;
  v90 = (v68 & 0x1F) << 16;
  if (v65 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v90 | 0xEB2063FF, v83, v84, v85, v86, v87, v88);
    v93 = *((_DWORD *)v9 + 50);
  }
  else
  {
    v91 = v90 | (32 * (v65 & 0x1F)) | 0xEB00001F;
    v92 = *((_DWORD *)v9 + 50);
    if (v92 + 4 > *((_DWORD *)v9 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v82, v83, v84, v85, v86, v87, v88);
      v92 = *((_DWORD *)v9 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v9 + 7) + v92) = v91;
    v93 = *((_DWORD *)v9 + 50) + 4;
    *((_DWORD *)v9 + 50) = v93;
  }
  if (v93 + 4 > *((_DWORD *)v9 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v82, v83, v84, v85, v86, v87, v88);
    v93 = *((_DWORD *)v9 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v93) = v89 | 0x1A9F17E0;
  *((_DWORD *)v9 + 50) += 4;
  v94 = (char)v229;
  JSC::MacroAssemblerARM64::or32((uint64_t)v9, (JSC::ARM64LogicalImmediate *)6, v229, (char)v229);
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, v94, (uint64_t)v8, 21, 0, v95, v96, v97);
  if (v228)
  {
    v98 = (char)v229;
    if ((char)v229 != -1)
    {
      if ((char)v229 > 15)
        v98 = -1;
      --*(_DWORD *)(v228 + 12 * v98 + 4784);
    }
  }
  if (v66)
  {
    if (v68 > 15)
      v99 = -1;
    else
      v99 = v68;
    --*((_DWORD *)v9 + 3 * v99 + 1196);
  }
  if (!v63)
    return 0;
  result = 0;
  if (v65 > 15)
    v100 = -1;
  else
    v100 = v65;
  --*((_DWORD *)v9 + 3 * v100 + 1196);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleNotDoubleNeitherDoubleNorHeapBigIntNorStringStrictEquality(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  unsigned int v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;

  v12 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_36;
  v13 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(a1 + 4004))
    goto LABEL_44;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v13 + 12))
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, a3, a4, a5, a6, a7, a8);
  else
LABEL_36:
    v14 = -1;
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
LABEL_37:
    v16 = -1;
    goto LABEL_9;
  }
  v15 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x197BBD664);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v15 + 12))
    goto LABEL_37;
  v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, a3, a4, a5, a6, a7, a8);
LABEL_9:
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v58, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  if (v14 == -1)
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, v17, v18, v19, v20, v21, v22);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v17, v18, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::speculateNotDouble(a1, a3, v14, 0, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigIntNorString(a1, a4, v16, v23, v24, v25, v26, v27);
  v32 = *(uint64_t **)(a2 + 72);
  v33 = *v32;
  v34 = v32[2];
  v35 = *(_QWORD *)(a1 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v36 < *(_DWORD *)(v35 + 60))
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8 * v36++);
    if (v37)
      goto LABEL_16;
  }
  v37 = 0;
LABEL_16:
  v38 = (_QWORD *)(a1 + 5264);
  if (v37 == v33)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 1, v14, v16, v28, v29, v30, v31, (uint64_t)&v60);
    v44 = v61;
    v62 = v60;
    v63 = v61;
    v64 = v34;
    v45 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v45 == *(_DWORD *)(a1 + 5272))
    {
      v54 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v45 + 1), (unint64_t)&v62, v39, v40, v41, v42, v43);
      v55 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v55 = *(_DWORD *)v54;
      *(_QWORD *)(v55 + 4) = *(_QWORD *)(v54 + 4);
      *(_QWORD *)(v55 + 16) = *(_QWORD *)(v54 + 16);
    }
    else
    {
      v46 = *v38 + 24 * v45;
      *(_DWORD *)v46 = v60;
      *(_QWORD *)(v46 + 4) = v44;
      *(_QWORD *)(v46 + 16) = v34;
    }
    ++*(_DWORD *)(a1 + 5276);
  }
  else
  {
    JSC::MacroAssemblerARM64::branch64(a1, 0, v14, v16, v28, v29, v30, v31, (uint64_t)&v60);
    v51 = v61;
    v62 = v60;
    v63 = v61;
    v64 = v33;
    v52 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v52 == *(_DWORD *)(a1 + 5272))
    {
      v56 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v52 + 1), (unint64_t)&v62, v39, v40, v41, v42, v43);
      v57 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v57 = *(_DWORD *)v56;
      *(_QWORD *)(v57 + 4) = *(_QWORD *)(v56 + 4);
      *(_QWORD *)(v57 + 16) = *(_QWORD *)(v56 + 16);
    }
    else
    {
      v53 = *v38 + 24 * v52;
      *(_DWORD *)v53 = v60;
      *(_QWORD *)(v53 + 4) = v51;
      *(_QWORD *)(v53 + 16) = v33;
    }
    ++*(_DWORD *)(a1 + 5276);
    v33 = v34;
  }
  result = JSC::DFG::SpeculativeJIT::jump(a1, v33, 0, v39, v40, v41, v42, v43);
  if (v58)
  {
    v48 = v59;
    if (v59 != -1)
    {
      if (v59 > 15)
        v48 = -1;
      --*(_DWORD *)(v58 + 12 * v48 + 4784);
    }
  }
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v16 > 15)
      v49 = -1;
    else
      v49 = v16;
    --*(_DWORD *)(a1 + 12 * v49 + 4784);
  }
  if (v12)
  {
    if (v14 > 15)
      v50 = -1;
    else
      v50 = v14;
    --*(_DWORD *)(a1 + 12 * v50 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileNotDoubleNeitherDoubleNorHeapBigIntNorStringStrictEquality(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  char v51;
  unsigned int v52;
  char v53;
  char v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;

  v12 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_48;
  v13 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBDB10);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v13 + 12))
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, a3, a4, a5, a6, a7, a8);
  else
LABEL_48:
    v14 = -1;
  v15 = a4 & 0xFF00FFFFFFFFFFFFLL;
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_49;
  v16 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBDB18);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, a3, a4, a5, a6, a7, a8);
  else
LABEL_49:
    v17 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v58, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  v25 = ~*(_DWORD *)(v12 + 48);
  v26 = *(unsigned int *)(a1 + 4004);
  if (v25 >= v26)
    goto LABEL_76;
  v27 = *(_QWORD *)(a1 + 3992);
  v28 = *(_DWORD *)(v27 + 24 * (int)v25 + 8);
  if (v28 == 1)
  {
    if (v14 == -1)
      v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, v19, v20, v21, v22, v23, v24);
    if (v14 > 15)
      v29 = -1;
    else
      v29 = v14;
    ++*(_DWORD *)(a1 + 12 * v29 + 4784);
    v30 = v14;
    goto LABEL_17;
  }
  v55 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v55 >= v26)
  {
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x197BBDB08);
  }
  if (*(_DWORD *)(v27 + 24 * (int)v55 + 8) == 1)
  {
    if (v17 == -1)
      v17 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v19, v20, v21, v22, v23, v24);
    if (v17 > 15)
      v56 = -1;
    else
      v56 = v17;
    ++*(_DWORD *)(a1 + 12 * v56 + 4784);
    v30 = v17;
  }
  else
  {
    if (v12 != v15 || v28 != 2)
      goto LABEL_71;
    if (v14 == -1)
      v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, v19, v20, v21, v22, v23, v24);
    if (v17 == -1)
      v17 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v19, v20, v21, v22, v23, v24);
    if (v14 == v17)
    {
      v30 = v14;
      if (v14 == -1)
        v30 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, v19, v20, v21, v22, v23, v24);
      if (v30 > 15)
        v57 = -1;
      else
        v57 = v30;
      ++*(_DWORD *)(a1 + 12 * v57 + 4784);
      v17 = v14;
      v14 = v30;
    }
    else
    {
LABEL_71:
      v30 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v18, v19, v20, v21, v22, v23, v24);
    }
  }
LABEL_17:
  if (v14 == -1)
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a3, v19, v20, v21, v22, v23, v24);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v19, v20, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::speculateNotDouble(a1, a3, v14, 0, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigIntNorString(a1, a4, v17, v31, v32, v33, v34, v35);
  v43 = (v17 & 0x1F) << 16;
  if (v14 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v43 | 0xEB2063FF, v37, v38, v39, v40, v41, v42);
    v46 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v44 = v43 | (32 * (v14 & 0x1F)) | 0xEB00001F;
    v45 = *(_DWORD *)(a1 + 200);
    if (v45 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v36, v37, v38, v39, v40, v41, v42);
      v45 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v45) = v44;
    v46 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v46;
  }
  if (v46 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v36, v37, v38, v39, v40, v41, v42);
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = v30 & 0x1F | 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v30, v30);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v30, a2, 21, 0, v47, v48, v49);
  if (v30 != -1)
  {
    if (v30 > 15)
      v51 = -1;
    else
      v51 = v30;
    --*(_DWORD *)(a1 + 12 * v51 + 4784);
  }
  if (v58)
  {
    v52 = v59;
    if (v59 != -1)
    {
      if (v59 > 15)
        v52 = -1;
      --*(_DWORD *)(v58 + 12 * v52 + 4784);
    }
  }
  if (v15)
  {
    if (v17 > 15)
      v53 = -1;
    else
      v53 = v17;
    --*(_DWORD *)(a1 + 12 * v53 + 4784);
  }
  if (v12)
  {
    if (v14 > 15)
      v54 = -1;
    else
      v54 = v14;
    --*(_DWORD *)(a1 + 12 * v54 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileHeapBigIntEquality(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  JSC::DFG::Node *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  JSC::DFG::Node *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::ARM64LogicalImmediate *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint8x8_t v76;
  __int32 v77;
  uint8x8_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v87;
  signed __int8 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  char *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned int v99;
  char *v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  int v123;
  char v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  int64_t v131;
  unsigned __int8 *v132;
  int v133;
  char v134;
  unsigned __int8 *v135;
  JSC::AssemblerBuffer *v136;
  int v137;
  unint64_t *v138;
  JSC::ARM64LogicalImmediate *v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142[2];
  char v143;
  __int16 v144;
  char v145;
  unsigned int v146[3];
  char *v147;
  int v148;
  unsigned int v149;
  _WORD v150[4];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_126;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBE454);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_126:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = (JSC::DFG::Node *)(v13 & 0xFF00FFFFFFFFFFFFLL);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_127;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBE45CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_127:
    v16 = -1;
  v17 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v19 = -1;
    else
      v19 = v12;
    ++*((_DWORD *)this + 3 * v19 + 1196);
    v18 = v12;
  }
  else
  {
    v18 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  v20 = v12;
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 3), v12, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateHeapBigInt((uint64_t)this, *((_QWORD *)a2 + 4), v16, v21, v22, v23, v24, v25);
  v141 = v10 & 0xFF00FFFFFFFFFFFFLL;
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), v26, v27, v28, v29, v30, v31);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v14, v32, v33, v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v12, v16, v38, v39, v40, v41, (uint64_t)v146);
  v136 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v49 = *((_DWORD *)this + 50);
  if (v49 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v136, v42, v43, v44, v45, v46, v47, v48);
    v49 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v49) = v18 | 0x320003E0;
  v50 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v50; v50 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v50)
  {
    if ((v50 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v136, v42, v43, v44, v45, v46, v47, v48);
      v50 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v50) = -721215457;
    v50 = *((_DWORD *)this + 50) + 4;
  }
  v51 = v50;
  if ((v50 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v136, v42, v43, v44, v45, v46, v47, v48);
    v51 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v51) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v52 = 69;
  else
    v52 = 65;
  v142[0] = v50;
  v142[1] = 0;
  v143 = v52;
  v144 = 15;
  v145 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v146, (uint64_t)this, v43, v44, v45, v46, v47, v48);
  v53 = 1;
  v138 = (unint64_t *)((char *)this + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 1, (uint64_t)this + 5752, v18, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v54, v55);
  v62 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v56, v57, v58, v59, v60, v61);
  v139 = v63;
  v140 = v62;
  v147 = (char *)v150;
  v148 = 2;
  if (v12 == 1)
  {
    if (v16 == 2)
      goto LABEL_90;
    v137 = v12;
    v53 = 0;
  }
  else
  {
    v137 = v12;
    v150[0] = v12 | 0x100;
    v149 = 1;
    if (v16 == 2)
      goto LABEL_36;
  }
  v150[v53++] = v16 | 0x200;
  v149 = v53;
  do
  {
LABEL_36:
    v70 = 0;
    v71 = 0;
    v72 = v147;
    v73 = v53;
    do
    {
      if ((v147[v70 + 1] & 0x40) != 0)
        goto LABEL_140;
      v71 |= 1 << v147[v70 + 1];
      v70 += 2;
    }
    while (2 * v53 != v70);
    v74 = 0;
    do
    {
      v75 = v147[v74] & 0x7F;
      if (v75 >= 0x40)
        goto LABEL_140;
      v71 &= ~(1 << v75);
      v74 += 2;
    }
    while (2 * v53 != v74);
    v76 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
    v76.i16[0] = vaddlv_u8(v76);
    v77 = v76.i32[0];
    v78 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v71));
    v78.i16[0] = vaddlv_u8(v78);
    if (v78.i32[0] + v77)
    {
      v79 = 0;
      if (v53 <= 1)
        v80 = 1;
      else
        v80 = v53;
      v81 = 2 * v80;
      while (1)
      {
        v82 = v147[v79 + 1];
        if ((v82 & 0x7Fu) >= 0x40)
          goto LABEL_140;
        if (((v71 >> (v82 & 0x7F)) & 1) != 0)
          break;
        v79 += 2;
        if (v81 == v79)
          goto LABEL_86;
      }
      v83 = v147[v79];
      if (v83 == v82)
        goto LABEL_84;
      if ((char)v83 == 63)
      {
        v84 = *((_DWORD *)this + 50);
        v85 = *((_DWORD *)this + 48);
        if ((char)v82 != 31)
        {
          v87 = v82 & 0x1F | 0xD2800000;
          goto LABEL_81;
        }
      }
      else
      {
        v84 = *((_DWORD *)this + 50);
        v85 = *((_DWORD *)this + 48);
        if (v82 != 31 && (char)v83 != 31)
        {
          v87 = v82 & 0xFFE0FFFF | ((v83 & 0x1F) << 16) | 0xAA0003E0;
LABEL_81:
          if (v84 + 4 > v85)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v136, (uint64_t)v63, v64, v65, v66, v67, v68, v69);
            v84 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v84) = v87;
          *((_DWORD *)this + 50) += 4;
          v72 = v147;
          v73 = v149;
LABEL_84:
          memmove(&v72[v79], &v72[v79 + 2], 2 * v73 - v79 - 2);
          v53 = v149 - 1;
          goto LABEL_85;
        }
      }
      v87 = (char)v82 | (32 * (char)v83) | 0x91000000;
      goto LABEL_81;
    }
    v88 = v147[1];
    v134 = *v147;
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *v147, v88, v65, v66, v67, v68, v69);
    memmove(v147, v147 + 2, 2 * v149 - 2);
    v89 = v149;
    v90 = v149 - 1;
    v149 = v90;
    v91 = (unsigned __int8 *)v147;
    v92 = (unsigned __int8 *)&v147[2 * v90];
    if (v89 == 1)
    {
      v98 = 0;
      v99 = 0;
      v63 = (JSC::ARM64LogicalImmediate *)&v147[2 * v90];
    }
    else
    {
      v93 = 2 * v90;
      v94 = v147;
      while (*v94 != v88)
      {
        v94 += 2;
        v93 -= 2;
        if (!v93)
          goto LABEL_64;
      }
      *v94 = v134;
LABEL_64:
      LODWORD(v90) = 0;
      v95 = v91;
      v63 = (JSC::ARM64LogicalImmediate *)v92;
      v96 = v92;
      do
      {
        if (*v91 == v91[1])
        {
          v97 = v91;
          if (v96 != (unsigned __int8 *)&v147[2 * v149])
          {
            v133 = v90;
            v135 = v92;
            if (v91 == (unsigned __int8 *)v63)
            {
              v97 = v96;
            }
            else
            {
              v131 = v95 - (unsigned __int8 *)v63;
              v132 = v96;
              memmove(v96, v63, v95 - (unsigned __int8 *)v63);
              v97 = &v132[v131];
            }
            v92 = v135;
            LODWORD(v90) = v133;
          }
          v63 = (JSC::ARM64LogicalImmediate *)(v91 + 2);
          LODWORD(v90) = v90 + 1;
          v96 = v97;
        }
        v91 += 2;
        v95 += 2;
      }
      while (v91 < v92);
      v91 = (unsigned __int8 *)v147;
      v98 = v149;
      v99 = v149;
      v92 = v96;
    }
    v100 = (char *)&v91[2 * v98];
    if (v63 != (JSC::ARM64LogicalImmediate *)v100)
    {
      v101 = v90;
      memmove(v92, v63, v100 - (char *)v63);
      LODWORD(v90) = v101;
      v99 = v149;
    }
    v53 = v99 - v90;
LABEL_85:
    v149 = v53;
LABEL_86:
    ;
  }
  while (v53);
  v102 = (unint64_t)v147;
  v20 = v137;
  if (v150 != (_WORD *)v147 && v147)
  {
    v147 = 0;
    v148 = 0;
    WTF::fastFree(v102, v63, v64, v65, v66, v67, v68, v69);
  }
LABEL_90:
  if ((_DWORD)v140 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v139, 0, v65, v66, v67, v68, v69);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v140 << 35) + 0x380000001ALL, 0, v65, v66, v67, v68, v69);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationCompareStrictEqCell, v103, v104, v105, v106, v107, v108, (int *)&v147);
  if (v18)
  {
    if (v18 == 31)
    {
      v116 = -1862270945;
    }
    else if (v18 == 255)
    {
      v116 = -1442774017;
    }
    else
    {
      v116 = v18 | 0xAA0003E0;
    }
    v117 = *((_DWORD *)this + 50);
    if (v117 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v136, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
      v117 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v117) = v116;
    *((_DWORD *)this + 50) += 4;
  }
  v118 = *((_DWORD *)this + 1441);
  if (v118)
  {
    v119 = v118 - 1;
    v120 = 16 * (v118 - 1);
    while (*((_DWORD *)this + 1441) > v119)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)this, *((_QWORD *)this + 719) + v120, v110, v111, v112, v113, v114, v115);
      v120 -= 16;
      if (--v119 == -1)
        goto LABEL_104;
    }
    __break(0xC471u);
LABEL_142:
    JUMPOUT(0x197BBE44CLL);
  }
LABEL_104:
  *((_BYTE *)this + 5768) = 0;
  if (*((_DWORD *)this + 1440))
  {
    if (*((_DWORD *)this + 1441))
      *((_DWORD *)this + 1441) = 0;
    v121 = *v138;
    if (*v138)
    {
      *((_QWORD *)this + 719) = 0;
      *((_DWORD *)this + 1440) = 0;
      WTF::fastFree(v121, v109, v110, v111, v112, v113, v114, v115);
    }
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v142, (uint64_t)this, v110, v111, v112, v113, v114, v115);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v18, v18);
  v122 = (char *)this + 4776;
  v123 = *((_DWORD *)a2 + 12);
  if (v18 > 15)
    v124 = -1;
  else
    v124 = v18;
  v125 = &v122[12 * v124];
  *(_DWORD *)v125 = v123;
  *((_DWORD *)v125 + 1) = 4;
  v126 = ~v123;
  if (v126 >= *((unsigned int *)this + 1001))
  {
LABEL_141:
    __break(0xC471u);
    goto LABEL_142;
  }
  v127 = *((_QWORD *)this + 499) + 24 * (int)v126;
  v128 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v127 = a2;
  *(_DWORD *)(v127 + 8) = v128;
  *(_BYTE *)(v127 + 17) = v18;
  *(_DWORD *)(v127 + 12) = 21;
  *(_BYTE *)(v127 + 16) = 0;
  if (v18 != -1)
    --*(_DWORD *)&v122[12 * v124 + 8];
  if (v14)
  {
    if (v16 > 15)
      v129 = -1;
    else
      v129 = v16;
    --*(_DWORD *)&v122[12 * v129 + 8];
  }
  if (v141)
  {
    if (v20 > 15)
      v130 = -1;
    else
      v130 = v12;
    --*(_DWORD *)&v122[12 * v130 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::compileStringIdentToNotStringVarEquality(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  signed __int8 v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t *v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int *v65;
  int *v66;
  int v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  unsigned int v95;
  unsigned int v96;
  char v97;
  char v98;
  int v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  _BYTE v109[24];
  uint64_t v110;
  char v111;
  uint64_t v112;
  unsigned __int8 v113;

  v12 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_60;
  v13 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBE9BCLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v13 + 12))
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a3, a3, a4, a5, a6, a7, a8);
  else
LABEL_60:
    v14 = -1;
  v101 = a2;
  v102 = a4 & 0xFF00FFFFFFFFFFFFLL;
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_59;
  v15 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_66:
    JUMPOUT(0x197BBE970);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, a3, a4, a5, a6, a7, a8);
  else
LABEL_59:
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v112, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v110, (JSC::DFG::SpeculativeJIT *)a1, v17, v18, v19, v20, v21, v22);
  v29 = v113;
  v30 = v111;
  if (v14 == -1)
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a3, v23, v24, v25, v26, v27, v28);
  if (v16 == 0xFF)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v23, v24, v25, v26, v27, v28);
  v100 = v14;
  JSC::DFG::SpeculativeJIT::speculateString(a1, a3, v14, v24, v25, v26, v27, v28);
  v99 = v14;
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage(a1, a3, v14, (char)v29, v31, v32, v33, v34);
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v35, v36, v37, v38, v39, v40, v41);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v30 | 0x321F07E0;
  *(_DWORD *)(a1 + 200) += 4;
  v107 = (WTF *)v109;
  v108 = 2;
  JSC::AssemblyHelpers::branchIfNotCell(a1, v16, 1, v37, v38, v39, v40, v41, (uint64_t)&v105);
  v48 = v105;
  if (v105 != -1)
  {
    v49 = HIDWORD(v108);
    if (HIDWORD(v108) == (_DWORD)v108)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, (void *)(HIDWORD(v108) + 1), (unint64_t)&v105, v43, v44, v45, v46, v47);
      v52 = *v50;
      v51 = (uint64_t *)(v50 + 1);
      v48 = v52;
      v49 = HIDWORD(v108);
    }
    else
    {
      v51 = &v106;
    }
    v53 = (char *)v107 + 12 * v49;
    *(_DWORD *)v53 = v48;
    *(_QWORD *)(v53 + 4) = *v51;
    ++HIDWORD(v108);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_66;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v16 | 0x500000000, *(char *)(a1 + 304), v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v54, v55, v56, v57, (uint64_t)&v103);
  v63 = v103;
  if (v103 != -1)
  {
    v64 = HIDWORD(v108);
    if (HIDWORD(v108) == (_DWORD)v108)
    {
      v65 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v107, (void *)(HIDWORD(v108) + 1), (unint64_t)&v103, v58, v59, v60, v61, v62);
      v67 = *v65;
      v66 = v65 + 1;
      v63 = v67;
      v64 = HIDWORD(v108);
    }
    else
    {
      v66 = &v104;
    }
    v68 = (char *)v107 + 12 * v64;
    *(_DWORD *)v68 = v63;
    *(_QWORD *)(v68 + 4) = *(_QWORD *)v66;
    ++HIDWORD(v108);
  }
  v69 = v12;
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage(a1, a4, v16, v30, v59, v60, v61, v62);
  v77 = (v30 & 0x1F) << 16;
  if (v29 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v77 | 0xEB2063FF, v71, v72, v73, v74, v75, v76);
    v80 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v78 = v77 | (32 * (v29 & 0x1F)) | 0xEB00001F;
    v79 = *(_DWORD *)(a1 + 200);
    if (v79 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v70, v71, v72, v73, v74, v75, v76);
      v79 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v79) = v78;
    v80 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v80;
  }
  if (v80 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v70, v71, v72, v73, v74, v75, v76);
    v80 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v80) = v30 & 0x1F | 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  if (HIDWORD(v108))
  {
    v81 = 0;
    v82 = 0;
    v83 = 12 * HIDWORD(v108);
    do
    {
      if (v82 >= HIDWORD(v108))
      {
        __break(0xC471u);
        JUMPOUT(0x197BBE9B4);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v107 + v81), a1, v71, v72, v73, v74, v75, v76);
      ++v82;
      v81 += 12;
    }
    while (v83 != v81);
  }
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v30, v30);
  JSC::DFG::SpeculativeJIT::jsValueResult(a1, (char)v30, v101, 21, 0, v84, v85, v86);
  v94 = v107;
  if (v109 != (_BYTE *)v107 && v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree((unint64_t)v94, v87, v88, v89, v90, v91, v92, v93);
  }
  if (v110)
  {
    v95 = v111;
    if (v111 != -1)
    {
      if (v111 > 15)
        v95 = -1;
      --*(_DWORD *)(v110 + 12 * v95 + 4784);
    }
  }
  if (v112)
  {
    v96 = (char)v113;
    if ((char)v113 != -1)
    {
      if ((char)v113 > 15)
        v96 = -1;
      --*(_DWORD *)(v112 + 12 * v96 + 4784);
    }
  }
  if (v102)
  {
    if ((char)v16 > 15)
      v97 = -1;
    else
      v97 = v16;
    --*(_DWORD *)(a1 + 12 * v97 + 4784);
  }
  if (v69)
  {
    v98 = v100;
    if (v99 > 15)
      v98 = -1;
    --*(_DWORD *)(a1 + 12 * v98 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::compileStringToUntypedEquality(uint64_t a1, JSC::DFG::JITCompiler *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  uint64_t *v59;
  int v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int *v70;
  int *v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  uint64_t *v86;
  int v87;
  char *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  WTF *v97;
  unsigned int v98;
  char v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  char v103;
  char v104;
  char v105;
  char v106;
  JSC::DFG::JITCompiler *v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  _BYTE v116[24];
  WTF *v117;
  uint64_t v118;
  _BYTE v119[24];
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;

  v12 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_81;
  v13 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBEF78);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v13 + 12))
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a3, a3, a4, a5, a6, a7, a8);
  else
LABEL_81:
    v14 = -1;
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_80;
  v15 = ~*(_DWORD *)((a4 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BBEF80);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, a3, a4, a5, a6, a7, a8);
  else
LABEL_80:
    v16 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v126, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v124, (JSC::DFG::SpeculativeJIT *)a1, v17, v18, v19, v20, v21, v22);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v122, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
  v36 = ~*(_DWORD *)(v12 + 48);
  if (v36 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_86:
    JUMPOUT(0x197BBEF70);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v36 + 8) == 1)
  {
    if (v14 == -1)
      v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a3, v30, v31, v32, v33, v34, v35);
    if (v14 > 15)
      v61 = -1;
    else
      v61 = v14;
    ++*(_DWORD *)(a1 + 12 * v61 + 4784);
    v37 = v14;
  }
  else
  {
    v37 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v29, v30, v31, v32, v33, v34, v35);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v120, (JSC::DFG::SpeculativeJIT *)a1, v30, v31, v32, v33, v34, v35);
  if (v14 == -1)
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a3, v38, v39, v40, v41, v42, v43);
  v107 = a2;
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a4, v38, v39, v40, v41, v42, v43);
  v44 = v125;
  v105 = v123;
  v106 = v127;
  v45 = v121;
  JSC::DFG::SpeculativeJIT::speculateString(a1, a3, v14, v39, v40, v41, v42, v43);
  v117 = (WTF *)v119;
  v118 = 2;
  v114 = (WTF *)v116;
  v115 = 2;
  JSC::AssemblyHelpers::branchIfNotCell(a1, v16, 1, v46, v47, v48, v49, v50, (uint64_t)&v112);
  v56 = v112;
  if (v112 != -1)
  {
    v57 = HIDWORD(v115);
    if (HIDWORD(v115) == (_DWORD)v115)
    {
      v58 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v112, v51, v52, v53, v54, v55);
      v60 = *v58;
      v59 = (uint64_t *)(v58 + 1);
      v56 = v60;
      v57 = HIDWORD(v115);
    }
    else
    {
      v59 = &v113;
    }
    v62 = (char *)v114 + 12 * v57;
    *(_DWORD *)v62 = v56;
    *(_QWORD *)(v62 + 4) = *v59;
    ++HIDWORD(v115);
  }
  JSC::MacroAssemblerARM64::branch64(a1, 0, v14, v16, v52, v53, v54, v55, (uint64_t)&v110);
  v68 = v110;
  if (v110 != -1)
  {
    v69 = HIDWORD(v118);
    if (HIDWORD(v118) == (_DWORD)v118)
    {
      v70 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v117, (void *)(HIDWORD(v118) + 1), (unint64_t)&v110, v63, v64, v65, v66, v67);
      v72 = *v70;
      v71 = v70 + 1;
      v68 = v72;
      v69 = HIDWORD(v118);
    }
    else
    {
      v71 = &v111;
    }
    v73 = (char *)v117 + 12 * v69;
    *(_DWORD *)v73 = v68;
    *(_QWORD *)(v73 + 4) = *(_QWORD *)v71;
    ++HIDWORD(v118);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_86;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v16 | 0x500000000, *(char *)(a1 + 304), v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v74, v75, v76, v77, (uint64_t)&v108);
  v83 = v108;
  if (v108 != -1)
  {
    v84 = HIDWORD(v115);
    if (HIDWORD(v115) == (_DWORD)v115)
    {
      v85 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v114, (void *)(HIDWORD(v115) + 1), (unint64_t)&v108, v78, v79, v80, v81, v82);
      v87 = *v85;
      v86 = (uint64_t *)(v85 + 1);
      v83 = v87;
      v84 = HIDWORD(v115);
    }
    else
    {
      v86 = &v109;
    }
    v88 = (char *)v114 + 12 * v84;
    *(_DWORD *)v88 = v83;
    *(_QWORD *)(v88 + 4) = *v86;
    ++HIDWORD(v115);
  }
  JSC::DFG::SpeculativeJIT::compileStringEquality(a1, v107, v14, v16, v106, v44, v105, v37, v45, (unsigned int *)&v117, (unsigned int *)&v114);
  v96 = v114;
  if (v116 != (_BYTE *)v114 && v114)
  {
    v114 = 0;
    LODWORD(v115) = 0;
    WTF::fastFree((unint64_t)v96, v89, v90, v91, v92, v93, v94, v95);
  }
  v97 = v117;
  if (v119 != (_BYTE *)v117 && v117)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    WTF::fastFree((unint64_t)v97, v89, v90, v91, v92, v93, v94, v95);
  }
  if (v120)
  {
    v98 = v121;
    if (v121 != -1)
    {
      if (v121 > 15)
        v98 = -1;
      --*(_DWORD *)(v120 + 12 * v98 + 4784);
    }
  }
  if (v37 != -1)
  {
    if (v37 > 15)
      v99 = -1;
    else
      v99 = v37;
    --*(_DWORD *)(a1 + 12 * v99 + 4784);
  }
  if (v122)
  {
    v100 = v123;
    if (v123 != -1)
    {
      if (v123 > 15)
        v100 = -1;
      --*(_DWORD *)(v122 + 12 * v100 + 4784);
    }
  }
  if (v124)
  {
    v101 = v125;
    if (v125 != -1)
    {
      if (v125 > 15)
        v101 = -1;
      --*(_DWORD *)(v124 + 12 * v101 + 4784);
    }
  }
  if (v126)
  {
    v102 = v127;
    if (v127 != -1)
    {
      if (v127 > 15)
        v102 = -1;
      --*(_DWORD *)(v126 + 12 * v102 + 4784);
    }
  }
  if ((a4 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v16 > 15)
      v103 = -1;
    else
      v103 = v16;
    --*(_DWORD *)(a1 + 12 * v103 + 4784);
  }
  if (v12)
  {
    if (v14 > 15)
      v104 = -1;
    else
      v104 = v14;
    --*(_DWORD *)(a1 + 12 * v104 + 4784);
  }
}

void JSC::MacroAssembler::comparePtr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = a5;
  v9 = a2;
  v11 = (a4 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v11 | 0xEB2063FF, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  else
  {
    v12 = v11 | (32 * (a3 & 0x1F)) | 0xEB00001F;
    v13 = a1[50];
    if (v13 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v13 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v12;
    v14 = a1[50] + 4;
    a1[50] = v14;
  }
  if (v14 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v14 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v14) = (v8 & 0x1F | ((v9 & 0xF) << 12)) ^ 0x1A9F17E0;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::speculateNotDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  _BYTE v66[12];
  int v67;
  uint64_t v68;
  _BYTE v69[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a2 & 0xFF00FFFFFFFFFFFELL;
  v14 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (uint64_t *)(v12 + 24);
  v16 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v14;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v42 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v42 | 2;
          v45 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v42 & 1) != 0)
          {
            v54 = 2 * *v45;
            while (v54 * 4)
            {
              v55 = *(_QWORD *)&v45[v54];
              if ((*(_BYTE *)(v55 + 19) & 0xC) == 0)
              {
                v56 = *(_QWORD *)(v55 + 96);
                v57 = (v56 & 1) != 0 ? (v56 >> 1) & 3 : *(unsigned __int8 *)(v56 + 4);
                v54 -= 2;
                if (v57 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v45, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_88;
            }
          }
          else if (v45)
          {
            if ((*((_BYTE *)v45 + 19) & 0xC) != 0
              || ((v46 = *((_QWORD *)v45 + 12), (v46 & 1) != 0)
                ? (v47 = (v46 >> 1) & 3)
                : (v47 = *(unsigned __int8 *)(v46 + 4)),
                  v47 == 2))
            {
LABEL_88:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_BYTE *)(v18 + 12) & 0xF0) != 0)
  {
    *(_QWORD *)v69 = 0xFFFFFFFFLL;
    *(_DWORD *)&v69[8] = -16773311;
    v21 = *(_QWORD *)(a1 + 5616);
    v22 = *(_QWORD *)(v21 + 8);
    v23 = *(unsigned int *)(v13 + 20);
    v24 = (uint64_t *)(v22 + 24);
    v25 = (uint64_t *)(v22 + 8);
    if ((a2 & 1) != 0)
      v25 = v24;
    v26 = *v25;
    v27 = *v25 + 32 * v23;
    v28 = *(_DWORD *)(v21 + 88);
    v29 = *(_DWORD *)(v27 + 20);
    if (v28 != v29)
    {
      if ((*(_QWORD *)(v27 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v29 ^ v28) >= 2)
        {
          v43 = *(_QWORD *)v27;
          if (*(_QWORD *)v27 != 4)
          {
            *(_QWORD *)v27 = v43 | 2;
            v48 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v43 & 1) != 0)
            {
              v58 = 2 * *v48;
              while (v58 * 4)
              {
                v59 = *(_QWORD *)&v48[v58];
                if ((*(_BYTE *)(v59 + 19) & 0xC) == 0)
                {
                  v60 = *(_QWORD *)(v59 + 96);
                  v61 = (v60 & 1) != 0 ? (v60 >> 1) & 3 : *(unsigned __int8 *)(v60 + 4);
                  v58 -= 2;
                  if (v61 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v48, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_52;
              }
            }
            else if (v48)
            {
              if ((*((_BYTE *)v48 + 19) & 0xC) != 0
                || ((v49 = *((_QWORD *)v48 + 12), (v49 & 1) != 0)
                  ? (v50 = (v49 >> 1) & 3)
                  : (v50 = *(unsigned __int8 *)(v49 + 4)),
                    v50 == 2))
              {
LABEL_52:
                *(_QWORD *)v27 = 4;
              }
            }
          }
          *(_DWORD *)(v26 + 32 * v23 + 16) = -21020677;
        }
        if ((v28 & 1) != 0)
          *(_QWORD *)v27 &= ~2uLL;
      }
      *(_DWORD *)(v27 + 20) = v28;
    }
    v30 = *(_QWORD *)(v27 + 8) & 0x300000000;
    if (v30)
    {
      JSC::MacroAssemblerARM64::branch64(a1, 2, (char)v8, 27, a5, a6, a7, a8, (uint64_t)&v67);
      *(_DWORD *)v69 = v67;
      *(_QWORD *)&v69[4] = v68;
    }
    v31 = *(_QWORD *)(a1 + 5616);
    v32 = *(_QWORD *)(v31 + 8);
    v33 = *(unsigned int *)(v13 + 20);
    v34 = (uint64_t *)(v32 + 24);
    v35 = (uint64_t *)(v32 + 8);
    if ((a2 & 1) != 0)
      v35 = v34;
    v36 = *v35;
    v37 = *v35 + 32 * v33;
    v38 = *(_DWORD *)(v31 + 88);
    v39 = *(_DWORD *)(v37 + 20);
    if (v38 != v39)
    {
      if ((*(_QWORD *)(v37 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v39 ^ v38) >= 2)
        {
          v44 = *(_QWORD *)v37;
          if (*(_QWORD *)v37 != 4)
          {
            *(_QWORD *)v37 = v44 | 2;
            v51 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v44 & 1) != 0)
            {
              v62 = 2 * *v51;
              while (v62 * 4)
              {
                v63 = *(_QWORD *)&v51[v62];
                if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
                {
                  v64 = *(_QWORD *)(v63 + 96);
                  v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                  v62 -= 2;
                  if (v65 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v51, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_59;
              }
            }
            else if (v51)
            {
              if ((*((_BYTE *)v51 + 19) & 0xC) != 0
                || ((v52 = *((_QWORD *)v51 + 12), (v52 & 1) != 0)
                  ? (v53 = (v52 >> 1) & 3)
                  : (v53 = *(unsigned __int8 *)(v52 + 4)),
                    v53 == 2))
              {
LABEL_59:
                *(_QWORD *)v37 = 4;
              }
            }
          }
          *(_DWORD *)(v36 + 32 * v33 + 16) = -21020677;
        }
        if ((v38 & 1) != 0)
          *(_QWORD *)v37 &= ~2uLL;
      }
      *(_DWORD *)(v37 + 20) = v38;
    }
    if ((*(_BYTE *)(v37 + 12) & 0xF0) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64(a1, 1, (char)v8, 27, a5, a6, a7, a8, (uint64_t)v66);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFFF0FFFFFFFFFLL, (uint64_t)v66, 1uLL, v40, v41);
    }
    if (v30)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v69, a1, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigIntNorString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  WTF *v76;
  _BYTE v78[12];
  int v79;
  uint64_t v80;
  _BYTE v81[12];
  int v82;
  uint64_t v83;
  WTF *v84;
  uint64_t v85;
  _BYTE v86[24];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a2 & 0xFF00FFFFFFFFFFFELL;
  v14 = (_QWORD *)(v12 + 24);
  v15 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v17 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v17 != *(_DWORD *)(v16 + 20))
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v16, v17, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v16 + 20) = (_DWORD)v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0x8F030000000) != 0)
  {
    v84 = (WTF *)v86;
    v85 = 2;
    v18 = *(_QWORD *)(a1 + 5616);
    v19 = *(_QWORD *)(v18 + 8);
    v20 = (_QWORD *)(v19 + 24);
    v21 = (_QWORD *)(v19 + 8);
    if ((a2 & 1) != 0)
      v21 = v20;
    v22 = *v21 + 32 * *(unsigned int *)(v13 + 20);
    v23 = (void *)*(unsigned int *)(v18 + 88);
    if ((_DWORD)v23 != *(_DWORD *)(v22 + 20))
    {
      if ((*(_QWORD *)(v22 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v22, v23, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v22 + 20) = (_DWORD)v23;
    }
    v24 = *(_QWORD *)(v22 + 8) & 0x300000000;
    if (v24)
    {
      JSC::MacroAssemblerARM64::branch64(a1, 2, (char)v8, 27, a5, a6, a7, a8, (uint64_t)&v82);
      v25 = v82;
      if (v82 != -1)
      {
        v26 = HIDWORD(v85);
        if (HIDWORD(v85) == (_DWORD)v85)
        {
          v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, (void *)(HIDWORD(v85) + 1), (unint64_t)&v82, a4, a5, a6, a7, a8);
          v29 = *v27;
          v28 = (uint64_t *)(v27 + 1);
          v25 = v29;
          v26 = HIDWORD(v85);
        }
        else
        {
          v28 = &v83;
        }
        v30 = (char *)v84 + 12 * v26;
        *(_DWORD *)v30 = v25;
        *(_QWORD *)(v30 + 4) = *v28;
        ++HIDWORD(v85);
      }
    }
    v31 = *(_QWORD *)(a1 + 5616);
    v32 = *(_QWORD *)(v31 + 8);
    v33 = (_QWORD *)(v32 + 24);
    v34 = (_QWORD *)(v32 + 8);
    if ((a2 & 1) != 0)
      v34 = v33;
    v35 = *v34 + 32 * *(unsigned int *)(v13 + 20);
    v36 = (void *)*(unsigned int *)(v31 + 88);
    if ((_DWORD)v36 != *(_DWORD *)(v35 + 20))
    {
      if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v35, v36, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v35 + 20) = (_DWORD)v36;
    }
    if ((*(_BYTE *)(v35 + 12) & 0xF0) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64(a1, 1, (char)v8, 27, a5, a6, a7, a8, (uint64_t)v81);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFFF0FFFFFFFFFLL, (uint64_t)v81, 1uLL, v37, v38);
    }
    v39 = *(_QWORD *)(a1 + 5616);
    v40 = *(_QWORD *)(v39 + 8);
    v41 = (_QWORD *)(v40 + 24);
    v42 = (_QWORD *)(v40 + 8);
    if ((a2 & 1) != 0)
      v42 = v41;
    v43 = *v42 + 32 * *(unsigned int *)(v13 + 20);
    v44 = (void *)*(unsigned int *)(v39 + 88);
    if ((_DWORD)v44 != *(_DWORD *)(v43 + 20))
    {
      if ((*(_QWORD *)(v43 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v43, v44, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v43 + 20) = (_DWORD)v44;
    }
    v45 = *(_QWORD *)(v43 + 8) & 0xFFFFD7FF00000008;
    if (v45)
    {
      JSC::AssemblyHelpers::branchIfNotCell(a1, v8, 1, a4, a5, a6, a7, a8, (uint64_t)&v79);
      v46 = v79;
      if (v79 != -1)
      {
        v47 = HIDWORD(v85);
        if (HIDWORD(v85) == (_DWORD)v85)
        {
          v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v84, (void *)(HIDWORD(v85) + 1), (unint64_t)&v79, a4, a5, a6, a7, a8);
          v50 = *v48;
          v49 = (uint64_t *)(v48 + 1);
          v46 = v50;
          v47 = HIDWORD(v85);
        }
        else
        {
          v49 = &v80;
        }
        v51 = (char *)v84 + 12 * v47;
        *(_DWORD *)v51 = v46;
        *(_QWORD *)(v51 + 4) = *v49;
        ++HIDWORD(v85);
      }
    }
    v52 = *(_QWORD *)(a1 + 5616);
    v53 = *(_QWORD *)(v52 + 8);
    v54 = (_QWORD *)(v53 + 24);
    v55 = (_QWORD *)(v53 + 8);
    if ((a2 & 1) != 0)
      v55 = v54;
    v56 = *v55 + 32 * *(unsigned int *)(v13 + 20);
    v57 = (void *)*(unsigned int *)(v52 + 88);
    if ((_DWORD)v57 != *(_DWORD *)(v56 + 20))
    {
      if ((*(_QWORD *)(v56 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v56, v57, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v56 + 20) = (_DWORD)v57;
    }
    if ((*(_QWORD *)(v56 + 8) & 0x80030000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        goto LABEL_64;
      }
      v58 = v8;
      v59 = (void *)(((unint64_t)v8 << 32) | 0x80000000);
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      v60 = *(char *)(a1 + 272);
      v61 = *(_BYTE *)(a1 + 272);
      JSC::MacroAssemblerARM64::load8(a1, v58 | 0x500000000, v60, a4, a5, a6, a7, a8);
      v69 = v60 | (32 * v60) | 0x51000800;
      v70 = *(_DWORD *)(a1 + 200);
      if (v70 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v62, v63, v64, v65, v66, v67, v68);
        v70 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v70) = v69;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::branch32(a1, 9, v61, 1, v65, v66, v67, v68, (uint64_t)v78);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, v59, a2, 0xFFFFF7FFCFFFFFFFLL, (uint64_t)v78, 1uLL, v71, v72);
    }
    if (v45 | v24 && HIDWORD(v85))
    {
      v73 = 0;
      v74 = 0;
      v75 = 12 * HIDWORD(v85);
      while (v74 < HIDWORD(v85))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v84 + v73), a1, a3, a4, a5, a6, a7, a8);
        ++v74;
        v73 += 12;
        if (v75 == v73)
          goto LABEL_41;
      }
      __break(0xC471u);
LABEL_64:
      JUMPOUT(0x197BBF9F8);
    }
LABEL_41:
    v76 = v84;
    if (v86 != (_BYTE *)v84 && v84 != 0)
    {
      v84 = 0;
      LODWORD(v85) = 0;
      WTF::fastFree((unint64_t)v76, v57, a3, a4, a5, a6, a7, a8);
    }
  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char v44;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v35 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v35 | 2;
          v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v39 = 2 * *v36;
            while (v39 * 4)
            {
              v40 = *(_QWORD *)&v36[v39];
              if ((*(_BYTE *)(v40 + 19) & 0xC) == 0)
              {
                v41 = *(_QWORD *)(v40 + 96);
                v42 = (v41 & 1) != 0 ? (v41 >> 1) & 3 : *(unsigned __int8 *)(v41 + 4);
                v39 -= 2;
                if (v42 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v36, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_46;
            }
          }
          else if (v36)
          {
            if ((*((_BYTE *)v36 + 19) & 0xC) != 0
              || ((v37 = *((_QWORD *)v36 + 12), (v37 & 1) != 0)
                ? (v38 = (v37 >> 1) & 3)
                : (v38 = *(unsigned __int8 *)(v37 + 4)),
                  v38 == 2))
            {
LABEL_46:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0x8F030000000) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12))
    {
      v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v43, (JSC::DFG::SpeculativeJIT *)a1, v21, v22, v23, v24, v25, v26);
      if (v20 != -1)
        goto LABEL_12;
    }
    else
    {
LABEL_10:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v43, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    }
    v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v27, v28, v29, v30, v31, v32);
LABEL_12:
    JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigIntNorString(a1, a2, v20, v28, v29, v30, v31, v32);
    if (v43)
    {
      v33 = v44;
      if (v44 != -1)
      {
        if (v44 > 15)
          v33 = -1;
        --*(_DWORD *)(v43 + 12 * v33 + 4784);
      }
    }
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (v20 > 15)
        v34 = -1;
      else
        v34 = v20;
      --*(_DWORD *)(a1 + 12 * v34 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileStringEquality(uint64_t a1, JSC::DFG::JITCompiler *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned int *a10, unsigned int *a11)
{
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  int v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t *v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int *v57;
  int *v58;
  int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int8x8_t v75;
  int v76;
  unsigned int v77;
  _DWORD *v78;
  uint64_t *v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  int *v89;
  int *v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x8_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  _DWORD *v105;
  uint64_t *v106;
  int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x8_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  int *v121;
  int *v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int i;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int8x8_t v153;
  int v154;
  unsigned int v155;
  _DWORD *v156;
  uint64_t *v157;
  int v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  char v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  JSC::DFG::Node *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  _BYTE *v190;
  WTF *v191;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _BYTE *v197;
  WTF *v198;
  WTF *v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  _BYTE *v203;
  WTF *v204;
  WTF *v205;
  unsigned int v206;
  int v207;
  _BYTE *v208;
  _BYTE *v209;
  _BYTE *v210;
  unsigned int v211;
  int v212;
  _BYTE *v213;
  _BYTE *v214;
  _BYTE *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  WTF *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  WTF *v247;
  WTF *v248;
  WTF *v249;
  unsigned int v250;
  unsigned __int8 v251;
  unsigned __int8 v252;
  WTF *v254;
  unsigned int v255;
  _BYTE v256[24];
  uint64_t v257;
  unsigned int v258[2];
  char v259;
  __int16 v260;
  char v261;
  int v262;
  int v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  WTF *v277;
  uint64_t v278;
  _BYTE v279[24];
  WTF *v280;
  uint64_t v281;
  _BYTE v282[24];
  WTF *v283;
  uint64_t v284;
  _BYTE v285[24];
  WTF *v286;
  unsigned int v287;
  unsigned int v288;
  _BYTE v289[24];
  _BYTE *v290;
  unsigned int v291;
  unsigned int v292;
  _BYTE v293[24];
  _BYTE *v294;
  unsigned int v295;
  unsigned int v296;
  _BYTE v297[24];
  _BYTE *v298;
  unsigned int v299;
  unsigned int v300;
  _BYTE v301[32];

  v250 = a8;
  v14 = a4;
  v15 = a3;
  v283 = (WTF *)v285;
  v284 = 2;
  v280 = (WTF *)v282;
  v281 = 2;
  v277 = (WTF *)v279;
  v278 = 2;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v283, a10, a3, a4, a5, a6, a7, a8);
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v280, a11, v17, v18, v19, v20, v21, v22);
  v251 = v15;
  JSC::MacroAssemblerARM64::load64(a1, v15 | 0x800000000, a6, v23, v24, v25, v26, v27);
  v252 = v14;
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x800000000, a7, v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, a6, 1, v33, v34, v35, v36, (uint64_t)&v275, v37);
  v44 = v275;
  if (v275 != -1)
  {
    v45 = HIDWORD(v278);
    if (HIDWORD(v278) == (_DWORD)v278)
    {
      v46 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v277, (void *)(HIDWORD(v278) + 1), (unint64_t)&v275, v38, v39, v40, v41, v42);
      v48 = *v46;
      v47 = (uint64_t *)(v46 + 1);
      v44 = v48;
      v45 = HIDWORD(v278);
    }
    else
    {
      v47 = &v276;
    }
    v49 = (char *)v277 + 12 * v45;
    *(_DWORD *)v49 = v44;
    *(_QWORD *)(v49 + 4) = *v47;
    ++HIDWORD(v278);
  }
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, a7, 1, v39, v40, v41, v42, (uint64_t)&v273, v43);
  v55 = v273;
  if (v273 != -1)
  {
    v56 = HIDWORD(v278);
    if (HIDWORD(v278) == (_DWORD)v278)
    {
      v57 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v277, (void *)(HIDWORD(v278) + 1), (unint64_t)&v273, v50, v51, v52, v53, v54);
      v59 = *v57;
      v58 = v57 + 1;
      v55 = v59;
      v56 = HIDWORD(v278);
    }
    else
    {
      v58 = &v274;
    }
    v60 = (char *)v277 + 12 * v56;
    *(_DWORD *)v60 = v55;
    *(_QWORD *)(v60 + 4) = *(_QWORD *)v58;
    ++HIDWORD(v278);
  }
  JSC::MacroAssemblerARM64::load32(a1, a6 | 0x400000000, a5, v50, v51, v52, v53, v54);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_145;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a7 | 0x400000000, *(char *)(a1 + 304), v61, v62, v63, v64, v65);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a5, v66, v67, v68, v69, (uint64_t)&v271);
  v76 = v271;
  if (v271 != -1)
  {
    v77 = HIDWORD(v281);
    if (HIDWORD(v281) == (_DWORD)v281)
    {
      v78 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v280, (void *)(HIDWORD(v281) + 1), (unint64_t)&v271, v70, v71, v72, v73, v74);
      v80 = *v78;
      v79 = (uint64_t *)(v78 + 1);
      v76 = v80;
      v77 = HIDWORD(v281);
    }
    else
    {
      v79 = &v272;
    }
    v81 = (char *)v280 + 12 * v77;
    *(_DWORD *)v81 = v76;
    *(_QWORD *)(v81 + 4) = *v79;
    ++HIDWORD(v281);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, a5, v71, v72, v73, v74, (uint64_t)&v269, v75);
  v87 = v269;
  if (v269 != -1)
  {
    v88 = HIDWORD(v284);
    if (HIDWORD(v284) == (_DWORD)v284)
    {
      v89 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v283, (void *)(HIDWORD(v284) + 1), (unint64_t)&v269, v82, v83, v84, v85, v86);
      v91 = *v89;
      v90 = v89 + 1;
      v87 = v91;
      v88 = HIDWORD(v284);
    }
    else
    {
      v90 = &v270;
    }
    v92 = (char *)v283 + 12 * v88;
    *(_DWORD *)v92 = v87;
    *(_QWORD *)(v92 + 4) = *(_QWORD *)v90;
    ++HIDWORD(v284);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC0694);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a6 | 0x1000000000, *(char *)(a1 + 304), v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, a1, 0, 17, v93, v94, v95, v96, (uint64_t)&v267, v97);
  v103 = v267;
  if (v267 != -1)
  {
    v104 = HIDWORD(v278);
    if (HIDWORD(v278) == (_DWORD)v278)
    {
      v105 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v277, (void *)(HIDWORD(v278) + 1), (unint64_t)&v267, v98, v99, v100, v101, v102);
      v107 = *v105;
      v106 = (uint64_t *)(v105 + 1);
      v103 = v107;
      v104 = HIDWORD(v278);
    }
    else
    {
      v106 = &v268;
    }
    v108 = (char *)v277 + 12 * v104;
    *(_DWORD *)v108 = v103;
    *(_QWORD *)(v108 + 4) = *v106;
    ++HIDWORD(v278);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC06B4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a7 | 0x1000000000, *(char *)(a1 + 304), v98, v99, v100, v101, v102);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, a1, 0, 17, v109, v110, v111, v112, (uint64_t)&v265, v113);
  v119 = v265;
  if (v265 != -1)
  {
    v120 = HIDWORD(v278);
    if (HIDWORD(v278) == (_DWORD)v278)
    {
      v121 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v277, (void *)(HIDWORD(v278) + 1), (unint64_t)&v265, v114, v115, v116, v117, v118);
      v123 = *v121;
      v122 = v121 + 1;
      v119 = v123;
      v120 = HIDWORD(v278);
    }
    else
    {
      v122 = &v266;
    }
    v124 = (char *)v277 + 12 * v120;
    *(_DWORD *)v124 = v119;
    *(_QWORD *)(v124 + 4) = *(_QWORD *)v122;
    ++HIDWORD(v278);
  }
  v125 = a9;
  JSC::MacroAssemblerARM64::load64(a1, a6 | 0x800000000, a6, v114, v115, v116, v117, v118);
  JSC::MacroAssemblerARM64::load64(a1, a7 | 0x800000000, a7, v126, v127, v128, v129, v130);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v131, v132, v133, v134, v135, v136, v137);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v139 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v131, v132, v133, v134, v135, v136, v137);
    v139 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v139) = a5 | (32 * a5) | 0x51000400;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load8(a1, a6 | ((unint64_t)a5 << 8), 0x200000000uLL, v250, v134, v135, v136, v137);
  JSC::MacroAssemblerARM64::load8(a1, a7 | ((unint64_t)a5 << 8), 0x200000000uLL, v125, v140, v141, v142, v143);
  JSC::MacroAssemblerARM64::branch32(a1, 1, v250, v125, v144, v145, v146, v147, (uint64_t)&v263);
  v154 = v263;
  if (v263 != -1)
  {
    v155 = HIDWORD(v281);
    if (HIDWORD(v281) == (_DWORD)v281)
    {
      v156 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v280, (void *)(HIDWORD(v281) + 1), (unint64_t)&v263, v148, v149, v150, v151, v152);
      v158 = *v156;
      v157 = (uint64_t *)(v156 + 1);
      v154 = v158;
      v155 = HIDWORD(v281);
    }
    else
    {
      v157 = &v264;
    }
    v159 = (char *)v280 + 12 * v155;
    *(_DWORD *)v159 = v154;
    *(_QWORD *)(v159 + 4) = *v157;
    ++HIDWORD(v281);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, a5, v149, v150, v151, v152, (uint64_t)&v298, v153);
  v262 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v298, (unsigned int *)&v262, a1, v160, v161, v162, v163, v164);
  if (HIDWORD(v284))
  {
    v172 = 0;
    v173 = 0;
    v174 = 12 * HIDWORD(v284);
    do
    {
      if (v173 >= HIDWORD(v284))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC0794);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v283 + v172), a1, v166, v167, v168, v169, v170, v171);
      ++v173;
      v172 += 12;
    }
    while (v174 != v172);
  }
  v175 = *(_DWORD *)(a1 + 200);
  if (v175 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v165, v166, v167, v168, v169, v170, v171);
    v175 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v175) = a6 | 0x32000BE0;
  v176 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v176; v176 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v176)
  {
    if ((v176 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v165, v166, v167, v168, v169, v170, v171);
      v176 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v176) = -721215457;
    v176 = *(_DWORD *)(a1 + 200) + 4;
  }
  v177 = v176;
  if ((v176 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v165, v166, v167, v168, v169, v170, v171);
    v177 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v177) = 335544320;
  v178 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v178;
  if (*(_BYTE *)(a1 + 328))
    v179 = 69;
  else
    v179 = 65;
  v258[0] = v176;
  v258[1] = 0;
  v259 = v179;
  v260 = 15;
  v261 = -1;
  if (HIDWORD(v281))
  {
    v180 = 0;
    v181 = 0;
    v182 = 12 * HIDWORD(v281);
    do
    {
      if (v181 >= HIDWORD(v281))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC079CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v280 + v180), a1, v166, v167, v168, v169, v170, v171);
      ++v181;
      v180 += 12;
    }
    while (v182 != v180);
    v178 = *(_DWORD *)(a1 + 200);
  }
  if (v178 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v165, v166, v167, v168, v169, v170, v171);
    v178 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v178) = a6 | 0x321F07E0;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v258, a1, v166, v167, v168, v169, v170, v171);
  v189 = HIDWORD(v278);
  v254 = (WTF *)v256;
  v255 = HIDWORD(v278);
  if (HIDWORD(v278) < 3)
  {
    v190 = v256;
    if (!HIDWORD(v278))
      goto LABEL_68;
    goto LABEL_66;
  }
  if (HIDWORD(v278) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197BC07A4);
  }
  v190 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v278)));
  v254 = (WTF *)v190;
  v189 = HIDWORD(v278);
  if (HIDWORD(v278))
  {
LABEL_66:
    v191 = v277;
    v192 = (WTF *)((char *)v277 + 12 * v189);
    do
    {
      *(_DWORD *)v190 = *(_DWORD *)v191;
      *(_QWORD *)(v190 + 4) = *(_QWORD *)((char *)v191 + 4);
      v191 = (WTF *)((char *)v191 + 12);
      v190 += 12;
    }
    while (v191 != v192);
  }
LABEL_68:
  v193 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, a2, v183, v184, v185, v186, v187, v188);
  v195 = v194;
  v196 = v255;
  v286 = (WTF *)v289;
  v287 = 2;
  v288 = v255;
  if (v255 < 3)
  {
    v197 = v289;
    if (!v255)
      goto LABEL_74;
  }
  else
  {
    if (v255 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC07ACLL);
    }
    v197 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v255));
    v287 = 12 * v255 / 0xC;
    v286 = (WTF *)v197;
    v196 = v255;
  }
  v198 = v254;
  v199 = (WTF *)((char *)v254 + 12 * v196);
  do
  {
    *(_DWORD *)v197 = *(_DWORD *)v198;
    *(_QWORD *)(v197 + 4) = *(_QWORD *)((char *)v198 + 4);
    v198 = (WTF *)((char *)v198 + 12);
    v197 += 12;
  }
  while (v198 != v199);
LABEL_74:
  v200 = WTF::fastMalloc((WTF *)0xB8);
  v201 = v288;
  v290 = v293;
  v291 = 2;
  v292 = v288;
  if (v288 < 3)
  {
    v203 = v293;
  }
  else
  {
    if (v288 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC07B4);
    }
    v202 = 12 * v288;
    v203 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v288));
    v291 = (v202 & 0xFFFFFFFC) / 0xC;
    v290 = v203;
    v201 = v288;
  }
  if (v201)
  {
    v204 = v286;
    v205 = (WTF *)((char *)v286 + 12 * v201);
    do
    {
      *(_DWORD *)v203 = *(_DWORD *)v204;
      *(_QWORD *)(v203 + 4) = *(_QWORD *)((char *)v204 + 4);
      v204 = (WTF *)((char *)v204 + 12);
      v203 += 12;
    }
    while (v204 != v205);
  }
  v206 = v292;
  v294 = v297;
  v295 = 2;
  v296 = v292;
  if (v292 < 3)
  {
    v208 = v297;
  }
  else
  {
    if (v292 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC07BCLL);
    }
    v207 = 12 * v292;
    v208 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v292));
    v295 = (v207 & 0xFFFFFFFC) / 0xC;
    v294 = v208;
    v206 = v292;
  }
  if (v206)
  {
    v209 = v290;
    v210 = &v290[12 * v206];
    do
    {
      *(_DWORD *)v208 = *(_DWORD *)v209;
      *(_QWORD *)(v208 + 4) = *(_QWORD *)(v209 + 4);
      v209 += 12;
      v208 += 12;
    }
    while (v209 != v210);
  }
  v211 = v296;
  v298 = v301;
  v299 = 2;
  v300 = v296;
  if (v296 < 3)
  {
    v213 = v301;
    if (!v296)
      goto LABEL_95;
LABEL_93:
    v214 = v294;
    v215 = &v294[12 * v211];
    do
    {
      *(_DWORD *)v213 = *(_DWORD *)v214;
      *(_QWORD *)(v213 + 4) = *(_QWORD *)(v214 + 4);
      v214 += 12;
      v213 += 12;
    }
    while (v214 != v215);
    goto LABEL_95;
  }
  if (v296 >= 0x15555556)
  {
    __break(0xC471u);
LABEL_145:
    JUMPOUT(0x197BC0674);
  }
  v212 = 12 * v296;
  v213 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v296));
  v299 = (v212 & 0xFFFFFFFC) / 0xC;
  v298 = v213;
  v211 = v296;
  if (v296)
    goto LABEL_93;
LABEL_95:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v200, (uint64_t *)&v298, (_DWORD *)a1);
  v223 = (unint64_t)v298;
  if (v301 != v298 && v298 != 0)
  {
    v298 = 0;
    v299 = 0;
    WTF::fastFree(v223, v216, v217, v218, v219, v220, v221, v222);
  }
  *(_QWORD *)v200 = off_1E35736B0;
  *(_QWORD *)(v200 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v200 + 100) = 0;
  *(_BYTE *)(v200 + 102) = a6;
  *(_QWORD *)(v200 + 104) = v200 + 120;
  *(_QWORD *)(v200 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v200 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v221, v222);
  v232 = (unint64_t)v294;
  if (v297 != v294 && v294)
  {
    v294 = 0;
    v295 = 0;
    WTF::fastFree(v232, v225, v226, v227, v228, v229, v230, v231);
  }
  *(_QWORD *)v200 = &off_1E3573680;
  *(_QWORD *)(v200 + 152) = operationCompareStringEq;
  *(_QWORD *)(v200 + 160) = v193;
  *(_QWORD *)(v200 + 168) = v195;
  *(_BYTE *)(v200 + 176) = v251;
  *(_BYTE *)(v200 + 177) = v252;
  v257 = v200;
  v233 = (unint64_t)v290;
  if (v293 != v290 && v290)
  {
    v290 = 0;
    v291 = 0;
    WTF::fastFree(v233, v225, v226, v227, v228, v229, v230, v231);
  }
  v234 = v286;
  if (v289 != (_BYTE *)v286 && v286)
  {
    v286 = 0;
    v287 = 0;
    WTF::fastFree((unint64_t)v234, v225, v226, v227, v228, v229, v230, v231);
  }
  v235 = (_QWORD *)(a1 + 5656);
  v236 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v236 == *(_DWORD *)(a1 + 5664))
  {
    v238 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v235, v236 + 1, (unint64_t)&v257);
    v236 = *(unsigned int *)(a1 + 5668);
    v237 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v236);
    v200 = *v238;
  }
  else
  {
    v237 = (uint64_t *)(*v235 + 8 * v236);
    v238 = &v257;
  }
  *v238 = 0;
  *v237 = v200;
  *(_DWORD *)(a1 + 5668) = v236 + 1;
  v239 = v257;
  v257 = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  if (v256 != (_BYTE *)v254 && v254)
    WTF::fastFree((unint64_t)v254, v225, v226, v227, v228, v229, v230, v231);
  JSC::DFG::SpeculativeJIT::jsValueResult(a1, a6, (uint64_t)a2, 21, 0, v229, v230, v231);
  v247 = v277;
  if (v279 != (_BYTE *)v277 && v277)
  {
    v277 = 0;
    LODWORD(v278) = 0;
    WTF::fastFree((unint64_t)v247, v240, v241, v242, v243, v244, v245, v246);
  }
  v248 = v280;
  if (v282 != (_BYTE *)v280 && v280)
  {
    v280 = 0;
    LODWORD(v281) = 0;
    WTF::fastFree((unint64_t)v248, v240, v241, v242, v243, v244, v245, v246);
  }
  v249 = v283;
  if (v285 != (_BYTE *)v283)
  {
    if (v283)
    {
      v283 = 0;
      LODWORD(v284) = 0;
      WTF::fastFree((unint64_t)v249, v240, v241, v242, v243, v244, v245, v246);
    }
  }
}

void JSC::AssemblyHelpers::branchIfNotString(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2 | 0x500000000, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v10, v11, v12, v13, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  JSC::DFG::AbstractValue *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;

  JSC::MacroAssemblerARM64::load64(a1, a3 | 0x800000000, a4, a4, a5, a6, a7, a8);
  v20 = *(_QWORD *)(a1 + 5616);
  v21 = *(_QWORD *)(v20 + 8);
  v22 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (uint64_t *)(v21 + 24);
  v24 = (uint64_t *)(v21 + 8);
  if ((a2 & 1) != 0)
    v24 = v23;
  v25 = *v24;
  v26 = *v24 + 32 * v22;
  v27 = *(_DWORD *)(v20 + 88);
  v28 = *(_DWORD *)(v26 + 20);
  if (v27 != v28)
  {
    if ((*(_QWORD *)(v26 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v28 ^ v27) >= 2)
      {
        v61 = *(_QWORD *)v26;
        if (*(_QWORD *)v26 != 4)
        {
          *(_QWORD *)v26 = v61 | 2;
          v62 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v61 & 1) != 0)
          {
            v69 = 2 * *v62;
            while (v69 * 4)
            {
              v70 = *(_QWORD *)&v62[v69];
              if ((*(_BYTE *)(v70 + 19) & 0xC) == 0)
              {
                v71 = *(_QWORD *)(v70 + 96);
                v72 = (v71 & 1) != 0 ? (v71 >> 1) & 3 : *(unsigned __int8 *)(v71 + 4);
                v69 -= 2;
                if (v72 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v62, v12, v13, v14, v15, v16, v17, v18);
              goto LABEL_29;
            }
          }
          else if (v62)
          {
            if ((*((_BYTE *)v62 + 19) & 0xC) != 0
              || ((v63 = *((_QWORD *)v62 + 12), (v63 & 1) != 0)
                ? (v64 = (v63 >> 1) & 3)
                : (v64 = *(unsigned __int8 *)(v63 + 4)),
                  v64 == 2))
            {
LABEL_29:
              *(_QWORD *)v26 = 4;
            }
          }
        }
        *(_DWORD *)(v25 + 32 * v22 + 16) = -21020677;
      }
      if ((v27 & 1) != 0)
        *(_QWORD *)v26 &= ~2uLL;
    }
    *(_DWORD *)(v26 + 20) = v27;
  }
  if ((*(_BYTE *)(v26 + 11) & 0x20) != 0)
  {
    v29 = (JSC::DFG::Node *)(((unint64_t)a3 << 32) | 0x80000000);
    JSC::MacroAssemblerARM64::branchTest64(a1, 1, a4, 1, v15, v16, v17, v18, (uint64_t)&v79, v19);
    v81 = v79;
    v82 = v80;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, v29, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), &v81);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BC0BF0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a4 | 0x1000000000, *(char *)(a1 + 304), v30, v31, v32, v33, v34);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a1, 0, 17, v35, v36, v37, v38, (uint64_t)&v77, v39);
    v81 = v77;
    v82 = v78;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, v29, (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), &v81);
    v47 = *(_QWORD *)(a1 + 5616);
    v48 = *(_QWORD *)(v47 + 8);
    v49 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v50 = (uint64_t *)(v48 + 24);
    v51 = (uint64_t *)(v48 + 8);
    if ((a2 & 1) != 0)
      v51 = v50;
    v52 = *v51;
    v53 = *v51 + 32 * v49;
    v54 = (JSC::DFG::AbstractValue *)v53;
    v55 = *(_DWORD *)(v47 + 88);
    v56 = *(_DWORD *)(v53 + 20);
    if (v55 != v56)
    {
      if ((*(_QWORD *)(v53 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v56 ^ v55) >= 2)
        {
          v65 = *(_QWORD *)v53;
          if (*(_QWORD *)v53 != 4)
          {
            *(_QWORD *)v53 = v65 | 2;
            v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v65 & 1) != 0)
            {
              v73 = 2 * *v66;
              while (v73 * 4)
              {
                v74 = *(_QWORD *)&v66[v73];
                if ((*(_BYTE *)(v74 + 19) & 0xC) == 0)
                {
                  v75 = *(_QWORD *)(v74 + 96);
                  v76 = (v75 & 1) != 0 ? (v75 >> 1) & 3 : *(unsigned __int8 *)(v75 + 4);
                  v73 -= 2;
                  if (v76 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v66, v40, v41, v42, v43, v44, v45, v46);
                goto LABEL_41;
              }
            }
            else if (v66)
            {
              if ((*((_BYTE *)v66 + 19) & 0xC) != 0
                || ((v67 = *((_QWORD *)v66 + 12), (v67 & 1) != 0)
                  ? (v68 = (v67 >> 1) & 3)
                  : (v68 = *(unsigned __int8 *)(v67 + 4)),
                    v68 == 2))
              {
LABEL_41:
                *(_QWORD *)v53 = 4;
              }
            }
          }
          *(_DWORD *)(v52 + 32 * v49 + 16) = -21020677;
        }
        if ((v55 & 1) != 0)
          *(_QWORD *)v53 &= ~2uLL;
      }
      *(_DWORD *)(v53 + 20) = v55;
    }
    v59 = *(_QWORD *)(v53 + 8);
    v58 = (unint64_t *)(v53 + 8);
    v57 = v59;
    v60 = v59 & 0xFFFFFFFFDFFFFFFFLL;
    if ((v59 & 0xFFFFFFFFDFFFFFFFLL) != v59)
    {
      if ((v57 & 0x2800FFFFFFF7) != 0)
      {
        if (JSC::DFG::AbstractValue::filterSlow(v54, 0xFFFFFFFFDFFFFFFFLL, v41, v42, v43, v44, v45, v46))
LABEL_13:
          *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
      }
      else
      {
        *v58 = v60;
        if (!v60)
        {
          JSC::DFG::AbstractValue::clear(v54, (uint64_t)v40, v41, v42, v43, v44, v45, v46);
          goto LABEL_13;
        }
      }
    }
  }
}

_QWORD *JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long (*)(WTF::StringImpl *,WTF::StringImpl *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint8x8_t v17;
  __int32 v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  __int16 *v35;
  int v36;
  char *v37;
  int *v38;
  int *v39;
  uint64_t v40;
  unsigned int v41;
  int *v42;
  int64_t v44;
  int *v45;
  int *v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  _BYTE v50[6];

  v9 = a2;
  v10 = a1;
  if ((_DWORD)a4)
  {
    v49 = a4;
    v11 = 1;
    v47 = 1;
    if ((_DWORD)a5 == 1)
      goto LABEL_7;
  }
  else
  {
    if ((_DWORD)a5 == 1)
      return JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, v10);
    v11 = 0;
  }
  *(_WORD *)&v50[2 * v11++ - 2] = a5 | 0x100;
  v47 = v11;
  do
  {
LABEL_7:
    v12 = 0;
    v13 = 0;
    v14 = v11;
    do
    {
      if ((v50[v12 - 1] & 0x40) != 0)
      {
LABEL_61:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        return JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, v10);
      }
      v13 |= 1 << v50[v12 - 1];
      v12 += 2;
    }
    while (2 * v11 != v12);
    v15 = 0;
    do
    {
      v16 = v50[v15 - 2] & 0x7F;
      if (v16 >= 0x40)
        goto LABEL_61;
      v13 &= ~(1 << v16);
      v15 += 2;
    }
    while (2 * v11 != v15);
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = v17.i32[0];
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v13));
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.i32[0] + v18)
    {
      v20 = 0;
      if (v11 <= 1)
        v21 = 1;
      else
        v21 = v11;
      v22 = 2 * v21;
      while (1)
      {
        v23 = v50[v20 - 1];
        if ((v23 & 0x7Fu) >= 0x40)
          goto LABEL_61;
        if (((v13 >> (v23 & 0x7F)) & 1) != 0)
          break;
        v20 += 2;
        if (v22 == v20)
          goto LABEL_57;
      }
      v24 = v50[v20 - 2];
      if (v24 != v23)
      {
        v25 = (char)v24;
        if ((char)v24 == 63)
        {
          v26 = v9[50];
          v27 = v9[48];
          if (v23 == 31)
            goto LABEL_51;
          v29 = v23 & 0x1F | 0xD2800000;
        }
        else
        {
          v26 = v9[50];
          v27 = v9[48];
          v28 = (char)v23 == 31 || v25 == 31;
          if (!v28)
          {
            v29 = v23 & 0xFFE0FFFF | ((v25 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v29 = (char)v23 | (32 * v25) | 0x91000000;
        }
LABEL_52:
        if (v26 + 4 > v27)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v26 = v9[50];
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + v26) = v29;
        v9[50] += 4;
        v14 = v47;
      }
      a1 = (int *)memmove(&v50[v20 - 2], &v50[v20], 2 * v14 - v20 - 2);
      v11 = v47 - 1;
      goto LABEL_56;
    }
    v30 = HIBYTE(v49);
    v31 = v49;
    JSC::MacroAssemblerARM64::swap((uint64_t)v9, (char)v49, SHIBYTE(v49), a4, a5, a6, a7, a8);
    memmove(&v49, v50, 2 * v47 - 2);
    v32 = v47 - 1;
    v28 = v47 == 1;
    v48 = v32;
    v33 = (int *)&v49;
    a1 = (int *)&v50[2 * v32 - 2];
    if (v28)
    {
      v40 = 0;
      v41 = 0;
      v36 = 0;
      a2 = a1;
    }
    else
    {
      v34 = 2 * v32;
      v35 = &v49;
      while (*(unsigned __int8 *)v35 != v30)
      {
        ++v35;
        v34 -= 2;
        if (!v34)
          goto LABEL_35;
      }
      *(_BYTE *)v35 = v31;
LABEL_35:
      v36 = 0;
      v37 = (char *)&v49;
      a2 = a1;
      v38 = a1;
      do
      {
        if (*(unsigned __int8 *)v33 == *((unsigned __int8 *)v33 + 1))
        {
          v39 = v33;
          if (v38 != (int *)&v50[2 * v48 - 2])
          {
            v46 = a1;
            if (v33 == a2)
            {
              v39 = v38;
            }
            else
            {
              v44 = v37 - (char *)a2;
              v45 = v38;
              memmove(v38, a2, v37 - (char *)a2);
              v39 = (int *)((char *)v45 + v44);
            }
            a1 = v46;
          }
          a2 = (int *)((char *)v33 + 2);
          ++v36;
          v38 = v39;
        }
        v33 = (int *)((char *)v33 + 2);
        v37 += 2;
      }
      while (v33 < a1);
      v40 = v48;
      v41 = v48;
      a1 = v38;
    }
    v42 = (int *)&v50[2 * v40 - 2];
    if (a2 != v42)
    {
      a1 = (int *)memmove(a1, a2, (char *)v42 - (char *)a2);
      v41 = v48;
    }
    v11 = v41 - v36;
LABEL_56:
    v47 = v11;
LABEL_57:
    ;
  }
  while (v11);
  return JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, v10);
}

void JSC::DFG::SpeculativeJIT::compileSameValue(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::DFG::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  char v44;
  char v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  char v96;
  int v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  char *v114;
  JSC::AssemblerBuffer *v115;
  char v116;
  char v117;
  unsigned int v118[2];
  char v119;
  __int16 v120;
  char v121;
  unsigned int v122[3];
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) == 0xC4000000000000)
  {
    v47 = *((_QWORD *)a2 + 4);
    if ((v47 & 0xFC000000000000) == 0xC4000000000000)
    {
      v48 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v48 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC180CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v48 + 12))
      {
        v49 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        v47 = *((_QWORD *)a2 + 4);
      }
      else
      {
        v49 = -1;
      }
      if (((v47 >> 50) & 0x3F) - 49 >= 3
        || (v50 = ~*(_DWORD *)((v47 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v50 >= *((unsigned int *)this + 1001)))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC170CLL);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v50 + 12))
        v51 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v47, a3, a4, a5, a6, a7, a8);
      else
        v51 = -1;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v127, this, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v125, this, v52, v53, v54, v55, v56, v57);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v123, this, v58, v59, v60, v61, v62, v63);
      if (v49 == -1)
        v49 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v10, v65, v66, v67, v68, v69, v70);
      if (v51 == -1)
        v51 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v47, v65, v66, v67, v68, v69, v70);
      v117 = v128;
      v71 = v126;
      v72 = v124;
      v115 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
      v73 = *((_DWORD *)this + 50);
      if (v73 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v64, v65, v66, v67, v68, v69, v70);
        v73 = *((_DWORD *)this + 50);
      }
      v74 = v49;
      *(_DWORD *)(*((_QWORD *)this + 7) + v73) = v71 & 0x1F | (32 * v49) | 0x9E660000;
      v75 = *((_DWORD *)this + 50);
      v76 = v75 + 4;
      *((_DWORD *)this + 50) = v75 + 4;
      if ((v75 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v64, v65, v66, v67, v68, v69, v70);
        v76 = *((_DWORD *)this + 50);
      }
      v116 = v49;
      v77 = 32 * v49;
      v78 = v71 & 0x1F;
      *(_DWORD *)(*((_QWORD *)this + 7) + v76) = v72 & 0x1F | (32 * v51) | 0x9E660000;
      *((_DWORD *)this + 50) += 4;
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v71, v72, v67, v68, v69, v70, (uint64_t)v122);
      v86 = *((_DWORD *)this + 50);
      if (v86 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v86 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v86) = v77 | (v74 << 16) | 0x1E602000;
      v87 = *((_DWORD *)this + 50);
      v88 = v87 + 4;
      *((_DWORD *)this + 50) = v87 + 4;
      if ((v87 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v88 = *((_DWORD *)this + 50);
      }
      v89 = v72 & 0x1F;
      *(_DWORD *)(*((_QWORD *)this + 7) + v88) = v78 | 0x1A9F07E0;
      v90 = *((_DWORD *)this + 50);
      v91 = v90 + 4;
      *((_DWORD *)this + 50) = v90 + 4;
      if ((v90 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v91 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v91) = (32 * v51) | (v51 << 16) | 0x1E602000;
      v92 = *((_DWORD *)this + 50);
      v93 = v92 + 4;
      *((_DWORD *)this + 50) = v92 + 4;
      if ((v92 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v93 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v93) = v89 | 0x1A9F07E0;
      v94 = *((_DWORD *)this + 50);
      v95 = v94 + 4;
      *((_DWORD *)this + 50) = v94 + 4;
      v96 = v117;
      if ((v94 + 8) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v95 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v95) = (32 * v78) | (v89 << 16) | v117 & 0x1F | 0xA000000;
      v97 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v97;
      if (v97 < *((_DWORD *)this + 13))
      {
        v96 = v117;
        do
        {
          if ((v97 + 4) > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
            v97 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v97) = -721215457;
          v97 = *((_DWORD *)this + 50) + 4;
          *((_DWORD *)this + 50) = v97;
        }
        while (v97 < *((_DWORD *)this + 13));
      }
      v98 = v97;
      if ((v97 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v79, v80, v81, v82, v83, v84, v85);
        v98 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v98) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v99 = 69;
      else
        v99 = 65;
      v118[0] = v97;
      v118[1] = 0;
      v119 = v99;
      v120 = 15;
      v121 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v122, (uint64_t)this, v80, v81, v82, v83, v84, v85);
      v107 = *((_DWORD *)this + 50);
      if (v107 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v115, v100, v101, v102, v103, v104, v105, v106);
        v107 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v107) = v96 | 0x320003E0;
      *((_DWORD *)this + 50) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v118, (uint64_t)this, v101, v102, v103, v104, v105, v106);
      JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v96, v96);
      JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v96, (uint64_t)a2, 21, 0, v108, v109, v110);
      if (v123)
      {
        v111 = v124;
        if (v124 != -1)
        {
          if (v124 > 15)
            v111 = -1;
          --*(_DWORD *)(v123 + 12 * v111 + 4784);
        }
      }
      if (v125)
      {
        v112 = v126;
        if (v126 != -1)
        {
          if (v126 > 15)
            v112 = -1;
          --*(_DWORD *)(v125 + 12 * v112 + 4784);
        }
      }
      if (v127)
      {
        v113 = v128;
        if (v128 != -1)
        {
          if (v128 > 15)
            v113 = -1;
          --*(_DWORD *)(v127 + 12 * v113 + 4784);
        }
      }
      v114 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v51] + 4968;
      --*((_DWORD *)v114 + 2);
      v46 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v116] + 4968;
      goto LABEL_29;
    }
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC17F4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_6:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_11;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC17FCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_11:
    v15 = -1;
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v10 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v13 & 0xFF00FFFFFFFFFFFFLL), v16, v17, v18, v19, v20, v21);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v22, v23, v24, v25, v26, v27, v28);
  ++*((_DWORD *)this + 1196);
  v35 = *((unsigned int *)this + 1194);
  if ((_DWORD)v35 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v35, (uint64_t)v29, v30, v31, v32, v33, v34);
  }
  v36 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v29, v30, v31, v32, v33, v34);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v127, (int *)this, (uint64_t)operationSameValue, v36, v37, v12, v15, v38);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
  v39 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v39;
  *((_DWORD *)this + 1195) = 4;
  v40 = ~v39;
  if (v40 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC1804);
  }
  v41 = (char *)this + 4776;
  v42 = *((_QWORD *)this + 499) + 24 * (int)v40;
  v43 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v42 = a2;
  *(_DWORD *)(v42 + 8) = v43;
  *(_BYTE *)(v42 + 12) = 21;
  *(_DWORD *)(v42 + 13) = 0;
  *(_BYTE *)(v42 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v44 = -1;
    else
      v44 = v15;
    --*(_DWORD *)&v41[12 * v44 + 8];
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v45 = -1;
    else
      v45 = v12;
    v46 = &v41[12 * v45];
LABEL_29:
    --*((_DWORD *)v46 + 2);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileToBooleanString(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  JSC::ARM64LogicalImmediate *v52;
  uint64_t v53;
  char v54;

  v8 = a3;
  v10 = this;
  v11 = *((_QWORD *)a2 + 3);
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v13 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v14 == -1))
  {
LABEL_5:
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v10, v11, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateString(v10, *((_QWORD *)a2 + 3), v14, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v53, (JSC::DFG::SpeculativeJIT *)v10, v15, v16, v17, v18, v19, v20);
  v21 = v54;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v51, (JSC::DFG::JITCompiler *)v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 352) + 16) + 41968), v22, v23, v24, v25, v26);
  v32 = v21;
  if (v51 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, (uint64_t)v52, v21, v27, v28, v29, v30, v31);
  else
    JSC::MacroAssemblerARM64::load64(v10, ((unint64_t)v51 << 35) + 0x380000001ALL, v21, v27, v28, v29, v30, v31);
  v40 = v21 & 0x1F;
  v41 = v40 << 16;
  if ((_DWORD)v14 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v10 + 56), v41 | 0xEB2063FF, v34, v35, v36, v37, v38, v39);
    v44 = *(_DWORD *)(v10 + 200);
  }
  else
  {
    v42 = v41 | (32 * (v14 & 0x1F)) | 0xEB00001F;
    v43 = *(_DWORD *)(v10 + 200);
    if (v43 + 4 > *(_DWORD *)(v10 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v33, v34, v35, v36, v37, v38, v39);
      v43 = *(_DWORD *)(v10 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v10 + 56) + v43) = v42;
    v44 = *(_DWORD *)(v10 + 200) + 4;
    *(_DWORD *)(v10 + 200) = v44;
  }
  if (v44 + 4 > *(_DWORD *)(v10 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v33, v34, v35, v36, v37, v38, v39);
    v44 = *(_DWORD *)(v10 + 200);
  }
  if (v8)
    v45 = 0;
  else
    v45 = 4096;
  *(_DWORD *)(*(_QWORD *)(v10 + 56) + v44) = (v45 | v40) ^ 0x1A9F17E0;
  *(_DWORD *)(v10 + 200) += 4;
  JSC::MacroAssemblerARM64::or32(v10, (JSC::ARM64LogicalImmediate *)6, v32, v32);
  this = JSC::DFG::SpeculativeJIT::jsValueResult(v10, v32, (uint64_t)a2, 21, 0, v46, v47, v48);
  if (v53)
  {
    v49 = v54;
    if (v54 != -1)
    {
      if (v54 > 15)
        v49 = -1;
      --*(_DWORD *)(v53 + 12 * v49 + 4784);
    }
  }
  if (v12)
  {
    if ((int)v14 > 15)
      v50 = -1;
    else
      v50 = v14;
    --*(_DWORD *)(v10 + 12 * v50 + 4784);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileToBooleanStringOrOther(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t result;
  unsigned int v99;
  char v100;
  _BYTE v101[12];
  unsigned int v102[2];
  char v103;
  __int16 v104;
  char v105;
  unsigned int v106;
  JSC::ARM64LogicalImmediate *v107;
  _BYTE v108[12];
  unsigned int v109[3];
  uint64_t v110;
  char v111;

  v8 = a3;
  v11 = *((_QWORD *)a2 + 3);
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_61;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12))
  {
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v110, this, v15, v16, v17, v18, v19, v20);
    if (v14 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v110, this, a3, a4, a5, a6, a7, a8);
  }
  LOBYTE(v14) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v11, v21, v22, v23, v24, v25, v26);
LABEL_8:
  v27 = v111;
  v28 = v14;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v14, 1, v22, v23, v24, v25, v26, (uint64_t)v109);
  v35 = *((_QWORD *)a2 + 3);
  v36 = *((_QWORD *)this + 702);
  v37 = *(_QWORD *)(v36 + 8);
  v38 = (_QWORD *)(v37 + 24);
  v39 = (_QWORD *)(v37 + 8);
  if ((v35 & 1) != 0)
    v39 = v38;
  v40 = *v39 + 32 * *(unsigned int *)((v35 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v41 = (void *)*(unsigned int *)(v36 + 88);
  if ((_DWORD)v41 != *(_DWORD *)(v40 + 20))
  {
    if ((*(_QWORD *)(v40 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v40, v41, v29, v30, v31, v32, v33, v34);
    else
      *(_DWORD *)(v40 + 20) = (_DWORD)v41;
  }
  if ((*(_QWORD *)(v40 + 8) & 0x2C00CFFFFFF7) != 0)
  {
    if (*((_BYTE *)this + 212))
    {
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v28 | 0x500000000, *((char *)this + 304), v30, v31, v32, v33, v34);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v42, v43, v44, v45, (uint64_t)v108);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)((v28 << 32) | 0x80000000), v35, 0xFFFFD3FF30000008, (uint64_t)v108, 1uLL, v46, v47);
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_61:
    JUMPOUT(0x197BC1FB0);
  }
LABEL_14:
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v106, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 41968), v30, v31, v32, v33, v34);
  v53 = v27;
  if (v106 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v107, v27, v48, v49, v50, v51, v52);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v106 << 35) + 0x380000001ALL, v27, v48, v49, v50, v51, v52);
  v61 = v27 & 0x1F;
  v62 = v61 << 16;
  if ((_DWORD)v28 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v62 | 0xEB2063FF, v55, v56, v57, v58, v59, v60);
    v65 = *((_DWORD *)this + 50);
  }
  else
  {
    v63 = v62 | (32 * (v28 & 0x1F)) | 0xEB00001F;
    v64 = *((_DWORD *)this + 50);
    if (v64 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v54, v55, v56, v57, v58, v59, v60);
      v64 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v64) = v63;
    v65 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v65;
  }
  if (v65 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v54, v55, v56, v57, v58, v59, v60);
    v65 = *((_DWORD *)this + 50);
  }
  if (v8)
    v66 = 0;
  else
    v66 = 4096;
  *(_DWORD *)(*((_QWORD *)this + 7) + v65) = (v66 | v61) ^ 0x1A9F17E0;
  v67 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v67; v67 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v67)
  {
    if ((v67 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v54, v55, v56, v57, v58, v59, v60);
      v67 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v67) = -721215457;
    v67 = *((_DWORD *)this + 50) + 4;
  }
  v68 = v67;
  if ((v67 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v54, v55, v56, v57, v58, v59, v60);
    v68 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v68) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v69 = 69;
  else
    v69 = 65;
  v102[0] = v67;
  v102[1] = 0;
  v103 = v69;
  v104 = 15;
  v105 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v109, (uint64_t)this, v55, v56, v57, v58, v59, v60);
  v76 = *((_QWORD *)a2 + 3);
  v77 = *((_QWORD *)this + 702);
  v78 = *(_QWORD *)(v77 + 8);
  v79 = (_QWORD *)(v78 + 24);
  v80 = (_QWORD *)(v78 + 8);
  if ((v76 & 1) != 0)
    v80 = v79;
  v81 = *v80 + 32 * *(unsigned int *)((v76 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v82 = (void *)*(unsigned int *)(v77 + 88);
  if ((_DWORD)v82 != *(_DWORD *)(v81 + 20))
  {
    if ((*(_QWORD *)(v81 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v81, v82, v70, v71, v72, v73, v74, v75);
    else
      *(_DWORD *)(v81 + 20) = (_DWORD)v82;
  }
  if ((*(_QWORD *)(v81 + 8) & 0xFFFFD1FF00000008) != 0)
  {
    JSC::MacroAssemblerARM64::and64((uint64_t)this, -9, v28, v53);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v53, 2, v83, v84, v85, v86, (uint64_t)v101);
    JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)((v28 << 32) | 0x80000000), v76, 0x2E00FFFFFFF7uLL, (uint64_t)v101, 1uLL, v87, v88);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v8, v53, v71, v72, v73, v74, v75);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v102, (uint64_t)this, v89, v90, v91, v92, v93, v94);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v53, v53);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v53, (uint64_t)a2, 21, 0, v95, v96, v97);
  if (v110)
  {
    v99 = v111;
    if (v111 != -1)
    {
      if (v111 > 15)
        v99 = -1;
      --*(_DWORD *)(v110 + 12 * v99 + 4784);
    }
  }
  if (v12)
  {
    if ((char)v28 > 15)
      v100 = -1;
    else
      v100 = v28;
    --*((_DWORD *)this + 3 * v100 + 1196);
  }
  return result;
}

void JSC::AssemblyHelpers::branchIfNotOther(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  JSC::MacroAssemblerARM64::and64(a2, -9, a3, a4);
  JSC::MacroAssemblerARM64::branch64(a2, 1, a4, 2, v7, v8, v9, v10, a1);
}

uint64_t JSC::DFG::SpeculativeJIT::emitStringBranch(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::JITCompiler *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33[2];

  v11 = (JSC::DFG::JITCompiler *)result;
  v12 = a2 & 0xFF00FFFFFFFFFFFFLL;
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v13 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(result + 4004))
  {
    __break(0xC471u);
    return result;
  }
  if (!*(_BYTE *)(*(_QWORD *)(result + 3992) + 24 * (int)v13 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(result, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v14 == -1))
  {
LABEL_5:
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v11, a2, v14, a4, a5, a6, a7, a8);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v33, v11, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 44) + 16) + 41968), v15, v16, v17, v18, v19);
  JSC::DFG::SpeculativeJIT::branchLinkableConstant<JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>((uint64_t)v11, 0, v14, v33[0], v33[1], a4, v20, v21);
  JSC::DFG::SpeculativeJIT::jump((uint64_t)v11, a3, 0, v22, v23, v24, v25, v26);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)v11, *((_QWORD *)v11 + 497), 0, v27, v28, v29, v30, v31);
  if (v12)
  {
    if ((int)v14 > 15)
      v32 = -1;
    else
      v32 = v14;
    --*((_DWORD *)v11 + 3 * v32 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branchLinkableConstant<JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::branch64(a1, a2, a3, a5, a5, a6, a7, a8, (uint64_t)&v20);
  else
    JSC::MacroAssembler::branchPtr(a1, a2, a3, (a4 << 35) + 0x380000001ALL, a5, a6, a7, a8, (uint64_t)&v20);
  result = a1 + 5264;
  v16 = v21;
  v22 = v20;
  v23 = v21;
  v24 = a6;
  v17 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v19 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v19 = *(_DWORD *)result;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v18 = *(_QWORD *)result + 24 * v17;
    *(_DWORD *)v18 = v20;
    *(_QWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 16) = a6;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::emitStringOrOtherBranch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  unsigned int v83;
  char v84;
  _BYTE v85[12];
  uint64_t v86[2];
  _BYTE v87[12];
  unsigned int v88[3];
  uint64_t v89;
  char v90;

  v12 = a2 & 0xFF00FFFFFFFFFFFFLL;
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v13 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v13 + 12))
  {
    v14 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v89, (JSC::DFG::SpeculativeJIT *)a1, v15, v16, v17, v18, v19, v20);
    if (v14 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v89, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  }
  LOBYTE(v14) = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v21, v22, v23, v24, v25, v26);
LABEL_8:
  v27 = v90;
  JSC::AssemblyHelpers::branchIfNotCell(a1, v14, 1, v22, v23, v24, v25, v26, (uint64_t)v88);
  v34 = *(_QWORD *)(a1 + 5616);
  v35 = *(_QWORD *)(v34 + 8);
  v36 = (_QWORD *)(v35 + 24);
  v37 = (_QWORD *)(v35 + 8);
  if ((a2 & 1) != 0)
    v37 = v36;
  v38 = *v37 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v39 = (void *)*(unsigned int *)(v34 + 88);
  if ((_DWORD)v39 != *(_DWORD *)(v38 + 20))
  {
    if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v38, v39, v28, v29, v30, v31, v32, v33);
    else
      *(_DWORD *)(v38 + 20) = (_DWORD)v39;
  }
  if ((*(_QWORD *)(v38 + 8) & 0x2C00CFFFFFF7) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v14 | 0x500000000, *(char *)(a1 + 304), v29, v30, v31, v32, v33);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v40, v41, v42, v43, (uint64_t)v87);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v14 << 32) | 0x80000000), a2, 0xFFFFD3FF30000008, (uint64_t)v87, 1uLL, v44, v45);
      goto LABEL_14;
    }
    __break(0xC471u);
LABEL_38:
    JUMPOUT(0x197BC2604);
  }
LABEL_14:
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v86, (JSC::DFG::JITCompiler *)a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 41968), v29, v30, v31, v32, v33);
  JSC::DFG::SpeculativeJIT::branchLinkableConstant<JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(a1, 0, (char)v14, v86[0], v86[1], a4, v46, v47);
  JSC::DFG::SpeculativeJIT::jump(a1, a3, 1, v48, v49, v50, v51, v52);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v88, a1, v53, v54, v55, v56, v57, v58);
  v65 = *(_QWORD *)(a1 + 5616);
  v66 = *(_QWORD *)(v65 + 8);
  v67 = (_QWORD *)(v66 + 24);
  v68 = (_QWORD *)(v66 + 8);
  if ((a2 & 1) != 0)
    v68 = v67;
  v69 = *v68 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v70 = (void *)*(unsigned int *)(v65 + 88);
  if ((_DWORD)v70 != *(_DWORD *)(v69 + 20))
  {
    if ((*(_QWORD *)(v69 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v69, v70, v59, v60, v61, v62, v63, v64);
    else
      *(_DWORD *)(v69 + 20) = (_DWORD)v70;
  }
  if ((*(_QWORD *)(v69 + 8) & 0xFFFFD1FF00000008) != 0)
  {
    JSC::MacroAssemblerARM64::and64(a1, -9, v14, v27);
    JSC::MacroAssemblerARM64::branch64(a1, 1, v27, 2, v71, v72, v73, v74, (uint64_t)v85);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v14 << 32) | 0x80000000), a2, 0x2E00FFFFFFF7uLL, (uint64_t)v85, 1uLL, v75, v76);
  }
  JSC::DFG::SpeculativeJIT::jump(a1, a4, 0, v60, v61, v62, v63, v64);
  result = JSC::DFG::SpeculativeJIT::noResult(a1, *(_QWORD *)(a1 + 3976), 0, v77, v78, v79, v80, v81);
  if (v89)
  {
    v83 = v90;
    if (v90 != -1)
    {
      if (v90 > 15)
        v83 = -1;
      --*(_DWORD *)(v89 + 12 * v83 + 4784);
    }
  }
  if (v12)
  {
    if ((char)v14 > 15)
      v84 = -1;
    else
      v84 = v14;
    --*(_DWORD *)(a1 + 12 * v84 + 4784);
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileConstantStoragePointer(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *result;
  unsigned int v25;
  char *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v39, this, a3, a4, a5, a6, a7, a8);
  v15 = v40;
  v16 = *((_QWORD *)a2 + 9);
  v17 = *((_QWORD *)this + 44);
  if (((*(_DWORD *)(*(_QWORD *)(v17 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    goto LABEL_2;
  v44 = v16 | 0x3000000000000;
  v32 = (uint64_t *)(v17 + 928);
  v33 = *(_QWORD *)(v17 + 928);
  if (v33)
    LODWORD(v33) = *(_DWORD *)(v33 - 12);
  v41 = v33;
  WTF::HashMap<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,unsigned int,JSC::DFG::LinkerIR::ValueHash,JSC::DFG::LinkerIR::ValueTraits,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(v32, &v44, &v41, v10, v11, v12, v13, v14, (uint64_t)&v42);
  if (v43)
  {
    v34 = *((_QWORD *)this + 44);
    v35 = (_QWORD *)(v34 + 912);
    v36 = *(unsigned int *)(v34 + 924);
    if ((_DWORD)v36 == *(_DWORD *)(v34 + 920))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::DFG::LinkerIR::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v44);
      v36 = *(unsigned int *)(v34 + 924);
      *(_QWORD *)(*(_QWORD *)(v34 + 912) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*v35 + 8 * v36) = v44;
    }
    *(_DWORD *)(v34 + 924) = v36 + 1;
  }
  v38 = *(unsigned int *)(v42 + 8);
  if ((_DWORD)v38 == -1)
  {
    v16 = 0;
LABEL_2:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v16, v15, v10, v11, v12, v13, v14);
    goto LABEL_3;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, (v38 << 35) + 0x380000001ALL, v15, v10, v11, v12, v13, v14);
LABEL_3:
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v18, v19, v20, v21, v22, v23);
  if ((int)v15 > 15)
    v25 = -1;
  else
    v25 = v15;
  v26 = (char *)this + 12 * v25;
  v27 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v26 + 1194) = v27;
  *((_DWORD *)v26 + 1195) = 4;
  v28 = ~v27;
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v29 = *((_QWORD *)this + 499) + 24 * (int)v28;
    v30 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v29 = a2;
    *(_DWORD *)(v29 + 8) = v30;
    *(_BYTE *)(v29 + 17) = v15;
    *(_DWORD *)(v29 + 12) = 7;
    *(_BYTE *)(v29 + 16) = 0;
    if (v39)
    {
      v31 = v40;
      if (v40 != -1)
      {
        if (v40 > 15)
          v31 = -1;
        --*(_DWORD *)(v39 + 12 * v31 + 4784);
      }
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::storageResult(uint64_t a1, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *result;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;

  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)a2 + 12);
  *(_DWORD *)(a1 + 4776) = v11;
  *(_DWORD *)(a1 + 4780) = 4;
  v12 = ~v11;
  if (v12 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v13 = *((_DWORD *)a2 + 13);
    v14 = *(_QWORD *)(a1 + 3992) + 24 * (int)v12;
    *(_QWORD *)v14 = a2;
    *(_DWORD *)(v14 + 8) = v13;
    *(_BYTE *)(v14 + 12) = 7;
    *(_DWORD *)(v14 + 13) = 0;
    *(_BYTE *)(v14 + 17) = 0;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::cageTypedArrayStorage(Gigacage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::InlineWatchpointSet *v11;
  uint64_t v12;
  unsigned int v13;

  if (Gigacage::shouldBeEnabled(a1))
  {
    if (byte_1ECF4C022)
    {
LABEL_3:
      JSC::AssemblyHelpers::cage((uint64_t)a1, 0, a3);
      return;
    }
    v11 = (JSC::InlineWatchpointSet *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 93264);
    v12 = *(_QWORD *)v11;
    if ((*(_QWORD *)v11 & 1) != 0)
      v13 = (v12 >> 1) & 3;
    else
      v13 = *(unsigned __int8 *)(v12 + 4);
    if (v13 != 2)
    {
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 495) + 24) + 136), v11, v5, v6, v7, v8, v9, v10);
      goto LABEL_3;
    }
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetIndexedPropertyStorage(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *result;
  char *v33;
  int v34;
  unsigned int v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  JSC::InlineWatchpointSet *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  char **v48;
  char *v49;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v45, this, a3, a4, a5, a6, a7, a8);
  v14 = v46;
  if (*((_WORD *)a2 + 9) == 146)
    v15 = *((_DWORD *)a2 + 20);
  else
    v15 = *((_DWORD *)a2 + 18);
  JSC::DFG::toTypedArrayType(v15);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x1000000000, v14, v16, v17, v18, v19, v20);
  v27 = atomic_load(&Gigacage::shouldBeEnabled(void)::onceFlag);
  if (v27 != -1)
  {
    v49 = &v47;
    v48 = &v49;
    std::__call_once(&Gigacage::shouldBeEnabled(void)::onceFlag, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::shouldBeEnabled(void)::$_0 &&>>);
  }
  if (byte_1ECF4C023)
  {
    if (!byte_1ECF4C022)
    {
      v42 = (JSC::InlineWatchpointSet *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 93264);
      v43 = *(_QWORD *)v42;
      if ((*(_QWORD *)v42 & 1) != 0)
        v44 = (v43 >> 1) & 3;
      else
        v44 = *(unsigned __int8 *)(v43 + 4);
      if (v44 == 2)
        goto LABEL_15;
      JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 136), v42, v21, v22, v23, v24, v25, v26);
    }
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0x3FFFFFFFFLL, v14);
      JSC::MacroAssemblerARM64::add64((uint64_t)this, qword_1ECF4C038, v14, v14, v28, v29, v30, v31);
    }
  }
LABEL_15:
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v21, v22, v23, v24, v25, v26);
  v33 = (char *)this + 4776;
  v34 = *((_DWORD *)a2 + 12);
  if ((int)v14 > 15)
    v35 = -1;
  else
    v35 = v14;
  v36 = &v33[12 * v35];
  *(_DWORD *)v36 = v34;
  *((_DWORD *)v36 + 1) = 4;
  v37 = ~v34;
  if (v37 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197BC2B54);
  }
  v38 = *((_QWORD *)this + 499) + 24 * (int)v37;
  v39 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v38 = a2;
  *(_DWORD *)(v38 + 8) = v39;
  *(_BYTE *)(v38 + 17) = v14;
  *(_DWORD *)(v38 + 12) = 7;
  *(_BYTE *)(v38 + 16) = 0;
  if (v45)
  {
    v40 = v46;
    if (v46 != -1)
    {
      if (v46 > 15)
        v40 = -1;
      --*(_DWORD *)(v45 + 12 * v40 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v41 = -1;
    else
      v41 = v13;
    --*(_DWORD *)&v33[12 * v41 + 8];
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileResolveRope(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  JSC::DFG::Node *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  _DWORD *v42;
  uint64_t *v43;
  int v44;
  char *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  _BYTE *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE *v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  _BYTE *v62;
  WTF *v63;
  WTF *v64;
  unsigned int v65;
  JSC::DFG::Node *v66;
  int v67;
  _BYTE *v68;
  WTF *v69;
  WTF *v70;
  unsigned int v71;
  int v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  WTF *v93;
  WTF *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  int v108;
  unsigned int v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  WTF *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  unsigned int v120;
  _BYTE v121[24];
  uint64_t v122;
  int v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v126;
  _BYTE v127[24];
  uint64_t v128;
  unsigned __int8 v129;
  WTF *v130;
  unsigned int v131;
  unsigned int v132;
  _BYTE v133[24];
  WTF *v134;
  unsigned int v135;
  unsigned int v136;
  _BYTE v137[24];
  _BYTE *v138;
  unsigned int v139;
  unsigned int v140;
  _BYTE v141[24];
  _BYTE *v142;
  unsigned int v143;
  unsigned int v144;
  _BYTE v145[32];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_93;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_105;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v128, this, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_93:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v128, this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
LABEL_6:
  v26 = v129;
  v27 = (char)v129;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v13 | 0x800000000, v27, v21, v22, v23, v24, v25);
  v125 = (WTF *)v127;
  v126 = 2;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v27, 1, v28, v29, v30, v31, (uint64_t)&v123, v32);
  v40 = v123;
  if (v123 != -1)
  {
    v41 = HIDWORD(v126);
    if (HIDWORD(v126) == (_DWORD)v126)
    {
      v42 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v125, (void *)(HIDWORD(v126) + 1), (unint64_t)&v123, v35, v36, v37, v38, v39);
      v44 = *v42;
      v43 = (uint64_t *)(v42 + 1);
      v40 = v44;
      v41 = HIDWORD(v126);
    }
    else
    {
      v43 = &v124;
    }
    v45 = (char *)v125 + 12 * v41;
    *(_DWORD *)v45 = v40;
    *(_QWORD *)(v45 + 4) = *v43;
    ++HIDWORD(v126);
  }
  if (v13 != (_DWORD)v27)
  {
    if (v13 == 63)
    {
      if ((_DWORD)v27 != 31)
      {
        v46 = v26 & 0x1F | 0xD2800000;
        goto LABEL_16;
      }
    }
    else if (v13 != 31 && (_DWORD)v27 != 31)
    {
      v46 = v26 & 0xFFE0FFFF | ((v13 & 0x1F) << 16) | 0xAA0003E0;
LABEL_16:
      v48 = (unsigned int *)((char *)this + 200);
      v47 = *((_DWORD *)this + 50);
      if (v47 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v33, (uint64_t)v34, v35, v36, v37, v38, v39);
        v47 = *v48;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v47) = v46;
      *v48 += 4;
      goto LABEL_19;
    }
    v46 = v27 | (32 * v13) | 0x91000000;
    goto LABEL_16;
  }
LABEL_19:
  v49 = HIDWORD(v126);
  v119 = (WTF *)v121;
  v120 = HIDWORD(v126);
  if (HIDWORD(v126) < 3)
  {
    v50 = v121;
  }
  else
  {
    if (HIDWORD(v126) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC32FCLL);
    }
    v50 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v126)));
    v119 = (WTF *)v50;
    v49 = HIDWORD(v126);
  }
  if (v49)
  {
    v51 = v125;
    v52 = (WTF *)((char *)v125 + 12 * v49);
    do
    {
      *(_DWORD *)v50 = *(_DWORD *)v51;
      *(_QWORD *)(v50 + 4) = *(_QWORD *)((char *)v51 + 4);
      v51 = (WTF *)((char *)v51 + 12);
      v50 += 12;
    }
    while (v51 != v52);
  }
  v53 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v34, v35, v36, v37, v38, v39);
  v117 = v54;
  v118 = v53;
  v55 = v120;
  v130 = (WTF *)v133;
  v131 = 2;
  v132 = v120;
  if (v120 < 3)
  {
    v56 = v133;
  }
  else
  {
    if (v120 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC3304);
    }
    v56 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v120));
    v131 = 12 * v120 / 0xC;
    v130 = (WTF *)v56;
    v55 = v120;
  }
  if (v55)
  {
    v57 = v119;
    v58 = (WTF *)((char *)v119 + 12 * v55);
    do
    {
      *(_DWORD *)v56 = *(_DWORD *)v57;
      *(_QWORD *)(v56 + 4) = *(_QWORD *)((char *)v57 + 4);
      v57 = (WTF *)((char *)v57 + 12);
      v56 += 12;
    }
    while (v57 != v58);
  }
  v59 = WTF::fastMalloc((WTF *)0xB8);
  v60 = v132;
  v134 = (WTF *)v137;
  v135 = 2;
  v136 = v132;
  if (v132 < 3)
  {
    v62 = v137;
  }
  else
  {
    if (v132 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC330CLL);
    }
    v61 = 12 * v132;
    v62 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v132));
    v135 = (v61 & 0xFFFFFFFC) / 0xC;
    v134 = (WTF *)v62;
    v60 = v132;
  }
  if (v60)
  {
    v63 = v130;
    v64 = (WTF *)((char *)v130 + 12 * v60);
    do
    {
      *(_DWORD *)v62 = *(_DWORD *)v63;
      *(_QWORD *)(v62 + 4) = *(_QWORD *)((char *)v63 + 4);
      v63 = (WTF *)((char *)v63 + 12);
      v62 += 12;
    }
    while (v63 != v64);
  }
  v65 = v136;
  v138 = v141;
  v139 = 2;
  v140 = v136;
  if (v136 < 3)
  {
    v66 = a2;
    v68 = v141;
  }
  else
  {
    if (v136 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC3314);
    }
    v66 = a2;
    v67 = 12 * v136;
    v68 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v136));
    v139 = (v67 & 0xFFFFFFFC) / 0xC;
    v138 = v68;
    v65 = v136;
  }
  if (v65)
  {
    v69 = v134;
    v70 = (WTF *)((char *)v134 + 12 * v65);
    do
    {
      *(_DWORD *)v68 = *(_DWORD *)v69;
      *(_QWORD *)(v68 + 4) = *(_QWORD *)((char *)v69 + 4);
      v69 = (WTF *)((char *)v69 + 12);
      v68 += 12;
    }
    while (v69 != v70);
  }
  v71 = v140;
  v142 = v145;
  v143 = 2;
  v144 = v140;
  if (v140 >= 3)
  {
    if (v140 < 0x15555556)
    {
      v72 = 12 * v140;
      v73 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v140));
      v143 = (v72 & 0xFFFFFFFC) / 0xC;
      v142 = v73;
      v71 = v140;
      goto LABEL_50;
    }
    __break(0xC471u);
LABEL_105:
    JUMPOUT(0x197BC32ECLL);
  }
  v73 = v145;
LABEL_50:
  if (v71)
  {
    v74 = v138;
    v75 = &v138[12 * v71];
    do
    {
      *(_DWORD *)v73 = *(_DWORD *)v74;
      *(_QWORD *)(v73 + 4) = *(_QWORD *)(v74 + 4);
      v74 += 12;
      v73 += 12;
    }
    while (v74 != v75);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v59, (uint64_t *)&v142, this);
  v83 = (unint64_t)v142;
  if (v145 != v142 && v142 != 0)
  {
    v142 = 0;
    v143 = 0;
    WTF::fastFree(v83, v76, v77, v78, v79, v80, v81, v82);
  }
  *(_QWORD *)v59 = off_1E3573710;
  *(_QWORD *)(v59 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v59 + 100) = 0;
  *(_BYTE *)(v59 + 102) = v27;
  *(_QWORD *)(v59 + 104) = v59 + 120;
  *(_QWORD *)(v59 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v59 + 104, v27, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v81, v82);
  v92 = (unint64_t)v138;
  if (v141 != v138 && v138)
  {
    v138 = 0;
    v139 = 0;
    WTF::fastFree(v92, v85, v86, v87, v88, v89, v90, v91);
  }
  *(_QWORD *)v59 = &off_1E35736E0;
  *(_QWORD *)(v59 + 152) = operationResolveRopeString;
  *(_QWORD *)(v59 + 160) = v118;
  *(_QWORD *)(v59 + 168) = v117;
  *(_BYTE *)(v59 + 176) = v13;
  v122 = v59;
  v93 = v134;
  if (v137 != (_BYTE *)v134 && v134)
  {
    v134 = 0;
    v135 = 0;
    WTF::fastFree((unint64_t)v93, v85, v86, v87, v88, v89, v90, v91);
  }
  v94 = v130;
  if (v133 != (_BYTE *)v130 && v130)
  {
    v130 = 0;
    v131 = 0;
    WTF::fastFree((unint64_t)v94, v85, v86, v87, v88, v89, v90, v91);
  }
  v95 = (_QWORD *)((char *)this + 5656);
  v96 = *((unsigned int *)this + 1417);
  if ((_DWORD)v96 == *((_DWORD *)this + 1416))
  {
    v98 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, v96 + 1, (unint64_t)&v122);
    v96 = *((unsigned int *)this + 1417);
    v97 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v96);
    v59 = *v98;
  }
  else
  {
    v97 = (uint64_t *)(*v95 + 8 * v96);
    v98 = &v122;
  }
  *v98 = 0;
  *v97 = v59;
  *((_DWORD *)this + 1417) = v96 + 1;
  v99 = v122;
  v122 = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  if (v121 != (_BYTE *)v119 && v119)
    WTF::fastFree((unint64_t)v119, v85, v86, v87, v88, v89, v90, v91);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v66, v86, v87, v88, v89, v90, v91);
  v107 = (char *)this + 4776;
  v108 = *((_DWORD *)v66 + 12);
  if ((int)v27 > 15)
    v109 = -1;
  else
    v109 = v27;
  v110 = &v107[12 * v109];
  *(_DWORD *)v110 = v108;
  *((_DWORD *)v110 + 1) = 4;
  v111 = ~v108;
  if (v111 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC32F4);
  }
  v112 = *((_QWORD *)this + 499) + 24 * (int)v111;
  v113 = *((_DWORD *)v66 + 13);
  *(_QWORD *)v112 = v66;
  *(_DWORD *)(v112 + 8) = v113;
  *(_BYTE *)(v112 + 17) = v27;
  *(_DWORD *)(v112 + 12) = 6;
  *(_BYTE *)(v112 + 16) = 0;
  v114 = v125;
  if (v127 != (_BYTE *)v125 && v125)
  {
    v125 = 0;
    LODWORD(v126) = 0;
    WTF::fastFree((unint64_t)v114, v100, v101, v102, v103, v104, v105, v106);
  }
  if (v128)
  {
    v115 = (char)v129;
    if ((char)v129 != -1)
    {
      if ((char)v129 > 15)
        v115 = -1;
      --*(_DWORD *)(v128 + 12 * v115 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v116 = -1;
    else
      v116 = v13;
    --*(_DWORD *)&v107[12 * v116 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::compileGetTypedArrayByteOffset(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int i;
  unsigned int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  int v98;
  WTF *v99;
  unsigned int v100;
  unsigned int v101;
  WTF *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int *v114;
  int v115;
  unint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int8x8_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  uint64_t v139;
  int v140;
  char v141;
  unsigned int *v142;
  char v143;
  unint64_t v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  int v157[3];
  int v158[3];
  unsigned int v159[2];
  char v160;
  __int16 v161;
  char v162;
  int v163[3];
  WTF *v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  WTF *v172;
  char v173;

  if (*((_WORD *)a2 + 9) == 146)
    v10 = *((_DWORD *)a2 + 20);
  else
    v10 = *((_DWORD *)a2 + 18);
  v11 = *((_QWORD *)a2 + 3);
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0x40000000) == 0)
  {
    if (!v12)
      goto LABEL_55;
    v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v13 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BC3B2CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12))
    {
      v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v164, this, v15, v16, v17, v18, v19, v20);
      if (v14 != -1)
        goto LABEL_57;
    }
    else
    {
LABEL_55:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v164, this, a3, a4, a5, a6, a7, a8);
    }
    LOBYTE(v14) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, v22, v23, v24, v25, v26, v27);
LABEL_57:
    v104 = (char)v165;
    v105 = *((_QWORD *)a2 + 3);
    v106 = *((_QWORD *)this + 688);
    v107 = *(unsigned int *)((v105 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v108 = (uint64_t *)(v106 + 24);
    v109 = (uint64_t *)(v106 + 8);
    if ((v105 & 1) != 0)
      v110 = v108;
    else
      v110 = v109;
    v111 = *v110;
    v112 = *v110 + 32 * v107;
    v113 = *((_DWORD *)this + 1396);
    v114 = (unsigned int *)(v112 + 20);
    v115 = *(_DWORD *)(v112 + 20);
    if (v113 != v115)
    {
      if ((*(_QWORD *)(v112 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v115 ^ v113) >= 2)
        {
          v144 = *(_QWORD *)v112;
          if (*(_QWORD *)v112 != 4)
          {
            *(_QWORD *)v112 = v144 | 2;
            v145 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v144 & 1) != 0)
            {
              v151 = 2 * *v145;
              while (v151 * 4)
              {
                v152 = *(_QWORD *)&v145[v151];
                if ((*(_BYTE *)(v152 + 19) & 0xC) == 0)
                {
                  v153 = *(_QWORD *)(v152 + 96);
                  v154 = (v153 & 1) != 0 ? (v153 >> 1) & 3 : *(unsigned __int8 *)(v153 + 4);
                  v151 -= 2;
                  if (v154 != 2)
                    continue;
                }
                v155 = v107;
                v156 = v111;
                WTF::fastFree((unint64_t)v145, v21, v22, v23, v24, v25, v26, v27);
                v111 = v156;
                v114 = (unsigned int *)(v112 + 20);
                v107 = v155;
                goto LABEL_127;
              }
            }
            else if (v145)
            {
              if ((*((_BYTE *)v145 + 19) & 0xC) != 0
                || ((v146 = *((_QWORD *)v145 + 12), (v146 & 1) != 0)
                  ? (v147 = (v146 >> 1) & 3)
                  : (v147 = *(unsigned __int8 *)(v146 + 4)),
                    v147 == 2))
              {
LABEL_127:
                *(_QWORD *)v112 = 4;
              }
            }
          }
          *(_DWORD *)(v111 + 32 * v107 + 16) = -21020677;
        }
        if ((v113 & 1) != 0)
          *(_QWORD *)v112 &= ~2uLL;
      }
      *v114 = v113;
    }
    v116 = *(_QWORD *)v112;
    if ((*(_QWORD *)v112 & 2) != 0)
      goto LABEL_66;
    if (v116 <= 4 && ((1 << v116) & 0x15) != 0)
      goto LABEL_66;
    v142 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v116 & 1) != 0)
    {
      v148 = *v142;
      if (!(_DWORD)v148)
        goto LABEL_107;
      v149 = (uint64_t *)(v142 + 2);
      v143 = 1;
      do
      {
        v150 = *v149++;
        if (*(_BYTE *)(16 * *(unsigned int *)(v150 + 76) + 0xF4))
          v143 = 0;
        --v148;
      }
      while (v148);
    }
    else
    {
      if (!v142)
        goto LABEL_107;
      v143 = *(_BYTE *)(16 * v142[19] + 0xF4) ^ 1;
    }
    if (!v143)
    {
LABEL_66:
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        goto LABEL_133;
      }
      v118 = v14;
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v14 | 0x2800000000, *((char *)this + 304), v23, v24, v25, v26, v27);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, (uint64_t)this, 1, 17, v119, v120, v121, v122, (uint64_t)v158, v123);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x1DuLL, (JSC::DFG::Node *)(((unint64_t)v14 << 32) | 0x80000000), a2, v158);
LABEL_68:
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v118 | 0x2000000000, v104, v23, v24, v25, v26, v27);
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 8, v104, 0x7FFFFFFFLL, v124, v125, v126, v127, (uint64_t)v157);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v157);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v128, v129, v130, v131, v132, v133);
      v134 = *((_DWORD *)a2 + 12);
      v135 = ~v134;
      if (v135 < *((unsigned int *)this + 1001))
      {
        v136 = *((_QWORD *)this + 499);
        if ((int)v104 > 15)
          v137 = -1;
        else
          v137 = v104;
        v138 = (char *)this + 12 * v137;
        *((_DWORD *)v138 + 1194) = v134;
        *((_DWORD *)v138 + 1195) = 5;
        v139 = v136 + 24 * (int)v135;
        v140 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v139 = a2;
        *(_DWORD *)(v139 + 8) = v140;
        *(_BYTE *)(v139 + 17) = v104;
        *(_DWORD *)(v139 + 12) = 1;
        *(_BYTE *)(v139 + 16) = 0;
        v102 = v164;
        if (!v164)
          goto LABEL_78;
        v103 = (char)v165;
        goto LABEL_74;
      }
      __break(0xC471u);
LABEL_133:
      JUMPOUT(0x197BC3AACLL);
    }
LABEL_107:
    v118 = v14;
    goto LABEL_68;
  }
  if (!v12)
    goto LABEL_84;
  v28 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v28 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC3B34);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v28 + 12))
    LOBYTE(v14) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_84:
    LOBYTE(v14) = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v172, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v170, this, v29, v30, v31, v32, v33, v34);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v168, this, v35, v36, v37, v38, v39, v40);
  if ((_BYTE)v14 == 0xFF)
    LOBYTE(v14) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, v41, v42, v43, v44, v45, v46);
  v47 = v169;
  v48 = v169;
  v49 = *((unsigned __int16 *)a2 + 9);
  if (v49 == 264)
  {
    v50 = *((_DWORD *)a2 + 18);
  }
  else if (v49 == 146)
  {
    LOBYTE(v50) = *((_BYTE *)a2 + 80);
  }
  else
  {
    LOBYTE(v50) = *((_BYTE *)a2 + 72);
  }
  v51 = v173;
  v52 = v171;
  if (v50 == 25)
  {
    v53 = 0;
    v54 = 0;
  }
  else
  {
    if (v49 == 146)
      v55 = *((_DWORD *)a2 + 20);
    else
      v55 = *((_DWORD *)a2 + 18);
    v53 = JSC::DFG::toTypedArrayType(v55);
    v54 = 256;
  }
  JSC::AssemblyHelpers::branchIfResizableOrGrowableSharedTypedArrayIsOutOfBounds((uint64_t)this, v14, v51, v52, v54 | v53, v44, v45, v46, (uint64_t)&v164);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v14 | 0x2000000000, v48, v56, v57, v58, v59, v60);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 8, v48, 0x7FFFFFFFLL, v61, v62, v63, v64, (uint64_t)v163);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v163);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v73 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
    v73 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v73) = 335544320;
  v74 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v74;
  if (*((_BYTE *)this + 328))
    v75 = 69;
  else
    v75 = 65;
  v159[0] = i;
  v159[1] = 0;
  v160 = v75;
  v161 = 15;
  v162 = -1;
  if (v166)
  {
    v76 = 0;
    v77 = 0;
    v78 = 12 * v166;
    do
    {
      if (v77 >= v166)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC3B24);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v164 + v76), (uint64_t)this, v66, v67, v68, v69, v70, v71);
      ++v77;
      v76 += 12;
    }
    while (v78 != v76);
    v74 = *((_DWORD *)this + 50);
  }
  if (v74 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v65, v66, v67, v68, v69, v70, v71);
    v74 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v74) = v47 & 0x1F | 0x52800000;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v159, (uint64_t)this, v66, v67, v68, v69, v70, v71);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v79, v80, v81, v82, v83, v84);
  v92 = *((_DWORD *)a2 + 12);
  v93 = ~v92;
  if (v93 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC3B3CLL);
  }
  v94 = *((_QWORD *)this + 499);
  if ((int)v48 > 15)
    v95 = -1;
  else
    v95 = v48;
  v96 = (char *)this + 12 * v95;
  *((_DWORD *)v96 + 1194) = v92;
  *((_DWORD *)v96 + 1195) = 5;
  v97 = v94 + 24 * (int)v93;
  v98 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v97 = a2;
  *(_DWORD *)(v97 + 8) = v98;
  *(_BYTE *)(v97 + 17) = v48;
  *(_DWORD *)(v97 + 12) = 1;
  *(_BYTE *)(v97 + 16) = 0;
  v99 = v164;
  if (&v167 != (uint64_t *)v164 && v164)
  {
    v164 = 0;
    v165 = 0;
    WTF::fastFree((unint64_t)v99, v85, v86, v87, v88, v89, v90, v91);
  }
  if (v168)
  {
    v100 = v169;
    if (v169 != -1)
    {
      if (v169 > 15)
        v100 = -1;
      --*(_DWORD *)(v168 + 12 * v100 + 4784);
    }
  }
  if (v170)
  {
    v101 = v171;
    if (v171 != -1)
    {
      if (v171 > 15)
        v101 = -1;
      --*(_DWORD *)(v170 + 12 * v101 + 4784);
    }
  }
  v102 = v172;
  if (v172)
  {
    v103 = v173;
LABEL_74:
    if (v103 != -1)
    {
      if (v103 > 15)
        v103 = -1;
      --*((_DWORD *)v102 + 3 * v103 + 1196);
    }
  }
LABEL_78:
  if (v12)
  {
    if ((char)v14 > 15)
      v141 = -1;
    else
      v141 = v14;
    --*((_DWORD *)this + 3 * v141 + 1196);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetByValOnDirectArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  JSC::DFG::Node *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70[3];

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197BC3EDCLL);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC3EE4);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v15 + 12))
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24)), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_34:
    v16 = -1;
  }
  v17 = v9 + 1;
  if (v10 <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197BC3EECLL);
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v17);
  v19 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *(unsigned int *)(a1 + 4004))
    goto LABEL_43;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v18, a3, a4, a5, a6, a7, a8);
    v21 = v20;
  }
  else
  {
    v21 = -1;
  }
  if (v16 == 0xFF)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v14, a3, a4, a5, a6, a7, a8);
  if (v21 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v18, a3, a4, a5, a6, a7, a8);
    v21 = v22;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
  if (*(_BYTE *)(a1 + 5244))
  {
    if (*(_BYTE *)(a1 + 212))
    {
      v29 = result;
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::load64(a1, v16 | 0x2800000000, *(char *)(a1 + 272), v24, v25, v26, v27, v28);
      JSC::MacroAssemblerARM64::branchTest64(a1, 1, 16, 0xFFFFFFFFLL, v30, v31, v32, v33, (uint64_t)v70, v34);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v70);
      v35 = v29;
      JSC::MacroAssemblerARM64::load32(a1, v16 | 0x2000000000, v35, v36, v37, v38, v39, v40);
      JSC::MacroAssemblerARM64::branch32(a1, 2, v21, v35, v41, v42, v43, v44, (uint64_t)&v68);
      if (*(_WORD *)(a2 + 18) == 146)
        v49 = *(_DWORD *)(a2 + 80);
      else
        v49 = *(_DWORD *)(a2 + 72);
      if ((v49 & 0xFE0000) == 0)
      {
        v66 = v68;
        v67 = v69;
        JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, &v66);
      }
      JSC::MacroAssemblerARM64::load64(a1, v16 | ((unint64_t)v21 << 8) | 0x300000000, 0x200000030uLL, v35, v45, v46, v47, v48);
      if (*(_WORD *)(a2 + 18) == 146)
        v56 = *(_DWORD *)(a2 + 80);
      else
        v56 = *(_DWORD *)(a2 + 72);
      if ((v56 & 0xFE0000) != 0)
      {
        v60 = v68;
        v61 = v69;
        v62 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v50, v51, v52, v53, v54, v55);
        JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v65, v60, v61, a1, v35, v62, v63, v16, v21);
        JSC::DFG::SpeculativeJIT::addSlowPathGenerator(a1, (unint64_t)&v65);
        v64 = v65;
        v65 = 0;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      }
      result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v35, a2, 16, 0, v53, v54, v55);
      goto LABEL_24;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x197BC3ED4);
  }
LABEL_24:
  v57 = a1 + 4776;
  if (v21 > 15)
    v58 = -1;
  else
    v58 = v21;
  --*(_DWORD *)(v57 + 12 * v58 + 8);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((char)v16 > 15)
      v59 = -1;
    else
      v59 = v16;
    --*(_DWORD *)(v57 + 12 * v59 + 8);
  }
  return result;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::AssemblerBuffer *v27;
  JSC::AssemblerBuffer *v28;

  v17 = WTF::fastMalloc((WTF *)0xA0);
  v18 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v17, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v18 = off_1E35746F0;
  *(_DWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 52) = a3;
  v26 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v18 + 60) = v26;
  if (v26 < *(_DWORD *)(a4 + 52))
  {
    v27 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v26 + 4) > *(_DWORD *)(a4 + 192))
      {
        v28 = v27;
        JSC::AssemblerBuffer::outOfLineGrow(v27, v19, v20, v21, v22, v23, v24, v25);
        v27 = v28;
        v26 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v26) = -721215457;
      v26 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v26;
      *(_DWORD *)(v17 + 60) = v26;
    }
    while (v26 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v17 = off_1E3573770;
  *(_QWORD *)(v17 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 74) = a5;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v17 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v24, v25);
  *(_QWORD *)v17 = &off_1E3573740;
  *(_QWORD *)(v17 + 128) = operationGetByValObjectInt;
  *(_QWORD *)(v17 + 136) = a6;
  *(_QWORD *)(v17 + 144) = a7;
  *(_BYTE *)(v17 + 152) = a8;
  *(_BYTE *)(v17 + 153) = a9;
  *a1 = v17;
}

void JSC::DFG::SpeculativeJIT::compileGetByValOnScopedArguments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int8x8_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  char v133;
  char v134;
  int v135;
  unsigned int v136;
  unsigned __int8 v137;
  uint64_t v138;
  int v139[3];
  unsigned int v140[2];
  char v141;
  __int16 v142;
  char v143;
  int v144[3];
  unsigned int v145[3];
  int v146[3];
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  unsigned __int8 v150;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197BC4690);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24));
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_50;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC4698);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12))
  {
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * *(_QWORD *)(a2 + 24)), a3, a4, a5, a6, a7, a8);
    v8 = *(_QWORD *)(a1 + 3960);
    LODWORD(v9) = *(_DWORD *)(a2 + 24);
    v10 = *(_DWORD *)(v8 + 164);
  }
  else
  {
LABEL_50:
    v17 = -1;
  }
  v18 = v9 + 1;
  if (v10 <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197BC46A0);
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v18);
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    goto LABEL_64;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v19, a3, a4, a5, a6, a7, a8);
    v22 = v21;
  }
  else
  {
    v22 = -1;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v149, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v147, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
  if (v17 == 0xFF)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, v14, v29, v30, v31, v32, v33, v34);
  if (v22 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(a1, v19, v29, v30, v31, v32, v33, v34);
    v22 = v35;
  }
  v36 = v22;
  if (*(_BYTE *)(a1 + 5244))
  {
    v37 = v150;
    v38 = v148;
    v39 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
    v40 = (char)v39;
    JSC::MacroAssemblerARM64::load64(a1, v17 | 0x3800000000, v40, v41, v42, v43, v44, v45);
    if (*(_BYTE *)(a1 + 212))
    {
      v137 = v39;
      v138 = a2;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load32(a1, v17 | 0x1C00000000, *(char *)(a1 + 304), v46, v47, v48, v49, v50);
      JSC::MacroAssemblerARM64::branch32(a1, 2, v22, 17, v51, v52, v53, v54, (uint64_t)v146);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v146);
      v55 = (char)v37;
      JSC::MacroAssemblerARM64::load64(a1, v17 | 0x2800000000, v55, v56, v57, v58, v59, v60);
      JSC::MacroAssemblerARM64::load32(a1, v37 | 0x800000000, (char)v38, v61, v62, v63, v64, v65);
      JSC::MacroAssemblerARM64::branch32(a1, 2, v22, (char)v38, v66, v67, v68, v69, (uint64_t)v145);
      JSC::MacroAssemblerARM64::load64(a1, v17 | 0x3000000000, (char)v38, v70, v71, v72, v73, v74);
      JSC::MacroAssemblerARM64::load64(a1, v37 | 0x1000000000, v55, v75, v76, v77, v78, v79);
      JSC::MacroAssemblerARM64::load32(a1, v37 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v22 << 8) | 0x200000000, 0x200000000uLL, v55, v80, v81, v82, v83);
      JSC::MacroAssemblerARM64::branch32(a1, 0, v55, 0xFFFFFFFFLL, v84, v85, v86, v87, (uint64_t)v144);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v144);
      JSC::MacroAssemblerARM64::load64(a1, v38 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v22 << 8) | 0x300000000, 0x200000020uLL, v40, v88, v89, v90, v91);
      v99 = *(_DWORD *)(a1 + 200);
      if (v99 < *(_DWORD *)(a1 + 52))
      {
        v36 = v22;
        do
        {
          if ((v99 + 4) > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v92, v93, v94, v95, v96, v97, v98);
            v99 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v99) = -721215457;
          v99 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v99;
        }
        while (v99 < *(_DWORD *)(a1 + 52));
      }
      else
      {
        v36 = v22;
      }
      v100 = v99;
      if ((v99 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v92, v93, v94, v95, v96, v97, v98);
        v100 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v100) = 335544320;
      *(_DWORD *)(a1 + 200) += 4;
      if (*(_BYTE *)(a1 + 328))
        v101 = 69;
      else
        v101 = 65;
      v140[0] = v99;
      v140[1] = 0;
      v141 = v101;
      v142 = 15;
      v143 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v145, a1, v93, v94, v95, v96, v97, v98);
      v109 = (v22 & 0x1F) << 16;
      if ((_DWORD)v38 == 31)
      {
        v135 = v109 | 0x4B2063FF;
        v136 = *(_DWORD *)(a1 + 200);
        if (v136 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v102, v103, v104, v105, v106, v107, v108);
          v136 = *(_DWORD *)(a1 + 200);
        }
        v115 = 1262446591;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v136) = v135;
        v113 = *(_DWORD *)(a1 + 200);
        v114 = v113 + 4;
        *(_DWORD *)(a1 + 200) = v113 + 4;
      }
      else
      {
        v110 = v38 & 0x1F;
        v111 = v109 | (32 * v110) | v110 | 0x4B000000;
        v112 = *(_DWORD *)(a1 + 200);
        if (v112 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v102, v103, v104, v105, v106, v107, v108);
          v112 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v112) = v111;
        v113 = *(_DWORD *)(a1 + 200);
        v114 = v113 + 4;
        *(_DWORD *)(a1 + 200) = v113 + 4;
        v115 = v110 | (v110 << 16) | 0x4B0003E0;
      }
      if ((v113 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v102, v103, v104, v105, v106, v107, v108);
        v114 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v114) = v115;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::load64(a1, v137 | (unint64_t)(v38 << 8) | 0x300000000, 0x200000000uLL, v40, v105, v106, v107, v108);
      JSC::MacroAssemblerARM64::branchTest64(a1, 0, v40, 0xFFFFFFFFLL, v116, v117, v118, v119, (uint64_t)v139, v120);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v139);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v140, a1, v121, v122, v123, v124, v125, v126);
      JSC::DFG::SpeculativeJIT::jsValueResult(a1, v40, v138, 16, 0, v127, v128, v129);
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_64:
    JUMPOUT(0x197BC45A8);
  }
LABEL_31:
  if (v147)
  {
    v130 = (char)v148;
    if ((char)v148 != -1)
    {
      if ((char)v148 > 15)
        v130 = -1;
      --*(_DWORD *)(v147 + 12 * v130 + 4784);
    }
  }
  if (v149)
  {
    v131 = (char)v150;
    if ((char)v150 != -1)
    {
      if ((char)v150 > 15)
        v131 = -1;
      --*(_DWORD *)(v149 + 12 * v131 + 4784);
    }
  }
  v132 = a1 + 4776;
  if (v36 > 15)
    v133 = -1;
  else
    v133 = v22;
  --*(_DWORD *)(v132 + 12 * v133 + 8);
  if (v15)
  {
    if ((char)v17 > 15)
      v134 = -1;
    else
      v134 = v17;
    --*(_DWORD *)(v132 + 12 * v134 + 8);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetScope(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  char *v22;
  int v23;
  char v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_31;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_28:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC48B4);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v30 = -1;
    else
      v30 = v12;
    ++*((_DWORD *)this + 3 * v30 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x1000000000, v14, a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v15, v16, v17, v18, v19, v20);
  v22 = (char *)this + 4776;
  v23 = *((_DWORD *)a2 + 12);
  if (v14 > 15)
    v24 = -1;
  else
    v24 = v14;
  v25 = &v22[12 * v24];
  *(_DWORD *)v25 = v23;
  *((_DWORD *)v25 + 1) = 4;
  v26 = ~v23;
  if (v26 >= *((unsigned int *)this + 1001))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197BC48ACLL);
  }
  v27 = *((_QWORD *)this + 499) + 24 * (int)v26;
  v28 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v27 = a2;
  *(_DWORD *)(v27 + 8) = v28;
  *(_BYTE *)(v27 + 17) = v14;
  *(_DWORD *)(v27 + 12) = 6;
  *(_BYTE *)(v27 + 16) = 0;
  if (v14 != -1)
    --*(_DWORD *)&v22[12 * v24 + 8];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v29 = -1;
    else
      v29 = v12;
    --*(_DWORD *)&v22[12 * v29 + 8];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetGlobalObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *result;
  char *v43;
  int v44;
  unsigned int v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned __int8 v53;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v52, this, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v52, this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v20, v21, v22, v23, v24, v25);
LABEL_8:
  v26 = v53;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v13, (char)v53, v21, v22, v23, v24, v25);
  v34 = *((_DWORD *)this + 50);
  if (v34 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v27, v28, v29, v30, v31, v32, v33);
    v34 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v34) = v26 & 0x1F | (32 * (v26 & 0x1F)) | 0xD37CEC00;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v53 | 0x2800000000, (char)v53, v29, v30, v31, v32, v33);
  v35 = (char)v53;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v36, v37, v38, v39, v40, v41);
  v43 = (char *)this + 4776;
  v44 = *((_DWORD *)a2 + 12);
  if (v35 > 15)
    v45 = -1;
  else
    v45 = v35;
  v46 = &v43[12 * v45];
  *(_DWORD *)v46 = v44;
  *((_DWORD *)v46 + 1) = 4;
  v47 = ~v44;
  if (v47 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x197BC4AACLL);
  }
  v48 = *((_QWORD *)this + 499) + 24 * (int)v47;
  v49 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v48 = a2;
  *(_DWORD *)(v48 + 8) = v49;
  *(_BYTE *)(v48 + 17) = v35;
  *(_DWORD *)(v48 + 12) = 6;
  *(_BYTE *)(v48 + 16) = 0;
  if (v52)
  {
    v50 = (char)v53;
    if ((char)v53 != -1)
    {
      if ((char)v53 > 15)
        v50 = -1;
      --*(_DWORD *)(v52 + 12 * v50 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v51 = -1;
    else
      v51 = v13;
    --*(_DWORD *)&v43[12 * v51 + 8];
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetGlobalThis(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::DFG::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::ARM64LogicalImmediate *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *result;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 v35;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v34, this, a3, a4, a5, a6, a7, a8);
  v10 = v35;
  v17 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v11, v12, v13, v14, v15, v16);
  JSC::DFG::JITCompiler::loadLinkableConstant(this, v17, v18, (char)v10, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v10 | 0x4000000000, (char)v10, v23, v24, v25, v26, v27);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, (char)v10, a2, 0, v28, v29, v30, v31);
  if (v34)
  {
    v33 = (char)v35;
    if ((char)v35 != -1)
    {
      if ((char)v35 > 15)
        v33 = -1;
      --*(_DWORD *)(v34 + 12 * v33 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::canBeRope(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Edge *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  JSC::DFG::Graph *v19;
  unsigned int v20;
  uint64_t result;
  __int128 *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  __int128 v48;

  v10 = *((_QWORD *)this + 688);
  v11 = *(unsigned int *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v12 = (uint64_t *)(v10 + 24);
  v13 = (uint64_t *)(v10 + 8);
  if ((*(_QWORD *)a2 & 1) != 0)
    v14 = v12;
  else
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v11;
  v17 = *((_DWORD *)this + 1396);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v31 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v31 | 2;
          v40 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v31 & 1) != 0)
          {
            v43 = 2 * *v40;
            while (v43 * 4)
            {
              v44 = *(_QWORD *)&v40[v43];
              if ((*(_BYTE *)(v44 + 19) & 0xC) == 0)
              {
                v45 = *(_QWORD *)(v44 + 96);
                v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
                v43 -= 2;
                if (v46 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_37;
            }
          }
          else if (v40)
          {
            if ((*((_BYTE *)v40 + 19) & 0xC) != 0
              || ((v41 = *((_QWORD *)v40 + 12), (v41 & 1) != 0)
                ? (v42 = (v41 >> 1) & 3)
                : (v42 = *(unsigned __int8 *)(v41 + 4)),
                  v42 == 2))
            {
LABEL_37:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v11 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFEFFFFFFFLL) == 0)
    return 0;
  v19 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
  v20 = *(unsigned __int16 *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  result = 1;
  if (v20 <= 2)
    goto LABEL_17;
  if (*(unsigned __int16 *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 0xB5u)
  {
    if (v20 != 3)
      return result;
    v48 = *(_OWORD *)*(_QWORD *)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    goto LABEL_19;
  }
  if (v20 == 182)
  {
LABEL_17:
    v22 = *(__int128 **)((*(_QWORD *)a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48);
  }
  else
  {
    if (v20 != 355 && v20 != 348)
      return result;
    v22 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  DWORD2(v48) = 0;
  *(_QWORD *)&v48 = v22;
LABEL_19:
  JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v48, v19, a4, a5, a6, a7, a8, (int **)&v47);
  v30 = v47;
  v47 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 != 2)
    {
      result = 0;
      *(_DWORD *)v30 -= 2;
      return result;
    }
    WTF::StringImpl::~StringImpl(v30, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    return 0;
  }
  return 1;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetArrayLength(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int canBeRope;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int i;
  unsigned int v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _DWORD *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  char v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  char v129;
  char v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  void *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 v242;
  int v243;
  int v244;
  char v245;
  char v246;
  __int16 v247;
  __int16 v248;
  BOOL v249;
  unsigned int *v250;
  char v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  int v266[3];
  int v267[3];
  int v268[3];
  _BYTE v269[12];
  int v270[3];
  int v271[3];
  int v272[3];
  _BYTE v273[12];
  uint64_t v274;
  unint64_t v275;
  signed __int8 v276;

  v9 = this;
  v10 = *((unsigned __int16 *)a2 + 9);
  if (v10 == 146)
    v11 = *((_DWORD *)a2 + 20);
  else
    v11 = *((_DWORD *)a2 + 18);
  if (v11 - 6 < 4)
  {
    v12 = *((_QWORD *)a2 + 4);
    v13 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v14 = *(unsigned int *)(this + 4004);
    if (v13 >= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC5C1CLL);
    }
    if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v13 + 12))
    {
      v15 = JSC::DFG::SpeculativeJIT::fillStorage(this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
      v14 = *(unsigned int *)(v9 + 4004);
      v13 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    }
    else
    {
      v15 = -1;
    }
    if (v13 >= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x197BC5C24);
    }
    if (*(_DWORD *)(*(_QWORD *)(v9 + 3992) + 24 * (int)v13 + 8) == 1)
    {
      if (v15 == -1)
        v15 = JSC::DFG::SpeculativeJIT::fillStorage(v9, v12, a3, a4, a5, a6, a7, a8);
      if (v15 > 15)
        v99 = -1;
      else
        v99 = v15;
      ++*(_DWORD *)(v9 + 12 * v99 + 4784);
      v16 = v15;
    }
    else
    {
      v16 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    if (v15 == -1)
      v15 = JSC::DFG::SpeculativeJIT::fillStorage(v9, v12, a3, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::load32(v9, v15 | 0xFFFFFFF800000000, v16, a4, a5, a6, a7, a8);
    this = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v17, v18, v19, v20, v21, v22);
    v23 = *((_DWORD *)a2 + 12);
    v24 = ~v23;
    if (v24 >= *(unsigned int *)(v9 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197BC5C2CLL);
    }
    v25 = *(_QWORD *)(v9 + 3992);
    v26 = v9 + 4776;
    if (v16 > 15)
      v27 = -1;
    else
      v27 = v16;
    v28 = (_DWORD *)(v26 + 12 * v27);
    *v28 = v23;
    v28[1] = 5;
    v29 = v25 + 24 * (int)v24;
    v30 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v29 = a2;
    *(_DWORD *)(v29 + 8) = v30;
    *(_BYTE *)(v29 + 17) = v16;
    *(_DWORD *)(v29 + 12) = 1;
    *(_BYTE *)(v29 + 16) = 0;
    if (v16 != -1)
      --*(_DWORD *)(v26 + 12 * v27 + 8);
    if (v15 != -1)
    {
      if (v15 > 15)
        v31 = -1;
      else
        v31 = v15;
LABEL_22:
      v32 = v26 + 12 * v31;
LABEL_23:
      --*(_DWORD *)(v32 + 8);
    }
    return this;
  }
  switch((char)v11)
  {
    case 5:
      v33 = *((_QWORD *)a2 + 3);
      v34 = v33 & 0xFF00FFFFFFFFFFFFLL;
      if ((v33 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_71;
      v35 = ~*(_DWORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v35 >= *(unsigned int *)(this + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C44);
      }
      if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v35 + 12))
        v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      else
LABEL_71:
        v36 = -1;
      v37 = ~*(_DWORD *)((v33 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v37 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C34);
      }
      if (*(_DWORD *)(*(_QWORD *)(v9 + 3992) + 24 * (int)v37 + 8) == 1)
      {
        if (v36 == 0xFF)
          v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v33, a3, a4, a5, a6, a7, a8);
        if ((char)v36 > 15)
          v100 = -1;
        else
          v100 = v36;
        ++*(_DWORD *)(v9 + 12 * v100 + 4784);
        v38 = v36;
      }
      else
      {
        v38 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v274, (JSC::DFG::SpeculativeJIT *)v9, a3, a4, a5, a6, a7, a8);
      if (v36 == 0xFF)
        v36 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v33, v39, v40, v41, v42, v43, v44);
      v45 = (char)v275;
      v46 = v275;
      canBeRope = JSC::DFG::SpeculativeJIT::canBeRope((JSC::DFG::SpeculativeJIT *)v9, (JSC::DFG::Node *)((char *)a2 + 24), v39, v40, v41, v42, v43, v44);
      v48 = v36;
      JSC::MacroAssemblerARM64::load64(v9, v36 | 0x800000000, v45, v49, v50, v51, v52, v53);
      *(_QWORD *)v273 = 0xFFFFFFFFLL;
      *(_DWORD *)&v273[8] = -16773311;
      if (canBeRope)
      {
        JSC::MacroAssemblerARM64::branchTest64(v9, 1, (char)v46, 1, v55, v56, v57, v58, (uint64_t)v269, (int8x8_t)4278193985);
        *(_DWORD *)v273 = *(_DWORD *)v269;
        *(_QWORD *)&v273[4] = *(_QWORD *)&v269[4];
        JSC::MacroAssemblerARM64::load32(v9, v46 | 0x400000000, v38, v59, v60, v61, v62, v63);
        for (i = *(_DWORD *)(v9 + 200); (signed int)i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
        {
          if (i + 4 > *(_DWORD *)(v9 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v64, v65, v66, v67, v68, v69, v70);
            i = *(_DWORD *)(v9 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
          i = *(_DWORD *)(v9 + 200) + 4;
        }
        v72 = i;
        if (i + 4 > *(_DWORD *)(v9 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v64, v65, v66, v67, v68, v69, v70);
          v72 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v72) = 335544320;
        *(_DWORD *)(v9 + 200) += 4;
        if (*(_BYTE *)(v9 + 328))
          v73 = 69;
        else
          v73 = 65;
        *(_QWORD *)v269 = i;
        v269[8] = v73;
        *(_WORD *)&v269[9] = 15;
        v269[11] = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v273, v9, v65, v66, v67, v68, v69, v70);
        JSC::MacroAssemblerARM64::load32(v9, v48 | 0x1000000000, v38, v74, v75, v76, v77, v78);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v269, v9, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        JSC::MacroAssemblerARM64::load32(v9, v46 | 0x400000000, v38, v54, v55, v56, v57, v58);
      }
      this = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v85, v86, v87, v88, v89, v90);
      v91 = *((_DWORD *)a2 + 12);
      v92 = ~v91;
      if (v92 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C3CLL);
      }
      v93 = *(_QWORD *)(v9 + 3992);
      v26 = v9 + 4776;
      if (v38 > 15)
        LOBYTE(v94) = -1;
      else
        LOBYTE(v94) = v38;
      v94 = (char)v94;
      v95 = (_DWORD *)(v26 + 12 * (char)v94);
      *v95 = v91;
      v95[1] = 5;
      v96 = v93 + 24 * (int)v92;
      v97 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v96 = a2;
      *(_DWORD *)(v96 + 8) = v97;
      *(_BYTE *)(v96 + 17) = v38;
      *(_DWORD *)(v96 + 12) = 1;
      *(_BYTE *)(v96 + 16) = 0;
      if (v274)
      {
        v98 = (char)v275;
        if ((char)v275 != -1)
        {
          if ((char)v275 > 15)
            v98 = -1;
          --*(_DWORD *)(v274 + 12 * v98 + 4784);
        }
      }
      if (v38 != -1)
        --*(_DWORD *)(v26 + 12 * v94 + 8);
      if (v34)
      {
        if ((char)v48 > 15)
          v31 = -1;
        else
          v31 = v48;
        goto LABEL_22;
      }
      return this;
    case 10:
    case 11:
      JSC::DFG::StorageOperand::StorageOperand((uint64_t)&v274, this, *((_QWORD *)a2 + 4), a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::StorageOperand>((uint64_t)v273, (JSC::DFG::SpeculativeJIT *)v9, (uint64_t)&v274, v181, v182, v183, v184, v185);
      v192 = v276;
      if (v276 == 255)
      {
        v192 = JSC::DFG::SpeculativeJIT::fillStorage(v274, v275, v186, v187, v188, v189, v190, v191);
        v276 = v192;
      }
      v193 = v273[8];
      JSC::MacroAssemblerARM64::load32(v9, v192 | 0xFFFFFFF800000000, v193, v187, v188, v189, v190, v191);
      JSC::MacroAssemblerARM64::branchTest32(v9, 4, v193, v193, v194, v195, v196, v197, (uint64_t)v272);
      JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v272);
      this = (uint64_t)JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)v9, v193, a2, 1, 0, v198, v199, v200);
      if (*(_QWORD *)v273)
      {
        v201 = v273[8];
        if (v273[8] != -1)
        {
          if (v273[8] > 15)
            v201 = -1;
          --*(_DWORD *)(*(_QWORD *)v273 + 12 * v201 + 4784);
        }
      }
      v202 = v276;
      if (v276 != -1)
      {
        if (v276 > 15)
          v202 = -1;
        v131 = v274 + 12 * v202;
        goto LABEL_98;
      }
      return this;
    case 12:
      v101 = *((_QWORD *)a2 + 3);
      if ((v101 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_145;
      v102 = ~*(_DWORD *)((v101 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v102 >= *(unsigned int *)(this + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C4CLL);
      }
      if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v102 + 12))
      {
        this = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        v103 = this;
      }
      else
      {
LABEL_145:
        v103 = -1;
      }
      v104 = ~*(_DWORD *)((v101 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v104 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C54);
      }
      if (*(_DWORD *)(*(_QWORD *)(v9 + 3992) + 24 * (int)v104 + 8) == 1)
      {
        if (v103 == -1)
        {
          this = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v101, a3, a4, a5, a6, a7, a8);
          v103 = this;
        }
        if (v103 > 15)
          v180 = -1;
        else
          v180 = v103;
        ++*(_DWORD *)(v9 + 12 * v180 + 4784);
        v105 = v103;
      }
      else
      {
        this = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v105 = this;
      }
      if (v103 == -1)
      {
        this = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v101, a3, a4, a5, a6, a7, a8);
        v103 = this;
      }
      if (*(_BYTE *)(v9 + 5244))
      {
        if (!*(_BYTE *)(v9 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197BC5BE0);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 264) + 208) &= ~*(_DWORD *)(v9 + 288);
        JSC::MacroAssemblerARM64::load64(v9, v103 | 0x2800000000, *(char *)(v9 + 272), a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::branchTest64(v9, 1, 16, 0xFFFFFFFFLL, v106, v107, v108, v109, (uint64_t)v271, v110);
        JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v271);
        JSC::MacroAssemblerARM64::load32(v9, v103 | 0x2000000000, v105, v111, v112, v113, v114, v115);
        this = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v116, v117, v118, v119, v120, v121);
        v122 = *((_DWORD *)a2 + 12);
        v123 = ~v122;
        if (v123 >= *(unsigned int *)(v9 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197BC5C5CLL);
        }
        v124 = *(_QWORD *)(v9 + 3992);
        if (v105 > 15)
          v125 = -1;
        else
          v125 = v105;
        v126 = v9 + 12 * v125;
        *(_DWORD *)(v126 + 4776) = v122;
        *(_DWORD *)(v126 + 4780) = 5;
        v127 = v124 + 24 * (int)v123;
        v128 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v127 = a2;
        *(_DWORD *)(v127 + 8) = v128;
        *(_BYTE *)(v127 + 17) = v105;
        *(_DWORD *)(v127 + 12) = 1;
        *(_BYTE *)(v127 + 16) = 0;
      }
      if (v105 != -1)
      {
        if (v105 > 15)
          v129 = -1;
        else
          v129 = v105;
        --*(_DWORD *)(v9 + 12 * v129 + 4784);
      }
      if ((v101 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if (v103 > 15)
          v130 = -1;
        else
          v130 = v103;
        v131 = v9 + 12 * v130;
        goto LABEL_98;
      }
      return this;
    case 13:
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v274, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
      this = JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateCellOperand>((uint64_t)v273, (JSC::DFG::SpeculativeJIT *)v9, (uint64_t)&v274, v203, v204, v205, v206, v207);
      v214 = v276;
      if (v276 == 255)
      {
        this = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v274, v275, v208, v209, v210, v211, v212, v213);
        v214 = this;
        v276 = this;
      }
      if (*(_BYTE *)(v9 + 5244))
      {
        v215 = v273[8];
        JSC::MacroAssemblerARM64::branchTest8(v9, 1, v214 | 0x1800000000, 0xFFFFFFFFLL, v210, v211, v212, v213, (uint64_t)v270);
        JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v270);
        JSC::MacroAssemblerARM64::load32(v9, v214 | 0x1C00000000, v215, v216, v217, v218, v219, v220);
        this = (uint64_t)JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)v9, v215, a2, 1, 0, v221, v222, v223);
      }
      goto LABEL_183;
    default:
      if (v10 == 146)
        v132 = *((_DWORD *)a2 + 20);
      else
        v132 = *((_DWORD *)a2 + 18);
      if ((v132 & 0x40000000) != 0)
      {
        JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v274, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v273, (JSC::DFG::SpeculativeJIT *)v9, v224, v225, v226, v227, v228, v229);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v269, (JSC::DFG::SpeculativeJIT *)v9, v230, v231, v232, v233, v234, v235);
        v242 = v276;
        if (v276 == 255)
        {
          v242 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v274, v275, v236, v237, v238, v239, v240, v241);
          v276 = v242;
        }
        v243 = *((unsigned __int16 *)a2 + 9);
        if (v243 == 264)
        {
          v244 = *((_DWORD *)a2 + 18);
        }
        else if (v243 == 146)
        {
          LOBYTE(v244) = *((_BYTE *)a2 + 80);
        }
        else
        {
          LOBYTE(v244) = *((_BYTE *)a2 + 72);
        }
        v245 = v273[8];
        v246 = v269[8];
        if (v244 == 25)
        {
          v247 = 0;
          v248 = 0;
        }
        else
        {
          if (v243 == 146)
            v252 = *((_DWORD *)a2 + 20);
          else
            v252 = *((_DWORD *)a2 + 18);
          v247 = JSC::DFG::toTypedArrayType(v252);
          v248 = 256;
        }
        JSC::AssemblyHelpers::loadTypedArrayLength(v9, v242, v246, v245, v246, v248 | v247, v240, v241);
        JSC::MacroAssemblerARM64::branch64(v9, 8, v246, 0x7FFFFFFFLL, v253, v254, v255, v256, (uint64_t)v268);
        JSC::DFG::SpeculativeJIT::speculationCheck(v9, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v268);
        this = (uint64_t)JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)v9, v246, a2, 1, 0, v257, v258, v259);
        if (*(_QWORD *)v269)
        {
          v260 = v269[8];
          if (v269[8] != -1)
          {
            if (v269[8] > 15)
              v260 = -1;
            --*(_DWORD *)(*(_QWORD *)v269 + 12 * v260 + 4784);
          }
        }
LABEL_183:
        if (*(_QWORD *)v273)
        {
          v261 = v273[8];
          if (v273[8] != -1)
          {
            if (v273[8] > 15)
              v261 = -1;
            --*(_DWORD *)(*(_QWORD *)v273 + 12 * v261 + 4784);
          }
        }
        if ((v275 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v262 = v276;
          if (v276 > 15)
            v262 = -1;
          v131 = v274 + 12 * v262;
LABEL_98:
          --*(_DWORD *)(v131 + 4784);
        }
        return this;
      }
      v133 = *((_QWORD *)a2 + 3);
      v134 = v133 & 0xFF00FFFFFFFFFFFFLL;
      if ((v133 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_147;
      v135 = ~*(_DWORD *)((v133 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v135 >= *(unsigned int *)(this + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C64);
      }
      if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v135 + 12))
      {
        v136 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v274, (JSC::DFG::SpeculativeJIT *)v9, v137, v138, v139, v140, v141, v142);
        if (v136 != -1)
          goto LABEL_107;
      }
      else
      {
LABEL_147:
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v274, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
      }
      v136 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v133, v143, v144, v145, v146, v147, v148);
LABEL_107:
      v149 = (char)v275;
      v150 = *((_QWORD *)a2 + 3);
      v151 = *(_QWORD *)(v9 + 5504);
      v152 = *(unsigned int *)((v150 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v153 = (_QWORD *)(v151 + 24);
      v154 = (_QWORD *)(v151 + 8);
      if ((v150 & 1) != 0)
        v155 = v153;
      else
        v155 = v154;
      v156 = *v155 + 32 * v152;
      v157 = (void *)*(unsigned int *)(v9 + 5584);
      if ((_DWORD)v157 != *(_DWORD *)(v156 + 20))
      {
        if ((*(_QWORD *)(v156 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v156, v157, v143, v144, v145, v146, v147, v148);
        else
          *(_DWORD *)(v156 + 20) = (_DWORD)v157;
      }
      v158 = *(_QWORD *)v156;
      if ((*(_QWORD *)v156 & 2) != 0 || (v158 <= 4 ? (v249 = ((1 << v158) & 0x15) == 0) : (v249 = 1), !v249))
      {
        v159 = v136;
LABEL_113:
        JSC::MacroAssemblerARM64::branchTest8(v9, 1, v159 | 0x2800000000, 6, v145, v146, v147, v148, (uint64_t)v267);
        JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x1DuLL, (JSC::DFG::Node *)((v159 << 32) | 0x80000000), a2, v267);
        goto LABEL_114;
      }
      v250 = (unsigned int *)(v158 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v158 & 1) == 0)
      {
        if (v250)
        {
          v251 = *(_BYTE *)(16 * v250[19] + 0xF4) ^ 1;
          goto LABEL_197;
        }
LABEL_201:
        v159 = v136;
        goto LABEL_114;
      }
      v263 = *v250;
      if (!(_DWORD)v263)
        goto LABEL_201;
      v264 = (uint64_t *)(v250 + 2);
      v251 = 1;
      do
      {
        v265 = *v264++;
        if (*(_BYTE *)(16 * *(unsigned int *)(v265 + 76) + 0xF4))
          v251 = 0;
        --v263;
      }
      while (v263);
LABEL_197:
      v159 = v136;
      if (!v251)
        goto LABEL_113;
LABEL_114:
      JSC::MacroAssemblerARM64::load64(v9, v159 | 0x1800000000, v149, v144, v145, v146, v147, v148);
      JSC::MacroAssemblerARM64::branch64(v9, 8, v149, 0x7FFFFFFFLL, v160, v161, v162, v163, (uint64_t)v266);
      JSC::DFG::SpeculativeJIT::speculationCheck(v9, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v266);
      this = (uint64_t)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v164, v165, v166, v167, v168, v169);
      v170 = *((_DWORD *)a2 + 12);
      v171 = ~v170;
      if (v171 >= *(unsigned int *)(v9 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC5C6CLL);
      }
      v172 = *(_QWORD *)(v9 + 3992);
      v173 = v9 + 4776;
      if ((int)v149 > 15)
        v174 = -1;
      else
        v174 = v149;
      v175 = (_DWORD *)(v173 + 12 * v174);
      *v175 = v170;
      v175[1] = 5;
      v176 = v172 + 24 * (int)v171;
      v177 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v176 = a2;
      *(_DWORD *)(v176 + 8) = v177;
      *(_BYTE *)(v176 + 17) = v149;
      *(_DWORD *)(v176 + 12) = 1;
      *(_BYTE *)(v176 + 16) = 0;
      if (v274)
      {
        v178 = (char)v275;
        if ((char)v275 != -1)
        {
          if ((char)v275 > 15)
            v178 = -1;
          --*(_DWORD *)(v274 + 12 * v178 + 4784);
        }
      }
      if (v134)
      {
        if (v136 > 15)
          v179 = -1;
        else
          v179 = v136;
        v32 = v173 + 12 * v179;
        goto LABEL_23;
      }
      return this;
  }
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::StorageOperand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v12 = *(unsigned __int8 *)(a3 + 16);
      if (v12 == 255)
      {
        LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillStorage(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v12;
      }
      if ((char)v12 > 15)
        v14 = -1;
      else
        v14 = v12;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v12) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v12;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckIdent(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48[3];
  uint64_t v49;
  char v50;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_19;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12))
  {
LABEL_19:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v49, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v49, v9, v14, v15, v16, v17, v18, v19);
  if ((_DWORD)v13 == -1)
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, v20, v21, v22, v23, v24, v25);
  v26 = *((_QWORD *)a2 + 3);
  v27 = v50;
  if ((v26 & 0xFC000000000000) == 0x50000000000000)
  {
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v9, v26, v13, v21, v22, v23, v24, v25);
    JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)v9, *((_QWORD *)a2 + 3), v13, v27, v28, v29, v30, v31);
  }
  else
  {
    JSC::DFG::SpeculativeJIT::speculateSymbol((uint64_t)v9, v26, v13, v21, v22, v23, v24, v25);
    JSC::MacroAssemblerARM64::load64((uint64_t)v9, v13 | 0x800000000, v27, v43, v44, v45, v46, v47);
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 1, v27, *((_QWORD *)a2 + 9), v32, v33, v34, v35, (uint64_t)v48);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)v9, 3uLL, (JSC::DFG::Node *)0xFF80000000, 0, v48);
  this = JSC::DFG::SpeculativeJIT::noResult((uint64_t)v9, (uint64_t)a2, 0, v36, v37, v38, v39, v40);
  if (v49)
  {
    v41 = v50;
    if (v50 != -1)
    {
      if (v50 > 15)
        v41 = -1;
      --*(_DWORD *)(v49 + 12 * v41 + 4784);
    }
  }
  if (v11)
  {
    if ((int)v13 > 15)
      v42 = -1;
    else
      v42 = v13;
    --*((_DWORD *)v9 + 3 * v42 + 1196);
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::compileNewFunction(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  char v24;
  _QWORD *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int *v31;
  int *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  _BYTE *v110;
  WTF *v111;
  WTF *v112;
  uint64_t v113;
  __int128 v114;
  unsigned int v115;
  int v116;
  _BYTE *v117;
  WTF *v118;
  WTF *v119;
  void *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  unsigned int *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  WTF *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  BOOL v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  __int128 v205;
  unint64_t v206;
  __int128 v207;
  uint64_t v208[2];
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212[2];
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216[2];
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  WTF *v220;
  unsigned int v221;
  unsigned int v222;
  _BYTE v223[24];
  uint64_t v224;
  WTF *v225;
  uint64_t v226;
  _BYTE v227[24];
  uint64_t v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  unsigned __int8 v233;
  _QWORD v234[2];
  _QWORD v235[2];
  _QWORD v236[2];
  _QWORD v237[2];
  __int128 v238;
  _BYTE v239[36];
  char v240;
  char v241;
  __int16 v242;
  JSC::JSCell *(*v243)(uint64_t, JSC::VM *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _DWORD *v244;
  uint64_t v245;
  __int128 v246[2];

  v10 = *((unsigned __int16 *)a2 + 9);
  v11 = *((_QWORD *)a2 + 3);
  v12 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v13 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC6AD8);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v15 == -1))
  {
LABEL_5:
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  }
  v16 = **((_QWORD **)a2 + 9);
  v17 = *(_QWORD *)(v16 + 112);
  if ((v17 & 1) != 0)
    v18 = (v17 >> 1) & 3;
  else
    v18 = *(unsigned __int8 *)(v17 + 4);
  if (v18 == 2)
  {
    v206 = v11 & 0xFF00FFFFFFFFFFFFLL;
    v19 = *((_QWORD *)this + 495);
    v20 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 1) != 0)
    {
      v169 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      if ((v20 & 2) != 0
        || ((v170 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8), v170 != 0x3FFFFFFF) ? (v171 = v170 == -1) : (v171 = 1), v171))
      {
        v172 = 2;
      }
      else if (v170 >> 28)
      {
        v187 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v187 = v169;
        *(_DWORD *)(v187 + 8) = v170;
        v172 = 1;
        v169 = v187;
      }
      else
      {
        v172 = v169;
        v169 = 0;
      }
      v20 = v169 | v172;
      v21 = *(_QWORD *)(v19 + 32);
      if ((v20 & 1) != 0)
      {
        v173 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        if ((v20 & 2) != 0
          || ((v174 = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8), v174 != 0x3FFFFFFF) ? (v175 = v174 == -1) : (v175 = 1),
              v175))
        {
          v176 = 2;
        }
        else if (v174 >> 28)
        {
          v188 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v188 = v173;
          *(_DWORD *)(v188 + 8) = v174;
          v176 = 1;
          v173 = v188;
        }
        else
        {
          v176 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          v173 = 0;
        }
        v177 = v173 | v176;
        v22 = (_QWORD *)(v177 & 0xFFFFFFFF8);
        if ((v177 & 1) != 0)
        {
          v23 = 0;
          v24 = 0;
          v25 = (_QWORD *)*v22;
LABEL_13:
          if (v25)
            v21 = v25[1];
          v26 = *(int **)(v21 + 8);
          if ((v23 & 1) == 0 && v22)
            WTF::fastFree((unint64_t)v22, v14, a3, a4, a5, a6, a7, a8);
          if ((v24 & 1) == 0 && (v20 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v20 & 0xFFFFFFFF8, v14, a3, a4, a5, a6, a7, a8);
          switch(v10)
          {
            case 359:
              v27 = **((_QWORD **)a2 + 9);
              v28 = *(_QWORD *)(v27 + 88);
              v29 = *(_QWORD *)(v28 + 16);
              if (*(_BYTE *)(v28 + 50) == 6)
              {
                if ((int)v29 < 0)
                  v32 = v26 + 236;
                else
                  v32 = v26 + 239;
              }
              else
              {
                v30 = *(_BYTE *)(v27 + 68);
                v31 = v26 + 240;
                if ((int)v29 >= 0)
                {
                  v32 = v26 + 241;
                }
                else
                {
                  v31 = v26 + 237;
                  v32 = v26 + 238;
                }
                if ((v30 & 1) == 0)
                  v32 = v31;
              }
              break;
            case 360:
              v32 = v26 + 247;
              break;
            case 361:
              v32 = v26 + 246;
              break;
            case 362:
              v32 = v26 + 245;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197BC691CLL);
          }
          v33 = *v32;
          if (v33)
            v34 = 16 * (v33 & 0xFFFFFFFE);
          else
            v34 = 0;
          v35 = JSC::DFG::Graph::registerStructure(v19, v34, (int *)&v238, a4, a5, a6, a7, a8);
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v232, this, v36, v37, v38, v39, v40, v41);
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v230, this, v42, v43, v44, v45, v46, v47);
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v228, this, v48, v49, v50, v51, v52, v53);
          v60 = v233;
          v61 = (char)v233;
          v225 = (WTF *)v227;
          v226 = 2;
          if (v10 == 359)
          {
            v62 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
            if (*(_DWORD *)(v62 + 38324) <= 0x1Fu)
            {
              __break(0xC471u);
              JUMPOUT(0x197BC6758);
            }
            *(_QWORD *)&v238 = 0;
            *((_QWORD *)&v238 + 1) = v62 + 38264;
            JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v233, (uint64_t)&v238, v231, v229, (uint64_t)&v225, 1, v59, (int8x8_t)2);
            v68 = (v35 >> 4) | ((unint64_t)*(unsigned int *)(v35 + 8) << 32);
            if (v68)
            {
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197BC685CLL);
              }
              JSC::MacroAssemblerARM64::moveToCachedReg(this, v68, (uint64_t)this + 264, v63, v64, v65, v66, v67);
              v69 = 16;
            }
            else
            {
              v69 = 63;
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v69, v60, v63, v64, v65, v66, v67);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v60 | 0x800000000, v70, v71, v72, v73, v74);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v15, v60 | 0x1000000000, v75, v76, v77, v78, v79);
            JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v246, this, v16, v80, v81, v82, v83, v84);
            v238 = v246[0];
            JSC::DFG::JITCompiler::LinkableConstant::store((int *)&v238, (uint64_t)this, v60 | 0x1800000000, v85, v86, v87, v88, v89);
            JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v90, v91, v92, v93, v94, (uint64_t)&v238);
            v102 = *((_DWORD *)this + 50);
            if (v102 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v95, v96, v97, v98, v99, v100, v101);
              v102 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v102) = -721208641;
            *((_DWORD *)this + 50) += 4;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v238, (uint64_t)this, v96, v97, v98, v99, v100, v101);
            v108 = HIDWORD(v226);
            v220 = (WTF *)v223;
            v221 = 2;
            v222 = HIDWORD(v226);
            if (HIDWORD(v226) < 3)
            {
              v110 = v223;
            }
            else
            {
              if (HIDWORD(v226) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197BC6AE8);
              }
              v109 = 12 * HIDWORD(v226);
              v110 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v226)));
              v221 = (v109 & 0xFFFFFFFC) / 0xC;
              v220 = (WTF *)v110;
              v108 = HIDWORD(v226);
            }
            if (v108)
            {
              v111 = v225;
              v112 = (WTF *)((char *)v225 + 12 * v108);
              do
              {
                *(_DWORD *)v110 = *(_DWORD *)v111;
                *(_QWORD *)(v110 + 4) = *(_QWORD *)((char *)v111 + 4);
                v111 = (WTF *)((char *)v111 + 12);
                v110 += 12;
              }
              while (v111 != v112);
            }
            v113 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
            JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v219, this, v16, v103, v104, v105, v106, v107);
            v114 = v219;
            v115 = v222;
            *(_QWORD *)&v238 = v239;
            DWORD2(v238) = 2;
            HIDWORD(v238) = v222;
            if (v222 < 3)
            {
              v117 = v239;
            }
            else
            {
              v205 = v219;
              if (v222 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197BC6AF0);
              }
              v116 = 12 * v222;
              v117 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v222));
              DWORD2(v238) = (v116 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v238 = v117;
              v115 = v222;
              v114 = v205;
            }
            if (v115)
            {
              v118 = v220;
              v119 = (WTF *)((char *)v220 + 12 * v115);
              do
              {
                *(_DWORD *)v117 = *(_DWORD *)v118;
                *(_QWORD *)(v117 + 4) = *(_QWORD *)((char *)v118 + 4);
                v118 = (WTF *)((char *)v118 + 12);
                v117 += 12;
              }
              while (v118 != v119);
            }
            v244 = this;
            v245 = v113;
            v246[0] = v114;
            v243 = operationNewFunctionWithInvalidatedReallocationWatchpoint;
            v242 = 0;
            v241 = v61;
            v240 = v15;
            std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&>(&v224, (uint64_t *)&v238, &v244, (uint64_t *)&v243, (unsigned __int8 *)&v242 + 1, (char *)&v242, &v241, &v245, &v240, v246);
            v121 = v238;
            if (v239 != (_BYTE *)v238 && (_QWORD)v238)
            {
              *(_QWORD *)&v238 = 0;
              DWORD2(v238) = 0;
              WTF::fastFree(v121, v120, v54, v55, v56, v57, v58, v59);
            }
            v122 = (_QWORD *)((char *)this + 5656);
            v123 = *((unsigned int *)this + 1417);
            if ((_DWORD)v123 == *((_DWORD *)this + 1416))
            {
              v125 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v122, v123 + 1, (unint64_t)&v224);
              v123 = *((unsigned int *)this + 1417);
              v124 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v123);
            }
            else
            {
              v124 = (uint64_t *)(*v122 + 8 * v123);
              v125 = &v224;
            }
            v126 = *v125;
            *v125 = 0;
            *v124 = v126;
            *((_DWORD *)this + 1417) = v123 + 1;
            v127 = v224;
            v224 = 0;
            if (v127)
              (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
            v128 = v220;
            if (v223 == (_BYTE *)v220 || !v220)
              goto LABEL_61;
            v129 = &v221;
            v220 = 0;
          }
          else
          {
            switch(v10)
            {
              case 360:
                JSC::DFG::SpeculativeJIT::compileNewFunctionCommon<JSC::JSGeneratorFunction>((uint64_t)this, (char)v233, v35, v231, v229, v15, (uint64_t)&v225, v16, (int8x8_t)2);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v216, (uint64_t *)&v225);
                v189 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
                JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v215, this, v16, v190, v191, v192, v193, v194);
                JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(&v218, v216, this, (uint64_t)operationNewGeneratorFunctionWithInvalidatedReallocationWatchpoint, v61, v189, v15, v195, v215);
                JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v218);
                v196 = v218;
                v218 = 0;
                if (v196)
                  (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
                v128 = (WTF *)v216[0];
                if (&v217 == (uint64_t *)v216[0] || !v216[0])
                  goto LABEL_61;
                v216[0] = 0;
                v186 = v216;
                break;
              case 362:
                JSC::DFG::SpeculativeJIT::compileNewFunctionCommon<JSC::JSGeneratorFunction>((uint64_t)this, (char)v233, v35, v231, v229, v15, (uint64_t)&v225, v16, (int8x8_t)2);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v212, (uint64_t *)&v225);
                v197 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
                JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v211, this, v16, v198, v199, v200, v201, v202);
                JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(&v214, v212, this, (uint64_t)operationNewAsyncFunctionWithInvalidatedReallocationWatchpoint, v61, v197, v15, v203, v211);
                JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v214);
                v204 = v214;
                v214 = 0;
                if (v204)
                  (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
                v128 = (WTF *)v212[0];
                if (&v213 == (uint64_t *)v212[0] || !v212[0])
                  goto LABEL_61;
                v212[0] = 0;
                v186 = v212;
                break;
              case 361:
                JSC::DFG::SpeculativeJIT::compileNewFunctionCommon<JSC::JSGeneratorFunction>((uint64_t)this, (char)v233, v35, v231, v229, v15, (uint64_t)&v225, v16, (int8x8_t)2);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v208, (uint64_t *)&v225);
                v178 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
                JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v207, this, v16, v179, v180, v181, v182, v183);
                JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(&v210, v208, this, (uint64_t)operationNewAsyncGeneratorFunctionWithInvalidatedReallocationWatchpoint, v61, v178, v15, v184, v207);
                JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v210);
                v185 = v210;
                v210 = 0;
                if (v185)
                  (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
                v128 = (WTF *)v208[0];
                if (&v209 == (uint64_t *)v208[0] || !v208[0])
                  goto LABEL_61;
                v208[0] = 0;
                v186 = v208;
                break;
              default:
                goto LABEL_61;
            }
            v129 = (unsigned int *)(v186 + 1);
          }
          *v129 = 0;
          WTF::fastFree((unint64_t)v128, v120, v54, v55, v56, v57, v58, v59);
LABEL_61:
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v54, v55, v56, v57, v58, v59);
          if (v61 > 15)
            v137 = -1;
          else
            v137 = v61;
          v138 = (char *)this + 12 * v137;
          v139 = *((_DWORD *)a2 + 12);
          *((_DWORD *)v138 + 1194) = v139;
          *((_DWORD *)v138 + 1195) = 4;
          v140 = ~v139;
          if (v140 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197BC6AE0);
          }
          v141 = *((_QWORD *)this + 499) + 24 * (int)v140;
          v142 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v141 = a2;
          *(_DWORD *)(v141 + 8) = v142;
          *(_BYTE *)(v141 + 17) = v61;
          *(_DWORD *)(v141 + 12) = 6;
          *(_BYTE *)(v141 + 16) = 0;
          v143 = v225;
          v12 = v206;
          if (v227 != (_BYTE *)v225 && v225)
          {
            v225 = 0;
            LODWORD(v226) = 0;
            WTF::fastFree((unint64_t)v143, v130, v131, v132, v133, v134, v135, v136);
          }
          if (v228)
          {
            v144 = v229;
            if (v229 != -1)
            {
              if (v229 > 15)
                v144 = -1;
              --*(_DWORD *)(v228 + 12 * v144 + 4784);
            }
          }
          if (v230)
          {
            v145 = v231;
            if (v231 != -1)
            {
              if (v231 > 15)
                v145 = -1;
              --*(_DWORD *)(v230 + 12 * v145 + 4784);
            }
          }
          if (v232)
          {
            v146 = (char)v233;
            if ((char)v233 != -1)
            {
              if ((char)v233 > 15)
                v146 = -1;
              --*(_DWORD *)(v232 + 12 * v146 + 4784);
            }
          }
          goto LABEL_83;
        }
        v24 = 0;
        v23 = 1;
LABEL_12:
        v25 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      v21 = *(_QWORD *)(v19 + 32);
    }
    v22 = (_QWORD *)(v20 & 0xFFFFFFFF8);
    v23 = 1;
    v24 = 1;
    goto LABEL_12;
  }
  ++*((_DWORD *)this + 1196);
  v148 = *((unsigned int *)this + 1194);
  if ((_DWORD)v148 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v148, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v148, a3, a4, a5, a6, a7, a8);
  if (v10 == 360)
  {
    v154 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v237, this, v16, v149, v150, v151, v152, v153);
    v156 = v237[0];
    v157 = v237[1];
    v158 = operationNewGeneratorFunction;
  }
  else if (v10 == 362)
  {
    v154 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v236, this, v16, v149, v150, v151, v152, v153);
    v156 = v236[0];
    v157 = v236[1];
    v158 = operationNewAsyncFunction;
  }
  else
  {
    v154 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    if (v10 == 361)
    {
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v235, this, v16, v149, v150, v151, v152, v153);
      v156 = v235[0];
      v157 = v235[1];
      v158 = operationNewAsyncGeneratorFunction;
    }
    else
    {
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v234, this, v16, v149, v150, v151, v152, v153);
      v156 = v234[0];
      v157 = v234[1];
      v158 = operationNewFunction;
    }
  }
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>((int *)&v238, (unsigned __int8 *)this, (uint64_t)v158, v154, v15, v156, v157, v155);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v159, v160, v161, v162, v163, v164);
  v165 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v165;
  *((_DWORD *)this + 1195) = 4;
  v166 = ~v165;
  if (v166 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC6AF8);
  }
  v167 = *((_QWORD *)this + 499) + 24 * (int)v166;
  v168 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v167 = a2;
  *(_DWORD *)(v167 + 8) = v168;
  *(_BYTE *)(v167 + 12) = 6;
  *(_DWORD *)(v167 + 13) = 0;
  *(_BYTE *)(v167 + 17) = 0;
  --*((_DWORD *)this + 1196);
LABEL_83:
  if (v12)
  {
    if ((int)v15 > 15)
      v147 = -1;
    else
      v147 = v15;
    --*((_DWORD *)this + 3 * v147 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  char v61;
  int v62;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v64;
  unsigned int v65;
  unsigned int v66;
  __int16 v67;
  _BYTE v68[6];

  v12 = (uint64_t)a2;
  v13 = a1;
  if ((_DWORD)a5 != 1)
  {
    v67 = a5 | 0x100;
    v65 = 1;
    v64 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v68[v15 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          if (a1)
            WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v16 |= 1 << v68[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v68[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_56;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v68[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v68[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v64, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v65;
        }
        a1 = (int *)memmove(&v68[v23 - 2], &v68[v23], 2 * v17 - v23 - 2);
        v14 = v65 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v67);
      v61 = v67;
      JSC::MacroAssemblerARM64::swap(v12, (char)v67, SHIBYTE(v67), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v67, v68, 2 * v65 - 2);
      v32 = v65 - 1;
      v28 = v65 == 1;
      v66 = v32;
      v33 = (unsigned __int8 *)&v67;
      __src = &v68[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v62 = 0;
        a2 = &v68[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v67;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v61;
LABEL_43:
        v62 = 0;
        v39 = (char *)&v67;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v68[2 * v66 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v59 = v39 - (char *)a2;
                v60 = v40;
                a1 = (int *)memmove(v40, a2, v39 - (char *)a2);
                v41 = &v60[v59];
              }
            }
            a2 = v33 + 2;
            ++v62;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v66;
        v35 = v66;
        __src = v40;
      }
      v36 = &v68[2 * v34 - 2];
      if (a2 != v36)
      {
        a1 = (int *)memmove(__src, a2, v36 - a2);
        v35 = v66;
      }
      v14 = v35 - v62;
LABEL_32:
      v65 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
LABEL_53:
  if ((_DWORD)a6 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a7, 2, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a6 << 35) + 0x380000001ALL, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, v42, v43, v44, v45, v46);
  JSC::DFG::SpeculativeJIT::appendCall(v12, a3, v47, v48, v49, v50, v51, v52, v13);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v53, v54, v55, v56, v57, v58);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, char a5, uint64_t a6, char a7, int a8, __int128 a9)
{
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  int v31;
  _BYTE v32[28];
  char v33;
  char v34;
  __int16 v35;
  uint64_t v36;
  _DWORD *v37;
  __int128 v38;
  uint64_t v39;

  v16 = *((unsigned int *)a2 + 3);
  v29 = (WTF *)v32;
  v30 = 2;
  v31 = v16;
  if (v16 < 3)
  {
    v18 = v32;
  }
  else
  {
    if (v16 >= 0x15555556)
    {
      __break(0xC471u);
      return;
    }
    v17 = 12 * v16;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v16));
    v30 = (v17 & 0xFFFFFFFC) / 0xC;
    v29 = (WTF *)v18;
    LODWORD(v16) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v16)
  {
    v19 = *a2;
    v20 = *a2 + 12 * v16;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
  v39 = a6;
  v38 = a9;
  v36 = a4;
  v37 = a3;
  v35 = 0;
  v34 = a5;
  v33 = a7;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&>(a1, (uint64_t *)&v29, &v37, &v36, (unsigned __int8 *)&v35 + 1, (char *)&v35, &v34, &v39, &v33, &v38);
  v28 = v29;
  if (v32 != (_BYTE *)v29)
  {
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
  }
}

unsigned int *JSC::DFG::SpeculativeJIT::compileNewFunctionCommon<JSC::JSGeneratorFunction>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v56;
  __int128 v57;

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  if (*(_DWORD *)(v9 + 38324) <= 0x1Fu)
  {
    __break(0xC471u);
    goto LABEL_11;
  }
  v13 = a2;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = v9 + 38264;
  JSC::AssemblyHelpers::emitAllocate(a1, a2, (uint64_t)&v57, a4, a5, a7, 1, a8, a9);
  v20 = (a3 >> 4) | ((unint64_t)*(unsigned int *)(a3 + 8) << 32);
  if (v20)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v20, a1 + 264, v15, v16, v17, v18, v19);
      v21 = 16;
      goto LABEL_6;
    }
    __break(0xC471u);
LABEL_11:
    JUMPOUT(0x197BC71F0);
  }
  v21 = 63;
LABEL_6:
  JSC::MacroAssemblerARM64::store64(a1, v21, v13, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::store64(a1, 63, v13 | 0x800000000, v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::store64(a1, a6, v13 | 0x1000000000, v27, v28, v29, v30, v31);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v56, (JSC::DFG::JITCompiler *)a1, a8, v32, v33, v34, v35, v36);
  v57 = v56;
  JSC::DFG::JITCompiler::LinkableConstant::store((int *)&v57, a1, v13 | 0x1800000000, v37, v38, v39, v40, v41);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded((JSC::AssemblyHelpers *)a1, *(JSC::VM **)(*(_QWORD *)(a1 + 352) + 16), v42, v43, v44, v45, v46, (uint64_t)&v57);
  v54 = *(_DWORD *)(a1 + 200);
  if (v54 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v47, v48, v49, v50, v51, v52, v53);
    v54 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = -721208641;
  *(_DWORD *)(a1 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v57, a1, v48, v49, v50, v51, v52, v53);
}

uint64_t JSC::DFG::SpeculativeJIT::compileSetFunctionName(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  JSC::DFG::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int v34;
  unsigned int v35;
  int v36;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_22;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 4);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
LABEL_10:
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197BC73B0);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    goto LABEL_10;
  v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
    goto LABEL_10;
LABEL_11:
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, a3, a4, a5, a6, a7, a8);
  v24 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v18, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>((unsigned __int8 *)this, (unsigned __int8 *)operationSetFunctionName, v24, v25, v13, v17, v26, v27, &v36);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v28, v29, v30, v31, v32);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v17 > 15)
      v34 = -1;
    else
      v34 = v17;
    --*((_DWORD *)this + 3 * v34 + 1196);
  }
  if (v11)
  {
    if ((int)v13 > 15)
      v35 = -1;
    else
      v35 = v13;
    --*((_DWORD *)this + 3 * v35 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  JSC::AssemblerBuffer *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (uint64_t)a2;
  v12 = (uint64_t)a1;
  if ((_DWORD)a5 == 1)
  {
    if (a6 == 2)
      goto LABEL_61;
    v14 = 0;
    goto LABEL_6;
  }
  v65 = a5 | 0x100;
  v14 = 1;
  v63 = 1;
  if (a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v66[2 * v14++ - 2] = a6 | 0x200;
    v63 = v14;
  }
  v15 = (JSC::AssemblerBuffer *)(a1 + 56);
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = v14;
    do
    {
      if ((v66[v16 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v17 |= 1 << v66[v16 - 1];
      v16 += 2;
    }
    while (2 * v14 != v16);
    v19 = 0;
    do
    {
      v20 = v66[v19 - 2] & 0x7F;
      if (v20 >= 0x40)
        goto LABEL_64;
      v17 &= ~(1 << v20);
      v19 += 2;
    }
    while (2 * v14 != v19);
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.i32[0];
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.i32[0] + v22)
    {
      v24 = 0;
      if (v14 <= 1)
        v25 = 1;
      else
        v25 = v14;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v66[v24 - 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v17 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v24 += 2;
        if (v26 == v24)
          goto LABEL_58;
      }
      v28 = v66[v24 - 2];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          if (v27 == 31)
            goto LABEL_52;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_53:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v30 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v33;
        *(_DWORD *)(v12 + 200) += 4;
        v18 = v63;
      }
      a1 = (unsigned __int8 *)memmove(&v66[v24 - 2], &v66[v24], 2 * v18 - v24 - 2);
      v14 = v63 - 1;
      goto LABEL_57;
    }
    v62 = v15;
    v34 = HIBYTE(v65);
    v35 = v65;
    JSC::MacroAssemblerARM64::swap(v12, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
    memmove(&v65, v66, 2 * v63 - 2);
    v36 = v63 - 1;
    v32 = v63 == 1;
    v64 = v36;
    v37 = (unsigned __int8 *)&v65;
    a1 = &v66[2 * v36 - 2];
    if (v32)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = a1;
    }
    else
    {
      v38 = 2 * v36;
      v39 = &v65;
      while (*(unsigned __int8 *)v39 != v34)
      {
        ++v39;
        v38 -= 2;
        if (!v38)
          goto LABEL_36;
      }
      *(_BYTE *)v39 = v35;
LABEL_36:
      v40 = 0;
      v41 = (char *)&v65;
      a2 = a1;
      v42 = a1;
      do
      {
        if (*v37 == v37[1])
        {
          v43 = v37;
          if (v42 != &v66[2 * v64 - 2])
          {
            v61 = a1;
            if (v37 == a2)
            {
              v43 = v42;
            }
            else
            {
              v59 = v41 - (char *)a2;
              v60 = v42;
              memmove(v42, a2, v41 - (char *)a2);
              v43 = &v60[v59];
            }
            a1 = v61;
          }
          a2 = v37 + 2;
          ++v40;
          v42 = v43;
        }
        v37 += 2;
        v41 += 2;
      }
      while (v37 < a1);
      v44 = v64;
      v45 = v64;
      a1 = v42;
    }
    v46 = &v66[2 * v44 - 2];
    v15 = v62;
    if (a2 != v46)
    {
      a1 = (unsigned __int8 *)memmove(a1, a2, v46 - a2);
      v45 = v64;
    }
    v14 = v45 - v40;
LABEL_57:
    v63 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_61:
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v47, v48, v49, v50, v51, v52, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0, v53, v54, v55, v56, v57, v58);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileVarargsLength(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  JSC::DFG::Node *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::ARM64LogicalImmediate *v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t *result;
  int v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint8x8_t v85;
  __int32 v86;
  uint8x8_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  JSC::ARM64LogicalImmediate *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unsigned int v97;
  unsigned int v98;
  void *v99;
  BOOL v100;
  char v101;
  char v102;
  uint64_t v103;
  unsigned __int8 *v104;
  char *v105;
  uint64_t v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  _BYTE *v110;
  unsigned __int8 *v111;
  char *v112;
  unsigned __int8 *v113;
  int64_t v114;
  JSC::ARM64LogicalImmediate *v115;
  __int16 *v116;
  int v117;
  unint64_t v118;
  void *__dst;
  int v120;
  unsigned int v121;
  __int16 v122;

  v10 = *((_QWORD *)a2 + 9);
  ++*((_DWORD *)this + 1196);
  v11 = *((unsigned __int16 *)a2 + 9);
  if (v11 <= 0x62)
  {
    if (v11 - 96 >= 3)
      goto LABEL_69;
    v12 = (uint64_t *)((char *)a2 + 24);
  }
  else
  {
    if (v11 - 99 < 2)
    {
      v12 = (uint64_t *)((char *)a2 + 32);
      goto LABEL_6;
    }
    v100 = v11 - 245 > 7 || ((1 << (v11 + 11)) & 0xCF) == 0;
    if (v100 && v11 - 371 >= 2)
    {
LABEL_69:
      __break(0xC471u);
      goto LABEL_96;
    }
    v12 = (uint64_t *)((char *)a2 + 40);
  }
LABEL_6:
  v13 = *v12;
  v14 = *v12 & 0xFF00FFFFFFFFFFFFLL;
  if (!v14)
    goto LABEL_10;
  v15 = ~*(_DWORD *)((*v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(0xC471u);
LABEL_96:
    JUMPOUT(0x197BC7C70);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12)
    || (v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8), v17 == -1))
  {
LABEL_10:
    v17 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, a3, a4, a5, a6, a7, a8);
  --*((_DWORD *)this + 1196);
  v31 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v18, v19, v20, v21, v22, v23);
  v32 = (uint64_t)v24;
  v33 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v10 + 16);
  v34 = &v122;
  __dst = &v122;
  v120 = 1;
  if (v17 == 1)
    goto LABEL_12;
  v122 = v17 | 0x100;
  v121 = 1;
  v78 = 1;
  v118 = v14;
  do
  {
    v79 = 0;
    v80 = 0;
    v81 = (char *)__dst;
    v82 = v78;
    do
    {
      if ((*((_BYTE *)__dst + v79 + 1) & 0x40) != 0)
        goto LABEL_94;
      v80 |= 1 << *((_BYTE *)__dst + v79 + 1);
      v79 += 2;
    }
    while (2 * v78 != v79);
    v83 = 0;
    do
    {
      v84 = *((_BYTE *)__dst + v83) & 0x7F;
      if (v84 >= 0x40)
        goto LABEL_94;
      v80 &= ~(1 << v84);
      v83 += 2;
    }
    while (2 * v78 != v83);
    v85 = (uint8x8_t)vcnt_s8((int8x8_t)v80);
    v85.i16[0] = vaddlv_u8(v85);
    v86 = v85.i32[0];
    v87 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v80));
    v87.i16[0] = vaddlv_u8(v87);
    if (v87.i32[0] + v86)
    {
      v88 = 0;
      if (v78 <= 1uLL)
        v89 = 1;
      else
        v89 = v78;
      v90 = 2 * v89;
      while (1)
      {
        v91 = *((unsigned __int8 *)__dst + v88 + 1);
        if ((v91 & 0x7Fu) >= 0x40)
          goto LABEL_94;
        if (((v80 >> (v91 & 0x7F)) & 1) != 0)
          break;
        v88 += 2;
        if (v90 == v88)
          goto LABEL_57;
      }
      v92 = *((unsigned __int8 *)__dst + v88);
      if (v92 == v91)
        goto LABEL_55;
      v93 = v33;
      v94 = v31;
      v95 = v32;
      if ((char)v92 == 63)
      {
        if ((char)v91 != 31)
        {
          v97 = v91 & 0x1F | 0xD2800000;
          goto LABEL_52;
        }
      }
      else
      {
        v96 = v91 == 31 || (char)v92 == 31;
        if (!v96)
        {
          v97 = v91 & 0xFFE0FFFF | ((v92 & 0x1F) << 16) | 0xAA0003E0;
LABEL_52:
          v98 = *((_DWORD *)this + 50);
          if (v98 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
            v98 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v98) = v97;
          *((_DWORD *)this + 50) += 4;
          v82 = v121;
          v32 = v95;
          v31 = v94;
          v33 = v93;
          v14 = v118;
          v81 = (char *)__dst;
LABEL_55:
          memmove(&v81[v88], &v81[v88 + 2], 2 * v82 - v88 - 2);
          v78 = v121 - 1;
          goto LABEL_56;
        }
      }
      v97 = (char)v91 | (32 * (char)v92) | 0x91000000;
      goto LABEL_52;
    }
    v115 = v33;
    v116 = v34;
    v101 = *(_BYTE *)__dst;
    v102 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v102, v26, v27, v28, v29, v30);
    memmove(__dst, (char *)__dst + 2, 2 * v121 - 2);
    v103 = v121 - 1;
    v96 = v121 == 1;
    v121 = v103;
    v104 = (unsigned __int8 *)__dst;
    v105 = (char *)__dst + 2 * v103;
    if (v96)
    {
      v106 = 0;
      v107 = 0;
      v117 = 0;
      v24 = (char *)__dst + 2 * v103;
    }
    else
    {
      v109 = 2 * v103;
      v110 = __dst;
      while (*v110 != v102)
      {
        v110 += 2;
        v109 -= 2;
        if (!v109)
          goto LABEL_83;
      }
      *v110 = v101;
LABEL_83:
      v117 = 0;
      v111 = v104;
      v112 = v105;
      v24 = v105;
      do
      {
        if (*v104 == v104[1])
        {
          v113 = v104;
          if (v112 != (char *)__dst + 2 * v121)
          {
            if (v104 == (unsigned __int8 *)v24)
            {
              v113 = (unsigned __int8 *)v112;
            }
            else
            {
              v114 = v111 - (unsigned __int8 *)v24;
              memmove(v112, v24, v111 - (unsigned __int8 *)v24);
              v113 = (unsigned __int8 *)&v112[v114];
            }
          }
          v24 = (char *)(v104 + 2);
          ++v117;
          v112 = (char *)v113;
        }
        v104 += 2;
        v111 += 2;
      }
      while (v104 < (unsigned __int8 *)v105);
      v104 = (unsigned __int8 *)__dst;
      v106 = v121;
      v107 = v121;
      v105 = v112;
    }
    v108 = (char *)&v104[2 * v106];
    if (v24 != v108)
    {
      memmove(v105, v24, v108 - v24);
      v107 = v121;
    }
    v78 = v107 - v117;
    v14 = v118;
    v33 = v115;
    v34 = v116;
LABEL_56:
    v121 = v78;
LABEL_57:
    ;
  }
  while (v78);
  v99 = __dst;
  if (v34 != __dst && __dst)
  {
    __dst = 0;
    v120 = 0;
    WTF::fastFree((unint64_t)v99, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_12:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v33, 2, v26, v27, v28, v29, v30);
  if ((_DWORD)v31 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v32, 0, v35, v36, v37, v38, v39);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v31 << 35) + 0x380000001ALL, 0, v35, v36, v37, v38, v39);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationSizeOfVarargs, v40, v41, v42, v43, v44, v45, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v46, v47, v48, v49, v50, v51);
  ++*((_DWORD *)this + 1196);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&__dst, this, v52, v53, v54, v55, v56, v57);
  v65 = (char)v120;
  --*((_DWORD *)this + 1196);
  v66 = *((_DWORD *)this + 50);
  if (v66 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v58, v59, v60, v61, v62, v63, v64);
    v66 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v66) = v65 | 0x11000400;
  *((_DWORD *)this + 50) += 4;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v59, v60, v61, v62, v63, v64);
  v68 = *((_DWORD *)a2 + 12);
  v69 = ~v68;
  if (v69 >= *((unsigned int *)this + 1001))
    goto LABEL_95;
  v70 = (char *)this + 4776;
  v71 = *((_QWORD *)this + 499);
  if (v65 > 15)
    v72 = -1;
  else
    v72 = v65;
  v73 = &v70[12 * v72];
  *(_DWORD *)v73 = v68;
  *((_DWORD *)v73 + 1) = 5;
  v74 = v71 + 24 * (int)v69;
  v75 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v74 = a2;
  *(_DWORD *)(v74 + 8) = v75;
  *(_BYTE *)(v74 + 17) = v65;
  *(_DWORD *)(v74 + 12) = 1;
  *(_BYTE *)(v74 + 16) = 0;
  if (__dst)
  {
    v76 = (char)v120;
    if ((char)v120 != -1)
    {
      if ((char)v120 > 15)
        v76 = -1;
      --*((_DWORD *)__dst + 3 * v76 + 1196);
    }
  }
  if (v14)
  {
    if (v17 > 15)
      v77 = -1;
    else
      v77 = v17;
    --*(_DWORD *)&v70[12 * v77 + 8];
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileLoadVarargs(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v14;
  char v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::DFG::Node *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint8x8_t v62;
  __int32 v63;
  uint8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t result;
  char v109;
  char v110;
  char v111;
  char v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _BYTE *v117;
  unsigned __int8 *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned __int8 *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  JSC::ARM64LogicalImmediate *v131;
  JSC::ARM64LogicalImmediate *v132;
  JSC::ARM64LogicalImmediate *v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _BYTE __dst[12];
  unsigned int v139;
  _WORD v140[4];

  v9 = (uint64_t *)((char *)a2 + 24);
  v10 = *((_QWORD *)a2 + 3);
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC8530);
  }
  v14 = (unsigned int *)*((_QWORD *)a2 + 9);
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v16 = v15;
  }
  else
  {
    v16 = -1;
  }
  v17 = *((unsigned __int16 *)a2 + 9);
  if (v17 <= 0x62)
  {
    if (v17 - 96 >= 3)
      goto LABEL_83;
  }
  else
  {
    if (v17 - 99 < 2)
    {
      v9 = (uint64_t *)((char *)a2 + 32);
      goto LABEL_8;
    }
    if ((v17 - 245 > 7 || ((1 << (v17 + 11)) & 0xCF) == 0) && v17 - 371 >= 2)
    {
LABEL_83:
      __break(0xC471u);
      goto LABEL_99;
    }
    v9 = (uint64_t *)((char *)a2 + 40);
  }
LABEL_8:
  v18 = *v9;
  v19 = *v9 & 0xFF00FFFFFFFFFFFFLL;
  if (!v19)
  {
LABEL_64:
    v21 = -1;
    goto LABEL_12;
  }
  v20 = ~*(_DWORD *)((*v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
LABEL_99:
    JUMPOUT(0x197BC8458);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
    goto LABEL_64;
  v21 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *v9, a3, a4, a5, a6, a7, a8);
LABEL_12:
  if (v16 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v16 = v22;
  }
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v18, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v16, a5, a6, a7, a8, (uint64_t)&v136, a9);
  *(_DWORD *)__dst = v136;
  *(_QWORD *)&__dst[4] = v137;
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x13uLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)__dst);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v16, v14[6], v23, v24, v25, v26, (uint64_t)&v134);
  *(_DWORD *)__dst = v134;
  *(_QWORD *)&__dst[4] = v135;
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x13uLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)__dst);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v27, v28, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v16, ((unint64_t)v14[3] << 35) | 0x1D, v34, v35, v36, v37, v38);
  v45 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v39, v40, v41, v42, v43, v44);
  v53 = v45;
  v54 = (uint64_t)v46;
  v133 = (JSC::ARM64LogicalImmediate *)v14[2];
  v132 = (JSC::ARM64LogicalImmediate *)v14[4];
  v131 = (JSC::ARM64LogicalImmediate *)v14[5];
  *(_QWORD *)__dst = v140;
  *(_DWORD *)&__dst[8] = 2;
  if (v21 == 2)
  {
    if (v16 == 4)
      goto LABEL_53;
    v129 = v45;
    v130 = (uint64_t)v46;
    v55 = 0;
  }
  else
  {
    v129 = v45;
    v130 = (uint64_t)v46;
    v140[0] = v21 | 0x200;
    v55 = 1;
    v139 = 1;
    if (v16 == 4)
      goto LABEL_22;
  }
  v140[v55++] = v16 | 0x400;
  v139 = v55;
  do
  {
LABEL_22:
    v56 = 0;
    v57 = 0;
    v58 = *(_QWORD *)__dst;
    v59 = v55;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)__dst + v56 + 1) & 0x40) != 0)
        goto LABEL_98;
      v57 |= 1 << *(_BYTE *)(*(_QWORD *)__dst + v56 + 1);
      v56 += 2;
    }
    while (2 * v55 != v56);
    v60 = 0;
    do
    {
      v61 = *(_BYTE *)(*(_QWORD *)__dst + v60) & 0x7F;
      if (v61 >= 0x40)
        goto LABEL_98;
      v57 &= ~(1 << v61);
      v60 += 2;
    }
    while (2 * v55 != v60);
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
    v62.i16[0] = vaddlv_u8(v62);
    v63 = v62.i32[0];
    v64 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v57));
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.i32[0] + v63)
    {
      v65 = 0;
      if (v55 <= 1uLL)
        v66 = 1;
      else
        v66 = v55;
      v67 = 2 * v66;
      while (1)
      {
        v68 = *(unsigned __int8 *)(*(_QWORD *)__dst + v65 + 1);
        if ((v68 & 0x7Fu) >= 0x40)
          goto LABEL_98;
        if (((v57 >> (v68 & 0x7F)) & 1) != 0)
          break;
        v65 += 2;
        if (v67 == v65)
          goto LABEL_47;
      }
      v69 = *(unsigned __int8 *)(*(_QWORD *)__dst + v65);
      if (v69 == v68)
        goto LABEL_45;
      v70 = (char)v69;
      if ((char)v69 == 63)
      {
        v71 = *((_DWORD *)this + 50);
        v72 = *((_DWORD *)this + 48);
        if ((char)v68 != 31)
        {
          v74 = v68 & 0x1F | 0xD2800000;
          goto LABEL_42;
        }
      }
      else
      {
        v71 = *((_DWORD *)this + 50);
        v72 = *((_DWORD *)this + 48);
        v73 = v68 == 31 || v70 == 31;
        if (!v73)
        {
          v74 = v68 & 0xFFE0FFFF | ((v70 & 0x1F) << 16) | 0xAA0003E0;
LABEL_42:
          if (v71 + 4 > v72)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v46, v47, v48, v49, v50, v51, v52);
            v71 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v71) = v74;
          *((_DWORD *)this + 50) += 4;
          v58 = *(_QWORD *)__dst;
          v59 = v139;
LABEL_45:
          memmove((void *)(v58 + v65), (const void *)(v58 + v65 + 2), 2 * v59 - v65 - 2);
          v55 = v139 - 1;
          goto LABEL_46;
        }
      }
      v74 = (char)v68 | (32 * v70) | 0x91000000;
      goto LABEL_42;
    }
    v128 = v19;
    v111 = **(_BYTE **)__dst;
    v112 = *(_BYTE *)(*(_QWORD *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, (char)**(_BYTE **)__dst, v112, v48, v49, v50, v51, v52);
    memmove(*(void **)__dst, (const void *)(*(_QWORD *)__dst + 2), 2 * v139 - 2);
    v113 = v139 - 1;
    v73 = v139 == 1;
    v139 = v113;
    v114 = *(unsigned __int8 **)__dst;
    v115 = (unsigned __int8 *)(*(_QWORD *)__dst + 2 * v113);
    if (v73)
    {
      v121 = 0;
      v122 = 0;
      v46 = (unsigned __int8 *)(*(_QWORD *)__dst + 2 * v113);
    }
    else
    {
      v116 = 2 * v113;
      v117 = *(_BYTE **)__dst;
      while (*v117 != v112)
      {
        v117 += 2;
        v116 -= 2;
        if (!v116)
          goto LABEL_73;
      }
      *v117 = v111;
LABEL_73:
      LODWORD(v113) = 0;
      v118 = v114;
      v46 = v115;
      v119 = (char *)v115;
      do
      {
        if (*v114 == v114[1])
        {
          v120 = (char *)v114;
          if (v119 != (char *)(*(_QWORD *)__dst + 2 * v139))
          {
            v126 = v113;
            v127 = v115;
            if (v114 == v46)
            {
              v120 = v119;
            }
            else
            {
              v125 = v118 - v46;
              memmove(v119, v46, v118 - v46);
              v120 = &v119[v125];
            }
            v115 = v127;
            LODWORD(v113) = v126;
          }
          v46 = v114 + 2;
          LODWORD(v113) = v113 + 1;
          v119 = v120;
        }
        v114 += 2;
        v118 += 2;
      }
      while (v114 < v115);
      v114 = *(unsigned __int8 **)__dst;
      v121 = v139;
      v122 = v139;
      v115 = (unsigned __int8 *)v119;
    }
    v123 = &v114[2 * v121];
    if (v46 != v123)
    {
      v124 = v113;
      memmove(v115, v46, v123 - v46);
      LODWORD(v113) = v124;
      v122 = v139;
    }
    v55 = v122 - v113;
    v19 = v128;
LABEL_46:
    v139 = v55;
LABEL_47:
    ;
  }
  while (v55);
  v75 = *(_QWORD *)__dst;
  v53 = v129;
  v54 = v130;
  if (v140 != *(_WORD **)__dst && *(_QWORD *)__dst)
  {
    memset(__dst, 0, sizeof(__dst));
    WTF::fastFree(v75, v46, v47, v48, v49, v50, v51, v52);
  }
LABEL_53:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v131, 5, v48, v49, v50, v51, v52);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v132, 3, v76, v77, v78, v79, v80);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v133, 1, v81, v82, v83, v84, v85);
  if ((_DWORD)v53 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v54, 0, v86, v87, v88, v89, v90);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v53 << 35) + 0x380000001ALL, 0, v86, v87, v88, v89, v90);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationLoadVarargs, v91, v92, v93, v94, v95, v96, (int *)__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v97, v98, v99, v100, v101, v102);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v103, v104, v105, v106, v107);
  if (v19)
  {
    if (v21 > 15)
      v109 = -1;
    else
      v109 = v21;
    --*((_DWORD *)this + 3 * v109 + 1196);
  }
  if (v16 > 15)
    v110 = -1;
  else
    v110 = v16;
  --*((_DWORD *)this + 3 * v110 + 1196);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileForwardVarargs(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  JSC::AssemblerBuffer *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  JSC::ARM64LogicalImmediate *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int i;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int j;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x8_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t result;
  unsigned int v139;
  unsigned int v140;
  char v141;
  _QWORD *v142;
  JSC::AssemblerBuffer *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  char v155;
  unsigned int v156;
  uint64_t v157;

  v10 = (_DWORD *)*((_QWORD *)a2 + 9);
  v11 = *((unsigned __int16 *)a2 + 9);
  if (v11 <= 0x62)
  {
    if (v11 - 96 >= 3)
      goto LABEL_69;
    v12 = (char *)a2 + 24;
  }
  else
  {
    if (v11 - 99 < 2)
    {
      v12 = (char *)a2 + 32;
      goto LABEL_6;
    }
    v15 = v11 - 245 > 7 || ((1 << (v11 + 11)) & 0xCF) == 0;
    if (v15 && v11 - 371 >= 2)
    {
LABEL_69:
      __break(0xC471u);
      JUMPOUT(0x197BC8AC8);
    }
    v12 = (char *)a2 + 40;
  }
LABEL_6:
  if ((*(_QWORD *)v12 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
    v14 = *(_QWORD *)a2;
    goto LABEL_19;
  }
  if (*((unsigned __int16 *)a2 + 9) <= 0x62u)
  {
    if (v11 - 96 < 3)
    {
      v13 = (char *)a2 + 24;
      goto LABEL_18;
    }
LABEL_71:
    __break(0xC471u);
    JUMPOUT(0x197BC8AF4);
  }
  if (v11 - 99 >= 2)
  {
    if (v11 - 245 <= 7 && ((1 << (v11 + 11)) & 0xCF) != 0 || v11 - 371 < 2)
    {
      v13 = (char *)a2 + 40;
      goto LABEL_18;
    }
    goto LABEL_71;
  }
  v13 = (char *)a2 + 32;
LABEL_18:
  v14 = *(_QWORD *)(*(_QWORD *)v13 & 0xFF00FFFFFFFFFFFFLL);
LABEL_19:
  v16 = (_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 1) != 0)
    v16 = (_QWORD *)*v16;
  v17 = *((_QWORD *)a2 + 3);
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC8C40);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v20 = v19;
  }
  else
  {
    v20 = -1;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v154, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v152, this, v21, v22, v23, v24, v25, v26);
  if (v20 != -1)
    goto LABEL_85;
  JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v17, v27, v28, v29, v30, v31, v32);
  if (v33 != -1)
  {
    v20 = v33;
LABEL_85:
    v40 = v153;
    goto LABEL_32;
  }
  JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v17, v34, v35, v29, v30, v31, v32);
  v20 = v36;
  v40 = v153;
  if (v36 == 31)
  {
    v43 = (unsigned int *)((char *)this + 200);
    v42 = *((_DWORD *)this + 50);
    v44 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v45 = v42 + 4;
    v46 = *((_DWORD *)this + 48);
    v41 = -1;
  }
  else
  {
    if (v36 == 255)
      goto LABEL_32;
    v41 = v36 & 0x1F | 0xAA1F03E0;
    v43 = (unsigned int *)((char *)this + 200);
    v42 = *((_DWORD *)this + 50);
    v44 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v45 = v42 + 4;
    v46 = *((_DWORD *)this + 48);
  }
  if (v45 > v46)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v44, v37, v38, v39, v29, v30, v31, v32);
    v42 = *v43;
  }
  *(_DWORD *)(*(_QWORD *)v44 + v42) = v41;
  *v43 += 4;
LABEL_32:
  v47 = v10[4];
  if ((_DWORD)v47)
    JSC::MacroAssemblerARM64::sub32((uint64_t)this, v20, v47, v20, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v20, v10[6], v29, v30, v31, v32, (uint64_t)&v150);
  v156 = v150;
  v157 = v151;
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x13uLL, (JSC::DFG::Node *)0xFF80000000, 0, (int *)&v156);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v20, ((unint64_t)v10[3] << 35) | 0x1D, v48, v49, v50, v51, v52);
  if (v16)
  {
    v142 = (_QWORD *)*v16;
    if (*v16 && *(_DWORD *)v142 >= 2u)
    {
      if (*((_BYTE *)v142 + 13) != 8)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC8C10);
      }
      v60 = *(_DWORD *)((char *)v142 + 14);
    }
    else
    {
      v60 = -1;
    }
  }
  else
  {
    v60 = 6;
  }
  v145 = v60;
  v144 = v10[4];
  v61 = v10[2];
  v62 = v20 | (32 * v20) | 0x51000400;
  v143 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v63 = *((_DWORD *)this + 50);
  if (v63 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v143, v53, v54, v55, v56, v57, v58, v59);
    v63 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v63) = v62;
  *((_DWORD *)this + 50) += 4;
  v64 = (JSC::ARM64LogicalImmediate *)v10[5];
  v65 = (char)v40;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v64, v65, v55, v56, v57, v58, v59);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 9, v65, v20, v66, v67, v68, v69, (uint64_t)&v156);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v143, v70, v71, v72, v73, v74, v75, v76);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v78 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v143, v70, v71, v72, v73, v74, v75, v76);
    v78 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v78) = v65 | (32 * v65) | 0x51000400;
  *((_DWORD *)this + 50) += 4;
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC8B94);
  }
  v79 = (8 * v61) | 0x200000000;
  JSC::MacroAssemblerARM64::moveToCachedReg(this, 10, (uint64_t)this + 264, v72, v73, v74, v75, v76);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, ((unint64_t)v40 << 8) | 0x30000001DLL, v79, v80, v81, v82, v83);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, (char)v40, v20, v84, v85, v86, v87, (uint64_t)&v148);
  v147 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v148, (unsigned int *)&v147, (uint64_t)this, v88, v89, v90, v91, v92);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v156, (uint64_t)this, v93, v94, v95, v96, v97, v98);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v20, v99, v100, v101, v102, (uint64_t)&v148, v103);
  v156 = v148;
  v157 = v149;
  for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v143, v104, v105, v106, v107, v108, v109, v110);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v112 = j;
  if ((j + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v143, v104, v105, v106, v107, v108, v109, v110);
    v112 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v112) = v62;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v20 << 8) | 0x30000001DLL, (8 * (v144 + v145)) | 0x200000000, v65, v107, v108, v109, v110);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v65, ((unint64_t)v20 << 8) | 0x30000001DLL, v79, v113, v114, v115, v116);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v20, v117, v118, v119, v120, (uint64_t)&v148, v121);
  v146 = j;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(&v148, (unsigned int *)&v146, (uint64_t)this, v122, v123, v124, v125, v126);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v156, (uint64_t)this, v127, v128, v129, v130, v131, v132);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v133, v134, v135, v136, v137);
  if (v152)
  {
    v139 = (char)v153;
    if ((char)v153 != -1)
    {
      if ((char)v153 > 15)
        v139 = -1;
      --*(_DWORD *)(v152 + 12 * v139 + 4784);
    }
  }
  if (v154)
  {
    v140 = v155;
    if (v155 != -1)
    {
      if (v155 > 15)
        v140 = -1;
      --*(_DWORD *)(v154 + 12 * v140 + 4784);
    }
  }
  if (v20 > 15)
    v141 = -1;
  else
    v141 = v20;
  --*((_DWORD *)this + 3 * v141 + 1196);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileCreateActivation(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  _BYTE *v108;
  WTF *v109;
  WTF *v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  _BYTE *v114;
  WTF *v115;
  WTF *v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  _BYTE *v120;
  WTF *v121;
  WTF *v122;
  unsigned int v123;
  JSC::DFG::Node *v124;
  int v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  unsigned int v129;
  int v130;
  _WORD *v131;
  _BYTE *v132;
  _BYTE *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  WTF *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  WTF *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  char *v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  WTF *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unint64_t v228;
  uint64_t v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint8x8_t v238;
  __int32 v239;
  uint8x8_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  BOOL v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  BOOL v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  char v265;
  int v266;
  uint64_t v267;
  unsigned __int8 *v268;
  char *v269;
  uint64_t v270;
  int v271;
  int v272;
  unsigned __int8 *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  unsigned __int8 *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  __int128 v288;
  WTF *v289;
  unsigned int v290;
  unsigned int v291;
  _BYTE v292[24];
  uint64_t v293;
  __int128 v294;
  WTF *v295;
  uint64_t v296;
  _BYTE v297[24];
  uint64_t v298;
  char v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  unsigned __int8 v303;
  unsigned int v304;
  uint64_t v305;
  WTF *v306;
  unsigned int v307;
  unsigned int v308;
  _BYTE v309[24];
  _BYTE *v310;
  unsigned int v311;
  unsigned int v312;
  _BYTE v313[24];
  _BYTE *v314;
  unsigned int v315;
  unsigned int v316;
  _BYTE v317[24];
  __int128 v318;
  _WORD v319[16];

  v10 = **((_QWORD **)a2 + 9);
  v11 = *((_QWORD *)this + 495);
  v12 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v13 = *(_QWORD *)(v11 + 32);
LABEL_3:
    v14 = (_QWORD *)(v12 & 0xFFFFFFFF8);
    v15 = 1;
    v16 = 1;
    goto LABEL_4;
  }
  v255 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v256 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v256 != 0x3FFFFFFF) ? (v257 = v256 == -1) : (v257 = 1), v257))
  {
    v258 = 2;
  }
  else if (v256 >> 28)
  {
    v274 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v274 = v255;
    *(_DWORD *)(v274 + 8) = v256;
    v258 = 1;
    v255 = v274;
  }
  else
  {
    v258 = v255;
    v255 = 0;
  }
  v12 = v255 | v258;
  v13 = *(_QWORD *)(v11 + 32);
  if ((v12 & 1) == 0)
    goto LABEL_3;
  v259 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
  if ((v12 & 2) != 0
    || ((v260 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8), v260 != 0x3FFFFFFF) ? (v261 = v260 == -1) : (v261 = 1), v261))
  {
    v262 = 2;
  }
  else if (v260 >> 28)
  {
    v275 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v275 = v259;
    *(_DWORD *)(v275 + 8) = v260;
    v262 = 1;
    v259 = v275;
  }
  else
  {
    v262 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    v259 = 0;
  }
  v263 = v259 | v262;
  v14 = (_QWORD *)(v263 & 0xFFFFFFFF8);
  if ((v263 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    v17 = (_QWORD *)*v14;
    goto LABEL_5;
  }
  v16 = 0;
  v15 = 1;
LABEL_4:
  v17 = v14;
LABEL_5:
  if (v17)
    v13 = v17[1];
  v18 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) == 0 && v14)
    WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_DWORD *)(v18 + 832);
  if (v19)
    v20 = 16 * (v19 & 0xFFFFFFFE);
  else
    v20 = 0;
  v28 = JSC::DFG::Graph::registerStructure(v11, v20, (int *)&v318, a4, a5, a6, a7, a8);
  if ((v16 & 1) == 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  v29 = *((_QWORD *)a2 + 3);
  v30 = v29 & 0xFF00FFFFFFFFFFFFLL;
  if ((v29 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_16;
  v31 = ~*(_DWORD *)((v29 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v31 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v31 + 12)
    || (v32 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), v22, v23, v24, v25, v26, v27), (_DWORD)v32 == -1))
  {
LABEL_16:
    v32 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v29, v22, v23, v24, v25, v26, v27);
  }
  v33 = (uint64_t *)*((_QWORD *)a2 + 10);
  v34 = *(_QWORD *)(v10 + 40);
  if ((v34 & 1) != 0)
    v35 = (v34 >> 1) & 3;
  else
    v35 = *(unsigned __int8 *)(v34 + 4);
  v36 = *v33;
  v286 = v30;
  v287 = v28;
  v285 = *v33;
  if (v35 == 2)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v302, this, v22, v23, v24, v25, v26, v27);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v300, this, v37, v38, v39, v40, v41, v42);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v298, this, v43, v44, v45, v46, v47, v48);
    v51 = v303;
    v52 = (char)v303;
    v295 = (WTF *)v297;
    v296 = 2;
    if ((*(_DWORD *)(v10 + 16) + 1) > 0x3E8)
      v53 = 0;
    else
      v53 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16)
                      + (((8 * (unint64_t)(*(_DWORD *)(v10 + 16) + 1) + 47) >> 1) & 0x7FFFFFFF8)
                      + 19168);
    *(_QWORD *)&v318 = 0;
    *((_QWORD *)&v318 + 1) = v53;
    JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v303, (uint64_t)&v318, v301, v299, (uint64_t)&v295, 1, v49, v50);
    v59 = (v28 >> 4) | ((unint64_t)*(unsigned int *)(v28 + 8) << 32);
    if (v59)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9990);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, v59, (uint64_t)this + 264, v54, v55, v56, v57, v58);
      v60 = 16;
    }
    else
    {
      v60 = 63;
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v60, v51, v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v51 | 0x800000000, v61, v62, v63, v64, v65);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v32, v51 | 0x1000000000, v66, v67, v68, v69, v70);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v294, this, **((_QWORD **)a2 + 9), v71, v72, v73, v74, v75);
    v318 = v294;
    JSC::DFG::JITCompiler::LinkableConstant::store((int *)&v318, (uint64_t)this, v51 | 0x1800000000, v76, v77, v78, v79, v80);
    if (*(_DWORD *)(v10 + 16) != -1)
    {
      v86 = 0;
      if (v36)
      {
        v87 = v51 | 0x2000000000;
        do
        {
          if (!*((_BYTE *)this + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197BC98D4);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg(this, v36, (uint64_t)this + 264, v81, v82, v83, v84, v85);
          JSC::MacroAssemblerARM64::store64((uint64_t)this, 16, v87, v88, v89, v90, v91, v92);
          ++v86;
          v87 += 0x800000000;
        }
        while (v86 < (*(_DWORD *)(v10 + 16) + 1));
      }
      else
      {
        v177 = v51 | 0x2000000000;
        do
        {
          JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v177, v81, v82, v83, v84, v85);
          ++v86;
          v177 += 0x800000000;
        }
        while (v86 < (*(_DWORD *)(v10 + 16) + 1));
      }
    }
    JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v81, v82, v83, v84, v85, (uint64_t)&v318);
    v100 = *((_DWORD *)this + 50);
    if (v100 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v93, v94, v95, v96, v97, v98, v99);
      v100 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v100) = -721208641;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v318, (uint64_t)this, v94, v95, v96, v97, v98, v99);
    v106 = HIDWORD(v296);
    v289 = (WTF *)v292;
    v290 = 2;
    v291 = HIDWORD(v296);
    if (HIDWORD(v296) < 3)
    {
      v108 = v292;
    }
    else
    {
      if (HIDWORD(v296) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9BA8);
      }
      v107 = 12 * HIDWORD(v296);
      v108 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v296)));
      v290 = (v107 & 0xFFFFFFFC) / 0xC;
      v289 = (WTF *)v108;
      v106 = HIDWORD(v296);
    }
    if (v106)
    {
      v109 = v295;
      v110 = (WTF *)((char *)v295 + 12 * v106);
      do
      {
        *(_DWORD *)v108 = *(_DWORD *)v109;
        *(_QWORD *)(v108 + 4) = *(_QWORD *)((char *)v109 + 4);
        v109 = (WTF *)((char *)v109 + 12);
        v108 += 12;
      }
      while (v109 != v110);
    }
    v111 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v288, this, v10, v101, v102, v103, v104, v105);
    v282 = v288;
    v112 = v291;
    v306 = (WTF *)v309;
    v307 = 2;
    v308 = v291;
    if (v291 < 3)
    {
      v114 = v309;
    }
    else
    {
      if (v291 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9BB0);
      }
      v113 = 12 * v291;
      v114 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v291));
      v307 = (v113 & 0xFFFFFFFC) / 0xC;
      v306 = (WTF *)v114;
      v112 = v291;
    }
    if (v112)
    {
      v115 = v289;
      v116 = (WTF *)((char *)v289 + 12 * v112);
      do
      {
        *(_DWORD *)v114 = *(_DWORD *)v115;
        *(_QWORD *)(v114 + 4) = *(_QWORD *)((char *)v115 + 4);
        v115 = (WTF *)((char *)v115 + 12);
        v114 += 12;
      }
      while (v115 != v116);
    }
    v117 = WTF::fastMalloc((WTF *)0xD0);
    v118 = v308;
    v310 = v313;
    v311 = 2;
    v312 = v308;
    if (v308 < 3)
    {
      v120 = v313;
    }
    else
    {
      if (v308 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9BB8);
      }
      v119 = 12 * v308;
      v120 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v308));
      v311 = (v119 & 0xFFFFFFFC) / 0xC;
      v310 = v120;
      v118 = v308;
    }
    if (v118)
    {
      v121 = v306;
      v122 = (WTF *)((char *)v306 + 12 * v118);
      do
      {
        *(_DWORD *)v120 = *(_DWORD *)v121;
        *(_QWORD *)(v120 + 4) = *(_QWORD *)((char *)v121 + 4);
        v121 = (WTF *)((char *)v121 + 12);
        v120 += 12;
      }
      while (v121 != v122);
    }
    v123 = v312;
    v314 = v317;
    v315 = 2;
    v316 = v312;
    if (v312 < 3)
    {
      v124 = a2;
      v126 = v317;
    }
    else
    {
      if (v312 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9BC0);
      }
      v124 = a2;
      v125 = 12 * v312;
      v126 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v312));
      v315 = (v125 & 0xFFFFFFFC) / 0xC;
      v314 = v126;
      v123 = v312;
    }
    if (v123)
    {
      v127 = v310;
      v128 = &v310[12 * v123];
      do
      {
        *(_DWORD *)v126 = *(_DWORD *)v127;
        *(_QWORD *)(v126 + 4) = *(_QWORD *)(v127 + 4);
        v127 += 12;
        v126 += 12;
      }
      while (v127 != v128);
    }
    v129 = v316;
    *(_QWORD *)&v318 = v319;
    DWORD2(v318) = 2;
    HIDWORD(v318) = v316;
    if (v316 < 3)
    {
      v131 = v319;
    }
    else
    {
      if (v316 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BC9BC8);
      }
      v130 = 12 * v316;
      v131 = (_WORD *)WTF::fastMalloc((WTF *)(12 * v316));
      DWORD2(v318) = (v130 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)&v318 = v131;
      v129 = v316;
    }
    if (v129)
    {
      v132 = v314;
      v133 = &v314[12 * v129];
      do
      {
        *(_DWORD *)v131 = *(_DWORD *)v132;
        *(_QWORD *)(v131 + 2) = *(_QWORD *)(v132 + 4);
        v132 += 12;
        v131 += 6;
      }
      while (v132 != v133);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v117, (uint64_t *)&v318, this);
    v141 = v318;
    if (v319 != (_WORD *)v318 && (_QWORD)v318 != 0)
    {
      *(_QWORD *)&v318 = 0;
      DWORD2(v318) = 0;
      WTF::fastFree(v141, v134, v135, v136, v137, v138, v139, v140);
    }
    *(_QWORD *)v117 = off_1E3573830;
    *(_QWORD *)(v117 + 92) = 0xFFFFFFFFLL;
    *(_WORD *)(v117 + 100) = 0;
    *(_BYTE *)(v117 + 102) = v52;
    *(_QWORD *)(v117 + 104) = v117 + 120;
    *(_QWORD *)(v117 + 112) = 2;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v117 + 104, v52, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v139, v140);
    v150 = (unint64_t)v314;
    if (v317 != v314 && v314)
    {
      v314 = 0;
      v315 = 0;
      WTF::fastFree(v150, v143, v144, v145, v146, v147, v148, v149);
    }
    *(_QWORD *)v117 = &off_1E3573800;
    *(_QWORD *)(v117 + 152) = operationCreateActivationDirect;
    *(_QWORD *)(v117 + 160) = v111;
    *(_QWORD *)(v117 + 168) = v287;
    *(_BYTE *)(v117 + 176) = v32;
    *(_OWORD *)(v117 + 184) = v282;
    *(_QWORD *)(v117 + 200) = v285;
    v293 = v117;
    v151 = (unint64_t)v310;
    if (v313 != v310 && v310)
    {
      v310 = 0;
      v311 = 0;
      WTF::fastFree(v151, v143, v144, v145, v146, v147, v148, v149);
    }
    v152 = v306;
    if (v309 != (_BYTE *)v306 && v306)
    {
      v306 = 0;
      v307 = 0;
      WTF::fastFree((unint64_t)v152, v143, v144, v145, v146, v147, v148, v149);
    }
    v153 = (_QWORD *)((char *)this + 5656);
    v154 = *((unsigned int *)this + 1417);
    if ((_DWORD)v154 == *((_DWORD *)this + 1416))
    {
      v156 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v153, v154 + 1, (unint64_t)&v293);
      v154 = *((unsigned int *)this + 1417);
      v155 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v154);
      v117 = *v156;
    }
    else
    {
      v155 = (uint64_t *)(*v153 + 8 * v154);
      v156 = &v293;
    }
    *v156 = 0;
    *v155 = v117;
    *((_DWORD *)this + 1417) = v154 + 1;
    v157 = v293;
    v293 = 0;
    if (v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
    v158 = v289;
    if (v292 != (_BYTE *)v289 && v289)
    {
      v289 = 0;
      v290 = 0;
      WTF::fastFree((unint64_t)v158, v143, v144, v145, v146, v147, v148, v149);
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v124, v144, v145, v146, v147, v148, v149);
    if ((int)v52 > 15)
      v166 = -1;
    else
      v166 = v52;
    v167 = (char *)this + 12 * v166;
    v168 = *((_DWORD *)v124 + 12);
    *((_DWORD *)v167 + 1194) = v168;
    *((_DWORD *)v167 + 1195) = 4;
    v169 = ~v168;
    if (v169 < *((unsigned int *)this + 1001))
    {
      v170 = *((_QWORD *)this + 499) + 24 * (int)v169;
      v171 = *((_DWORD *)v124 + 13);
      *(_QWORD *)v170 = v124;
      *(_DWORD *)(v170 + 8) = v171;
      *(_BYTE *)(v170 + 17) = v52;
      *(_DWORD *)(v170 + 12) = 6;
      *(_BYTE *)(v170 + 16) = 0;
      v172 = v295;
      if (v297 != (_BYTE *)v295 && v295)
      {
        v295 = 0;
        LODWORD(v296) = 0;
        WTF::fastFree((unint64_t)v172, v159, v160, v161, v162, v163, v164, v165);
      }
      if (v298)
      {
        v173 = v299;
        if (v299 != -1)
        {
          if (v299 > 15)
            v173 = -1;
          --*(_DWORD *)(v298 + 12 * v173 + 4784);
        }
      }
      if (v300)
      {
        v174 = v301;
        if (v301 != -1)
        {
          if (v301 > 15)
            v174 = -1;
          --*(_DWORD *)(v300 + 12 * v174 + 4784);
        }
      }
      if (v302)
      {
        v175 = (char)v303;
        if ((char)v303 != -1)
        {
          if ((char)v303 > 15)
            v175 = -1;
          --*(_DWORD *)(v302 + 12 * v175 + 4784);
        }
      }
      goto LABEL_109;
    }
LABEL_216:
    __break(0xC471u);
    JUMPOUT(0x197BC9BA0);
  }
  ++*((_DWORD *)this + 1196);
  v178 = *((unsigned int *)this + 1194);
  if ((_DWORD)v178 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v178, v22, v23, v24, v25, v26, v27);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v178, v22, v23, v24, v25, v26, v27);
  v179 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v304, this, v10, v180, v181, v182, v183, v184);
  v192 = v304;
  v193 = v305;
  *(_QWORD *)&v318 = v319;
  DWORD2(v318) = 1;
  if ((_DWORD)v32 != 2)
  {
    v319[0] = v32 | 0x200;
    HIDWORD(v318) = 1;
    v231 = 1;
    while (1)
    {
      v232 = 0;
      v233 = 0;
      v234 = v318;
      v235 = v231;
      do
      {
        if ((*(_BYTE *)(v318 + v232 + 1) & 0x40) != 0)
          goto LABEL_215;
        v233 |= 1 << *(_BYTE *)(v318 + v232 + 1);
        v232 += 2;
      }
      while (2 * v231 != v232);
      v236 = 0;
      do
      {
        v237 = *(_BYTE *)(v318 + v236) & 0x7F;
        if (v237 >= 0x40)
          goto LABEL_215;
        v233 &= ~(1 << v237);
        v236 += 2;
      }
      while (2 * v231 != v236);
      v238 = (uint8x8_t)vcnt_s8((int8x8_t)v233);
      v238.i16[0] = vaddlv_u8(v238);
      v239 = v238.i32[0];
      v240 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v233));
      v240.i16[0] = vaddlv_u8(v240);
      if (v240.i32[0] + v239)
        break;
      v283 = v193;
      v284 = v192;
      v264 = *(_BYTE *)v318;
      v265 = *(_BYTE *)(v318 + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v318, v265, v187, v188, v189, v190, v191);
      memmove((void *)v318, (const void *)(v318 + 2), 2 * HIDWORD(v318) - 2);
      v266 = HIDWORD(v318);
      v267 = (HIDWORD(v318) - 1);
      HIDWORD(v318) = v267;
      v268 = (unsigned __int8 *)v318;
      v269 = (char *)(v318 + 2 * v267);
      if (v266 == 1)
      {
        v270 = 0;
        v271 = 0;
        v272 = 0;
        v185 = (unsigned __int8 *)(v318 + 2 * v267);
      }
      else
      {
        v276 = 2 * v267;
        v277 = (_BYTE *)v318;
        while (*v277 != v265)
        {
          v277 += 2;
          v276 -= 2;
          if (!v276)
            goto LABEL_204;
        }
        *v277 = v264;
LABEL_204:
        v272 = 0;
        v278 = v268;
        v279 = v269;
        v185 = (unsigned __int8 *)v269;
        do
        {
          if (*v268 == v268[1])
          {
            v280 = (char *)v268;
            if (v279 != (char *)(v318 + 2 * HIDWORD(v318)))
            {
              if (v268 == v185)
              {
                v280 = v279;
              }
              else
              {
                v281 = v278 - v185;
                memmove(v279, v185, v278 - v185);
                v280 = &v279[v281];
              }
            }
            v185 = v268 + 2;
            ++v272;
            v279 = v280;
          }
          v268 += 2;
          v278 += 2;
        }
        while (v268 < (unsigned __int8 *)v269);
        v268 = (unsigned __int8 *)v318;
        v270 = HIDWORD(v318);
        v271 = HIDWORD(v318);
        v269 = v279;
      }
      v273 = &v268[2 * v270];
      if (v185 != v273)
      {
        memmove(v269, v185, v273 - v185);
        v271 = HIDWORD(v318);
      }
      v231 = v271 - v272;
      v36 = v285;
      v30 = v286;
      v193 = v283;
      v192 = v284;
LABEL_154:
      HIDWORD(v318) = v231;
      v28 = v287;
LABEL_155:
      if (!v231)
      {
        v254 = v318;
        if (v319 != (_WORD *)v318 && (_QWORD)v318)
        {
          *(_QWORD *)&v318 = 0;
          DWORD2(v318) = 0;
          WTF::fastFree(v254, v185, v186, v187, v188, v189, v190, v191);
        }
        goto LABEL_124;
      }
    }
    v241 = 0;
    if (v231 <= 1uLL)
      v242 = 1;
    else
      v242 = v231;
    v243 = 2 * v242;
    while (1)
    {
      v244 = *(unsigned __int8 *)(v318 + v241 + 1);
      if ((v244 & 0x7Fu) >= 0x40)
        goto LABEL_215;
      if (((v233 >> (v244 & 0x7F)) & 1) != 0)
        break;
      v241 += 2;
      if (v243 == v241)
      {
        v28 = v287;
        goto LABEL_155;
      }
    }
    v245 = *(unsigned __int8 *)(v318 + v241);
    if (v245 == v244)
    {
LABEL_153:
      memmove((void *)(v234 + v241), (const void *)(v234 + v241 + 2), 2 * v235 - v241 - 2);
      v231 = HIDWORD(v318) - 1;
      goto LABEL_154;
    }
    v246 = v192;
    v247 = v193;
    v248 = v179;
    v249 = v36;
    v250 = v30;
    if ((char)v245 == 63)
    {
      if ((char)v244 != 31)
      {
        v252 = v244 & 0x1F | 0xD2800000;
        goto LABEL_150;
      }
    }
    else if (v244 != 31 && (char)v245 != 31)
    {
      v252 = v244 & 0xFFE0FFFF | ((v245 & 0x1F) << 16) | 0xAA0003E0;
LABEL_150:
      v253 = *((_DWORD *)this + 50);
      if (v253 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v185, v186, v187, v188, v189, v190, v191);
        v253 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v253) = v252;
      *((_DWORD *)this + 50) += 4;
      v234 = v318;
      v235 = HIDWORD(v318);
      v30 = v250;
      v36 = v249;
      v179 = v248;
      v193 = v247;
      v192 = v246;
      goto LABEL_153;
    }
    v252 = (char)v244 | (32 * (char)v245) | 0x91000000;
    goto LABEL_150;
  }
LABEL_124:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v36, 4, v187, v188, v189, v190, v191);
  if (v192 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v193, 3, v194, v195, v196, v197, v198);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v192 << 35) + 0x380000001ALL, 3, v194, v195, v196, v197, v198);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v28, 1, v199, v200, v201, v202, v203);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v179, 0, v204, v205, v206, v207, v208);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationCreateActivationDirect, v209, v210, v211, v212, v213, v214, (int *)&v318);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v215, v216, v217, v218, v219, v220);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v221, v222, v223, v224, v225, v226);
  v227 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v227;
  *((_DWORD *)this + 1195) = 4;
  v228 = ~v227;
  if (v228 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BC9BD0);
  }
  v229 = *((_QWORD *)this + 499) + 24 * (int)v228;
  v230 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v229 = a2;
  *(_DWORD *)(v229 + 8) = v230;
  *(_BYTE *)(v229 + 12) = 6;
  *(_DWORD *)(v229 + 13) = 0;
  *(_BYTE *)(v229 + 17) = 0;
  --*((_DWORD *)this + 1196);
LABEL_109:
  if (v30)
  {
    if ((int)v32 > 15)
      v176 = -1;
    else
      v176 = v32;
    --*((_DWORD *)this + 3 * v176 + 1196);
  }
}

uint64_t JSC::DFG::Graph::globalObjectFor(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v8 = *(_QWORD *)(a1 + 32);
  v9 = (uint64_t *)(*a2 & 0xFFFFFFFF8);
  if ((*a2 & 1) == 0)
    goto LABEL_2;
  v14 = *v9;
  if ((*a2 & 2) != 0
    || ((v15 = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8), v15 != 0x3FFFFFFF) ? (v16 = v15 == -1) : (v16 = 1), v16))
  {
    v17 = 2;
  }
  else if (v15 >> 28)
  {
    v19 = *v9;
    v20 = *(_DWORD *)((*a2 & 0xFFFFFFFF8) + 8);
    v21 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v21 = v19;
    *(_DWORD *)(v21 + 8) = v20;
    v17 = 1;
    v14 = v21;
  }
  else
  {
    v17 = *v9;
    v14 = 0;
  }
  v18 = v14 | v17;
  v9 = (uint64_t *)(v18 & 0xFFFFFFFF8);
  if ((v18 & 1) != 0)
  {
    v10 = 0;
    v11 = (uint64_t *)*v9;
  }
  else
  {
LABEL_2:
    v10 = 1;
    v11 = v9;
  }
  if (v11)
    v8 = v11[1];
  v12 = *(_QWORD *)(v8 + 8);
  if ((v10 & 1) == 0 && v9)
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  return v12;
}

void JSC::AssemblyHelpers::storeTrustedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a1;
  if (!a2)
  {
    v10 = 63;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a2, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v9;
    v10 = 16;
LABEL_5:
    JSC::MacroAssemblerARM64::store64(a1, v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::compileCreateDirectArguments(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int8x8_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  _BYTE *v109;
  WTF *v110;
  WTF *v111;
  unsigned int v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  JSC::DFG::Node *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int i;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int8x8_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  char *v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  int v199;
  WTF *v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  BOOL v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  _QWORD *v262;
  char v263;
  JSC::DFG::Node *v264;
  char v265;
  int v266;
  unsigned int v267;
  int v268;
  uint64_t v269[2];
  uint64_t v270;
  WTF *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  _BYTE v277[24];
  uint64_t v278;
  char v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  unsigned __int8 v283;
  _BYTE v284[12];
  unsigned int v285;
  _BYTE v286[24];
  _BYTE v287[12];
  unsigned int v288;
  _BYTE v289[32];

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v282, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v280, this, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v278, this, v16, v17, v18, v19, v20, v21);
  v29 = *((_QWORD *)this + 495);
  v30 = *(_QWORD *)(v29 + 40);
  v31 = *(_QWORD *)a2;
  v32 = *(_QWORD *)a2 & 1;
  v33 = (_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  v34 = v33;
  if ((*(_QWORD *)a2 & 1) != 0)
    v34 = (_QWORD *)*v33;
  if (v34)
    v30 = v34[1];
  if (v32)
    v33 = (_QWORD *)*v33;
  v35 = v283;
  v265 = v281;
  v36 = *(_DWORD *)(v30 + 28);
  v263 = v279;
  v262 = v33;
  if (v33 && (v230 = v33[3], (v230 >> 60) - 3 >= 3))
  {
    v261 = 0;
    v260 = (v230 & 0x3FFFFF) - 1;
    v266 = 1;
    v44 = 255;
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v287, this, v23, v24, v25, v26, v27, v28);
    v261 = *(_QWORD *)v287;
    v42 = v287[8];
    *(_QWORD *)v287 = 0;
    v287[8] = -1;
    v43 = *(_QWORD *)a2 & 0xFFFFFFFF8;
    if ((*(_QWORD *)a2 & 1) != 0)
      v43 = *(_QWORD *)v43;
    v44 = v42;
    if (v43)
      v45 = *(unsigned int *)(v43 + 36);
    else
      v45 = 4;
    JSC::MacroAssemblerARM64::load32((uint64_t)this, (v45 << 35) | 0x1D, (char)v42, v37, v38, v39, v40, v41);
    v46 = v42 | (32 * v42) | 0x51000400;
    v47 = *((_DWORD *)this + 50);
    if (v47 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v22, v23, v24, v25, v26, v27, v28);
      v47 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v47) = v46;
    *((_DWORD *)this + 50) += 4;
    if (*(_QWORD *)v287)
    {
      v48 = v287[8];
      if (v287[8] != -1)
      {
        if (v287[8] > 15)
          v48 = -1;
        --*(_DWORD *)(*(_QWORD *)v287 + 12 * v48 + 4784);
      }
    }
    v266 = 0;
    v29 = *((_QWORD *)this + 495);
    v31 = *(_QWORD *)a2;
    v32 = *(_QWORD *)a2 & 1;
    v260 = -1;
  }
  v267 = v44;
  if (!v32)
  {
    v49 = *(_QWORD *)(v29 + 32);
LABEL_22:
    v50 = 1;
    v51 = v31;
    goto LABEL_23;
  }
  v251 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 2) != 0 || (v252 = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8), v252 == 0x3FFFFFFF) || v252 == -1)
  {
    v253 = 2;
  }
  else if (v252 >> 28)
  {
    v258 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v258 = v251;
    *(_DWORD *)(v258 + 8) = v252;
    v253 = 1;
    v251 = v258;
  }
  else
  {
    v253 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
    v251 = 0;
  }
  v31 = v251 | v253;
  v49 = *(_QWORD *)(v29 + 32);
  if ((v31 & 1) == 0)
    goto LABEL_22;
  v254 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 2) != 0
    || ((v255 = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8), v255 != 0x3FFFFFFF) ? (v256 = v255 == -1) : (v256 = 1), v256))
  {
    v257 = 2;
  }
  else if (v255 >> 28)
  {
    v259 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v259 = v254;
    *(_DWORD *)(v259 + 8) = v255;
    v257 = 1;
    v254 = v259;
  }
  else
  {
    v257 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
    v254 = 0;
  }
  v50 = 0;
  v51 = v254 | v257;
LABEL_23:
  v52 = (uint64_t *)(v51 & 0xFFFFFFFF8);
  v53 = v51 & 0xFFFFFFFF8;
  if ((v51 & 1) != 0)
    v53 = *v52;
  if (v53)
    v49 = *(_QWORD *)(v53 + 8);
  v264 = a2;
  v54 = *(_QWORD *)(v49 + 8);
  if ((v51 & 1) != 0 && v52)
    WTF::fastFree((unint64_t)v52, v22, v23, v24, v25, v26, v27, v28);
  v55 = v265;
  v56 = (v36 - 1);
  v57 = *(_DWORD *)(v54 + 836);
  if (v57)
    v58 = 16 * (v57 & 0xFFFFFFFE);
  else
    v58 = 0;
  v66 = JSC::DFG::Graph::registerStructure(v29, v58, (int *)v287, v24, v25, v26, v27, v28);
  if ((v50 & 1) == 0 && (v31 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v31 & 0xFFFFFFFF8, v59, v60, v61, v62, v63, v64, v65);
  v275 = (WTF *)v277;
  v276 = 2;
  v68 = (char)v267;
  if (v266)
  {
    if (v260 <= v56)
      v231 = v56;
    else
      v231 = v260;
    v73 = (char)v35;
    JSC::DFG::SpeculativeJIT::emitAllocateJSObjectWithKnownSize<JSC::DirectArguments,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)this, v73, v66, v55, v263, (uint64_t)&v275, 8 * v231 + 48, v65, v67);
    JSC::MacroAssemblerARM64::store32((uint64_t)this, v260, v35 | 0x2000000000, v232, v233, v234, v235, v236);
  }
  else
  {
    *(_QWORD *)v287 = 0xFFFFFFFFLL;
    *(_DWORD *)&v287[8] = -16773311;
    if ((_DWORD)v56)
    {
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, (char)v267, v56, v62, v63, v64, v65, (uint64_t)v284);
      *(_DWORD *)v287 = *(_DWORD *)v284;
      *(_QWORD *)&v287[4] = *(_QWORD *)&v284[4];
    }
    v69 = *((_DWORD *)this + 50);
    if (v69 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v59, v60, v61, v62, v63, v64, v65);
      v69 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v69) = v265 & 0x1F | (32 * (v267 & 0x1F)) | 0x531D7000;
    v70 = *((_DWORD *)this + 50);
    v71 = v70 + 4;
    *((_DWORD *)this + 50) = v70 + 4;
    if ((v70 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v59, v60, v61, v62, v63, v64, v65);
      v71 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v71) = v55 | (32 * v55) | 0x1100C000;
    v72 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v72;
    if ((_DWORD)v56)
    {
      for (; v72 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v72)
      {
        if ((v72 + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v59, v60, v61, v62, v63, v64, v65);
          v72 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v72) = -721215457;
        v72 = *((_DWORD *)this + 50) + 4;
      }
      v205 = v72;
      if ((v72 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v59, v60, v61, v62, v63, v64, v65);
        v205 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v205) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v206 = 69;
      else
        v206 = 65;
      *(_DWORD *)v284 = v72;
      *(_DWORD *)&v284[4] = 0;
      v284[8] = v206;
      *(_WORD *)&v284[9] = 15;
      v284[11] = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v287, (uint64_t)this, v60, v61, v62, v63, v64, v65);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)(8 * v56 + 48), v55, v207, v208, v209, v210, v211);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v284, (uint64_t)this, v212, v213, v214, v215, v216, v217);
    }
    v73 = (char)v35;
    JSC::AssemblyHelpers::emitAllocateVariableSized(this, v73, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 19080, v55, v55, v263, (uint64_t)&v275, 1);
    v79 = (v66 >> 4) | ((unint64_t)*(unsigned int *)(v66 + 8) << 32);
    if (v79)
    {
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BCAA94);
      }
      JSC::MacroAssemblerARM64::moveToCachedReg(this, v79, (uint64_t)this + 264, v74, v75, v76, v77, v78);
      v80 = 16;
    }
    else
    {
      v80 = 63;
    }
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v80, v35, v74, v75, v76, v77, v78);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v35 | 0x800000000, v81, v82, v83, v84, v85);
    JSC::MacroAssemblerARM64::store32((uint64_t)this, v68, v35 | 0x2000000000, v86, v87, v88, v89, v90);
  }
  if ((_DWORD)v56)
  {
    if (!*((_BYTE *)this + 212))
      goto LABEL_196;
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v56, (uint64_t)this + 264, v91, v92, v93, v94, v95);
    v96 = 16;
  }
  else
  {
    v96 = 63;
  }
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v96, v35 | 0x2400000000, v91, v92, v93, v94, v95);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v35 | 0x2800000000, v97, v98, v99, v100, v101);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v35 | 0x1000000000, v102, v103, v104, v105, v106);
  if (!v266)
  {
    v73 = WTF::fastMalloc((WTF *)0xA0);
    v107 = HIDWORD(v276);
    *(_QWORD *)v284 = v286;
    *(_DWORD *)&v284[8] = 2;
    v285 = HIDWORD(v276);
    if (HIDWORD(v276) < 3)
    {
      v109 = v286;
    }
    else
    {
      if (HIDWORD(v276) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197BCAB90);
      }
      v108 = 12 * HIDWORD(v276);
      v109 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v276)));
      *(_DWORD *)&v284[8] = (v108 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v284 = v109;
      v107 = HIDWORD(v276);
    }
    if (v107)
    {
      v110 = v275;
      v111 = (WTF *)((char *)v275 + 12 * v107);
      do
      {
        *(_DWORD *)v109 = *(_DWORD *)v110;
        *(_QWORD *)(v109 + 4) = *(_QWORD *)((char *)v110 + 4);
        v110 = (WTF *)((char *)v110 + 12);
        v109 += 12;
      }
      while (v110 != v111);
    }
    v112 = v285;
    *(_QWORD *)v287 = v289;
    *(_DWORD *)&v287[8] = 2;
    v288 = v285;
    if (v285 < 3)
    {
      v114 = v289;
      goto LABEL_57;
    }
    if (v285 < 0x15555556)
    {
      v113 = 12 * v285;
      v114 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v285));
      *(_DWORD *)&v287[8] = (v113 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)v287 = v114;
      v112 = v285;
LABEL_57:
      if (v112)
      {
        v115 = *(_QWORD *)v284;
        v116 = *(_QWORD *)v284 + 12 * v112;
        do
        {
          *(_DWORD *)v114 = *(_DWORD *)v115;
          *(_QWORD *)(v114 + 4) = *(_QWORD *)(v115 + 4);
          v115 += 12;
          v114 += 12;
        }
        while (v115 != v116);
      }
      JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v73, (uint64_t *)v287, this);
      v124 = *(_QWORD *)v287;
      if (v289 != *(_BYTE **)v287 && *(_QWORD *)v287 != 0)
      {
        memset(v287, 0, sizeof(v287));
        WTF::fastFree(v124, v117, v118, v119, v120, v121, v122, v123);
      }
      *(_QWORD *)v73 = off_1E3572B20;
      *(_BYTE *)(v73 + 92) = v35;
      *(_QWORD *)(v73 + 96) = v66;
      *(_BYTE *)(v73 + 104) = v267;
      *(_DWORD *)(v73 + 108) = v56;
      *(_QWORD *)(v73 + 112) = v73 + 128;
      *(_QWORD *)(v73 + 120) = 2;
      JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v73 + 112, (char)v35, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v122, v123);
      v133 = *(_QWORD *)v284;
      if (v286 != *(_BYTE **)v284 && *(_QWORD *)v284)
      {
        memset(v284, 0, sizeof(v284));
        WTF::fastFree(v133, v126, v127, v128, v129, v130, v131, v132);
      }
      v270 = v73;
      v134 = (_QWORD *)((char *)this + 5656);
      v135 = *((unsigned int *)this + 1417);
      v136 = v264;
      if ((_DWORD)v135 == *((_DWORD *)this + 1416))
      {
        v138 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v134, v135 + 1, (unint64_t)&v270);
        v135 = *((unsigned int *)this + 1417);
        v137 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v135);
        v73 = *v138;
      }
      else
      {
        v137 = (uint64_t *)(*v134 + 8 * v135);
        v138 = &v270;
      }
      *v138 = 0;
      *v137 = v73;
      *((_DWORD *)this + 1417) = v135 + 1;
      v139 = v270;
      v270 = 0;
      LODWORD(v73) = (char)v35;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      goto LABEL_72;
    }
LABEL_196:
    __break(0xC471u);
    JUMPOUT(0x197BCAA74);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v271, (uint64_t *)&v275);
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,unsigned int,unsigned int>(&v274, (uint64_t *)&v271, this, v73, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v66, v260, v56);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v274);
  v237 = v274;
  v274 = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = v271;
  v136 = v264;
  if (&v273 != (uint64_t *)v271 && v271)
  {
    v271 = 0;
    v272 = 0;
    WTF::fastFree((unint64_t)v238, v126, v127, v128, v129, v130, v131, v132);
  }
LABEL_72:
  if (v262)
  {
    v239 = *(_QWORD *)((char *)v262 + 41);
    if ((v262[4] & 1) != 0)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v239 << 35) | 0x1D, v55, v128, v129, v130, v131, v132);
    }
    else
    {
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v269, this, v239, v128, v129, v130, v131, v132);
      JSC::DFG::JITCompiler::loadLinkableConstant(this, v269[0], (JSC::ARM64LogicalImmediate *)v269[1], v55, v240, v241, v242, v243);
    }
  }
  else
  {
    v140 = *((_DWORD *)this + 50);
    if (v140 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v126, v127, v128, v129, v130, v131, v132);
      v140 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v140) = v265 & 0x1F | 0xF84183A0;
    *((_DWORD *)this + 50) += 4;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v55, v35 | 0x1800000000, v128, v129, v130, v131, v132);
  v146 = (_QWORD *)(*(_QWORD *)v136 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v136 & 1) != 0)
    v146 = (_QWORD *)*v146;
  if (v146)
  {
    v229 = (_QWORD *)*v146;
    if (v229 && *(_DWORD *)v229 >= 2u)
    {
      if (*((_BYTE *)v229 + 13) != 8)
      {
        __break(0xC471u);
        JUMPOUT(0x197BCAB28);
      }
      v147 = *(unsigned int *)((char *)v229 + 14);
    }
    else
    {
      v147 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    v147 = 6;
  }
  if (v266)
  {
    if (v260 <= v56)
      v244 = v56;
    else
      v244 = v260;
    if ((_DWORD)v244)
    {
      v245 = v35 | 0x3000000000;
      do
      {
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v147 << 35) | 0x1D, v55, v141, v142, v143, v144, v145);
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v55, v245, v246, v247, v248, v249, v250);
        v245 += 0x800000000;
        v147 = (v147 + 1);
        --v244;
      }
      while (v244);
    }
  }
  else
  {
    *(_QWORD *)v287 = 0xFFFFFFFFLL;
    *(_DWORD *)&v287[8] = -16773311;
    if ((_DWORD)v56)
    {
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v68, v56, v142, v143, v144, v145, (uint64_t)v284);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v56, v68, v218, v219, v220, v221, v222);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v284, (uint64_t)this, v223, v224, v225, v226, v227, v228);
      v155 = -1;
    }
    else
    {
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v68, v142, v143, v144, v145, (uint64_t)v284, (int8x8_t)4278193985);
      v155 = *(_DWORD *)v284;
      *(_DWORD *)v287 = *(_DWORD *)v284;
      *(_QWORD *)&v287[4] = *(_QWORD *)&v284[4];
    }
    for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v148, v149, v150, v151, v152, v153, v154);
        i = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
      i = *((_DWORD *)this + 50) + 4;
    }
    *((_DWORD *)this + 52) = 0;
    v157 = i;
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v148, v149, v150, v151, v152, v153, v154);
      v157 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v157) = v68 | (32 * v68) | 0x51000400;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v267 << 8) | 0x30000001DLL, (8 * v147) | 0x200000000, v55, v151, v152, v153, v154);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v265, v35 | ((unint64_t)v267 << 8) | 0x300000000, 0x200000030uLL, v158, v159, v160, v161);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v68, v162, v163, v164, v165, (uint64_t)v284, v166);
    v268 = i;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v284, (unsigned int *)&v268, (uint64_t)this, v167, v168, v169, v170, v171);
    if (v155 != -1)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v287, (uint64_t)this, v172, v141, v142, v143, v144, v145);
    v136 = v264;
  }
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v141, v142, v143, v144, v145, (uint64_t)v287);
  v180 = *((_DWORD *)this + 50);
  if (v180 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v173, v174, v175, v176, v177, v178, v179);
    v180 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v180) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v287, (uint64_t)this, v174, v175, v176, v177, v178, v179);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v136, v181, v182, v183, v184, v185, v186);
  if ((int)v73 > 15)
    v194 = -1;
  else
    v194 = v73;
  v195 = (char *)this + 12 * v194;
  v196 = *((_DWORD *)v136 + 12);
  *((_DWORD *)v195 + 1194) = v196;
  *((_DWORD *)v195 + 1195) = 4;
  v197 = ~v196;
  if (v197 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BCAB88);
  }
  v198 = *((_QWORD *)this + 499) + 24 * (int)v197;
  v199 = *((_DWORD *)v136 + 13);
  *(_QWORD *)v198 = v136;
  *(_DWORD *)(v198 + 8) = v199;
  *(_BYTE *)(v198 + 17) = v73;
  *(_DWORD *)(v198 + 12) = 6;
  *(_BYTE *)(v198 + 16) = 0;
  v200 = v275;
  if (v277 != (_BYTE *)v275 && v275)
  {
    v275 = 0;
    LODWORD(v276) = 0;
    WTF::fastFree((unint64_t)v200, v187, v188, v189, v190, v191, v192, v193);
  }
  if (v261 && v267 != 255)
  {
    if ((int)v68 > 15)
      v201 = -1;
    else
      v201 = v267;
    --*(_DWORD *)(v261 + 12 * v201 + 4784);
  }
  if (v278)
  {
    v202 = v279;
    if (v279 != -1)
    {
      if (v279 > 15)
        v202 = -1;
      --*(_DWORD *)(v278 + 12 * v202 + 4784);
    }
  }
  if (v280)
  {
    v203 = v281;
    if (v281 != -1)
    {
      if (v281 > 15)
        v203 = -1;
      --*(_DWORD *)(v280 + 12 * v203 + 4784);
    }
  }
  if (v282)
  {
    v204 = (char)v283;
    if ((char)v283 != -1)
    {
      if ((char)v283 > 15)
        v204 = -1;
      --*(_DWORD *)(v282 + 12 * v204 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::emitAllocateJSObjectWithKnownSize<JSC::DirectArguments,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v10 = a2;
  if (a7 > 0x1F60)
    v12 = 0;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 8 * ((a7 + 15) >> 4) + 19168);
  v25[0] = 0;
  v25[1] = v12;
  JSC::AssemblyHelpers::emitAllocate(a1, a2, (uint64_t)v25, a4, a5, a6, 1, a8, a9);
  v18 = (a3 >> 4) | ((unint64_t)*(unsigned int *)(a3 + 8) << 32);
  if (!v18)
  {
    v19 = 63;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v18, a1 + 264, v13, v14, v15, v16, v17);
    v19 = 16;
LABEL_7:
    JSC::MacroAssemblerARM64::store64(a1, v19, v10, v13, v14, v15, v16, v17);
    JSC::MacroAssemblerARM64::store64(a1, 63, v10 | 0x800000000, v20, v21, v22, v23, v24);
    return;
  }
  __break(0xC471u);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,unsigned int,unsigned int>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  _BYTE *v28;
  WTF *v29;
  WTF *v30;
  unsigned int v31;
  int v32;
  _BYTE *v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  WTF *v56;
  unsigned int v57;
  _BYTE v58[24];
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE v62[24];
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE v66[24];
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE v70[32];

  v15 = *((unsigned int *)a2 + 3);
  v56 = (WTF *)v58;
  v57 = v15;
  if (v15 < 3)
  {
    v16 = v58;
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  else
  {
    if (v15 >= 0x15555556)
      goto LABEL_47;
    v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v15));
    v56 = (WTF *)v16;
    LODWORD(v15) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v15)
      goto LABEL_8;
  }
  v17 = *a2;
  v18 = *a2 + 12 * v15;
  do
  {
    *(_DWORD *)v16 = *(_DWORD *)v17;
    *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
    v17 += 12;
    v16 += 12;
  }
  while (v17 != v18);
LABEL_8:
  v19 = WTF::fastMalloc((WTF *)0xB8);
  v20 = v57;
  v59 = (WTF *)v62;
  v60 = 2;
  v61 = v57;
  if (v57 < 3)
  {
    v21 = v62;
  }
  else
  {
    if (v57 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCB074);
    }
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v57));
    v60 = 12 * v57 / 0xC;
    v59 = (WTF *)v21;
    v20 = v57;
  }
  if (v20)
  {
    v22 = v56;
    v23 = (WTF *)((char *)v56 + 12 * v20);
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v22 + 4);
      v22 = (WTF *)((char *)v22 + 12);
      v21 += 12;
    }
    while (v22 != v23);
  }
  v54 = a5;
  v24 = v61;
  v63 = (WTF *)v66;
  v64 = 2;
  v65 = v61;
  if (v61 < 3)
  {
    v25 = a6;
    v26 = a7;
    v28 = v66;
  }
  else
  {
    if (v61 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCB07CLL);
    }
    v25 = a6;
    v26 = a7;
    v27 = 12 * v61;
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v61));
    v64 = (v27 & 0xFFFFFFFC) / 0xC;
    v63 = (WTF *)v28;
    v24 = v61;
  }
  if (v24)
  {
    v29 = v59;
    v30 = (WTF *)((char *)v59 + 12 * v24);
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)((char *)v29 + 4);
      v29 = (WTF *)((char *)v29 + 12);
      v28 += 12;
    }
    while (v29 != v30);
  }
  v31 = v65;
  v67 = v70;
  v68 = 2;
  v69 = v65;
  if (v65 < 3)
  {
    v33 = v70;
    if (!v65)
      goto LABEL_29;
LABEL_27:
    v34 = v63;
    v35 = (WTF *)((char *)v63 + 12 * v31);
    do
    {
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)((char *)v34 + 4);
      v34 = (WTF *)((char *)v34 + 12);
      v33 += 12;
    }
    while (v34 != v35);
    goto LABEL_29;
  }
  if (v65 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197BCB06CLL);
  }
  v32 = 12 * v65;
  v33 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v65));
  v68 = (v32 & 0xFFFFFFFC) / 0xC;
  v67 = v33;
  v31 = v65;
  if (v65)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v19, (uint64_t *)&v67, a3);
  v43 = (unint64_t)v67;
  if (v70 != v67 && v67 != 0)
  {
    v67 = 0;
    v68 = 0;
    WTF::fastFree(v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)v19 = off_1E3573890;
  *(_QWORD *)(v19 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v19 + 100) = 0;
  *(_BYTE *)(v19 + 102) = a4;
  *(_QWORD *)(v19 + 104) = v19 + 120;
  *(_QWORD *)(v19 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v19 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v41, v42);
  v52 = v63;
  if (v66 != (_BYTE *)v63 && v63)
  {
    v63 = 0;
    v64 = 0;
    WTF::fastFree((unint64_t)v52, v45, v46, v47, v48, v49, v50, v51);
  }
  *(_QWORD *)v19 = &off_1E3573860;
  *(_QWORD *)(v19 + 152) = operationCreateDirectArguments;
  *(_QWORD *)(v19 + 160) = v54;
  *(_QWORD *)(v19 + 168) = v25;
  *(_DWORD *)(v19 + 176) = v26;
  *(_DWORD *)(v19 + 180) = a8;
  *a1 = v19;
  v53 = v59;
  if (v62 != (_BYTE *)v59 && v59)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v53, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v58 != (_BYTE *)v56)
  {
    if (v56)
      WTF::fastFree((unint64_t)v56, v45, v46, v47, v48, v49, v50, v51);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetFromArguments(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_17;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, v9, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_17:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, v20, v21, v22, v23, v24, v25);
LABEL_6:
  v26 = v33;
  JSC::MacroAssemblerARM64::load64((uint64_t)v9, v13 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 48) >> 3) << 35), v33, v21, v22, v23, v24, v25);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, v26, (uint64_t)a2, 16, 0, v27, v28, v29);
  if (v32)
  {
    v30 = v33;
    if (v33 != -1)
    {
      if (v33 > 15)
        v30 = -1;
      --*(_DWORD *)(v32 + 12 * v30 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v31 = -1;
    else
      v31 = v13;
    --*((_DWORD *)v9 + 3 * v31 + 1196);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutToArguments(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 v35;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v33, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v30, (uint64_t)this, *((_QWORD *)a2 + 4), 0, v10, v11, v12, v13);
  v20 = v35;
  if (v35 == 255)
  {
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v33, v34, v14, v15, v16, v17, v18, v19);
    v35 = v20;
  }
  v21 = v32;
  if (v32 == 255)
  {
    v21 = JSC::DFG::SpeculativeJIT::fillJSValue(v30, v31, v14, v15, v16, v17, v18, v19);
    v32 = v21;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, (char)v21, v20 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 48) >> 3) << 35), v15, v16, v17, v18, v19);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v22, v23, v24, v25, v26);
  if ((v31 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v28 = (char)v32;
    if ((char)v32 > 15)
      v28 = -1;
    --*(_DWORD *)(v30 + 12 * v28 + 4784);
  }
  if ((v34 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v29 = (char)v35;
    if ((char)v35 > 15)
      v29 = -1;
    --*(_DWORD *)(v33 + 12 * v29 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetArgument(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::AssemblerBuffer *v44;
  int i;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67[2];
  char v68;
  __int16 v69;
  char v70;
  unsigned int v71[3];
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v74, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v72, this, v10, v11, v12, v13, v14, v15);
  v21 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v21 = *(_QWORD *)v21;
  if (v21)
    v22 = ((unint64_t)*(unsigned int *)(v21 + 36) << 35) | 0x1D;
  else
    v22 = 0x200000001DLL;
  v23 = v73;
  v24 = v75;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v22, v24, v16, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 13, v24, *((unsigned int *)a2 + 18), v25, v26, v27, v28, (uint64_t)v71);
  v34 = (_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if ((*(_QWORD *)a2 & 1) != 0)
    v34 = (_QWORD *)*v34;
  if (v34)
  {
    v65 = (_QWORD *)*v34;
    if (v65 && *(_DWORD *)v65 >= 2u)
    {
      if (*((_BYTE *)v65 + 13) != 8)
      {
        __break(0xC471u);
        JUMPOUT(0x197BCB580);
      }
      v35 = *(_DWORD *)((char *)v65 + 14) + 0x1FFFFFFF;
    }
    else
    {
      v35 = 536870910;
    }
  }
  else
  {
    v35 = 536870917;
  }
  v36 = v23;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)(*((_DWORD *)a2 + 18) + v35) << 35) | 0x1D, v36, v29, v30, v31, v32, v33);
  v44 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      v66 = v44;
      JSC::AssemblerBuffer::outOfLineGrow(v44, v37, v38, v39, v40, v41, v42, v43);
      v44 = v66;
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v46 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v44, v37, v38, v39, v40, v41, v42, v43);
    v46 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v46) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v47 = 69;
  else
    v47 = 65;
  v67[0] = i;
  v67[1] = 0;
  v68 = v47;
  v69 = 15;
  v70 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v71, (uint64_t)this, v38, v39, v40, v41, v42, v43);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, v36, v48, v49, v50, v51, v52);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v67, (uint64_t)this, v53, v54, v55, v56, v57, v58);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v36, (uint64_t)a2, 16, 0, v59, v60, v61);
  if (v72)
  {
    v63 = v73;
    if (v73 != -1)
    {
      if (v73 > 15)
        v63 = -1;
      --*(_DWORD *)(v72 + 12 * v63 + 4784);
    }
  }
  if (v74)
  {
    v64 = v75;
    if (v75 != -1)
    {
      if (v75 > 15)
        v64 = -1;
      --*(_DWORD *)(v74 + 12 * v64 + 4784);
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::DFG::Node *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::ARM64LogicalImmediate *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *result;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 v91;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v89, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v16 = v91;
  if (v91 == 255)
  {
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v89, v90, v10, v11, v12, v13, v14, v15);
    v91 = v16;
  }
  ++*((_DWORD *)this + 1196);
  v17 = *((unsigned int *)this + 1194);
  if ((_DWORD)v17 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v17, v10, v11, v12, v13, v14, v15);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v17, v10, v11, v12, v13, v14, v15);
  v18 = *((_QWORD *)this + 495);
  JSC::CodeOrigin::CodeOrigin(&v88, a2);
  v32 = JSC::DFG::Graph::globalObjectFor(v18, &v88, v19, v20, v21, v22, v23, v24);
  if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v88 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_0>(this, v16, v26, v27, v28, v29, v30, v31);
  JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_1>(this, *(_QWORD *)a2, v33, v34, v35, v36, v37, v38);
  JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_2>((unsigned int *)this, *(_QWORD *)a2, v39, v40, v41, v42, v43, v44);
  JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_3>((uint64_t)this, *(_QWORD *)a2, v45, v46, v47, v48, v49, v50);
  JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_4>(this, *(_DWORD *)(v32 + 840), v51, v52, v53, v54, v55, v56);
  v63 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v57, v58, v59, v60, v61, v62);
  JSC::DFG::JITCompiler::loadLinkableConstant(this, v63, v64, 0, v65, v66, v67, v68);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationCreateScopedArguments, v69, v70, v71, v72, v73, v74, &v87);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v75, v76, v77, v78, v79, v80);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v81, v82, v83, v84);
  --*((_DWORD *)this + 1196);
  if ((v90 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v86 = (char)v91;
    if ((char)v91 > 15)
      v86 = -1;
    --*(_DWORD *)(v89 + 12 * v86 + 4784);
  }
  return result;
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_0>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;

  if (a2 != 5)
  {
    if (a2 == 31)
    {
      v8 = -1862269979;
    }
    else if (a2 == 63)
    {
      v8 = -763363323;
    }
    else
    {
      v8 = ((a2 & 0x1F) << 16) | 0xAA0003E5;
    }
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v9 = *v10;
    }
    *(_DWORD *)(*v11 + v9) = v8;
    *v10 += 4;
  }
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_1>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  JSC::ARM64LogicalImmediate *v22;

  if ((a2 & 1) != 0)
  {
    v13 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v14 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8), v14 != 0x3FFFFFFF) ? (v15 = v14 == -1) : (v15 = 1), v15))
    {
      v16 = 2;
    }
    else if (v14 >> 28)
    {
      v20 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v20 = v13;
      *(_DWORD *)(v20 + 8) = v14;
      v16 = 1;
      v13 = v20;
    }
    else
    {
      v16 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v13 = 0;
    }
    v17 = v13 | v16;
    v9 = (_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 1) != 0)
    {
      v10 = 0;
      v11 = (_QWORD *)*v9;
      if (!*v9)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else
  {
    v9 = (_QWORD *)(a2 & 0xFFFFFFFF8);
  }
  v10 = 1;
  v11 = v9;
  if (!v9)
  {
LABEL_4:
    v12 = a1[50];
    if (v12 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v12 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = -129924188;
    a1[50] += 4;
    goto LABEL_7;
  }
LABEL_22:
  v18 = *(_QWORD *)((char *)v11 + 41);
  if ((v11[4] & 1) != 0)
  {
    v19 = (v18 << 35) | 0x1D;
  }
  else
  {
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v21, (JSC::DFG::JITCompiler *)a1, v18, a4, a5, a6, a7, a8);
    if (v21 == 0xFFFFFFFFLL)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)v22, 4, a4, a5, a6, a7, a8);
      goto LABEL_7;
    }
    v19 = ((unint64_t)v21 << 35) + 0x380000001ALL;
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, v19, 4, a4, a5, a6, a7, a8);
LABEL_7:
  if ((v10 & 1) == 0)
  {
    if (v9)
      WTF::fastFree((unint64_t)v9, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_2>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v9 = (uint64_t *)(a2 & 0xFFFFFFFF8);
  if ((a2 & 1) != 0)
  {
    v21 = *v9;
    if ((a2 & 2) != 0
      || ((v22 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v27 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = v21;
      *(_DWORD *)(v27 + 8) = v22;
      v24 = 1;
      v21 = v27;
    }
    else
    {
      v24 = v21;
      v21 = 0;
    }
    v25 = v21 | v24;
    v9 = (uint64_t *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 1) != 0)
    {
      v10 = 0;
      v11 = (uint64_t *)*v9;
      if (*v9)
        goto LABEL_19;
LABEL_3:
      v12 = 0x200000001DLL;
      goto LABEL_4;
    }
  }
  v10 = 1;
  v11 = v9;
  if (!v9)
    goto LABEL_3;
LABEL_19:
  v26 = v11[3];
  if ((v26 >> 60) - 3 > 2)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)((v26 & 0x3FFFFF) - 1), 3, a4, a5, a6, a7, a8);
    if ((v10 & 1) != 0)
      return;
    goto LABEL_22;
  }
  v12 = ((unint64_t)*((unsigned int *)v11 + 9) << 35) | 0x1D;
LABEL_4:
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, v12, 3, a4, a5, a6, a7, a8);
  v20 = a1[50];
  if (v20 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v20 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v20) = 1358955619;
  a1[50] += 4;
  if ((v10 & 1) == 0)
  {
LABEL_22:
    if (v9)
      WTF::fastFree((unint64_t)v9, v13, v14, v15, v16, v17, v18, v19);
  }
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (uint64_t *)(a2 & 0xFFFFFFFF8);
  if ((a2 & 1) != 0)
  {
    v19 = *v8;
    if ((a2 & 2) != 0
      || ((v20 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8), v20 != 0x3FFFFFFF) ? (v21 = v20 == -1) : (v21 = 1), v21))
    {
      v22 = 2;
    }
    else if (v20 >> 28)
    {
      v25 = a1;
      v24 = WTF::fastMalloc((WTF *)0x10);
      a1 = v25;
      *(_QWORD *)v24 = v19;
      *(_DWORD *)(v24 + 8) = v20;
      v22 = 1;
      v19 = v24;
    }
    else
    {
      v22 = v19;
      v19 = 0;
    }
    v8 = (uint64_t *)((v19 | v22) & 0xFFFFFFFF8);
    if (((v19 | v22) & 1) != 0)
    {
      v9 = 0;
      v10 = (uint64_t *)*v8;
      if (*v8)
        goto LABEL_19;
LABEL_3:
      v11 = 48;
      goto LABEL_4;
    }
  }
  v9 = 1;
  v10 = v8;
  if (!v8)
    goto LABEL_3;
LABEL_19:
  v23 = *v10;
  if (v23 && *(_DWORD *)v23 >= 2u)
  {
    if (*(_BYTE *)(v23 + 13) != 8)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCBB90);
    }
    v11 = (8 * *(_DWORD *)(v23 + 14));
  }
  else
  {
    v11 = 4294967288;
  }
LABEL_4:
  JSC::MacroAssemblerARM64::add64(a1, v11, 29, 2, a5, a6, a7, a8);
  if ((v9 & 1) == 0)
  {
    if (v8)
      WTF::fastFree((unint64_t)v8, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateScopedArguments(JSC::DFG::Node *)::$_4>(JSC::DFG::JITCompiler *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  JSC::ARM64LogicalImmediate *v16;

  if (a2)
    v9 = 16 * (a2 & 0xFFFFFFFE);
  else
    v9 = 0;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v15, a1, v9, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)v16, 1, v10, v11, v12, v13, v14);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a1, ((unint64_t)v15 << 35) + 0x380000001ALL, 1, v10, v11, v12, v13, v14);
}

_QWORD *JSC::DFG::SpeculativeJIT::appendCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v12 = **(_QWORD **)(a1 + 3976);
  if ((v12 & 1) != 0)
  {
    v21 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v22 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v25 = v21;
      v26 = v22;
      v21 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v21 = v25;
      *(_DWORD *)(v21 + 8) = v26;
      v24 = 1;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v12 = v21 | v24;
  }
  v27 = v12;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin(a1, &v27, a3, a4, a5, a6, a7, a8);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return JSC::DFG::JITCompiler::appendCall<(WTF::PtrTag)64323>(a1, a2, v14, v15, v16, v17, v18, v19, a9);
}

void JSC::CCallHelpers::setupResults(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  v8 = a1;
  if ((_DWORD)a2 == -1)
  {
    v21 = 1;
    goto LABEL_25;
  }
  if ((_DWORD)a3 == -1)
  {
    if (!(_DWORD)a2)
      return;
    if ((_DWORD)a2 == 31)
      v9 = -1862270945;
    else
      v9 = a2 & 0x1F | 0xAA0003E0;
    goto LABEL_6;
  }
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 31)
    {
      v16 = -1862270945;
      goto LABEL_16;
    }
    if ((_DWORD)a2 != 1)
    {
      v16 = a2 & 0x1F | 0xAA0003E0;
LABEL_16:
      v17 = a1 + 50;
      v18 = a1[50];
      v19 = a1 + 14;
      if (v18 + 4 > a1[48])
      {
        v22 = a3;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
        v17 = v8 + 50;
        a3 = v22;
        v18 = v8[50];
      }
      *(_DWORD *)(*v19 + v18) = v16;
      *v17 += 4;
      goto LABEL_19;
    }
    if (!(_DWORD)a3)
    {
      JSC::MacroAssemblerARM64::swap((uint64_t)a1, 1, a3, a4, a5, a6, a7, a8);
      return;
    }
    JSC::MacroAssemblerARM64::move(a1, 1, a3, a4, a5, a6, a7, a8);
    a1 = v8;
    v21 = 0;
    a3 = 1;
LABEL_25:
    JSC::MacroAssemblerARM64::move(a1, v21, a3, a4, a5, a6, a7, a8);
    return;
  }
LABEL_19:
  if ((_DWORD)a3 == 1)
    return;
  if ((_DWORD)a3 == 31)
  {
    v20 = v8[50];
    v11 = v8 + 50;
    v10 = v20;
    v13 = (JSC::AssemblerBuffer *)(v11 - 36);
    v14 = v20 + 4;
    v15 = *(v11 - 2);
    v9 = -1862270913;
    goto LABEL_7;
  }
  v9 = a3 & 0x1F | 0xAA0103E0;
LABEL_6:
  v12 = v8[50];
  v11 = v8 + 50;
  v10 = v12;
  v13 = (JSC::AssemblerBuffer *)(v11 - 36);
  v14 = v12 + 4;
  v15 = *(v11 - 2);
LABEL_7:
  if (v14 > v15)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, a2, a3, a4, a5, a6, a7, a8);
    v10 = *v11;
  }
  *(_DWORD *)(*(_QWORD *)v13 + v10) = v9;
  *v11 += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileCreateRest(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  JSC::AssemblerBuffer *v92;
  int i;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *result;
  char *v123;
  int v124;
  unsigned int v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  JSC::DFG::Node *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  int v193;
  JSC::AssemblerBuffer *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unsigned __int8 v198;
  int v199;
  unsigned int v200[3];
  unsigned int v201[3];
  uint64_t v202;
  char v203;
  uint64_t v204;
  unsigned __int8 v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  unsigned __int8 v209;

  if (JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this[495], a2, a3, a4, a5, a6, a7, a8))
  {
    v16 = *((_QWORD *)a2 + 3);
    v17 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BCC594);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v17 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), v10, v11, v12, v13, v14, v15);
      v19 = v18;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v196, (JSC::DFG::SpeculativeJIT *)this, v20, v21, v22, v23, v24, v25);
      if ((_DWORD)v19 != -1)
      {
LABEL_8:
        v33 = v197;
        v34 = (char)v197;
        JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize((JSC::DFG::SpeculativeJIT *)this, (uint64_t *)a2, (char)v197, v19, 9, 0, v30, v31);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v208, (JSC::DFG::SpeculativeJIT *)this, v35, v36, v37, v38, v39, v40);
        v45 = v209;
        v46 = (uint64_t *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
        if ((*(_QWORD *)a2 & 1) == 0)
          goto LABEL_9;
        v187 = *v46;
        if ((*(_QWORD *)a2 & 2) != 0
          || (v188 = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8), v188 == 0x3FFFFFFF)
          || v188 == -1)
        {
          v189 = 2;
        }
        else if (v188 >> 28)
        {
          v191 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v191 = v187;
          *(_DWORD *)(v191 + 8) = v188;
          v189 = 1;
          v187 = v191;
        }
        else
        {
          v189 = *v46;
          v187 = 0;
        }
        v190 = v187 | v189;
        v46 = (uint64_t *)(v190 & 0xFFFFFFFF8);
        if ((v190 & 1) != 0)
        {
          v47 = 0;
          v48 = (uint64_t *)*v46;
        }
        else
        {
LABEL_9:
          v47 = 1;
          v48 = v46;
        }
        if (v48)
        {
          v136 = *v48;
          if (v136 && *(_DWORD *)v136 >= 2u)
          {
            if (*(_BYTE *)(v136 + 13) != 8)
              goto LABEL_91;
            v49 = (8 * *(_DWORD *)(v136 + 14));
          }
          else
          {
            v49 = 4294967288;
          }
        }
        else
        {
          v49 = 48;
        }
        JSC::MacroAssemblerARM64::add64((uint64_t)this, v49, 29, (char)v45, v41, v42, v43, v44);
        if ((v47 & 1) == 0 && v46)
          WTF::fastFree((unint64_t)v46, v50, v51, v52, v53, v54, v55, v56);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v206, (JSC::DFG::SpeculativeJIT *)this, v51, v52, v53, v54, v55, v56);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v204, (JSC::DFG::SpeculativeJIT *)this, v57, v58, v59, v60, v61, v62);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v202, (JSC::DFG::SpeculativeJIT *)this, v63, v64, v65, v66, v67, v68);
        v192 = v203;
        v69 = (char)v205;
        v70 = v205;
        v71 = v207;
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v33 | 0x800000000, v207, v72, v73, v74, v75, v76);
        JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 0, v19, v19, v77, v78, v79, v80, (uint64_t)v201);
        JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v19, v69);
        JSC::MacroAssemblerARM64::add64((uint64_t)this, (8 * *((_DWORD *)a2 + 18)), (char)v45, (char)v45, v81, v82, v83, v84);
        v92 = (JSC::AssemblerBuffer *)(this + 7);
        for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
        {
          if ((i + 4) > *((_DWORD *)this + 48))
          {
            v194 = v92;
            JSC::AssemblerBuffer::outOfLineGrow(v92, v85, v86, v87, v88, v89, v90, v91);
            v92 = v194;
            i = *((_DWORD *)this + 50);
          }
          *(_DWORD *)((char *)this[7] + i) = -721215457;
          i = *((_DWORD *)this + 50) + 4;
        }
        v193 = v19;
        v94 = v34;
        *((_DWORD *)this + 52) = 0;
        v95 = i;
        if ((i + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v92, v85, v86, v87, v88, v89, v90, v91);
          v95 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)((char *)this[7] + v95) = v69 | (32 * v69) | 0x51000400;
        *((_DWORD *)this + 50) += 4;
        v96 = (v70 << 8) | 0x300000000;
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v96 | v45, 0x200000000uLL, v192, v88, v89, v90, v91);
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v192, v96 | v71, 0x200000000uLL, v97, v98, v99, v100);
        JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 1, (char)v70, v69, v101, v102, v103, v104, (uint64_t)v200);
        v199 = i;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v200, (unsigned int *)&v199, (uint64_t)this, v105, v106, v107, v108, v109);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v201, (uint64_t)this, v110, v111, v112, v113, v114, v115);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v116, v117, v118, v119, v120, v121);
        v123 = (char *)(this + 597);
        v124 = *((_DWORD *)a2 + 12);
        if (v94 > 15)
          v125 = -1;
        else
          v125 = v94;
        v126 = &v123[12 * v125];
        *(_DWORD *)v126 = v124;
        *((_DWORD *)v126 + 1) = 4;
        v127 = ~v124;
        if (v127 < *((unsigned int *)this + 1001))
        {
          v128 = (uint64_t)this[499] + 24 * (int)v127;
          v129 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v128 = a2;
          *(_DWORD *)(v128 + 8) = v129;
          *(_BYTE *)(v128 + 17) = v94;
          *(_DWORD *)(v128 + 12) = 6;
          *(_BYTE *)(v128 + 16) = 0;
          if (v202)
          {
            v130 = v203;
            if (v203 != -1)
            {
              if (v203 > 15)
                v130 = -1;
              --*(_DWORD *)(v202 + 12 * v130 + 4784);
            }
          }
          if (v204)
          {
            v131 = (char)v205;
            if ((char)v205 != -1)
            {
              if ((char)v205 > 15)
                v131 = -1;
              --*(_DWORD *)(v204 + 12 * v131 + 4784);
            }
          }
          if (v206)
          {
            v132 = v207;
            if (v207 != -1)
            {
              if (v207 > 15)
                v132 = -1;
              --*(_DWORD *)(v206 + 12 * v132 + 4784);
            }
          }
          if (v208)
          {
            v133 = (char)v209;
            if ((char)v209 != -1)
            {
              if ((char)v209 > 15)
                v133 = -1;
              --*(_DWORD *)(v208 + 12 * v133 + 4784);
            }
          }
          if (v196)
          {
            v134 = (char)v197;
            if ((char)v197 != -1)
            {
              if ((char)v197 > 15)
                v134 = -1;
              --*(_DWORD *)(v196 + 12 * v134 + 4784);
            }
          }
          if (v193 > 15)
            v135 = -1;
          else
            v135 = v193;
          --*(_DWORD *)&v123[12 * v135 + 8];
          return result;
        }
LABEL_91:
        __break(0xC471u);
        JUMPOUT(0x197BCC54CLL);
      }
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v196, (JSC::DFG::SpeculativeJIT *)this, v10, v11, v12, v13, v14, v15);
    }
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v16, v26, v27, v28, v29, v30, v31);
    v19 = v32;
    goto LABEL_8;
  }
  JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)&v196, (uint64_t)this, *((_QWORD *)a2 + 3), 0, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v208, (JSC::DFG::SpeculativeJIT *)this, v137, v138, v139, v140, v141, v142);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v206, (JSC::DFG::SpeculativeJIT *)this, v143, v144, v145, v146, v147, v148);
  v155 = v198;
  if (v198 == 255)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v196, v197, v149, v150, v151, v152, v153, v154);
    v155 = v156;
    v198 = v156;
  }
  v157 = (char)v209;
  JSC::CodeOrigin::CodeOrigin(&v195, a2);
  JSC::DFG::SpeculativeJIT::emitGetArgumentStart((uint64_t)this, &v195, v157, v158, v159, v160, v161, v162);
  if ((v195 & 1) != 0 && (v195 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v195 & 0xFFFFFFFF8, v163, v164, v165, v166, v167, v168, v169);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, (uint64_t)v163, v164, v165, v166, v167, v168, v169);
  ++*((_DWORD *)this + 1196);
  v176 = *((unsigned int *)this + 1194);
  if ((_DWORD)v176 != 0x3FFFFFFF)
  {
    this[597] = (JSC::DFG::Graph *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v176, (uint64_t)v170, v171, v172, v173, v174, v175);
  }
  v177 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v170, v171, v172, v173, v174, v175);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Register *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32,JSC::ARM64Registers::RegisterID>((int *)&v204, (int *)this, v177, v178, (char)v157, *((unsigned int *)a2 + 18), (char)v155, v179);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v180, v181, v182, v183);
  --*((_DWORD *)this + 1196);
  if (v206)
  {
    v184 = v207;
    if (v207 != -1)
    {
      if (v207 > 15)
        v184 = -1;
      --*(_DWORD *)(v206 + 12 * v184 + 4784);
    }
  }
  if (v208)
  {
    v185 = (char)v209;
    if ((char)v209 != -1)
    {
      if ((char)v209 > 15)
        v185 = -1;
      --*(_DWORD *)(v208 + 12 * v185 + 4784);
    }
  }
  v186 = (char)v198;
  if ((char)v198 > 15)
    v186 = -1;
  --*(_DWORD *)(v196 + 12 * v186 + 4784);
  return result;
}

uint64_t JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::WatchpointSet>((uint64_t)this, v15, *(_QWORD *)(v15 + 2048), 5, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize(JSC::DFG::SpeculativeJIT *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  char v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  JSC::DFG::Node *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  _BYTE *v108;
  WTF *v109;
  WTF *v110;
  unsigned int v111;
  int v112;
  _BYTE *v113;
  WTF *v114;
  WTF *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  WTF *v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  _DWORD *v148;
  uint64_t *v149;
  int v150;
  char *v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  JSC::AssemblerBuffer *v165;
  char v166;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  WTF *v173;
  uint64_t v174;
  _BYTE v175[24];
  uint64_t v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  WTF *v182;
  unsigned int v183;
  unsigned int v184;
  _BYTE v185[24];
  _BYTE *v186;
  uint64_t v187;
  _BYTE v188[32];

  v8 = a6;
  v9 = a5;
  v169 = a4;
  v12 = *((_QWORD *)a1 + 495);
  v13 = *a2;
  if ((*a2 & 1) == 0)
  {
    v14 = *(_QWORD *)(v12 + 32);
LABEL_3:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
LABEL_4:
    v18 = v15;
    goto LABEL_5;
  }
  v152 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v153 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v153 != 0x3FFFFFFF) ? (v154 = v153 == -1) : (v154 = 1), v154))
  {
    v155 = 2;
  }
  else if (v153 >> 28)
  {
    v163 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v163 = v152;
    *(_DWORD *)(v163 + 8) = v153;
    v155 = 1;
    v152 = v163;
  }
  else
  {
    v155 = v152;
    v152 = 0;
  }
  v13 = v152 | v155;
  v14 = *(_QWORD *)(v12 + 32);
  if (((v152 | v155) & 1) == 0)
    goto LABEL_3;
  v156 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v157 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v157 != 0x3FFFFFFF) ? (v158 = v157 == -1) : (v158 = 1), v158))
  {
    v159 = 2;
  }
  else if (v157 >> 28)
  {
    v164 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v164 = v156;
    *(_DWORD *)(v164 + 8) = v157;
    v159 = 1;
    v156 = v164;
  }
  else
  {
    v159 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v156 = 0;
  }
  v160 = v156 | v159;
  v15 = (_QWORD *)(v160 & 0xFFFFFFFF8);
  if ((v160 & 1) == 0)
  {
    v17 = 0;
    v16 = 1;
    goto LABEL_4;
  }
  v16 = 0;
  v17 = 0;
  v18 = (_QWORD *)*v15;
LABEL_5:
  if (v18)
    v14 = v18[1];
  v168 = *(_QWORD *)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v180, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v178, a1, v19, v20, v21, v22, v23, v24);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v176, a1, v25, v26, v27, v28, v29, v30);
  v39 = v181;
  v40 = v179;
  v41 = v177;
  v42 = v181 & 0x1F | 0xD2800000;
  v165 = (JSC::DFG::SpeculativeJIT *)((char *)a1 + 56);
  v43 = *((_DWORD *)a1 + 50);
  if (v43 + 4 > *((_DWORD *)a1 + 48))
  {
    v38 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v165, v31, v32, v33, v34, v35, v36, v37).n128_u64[0];
    v43 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v43) = v42;
  *((_DWORD *)a1 + 50) += 4;
  v173 = (WTF *)v175;
  v174 = 2;
  if (v8)
  {
    JSC::MacroAssemblerARM64::branch32((uint64_t)a1, 2, v169, 0x8000000, v34, v35, v36, v37, (uint64_t)&v171);
    v146 = v171;
    if (v171 != -1)
    {
      v147 = HIDWORD(v174);
      if (HIDWORD(v174) == (_DWORD)v174)
      {
        v148 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v173, (void *)(HIDWORD(v174) + 1), (unint64_t)&v171, v142, v143, v144, v145, v37);
        v150 = *v148;
        v149 = (uint64_t *)(v148 + 1);
        v146 = v150;
        v147 = HIDWORD(v174);
      }
      else
      {
        v149 = &v172;
      }
      v151 = (char *)v173 + 12 * v147;
      *(_DWORD *)v151 = v146;
      *(_QWORD *)(v151 + 4) = *v149;
      ++HIDWORD(v174);
    }
  }
  v166 = v39;
  v44 = v39;
  JSC::DFG::SpeculativeJIT::emitAllocateButterfly((uint64_t)a1, v44, v169, v40, v41, a3, (uint64_t)&v173, v37, v38);
  if ((v9 & 0xE) == 6)
    v50 = 0x7FF8000000000000;
  else
    v50 = 0;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v50, v40, v45, v46, v47, v48, v49);
  JSC::DFG::SpeculativeJIT::emitInitializeButterfly((uint64_t)a1, v44, v169, v40, a3);
  v56 = ((v9 & 0xE) + 10) >> 1;
  if ((v9 & 0x10) == 0)
    v56 = (v9 >> 1) & 7;
  v57 = *(_DWORD *)(v168 + 4 * v56 + 892);
  if (v57)
    v58 = 16 * (v57 & 0xFFFFFFFE);
  else
    v58 = 0;
  v59 = JSC::DFG::Graph::registerStructure(*((_QWORD *)a1 + 495), v58, (int *)&v186, v51, v52, v53, v54, v55);
  v62 = *(_QWORD *)(*((_QWORD *)a1 + 44) + 16);
  if (*(_DWORD *)(v62 + 37620) <= 0xFu)
  {
    __break(0xC471u);
    JUMPOUT(0x197BCCE0CLL);
  }
  v63 = v59;
  v186 = 0;
  v187 = v62 + 37560;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, a3, (uint64_t)&v186, v40, v41, (uint64_t)&v173, 1, v60, v61);
  v69 = (v63 >> 4) | ((unint64_t)*(unsigned int *)(v63 + 8) << 32);
  if (v69)
  {
    if (!*((_BYTE *)a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BCCE3CLL);
    }
    v70 = v8;
    JSC::MacroAssemblerARM64::moveToCachedReg(a1, v69, (uint64_t)a1 + 264, v64, v65, v66, v67, v68);
    v71 = 16;
  }
  else
  {
    v71 = 63;
    v70 = v8;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v71, a3, v64, v65, v66, v67, v68);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v44, a3 | 0x800000000, v72, v73, v74, v75, v76);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v77, v78, v79, v80, v81, (uint64_t)&v186);
  v89 = *((_DWORD *)a1 + 50);
  if (v89 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v165, v82, v83, v84, v85, v86, v87, v88);
    v89 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v89) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v186, (uint64_t)a1, v83, v84, v85, v86, v87, v88);
  v101 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(a1, (JSC::DFG::JITCompiler *)a2, v90, v91, v92, v93, v94, v95);
  v103 = v102;
  v104 = v63;
  if (v70)
  {
    v161 = *(_DWORD *)(v168 + 912);
    if (v161)
      v162 = 16 * (v161 & 0xFFFFFFFE);
    else
      v162 = 0;
    v104 = JSC::DFG::Graph::registerStructure(*((_QWORD *)a1 + 495), v162, (int *)&v186, v96, v97, v98, v99, v100);
  }
  v105 = WTF::fastMalloc((WTF *)0xC8);
  v106 = HIDWORD(v174);
  v182 = (WTF *)v185;
  v183 = 2;
  v184 = HIDWORD(v174);
  if (HIDWORD(v174) < 3)
  {
    v108 = v185;
  }
  else
  {
    if (HIDWORD(v174) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCCECCLL);
    }
    v107 = 12 * HIDWORD(v174);
    v108 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v174)));
    v183 = (v107 & 0xFFFFFFFC) / 0xC;
    v182 = (WTF *)v108;
    v106 = HIDWORD(v174);
  }
  if (v106)
  {
    v109 = v173;
    v110 = (WTF *)((char *)v173 + 12 * v106);
    do
    {
      *(_DWORD *)v108 = *(_DWORD *)v109;
      *(_QWORD *)(v108 + 4) = *(_QWORD *)((char *)v109 + 4);
      v109 = (WTF *)((char *)v109 + 12);
      v108 += 12;
    }
    while (v109 != v110);
  }
  v111 = v184;
  v186 = v188;
  LODWORD(v187) = 2;
  HIDWORD(v187) = v184;
  if (v184 < 3)
  {
    v113 = v188;
  }
  else
  {
    if (v184 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCCED4);
    }
    v112 = 12 * v184;
    v113 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v184));
    LODWORD(v187) = (v112 & 0xFFFFFFFC) / 0xC;
    v186 = v113;
    v111 = v184;
  }
  if (v111)
  {
    v114 = v182;
    v115 = (WTF *)((char *)v182 + 12 * v111);
    do
    {
      *(_DWORD *)v113 = *(_DWORD *)v114;
      *(_QWORD *)(v113 + 4) = *(_QWORD *)((char *)v114 + 4);
      v114 = (WTF *)((char *)v114 + 12);
      v113 += 12;
    }
    while (v114 != v115);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v105, (uint64_t *)&v186, a1);
  v123 = (unint64_t)v186;
  if (v188 != v186 && v186 != 0)
  {
    v186 = 0;
    LODWORD(v187) = 0;
    WTF::fastFree(v123, v116, v117, v118, v119, v120, v121, v122);
  }
  *(_QWORD *)v105 = off_1E3572B80;
  *(_QWORD *)(v105 + 96) = operationNewArrayWithSize;
  *(_QWORD *)(v105 + 104) = v63;
  *(_QWORD *)(v105 + 112) = v104;
  *(_BYTE *)(v105 + 120) = a3;
  *(_QWORD *)(v105 + 128) = v101;
  *(_QWORD *)(v105 + 136) = v103;
  *(_BYTE *)(v105 + 144) = v169;
  *(_BYTE *)(v105 + 145) = v166;
  *(_QWORD *)(v105 + 152) = v105 + 168;
  *(_QWORD *)(v105 + 160) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, 0, v105 + 152, a3, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v121, v122);
  v132 = v182;
  if (v185 != (_BYTE *)v182 && v182)
  {
    v182 = 0;
    v183 = 0;
    WTF::fastFree((unint64_t)v132, v125, v126, v127, v128, v129, v130, v131);
  }
  v170 = v105;
  v133 = (_QWORD *)((char *)a1 + 5656);
  v134 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v134 == *((_DWORD *)a1 + 1416))
  {
    v136 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v133, v134 + 1, (unint64_t)&v170);
    v134 = *((unsigned int *)a1 + 1417);
    v135 = (uint64_t *)(*((_QWORD *)a1 + 707) + 8 * v134);
    v105 = *v136;
  }
  else
  {
    v135 = (uint64_t *)(*v133 + 8 * v134);
    v136 = &v170;
  }
  *v136 = 0;
  *v135 = v105;
  *((_DWORD *)a1 + 1417) = v134 + 1;
  v137 = v170;
  v170 = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = v173;
  if (v175 != (_BYTE *)v173 && v173)
  {
    v173 = 0;
    LODWORD(v174) = 0;
    WTF::fastFree((unint64_t)v138, v125, v126, v127, v128, v129, v130, v131);
  }
  if (v176)
  {
    v139 = v177;
    if (v177 != -1)
    {
      if (v177 > 15)
        v139 = -1;
      --*(_DWORD *)(v176 + 12 * v139 + 4784);
    }
  }
  if (v178)
  {
    v140 = v179;
    if (v179 != -1)
    {
      if (v179 > 15)
        v140 = -1;
      --*(_DWORD *)(v178 + 12 * v140 + 4784);
    }
  }
  if (v180)
  {
    v141 = v181;
    if (v181 != -1)
    {
      if (v181 > 15)
        v141 = -1;
      --*(_DWORD *)(v180 + 12 * v141 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Register *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Imm32,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int *v64;
  int *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v8 = a6;
  v11 = (uint64_t)a2;
  v12 = a1;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a7 == 3)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v69 = a5 | 0x100;
  v13 = 1;
  v67 = 1;
  if ((_DWORD)a7 != 3)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v13++ - 2] = a7 | 0x300;
    v67 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v67;
      }
      a1 = (int *)memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v13 = v67 - 1;
      goto LABEL_57;
    }
    v66 = v14;
    v33 = HIBYTE(v69);
    v34 = v69;
    JSC::MacroAssemblerARM64::swap(v11, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v35 = v67 - 1;
    v31 = v67 == 1;
    v68 = v35;
    v36 = (int *)&v69;
    a1 = (int *)&v70[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v70[2 * v68 - 2])
          {
            v65 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v63 = v40 - (char *)a2;
              v64 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v64 + v63);
            }
            a1 = v65;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v68;
      v44 = v68;
      a1 = v41;
    }
    v45 = (int *)&v70[2 * v43 - 2];
    v14 = v66;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v68;
    }
    v13 = v44 - v39;
LABEL_57:
    v67 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v11, (JSC::ARM64LogicalImmediate *)v8, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a4, 0, v46, v47, v48, v49, v50);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a3 << 35) + 0x380000001ALL, 0, v46, v47, v48, v49, v50);
  JSC::DFG::SpeculativeJIT::appendCall(v11, (uint64_t)operationCreateRest, v51, v52, v53, v54, v55, v56, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v57, v58, v59, v60, v61, v62);
}

void JSC::DFG::SpeculativeJIT::compileSpread(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Graph *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  char v124;
  _DWORD *v125;
  char *v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint8x8_t v134;
  __int32 v135;
  uint8x8_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t *v164;
  int v165;
  _DWORD *v166;
  uint64_t *v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  int *v186;
  int v187;
  _DWORD *v188;
  _QWORD *v189;
  _DWORD *v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int8x8_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int *v234;
  int *v235;
  int v236;
  _DWORD *v237;
  _QWORD *v238;
  _DWORD *v239;
  int i;
  int v241;
  unsigned int v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int8x8_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int8x8_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  char v286;
  int *v287;
  int *v288;
  int v289;
  _DWORD *v290;
  _QWORD *v291;
  int *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int8x8_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD *v305;
  uint64_t *v306;
  int v307;
  _DWORD *v308;
  uint64_t *v309;
  _DWORD *v310;
  int j;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int k;
  unsigned int v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int8x8_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  JSC::DFG::Node *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int m;
  unsigned int v368;
  char v369;
  int *v370;
  int *v371;
  int v372;
  _DWORD *v373;
  _QWORD *v374;
  int *v375;
  unsigned int v376;
  _BYTE *v377;
  WTF *v378;
  WTF *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  _BYTE *v384;
  WTF *v385;
  WTF *v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  _BYTE *v390;
  WTF *v391;
  WTF *v392;
  unsigned int v393;
  uint64_t v394;
  int v395;
  _BYTE *v396;
  _BYTE *v397;
  _BYTE *v398;
  unsigned int v399;
  int v400;
  _DWORD *v401;
  _BYTE *v402;
  _BYTE *v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  WTF *v422;
  _QWORD *v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  void *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unsigned int v453;
  char *v454;
  int v455;
  unint64_t v456;
  uint64_t v457;
  int v458;
  WTF *v459;
  WTF *v460;
  char *v461;
  unsigned int v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  char v466;
  char v467;
  unsigned int v468;
  uint64_t v469;
  unsigned __int8 *v470;
  char *v471;
  uint64_t v472;
  unsigned int v473;
  char *v474;
  uint64_t v475;
  _BYTE *v476;
  unsigned __int8 *v477;
  char *v478;
  char *v479;
  int64_t v480;
  JSC::AssemblerBuffer *v481;
  int v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unsigned int v487;
  int v488;
  JSC::DFG::Node *v489;
  int v490;
  int v491;
  WTF *v492;
  unsigned int v493;
  _BYTE v494[24];
  uint64_t v495;
  int v496;
  int v497;
  char v498;
  __int16 v499;
  char v500;
  int v501;
  int v502;
  uint64_t v503;
  int v504;
  int v505;
  char v506;
  __int16 v507;
  char v508;
  int v509;
  int v510;
  int v511;
  unsigned int v512[3];
  int v513;
  int v514;
  int v515;
  uint64_t v516;
  int v517;
  int v518;
  char v519;
  __int16 v520;
  char v521;
  unsigned int v522[3];
  WTF *v523;
  uint64_t v524;
  _BYTE v525[24];
  WTF *v526;
  uint64_t v527;
  _BYTE v528[24];
  uint64_t v529;
  unsigned __int8 v530;
  uint64_t v531;
  unsigned __int8 v532;
  uint64_t v533;
  char v534;
  uint64_t v535;
  unsigned __int8 v536;
  WTF *v537;
  unsigned int v538;
  unsigned int v539;
  _BYTE v540[24];
  _BYTE *v541;
  unsigned int v542;
  unsigned int v543;
  _BYTE v544[24];
  _BYTE *v545;
  unsigned int v546;
  unsigned int v547;
  _BYTE v548[24];
  char *v549;
  unsigned int v550;
  unsigned int v551;
  _WORD v552[16];

  v8 = a2;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BCEE54);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)v8 + 3);
  if ((v14 & 0xFC000000000000) == 0x30000000000000)
  {
    JSC::DFG::SpeculativeJIT::speculateArray((uint64_t)this, v14, v13, a4, a5, a6, a7, a8);
    v14 = *((_QWORD *)v8 + 3);
  }
  v15 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
  v16 = *((_QWORD *)this + 688);
  v17 = (_QWORD *)(v16 + 24);
  v18 = (_QWORD *)(v16 + 8);
  if ((v14 & 1) != 0)
    v18 = v17;
  v19 = *v18 + 32 * *(unsigned int *)((v14 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v20 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v20 != *(_DWORD *)(v19 + 20))
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v19, v20, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v19 + 20) = (_DWORD)v20;
  }
  if (!JSC::DFG::Graph::canDoFastSpread(v15, v8, (const JSC::DFG::AbstractValue *)v19, a4, a5, a6, a7, a8))
  {
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v21, v22, v23, v24, v25, v26, v27);
    ++*((_DWORD *)this + 1196);
    v34 = *((unsigned int *)this + 1194);
    if ((_DWORD)v34 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v34, (uint64_t)v28, v29, v30, v31, v32, v33);
    }
    v42 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v8, v28, v29, v30, v31, v32, v33);
    v43 = (uint64_t)v35;
    v549 = (char *)v552;
    v550 = 1;
    if ((_DWORD)v13 == 1)
    {
LABEL_15:
      if ((_DWORD)v42 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v43, 0, v37, v38, v39, v40, v41);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v42 << 35) + 0x380000001ALL, 0, v37, v38, v39, v40, v41);
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationSpreadGeneric, v44, v45, v46, v47, v48, v49, (int *)&v549);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v50, v51, v52, v53, v54, v55);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v56, v57, v58, v59, v60, v61);
      v62 = *((_DWORD *)v8 + 12);
      *((_DWORD *)this + 1194) = v62;
      *((_DWORD *)this + 1195) = 4;
      v63 = ~v62;
      if (v63 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BCEE5CLL);
      }
      v64 = *((_QWORD *)this + 499) + 24 * (int)v63;
      v65 = *((_DWORD *)v8 + 13);
      *(_QWORD *)v64 = v8;
      *(_DWORD *)(v64 + 8) = v65;
      *(_BYTE *)(v64 + 12) = 6;
      *(_DWORD *)(v64 + 13) = 0;
      *(_BYTE *)(v64 + 17) = 0;
      --*((_DWORD *)this + 1196);
      goto LABEL_19;
    }
    v552[0] = v13 | 0x100;
    v551 = 1;
    v127 = 1;
    while (1)
    {
      v128 = 0;
      v129 = 0;
      v130 = v549;
      v131 = v127;
      do
      {
        if ((v549[v128 + 1] & 0x40) != 0)
          goto LABEL_305;
        v129 |= 1 << v549[v128 + 1];
        v128 += 2;
      }
      while (2 * v127 != v128);
      v132 = 0;
      do
      {
        v133 = v549[v132] & 0x7F;
        if (v133 >= 0x40)
          goto LABEL_305;
        v129 &= ~(1 << v133);
        v132 += 2;
      }
      while (2 * v127 != v132);
      v134 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
      v134.i16[0] = vaddlv_u8(v134);
      v135 = v134.i32[0];
      v136 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v129));
      v136.i16[0] = vaddlv_u8(v136);
      if (!(v136.i32[0] + v135))
      {
        v489 = v8;
        v483 = v13;
        v485 = v11;
        v466 = *v549;
        v467 = v549[1];
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *v549, v467, v37, v38, v39, v40, v41);
        memmove(v549, v549 + 2, 2 * v551 - 2);
        v468 = v551;
        v469 = v551 - 1;
        v551 = v469;
        v470 = (unsigned __int8 *)v549;
        v471 = &v549[2 * v469];
        if (v468 == 1)
        {
          v472 = 0;
          v473 = 0;
          v491 = 0;
          v35 = &v549[2 * v469];
        }
        else
        {
          v475 = 2 * v469;
          v476 = v549;
          while (*v476 != v467)
          {
            v476 += 2;
            v475 -= 2;
            if (!v475)
              goto LABEL_290;
          }
          *v476 = v466;
LABEL_290:
          v491 = 0;
          v477 = v470;
          v478 = v471;
          v35 = v471;
          do
          {
            if (*v470 == v470[1])
            {
              v479 = (char *)v470;
              if (v478 != &v549[2 * v551])
              {
                if (v470 == (unsigned __int8 *)v35)
                {
                  v479 = v478;
                }
                else
                {
                  v480 = v477 - (unsigned __int8 *)v35;
                  memmove(v478, v35, v477 - (unsigned __int8 *)v35);
                  v479 = &v478[v480];
                }
              }
              v35 = (char *)(v470 + 2);
              ++v491;
              v478 = v479;
            }
            v470 += 2;
            v477 += 2;
          }
          while (v470 < (unsigned __int8 *)v471);
          v470 = (unsigned __int8 *)v549;
          v472 = v551;
          v473 = v551;
          v471 = v478;
        }
        v474 = (char *)&v470[2 * v472];
        if (v35 != v474)
        {
          memmove(v471, v35, v474 - v35);
          v473 = v551;
        }
        v127 = v473 - v491;
        v13 = v483;
        v11 = v485;
        v8 = v489;
        goto LABEL_71;
      }
      v137 = 0;
      v138 = v127 <= 1uLL ? 1 : v127;
      v139 = 2 * v138;
      while (1)
      {
        v140 = v549[v137 + 1];
        if ((v140 & 0x7Fu) >= 0x40)
          goto LABEL_305;
        if (((v129 >> (v140 & 0x7F)) & 1) != 0)
          break;
        v137 += 2;
        if (v139 == v137)
          goto LABEL_72;
      }
      v141 = v549[v137];
      if (v141 != v140)
        break;
LABEL_70:
      memmove(&v130[v137], &v130[v137 + 2], 2 * v131 - v137 - 2);
      v127 = v551 - 1;
LABEL_71:
      v551 = v127;
LABEL_72:
      if (!v127)
      {
        v147 = (unint64_t)v549;
        if (v552 != (_WORD *)v549 && v549)
        {
          v549 = 0;
          v550 = 0;
          WTF::fastFree(v147, v35, v36, v37, v38, v39, v40, v41);
        }
        goto LABEL_15;
      }
    }
    v142 = v13;
    v143 = v11;
    if ((char)v141 == 63)
    {
      if ((char)v140 != 31)
      {
        v145 = v140 & 0x1F | 0xD2800000;
        goto LABEL_67;
      }
    }
    else if (v140 != 31 && (char)v141 != 31)
    {
      v145 = v140 & 0xFFE0FFFF | ((v141 & 0x1F) << 16) | 0xAA0003E0;
LABEL_67:
      v146 = *((_DWORD *)this + 50);
      if (v146 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
        v146 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v146) = v145;
      *((_DWORD *)this + 50) += 4;
      v130 = v549;
      v131 = v551;
      v11 = v143;
      v13 = v142;
      goto LABEL_70;
    }
    v145 = (char)v140 | (32 * (char)v141) | 0x91000000;
    goto LABEL_67;
  }
  v67 = &v518;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v535, this, v22, v23, v24, v25, v26, v27);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v533, this, v68, v69, v70, v71, v72, v73);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v531, this, v74, v75, v76, v77, v78, v79);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v529, this, v80, v81, v82, v83, v84, v85);
  v92 = 0;
  v93 = (_DWORD *)((char *)this + 4976);
  v94 = 0x17u;
  v95 = -1;
  while (*v93)
  {
LABEL_30:
    ++v92;
    v93 += 3;
    if (v92 == 23)
    {
      v92 = v94;
      v97 = (unsigned int *)((char *)this + 12 * v94 + 4968);
      v98 = *v97;
      *(_QWORD *)v97 = 0xFFFFFFFF3FFFFFFFLL;
      v93 = v97 + 2;
      goto LABEL_33;
    }
  }
  v96 = *(v93 - 1);
  if (v96 != -1)
  {
    if (v96 < v95)
    {
      v94 = v92;
      v95 = *(v93 - 1);
    }
    goto LABEL_30;
  }
  v98 = *(v93 - 2);
  *((_QWORD *)v93 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_33:
  v484 = v11;
  *v93 = 1;
  v487 = JSC::FPRInfo::toRegister::registerForIndex[v92];
  if (v98 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v98, v86, v87, v88, v89, v90, v91);
  v486 = v536;
  v99 = (char)v536;
  v100 = v534;
  v488 = v532;
  v101 = v530;
  v526 = (WTF *)v528;
  v527 = 2;
  v523 = (WTF *)v525;
  v524 = 2;
  v102 = v13 | 0x400000000;
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v102, v100, v87, v88, v89, v90, v91);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0x1F, v100, v100);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v100, 25, v103, v104, v105, v106, (uint64_t)v522);
  v107 = v13 | 0x800000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v107, v99, v108, v109, v110, v111, v112);
  v490 = v99;
  v120 = v99 | (32 * v99) | 0xD1004000;
  v481 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v121 = *((_DWORD *)this + 50);
  if (v121 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v113, v114, v115, v116, v117, v118, v119);
    v121 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v121) = v120;
  v122 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v122; v122 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v122)
  {
    if ((v122 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v113, v114, v115, v116, v117, v118, v119);
      v122 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v122) = -721215457;
    v122 = *((_DWORD *)this + 50) + 4;
  }
  v123 = v122;
  if ((v122 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v113, v114, v115, v116, v117, v118, v119);
    v123 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v123) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v124 = 69;
  else
    v124 = 65;
  v517 = v122;
  v518 = 0;
  v519 = v124;
  v520 = 15;
  v521 = -1;
  if (v122 != -1)
  {
    if (HIDWORD(v524) == (_DWORD)v524)
    {
      v125 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v523, (void *)(HIDWORD(v524) + 1), (unint64_t)&v517, v115, v116, v117, v118, v119);
      v67 = v125 + 1;
      v126 = (char *)v523 + 12 * HIDWORD(v524);
      *(_DWORD *)v126 = *v125;
    }
    else
    {
      v126 = (char *)v523 + 12 * HIDWORD(v524);
      *(_DWORD *)v126 = v122;
    }
    *(_QWORD *)(v126 + 4) = *(_QWORD *)v67;
    ++HIDWORD(v524);
  }
  v482 = v13;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v522, (uint64_t)this, v114, v115, v116, v117, v118, v119);
  v148 = (char)v100;
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xE, v100, v100);
  v156 = v100 | (32 * v100);
  v157 = *((_DWORD *)this + 50);
  if (v157 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v149, v150, v151, v152, v153, v154, v155);
    v157 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v157) = v156 | 0x51001000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, (char)v100, 4, v152, v153, v154, v155, (uint64_t)&v515);
  if (v515 != -1)
  {
    if (HIDWORD(v527) == (_DWORD)v527)
    {
      v163 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v526, (void *)(HIDWORD(v527) + 1), (unint64_t)&v515, v158, v159, v160, v161, v162);
      v165 = *v163;
      v164 = (uint64_t *)(v163 + 1);
      v166 = (_DWORD *)((char *)v526 + 12 * HIDWORD(v527));
      *v166 = v165;
      v167 = (uint64_t *)(v166 + 1);
    }
    else
    {
      v168 = (_DWORD *)((char *)v526 + 12 * HIDWORD(v527));
      *v168 = v515;
      v167 = (uint64_t *)(v168 + 1);
      v164 = &v516;
    }
    *v167 = *v164;
    ++HIDWORD(v527);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v107, (char)v101, v158, v159, v160, v161, v162);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v101 | 0xFFFFFFF800000000, (char)v101, v169, v170, v171, v172, v173);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, (char)v101, 0x10000000, v174, v175, v176, v177, (uint64_t)&v513);
  if (v513 != -1)
  {
    if (HIDWORD(v527) == (_DWORD)v527)
    {
      v185 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v526, (void *)(HIDWORD(v527) + 1), (unint64_t)&v513, v180, v181, v182, v183, v184);
      v187 = *v185;
      v186 = v185 + 1;
      v188 = (_DWORD *)((char *)v526 + 12 * HIDWORD(v527));
      *v188 = v187;
      v189 = v188 + 1;
    }
    else
    {
      v190 = (_DWORD *)((char *)v526 + 12 * HIDWORD(v527));
      *v190 = v513;
      v189 = v190 + 1;
      v186 = &v514;
    }
    *v189 = *(_QWORD *)v186;
    ++HIDWORD(v527);
  }
  v191 = *((_DWORD *)this + 50);
  if (v191 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v178, v179, v180, v181, v182, v183, v184);
    v191 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v191) = v100 & 0x1F | (32 * (v101 & 0x1F)) | 0x531D7000;
  v192 = *((_DWORD *)this + 50);
  v193 = v192 + 4;
  *((_DWORD *)this + 50) = v192 + 4;
  if ((v192 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v178, v179, v180, v181, v182, v183, v184);
    v193 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v193) = v156 | 0x11004000;
  *((_DWORD *)this + 50) += 4;
  v194 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v195 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), *(_QWORD *)(v194 + 41656), (int *)&v549, v180, v181, v182, v183, v184);
  v196 = v194 + 10792;
  v197 = (char)v488;
  JSC::AssemblyHelpers::emitAllocateVariableSized(this, v490, v196, v100, v148, v197, (uint64_t)&v526, 1);
  v203 = (v195 >> 4) | ((unint64_t)*(unsigned int *)(v195 + 8) << 32);
  if (v203)
  {
    if (*((_BYTE *)this + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg(this, v203, (uint64_t)this + 264, v198, v199, v200, v201, v202);
      v204 = 16;
      goto LABEL_99;
    }
    __break(0xC471u);
LABEL_311:
    JUMPOUT(0x197BCEC40);
  }
  v204 = 63;
LABEL_99:
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v204, v486, v198, v199, v200, v201, v202);
  v212 = *((_DWORD *)this + 50);
  if (v212 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v205, v206, v207, v208, v209, v210, v211);
    v212 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v212) = v101 & 0x1F | ((v101 & 0x1F) << 10) | (32 * (char)v486) | 0x29010000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v107, v148, v207, v208, v209, v210, v211);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v102, v197, v213, v214, v215, v216, v217);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xE, v488, (char)v488);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, v197, 6, v218, v219, v220, v221, (uint64_t)v512);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, (char)v101, v222, v223, v224, v225, (uint64_t)&v510, v226);
  if (v510 != -1)
  {
    if (HIDWORD(v524) == (_DWORD)v524)
    {
      v234 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v523, (void *)(HIDWORD(v524) + 1), (unint64_t)&v510, v229, v230, v231, v232, v233);
      v236 = *v234;
      v235 = v234 + 1;
      v237 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v237 = v236;
      v238 = v237 + 1;
    }
    else
    {
      v239 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v239 = v510;
      v238 = v239 + 1;
      v235 = &v511;
    }
    *v238 = *(_QWORD *)v235;
    ++HIDWORD(v524);
  }
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v227, v228, v229, v230, v231, v232, v233);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v241 = (char)v101 | (32 * (char)v101) | 0x51000400;
  v242 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v227, v228, v229, v230, v231, v232, v233);
    v242 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v242) = v241;
  *((_DWORD *)this + 50) += 4;
  v243 = (v101 << 8) | 0x300000000 | v100;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v243, 0x200000000uLL, v197, v230, v231, v232, v233);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v197, 0xFFFFFFFFLL, v244, v245, v246, v247, (uint64_t)&v549, v248);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, v197, v249, v250, v251, v252, v253);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v549, (uint64_t)this, v254, v255, v256, v257, v258, v259);
  v260 = (v101 << 8) | 0x300000000 | v486;
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v488, v260, 0x200000010uLL, v261, v262, v263, v264);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, (char)v101, v265, v266, v267, v268, (uint64_t)&v545, v269);
  v509 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v545, (unsigned int *)&v509, (uint64_t)this, v270, v271, v272, v273, v274);
  v282 = *((_DWORD *)this + 50);
  if (v282 < *((_DWORD *)this + 13))
  {
    v283 = v487;
    v284 = (char)v101;
    do
    {
      if ((v282 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v481, v275, v276, v277, v278, v279, v280, v281);
        v282 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v282) = -721215457;
      v282 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v282;
    }
    while (v282 < *((_DWORD *)this + 13));
  }
  else
  {
    v283 = v487;
    v284 = (char)v101;
  }
  v285 = v282;
  if ((v282 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v275, v276, v277, v278, v279, v280, v281);
    v285 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v285) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v286 = 69;
  else
    v286 = 65;
  v504 = v282;
  v505 = 0;
  v506 = v286;
  v507 = 15;
  v508 = -1;
  if (v282 != -1)
  {
    if (HIDWORD(v524) == (_DWORD)v524)
    {
      v287 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v523, (void *)(HIDWORD(v524) + 1), (unint64_t)&v504, v277, v278, v279, v280, v281);
      v289 = *v287;
      v288 = v287 + 1;
      v290 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v290 = v289;
      v291 = v290 + 1;
    }
    else
    {
      v292 = (int *)((char *)v523 + 12 * HIDWORD(v524));
      *v292 = v282;
      v291 = v292 + 1;
      v288 = &v505;
    }
    *v291 = *(_QWORD *)v288;
    ++HIDWORD(v524);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v512, (uint64_t)this, v276, v277, v278, v279, v280, v281);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, v284, v293, v294, v295, v296, (uint64_t)&v502, v297);
  if (v502 != -1)
  {
    if (HIDWORD(v524) == (_DWORD)v524)
    {
      v305 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v523, (void *)(HIDWORD(v524) + 1), (unint64_t)&v502, v300, v301, v302, v303, v304);
      v307 = *v305;
      v306 = (uint64_t *)(v305 + 1);
      v308 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v308 = v307;
      v309 = (uint64_t *)(v308 + 1);
    }
    else
    {
      v310 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v310 = v502;
      v309 = (uint64_t *)(v310 + 1);
      v306 = &v503;
    }
    *v309 = *v306;
    ++HIDWORD(v524);
  }
  for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
  {
    if ((j + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v298, v299, v300, v301, v302, v303, v304);
      j = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
    j = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  v312 = j;
  if ((j + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v298, v299, v300, v301, v302, v303, v304);
    v312 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v312) = v241;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, v243, 0x200000000uLL, v283, v301, v302, v303, v304);
  v320 = *((_DWORD *)this + 50);
  if (v320 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v313, v314, v315, v316, v317, v318, v319);
    v320 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v320) = ((_DWORD)v283 << 16) | (32 * v283) | 0x1E602000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)this, 0, v314, v315, v316, v317, v318, v319, (uint64_t)&v549);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, v197, v321, v322, v323, v324, v325);
  for (k = *((_DWORD *)this + 50); (signed int)k < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = k)
  {
    if (k + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v326, v327, v328, v329, v330, v331, v332);
      k = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + k) = -721215457;
    k = *((_DWORD *)this + 50) + 4;
  }
  v334 = k;
  if (k + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v326, v327, v328, v329, v330, v331, v332);
    v334 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v334) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v335 = 69;
  else
    v335 = 65;
  v545 = (_BYTE *)k;
  LOBYTE(v546) = v335;
  *(_WORD *)((char *)&v546 + 1) = 15;
  HIBYTE(v546) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v549, (uint64_t)this, v327, v328, v329, v330, v331, v332);
  v343 = *((_DWORD *)this + 50);
  if (v343 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v336, v337, v338, v339, v340, v341, v342);
    v343 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v343) = (32 * v283) | v488 & 0x1F | 0x9E660000;
  v344 = *((_DWORD *)this + 50);
  v345 = v344 + 4;
  *((_DWORD *)this + 50) = v344 + 4;
  if (v488 == 31)
  {
    if ((v344 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v336, v337, v338, v339, v340, v341, v342);
      v345 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v345) = -885300225;
    *((_DWORD *)this + 50) += 4;
  }
  else
  {
    JSC::AssemblerBuffer::putInt(v481, v488 & 0x1F | (32 * (v488 & 0x1F)) | 0xCB1B0000, v337, v338, v339, v340, v341, v342);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v545, (uint64_t)this, v337, v338, v339, v340, v341, v342);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v197, v260, 0x200000010uLL, v346, v347, v348, v349);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 1, v284, v350, v351, v352, v353, (uint64_t)&v541, v354);
  v501 = j;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v541, (unsigned int *)&v501, (uint64_t)this, v355, v356, v357, v358, v359);
  for (m = *((_DWORD *)this + 50); m < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = m)
  {
    if ((m + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v481, v360, (uint64_t)v361, v362, v363, v364, v365, v366);
      m = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + m) = -721215457;
    m = *((_DWORD *)this + 50) + 4;
  }
  v368 = m;
  if ((m + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v360, (uint64_t)v361, v362, v363, v364, v365, v366);
    v368 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v368) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v369 = 69;
  else
    v369 = 65;
  v496 = m;
  v497 = 0;
  v498 = v369;
  v499 = 15;
  v500 = -1;
  if (m != -1)
  {
    if (HIDWORD(v524) == (_DWORD)v524)
    {
      v370 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v523, (void *)(HIDWORD(v524) + 1), (unint64_t)&v496, v362, v363, v364, v365, v366);
      v372 = *v370;
      v371 = v370 + 1;
      v373 = (_DWORD *)((char *)v523 + 12 * HIDWORD(v524));
      *v373 = v372;
      v374 = v373 + 1;
    }
    else
    {
      v375 = (int *)((char *)v523 + 12 * HIDWORD(v524));
      *v375 = m;
      v374 = v375 + 1;
      v371 = &v497;
    }
    *v374 = *(_QWORD *)v371;
    ++HIDWORD(v524);
  }
  v376 = HIDWORD(v527);
  v492 = (WTF *)v494;
  v493 = HIDWORD(v527);
  if (HIDWORD(v527) >= 3)
  {
    if (HIDWORD(v527) < 0x15555556)
    {
      v377 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v527)));
      v492 = (WTF *)v377;
      v376 = HIDWORD(v527);
      goto LABEL_158;
    }
LABEL_306:
    __break(0xC471u);
    JUMPOUT(0x197BCEE84);
  }
  v377 = v494;
LABEL_158:
  if (v376)
  {
    v378 = v526;
    v379 = (WTF *)((char *)v526 + 12 * v376);
    do
    {
      *(_DWORD *)v377 = *(_DWORD *)v378;
      *(_QWORD *)(v377 + 4) = *(_QWORD *)((char *)v378 + 4);
      v378 = (WTF *)((char *)v378 + 12);
      v377 += 12;
    }
    while (v378 != v379);
  }
  v380 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v8, v361, v362, v363, v364, v365, v366);
  v382 = v381;
  v383 = v493;
  v537 = (WTF *)v540;
  v538 = 2;
  v539 = v493;
  if (v493 < 3)
  {
    v384 = v540;
  }
  else
  {
    if (v493 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCEE8CLL);
    }
    v384 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v493));
    v538 = 12 * v493 / 0xC;
    v537 = (WTF *)v384;
    v383 = v493;
  }
  if (v383)
  {
    v385 = v492;
    v386 = (WTF *)((char *)v492 + 12 * v383);
    do
    {
      *(_DWORD *)v384 = *(_DWORD *)v385;
      *(_QWORD *)(v384 + 4) = *(_QWORD *)((char *)v385 + 4);
      v385 = (WTF *)((char *)v385 + 12);
      v384 += 12;
    }
    while (v385 != v386);
  }
  v387 = WTF::fastMalloc((WTF *)0xB8);
  v388 = v539;
  v541 = v544;
  v542 = 2;
  v543 = v539;
  if (v539 < 3)
  {
    v390 = v544;
  }
  else
  {
    if (v539 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCEE94);
    }
    v389 = 12 * v539;
    v390 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v539));
    v542 = (v389 & 0xFFFFFFFC) / 0xC;
    v541 = v390;
    v388 = v539;
  }
  if (v388)
  {
    v391 = v537;
    v392 = (WTF *)((char *)v537 + 12 * v388);
    do
    {
      *(_DWORD *)v390 = *(_DWORD *)v391;
      *(_QWORD *)(v390 + 4) = *(_QWORD *)((char *)v391 + 4);
      v391 = (WTF *)((char *)v391 + 12);
      v390 += 12;
    }
    while (v391 != v392);
  }
  v393 = v543;
  v545 = v548;
  v546 = 2;
  v547 = v543;
  if (v543 < 3)
  {
    v394 = v382;
    v396 = v548;
  }
  else
  {
    if (v543 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BCEE9CLL);
    }
    v394 = v382;
    v395 = 12 * v543;
    v396 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v543));
    v546 = (v395 & 0xFFFFFFFC) / 0xC;
    v545 = v396;
    v393 = v543;
  }
  if (v393)
  {
    v397 = v541;
    v398 = &v541[12 * v393];
    do
    {
      *(_DWORD *)v396 = *(_DWORD *)v397;
      *(_QWORD *)(v396 + 4) = *(_QWORD *)(v397 + 4);
      v397 += 12;
      v396 += 12;
    }
    while (v397 != v398);
  }
  v399 = v547;
  v549 = (char *)v552;
  v550 = 2;
  v551 = v547;
  if (v547 < 3)
  {
    v401 = v552;
  }
  else
  {
    if (v547 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_311;
    }
    v400 = 12 * v547;
    v401 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v547));
    v550 = (v400 & 0xFFFFFFFC) / 0xC;
    v549 = (char *)v401;
    v399 = v547;
  }
  if (v399)
  {
    v402 = v545;
    v403 = &v545[12 * v399];
    do
    {
      *v401 = *(_DWORD *)v402;
      *(_QWORD *)(v401 + 1) = *(_QWORD *)(v402 + 4);
      v402 += 12;
      v401 += 3;
    }
    while (v402 != v403);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v387, (uint64_t *)&v549, this);
  v411 = (unint64_t)v549;
  if (v552 != (_WORD *)v549 && v549 != 0)
  {
    v549 = 0;
    v550 = 0;
    WTF::fastFree(v411, v404, v405, v406, v407, v408, v409, v410);
  }
  *(_QWORD *)v387 = off_1E35738F0;
  *(_QWORD *)(v387 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v387 + 100) = 0;
  *(_BYTE *)(v387 + 102) = v490;
  *(_QWORD *)(v387 + 104) = v387 + 120;
  *(_QWORD *)(v387 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v387 + 104, v490, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v409, v410);
  v420 = (unint64_t)v545;
  if (v548 != v545 && v545)
  {
    v545 = 0;
    v546 = 0;
    WTF::fastFree(v420, v413, v414, v415, v416, v417, v418, v419);
  }
  *(_QWORD *)v387 = &off_1E35738C0;
  *(_QWORD *)(v387 + 152) = operationSpreadFastArray;
  *(_QWORD *)(v387 + 160) = v380;
  *(_QWORD *)(v387 + 168) = v394;
  LODWORD(v13) = v482;
  *(_BYTE *)(v387 + 176) = v482;
  v495 = v387;
  v421 = (unint64_t)v541;
  if (v544 != v541 && v541)
  {
    v541 = 0;
    v542 = 0;
    WTF::fastFree(v421, v413, v414, v415, v416, v417, v418, v419);
  }
  v422 = v537;
  if (v540 != (_BYTE *)v537 && v537)
  {
    v537 = 0;
    v538 = 0;
    WTF::fastFree((unint64_t)v422, v413, v414, v415, v416, v417, v418, v419);
  }
  v423 = (_QWORD *)((char *)this + 5656);
  v424 = *((unsigned int *)this + 1417);
  if ((_DWORD)v424 == *((_DWORD *)this + 1416))
  {
    v426 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v423, v424 + 1, (unint64_t)&v495);
    v424 = *((unsigned int *)this + 1417);
    v425 = (_QWORD *)(*((_QWORD *)this + 707) + 8 * v424);
  }
  else
  {
    v425 = (_QWORD *)(*v423 + 8 * v424);
    v426 = &v495;
  }
  v427 = *v426;
  *v426 = 0;
  *v425 = v427;
  *((_DWORD *)this + 1417) = v424 + 1;
  v428 = v495;
  v495 = 0;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  if (v494 != (_BYTE *)v492 && v492)
    WTF::fastFree((unint64_t)v492, v413, v414, v415, v416, v417, v418, v419);
  v11 = v484;
  if (HIDWORD(v524))
  {
    v429 = 0;
    v430 = 0;
    v431 = 12 * HIDWORD(v524);
    do
    {
      if (v430 >= HIDWORD(v524))
      {
        __break(0xC471u);
        JUMPOUT(0x197BCEE4CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v523 + v429), (uint64_t)this, v414, v415, v416, v417, v418, v419);
      ++v430;
      v429 += 12;
    }
    while (v431 != v429);
  }
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v415, v416, v417, v418, v419, (uint64_t)&v549);
  v439 = *((_DWORD *)this + 50);
  if (v439 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v481, v432, v433, v434, v435, v436, v437, v438);
    v439 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v439) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v549, (uint64_t)this, v433, v434, v435, v436, v437, v438);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v440, v441, v442, v443, v444, v445);
  if (v490 > 15)
    v453 = -1;
  else
    v453 = v490;
  v454 = (char *)this + 12 * v453;
  v455 = *((_DWORD *)v8 + 12);
  *((_DWORD *)v454 + 1194) = v455;
  *((_DWORD *)v454 + 1195) = 4;
  v456 = ~v455;
  if (v456 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_305:
    __break(1u);
    goto LABEL_306;
  }
  v457 = *((_QWORD *)this + 499) + 24 * (int)v456;
  v458 = *((_DWORD *)v8 + 13);
  *(_QWORD *)v457 = v8;
  *(_DWORD *)(v457 + 8) = v458;
  *(_BYTE *)(v457 + 17) = v490;
  *(_DWORD *)(v457 + 12) = 6;
  *(_BYTE *)(v457 + 16) = 0;
  v459 = v523;
  if (v525 != (_BYTE *)v523 && v523)
  {
    v523 = 0;
    LODWORD(v524) = 0;
    WTF::fastFree((unint64_t)v459, v446, v447, v448, v449, v450, v451, v452);
  }
  v460 = v526;
  if (v528 != (_BYTE *)v526 && v526)
  {
    v526 = 0;
    LODWORD(v527) = 0;
    WTF::fastFree((unint64_t)v460, v446, v447, v448, v449, v450, v451, v452);
  }
  v461 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v487] + 4968;
  --*((_DWORD *)v461 + 2);
  if (v529)
  {
    v462 = (char)v530;
    if ((char)v530 != -1)
    {
      if ((char)v530 > 15)
        v462 = -1;
      --*(_DWORD *)(v529 + 12 * v462 + 4784);
    }
  }
  if (v531)
  {
    v463 = (char)v532;
    if ((char)v532 != -1)
    {
      if ((char)v532 > 15)
        v463 = -1;
      --*(_DWORD *)(v531 + 12 * v463 + 4784);
    }
  }
  if (v533)
  {
    v464 = v534;
    if (v534 != -1)
    {
      if (v534 > 15)
        v464 = -1;
      --*(_DWORD *)(v533 + 12 * v464 + 4784);
    }
  }
  if (v535)
  {
    v465 = (char)v536;
    if ((char)v536 != -1)
    {
      if ((char)v536 > 15)
        v465 = -1;
      --*(_DWORD *)(v535 + 12 * v465 + 4784);
    }
  }
LABEL_19:
  if (v11)
  {
    if ((int)v13 > 15)
      v66 = -1;
    else
      v66 = v13;
    --*((_DWORD *)this + 3 * v66 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::speculateArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 36, v17, v18, v19, v20, (uint64_t)v23);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 2uLL, (uint64_t)v23, 1uLL, v21, v22);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::MacroAssemblerARM64::load64(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v8 = a4;
  v10 = a2;
  v12 = HIDWORD(a2);
  if (HIDWORD(a2) == 3 || HIDWORD(a2) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a3) < 3u)
      {
        v26 = (32 * (char)v16) | v8 & 0x1F | 0xF8600800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x197BCF1B8);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a3) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197BCF1E8);
  }
  v17 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a3) << 56) >> 54)) | (((v10 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = (32 * (char)v10) | v8 & 0x1F | 0xF8716800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

void JSC::MacroAssemblerARM64::store64(uint64_t a1, char a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = a3;
  v12 = HIDWORD(a3);
  if (HIDWORD(a3) == 3 || HIDWORD(a3) == 0)
  {
    v16 = (unsigned __int16)JSC::MacroAssemblerARM64::tryFoldBaseAndOffsetPart(a1, a3, a4, a4, a5, a6, a7, a8);
    if (v16 >= 0x100)
    {
      if (BYTE4(a4) < 3u)
      {
        v26 = (32 * (char)v16) | a2 & 0x1F | 0xF8200800;
        v28 = *(_DWORD *)(a1 + 200);
        v27 = (unsigned int *)(a1 + 200);
        v22 = v28;
        v23 = v26 | *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | (((_DWORD)v12 != 0) << 12);
        v20 = (JSC::AssemblerBuffer *)(v27 - 36);
        v24 = v28 + 4;
        v25 = *(v27 - 2);
        v19 = v27;
        goto LABEL_14;
      }
LABEL_19:
      __break(0xC471u);
      JUMPOUT(0x197BCF3DCLL);
    }
  }
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_19;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (BYTE4(a4) >= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x197BCF40CLL);
  }
  v17 = *(_DWORD *)((char *)&unk_199123E70 + ((uint64_t)(HIDWORD(a4) << 56) >> 54)) | (((v9 >> 8) & 0x1F) << 16) | ((v12 & 7) << 10) | 0x8B200231;
  v19 = (unsigned int *)(a1 + 200);
  v18 = *(_DWORD *)(a1 + 200);
  v20 = (JSC::AssemblerBuffer *)(a1 + 56);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v14, v15, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v17;
  v21 = *(_DWORD *)(a1 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a1 + 200) = v21 + 4;
  v23 = (32 * (char)v9) | a2 & 0x1F | 0xF8316800;
  v24 = v21 + 8;
  v25 = *(_DWORD *)(a1 + 192);
LABEL_14:
  if (v24 > v25)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, v14, v15, a4, a5, a6, a7, a8);
    v22 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v22) = v23;
  *v19 += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewArray(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  int v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _DWORD *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *result;
  unsigned int v79;
  char *v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  JSC::DFG::Node *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  JSC::DFG::Node *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  _BYTE v224[12];
  _BYTE v225[12];
  uint64_t *v226;
  unint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  char v230;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v87 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v88 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v88 != 0x3FFFFFFF) ? (v89 = v88 == -1) : (v89 = 1), v89))
  {
    v90 = 2;
  }
  else if (v88 >> 28)
  {
    v222 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v222 = v87;
    *(_DWORD *)(v222 + 8) = v88;
    v90 = 1;
    v87 = v222;
  }
  else
  {
    v90 = v87;
    v87 = 0;
  }
  v11 = v87 | v90;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v87 | v90) & 1) == 0)
    goto LABEL_3;
  v91 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v92 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v92 != 0x3FFFFFFF) ? (v93 = v92 == -1) : (v93 = 1), v93))
  {
    v94 = 2;
  }
  else if (v92 >> 28)
  {
    v223 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v223 = v91;
    *(_DWORD *)(v223 + 8) = v92;
    v94 = 1;
    v91 = v223;
  }
  else
  {
    v94 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v91 = 0;
  }
  v95 = v91 | v94;
  v13 = (_QWORD *)(v95 & 0xFFFFFFFF8);
  if ((v95 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((unsigned __int16 *)a2 + 9);
  if (v18 != 267)
  {
    if (v18 == 264)
    {
      v19 = *((_DWORD *)a2 + 19);
      goto LABEL_77;
    }
    if (v18 != 352)
    {
      v19 = *((_DWORD *)a2 + 18);
      goto LABEL_13;
    }
  }
  v19 = *((_DWORD *)a2 + 21);
LABEL_77:
  LOBYTE(v19) = v19 & 0xF;
LABEL_13:
  if ((v19 & 0x10) != 0)
    v20 = ((v19 & 0xEu) + 10) >> 1;
  else
    v20 = (v19 >> 1) & 7;
  v21 = *(_DWORD *)(v17 + 4 * v20 + 892);
  if (v21)
    v22 = 16 * (v21 & 0xFFFFFFFE);
  else
    v22 = 0;
  v30 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v22, (int *)&v226, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(*(_QWORD *)(v17 + 2048) + 4) == 2)
    goto LABEL_111;
  v31 = *((unsigned __int16 *)a2 + 9);
  if (v31 == 267)
    goto LABEL_78;
  if (v31 == 264)
  {
    if ((*((_QWORD *)a2 + 9) & 0xE00000000uLL) <= 0x900000000)
    {
      v34 = (unsigned int *)((char *)a2 + 32);
      v33 = *((_QWORD *)a2 + 4);
      v35 = v33;
      v36 = (unsigned int *)((char *)a2 + 80);
      goto LABEL_26;
    }
LABEL_111:
    if (!*((_QWORD *)a2 + 4))
    {
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v23, v24, v25, v26, v27, v28, v29);
      ++*((_DWORD *)this + 1196);
      v178 = *((unsigned int *)this + 1194);
      if ((_DWORD)v178 != 0x3FFFFFFF)
      {
        *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v178, v172, v173, v174, v175, v176, v177);
      }
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure>((int *)&v226, this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v30, v174, v175, v176, v177);
      v169 = (uint64_t *)this;
      v170 = a2;
      v171 = 0;
      goto LABEL_162;
    }
    v96 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * *((_QWORD *)a2 + 4), v24, v25, v26, v27, v28, v29);
    if (v96)
      v104 = v96 + 8;
    else
      v104 = 0;
    v105 = *((unsigned __int16 *)a2 + 9);
    if (v105 != 267)
    {
      if (v105 == 264)
      {
        v106 = *((_DWORD *)a2 + 19);
        goto LABEL_189;
      }
      if (v105 != 352)
      {
        v106 = *((_DWORD *)a2 + 18);
        goto LABEL_119;
      }
    }
    v106 = *((_DWORD *)a2 + 21);
LABEL_189:
    LOBYTE(v106) = v106 & 0xF;
LABEL_119:
    if (v106 > 0x19u)
      goto LABEL_210;
    v107 = 1 << v106;
    if ((v107 & 0x2203F30) == 0)
    {
      if ((v107 & 0x8000C0) == 0)
        goto LABEL_210;
      if (*((_DWORD *)a2 + 8))
      {
        v179 = 0;
        do
        {
          v180 = *((_QWORD *)this + 495);
          v181 = v179 + *((_DWORD *)a2 + 6);
          if (*(_DWORD *)(v180 + 164) <= v181)
          {
            __break(0xC471u);
            JUMPOUT(0x197BD001CLL);
          }
          v182 = *(_QWORD *)(*(_QWORD *)(v180 + 152) + 8 * v181);
          JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v226, (uint64_t)this, v182, v99, v100, v101, v102, v103);
          v189 = v228;
          if (v228 == 255)
          {
            v189 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v226, v227, v183, v184, v185, v186, v187, v188);
            v228 = v189;
          }
          if (JSC::DFG::SpeculativeJIT::needsTypeCheck((uint64_t)this, v182, 0x3000000000, v184, v185, v186, v187, v188))
          {
            JSC::AssemblyHelpers::branchIfNaN(this, (char)v189, v98, v99, v100, v101, v102, v103, (uint64_t)v225);
            JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)0xFF80000000, v182, 0x3000000000uLL, (uint64_t)v225, 1uLL, v190, v191);
          }
          v192 = (char *)v226
               + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v228];
          --*((_DWORD *)v192 + 1244);
          ++v179;
        }
        while (v179 < *((_QWORD *)a2 + 4));
        if (*((_QWORD *)a2 + 4))
        {
          v193 = 0;
          v194 = v104;
          do
          {
            v195 = *((_QWORD *)this + 495);
            v196 = v193 + *((_QWORD *)a2 + 3);
            if (*(_DWORD *)(v195 + 164) <= v196)
            {
              __break(0xC471u);
              JUMPOUT(0x197BD0024);
            }
            JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v226, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v195 + 152) + 8 * v196), v99, v100, v101, v102, v103);
            v203 = v228;
            if (v228 == 255)
            {
              v203 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v226, v227, v197, v198, v199, v200, v201, v202);
              v228 = v203;
            }
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v229, this, v197, v198, v199, v200, v201, v202);
            v204 = v230;
            JSC::AssemblyHelpers::boxDouble(this, (char)v203, v204, 1, v205, v206, v207, v208);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v204, v194, v209, v210, v211, v212, v213);
            JSC::DFG::SpeculativeJIT::use(v226, (JSC::DFG::Node *)(v227 & 0xFF00FFFFFFFFFFFFLL), v214, v215, v216, v217, v218, v219);
            if (v229)
            {
              v220 = v230;
              if (v230 != -1)
              {
                if (v230 > 15)
                  v220 = -1;
                --*(_DWORD *)(v229 + 12 * v220 + 4784);
              }
            }
            v221 = (char *)v226
                 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v228];
            --*((_DWORD *)v221 + 1244);
            ++v193;
            v194 += 8;
          }
          while (v193 < *((unsigned int *)a2 + 8));
        }
      }
LABEL_149:
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v97, v98, v99, v100, v101, v102, v103);
      ++*((_DWORD *)this + 1196);
      v149 = *((unsigned int *)this + 1194);
      if ((_DWORD)v149 != 0x3FFFFFFF)
      {
        *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v149, (uint64_t)v143, v144, v145, v146, v147, v148);
      }
      v155 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v143, v144, v145, v146, v147, v148);
      v157 = v156;
      v158 = *((unsigned __int16 *)a2 + 9);
      if (v158 != 267)
      {
        if (v158 == 264)
        {
          v159 = *((_DWORD *)a2 + 19);
          goto LABEL_191;
        }
        if (v158 != 352)
        {
          v159 = *((_DWORD *)a2 + 18);
LABEL_155:
          if ((v159 & 0x10) != 0)
            v160 = ((v159 & 0xEu) + 10) >> 1;
          else
            v160 = (v159 >> 1) & 7;
          v161 = *(_DWORD *)(v17 + 4 * v160 + 892);
          if (v161)
            v162 = 16 * (v161 & 0xFFFFFFFE);
          else
            v162 = 0;
          v163 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v162, (int *)&v226, v150, v151, v152, v153, v154);
          JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,void *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::RegisteredStructure,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned long>((int *)&v226, this, v155, v157, v163, v104, *((unsigned int *)a2 + 8), v164);
          v169 = (uint64_t *)this;
          v170 = a2;
          v171 = 1;
LABEL_162:
          result = JSC::DFG::SpeculativeJIT::cellResult(v169, 0, v170, v171, v165, v166, v167, v168);
          --*((_DWORD *)this + 1196);
          return result;
        }
      }
      v159 = *((_DWORD *)a2 + 21);
LABEL_191:
      LOBYTE(v159) = v159 & 0xF;
      goto LABEL_155;
    }
    if (v105 != 267)
    {
      if (v105 == 264)
      {
        v108 = *((_DWORD *)a2 + 19);
        goto LABEL_193;
      }
      if (v105 != 352)
      {
        v108 = *((_DWORD *)a2 + 18);
        goto LABEL_125;
      }
    }
    v108 = *((_DWORD *)a2 + 21);
LABEL_193:
    LOBYTE(v108) = v108 & 0xF;
LABEL_125:
    v109 = v108 & 0xE;
    v110 = *((unsigned int *)a2 + 8);
    if (v109 == 4 && *((_DWORD *)a2 + 8))
    {
      v111 = 0;
      do
      {
        v112 = *((_QWORD *)this + 495);
        v113 = v111 + *((_DWORD *)a2 + 6);
        if (*(_DWORD *)(v112 + 164) <= v113)
        {
          __break(0xC471u);
          JUMPOUT(0x197BD0008);
        }
        v114 = *(_QWORD *)(*(_QWORD *)(v112 + 152) + 8 * v113);
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v226, (uint64_t)this, v114, 1, v100, v101, v102, v103);
        v121 = v228;
        if (v228 == 255)
        {
          v121 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v226, v227, v115, v116, v117, v118, v119, v120);
          v228 = v121;
        }
        if (JSC::DFG::SpeculativeJIT::needsTypeCheck((uint64_t)this, v114, 0x300000000, v116, v117, v118, v119, v120))
        {
          JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, (char)v121, 27, v100, v101, v102, v103, (uint64_t)v224);
          JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v121 << 32) | 0x80000000), v114, 0x300000000uLL, (uint64_t)v224, 1uLL, v122, v123);
        }
        if ((v227 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v124 = (char)v228;
          if ((char)v228 > 15)
            v124 = -1;
          --*((_DWORD *)v226 + 3 * v124 + 1196);
        }
        ++v111;
      }
      while (v111 < *((_QWORD *)a2 + 4));
      v110 = *((_QWORD *)a2 + 4);
    }
    if (v110)
    {
      v125 = 0;
      v126 = v104;
      do
      {
        v127 = *((_QWORD *)this + 495);
        v128 = v125 + *((_QWORD *)a2 + 3);
        if (*(_DWORD *)(v127 + 164) <= v128)
        {
          __break(0xC471u);
          JUMPOUT(0x197BD0000);
        }
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v226, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v127 + 152) + 8 * v128), 1, v100, v101, v102, v103);
        v135 = v228;
        if (v228 == 255)
        {
          v135 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v226, v227, v129, v130, v131, v132, v133, v134);
          v228 = v135;
        }
        JSC::MacroAssemblerARM64::store64((uint64_t)this, (char)v135, v126, v130, v131, v132, v133, v134);
        JSC::DFG::SpeculativeJIT::use(v226, (JSC::DFG::Node *)(v227 & 0xFF00FFFFFFFFFFFFLL), v136, v137, v138, v139, v140, v141);
        if ((v227 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v142 = (char)v228;
          if ((char)v228 > 15)
            v142 = -1;
          --*((_DWORD *)v226 + 3 * v142 + 1196);
        }
        ++v125;
        v126 += 8;
      }
      while (v125 < *((unsigned int *)a2 + 8));
    }
    goto LABEL_149;
  }
  if (v31 != 352)
  {
    v32 = *((_DWORD *)a2 + 18);
    goto LABEL_24;
  }
LABEL_78:
  LOBYTE(v32) = *((_DWORD *)a2 + 21) & 0xF;
LABEL_24:
  if ((v32 & 0xEu) > 9)
    goto LABEL_111;
  v34 = (unsigned int *)((char *)a2 + 32);
  v33 = *((_QWORD *)a2 + 4);
  v35 = v33;
  v36 = (unsigned int *)((char *)a2 + 80);
LABEL_26:
  v37 = *v36;
  if (v35)
  {
    v38 = 0;
    do
    {
      v39 = *((_QWORD *)this + 495);
      v40 = v38 + *((_DWORD *)a2 + 6);
      if (*(_DWORD *)(v39 + 164) <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197BCFFD0);
      }
      JSC::DFG::SpeculativeJIT::speculate(this, v23, *(_QWORD *)(*(_QWORD *)(v39 + 152) + 8 * v40), v25, v26, v27, v28, v29);
      ++v38;
    }
    while (v38 < *v34);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v226, this, v24, v25, v26, v27, v28, v29);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v229, this, v41, v42, v43, v44, v45, v46);
  v47 = (char)v227;
  v48 = v230;
  JSC::DFG::SpeculativeJIT::emitAllocateRawObject((uint64_t)this, (char)v227, v30, v230, v33, v37, v49, v50);
  if (*v34)
  {
    v57 = 0;
    v58 = v48;
    do
    {
      v59 = *((_QWORD *)this + 495);
      v60 = v57 + *((_QWORD *)a2 + 3);
      if (*(_DWORD *)(v59 + 164) <= v60)
      {
        __break(0xC471u);
        JUMPOUT(0x197BCFFD8);
      }
      v61 = *((unsigned __int16 *)a2 + 9);
      if (v61 != 267)
      {
        if (v61 == 264)
        {
          v62 = *((_DWORD *)a2 + 19);
          goto LABEL_75;
        }
        if (v61 != 352)
        {
          v62 = *((_DWORD *)a2 + 18);
          goto LABEL_37;
        }
      }
      v62 = v36[1];
LABEL_75:
      LOBYTE(v62) = v62 & 0xF;
LABEL_37:
      v63 = *(_QWORD *)(*(_QWORD *)(v59 + 152) + 8 * v60);
      if (v62 - 8 >= 2)
      {
        if (v62 > 0x19u)
          goto LABEL_201;
        if (((1 << v62) & 0x8000C0) != 0)
        {
          if (((v63 >> 50) & 0x3F) - 49 >= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x197BCFCF8);
          }
          v75 = ~*(_DWORD *)((v63 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
          if (v75 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197BCFFF8);
          }
          if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v75 + 12)
            || (v76 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v63, v51, v52, v53, v54, v55, v56),
                (_DWORD)v76 == -1))
          {
            v76 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v63, v51, v52, v53, v54, v55, v56);
          }
          v77 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v76];
          JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v76, v58, v52, v53, v54, v55, v56);
          v74 = v77 + 4976;
          goto LABEL_48;
        }
        if (((1 << v62) & 0x2200030) == 0)
        {
          if (((1 << v62) & 0xB) == 0)
          {
LABEL_201:
            __break(0xC471u);
            JUMPOUT(0x197BCFFE0);
          }
LABEL_210:
          __break(0xC471u);
          JUMPOUT(0x197BCF8D8);
        }
      }
      if ((v63 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v64 = ~*(_DWORD *)((v63 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v64 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BCFFE8);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v64 + 12))
        {
          v65 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v63, v51, v52, v53, v54, v55, v56);
          if ((_DWORD)v65 != -1)
          {
            v66 = v65;
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v65, v58, v52, v53, v54, v55, v56);
LABEL_44:
            if (v66 > 15)
              v73 = -1;
            else
              v73 = v66;
            v74 = (_DWORD *)((char *)this + 12 * v73 + 4784);
LABEL_48:
            --*v74;
            goto LABEL_49;
          }
        }
      }
      v67 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v63, v51, v52, v53, v54, v55, v56);
      v66 = v67;
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v67, v58, v68, v69, v70, v71, v72);
      if ((v63 & 0xFF00FFFFFFFFFFFFLL) != 0)
        goto LABEL_44;
LABEL_49:
      ++v57;
      v58 += 0x800000000;
    }
    while (v57 < *v34);
  }
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v51, v52, v53, v54, v55, v56);
  if (v47 > 15)
    v79 = -1;
  else
    v79 = v47;
  v80 = (char *)this + 12 * v79;
  v81 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v80 + 1194) = v81;
  *((_DWORD *)v80 + 1195) = 4;
  v82 = ~v81;
  if (v82 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BCFFF0);
  }
  v83 = *((_QWORD *)this + 499) + 24 * (int)v82;
  v84 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v83 = a2;
  *(_DWORD *)(v83 + 8) = v84;
  *(_BYTE *)(v83 + 17) = v47;
  *(_DWORD *)(v83 + 12) = 6;
  *(_BYTE *)(v83 + 16) = 0;
  if (v229)
  {
    v85 = v230;
    if (v230 != -1)
    {
      if (v230 > 15)
        v85 = -1;
      --*(_DWORD *)(v229 + 12 * v85 + 4784);
    }
  }
  if (v226)
  {
    v86 = (char)v227;
    if ((char)v227 != -1)
    {
      if ((char)v227 > 15)
        v86 = -1;
      --*((_DWORD *)v226 + 3 * v86 + 1196);
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure>(int *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a4, 1, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a3, 0, v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, (uint64_t)operationNewEmptyArray, v16, v17, v18, v19, v20, v21, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, 1, v22, v23, v24, v25, v26, v27);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,void *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::RegisteredStructure,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned long>(int *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a7, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a6, 2, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a5, 1, v19, v20, v21, v22, v23);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a4, 0, v24, v25, v26, v27, v28);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a2, (a3 << 35) + 0x380000001ALL, 0, v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, (uint64_t)operationNewArray, v29, v30, v31, v32, v33, v34, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, 1, v35, v36, v37, v38, v39, v40);
}

void JSC::DFG::SpeculativeJIT::compileNewArrayWithSpread(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int i;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  char *v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  int v188;
  unsigned int v189;
  WTF *v190;
  int v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int8x8_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  WTF *v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  _BOOL4 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char v292;
  unsigned int v293;
  uint64_t v294;
  JSC::DFG::Node *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  BOOL v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  BOOL v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  JSC::AssemblerBuffer *v321;
  int v322;
  unint64_t v323;
  unsigned int v324;
  int v325;
  unsigned int v326[3];
  int v327[3];
  int v328[3];
  WTF *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  WTF *v333;
  unint64_t v334;
  _BYTE v335[24];
  uint64_t v336;
  char v337;
  uint64_t v338;
  char v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  unsigned __int8 v343;
  WTF *v344;
  unint64_t v345;
  unsigned __int8 v346;
  uint64_t v347;
  unsigned __int8 v348;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v310 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v311 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v311 != 0x3FFFFFFF) ? (v312 = v311 == -1) : (v312 = 1), v312))
  {
    v313 = 2;
  }
  else if (v311 >> 28)
  {
    v319 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v319 = v310;
    *(_DWORD *)(v319 + 8) = v311;
    v313 = 1;
    v310 = v319;
  }
  else
  {
    v313 = v310;
    v310 = 0;
  }
  v11 = v310 | v313;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v310 | v313) & 1) == 0)
    goto LABEL_3;
  v314 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v315 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v315 != 0x3FFFFFFF) ? (v316 = v315 == -1) : (v316 = 1), v316))
  {
    v317 = 2;
  }
  else if (v315 >> 28)
  {
    v320 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v320 = v314;
    *(_DWORD *)(v320 + 8) = v315;
    v317 = 1;
    v314 = v320;
  }
  else
  {
    v317 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v314 = 0;
  }
  v318 = v314 | v317;
  v13 = (_QWORD *)(v318 & 0xFFFFFFFF8);
  if ((v318 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if (JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(*((JSC::DFG::Graph **)this + 495), a2, a3, a4, a5, a6, a7, a8))
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v347, this, v18, v19, v20, v21, v22, v23);
    v30 = v348;
    v31 = (uint64_t *)*((_QWORD *)a2 + 9);
    v32 = *((_QWORD *)a2 + 4);
    v33 = v32;
    if ((_DWORD)v32 == 1)
    {
      v34 = *v31;
      v35 = (_QWORD *)(2 * *v31);
      if ((*v31 & 0x8000000000000000) == 0 && !*v35)
        goto LABEL_16;
      v192 = v35 + 1;
      if (v34 < 0)
        v192 = (_BYTE *)*((_QWORD *)a2 + 9);
      if ((*v192 & 1) != 0)
      {
        v193 = *((_QWORD *)this + 495);
        if (*(_DWORD *)(v193 + 164) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197BD1050);
        }
        JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v344, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v193 + 152) + 8 * *((_QWORD *)a2 + 3)), v25, v26, v27, v28, v29);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v342, this, v194, v195, v196, v197, v198, v199);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v340, this, v200, v201, v202, v203, v204, v205);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v338, this, v206, v207, v208, v209, v210, v211);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v336, this, v212, v213, v214, v215, v216, v217);
        v224 = v346;
        if (v346 == 255)
        {
          v224 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v344, v345, v218, v219, v220, v221, v222, v223);
          v346 = v224;
        }
        v225 = (char)v343;
        v226 = v341;
        v227 = v339;
        v228 = v337;
        v229 = *(_DWORD *)(v17 + 888);
        if (v229)
          v230 = 16 * (v229 & 0xFFFFFFFE);
        else
          v230 = 0;
        v231 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v230, (int *)&v333, v219, v220, v221, v222, v223);
        v333 = (WTF *)v335;
        v334 = 2;
        v232 = (char)v224;
        JSC::MacroAssemblerARM64::move(this, v232, v226, v233, v234, v235, v236, v237);
        JSC::MacroAssemblerARM64::add64((uint64_t)this, 16, v226, v226, v238, v239, v240, v241);
        JSC::DFG::SpeculativeJIT::emitAllocateJSObject<JSC::JSArray,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)this, v225, v231, v226, v227, v228, (uint64_t)&v333, v242, v243);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v329, (uint64_t *)&v333);
        JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>(&v332, (uint64_t *)&v329, this, v225, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v231, v232);
        JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v332);
        v251 = v332;
        v332 = 0;
        if (v251)
          (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
        v252 = v329;
        if (&v331 != (uint64_t *)v329 && v329)
        {
          v329 = 0;
          v330 = 0;
          WTF::fastFree((unint64_t)v252, v244, v245, v246, v247, v248, v249, v250);
        }
        JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, (char)v225, a2, 0, v247, v248, v249, v250);
        v260 = v333;
        if (v335 != (_BYTE *)v333 && v333)
        {
          v333 = 0;
          LODWORD(v334) = 0;
          WTF::fastFree((unint64_t)v260, v253, v254, v255, v256, v257, v258, v259);
        }
        if (v336)
        {
          v261 = v337;
          if (v337 != -1)
          {
            if (v337 > 15)
              v261 = -1;
            --*(_DWORD *)(v336 + 12 * v261 + 4784);
          }
        }
        if (v338)
        {
          v262 = v339;
          if (v339 != -1)
          {
            if (v339 > 15)
              v262 = -1;
            --*(_DWORD *)(v338 + 12 * v262 + 4784);
          }
        }
        if (v340)
        {
          v263 = v341;
          if (v341 != -1)
          {
            if (v341 > 15)
              v263 = -1;
            --*(_DWORD *)(v340 + 12 * v263 + 4784);
          }
        }
        if (v342)
        {
          v264 = (char)v343;
          if ((char)v343 != -1)
          {
            if ((char)v343 > 15)
              v264 = -1;
            --*(_DWORD *)(v342 + 12 * v264 + 4784);
          }
        }
        if ((v345 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_161;
        v190 = v344;
        v191 = (char)v346;
LABEL_158:
        if (v191 > 15)
          v191 = -1;
        --*((_DWORD *)v190 + 3 * v191 + 1196);
LABEL_161:
        if (v347)
        {
          v265 = (char)v348;
          if ((char)v348 != -1)
          {
            if ((char)v348 > 15)
              v265 = -1;
            --*(_DWORD *)(v347 + 12 * v265 + 4784);
          }
        }
        return;
      }
    }
    else
    {
      if (!(_DWORD)v32)
        goto LABEL_20;
      v34 = *v31;
      v35 = (_QWORD *)(2 * *v31);
    }
    v36 = v35 + 1;
    if (v34 < 0)
      v36 = (_QWORD *)*((_QWORD *)a2 + 9);
    if (v34 < 0)
    {
      v266 = 0;
      LODWORD(v32) = 0;
      do
      {
        v267 = v266 > 0x3E || (*v36 & (1 << v266)) == 0;
        LODWORD(v32) = v267 + v32;
        ++v266;
      }
      while (v33 != v266);
LABEL_20:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v333, this, v24, v25, v26, v27, v28, v29);
      v42 = v334;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v32, (char)v334, v43, v44, v45, v46, v47);
      v54 = v42;
      if (*((_DWORD *)a2 + 8))
      {
        v55 = 0;
        do
        {
          v56 = (unint64_t *)(2 * *v31);
          if (*v31 < 0)
            v57 = 63;
          else
            v57 = *v56;
          if (v57 > v55)
          {
            v58 = (uint64_t *)(v56 + 1);
            v59 = *v31 >= 0 ? v58 : v31;
            if (((*(unint64_t *)((char *)v59 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
            {
              v60 = *((_QWORD *)this + 495);
              v61 = v55 + *((_QWORD *)a2 + 3);
              if (*(_DWORD *)(v60 + 164) <= v61)
              {
                __break(0xC471u);
                JUMPOUT(0x197BD1028);
              }
              v62 = *(_QWORD *)(*(_QWORD *)(v60 + 152) + 8 * v61);
              if ((v62 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_36;
              v63 = ~*(_DWORD *)((v62 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
              if (v63 >= *((unsigned int *)this + 1001))
              {
                __break(0xC471u);
                JUMPOUT(0x197BD1030);
              }
              if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v63 + 12)
                || (v64 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v62, v48, v49, v50, v51, v52, v53),
                    v64 == -1))
              {
LABEL_36:
                v64 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v62, v48, v49, v50, v51, v52, v53);
              }
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197BD0F98);
              }
              *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
              JSC::MacroAssemblerARM64::load32((uint64_t)this, v64 | 0x800000000, *((char *)this + 272), v49, v50, v51, v52, v53);
              JSC::MacroAssemblerARM64::branchAdd32((uint64_t)this, 6, v54, 16, v54, v65, v66, v67, (uint64_t)v328);
              JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v328);
              if ((v62 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                if (v64 > 15)
                  v68 = -1;
                else
                  v68 = v64;
                --*((_DWORD *)this + 3 * v68 + 1196);
              }
            }
          }
          ++v55;
        }
        while (v55 < *((unsigned int *)a2 + 8));
      }
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v54, 0x8000000, v50, v51, v52, v53, (uint64_t)v327);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 9uLL, (JSC::DFG::Node *)0xFF80000000, 0, v327);
      v322 = (char)v30;
      JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize(this, (uint64_t *)a2, (char)v30, v54, 9, 0, v69, v70);
      if (v333)
      {
        v77 = (char)v334;
        if ((char)v334 != -1)
        {
          if ((char)v334 > 15)
            v77 = -1;
          --*((_DWORD *)v333 + 3 * v77 + 1196);
        }
      }
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v333, this, v71, v72, v73, v74, v75, v76);
      v78 = v334;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v344, this, v79, v80, v81, v82, v83, v84);
      v92 = v345;
      v321 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
      v93 = *((_DWORD *)this + 50);
      if (v93 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v321, v85, v86, v87, v88, v89, v90, v91);
        v93 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v93) = v78 & 0x1F | 0x52800000;
      *((_DWORD *)this + 50) += 4;
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v30 | 0x800000000, (char)v92, v87, v88, v89, v90, v91);
      if (*((_DWORD *)a2 + 8))
      {
        v100 = 0;
        v101 = v92 | (v78 << 8) | 0x300000000;
        v102 = (char *)this + 4776;
        v324 = (char)v78 | (32 * (char)v78) | 0x91000400;
        do
        {
          v103 = *((_QWORD *)this + 495);
          v104 = *((_DWORD *)a2 + 6) + v100;
          if (*(_DWORD *)(v103 + 164) <= v104)
          {
            __break(0xC471u);
            JUMPOUT(0x197BD1020);
          }
          v105 = (unint64_t *)(2 * *v31);
          if (*v31 < 0)
            v106 = 63;
          else
            v106 = *v105;
          v107 = *(_QWORD *)(*(_QWORD *)(v103 + 152) + 8 * v104);
          if (v106 <= v100)
            goto LABEL_249;
          v108 = (uint64_t *)(v105 + 1);
          if (*v31 < 0)
            v108 = v31;
          if (((*(unint64_t *)((char *)v108 + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v100) & 1) != 0)
          {
            if ((v107 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_78;
            v114 = ~*(_DWORD *)((v107 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v114 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BD1040);
            }
            if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v114 + 12)
              || (v110 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v107, v94, v95, v96, v97, v98, v99),
                  v110 == -1))
            {
LABEL_78:
              v110 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v107, v94, v95, v96, v97, v98, v99);
            }
            v323 = v107 & 0xFF00FFFFFFFFFFFFLL;
            v115 = v101;
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v342, this, v94, v95, v96, v97, v98, v99);
            v116 = v343;
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v340, this, v117, v118, v119, v120, v121, v122);
            v123 = v341;
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v338, this, v124, v125, v126, v127, v128, v129);
            v130 = v339;
            JSC::MacroAssemblerARM64::load32((uint64_t)this, v110 | 0x800000000, v339, v131, v132, v133, v134, v135);
            v143 = *((_DWORD *)this + 50);
            if (v143 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v321, v136, v137, v138, v139, v140, v141, v142);
              v143 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v143) = v116 & 0x1F | 0x52800000;
            *((_DWORD *)this + 50) += 4;
            v144 = v130;
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, (char)v116, v144, v139, v140, v141, v142, (uint64_t)&v336);
            for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
            {
              if ((i + 4) > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow(v321, v145, v146, v147, v148, v149, v150, v151);
                i = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
              i = *((_DWORD *)this + 50) + 4;
            }
            *((_DWORD *)this + 52) = 0;
            v153 = v123;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, v110 | (unint64_t)(v116 << 8) | 0x300000000, 0x200000010uLL, v153, v148, v149, v150, v151);
            v154 = v153;
            v101 = v115;
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v154, v115, 0x200000000uLL, v155, v156, v157, v158);
            v166 = *((_DWORD *)this + 50);
            if (v166 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v321, v159, v160, v161, v162, v163, v164, v165);
              v166 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v166) = (char)v116 | (32 * (char)v116) | 0x91000400;
            v167 = *((_DWORD *)this + 50);
            v168 = v167 + 4;
            *((_DWORD *)this + 50) = v167 + 4;
            v102 = (char *)this + 4776;
            if ((v167 + 8) > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v321, v159, v160, v161, v162, v163, v164, v165);
              v168 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v168) = v324;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, (char)v116, v144, v162, v163, v164, v165, (uint64_t)v326);
            v325 = i;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v326, (unsigned int *)&v325, (uint64_t)this, v169, v170, v171, v172, v173);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v336, (uint64_t)this, v174, v175, v176, v177, v178, v179);
            if (v338)
            {
              v180 = v339;
              if (v339 != -1)
              {
                if (v339 > 15)
                  v180 = -1;
                --*(_DWORD *)(v338 + 12 * v180 + 4784);
              }
            }
            if (v340)
            {
              v181 = v341;
              if (v341 != -1)
              {
                if (v341 > 15)
                  v181 = -1;
                --*(_DWORD *)(v340 + 12 * v181 + 4784);
              }
            }
            if (v342)
            {
              v182 = (char)v343;
              if ((char)v343 != -1)
              {
                if ((char)v343 > 15)
                  v182 = -1;
                --*(_DWORD *)(v342 + 12 * v182 + 4784);
              }
            }
            if (!v323)
              goto LABEL_72;
          }
          else
          {
LABEL_249:
            if ((v107 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_64;
            v109 = ~*(_DWORD *)((v107 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v109 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BD1038);
            }
            if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v109 + 12)
              || (v110 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v107, v94, v95, v96, v97, v98, v99),
                  v110 == -1))
            {
LABEL_64:
              v110 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v107, v94, v95, v96, v97, v98, v99);
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v110, v101, 0x200000000uLL, v96, v97, v98, v99);
            v112 = *((_DWORD *)this + 50);
            if (v112 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v321, v111, v94, v95, v96, v97, v98, v99);
              v112 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v112) = v324;
            *((_DWORD *)this + 50) += 4;
            if ((v107 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_72;
          }
          if (v110 > 15)
            v113 = -1;
          else
            v113 = v110;
          --*(_DWORD *)&v102[12 * v113 + 8];
LABEL_72:
          ++v100;
        }
        while (v100 < *((unsigned int *)a2 + 8));
      }
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v94, v95, v96, v97, v98, v99);
      if (v322 > 15)
        v183 = -1;
      else
        v183 = v322;
      v184 = (char *)this + 12 * v183;
      v185 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v184 + 1194) = v185;
      *((_DWORD *)v184 + 1195) = 4;
      v186 = ~v185;
      if (v186 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD1048);
      }
      v187 = *((_QWORD *)this + 499) + 24 * (int)v186;
      v188 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v187 = a2;
      *(_DWORD *)(v187 + 8) = v188;
      *(_BYTE *)(v187 + 17) = v322;
      *(_DWORD *)(v187 + 12) = 6;
      *(_BYTE *)(v187 + 16) = 0;
      if (v344)
      {
        v189 = (char)v345;
        if ((char)v345 != -1)
        {
          if ((char)v345 > 15)
            v189 = -1;
          --*((_DWORD *)v344 + 3 * v189 + 1196);
        }
      }
      v190 = v333;
      if (!v333)
        goto LABEL_161;
      v191 = (char)v334;
      if ((char)v334 == -1)
        goto LABEL_161;
      goto LABEL_158;
    }
LABEL_16:
    v37 = 0;
    LODWORD(v32) = 0;
    v40 = *v35;
    v38 = v35 + 1;
    v39 = v40;
    do
    {
      v41 = v39 <= v37 || (*(_QWORD *)((char *)v38 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v37)) == 0;
      LODWORD(v32) = v41 + v32;
      ++v37;
    }
    while (v33 != v37);
    goto LABEL_20;
  }
  v268 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * *((_QWORD *)a2 + 4), v18, v19, v20, v21, v22, v23);
  v276 = v268 + 8;
  if (*((_DWORD *)a2 + 8))
  {
    v277 = 0;
    v278 = (uint64_t *)*((_QWORD *)a2 + 9);
    v279 = v268 + 8;
    while (1)
    {
      v280 = *((_QWORD *)this + 495);
      v281 = v277 + *((_QWORD *)a2 + 3);
      if (*(_DWORD *)(v280 + 164) <= v281)
      {
        __break(0xC471u);
        JUMPOUT(0x197BD1058);
      }
      v282 = (_QWORD *)(2 * *v278);
      v283 = *v278 < 0 ? 63 : *v282;
      v284 = *(_QWORD *)(*(_QWORD *)(v280 + 152) + 8 * v281);
      if (v283 <= v277)
        break;
      v285 = v282 + 1;
      if (*v278 < 0)
        v285 = v278;
      if (((*(unint64_t *)((char *)v285 + ((v277 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v277) & 1) == 0)
        break;
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v333, (uint64_t)this, v284, v271, v272, v273, v274, v275);
      v292 = v335[0];
      if (v335[0] == 255)
      {
        v292 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v333, v334, v286, v287, v288, v289, v290, v291);
LABEL_185:
        v335[0] = v292;
      }
LABEL_186:
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v292, v279, v287, v288, v289, v290, v291);
      if ((v334 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v293 = v335[0];
        if (v335[0] > 15)
          v293 = -1;
        --*((_DWORD *)v333 + 3 * v293 + 1196);
      }
      ++v277;
      v279 += 8;
      if (v277 >= *((unsigned int *)a2 + 8))
        goto LABEL_195;
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v333, (uint64_t)this, v284, 0, v272, v273, v274, v275);
    v292 = v335[0];
    if (v335[0] != 255)
      goto LABEL_186;
    v292 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v333, v334, v294, v287, v288, v289, v290, v291);
    goto LABEL_185;
  }
LABEL_195:
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v269, v270, v271, v272, v273, v274, v275);
  ++*((_DWORD *)this + 1196);
  v301 = *((unsigned int *)this + 1194);
  if ((_DWORD)v301 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v301, (uint64_t)v295, v296, v297, v298, v299, v300);
  }
  v302 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v295, v296, v297, v298, v299, v300);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,void *,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned int>((int *)&v333, (unsigned int *)this, v302, v303, v276, *((unsigned int *)a2 + 8), v304, v305);
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v306, v307, v308, v309);
  --*((_DWORD *)this + 1196);
}

void JSC::DFG::SpeculativeJIT::emitAllocateJSObject<JSC::JSArray,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v9;
  unsigned __int8 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16);
  if (*(_DWORD *)(v9 + 37620) <= 0xFu)
  {
    __break(0xC471u);
    goto LABEL_9;
  }
  v12 = a2;
  v26[0] = 0;
  v26[1] = v9 + 37560;
  JSC::AssemblyHelpers::emitAllocate(a1, a2, (uint64_t)v26, a5, a6, a7, 1, a8, a9);
  v19 = (a3 >> 4) | ((unint64_t)*(unsigned int *)(a3 + 8) << 32);
  if (!v19)
  {
    v20 = 63;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
LABEL_9:
    JUMPOUT(0x197BD1148);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v19, a1 + 264, v14, v15, v16, v17, v18);
  v20 = 16;
LABEL_6:
  JSC::MacroAssemblerARM64::store64(a1, v20, v12, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::store64(a1, a4, v12 | 0x800000000, v21, v22, v23, v24, v25);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE v30[28];
  char v31;
  char v32;
  __int16 v33;
  uint64_t (*v34)(JSC::CommonSlowPaths *, JSC::VM *, JSC::Structure *, JSC::JSImmutableButterfly *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v14 = *((unsigned int *)a2 + 3);
  v27 = (WTF *)v30;
  v28 = 2;
  v29 = v14;
  if (v14 < 3)
  {
    v16 = v30;
    if (!(_DWORD)v14)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v14 >= 0x15555556)
  {
    __break(0xC471u);
    return;
  }
  v15 = 12 * v14;
  v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v14));
  v28 = (v15 & 0xFFFFFFFC) / 0xC;
  v27 = (WTF *)v16;
  LODWORD(v14) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v14)
  {
LABEL_6:
    v17 = *a2;
    v18 = *a2 + 12 * v14;
    do
    {
      *(_DWORD *)v16 = *(_DWORD *)v17;
      *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
      v17 += 12;
      v16 += 12;
    }
    while (v17 != v18);
  }
LABEL_8:
  v36 = a6;
  v37 = a5;
  v34 = operationNewArrayBuffer;
  v35 = a3;
  v33 = 0;
  v32 = a4;
  v31 = a7;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::RegisteredStructure&,JSC::ARM64Registers::RegisterID&>(a1, (uint64_t *)&v27, &v35, (uint64_t *)&v34, (unsigned __int8 *)&v33 + 1, (char *)&v33, &v32, &v37, &v36, &v31);
  v26 = v27;
  if (v30 != (_BYTE *)v27)
  {
    if (v27)
    {
      v27 = 0;
      v28 = 0;
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,void *,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned int>(int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a2, (JSC::ARM64LogicalImmediate *)a6, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a5, 1, v13, v14, v15, v16, v17);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, a4, 0, v18, v19, v20, v21, v22);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a2, (a3 << 35) + 0x380000001ALL, 0, v18, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a2, (uint64_t)operationNewArrayWithSpreadSlow, v23, v24, v25, v26, v27, v28, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a2, 1, v29, v30, v31, v32, v33, v34);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetRestLength(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *result;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68[2];
  char v69;
  __int16 v70;
  char v71;
  unsigned int v72[3];
  uint64_t v73;
  char v74;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v73, this, a3, a4, a5, a6, a7, a8);
  v15 = v74;
  v16 = v74;
  v17 = (uint64_t *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if ((*(_QWORD *)a2 & 1) == 0)
    goto LABEL_2;
  v62 = *v17;
  if ((*(_QWORD *)a2 & 2) != 0
    || ((v63 = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8), v63 != 0x3FFFFFFF) ? (v64 = v63 == -1) : (v64 = 1), v64))
  {
    v65 = 2;
  }
  else if (v63 >> 28)
  {
    v67 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v67 = v62;
    *(_DWORD *)(v67 + 8) = v63;
    v65 = 1;
    v62 = v67;
  }
  else
  {
    v65 = v62;
    v62 = 0;
  }
  v66 = v62 | v65;
  v17 = (uint64_t *)(v66 & 0xFFFFFFFF8);
  if ((v66 & 1) != 0)
  {
    v18 = 0;
    v19 = (uint64_t *)*v17;
  }
  else
  {
LABEL_2:
    v18 = 1;
    v19 = v17;
  }
  if (v19)
  {
    v61 = v19[3];
    if ((v61 >> 60) - 3 > 2)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)((v61 & 0x3FFFFF) - 1), v16, v10, v11, v12, v13, v14);
      goto LABEL_8;
    }
    v20 = ((unint64_t)*((unsigned int *)v19 + 9) << 35) | 0x1D;
  }
  else
  {
    v20 = 0x200000001DLL;
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v20, v16, v10, v11, v12, v13, v14);
  v28 = *((_DWORD *)this + 50);
  if (v28 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
    v28 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v28) = v16 | (32 * v16) | 0x51000400;
  *((_DWORD *)this + 50) += 4;
LABEL_8:
  if ((v18 & 1) == 0 && v17)
    WTF::fastFree((unint64_t)v17, v21, v22, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v16, *((unsigned int *)a2 + 18), v24, v25, v26, v27, (uint64_t)v72);
  v36 = *((_DWORD *)this + 50);
  if (v36 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v36) = v15 & 0x1F | 0x52800000;
  v37 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v37; v37 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v37)
  {
    if ((v37 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v29, v30, v31, v32, v33, v34, v35);
      v37 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v37) = -721215457;
    v37 = *((_DWORD *)this + 50) + 4;
  }
  v38 = v37;
  if ((v37 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v29, v30, v31, v32, v33, v34, v35);
    v38 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v38) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v39 = 69;
  else
    v39 = 65;
  v68[0] = v37;
  v68[1] = 0;
  v69 = v39;
  v70 = 15;
  v71 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v72, (uint64_t)this, v30, v31, v32, v33, v34, v35);
  v45 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v45)
    JSC::MacroAssemblerARM64::sub32((uint64_t)this, v16, v45, v16, v41, v42, v43, v44);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v68, (uint64_t)this, v45, v40, v41, v42, v43, v44);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v46, v47, v48, v49, v50, v51);
  v53 = *((_DWORD *)a2 + 12);
  v54 = ~v53;
  if (v54 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v55 = *((_QWORD *)this + 499);
    if ((int)v16 > 15)
      v56 = -1;
    else
      v56 = v16;
    v57 = (char *)this + 12 * v56;
    *((_DWORD *)v57 + 1194) = v53;
    *((_DWORD *)v57 + 1195) = 5;
    v58 = v55 + 24 * (int)v54;
    v59 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v58 = a2;
    *(_DWORD *)(v58 + 8) = v59;
    *(_BYTE *)(v58 + 17) = v16;
    *(_DWORD *)(v58 + 12) = 1;
    *(_BYTE *)(v58 + 16) = 0;
    if (v73)
    {
      v60 = v74;
      if (v74 != -1)
      {
        if (v74 > 15)
          v60 = -1;
        --*(_DWORD *)(v73 + 12 * v60 + 4784);
      }
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileArraySlice(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  char v105;
  int *v106;
  int *v107;
  int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  char v146;
  int *v147;
  int *v148;
  int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  int8x8_t v186;
  uint64_t v187;
  int8x8_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  JSC::DFG::Node *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  int v242;
  _BYTE *v243;
  WTF *v244;
  WTF *v245;
  unsigned int v246;
  int v247;
  _BYTE *v248;
  _BYTE *v249;
  _BYTE *v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  WTF *v273;
  WTF *v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int i;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *result;
  char *v353;
  int v354;
  unsigned int v355;
  char *v356;
  unint64_t v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  unsigned int v365;
  unsigned int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  uint64_t v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  char v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int v417;
  unint64_t v418;
  BOOL v419;
  uint64_t v420;
  unsigned int v421;
  BOOL v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  BOOL v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  JSC::AssemblerBuffer *v435;
  int v436;
  int v437;
  unint64_t v438;
  int v439;
  signed __int8 v440;
  uint64_t v441;
  uint64_t v442;
  unsigned int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  WTF *v448;
  uint64_t v449;
  _BYTE v450[24];
  int v451;
  int v452;
  char v453;
  __int16 v454;
  char v455;
  int v456;
  int v457;
  char v458;
  __int16 v459;
  char v460;
  unsigned int v461[3];
  unsigned int v462[3];
  WTF *v463;
  uint64_t v464;
  _BYTE v465[24];
  uint64_t v466;
  signed __int8 v467;
  uint64_t v468;
  char v469;
  uint64_t v470;
  unsigned __int8 v471;
  uint64_t v472;
  unsigned __int8 v473;
  uint64_t v474;
  unsigned __int8 v475;
  _BYTE *v476;
  unsigned int v477;
  unsigned int v478;
  _BYTE v479[24];
  _BYTE *v480;
  uint64_t v481;
  _BYTE v482[32];

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v420 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v421 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v421 != 0x3FFFFFFF) ? (v422 = v421 == -1) : (v422 = 1), v422))
  {
    v423 = 2;
  }
  else if (v421 >> 28)
  {
    v433 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v433 = v420;
    *(_DWORD *)(v433 + 8) = v421;
    v423 = 1;
    v420 = v433;
  }
  else
  {
    v423 = v420;
    v420 = 0;
  }
  v11 = v420 | v423;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v420 | v423) & 1) == 0)
    goto LABEL_3;
  v424 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v425 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v425 != 0x3FFFFFFF) ? (v426 = v425 == -1) : (v426 = 1), v426))
  {
    v427 = 2;
  }
  else if (v425 >> 28)
  {
    v434 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v434 = v424;
    *(_DWORD *)(v434 + 8) = v425;
    v427 = 1;
    v424 = v434;
  }
  else
  {
    v427 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v424 = 0;
  }
  v428 = v424 | v427;
  v13 = (_QWORD *)(v428 & 0xFFFFFFFF8);
  if ((v428 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(_DWORD **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v474, this, a3, a4, a5, a6, a7, a8);
  v24 = *((_QWORD *)this + 495);
  v25 = *((_DWORD *)a2 + 8) + *((_DWORD *)a2 + 6) - 1;
  if (*(_DWORD *)(v24 + 164) <= v25)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2D6CLL);
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v24 + 152) + 8 * v25);
  v27 = ~*(_DWORD *)((v26 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v27 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2D74);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v27 + 12))
  {
    v28 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v26, v18, v19, v20, v21, v22, v23);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v472, this, v29, v30, v31, v32, v33, v34);
    if (v28 != -1)
      goto LABEL_14;
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v472, this, v18, v19, v20, v21, v22, v23);
  }
  v28 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v26, v35, v36, v37, v38, v39, v40);
LABEL_14:
  v441 = v473;
  v436 = (char)v475;
  v41 = v475;
  v42 = (char)v475;
  v443 = (char)v475;
  if (*((_DWORD *)a2 + 8) == 2)
  {
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v28 | 0xFFFFFFF800000000, (char)v475, v36, v37, v38, v39, v40);
    goto LABEL_16;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v480, this, v35, v36, v37, v38, v39, v40);
  v110 = (char)v481;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v28 | 0xFFFFFFF800000000, v110, v111, v112, v113, v114, v115);
  if (*((_DWORD *)a2 + 8) == 4)
  {
    v376 = *((_QWORD *)this + 495);
    v377 = *((_DWORD *)a2 + 6) + 2;
    if (*(_DWORD *)(v376 + 164) <= v377)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD2DBCLL);
    }
    JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v376 + 152) + 8 * v377), 0, v110, v42, v46, v47, v48);
    goto LABEL_197;
  }
  if (v41 != v110)
  {
    if ((_DWORD)v110 == 63)
    {
      if (v41 != 31)
      {
        v117 = v41 & 0x1F;
        v118 = -763363328;
        goto LABEL_42;
      }
    }
    else if (v41 != 31 && (_DWORD)v110 != 31)
    {
      v117 = v41 & 0xFFE0FFFF | ((v110 & 0x1F) << 16);
      v118 = -1442839584;
LABEL_42:
      v119 = v117 | v118;
      v121 = (unsigned int *)((char *)this + 200);
      v120 = *((_DWORD *)this + 50);
      if (v120 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v116, v43, v44, v45, v46, v47, v48);
        v120 = *v121;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v120) = v119;
      *v121 += 4;
      goto LABEL_197;
    }
    v117 = v436 | (32 * v110);
    v118 = -1862270976;
    goto LABEL_42;
  }
LABEL_197:
  v378 = *((_QWORD *)this + 495);
  v379 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v378 + 164) <= v379)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2DA4);
  }
  v380 = *(_QWORD *)(*(_QWORD *)(v378 + 152) + 8 * v379) & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v380 + 18) > 2u
    || ((v418 = **(_QWORD **)(v380 + 72), v418 >= 0xFFFE000000000000)
      ? (v419 = v418 == 0)
      : (v419 = 0),
        !v419))
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v476, this, v43, v44, v45, v46, v47, v48);
    v384 = *((_QWORD *)this + 495);
    v385 = *((_DWORD *)a2 + 6) + 1;
    if (*(_DWORD *)(v384 + 164) <= v385)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD2DB4);
    }
    v386 = v477;
    JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v384 + 152) + 8 * v385), 0, v110, (char)v477, v381, v382, v383);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v386, v42, v387, v388, v389, v390, (uint64_t)&v463);
    v398 = (v386 & 0x1F) << 16;
    if (v41 == 31)
    {
      v431 = v398 | 0x4B2063FF;
      v432 = *((_DWORD *)this + 50);
      if (v432 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v391, v392, v393, v394, v395, v396, v397);
        v432 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v432) = v431;
      v401 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v401;
    }
    else
    {
      v399 = v398 | (32 * (v41 & 0x1F)) | v41 & 0x1F | 0x4B000000;
      v400 = *((_DWORD *)this + 50);
      if (v400 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v391, v392, v393, v394, v395, v396, v397);
        v400 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v400) = v399;
      v401 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v401;
    }
    for (; (signed int)v401 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v401)
    {
      if (v401 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v391, v392, v393, v394, v395, v396, v397);
        v401 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v401) = -721215457;
      v401 = *((_DWORD *)this + 50) + 4;
    }
    v402 = v401;
    if (v401 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v391, v392, v393, v394, v395, v396, v397);
      v402 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v402) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v403 = 69;
    else
      v403 = 65;
    v448 = (WTF *)v401;
    LOBYTE(v449) = v403;
    *(_WORD *)((char *)&v449 + 1) = 15;
    BYTE3(v449) = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v463, (uint64_t)this, v392, v393, v394, v395, v396, v397);
    v411 = *((_DWORD *)this + 50);
    if (v411 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v404, v405, v406, v407, v408, v409, v410);
      v411 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v411) = v41 & 0x1F | 0x52800000;
    *((_DWORD *)this + 50) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v448, (uint64_t)this, v405, v406, v407, v408, v409, v410);
    if (v476)
    {
      v412 = (char)v477;
      if ((char)v477 != -1)
      {
        if ((char)v477 > 15)
          v412 = -1;
        --*(_DWORD *)&v476[12 * v412 + 4784];
      }
    }
  }
  if (v480)
  {
    v413 = (char)v481;
    if ((char)v481 != -1)
    {
      if ((char)v481 > 15)
        v413 = -1;
      --*(_DWORD *)&v480[12 * v413 + 4784];
    }
  }
LABEL_16:
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v470, this, v43, v44, v45, v46, v47, v48);
  v55 = *((_QWORD *)this + 495);
  if (*(_DWORD *)(v55 + 164) <= *((_QWORD *)a2 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2D7CLL);
  }
  v56 = v471;
  v57 = *(_QWORD *)(*(_QWORD *)(v55 + 152) + 8 * *((_QWORD *)a2 + 3));
  if ((v57 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_21;
  v58 = ~*(_DWORD *)((v57 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v58 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2D8CLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v58 + 12)
    || (v59 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v57, v49, v50, v51, v52, v53, v54), v59 == -1))
  {
LABEL_21:
    v59 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v57, v49, v50, v51, v52, v53, v54);
  }
  v438 = v57 & 0xFF00FFFFFFFFFFFFLL;
  v439 = v41;
  v442 = v56;
  v60 = (char)v56;
  v437 = v59;
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v59 | 0x400000000, v60, v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0x2F, v56, (char)v56);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v468, this, v61, v62, v63, v64, v65, v66);
  v67 = v469;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v466, this, v68, v69, v70, v71, v72, v73);
  v440 = v467;
  v463 = (WTF *)v465;
  v464 = 2;
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, v60, 9, v74, v75, v76, v77, (uint64_t)v462);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, v60, 5, v78, v79, v80, v81, (uint64_t)v461);
  v87 = v17[226];
  if (v87)
    v88 = 16 * (v87 & 0xFFFFFFFE);
  else
    v88 = 0;
  v89 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v88, (int *)&v480, v82, v83, v84, v85, v86);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v89, (char)v56, v90, v91, v92, v93, v94);
  v102 = *((_DWORD *)this + 50);
  if (v102 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v95, v96, v97, v98, v99, v100, v101);
    v102 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v102) = v67 & 0x1F | 0xD2EFFF40;
  v103 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v103; v103 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v103)
  {
    if ((v103 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v95, v96, v97, v98, v99, v100, v101);
      v103 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v103) = -721215457;
    v103 = *((_DWORD *)this + 50) + 4;
  }
  v104 = v103;
  if ((v103 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v95, v96, v97, v98, v99, v100, v101);
    v104 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v104) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v105 = 69;
  else
    v105 = 65;
  v456 = v103;
  v457 = 0;
  v458 = v105;
  v459 = 15;
  v460 = -1;
  if (v103 != -1)
  {
    if (HIDWORD(v464) == (_DWORD)v464)
    {
      v106 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v463, (void *)(HIDWORD(v464) + 1), (unint64_t)&v456, v97, v98, v99, v100, v101);
      v108 = *v106;
      v107 = v106 + 1;
      v109 = (char *)v463 + 12 * HIDWORD(v464);
      *(_DWORD *)v109 = v108;
    }
    else
    {
      v107 = &v457;
      v109 = (char *)v463 + 12 * HIDWORD(v464);
      *(_DWORD *)v109 = v103;
    }
    *(_QWORD *)(v109 + 4) = *(_QWORD *)v107;
    ++HIDWORD(v464);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v462, (uint64_t)this, v96, v97, v98, v99, v100, v101);
  v127 = v17[227];
  if (v127)
    v128 = 16 * (v127 & 0xFFFFFFFE);
  else
    v128 = 0;
  v129 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v128, (int *)&v480, v122, v123, v124, v125, v126);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v129, v60, v130, v131, v132, v133, v134);
  v142 = v67 & 0x1F | 0xD2800000;
  v143 = *((_DWORD *)this + 50);
  if (v143 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v135, v136, v137, v138, v139, v140, v141);
    v143 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v143) = v142;
  v144 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v144; v144 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v144)
  {
    if ((v144 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v135, v136, v137, v138, v139, v140, v141);
      v144 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v144) = -721215457;
    v144 = *((_DWORD *)this + 50) + 4;
  }
  v145 = v144;
  if ((v144 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v135, v136, v137, v138, v139, v140, v141);
    v145 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v145) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v146 = 69;
  else
    v146 = 65;
  v451 = v144;
  v452 = 0;
  v453 = v146;
  v454 = 15;
  v455 = -1;
  if (v144 != -1)
  {
    if (HIDWORD(v464) == (_DWORD)v464)
    {
      v147 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v463, (void *)(HIDWORD(v464) + 1), (unint64_t)&v451, v137, v138, v139, v140, v141);
      v149 = *v147;
      v148 = v147 + 1;
      v150 = (char *)v463 + 12 * HIDWORD(v464);
      *(_DWORD *)v150 = v149;
    }
    else
    {
      v148 = &v452;
      v150 = (char *)v463 + 12 * HIDWORD(v464);
      *(_DWORD *)v150 = v144;
    }
    *(_QWORD *)(v150 + 4) = *(_QWORD *)v148;
    ++HIDWORD(v464);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v461, (uint64_t)this, v136, v137, v138, v139, v140, v141);
  v156 = v17[225];
  if (v156)
    v157 = 16 * (v156 & 0xFFFFFFFE);
  else
    v157 = 0;
  v158 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v157, (int *)&v480, v151, v152, v153, v154, v155);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v158, v60, v159, v160, v161, v162, v163);
  v171 = *((_DWORD *)this + 50);
  if (v171 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v164, v165, v166, v167, v168, v169, v170);
    v171 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v171) = v142;
  v172 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v172;
  v435 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  if (HIDWORD(v464))
  {
    v173 = 0;
    v174 = 0;
    v175 = 12 * HIDWORD(v464);
    do
    {
      if (v174 >= HIDWORD(v464))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD2D64);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v463 + v173), (uint64_t)this, v165, v166, v167, v168, v169, v170);
      ++v174;
      v173 += 12;
    }
    while (v175 != v173);
    v172 = *((_DWORD *)this + 50);
  }
  v176 = (char)v441;
  v448 = (WTF *)v450;
  v449 = 2;
  if (v172 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v435, v164, v165, v166, v167, v168, v169, v170);
    v172 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v172) = v440 & 0x1F | 0xD2800000;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v476, this, v165, v166, v167, v168, v169, v170);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v446, this, v177, v178, v179, v180, v181, v182);
  v183 = (char)v477;
  v184 = v447;
  JSC::DFG::SpeculativeJIT::emitAllocateButterfly((uint64_t)this, v440, v443, v183, v447, v176, (uint64_t)&v448, v185, v186);
  JSC::DFG::SpeculativeJIT::emitInitializeButterfly((uint64_t)this, v440, v443, v67, v183);
  v189 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  if (*(_DWORD *)(v189 + 37620) <= 0xFu)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2B04);
  }
  v480 = 0;
  v481 = v189 + 37560;
  v190 = (char)v183;
  v191 = v184;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, v176, (uint64_t)&v480, v190, v191, (uint64_t)&v448, 1, v187, v188);
  JSC::MacroAssemblerARM64::urshift64(this, v60, 4, v191, v192, v193, v194, v195);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v191, v441, v196, v197, v198, v199, v200);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v442 | 0x800000000, v191, v201, v202, v203, v204, v205);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v191, v441 | 0x400000000, v206, v207, v208, v209, v210);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v440, v441 | 0x800000000, v211, v212, v213, v214, v215);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v216, v217, v218, v219, v220, (uint64_t)&v480);
  v228 = *((_DWORD *)this + 50);
  if (v228 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v435, v221, v222, v223, v224, v225, v226, v227);
    v228 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v228) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v480, (uint64_t)this, v222, v223, v224, v225, v226, v227);
  if (v446)
  {
    v235 = v447;
    if (v447 != -1)
    {
      if (v447 > 15)
        v235 = -1;
      --*(_DWORD *)(v446 + 12 * v235 + 4784);
    }
  }
  if (v476)
  {
    v236 = (char)v477;
    if ((char)v477 != -1)
    {
      if ((char)v477 > 15)
        v236 = -1;
      --*(_DWORD *)&v476[12 * v236 + 4784];
    }
  }
  v237 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v229, v230, v231, v232, v233, v234);
  v239 = v238;
  v240 = WTF::fastMalloc((WTF *)0xB8);
  v241 = HIDWORD(v449);
  v476 = v479;
  v477 = 2;
  v478 = HIDWORD(v449);
  if (HIDWORD(v449) < 3)
  {
    v243 = v479;
  }
  else
  {
    if (HIDWORD(v449) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD2D94);
    }
    v242 = 12 * HIDWORD(v449);
    v243 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v449)));
    v477 = (v242 & 0xFFFFFFFC) / 0xC;
    v476 = v243;
    v241 = HIDWORD(v449);
  }
  if (v241)
  {
    v244 = v448;
    v245 = (WTF *)((char *)v448 + 12 * v241);
    do
    {
      *(_DWORD *)v243 = *(_DWORD *)v244;
      *(_QWORD *)(v243 + 4) = *(_QWORD *)((char *)v244 + 4);
      v244 = (WTF *)((char *)v244 + 12);
      v243 += 12;
    }
    while (v244 != v245);
  }
  v246 = v478;
  v480 = v482;
  LODWORD(v481) = 2;
  HIDWORD(v481) = v478;
  if (v478 < 3)
  {
    v248 = v482;
  }
  else
  {
    if (v478 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD2D9CLL);
    }
    v247 = 12 * v478;
    v248 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v478));
    LODWORD(v481) = (v247 & 0xFFFFFFFC) / 0xC;
    v480 = v248;
    v246 = v478;
  }
  if (v246)
  {
    v249 = v476;
    v250 = &v476[12 * v246];
    do
    {
      *(_DWORD *)v248 = *(_DWORD *)v249;
      *(_QWORD *)(v248 + 4) = *(_QWORD *)(v249 + 4);
      v249 += 12;
      v248 += 12;
    }
    while (v249 != v250);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v240, (uint64_t *)&v480, this);
  v258 = (unint64_t)v480;
  if (v482 != v480 && v480 != 0)
  {
    v480 = 0;
    LODWORD(v481) = 0;
    WTF::fastFree(v258, v251, v252, v253, v254, v255, v256, v257);
  }
  *(_QWORD *)v240 = off_1E3572B50;
  *(_QWORD *)(v240 + 96) = operationNewArrayWithSize;
  *(_BYTE *)(v240 + 104) = v441;
  *(_QWORD *)(v240 + 112) = v237;
  *(_QWORD *)(v240 + 120) = v239;
  *(_BYTE *)(v240 + 128) = v442;
  *(_BYTE *)(v240 + 129) = v439;
  *(_BYTE *)(v240 + 130) = v440;
  *(_QWORD *)(v240 + 136) = v240 + 152;
  *(_QWORD *)(v240 + 144) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v240 + 136, v176, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v256, v257);
  v267 = (unint64_t)v476;
  if (v479 != v476 && v476)
  {
    v476 = 0;
    v477 = 0;
    WTF::fastFree(v267, v260, v261, v262, v263, v264, v265, v266);
  }
  v445 = v240;
  v268 = (_QWORD *)((char *)this + 5656);
  v269 = *((unsigned int *)this + 1417);
  if ((_DWORD)v269 == *((_DWORD *)this + 1416))
  {
    v271 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v268, v269 + 1, (unint64_t)&v445);
    v269 = *((unsigned int *)this + 1417);
    v270 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v269);
    v240 = *v271;
  }
  else
  {
    v270 = (uint64_t *)(*v268 + 8 * v269);
    v271 = &v445;
  }
  *v271 = 0;
  *v270 = v240;
  *((_DWORD *)this + 1417) = v269 + 1;
  v272 = v445;
  v445 = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = v448;
  if (v450 != (_BYTE *)v448 && v448)
  {
    v448 = 0;
    LODWORD(v449) = 0;
    WTF::fastFree((unint64_t)v273, v260, v261, v262, v263, v264, v265, v266);
  }
  v274 = v463;
  if (v465 != (_BYTE *)v463 && v463)
  {
    v463 = 0;
    LODWORD(v464) = 0;
    WTF::fastFree((unint64_t)v274, v260, v261, v262, v263, v264, v265, v266);
  }
  if (v466)
  {
    v275 = v467;
    if (v467 != -1)
    {
      if (v467 > 15)
        v275 = -1;
      --*(_DWORD *)(v466 + 12 * v275 + 4784);
    }
  }
  if (v468)
  {
    v276 = v469;
    if (v469 != -1)
    {
      if (v469 > 15)
        v276 = -1;
      --*(_DWORD *)(v468 + 12 * v276 + 4784);
    }
  }
  if (v438)
  {
    if (v437 > 15)
      v277 = -1;
    else
      v277 = v437;
    --*((_DWORD *)this + 3 * v277 + 1196);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v480, this, v261, v262, v263, v264, v265, v266);
  v283 = v481;
  v284 = v28 | 0xFFFFFFF800000000;
  if (*((_DWORD *)a2 + 8) == 2)
  {
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v284, v443, v278, v279, v280, v281, v282);
    v292 = *((_DWORD *)this + 50);
    if (v292 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v435, v285, v286, v287, v288, v289, v290, v291);
      v292 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v292) = v283 & 0x1F | 0x52800000;
    *((_DWORD *)this + 50) += 4;
    goto LABEL_138;
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v284, v60, v278, v279, v280, v281, v282);
  if (*((_DWORD *)a2 + 8) == 4)
  {
    v414 = *((_QWORD *)this + 495);
    v415 = *((_DWORD *)a2 + 6) + 2;
    if (*(_DWORD *)(v414 + 164) <= v415)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD2DC4);
    }
    JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v414 + 152) + 8 * v415), 0, v60, v443, v371, v372, v373);
    goto LABEL_224;
  }
  if ((_DWORD)v442 != v439)
  {
    if ((_DWORD)v442 == 63)
    {
      if (v439 != 31)
      {
        v429 = v439 & 0x1F;
        v430 = -763363328;
LABEL_273:
        v374 = v429 | v430;
        goto LABEL_192;
      }
    }
    else if (v439 != 31 && (_DWORD)v442 != 31)
    {
      v374 = v439 & 0xFFE0FFFF | ((v442 & 0x1F) << 16) | 0xAA0003E0;
LABEL_192:
      v375 = *((_DWORD *)this + 50);
      if (v375 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v435, v367, v368, v369, v370, v371, v372, v373);
        v375 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v375) = v374;
      *((_DWORD *)this + 50) += 4;
      goto LABEL_224;
    }
    v429 = v436 | (32 * v60);
    v430 = -1862270976;
    goto LABEL_273;
  }
LABEL_224:
  v416 = *((_QWORD *)this + 495);
  v417 = *((_DWORD *)a2 + 6) + 1;
  if (*(_DWORD *)(v416 + 164) <= v417)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2DACLL);
  }
  JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v416 + 152) + 8 * v417), 0, v60, (char)v283, v371, v372, v373);
LABEL_138:
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v476, this, v286, v287, v288, v289, v290, v291);
  v300 = v477;
  v301 = v477 & 0x1F | 0xD2800000;
  v302 = *((_DWORD *)this + 50);
  if (v302 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v435, v293, v294, v295, v296, v297, v298, v299);
    v302 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v302) = v301;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v463, this, v294, v295, v296, v297, v298, v299);
  v303 = v464;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v441 | 0x800000000, (char)v464, v304, v305, v306, v307, v308);
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v443, v443);
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v283, (char)v283);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, (char)v283, v443, v309, v310, v311, v312, (uint64_t)&v448);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v435, v313, v314, v315, v316, v317, v318, v319);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  *((_DWORD *)this + 52) = 0;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v28 | (unint64_t)(v283 << 8) | 0x300000000, 0x200000000uLL, v60, v316, v317, v318, v319);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v60, v303 | (v300 << 8) | 0x300000000, 0x200000000uLL, v321, v322, v323, v324);
  v332 = *((_DWORD *)this + 50);
  if (v332 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v435, v325, v326, v327, v328, v329, v330, v331);
    v332 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v332) = (char)v283 | (32 * (char)v283) | 0x91000400;
  v333 = *((_DWORD *)this + 50);
  v334 = v333 + 4;
  *((_DWORD *)this + 50) = v333 + 4;
  if ((v333 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v435, v325, v326, v327, v328, v329, v330, v331);
    v334 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v334) = (char)v300 | (32 * (char)v300) | 0x91000400;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, (char)v283, v443, v328, v329, v330, v331, (uint64_t)&v468);
  v444 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v468, (unsigned int *)&v444, (uint64_t)this, v335, v336, v337, v338, v339);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v448, (uint64_t)this, v340, v341, v342, v343, v344, v345);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v346, v347, v348, v349, v350, v351);
  v353 = (char *)this + 4776;
  v354 = *((_DWORD *)a2 + 12);
  if ((int)v176 > 15)
    v355 = -1;
  else
    v355 = (char)v441;
  v356 = &v353[12 * v355];
  *(_DWORD *)v356 = v354;
  *((_DWORD *)v356 + 1) = 4;
  v357 = ~v354;
  if (v357 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD2D84);
  }
  v358 = *((_QWORD *)this + 499) + 24 * (int)v357;
  v359 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v358 = a2;
  *(_DWORD *)(v358 + 8) = v359;
  *(_BYTE *)(v358 + 17) = v441;
  *(_DWORD *)(v358 + 12) = 6;
  *(_BYTE *)(v358 + 16) = 0;
  if (v463)
  {
    v360 = (char)v464;
    if ((char)v464 != -1)
    {
      if ((char)v464 > 15)
        v360 = -1;
      --*((_DWORD *)v463 + 3 * v360 + 1196);
    }
  }
  if (v476)
  {
    v361 = (char)v477;
    if ((char)v477 != -1)
    {
      if ((char)v477 > 15)
        v361 = -1;
      --*(_DWORD *)&v476[12 * v361 + 4784];
    }
  }
  if (v480)
  {
    v362 = (char)v481;
    if ((char)v481 != -1)
    {
      if ((char)v481 > 15)
        v362 = -1;
      --*(_DWORD *)&v480[12 * v362 + 4784];
    }
  }
  if (v470)
  {
    v363 = (char)v471;
    if ((char)v471 != -1)
    {
      if ((char)v471 > 15)
        v363 = -1;
      --*(_DWORD *)(v470 + 12 * v363 + 4784);
    }
  }
  if (v472)
  {
    v364 = (char)v473;
    if ((char)v473 != -1)
    {
      if ((char)v473 > 15)
        v364 = -1;
      --*(_DWORD *)(v472 + 12 * v364 + 4784);
    }
  }
  if (v28 != -1)
  {
    if (v28 > 15)
      v365 = -1;
    else
      v365 = v28;
    --*(_DWORD *)&v353[12 * v365 + 8];
  }
  if (v474)
  {
    v366 = (char)v475;
    if ((char)v475 != -1)
    {
      if ((char)v475 > 15)
        v366 = -1;
      --*(_DWORD *)(v474 + 12 * v366 + 4784);
    }
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::emitAllocateButterfly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  char v9;
  uint8x8_t v14;
  JSC::AssemblerBuffer *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;

  if ((a2 & 0x40) != 0 || (v9 = a3, (a3 & 0x40) != 0) || (a4 & 0x40) != 0 || (a5 & 0x40) != 0 || (a6 & 0x40) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  a9.i32[0] = (1 << a3) | (1 << a2) | (1 << a4) | (1 << a5) | (1 << a6);
  v14 = (uint8x8_t)vcnt_s8(a9);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.i32[0] != 5)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x197BD2FB4);
  }
  v17 = (JSC::AssemblerBuffer *)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 200);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = a4 & 0x1F | (32 * (v9 & 0x1F)) | 0x531D7000;
  v19 = *(_DWORD *)(a1 + 200);
  v20 = v19 + 4;
  *(_DWORD *)(a1 + 200) = v19 + 4;
  if ((v19 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, a2, a3, a4, a5, a6, a7, a8);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = a5 | (32 * a4) | 0x11002000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AssemblyHelpers::emitAllocateVariableSized((_DWORD *)a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 352) + 16) + 6648, a5, a4, a6, a7, 0);
  v28 = a2 | (32 * a2) | 0x91002000;
  v29 = *(_DWORD *)(a1 + 200);
  if (v29 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v21, v22, v23, v24, v25, v26, v27);
    v29 = *(_DWORD *)(a1 + 200);
  }
  v30 = 32 * a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = v28;
  v31 = *(_DWORD *)(a1 + 200);
  v32 = v31 + 4;
  *(_DWORD *)(a1 + 200) = v31 + 4;
  if ((v31 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v17, v21, v22, v23, v24, v25, v26, v27);
    v32 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v32) = v9 & 0x1F | ((v9 & 0x1F) << 10) | v30 | 0x293F0000;
  *(_DWORD *)(a1 + 200) += 4;
}

unsigned int *JSC::DFG::SpeculativeJIT::emitInitializeButterfly(uint64_t a1, unsigned __int8 a2, char a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::AssemblerBuffer *v21;
  int i;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::AssemblerBuffer *v41;
  int v42;
  unsigned int v43[3];
  unsigned int v44[3];

  JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a3, a5);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 0, a5, v9, v10, v11, v12, (uint64_t)v44, v13);
  v21 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v41 = v21;
      JSC::AssemblerBuffer::outOfLineGrow(v21, v14, v15, v16, v17, v18, v19, v20);
      v21 = v41;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  v23 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v21, v14, v15, v16, v17, v18, v19, v20);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = a5 | (32 * a5) | 0x51000400;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, a4, a2 | ((unint64_t)a5 << 8) | 0x300000000, 0x200000000uLL, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, a5, v24, v25, v26, v27, (uint64_t)v43, v28);
  v42 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v43, (unsigned int *)&v42, a1, v29, v30, v31, v32, v33);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v44, a1, v34, v35, v36, v37, v38, v39);
}

uint64_t JSC::DFG::SpeculativeJIT::compileArraySpliceExtract(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::ARM64LogicalImmediate *v38;
  JSC::ARM64LogicalImmediate *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  JSC::AssemblerBuffer *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint8x8_t v54;
  __int32 v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  char v66;
  unsigned __int8 v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  JSC::ARM64LogicalImmediate *v71;
  char *v72;
  uint64_t v73;
  int v74;
  JSC::ARM64LogicalImmediate *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  unsigned int v98;
  unsigned int v99;
  char v100;
  char *v101;
  unint64_t v102;
  JSC::ARM64LogicalImmediate *v103;
  JSC::AssemblerBuffer *v104;
  unint64_t v105;
  JSC::ARM64LogicalImmediate *v106;
  JSC::ARM64LogicalImmediate *v107;
  int v108;
  int v109;
  JSC::DFG::SpeculativeJIT *v110;
  unint64_t v111;
  char v112;
  _BYTE v113[7];
  JSC::DFG::SpeculativeJIT *v114;
  unint64_t v115;
  char v116;
  _BYTE v117[7];
  void *__dst;
  uint64_t v119;
  _WORD v120[4];

  v10 = *((_DWORD *)a2 + 13);
  v11 = *((_DWORD *)a2 + 14);
  v12 = *((_QWORD *)a2 + 3);
  v13 = 255;
  v14 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if ((v12 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_86;
  v15 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_101;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_86:
    v16 = -1;
  v17 = *((_QWORD *)a2 + 4);
  v114 = this;
  v115 = v17;
  v116 = -1;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v19 = *((unsigned int *)this + 1001);
  if (v18 >= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD382CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
  {
    v116 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v17, (uint64_t)v117, a4, a5, a6, a7, a8);
    v19 = *((unsigned int *)this + 1001);
  }
  v20 = *((_QWORD *)a2 + 5);
  v110 = this;
  v111 = v20;
  v112 = -1;
  v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= v19)
  {
    __break(0xC471u);
LABEL_101:
    JUMPOUT(0x197BD3824);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
    v112 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v20, (uint64_t)v113, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  v22 = v116;
  if (v116 == 255)
  {
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v114, v115, (uint64_t)v117, a4, a5, a6, a7, a8);
    v116 = v22;
  }
  v23 = v112;
  if (v112 == 255)
  {
    v23 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v110, v111, (uint64_t)v113, a4, a5, a6, a7, a8);
    v112 = v23;
  }
  v108 = v11;
  v109 = v10;
  JSC::DFG::SpeculativeJIT::speculateArray((uint64_t)this, *((_QWORD *)a2 + 3), v16, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v24, v25, v26, v27, v28, v29, v30);
  ++*((_DWORD *)this + 1196);
  v37 = *((unsigned int *)this + 1194);
  if ((_DWORD)v37 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v37, (uint64_t)v31, v32, v33, v34, v35, v36);
  }
  v38 = (JSC::ARM64LogicalImmediate *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v31, v32, v33, v34, v35, v36);
  __dst = v120;
  v119 = 3;
  v106 = v39;
  v107 = v38;
  if (v16 == 1)
  {
    v46 = 0;
  }
  else
  {
    v120[0] = v16 | 0x100;
    v46 = 1;
    HIDWORD(v119) = 1;
  }
  if (v22 != 2)
  {
    v120[v46++] = v22 | 0x200;
    HIDWORD(v119) = v46;
  }
  if (v23 == 3)
  {
    if (!v46)
      goto LABEL_74;
  }
  else
  {
    v120[v46++] = v23 | 0x300;
    HIDWORD(v119) = v46;
  }
  v47 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  do
  {
    v48 = 0;
    v49 = 0;
    v50 = (char *)__dst;
    v51 = v46;
    do
    {
      if ((*((_BYTE *)__dst + v48 + 1) & 0x40) != 0)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      v49 |= 1 << *((_BYTE *)__dst + v48 + 1);
      v48 += 2;
    }
    while (2 * v46 != v48);
    v52 = 0;
    do
    {
      v53 = *((_BYTE *)__dst + v52) & 0x7F;
      if (v53 >= 0x40)
        goto LABEL_87;
      v49 &= ~(1 << v53);
      v52 += 2;
    }
    while (2 * v46 != v52);
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
    v54.i16[0] = vaddlv_u8(v54);
    v55 = v54.i32[0];
    v56 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v49));
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.i32[0] + v55)
    {
      v13 = 0;
      if (v46 <= 1uLL)
        v57 = 1;
      else
        v57 = v46;
      v58 = 2 * v57;
      while (1)
      {
        v59 = *((unsigned __int8 *)__dst + v13 + 1);
        if ((v59 & 0x7Fu) >= 0x40)
          goto LABEL_87;
        if (((v49 >> (v59 & 0x7F)) & 1) != 0)
          break;
        v13 += 2;
        if (v58 == v13)
          goto LABEL_53;
      }
      v60 = *((unsigned __int8 *)__dst + v13);
      if (v60 == v59)
        goto LABEL_51;
      v61 = (char)v60;
      if ((char)v60 == 63)
      {
        v62 = *((_DWORD *)this + 50);
        v63 = *((_DWORD *)this + 48);
        if ((char)v59 != 31)
        {
          v65 = v59 & 0x1F | 0xD2800000;
          goto LABEL_48;
        }
      }
      else
      {
        v62 = *((_DWORD *)this + 50);
        v63 = *((_DWORD *)this + 48);
        v64 = v59 == 31 || v61 == 31;
        if (!v64)
        {
          v65 = v59 & 0xFFE0FFFF | ((v61 & 0x1F) << 16) | 0xAA0003E0;
LABEL_48:
          if (v62 + 4 > v63)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v47, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
            v62 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v62) = v65;
          *((_DWORD *)this + 50) += 4;
          v50 = (char *)__dst;
          v51 = HIDWORD(v119);
LABEL_51:
          v38 = (JSC::ARM64LogicalImmediate *)memmove(&v50[v13], &v50[v13 + 2], 2 * v51 - v13 - 2);
          v46 = HIDWORD(v119) - 1;
          goto LABEL_52;
        }
      }
      v65 = (char)v59 | (32 * v61) | 0x91000000;
      goto LABEL_48;
    }
    v104 = v47;
    v105 = v14;
    v66 = *(_BYTE *)__dst;
    v67 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v67, v41, v42, v43, v44, v45);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v119) - 2);
    v68 = (HIDWORD(v119) - 1);
    v64 = HIDWORD(v119) == 1;
    HIDWORD(v119) = v68;
    v13 = (unint64_t)__dst;
    v38 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v68);
    if (v64)
    {
      v73 = 0;
      v74 = 0;
      v69 = 0;
      v39 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v68);
    }
    else
    {
      LOBYTE(v46) = v66;
      LODWORD(v50) = v67;
      v51 = 2 * v68;
      v49 = (unint64_t)__dst;
      while (*(unsigned __int8 *)v49 != (_DWORD)v50)
      {
LABEL_88:
        v49 += 2;
        v51 -= 2;
        if (!v51)
          goto LABEL_59;
      }
      *(_BYTE *)v49 = v46;
LABEL_59:
      v69 = 0;
      v70 = v13;
      v39 = v38;
      v71 = v38;
      do
      {
        if (*(unsigned __int8 *)v13 == *(unsigned __int8 *)(v13 + 1))
        {
          v72 = (char *)v13;
          if (v71 != (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * HIDWORD(v119)))
          {
            v103 = v38;
            if ((JSC::ARM64LogicalImmediate *)v13 == v39)
            {
              v72 = (char *)v71;
            }
            else
            {
              v102 = v70 - (_QWORD)v39;
              memmove(v71, v39, v70 - (_QWORD)v39);
              v72 = (char *)v71 + v102;
            }
            v38 = v103;
          }
          v39 = (JSC::ARM64LogicalImmediate *)(v13 + 2);
          ++v69;
          v71 = (JSC::ARM64LogicalImmediate *)v72;
        }
        v13 += 2;
        v70 += 2;
      }
      while (v13 < (unint64_t)v38);
      v13 = (unint64_t)__dst;
      v73 = HIDWORD(v119);
      v74 = HIDWORD(v119);
      v38 = v71;
    }
    v75 = (JSC::ARM64LogicalImmediate *)(v13 + 2 * v73);
    v47 = v104;
    if (v39 != v75)
    {
      v38 = (JSC::ARM64LogicalImmediate *)memmove(v38, v39, v75 - v39);
      v74 = HIDWORD(v119);
    }
    v46 = v74 - v69;
    v14 = v105;
LABEL_52:
    HIDWORD(v119) = v46;
LABEL_53:
    ;
  }
  while (v46);
  v76 = __dst;
  if (v120 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v119) = 0;
    WTF::fastFree((unint64_t)v76, v39, v40, v41, v42, v43, v44, v45);
  }
LABEL_74:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)(v109 + (v108 << 28 >> 31)), 4, v41, v42, v43, v44, v45);
  if ((_DWORD)v107 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v106, 0, v77, v78, v79, v80, v81);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((_QWORD)v107 << 35) + 0x380000001ALL, 0, v77, v78, v79, v80, v81);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationArraySpliceExtract, v82, v83, v84, v85, v86, v87, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v88, v89, v90, v91, v92, v93);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v94, v95, v96);
  --*((_DWORD *)this + 1196);
  v98 = v112;
  if (v112 > 15)
    v98 = -1;
  --*((_DWORD *)v110 + 3 * v98 + 1196);
  v99 = v116;
  if (v116 > 15)
    v99 = -1;
  --*((_DWORD *)v114 + 3 * v99 + 1196);
  if (v14)
  {
    if (v16 > 15)
      v100 = -1;
    else
      v100 = v16;
    v101 = (char *)this + 12 * v100 + 4776;
    --*((_DWORD *)v101 + 2);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::AssemblerBuffer *v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::DFG::Node *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  JSC::DFG::Node *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint8x8_t v79;
  __int32 v80;
  uint8x8_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  BOOL v90;
  char v91;
  char v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  _BYTE *v97;
  unsigned __int8 *v98;
  char *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::ARM64LogicalImmediate *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint8x8_t v115;
  __int32 v116;
  uint8x8_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  char v127;
  char v128;
  uint64_t v129;
  unsigned __int8 *v130;
  JSC::ARM64LogicalImmediate *v131;
  uint64_t v132;
  _BYTE *v133;
  unsigned __int8 *v134;
  char *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  int v138;
  unsigned __int8 *v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  unsigned int *v162;
  int v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  unsigned int v167;
  char *v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  char v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  unsigned int *v197;
  int v198;
  unint64_t v199;
  uint64_t v200;
  unsigned int v201;
  char *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint8x8_t v307;
  __int32 v308;
  uint8x8_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  int v314;
  int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v319;
  char v320;
  char v321;
  uint64_t v322;
  unsigned __int8 *v323;
  char *v324;
  uint64_t v325;
  _BYTE *v326;
  unsigned __int8 *v327;
  char *v328;
  unsigned __int8 *v329;
  uint64_t v330;
  int v331;
  char *v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  unsigned int v342;
  unsigned int *v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  int64_t v347;
  int64_t v348;
  char *v349;
  char *v350;
  char *v351;
  int64_t v352;
  JSC::ARM64LogicalImmediate *v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  JSC::AssemblerBuffer *v357;
  unint64_t v358;
  JSC::ARM64LogicalImmediate *v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  int v363;
  unsigned int v364[2];
  char v365;
  __int16 v366;
  char v367;
  unsigned int v368[3];
  unsigned int v369[3];
  int v370;
  _QWORD v371[4];
  uint64_t v372;
  uint64_t v373;
  signed __int8 v374;
  void *__dst;
  unint64_t v376;
  _QWORD v377[2];
  unsigned __int8 v378;
  unsigned __int8 v379;
  unsigned __int8 v380;
  uint64_t v381;
  unsigned __int8 v382;
  uint64_t v383;
  unsigned __int8 v384;
  JSC::DFG::Node *v385;
  unsigned int v386[3];

  v385 = a2;
  v8 = *((_QWORD *)this + 495);
  if (*((_DWORD *)a2 + 8) == 3)
    v9 = 2;
  else
    v9 = 3;
  v10 = v9 + *((_DWORD *)a2 + 6);
  if (*(_DWORD *)(v8 + 164) <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD4DE8);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 152) + 8 * v10);
  v13 = ~*(_DWORD *)((v12 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD4DF0);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v12, a3, a4, a5, a6, a7, a8);
  else
    v15 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v383, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v381, this, v16, v17, v18, v19, v20, v21);
  if (v15 == 0xFF)
    v15 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v12, v22, v23, v24, v25, v26, v27);
  v380 = v15;
  v28 = (JSC::AssemblerBuffer *)v384;
  v379 = v384;
  v29 = v382;
  v30 = (char)v382;
  v378 = v382;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v15 | 0xFFFFFFF800000000, (char)v382, v23, v24, v25, v26, v27);
  if (*((_DWORD *)a2 + 8) == 4)
  {
    v344 = *((_QWORD *)this + 495);
    v345 = *((_DWORD *)a2 + 6) + 2;
    if (*(_DWORD *)(v344 + 164) <= v345)
    {
      __break(0xC471u);
      goto LABEL_336;
    }
    JSC::DFG::SpeculativeJIT::emitPopulateSliceIndex((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v344 + 152) + 8 * v345), 0, (char)v29, (char)v28, v35, v36, v37);
  }
  else
  {
    v38 = *((_DWORD *)this + 50);
    if (v38 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v31, v32, v33, v34, v35, v36, v37);
      v38 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v38) = v28 & 0x1F | 0x52800000;
    *((_DWORD *)this + 50) += 4;
  }
  v362 = v30;
  v39 = *((_QWORD *)this + 495);
  v40 = (*((_DWORD *)a2 + 6) + 1);
  if (*(_DWORD *)(v39 + 164) <= v40)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD4DF8);
  }
  v41 = v15;
  v42 = *(_QWORD *)(v39 + 152);
  v43 = *(_QWORD *)(v42 + 8 * v40);
  v44 = (v43 >> 50) & 0x3F;
  if (((v43 >> 50) & 0x3F) <= 0x14)
  {
    if ((_DWORD)v44 != 11)
    {
      if ((_DWORD)v44)
      {
        if ((_DWORD)v44 == 1)
        {
          __dst = this;
          v376 = (unint64_t)&v378;
          v377[0] = &v379;
          v377[1] = &v385;
          JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v372, (uint64_t)this, v43, 1, v34, v35, v36, v37);
          v211 = v374;
          if (v374 == 255)
          {
            v211 = JSC::DFG::SpeculativeJIT::fillJSValue(v372, v373, v205, v206, v207, v208, v209, v210);
            v374 = v211;
          }
          JSC::DFG::SpeculativeJIT::speculateInt32((uint64_t)this, *(_QWORD *)(v42 + 8 * v40), v211, v206, v207, v208, v209, v210);
          LOBYTE(v369[0]) = v211;
          v371[0] = this;
          v371[1] = &v380;
          v371[2] = &v379;
          v371[3] = v369;
          JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)::$_0::operator()<JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)::$_1>((uint64_t)&__dst, (uint64_t)v371);
          if ((v373 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v212 = v374;
            if (v374 > 15)
              v212 = -1;
            --*(_DWORD *)(v372 + 12 * v212 + 4784);
          }
          goto LABEL_156;
        }
        goto LABEL_294;
      }
      v70 = v43 & 0xFF00FFFFFFFFFFFFLL;
      if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_79;
      v104 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v104 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD4E18);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v104 + 12)
        || (LODWORD(v47) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v32, v33, v34, v35, v36, v37),
            (_DWORD)v47 == -1))
      {
LABEL_79:
        LODWORD(v47) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v32, v33, v34, v35, v36, v37);
      }
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v105, v32, v33, v34, v35, v36, v37);
      if (*((_WORD *)a2 + 9) == 146)
        v71 = *((_DWORD *)a2 + 20);
      else
        v71 = *((_DWORD *)a2 + 18);
      v71 = v71;
      if (v71 == 9)
        goto LABEL_83;
      goto LABEL_287;
    }
  }
  else
  {
    if (((v43 >> 50) & 0x3F) <= 0x18)
    {
      if ((_DWORD)v44 == 21)
      {
        v45 = v43 & 0xFF00FFFFFFFFFFFFLL;
        if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_22;
        v46 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v46 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BD4E08);
        }
        if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v46 + 12)
          || (v47 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *(_QWORD *)(v42 + 8 * v40), v32, v33, v34, v35, v36, v37), (_DWORD)v47 == -1))
        {
LABEL_22:
          v47 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v43, v32, v33, v34, v35, v36, v37);
        }
        JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v42 + 8 * v40), v47, v33, v34, v35, v36, v37);
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v48, v49, v50, v51, v52, v53, v54);
        v61 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v55, v56, v57, v58, v59, v60);
        v69 = v61;
        v70 = (unint64_t)v62;
        __dst = v377;
        v376 = 3;
        if ((_DWORD)v41 == 1)
        {
          v71 = 0;
        }
        else
        {
          LOWORD(v377[0]) = v41 | 0x100;
          v71 = 1;
          HIDWORD(v376) = 1;
        }
        if ((_DWORD)v47 != 2)
        {
          *((_WORD *)v377 + v71++) = v47 | 0x200;
          HIDWORD(v376) = v71;
        }
        if ((_DWORD)v28 == 3)
        {
          if (!v71)
            goto LABEL_138;
        }
        else
        {
          *((_WORD *)v377 + v71++) = (unsigned __int16)v28 | 0x300;
          HIDWORD(v376) = v71;
        }
        v360 = v61;
        while (1)
        {
          v72 = 0;
          v73 = 0;
          v74 = (char *)__dst;
          v75 = v71;
          do
          {
            if ((*((_BYTE *)__dst + v72 + 1) & 0x40) != 0)
              goto LABEL_286;
            v73 |= 1 << *((_BYTE *)__dst + v72 + 1);
            v72 += 2;
          }
          while (2 * v71 != v72);
          v76 = 0;
          do
          {
            v77 = *((_BYTE *)__dst + v76) & 0x7F;
            if (v77 >= 0x40)
              goto LABEL_286;
            v73 &= ~(1 << v77);
            v76 += 2;
          }
          while (2 * v71 != v76);
          v78 = v29;
          v29 = v41;
          v41 = v45;
          v79 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
          v79.i16[0] = vaddlv_u8(v79);
          v80 = v79.i32[0];
          v81 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v73));
          v81.i16[0] = vaddlv_u8(v81);
          if (!(v81.i32[0] + v80))
          {
            v354 = v70;
            v91 = *(_BYTE *)__dst;
            v92 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v92, v64, v65, v66, v67, v68);
            memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v376) - 2);
            v93 = (HIDWORD(v376) - 1);
            v90 = HIDWORD(v376) == 1;
            HIDWORD(v376) = v93;
            v94 = (unsigned __int8 *)__dst;
            v95 = (unsigned __int8 *)__dst + 2 * v93;
            if (v90)
            {
              v101 = 0;
              v102 = 0;
              LODWORD(v28) = 0;
              v62 = v95;
            }
            else
            {
              v96 = 2 * v93;
              v97 = __dst;
              while (*v97 != v92)
              {
                v97 += 2;
                v96 -= 2;
                if (!v96)
                  goto LABEL_63;
              }
              *v97 = v91;
LABEL_63:
              LODWORD(v28) = 0;
              v98 = v94;
              v62 = v95;
              v99 = (char *)v95;
              do
              {
                if (*v94 == v94[1])
                {
                  v100 = v94;
                  if (v99 != (char *)__dst + 2 * HIDWORD(v376))
                  {
                    v351 = (char *)v95;
                    if (v94 == v62)
                    {
                      v100 = (unsigned __int8 *)v99;
                    }
                    else
                    {
                      v347 = v98 - v62;
                      v349 = v99;
                      memmove(v99, v62, v98 - v62);
                      v100 = (unsigned __int8 *)&v349[v347];
                    }
                    v95 = (unsigned __int8 *)v351;
                  }
                  v62 = v94 + 2;
                  LODWORD(v28) = (_DWORD)v28 + 1;
                  v99 = (char *)v100;
                }
                v94 += 2;
                v98 += 2;
              }
              while (v94 < v95);
              v94 = (unsigned __int8 *)__dst;
              v101 = HIDWORD(v376);
              v102 = HIDWORD(v376);
              v95 = (unsigned __int8 *)v99;
            }
            v103 = &v94[2 * v101];
            v70 = v354;
            if (v62 != v103)
            {
              memmove(v95, v62, v103 - v62);
              v102 = HIDWORD(v376);
            }
            v71 = v102 - (_DWORD)v28;
            goto LABEL_56;
          }
          v82 = 0;
          v83 = v71 <= 1uLL ? 1 : v71;
          v84 = 2 * v83;
          while (1)
          {
            v85 = *((unsigned __int8 *)__dst + v82 + 1);
            if ((v85 & 0x7Fu) >= 0x40)
              goto LABEL_286;
            if (((v73 >> (v85 & 0x7F)) & 1) != 0)
              break;
            v82 += 2;
            if (v84 == v82)
            {
              v45 = v41;
              goto LABEL_57;
            }
          }
          v86 = *((unsigned __int8 *)__dst + v82);
          if (v86 != v85)
            break;
LABEL_55:
          memmove(&v74[v82], &v74[v82 + 2], 2 * v75 - v82 - 2);
          v71 = HIDWORD(v376) - 1;
LABEL_56:
          v45 = v41;
          HIDWORD(v376) = v71;
LABEL_57:
          v41 = v29;
          v29 = v78;
          if (!v71)
          {
            v140 = __dst;
            v69 = v360;
            if (v377 != __dst && __dst)
            {
              __dst = 0;
              LODWORD(v376) = 0;
              WTF::fastFree((unint64_t)v140, v62, (uint64_t)v63, v64, v65, v66, v67, v68);
            }
LABEL_138:
            if ((_DWORD)v69 == -1)
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v70, 0, v64, v65, v66, v67, v68);
            else
              JSC::MacroAssemblerARM64::load64((uint64_t)this, (v69 << 35) + 0x380000001ALL, 0, v64, v65, v66, v67, v68);
            JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationArrayIndexOfString, v141, v142, v143, v144, v145, v146, (int *)&__dst);
            JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v147, v148, v149, v150, v151, v152);
            if ((_DWORD)v29)
            {
              if ((_DWORD)v29 == 31)
              {
                v160 = -1862270945;
              }
              else if ((_DWORD)v29 == 255)
              {
                v160 = -1442774017;
              }
              else
              {
                v160 = v29 | 0xAA0003E0;
              }
              v162 = (unsigned int *)((char *)this + 200);
              v161 = *((_DWORD *)this + 50);
              if (v161 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v153, v154, v155, v156, v157, v158, v159);
                v161 = *v162;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v161) = v160;
              *v162 += 4;
            }
            JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v154, v155, v156, v157, v158, v159);
            v163 = *((_DWORD *)a2 + 12);
            v164 = ~v163;
            if (v164 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BD4E00);
            }
LABEL_148:
            v165 = *((_QWORD *)this + 499);
            v166 = (char *)this + 4776;
            if (v362 > 15)
              v167 = -1;
            else
              v167 = v362;
            v168 = &v166[12 * v167];
            *(_DWORD *)v168 = v163;
            *((_DWORD *)v168 + 1) = 5;
            v169 = v165 + 24 * (int)v164;
            v170 = *((_DWORD *)a2 + 13);
            *(_QWORD *)v169 = a2;
            *(_DWORD *)(v169 + 8) = v170;
            *(_BYTE *)(v169 + 17) = v362;
            *(_DWORD *)(v169 + 12) = 1;
            *(_BYTE *)(v169 + 16) = 0;
            if (v45)
            {
              if ((int)v47 > 15)
                v171 = -1;
              else
                v171 = v47;
              goto LABEL_155;
            }
            goto LABEL_156;
          }
        }
        v87 = (char)v86;
        if ((char)v86 == 63)
        {
          v88 = *((_DWORD *)this + 50);
          v89 = *((_DWORD *)this + 48);
          if ((char)v85 != 31)
          {
            LODWORD(v28) = v85 & 0x1F | 0xD2800000;
            goto LABEL_52;
          }
        }
        else
        {
          v88 = *((_DWORD *)this + 50);
          v89 = *((_DWORD *)this + 48);
          v90 = v85 == 31 || v87 == 31;
          if (!v90)
          {
            LODWORD(v28) = v85 & 0xFFE0FFFF | ((v87 & 0x1F) << 16) | 0xAA0003E0;
LABEL_52:
            if (v88 + 4 > v89)
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v62, (uint64_t)v63, v64, v65, v66, v67, v68);
              v88 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v88) = (_DWORD)v28;
            *((_DWORD *)this + 50) += 4;
            v74 = (char *)__dst;
            v75 = HIDWORD(v376);
            goto LABEL_55;
          }
        }
        LODWORD(v28) = (char)v85 | (32 * v87) | 0x91000000;
        goto LABEL_52;
      }
LABEL_294:
      __break(0xC471u);
      JUMPOUT(0x197BD4B60);
    }
    if ((_DWORD)v44 != 25 && (_DWORD)v44 != 47)
    {
      if ((_DWORD)v44 == 49)
      {
        JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&__dst, (uint64_t)this, *(_QWORD *)(v42 + 8 * v40), v33, v34, v35, v36, v37);
        JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v372, this, v213, v214, v215, v216, v217, v218);
        v225 = v377[0];
        if (LOBYTE(v377[0]) == 255)
        {
          v225 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)__dst, v376, v219, v220, v221, v222, v223, v224);
          LOBYTE(v377[0]) = v225;
        }
        v226 = (char)v373;
        JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v362, v362);
        JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (char)v28, (char)v28);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(this, v227, v228, v229, v230, v231, v232, v233, &v370);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, (char)v28, v362, v234, v235, v236, v237, (uint64_t)v369);
        JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, v15 | ((_QWORD)v28 << 8) | 0x300000000, 0x200000000uLL, v226, v238, v239, v240, v241);
        JSC::MacroAssemblerARM64::branchDouble(this, 0, v226, v225, v242, v243, v244, v245, (uint64_t)v368);
        JSC::MacroAssemblerARM64::add32((uint64_t)this, 1, (char)v28, (char)v28, v246, v247, v248, v249);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v250, v251, v252, v253, v254, v255, v256, (int *)v386);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v257, v258, v259, v260, v261, v262);
        if (*((_BYTE *)this + 328))
          v268 = 69;
        else
          v268 = 65;
        v364[0] = v386[0];
        v364[1] = 0;
        v365 = v268;
        v366 = 15;
        v367 = -1;
        v363 = v370;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v364, (unsigned int *)&v363, (uint64_t)this, v263, v264, v265, v266, v267);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v369, (uint64_t)this, v269, v270, v271, v272, v273, v274);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (char)v28, v275, v276, v277, v278, v279);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v368, (uint64_t)this, v280, v281, v282, v283, v284, v285);
        JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, (char)v28, a2, 1, 0, v286, v287, v288);
        if (v372)
        {
          v289 = v372 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v373];
          --*(_DWORD *)(v289 + 4976);
        }
        v290 = (char *)__dst
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[SLOBYTE(v377[0])];
        --*((_DWORD *)v290 + 1244);
        goto LABEL_156;
      }
      goto LABEL_294;
    }
  }
  v45 = v43 & 0xFF00FFFFFFFFFFFFLL;
  if ((v43 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_220;
  v291 = ~*(_DWORD *)((v43 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v291 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD4E10);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v291 + 12)
    || (LODWORD(v47) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *(_QWORD *)(v42 + 8 * v40), v32, v33, v34, v35, v36, v37), (_DWORD)v47 == -1))
  {
LABEL_220:
    LODWORD(v47) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v43, v32, v33, v34, v35, v36, v37);
  }
  JSC::DFG::SpeculativeJIT::speculate(this, v292, *(_QWORD *)(v42 + 8 * v40), v33, v34, v35, v36, v37);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v293, v294, v295, v296, v297, v298, v299);
  __dst = v377;
  v376 = 3;
  if ((_DWORD)v41)
  {
    LOWORD(v377[0]) = v41;
    v71 = 1;
    HIDWORD(v376) = 1;
  }
  else
  {
    v71 = 0;
  }
  if ((_DWORD)v47 != 1)
  {
    *((_WORD *)v377 + v71++) = v47 | 0x100;
    HIDWORD(v376) = v71;
  }
  if ((_DWORD)v28 == 2)
  {
    if (!v71)
      goto LABEL_276;
  }
  else
  {
    *((_WORD *)v377 + v71++) = (unsigned __int16)v28 | 0x200;
    HIDWORD(v376) = v71;
  }
  v28 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v70 = 1;
LABEL_228:
  v301 = 0;
  v302 = 0;
  v303 = (char *)__dst;
  v304 = v71;
  while ((*((_BYTE *)__dst + v301 + 1) & 0x40) == 0)
  {
    v302 |= 1 << *((_BYTE *)__dst + v301 + 1);
    v301 += 2;
    if (2 * v71 == v301)
    {
      v305 = 0;
      do
      {
        v306 = *((_BYTE *)__dst + v305) & 0x7F;
        if (v306 >= 0x40)
          goto LABEL_286;
        v302 &= ~(1 << v306);
        v305 += 2;
      }
      while (2 * v71 != v305);
      v307 = (uint8x8_t)vcnt_s8((int8x8_t)v302);
      v307.i16[0] = vaddlv_u8(v307);
      v308 = v307.i32[0];
      v309 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v302));
      v309.i16[0] = vaddlv_u8(v309);
      if (v309.i32[0] + v308)
      {
        v310 = 0;
        if (v71 <= 1uLL)
          v311 = 1;
        else
          v311 = v71;
        v312 = 2 * v311;
        while (1)
        {
          v313 = *((unsigned __int8 *)__dst + v310 + 1);
          if ((v313 & 0x7Fu) >= 0x40)
            goto LABEL_286;
          if (((v302 >> (v313 & 0x7F)) & 1) != 0)
            break;
          v310 += 2;
          if (v312 == v310)
            goto LABEL_255;
        }
        v314 = *((unsigned __int8 *)__dst + v310);
        if (v314 != v313)
        {
          v315 = (char)v314;
          if ((char)v314 == 63)
          {
            v316 = *((_DWORD *)this + 50);
            v317 = *((_DWORD *)this + 48);
            if ((char)v313 == 31)
              goto LABEL_270;
            v319 = v313 & 0x1F | 0xD2800000;
          }
          else
          {
            v316 = *((_DWORD *)this + 50);
            v317 = *((_DWORD *)this + 48);
            if (v313 != 31 && v315 != 31)
            {
              v319 = v313 & 0xFFE0FFFF | ((v315 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_250;
            }
LABEL_270:
            v319 = (char)v313 | (32 * v315) | 0x91000000;
          }
LABEL_250:
          if (v316 + 4 > v317)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v28, (uint64_t)v300, (uint64_t)v63, v64, v65, v66, v67, v68);
            v316 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v316) = v319;
          *((_DWORD *)this + 50) += 4;
          v303 = (char *)__dst;
          v304 = HIDWORD(v376);
        }
        memmove(&v303[v310], &v303[v310 + 2], 2 * v304 - v310 - 2);
        v71 = HIDWORD(v376) - 1;
      }
      else
      {
        v357 = v28;
        v358 = v45;
        v320 = *(_BYTE *)__dst;
        v321 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v321, v64, v65, v66, v67, v68);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v376) - 2);
        v322 = (HIDWORD(v376) - 1);
        v90 = HIDWORD(v376) == 1;
        HIDWORD(v376) = v322;
        v323 = (unsigned __int8 *)__dst;
        v324 = (char *)__dst + 2 * v322;
        if (v90)
        {
          v330 = 0;
          v331 = 0;
          v300 = (char *)__dst + 2 * v322;
        }
        else
        {
          v325 = 2 * v322;
          v326 = __dst;
          while (*v326 != v321)
          {
            v326 += 2;
            v325 -= 2;
            if (!v325)
              goto LABEL_261;
          }
          *v326 = v320;
LABEL_261:
          LODWORD(v322) = 0;
          v327 = v323;
          v300 = v324;
          v328 = v324;
          do
          {
            if (*v323 == v323[1])
            {
              v329 = v323;
              if (v328 != (char *)__dst + 2 * HIDWORD(v376))
              {
                v356 = v322;
                if (v323 == (unsigned __int8 *)v300)
                {
                  v329 = (unsigned __int8 *)v328;
                }
                else
                {
                  v352 = v327 - (unsigned __int8 *)v300;
                  memmove(v328, v300, v327 - (unsigned __int8 *)v300);
                  v329 = (unsigned __int8 *)&v328[v352];
                }
                LODWORD(v322) = v356;
              }
              v300 = (char *)(v323 + 2);
              LODWORD(v322) = v322 + 1;
              v328 = (char *)v329;
            }
            v323 += 2;
            v327 += 2;
          }
          while (v323 < (unsigned __int8 *)v324);
          v323 = (unsigned __int8 *)__dst;
          v330 = HIDWORD(v376);
          v331 = HIDWORD(v376);
          v324 = v328;
        }
        v332 = (char *)&v323[2 * v330];
        v28 = v357;
        v45 = v358;
        if (v300 != v332)
        {
          v346 = v322;
          memmove(v324, v300, v332 - v300);
          LODWORD(v322) = v346;
          v331 = HIDWORD(v376);
        }
        v71 = v331 - v322;
      }
      HIDWORD(v376) = v71;
LABEL_255:
      if (!v71)
      {
        v333 = __dst;
        if (v377 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v376) = 0;
          WTF::fastFree((unint64_t)v333, v300, (uint64_t)v63, v64, v65, v66, v67, v68);
        }
LABEL_276:
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationArrayIndexOfNonStringIdentityValueContiguous, (uint64_t)v63, v64, v65, v66, v67, v68, (int *)&__dst);
        if ((_DWORD)v29)
        {
          if ((_DWORD)v29 == 31)
          {
            v341 = -1862270945;
          }
          else if ((_DWORD)v29 == 255)
          {
            v341 = -1442774017;
          }
          else
          {
            v341 = v29 | 0xAA0003E0;
          }
          v343 = (unsigned int *)((char *)this + 200);
          v342 = *((_DWORD *)this + 50);
          if (v342 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v334, v335, v336, v337, v338, v339, v340);
            v342 = *v343;
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v342) = v341;
          *v343 += 4;
        }
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v335, v336, v337, v338, v339, v340);
        v163 = *((_DWORD *)a2 + 12);
        v164 = ~v163;
        if (v164 < *((unsigned int *)this + 1001))
          goto LABEL_148;
        __break(0xC471u);
LABEL_336:
        JUMPOUT(0x197BD4AB8);
      }
      goto LABEL_228;
    }
  }
LABEL_286:
  __break(1u);
LABEL_287:
  if (v71 != 7)
  {
    if (v71 != 8)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD4B80);
    }
    JSC::DFG::SpeculativeJIT::callOperation<unsigned long long (*)(JSC::Butterfly *,long long,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)this, v362, (char)v41, v47, (char)v28, v67, v68);
    goto LABEL_187;
  }
LABEL_83:
  v106 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v63, v64, v65, v66, v67, v68);
  v108 = (uint64_t)v107;
  __dst = v377;
  v376 = 3;
  if ((_DWORD)v41 == 1)
  {
    v71 = 0;
  }
  else
  {
    LOWORD(v377[0]) = v41 | 0x100;
    v71 = 1;
    HIDWORD(v376) = 1;
  }
  v361 = v106;
  if ((_DWORD)v47 != 2)
  {
    *((_WORD *)v377 + v71++) = v47 | 0x200;
    HIDWORD(v376) = v71;
  }
  if ((_DWORD)v28 == 3)
  {
    if (!v71)
      goto LABEL_178;
  }
  else
  {
    *((_WORD *)v377 + v71++) = (unsigned __int16)v28 | 0x300;
    HIDWORD(v376) = v71;
  }
  v359 = v107;
  do
  {
    v109 = 0;
    v110 = 0;
    v111 = (char *)__dst;
    v112 = v71;
    do
    {
      if ((*((_BYTE *)__dst + v109 + 1) & 0x40) != 0)
        goto LABEL_286;
      v110 |= 1 << *((_BYTE *)__dst + v109 + 1);
      v109 += 2;
    }
    while (2 * v71 != v109);
    v113 = 0;
    do
    {
      v114 = *((_BYTE *)__dst + v113) & 0x7F;
      if (v114 >= 0x40)
        goto LABEL_286;
      v110 &= ~(1 << v114);
      v113 += 2;
    }
    while (2 * v71 != v113);
    v115 = (uint8x8_t)vcnt_s8((int8x8_t)v110);
    v115.i16[0] = vaddlv_u8(v115);
    v116 = v115.i32[0];
    v117 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v110));
    v117.i16[0] = vaddlv_u8(v117);
    if (v117.i32[0] + v116)
    {
      v118 = 0;
      if (v71 <= 1uLL)
        v119 = 1;
      else
        v119 = v71;
      v120 = 2 * v119;
      while (1)
      {
        v121 = *((unsigned __int8 *)__dst + v118 + 1);
        if ((v121 & 0x7Fu) >= 0x40)
          goto LABEL_286;
        if (((v110 >> (v121 & 0x7F)) & 1) != 0)
          break;
        v118 += 2;
        if (v120 == v118)
          goto LABEL_117;
      }
      v122 = *((unsigned __int8 *)__dst + v118);
      if (v122 == v121)
      {
LABEL_115:
        memmove(&v111[v118], &v111[v118 + 2], 2 * v112 - v118 - 2);
        v71 = HIDWORD(v376) - 1;
        goto LABEL_116;
      }
      v123 = (char)v122;
      if ((char)v122 == 63)
      {
        v124 = *((_DWORD *)this + 50);
        v125 = *((_DWORD *)this + 48);
        if ((char)v121 != 31)
        {
          LODWORD(v28) = v121 & 0x1F | 0xD2800000;
          goto LABEL_112;
        }
      }
      else
      {
        v124 = *((_DWORD *)this + 50);
        v125 = *((_DWORD *)this + 48);
        if (v121 != 31 && v123 != 31)
        {
          LODWORD(v28) = v121 & 0xFFE0FFFF | ((v123 & 0x1F) << 16) | 0xAA0003E0;
LABEL_112:
          if (v124 + 4 > v125)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v107, (uint64_t)v63, v64, v65, v66, v67, v68);
            v124 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v124) = (_DWORD)v28;
          *((_DWORD *)this + 50) += 4;
          v111 = (char *)__dst;
          v112 = HIDWORD(v376);
          goto LABEL_115;
        }
      }
      LODWORD(v28) = (char)v121 | (32 * v123) | 0x91000000;
      goto LABEL_112;
    }
    v355 = v70;
    v127 = *(_BYTE *)__dst;
    v128 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v128, v64, v65, v66, v67, v68);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v376) - 2);
    v129 = (HIDWORD(v376) - 1);
    v90 = HIDWORD(v376) == 1;
    HIDWORD(v376) = v129;
    v130 = (unsigned __int8 *)__dst;
    v131 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v129);
    if (v90)
    {
      v137 = 0;
      v138 = 0;
      LODWORD(v28) = 0;
      v107 = v131;
    }
    else
    {
      v132 = 2 * v129;
      v133 = __dst;
      while (*v133 != v128)
      {
        v133 += 2;
        v132 -= 2;
        if (!v132)
          goto LABEL_123;
      }
      *v133 = v127;
LABEL_123:
      LODWORD(v28) = 0;
      v134 = v130;
      v107 = v131;
      v135 = (char *)v131;
      do
      {
        if (*v130 == v130[1])
        {
          v136 = v130;
          if (v135 != (char *)__dst + 2 * HIDWORD(v376))
          {
            v353 = v131;
            if (v130 == (unsigned __int8 *)v107)
            {
              v136 = (unsigned __int8 *)v135;
            }
            else
            {
              v348 = v134 - (unsigned __int8 *)v107;
              v350 = v135;
              memmove(v135, v107, v134 - (unsigned __int8 *)v107);
              v136 = (unsigned __int8 *)&v350[v348];
            }
            v131 = v353;
          }
          v107 = (JSC::ARM64LogicalImmediate *)(v130 + 2);
          LODWORD(v28) = (_DWORD)v28 + 1;
          v135 = (char *)v136;
        }
        v130 += 2;
        v134 += 2;
      }
      while (v130 < (unsigned __int8 *)v131);
      v130 = (unsigned __int8 *)__dst;
      v137 = HIDWORD(v376);
      v138 = HIDWORD(v376);
      v131 = (JSC::ARM64LogicalImmediate *)v135;
    }
    v139 = &v130[2 * v137];
    v70 = v355;
    if (v107 != (JSC::ARM64LogicalImmediate *)v139)
    {
      memmove(v131, v107, v139 - (unsigned __int8 *)v107);
      v138 = HIDWORD(v376);
    }
    v71 = v138 - (_DWORD)v28;
LABEL_116:
    HIDWORD(v376) = v71;
LABEL_117:
    ;
  }
  while (v71);
  v175 = __dst;
  v108 = (uint64_t)v359;
  if (v377 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v376) = 0;
    WTF::fastFree((unint64_t)v175, v107, (uint64_t)v63, v64, v65, v66, v67, v68);
  }
LABEL_178:
  if ((_DWORD)v361 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v108, 0, v64, v65, v66, v67, v68);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v361 << 35) + 0x380000001ALL, 0, v64, v65, v66, v67, v68);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationArrayIndexOfValueInt32OrContiguous, v176, v177, v178, v179, v180, v181, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v182, v183, v184, v185, v186, v187);
  if ((_DWORD)v29)
  {
    if ((_DWORD)v29 == 31)
    {
      v195 = -1862270945;
    }
    else if ((_DWORD)v29 == 255)
    {
      v195 = -1442774017;
    }
    else
    {
      v195 = v29 | 0xAA0003E0;
    }
    v197 = (unsigned int *)((char *)this + 200);
    v196 = *((_DWORD *)this + 50);
    if (v196 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v188, v189, v190, v191, v192, v193, v194);
      v196 = *v197;
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v196) = v195;
    *v197 += 4;
  }
LABEL_187:
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v189, v190, v191, v192, v193, v194);
  v198 = *((_DWORD *)a2 + 12);
  v199 = ~v198;
  if (v199 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD4E20);
  }
  v200 = *((_QWORD *)this + 499);
  v166 = (char *)this + 4776;
  if (v362 > 15)
    v201 = -1;
  else
    v201 = v362;
  v202 = &v166[12 * v201];
  *(_DWORD *)v202 = v198;
  *((_DWORD *)v202 + 1) = 5;
  v203 = v200 + 24 * (int)v199;
  v204 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v203 = a2;
  *(_DWORD *)(v203 + 8) = v204;
  *(_BYTE *)(v203 + 17) = v362;
  *(_DWORD *)(v203 + 12) = 1;
  *(_BYTE *)(v203 + 16) = 0;
  if (v70)
  {
    if ((int)v47 > 15)
      v171 = -1;
    else
      v171 = v47;
LABEL_155:
    --*(_DWORD *)&v166[12 * v171 + 8];
  }
LABEL_156:
  if (v381)
  {
    v172 = (char)v382;
    if ((char)v382 != -1)
    {
      if ((char)v382 > 15)
        v172 = -1;
      --*(_DWORD *)(v381 + 12 * v172 + 4784);
    }
  }
  if (v383)
  {
    v173 = (char)v384;
    if ((char)v384 != -1)
    {
      if ((char)v384 > 15)
        v173 = -1;
      --*(_DWORD *)(v383 + 12 * v173 + 4784);
    }
  }
  if ((_DWORD)v41 != 255)
  {
    if ((char)v41 > 15)
      v174 = -1;
    else
      v174 = v41;
    --*((_DWORD *)this + 3 * v174 + 1196);
  }
}

double JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)::$_0::operator()<JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  JSC::DFG::Node *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  double result;
  int v67;
  unsigned int v68[2];
  char v69;
  __int16 v70;
  char v71;
  unsigned int v72[3];
  unsigned int v73[3];

  v4 = *(_QWORD *)a1;
  JSC::MacroAssemblerARM64::and64(*(_QWORD *)a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, **(_BYTE **)(a1 + 8), **(char **)(a1 + 8));
  JSC::MacroAssemblerARM64::and64(v4, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, **(_BYTE **)(a1 + 16), **(char **)(a1 + 16));
  for (i = *(_DWORD *)(v4 + 200); i < *(_DWORD *)(v4 + 52); *(_DWORD *)(v4 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56), v5, v6, v7, v8, v9, v10, v11);
      i = *(_DWORD *)(v4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + i) = -721215457;
    i = *(_DWORD *)(v4 + 200) + 4;
  }
  *(_DWORD *)(v4 + 208) = 0;
  JSC::MacroAssemblerARM64::branch32(v4, 0, **(char **)(a1 + 16), **(char **)(a1 + 8), v8, v9, v10, v11, (uint64_t)v73);
  v17 = *(_QWORD *)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  v18 = **(unsigned __int8 **)(a2 + 8) | ((unint64_t)**(unsigned __int8 **)(a2 + 16) << 8) | 0x300000000;
  v19 = **(char **)(a2 + 24);
  *(_DWORD *)(*(_QWORD *)(v17 + 296) + 208) &= ~*(_DWORD *)(v17 + 320);
  JSC::MacroAssemblerARM64::load64(v17, v18, 0x200000000uLL, *(char *)(v17 + 304), v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::branch64(v17, 0, 17, v19, v20, v21, v22, v23, (uint64_t)v72);
  v31 = **(char **)(a1 + 16) | (32 * **(char **)(a1 + 16)) | 0x11000400;
  v32 = *(_DWORD *)(v4 + 200);
  if (v32 + 4 > *(_DWORD *)(v4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56), v24, v25, v26, v27, v28, v29, v30);
    v32 = *(_DWORD *)(v4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 56) + v32) = v31;
  v33 = *(_DWORD *)(v4 + 200) + 4;
  for (*(_DWORD *)(v4 + 200) = v33; v33 < *(_DWORD *)(v4 + 52); *(_DWORD *)(v4 + 200) = v33)
  {
    if ((v33 + 4) > *(_DWORD *)(v4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56), v24, v25, v26, v27, v28, v29, v30);
      v33 = *(_DWORD *)(v4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v33) = -721215457;
    v33 = *(_DWORD *)(v4 + 200) + 4;
  }
  v34 = v33;
  if ((v33 + 4) > *(_DWORD *)(v4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56), v24, v25, v26, v27, v28, v29, v30);
    v34 = *(_DWORD *)(v4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 56) + v34) = 335544320;
  *(_DWORD *)(v4 + 200) += 4;
  if (*(_BYTE *)(v4 + 328))
    v35 = 69;
  else
    v35 = 65;
  v68[0] = v33;
  v68[1] = 0;
  v69 = v35;
  v70 = 15;
  v71 = -1;
  v67 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v68, (unsigned int *)&v67, v4, v26, v27, v28, v29, v30);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v73, v4, v36, v37, v38, v39, v40, v41);
  v49 = **(_BYTE **)(a1 + 16) & 0x1F | 0x12800000;
  v50 = *(_DWORD *)(v4 + 200);
  if (v50 + 4 > *(_DWORD *)(v4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v4 + 56), v42, v43, v44, v45, v46, v47, v48);
    v50 = *(_DWORD *)(v4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v4 + 56) + v50) = v49;
  *(_DWORD *)(v4 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v72, v4, v43, v44, v45, v46, v47, v48);
  v51 = **(char **)(a1 + 16);
  v52 = **(JSC::DFG::Node ***)(a1 + 24);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v4, v52, v53, v54, v55, v56, v57, v58);
  v59 = *((_DWORD *)v52 + 12);
  v60 = ~v59;
  if (v60 >= *(unsigned int *)(v4 + 4004))
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x197BD5110);
  }
  v61 = *(_QWORD *)(v4 + 3992);
  if (v51 > 15)
    v62 = -1;
  else
    v62 = v51;
  v63 = v4 + 12 * v62;
  *(_DWORD *)(v63 + 4776) = v59;
  *(_DWORD *)(v63 + 4780) = 5;
  v64 = v61 + 24 * (int)v60;
  v65 = *((_DWORD *)v52 + 13);
  *(_QWORD *)v64 = v52;
  *(_DWORD *)(v64 + 8) = v65;
  *(_BYTE *)(v64 + 17) = v51;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)(v64 + 12) = 1;
  *(_BYTE *)(v64 + 16) = 0;
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<unsigned long long (*)(JSC::Butterfly *,long long,int),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  uint64_t v9;
  unsigned int v11;
  JSC::AssemblerBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  JSC::AssemblerBuffer *v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  _BYTE v62[6];

  v8 = (JSC::AssemblerBuffer *)a3;
  v9 = (uint64_t)a2;
  v59 = 0;
  if ((_DWORD)a4)
  {
    v61 = a4;
    v11 = 1;
    v59 = 1;
  }
  else
  {
    v11 = 0;
  }
  if (a5 != 1)
  {
    *(_WORD *)&v62[2 * v11++ - 2] = a5 | 0x100;
    v59 = v11;
  }
  if ((_DWORD)a6 == 2)
  {
    if (!v11)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v62[2 * v11++ - 2] = a6 | 0x200;
    v59 = v11;
  }
  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = 2432696320;
  do
  {
    v14 = 0;
    v15 = 0;
    v16 = v11;
    do
    {
      if ((v62[v14 - 1] & 0x40) != 0)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v15 |= 1 << v62[v14 - 1];
      v14 += 2;
    }
    while (2 * v11 != v14);
    v17 = 0;
    do
    {
      v18 = v62[v17 - 2] & 0x7F;
      if (v18 >= 0x40)
        goto LABEL_70;
      v15 &= ~(1 << v18);
      v17 += 2;
    }
    while (2 * v11 != v17);
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v19.i16[0] = vaddlv_u8(v19);
    v20 = v19.i32[0];
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.i32[0] + v20)
    {
      v22 = 0;
      if (v11 <= 1)
        v23 = 1;
      else
        v23 = v11;
      v24 = 2 * v23;
      while (1)
      {
        v25 = v62[v22 - 1];
        if ((v25 & 0x7Fu) >= 0x40)
          goto LABEL_70;
        if (((v15 >> (v25 & 0x7F)) & 1) != 0)
          break;
        v22 += 2;
        if (v24 == v22)
          goto LABEL_58;
      }
      v26 = v62[v22 - 2];
      if (v26 != v25)
      {
        v27 = (char)v26;
        if ((char)v26 == 63)
        {
          v28 = *(_DWORD *)(v9 + 200);
          v29 = *(_DWORD *)(v9 + 192);
          if (v25 == 31)
            goto LABEL_52;
          v31 = v25 & 0x1F | 0xD2800000;
        }
        else
        {
          v28 = *(_DWORD *)(v9 + 200);
          v29 = *(_DWORD *)(v9 + 192);
          v30 = (char)v25 == 31 || v27 == 31;
          if (!v30)
          {
            v31 = v25 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v31 = (char)v25 | (32 * v27) | v13;
        }
LABEL_53:
        if (v28 + 4 > v29)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v28 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v28) = v31;
        *(_DWORD *)(v9 + 200) += 4;
        v16 = v59;
      }
      memmove(&v62[v22 - 2], &v62[v22], 2 * v16 - v22 - 2);
      v11 = v59 - 1;
      goto LABEL_57;
    }
    v32 = v13;
    v33 = v12;
    v34 = HIBYTE(v61);
    v35 = v61;
    JSC::MacroAssemblerARM64::swap(v9, (char)v61, SHIBYTE(v61), a4, a5, a6, a7, a8);
    memmove(&v61, v62, 2 * v59 - 2);
    v36 = v59 - 1;
    v30 = v59 == 1;
    v60 = v36;
    v37 = (unsigned __int8 *)&v61;
    v38 = &v62[2 * v36 - 2];
    if (v30)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a2 = v38;
    }
    else
    {
      v39 = 2 * v36;
      v40 = &v61;
      while (*(unsigned __int8 *)v40 != v34)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_37;
      }
      *(_BYTE *)v40 = v35;
LABEL_37:
      v41 = 0;
      v42 = (char *)&v61;
      a2 = v38;
      v43 = v38;
      do
      {
        if (*v37 == v37[1])
        {
          v44 = v37;
          if (v43 != &v62[2 * v60 - 2])
          {
            v58 = v38;
            if (v37 == a2)
            {
              v44 = v43;
            }
            else
            {
              v56 = v42 - (char *)a2;
              v57 = v43;
              memmove(v43, a2, v42 - (char *)a2);
              v44 = &v57[v56];
            }
            v38 = v58;
          }
          a2 = v37 + 2;
          ++v41;
          v43 = v44;
        }
        v37 += 2;
        v42 += 2;
      }
      while (v37 < v38);
      v45 = v60;
      v46 = v60;
      v38 = v43;
    }
    v47 = &v62[2 * v45 - 2];
    v12 = v33;
    if (a2 != v47)
    {
      memmove(v38, a2, v47 - a2);
      v46 = v60;
    }
    v11 = v46 - v41;
    v13 = v32;
LABEL_57:
    v59 = v11;
LABEL_58:
    ;
  }
  while (v11);
LABEL_62:
  JSC::DFG::SpeculativeJIT::appendCall(v9, (uint64_t)operationArrayIndexOfValueDouble, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 0xFFFFFFFFLL, v48, v49, v50, v51, v52, v53);
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v8 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v8 | 0xAA0003E0;
    }
    v55 = *(_DWORD *)(v9 + 200);
    v9 += 200;
    v54 = v55;
    v8 = (JSC::AssemblerBuffer *)(v9 - 144);
    if (v55 + 4 > *(_DWORD *)(v9 - 8))
    {
LABEL_71:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v54 = *(_DWORD *)v9;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v54) = (_DWORD)a1;
    *(_DWORD *)v9 += 4;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileArrayPush(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  int v14;
  unint64_t v15;
  JSC::DFG::Node *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  JSC::DFG::Node *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  JSC::DFG::Node *v64;
  uint64_t v65;
  uint64_t v66;
  JSC::DFG::Node *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  char k;
  uint64_t v98;
  uint64_t result;
  unsigned int v100;
  char *v101;
  unsigned int v102;
  char v103;
  char v104;
  int v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unsigned __int8 v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  JSC::DFG::Node *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  JSC::DFG::Node *v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  char *v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  JSC::DFG::JITCompiler *v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  JSC::DFG::Node *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int j;
  uint64_t v310;
  unsigned int v311;
  JSC::DFG::Node *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  JSC::DFG::Node *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  unsigned int v377;
  JSC::DFG::JITCompiler *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  JSC::DFG::Node *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned int v430;
  uint64_t v431;
  int i;
  uint64_t v433;
  unsigned int v434;
  JSC::DFG::Node *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  char v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  int v547;
  JSC::DFG::Node *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  char v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  char v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  int v698;
  int v699;
  JSC::DFG::Node *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unsigned int v731;
  int v732;
  JSC::AssemblerBuffer *v733;
  char v734;
  JSC::DFG::Node *v735;
  JSC::DFG::Node *v736;
  JSC::DFG::Node *v737;
  unsigned int v738;
  int v739;
  int v740;
  unsigned int v741;
  JSC::AssemblerBuffer *v742;
  uint64_t v743;
  uint64_t v744;
  JSC::AssemblerBuffer *v745;
  JSC::DFG::JITCompiler *v746;
  JSC::DFG::Node *v747;
  JSC::DFG::Node *v748;
  char v749;
  char v750;
  uint64_t v751;
  int v752[3];
  uint64_t v753;
  int v754[3];
  uint64_t v755;
  _BYTE v756[12];
  uint64_t v757;
  __int128 v758;
  char v759;
  uint64_t v760;
  unsigned int v761;
  int v762;
  char v763;
  __int16 v764;
  char v765;
  unsigned int v766[2];
  char v767;
  __int16 v768;
  char v769;
  uint64_t v770;
  uint64_t v771;
  unsigned __int8 v772;
  int v773[3];

  v8 = *((_QWORD *)this + 495);
  v9 = *((_QWORD *)a2 + 3);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD708CLL);
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197BD7094);
  }
  v13 = *(_QWORD *)(v8 + 152);
  v14 = *((_DWORD *)a2 + 8);
  v15 = *(_QWORD *)(v13 + 8 * (v9 + 1));
  v16 = (JSC::DFG::Node *)(v15 & 0xFF00FFFFFFFFFFFFLL);
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_121;
  v17 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD70A4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
  else
LABEL_121:
    v18 = -1;
  v19 = *(_QWORD *)(v13 + 8 * v9);
  v20 = ~*(_DWORD *)((v19 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD709CLL);
  }
  v747 = (JSC::DFG::Node *)(v19 & 0xFF00FFFFFFFFFFFFLL);
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v19, a3, a4, a5, a6, a7, a8);
  else
    v21 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v771, this, a3, a4, a5, a6, a7, a8);
  if (v18 == -1)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, v23, v24, v25, v26, v27, v28);
  v29 = v21;
  if (v21 == -1)
    v29 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v19, v23, v24, v25, v26, v27, v28);
  v30 = (v14 - 2);
  v31 = v772;
  v32 = (char)v772;
  v33 = *((unsigned __int16 *)a2 + 9);
  v750 = v18;
  if (v33 == 146)
    v34 = *((_DWORD *)a2 + 20);
  else
    v34 = *((_DWORD *)a2 + 18);
  v749 = v29;
  if (v34 != 9)
  {
    switch((char)v34)
    {
      case 3:
        JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x2A6D, "void JSC::DFG::SpeculativeJIT::compileArrayPush(Node *)", "Bad array mode type");
        __break(0xC471u);
        JUMPOUT(0x197BD6810);
      case 7:
        goto LABEL_17;
      case 8:
        if (v14 == 3)
        {
          v257 = *((_QWORD *)this + 495);
          v258 = a2;
          v259 = *((_DWORD *)a2 + 6) + 2;
          v92 = v750;
          if (*(_DWORD *)(v257 + 164) <= v259)
          {
            __break(0xC471u);
            JUMPOUT(0x197BD70DCLL);
          }
          v260 = *(_QWORD *)(v257 + 152);
          JSC::DFG::SpeculativeJIT::speculate(this, v22, *(_QWORD *)(v260 + 8 * v259), v24, v25, v26, v27, v28);
          JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v758, (uint64_t)this, *(_QWORD *)(v260 + 8 * v259), v261, v262, v263, v264, v265);
          v272 = v759;
          if (v759 == 255)
          {
            v272 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v758, *((unint64_t *)&v758 + 1), v266, v267, v268, v269, v270, v271);
            v759 = v272;
          }
          JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFF800000000, (char)v31, v267, v268, v269, v270, v271);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v31, v29 | 0xFFFFFFFC00000000, v273, v274, v275, v276, (uint64_t)v756);
          JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v272, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000000uLL, v277, v278, v279, v280);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, 1, (char)v31, (char)v31, v281, v282, v283, v284);
          JSC::MacroAssemblerARM64::store32((uint64_t)this, (char)v31, v29 | 0xFFFFFFF800000000, v285, v286, v287, v288, v289);
          JSC::AssemblyHelpers::boxInt32(this, (char)v31, v31, 1, v290, v291, v292, v293);
          v294 = *(_DWORD *)v756;
          v295 = *(_QWORD *)&v756[4];
          v302 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v258, v296, v297, v298, v299, v300, v301);
          JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(&v757, v294, v295, (uint64_t)this, v31, v302, v303, v272, v750);
          JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v757);
          v307 = v757;
          v757 = 0;
          if (v307)
            (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
          result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v31, (uint64_t)v258, 16, 0, v304, v305, v306);
          v308 = v758 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v759];
          --*(_DWORD *)(v308 + 4976);
          goto LABEL_130;
        }
        v741 = (char)v772;
        v737 = (JSC::DFG::Node *)(v15 & 0xFF00FFFFFFFFFFFFLL);
        v431 = (v14 - 2);
        if (v14 != 2)
        {
          for (i = 2; i != v14; ++i)
          {
            v433 = *((_QWORD *)this + 495);
            v434 = i + *((_DWORD *)a2 + 6);
            if (*(_DWORD *)(v433 + 164) <= v434)
            {
              __break(0xC471u);
              JUMPOUT(0x197BD70ECLL);
            }
            JSC::DFG::SpeculativeJIT::speculate(this, v22, *(_QWORD *)(*(_QWORD *)(v433 + 152) + 8 * v434), v24, v25, v26, v27, v28);
          }
        }
        v435 = a2;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v756, this, v23, v24, v25, v26, v27, v28);
        v436 = v756[8];
        v745 = (JSC::AssemblerBuffer *)v756[8];
        JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFF800000000, v741, v437, v438, v439, v440, v441);
        JSC::MacroAssemblerARM64::move(this, v741, v436, v442, v443, v444, v445, v446);
        JSC::MacroAssemblerARM64::add32((uint64_t)this, v431, v436, v436, v447, v448, v449, v450);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v436, v29 | 0xFFFFFFFC00000000, v451, v452, v453, v454, (uint64_t)v766);
        JSC::MacroAssemblerARM64::store32((uint64_t)this, v436, v29 | 0xFFFFFFF800000000, v455, v456, v457, v458, v459);
        JSC::MacroAssemblerARM64::getEffectiveAddress(this, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000000, v436, v460, v461, v462, v463);
        JSC::MacroAssemblerARM64::add32((uint64_t)this, v431, v741, v741, v464, v465, v466, v467);
        JSC::AssemblyHelpers::boxInt32(this, v741, v31, 1, v468, v469, v470, v471);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v472, v473, v474, v475, v476, v477, v478, (int *)&v758);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v479, v480, v481, v482, v483, v484);
        if (*((_BYTE *)this + 328))
          v491 = 69;
        else
          v491 = 65;
        v761 = v758;
        v762 = 0;
        v763 = v491;
        v764 = 15;
        v765 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v766, (uint64_t)this, v485, v486, v487, v488, v489, v490);
        v498 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * (v14 - 2), v492, v493, v494, v495, v496, v497)+ 8;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v498, v436, v499, v500, v501, v502, v503);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v761, (uint64_t)this, v504, v505, v506, v507, v508, v509);
        if (v14 != 2)
        {
          v515 = 0;
          v516 = (uint64_t)v745;
          do
          {
            v517 = *((_QWORD *)this + 495);
            v518 = v515 + *((_QWORD *)a2 + 3) + 2;
            if (*(_DWORD *)(v517 + 164) <= v518)
            {
              __break(0xC471u);
              JUMPOUT(0x197BD70F4);
            }
            JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)&v758, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v517 + 152) + 8 * v518), v510, v511, v512, v513, v514);
            v525 = v759;
            if (v759 == 255)
            {
              v525 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v758, *((unint64_t *)&v758 + 1), v519, v520, v521, v522, v523, v524);
              v759 = v525;
            }
            JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v525, v516, v520, v521, v522, v523, v524);
            JSC::DFG::SpeculativeJIT::use((uint64_t *)v758, (JSC::DFG::Node *)(*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL), v526, v527, v528, v529, v530, v531);
            v532 = v758 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v759];
            --*(_DWORD *)(v532 + 4976);
            ++v515;
            v516 += 0x800000000;
          }
          while (v431 != v515);
        }
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, (char)v745, v498, v511, v512, v513, v514, (uint64_t)&v758);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v533, v534, v535, v536, v537, v538, v539, v773);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v540, v541, v542, v543, v544, v545);
        v546 = v773[0];
        v547 = *((unsigned __int8 *)this + 328);
        v555 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v548, v549, v550, v551, v552, v553);
        if (v547)
          v556 = 0xFF000F4500000000;
        else
          v556 = 0xFF000F4100000000;
        v92 = v750;
        JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(&v755, v546, v556, (uint64_t)this, (uint64_t)operationArrayPushDoubleMultiple, v31, v555, v554, v750, (char)v745, v732, v431);
        JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v755);
        v563 = v755;
        v755 = 0;
        if (v563)
          (*(void (**)(uint64_t))(*(_QWORD *)v563 + 8))(v563);
        v16 = v737;
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v737, v557, v558, v559, v560, v561, v562);
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v747, v564, v565, v566, v567, v568, v569);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v758, (uint64_t)this, v570, v571, v572, v573, v574, v575);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v741, (uint64_t)v435, 16, 1, v576, v577, v578);
        v255 = *(_QWORD *)v756;
        k = v749;
        if (*(_QWORD *)v756)
        {
          v256 = v756[8];
          goto LABEL_117;
        }
        break;
      case 10:
        v740 = (char)v772;
        v736 = (JSC::DFG::Node *)(v15 & 0xFF00FFFFFFFFFFFFLL);
        v744 = (-2147483647 - v14);
        if (v14 == 3)
        {
          v376 = *((_QWORD *)this + 495);
          v377 = *((_DWORD *)a2 + 6) + 2;
          if (*(_DWORD *)(v376 + 164) <= v377)
          {
            __break(0xC471u);
            JUMPOUT(0x197BD7104);
          }
          k = v29;
          v378 = a2;
          JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v758, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v376 + 152) + 8 * v377), 0, v25, v26, v27, v28);
          v385 = v759;
          if (v759 == 255)
          {
            v385 = JSC::DFG::SpeculativeJIT::fillJSValue(v758, *((uint64_t *)&v758 + 1), v379, v380, v381, v382, v383, v384);
            v759 = v385;
          }
          JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFF800000000, v32, v380, v381, v382, v383, v384);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v32, v744, v386, v387, v388, v389, (uint64_t)v754);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v754);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v32, v29 | 0xFFFFFFFC00000000, v390, v391, v392, v393, (uint64_t)v756);
          JSC::MacroAssemblerARM64::store64((uint64_t)this, v385, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000010uLL, v394, v395, v396, v397);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, 1, v32, v32, v398, v399, v400, v401);
          JSC::MacroAssemblerARM64::store32((uint64_t)this, v32, v29 | 0xFFFFFFF800000000, v402, v403, v404, v405, v406);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, 1, v29 | 0xC00000000, v407, v408, v409, v410, v411);
          JSC::AssemblyHelpers::boxInt32(this, v32, v31, 1, v412, v413, v414, v415);
          v416 = *(_DWORD *)v756;
          v417 = *(_QWORD *)&v756[4];
          v424 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v378, v418, v419, v420, v421, v422, v423);
          JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(&v753, v416, v417, (uint64_t)this, v31, v424, v425, v385, v750);
          JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v753);
          v429 = v753;
          v753 = 0;
          if (v429)
            (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
          result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v32, (uint64_t)v378, 16, 0, v426, v427, v428);
          if ((*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v430 = v759;
            if (v759 > 15)
              v430 = -1;
            --*(_DWORD *)(v758 + 12 * v430 + 4784);
          }
          v16 = v736;
          v92 = v750;
        }
        else
        {
          JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v756, this, v23, v24, v25, v26, v27, v28);
          v579 = v756[8];
          v580 = v756[8];
          JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFF800000000, v32, v581, v582, v583, v584, v585);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v32, v744, v586, v587, v588, v589, (uint64_t)v752);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v752);
          JSC::MacroAssemblerARM64::move(this, v32, v579, v590, v591, v592, v593, v594);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, v30, v579, v579, v595, v596, v597, v598);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v579, v29 | 0xFFFFFFFC00000000, v599, v600, v601, v602, (uint64_t)v766);
          JSC::MacroAssemblerARM64::store32((uint64_t)this, v579, v29 | 0xFFFFFFF800000000, v603, v604, v605, v606, v607);
          JSC::MacroAssemblerARM64::getEffectiveAddress(this, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000010, v579, v608, v609, v610, v611);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, v30, v29 | 0xC00000000, v612, v613, v614, v615, v616);
          JSC::MacroAssemblerARM64::add32((uint64_t)this, v30, v32, v32, v617, v618, v619, v620);
          JSC::AssemblyHelpers::boxInt32(this, v32, v31, 1, v621, v622, v623, v624);
          JSC::ARM64Assembler::label((_DWORD *)this + 8, v625, v626, v627, v628, v629, v630, v631, (int *)&v758);
          JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v632, v633, v634, v635, v636, v637);
          if (*((_BYTE *)this + 328))
            v644 = 69;
          else
            v644 = 65;
          v761 = v758;
          v762 = 0;
          v763 = v644;
          v764 = 15;
          v765 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v766, (uint64_t)this, v638, v639, v640, v641, v642, v643);
          v651 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * v30, v645, v646, v647, v648, v649, v650)+ 8;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v651, v579, v652, v653, v654, v655, v656);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v761, (uint64_t)this, v657, v658, v659, v660, v661, v662);
          if ((_DWORD)v30)
          {
            v667 = 0;
            v668 = v580;
            do
            {
              v669 = *((_QWORD *)this + 495);
              v670 = v667 + *((_QWORD *)a2 + 3) + 2;
              if (*(_DWORD *)(v669 + 164) <= v670)
              {
                __break(0xC471u);
                JUMPOUT(0x197BD70FCLL);
              }
              JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v758, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v669 + 152) + 8 * v670), 0, v663, v664, v665, v666);
              v677 = v759;
              if (v759 == 255)
              {
                v677 = JSC::DFG::SpeculativeJIT::fillJSValue(v758, *((uint64_t *)&v758 + 1), v671, v672, v673, v674, v675, v676);
                v759 = v677;
              }
              JSC::MacroAssemblerARM64::store64((uint64_t)this, v677, v668, v672, v673, v674, v675, v676);
              JSC::DFG::SpeculativeJIT::use((uint64_t *)v758, (JSC::DFG::Node *)(*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL), v678, v679, v680, v681, v682, v683);
              if ((*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v684 = v759;
                if (v759 > 15)
                  v684 = -1;
                --*(_DWORD *)(v758 + 12 * v684 + 4784);
              }
              ++v667;
              v668 += 0x800000000;
            }
            while (v30 != v667);
          }
          JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, (char)v580, v651, v663, v664, v665, v666, (uint64_t)&v758);
          JSC::ARM64Assembler::label((_DWORD *)this + 8, v685, v686, v687, v688, v689, v690, v691, v773);
          JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v692, v693, v694, v695, v696, v697);
          v698 = v773[0];
          v699 = *((unsigned __int8 *)this + 328);
          v707 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v700, v701, v702, v703, v704, v705);
          if (v699)
            v708 = 0xFF000F4500000000;
          else
            v708 = 0xFF000F4100000000;
          JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(&v751, v698, v708, (uint64_t)this, (uint64_t)operationArrayPushMultiple, v31, v707, v706, v18, v580, v732, v30);
          JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v751);
          v715 = v751;
          v751 = 0;
          if (v715)
            (*(void (**)(uint64_t))(*(_QWORD *)v715 + 8))(v715);
          v16 = v736;
          JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v736, v709, v710, v711, v712, v713, v714);
          JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v747, v716, v717, v718, v719, v720, v721);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v758, (uint64_t)this, v722, v723, v724, v725, v726, v727);
          result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v740, (uint64_t)a2, 16, 1, v728, v729, v730);
          if (*(_QWORD *)v756)
          {
            v731 = v756[8];
            if (v756[8] != -1)
            {
              if (v756[8] > 15)
                v731 = -1;
              --*(_DWORD *)(*(_QWORD *)v756 + 12 * v731 + 4784);
            }
          }
          v92 = v18;
LABEL_130:
          k = v749;
        }
        break;
      case 11:
        v739 = (char)v772;
        v312 = a2;
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v756, this, v23, v24, v25, v26, v27, v28);
        v313 = v756[8];
        v314 = v756[8];
        v321 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * v30, v315, v316, v317, v318, v319, v320);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v321 + 8, v313, v322, v323, v324, v325, v326);
        if ((_DWORD)v30)
        {
          v333 = 0;
          v334 = v314;
          do
          {
            v335 = *((_QWORD *)this + 495);
            v336 = v333 + *((_QWORD *)a2 + 3) + 2;
            if (*(_DWORD *)(v335 + 164) <= v336)
            {
              __break(0xC471u);
              JUMPOUT(0x197BD70E4);
            }
            JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v758, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v335 + 152) + 8 * v336), 0, v329, v330, v331, v332);
            v343 = v759;
            if (v759 == 255)
            {
              v343 = JSC::DFG::SpeculativeJIT::fillJSValue(v758, *((uint64_t *)&v758 + 1), v337, v338, v339, v340, v341, v342);
              v759 = v343;
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v343, v334, v338, v339, v340, v341, v342);
            JSC::DFG::SpeculativeJIT::use((uint64_t *)v758, (JSC::DFG::Node *)(*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL), v344, v345, v346, v347, v348, v349);
            if ((*((_QWORD *)&v758 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v350 = v759;
              if (v759 > 15)
                v350 = -1;
              --*(_DWORD *)(v758 + 12 * v350 + 4784);
            }
            ++v333;
            v334 += 0x800000000;
          }
          while (v30 != v333);
        }
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v16, v327, v328, v329, v330, v331, v332);
        JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v747, v351, v352, v353, v354, v355, v356);
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v357, v358, v359, v360, v361, v362, v363);
        v370 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v364, v365, v366, v367, v368, v369);
        v92 = v18;
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>((int *)&v758, (unsigned __int8 *)this, v31, v370, v371, v18, (char)v314, v30);
        result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v739, (uint64_t)v312, 16, 1, v372, v373, v374);
        if (*(_QWORD *)v756)
        {
          v375 = v756[8];
          if (v756[8] != -1)
          {
            if (v756[8] > 15)
              v375 = -1;
            --*(_DWORD *)(*(_QWORD *)v756 + 12 * v375 + 4784);
          }
        }
        goto LABEL_130;
      default:
        __break(0xC471u);
        JUMPOUT(0x197BD6830);
    }
    goto LABEL_45;
  }
LABEL_17:
  if (v14 == 3)
  {
    v35 = *((_QWORD *)this + 495);
    v36 = (*((_DWORD *)a2 + 6) + 2);
    if (*(_DWORD *)(v35 + 164) <= v36)
    {
      __break(0xC471u);
      JUMPOUT(0x197BD70ACLL);
    }
    v37 = *(_QWORD *)(v35 + 152);
    if (v33 == 264)
    {
      v38 = *((_DWORD *)a2 + 18);
    }
    else if (v33 == 146)
    {
      LOBYTE(v38) = *((_BYTE *)a2 + 80);
    }
    else
    {
      LOBYTE(v38) = *((_BYTE *)a2 + 72);
    }
    if (v38 == 7)
      JSC::DFG::SpeculativeJIT::speculateInt32((uint64_t)this, *(_QWORD *)(v37 + 8 * v36), v23, v24, v25, v26, v27, v28);
    v39 = *(_QWORD *)(v37 + 8 * v36);
    if ((v39 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_28;
    v40 = ~*(_DWORD *)((v39 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v40 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BD70B4);
    }
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v40 + 12)
      || (v41 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v39, v23, v24, v25, v26, v27, v28), v41 == -1))
    {
LABEL_28:
      v41 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v39, v23, v24, v25, v26, v27, v28);
    }
    v42 = a2;
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFF800000000, (char)v31, v24, v25, v26, v27, v28);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BD6394);
    }
    v748 = (JSC::DFG::Node *)(v39 & 0xFF00FFFFFFFFFFFFLL);
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFFC00000000, *((char *)this + 304), v43, v44, v45, v46, v47);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v31, 17, v48, v49, v50, v51, (uint64_t)&v758);
    JSC::MacroAssemblerARM64::store64((uint64_t)this, v41, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000000uLL, v52, v53, v54, v55);
    v742 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v63 = *((_DWORD *)this + 50);
    if (v63 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v742, v56, v57, v58, v59, v60, v61, v62);
      v63 = *((_DWORD *)this + 50);
    }
    v64 = v16;
    *(_DWORD *)(*((_QWORD *)this + 7) + v63) = v32 | (32 * v32) | 0x11000400;
    *((_DWORD *)this + 50) += 4;
    v65 = (char)v31;
    JSC::MacroAssemblerARM64::store32((uint64_t)this, v65, v29 | 0xFFFFFFF800000000, v58, v59, v60, v61, v62);
    v73 = *((_DWORD *)this + 50);
    if (v73 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v742, v66, (uint64_t)v67, v68, v69, v70, v71, v72);
      v73 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v73) = v31 & 0x1F | ((v31 & 0x1F) << 16) | 0xAA000360;
    *((_DWORD *)this + 50) += 4;
    v74 = v758;
    v75 = *(_QWORD *)((char *)&v758 + 4);
    v76 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v67, v68, v69, v70, v71, v72);
    v78 = v77;
    v79 = WTF::fastMalloc((WTF *)0xA0);
    v80 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v79, this);
    *(_QWORD *)v80 = off_1E35746F0;
    *(_DWORD *)(v80 + 48) = v74;
    *(_QWORD *)(v80 + 52) = v75;
    v88 = *((_DWORD *)this + 50);
    for (*(_DWORD *)(v80 + 60) = v88; v88 < *((_DWORD *)this + 13); *(_DWORD *)(v79 + 60) = v88)
    {
      if ((v88 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v742, v81, v82, v83, v84, v85, v86, v87);
        v88 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v88) = -721215457;
      v88 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v88;
    }
    *((_DWORD *)this + 52) = 0;
    *(_QWORD *)v79 = off_1E35739B0;
    *(_QWORD *)(v79 + 64) = 0xFFFFFFFFLL;
    *(_WORD *)(v79 + 72) = 0;
    *(_BYTE *)(v79 + 74) = v65;
    *(_QWORD *)(v79 + 80) = v79 + 96;
    *(_QWORD *)(v79 + 88) = 2;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v79 + 80, v65, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v86, v87);
    *(_QWORD *)v79 = &off_1E3573980;
    *(_QWORD *)(v79 + 128) = operationArrayPush;
    *(_QWORD *)(v79 + 136) = v76;
    *(_QWORD *)(v79 + 144) = v78;
    *(_BYTE *)(v79 + 152) = v41;
    v92 = v750;
    *(_BYTE *)(v79 + 153) = v750;
    v770 = v79;
    v93 = (_QWORD *)((char *)this + 5656);
    v94 = *((unsigned int *)this + 1417);
    if ((_DWORD)v94 == *((_DWORD *)this + 1416))
    {
      v96 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v770);
      v94 = *((unsigned int *)this + 1417);
      v95 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v94);
      v79 = *v96;
    }
    else
    {
      v95 = (uint64_t *)(*v93 + 8 * v94);
      v96 = &v770;
    }
    v16 = v64;
    k = v749;
    *v96 = 0;
    *v95 = v79;
    *((_DWORD *)this + 1417) = v94 + 1;
    v98 = v770;
    v770 = 0;
    if (v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v65, (uint64_t)v42, 16, 0, v89, v90, v91);
    if (v748)
    {
      if (v41 > 15)
        v100 = -1;
      else
        v100 = v41;
      v101 = (char *)this + 12 * v100;
LABEL_44:
      --*((_DWORD *)v101 + 1196);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  v738 = (char)v772;
  v746 = a2;
  if (v33 == 264)
  {
    v105 = *((_DWORD *)a2 + 18);
    v92 = v18;
  }
  else
  {
    v92 = v18;
    if (v33 == 146)
      LOBYTE(v105) = *((_BYTE *)v746 + 80);
    else
      LOBYTE(v105) = *((_BYTE *)v746 + 72);
  }
  if (v105 == 7 && v14 != 2)
  {
    for (j = 2; j != v14; ++j)
    {
      v310 = *((_QWORD *)this + 495);
      v311 = j + *((_DWORD *)v746 + 6);
      if (*(_DWORD *)(v310 + 164) <= v311)
      {
        __break(0xC471u);
        JUMPOUT(0x197BD70D4);
      }
      JSC::DFG::SpeculativeJIT::speculateInt32((uint64_t)this, *(_QWORD *)(*(_QWORD *)(v310 + 152) + 8 * v311), v23, v24, v25, v26, v27, v28);
    }
  }
  v743 = (v14 - 2);
  v735 = v16;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v758, this, v23, v24, v25, v26, v27, v28);
  v106 = SBYTE8(v758);
  v107 = BYTE8(v758);
  v108 = v29 | 0xFFFFFFF800000000;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v108, v32, v109, v110, v111, v112, v113);
  v121 = v107;
  v734 = v107;
  if (v107 != v32)
  {
    v122 = v29;
    if (v32 == 63)
    {
      if (v107 != 31)
      {
        v125 = v107 & 0x1F | 0xD2800000;
        goto LABEL_72;
      }
    }
    else if (v738 != 31 && v107 != 31)
    {
      v123 = v107 & 0xFFE0FFFF | ((v32 & 0x1F) << 16);
      v124 = -1442839584;
LABEL_71:
      v125 = v123 | v124;
LABEL_72:
      v127 = (unsigned int *)((char *)this + 200);
      v126 = *((_DWORD *)this + 50);
      if (v126 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v114, v115, v116, v117, v118, v119, v120);
        v121 = v107;
        v126 = *v127;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v126) = v125;
      *v127 += 4;
      v92 = v750;
      v29 = v122;
      goto LABEL_75;
    }
    v123 = v106 | (32 * v738);
    v124 = -1862270976;
    goto LABEL_71;
  }
LABEL_75:
  v128 = v121;
  JSC::MacroAssemblerARM64::add32((uint64_t)this, v743, v128, v128, v117, v118, v119, v120);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD6F40);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v29 | 0xFFFFFFFC00000000, *((char *)this + 304), v129, v130, v131, v132, v133);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, v128, 17, v134, v135, v136, v137, (uint64_t)v756);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v128, v108, v138, v139, v140, v141, v142);
  JSC::MacroAssemblerARM64::getEffectiveAddress(this, v29 | (unint64_t)(v31 << 8) | 0x300000000, 0x200000000, v128, v143, v144, v145, v146);
  JSC::MacroAssemblerARM64::add32((uint64_t)this, v743, v738, v738, v147, v148, v149, v150);
  v733 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v158 = *((_DWORD *)this + 50);
  if (v158 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v733, v151, v152, v153, v154, v155, v156, v157);
    v158 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v158) = (v31 & 0x1F | ((v31 & 0x1F) << 16)) - 1442839712;
  v159 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v159;
  if (v159 < *((_DWORD *)this + 13))
  {
    v160 = v743;
    do
    {
      if ((v159 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v733, v151, v152, v153, v154, v155, v156, v157);
        v159 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v159) = -721215457;
      v159 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v159;
    }
    while (v159 < *((_DWORD *)this + 13));
  }
  else
  {
    v160 = v743;
  }
  v161 = v159;
  if ((v159 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v733, v151, v152, v153, v154, v155, v156, v157);
    v161 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v161) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v162 = 69;
  else
    v162 = 65;
  v766[0] = v159;
  v766[1] = 0;
  v767 = v162;
  v768 = 15;
  v769 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v756, (uint64_t)this, v152, v153, v154, v155, v156, v157);
  v169 = JSC::VM::scratchBufferForSize(*(JSC::VM **)(*((_QWORD *)this + 44) + 16), 8 * v160, v163, v164, v165, v166, v167, v168)+ 8;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v169, v128, v170, v171, v172, v173, v174);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v766, (uint64_t)this, v175, v176, v177, v178, v179, v180);
  if ((_DWORD)v160)
  {
    v187 = 0;
    v188 = v106;
    do
    {
      v189 = *((_QWORD *)this + 495);
      v190 = v187 + *((_QWORD *)v746 + 3) + 2;
      if (*(_DWORD *)(v189 + 164) <= v190)
      {
        __break(0xC471u);
        JUMPOUT(0x197BD70BCLL);
      }
      v191 = *(_QWORD *)(*(_QWORD *)(v189 + 152) + 8 * v190);
      if ((v191 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_92;
      v192 = ~*(_DWORD *)((v191 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v192 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD70C4);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v192 + 12)
        || (v193 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v191, v181, v182, v183, v184, v185, v186),
            (_DWORD)v193 == -1))
      {
LABEL_92:
        v193 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v191, v181, v182, v183, v184, v185, v186);
      }
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v193, v188, v182, v183, v184, v185, v186);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)this, (JSC::DFG::Node *)(v191 & 0xFF00FFFFFFFFFFFFLL), v194, v195, v196, v197, v198, v199);
      if ((v191 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((int)v193 > 15)
          v200 = -1;
        else
          v200 = v193;
        --*((_DWORD *)this + 3 * v200 + 1196);
      }
      ++v187;
      v188 += 0x800000000;
      v92 = v750;
    }
    while (v743 != v187);
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v128, v169, v183, v184, v185, v186, (uint64_t)&v761);
  v208 = *((_DWORD *)this + 50);
  if (v208 < *((_DWORD *)this + 13))
  {
    v209 = v747;
    do
    {
      if ((v208 + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v733, v201, (uint64_t)v202, v203, v204, v205, v206, v207);
        v208 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v208) = -721215457;
      v208 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v208;
    }
    while (v208 < *((_DWORD *)this + 13));
  }
  else
  {
    v209 = v747;
  }
  v210 = v208;
  if ((v208 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v733, v201, (uint64_t)v202, v203, v204, v205, v206, v207);
    v210 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v210) = 335544320;
  *((_DWORD *)this + 50) += 4;
  v211 = *((unsigned __int8 *)this + 328);
  v212 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v746, v202, v203, v204, v205, v206, v207);
  v214 = v213;
  if (v211)
    v215 = 0xFF000F4500000000;
  else
    v215 = 0xFF000F4100000000;
  v216 = WTF::fastMalloc((WTF *)0xA0);
  v217 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v216, this);
  *(_QWORD *)v217 = off_1E35746F0;
  *(_DWORD *)(v217 + 48) = v208;
  *(_QWORD *)(v217 + 52) = v215;
  v225 = *((_DWORD *)this + 50);
  *(_DWORD *)(v217 + 60) = v225;
  for (k = v749; v225 < *((_DWORD *)this + 13); *(_DWORD *)(v216 + 60) = v225)
  {
    if ((v225 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v733, v218, v219, v220, v221, v222, v223, v224);
      v225 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v225) = -721215457;
    v225 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v225;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v216 = off_1E3573A10;
  *(_QWORD *)(v216 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v216 + 72) = 0;
  *(_BYTE *)(v216 + 74) = v738;
  *(_QWORD *)(v216 + 80) = v216 + 96;
  *(_QWORD *)(v216 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v216 + 80, v738, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v223, v224);
  *(_QWORD *)v216 = &off_1E35739E0;
  *(_QWORD *)(v216 + 128) = operationArrayPushMultiple;
  *(_QWORD *)(v216 + 136) = v212;
  *(_QWORD *)(v216 + 144) = v214;
  *(_BYTE *)(v216 + 152) = v92;
  *(_BYTE *)(v216 + 153) = v734;
  *(_DWORD *)(v216 + 156) = v743;
  v760 = v216;
  v232 = (_QWORD *)((char *)this + 5656);
  v233 = *((unsigned int *)this + 1417);
  if ((_DWORD)v233 == *((_DWORD *)this + 1416))
  {
    v235 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v232, v233 + 1, (unint64_t)&v760);
    v233 = *((unsigned int *)this + 1417);
    v234 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v233);
    v216 = *v235;
  }
  else
  {
    v234 = (uint64_t *)(*v232 + 8 * v233);
    v235 = &v760;
  }
  v16 = v735;
  *v235 = 0;
  *v234 = v216;
  *((_DWORD *)this + 1417) = v233 + 1;
  v236 = v760;
  v760 = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v735, v226, v227, v228, v229, v230, v231);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)this, v209, v237, v238, v239, v240, v241, v242);
  result = (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v761, (uint64_t)this, v243, v244, v245, v246, v247, v248);
  if ((int)v738 > 15)
    v249 = -1;
  else
    v249 = v738;
  v250 = (char *)this + 12 * v249;
  v251 = *((_DWORD *)v746 + 12);
  *((_DWORD *)v250 + 1194) = v251;
  *((_DWORD *)v250 + 1195) = 4;
  v252 = ~v251;
  if (v252 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD70CCLL);
  }
  v253 = *((_QWORD *)this + 499) + 24 * (int)v252;
  v254 = *((_DWORD *)v746 + 13);
  *(_QWORD *)v253 = v746;
  *(_DWORD *)(v253 + 8) = v254;
  *(_BYTE *)(v253 + 17) = v738;
  *(_DWORD *)(v253 + 12) = 16;
  *(_BYTE *)(v253 + 16) = 0;
  v255 = v758;
  if ((_QWORD)v758)
  {
    v256 = SBYTE8(v758);
LABEL_117:
    if (v256 != -1)
    {
      if (v256 > 15)
        v256 = -1;
      v101 = (char *)(v255 + 12 * v256);
      goto LABEL_44;
    }
  }
LABEL_45:
  if (v771)
  {
    v102 = (char)v772;
    if ((char)v772 != -1)
    {
      if ((char)v772 > 15)
        v102 = -1;
      --*(_DWORD *)(v771 + 12 * v102 + 4784);
    }
  }
  if (k != -1)
  {
    if (k > 15)
      v103 = -1;
    else
      v103 = k;
    --*((_DWORD *)this + 3 * v103 + 1196);
  }
  if (v16)
  {
    if (v92 > 15)
      v104 = -1;
    else
      v104 = v92;
    --*((_DWORD *)this + 3 * v104 + 1196);
  }
  return result;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::AssemblerBuffer *v27;
  JSC::AssemblerBuffer *v28;

  v17 = WTF::fastMalloc((WTF *)0xA0);
  v18 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v17, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v18 = off_1E35746F0;
  *(_DWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 52) = a3;
  v26 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v18 + 60) = v26;
  if (v26 < *(_DWORD *)(a4 + 52))
  {
    v27 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v26 + 4) > *(_DWORD *)(a4 + 192))
      {
        v28 = v27;
        JSC::AssemblerBuffer::outOfLineGrow(v27, v19, v20, v21, v22, v23, v24, v25);
        v27 = v28;
        v26 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v26) = -721215457;
      v26 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v26;
      *(_DWORD *)(v17 + 60) = v26;
    }
    while (v26 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v17 = off_1E35739B0;
  *(_QWORD *)(v17 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 74) = a5;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v17 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v24, v25);
  *(_QWORD *)v17 = &off_1E3573980;
  *(_QWORD *)(v17 + 128) = operationArrayPush;
  *(_QWORD *)(v17 + 136) = a6;
  *(_QWORD *)(v17 + 144) = a7;
  *(_BYTE *)(v17 + 152) = a8;
  *(_BYTE *)(v17 + 153) = a9;
  *a1 = v17;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, char a10, int a11, int a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  JSC::AssemblerBuffer *v28;
  JSC::AssemblerBuffer *v29;

  v18 = WTF::fastMalloc((WTF *)0xA0);
  v19 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v18, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v19 = off_1E35746F0;
  *(_DWORD *)(v19 + 48) = a2;
  *(_QWORD *)(v19 + 52) = a3;
  v27 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v19 + 60) = v27;
  if (v27 < *(_DWORD *)(a4 + 52))
  {
    v28 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v27 + 4) > *(_DWORD *)(a4 + 192))
      {
        v29 = v28;
        JSC::AssemblerBuffer::outOfLineGrow(v28, v20, v21, v22, v23, v24, v25, v26);
        v28 = v29;
        v27 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v27;
      *(_DWORD *)(v18 + 60) = v27;
    }
    while (v27 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v18 = off_1E3573A10;
  *(_QWORD *)(v18 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 74) = a6;
  *(_QWORD *)(v18 + 80) = v18 + 96;
  *(_QWORD *)(v18 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v18 + 80, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v25, v26);
  *(_QWORD *)v18 = &off_1E35739E0;
  *(_QWORD *)(v18 + 128) = a5;
  *(_QWORD *)(v18 + 136) = a7;
  *(_QWORD *)(v18 + 144) = a8;
  *(_BYTE *)(v18 + 152) = a9;
  *(_BYTE *)(v18 + 153) = a10;
  *(_DWORD *)(v18 + 156) = a12;
  *a1 = v18;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::AssemblerBuffer *v27;
  JSC::AssemblerBuffer *v28;

  v17 = WTF::fastMalloc((WTF *)0xA0);
  v18 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v17, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v18 = off_1E35746F0;
  *(_DWORD *)(v18 + 48) = a2;
  *(_QWORD *)(v18 + 52) = a3;
  v26 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v18 + 60) = v26;
  if (v26 < *(_DWORD *)(a4 + 52))
  {
    v27 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v26 + 4) > *(_DWORD *)(a4 + 192))
      {
        v28 = v27;
        JSC::AssemblerBuffer::outOfLineGrow(v27, v19, v20, v21, v22, v23, v24, v25);
        v27 = v28;
        v26 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v26) = -721215457;
      v26 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v26;
      *(_DWORD *)(v17 + 60) = v26;
    }
    while (v26 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v17 = off_1E3573A70;
  *(_QWORD *)(v17 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 72) = 0;
  *(_BYTE *)(v17 + 74) = a5;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v17 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v24, v25);
  *(_QWORD *)v17 = &off_1E3573A40;
  *(_QWORD *)(v17 + 128) = operationArrayPushDouble;
  *(_QWORD *)(v17 + 136) = a6;
  *(_QWORD *)(v17 + 144) = a7;
  *(_BYTE *)(v17 + 152) = a8;
  *(_BYTE *)(v17 + 153) = a9;
  *a1 = v17;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int64_t v66;
  unsigned __int8 *v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  JSC::AssemblerBuffer *v71;
  unsigned int v72;
  unsigned int v73;
  __int16 v74;
  _BYTE v75[6];

  v8 = a8;
  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  if ((_DWORD)a6 == 1)
  {
    if ((_DWORD)a7 == 2)
      goto LABEL_61;
    v14 = 0;
    goto LABEL_6;
  }
  v74 = a6 | 0x100;
  v14 = 1;
  v72 = 1;
  if ((_DWORD)a7 != 2)
  {
LABEL_6:
    *(_WORD *)&v75[2 * v14++ - 2] = a7 | 0x200;
    v72 = v14;
  }
  v71 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    do
    {
      if ((v75[v15 - 1] & 0x40) != 0)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v16 |= 1 << v75[v15 - 1];
      v15 += 2;
    }
    while (2 * v14 != v15);
    v18 = 0;
    do
    {
      v19 = v75[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_70;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v14 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v75[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_70;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v75[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v71, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v29) = v32;
        *(_DWORD *)(v12 + 200) += 4;
        v17 = v72;
      }
      memmove(&v75[v23 - 2], &v75[v23], 2 * v17 - v23 - 2);
      v14 = v72 - 1;
      goto LABEL_57;
    }
    v33 = v74;
    v69 = HIBYTE(v74);
    JSC::MacroAssemblerARM64::swap(v12, (char)v74, SHIBYTE(v74), a4, a5, a6, a7, a8);
    memmove(&v74, v75, 2 * v72 - 2);
    v34 = v72 - 1;
    v31 = v72 == 1;
    v73 = v34;
    v35 = (unsigned __int8 *)&v74;
    v36 = &v75[2 * v34 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = v36;
    }
    else
    {
      v37 = 2 * v34;
      v38 = &v74;
      while (*(unsigned __int8 *)v38 != v69)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v33;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v74;
      a2 = v36;
      v41 = v36;
      do
      {
        if (*v35 == v35[1])
        {
          v42 = v35;
          if (v41 != &v75[2 * v73 - 2])
          {
            v68 = v39;
            v70 = v36;
            if (v35 == a2)
            {
              v42 = v41;
            }
            else
            {
              v66 = v40 - (char *)a2;
              v67 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = &v67[v66];
            }
            v36 = v70;
            v39 = v68;
          }
          a2 = v35 + 2;
          ++v39;
          v41 = v42;
        }
        v35 += 2;
        v40 += 2;
      }
      while (v35 < v36);
      v43 = v73;
      v44 = v73;
      v36 = v41;
    }
    v45 = &v75[2 * v43 - 2];
    if (a2 != v45)
    {
      v46 = v39;
      memmove(v36, a2, v45 - a2);
      v39 = v46;
      v44 = v73;
    }
    v14 = v44 - v39;
LABEL_57:
    v72 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v12, (JSC::ARM64LogicalImmediate *)v8, 3, a4, a5, a6, a7, a8);
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a5, 0, v47, v48, v49, v50, v51);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, v47, v48, v49, v50, v51);
  JSC::DFG::SpeculativeJIT::appendCall(v12, (uint64_t)operationArrayPushMultipleSlow, v52, v53, v54, v55, v56, v57, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v58, v59, v60, v61, v62, v63);
  if ((_BYTE)v11)
  {
    if (v11 == 31)
      LODWORD(a1) = -1862270945;
    else
      LODWORD(a1) = v11 & 0x1F | 0xAA0003E0;
    v65 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v64 = v65;
    v11 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v65 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_71:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v64 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v64) = (_DWORD)a1;
    *(_DWORD *)v12 += 4;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileNotifyWrite(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  uint64_t v46;

  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD7C90);
  }
  v10 = *((_QWORD *)a2 + 9);
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  v11 = *((unsigned __int8 *)this + 304);
  JSC::MacroAssemblerARM64::moveToCachedReg(this, v10 + 4, (uint64_t)this + 296, a4, a5, a6, a7, a8);
  v19 = *((_DWORD *)this + 50);
  if (v19 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v12, v13, v14, v15, v16, v17, v18);
    v19 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v19) = v11 & 0x1F | 0x387F6A20;
  *((_DWORD *)this + 50) += 4;
  if (v11 == 17)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BD7CC0);
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  }
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v15, v16, v17, v18, (uint64_t)&v45);
  v20 = v45;
  v21 = v46;
  v22 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v23 = WTF::fastMalloc((WTF *)0x98);
  v24 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v23, this);
  *(_QWORD *)v24 = off_1E35746F0;
  *(_DWORD *)(v24 + 48) = v20;
  *(_QWORD *)(v24 + 52) = v21;
  v32 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v24 + 60) = v32; v32 < *((_DWORD *)this + 13); *(_DWORD *)(v23 + 60) = v32)
  {
    if ((v32 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v25, v26, v27, v28, v29, v30, v31);
      v32 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v32) = -721215457;
    v32 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v32;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v23 = off_1E3573AD0;
  *(_QWORD *)(v23 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v23 + 72) = 256;
  *(_DWORD *)(v23 + 76) = 0;
  *(_QWORD *)(v23 + 80) = v23 + 96;
  *(_QWORD *)(v23 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v23 + 80, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v30, v31);
  *(_QWORD *)v23 = &off_1E3573AA0;
  *(_QWORD *)(v23 + 128) = operationNotifyWrite;
  *(_QWORD *)(v23 + 136) = v22;
  *(_QWORD *)(v23 + 144) = v10;
  v44 = v23;
  v38 = (_QWORD *)((char *)this + 5656);
  v39 = *((unsigned int *)this + 1417);
  if ((_DWORD)v39 == *((_DWORD *)this + 1416))
  {
    v41 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v44);
    v39 = *((unsigned int *)this + 1417);
    v40 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v39);
    v23 = *v41;
  }
  else
  {
    v40 = (uint64_t *)(*v38 + 8 * v39);
    v41 = &v44;
  }
  *v41 = 0;
  *v40 = v23;
  *((_DWORD *)this + 1417) = v39 + 1;
  v42 = v44;
  v44 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  return JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v33, v34, v35, v36, v37);
}

uint64_t JSC::DFG::SpeculativeJIT::compileIsObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int i;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  char v42;
  unsigned int v43[2];
  char v44;
  __int16 v45;
  char v46;
  unsigned int v47[3];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_34;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x197BD803CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_34:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
    goto LABEL_40;
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v14 = -1;
    else
      v14 = v12;
    ++*((_DWORD *)this + 3 * v14 + 1196);
    v15 = v12;
  }
  else
  {
    v15 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v12, 1, a4, a5, a6, a7, a8, (uint64_t)v47);
  JSC::MacroAssemblerARM64::compare8((uint64_t)this, 2u, v12 | 0x500000000, 23, v15, v16, v17, v18);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v19, v20, v21, v22, v23, v24, v25);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v27 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v19, v20, v21, v22, v23, v24, v25);
    v27 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v27) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v28 = 69;
  else
    v28 = 65;
  v43[0] = i;
  v43[1] = 0;
  v44 = v28;
  v45 = 15;
  v46 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v47, (uint64_t)this, v20, v21, v22, v23, v24, v25);
  v36 = *((_DWORD *)this + 50);
  if (v36 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v36) = v15 & 0x1F | 0x52800000;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v43, (uint64_t)this, v30, v31, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v15, v15);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v15, (uint64_t)a2, 21, 0, v37, v38, v39);
  if (v15 != -1)
  {
    if (v15 > 15)
      v41 = -1;
    else
      v41 = v15;
    --*((_DWORD *)this + 3 * v41 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v42 = -1;
    else
      v42 = v12;
    --*((_DWORD *)this + 3 * v42 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileTypeOfIsObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int i;
  unsigned int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  char v75;
  unsigned int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::DFG::Node *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t result;
  unsigned int v128;
  unsigned int v129;
  uint64_t v131;
  unsigned int v132[2];
  char v133;
  __int16 v134;
  char v135;
  int v136;
  uint64_t v137;
  unsigned int v138[3];
  unsigned int v139[3];
  unsigned int v140[2];
  char v141;
  __int16 v142;
  char v143;
  unsigned int v144[3];
  unsigned int v145[3];
  uint64_t v146;
  char v147;

  v9 = *((_QWORD *)a2 + 3);
  v10 = v9 & 0xFF00FFFFFFFFFFFFLL;
  if ((v9 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_58:
    JUMPOUT(0x197BD85ACLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v9, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v146, this, a3, a4, a5, a6, a7, a8);
  v13 = v147;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v12, 28, v14, v15, v16, v17, (uint64_t)v145);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v12, 2, v18, v19, v20, v21, (uint64_t)v144);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v22, v23, v24, v25, v26, v27, v28);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v30 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v22, v23, v24, v25, v26, v27, v28);
    v30 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v30) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v31 = 69;
  else
    v31 = 65;
  v140[0] = i;
  v140[1] = 0;
  v141 = v31;
  v142 = 15;
  v143 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v145, (uint64_t)this, v23, v24, v25, v26, v27, v28);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x500000000, *((char *)this + 304), v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 26, v37, v38, v39, v40, (uint64_t)v139);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD85CCLL);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x500000000, *((char *)this + 304), v41, v42, v43, v44, v45);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v46, v47, v48, v49, (uint64_t)v138);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD85ECLL);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v12 | 0x600000000, *((char *)this + 304), v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, (uint64_t)this, 1, 17, v55, v56, v57, v58, (uint64_t)&v136, v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v144, (uint64_t)this, v60, v61, v62, v63, v64, v65);
  v73 = *((_DWORD *)this + 50);
  if (v73 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v66, v67, v68, v69, v70, v71, v72);
    v73 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v73) = v13 | 0x320003E0;
  v74 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v74; v74 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v74)
  {
    if ((v74 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v66, v67, v68, v69, v70, v71, v72);
      v74 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v74) = -721215457;
    v74 = *((_DWORD *)this + 50) + 4;
  }
  v75 = v13;
  v76 = v74;
  if ((v74 + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v66, v67, v68, v69, v70, v71, v72);
    v76 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v76) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v77 = 69;
  else
    v77 = 65;
  v132[0] = v74;
  v132[1] = 0;
  v133 = v77;
  v134 = 15;
  v135 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v140, (uint64_t)this, v67, v68, v69, v70, v71, v72);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v139, (uint64_t)this, v78, v79, v80, v81, v82, v83);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v138, (uint64_t)this, v84, v85, v86, v87, v88, v89);
  v97 = *((_DWORD *)this + 50);
  if (v97 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v90, (uint64_t)v91, v92, v93, v94, v95, v96);
    v97 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v97) = v13 & 0x1F | 0x52800000;
  *((_DWORD *)this + 50) += 4;
  v98 = v136;
  v99 = v137;
  v100 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v91, v92, v93, v94, v95, v96);
  v102 = v101;
  v103 = WTF::fastMalloc((WTF *)0xA0);
  v104 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v103, this);
  *(_QWORD *)v104 = off_1E35746F0;
  *(_DWORD *)(v104 + 48) = v98;
  *(_QWORD *)(v104 + 52) = v99;
  v112 = *((_DWORD *)this + 50);
  for (*(_DWORD *)(v104 + 60) = v112; v112 < *((_DWORD *)this + 13); *(_DWORD *)(v103 + 60) = v112)
  {
    if ((v112 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v105, v106, v107, v108, v109, v110, v111);
      v112 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v112) = -721215457;
    v112 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v112;
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v103 = off_1E3573B30;
  *(_QWORD *)(v103 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v103 + 72) = 0;
  *(_BYTE *)(v103 + 74) = v75;
  *(_QWORD *)(v103 + 80) = v103 + 96;
  *(_QWORD *)(v103 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v103 + 80, v75, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v110, v111);
  *(_QWORD *)v103 = &off_1E3573B00;
  *(_QWORD *)(v103 + 128) = operationTypeOfIsObject;
  *(_QWORD *)(v103 + 136) = v100;
  *(_QWORD *)(v103 + 144) = v102;
  *(_BYTE *)(v103 + 152) = v12;
  v131 = v103;
  v119 = (_QWORD *)((char *)this + 5656);
  v120 = *((unsigned int *)this + 1417);
  if ((_DWORD)v120 == *((_DWORD *)this + 1416))
  {
    v122 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v120 + 1, (unint64_t)&v131);
    v120 = *((unsigned int *)this + 1417);
    v121 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v120);
    v103 = *v122;
  }
  else
  {
    v121 = (uint64_t *)(*v119 + 8 * v120);
    v122 = &v131;
  }
  *v122 = 0;
  *v121 = v103;
  *((_DWORD *)this + 1417) = v120 + 1;
  v123 = v131;
  v131 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v132, (uint64_t)this, v113, v114, v115, v116, v117, v118);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v75, v75);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v75, (uint64_t)a2, 21, 0, v124, v125, v126);
  if (v146)
  {
    v128 = v147;
    if (v147 != -1)
    {
      if (v147 > 15)
        v128 = -1;
      --*(_DWORD *)(v146 + 12 * v128 + 4784);
    }
  }
  if (v10)
  {
    if ((int)v12 > 15)
      v129 = -1;
    else
      v129 = v12;
    --*((_DWORD *)this + 3 * v129 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileIsCallable(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  JSC::DFG::Node *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t result;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  uint64_t v113;
  unsigned int v114[2];
  char v115;
  __int16 v116;
  char v117;
  int v118;
  uint64_t v119;
  unsigned int v120[3];
  unsigned int v121[3];
  unsigned int v122[3];
  uint64_t v123;
  char v124;

  v10 = a2[3];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_48:
    JUMPOUT(0x197BD8B58);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2[3], a3, a4, a5, a6, a7, a8), v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v123, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  v13 = v124;
  JSC::AssemblyHelpers::branchIfNotCell(a1, v12, 1, v14, v15, v16, v17, v18, (uint64_t)v122);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_48;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12 | 0x500000000, *(char *)(a1 + 304), v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 26, v24, v25, v26, v27, (uint64_t)v121);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD8B78);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12 | 0x500000000, *(char *)(a1 + 304), v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v33, v34, v35, v36, (uint64_t)v120);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD8B98);
  }
  v42 = v13;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12 | 0x600000000, *(char *)(a1 + 304), v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, a1, 1, 17, v43, v44, v45, v46, (uint64_t)&v118, v47);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v122, a1, v48, v49, v50, v51, v52, v53);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v120, a1, v54, v55, v56, v57, v58, v59);
  v67 = *(_DWORD *)(a1 + 200);
  if (v67 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, v61, v62, v63, v64, v65, v66);
    v67 = *(_DWORD *)(a1 + 200);
  }
  v111 = v10 & 0xFF00FFFFFFFFFFFFLL;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = v13 & 0x1F | 0x52800000;
  v68 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v68; v68 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v68)
  {
    if ((v68 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, v61, v62, v63, v64, v65, v66);
      v68 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = -721215457;
    v68 = *(_DWORD *)(a1 + 200) + 4;
  }
  v69 = v68;
  if ((v68 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v60, v61, v62, v63, v64, v65, v66);
    v69 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v70 = 69;
  else
    v70 = 65;
  v114[0] = v68;
  v114[1] = 0;
  v115 = v70;
  v116 = 15;
  v117 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v121, a1, v61, v62, v63, v64, v65, v66);
  v78 = *(_DWORD *)(a1 + 200);
  if (v78 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v71, (uint64_t)v72, v73, v74, v75, v76, v77);
    v78 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = v13 | 0x320003E0;
  *(_DWORD *)(a1 + 200) += 4;
  v79 = v118;
  v80 = v119;
  v81 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, (JSC::DFG::JITCompiler *)a2, v72, v73, v74, v75, v76, v77);
  v83 = v82;
  v84 = WTF::fastMalloc((WTF *)0xA0);
  v85 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v84, (JSC::DFG::SpeculativeJIT *)a1);
  *(_QWORD *)v85 = off_1E35746F0;
  *(_DWORD *)(v85 + 48) = v79;
  *(_QWORD *)(v85 + 52) = v80;
  v93 = *(_DWORD *)(a1 + 200);
  for (*(_DWORD *)(v85 + 60) = v93; v93 < *(_DWORD *)(a1 + 52); *(_DWORD *)(v84 + 60) = v93)
  {
    if ((v93 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v86, v87, v88, v89, v90, v91, v92);
      v93 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = -721215457;
    v93 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v93;
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)v84 = off_1E3573B30;
  *(_QWORD *)(v84 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v84 + 72) = 0;
  *(_BYTE *)(v84 + 74) = v42;
  *(_QWORD *)(v84 + 80) = v84 + 96;
  *(_QWORD *)(v84 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, 0, v84 + 80, v42, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v91, v92);
  *(_QWORD *)v84 = &off_1E3573B00;
  *(_QWORD *)(v84 + 128) = a3;
  *(_QWORD *)(v84 + 136) = v81;
  *(_QWORD *)(v84 + 144) = v83;
  *(_BYTE *)(v84 + 152) = v12;
  v113 = v84;
  v100 = (_QWORD *)(a1 + 5656);
  v101 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v101 == *(_DWORD *)(a1 + 5664))
  {
    v103 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v113);
    v101 = *(unsigned int *)(a1 + 5668);
    v102 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v101);
    v84 = *v103;
  }
  else
  {
    v102 = (uint64_t *)(*v100 + 8 * v101);
    v103 = &v113;
  }
  *v103 = 0;
  *v102 = v84;
  *(_DWORD *)(a1 + 5668) = v101 + 1;
  v104 = v113;
  v113 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v114, a1, v94, v95, v96, v97, v98, v99);
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v42, v42);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v42, (uint64_t)a2, 21, 0, v105, v106, v107);
  if (v123)
  {
    v109 = v124;
    if (v124 != -1)
    {
      if (v124 > 15)
        v109 = -1;
      --*(_DWORD *)(v123 + 12 * v109 + 4784);
    }
  }
  if (v111)
  {
    if (v12 > 15)
      v110 = -1;
    else
      v110 = v12;
    --*(_DWORD *)(a1 + 12 * v110 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileIsConstructor(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  JSC::DFG::Node *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  v9 = (unsigned int *)this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillJSValue(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v12, a3, a4, a5, a6, a7, a8);
  ++v9[1196];
  v20 = v9[1194];
  if ((_DWORD)v20 != 0x3FFFFFFF)
  {
    *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v20, (uint64_t)v14, v15, v16, v17, v18, v19);
  }
  v21 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v14, v15, v16, v17, v18, v19);
  JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((uint64_t)v9, (unsigned __int8 *)operationIsConstructor, 0, v21, v22, v13, v23, v24, &v29);
  JSC::MacroAssemblerARM64::or32((uint64_t)v9, (JSC::ARM64LogicalImmediate *)6, 0, 0);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 21, 0, v25, v26, v27);
  --v9[1196];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v13 > 15)
      v28 = -1;
    else
      v28 = v13;
    --v9[3 * v28 + 1196];
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int64_t v51;
  unsigned __int8 *v52;
  char v53;
  int v54;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v56;
  unsigned int v57;
  unsigned int v58;
  __int16 v59;
  _BYTE v60[6];

  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  v13 = a1;
  if (a6 != 1)
  {
    v59 = a6 | 0x100;
    v57 = 1;
    v56 = (JSC::AssemblerBuffer *)(a1 + 56);
    v15 = 1;
    do
    {
      v16 = 0;
      v17 = 0;
      v18 = v15;
      do
      {
        if ((v60[v16 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v17 |= 1 << v60[v16 - 1];
        v16 += 2;
      }
      while (2 * v15 != v16);
      v19 = 0;
      do
      {
        v20 = v60[v19 - 2] & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_63;
        v17 &= ~(1 << v20);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v21.i16[0] = vaddlv_u8(v21);
      v22 = v21.i32[0];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.i32[0] + v22)
      {
        v24 = 0;
        if (v15 <= 1)
          v25 = 1;
        else
          v25 = v15;
        v26 = 2 * v25;
        while (1)
        {
          v27 = v60[v24 - 1];
          if ((v27 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v17 >> (v27 & 0x7F)) & 1) != 0)
            break;
          v24 += 2;
          if (v26 == v24)
            goto LABEL_33;
        }
        v28 = v60[v24 - 2];
        if (v28 != v27)
        {
          if ((char)v28 == 63)
          {
            if (v27 == 31)
              goto LABEL_27;
            v30 = v27 & 0x1F | 0xD2800000;
          }
          else
          {
            v29 = (char)v27 == 31 || (char)v28 == 31;
            if (!v29)
            {
              v30 = v27 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v30 = (char)v27 | (32 * (char)v28) | 0x91000000;
          }
LABEL_28:
          v31 = *(_DWORD *)(v13 + 200);
          if (v31 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v56, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v31 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v31) = v30;
          *(_DWORD *)(v13 + 200) += 4;
          v18 = v57;
        }
        memmove(&v60[v24 - 2], &v60[v24], 2 * v18 - v24 - 2);
        v15 = v57 - 1;
        goto LABEL_32;
      }
      v32 = HIBYTE(v59);
      v53 = v59;
      JSC::MacroAssemblerARM64::swap(v13, (char)v59, SHIBYTE(v59), a4, a5, a6, a7, a8);
      memmove(&v59, v60, 2 * v57 - 2);
      v33 = v57 - 1;
      v29 = v57 == 1;
      v58 = v33;
      v34 = (unsigned __int8 *)&v59;
      __src = &v60[2 * v33 - 2];
      if (v29)
      {
        v35 = 0;
        v36 = 0;
        v54 = 0;
        a2 = &v60[2 * v33 - 2];
      }
      else
      {
        v38 = 2 * v33;
        v39 = &v59;
        while (*(unsigned __int8 *)v39 != v32)
        {
          ++v39;
          v38 -= 2;
          if (!v38)
            goto LABEL_43;
        }
        *(_BYTE *)v39 = v53;
LABEL_43:
        v54 = 0;
        v40 = (char *)&v59;
        a2 = __src;
        v41 = __src;
        do
        {
          if (*v34 == v34[1])
          {
            v42 = v34;
            if (v41 != &v60[2 * v58 - 2])
            {
              if (v34 == a2)
              {
                v42 = v41;
              }
              else
              {
                v51 = v40 - (char *)a2;
                v52 = v41;
                memmove(v41, a2, v40 - (char *)a2);
                v42 = &v52[v51];
              }
            }
            a2 = v34 + 2;
            ++v54;
            v41 = v42;
          }
          v34 += 2;
          v40 += 2;
        }
        while (v34 < __src);
        v35 = v58;
        v36 = v58;
        __src = v41;
      }
      v37 = &v60[2 * v35 - 2];
      if (a2 != v37)
      {
        memmove(__src, a2, v37 - a2);
        v36 = v58;
      }
      v15 = v36 - v54;
LABEL_32:
      v57 = v15;
LABEL_33:
      ;
    }
    while (v15);
  }
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v13, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, v12, v43, v44, v45, v46, v47, v48, a9);
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 31)
    {
      LODWORD(v12) = -1862270945;
    }
    else if ((_DWORD)v11 == -1)
    {
      LODWORD(v12) = -1442774017;
    }
    else
    {
      LODWORD(v12) = v11 & 0x1F | 0xAA0003E0;
    }
    v50 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v49 = v50;
    v11 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v50 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v49 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v49) = v12;
    *(_DWORD *)v13 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x8_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int8x8_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  JSC::DFG::Node *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t *v226;
  uint64_t v227;
  int v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  int v237;
  unsigned int v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  int v242;
  WTF *v243;
  unsigned int v244;
  unsigned int v245;
  JSC::AssemblerBuffer *v246;
  uint64_t v247;
  JSC::AssemblerBuffer *v248;
  uint64_t v249;
  _QWORD v250[3];
  WTF *v251;
  uint64_t v252;
  _BYTE v253[31];
  char v254;
  uint64_t v255;
  char v256;
  unsigned int v257[3];
  WTF *v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262[3];
  unsigned int v263[3];
  unsigned int v264[3];
  int v265;
  uint64_t v266;
  unsigned int v267[3];
  unsigned int v268[3];
  unsigned int v269[3];
  unsigned int v270;
  _BYTE v271[12];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD9A14);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v255, this, a3, a4, a5, a6, a7, a8);
  v14 = v256;
  v254 = v256;
  v250[2] = &v251;
  v251 = (WTF *)v253;
  v252 = 2;
  v250[0] = this;
  v250[1] = &v254;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v13, 1, v15, v16, v17, v18, v19, (uint64_t)v269);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_65;
  }
  v25 = v13 | 0x500000000;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v25, *((char *)this + 304), v20, v21, v22, v23, v24);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v26, v27, v28, v29, (uint64_t)v268);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD9924);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x500000000, *((char *)this + 304), v30, v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 26, v35, v36, v37, v38, (uint64_t)v267);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 7, v39, v40, v41, v42, v43, v44);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v267, (uint64_t)this, v45, v46, v47, v48, v49, v50);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD9944);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v13 | 0x600000000, *((char *)this + 304), v51, v52, v53, v54, v55);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, (uint64_t)this, 1, 17, v56, v57, v58, v59, (uint64_t)&v265, v60);
  v61 = v265;
  v62 = v266;
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 6, v63, v64, v65, v66, v67, v68);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v268, (uint64_t)this, v69, v70, v71, v72, v73, v74);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD9964);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v25, *((char *)this + 304), v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v80, v81, v82, v83, (uint64_t)v264);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 4, v84, v85, v86, v87, v88, v89);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v264, (uint64_t)this, v90, v91, v92, v93, v94, v95);
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BD9984);
  }
  v247 = v62;
  v101 = v11;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v25, *((char *)this + 304), v96, v97, v98, v99, v100);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 3, v102, v103, v104, v105, (uint64_t)v263);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 1, v106, v107, v108, v109, v110, v111);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v263, (uint64_t)this, v112, v113, v114, v115, v116, v117);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 5, v118, v119, v120, v121, v122, v123);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v269, (uint64_t)this, v124, v125, v126, v127, v128, v129);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v13, 27, v130, v131, v132, v133, (uint64_t)v262);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 3, v134, v135, v136, v137, v138, v139);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v262, (uint64_t)this, v140, v141, v142, v143, v144, v145);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v13, 2, v146, v147, v148, v149, (uint64_t)&v270);
  v258 = (WTF *)&v260;
  v259 = 2;
  if (v270 != -1)
  {
    v261 = *(_QWORD *)v271;
    HIDWORD(v259) = 1;
    v260 = v270;
  }
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 6, v150, v151, v152, v153, v154, v155);
  if (HIDWORD(v259))
  {
    v162 = 0;
    v163 = 0;
    v164 = 12 * HIDWORD(v259);
    do
    {
      if (v163 >= HIDWORD(v259))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD9A04);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v258 + v162), (uint64_t)this, v156, v157, v158, v159, v160, v161);
      ++v163;
      v162 += 12;
    }
    while (v164 != v162);
  }
  JSC::MacroAssemblerARM64::xor64((uint64_t)this, 6, v13, v14, v158, v159, v160, v161);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v14, 4294967294, v165, v166, v167, v168, (uint64_t)v257, v169);
  JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()((uint64_t)v250, 2, v170, v171, v172, v173, v174, v175);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v257, (uint64_t)this, v176, v177, v178, v179, v180, v181);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v270, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 42032), v182, v183, v184, v185, v186);
  if (v270 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(uint64_t *)&v271[4], v254, v187, v188, v189, v190, v191);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v270 << 35) + 0x380000001ALL, v254, v187, v188, v189, v190, v191);
  v199 = v258;
  if (&v260 != (unsigned int *)v258 && v258)
  {
    v258 = 0;
    LODWORD(v259) = 0;
    WTF::fastFree((unint64_t)v199, v192, (uint64_t)v193, v194, v195, v196, v197, v198);
  }
  if (HIDWORD(v252))
  {
    v200 = 0;
    v201 = 0;
    v202 = 12 * HIDWORD(v252);
    do
    {
      if (v201 >= HIDWORD(v252))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD9A0CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v251 + v200), (uint64_t)this, (uint64_t)v193, v194, v195, v196, v197, v198);
      ++v201;
      v200 += 12;
    }
    while (v202 != v200);
  }
  v203 = v254;
  v204 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v193, v194, v195, v196, v197, v198);
  v206 = v205;
  v207 = WTF::fastMalloc((WTF *)0xA0);
  v208 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v207, this);
  *(_QWORD *)v208 = off_1E35746F0;
  *(_DWORD *)(v208 + 48) = v61;
  *(_QWORD *)(v208 + 52) = v247;
  v216 = *((_DWORD *)this + 50);
  *(_DWORD *)(v208 + 60) = v216;
  if (v216 < *((_DWORD *)this + 13))
  {
    v246 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    do
    {
      if ((v216 + 4) > *((_DWORD *)this + 48))
      {
        v248 = v246;
        JSC::AssemblerBuffer::outOfLineGrow(v246, v209, v210, v211, v212, v213, v214, v215);
        v246 = v248;
        v216 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v216) = -721215457;
      v216 = *((_DWORD *)this + 50) + 4;
      *((_DWORD *)this + 50) = v216;
      *(_DWORD *)(v207 + 60) = v216;
    }
    while (v216 < *((_DWORD *)this + 13));
  }
  *((_DWORD *)this + 52) = 0;
  *(_QWORD *)v207 = off_1E3573B90;
  *(_QWORD *)(v207 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v207 + 72) = 0;
  *(_BYTE *)(v207 + 74) = v203;
  *(_QWORD *)(v207 + 80) = v207 + 96;
  *(_QWORD *)(v207 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v207 + 80, v203, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v214, v215);
  *(_QWORD *)v207 = &off_1E3573B60;
  *(_QWORD *)(v207 + 128) = operationTypeOfObject;
  *(_QWORD *)(v207 + 136) = v204;
  *(_QWORD *)(v207 + 144) = v206;
  *(_BYTE *)(v207 + 152) = v13;
  v249 = v207;
  v223 = (_QWORD *)((char *)this + 5656);
  v224 = *((unsigned int *)this + 1417);
  if ((_DWORD)v224 == *((_DWORD *)this + 1416))
  {
    v226 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v223, v224 + 1, (unint64_t)&v249);
    v224 = *((unsigned int *)this + 1417);
    v225 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v224);
    v207 = *v226;
  }
  else
  {
    v225 = (uint64_t *)(*v223 + 8 * v224);
    v226 = &v249;
  }
  *v226 = 0;
  *v225 = v207;
  *((_DWORD *)this + 1417) = v224 + 1;
  v227 = v249;
  v249 = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = v254;
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v217, v218, v219, v220, v221, v222);
  v236 = (char *)this + 4776;
  v237 = *((_DWORD *)a2 + 12);
  if (v228 > 15)
    v238 = -1;
  else
    v238 = v228;
  v239 = &v236[12 * v238];
  *(_DWORD *)v239 = v237;
  *((_DWORD *)v239 + 1) = 4;
  v240 = ~v237;
  if (v240 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_65:
    JUMPOUT(0x197BD9904);
  }
  v241 = *((_QWORD *)this + 499) + 24 * (int)v240;
  v242 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v241 = a2;
  *(_DWORD *)(v241 + 8) = v242;
  *(_BYTE *)(v241 + 17) = v228;
  *(_DWORD *)(v241 + 12) = 6;
  *(_BYTE *)(v241 + 16) = 0;
  v243 = v251;
  if (v253 != (_BYTE *)v251 && v251)
  {
    v251 = 0;
    LODWORD(v252) = 0;
    WTF::fastFree((unint64_t)v243, v229, v230, v231, v232, v233, v234, v235);
  }
  if (v255)
  {
    v244 = v256;
    if (v256 != -1)
    {
      if (v256 > 15)
        v244 = -1;
      --*(_DWORD *)(v255 + 12 * v244 + 4784);
    }
  }
  if (v101)
  {
    if ((int)v13 > 15)
      v245 = -1;
    else
      v245 = v13;
    --*(_DWORD *)&v236[12 * v245 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::emitStructureCheck(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  JSC::DFG::GPRTemporary *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t *v38;
  int v39;
  _DWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned int *v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  WTF *v57;
  unsigned int *v58;
  __int16 v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  char v64;
  __int16 v65;
  char v66;
  __int16 v67;
  uint64_t v68;
  int v69;
  char *v70;
  char v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  int v81;
  WTF *v82;
  int v83;
  JSC::AssemblerBuffer *v84;
  JSC::AssemblerBuffer *v85;
  JSC::AssemblerBuffer *v86;
  JSC::AssemblerBuffer *v87;
  JSC::AssemblerBuffer *v88;
  JSC::AssemblerBuffer *v89;
  WTF *v90;
  int v91[3];
  int v92;
  uint64_t v93;
  WTF *v94;
  uint64_t v95;
  _BYTE v96[28];
  int v97[3];
  __int128 v98;
  uint64_t v99;

  v11 = **(_QWORD **)(a2 + 72);
  if ((v11 & 1) != 0)
  {
    v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(_DWORD *)v18 == 1)
    {
      v12 = *(_QWORD *)(v18 + 8);
      goto LABEL_4;
    }
  }
  else if (v11 > 3)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_4:
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BD9EB4);
    }
    v13 = (v12 >> 4);
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a3, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, v13, v14, v15, v16, v17, (uint64_t)v97);
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 5uLL, (JSC::DFG::Node *)(((unint64_t)a3 << 32) | 0x80000000), 0, v97);
    return;
  }
  if ((_DWORD)a4 == -1)
  {
    v19 = (JSC::DFG::GPRTemporary *)WTF::fastMalloc((WTF *)0x10);
    v90 = JSC::DFG::GPRTemporary::GPRTemporary(v19, (JSC::DFG::SpeculativeJIT *)a1, v20, v21, v22, v23, v24, v25);
    a4 = *((unsigned __int8 *)v90 + 8);
  }
  else
  {
    v90 = 0;
  }
  v26 = a3;
  v27 = (char)a4;
  JSC::MacroAssemblerARM64::load32(a1, v26, v27, a4, a5, a6, a7, a8);
  v32 = 0;
  v94 = (WTF *)v96;
  v95 = 2;
  while (1)
  {
    v33 = **(_QWORD **)(a2 + 72);
    if ((v33 & 1) != 0)
      break;
    if (v33 >= 4)
      v34 = 0;
    else
      v34 = -1;
    v35 = v33 & 0xFFFFFFFFFFFFFFFCLL;
    if (v32 >= v34)
      goto LABEL_26;
LABEL_17:
    JSC::MacroAssemblerARM64::branch32(a1, 0, v27, (v35 >> 4), v28, v29, v30, v31, (uint64_t)&v92);
    if (v92 != -1)
    {
      if (HIDWORD(v95) == (_DWORD)v95)
      {
        v37 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v94, (void *)(HIDWORD(v95) + 1), (unint64_t)&v92, v36, v28, v29, v30, v31);
        v39 = *v37;
        v38 = (uint64_t *)(v37 + 1);
        v40 = (_DWORD *)((char *)v94 + 12 * HIDWORD(v95));
        *v40 = v39;
        v41 = (uint64_t *)(v40 + 1);
      }
      else
      {
        v47 = (_DWORD *)((char *)v94 + 12 * HIDWORD(v95));
        *v47 = v92;
        v41 = (uint64_t *)(v47 + 1);
        v38 = &v93;
      }
      *v41 = *v38;
      ++HIDWORD(v95);
    }
    ++v32;
  }
  v42 = v33 & 0xFFFFFFFFFFFFFFFCLL;
  v43 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
  v46 = *v43;
  v44 = v43 + 2;
  v45 = v46;
  if (v32 < (unint64_t)v46 - 1)
  {
    v35 = *(_QWORD *)(v42 + 8 * v32 + 8);
    goto LABEL_17;
  }
  v35 = *(_QWORD *)&v44[2 * v45 - 2];
LABEL_26:
  JSC::MacroAssemblerARM64::branch32(a1, 1, v27, (v35 >> 4), v28, v29, v30, v31, (uint64_t)v91);
  JSC::DFG::SpeculativeJIT::speculationCheck(a1, 5uLL, (JSC::DFG::Node *)((v26 << 32) | 0x80000000), 0, v91);
  v55 = HIDWORD(v95);
  if (HIDWORD(v95))
  {
    v56 = 0;
    do
    {
      if (v56 >= HIDWORD(v95))
      {
        __break(0xC471u);
        JUMPOUT(0x197BD9FFCLL);
      }
      v57 = v94;
      v58 = (unsigned int *)((char *)v94 + 12 * v56);
      *(_DWORD *)(a1 + 208) = 0;
      v60 = (unsigned __int8 *)(v58 + 2);
      v59 = *((unsigned __int8 *)v58 + 8);
      switch(*((_BYTE *)v58 + 8))
      {
        case 0x83:
        case 0x87:
          v61 = *v58;
          v62 = *(_DWORD *)(a1 + 200);
          if (v62 < *(_DWORD *)(a1 + 52))
          {
            v84 = (JSC::AssemblerBuffer *)(a1 + 56);
            do
            {
              if ((v62 + 4) > *(_DWORD *)(a1 + 192))
              {
                v87 = v84;
                JSC::AssemblerBuffer::outOfLineGrow(v84, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
                v84 = v87;
                v62 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = -721215457;
              v62 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v62;
            }
            while (v62 < *(_DWORD *)(a1 + 52));
            v59 = *v60;
          }
          v63 = (char *)v57 + 12 * v56;
          v64 = v63[9];
          v65 = v63[10];
          v66 = v63[11];
          *(_QWORD *)&v98 = v61;
          *((_QWORD *)&v98 + 1) = v62;
          BYTE3(v99) = v64 & 0xF;
          *(_WORD *)((char *)&v99 + 1) = v59;
          v67 = v65 << 6;
          goto LABEL_34;
        case 0x84:
        case 0x88:
          v68 = *v58;
          v69 = *(_DWORD *)(a1 + 200);
          if (v69 < *(_DWORD *)(a1 + 52))
          {
            v85 = (JSC::AssemblerBuffer *)(a1 + 56);
            do
            {
              if ((v69 + 4) > *(_DWORD *)(a1 + 192))
              {
                v88 = v85;
                JSC::AssemblerBuffer::outOfLineGrow(v85, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
                v85 = v88;
                v69 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v69) = -721215457;
              v69 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v69;
            }
            while (v69 < *(_DWORD *)(a1 + 52));
            v59 = *v60;
          }
          v70 = (char *)v57 + 12 * v56;
          v71 = v70[9];
          v72 = *((_WORD *)v70 + 2);
          v66 = v70[11];
          *(_QWORD *)&v98 = v68;
          *((_QWORD *)&v98 + 1) = v69;
          BYTE3(v99) = v71 & 0xF;
          *(_WORD *)((char *)&v99 + 1) = v59;
          v67 = v72 & 0x3F;
LABEL_34:
          WORD2(v99) = v67;
          LOBYTE(v99) = v66;
          break;
        default:
          v77 = *v58;
          v78 = *(_DWORD *)(a1 + 200);
          if (v78 < *(_DWORD *)(a1 + 52))
          {
            v86 = (JSC::AssemblerBuffer *)(a1 + 56);
            do
            {
              if ((v78 + 4) > *(_DWORD *)(a1 + 192))
              {
                v89 = v86;
                JSC::AssemblerBuffer::outOfLineGrow(v86, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
                v86 = v89;
                v78 = *(_DWORD *)(a1 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = -721215457;
              v78 = *(_DWORD *)(a1 + 200) + 4;
              *(_DWORD *)(a1 + 200) = v78;
            }
            while (v78 < *(_DWORD *)(a1 + 52));
            v59 = *v60;
          }
          v79 = *((_BYTE *)v57 + 12 * v56 + 9);
          LOBYTE(v99) = -1;
          *(_QWORD *)&v98 = v77;
          *((_QWORD *)&v98 + 1) = v78;
          BYTE3(v99) = v79 & 0xF;
          *(_WORD *)((char *)&v99 + 1) = v59;
          WORD2(v99) = 0;
          break;
      }
      v73 = *(unsigned int *)(a1 + 44);
      if ((_DWORD)v73 == *(_DWORD *)(a1 + 40))
      {
        v80 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 32, v73 + 1, (unint64_t)&v98, v50, v51, v52, v53, v54);
        v74 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
        *(_QWORD *)v74 = 0;
        *(_QWORD *)(v74 + 8) = 0;
        *(_BYTE *)(v74 + 16) = -1;
        v81 = (((*(unsigned __int8 *)(v74 + 19) >> 4) & 0xF) << 20) | 0xF0041;
        *(_WORD *)(v74 + 17) = 65;
        *(_BYTE *)(v74 + 19) = BYTE2(v81);
        *(_WORD *)(v74 + 20) &= 0xFC00u;
        v75 = *(_OWORD *)v80;
        v76 = *(_QWORD *)(v80 + 16);
      }
      else
      {
        v74 = *(_QWORD *)(a1 + 32) + 24 * v73;
        v75 = v98;
        v76 = v99;
      }
      *(_QWORD *)(v74 + 16) = v76;
      *(_OWORD *)v74 = v75;
      ++*(_DWORD *)(a1 + 44);
      ++v56;
    }
    while (v56 != v55);
  }
  v82 = v94;
  if (v96 != (_BYTE *)v94 && v94)
  {
    v94 = 0;
    LODWORD(v95) = 0;
    WTF::fastFree((unint64_t)v82, v48, v49, v50, v51, v52, v53, v54);
  }
  if (v90)
  {
    if (*(_QWORD *)v90)
    {
      v83 = *((char *)v90 + 8);
      if (v83 != -1)
      {
        if (v83 > 15)
          v83 = -1;
        --*(_DWORD *)(*(_QWORD *)v90 + 12 * v83 + 4784);
      }
    }
    WTF::fastFree((unint64_t)v90, v48, v49, v50, v51, v52, v53, v54);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckIsConstant(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Node *v22;
  JSC::DFG::SpeculativeJIT *v23;
  JSC::DFG::Node *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFC000000000000) == 0x20000000000000)
  {
    if (!v11)
      goto LABEL_8;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BDA294);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
      && (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
          (_DWORD)v13 != -1))
    {
      v14 = *((_QWORD *)a2 + 3);
    }
    else
    {
LABEL_8:
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      v14 = *((_QWORD *)a2 + 3);
      if ((_DWORD)v13 == -1)
      {
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v16, a4, a5, a6, a7, a8);
        LOBYTE(v13) = -1;
        goto LABEL_10;
      }
    }
    v15 = v13;
LABEL_10:
    v17 = ((unint64_t)v13 << 32) | 0x80000000;
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v38, this, **((_QWORD **)a2 + 9), a4, a5, a6, a7, a8);
    if (v38 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v15, v39, v18, v19, v20, v21, (uint64_t)&v40);
    else
      JSC::MacroAssembler::branchPtr((uint64_t)this, 1, v15, ((unint64_t)v38 << 35) + 0x380000001ALL, v18, v19, v20, v21, (uint64_t)&v40);
    v22 = (JSC::DFG::Node *)(v14 & 0xFF00FFFFFFFFFFFFLL);
    v42 = v40;
    v43 = v41;
    v23 = this;
    v24 = (JSC::DFG::Node *)v17;
    goto LABEL_13;
  }
  if (!v11)
    goto LABEL_23;
  v32 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v32 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BDA29CLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v32 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v15 == -1))
  {
LABEL_23:
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((_QWORD *)a2 + 3);
  v34 = *((unsigned __int16 *)a2 + 9);
  if (v34 == 355 || v34 == 348)
  {
    v35 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v35 = (uint64_t *)*((_QWORD *)a2 + 9);
  }
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v15, *v35, a5, a6, a7, a8, (uint64_t)&v36);
  v24 = (JSC::DFG::Node *)(((unint64_t)v15 << 32) | 0x80000000);
  v22 = (JSC::DFG::Node *)(v33 & 0xFF00FFFFFFFFFFFFLL);
  v42 = v36;
  v43 = v37;
  v23 = this;
LABEL_13:
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)v23, 2uLL, v24, v22, &v42);
  if (v11)
  {
    if ((int)v15 > 15)
      v30 = -1;
    else
      v30 = v15;
    --*((_DWORD *)this + 3 * v30 + 1196);
  }
  return JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v25, v26, v27, v28, v29);
}

void JSC::DFG::JITCompiler::branchLinkableConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::branch64(a2, 0, a3, a5, a5, a6, a7, a8, a1);
  else
    JSC::MacroAssembler::branchPtr(a2, 0, a3, (a4 << 35) + 0x380000001ALL, a5, a6, a7, a8, a1);
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckNotEmpty(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20[3];

  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillJSValue(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), (_DWORD)v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue(v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::branchTest64(v9, 0, v12, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)v20, v13);
  JSC::DFG::SpeculativeJIT::speculationCheck(v9, 0x14uLL, (JSC::DFG::Node *)0xFF80000000, 0, v20);
  this = JSC::DFG::SpeculativeJIT::noResult(v9, (uint64_t)a2, 0, v14, v15, v16, v17, v18);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v12 > 15)
      v19 = -1;
    else
      v19 = v12;
    --*(_DWORD *)(v9 + 12 * v19 + 4784);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileCheckStructure(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82[2];
  char v83;
  __int16 v84;
  char v85;
  _BYTE v86[12];
  unsigned int v87[3];
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned int v93;

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if ((v11 - 8) < 2)
  {
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    {
LABEL_6:
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
LABEL_7:
      JSC::DFG::SpeculativeJIT::emitStructureCheck((uint64_t)this, (uint64_t)a2, v13, 0xFFFFFFFFLL, a5, a6, a7, a8);
      result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v14, v15, v16, v17, v18);
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return result;
      if (v13 > 15)
        v20 = -1;
      else
        v20 = v13;
      v21 = (char *)this + 12 * v20;
      goto LABEL_12;
    }
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 < *((unsigned int *)this + 1001))
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
      {
        v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        if (v13 != -1)
          goto LABEL_7;
      }
      goto LABEL_6;
    }
    __break(0xC471u);
LABEL_33:
    JUMPOUT(0x197BDA6B4);
  }
  if ((_DWORD)v11 != 10)
  {
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x2B75, "void JSC::DFG::SpeculativeJIT::compileCheckStructure(Node *)", "Bad use kind");
    __break(0xC471u);
    goto LABEL_33;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v90, (uint64_t)this, v10, 1, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v88, this, v22, v23, v24, v25, v26, v27);
  v34 = v92;
  if (v92 == 255)
  {
    v34 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v28, v29, v30, v31, v32, v33);
    v92 = v34;
  }
  v35 = v89;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v34, 28, v30, v31, v32, v33, (uint64_t)v87);
  v36 = *((_QWORD *)a2 + 3);
  v49 = v35;
  if (JSC::DFG::SpeculativeJIT::needsTypeCheck((uint64_t)this, v36, 0x2A00FFFFFFF7, v37, v38, v39, v40, v41))
  {
    JSC::AssemblyHelpers::branchIfNotOther((uint64_t)v86, (uint64_t)this, v34, v49);
    JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v34 << 32) | 0x80000000), v36, 0x2A00FFFFFFF7uLL, (uint64_t)v86, 1uLL, v50, v51);
  }
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v42, v43, v44, v45, v46, v47, v48, (int *)&v93);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v52, v53, v54, v55, v56, v57);
  if (*((_BYTE *)this + 328))
    v64 = 69;
  else
    v64 = 65;
  v82[0] = v93;
  v82[1] = 0;
  v83 = v64;
  v84 = 15;
  v85 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v87, (uint64_t)this, v58, v59, v60, v61, v62, v63);
  JSC::DFG::SpeculativeJIT::emitStructureCheck((uint64_t)this, (uint64_t)a2, v34, v49, v65, v66, v67, v68);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v82, (uint64_t)this, v69, v70, v71, v72, v73, v74);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v75, v76, v77, v78, v79);
  if (v88)
  {
    v80 = v89;
    if (v89 != -1)
    {
      if (v89 > 15)
        v80 = -1;
      --*(_DWORD *)(v88 + 12 * v80 + 4784);
    }
  }
  if ((v91 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v81 = (char)v92;
    if ((char)v92 > 15)
      v81 = -1;
    v21 = (char *)(v90 + 12 * v81);
LABEL_12:
    --*((_DWORD *)v21 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileAllocatePropertyStorage(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  unsigned int v41;
  _BYTE *v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  _BYTE *v48;
  WTF *v49;
  WTF *v50;
  unsigned int v51;
  int v52;
  _BYTE *v53;
  WTF *v54;
  WTF *v55;
  unsigned int v56;
  int v57;
  _DWORD *v58;
  _BYTE *v59;
  _BYTE *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  WTF *v78;
  WTF *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  char *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  WTF *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint8x8_t v166;
  __int32 v167;
  uint8x8_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unsigned int v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  int v180;
  uint64_t v181;
  unsigned __int8 *v182;
  char *v183;
  uint64_t v184;
  int v185;
  int v186;
  unsigned __int8 *v187;
  uint64_t v188;
  _BYTE *v189;
  unsigned __int8 *v190;
  char *v191;
  char *v192;
  unsigned __int8 *v193;
  uint64_t v194;
  unint64_t v195;
  WTF *v197;
  unsigned int v198;
  _BYTE v199[24];
  uint64_t v200;
  WTF *v201;
  uint64_t v202;
  _BYTE v203[24];
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  unsigned __int8 v209;
  WTF *v210;
  unsigned int v211;
  unsigned int v212;
  _BYTE v213[24];
  WTF *v214;
  unsigned int v215;
  unsigned int v216;
  _BYTE v217[24];
  _BYTE *v218;
  unsigned int v219;
  unsigned int v220;
  _BYTE v221[24];
  char *v222;
  uint64_t v223;
  _WORD v224[16];

  v8 = a2;
  v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 6752);
  if (v10)
  {
    v11 = **((_QWORD **)a2 + 9);
    if ((*(_BYTE *)(v11 + 8) & 0xE) == 0 && *(unsigned __int8 *)(v11 + 9) - 39 > 0xA)
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v208, this, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v206, this, v12, v13, v14, v15, v16, v17);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v204, this, v18, v19, v20, v21, v22, v23);
      v24 = v209;
      v25 = (char)v209;
      v201 = (WTF *)v203;
      v202 = 2;
      v222 = 0;
      v223 = v10;
      JSC::AssemblyHelpers::emitAllocate((uint64_t)this, v25, (uint64_t)&v222, v207, v205, (uint64_t)&v201, 1, v26, v27);
      v35 = *((_DWORD *)this + 50);
      if (v35 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v28, v29, v30, v31, v32, v33, v34);
        v35 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v35) = v25 | (32 * v25) | 0x9100A000;
      *((_DWORD *)this + 50) += 4;
      v36 = HIDWORD(v202);
      v197 = (WTF *)v199;
      v198 = HIDWORD(v202);
      if (HIDWORD(v202) < 3)
      {
        v37 = v199;
      }
      else
      {
        if (HIDWORD(v202) >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDB288);
        }
        v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v202)));
        v197 = (WTF *)v37;
        v36 = HIDWORD(v202);
      }
      if (v36)
      {
        v38 = v201;
        v39 = (WTF *)((char *)v201 + 12 * v36);
        do
        {
          *(_DWORD *)v37 = *(_DWORD *)v38;
          *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
          v38 = (WTF *)((char *)v38 + 12);
          v37 += 12;
        }
        while (v38 != v39);
      }
      v40 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
      v41 = v198;
      v210 = (WTF *)v213;
      v211 = 2;
      v212 = v198;
      if (v198 < 3)
      {
        v42 = v213;
      }
      else
      {
        if (v198 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDB290);
        }
        v42 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v198));
        v211 = 12 * v198 / 0xC;
        v210 = (WTF *)v42;
        v41 = v198;
      }
      if (v41)
      {
        v43 = v197;
        v44 = (WTF *)((char *)v197 + 12 * v41);
        do
        {
          *(_DWORD *)v42 = *(_DWORD *)v43;
          *(_QWORD *)(v42 + 4) = *(_QWORD *)((char *)v43 + 4);
          v43 = (WTF *)((char *)v43 + 12);
          v42 += 12;
        }
        while (v43 != v44);
      }
      v45 = WTF::fastMalloc((WTF *)0xA8);
      v46 = v212;
      v214 = (WTF *)v217;
      v215 = 2;
      v216 = v212;
      v194 = v40;
      if (v212 < 3)
      {
        v48 = v217;
      }
      else
      {
        if (v212 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDB298);
        }
        v47 = 12 * v212;
        v48 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v212));
        v215 = (v47 & 0xFFFFFFFC) / 0xC;
        v214 = (WTF *)v48;
        v46 = v212;
      }
      if (v46)
      {
        v49 = v210;
        v50 = (WTF *)((char *)v210 + 12 * v46);
        do
        {
          *(_DWORD *)v48 = *(_DWORD *)v49;
          *(_QWORD *)(v48 + 4) = *(_QWORD *)((char *)v49 + 4);
          v49 = (WTF *)((char *)v49 + 12);
          v48 += 12;
        }
        while (v49 != v50);
      }
      v51 = v216;
      v218 = v221;
      v219 = 2;
      v220 = v216;
      if (v216 < 3)
      {
        v53 = v221;
      }
      else
      {
        if (v216 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDB2A0);
        }
        v52 = 12 * v216;
        v53 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v216));
        v219 = (v52 & 0xFFFFFFFC) / 0xC;
        v218 = v53;
        v51 = v216;
      }
      if (v51)
      {
        v54 = v214;
        v55 = (WTF *)((char *)v214 + 12 * v51);
        do
        {
          *(_DWORD *)v53 = *(_DWORD *)v54;
          *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v54 + 4);
          v54 = (WTF *)((char *)v54 + 12);
          v53 += 12;
        }
        while (v54 != v55);
      }
      v56 = v220;
      v222 = (char *)v224;
      LODWORD(v223) = 2;
      HIDWORD(v223) = v220;
      if (v220 < 3)
      {
        v58 = v224;
      }
      else
      {
        if (v220 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDB2A8);
        }
        v57 = 12 * v220;
        v58 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v220));
        LODWORD(v223) = (v57 & 0xFFFFFFFC) / 0xC;
        v222 = (char *)v58;
        v56 = v220;
      }
      if (v56)
      {
        v59 = v218;
        v60 = &v218[12 * v56];
        do
        {
          *v58 = *(_DWORD *)v59;
          *(_QWORD *)(v58 + 1) = *(_QWORD *)(v59 + 4);
          v59 += 12;
          v58 += 3;
        }
        while (v59 != v60);
      }
      JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v45, (uint64_t *)&v222, this);
      v68 = (unint64_t)v222;
      if (v224 != (_WORD *)v222 && v222 != 0)
      {
        v222 = 0;
        LODWORD(v223) = 0;
        WTF::fastFree(v68, v61, v62, v63, v64, v65, v66, v67);
      }
      *(_QWORD *)v45 = off_1E3573BF0;
      *(_QWORD *)(v45 + 92) = 0xFFFFFFFFLL;
      *(_WORD *)(v45 + 100) = 0;
      *(_BYTE *)(v45 + 102) = v25;
      *(_QWORD *)(v45 + 104) = v45 + 120;
      *(_QWORD *)(v45 + 112) = 2;
      JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v45 + 104, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v66, v67);
      v77 = (unint64_t)v218;
      if (v221 != v218 && v218)
      {
        v218 = 0;
        v219 = 0;
        WTF::fastFree(v77, v70, v71, v72, v73, v74, v75, v76);
      }
      *(_QWORD *)v45 = &off_1E3573BC0;
      *(_QWORD *)(v45 + 152) = operationAllocateSimplePropertyStorageWithInitialCapacity;
      *(_QWORD *)(v45 + 160) = v194;
      v200 = v45;
      v78 = v214;
      if (v217 != (_BYTE *)v214 && v214)
      {
        v214 = 0;
        v215 = 0;
        WTF::fastFree((unint64_t)v78, v70, v71, v72, v73, v74, v75, v76);
      }
      v79 = v210;
      if (v213 != (_BYTE *)v210 && v210)
      {
        v210 = 0;
        v211 = 0;
        WTF::fastFree((unint64_t)v79, v70, v71, v72, v73, v74, v75, v76);
      }
      v80 = (_QWORD *)((char *)this + 5656);
      v81 = *((unsigned int *)this + 1417);
      if ((_DWORD)v81 == *((_DWORD *)this + 1416))
      {
        v83 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v200);
        v81 = *((unsigned int *)this + 1417);
        v82 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v81);
        v45 = *v83;
      }
      else
      {
        v82 = (uint64_t *)(*v80 + 8 * v81);
        v83 = &v200;
      }
      *v83 = 0;
      *v82 = v45;
      *((_DWORD *)this + 1417) = v81 + 1;
      v84 = v200;
      v200 = 0;
      if (v84)
        (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
      if (v199 != (_BYTE *)v197 && v197)
        WTF::fastFree((unint64_t)v197, v70, v71, v72, v73, v74, v75, v76);
      JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v24 | 0xFFFFFFF000000000, v72, v73, v74, v75, v76);
      JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v24 | 0xFFFFFFE800000000, v85, v86, v87, v88, v89);
      JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v24 | 0xFFFFFFE000000000, v90, v91, v92, v93, v94);
      JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v24 | 0xFFFFFFD800000000, v95, v96, v97, v98, v99);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v100, v101, v102, v103, v104, v105);
      if ((int)v25 > 15)
        v113 = -1;
      else
        v113 = v25;
      v114 = (char *)this + 12 * v113;
      v115 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v114 + 1194) = v115;
      *((_DWORD *)v114 + 1195) = 4;
      v116 = ~v115;
      if (v116 < *((unsigned int *)this + 1001))
      {
        v117 = *((_QWORD *)this + 499) + 24 * (int)v116;
        v118 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v117 = a2;
        *(_DWORD *)(v117 + 8) = v118;
        *(_BYTE *)(v117 + 17) = v25;
        *(_DWORD *)(v117 + 12) = 7;
        *(_BYTE *)(v117 + 16) = 0;
        v119 = v201;
        if (v203 != (_BYTE *)v201 && v201)
        {
          v201 = 0;
          LODWORD(v202) = 0;
          WTF::fastFree((unint64_t)v119, v106, v107, v108, v109, v110, v111, v112);
        }
        if (v204)
        {
          v120 = v205;
          if (v205 != -1)
          {
            if (v205 > 15)
              v120 = -1;
            --*(_DWORD *)(v204 + 12 * v120 + 4784);
          }
        }
        if (v206)
        {
          v121 = v207;
          if (v207 != -1)
          {
            if (v207 > 15)
              v121 = -1;
            --*(_DWORD *)(v206 + 12 * v121 + 4784);
          }
        }
        if (v208)
        {
          v122 = (char)v209;
          if ((char)v209 != -1)
          {
            if ((char)v209 > 15)
              v122 = -1;
            --*(_DWORD *)(v208 + 12 * v122 + 4784);
          }
        }
        return;
      }
      __break(0xC471u);
LABEL_163:
      JUMPOUT(0x197BDB280);
    }
  }
  v123 = *((_QWORD *)a2 + 3);
  v124 = v123 & 0xFF00FFFFFFFFFFFFLL;
  if ((v123 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_89;
  v125 = ~*(_DWORD *)((v123 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v125 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v125 + 12)
    || (v127 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v127 == -1))
  {
LABEL_89:
    v127 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v123, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v126, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v134 = *((unsigned int *)this + 1194);
  if ((_DWORD)v134 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v134, v128, v129, v130, v131, v132, v133);
  }
  v135 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v222 = (char *)v224;
  LODWORD(v223) = 1;
  if (v127 != 1)
  {
    v224[0] = v127 | 0x100;
    HIDWORD(v223) = 1;
    v159 = 1;
    while (1)
    {
      v160 = 0;
      v161 = 0;
      v162 = v222;
      v163 = v159;
      do
      {
        if ((v222[v160 + 1] & 0x40) != 0)
          goto LABEL_161;
        v161 |= 1 << v222[v160 + 1];
        v160 += 2;
      }
      while (2 * v159 != v160);
      v164 = 0;
      do
      {
        v165 = v222[v164] & 0x7F;
        if (v165 >= 0x40)
          goto LABEL_161;
        v161 &= ~(1 << v165);
        v164 += 2;
      }
      while (2 * v159 != v164);
      v166 = (uint8x8_t)vcnt_s8((int8x8_t)v161);
      v166.i16[0] = vaddlv_u8(v166);
      v167 = v166.i32[0];
      v168 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v161));
      v168.i16[0] = vaddlv_u8(v168);
      if (!(v168.i32[0] + v167))
      {
        v195 = v124;
        v178 = *v222;
        v179 = v222[1];
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *v222, v179, v129, v130, v131, v132, v133);
        memmove(v222, v222 + 2, 2 * HIDWORD(v223) - 2);
        v180 = HIDWORD(v223);
        v181 = (HIDWORD(v223) - 1);
        HIDWORD(v223) = v181;
        v182 = (unsigned __int8 *)v222;
        v183 = &v222[2 * v181];
        if (v180 == 1)
        {
          v184 = 0;
          v185 = 0;
          v186 = 0;
          v134 = (uint64_t)&v222[2 * v181];
        }
        else
        {
          v188 = 2 * v181;
          v189 = v222;
          while (*v189 != v179)
          {
            v189 += 2;
            v188 -= 2;
            if (!v188)
              goto LABEL_144;
          }
          *v189 = v178;
LABEL_144:
          v186 = 0;
          v190 = v182;
          v134 = (uint64_t)v183;
          v191 = v183;
          do
          {
            if (*v182 == v182[1])
            {
              v192 = (char *)v182;
              if (v191 != &v222[2 * HIDWORD(v223)])
              {
                if (v182 == (unsigned __int8 *)v134)
                {
                  v192 = v191;
                }
                else
                {
                  v193 = &v190[-v134];
                  memmove(v191, (const void *)v134, (size_t)&v190[-v134]);
                  v192 = (char *)&v193[(_QWORD)v191];
                }
              }
              v134 = (uint64_t)(v182 + 2);
              ++v186;
              v191 = v192;
            }
            v182 += 2;
            v190 += 2;
          }
          while (v182 < (unsigned __int8 *)v183);
          v182 = (unsigned __int8 *)v222;
          v184 = HIDWORD(v223);
          v185 = HIDWORD(v223);
          v183 = v191;
        }
        v187 = &v182[2 * v184];
        if ((unsigned __int8 *)v134 != v187)
        {
          memmove(v183, (const void *)v134, (size_t)&v187[-v134]);
          v185 = HIDWORD(v223);
        }
        v159 = v185 - v186;
        v124 = v195;
        goto LABEL_125;
      }
      v169 = 0;
      v170 = v159 <= 1uLL ? 1 : v159;
      v171 = 2 * v170;
      while (1)
      {
        v172 = v222[v169 + 1];
        if ((v172 & 0x7Fu) >= 0x40)
          goto LABEL_161;
        if (((v161 >> (v172 & 0x7F)) & 1) != 0)
          break;
        v169 += 2;
        if (v171 == v169)
          goto LABEL_126;
      }
      v173 = v222[v169];
      if (v173 != v172)
        break;
LABEL_124:
      memmove(&v162[v169], &v162[v169 + 2], 2 * v163 - v169 - 2);
      v159 = HIDWORD(v223) - 1;
LABEL_125:
      HIDWORD(v223) = v159;
LABEL_126:
      if (!v159)
      {
        v177 = (unint64_t)v222;
        v8 = a2;
        if (v224 != (_WORD *)v222 && v222)
        {
          v222 = 0;
          LODWORD(v223) = 0;
          WTF::fastFree(v177, (void *)v134, v128, v129, v130, v131, v132, v133);
        }
        goto LABEL_93;
      }
    }
    if ((char)v173 == 63)
    {
      if ((char)v172 != 31)
      {
        v175 = v172 & 0x1F | 0xD2800000;
        goto LABEL_121;
      }
    }
    else if (v172 != 31 && (char)v173 != 31)
    {
      v175 = v172 & 0xFFE0FFFF | ((v173 & 0x1F) << 16) | 0xAA0003E0;
LABEL_121:
      v176 = *((_DWORD *)this + 50);
      if (v176 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v134, v128, v129, v130, v131, v132, v133);
        v176 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v176) = v175;
      *((_DWORD *)this + 50) += 4;
      v162 = v222;
      v163 = HIDWORD(v223);
      goto LABEL_124;
    }
    v175 = (char)v172 | (32 * (char)v173) | 0x91000000;
    goto LABEL_121;
  }
LABEL_93:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v135, 0, v129, v130, v131, v132, v133);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationAllocateComplexPropertyStorageWithInitialCapacity, v136, v137, v138, v139, v140, v141, (int *)&v222);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v142, v143, v144, v145, v146, v147);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v148, v149, v150, v151, v152, v153);
  v154 = *((_DWORD *)v8 + 12);
  *((_DWORD *)this + 1194) = v154;
  *((_DWORD *)this + 1195) = 4;
  v155 = ~v154;
  if (v155 >= *((unsigned int *)this + 1001))
  {
LABEL_162:
    __break(0xC471u);
    goto LABEL_163;
  }
  v156 = *((_QWORD *)this + 499) + 24 * (int)v155;
  v157 = *((_DWORD *)v8 + 13);
  *(_QWORD *)v156 = v8;
  *(_DWORD *)(v156 + 8) = v157;
  *(_BYTE *)(v156 + 12) = 7;
  *(_DWORD *)(v156 + 13) = 0;
  *(_BYTE *)(v156 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v124)
  {
    if (v127 > 15)
      v158 = -1;
    else
      v158 = v127;
    --*((_DWORD *)this + 3 * v158 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::compileReallocatePropertyStorage(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x8_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  _BYTE *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  _BYTE *v55;
  WTF *v56;
  WTF *v57;
  unsigned int v58;
  int v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  int v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  WTF *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  unsigned int v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  WTF *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  char v149;
  JSC::DFG::Node *v150;
  uint64_t v151;
  WTF *v152;
  unsigned int v153;
  _BYTE v154[24];
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  _BYTE v158[24];
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  unsigned __int8 v164;
  WTF *v165;
  unsigned int v166;
  unsigned int v167;
  _BYTE v168[24];
  _BYTE *v169;
  unsigned int v170;
  unsigned int v171;
  _BYTE v172[24];
  _BYTE *v173;
  unsigned int v174;
  unsigned int v175;
  _BYTE v176[24];
  _BYTE *v177;
  unint64_t v178;
  _BYTE v179[32];

  v10 = **((_QWORD **)a2 + 9);
  v11 = *(unsigned __int16 *)(v10 + 24);
  if (v11 == 65534)
    goto LABEL_5;
  if (v11 == 0xFFFF)
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 64) + 84);
  if (v11 < 64)
  {
LABEL_5:
    v12 = 0;
  }
  else if ((v11 - 63) > 4)
  {
    v123 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
    v124 = v123 | (v123 >> 4) | ((v123 | (v123 >> 4)) >> 8);
    v125 = v124 | HIWORD(v124);
    v12 = v125 + 1;
    if (v125 > 0x1F5)
      goto LABEL_107;
  }
  else
  {
    v12 = 4;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 8 * v12 + 6736);
  if (v13 && (*(_BYTE *)(v10 + 8) & 0xE) == 0 && *(unsigned __int8 *)(v10 + 9) - 39 > 0xA)
  {
    v14 = *((_QWORD *)a2 + 4);
    v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v15 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
    }
    else
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
        v16 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
      else
        v16 = -1;
      v17 = 16 * v12;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v163, this, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v161, this, v18, v19, v20, v21, v22, v23);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v159, this, v24, v25, v26, v27, v28, v29);
      if (v16 == -1)
        v16 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v14, v30, v31, v32, v33, v34, v35);
      v151 = v164;
      v37 = (char)v164;
      v38 = v162;
      v156 = (WTF *)v158;
      v157 = 2;
      v177 = 0;
      v178 = v13;
      JSC::AssemblyHelpers::emitAllocate((uint64_t)this, v37, (uint64_t)&v177, v162, v160, (uint64_t)&v156, 1, v35, v36);
      JSC::MacroAssemblerARM64::add64((uint64_t)this, (16 * v12) | 8, v37, v37, v39, v40, v41, v42);
      v43 = HIDWORD(v157);
      v152 = (WTF *)v154;
      v153 = HIDWORD(v157);
      if (HIDWORD(v157) < 3)
      {
        v44 = v154;
      }
      else
      {
        if (HIDWORD(v157) >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDBC0CLL);
        }
        v44 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v157)));
        v152 = (WTF *)v44;
        v43 = HIDWORD(v157);
      }
      v149 = v16;
      if (v43)
      {
        v45 = v156;
        v46 = (WTF *)((char *)v156 + 12 * v43);
        do
        {
          *(_DWORD *)v44 = *(_DWORD *)v45;
          *(_QWORD *)(v44 + 4) = *(_QWORD *)((char *)v45 + 4);
          v45 = (WTF *)((char *)v45 + 12);
          v44 += 12;
        }
        while (v45 != v46);
      }
      v47 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
      v48 = v153;
      v165 = (WTF *)v168;
      v166 = 2;
      v167 = v153;
      v148 = v47;
      if (v153 < 3)
      {
        v49 = v168;
      }
      else
      {
        if (v153 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDBC14);
        }
        v49 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v153));
        v166 = 12 * v153 / 0xC;
        v165 = (WTF *)v49;
        v48 = v153;
      }
      v150 = a2;
      if (v48)
      {
        v50 = v152;
        v51 = (WTF *)((char *)v152 + 12 * v48);
        do
        {
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *(_QWORD *)(v49 + 4) = *(_QWORD *)((char *)v50 + 4);
          v50 = (WTF *)((char *)v50 + 12);
          v49 += 12;
        }
        while (v50 != v51);
      }
      v52 = WTF::fastMalloc((WTF *)0xB0);
      v53 = v167;
      v169 = v172;
      v170 = 2;
      v171 = v167;
      if (v167 < 3)
      {
        v55 = v172;
      }
      else
      {
        if (v167 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDBC1CLL);
        }
        v54 = 12 * v167;
        v55 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v167));
        v170 = (v54 & 0xFFFFFFFC) / 0xC;
        v169 = v55;
        v53 = v167;
      }
      if (v53)
      {
        v56 = v165;
        v57 = (WTF *)((char *)v165 + 12 * v53);
        do
        {
          *(_DWORD *)v55 = *(_DWORD *)v56;
          *(_QWORD *)(v55 + 4) = *(_QWORD *)((char *)v56 + 4);
          v56 = (WTF *)((char *)v56 + 12);
          v55 += 12;
        }
        while (v56 != v57);
      }
      v58 = v171;
      v173 = v176;
      v174 = 2;
      v175 = v171;
      if (v171 < 3)
      {
        v60 = v176;
      }
      else
      {
        if (v171 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197BDBC24);
        }
        v59 = 12 * v171;
        v60 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v171));
        v174 = (v59 & 0xFFFFFFFC) / 0xC;
        v173 = v60;
        v58 = v171;
      }
      if (v58)
      {
        v61 = v169;
        v62 = &v169[12 * v58];
        do
        {
          *(_DWORD *)v60 = *(_DWORD *)v61;
          *(_QWORD *)(v60 + 4) = *(_QWORD *)(v61 + 4);
          v61 += 12;
          v60 += 12;
        }
        while (v61 != v62);
      }
      v63 = v175;
      v177 = v179;
      LODWORD(v178) = 2;
      HIDWORD(v178) = v175;
      if (v175 < 3)
      {
        v65 = v179;
        goto LABEL_46;
      }
      if (v175 < 0x15555556)
      {
        v64 = 12 * v175;
        v65 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v175));
        LODWORD(v178) = (v64 & 0xFFFFFFFC) / 0xC;
        v177 = v65;
        v63 = v175;
LABEL_46:
        if (v63)
        {
          v66 = v173;
          v67 = &v173[12 * v63];
          do
          {
            *(_DWORD *)v65 = *(_DWORD *)v66;
            *(_QWORD *)(v65 + 4) = *(_QWORD *)(v66 + 4);
            v66 += 12;
            v65 += 12;
          }
          while (v66 != v67);
        }
        JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v52, (uint64_t *)&v177, this);
        v75 = (unint64_t)v177;
        if (v179 != v177 && v177 != 0)
        {
          v177 = 0;
          LODWORD(v178) = 0;
          WTF::fastFree(v75, v68, v69, v70, v71, v72, v73, v74);
        }
        *(_QWORD *)v52 = off_1E3573C50;
        *(_QWORD *)(v52 + 92) = 0xFFFFFFFFLL;
        *(_WORD *)(v52 + 100) = 0;
        *(_BYTE *)(v52 + 102) = v37;
        *(_QWORD *)(v52 + 104) = v52 + 120;
        *(_QWORD *)(v52 + 112) = 2;
        JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v52 + 104, v37, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v73, v74);
        v84 = (unint64_t)v173;
        if (v176 != v173 && v173)
        {
          v173 = 0;
          v174 = 0;
          WTF::fastFree(v84, v77, v78, v79, v80, v81, v82, v83);
        }
        *(_QWORD *)v52 = &off_1E3573C20;
        *(_QWORD *)(v52 + 152) = operationAllocateSimplePropertyStorage;
        *(_QWORD *)(v52 + 160) = v148;
        *(_QWORD *)(v52 + 168) = 2 * v12;
        v155 = v52;
        v85 = (unint64_t)v169;
        if (v172 != v169 && v169)
        {
          v169 = 0;
          v170 = 0;
          WTF::fastFree(v85, v77, v78, v79, v80, v81, v82, v83);
        }
        v86 = v165;
        if (v168 != (_BYTE *)v165 && v165)
        {
          v165 = 0;
          v166 = 0;
          WTF::fastFree((unint64_t)v86, v77, v78, v79, v80, v81, v82, v83);
        }
        v87 = (_QWORD *)((char *)this + 5656);
        v88 = *((unsigned int *)this + 1417);
        if ((_DWORD)v88 == *((_DWORD *)this + 1416))
        {
          v90 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, v88 + 1, (unint64_t)&v155);
          v88 = *((unsigned int *)this + 1417);
          v89 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v88);
          v52 = *v90;
        }
        else
        {
          v89 = (uint64_t *)(*v87 + 8 * v88);
          v90 = &v155;
        }
        *v90 = 0;
        *v89 = v52;
        *((_DWORD *)this + 1417) = v88 + 1;
        v91 = v155;
        v155 = 0;
        if (v91)
          (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
        v92 = 8 * v12;
        if (v154 != (_BYTE *)v152 && v152)
          WTF::fastFree((unint64_t)v152, v77, v78, v79, v80, v81, v82, v83);
        if (v92 < v17)
        {
          v93 = v151 - (v12 << 35) - 0x1000000000;
          v94 = 8 * v12;
          do
          {
            v94 += 8;
            JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v93, v79, v80, v81, v82, v83);
            v93 -= 0x800000000;
          }
          while (v94 < v17);
        }
        if (v12)
        {
          v95 = 0;
          v96 = v151 | 0xFFFFFFF000000000;
          v97 = v149 | 0xFFFFFFF000000000;
          v98 = v38;
          do
          {
            v95 += 8;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, v97, v98, v79, v80, v81, v82, v83);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v98, v96, v99, v100, v101, v102, v103);
            v96 -= 0x800000000;
            v97 -= 0x800000000;
          }
          while (v95 < v92);
        }
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v150, v78, v79, v80, v81, v82, v83);
        v111 = (char *)this + 4776;
        v112 = *((_DWORD *)v150 + 12);
        if ((int)v37 > 15)
          v113 = -1;
        else
          v113 = v37;
        v114 = &v111[12 * v113];
        *(_DWORD *)v114 = v112;
        *((_DWORD *)v114 + 1) = 4;
        v115 = ~v112;
        if (v115 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BDBC04);
        }
        v116 = *((_QWORD *)this + 499) + 24 * (int)v115;
        v117 = *((_DWORD *)v150 + 13);
        *(_QWORD *)v116 = v150;
        *(_DWORD *)(v116 + 8) = v117;
        *(_BYTE *)(v116 + 17) = v37;
        *(_DWORD *)(v116 + 12) = 7;
        *(_BYTE *)(v116 + 16) = 0;
        v118 = v156;
        if (v158 != (_BYTE *)v156 && v156)
        {
          v156 = 0;
          LODWORD(v157) = 0;
          WTF::fastFree((unint64_t)v118, v104, v105, v106, v107, v108, v109, v110);
        }
        if (v159)
        {
          v119 = v160;
          if (v160 != -1)
          {
            if (v160 > 15)
              v119 = -1;
            --*(_DWORD *)(v159 + 12 * v119 + 4784);
          }
        }
        if (v161)
        {
          v120 = v162;
          if (v162 != -1)
          {
            if (v162 > 15)
              v120 = -1;
            --*(_DWORD *)(v161 + 12 * v120 + 4784);
          }
        }
        if (v163)
        {
          v121 = (char)v164;
          if ((char)v164 != -1)
          {
            if ((char)v164 > 15)
              v121 = -1;
            --*(_DWORD *)(v163 + 12 * v121 + 4784);
          }
        }
        if (v149 != -1)
        {
          if (v149 > 15)
            v122 = -1;
          else
            v122 = v149;
          --*(_DWORD *)&v111[12 * v122 + 8];
        }
        return;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197BDBBFCLL);
  }
LABEL_107:
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v177, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  v133 = v179[0];
  if (v179[0] == 255)
  {
    v133 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v177, v178, v127, v128, v129, v130, v131, v132);
    v179[0] = v133;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v126, v127, v128, v129, v130, v131, v132);
  ++*((_DWORD *)this + 1196);
  v140 = *((unsigned int *)this + 1194);
  if ((_DWORD)v140 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v140, v134, v135, v136, v137, v138, v139);
  }
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSObject *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,unsigned long>((int *)&v173, (unsigned __int8 *)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v133, 2 * v12, v137, v138, v139);
  JSC::DFG::SpeculativeJIT::storageResult((uint64_t)this, a2, v141, v142, v143, v144, v145, v146);
  --*((_DWORD *)this + 1196);
  if ((v178 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v147 = v179[0];
    if (v179[0] > 15)
      v147 = -1;
    --*(_DWORD *)&v177[12 * v147 + 4784];
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,JSC::JSObject *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,unsigned long>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int *v11;
  __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint8x8_t v19;
  __int32 v20;
  uint8x8_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 *v62;
  JSC::AssemblerBuffer *v63;
  unsigned int v64;
  unsigned int v65;
  __int16 v66;
  _BYTE v67[6];

  v10 = (uint64_t)a2;
  v11 = a1;
  v12 = &v66;
  if ((_DWORD)a4 != 1)
  {
    v66 = a4 | 0x100;
    v64 = 1;
    v63 = (JSC::AssemblerBuffer *)(a2 + 56);
    v13 = 1;
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = v13;
      do
      {
        if ((v67[v14 - 1] & 0x40) != 0)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
        v15 |= 1 << v67[v14 - 1];
        v14 += 2;
      }
      while (2 * v13 != v14);
      v17 = 0;
      do
      {
        v18 = v67[v17 - 2] & 0x7F;
        if (v18 >= 0x40)
          goto LABEL_55;
        v15 &= ~(1 << v18);
        v17 += 2;
      }
      while (2 * v13 != v17);
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
      v19.i16[0] = vaddlv_u8(v19);
      v20 = v19.i32[0];
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v15));
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.i32[0] + v20)
      {
        v22 = 0;
        if (v13 <= 1)
          v23 = 1;
        else
          v23 = v13;
        v24 = 2 * v23;
        while (1)
        {
          v25 = v67[v22 - 1];
          if ((v25 & 0x7Fu) >= 0x40)
            goto LABEL_55;
          if (((v15 >> (v25 & 0x7F)) & 1) != 0)
            break;
          v22 += 2;
          if (v24 == v22)
            goto LABEL_33;
        }
        v26 = v67[v22 - 2];
        if (v26 != v25)
        {
          if ((char)v26 == 63)
          {
            if (v25 == 31)
              goto LABEL_27;
            v28 = v25 & 0x1F | 0xD2800000;
          }
          else
          {
            v27 = (char)v25 == 31 || (char)v26 == 31;
            if (!v27)
            {
              v28 = v25 & 0xFFE0FFFF | ((v26 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v28 = (char)v25 | (32 * (char)v26) | 0x91000000;
          }
LABEL_28:
          v29 = *(_DWORD *)(v10 + 200);
          if (v29 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v63, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v29 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v29) = v28;
          *(_DWORD *)(v10 + 200) += 4;
          v16 = v64;
        }
        a1 = (int *)memmove(&v67[v22 - 2], &v67[v22], 2 * v16 - v22 - 2);
        v13 = v64 - 1;
        goto LABEL_32;
      }
      v62 = v12;
      v30 = HIBYTE(v66);
      v31 = v66;
      JSC::MacroAssemblerARM64::swap(v10, (char)v66, SHIBYTE(v66), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v66, v67, 2 * v64 - 2);
      v32 = v64 - 1;
      v27 = v64 == 1;
      v65 = v32;
      v33 = (char *)&v66;
      v34 = &v67[2 * v32 - 2];
      if (v27)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        a2 = &v67[2 * v32 - 2];
      }
      else
      {
        v39 = 2 * v32;
        v40 = &v66;
        while (*(unsigned __int8 *)v40 != v30)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v31;
LABEL_43:
        v37 = 0;
        v41 = (char *)&v66;
        a2 = (unsigned __int8 *)v34;
        v42 = v34;
        do
        {
          if (*v33 == v33[1])
          {
            v43 = v33;
            if (v42 != &v67[2 * v65 - 2])
            {
              if (v33 == (char *)a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - (char *)a2;
                a1 = (int *)memmove(v42, a2, v41 - (char *)a2);
                v43 = &v42[v44];
              }
            }
            a2 = (unsigned __int8 *)(v33 + 2);
            ++v37;
            v42 = v43;
          }
          v33 += 2;
          v41 += 2;
        }
        while (v33 < v34);
        v35 = v65;
        v36 = v65;
        v34 = v42;
      }
      v38 = &v67[2 * v35 - 2];
      if (a2 != v38)
      {
        a1 = (int *)memmove(v34, a2, v38 - a2);
        v36 = v65;
      }
      v13 = v36 - v37;
      v12 = v62;
LABEL_32:
      v64 = v13;
LABEL_33:
      ;
    }
    while (v13);
    a1 = (int *)&v66;
    if (v12 == &v66)
      goto LABEL_54;
LABEL_56:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a5, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a3, 0, v45, v46, v47, v48, v49);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationAllocateComplexPropertyStorage, v50, v51, v52, v53, v54, v55, v11);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v10, 1, v56, v57, v58, v59, v60, v61);
}

uint64_t JSC::DFG::SpeculativeJIT::compileNukeStructureAndSetButterfly(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_23;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197BDC190);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_23:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
    goto LABEL_25;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
    v15 = -1;
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillStorage((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::nukeStructureAndStoreButterfly((uint64_t)this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v15, v12, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v16, v17, v18, v19, v20);
  if (v15 != -1)
  {
    if (v15 > 15)
      v22 = -1;
    else
      v22 = v15;
    --*((_DWORD *)this + 3 * v22 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v23 = -1;
    else
      v23 = v12;
    --*((_DWORD *)this + 3 * v23 + 1196);
  }
  return result;
}

unsigned int *JSC::AssemblyHelpers::nukeStructureAndStoreButterfly(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53[2];
  char v54;
  __int16 v55;
  char v56;
  unsigned int v57[3];

  v8 = a4;
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded((JSC::AssemblyHelpers *)a1, a2, a4, a5, a6, a7, a8, (uint64_t)v57);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BDC34CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, v8, *(char *)(a1 + 272), v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)1, 16, 16);
  JSC::MacroAssemblerARM64::store32(a1, 16, v8, v16, v17, v18, v19, v20);
  v28 = *(_DWORD *)(a1 + 200);
  if (v28 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -721208641;
  *(_DWORD *)(a1 + 200) += 4;
  v29 = v8 | 0x800000000;
  JSC::MacroAssemblerARM64::store64(a1, a3, v29, v23, v24, v25, v26, v27);
  v37 = *(_DWORD *)(a1 + 200);
  if (v37 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v30, v31, v32, v33, v34, v35, v36);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -721208641;
  v38 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v38; v38 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v38)
  {
    if ((v38 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v30, v31, v32, v33, v34, v35, v36);
      v38 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = -721215457;
    v38 = *(_DWORD *)(a1 + 200) + 4;
  }
  v39 = v38;
  if ((v38 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v30, v31, v32, v33, v34, v35, v36);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v40 = 69;
  else
    v40 = 65;
  v53[0] = v38;
  v53[1] = 0;
  v54 = v40;
  v55 = 15;
  v56 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v57, a1, v31, v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::store64(a1, a3, v29, v41, v42, v43, v44, v45);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v53, a1, v46, v47, v48, v49, v50, v51);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetButterfly(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *result;
  char *v22;
  int v23;
  char v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_31;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_28:
    v12 = -1;
  v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v13 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BDC5DCLL);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 8) == 1)
  {
    if (v12 == -1)
      v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v12 > 15)
      v30 = -1;
    else
      v30 = v12;
    ++*((_DWORD *)this + 3 * v30 + 1196);
    v14 = v12;
  }
  else
  {
    v14 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x800000000, v14, a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v15, v16, v17, v18, v19, v20);
  v22 = (char *)this + 4776;
  v23 = *((_DWORD *)a2 + 12);
  if (v14 > 15)
    v24 = -1;
  else
    v24 = v14;
  v25 = &v22[12 * v24];
  *(_DWORD *)v25 = v23;
  *((_DWORD *)v25 + 1) = 4;
  v26 = ~v23;
  if (v26 >= *((unsigned int *)this + 1001))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197BDC5D4);
  }
  v27 = *((_QWORD *)this + 499) + 24 * (int)v26;
  v28 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v27 = a2;
  *(_DWORD *)(v27 + 8) = v28;
  *(_BYTE *)(v27 + 17) = v14;
  *(_DWORD *)(v27 + 12) = 7;
  *(_BYTE *)(v27 + 16) = 0;
  if (v14 != -1)
    --*(_DWORD *)&v22[12 * v24 + 8];
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v29 = -1;
    else
      v29 = v12;
    --*(_DWORD *)&v22[12 * v29 + 8];
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::DFG::Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint8x8_t v52;
  __int32 v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v101;
  char v102;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  _BYTE *v107;
  int v108;
  unsigned __int8 *v109;
  char *v110;
  unsigned __int8 *v111;
  uint64_t v112;
  int v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  char *v121;
  char *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  void *__dst;
  _QWORD *v128;
  _QWORD v129[4];
  int v130;
  _QWORD v131[3];
  _QWORD v132[3];
  _QWORD v133[3];
  _QWORD v134[3];
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  _BYTE v140[96];
  uint64_t v141;

  v141 = *((_QWORD *)a2 + 9);
  v10 = v140;
  v138 = v140;
  v139 = 3;
  v135 = (unsigned __int8 *)&v137;
  v136 = 3;
  v134[0] = this;
  v134[1] = &v135;
  v134[2] = &v138;
  v133[0] = this;
  v133[1] = &v135;
  v133[2] = &v138;
  v132[0] = this;
  v132[1] = &v135;
  v132[2] = &v138;
  v131[0] = this;
  v131[1] = &v135;
  v131[2] = &v138;
  v130 = 0;
  v11 = *((_QWORD *)this + 495);
  __dst = &v130;
  v128 = v134;
  v129[0] = &v141;
  v129[1] = v133;
  v129[2] = v132;
  v129[3] = v131;
  v12 = *((_QWORD *)a2 + 3);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v15 = *((_QWORD *)a2 + 4);
    if ((int)v15 + (int)v12 > v12)
    {
      v16 = v12;
      do
      {
        if (v16 >= *(unsigned int *)(v11 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x197BDCD94);
        }
        if ((*(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v16) & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::$_4::operator()((int **)&__dst, *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v16), a3, a4, a5, a6, a7, a8);
          v12 = *((_QWORD *)a2 + 3);
          v15 = *((_QWORD *)a2 + 4);
        }
        ++v16;
      }
      while (v16 < (v12 + v15));
    }
  }
  else if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::$_4::operator()((int **)&__dst, v12, a3, a4, a5, a6, a7, a8);
    v13 = *((_QWORD *)a2 + 4);
    if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::$_4::operator()((int **)&__dst, v13, a3, a4, a5, a6, a7, a8);
      v14 = *((_QWORD *)a2 + 5);
      if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
        JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::$_4::operator()((int **)&__dst, v14, a3, a4, a5, a6, a7, a8);
    }
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v125, this, a3, a4, a5, a6, a7, a8);
  v17 = v126;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  v31 = *(_QWORD *)v141;
  v32 = *(_DWORD *)(v141 + 40);
  if (v32 != 1)
  {
    if (v32 == 2)
    {
      v118 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
      if (!HIDWORD(v136))
        goto LABEL_122;
      if (HIDWORD(v136) == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197BDCDBCLL);
      }
      if (HIDWORD(v136) > 2)
      {
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)this, v31, (char)v17, v118, v119, (char)*v135, (char)v135[1], v135[2]);
        goto LABEL_61;
      }
    }
    else if (!v32)
    {
      v115 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
      if (HIDWORD(v136))
      {
        JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)this, v31, (char)v17, v115, v116, (char)*v135, v117);
        goto LABEL_61;
      }
      __break(0xC471u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(0xC471u);
      JUMPOUT(0x197BDCDB4);
    }
    __break(0xC471u);
    JUMPOUT(0x197BDCC84);
  }
  v33 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v25, v26, v27, v28, v29, v30);
  if (HIDWORD(v136) == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197BDCD9CLL);
  }
  if (!HIDWORD(v136))
  {
    __break(0xC471u);
    JUMPOUT(0x197BDCDA4);
  }
  v41 = v33;
  v42 = (uint64_t)v34;
  v43 = *v135;
  v44 = v135[1];
  __dst = v129;
  LODWORD(v128) = 2;
  if (v43 == 1)
  {
    if (v44 == 2)
      goto LABEL_52;
    v124 = v31;
    v45 = 0;
  }
  else
  {
    v124 = v31;
    LOWORD(v129[0]) = v43 | 0x100;
    v45 = 1;
    HIDWORD(v128) = 1;
    if (v44 == 2)
      goto LABEL_21;
  }
  *((_WORD *)v129 + v45++) = v44 | 0x200;
  HIDWORD(v128) = v45;
  do
  {
LABEL_21:
    v46 = 0;
    v47 = 0;
    v48 = (char *)__dst;
    v49 = v45;
    do
    {
      if ((*((_BYTE *)__dst + v46 + 1) & 0x40) != 0)
        goto LABEL_121;
      v47 |= 1 << *((_BYTE *)__dst + v46 + 1);
      v46 += 2;
    }
    while (2 * v45 != v46);
    v50 = 0;
    do
    {
      v51 = *((_BYTE *)__dst + v50) & 0x7F;
      if (v51 >= 0x40)
        goto LABEL_121;
      v47 &= ~(1 << v51);
      v50 += 2;
    }
    while (2 * v45 != v50);
    v52 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
    v52.i16[0] = vaddlv_u8(v52);
    v53 = v52.i32[0];
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v47));
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.i32[0] + v53)
    {
      v55 = 0;
      if (v45 <= 1uLL)
        v56 = 1;
      else
        v56 = v45;
      v57 = 2 * v56;
      while (1)
      {
        v58 = *((unsigned __int8 *)__dst + v55 + 1);
        if ((v58 & 0x7Fu) >= 0x40)
          goto LABEL_121;
        if (((v47 >> (v58 & 0x7F)) & 1) != 0)
          break;
        v55 += 2;
        if (v57 == v55)
          goto LABEL_46;
      }
      v59 = *((unsigned __int8 *)__dst + v55);
      if (v59 == v58)
        goto LABEL_44;
      v60 = (char)v59;
      if ((char)v59 == 63)
      {
        v61 = *((_DWORD *)this + 50);
        v62 = *((_DWORD *)this + 48);
        if ((char)v58 != 31)
        {
          v64 = v58 & 0x1F | 0xD2800000;
          goto LABEL_41;
        }
      }
      else
      {
        v61 = *((_DWORD *)this + 50);
        v62 = *((_DWORD *)this + 48);
        v63 = v58 == 31 || v60 == 31;
        if (!v63)
        {
          v64 = v58 & 0xFFE0FFFF | ((v60 & 0x1F) << 16) | 0xAA0003E0;
LABEL_41:
          if (v61 + 4 > v62)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v34, v35, v36, v37, v38, v39, v40);
            v61 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v61) = v64;
          *((_DWORD *)this + 50) += 4;
          v48 = (char *)__dst;
          v49 = HIDWORD(v128);
LABEL_44:
          memmove(&v48[v55], &v48[v55 + 2], 2 * v49 - v55 - 2);
          v45 = HIDWORD(v128) - 1;
          goto LABEL_45;
        }
      }
      v64 = (char)v58 | (32 * v60) | 0x91000000;
      goto LABEL_41;
    }
    v123 = v10;
    v101 = *(_BYTE *)__dst;
    v102 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v102, v36, v37, v38, v39, v40);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v128) - 2);
    v103 = (HIDWORD(v128) - 1);
    v63 = HIDWORD(v128) == 1;
    HIDWORD(v128) = v103;
    v104 = (unsigned __int8 *)__dst;
    v105 = (unsigned __int8 *)__dst + 2 * v103;
    if (v63)
    {
      v112 = 0;
      v113 = 0;
      v108 = 0;
      v34 = v105;
    }
    else
    {
      v106 = 2 * v103;
      v107 = __dst;
      while (*v107 != v102)
      {
        v107 += 2;
        v106 -= 2;
        if (!v106)
          goto LABEL_84;
      }
      *v107 = v101;
LABEL_84:
      v108 = 0;
      v109 = v104;
      v34 = v105;
      v110 = (char *)v105;
      do
      {
        if (*v104 == v104[1])
        {
          v111 = v104;
          if (v110 != (char *)__dst + 2 * HIDWORD(v128))
          {
            v122 = (char *)v105;
            if (v104 == v34)
            {
              v111 = (unsigned __int8 *)v110;
            }
            else
            {
              v120 = v109 - v34;
              v121 = v110;
              memmove(v110, v34, v109 - v34);
              v111 = (unsigned __int8 *)&v121[v120];
            }
            v105 = (unsigned __int8 *)v122;
          }
          v34 = v104 + 2;
          ++v108;
          v110 = (char *)v111;
        }
        v104 += 2;
        v109 += 2;
      }
      while (v104 < v105);
      v104 = (unsigned __int8 *)__dst;
      v112 = HIDWORD(v128);
      v113 = HIDWORD(v128);
      v105 = (unsigned __int8 *)v110;
    }
    v114 = &v104[2 * v112];
    if (v34 != v114)
    {
      memmove(v105, v34, v114 - v34);
      v113 = HIDWORD(v128);
    }
    v45 = v113 - v108;
    v10 = v123;
LABEL_45:
    HIDWORD(v128) = v45;
LABEL_46:
    ;
  }
  while (v45);
  v65 = __dst;
  v31 = v124;
  if (v129 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v128) = 0;
    WTF::fastFree((unint64_t)v65, v34, v35, v36, v37, v38, v39, v40);
  }
LABEL_52:
  if ((_DWORD)v41 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v42, 0, v36, v37, v38, v39, v40);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v41 << 35) + 0x380000001ALL, 0, v36, v37, v38, v39, v40);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, v31, v66, v67, v68, v69, v70, v71, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v72, v73, v74, v75, v76, v77);
  if (v17)
  {
    if (v17 == 31)
    {
      v85 = -1862270945;
    }
    else if (v17 == 255)
    {
      v85 = -1442774017;
    }
    else
    {
      v85 = v17 | 0xAA0003E0;
    }
    v87 = (unsigned int *)((char *)this + 200);
    v86 = *((_DWORD *)this + 50);
    if (v86 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v78, v79, v80, v81, v82, v83, v84);
      v86 = *v87;
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v86) = v85;
    *v87 += 4;
  }
LABEL_61:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v17, (uint64_t)a2, 16, 0, v82, v83, v84);
  if (v125)
  {
    v95 = (char)v126;
    if ((char)v126 != -1)
    {
      if ((char)v126 > 15)
        v95 = -1;
      --*(_DWORD *)(v125 + 12 * v95 + 4784);
    }
  }
  v96 = (unint64_t)v135;
  if (&v137 != (uint64_t *)v135 && v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree(v96, v88, v89, v90, v91, v92, v93, v94);
  }
  v97 = (unint64_t)v138;
  if (HIDWORD(v139))
  {
    v98 = 32 * HIDWORD(v139);
    do
    {
      v99 = *(unsigned int *)(v97 + 24);
      if ((_DWORD)v99 != -1)
        ((void (*)(void **, unint64_t))off_1E3573C70[v99])(&__dst, v97);
      *(_DWORD *)(v97 + 24) = -1;
      v97 += 32;
      v98 -= 32;
    }
    while (v98);
    v97 = (unint64_t)v138;
  }
  if (v10 != (_BYTE *)v97 && v97 != 0)
  {
    v138 = 0;
    LODWORD(v139) = 0;
    WTF::fastFree(v97, v88, v89, v90, v91, v92, v93, v94);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int64_t v56;
  unsigned __int8 *v57;
  char v58;
  int v59;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v10 = (JSC::AssemblerBuffer *)a4;
  v11 = a3;
  v12 = (uint64_t)a2;
  if ((_DWORD)a7 != 1)
  {
    v64 = a7 | 0x100;
    v62 = 1;
    v61 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v65[v15 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v16 |= 1 << v65[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v65[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_63;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v65[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v65[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v61, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v62;
        }
        memmove(&v65[v23 - 2], &v65[v23], 2 * v17 - v23 - 2);
        v14 = v62 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v64);
      v58 = v64;
      JSC::MacroAssemblerARM64::swap(v12, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
      memmove(&v64, v65, 2 * v62 - 2);
      v32 = v62 - 1;
      v28 = v62 == 1;
      v63 = v32;
      v33 = (unsigned __int8 *)&v64;
      __src = &v65[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v59 = 0;
        a2 = &v65[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v64;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v58;
LABEL_43:
        v59 = 0;
        v39 = (char *)&v64;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v65[2 * v63 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v56 = v39 - (char *)a2;
                v57 = v40;
                memmove(v40, a2, v39 - (char *)a2);
                v41 = &v57[v56];
              }
            }
            a2 = v33 + 2;
            ++v59;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v63;
        v35 = v63;
        __src = v40;
      }
      v36 = &v65[2 * v34 - 2];
      if (a2 != v36)
      {
        memmove(__src, a2, v36 - a2);
        v35 = v63;
      }
      v14 = v35 - v59;
LABEL_32:
      v62 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a5 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, v11, v42, v43, v44, v45, v46, v47, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v48, v49, v50, v51, v52, v53);
  if ((_DWORD)v10)
  {
    if ((_DWORD)v10 == 31)
    {
      LODWORD(v11) = -1862270945;
    }
    else if ((_DWORD)v10 == -1)
    {
      LODWORD(v11) = -1442774017;
    }
    else
    {
      LODWORD(v11) = v10 & 0x1F | 0xAA0003E0;
    }
    v55 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v54 = v55;
    v10 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v55 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v54 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v10 + v54) = v11;
    *(_DWORD *)v12 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned __int8 *v9;
  JSC::AssemblerBuffer *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  JSC::AssemblerBuffer *v65;
  unsigned int v66;
  unsigned int v67;
  __int16 v68;
  _BYTE v69[6];

  v12 = (JSC::AssemblerBuffer *)a4;
  v13 = a3;
  v14 = (uint64_t)a2;
  v66 = 0;
  if ((_DWORD)a7 == 1)
  {
    v16 = 0;
  }
  else
  {
    v68 = a7 | 0x100;
    v16 = 1;
    v66 = 1;
  }
  if ((_DWORD)a8 != 2)
  {
    *(_WORD *)&v69[2 * v16++ - 2] = a8 | 0x200;
    v66 = v16;
  }
  if (a9 == 3)
  {
    if (!v16)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v69[2 * v16++ - 2] = a9 | 0x300;
    v66 = v16;
  }
  v65 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v17 = 0;
    v18 = 0;
    v19 = v16;
    do
    {
      if ((v69[v17 - 1] & 0x40) != 0)
      {
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      v18 |= 1 << v69[v17 - 1];
      v17 += 2;
    }
    while (2 * v16 != v17);
    v20 = 0;
    do
    {
      v21 = v69[v20 - 2] & 0x7F;
      if (v21 >= 0x40)
        goto LABEL_72;
      v18 &= ~(1 << v21);
      v20 += 2;
    }
    while (2 * v16 != v20);
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
    v22.i16[0] = vaddlv_u8(v22);
    v23 = v22.i32[0];
    v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v18));
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.i32[0] + v23)
    {
      v9 = 0;
      if (v16 <= 1)
        v25 = 1;
      else
        v25 = v16;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v69[(_QWORD)v9 - 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_72;
        if (((v18 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v9 += 2;
        if ((unsigned __int8 *)v26 == v9)
          goto LABEL_58;
      }
      v28 = v69[(_QWORD)v9 - 2];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v14 + 200);
          v31 = *(_DWORD *)(v14 + 192);
          if (v27 == 31)
            goto LABEL_52;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v14 + 200);
          v31 = *(_DWORD *)(v14 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_53:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v65, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v30 = *(_DWORD *)(v14 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v14 + 56) + v30) = v33;
        *(_DWORD *)(v14 + 200) += 4;
        v19 = v66;
      }
      memmove(&v69[(_QWORD)v9 - 2], &v69[(_QWORD)v9], 2 * v19 - (_QWORD)v9 - 2);
      v16 = v66 - 1;
      goto LABEL_57;
    }
    v64 = v13;
    v34 = HIBYTE(v68);
    v35 = v68;
    JSC::MacroAssemblerARM64::swap(v14, (char)v68, SHIBYTE(v68), a4, a5, a6, a7, a8);
    memmove(&v68, v69, 2 * v66 - 2);
    v36 = v66 - 1;
    v32 = v66 == 1;
    v67 = v36;
    v9 = (unsigned __int8 *)&v68;
    v37 = &v69[2 * v36 - 2];
    if (v32)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = v37;
    }
    else
    {
      v38 = 2 * v36;
      v39 = &v68;
      while (*(unsigned __int8 *)v39 != v34)
      {
        ++v39;
        v38 -= 2;
        if (!v38)
          goto LABEL_37;
      }
      *(_BYTE *)v39 = v35;
LABEL_37:
      v40 = 0;
      v41 = (char *)&v68;
      a2 = v37;
      v42 = v37;
      do
      {
        if (*v9 == v9[1])
        {
          v43 = v9;
          if (v42 != &v69[2 * v67 - 2])
          {
            v63 = v37;
            if (v9 == a2)
            {
              v43 = v42;
            }
            else
            {
              v61 = v41 - (char *)a2;
              v62 = v42;
              memmove(v42, a2, v41 - (char *)a2);
              v43 = &v62[v61];
            }
            v37 = v63;
          }
          a2 = v9 + 2;
          ++v40;
          v42 = v43;
        }
        v9 += 2;
        v41 += 2;
      }
      while (v9 < v37);
      v9 = (unsigned __int8 *)&v68;
      v44 = v67;
      v45 = v67;
      v37 = v42;
    }
    v46 = &v69[2 * v44 - 2];
    v13 = v64;
    if (a2 != v46)
    {
      memmove(v37, a2, v46 - a2);
      v45 = v67;
    }
    v16 = v45 - v40;
LABEL_57:
    v66 = v16;
LABEL_58:
    ;
  }
  while (v16);
LABEL_62:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v14, a6, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v14, (a5 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v14, v13, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v14, 1, v53, v54, v55, v56, v57, v58);
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 31)
    {
      LODWORD(v9) = -1862270945;
    }
    else if ((_DWORD)v12 == -1)
    {
      LODWORD(v9) = -1442774017;
    }
    else
    {
      LODWORD(v9) = v12 | 0xAA0003E0;
    }
    v60 = *(_DWORD *)(v14 + 200);
    v14 += 200;
    v59 = v60;
    v12 = (JSC::AssemblerBuffer *)(v14 - 144);
    if (v60 + 4 > *(_DWORD *)(v14 - 8))
    {
LABEL_73:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v59 = *(_DWORD *)v14;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v59) = (_DWORD)v9;
    *(_DWORD *)v14 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compileCallDOMGetter(uint64_t **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  JSC::DFG::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _OWORD *v104;
  void *v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  void *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  void *v136;
  JSC::DFG::SpeculativeJIT *v137;
  void *v138;
  WTF *v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF *v155;
  BOOL v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF *v167;
  WTF *v168;
  WTF *v169;
  WTF *v170;
  WTF *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  int v175;
  char v176;
  unsigned int v177;
  unsigned int v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint8x8_t v189;
  __int32 v190;
  uint8x8_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  WTF **v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v202;
  unsigned int v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int *v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  __int128 *v230;
  __int128 v231;
  char v232;
  char v233;
  uint64_t v234;
  unsigned __int8 *v235;
  char *v236;
  uint64_t v237;
  int v238;
  char *v239;
  uint64_t v240;
  _BYTE *v241;
  unsigned __int8 *v242;
  char *v243;
  unsigned __int8 *v244;
  int64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF **v249;
  int v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  WTF *v256;
  int v257;
  uint64_t v258;
  void *__dst[2];
  WTF *v260;
  uint64_t v261;
  WTF *v262;
  uint64_t v263;
  WTF *v264;
  uint64_t v265;
  JSC::DFG::SpeculativeJIT *v266;
  WTF *v267;
  uint64_t v268;
  WTF *v269;
  uint64_t v270;
  uint64_t v271;
  unsigned __int8 v272;
  _OWORD *v273;
  uint64_t v274;
  WTF *v275;
  uint64_t v276;
  uint64_t v277;
  WTF *v278;
  uint64_t v279;

  v10 = (uint64_t *)*((_QWORD *)a2 + 9);
  v11 = v10[2];
  if (v11)
  {
    v278 = 0;
    v279 = 0;
    v275 = 0;
    v276 = 0;
    v273 = 0;
    v274 = 0;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v271, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    v98 = v272;
    v99 = HIDWORD(v274);
    if (HIDWORD(v274) == (_DWORD)v274)
    {
      v100 = HIDWORD(v274) + ((unint64_t)HIDWORD(v274) >> 2);
      if (v100 >= 0x10)
        v101 = v100 + 1;
      else
        v101 = 16;
      if (v101 <= (unint64_t)HIDWORD(v274) + 1)
        v102 = HIDWORD(v274) + 1;
      else
        v102 = v101;
      if (v102 >> 28)
      {
LABEL_254:
        __break(0xC471u);
        goto LABEL_257;
      }
      v103 = (unint64_t)v273;
      v104 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v102));
      LODWORD(v274) = v102;
      v273 = v104;
      if ((_DWORD)v99)
      {
        v229 = 16 * v99;
        v230 = (__int128 *)v103;
        do
        {
          v231 = *v230++;
          *v104++ = v231;
          v229 -= 16;
        }
        while (v229);
        v104 = v273;
      }
      if (v103)
      {
        if (v104 == (_OWORD *)v103)
        {
          v273 = 0;
          LODWORD(v274) = 0;
        }
        WTF::fastFree(v103, v105, v92, v93, v94, v95, v96, v97);
        v104 = v273;
      }
      v106 = (uint64_t *)&v104[HIDWORD(v274)];
    }
    else
    {
      v106 = (uint64_t *)&v273[HIDWORD(v274)];
    }
    *v106 = v98 | 0x200000000;
    v106[1] = 0;
    ++HIDWORD(v274);
    v107 = *((_QWORD *)a2 + 3);
    v255 = v107 & 0xFF00FFFFFFFFFFFFLL;
    if ((v107 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_45;
    v108 = ~*(_DWORD *)((v107 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v108 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BDE554);
    }
    if (!BYTE4(this[499][3 * (int)v108 + 1])
      || (v110 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v107, v92, v93, v94, v95, v96, v97),
          v110 == -1))
    {
LABEL_45:
      v110 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v107, v92, v93, v94, v95, v96, v97);
    }
    v111 = *((_QWORD *)a2 + 3);
    v112 = this[688];
    v113 = *(unsigned int *)((v111 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v114 = v112 + 3;
    v115 = v112 + 1;
    if ((v111 & 1) != 0)
      v116 = v114;
    else
      v116 = v115;
    v117 = *v116;
    v118 = *v116 + 32 * v113;
    v119 = *((_DWORD *)this + 1396);
    v120 = *(_DWORD *)(v118 + 20);
    if (v119 == v120)
    {
LABEL_50:
      v121 = *(void **)(v118 + 24);
      __dst[0] = (void *)v110;
      __dst[1] = v121;
      if (HIDWORD(v274) == (_DWORD)v274)
      {
        WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SnippetParams::Value>((uint64_t)&v273, (unint64_t)__dst);
      }
      else
      {
        v273[HIDWORD(v274)] = *(_OWORD *)__dst;
        ++HIDWORD(v274);
      }
      v122 = *(unsigned __int8 *)(v11 + 16);
      if (!*(_BYTE *)(v11 + 16))
      {
        v137 = 0;
LABEL_65:
        v269 = 0;
        v270 = 0;
        v267 = 0;
        v268 = 0;
        JSC::DFG::allocateTemporaryRegistersForSnippet((JSC::DFG::SpeculativeJIT *)this, (uint64_t)&v269, (uint64_t)&v267, (uint64_t)&v278, (uint64_t)&v275, v11, v96, v97);
        v138 = (void *)this[44][2];
        v139 = (WTF *)v273;
        v273 = 0;
        __dst[1] = v138;
        v260 = v139;
        v140 = v274;
        v274 = 0;
        v261 = v140;
        v141 = v278;
        v278 = 0;
        v262 = v141;
        v142 = v279;
        v279 = 0;
        v263 = v142;
        v143 = v275;
        v275 = 0;
        v264 = v143;
        v144 = v276;
        v276 = 0;
        v265 = v144;
        __dst[0] = &off_1E358E728;
        v266 = (JSC::DFG::SpeculativeJIT *)this;
        v145 = *(unsigned int **)(v11 + 8);
        if (v145)
        {
          v146 = v145 + 2;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 + 1, v146));
        }
        (*(void (**)(WTF **__return_ptr, unsigned int *, uint64_t **, void **))(*(_QWORD *)v145 + 16))(&v256, v145, this, __dst);
        v155 = v256;
        v156 = &v258 == (uint64_t *)v256 || v256 == 0;
        if (!v156)
        {
          v256 = 0;
          v257 = 0;
          WTF::fastFree((unint64_t)v155, v148, v149, v150, v151, v152, v153, v154);
        }
        v157 = v145 + 2;
        do
        {
          v158 = __ldaxr(v157);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, v157));
        if (!v159)
        {
          atomic_store(1u, v145 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v145 + 8))(v145);
        }
        JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v272, (uint64_t)a2, 16, 0, v152, v153, v154);
        __dst[0] = off_1E35747E0;
        v167 = v264;
        if (v264)
        {
          v264 = 0;
          LODWORD(v265) = 0;
          WTF::fastFree((unint64_t)v167, v160, v161, v162, v163, v164, v165, v166);
        }
        v168 = v262;
        if (v262)
        {
          v262 = 0;
          LODWORD(v263) = 0;
          WTF::fastFree((unint64_t)v168, v160, v161, v162, v163, v164, v165, v166);
        }
        v169 = v260;
        if (v260)
        {
          v260 = 0;
          LODWORD(v261) = 0;
          WTF::fastFree((unint64_t)v169, v160, v161, v162, v163, v164, v165, v166);
        }
        v170 = v267;
        if (HIDWORD(v268))
        {
          v221 = 16 * HIDWORD(v268);
          v222 = (char *)v267 + 8;
          do
          {
            v223 = *((_QWORD *)v222 - 1);
            if (v223)
            {
              v224 = v223 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*v222];
              --*(_DWORD *)(v224 + 4976);
            }
            v222 += 16;
            v221 -= 16;
          }
          while (v221);
        }
        if (v170)
          WTF::fastFree((unint64_t)v170, v160, v161, v162, v163, v164, v165, v166);
        v171 = v269;
        if (HIDWORD(v270))
        {
          v172 = 16 * HIDWORD(v270);
          v173 = (char *)v269 + 8;
          do
          {
            v174 = *((_QWORD *)v173 - 1);
            if (v174)
            {
              v175 = *v173;
              if (v175 != -1)
              {
                if (v175 > 15)
                  v175 = -1;
                --*(_DWORD *)(v174 + 12 * v175 + 4784);
              }
            }
            v173 += 16;
            v172 -= 16;
          }
          while (v172);
        }
        if (v171)
          WTF::fastFree((unint64_t)v171, v160, v161, v162, v163, v164, v165, v166);
        if (v122 && (v252 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if ((char)v119 > 15)
            v176 = -1;
          else
            v176 = v119;
          --*((_DWORD *)v137 + 3 * v176 + 1196);
        }
        if (v255)
        {
          if (v110 > 15)
            v177 = -1;
          else
            v177 = v110;
          --*((_DWORD *)this + 3 * v177 + 1196);
        }
        if (v271)
        {
          v178 = (char)v272;
          if ((char)v272 != -1)
          {
            if ((char)v272 > 15)
              v178 = -1;
            --*(_DWORD *)(v271 + 12 * v178 + 4784);
          }
        }
        v179 = (unint64_t)v273;
        if (v273)
        {
          v273 = 0;
          LODWORD(v274) = 0;
          WTF::fastFree(v179, v160, v161, v162, v163, v164, v165, v166);
        }
        v180 = (unint64_t)v275;
        if (v275)
        {
          v275 = 0;
          LODWORD(v276) = 0;
          WTF::fastFree(v180, v160, v161, v162, v163, v164, v165, v166);
        }
        v181 = (unint64_t)v278;
        if (v278)
        {
          v278 = 0;
          LODWORD(v279) = 0;
          WTF::fastFree(v181, v160, v161, v162, v163, v164, v165, v166);
        }
        return;
      }
      v123 = *((_QWORD *)a2 + 4);
      v251 = *(unsigned __int8 *)(v11 + 16);
      if ((v123 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_57;
      v124 = ~*(_DWORD *)((v123 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v124 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
LABEL_257:
        JUMPOUT(0x197BDE54CLL);
      }
      if (!BYTE4(this[499][3 * (int)v124 + 1])
        || (v119 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v123, v92, v93, v94, v95, v96, v97),
            v119 == -1))
      {
LABEL_57:
        LOBYTE(v119) = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v123, v92, v93, v94, v95, v96, v97);
      }
      v252 = v123;
      v126 = *((_QWORD *)a2 + 4);
      v127 = this[688];
      v128 = *(unsigned int *)((v126 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v129 = v127 + 3;
      v130 = v127 + 1;
      if ((v126 & 1) != 0)
        v131 = v129;
      else
        v131 = v130;
      v132 = *v131;
      v133 = *v131 + 32 * v128;
      v134 = *((_DWORD *)this + 1396);
      v135 = *(_DWORD *)(v133 + 20);
      if (v134 == v135)
      {
LABEL_62:
        v136 = *(void **)(v133 + 24);
        __dst[0] = (void *)v119;
        __dst[1] = v136;
        if (HIDWORD(v274) == (_DWORD)v274)
        {
          WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SnippetParams::Value>((uint64_t)&v273, (unint64_t)__dst);
        }
        else
        {
          v273[HIDWORD(v274)] = *(_OWORD *)__dst;
          ++HIDWORD(v274);
        }
        v122 = v251;
        v137 = (JSC::DFG::SpeculativeJIT *)this;
        goto LABEL_65;
      }
      if ((*(_QWORD *)(v133 + 8) & 0x2800FFFFFFF7) == 0)
      {
LABEL_159:
        *(_DWORD *)(v133 + 20) = v134;
        goto LABEL_62;
      }
      if ((v135 ^ v134) < 2)
      {
LABEL_168:
        if ((v134 & 1) != 0)
          *(_QWORD *)v133 &= ~2uLL;
        goto LABEL_159;
      }
      v206 = *(_QWORD *)v133;
      if (*(_QWORD *)v133 != 4)
      {
        *(_QWORD *)v133 = v206 | 2;
        v210 = (unsigned int *)(v206 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v206 & 1) != 0)
        {
          v225 = 2 * *v210;
          do
          {
            if (!(v225 * 4))
              goto LABEL_167;
            v226 = *(_QWORD *)&v210[v225];
            if ((*(_BYTE *)(v226 + 19) & 0xC) != 0)
              break;
            v227 = *(_QWORD *)(v226 + 96);
            v228 = (v227 & 1) != 0 ? (v227 >> 1) & 3 : *(unsigned __int8 *)(v227 + 4);
            v225 -= 2;
          }
          while (v228 != 2);
          WTF::fastFree((unint64_t)v210, v125, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          if (!v210)
            goto LABEL_167;
          if ((*((_BYTE *)v210 + 19) & 0xC) == 0)
          {
            v211 = *((_QWORD *)v210 + 12);
            v212 = (v211 & 1) != 0 ? (v211 >> 1) & 3 : *(unsigned __int8 *)(v211 + 4);
            if (v212 != 2)
              goto LABEL_167;
          }
        }
        *(_QWORD *)v133 = 4;
      }
LABEL_167:
      *(_DWORD *)(v132 + 32 * v128 + 16) = -21020677;
      goto LABEL_168;
    }
    if ((*(_QWORD *)(v118 + 8) & 0x2800FFFFFFF7) == 0)
    {
LABEL_157:
      *(_DWORD *)(v118 + 20) = v119;
      goto LABEL_50;
    }
    if ((v120 ^ v119) < 2)
    {
LABEL_163:
      if ((v119 & 1) != 0)
        *(_QWORD *)v118 &= ~2uLL;
      goto LABEL_157;
    }
    v205 = *(_QWORD *)v118;
    if (*(_QWORD *)v118 != 4)
    {
      *(_QWORD *)v118 = v205 | 2;
      v207 = (unsigned int *)(v205 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v205 & 1) != 0)
      {
        v217 = 2 * *v207;
        do
        {
          if (!(v217 * 4))
            goto LABEL_162;
          v218 = *(_QWORD *)&v207[v217];
          if ((*(_BYTE *)(v218 + 19) & 0xC) != 0)
            break;
          v219 = *(_QWORD *)(v218 + 96);
          v220 = (v219 & 1) != 0 ? (v219 >> 1) & 3 : *(unsigned __int8 *)(v219 + 4);
          v217 -= 2;
        }
        while (v220 != 2);
        WTF::fastFree((unint64_t)v207, v109, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        if (!v207)
          goto LABEL_162;
        if ((*((_BYTE *)v207 + 19) & 0xC) == 0)
        {
          v208 = *((_QWORD *)v207 + 12);
          v209 = (v208 & 1) != 0 ? (v208 >> 1) & 3 : *(unsigned __int8 *)(v208 + 4);
          if (v209 != 2)
            goto LABEL_162;
        }
      }
      *(_QWORD *)v118 = 4;
    }
LABEL_162:
    *(_DWORD *)(v117 + 32 * v113 + 16) = -21020677;
    goto LABEL_163;
  }
  v12 = *v10;
  v13 = *((_QWORD *)a2 + 3);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
  {
LABEL_155:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v278, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    v30 = v279;
    goto LABEL_6;
  }
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_253:
    __break(1u);
    goto LABEL_254;
  }
  if (!BYTE4(this[499][3 * (int)v15 + 1]))
    goto LABEL_155;
  v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v278, (JSC::DFG::SpeculativeJIT *)this, v17, v18, v19, v20, v21, v22);
  v30 = v279;
  if (v16 == -1)
LABEL_6:
    v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, v24, v25, v26, v27, v28, v29);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v23, v24, v25, v26, v27, v28, v29);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 29, this[44][2] + 40, v31, v32, v33, v34, v35);
  v42 = *this[497];
  if ((v42 & 1) != 0)
  {
    v213 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v214 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v214 != 0x3FFFFFFF)
        ? (v215 = (_DWORD)v214 == -1)
        : (v215 = 1),
          v215))
    {
      v216 = 2;
    }
    else if (v214 >> 28)
    {
      v246 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v246 = v213;
      *(_DWORD *)(v246 + 8) = v214;
      v216 = 1;
      v213 = v246;
    }
    else
    {
      v216 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v213 = v214 << 36;
    }
    v42 = v213 | v216;
  }
  v277 = v42;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v277, v36, v37, v38, v39, v40, v41);
  if ((v277 & 1) != 0 && (v277 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v277 & 0xFFFFFFFF8, v43, (uint64_t)v44, v45, v46, v47, v48, v49);
  v50 = BYTE1(qword_1ECF4C780);
  v51 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v44, v45, v46, v47, v48, v49);
  v53 = v52;
  v61 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(this[495][3] + 240), *(_DWORD *)(*((_QWORD *)a2 + 9) + 24));
  if (v50)
  {
    JSC::DFG::SpeculativeJIT::callOperation<long long (*)(JSC::JSGlobalObject *,long long,JSC::PropertyName,void *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)__dst, (unsigned __int8 *)this, v30, v51, v53, v16, v61, v12);
    goto LABEL_19;
  }
  v254 = v12;
  v62 = &v260;
  __dst[0] = &v260;
  LODWORD(__dst[1]) = 1;
  if (v16 == 1)
    goto LABEL_11;
  LOWORD(v260) = v16 | 0x100;
  HIDWORD(__dst[1]) = 1;
  v182 = 1;
  v253 = v14;
  do
  {
    v183 = 0;
    v184 = 0;
    v185 = (char *)__dst[0];
    v186 = v182;
    do
    {
      if ((*((_BYTE *)__dst[0] + v183 + 1) & 0x40) != 0)
        goto LABEL_253;
      v184 |= 1 << *((_BYTE *)__dst[0] + v183 + 1);
      v183 += 2;
    }
    while (2 * v182 != v183);
    v187 = 0;
    do
    {
      v188 = *((_BYTE *)__dst[0] + v187) & 0x7F;
      if (v188 >= 0x40)
        goto LABEL_253;
      v184 &= ~(1 << v188);
      v187 += 2;
    }
    while (2 * v182 != v187);
    v189 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
    v189.i16[0] = vaddlv_u8(v189);
    v190 = v189.i32[0];
    v191 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v184));
    v191.i16[0] = vaddlv_u8(v191);
    if (v191.i32[0] + v190)
    {
      v192 = 0;
      if (v182 <= 1uLL)
        v193 = 1;
      else
        v193 = v182;
      v194 = 2 * v193;
      while (1)
      {
        v195 = *((unsigned __int8 *)__dst[0] + v192 + 1);
        if ((v195 & 0x7Fu) >= 0x40)
          goto LABEL_253;
        if (((v184 >> (v195 & 0x7F)) & 1) != 0)
          break;
        v192 += 2;
        if (v194 == v192)
          goto LABEL_144;
      }
      v196 = *((unsigned __int8 *)__dst[0] + v192);
      if (v196 == v195)
        goto LABEL_142;
      v197 = v62;
      v198 = v61;
      v199 = v51;
      v200 = v53;
      if ((char)v196 == 63)
      {
        if ((char)v195 != 31)
        {
          v202 = v195 & 0x1F | 0xD2800000;
          goto LABEL_139;
        }
      }
      else if (v195 != 31 && (char)v196 != 31)
      {
        v202 = v195 & 0xFFE0FFFF | ((v196 & 0x1F) << 16) | 0xAA0003E0;
LABEL_139:
        v203 = *((_DWORD *)this + 50);
        if (v203 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), (uint64_t)v54, v55, v56, v57, v58, v59, v60);
          v203 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)((char *)this[7] + v203) = v202;
        *((_DWORD *)this + 50) += 4;
        v185 = (char *)__dst[0];
        v186 = HIDWORD(__dst[1]);
        v53 = v200;
        v51 = v199;
        v61 = v198;
        v62 = v197;
LABEL_142:
        memmove(&v185[v192], &v185[v192 + 2], 2 * v186 - v192 - 2);
        v182 = HIDWORD(__dst[1]) - 1;
        goto LABEL_143;
      }
      v202 = (char)v195 | (32 * (char)v196) | 0x91000000;
      goto LABEL_139;
    }
    v248 = v61;
    v249 = v62;
    v247 = v51;
    v232 = *(_BYTE *)__dst[0];
    v233 = *((_BYTE *)__dst[0] + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst[0], v233, v56, v57, v58, v59, v60);
    memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
    v234 = (HIDWORD(__dst[1]) - 1);
    v156 = HIDWORD(__dst[1]) == 1;
    HIDWORD(__dst[1]) = v234;
    v235 = (unsigned __int8 *)__dst[0];
    v236 = (char *)__dst[0] + 2 * v234;
    if (v156)
    {
      v237 = 0;
      v238 = 0;
      v250 = 0;
      v54 = (char *)__dst[0] + 2 * v234;
    }
    else
    {
      v240 = 2 * v234;
      v241 = __dst[0];
      while (*v241 != v233)
      {
        v241 += 2;
        v240 -= 2;
        if (!v240)
          goto LABEL_241;
      }
      *v241 = v232;
LABEL_241:
      v250 = 0;
      v242 = v235;
      v243 = v236;
      v54 = v236;
      do
      {
        if (*v235 == v235[1])
        {
          v244 = v235;
          if (v243 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
          {
            if (v235 == (unsigned __int8 *)v54)
            {
              v244 = (unsigned __int8 *)v243;
            }
            else
            {
              v245 = v242 - (unsigned __int8 *)v54;
              memmove(v243, v54, v242 - (unsigned __int8 *)v54);
              v244 = (unsigned __int8 *)&v243[v245];
            }
          }
          v54 = (char *)(v235 + 2);
          ++v250;
          v243 = (char *)v244;
        }
        v235 += 2;
        v242 += 2;
      }
      while (v235 < (unsigned __int8 *)v236);
      v235 = (unsigned __int8 *)__dst[0];
      v237 = HIDWORD(__dst[1]);
      v238 = HIDWORD(__dst[1]);
      v236 = v243;
    }
    v239 = (char *)&v235[2 * v237];
    if (v54 != v239)
    {
      memmove(v236, v54, v239 - v54);
      v238 = HIDWORD(__dst[1]);
    }
    v182 = v238 - v250;
    v51 = v247;
    v61 = v248;
    v62 = v249;
LABEL_143:
    HIDWORD(__dst[1]) = v182;
LABEL_144:
    v14 = v253;
  }
  while (v182);
  v204 = __dst[0];
  if (v62 != __dst[0] && __dst[0])
  {
    __dst[0] = 0;
    LODWORD(__dst[1]) = 0;
    WTF::fastFree((unint64_t)v204, v54, v55, v56, v57, v58, v59, v60);
  }
LABEL_11:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v61, 2, v56, v57, v58, v59, v60);
  if ((_DWORD)v51 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v53, 0, v63, v64, v65, v66, v67);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v51 << 35) + 0x380000001ALL, 0, v63, v64, v65, v66, v67);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, v254, v68, v69, v70, v71, v72, v73, (int *)__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0xFFFFFFFFLL, v74, v75, v76, v77, v78, v79);
  if (v30)
  {
    if (v30 == 31)
      v87 = -1862270945;
    else
      v87 = v30 | 0xAA0003E0;
    v89 = (unsigned int *)(this + 25);
    v88 = *((_DWORD *)this + 50);
    if (v88 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(this + 7), v80, v81, v82, v83, v84, v85, v86);
      v88 = *v89;
    }
    *(_DWORD *)((char *)this[7] + v88) = v87;
    *v89 += 4;
  }
LABEL_19:
  JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, (char)v30, (uint64_t)a2, 16, 0, v84, v85, v86);
  if (v278)
  {
    v90 = (char)v279;
    if ((char)v279 != -1)
    {
      if ((char)v279 > 15)
        v90 = -1;
      --*((_DWORD *)v278 + 3 * v90 + 1196);
    }
  }
  if (v14)
  {
    if (v16 > 15)
      v91 = -1;
    else
      v91 = v16;
    --*((_DWORD *)this + 3 * v91 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<long long (*)(JSC::JSGlobalObject *,long long,JSC::PropertyName,void *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::AssemblerBuffer *v12;
  uint64_t v13;
  __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  __int16 *v30;
  JSC::AssemblerBuffer *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  JSC::AssemblerBuffer *v79;
  __int16 *v80;
  int v81;
  JSC::AssemblerBuffer *v82;
  unsigned int v83;
  unsigned int v84;
  __int16 v85;
  _BYTE v86[6];

  v8 = a8;
  v9 = a7;
  v10 = a5;
  v11 = a4;
  v12 = (JSC::AssemblerBuffer *)a3;
  v13 = (uint64_t)a2;
  v15 = &v85;
  if (a6 != 1)
  {
    v85 = a6 | 0x100;
    v83 = 1;
    v82 = (JSC::AssemblerBuffer *)(a2 + 56);
    v16 = 1;
    do
    {
      v17 = 0;
      v18 = 0;
      v19 = v16;
      do
      {
        if ((v86[v17 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v18 |= 1 << v86[v17 - 1];
        v17 += 2;
      }
      while (2 * v16 != v17);
      v20 = 0;
      do
      {
        v21 = v86[v20 - 2] & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_63;
        v18 &= ~(1 << v21);
        v20 += 2;
      }
      while (2 * v16 != v20);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v18));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.i32[0] + v23)
      {
        v25 = 0;
        if (v16 <= 1)
          v26 = 1;
        else
          v26 = v16;
        v27 = 2 * v26;
        while (1)
        {
          v28 = v86[v25 - 1];
          if ((v28 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v18 >> (v28 & 0x7F)) & 1) != 0)
            break;
          v25 += 2;
          if (v27 == v25)
            goto LABEL_33;
        }
        v29 = v86[v25 - 2];
        if (v29 != v28)
        {
          v30 = v15;
          v31 = v12;
          v32 = v8;
          v33 = v9;
          v34 = v11;
          v35 = v10;
          v36 = a1;
          if ((char)v29 == 63)
          {
            if (v28 == 31)
              goto LABEL_27;
            v38 = v28 & 0x1F | 0xD2800000;
          }
          else
          {
            v37 = (char)v28 == 31 || (char)v29 == 31;
            if (!v37)
            {
              v38 = v28 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v38 = (char)v28 | (32 * (char)v29) | 0x91000000;
          }
LABEL_28:
          v39 = *(_DWORD *)(v13 + 200);
          if (v39 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v82, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v39 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v39) = v38;
          *(_DWORD *)(v13 + 200) += 4;
          v19 = v83;
          a1 = v36;
          v10 = v35;
          v11 = v34;
          v9 = v33;
          v8 = v32;
          v12 = v31;
          v15 = v30;
        }
        memmove(&v86[v25 - 2], &v86[v25], 2 * v19 - v25 - 2);
        v16 = v83 - 1;
        goto LABEL_32;
      }
      v79 = v12;
      v80 = v15;
      v78 = v8;
      v40 = HIBYTE(v85);
      v41 = v85;
      JSC::MacroAssemblerARM64::swap(v13, (char)v85, SHIBYTE(v85), a4, a5, a6, a7, a8);
      memmove(&v85, v86, 2 * v83 - 2);
      v42 = v83 - 1;
      v37 = v83 == 1;
      v84 = v42;
      v43 = (char *)&v85;
      v44 = &v86[2 * v42 - 2];
      if (v37)
      {
        v45 = 0;
        v46 = 0;
        v81 = 0;
        a2 = &v86[2 * v42 - 2];
      }
      else
      {
        v48 = 2 * v42;
        v49 = &v85;
        while (*(unsigned __int8 *)v49 != v40)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v41;
LABEL_43:
        v81 = 0;
        v50 = (char *)&v85;
        v51 = v44;
        a2 = (unsigned __int8 *)v44;
        do
        {
          if (*v43 == v43[1])
          {
            v52 = v43;
            if (v51 != &v86[2 * v84 - 2])
            {
              if (v43 == (char *)a2)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50 - (char *)a2;
                memmove(v51, a2, v50 - (char *)a2);
                v52 = &v51[v53];
              }
            }
            a2 = (unsigned __int8 *)(v43 + 2);
            ++v81;
            v51 = v52;
          }
          v43 += 2;
          v50 += 2;
        }
        while (v43 < v44);
        v45 = v84;
        v46 = v84;
        v44 = v51;
      }
      v47 = &v86[2 * v45 - 2];
      if (a2 != v47)
      {
        memmove(v44, a2, v47 - a2);
        v46 = v84;
      }
      v16 = v46 - v81;
      v8 = v78;
      v12 = v79;
      v15 = v80;
LABEL_32:
      v83 = v16;
LABEL_33:
      ;
    }
    while (v16);
    if (v15 != &v85 && &v85)
      WTF::fastFree((unint64_t)&v85, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v8, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v9, 2, v54, v55, v56, v57, v58);
  if ((_DWORD)v11 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v10, 0, v59, v60, v61, v62, v63);
  else
    JSC::MacroAssemblerARM64::load64(v13, (v11 << 35) + 0x380000001ALL, 0, v59, v60, v61, v62, v63);
  JSC::DFG::SpeculativeJIT::appendCall(v13, (uint64_t)vmEntryCustomGetter, v64, v65, v66, v67, v68, v69, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 0xFFFFFFFFLL, v70, v71, v72, v73, v74, v75);
  if ((_BYTE)v12)
  {
    if (v12 == 31)
      LODWORD(a1) = -1862270945;
    else
      LODWORD(a1) = v12 & 0x1F | 0xAA0003E0;
    v77 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v76 = v77;
    v12 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v77 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v76 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v76) = (_DWORD)a1;
    *(_DWORD *)v13 += 4;
  }
}

JSC::DFG::SpeculativeJIT *JSC::DFG::allocateTemporaryRegistersForSnippet(JSC::DFG::SpeculativeJIT *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v11;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  v11 = result;
  if (*(_BYTE *)(a6 + 4))
  {
    v14 = 0;
    do
    {
      result = JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v30, v11, a3, a4, a5, a6, a7, a8);
      v29 = v31;
      v15 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v15 == *(_DWORD *)(a4 + 8))
      {
        result = (JSC::DFG::SpeculativeJIT *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (WTF *)(v15 + 1), (unint64_t)&v29);
        v15 = *(unsigned int *)(a4 + 12);
        *(_BYTE *)(*(_QWORD *)a4 + v15) = *(_BYTE *)result;
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a4 + v15) = v31;
      }
      *(_DWORD *)(a4 + 12) = v15 + 1;
      v16 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(a2 + 8))
      {
        result = (JSC::DFG::SpeculativeJIT *)WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v16 + 1, (unint64_t)&v30);
        v17 = *(unsigned int *)(a2 + 12);
        v18 = v17 + 1;
        v19 = *(_QWORD *)a2 + 16 * v17;
        *(_QWORD *)v19 = *(_QWORD *)result;
        *(_BYTE *)(v19 + 8) = *((_BYTE *)result + 8);
        *(_QWORD *)result = 0;
        *((_BYTE *)result + 8) = -1;
        *(_DWORD *)(a2 + 12) = v18;
        if (v30)
        {
          v20 = v31;
          if (v31 != -1)
          {
            if (v31 > 15)
              v20 = -1;
            --*(_DWORD *)(v30 + 12 * v20 + 4784);
          }
        }
      }
      else
      {
        v21 = v16 + 1;
        v22 = *(_QWORD *)a2 + 16 * v16;
        *(_QWORD *)v22 = v30;
        *(_BYTE *)(v22 + 8) = v31;
        *(_DWORD *)(a2 + 12) = v21;
      }
      ++v14;
    }
    while (v14 < *(unsigned __int8 *)(a6 + 4));
  }
  if (*(_BYTE *)(a6 + 5))
  {
    v23 = 0;
    do
    {
      result = (JSC::DFG::SpeculativeJIT *)JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v30, v11, a3, a4, a5, a6, a7, a8);
      v29 = v31;
      v24 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v24 == *(_DWORD *)(a5 + 8))
      {
        result = (JSC::DFG::SpeculativeJIT *)WTF::Vector<JSC::ARM64Registers::FPRegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ARM64Registers::FPRegisterID>(a5, (unint64_t)&v29);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a5 + v24) = v31;
        *(_DWORD *)(a5 + 12) = v24 + 1;
      }
      v25 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v25 == *(_DWORD *)(a3 + 8))
      {
        result = (JSC::DFG::SpeculativeJIT *)WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::FPRTemporary>(a3, (unint64_t)&v30);
        if (v30)
        {
          v26 = v30 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v31];
          --*(_DWORD *)(v26 + 4976);
        }
      }
      else
      {
        v27 = v25 + 1;
        v28 = *(_QWORD *)a3 + 16 * v25;
        *(_QWORD *)v28 = v30;
        *(_BYTE *)(v28 + 8) = v31;
        *(_DWORD *)(a3 + 12) = v27;
      }
      ++v23;
    }
    while (v23 < *(unsigned __int8 *)(a6 + 5));
  }
  return result;
}

void JSC::DFG::SnippetParams::~SnippetParams(JSC::DFG::SnippetParams *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)this = off_1E35747E0;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)this = off_1E35747E0;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  JUMPOUT(0x19AEBAEF0);
}

uint64_t WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v12 = 16 * v9;
    v13 = (char *)(v10 + 8);
    do
    {
      v14 = *((_QWORD *)v13 - 1);
      if (v14)
      {
        v15 = v14 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*v13];
        --*(_DWORD *)(v15 + 4976);
      }
      v13 += 16;
      v12 -= 16;
    }
    while (v12);
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;

  v9 = *(unsigned int *)(a1 + 12);
  v10 = *(_QWORD *)a1;
  if ((_DWORD)v9)
  {
    v11 = 16 * v9;
    v12 = (char *)(v10 + 8);
    do
    {
      v13 = *((_QWORD *)v12 - 1);
      if (v13)
      {
        v14 = *v12;
        if (v14 != -1)
        {
          if (v14 > 15)
            v14 = -1;
          --*(_DWORD *)(v13 + 12 * v14 + 4784);
        }
      }
      v12 += 16;
      v11 -= 16;
    }
    while (v11);
  }
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *JSC::DFG::SpeculativeJIT::compileCheckJSCast(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *result;
  unsigned int v20;
  char *v21;
  void (*v22)(uint64_t *__return_ptr);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  JSC::DFG::Graph *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  JSC::DFG::Node *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x8_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  JSC::DFG::Node *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  JSC::DFG::Node *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  WTF *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  JSC::DFG::Graph **v223;
  _QWORD v224[2];
  _QWORD v225[2];
  uint64_t v226;
  unint64_t v227;
  unsigned __int8 v228;
  unint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  unsigned int v234;
  int v235;
  unint64_t v236;

  if (*((unsigned __int16 *)a2 + 9) - 191 >= 2)
  {
    JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x2C8F, "void JSC::DFG::SpeculativeJIT::compileCheckJSCast(Node *)", "node->op() == CheckJSCast || node->op() == CheckNotJSCast");
    __break(0xC471u);
    goto LABEL_83;
  }
  v10 = *((_QWORD *)a2 + 9);
  if (*(_BYTE *)(v10 + 42))
  {
    v11 = *((_QWORD *)a2 + 3);
    if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_7;
    v12 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)this + 1001))
    {
LABEL_82:
      __break(0xC471u);
LABEL_83:
      JUMPOUT(0x197BDF12CLL);
    }
    if (!*((_BYTE *)this[499] + 24 * (int)v12 + 12)
      || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
          v13 == -1))
    {
LABEL_7:
      v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    }
    if (*((_WORD *)a2 + 9) == 191)
    {
      if (*(_BYTE *)(v10 + 42))
      {
        JSC::AssemblyHelpers::branchIfNotType((uint64_t)&v215, (uint64_t)this, v13, *(unsigned __int16 *)(v10 + 40), a5, a6, a7, a8);
LABEL_11:
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v13 << 32) | 0x80000000), (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL), (int *)&v215);
        result = (unint64_t *)JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v14, v15, v16, v17, v18);
        if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return result;
        if (v13 > 15)
          v20 = -1;
        else
          v20 = v13;
        v21 = (char *)this + 12 * v20;
        goto LABEL_16;
      }
    }
    else if (*(_BYTE *)(v10 + 42))
    {
      JSC::AssemblyHelpers::branchIfType((uint64_t)&v215, (uint64_t)this, v13, *(unsigned __int16 *)(v10 + 40), a5, a6, a7, a8);
      goto LABEL_11;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_82;
  }
  v22 = *(void (**)(uint64_t *__return_ptr))(v10 + 32);
  if (v22)
  {
    v22(&v233);
    v232 = 0uLL;
    v231 = 0uLL;
    v229 = 0;
    v230 = 0;
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v226, (uint64_t)this, *((_QWORD *)a2 + 3), v23, v24, v25, v26, v27);
    v34 = v228;
    if (v228 == 255)
    {
      v34 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v226, v227, v28, v29, v30, v31, v32, v33);
      v228 = v34;
    }
    v35 = *((_QWORD *)a2 + 3);
    v36 = this[688];
    if ((v35 & 1) != 0)
      v37 = (_QWORD *)((char *)v36 + 24);
    else
      v37 = (_QWORD *)((char *)v36 + 8);
    v38 = *v37 + 32 * *(unsigned int *)((v35 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v39 = (void *)*((unsigned int *)this + 1396);
    if ((_DWORD)v39 != *(_DWORD *)(v38 + 20))
    {
      if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v38, v39, v28, v29, v30, v31, v32, v33);
      else
        *(_DWORD *)(v38 + 20) = (_DWORD)v39;
    }
    v40 = *(_QWORD *)(v38 + 24);
    v41 = v34;
    v215 = v34;
    v216 = v40;
    WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SnippetParams::Value>((uint64_t)&v229, (unint64_t)&v215);
    v225[0] = 0;
    v225[1] = 0;
    v224[0] = 0;
    v224[1] = 0;
    JSC::DFG::allocateTemporaryRegistersForSnippet((JSC::DFG::SpeculativeJIT *)this, (uint64_t)v225, (uint64_t)v224, (uint64_t)&v232, (uint64_t)&v231, v233, v42, v43);
    v44 = *((_QWORD *)this[44] + 2);
    v45 = v229;
    v229 = 0;
    v216 = v44;
    v217 = v45;
    v46 = v230;
    v230 = 0;
    v218 = v46;
    v47 = *((_QWORD *)&v232 + 1);
    v219 = v232;
    v232 = 0uLL;
    v220 = v47;
    v48 = *((_QWORD *)&v231 + 1);
    v221 = v231;
    v231 = 0uLL;
    v222 = v48;
    v215 = (uint64_t)&off_1E358E728;
    v223 = this;
    v49 = *(unsigned int **)(v233 + 8);
    if (v49)
    {
      v50 = v49 + 2;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 + 1, v50));
    }
    v52 = v49 + 2;
    (*(void (**)(WTF **__return_ptr, unsigned int *, JSC::DFG::Graph **, uint64_t *))(*(_QWORD *)v49 + 16))(&v212, v49, this, &v215);
    do
    {
      v60 = __ldaxr(v52);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v52));
    if (!v61)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
    v62 = (JSC::DFG::Node *)((v41 << 32) | 0x80000000);
    v63 = *((_QWORD *)a2 + 3);
    if (*((_WORD *)a2 + 9) == 191)
    {
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, v62, (JSC::DFG::Node *)(v63 & 0xFF00FFFFFFFFFFFFLL), (unsigned int *)&v212);
    }
    else
    {
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v53, v54, v55, v56, v57, v58, v59, &v235);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v150, v151, v152, v153, v154, v155);
      v156 = 0xFF000F4500000000;
      if (!*((_BYTE *)this + 328))
        v156 = 0xFF000F4100000000;
      v236 = v156;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, v62, (JSC::DFG::Node *)(v63 & 0xFF00FFFFFFFFFFFFLL), &v235);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v212, (uint64_t)this, v157, v158, v159, v160, v161, v162);
    }
    JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v64, v65, v66, v67, v68);
    v170 = v212;
    if (&v214 != (uint64_t *)v212 && v212)
    {
      v212 = 0;
      v213 = 0;
      WTF::fastFree((unint64_t)v170, v163, v164, v165, v166, v167, v168, v169);
    }
    JSC::DFG::SnippetParams::~SnippetParams((JSC::DFG::SnippetParams *)&v215, v163, v164, v165, v166, v167, v168, v169);
    WTF::Vector<JSC::DFG::FPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v224, v171, v172, v173, v174, v175, v176, v177);
    WTF::Vector<JSC::DFG::GPRTemporary,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v225, v178, v179, v180, v181, v182, v183, v184);
    if ((v227 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v192 = (char)v228;
      if ((char)v228 > 15)
        v192 = -1;
      --*(_DWORD *)(v226 + 12 * v192 + 4784);
    }
    v193 = v229;
    if (v229)
    {
      v229 = 0;
      LODWORD(v230) = 0;
      WTF::fastFree(v193, v185, v186, v187, v188, v189, v190, v191);
    }
    v194 = v231;
    if ((_QWORD)v231)
    {
      *(_QWORD *)&v231 = 0;
      DWORD2(v231) = 0;
      WTF::fastFree(v194, v185, v186, v187, v188, v189, v190, v191);
    }
    v195 = v232;
    if ((_QWORD)v232)
    {
      *(_QWORD *)&v232 = 0;
      DWORD2(v232) = 0;
      WTF::fastFree(v195, v185, v186, v187, v188, v189, v190, v191);
    }
    return WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>>::~Ref((unint64_t *)&v233, v185, v186, v187, v188, v189, v190, v191);
  }
  else
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v215, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v212, (JSC::DFG::SpeculativeJIT *)this, v69, v70, v71, v72, v73, v74);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v226, (JSC::DFG::SpeculativeJIT *)this, v75, v76, v77, v78, v79, v80);
    v87 = v217;
    if (v217 == 255)
    {
      v87 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v215, v216, v81, v82, v83, v84, v85, v86);
      LOBYTE(v217) = v87;
    }
    v88 = v213;
    v89 = (char)v227;
    v90 = (char)v213;
    JSC::AssemblyHelpers::emitLoadStructure(this, *((_QWORD *)this[44] + 2), v87, v90, v83, v84, v85, v86);
    JSC::AssemblyHelpers::loadCompactPtr(this, v88 | 0x4C00000000, v90, v91, v92, v93, v94, v95);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *((_QWORD *)a2 + 9), v89, v96, v97, v98, v99, v100);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(this, v101, v102, v103, v104, v105, v106, v107, (int *)v225);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, v90, v89, v108, v109, v110, v111, (uint64_t)&v231);
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v88 | 0x1000000000, v90, v112, v113, v114, v115, v116);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v90, 0xFFFFFFFFLL, v117, v118, v119, v120, (uint64_t)&v232, v121);
    v234 = v225[0];
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v232, &v234, (uint64_t)this, v122, v123, v124, v125, v126);
    if (*((_WORD *)a2 + 9) == 191)
    {
      v134 = (JSC::DFG::Node *)(((unint64_t)v87 << 32) | 0x80000000);
      v135 = *((_QWORD *)a2 + 3);
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v127, v128, v129, v130, v131, v132, v133, (int *)&v232);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v136, v137, v138, v139, v140, v141);
      v142 = 0xFF000F4500000000;
      if (!*((_BYTE *)this + 328))
        v142 = 0xFF000F4100000000;
      *(_QWORD *)((char *)&v232 + 4) = v142;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, v134, (JSC::DFG::Node *)(v135 & 0xFF00FFFFFFFFFFFFLL), (int *)&v232);
      v149 = (unsigned int *)&v231;
    }
    else
    {
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v127, v128, v129, v130, v131, v132, v133, (int *)&v232);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v196, v197, v198, v199, v200, v201);
      if (*((_BYTE *)this + 328))
        v202 = 69;
      else
        v202 = 65;
      v229 = v232;
      LOBYTE(v230) = v202;
      *(_WORD *)((char *)&v230 + 1) = 15;
      BYTE3(v230) = -1;
      v203 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
      LODWORD(v232) = v231;
      *(_QWORD *)((char *)&v232 + 4) = *(_QWORD *)((char *)&v231 + 4);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v87 << 32) | 0x80000000), v203, (int *)&v232);
      v149 = (unsigned int *)&v229;
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v149, (uint64_t)this, v143, v144, v145, v146, v147, v148);
    result = (unint64_t *)JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v204, v205, v206, v207, v208);
    if (v226)
    {
      v209 = (char)v227;
      if ((char)v227 != -1)
      {
        if ((char)v227 > 15)
          v209 = -1;
        --*(_DWORD *)(v226 + 12 * v209 + 4784);
      }
    }
    if (v212)
    {
      v210 = (char)v213;
      if ((char)v213 != -1)
      {
        if ((char)v213 > 15)
          v210 = -1;
        --*((_DWORD *)v212 + 3 * v210 + 1196);
      }
    }
    if ((v216 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v211 = (char)v217;
      if ((char)v217 > 15)
        v211 = -1;
      v21 = (char *)(v215 + 12 * v211);
LABEL_16:
      --*((_DWORD *)v21 + 1196);
    }
  }
  return result;
}

void JSC::AssemblyHelpers::branchIfType(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a4;
  v11 = BYTE1(a4);
  if (BYTE1(a4) != a4)
  {
    if (*(_BYTE *)(a2 + 212))
    {
      v21 = a4;
      *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
      v22 = *(char *)(a2 + 272);
      JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, v22, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::sub32(a2, v22, v8, v22, v23, v24, v25, v26);
      v16 = (v11 - v21);
      v17 = a1;
      v18 = a2;
      v19 = 9;
      v20 = v22;
      goto LABEL_4;
    }
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x197BDF64CLL);
  }
  if (!*(_BYTE *)(a2 + 212))
    goto LABEL_7;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
  v16 = v8;
  v17 = a1;
  v18 = a2;
  v19 = 0;
  v20 = 17;
LABEL_4:
  JSC::MacroAssemblerARM64::branch32(v18, v19, v20, v16, v12, v13, v14, v15, v17);
}

void JSC::AssemblyHelpers::loadCompactPtr(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v8 = a3;
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = a1[50];
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v10, v11, v12, v13, v14, v15, v16);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = v8 & 0x1F | (32 * (v8 & 0x1F)) | 0xD37CEC00;
  a1[50] += 4;
}

unint64_t *WTF::Ref<JSC::Snippet,WTF::RawPtrTraits<JSC::Snippet>,WTF::DefaultRefDerefTraits<JSC::Snippet>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v13)
      {
        v14 = v13 + 2;
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v13 + 2);
          v17 = v9;
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
          v9 = v17;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::DFG::SpeculativeJIT::compileCallCustomAccessorGetter(const JSC::CodeOrigin **this, JSC::DFG::Node *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  JSC::DFG::Node *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;

  v4 = **((_QWORD **)a2 + 9);
  v5 = JSC::DFG::Node::cacheableIdentifier(a2);
  if (v5)
  {
    if ((v5 & 1) != 0)
      v10 = v5 & 0xFFFFFFFFFFFFFFFELL;
    else
      v10 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    v10 = 0;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v49, (uint64_t)this, *((_QWORD *)a2 + 3), 0, v6, v7, v8, v9);
  v18 = v51;
  if (v51 == 255)
  {
    v18 = JSC::DFG::SpeculativeJIT::fillJSValue(v49, v50, v12, v13, v14, v15, v16, v17);
    v51 = v18;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)this, v11, v12, v13, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 29, *((_QWORD *)this[44] + 2) + 40, v19, v20, v21, v22, v23);
  JSC::CodeOrigin::CodeOrigin(&v48, this[497]);
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v48, v24, v25, v26, v27, v28, v29);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v30, (uint64_t)v31, v32, v33, v34, v35, v36);
  ++*((_DWORD *)this + 1196);
  v37 = *((unsigned int *)this + 1194);
  if ((_DWORD)v37 != 0x3FFFFFFF)
  {
    this[597] = (const JSC::CodeOrigin *)0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v37, (uint64_t)v31, v32, v33, v34, v35, v36);
  }
  v38 = BYTE1(qword_1ECF4C780);
  v40 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)this, a2, v31, v32, v33, v34, v35, v36);
  if (v38)
    JSC::DFG::SpeculativeJIT::callOperation<long long (*)(JSC::JSGlobalObject *,long long,JSC::PropertyName,void *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v47, (unsigned __int8 *)this, v40, v39, v18, v10, v4, v41);
  else
    JSC::DFG::SpeculativeJIT::callOperation<WTF::FunctionPtr<(WTF::PtrTag)57072,long long ()(JSC::JSGlobalObject *,long long,JSC::PropertyName),(WTF::FunctionAttributes)1>,JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v47, (unsigned __int8 *)this, v4, v40, v39, v18, v10, v41);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v42, v43, v44);
  --*((_DWORD *)this + 1196);
  if ((v50 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v46 = (char)v51;
    if ((char)v51 > 15)
      v46 = -1;
    --*(_DWORD *)(v49 + 12 * v46 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<long long (*)(JSC::JSGlobalObject *,long long,JSC::PropertyName,void *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unsigned __int8 *v65;
  char v66;
  int v67;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v69;
  unsigned int v70;
  unsigned int v71;
  __int16 v72;
  _BYTE v73[6];

  v12 = (uint64_t)a2;
  v13 = a1;
  if (a5 != 1)
  {
    v72 = a5 | 0x100;
    v70 = 1;
    v69 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v73[v15 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          if (a1)
            WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v16 |= 1 << v73[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v73[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_56;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v73[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v73[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v69, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v70;
        }
        a1 = (int *)memmove(&v73[v23 - 2], &v73[v23], 2 * v17 - v23 - 2);
        v14 = v70 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v72);
      v66 = v72;
      JSC::MacroAssemblerARM64::swap(v12, (char)v72, SHIBYTE(v72), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v72, v73, 2 * v70 - 2);
      v32 = v70 - 1;
      v28 = v70 == 1;
      v71 = v32;
      v33 = (unsigned __int8 *)&v72;
      __src = &v73[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v67 = 0;
        a2 = &v73[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v72;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v66;
LABEL_43:
        v67 = 0;
        v39 = (char *)&v72;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v73[2 * v71 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v64 = v39 - (char *)a2;
                v65 = v40;
                a1 = (int *)memmove(v40, a2, v39 - (char *)a2);
                v41 = &v65[v64];
              }
            }
            a2 = v33 + 2;
            ++v67;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v71;
        v35 = v71;
        __src = v40;
      }
      v36 = &v73[2 * v34 - 2];
      if (a2 != v36)
      {
        a1 = (int *)memmove(__src, a2, v36 - a2);
        v35 = v71;
      }
      v14 = v35 - v67;
LABEL_32:
      v70 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
LABEL_53:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a7, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 2, v42, v43, v44, v45, v46);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, v47, v48, v49, v50, v51);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a3 << 35) + 0x380000001ALL, 0, v47, v48, v49, v50, v51);
  JSC::DFG::SpeculativeJIT::appendCall(v12, (uint64_t)vmEntryCustomGetter, v52, v53, v54, v55, v56, v57, v13);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0xFFFFFFFFLL, v58, v59, v60, v61, v62, v63);
}

void JSC::DFG::SpeculativeJIT::callOperation<WTF::FunctionPtr<(WTF::PtrTag)57072,long long ()(JSC::JSGlobalObject *,long long,JSC::PropertyName),(WTF::FunctionAttributes)1>,JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  char v61;
  int v62;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v64;
  unsigned int v65;
  unsigned int v66;
  __int16 v67;
  _BYTE v68[6];

  v12 = (uint64_t)a2;
  v13 = a1;
  if (a6 != 1)
  {
    v67 = a6 | 0x100;
    v65 = 1;
    v64 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v68[v15 - 1] & 0x40) != 0)
        {
LABEL_56:
          __break(1u);
          if (a1)
            WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_53;
        }
        v16 |= 1 << v68[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v68[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_56;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v68[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_56;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v68[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v64, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v65;
        }
        a1 = (int *)memmove(&v68[v23 - 2], &v68[v23], 2 * v17 - v23 - 2);
        v14 = v65 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v67);
      v61 = v67;
      JSC::MacroAssemblerARM64::swap(v12, (char)v67, SHIBYTE(v67), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v67, v68, 2 * v65 - 2);
      v32 = v65 - 1;
      v28 = v65 == 1;
      v66 = v32;
      v33 = (unsigned __int8 *)&v67;
      __src = &v68[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v62 = 0;
        a2 = &v68[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v67;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v61;
LABEL_43:
        v62 = 0;
        v39 = (char *)&v67;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v68[2 * v66 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v59 = v39 - (char *)a2;
                v60 = v40;
                a1 = (int *)memmove(v40, a2, v39 - (char *)a2);
                v41 = &v60[v59];
              }
            }
            a2 = v33 + 2;
            ++v62;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v66;
        v35 = v66;
        __src = v40;
      }
      v36 = &v68[2 * v34 - 2];
      if (a2 != v36)
      {
        a1 = (int *)memmove(__src, a2, v36 - a2);
        v35 = v66;
      }
      v14 = v35 - v62;
LABEL_32:
      v65 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
LABEL_53:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a7, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a5, 0, v42, v43, v44, v45, v46);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, v42, v43, v44, v45, v46);
  JSC::DFG::SpeculativeJIT::appendCall(v12, a3, v47, v48, v49, v50, v51, v52, v13);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0xFFFFFFFFLL, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::DFG::SpeculativeJIT::compileCallCustomAccessorSetter(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  JSC::DFG::Node *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint8x8_t v56;
  __int32 v57;
  uint8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int i;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t result;
  char v107;
  char v108;
  _QWORD *v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _BYTE *v116;
  int v117;
  unsigned __int8 *v118;
  char *v119;
  unsigned __int8 *v120;
  uint64_t v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int64_t v135;
  char *v136;
  int v137;
  char v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  JSC::ARM64LogicalImmediate *v143;
  uint64_t v144;
  void *__dst;
  uint64_t v146;
  _WORD v147[4];
  uint64_t v148;

  v4 = **((_QWORD **)a2 + 9);
  v5 = JSC::DFG::Node::cacheableIdentifier(a2);
  if (v5)
  {
    if ((v5 & 1) != 0)
      v13 = v5 & 0xFFFFFFFFFFFFFFFELL;
    else
      v13 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_QWORD *)a2 + 3);
  v141 = v4;
  v143 = (JSC::ARM64LogicalImmediate *)v13;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_85;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE0B00);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, v7, v8, v9, v10, v11, v12);
  else
LABEL_85:
    v16 = -1;
  v17 = *((_QWORD *)a2 + 4);
  v142 = v14 & 0xFF00FFFFFFFFFFFFLL;
  v140 = v17 & 0xFF00FFFFFFFFFFFFLL;
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_86;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_153:
    __break(1u);
LABEL_154:
    JUMPOUT(0x197BE092CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
    v19 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, v7, v8, v9, v10, v11, v12);
  else
LABEL_86:
    v19 = -1;
  if (v16 == 0xFF)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, v7, v8, v9, v10, v11, v12);
  if (v19 == 0xFF)
    v19 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v17, v7, v8, v9, v10, v11, v12);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v6, v7, v8, v9, v10, v11, v12);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 29, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 40, v20, v21, v22, v23, v24);
  v31 = **((_QWORD **)this + 497);
  if ((v31 & 1) != 0)
  {
    v124 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
    if ((v31 & 2) != 0
      || ((v125 = *(unsigned int *)((v31 & 0xFFFFFFFF8) + 8), (_DWORD)v125 != 0x3FFFFFFF)
        ? (v126 = (_DWORD)v125 == -1)
        : (v126 = 1),
          v126))
    {
      v127 = 2;
    }
    else if (v125 >> 28)
    {
      v133 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v133 = v124;
      *(_DWORD *)(v133 + 8) = v125;
      v127 = 1;
      v124 = v133;
    }
    else
    {
      v127 = *(_QWORD *)(v31 & 0xFFFFFFFF8);
      v124 = v125 << 36;
    }
    v31 = v124 | v127;
  }
  v144 = v31;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v144, v25, v26, v27, v28, v29, v30);
  if ((v144 & 1) != 0 && (v144 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v144 & 0xFFFFFFFF8, v32, (uint64_t)v33, v34, v35, v36, v37, v38);
  v39 = BYTE1(qword_1ECF4C780);
  v47 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v33, v34, v35, v36, v37, v38);
  v48 = (uint64_t)v40;
  if (v39)
  {
    JSC::DFG::SpeculativeJIT::callOperation<void (*)(JSC::JSGlobalObject *,long long,long long,JSC::PropertyName,void *),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&__dst, (int *)this, v47, (uint64_t)v40, v16, v19, (uint64_t)v143, v141);
    goto LABEL_74;
  }
  __dst = v147;
  LODWORD(v146) = 2;
  if (v16 == 1)
  {
    if (v19 == 2)
      goto LABEL_56;
    v49 = 0;
  }
  else
  {
    v147[0] = v16 | 0x100;
    v49 = 1;
    HIDWORD(v146) = 1;
    if (v19 == 2)
      goto LABEL_25;
  }
  v147[v49++] = v19 | 0x200;
  HIDWORD(v146) = v49;
  do
  {
LABEL_25:
    v50 = 0;
    v51 = 0;
    v52 = (char *)__dst;
    v53 = v49;
    do
    {
      if ((*((_BYTE *)__dst + v50 + 1) & 0x40) != 0)
        goto LABEL_153;
      v51 |= 1 << *((_BYTE *)__dst + v50 + 1);
      v50 += 2;
    }
    while (2 * v49 != v50);
    v54 = 0;
    do
    {
      v55 = *((_BYTE *)__dst + v54) & 0x7F;
      if (v55 >= 0x40)
        goto LABEL_153;
      v51 &= ~(1 << v55);
      v54 += 2;
    }
    while (2 * v49 != v54);
    v56 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
    v56.i16[0] = vaddlv_u8(v56);
    v57 = v56.i32[0];
    v58 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v51));
    v58.i16[0] = vaddlv_u8(v58);
    if (v58.i32[0] + v57)
    {
      v59 = 0;
      if (v49 <= 1uLL)
        v60 = 1;
      else
        v60 = v49;
      v61 = 2 * v60;
      while (1)
      {
        v62 = *((unsigned __int8 *)__dst + v59 + 1);
        if ((v62 & 0x7Fu) >= 0x40)
          goto LABEL_153;
        if (((v51 >> (v62 & 0x7F)) & 1) != 0)
          break;
        v59 += 2;
        if (v61 == v59)
          goto LABEL_50;
      }
      v63 = *((unsigned __int8 *)__dst + v59);
      if (v63 == v62)
        goto LABEL_48;
      v64 = (char)v63;
      if ((char)v63 == 63)
      {
        v65 = *((_DWORD *)this + 50);
        v66 = *((_DWORD *)this + 48);
        if (v62 != 31)
        {
          v68 = v62 & 0x1F | 0xD2800000;
          goto LABEL_45;
        }
      }
      else
      {
        v65 = *((_DWORD *)this + 50);
        v66 = *((_DWORD *)this + 48);
        v67 = (char)v62 == 31 || v64 == 31;
        if (!v67)
        {
          v68 = v62 & 0xFFE0FFFF | ((v64 & 0x1F) << 16) | 0xAA0003E0;
LABEL_45:
          if (v65 + 4 > v66)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
            v65 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v65) = v68;
          *((_DWORD *)this + 50) += 4;
          v52 = (char *)__dst;
          v53 = HIDWORD(v146);
LABEL_48:
          memmove(&v52[v59], &v52[v59 + 2], 2 * v53 - v59 - 2);
          v49 = HIDWORD(v146) - 1;
          goto LABEL_49;
        }
      }
      v68 = (char)v62 | (32 * v64) | 0x91000000;
      goto LABEL_45;
    }
    v111 = *(_BYTE *)__dst;
    v138 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v138, v42, v43, v44, v45, v46);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v146) - 2);
    v112 = (HIDWORD(v146) - 1);
    v67 = HIDWORD(v146) == 1;
    HIDWORD(v146) = v112;
    v113 = (unsigned __int8 *)__dst;
    v114 = (unsigned __int8 *)__dst + 2 * v112;
    if (v67)
    {
      v121 = 0;
      v122 = 0;
      v117 = 0;
      v40 = v114;
    }
    else
    {
      v115 = 2 * v112;
      v116 = __dst;
      while (*v116 != v138)
      {
        v116 += 2;
        v115 -= 2;
        if (!v115)
          goto LABEL_92;
      }
      *v116 = v111;
LABEL_92:
      v117 = 0;
      v118 = v113;
      v40 = v114;
      v119 = (char *)v114;
      do
      {
        if (*v113 == v113[1])
        {
          v120 = v113;
          if (v119 != (char *)__dst + 2 * HIDWORD(v146))
          {
            v137 = v117;
            v139 = (char *)v114;
            if (v113 == v40)
            {
              v120 = (unsigned __int8 *)v119;
            }
            else
            {
              v135 = v118 - v40;
              v136 = v119;
              memmove(v119, v40, v118 - v40);
              v120 = (unsigned __int8 *)&v136[v135];
            }
            v114 = (unsigned __int8 *)v139;
            v117 = v137;
          }
          v40 = v113 + 2;
          ++v117;
          v119 = (char *)v120;
        }
        v113 += 2;
        v118 += 2;
      }
      while (v113 < v114);
      v113 = (unsigned __int8 *)__dst;
      v121 = HIDWORD(v146);
      v122 = HIDWORD(v146);
      v114 = (unsigned __int8 *)v119;
    }
    v123 = &v113[2 * v121];
    if (v40 != v123)
    {
      v132 = v117;
      memmove(v114, v40, v123 - v40);
      v117 = v132;
      v122 = HIDWORD(v146);
    }
    v49 = v122 - v117;
LABEL_49:
    HIDWORD(v146) = v49;
LABEL_50:
    ;
  }
  while (v49);
  v69 = __dst;
  if (v147 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v146) = 0;
    WTF::fastFree((unint64_t)v69, v40, v41, v42, v43, v44, v45, v46);
  }
LABEL_56:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v143, 3, v42, v43, v44, v45, v46);
  if ((_DWORD)v47 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v48, 0, v70, v71, v72, v73, v74);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v47 << 35) + 0x380000001ALL, 0, v70, v71, v72, v73, v74);
  v81 = **((_QWORD **)this + 497);
  if ((v81 & 1) != 0)
  {
    v128 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
    if ((v81 & 2) != 0
      || ((v129 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v129 != 0x3FFFFFFF)
        ? (v130 = (_DWORD)v129 == -1)
        : (v130 = 1),
          v130))
    {
      v131 = 2;
    }
    else if (v129 >> 28)
    {
      v134 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v134 = v128;
      *(_DWORD *)(v134 + 8) = v129;
      v131 = 1;
      v128 = v134;
    }
    else
    {
      v131 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
      v128 = v129 << 36;
    }
    v81 = v128 | v131;
  }
  v148 = v81;
  JSC::DFG::JITCompiler::emitStoreCodeOrigin((uint64_t)this, &v148, v75, v76, v77, v78, v79, v80);
  if ((v148 & 1) != 0 && (v148 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v148 & 0xFFFFFFFF8, v82, v83, v84, v85, v86, v87, v88);
  for (i = *((_DWORD *)this + 50); (signed int)i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if (i + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_154;
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  v90 = *((_BYTE *)this + 272) & 0x1F;
  if (i + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
    i = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + i) = v90 | 0xD2800000;
  v91 = *((_DWORD *)this + 50);
  v92 = v91 + 4;
  *((_DWORD *)this + 50) = v91 + 4;
  if ((v91 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
    v92 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v92) = v90 | 0xF2A00000;
  v93 = *((_DWORD *)this + 50);
  v94 = v93 + 4;
  *((_DWORD *)this + 50) = v93 + 4;
  if ((v93 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
    v94 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v94) = v90 | 0xF2C00000;
  v95 = *((_DWORD *)this + 50);
  v96 = v95 + 4;
  *((_DWORD *)this + 50) = v95 + 4;
  *((_DWORD *)this + 52) = 0;
  if ((v95 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
    v96 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v96) = -700513792;
  v97 = *((_DWORD *)this + 50) + 4;
  for (*((_DWORD *)this + 50) = v97; (signed int)v97 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v97)
  {
    if (v97 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      v97 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v97) = -721215457;
    v97 = *((_DWORD *)this + 50) + 4;
  }
  v98 = (_QWORD *)((char *)this + 376);
  __dst = (void *)(v97 | 0x100000000);
  v146 = v141;
  v99 = *((unsigned int *)this + 97);
  if ((_DWORD)v99 == *((_DWORD *)this + 96))
  {
    v109 = (_QWORD *)WTF::Vector<JSC::DFG::CallLinkRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v98, v99 + 1, (unint64_t)&__dst);
    v110 = (_QWORD *)(*((_QWORD *)this + 47) + 16 * *((unsigned int *)this + 97));
    *v110 = *v109;
    v110[1] = v109[1];
  }
  else
  {
    v100 = *v98 + 16 * v99;
    *(_DWORD *)v100 = v97;
    *(_DWORD *)(v100 + 4) = 1;
    *(_QWORD *)(v100 + 8) = v141;
  }
  ++*((_DWORD *)this + 97);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0xFFFFFFFFLL, v83, v84, v85, v86, v87, v88);
LABEL_74:
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v101, v102, v103, v104, v105);
  if (v140)
  {
    if ((char)v19 > 15)
      v107 = -1;
    else
      v107 = v19;
    --*((_DWORD *)this + 3 * v107 + 1196);
  }
  if (v142)
  {
    if ((char)v16 > 15)
      v108 = -1;
    else
      v108 = v16;
    --*((_DWORD *)this + 3 * v108 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<void (*)(JSC::JSGlobalObject *,long long,long long,JSC::PropertyName,void *),JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  __int16 *v37;
  int v38;
  char *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int *v69;
  int v70;
  unsigned __int8 v71;
  int *v72;
  JSC::AssemblerBuffer *v73;
  unsigned int v74;
  unsigned int v75;
  __int16 v76;
  _BYTE v77[6];

  v12 = (uint64_t)a2;
  v13 = a1;
  if (a5 == 1)
  {
    if (a6 == 2)
      goto LABEL_61;
    v14 = 0;
    goto LABEL_6;
  }
  v76 = a5 | 0x100;
  v14 = 1;
  v74 = 1;
  if (a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v77[2 * v14++ - 2] = a6 | 0x200;
    v74 = v14;
  }
  v73 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v14;
    do
    {
      if ((v77[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v77[v15 - 1];
      v15 += 2;
    }
    while (2 * v14 != v15);
    v18 = 0;
    do
    {
      v19 = v77[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v14 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v14 <= 1)
        v24 = 1;
      else
        v24 = v14;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v77[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v77[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v12 + 200);
          v30 = *(_DWORD *)(v12 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v73, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v29) = v32;
        *(_DWORD *)(v12 + 200) += 4;
        v17 = v74;
      }
      a1 = (int *)memmove(&v77[v23 - 2], &v77[v23], 2 * v17 - v23 - 2);
      v14 = v74 - 1;
      goto LABEL_57;
    }
    v33 = v76;
    v71 = HIBYTE(v76);
    JSC::MacroAssemblerARM64::swap(v12, (char)v76, SHIBYTE(v76), a4, a5, a6, a7, a8);
    memmove(&v76, v77, 2 * v74 - 2);
    v34 = v74 - 1;
    v31 = v74 == 1;
    v75 = v34;
    v35 = (int *)&v76;
    a1 = (int *)&v77[2 * v34 - 2];
    if (v31)
    {
      v42 = 0;
      v43 = 0;
      v38 = 0;
      a2 = a1;
    }
    else
    {
      v36 = 2 * v34;
      v37 = &v76;
      while (*(unsigned __int8 *)v37 != v71)
      {
        ++v37;
        v36 -= 2;
        if (!v36)
          goto LABEL_36;
      }
      *(_BYTE *)v37 = v33;
LABEL_36:
      v38 = 0;
      v39 = (char *)&v76;
      a2 = a1;
      v40 = a1;
      do
      {
        if (*(unsigned __int8 *)v35 == *((unsigned __int8 *)v35 + 1))
        {
          v41 = v35;
          if (v40 != (int *)&v77[2 * v75 - 2])
          {
            v70 = v38;
            v72 = a1;
            if (v35 == a2)
            {
              v41 = v40;
            }
            else
            {
              v68 = v39 - (char *)a2;
              v69 = v40;
              memmove(v40, a2, v39 - (char *)a2);
              v41 = (int *)((char *)v69 + v68);
            }
            a1 = v72;
            v38 = v70;
          }
          a2 = (int *)((char *)v35 + 2);
          ++v38;
          v40 = v41;
        }
        v35 = (int *)((char *)v35 + 2);
        v39 += 2;
      }
      while (v35 < a1);
      v42 = v75;
      v43 = v75;
      a1 = v40;
    }
    v44 = (int *)&v77[2 * v42 - 2];
    if (a2 != v44)
    {
      v45 = v38;
      a1 = (int *)memmove(a1, a2, (char *)v44 - (char *)a2);
      v38 = v45;
      v43 = v75;
    }
    v14 = v43 - v38;
LABEL_57:
    v74 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a8, 4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a7, 3, v46, v47, v48, v49, v50);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, v51, v52, v53, v54, v55);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a3 << 35) + 0x380000001ALL, 0, v51, v52, v53, v54, v55);
  JSC::DFG::SpeculativeJIT::appendCall(v12, (uint64_t)vmEntryCustomSetter, v56, v57, v58, v59, v60, v61, v13);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0xFFFFFFFFLL, v62, v63, v64, v65, v66, v67);
}

void JSC::DFG::SpeculativeJIT::compileToStringOrCallStringConstructorOrStringValueOf(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::DFG::Node *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int i;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  JSC::DFG::AbstractValue *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  char *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::DFG::Node *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int *v121;
  JSC::AssemblerBuffer *v122;
  unsigned int v123;
  unsigned int v124;
  int m;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  char v152;
  char *v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int *v185;
  int j;
  unsigned int v187;
  char v188;
  int *v189;
  int *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int k;
  unsigned int v232;
  char v233;
  int *v234;
  int *v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  int v265;
  unsigned int v266;
  char *v267;
  unint64_t v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  unsigned int v272;
  char v273;
  uint64_t v274;
  JSC::DFG::Node *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unsigned __int8 v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  JSC::DFG::Node *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  int v384[3];
  unsigned int v385;
  JSC::ARM64LogicalImmediate *v386;
  int v387;
  int v388;
  char v389;
  __int16 v390;
  char v391;
  unsigned int v392;
  JSC::ARM64LogicalImmediate *v393;
  _DWORD v394[2];
  char v395;
  __int16 v396;
  char v397;
  unsigned int v398[3];
  unsigned int v399[3];
  int v400;
  int v401;
  char v402;
  __int16 v403;
  char v404;
  _BYTE v405[12];
  int v406[2];
  char v407;
  __int16 v408;
  char v409;
  __int128 v410;
  _BYTE v411[24];
  uint64_t v412;
  unsigned __int8 v413;
  int v414[3];

  v10 = *((_QWORD *)a2 + 3);
  v11 = (v10 >> 50) & 0x3F;
  if (((v10 >> 50) & 0x3F) <= 0x15)
  {
    if ((_DWORD)v11 == 1)
    {
LABEL_7:
      JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(this, a2, 10, a4, a5, a6, a7, a8);
      return;
    }
    if ((_DWORD)v11)
    {
LABEL_11:
      v12 = v10 & 0xFF00FFFFFFFFFFFFLL;
      if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_15;
      v13 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v13 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BE230CLL);
      }
      if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v13 + 12)
        || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), (_DWORD)v14 == -1))
      {
LABEL_15:
        v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      }
      v15 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v15 != 38)
      {
        if ((_DWORD)v15 == 8)
        {
          ++*((_DWORD *)this + 1196);
          v274 = *((unsigned int *)this + 1194);
          if ((_DWORD)v274 != 0x3FFFFFFF)
          {
            *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
            JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v274, a3, a4, a5, a6, a7, a8);
          }
          JSC::DFG::SpeculativeJIT::flushRegisters(this, v274, a3, a4, a5, a6, a7, a8);
          *(_QWORD *)&v410 = 0xFFFFFFFFLL;
          DWORD2(v410) = -16773311;
          if ((*(_BYTE *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x43) & 0x30) != 0)
          {
            JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v14, v276, v277, v278, v279, v280, (uint64_t)&v412);
            JSC::MacroAssemblerARM64::move(this, v14, 0, v342, v343, v344, v345, v346);
            JSC::ARM64Assembler::label((_DWORD *)this + 8, v347, v348, v349, v350, v351, v352, v353, v406);
            JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v354, v355, v356, v357, v358, v359);
            v281 = v406[0];
            v366 = 0xFF000F4500000000;
            if (!*((_BYTE *)this + 328))
              v366 = 0xFF000F4100000000;
            LODWORD(v410) = v406[0];
            *(_QWORD *)((char *)&v410 + 4) = v366;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v412, (uint64_t)this, v360, v361, v362, v363, v364, v365);
          }
          else
          {
            v281 = -1;
          }
          v282 = *((unsigned __int16 *)a2 + 9);
          v284 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v275, v276, v277, v278, v279, v280);
          if (v282 == 318)
            v287 = operationToStringOnCell;
          else
            v287 = operationCallStringConstructorOnCell;
          JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>((int *)&v412, (unsigned __int8 *)this, (uint64_t)v287, v284, v283, v14, v285, v286);
          if (v281 != -1)
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v410, (uint64_t)this, v288, v289, v290, v291, v292, v293);
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v288, v289, v290, v291, v292, v293);
          v294 = *((_DWORD *)a2 + 12);
          *((_DWORD *)this + 1194) = v294;
          *((_DWORD *)this + 1195) = 4;
          v295 = ~v294;
          if (v295 < *((unsigned int *)this + 1001))
          {
            v296 = *((_QWORD *)this + 499) + 24 * (int)v295;
            v297 = *((_DWORD *)a2 + 13);
            *(_QWORD *)v296 = a2;
            *(_DWORD *)(v296 + 8) = v297;
            *(_BYTE *)(v296 + 12) = 6;
            *(_DWORD *)(v296 + 13) = 0;
            *(_BYTE *)(v296 + 17) = 0;
            --*((_DWORD *)this + 1196);
LABEL_46:
            if (!v12)
              return;
            if ((int)v14 > 15)
              v83 = -1;
            else
              v83 = v14;
            v84 = (char *)this + 12 * v83;
            goto LABEL_51;
          }
          __break(0xC471u);
        }
        else
        {
          if ((_DWORD)v15 == 37)
          {
            JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v410, this, a3, a4, a5, a6, a7, a8);
            v367 = SBYTE8(v410);
            JSC::DFG::SpeculativeJIT::speculateStringObject((uint64_t)this, *((_QWORD *)a2 + 3), v14, v368, v369, v370, v371, v372);
            JSC::MacroAssemblerARM64::load64((uint64_t)this, v14 | 0x1000000000, v367, v373, v374, v375, v376, v377);
            JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, v367, a2, 0, v378, v379, v380, v381);
LABEL_41:
            if ((_QWORD)v410)
            {
              v82 = SBYTE8(v410);
              if (SBYTE8(v410) != -1)
              {
                if (SBYTE8(v410) > 15)
                  v82 = -1;
                --*(_DWORD *)(v410 + 12 * v82 + 4784);
              }
            }
            goto LABEL_46;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x197BE20B4);
      }
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v410, this, a3, a4, a5, a6, a7, a8);
      v16 = BYTE8(v410);
      v17 = SBYTE8(v410);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v14 | 0x500000000, v17, v18, v19, v20, v21, v22);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, v17, 2, v23, v24, v25, v26, (uint64_t)&v412);
      v27 = (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v17, 76, v28, v29, v30, v31, (uint64_t)v384);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v14 << 32) | 0x80000000), v27, v384);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v14 | 0x1000000000, v17, v32, v33, v34, v35, v36);
      for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
      {
        if ((i + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v37, v38, v39, v40, v41, v42, v43);
          i = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
        i = *((_DWORD *)this + 50) + 4;
      }
      v45 = i;
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v37, v38, v39, v40, v41, v42, v43);
        v45 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v45) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v46 = 69;
      else
        v46 = 65;
      v406[0] = i;
      v406[1] = 0;
      v407 = v46;
      v408 = 15;
      v409 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v412, (uint64_t)this, v38, v39, v40, v41, v42, v43);
      if ((_DWORD)v14 == (_DWORD)v17)
      {
LABEL_31:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v406, (uint64_t)this, v48, v49, v50, v51, v52, v53);
        v62 = *((_QWORD *)a2 + 3);
        v63 = *((_QWORD *)this + 702);
        v64 = *(_QWORD *)(v63 + 8);
        v65 = *(unsigned int *)((v62 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v66 = (_QWORD *)(v64 + 24);
        v67 = (_QWORD *)(v64 + 8);
        if ((v62 & 1) != 0)
          v68 = v66;
        else
          v68 = v67;
        v69 = *v68 + 32 * v65;
        v70 = (JSC::DFG::AbstractValue *)v69;
        v71 = *(unsigned int *)(v63 + 88);
        if ((_DWORD)v71 != *(_DWORD *)(v69 + 20))
        {
          if ((*(_QWORD *)(v69 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v69, (void *)v71, v56, v57, v58, v59, v60, v61);
          else
            *(_DWORD *)(v69 + 20) = v71;
        }
        v74 = *(_QWORD *)(v69 + 8);
        v73 = (uint64_t *)(v69 + 8);
        v72 = v74;
        v75 = v74 & 0x30020000;
        if (v75 == v74)
          goto LABEL_36;
        if ((v72 & 0x2800FFFFFFF7) != 0)
        {
          if (!JSC::DFG::AbstractValue::filterSlow(v70, 0x30020000uLL, v56, v57, v58, v59, v60, v61))
          {
LABEL_36:
            JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v56, v57, v58, v59, v60, v61);
            if ((int)v17 > 15)
              v76 = -1;
            else
              v76 = v17;
            v77 = (char *)this + 12 * v76;
            v78 = *((_DWORD *)a2 + 12);
            *((_DWORD *)v77 + 1194) = v78;
            *((_DWORD *)v77 + 1195) = 4;
            v79 = ~v78;
            if (v79 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BE2314);
            }
            v80 = *((_QWORD *)this + 499) + 24 * (int)v79;
            v81 = *((_DWORD *)a2 + 13);
            *(_QWORD *)v80 = a2;
            *(_DWORD *)(v80 + 8) = v81;
            *(_BYTE *)(v80 + 17) = v17;
            *(_DWORD *)(v80 + 12) = 6;
            *(_BYTE *)(v80 + 16) = 0;
            goto LABEL_41;
          }
        }
        else
        {
          *v73 = v75;
          if (v75)
            goto LABEL_36;
          JSC::DFG::AbstractValue::clear(v70, v71, v56, v57, v58, v59, v60, v61);
        }
        *(_BYTE *)(*((_QWORD *)this + 702) + 80) = 0;
        goto LABEL_36;
      }
      if ((_DWORD)v14 == 63)
      {
        if ((_DWORD)v17 != 31)
        {
          v54 = v16 & 0x1F | 0xD2800000;
          goto LABEL_28;
        }
      }
      else if ((_DWORD)v14 != 31 && (_DWORD)v17 != 31)
      {
        v54 = v16 & 0xFFE0FFFF | ((v14 & 0x1F) << 16) | 0xAA0003E0;
LABEL_28:
        v55 = *((_DWORD *)this + 50);
        if (v55 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v47, v48, v49, v50, v51, v52, v53);
          v55 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v55) = v54;
        *((_DWORD *)this + 50) += 4;
        goto LABEL_31;
      }
      v54 = v17 | (32 * v14) | 0x91000000;
      goto LABEL_28;
    }
    goto LABEL_54;
  }
  if (((v10 >> 50) & 0x3F) > 0x30)
  {
    if ((_DWORD)v11 == 49 || (_DWORD)v11 == 52)
      goto LABEL_7;
    goto LABEL_11;
  }
  if ((_DWORD)v11 == 22)
  {
    v383 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_100;
    v154 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v154 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE232CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v154 + 12))
    {
      v155 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v412, this, v156, v157, v158, v159, v160, v161);
      if (v155 != -1)
        goto LABEL_102;
    }
    else
    {
LABEL_100:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v412, this, a3, a4, a5, a6, a7, a8);
    }
    LOBYTE(v155) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, v162, v163, v164, v165, v166, v167);
LABEL_102:
    v168 = v413;
    *(_QWORD *)&v410 = v411;
    *((_QWORD *)&v410 + 1) = 2;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v155, 1, v163, v164, v165, v166, v167, (uint64_t)v406);
    v175 = *((_QWORD *)a2 + 3);
    v176 = *((_QWORD *)this + 702);
    v177 = *(_QWORD *)(v176 + 8);
    v178 = (_QWORD *)(v177 + 24);
    v179 = (_QWORD *)(v177 + 8);
    if ((v175 & 1) != 0)
      v179 = v178;
    v180 = *v179 + 32 * *(unsigned int *)((v175 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v181 = *(unsigned int *)(v176 + 88);
    if ((_DWORD)v181 != *(_DWORD *)(v180 + 20))
    {
      if ((*(_QWORD *)(v180 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v180, (void *)v181, v169, v170, v171, v172, v173, v174);
      else
        *(_DWORD *)(v180 + 20) = v181;
    }
    v182 = (char)v168;
    if ((*(_QWORD *)(v180 + 8) & 0x2C00CFFFFFF7) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v155, v170, v171, v172, v173, v174, (uint64_t)v405);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v155 << 32) | 0x80000000), v175, 0xFFFFD3FF30000008, (uint64_t)v405, 1uLL, v298, v299);
    }
    if (v155 == v168)
      goto LABEL_115;
    if (v155 == 63)
    {
      if ((_DWORD)v182 != 31)
      {
        v183 = v168 & 0x1F | 0xD2800000;
        goto LABEL_112;
      }
    }
    else if (v155 != 31 && (_DWORD)v182 != 31)
    {
      v183 = v168 & 0xFFE0FFFF | ((v155 & 0x1F) << 16) | 0xAA0003E0;
LABEL_112:
      v185 = (unsigned int *)((char *)this + 200);
      v184 = *((_DWORD *)this + 50);
      if (v184 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v181, v169, v170, v171, v172, v173, v174);
        v184 = *v185;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v184) = v183;
      *v185 += 4;
LABEL_115:
      for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
      {
        if ((j + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v181, v169, v170, v171, v172, v173, v174);
          j = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
        j = *((_DWORD *)this + 50) + 4;
      }
      v187 = j;
      if ((j + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v181, v169, v170, v171, v172, v173, v174);
        v187 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v187) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v188 = 69;
      else
        v188 = 65;
      v400 = j;
      v401 = 0;
      v402 = v188;
      v403 = 15;
      v404 = -1;
      if (j != -1)
      {
        if (HIDWORD(v410) == DWORD2(v410))
        {
          v189 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v410, (void *)(HIDWORD(v410) + 1), (unint64_t)&v400, v170, v171, v172, v173, v174);
          v191 = *v189;
          v190 = v189 + 1;
          v192 = v410 + 12 * HIDWORD(v410);
          *(_DWORD *)v192 = v191;
        }
        else
        {
          v190 = &v401;
          v192 = v410 + 12 * HIDWORD(v410);
          *(_DWORD *)v192 = j;
        }
        *(_QWORD *)(v192 + 4) = *(_QWORD *)v190;
        ++HIDWORD(v410);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v406, (uint64_t)this, v169, v170, v171, v172, v173, v174);
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v155, 10, v193, v194, v195, v196, (uint64_t)v399);
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v155, 2, v197, v198, v199, v200, (uint64_t)v398);
      v207 = *((_QWORD *)a2 + 3);
      v208 = *((_QWORD *)this + 702);
      v209 = *(_QWORD *)(v208 + 8);
      v210 = (_QWORD *)(v209 + 24);
      v211 = (_QWORD *)(v209 + 8);
      if ((v207 & 1) != 0)
        v211 = v210;
      v212 = *v211 + 32 * *(unsigned int *)((v207 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v213 = *(unsigned int *)(v208 + 88);
      if ((_DWORD)v213 != *(_DWORD *)(v212 + 20))
      {
        if ((*(_QWORD *)(v212 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v212, (void *)v213, v201, v202, v203, v204, v205, v206);
        else
          *(_DWORD *)(v212 + 20) = v213;
      }
      if ((*(_QWORD *)(v212 + 8) & 0xFFFFD1FF00000008) != 0)
      {
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v213, v201, v202, v203, v204, v205, v206, v414);
        JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v300, v301, v302, v303, v304, v305);
        if (*((_BYTE *)this + 328))
          v308 = 69;
        else
          v308 = 65;
        v394[0] = v414[0];
        v394[1] = 0;
        v395 = v308;
        v396 = 15;
        v397 = -1;
        JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v155 << 32) | 0x80000000), v207, 0x2E00FFFFFFF7uLL, (uint64_t)v394, 1uLL, v306, v307);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v399, (uint64_t)this, v201, v202, v203, v204, v205, v206);
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v392, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 42032), v214, v215, v216, v217, v218);
      if (v392 == 0xFFFFFFFFLL)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v393, v182, v219, v220, v221, v222, v223);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v392 << 35) + 0x380000001ALL, v182, v219, v220, v221, v222, v223);
      for (k = *((_DWORD *)this + 50); k < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = k)
      {
        if ((k + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v224, v225, v226, v227, v228, v229, v230);
          k = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + k) = -721215457;
        k = *((_DWORD *)this + 50) + 4;
      }
      v232 = k;
      if ((k + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v224, v225, v226, v227, v228, v229, v230);
        v232 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v232) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v233 = 69;
      else
        v233 = 65;
      v387 = k;
      v388 = 0;
      v389 = v233;
      v390 = 15;
      v391 = -1;
      if (k != -1)
      {
        if (HIDWORD(v410) == DWORD2(v410))
        {
          v234 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v410, (void *)(HIDWORD(v410) + 1), (unint64_t)&v387, v226, v227, v228, v229, v230);
          v236 = *v234;
          v235 = v234 + 1;
          v237 = v410 + 12 * HIDWORD(v410);
          *(_DWORD *)v237 = v236;
        }
        else
        {
          v235 = &v388;
          v237 = v410 + 12 * HIDWORD(v410);
          *(_DWORD *)v237 = k;
        }
        *(_QWORD *)(v237 + 4) = *(_QWORD *)v235;
        ++HIDWORD(v410);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v398, (uint64_t)this, v225, v226, v227, v228, v229, v230);
      JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v385, this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 16) + 42016), v238, v239, v240, v241, v242);
      if (v385 == 0xFFFFFFFFLL)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v386, v182, v243, v244, v245, v246, v247);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v385 << 35) + 0x380000001ALL, v182, v243, v244, v245, v246, v247);
      if (HIDWORD(v410))
      {
        v254 = 0;
        v255 = 0;
        v256 = 12 * HIDWORD(v410);
        do
        {
          if (v255 >= HIDWORD(v410))
          {
            __break(0xC471u);
            JUMPOUT(0x197BE2304);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v410 + v254), (uint64_t)this, v248, v249, v250, v251, v252, v253);
          ++v255;
          v254 += 12;
        }
        while (v256 != v254);
      }
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v248, v249, v250, v251, v252, v253);
      v264 = (char *)this + 4776;
      v265 = *((_DWORD *)a2 + 12);
      if ((int)v182 > 15)
        v266 = -1;
      else
        v266 = v182;
      v267 = &v264[12 * v266];
      *(_DWORD *)v267 = v265;
      *((_DWORD *)v267 + 1) = 4;
      v268 = ~v265;
      if (v268 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BE2334);
      }
      v269 = *((_QWORD *)this + 499) + 24 * (int)v268;
      v270 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v269 = a2;
      *(_DWORD *)(v269 + 8) = v270;
      *(_BYTE *)(v269 + 17) = v182;
      *(_DWORD *)(v269 + 12) = 6;
      *(_BYTE *)(v269 + 16) = 0;
      v271 = v410;
      if (v411 != (_BYTE *)v410 && (_QWORD)v410)
      {
        *(_QWORD *)&v410 = 0;
        DWORD2(v410) = 0;
        WTF::fastFree(v271, v257, v258, v259, v260, v261, v262, v263);
      }
      if (v412)
      {
        v272 = (char)v413;
        if ((char)v413 != -1)
        {
          if ((char)v413 > 15)
            v272 = -1;
          --*(_DWORD *)(v412 + 12 * v272 + 4784);
        }
      }
      if (!v383)
        return;
      if ((char)v155 > 15)
        v273 = -1;
      else
        v273 = v155;
      v153 = &v264[12 * v273];
LABEL_90:
      --*((_DWORD *)v153 + 2);
      return;
    }
    v183 = v182 | (32 * (char)v155) | 0x91000000;
    goto LABEL_112;
  }
  if ((_DWORD)v11 == 24)
  {
LABEL_54:
    v85 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_96;
    v86 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v86 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE231CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v86 + 12))
      v87 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_96:
      v87 = -1;
    ++*((_DWORD *)this + 1196);
    v88 = *((unsigned int *)this + 1194);
    if ((_DWORD)v88 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v88, a3, a4, a5, a6, a7, a8);
    }
    if (v87 == 0xFF)
      v87 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculate(this, v88, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v89, v90, v91, v92, v93, v94, v95);
    *(_QWORD *)&v410 = 0xFFFFFFFFLL;
    DWORD2(v410) = -16773311;
    if ((*(_BYTE *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x43) & 0x30) != 0)
    {
      v102 = v87;
      if (v87 == 0xFF)
        v102 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, (uint64_t)v96, v97, v98, v99, v100, v101);
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v102, 1, v97, v98, v99, v100, v101, (uint64_t)&v412);
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BE2180);
      }
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v87 | 0x500000000, *((char *)this + 304), v103, v104, v105, v106, v107);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v108, v109, v110, v111, (uint64_t)v406);
      if (v87)
      {
        if (v87 == 31)
        {
          v121 = (unsigned int *)((char *)this + 200);
          v120 = *((_DWORD *)this + 50);
          v122 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
          v123 = v120 + 4;
          v124 = *((_DWORD *)this + 48);
          v119 = -1862269984;
        }
        else
        {
          if (v87 == 63)
            v119 = -763363328;
          else
            v119 = ((v87 & 0x1F) << 16) | 0xAA0003E0;
          v121 = (unsigned int *)((char *)this + 200);
          v120 = *((_DWORD *)this + 50);
          v122 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
          v123 = v120 + 4;
          v124 = *((_DWORD *)this + 48);
        }
        if (v123 > v124)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v122, v112, v113, v114, v115, v116, v117, v118);
          v120 = *v121;
        }
        *(_DWORD *)(*(_QWORD *)v122 + v120) = v119;
        *v121 += 4;
      }
      for (m = *((_DWORD *)this + 50); m < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = m)
      {
        if ((m + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v112, v113, v114, v115, v116, v117, v118);
          m = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + m) = -721215457;
        m = *((_DWORD *)this + 50) + 4;
      }
      v126 = m;
      if ((m + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v112, v113, v114, v115, v116, v117, v118);
        v126 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v126) = 335544320;
      *((_DWORD *)this + 50) += 4;
      v127 = 0xFF000F4500000000;
      if (!*((_BYTE *)this + 328))
        v127 = 0xFF000F4100000000;
      LODWORD(v410) = m;
      *(_QWORD *)((char *)&v410 + 4) = v127;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v412, (uint64_t)this, v113, v114, v115, v116, v117, v118);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v406, (uint64_t)this, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      m = -1;
      v102 = v87;
    }
    v134 = *((unsigned __int16 *)a2 + 9);
    if (v134 == 318)
    {
      v135 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
      v139 = v138;
      v140 = v87;
      v141 = operationToString;
    }
    else if (v134 == 411)
    {
      v135 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
      v139 = v382;
      v140 = v87;
      v141 = operationStringValueOf;
    }
    else
    {
      v135 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
      v139 = v341;
      v140 = v87;
      v141 = operationCallStringConstructor;
    }
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v412, (unsigned __int8 *)this, (uint64_t)v141, v135, v139, v140, v136, v137);
    if (m != -1)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v410, (uint64_t)this, v142, v143, v144, v145, v146, v147);
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v142, v143, v144, v145, v146, v147);
    v148 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 1194) = v148;
    *((_DWORD *)this + 1195) = 4;
    v149 = ~v148;
    if (v149 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE2324);
    }
    v150 = *((_QWORD *)this + 499) + 24 * (int)v149;
    v151 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v150 = a2;
    *(_DWORD *)(v150 + 8) = v151;
    *(_BYTE *)(v150 + 12) = 6;
    *(_DWORD *)(v150 + 13) = 0;
    *(_BYTE *)(v150 + 17) = 0;
    --*((_DWORD *)this + 1196);
    if (!v85)
      return;
    if (v102 > 15)
      v152 = -1;
    else
      v152 = v102;
    v153 = (char *)this + 12 * v152 + 4776;
    goto LABEL_90;
  }
  if ((_DWORD)v11 != 41)
    goto LABEL_11;
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v410, (uint64_t)this, v10, 1, a5, a6, a7, a8);
  v315 = v411[0];
  if (v411[0] == 255)
  {
    v315 = JSC::DFG::SpeculativeJIT::fillJSValue(v410, *((uint64_t *)&v410 + 1), v309, v310, v311, v312, v313, v314);
    v411[0] = v315;
  }
  ++*((_DWORD *)this + 1196);
  v316 = *((unsigned int *)this + 1194);
  if ((_DWORD)v316 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v316, v309, v310, v311, v312, v313, v314);
  }
  JSC::DFG::SpeculativeJIT::speculateNotCell((uint64_t)this, *((_QWORD *)a2 + 3), v315, v310, v311, v312, v313, v314);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v317, v318, v319, v320, v321, v322, v323);
  v324 = *((unsigned __int16 *)a2 + 9);
  v332 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v325, v326, v327, v328, v329, v330);
  if (v324 == 318)
    v335 = operationToString;
  else
    v335 = operationCallStringConstructor;
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v412, (unsigned __int8 *)this, (uint64_t)v335, v332, v331, v315, v333, v334);
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v336, v337, v338, v339);
  --*((_DWORD *)this + 1196);
  if ((*((_QWORD *)&v410 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v340 = v411[0];
    if (v411[0] > 15)
      v340 = -1;
    v84 = (char *)(v410 + 12 * v340);
LABEL_51:
    --*((_DWORD *)v84 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::speculateNotCell(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _BYTE v30[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v22 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v22 | 2;
          v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v22 & 1) != 0)
          {
            v26 = 2 * *v23;
            while (v26 * 4)
            {
              v27 = *(_QWORD *)&v23[v26];
              if ((*(_BYTE *)(v27 + 19) & 0xC) == 0)
              {
                v28 = *(_QWORD *)(v27 + 96);
                v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
                v26 -= 2;
                if (v29 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v23, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v23)
          {
            if ((*((_BYTE *)v23 + 19) & 0xC) != 0
              || ((v24 = *((_QWORD *)v23 + 12), (v24 & 1) != 0)
                ? (v25 = (v24 >> 1) & 3)
                : (v25 = *(unsigned __int8 *)(v24 + 4)),
                  v25 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0x2C00FFFFFFF7) != 0)
  {
    JSC::MacroAssemblerARM64::branchTest64(a1, 0, (char)v8, 28, a5, a6, a7, a8, (uint64_t)v30);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0xFFFFD3FF00000008, (uint64_t)v30, 1uLL, v20, v21);
  }
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v28 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v28 | 2;
          v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v28 & 1) != 0)
          {
            v32 = 2 * *v29;
            while (v32 * 4)
            {
              v33 = *(_QWORD *)&v29[v32];
              if ((*(_BYTE *)(v33 + 19) & 0xC) == 0)
              {
                v34 = *(_QWORD *)(v33 + 96);
                v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
                v32 -= 2;
                if (v35 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v29, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v29)
          {
            if ((*((_BYTE *)v29 + 19) & 0xC) != 0
              || ((v30 = *((_QWORD *)v29 + 12), (v30 & 1) != 0)
                ? (v31 = (v30 >> 1) & 3)
                : (v31 = *(unsigned __int8 *)(v30 + 4)),
                  v31 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0x2C00FFFFFFF7) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8), v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateNotCell(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v21 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::speculateNotCell(a1, a2, v21, v22, v23, v24, v25, v26);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v27 = -1;
    else
      v27 = v21;
    --*(_DWORD *)(a1 + 12 * v27 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  JSC::AssemblerBuffer *v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  _BYTE v63[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  v13 = &v62;
  if (a6 != 1)
  {
    v62 = a6 | 0x100;
    v60 = 1;
    v59 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v63[v15 - 1] & 0x40) != 0)
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v16 |= 1 << v63[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v63[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_57;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v63[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_57;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v63[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v11 + 200);
          if (v30 + 4 > *(_DWORD *)(v11 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v59, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v11 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v11 + 56) + v30) = v29;
          *(_DWORD *)(v11 + 200) += 4;
          v17 = v60;
        }
        a1 = (int *)memmove(&v63[v23 - 2], &v63[v23], 2 * v17 - v23 - 2);
        v14 = v60 - 1;
        goto LABEL_32;
      }
      v57 = v13;
      v31 = HIBYTE(v62);
      v32 = v62;
      JSC::MacroAssemblerARM64::swap(v11, (char)v62, SHIBYTE(v62), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v62, v63, 2 * v60 - 2);
      v33 = v60 - 1;
      v28 = v60 == 1;
      v61 = v33;
      v34 = (char *)&v62;
      v35 = &v63[2 * v33 - 2];
      if (v28)
      {
        v36 = 0;
        v37 = 0;
        v58 = 0;
        a2 = &v63[2 * v33 - 2];
      }
      else
      {
        v39 = 2 * v33;
        v40 = &v62;
        while (*(unsigned __int8 *)v40 != v31)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v32;
LABEL_43:
        v58 = 0;
        v41 = (char *)&v62;
        a2 = (unsigned __int8 *)v35;
        v42 = v35;
        do
        {
          if (*v34 == v34[1])
          {
            v43 = v34;
            if (v42 != &v63[2 * v61 - 2])
            {
              if (v34 == (char *)a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - (char *)a2;
                a1 = (int *)memmove(v42, a2, v41 - (char *)a2);
                v43 = &v42[v44];
              }
            }
            a2 = (unsigned __int8 *)(v34 + 2);
            ++v58;
            v42 = v43;
          }
          v34 += 2;
          v41 += 2;
        }
        while (v34 < v35);
        v36 = v61;
        v37 = v61;
        v35 = v42;
      }
      v38 = &v63[2 * v36 - 2];
      if (a2 != v38)
      {
        a1 = (int *)memmove(v35, a2, v38 - a2);
        v37 = v61;
      }
      v14 = v37 - v58;
      v13 = v57;
LABEL_32:
      v60 = v14;
LABEL_33:
      ;
    }
    while (v14);
    a1 = (int *)&v62;
    if (v13 == &v62)
      goto LABEL_54;
LABEL_58:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v45, v46, v47, v48, v49, v50, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t *v45;
  int v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t v63;
  JSC::DFG::Node *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int *v72;
  int *v73;
  int v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  JSC::DFG::Node *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  unsigned int v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  WTF *v106;
  void *v107;
  unsigned int v108;
  unsigned int v109;
  char *v110;
  char v111;
  char v112;
  uint64_t v113;
  char v114;
  JSC::DFG::Node *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::DFG::Node *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  char v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  JSC::DFG::Node *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  JSC::ARM64LogicalImmediate *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  JSC::DFG::Node *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  char *v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint8x8_t v191;
  __int32 v192;
  uint8x8_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  unsigned int v209;
  char v210;
  char v211;
  BOOL v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  int v218;
  int v219;
  char *v220;
  unsigned __int8 *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *__src;
  int v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  WTF *v233;
  uint64_t v234;
  _BYTE v235[24];
  void *__dst;
  unint64_t v237;
  char v238[24];
  uint64_t v239;
  unsigned __int8 v240;
  _QWORD v241[3];
  unsigned int v242;
  JSC::DFG::Node *v243;

  v243 = a2;
  v242 = a3;
  v241[0] = this;
  v241[1] = &v243;
  v241[2] = &v242;
  v9 = *((_QWORD *)a2 + 3);
  v10 = (v9 >> 50) & 0x3F;
  if ((_DWORD)v10 == 1)
  {
    v11 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v12 = *((unsigned int *)this + 1001);
    if ((_DWORD)a3 != 10)
    {
      if (v11 >= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x197BE34A8);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        v112 = v111;
      }
      else
      {
        v112 = -1;
      }
      ++*((_DWORD *)this + 1196);
      v113 = *((unsigned int *)this + 1194);
      if ((_DWORD)v113 != 0x3FFFFFFF)
      {
        *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v113, a3, a4, a5, a6, a7, a8);
      }
      if (v112 == -1)
      {
        JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v9, a3, a4, a5, a6, a7, a8);
        v112 = v114;
      }
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v113, a3, a4, a5, a6, a7, a8);
      v121 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v243, v115, v116, v117, v118, v119, v120);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>((int *)&__dst, (unsigned __int8 *)this, 0, v121, v122, v112, v242, v123);
      v124 = v243;
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v243, v125, v126, v127, v128, v129, v130);
      v131 = *((_DWORD *)v124 + 12);
      *((_DWORD *)this + 1194) = v131;
      *((_DWORD *)this + 1195) = 4;
      v132 = ~v131;
      if (v132 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BE34B0);
      }
      v133 = *((_QWORD *)this + 499) + 24 * (int)v132;
      v134 = *((_DWORD *)v124 + 13);
      *(_QWORD *)v133 = v124;
      *(_DWORD *)(v133 + 8) = v134;
      *(_BYTE *)(v133 + 12) = 6;
      *(_DWORD *)(v133 + 13) = 0;
      *(_BYTE *)(v133 + 17) = 0;
      --*((_DWORD *)this + 1196);
      if (v112 > 15)
        v135 = -1;
      else
        v135 = v112;
      v110 = (char *)this + 12 * v135 + 4776;
      goto LABEL_57;
    }
    if (v11 >= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE3498);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      v14 = v13;
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v239, this, v15, v16, v17, v18, v19, v20);
      if ((_DWORD)v14 != -1)
        goto LABEL_9;
    }
    else
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v239, this, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v9, v22, v23, v24, v25, v26, v27);
    v14 = v28;
LABEL_9:
    v29 = v240;
    v30 = (char)v240;
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v21, v22, v23, v24, v25, v26, v27);
    __dst = v238;
    v237 = 2;
    v233 = (WTF *)v235;
    v234 = 2;
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v14, 256, v31, v32, v33, v34, (uint64_t)&v231);
    v42 = v231;
    if (v231 != -1)
    {
      v43 = HIDWORD(v237);
      if (HIDWORD(v237) == (_DWORD)v237)
      {
        v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, (void *)(HIDWORD(v237) + 1), (unint64_t)&v231, v37, v38, v39, v40, v41);
        v46 = *v44;
        v45 = (uint64_t *)(v44 + 1);
        v42 = v46;
        v43 = HIDWORD(v237);
      }
      else
      {
        v45 = &v232;
      }
      v47 = (char *)__dst + 12 * v43;
      *(_DWORD *)v47 = v42;
      *(_QWORD *)(v47 + 4) = *v45;
      ++HIDWORD(v237);
    }
    if ((_DWORD)v14 == (_DWORD)v30)
      goto LABEL_23;
    if ((_DWORD)v14 == 63)
    {
      if ((_DWORD)v30 != 31)
      {
        v50 = v29 & 0x1F | 0xD2800000;
        goto LABEL_20;
      }
    }
    else if ((_DWORD)v14 != 31 && (_DWORD)v30 != 31)
    {
      v48 = v29 & 0xFFE0FFFF | ((v14 & 0x1F) << 16);
      v49 = -1442839584;
LABEL_19:
      v50 = v48 | v49;
LABEL_20:
      v52 = (unsigned int *)((char *)this + 200);
      v51 = *((_DWORD *)this + 50);
      if (v51 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v35, v36, v37, v38, v39, v40, v41);
        v51 = *v52;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v51) = v50;
      *v52 += 4;
LABEL_23:
      v53 = *((_DWORD *)this + 50);
      if (v53 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v35, v36, v37, v38, v39, v40, v41);
        v53 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v53) = v29 & 0x1F | (32 * (v29 & 0x1F)) | 0xD37CEC00;
      *((_DWORD *)this + 50) += 4;
      JSC::MacroAssemblerARM64::add64((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16) + 44272, v30, v30, v38, v39, v40, v41);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v29 | 0x800000000, v30, v54, v55, v56, v57, v58);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v30, 0xFFFFFFFFLL, v59, v60, v61, v62, (uint64_t)&v229, v63);
      v70 = v229;
      if (v229 != -1)
      {
        v71 = HIDWORD(v234);
        if (HIDWORD(v234) == (_DWORD)v234)
        {
          v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v233, (void *)(HIDWORD(v234) + 1), (unint64_t)&v229, v65, v66, v67, v68, v69);
          v74 = *v72;
          v73 = v72 + 1;
          v70 = v74;
          v71 = HIDWORD(v234);
        }
        else
        {
          v73 = &v230;
        }
        v75 = (char *)v233 + 12 * v71;
        *(_DWORD *)v75 = v70;
        *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
        ++HIDWORD(v234);
      }
      if (HIDWORD(v237))
      {
        v76 = 0;
        v77 = 0;
        v78 = 12 * HIDWORD(v237);
        do
        {
          if (v77 >= HIDWORD(v237))
          {
            __break(0xC471u);
            JUMPOUT(0x197BE3488);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)__dst + v76), (uint64_t)this, (uint64_t)v64, v65, v66, v67, v68, v69);
          ++v77;
          v76 += 12;
        }
        while (v78 != v76);
      }
      v79 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v243, v64, v65, v66, v67, v68, v69);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(&v228, (unsigned __int8 *)this, v30, v79, v80, v14, 10, v81);
      if (HIDWORD(v234))
      {
        v88 = 0;
        v89 = 0;
        v90 = 12 * HIDWORD(v234);
        do
        {
          if (v89 >= HIDWORD(v234))
          {
            __break(0xC471u);
            JUMPOUT(0x197BE3490);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v233 + v88), (uint64_t)this, v82, v83, v84, v85, v86, v87);
          ++v89;
          v88 += 12;
        }
        while (v90 != v88);
      }
      v91 = v243;
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v243, v82, v83, v84, v85, v86, v87);
      v99 = (char *)this + 4776;
      v100 = *((_DWORD *)v91 + 12);
      if ((int)v30 > 15)
        v101 = -1;
      else
        v101 = v30;
      v102 = &v99[12 * v101];
      *(_DWORD *)v102 = v100;
      *((_DWORD *)v102 + 1) = 4;
      v103 = ~v100;
      if (v103 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BE34A0);
      }
      v104 = *((_QWORD *)this + 499) + 24 * (int)v103;
      v105 = *((_DWORD *)v91 + 13);
      *(_QWORD *)v104 = v91;
      *(_DWORD *)(v104 + 8) = v105;
      *(_BYTE *)(v104 + 17) = v30;
      *(_DWORD *)(v104 + 12) = 6;
      *(_BYTE *)(v104 + 16) = 0;
      v106 = v233;
      if (v235 != (_BYTE *)v233 && v233)
      {
        v233 = 0;
        LODWORD(v234) = 0;
        WTF::fastFree((unint64_t)v106, v92, v93, v94, v95, v96, v97, v98);
      }
      v107 = __dst;
      if (v238 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v237) = 0;
        WTF::fastFree((unint64_t)v107, v92, v93, v94, v95, v96, v97, v98);
      }
      if (v239)
      {
        v108 = (char)v240;
        if ((char)v240 != -1)
        {
          if ((char)v240 > 15)
            v108 = -1;
          --*(_DWORD *)(v239 + 12 * v108 + 4784);
        }
      }
      if ((int)v14 > 15)
        v109 = -1;
      else
        v109 = v14;
      v110 = &v99[12 * v109];
LABEL_57:
      --*((_DWORD *)v110 + 2);
      return;
    }
    v48 = v30 | (32 * v14);
    v49 = -1862270976;
    goto LABEL_19;
  }
  if ((_DWORD)v10 == 49)
  {
    v136 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v136 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
LABEL_147:
      __break(1u);
    }
    else
    {
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v136 + 12))
        v137 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      else
        v137 = -1;
      ++*((_DWORD *)this + 1196);
      v138 = *((unsigned int *)this + 1194);
      if ((_DWORD)v138 != 0x3FFFFFFF)
      {
        *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v138, a3, a4, a5, a6, a7, a8);
      }
      if (v137 == -1)
        v137 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v9, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::flushRegisters(this, v138, a3, a4, a5, a6, a7, a8);
      v152 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, v243, v139, v140, v141, v142, v143, v144);
      v153 = (uint64_t)v145;
      v154 = (JSC::ARM64LogicalImmediate *)v242;
      v155 = v238;
      __dst = v238;
      LODWORD(v237) = 1;
      if (v137)
      {
        *(_WORD *)v238 = v137;
        HIDWORD(v237) = 1;
        v185 = 1;
        do
        {
          v186 = 0;
          v187 = 0;
          v188 = v185;
          do
          {
            if (((*((_BYTE *)__dst + v186 + 1) + 32) & 0x40) != 0)
              goto LABEL_147;
            v187 |= 1 << (*((_BYTE *)__dst + v186 + 1) + 32);
            v186 += 2;
          }
          while (2 * v185 != v186);
          v189 = 0;
          do
          {
            v190 = (*((_BYTE *)__dst + v189) + 32) & 0x7F;
            if (v190 >= 0x40)
              goto LABEL_147;
            v187 &= ~(1 << v190);
            v189 += 2;
          }
          while (2 * v185 != v189);
          v191 = (uint8x8_t)vcnt_s8((int8x8_t)v187);
          v191.i16[0] = vaddlv_u8(v191);
          v192 = v191.i32[0];
          v193 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v187));
          v193.i16[0] = vaddlv_u8(v193);
          if (v193.i32[0] + v192)
          {
            v194 = 0;
            if (v185 <= 1uLL)
              v188 = 1;
            v195 = 2 * v188;
            while (1)
            {
              v196 = *((char *)__dst + v194 + 1);
              v197 = (*((_BYTE *)__dst + v194 + 1) + 32) & 0x7F;
              if (v197 >= 0x40)
                goto LABEL_147;
              if (((v187 >> v197) & 1) != 0)
                break;
              v194 += 2;
              if (v195 == v194)
                goto LABEL_101;
            }
            v198 = *((char *)__dst + v194);
            v199 = *((_DWORD *)this + 50);
            if (v199 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v145, v146, v147, v148, v149, v150, v151);
              v199 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v199) = v196 | (32 * v198) | 0x1E604000;
            *((_DWORD *)this + 50) += 4;
            memmove((char *)__dst + v194, (char *)__dst + v194 + 2, 2 * HIDWORD(v237) - v194 - 2);
            v185 = HIDWORD(v237) - 1;
          }
          else
          {
            v226 = v155;
            v210 = *(_BYTE *)__dst;
            v211 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swapDouble(this, *(char *)__dst, v211, v147, v148, v149, v150, v151);
            memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v237) - 2);
            v213 = (HIDWORD(v237) - 1);
            v212 = HIDWORD(v237) == 1;
            HIDWORD(v237) = v213;
            v214 = (char *)__dst;
            __src = (char *)__dst + 2 * v213;
            if (v212)
            {
              v217 = 0;
              v218 = 0;
              v219 = 0;
              v145 = (char *)__dst + 2 * v213;
            }
            else
            {
              v215 = 2 * v213;
              v216 = __dst;
              while (*v216 != v211)
              {
                v216 += 2;
                v215 -= 2;
                if (!v215)
                  goto LABEL_127;
              }
              *v216 = v210;
LABEL_127:
              v219 = 0;
              v220 = v214;
              v221 = (unsigned __int8 *)__src;
              v145 = __src;
              v222 = __src;
              do
              {
                if (*v214 == v214[1])
                {
                  v223 = v214;
                  if (v222 != (char *)__dst + 2 * HIDWORD(v237))
                  {
                    if (v214 == v145)
                    {
                      v223 = v222;
                    }
                    else
                    {
                      v224 = v220 - v145;
                      memmove(v222, v145, v220 - v145);
                      v221 = (unsigned __int8 *)__src;
                      v223 = &v222[v224];
                    }
                  }
                  v145 = v214 + 2;
                  ++v219;
                  v222 = v223;
                }
                v214 += 2;
                v220 += 2;
              }
              while (v214 < (char *)v221);
              v214 = (char *)__dst;
              v217 = HIDWORD(v237);
              v218 = HIDWORD(v237);
              __src = v222;
            }
            v225 = &v214[2 * v217];
            if (v145 != v225)
            {
              memmove(__src, v145, v225 - v145);
              v218 = HIDWORD(v237);
            }
            v185 = v218 - v219;
            v155 = v226;
          }
          HIDWORD(v237) = v185;
LABEL_101:
          ;
        }
        while (v185);
        v200 = __dst;
        if (v155 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v237) = 0;
          WTF::fastFree((unint64_t)v200, v145, v146, v147, v148, v149, v150, v151);
        }
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v154, 1, v147, v148, v149, v150, v151);
      if ((_DWORD)v152 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v153, 0, v156, v157, v158, v159, v160);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v152 << 35) + 0x380000001ALL, 0, v156, v157, v158, v159, v160);
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationDoubleToStringWithValidRadix, v161, v162, v163, v164, v165, v166, (int *)&__dst);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v167, v168, v169, v170, v171, v172);
      v173 = v243;
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v243, v174, v175, v176, v177, v178, v179);
      v180 = *((_DWORD *)v173 + 12);
      *((_DWORD *)this + 1194) = v180;
      *((_DWORD *)this + 1195) = 4;
      v181 = ~v180;
      if (v181 < *((unsigned int *)this + 1001))
      {
        v182 = *((_QWORD *)this + 499) + 24 * (int)v181;
        v183 = *((_DWORD *)v173 + 13);
        *(_QWORD *)v182 = v173;
        *(_DWORD *)(v182 + 8) = v183;
        *(_BYTE *)(v182 + 12) = 6;
        *(_DWORD *)(v182 + 13) = 0;
        *(_BYTE *)(v182 + 17) = 0;
        --*((_DWORD *)this + 1196);
        v184 = (char *)this + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v137];
        --*((_DWORD *)v184 + 1244);
        return;
      }
    }
    __break(0xC471u);
LABEL_149:
    JUMPOUT(0x197BE32D8);
  }
  if ((_DWORD)v10 != 52)
  {
    __break(0xC471u);
    goto LABEL_149;
  }
  JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand((uint64_t)&__dst, (uint64_t)this, v9, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v207 = *((unsigned int *)this + 1194);
  if ((_DWORD)v207 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v207, v201, v202, v203, v204, v205, v206);
  }
  v208 = v238[0];
  if (v238[0] == 255)
  {
    v208 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52((JSC::DFG::SpeculativeJIT *)__dst, v237, 3, v202, v203, v204, v205, v206);
    v238[0] = v208;
  }
  JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(JSC::DFG::Node *,int)::$_0::operator()<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long,int),JSC::ARM64Registers::RegisterID>((uint64_t)v241, v208, v201, v202, v203, v204, v205, v206);
  --*((_DWORD *)this + 1196);
  v209 = v238[0];
  if (v238[0] > 15)
    v209 = -1;
  --*((_DWORD *)__dst + 3 * v209 + 1196);
}

void JSC::DFG::SpeculativeJIT::speculateStringObject(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[12];

  if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0xFFFFD3FF00020008, a4, a5, a6, a7, a8))
  {
    JSC::AssemblyHelpers::branchIfNotType((uint64_t)v17, a1, a3, 19532, v11, v12, v13, v14);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)a3 << 32) | 0x80000000), a2, 0xFFFFD3FF00020008, (uint64_t)v17, 1uLL, v15, v16);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  JSC::AssemblerBuffer *v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  _BYTE v63[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  v13 = &v62;
  if ((_DWORD)a6 != 1)
  {
    v62 = a6 | 0x100;
    v60 = 1;
    v59 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v63[v15 - 1] & 0x40) != 0)
        {
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v16 |= 1 << v63[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v63[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_57;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v63[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_57;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v63[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v11 + 200);
          if (v30 + 4 > *(_DWORD *)(v11 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v59, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v11 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v11 + 56) + v30) = v29;
          *(_DWORD *)(v11 + 200) += 4;
          v17 = v60;
        }
        a1 = (int *)memmove(&v63[v23 - 2], &v63[v23], 2 * v17 - v23 - 2);
        v14 = v60 - 1;
        goto LABEL_32;
      }
      v57 = v13;
      v31 = HIBYTE(v62);
      v32 = v62;
      JSC::MacroAssemblerARM64::swap(v11, (char)v62, SHIBYTE(v62), a4, a5, a6, a7, a8);
      a1 = (int *)memmove(&v62, v63, 2 * v60 - 2);
      v33 = v60 - 1;
      v28 = v60 == 1;
      v61 = v33;
      v34 = (char *)&v62;
      v35 = &v63[2 * v33 - 2];
      if (v28)
      {
        v36 = 0;
        v37 = 0;
        v58 = 0;
        a2 = &v63[2 * v33 - 2];
      }
      else
      {
        v39 = 2 * v33;
        v40 = &v62;
        while (*(unsigned __int8 *)v40 != v31)
        {
          ++v40;
          v39 -= 2;
          if (!v39)
            goto LABEL_43;
        }
        *(_BYTE *)v40 = v32;
LABEL_43:
        v58 = 0;
        v41 = (char *)&v62;
        a2 = (unsigned __int8 *)v35;
        v42 = v35;
        do
        {
          if (*v34 == v34[1])
          {
            v43 = v34;
            if (v42 != &v63[2 * v61 - 2])
            {
              if (v34 == (char *)a2)
              {
                v43 = v42;
              }
              else
              {
                v44 = v41 - (char *)a2;
                a1 = (int *)memmove(v42, a2, v41 - (char *)a2);
                v43 = &v42[v44];
              }
            }
            a2 = (unsigned __int8 *)(v34 + 2);
            ++v58;
            v42 = v43;
          }
          v34 += 2;
          v41 += 2;
        }
        while (v34 < v35);
        v36 = v61;
        v37 = v61;
        v35 = v42;
      }
      v38 = &v63[2 * v36 - 2];
      if (a2 != v38)
      {
        a1 = (int *)memmove(v35, a2, v38 - a2);
        v37 = v61;
      }
      v14 = v37 - v58;
      v13 = v57;
LABEL_32:
      v60 = v14;
LABEL_33:
      ;
    }
    while (v14);
    a1 = (int *)&v62;
    if (v13 == &v62)
      goto LABEL_54;
LABEL_58:
    if (a1)
      WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_54:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v45, v46, v47, v48, v49, v50, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v51, v52, v53, v54, v55, v56);
}

void JSC::DFG::SpeculativeJIT::compileFunctionToString(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x8_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int8x8_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  JSC::DFG::Node *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF *v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  WTF *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  _DWORD v179[3];
  unsigned int v180[2];
  char v181;
  __int16 v182;
  char v183;
  _DWORD v184[3];
  unsigned int v185[3];
  _DWORD v186[3];
  _DWORD v187[3];
  WTF *v188;
  uint64_t v189;
  _BYTE v190[24];
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  unsigned __int8 v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 v197;
  unsigned int v198;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v195, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v193, this, v10, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v191, this, v16, v17, v18, v19, v20, v21);
  v188 = (WTF *)v190;
  v189 = 2;
  v28 = *((_QWORD *)a2 + 3);
  v29 = v197;
  if (v197 == 255)
  {
    v29 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v195, v196, v22, v23, v24, v25, v26, v27);
    v197 = v29;
  }
  JSC::DFG::SpeculativeJIT::speculateFunction((uint64_t)this, v28, (char)v29, v23, v24, v25, v26, v27);
  v36 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v37 = v197;
  if (v197 == 255)
  {
    v37 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v195, v196, v30, v31, v32, v33, v34, v35);
    v197 = v37;
  }
  JSC::AssemblyHelpers::emitLoadStructure(this, v36, v37, (char)v192, v32, v33, v34, v35);
  JSC::AssemblyHelpers::loadCompactPtr(this, v192 | 0x4C00000000, (char)v192, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v192, (uint64_t)&JSC::JSBoundFunction::s_info, v43, v44, v45, v46, (uint64_t)v187);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v188, v187, v47, v48, v49, v50, v51, v52);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v192, (uint64_t)&JSC::JSRemoteFunction::s_info, v53, v54, v55, v56, (uint64_t)v186);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v188, v186, v57, v58, v59, v60, v61, v62);
  v69 = v197;
  if (v197 == 255)
  {
    v69 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v195, v196, v63, v64, v65, v66, v67, v68);
    v197 = v69;
  }
  JSC::DFG::getExecutable((uint64_t)this, v69, (char)v194, v64, v65, v66, v67, v68);
  JSC::MacroAssemblerARM64::branch8((uint64_t)v185, (uint64_t)this, v194 | 0x500000000, v70, v71, v72, v73, v74);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v194 | 0x4800000000, (char)v192, v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v192, 0xFFFFFFFFLL, v80, v81, v82, v83, (uint64_t)v184, v84);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v188, v184, v85, v86, v87, v88, v89, v90);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v192 | 0x2800000000, (char)v192, v91, v92, v93, v94, v95);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v96, v97, v98, v99, v100, v101, v102, (int *)&v198);
  JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v103, v104, v105, v106, v107, v108);
  if (*((_BYTE *)this + 328))
    v115 = 69;
  else
    v115 = 65;
  v180[0] = v198;
  v180[1] = 0;
  v181 = v115;
  v182 = 15;
  v183 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v185, (uint64_t)this, v109, v110, v111, v112, v113, v114);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v194 | 0x4800000000, (char)v192, v116, v117, v118, v119, v120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v180, (uint64_t)this, v121, v122, v123, v124, v125, v126);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v192, 0xFFFFFFFFLL, v127, v128, v129, v130, (uint64_t)v179, v131);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v188, v179, v132, v133, v134, v135, v136, v137);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v175, (uint64_t *)&v188);
  v138 = v192;
  v151 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v139, v140, v141, v142, v143, v144);
  v153 = v152;
  v154 = v197;
  if (v197 == 255)
  {
    v154 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v195, v196, v145, v146, v147, v148, v149, v150);
    v197 = v154;
  }
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v178, (uint64_t *)&v175, this, (char)v138, v151, v153, v154);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v178);
  v162 = v178;
  v178 = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = v175;
  if (&v177 != (uint64_t *)v175 && v175)
  {
    v175 = 0;
    v176 = 0;
    WTF::fastFree((unint64_t)v163, v155, v156, v157, v158, v159, v160, v161);
  }
  JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, (char)v192, a2, 0, v158, v159, v160, v161);
  v171 = v188;
  if (v190 != (_BYTE *)v188 && v188)
  {
    v188 = 0;
    LODWORD(v189) = 0;
    WTF::fastFree((unint64_t)v171, v164, v165, v166, v167, v168, v169, v170);
  }
  if (v191)
  {
    v172 = (char)v192;
    if ((char)v192 != -1)
    {
      if ((char)v192 > 15)
        v172 = -1;
      --*(_DWORD *)(v191 + 12 * v172 + 4784);
    }
  }
  if (v193)
  {
    v173 = (char)v194;
    if ((char)v194 != -1)
    {
      if ((char)v194 > 15)
        v173 = -1;
      --*(_DWORD *)(v193 + 12 * v173 + 4784);
    }
  }
  if ((v196 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v174 = (char)v197;
    if ((char)v197 > 15)
      v174 = -1;
    --*(_DWORD *)(v195 + 12 * v174 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFFBLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 26, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 4uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

unsigned int *JSC::DFG::getExecutable(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27[3];

  JSC::MacroAssemblerARM64::load64(a1, a2 | 0x1800000000, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, a3, 1, v10, v11, v12, v13, (uint64_t)v27, v14);
  JSC::MacroAssemblerARM64::load64(a1, a3 | 0x2F00000000, a3, v15, v16, v17, v18, v19);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v27, a1, v20, v21, v22, v23, v24, v25);
}

void JSC::MacroAssemblerARM64::branch8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load8(a2, a3, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a2, 0, 17, 8, v10, v11, v12, v13, a1);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE *v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v53;
  unsigned int v54;
  _BYTE v55[24];
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[32];

  v13 = *((unsigned int *)a2 + 3);
  v53 = (WTF *)v55;
  v54 = v13;
  if (v13 < 3)
  {
    v14 = v55;
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  else
  {
    if (v13 >= 0x15555556)
      goto LABEL_47;
    v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v13));
    v53 = (WTF *)v14;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  v15 = *a2;
  v16 = *a2 + 12 * v13;
  do
  {
    *(_DWORD *)v14 = *(_DWORD *)v15;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
    v15 += 12;
    v14 += 12;
  }
  while (v15 != v16);
LABEL_8:
  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = v54;
  v56 = (WTF *)v59;
  v57 = 2;
  v58 = v54;
  if (v54 < 3)
  {
    v19 = v59;
  }
  else
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE43E8);
    }
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
    v57 = 12 * v54 / 0xC;
    v56 = (WTF *)v19;
    v18 = v54;
  }
  if (v18)
  {
    v20 = v53;
    v21 = (WTF *)((char *)v53 + 12 * v18);
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)((char *)v20 + 4);
      v20 = (WTF *)((char *)v20 + 12);
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  v51 = a5;
  if (v58 < 3)
  {
    v23 = a6;
    v25 = v63;
  }
  else
  {
    if (v58 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE43F0);
    }
    v23 = a6;
    v24 = 12 * v58;
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
    v61 = (v24 & 0xFFFFFFFC) / 0xC;
    v60 = (WTF *)v25;
    v22 = v58;
  }
  if (v22)
  {
    v26 = v56;
    v27 = (WTF *)((char *)v56 + 12 * v22);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v62;
  v64 = v67;
  v65 = 2;
  v66 = v62;
  if (v62 < 3)
  {
    v30 = v67;
    if (!v62)
      goto LABEL_29;
LABEL_27:
    v31 = v60;
    v32 = (WTF *)((char *)v60 + 12 * v28);
    do
    {
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)((char *)v31 + 4);
      v31 = (WTF *)((char *)v31 + 12);
      v30 += 12;
    }
    while (v31 != v32);
    goto LABEL_29;
  }
  if (v62 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197BE43E0);
  }
  v29 = 12 * v62;
  v30 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
  v65 = (v29 & 0xFFFFFFFC) / 0xC;
  v64 = v30;
  v28 = v62;
  if (v62)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v64, a3);
  v40 = (unint64_t)v64;
  if (v67 != v64 && v64 != 0)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  }
  *(_QWORD *)v17 = off_1E3573CE0;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 100) = 0;
  *(_BYTE *)(v17 + 102) = a4;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  *(_QWORD *)(v17 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v17 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v38, v39);
  v49 = v60;
  if (v63 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v17 = &off_1E3573CB0;
  *(_QWORD *)(v17 + 152) = operationFunctionToString;
  *(_QWORD *)(v17 + 160) = v51;
  *(_QWORD *)(v17 + 168) = v23;
  *(_BYTE *)(v17 + 176) = a7;
  *a1 = v17;
  v50 = v56;
  if (v59 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
  }
  if (v55 != (_BYTE *)v53)
  {
    if (v53)
      WTF::fastFree((unint64_t)v53, v42, v43, v44, v45, v46, v47, v48);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,int,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int64_t v61;
  unsigned __int8 *v62;
  char v63;
  int v64;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v8 = a7;
  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  if ((_DWORD)a6 != 1)
  {
    v69 = a6 | 0x100;
    v67 = 1;
    v66 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v70[v15 - 1] & 0x40) != 0)
        {
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        v16 |= 1 << v70[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v70[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_63;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v70[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_63;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v70[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v66, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v67;
        }
        memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
        v14 = v67 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v69);
      v63 = v69;
      JSC::MacroAssemblerARM64::swap(v12, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
      memmove(&v69, v70, 2 * v67 - 2);
      v32 = v67 - 1;
      v28 = v67 == 1;
      v68 = v32;
      v33 = (unsigned __int8 *)&v69;
      __src = &v70[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v64 = 0;
        a2 = &v70[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v69;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v63;
LABEL_43:
        v64 = 0;
        v39 = (char *)&v69;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v70[2 * v68 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v61 = v39 - (char *)a2;
                v62 = v40;
                memmove(v40, a2, v39 - (char *)a2);
                v41 = &v62[v61];
              }
            }
            a2 = v33 + 2;
            ++v64;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v68;
        v35 = v68;
        __src = v40;
      }
      v36 = &v70[2 * v34 - 2];
      if (a2 != v36)
      {
        memmove(__src, a2, v36 - a2);
        v35 = v68;
      }
      v14 = v35 - v64;
LABEL_32:
      v67 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v12, (JSC::ARM64LogicalImmediate *)v8, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a5, 0, v42, v43, v44, v45, v46);
  else
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, v42, v43, v44, v45, v46);
  JSC::DFG::SpeculativeJIT::appendCall(v12, (uint64_t)operationInt32ToStringWithValidRadix, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v53, v54, v55, v56, v57, v58);
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v11 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v11 & 0x1F | 0xAA0003E0;
    }
    v60 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v59 = v60;
    v11 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v60 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_64:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v59 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v59) = (_DWORD)a1;
    *(_DWORD *)v12 += 4;
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(JSC::DFG::Node *,int)::$_0::operator()<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,long long,int),JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::DFG::SpeculativeJIT *v10;
  JSC::DFG::Node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  JSC::ARM64LogicalImmediate *v27;
  __int16 *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint8x8_t v36;
  __int32 v37;
  uint8x8_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  char v48;
  uint64_t v49;
  unsigned __int8 *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  char *v58;
  unsigned __int8 *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  JSC::DFG::Node *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *result;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  __int16 *v90;
  int v91;
  void *__dst;
  int v93;
  unsigned int v94;
  __int16 v95;

  v8 = a2;
  v10 = *(JSC::DFG::SpeculativeJIT **)a1;
  JSC::DFG::SpeculativeJIT::flushRegisters(*(JSC::DFG::SpeculativeJIT **)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v10, **(JSC::DFG::JITCompiler ***)(a1 + 8), v11, v12, v13, v14, v15, v16);
  v25 = v17;
  v26 = (uint64_t)v18;
  v27 = (JSC::ARM64LogicalImmediate *)**(unsigned int **)(a1 + 16);
  v28 = &v95;
  __dst = &v95;
  v93 = 1;
  if (v8 != 1)
  {
    v95 = v8 | 0x100;
    v94 = 1;
    v29 = 1;
    do
    {
      v30 = 0;
      v31 = 0;
      v32 = (char *)__dst;
      v33 = v29;
      do
      {
        if ((*((_BYTE *)__dst + v30 + 1) & 0x40) != 0)
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        v31 |= 1 << *((_BYTE *)__dst + v30 + 1);
        v30 += 2;
      }
      while (2 * v29 != v30);
      v34 = 0;
      do
      {
        v35 = *((_BYTE *)__dst + v34) & 0x7F;
        if (v35 >= 0x40)
          goto LABEL_58;
        v31 &= ~(1 << v35);
        v34 += 2;
      }
      while (2 * v29 != v34);
      v36 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
      v36.i16[0] = vaddlv_u8(v36);
      v37 = v36.i32[0];
      v38 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.i32[0] + v37)
      {
        v39 = 0;
        if (v29 <= 1)
          v40 = 1;
        else
          v40 = v29;
        v41 = 2 * v40;
        while (1)
        {
          v42 = *((unsigned __int8 *)__dst + v39 + 1);
          if ((v42 & 0x7Fu) >= 0x40)
            goto LABEL_58;
          if (((v31 >> (v42 & 0x7F)) & 1) != 0)
            break;
          v39 += 2;
          if (v41 == v39)
            goto LABEL_33;
        }
        v43 = *((unsigned __int8 *)__dst + v39);
        if (v43 != v42)
        {
          if ((char)v43 == 63)
          {
            if ((char)v42 == 31)
              goto LABEL_27;
            v45 = v42 & 0x1F | 0xD2800000;
          }
          else
          {
            v44 = v42 == 31 || (char)v43 == 31;
            if (!v44)
            {
              v45 = v42 & 0xFFE0FFFF | ((v43 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v45 = (char)v42 | (32 * (char)v43) | 0x91000000;
          }
LABEL_28:
          v46 = *((_DWORD *)v10 + 50);
          if (v46 + 4 > *((_DWORD *)v10 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v10 + 56), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
            v46 = *((_DWORD *)v10 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v10 + 7) + v46) = v45;
          *((_DWORD *)v10 + 50) += 4;
          v32 = (char *)__dst;
          v33 = v94;
        }
        v17 = (unint64_t)memmove(&v32[v39], &v32[v39 + 2], 2 * v33 - v39 - 2);
        v29 = v94 - 1;
        goto LABEL_32;
      }
      v90 = v28;
      v47 = *(_BYTE *)__dst;
      v48 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)v10, *(char *)__dst, v48, v20, v21, v22, v23, v24);
      v17 = (unint64_t)memmove(__dst, (char *)__dst + 2, 2 * v94 - 2);
      v49 = v94 - 1;
      v44 = v94 == 1;
      v94 = v49;
      v50 = (unsigned __int8 *)__dst;
      v51 = (char *)__dst + 2 * v49;
      if (v44)
      {
        v52 = 0;
        v53 = 0;
        v91 = 0;
        v18 = (char *)__dst + 2 * v49;
      }
      else
      {
        v55 = 2 * v49;
        v56 = __dst;
        while (*v56 != v48)
        {
          v56 += 2;
          v55 -= 2;
          if (!v55)
            goto LABEL_43;
        }
        *v56 = v47;
LABEL_43:
        v91 = 0;
        v57 = v50;
        v18 = v51;
        v58 = v51;
        do
        {
          if (*v50 == v50[1])
          {
            v59 = v50;
            if (v58 != (char *)__dst + 2 * v94)
            {
              if (v50 == (unsigned __int8 *)v18)
              {
                v59 = (unsigned __int8 *)v58;
              }
              else
              {
                v60 = v57 - (unsigned __int8 *)v18;
                v17 = (unint64_t)memmove(v58, v18, v57 - (unsigned __int8 *)v18);
                v59 = (unsigned __int8 *)&v58[v60];
              }
            }
            v18 = (char *)(v50 + 2);
            ++v91;
            v58 = (char *)v59;
          }
          v50 += 2;
          v57 += 2;
        }
        while (v50 < (unsigned __int8 *)v51);
        v50 = (unsigned __int8 *)__dst;
        v52 = v94;
        v53 = v94;
        v51 = v58;
      }
      v54 = (char *)&v50[2 * v52];
      if (v18 != v54)
      {
        v17 = (unint64_t)memmove(v51, v18, v54 - v18);
        v53 = v94;
      }
      v29 = v53 - v91;
      v28 = v90;
LABEL_32:
      v94 = v29;
LABEL_33:
      ;
    }
    while (v29);
    v17 = (unint64_t)__dst;
    if (v28 == __dst)
      goto LABEL_54;
LABEL_59:
    if (v17)
    {
      __dst = 0;
      v93 = 0;
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
LABEL_54:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v10, v27, 2, v20, v21, v22, v23, v24);
  if ((_DWORD)v25 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v10, v26, 0, v61, v62, v63, v64, v65);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v10, (v25 << 35) + 0x380000001ALL, 0, v61, v62, v63, v64, v65);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v10, (uint64_t)operationInt52ToStringWithValidRadix, v66, v67, v68, v69, v70, v71, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v10, 1, v72, v73, v74, v75, v76, v77);
  v78 = **(JSC::DFG::Node ***)(a1 + 8);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v10, v78, v79, v80, v81, v82, v83, v84);
  v86 = *((_DWORD *)v78 + 12);
  *((_DWORD *)v10 + 1194) = v86;
  *((_DWORD *)v10 + 1195) = 4;
  v87 = ~v86;
  if (v87 >= *((unsigned int *)v10 + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v88 = *((_DWORD *)v78 + 13);
    v89 = *((_QWORD *)v10 + 499) + 24 * (int)v87;
    *(_QWORD *)v89 = v78;
    *(_DWORD *)(v89 + 8) = v88;
    *(_BYTE *)(v89 + 12) = 6;
    *(_DWORD *)(v89 + 13) = 0;
    *(_BYTE *)(v89 + 17) = 0;
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNumberToStringWithRadix(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  char v35;
  JSC::DFG::Node *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint8x8_t v58;
  __int32 v59;
  uint8x8_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  _BYTE *v76;
  unsigned __int8 *v77;
  char *v78;
  unsigned __int8 *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *result;
  int v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  char v105;
  char *v106;
  uint64_t v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  JSC::DFG::Node *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::AssemblerBuffer *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint8x8_t v133;
  __int32 v134;
  uint8x8_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v145;
  char v146;
  char v147;
  uint64_t v148;
  unsigned __int8 *v149;
  JSC::AssemblerBuffer *v150;
  uint64_t v151;
  _BYTE *v152;
  unsigned __int8 *v153;
  char *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int v157;
  char *v158;
  int v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  unsigned __int8 v183;
  JSC::DFG::Node *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  JSC::AssemblerBuffer *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint8x8_t v206;
  __int32 v207;
  uint8x8_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v218;
  char v219;
  char v220;
  uint64_t v221;
  unsigned __int8 *v222;
  JSC::AssemblerBuffer *v223;
  uint64_t v224;
  _BYTE *v225;
  unsigned __int8 *v226;
  char *v227;
  unsigned __int8 *v228;
  uint64_t v229;
  unsigned int v230;
  char *v231;
  int v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  char *v254;
  uint64_t v255;
  int v256;
  char v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint8x8_t v264;
  __int32 v265;
  uint8x8_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  char v274;
  uint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  unsigned int v281;
  char *v282;
  unsigned __int8 *v283;
  char *v284;
  int v285;
  char *v286;
  int v287;
  void *v288;
  int64_t v289;
  int64_t v290;
  int64_t v291;
  char *v292;
  int v293;
  int v294;
  char *v295;
  char v296;
  int v297;
  JSC::AssemblerBuffer *v298;
  JSC::AssemblerBuffer *v299;
  char *v300;
  char *__src;
  char __srca;
  char *__srcb;
  JSC::AssemblerBuffer *v304;
  JSC::AssemblerBuffer *v305;
  _BOOL4 v306;
  _BOOL4 v307;
  void *__dst;
  int v309;
  unsigned int v310;
  _WORD v311[4];

  v10 = *((_QWORD *)a2 + 4);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  v13 = *(unsigned __int16 *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x12) <= 2u
     && (v12 = **(_QWORD **)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x48), v12 >= 0xFFFE000000000000)
     && (v12 - 2) < 0x23;
  v14 = *((_QWORD *)a2 + 3);
  v15 = (v14 >> 50) & 0x3F;
  if ((_DWORD)v15 == 52)
  {
    if ((v14 & 0xFC000000000000) != 0xD0000000000000)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE60DCLL);
    }
    v26 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v27 = *((unsigned int *)this + 1001);
    if (v26 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE61ACLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v26 + 12))
    {
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, *((_QWORD *)a2 + 3), 3, a4, a5, a6, a7, a8);
      v10 = *((_QWORD *)a2 + 4);
      v27 = *((unsigned int *)this + 1001);
      v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
    }
    else
    {
      v19 = -1;
    }
    v28 = ~*(_DWORD *)(v11 + 48);
    if (v28 >= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE61B4);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v28 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      v30 = v29;
    }
    else
    {
      v30 = -1;
    }
    ++*((_DWORD *)this + 1196);
    v182 = *((unsigned int *)this + 1194);
    if ((_DWORD)v182 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v182, a3, a4, a5, a6, a7, a8);
    }
    if (v19 == 0xFF)
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v14, 3, a4, a5, a6, a7, a8);
    if (v30 == 0xFF)
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      v30 = v183;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v182, a3, a4, a5, a6, a7, a8);
    v197 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v184, v185, v186, v187, v188, v189);
    v198 = (uint64_t)v190;
    v125 = v30;
    __dst = v311;
    v309 = 2;
    if (v19 == 1)
    {
      if (v30 == 2)
        goto LABEL_240;
      v305 = v190;
      v199 = 0;
    }
    else
    {
      v305 = v190;
      v311[0] = v19 | 0x100;
      v199 = 1;
      v310 = 1;
      if (v30 == 2)
        goto LABEL_186;
    }
    v311[v199++] = v30 | 0x200;
    v310 = v199;
    while (1)
    {
LABEL_186:
      v200 = 0;
      v201 = 0;
      v202 = (char *)__dst;
      v203 = v199;
      do
      {
        if ((*((_BYTE *)__dst + v200 + 1) & 0x40) != 0)
          goto LABEL_317;
        v201 |= 1 << *((_BYTE *)__dst + v200 + 1);
        v200 += 2;
      }
      while (2 * v199 != v200);
      v204 = 0;
      do
      {
        v205 = *((_BYTE *)__dst + v204) & 0x7F;
        if (v205 >= 0x40)
          goto LABEL_317;
        v201 &= ~(1 << v205);
        v204 += 2;
      }
      while (2 * v199 != v204);
      v206 = (uint8x8_t)vcnt_s8((int8x8_t)v201);
      v206.i16[0] = vaddlv_u8(v206);
      v207 = v206.i32[0];
      v208 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v201));
      v208.i16[0] = vaddlv_u8(v208);
      if (!(v208.i32[0] + v207))
      {
        v307 = v13;
        v219 = *(_BYTE *)__dst;
        v220 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v220, v192, v193, v194, v195, v196);
        memmove(__dst, (char *)__dst + 2, 2 * v310 - 2);
        v221 = v310 - 1;
        v66 = v310 == 1;
        v310 = v221;
        v222 = (unsigned __int8 *)__dst;
        v223 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v221);
        if (v66)
        {
          v229 = 0;
          v230 = 0;
          v190 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v221);
        }
        else
        {
          v224 = 2 * v221;
          v225 = __dst;
          while (*v225 != v220)
          {
            v225 += 2;
            v224 -= 2;
            if (!v224)
              goto LABEL_214;
          }
          *v225 = v219;
LABEL_214:
          LODWORD(v221) = 0;
          v226 = v222;
          v190 = v223;
          v227 = (char *)v223;
          do
          {
            if (*v222 == v222[1])
            {
              v228 = v222;
              if (v227 != (char *)__dst + 2 * v310)
              {
                v294 = v221;
                v299 = v223;
                if (v222 == (unsigned __int8 *)v190)
                {
                  v228 = (unsigned __int8 *)v227;
                }
                else
                {
                  v291 = v226 - (unsigned __int8 *)v190;
                  memmove(v227, v190, v226 - (unsigned __int8 *)v190);
                  v228 = (unsigned __int8 *)&v227[v291];
                }
                v223 = v299;
                LODWORD(v221) = v294;
              }
              v190 = (JSC::AssemblerBuffer *)(v222 + 2);
              LODWORD(v221) = v221 + 1;
              v227 = (char *)v228;
            }
            v222 += 2;
            v226 += 2;
          }
          while (v222 < (unsigned __int8 *)v223);
          v222 = (unsigned __int8 *)__dst;
          v229 = v310;
          v230 = v310;
          v223 = (JSC::AssemblerBuffer *)v227;
        }
        v231 = (char *)&v222[2 * v229];
        if (v190 != (JSC::AssemblerBuffer *)v231)
        {
          v232 = v221;
          memmove(v223, v190, v231 - (char *)v190);
          LODWORD(v221) = v232;
          v230 = v310;
        }
        v199 = v230 - v221;
        v13 = v307;
        goto LABEL_235;
      }
      v209 = 0;
      v210 = v199 <= 1 ? 1 : v199;
      v211 = 2 * v210;
      while (1)
      {
        v212 = *((unsigned __int8 *)__dst + v209 + 1);
        if ((v212 & 0x7Fu) >= 0x40)
          goto LABEL_317;
        if (((v201 >> (v212 & 0x7F)) & 1) != 0)
          break;
        v209 += 2;
        if (v211 == v209)
          goto LABEL_236;
      }
      v213 = *((unsigned __int8 *)__dst + v209);
      if (v213 != v212)
        break;
LABEL_234:
      memmove(&v202[v209], &v202[v209 + 2], 2 * v203 - v209 - 2);
      v199 = v310 - 1;
LABEL_235:
      v310 = v199;
LABEL_236:
      if (!v199)
      {
        v233 = __dst;
        v198 = (uint64_t)v305;
        if (v311 != __dst && __dst)
        {
          __dst = 0;
          v309 = 0;
          WTF::fastFree((unint64_t)v233, v190, v191, v192, v193, v194, v195, v196);
        }
LABEL_240:
        if ((_DWORD)v197 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v198, 0, v192, v193, v194, v195, v196);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v197 << 35) + 0x380000001ALL, 0, v192, v193, v194, v195, v196);
        if (v13)
          v240 = operationInt52ToStringWithValidRadix;
        else
          v240 = operationInt52ToString;
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v240, v234, v235, v236, v237, v238, v239, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v241, v242, v243, v244, v245, v246);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v247, v248, v249, v250, v251, v252);
        v253 = *((_DWORD *)a2 + 12);
        *((_DWORD *)this + 1194) = v253;
        *((_DWORD *)this + 1195) = 4;
        v181 = ~v253;
        if (v181 >= *((unsigned int *)this + 1001))
          goto LABEL_319;
        goto LABEL_246;
      }
    }
    v214 = (char)v213;
    if ((char)v213 == 63)
    {
      v215 = *((_DWORD *)this + 50);
      v216 = *((_DWORD *)this + 48);
      if ((char)v212 != 31)
      {
        v218 = v212 & 0x1F | 0xD2800000;
        goto LABEL_231;
      }
    }
    else
    {
      v215 = *((_DWORD *)this + 50);
      v216 = *((_DWORD *)this + 48);
      if (v212 != 31 && v214 != 31)
      {
        v218 = v212 & 0xFFE0FFFF | ((v214 & 0x1F) << 16) | 0xAA0003E0;
LABEL_231:
        if (v215 + 4 > v216)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v190, v191, v192, v193, v194, v195, v196);
          v215 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v215) = v218;
        *((_DWORD *)this + 50) += 4;
        v202 = (char *)__dst;
        v203 = v310;
        goto LABEL_234;
      }
    }
    v218 = (char)v212 | (32 * v214) | 0x91000000;
    goto LABEL_231;
  }
  if ((_DWORD)v15 == 49)
  {
    v20 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v21 = *((unsigned int *)this + 1001);
    if (v20 >= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE619CLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
    {
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      v10 = *((_QWORD *)a2 + 4);
      v21 = *((unsigned int *)this + 1001);
      v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
    }
    else
    {
      v22 = -1;
    }
    v23 = ~*(_DWORD *)(v11 + 48);
    if (v23 >= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE61A4);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      v25 = v24;
    }
    else
    {
      v25 = -1;
    }
    ++*((_DWORD *)this + 1196);
    v34 = *((unsigned int *)this + 1194);
    if ((_DWORD)v34 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v34, a3, a4, a5, a6, a7, a8);
    }
    if (v22 == -1)
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    if (v25 == -1)
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
      v25 = v35;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v34, a3, a4, a5, a6, a7, a8);
    v49 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v36, v37, v38, v39, v40, v41);
    v50 = (uint64_t)v42;
    __dst = v311;
    v309 = 1;
    if (v25 == 1)
    {
LABEL_88:
      __dst = v311;
      v309 = 1;
      if (v22)
      {
        v311[0] = v22;
        v310 = 1;
        v259 = 1;
        do
        {
          v260 = 0;
          v261 = 0;
          do
          {
            if (((*((_BYTE *)__dst + v260 + 1) + 32) & 0x40) != 0)
              goto LABEL_317;
            v261 |= 1 << (*((_BYTE *)__dst + v260 + 1) + 32);
            v260 += 2;
          }
          while (2 * v259 != v260);
          v262 = 0;
          do
          {
            v263 = (*((_BYTE *)__dst + v262) + 32) & 0x7F;
            if (v263 >= 0x40)
              goto LABEL_317;
            v261 &= ~(1 << v263);
            v262 += 2;
          }
          while (2 * v259 != v262);
          v264 = (uint8x8_t)vcnt_s8((int8x8_t)v261);
          v264.i16[0] = vaddlv_u8(v264);
          v265 = v264.i32[0];
          v266 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v261));
          v266.i16[0] = vaddlv_u8(v266);
          if (v266.i32[0] + v265)
          {
            v267 = 0;
            if (v259 <= 1)
              v268 = 1;
            else
              v268 = v259;
            v269 = 2 * v268;
            while (1)
            {
              v270 = *((char *)__dst + v267 + 1);
              v271 = (*((_BYTE *)__dst + v267 + 1) + 32) & 0x7F;
              if (v271 >= 0x40)
                goto LABEL_317;
              if (((v261 >> v271) & 1) != 0)
                break;
              v267 += 2;
              if (v269 == v267)
                goto LABEL_274;
            }
            v272 = *((char *)__dst + v267);
            v273 = *((_DWORD *)this + 50);
            if (v273 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v42, v43, v44, v45, v46, v47, v48);
              v273 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v273) = v270 | (32 * v272) | 0x1E604000;
            *((_DWORD *)this + 50) += 4;
            memmove((char *)__dst + v267, (char *)__dst + v267 + 2, 2 * v310 - v267 - 2);
            v259 = v310 - 1;
          }
          else
          {
            v274 = *((_BYTE *)__dst + 1);
            __srca = *(_BYTE *)__dst;
            JSC::MacroAssemblerARM64::swapDouble(this, *(char *)__dst, v274, v44, v45, v46, v47, v48);
            memmove(__dst, (char *)__dst + 2, 2 * v310 - 2);
            v275 = v310 - 1;
            v66 = v310 == 1;
            v310 = v275;
            v276 = (char *)__dst;
            v277 = (char *)__dst + 2 * v275;
            if (v66)
            {
              v280 = 0;
              v281 = 0;
              v42 = (char *)__dst + 2 * v275;
            }
            else
            {
              v278 = 2 * v275;
              v279 = __dst;
              while (*v279 != v274)
              {
                v279 += 2;
                v278 -= 2;
                if (!v278)
                  goto LABEL_283;
              }
              *v279 = __srca;
LABEL_283:
              LODWORD(v275) = 0;
              v282 = v276;
              v283 = (unsigned __int8 *)v277;
              v42 = v277;
              v295 = v277;
              do
              {
                if (*v276 == v276[1])
                {
                  v284 = v276;
                  if (v277 != (char *)__dst + 2 * v310)
                  {
                    if (v276 == v42)
                    {
                      v284 = v277;
                    }
                    else
                    {
                      v300 = v277;
                      __srcb = (char *)(v282 - v42);
                      v285 = v275;
                      memmove(v277, v42, v282 - v42);
                      v283 = (unsigned __int8 *)v295;
                      LODWORD(v275) = v285;
                      v284 = &__srcb[(_QWORD)v300];
                    }
                  }
                  v42 = v276 + 2;
                  LODWORD(v275) = v275 + 1;
                  v277 = v284;
                }
                v276 += 2;
                v282 += 2;
              }
              while (v276 < (char *)v283);
              v276 = (char *)__dst;
              v280 = v310;
              v281 = v310;
            }
            v286 = &v276[2 * v280];
            if (v42 != v286)
            {
              v287 = v275;
              memmove(v277, v42, v286 - v42);
              LODWORD(v275) = v287;
              v281 = v310;
            }
            v259 = v281 - v275;
          }
          v310 = v259;
LABEL_274:
          ;
        }
        while (v259);
        v288 = __dst;
        if (v311 != __dst && __dst)
        {
          __dst = 0;
          v309 = 0;
          WTF::fastFree((unint64_t)v288, v42, v43, v44, v45, v46, v47, v48);
        }
      }
      if ((_DWORD)v49 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v50, 0, v44, v45, v46, v47, v48);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v49 << 35) + 0x380000001ALL, 0, v44, v45, v46, v47, v48);
      if (v13)
        v87 = operationDoubleToStringWithValidRadix;
      else
        v87 = operationDoubleToString;
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v87, v81, v82, v83, v84, v85, v86, (int *)&__dst);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v88, v89, v90, v91, v92, v93);
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v94, v95, v96, v97, v98, v99);
      v101 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 1194) = v101;
      *((_DWORD *)this + 1195) = 4;
      v102 = ~v101;
      if (v102 < *((unsigned int *)this + 1001))
      {
        v103 = *((_QWORD *)this + 499) + 24 * (int)v102;
        v104 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v103 = a2;
        *(_DWORD *)(v103 + 8) = v104;
        *(_BYTE *)(v103 + 12) = 6;
        *(_DWORD *)(v103 + 13) = 0;
        *(_BYTE *)(v103 + 17) = 0;
        --*((_DWORD *)this + 1196);
        if (v25 > 15)
          v105 = -1;
        else
          v105 = v25;
        --*((_DWORD *)this + 3 * v105 + 1196);
        v106 = (char *)this
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v22]
             + 4976;
        goto LABEL_253;
      }
      goto LABEL_318;
    }
    v311[0] = v25 | 0x100;
    v310 = 1;
    v51 = 1;
    while (1)
    {
      v52 = 0;
      v53 = 0;
      v54 = (char *)__dst;
      v55 = v51;
      do
      {
        if ((*((_BYTE *)__dst + v52 + 1) & 0x40) != 0)
          goto LABEL_317;
        v53 |= 1 << *((_BYTE *)__dst + v52 + 1);
        v52 += 2;
      }
      while (2 * v51 != v52);
      v56 = 0;
      do
      {
        v57 = *((_BYTE *)__dst + v56) & 0x7F;
        if (v57 >= 0x40)
          goto LABEL_317;
        v53 &= ~(1 << v57);
        v56 += 2;
      }
      while (2 * v51 != v56);
      v58 = (uint8x8_t)vcnt_s8((int8x8_t)v53);
      v58.i16[0] = vaddlv_u8(v58);
      v59 = v58.i32[0];
      v60 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v53));
      v60.i16[0] = vaddlv_u8(v60);
      if (!(v60.i32[0] + v59))
      {
        v69 = *((_BYTE *)__dst + 1);
        v296 = *(_BYTE *)__dst;
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v69, v44, v45, v46, v47, v48);
        memmove(__dst, (char *)__dst + 2, 2 * v310 - 2);
        v70 = v310 - 1;
        v66 = v310 == 1;
        v310 = v70;
        v71 = (unsigned __int8 *)__dst;
        __src = (char *)__dst + 2 * v70;
        if (v66)
        {
          v72 = 0;
          v73 = 0;
          v297 = 0;
          v42 = (char *)__dst + 2 * v70;
        }
        else
        {
          v75 = 2 * v70;
          v76 = __dst;
          while (*v76 != v69)
          {
            v76 += 2;
            v75 -= 2;
            if (!v75)
              goto LABEL_77;
          }
          *v76 = v296;
LABEL_77:
          v297 = 0;
          v77 = v71;
          v42 = __src;
          v78 = __src;
          do
          {
            if (*v71 == v71[1])
            {
              v79 = v71;
              if (v78 != (char *)__dst + 2 * v310)
              {
                if (v71 == (unsigned __int8 *)v42)
                {
                  v79 = (unsigned __int8 *)v78;
                }
                else
                {
                  v289 = v77 - (unsigned __int8 *)v42;
                  v292 = v78;
                  memmove(v78, v42, v77 - (unsigned __int8 *)v42);
                  v79 = (unsigned __int8 *)&v292[v289];
                }
              }
              v42 = (char *)(v71 + 2);
              ++v297;
              v78 = (char *)v79;
            }
            v71 += 2;
            v77 += 2;
          }
          while (v71 < (unsigned __int8 *)__src);
          v71 = (unsigned __int8 *)__dst;
          v72 = v310;
          v73 = v310;
          __src = v78;
        }
        v74 = (char *)&v71[2 * v72];
        if (v42 != v74)
        {
          memmove(__src, v42, v74 - v42);
          v73 = v310;
        }
        v51 = v73 - v297;
        goto LABEL_66;
      }
      v61 = 0;
      v62 = v51 <= 1 ? 1 : v51;
      v63 = 2 * v62;
      while (1)
      {
        v64 = *((unsigned __int8 *)__dst + v61 + 1);
        if ((v64 & 0x7Fu) >= 0x40)
          goto LABEL_317;
        if (((v53 >> (v64 & 0x7F)) & 1) != 0)
          break;
        v61 += 2;
        if (v63 == v61)
          goto LABEL_67;
      }
      v65 = *((unsigned __int8 *)__dst + v61);
      if (v65 != v64)
        break;
LABEL_65:
      memmove(&v54[v61], &v54[v61 + 2], 2 * v55 - v61 - 2);
      v51 = v310 - 1;
LABEL_66:
      v310 = v51;
LABEL_67:
      if (!v51)
      {
        v80 = __dst;
        if (v311 != __dst && __dst)
        {
          __dst = 0;
          v309 = 0;
          WTF::fastFree((unint64_t)v80, v42, v43, v44, v45, v46, v47, v48);
        }
        goto LABEL_88;
      }
    }
    if ((char)v65 == 63)
    {
      if ((char)v64 != 31)
      {
        v67 = v64 & 0x1F | 0xD2800000;
        goto LABEL_62;
      }
    }
    else
    {
      v66 = v64 == 31 || (char)v65 == 31;
      if (!v66)
      {
        v67 = v64 & 0xFFE0FFFF | ((v65 & 0x1F) << 16) | 0xAA0003E0;
LABEL_62:
        v68 = *((_DWORD *)this + 50);
        if (v68 + 4 > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v42, v43, v44, v45, v46, v47, v48);
          v68 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v68) = v67;
        *((_DWORD *)this + 50) += 4;
        v54 = (char *)__dst;
        v55 = v310;
        goto LABEL_65;
      }
    }
    v67 = (char)v64 | (32 * (char)v65) | 0x91000000;
    goto LABEL_62;
  }
  if ((_DWORD)v15 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197BE618CLL);
  }
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v17 = *((unsigned int *)this + 1001);
  if (v16 >= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197BE6194);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v19 = v18;
    v10 = *((_QWORD *)a2 + 4);
    v17 = *((unsigned int *)this + 1001);
    v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  }
  else
  {
    v19 = -1;
  }
  v31 = ~*(_DWORD *)(v11 + 48);
  if (v31 >= v17)
  {
    __break(0xC471u);
LABEL_317:
    __break(1u);
LABEL_318:
    __break(0xC471u);
    JUMPOUT(0x197BE61C4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v31 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v33 = v32;
  }
  else
  {
    v33 = -1;
  }
  ++*((_DWORD *)this + 1196);
  v107 = *((unsigned int *)this + 1194);
  if ((_DWORD)v107 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v107, a3, a4, a5, a6, a7, a8);
  }
  if (v19 == 0xFF)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    v19 = v108;
  }
  if (v33 == 0xFF)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    v33 = v109;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v107, a3, a4, a5, a6, a7, a8);
  v123 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v110, v111, v112, v113, v114, v115);
  v124 = (uint64_t)v116;
  v125 = v33;
  __dst = v311;
  v309 = 2;
  if (v19 == 1)
  {
    if (v33 == 2)
      goto LABEL_166;
    v304 = v116;
    v126 = 0;
  }
  else
  {
    v304 = v116;
    v311[0] = v19 | 0x100;
    v126 = 1;
    v310 = 1;
    if (v33 == 2)
      goto LABEL_112;
  }
  v311[v126++] = v33 | 0x200;
  v310 = v126;
  do
  {
LABEL_112:
    v127 = 0;
    v128 = 0;
    v129 = (char *)__dst;
    v130 = v126;
    do
    {
      if ((*((_BYTE *)__dst + v127 + 1) & 0x40) != 0)
        goto LABEL_317;
      v128 |= 1 << *((_BYTE *)__dst + v127 + 1);
      v127 += 2;
    }
    while (2 * v126 != v127);
    v131 = 0;
    do
    {
      v132 = *((_BYTE *)__dst + v131) & 0x7F;
      if (v132 >= 0x40)
        goto LABEL_317;
      v128 &= ~(1 << v132);
      v131 += 2;
    }
    while (2 * v126 != v131);
    v133 = (uint8x8_t)vcnt_s8((int8x8_t)v128);
    v133.i16[0] = vaddlv_u8(v133);
    v134 = v133.i32[0];
    v135 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v128));
    v135.i16[0] = vaddlv_u8(v135);
    if (v135.i32[0] + v134)
    {
      v136 = 0;
      if (v126 <= 1)
        v137 = 1;
      else
        v137 = v126;
      v138 = 2 * v137;
      while (1)
      {
        v139 = *((unsigned __int8 *)__dst + v136 + 1);
        if ((v139 & 0x7Fu) >= 0x40)
          goto LABEL_317;
        if (((v128 >> (v139 & 0x7F)) & 1) != 0)
          break;
        v136 += 2;
        if (v138 == v136)
          goto LABEL_162;
      }
      v140 = *((unsigned __int8 *)__dst + v136);
      if (v140 == v139)
        goto LABEL_160;
      v141 = (char)v140;
      if ((char)v140 == 63)
      {
        v142 = *((_DWORD *)this + 50);
        v143 = *((_DWORD *)this + 48);
        if ((char)v139 != 31)
        {
          v145 = v139 & 0x1F | 0xD2800000;
          goto LABEL_157;
        }
      }
      else
      {
        v142 = *((_DWORD *)this + 50);
        v143 = *((_DWORD *)this + 48);
        if (v139 != 31 && v141 != 31)
        {
          v145 = v139 & 0xFFE0FFFF | ((v141 & 0x1F) << 16) | 0xAA0003E0;
LABEL_157:
          if (v142 + 4 > v143)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v116, v117, v118, v119, v120, v121, v122);
            v142 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v142) = v145;
          *((_DWORD *)this + 50) += 4;
          v129 = (char *)__dst;
          v130 = v310;
LABEL_160:
          memmove(&v129[v136], &v129[v136 + 2], 2 * v130 - v136 - 2);
          v126 = v310 - 1;
          goto LABEL_161;
        }
      }
      v145 = (char)v139 | (32 * v141) | 0x91000000;
      goto LABEL_157;
    }
    v306 = v13;
    v146 = *(_BYTE *)__dst;
    v147 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v147, v118, v119, v120, v121, v122);
    memmove(__dst, (char *)__dst + 2, 2 * v310 - 2);
    v148 = v310 - 1;
    v66 = v310 == 1;
    v310 = v148;
    v149 = (unsigned __int8 *)__dst;
    v150 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v148);
    if (v66)
    {
      v156 = 0;
      v157 = 0;
      v116 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v148);
    }
    else
    {
      v151 = 2 * v148;
      v152 = __dst;
      while (*v152 != v147)
      {
        v152 += 2;
        v151 -= 2;
        if (!v151)
          goto LABEL_140;
      }
      *v152 = v146;
LABEL_140:
      LODWORD(v148) = 0;
      v153 = v149;
      v116 = v150;
      v154 = (char *)v150;
      do
      {
        if (*v149 == v149[1])
        {
          v155 = v149;
          if (v154 != (char *)__dst + 2 * v310)
          {
            v293 = v148;
            v298 = v150;
            if (v149 == (unsigned __int8 *)v116)
            {
              v155 = (unsigned __int8 *)v154;
            }
            else
            {
              v290 = v153 - (unsigned __int8 *)v116;
              memmove(v154, v116, v153 - (unsigned __int8 *)v116);
              v155 = (unsigned __int8 *)&v154[v290];
            }
            v150 = v298;
            LODWORD(v148) = v293;
          }
          v116 = (JSC::AssemblerBuffer *)(v149 + 2);
          LODWORD(v148) = v148 + 1;
          v154 = (char *)v155;
        }
        v149 += 2;
        v153 += 2;
      }
      while (v149 < (unsigned __int8 *)v150);
      v149 = (unsigned __int8 *)__dst;
      v156 = v310;
      v157 = v310;
      v150 = (JSC::AssemblerBuffer *)v154;
    }
    v158 = (char *)&v149[2 * v156];
    if (v116 != (JSC::AssemblerBuffer *)v158)
    {
      v159 = v148;
      memmove(v150, v116, v158 - (char *)v116);
      LODWORD(v148) = v159;
      v157 = v310;
    }
    v126 = v157 - v148;
    v13 = v306;
LABEL_161:
    v310 = v126;
LABEL_162:
    ;
  }
  while (v126);
  v160 = __dst;
  v124 = (uint64_t)v304;
  if (v311 != __dst && __dst)
  {
    __dst = 0;
    v309 = 0;
    WTF::fastFree((unint64_t)v160, v116, v117, v118, v119, v120, v121, v122);
  }
LABEL_166:
  if ((_DWORD)v123 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v124, 0, v118, v119, v120, v121, v122);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v123 << 35) + 0x380000001ALL, 0, v118, v119, v120, v121, v122);
  if (v13)
    v167 = operationInt32ToStringWithValidRadix;
  else
    v167 = operationInt32ToString;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v167, v161, v162, v163, v164, v165, v166, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v168, v169, v170, v171, v172, v173);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v174, v175, v176, v177, v178, v179);
  v180 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v180;
  *((_DWORD *)this + 1195) = 4;
  v181 = ~v180;
  if (v181 >= *((unsigned int *)this + 1001))
  {
LABEL_319:
    __break(0xC471u);
    JUMPOUT(0x197BE5868);
  }
LABEL_246:
  v254 = (char *)this + 4776;
  v255 = *((_QWORD *)this + 499) + 24 * (int)v181;
  v256 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v255 = a2;
  *(_DWORD *)(v255 + 8) = v256;
  *(_BYTE *)(v255 + 12) = 6;
  *(_DWORD *)(v255 + 13) = 0;
  *(_BYTE *)(v255 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v125 > 15)
    v257 = -1;
  else
    v257 = v125;
  --*(_DWORD *)&v254[12 * v257 + 8];
  if ((char)v19 > 15)
    v258 = -1;
  else
    v258 = v19;
  v106 = &v254[12 * v258 + 8];
LABEL_253:
  --*(_DWORD *)v106;
  return result;
}

void JSC::DFG::SpeculativeJIT::compileNewStringObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE *v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  _BYTE *v80;
  WTF *v81;
  WTF *v82;
  unsigned int v83;
  int v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  unsigned int v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  WTF *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  int v125;
  unsigned int v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  WTF *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  WTF *v138;
  unsigned int v139;
  _BYTE v140[24];
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  _BYTE v144[24];
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unsigned __int8 v150;
  WTF *v151;
  unsigned int v152;
  unsigned int v153;
  _BYTE v154[24];
  _BYTE *v155;
  unsigned int v156;
  unsigned int v157;
  _BYTE v158[24];
  _BYTE *v159;
  unsigned int v160;
  unsigned int v161;
  _BYTE v162[24];
  _BYTE *v163;
  uint64_t v164;
  _BYTE v165[32];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_98;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE6A10);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_98:
    v13 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v149, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v147, this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v145, this, v20, v21, v22, v23, v24, v25);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, v26, v27, v28, v29, v30, v31);
  v33 = v150;
  v142 = (WTF *)v144;
  v143 = 2;
  v34 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  if (*(_DWORD *)(v34 + 39820) <= 0x17u)
  {
    __break(0xC471u);
    goto LABEL_109;
  }
  v35 = (char)v150;
  v36 = *((_QWORD *)a2 + 9);
  v163 = 0;
  v164 = v34 + 39760;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v150, (uint64_t)&v163, v148, v146, (uint64_t)&v142, 1, v31, v32);
  v42 = (v36 >> 4) | ((unint64_t)*(unsigned int *)(v36 + 8) << 32);
  if (v42)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE6A08);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(this, v42, (uint64_t)this + 264, v37, v38, v39, v40, v41);
    v43 = 16;
  }
  else
  {
    v43 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v43, v33, v37, v38, v39, v40, v41);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v33 | 0x800000000, v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v13, v33 | 0x1000000000, v49, v50, v51, v52, v53);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v54, v55, v56, v57, v58, (uint64_t)&v163);
  v66 = *((_DWORD *)this + 50);
  if (v66 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v59, v60, v61, v62, v63, v64, v65);
    v66 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v66) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v163, (uint64_t)this, v60, v61, v62, v63, v64, v65);
  v67 = HIDWORD(v143);
  v138 = (WTF *)v140;
  v139 = HIDWORD(v143);
  if (HIDWORD(v143) < 3)
  {
    v68 = v140;
  }
  else
  {
    if (HIDWORD(v143) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE6A20);
    }
    v68 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v143)));
    v138 = (WTF *)v68;
    v67 = HIDWORD(v143);
  }
  if (v67)
  {
    v69 = v142;
    v70 = (WTF *)((char *)v142 + 12 * v67);
    do
    {
      *(_DWORD *)v68 = *(_DWORD *)v69;
      *(_QWORD *)(v68 + 4) = *(_QWORD *)((char *)v69 + 4);
      v69 = (WTF *)((char *)v69 + 12);
      v68 += 12;
    }
    while (v69 != v70);
  }
  v71 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  v72 = *((_QWORD *)a2 + 9);
  v73 = v139;
  v151 = (WTF *)v154;
  v152 = 2;
  v153 = v139;
  v136 = v71;
  v137 = v72;
  if (v139 < 3)
  {
    v74 = v154;
  }
  else
  {
    if (v139 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE6A28);
    }
    v74 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v139));
    v152 = 12 * v139 / 0xC;
    v151 = (WTF *)v74;
    v73 = v139;
  }
  if (v73)
  {
    v75 = v138;
    v76 = (WTF *)((char *)v138 + 12 * v73);
    do
    {
      *(_DWORD *)v74 = *(_DWORD *)v75;
      *(_QWORD *)(v74 + 4) = *(_QWORD *)((char *)v75 + 4);
      v75 = (WTF *)((char *)v75 + 12);
      v74 += 12;
    }
    while (v75 != v76);
  }
  v77 = WTF::fastMalloc((WTF *)0xB8);
  v78 = v153;
  v155 = v158;
  v156 = 2;
  v157 = v153;
  if (v153 < 3)
  {
    v80 = v158;
  }
  else
  {
    if (v153 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE6A30);
    }
    v79 = 12 * v153;
    v80 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v153));
    v156 = (v79 & 0xFFFFFFFC) / 0xC;
    v155 = v80;
    v78 = v153;
  }
  if (v78)
  {
    v81 = v151;
    v82 = (WTF *)((char *)v151 + 12 * v78);
    do
    {
      *(_DWORD *)v80 = *(_DWORD *)v81;
      *(_QWORD *)(v80 + 4) = *(_QWORD *)((char *)v81 + 4);
      v81 = (WTF *)((char *)v81 + 12);
      v80 += 12;
    }
    while (v81 != v82);
  }
  v83 = v157;
  v159 = v162;
  v160 = 2;
  v161 = v157;
  if (v157 < 3)
  {
    v85 = v162;
  }
  else
  {
    if (v157 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE6A38);
    }
    v84 = 12 * v157;
    v85 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v157));
    v160 = (v84 & 0xFFFFFFFC) / 0xC;
    v159 = v85;
    v83 = v157;
  }
  if (v83)
  {
    v86 = v155;
    v87 = &v155[12 * v83];
    do
    {
      *(_DWORD *)v85 = *(_DWORD *)v86;
      *(_QWORD *)(v85 + 4) = *(_QWORD *)(v86 + 4);
      v86 += 12;
      v85 += 12;
    }
    while (v86 != v87);
  }
  v88 = v161;
  v163 = v165;
  LODWORD(v164) = 2;
  HIDWORD(v164) = v161;
  if (v161 >= 3)
  {
    if (v161 < 0x15555556)
    {
      v89 = 12 * v161;
      v90 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v161));
      LODWORD(v164) = (v89 & 0xFFFFFFFC) / 0xC;
      v163 = v90;
      v88 = v161;
      goto LABEL_45;
    }
    __break(0xC471u);
LABEL_109:
    JUMPOUT(0x197BE69D8);
  }
  v90 = v165;
LABEL_45:
  if (v88)
  {
    v91 = v159;
    v92 = &v159[12 * v88];
    do
    {
      *(_DWORD *)v90 = *(_DWORD *)v91;
      *(_QWORD *)(v90 + 4) = *(_QWORD *)(v91 + 4);
      v91 += 12;
      v90 += 12;
    }
    while (v91 != v92);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v77, (uint64_t *)&v163, this);
  v100 = (unint64_t)v163;
  if (v165 != v163 && v163 != 0)
  {
    v163 = 0;
    LODWORD(v164) = 0;
    WTF::fastFree(v100, v93, v94, v95, v96, v97, v98, v99);
  }
  *(_QWORD *)v77 = off_1E3573D40;
  *(_QWORD *)(v77 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v77 + 100) = 0;
  *(_BYTE *)(v77 + 102) = v33;
  *(_QWORD *)(v77 + 104) = v77 + 120;
  *(_QWORD *)(v77 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v77 + 104, (char)v33, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v98, v99);
  v109 = (unint64_t)v159;
  if (v162 != v159 && v159)
  {
    v159 = 0;
    v160 = 0;
    WTF::fastFree(v109, v102, v103, v104, v105, v106, v107, v108);
  }
  *(_QWORD *)v77 = &off_1E3573D10;
  *(_QWORD *)(v77 + 152) = operationNewStringObject;
  *(_QWORD *)(v77 + 160) = v136;
  *(_BYTE *)(v77 + 168) = v13;
  *(_QWORD *)(v77 + 176) = v137;
  v141 = v77;
  v110 = (unint64_t)v155;
  if (v158 != v155 && v155)
  {
    v155 = 0;
    v156 = 0;
    WTF::fastFree(v110, v102, v103, v104, v105, v106, v107, v108);
  }
  v111 = v151;
  if (v154 != (_BYTE *)v151 && v151)
  {
    v151 = 0;
    v152 = 0;
    WTF::fastFree((unint64_t)v111, v102, v103, v104, v105, v106, v107, v108);
  }
  v112 = (_QWORD *)((char *)this + 5656);
  v113 = *((unsigned int *)this + 1417);
  if ((_DWORD)v113 == *((_DWORD *)this + 1416))
  {
    v115 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v112, v113 + 1, (unint64_t)&v141);
    v113 = *((unsigned int *)this + 1417);
    v114 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v113);
    v77 = *v115;
  }
  else
  {
    v114 = (uint64_t *)(*v112 + 8 * v113);
    v115 = &v141;
  }
  *v115 = 0;
  *v114 = v77;
  *((_DWORD *)this + 1417) = v113 + 1;
  v116 = v141;
  v141 = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v140 != (_BYTE *)v138 && v138)
    WTF::fastFree((unint64_t)v138, v102, v103, v104, v105, v106, v107, v108);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v103, v104, v105, v106, v107, v108);
  v124 = (char *)this + 4776;
  v125 = *((_DWORD *)a2 + 12);
  if (v35 > 15)
    v126 = -1;
  else
    v126 = v35;
  v127 = &v124[12 * v126];
  *(_DWORD *)v127 = v125;
  *((_DWORD *)v127 + 1) = 4;
  v128 = ~v125;
  if (v128 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE6A18);
  }
  v129 = *((_QWORD *)this + 499) + 24 * (int)v128;
  v130 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v129 = a2;
  *(_DWORD *)(v129 + 8) = v130;
  *(_BYTE *)(v129 + 17) = v35;
  *(_DWORD *)(v129 + 12) = 6;
  *(_BYTE *)(v129 + 16) = 0;
  v131 = v142;
  if (v144 != (_BYTE *)v142 && v142)
  {
    v142 = 0;
    LODWORD(v143) = 0;
    WTF::fastFree((unint64_t)v131, v117, v118, v119, v120, v121, v122, v123);
  }
  if (v145)
  {
    v132 = v146;
    if (v146 != -1)
    {
      if (v146 > 15)
        v132 = -1;
      --*(_DWORD *)(v145 + 12 * v132 + 4784);
    }
  }
  if (v147)
  {
    v133 = v148;
    if (v148 != -1)
    {
      if (v148 > 15)
        v133 = -1;
      --*(_DWORD *)(v147 + 12 * v133 + 4784);
    }
  }
  if (v149)
  {
    v134 = (char)v150;
    if ((char)v150 != -1)
    {
      if ((char)v150 > 15)
        v134 = -1;
      --*(_DWORD *)(v149 + 12 * v134 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v135 = -1;
    else
      v135 = v13;
    --*(_DWORD *)&v124[12 * v135 + 8];
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewSymbol(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint8x8_t v45;
  __int32 v46;
  uint8x8_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  char v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *v59;
  char *v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  _BYTE *v65;
  unsigned __int8 *v66;
  char *v67;
  unsigned __int8 *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *result;
  int v96;
  unint64_t v97;
  char *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  JSC::DFG::Node *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 *v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint8x8_t v126;
  __int32 v127;
  uint8x8_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned int v135;
  unsigned int v136;
  char v137;
  char v138;
  uint64_t v139;
  unsigned __int8 *v140;
  char *v141;
  uint64_t v142;
  unsigned int v143;
  char *v144;
  uint64_t v145;
  _BYTE *v146;
  unsigned __int8 *v147;
  char *v148;
  unsigned __int8 *v149;
  int64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  __int16 *v195;
  __int16 *v196;
  int v197;
  int v198;
  void *__dst;
  int v200;
  unsigned int v201;
  __int16 v202;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    v12 = *((unsigned int *)this + 1001);
    if ((v10 & 0xFC000000000000) == 0x54000000000000)
    {
      if (v11 < v12)
      {
        if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
          || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), (_DWORD)v13 == -1))
        {
          v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
        }
        JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v13, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::flushRegisters(this, v14, v15, v16, v17, v18, v19, v20);
        ++*((_DWORD *)this + 1196);
        v27 = *((unsigned int *)this + 1194);
        if ((_DWORD)v27 != 0x3FFFFFFF)
        {
          *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
          JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v27, (uint64_t)v21, v22, v23, v24, v25, v26);
        }
        v35 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v21, v22, v23, v24, v25, v26);
        v36 = (uint64_t)v28;
        v37 = &v202;
        __dst = &v202;
        v200 = 1;
        if ((_DWORD)v13 != 1)
        {
          v202 = v13 | 0x100;
          v201 = 1;
          v38 = 1;
          while (1)
          {
            v39 = 0;
            v40 = 0;
            v41 = (char *)__dst;
            v42 = v38;
            do
            {
              if ((*((_BYTE *)__dst + v39 + 1) & 0x40) != 0)
                goto LABEL_145;
              v40 |= 1 << *((_BYTE *)__dst + v39 + 1);
              v39 += 2;
            }
            while (2 * v38 != v39);
            v43 = 0;
            do
            {
              v44 = *((_BYTE *)__dst + v43) & 0x7F;
              if (v44 >= 0x40)
                goto LABEL_145;
              v40 &= ~(1 << v44);
              v43 += 2;
            }
            while (2 * v38 != v43);
            v45 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
            v45.i16[0] = vaddlv_u8(v45);
            v46 = v45.i32[0];
            v47 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v40));
            v47.i16[0] = vaddlv_u8(v47);
            if (!(v47.i32[0] + v46))
            {
              v195 = v37;
              v56 = *(_BYTE *)__dst;
              v57 = *((_BYTE *)__dst + 1);
              JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v57, v30, v31, v32, v33, v34);
              memmove(__dst, (char *)__dst + 2, 2 * v201 - 2);
              v58 = v201 - 1;
              v53 = v201 == 1;
              v201 = v58;
              v59 = (unsigned __int8 *)__dst;
              v60 = (char *)__dst + 2 * v58;
              if (v53)
              {
                v61 = 0;
                v62 = 0;
                v197 = 0;
                v28 = (char *)__dst + 2 * v58;
              }
              else
              {
                v64 = 2 * v58;
                v65 = __dst;
                while (*v65 != v57)
                {
                  v65 += 2;
                  v64 -= 2;
                  if (!v64)
                    goto LABEL_51;
                }
                *v65 = v56;
LABEL_51:
                v197 = 0;
                v66 = v59;
                v28 = v60;
                v67 = v60;
                do
                {
                  if (*v59 == v59[1])
                  {
                    v68 = v59;
                    if (v67 != (char *)__dst + 2 * v201)
                    {
                      if (v59 == (unsigned __int8 *)v28)
                      {
                        v68 = (unsigned __int8 *)v67;
                      }
                      else
                      {
                        v69 = v66 - (unsigned __int8 *)v28;
                        memmove(v67, v28, v66 - (unsigned __int8 *)v28);
                        v68 = (unsigned __int8 *)&v67[v69];
                      }
                    }
                    v28 = (char *)(v59 + 2);
                    ++v197;
                    v67 = (char *)v68;
                  }
                  v59 += 2;
                  v66 += 2;
                }
                while (v59 < (unsigned __int8 *)v60);
                v59 = (unsigned __int8 *)__dst;
                v61 = v201;
                v62 = v201;
                v60 = v67;
              }
              v63 = (char *)&v59[2 * v61];
              if (v28 != v63)
              {
                memmove(v60, v28, v63 - v28);
                v62 = v201;
              }
              v38 = v62 - v197;
              v37 = v195;
              goto LABEL_40;
            }
            v48 = 0;
            v49 = v38 <= 1 ? 1 : v38;
            v50 = 2 * v49;
            while (1)
            {
              v51 = *((unsigned __int8 *)__dst + v48 + 1);
              if ((v51 & 0x7Fu) >= 0x40)
                goto LABEL_145;
              if (((v40 >> (v51 & 0x7F)) & 1) != 0)
                break;
              v48 += 2;
              if (v50 == v48)
                goto LABEL_41;
            }
            v52 = *((unsigned __int8 *)__dst + v48);
            if (v52 != v51)
              break;
LABEL_39:
            memmove(&v41[v48], &v41[v48 + 2], 2 * v42 - v48 - 2);
            v38 = v201 - 1;
LABEL_40:
            v201 = v38;
LABEL_41:
            if (!v38)
            {
              v151 = __dst;
              if (v37 != __dst && __dst)
              {
                __dst = 0;
                v200 = 0;
                WTF::fastFree((unint64_t)v151, v28, v29, v30, v31, v32, v33, v34);
              }
              goto LABEL_124;
            }
          }
          if ((char)v52 == 63)
          {
            if ((char)v51 != 31)
            {
              v54 = v51 & 0x1F | 0xD2800000;
              goto LABEL_36;
            }
          }
          else
          {
            v53 = v51 == 31 || (char)v52 == 31;
            if (!v53)
            {
              v54 = v51 & 0xFFE0FFFF | ((v52 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
              v55 = *((_DWORD *)this + 50);
              if (v55 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
                v55 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v55) = v54;
              *((_DWORD *)this + 50) += 4;
              v41 = (char *)__dst;
              v42 = v201;
              goto LABEL_39;
            }
          }
          v54 = (char)v51 | (32 * (char)v52) | 0x91000000;
          goto LABEL_36;
        }
LABEL_124:
        if ((_DWORD)v35 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v36, 0, v30, v31, v32, v33, v34);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v35 << 35) + 0x380000001ALL, 0, v30, v31, v32, v33, v34);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewSymbolWithStringDescription, v152, v153, v154, v155, v156, v157, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v158, v159, v160, v161, v162, v163);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v164, v165, v166, v167, v168, v169);
        v170 = *((_DWORD *)a2 + 12);
        *((_DWORD *)this + 1194) = v170;
        *((_DWORD *)this + 1195) = 4;
        v171 = ~v170;
        if (v171 >= *((unsigned int *)this + 1001))
        {
LABEL_147:
          __break(0xC471u);
          JUMPOUT(0x197BE731CLL);
        }
        goto LABEL_132;
      }
      __break(0xC471u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(0xC471u);
      JUMPOUT(0x197BE74CCLL);
    }
    if (v11 >= v12)
      goto LABEL_146;
    if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12)
      || (LODWORD(v13) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), (_DWORD)v13 == -1))
    {
      LODWORD(v13) = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v101, a3, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v108 = *((unsigned int *)this + 1194);
    if ((_DWORD)v108 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v108, (uint64_t)v102, v103, v104, v105, v106, v107);
    }
    v116 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v102, v103, v104, v105, v106, v107);
    v117 = (uint64_t)v109;
    v118 = &v202;
    __dst = &v202;
    v200 = 1;
    if ((_DWORD)v13 == 1)
    {
LABEL_129:
      if ((_DWORD)v116 == -1)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v117, 0, v111, v112, v113, v114, v115);
      else
        JSC::MacroAssemblerARM64::load64((uint64_t)this, (v116 << 35) + 0x380000001ALL, 0, v111, v112, v113, v114, v115);
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewSymbolWithDescription, v173, v174, v175, v176, v177, v178, (int *)&__dst);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v179, v180, v181, v182, v183, v184);
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v185, v186, v187, v188, v189, v190);
      v191 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 1194) = v191;
      *((_DWORD *)this + 1195) = 4;
      v171 = ~v191;
      if (v171 >= *((unsigned int *)this + 1001))
        goto LABEL_147;
LABEL_132:
      v192 = *((_QWORD *)this + 499) + 24 * (int)v171;
      v193 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v192 = a2;
      *(_DWORD *)(v192 + 8) = v193;
      *(_BYTE *)(v192 + 12) = 6;
      *(_DWORD *)(v192 + 13) = 0;
      *(_BYTE *)(v192 + 17) = 0;
      --*((_DWORD *)this + 1196);
      if ((int)v13 > 15)
        v194 = -1;
      else
        v194 = v13;
      v98 = (char *)this + 12 * v194 + 4784;
      goto LABEL_136;
    }
    v202 = v13 | 0x100;
    v201 = 1;
    v119 = 1;
    while (1)
    {
      v120 = 0;
      v121 = 0;
      v122 = (char *)__dst;
      v123 = v119;
      do
      {
        if ((*((_BYTE *)__dst + v120 + 1) & 0x40) != 0)
          goto LABEL_145;
        v121 |= 1 << *((_BYTE *)__dst + v120 + 1);
        v120 += 2;
      }
      while (2 * v119 != v120);
      v124 = 0;
      do
      {
        v125 = *((_BYTE *)__dst + v124) & 0x7F;
        if (v125 >= 0x40)
          goto LABEL_145;
        v121 &= ~(1 << v125);
        v124 += 2;
      }
      while (2 * v119 != v124);
      v126 = (uint8x8_t)vcnt_s8((int8x8_t)v121);
      v126.i16[0] = vaddlv_u8(v126);
      v127 = v126.i32[0];
      v128 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v121));
      v128.i16[0] = vaddlv_u8(v128);
      if (!(v128.i32[0] + v127))
      {
        v196 = v118;
        v137 = *(_BYTE *)__dst;
        v138 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v138, v111, v112, v113, v114, v115);
        memmove(__dst, (char *)__dst + 2, 2 * v201 - 2);
        v139 = v201 - 1;
        v53 = v201 == 1;
        v201 = v139;
        v140 = (unsigned __int8 *)__dst;
        v141 = (char *)__dst + 2 * v139;
        if (v53)
        {
          v142 = 0;
          v143 = 0;
          v198 = 0;
          v109 = (char *)__dst + 2 * v139;
        }
        else
        {
          v145 = 2 * v139;
          v146 = __dst;
          while (*v146 != v138)
          {
            v146 += 2;
            v145 -= 2;
            if (!v145)
              goto LABEL_113;
          }
          *v146 = v137;
LABEL_113:
          v198 = 0;
          v147 = v140;
          v109 = v141;
          v148 = v141;
          do
          {
            if (*v140 == v140[1])
            {
              v149 = v140;
              if (v148 != (char *)__dst + 2 * v201)
              {
                if (v140 == (unsigned __int8 *)v109)
                {
                  v149 = (unsigned __int8 *)v148;
                }
                else
                {
                  v150 = v147 - (unsigned __int8 *)v109;
                  memmove(v148, v109, v147 - (unsigned __int8 *)v109);
                  v149 = (unsigned __int8 *)&v148[v150];
                }
              }
              v109 = (char *)(v140 + 2);
              ++v198;
              v148 = (char *)v149;
            }
            v140 += 2;
            v147 += 2;
          }
          while (v140 < (unsigned __int8 *)v141);
          v140 = (unsigned __int8 *)__dst;
          v142 = v201;
          v143 = v201;
          v141 = v148;
        }
        v144 = (char *)&v140[2 * v142];
        if (v109 != v144)
        {
          memmove(v141, v109, v144 - v109);
          v143 = v201;
        }
        v119 = v143 - v198;
        v118 = v196;
        goto LABEL_102;
      }
      v129 = 0;
      v130 = v119 <= 1 ? 1 : v119;
      v131 = 2 * v130;
      while (1)
      {
        v132 = *((unsigned __int8 *)__dst + v129 + 1);
        if ((v132 & 0x7Fu) >= 0x40)
          goto LABEL_145;
        if (((v121 >> (v132 & 0x7F)) & 1) != 0)
          break;
        v129 += 2;
        if (v131 == v129)
          goto LABEL_103;
      }
      v133 = *((unsigned __int8 *)__dst + v129);
      if (v133 != v132)
        break;
LABEL_101:
      memmove(&v122[v129], &v122[v129 + 2], 2 * v123 - v129 - 2);
      v119 = v201 - 1;
LABEL_102:
      v201 = v119;
LABEL_103:
      if (!v119)
      {
        v172 = __dst;
        if (v118 != __dst && __dst)
        {
          __dst = 0;
          v200 = 0;
          WTF::fastFree((unint64_t)v172, v109, v110, v111, v112, v113, v114, v115);
        }
        goto LABEL_129;
      }
    }
    if ((char)v133 == 63)
    {
      if ((char)v132 != 31)
      {
        v135 = v132 & 0x1F | 0xD2800000;
        goto LABEL_98;
      }
    }
    else if (v132 != 31 && (char)v133 != 31)
    {
      v135 = v132 & 0xFFE0FFFF | ((v133 & 0x1F) << 16) | 0xAA0003E0;
LABEL_98:
      v136 = *((_DWORD *)this + 50);
      if (v136 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v109, v110, v111, v112, v113, v114, v115);
        v136 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v136) = v135;
      *((_DWORD *)this + 50) += 4;
      v122 = (char *)__dst;
      v123 = v201;
      goto LABEL_101;
    }
    v135 = (char)v132 | (32 * (char)v133) | 0x91000000;
    goto LABEL_98;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v76 = *((unsigned int *)this + 1194);
  if ((_DWORD)v76 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v76, v70, v71, v72, v73, v74, v75);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), 0, v71, v72, v73, v74, v75);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewSymbol, v77, v78, v79, v80, v81, v82, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v83, v84, v85, v86, v87, v88);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v89, v90, v91, v92, v93, v94);
  v96 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v96;
  *((_DWORD *)this + 1195) = 4;
  v97 = ~v96;
  if (v97 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE74BCLL);
  }
  v98 = (char *)this + 4784;
  v99 = *((_DWORD *)a2 + 13);
  v100 = *((_QWORD *)this + 499) + 24 * (int)v97;
  *(_QWORD *)v100 = a2;
  *(_DWORD *)(v100 + 8) = v99;
  *(_BYTE *)(v100 + 12) = 6;
  *(_DWORD *)(v100 + 13) = 0;
  *(_BYTE *)(v100 + 17) = 0;
LABEL_136:
  --*(_DWORD *)v98;
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewMap(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *result;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;

  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v16 = *((unsigned int *)this + 1194);
  if ((_DWORD)v16 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v16, v10, v11, v12, v13, v14, v15);
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *((_QWORD *)a2 + 9), 1, v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v17, 0, v18, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewMap, v23, v24, v25, v26, v27, v28, &v46);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v29, v30, v31, v32, v33, v34);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v35, v36, v37, v38, v39, v40);
  v42 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v42;
  *((_DWORD *)this + 1195) = 4;
  v43 = ~v42;
  if (v43 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v44 = *((_QWORD *)this + 499) + 24 * (int)v43;
    v45 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v44 = a2;
    *(_DWORD *)(v44 + 8) = v45;
    *(_BYTE *)(v44 + 12) = 6;
    *(_DWORD *)(v44 + 13) = 0;
    *(_BYTE *)(v44 + 17) = 0;
    --*((_DWORD *)this + 1196);
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileNewSet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *result;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;

  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  ++*((_DWORD *)this + 1196);
  v16 = *((unsigned int *)this + 1194);
  if ((_DWORD)v16 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v16, v10, v11, v12, v13, v14, v15);
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *((_QWORD *)a2 + 9), 1, v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v17, 0, v18, v19, v20, v21, v22);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationNewSet, v23, v24, v25, v26, v27, v28, &v46);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v29, v30, v31, v32, v33, v34);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v35, v36, v37, v38, v39, v40);
  v42 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v42;
  *((_DWORD *)this + 1195) = 4;
  v43 = ~v42;
  if (v43 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v44 = *((_QWORD *)this + 499) + 24 * (int)v43;
    v45 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v44 = a2;
    *(_DWORD *)(v44 + 8) = v45;
    *(_BYTE *)(v44 + 12) = 6;
    *(_DWORD *)(v44 + 13) = 0;
    *(_BYTE *)(v44 + 17) = 0;
    --*((_DWORD *)this + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithSize(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  JSC::DFG::SpeculativeJIT *v57;
  unint64_t v58;
  char v59;
  _BYTE v60[7];

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
LABEL_4:
    v16 = v13;
    goto LABEL_5;
  }
  v44 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v45 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v45 != 0x3FFFFFFF) ? (v46 = v45 == -1) : (v46 = 1), v46))
  {
    v47 = 2;
  }
  else if (v45 >> 28)
  {
    v53 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v53 = v44;
    *(_DWORD *)(v53 + 8) = v45;
    v47 = 1;
    v44 = v53;
  }
  else
  {
    v47 = v44;
    v44 = 0;
  }
  v11 = v44 | v47;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v44 | v47) & 1) == 0)
    goto LABEL_3;
  v48 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v49 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v49 != 0x3FFFFFFF) ? (v50 = v49 == -1) : (v50 = 1), v50))
  {
    v51 = 2;
  }
  else if (v49 >> 28)
  {
    v54 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v54 = v48;
    *(_DWORD *)(v54 + 8) = v49;
    v51 = 1;
    v48 = v54;
  }
  else
  {
    v51 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v48 = 0;
  }
  v52 = v48 | v51;
  v13 = (_QWORD *)(v52 & 0xFFFFFFFF8);
  if ((v52 & 1) == 0)
  {
    v15 = 0;
    v14 = 1;
    goto LABEL_4;
  }
  v14 = 0;
  v15 = 0;
  v16 = (_QWORD *)*v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(unint64_t **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_DWORD *)a2 + 18);
  switch((char)v18)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x197BE7A54);
    case 1:
      v19 = v17 + 208;
      break;
    case 2:
      v19 = v17 + 211;
      break;
    case 3:
      v19 = v17 + 214;
      break;
    case 4:
      v19 = v17 + 217;
      break;
    case 5:
      v19 = v17 + 220;
      break;
    case 6:
      v19 = v17 + 223;
      break;
    case 7:
      v19 = v17 + 226;
      break;
    case 8:
      v19 = v17 + 229;
      break;
    case 9:
      v19 = v17 + 232;
      break;
    case 10:
      v19 = v17 + 235;
      break;
    case 11:
      v19 = v17 + 238;
      break;
    case 12:
      v19 = v17 + 241;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197BE7A74);
  }
  v20 = *v19;
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = v20;
  v22 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v21, (int *)&v57, a4, a5, a6, a7, a8);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197BE79FCLL);
  }
  v29 = *((_QWORD *)a2 + 3);
  v57 = this;
  v58 = v29;
  v59 = -1;
  v30 = ~*(_DWORD *)((v29 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v30 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE7AB4);
  }
  v31 = v22;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v30 + 12))
    v59 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v29, (uint64_t)v60, v24, v25, v26, v27, v28);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v55, this, v23, v24, v25, v26, v27, v28);
  v39 = v59;
  if (v59 == 255)
  {
    v39 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v57, v58, (uint64_t)v60, v34, v35, v36, v37, v38);
    v59 = v39;
  }
  v40 = v56;
  v41 = *((_DWORD *)this + 50);
  if (v41 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v32, v33, v34, v35, v36, v37, v38);
    v41 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v41) = v40 & 0x1F | (32 * (v39 & 0x1F)) | 0x93407C00;
  *((_DWORD *)this + 50) += 4;
  JSC::DFG::SpeculativeJIT::emitNewTypedArrayWithSizeInRegister(this, a2, v18, v31, v40, v36, v37, v38);
  if (v55)
  {
    v42 = v56;
    if (v56 != -1)
    {
      if (v56 > 15)
        v42 = -1;
      --*(_DWORD *)(v55 + 12 * v42 + 4784);
    }
  }
  v43 = v59;
  if (v59 > 15)
    v43 = -1;
  --*((_DWORD *)v57 + 3 * v43 + 1196);
}

void JSC::DFG::SpeculativeJIT::emitNewTypedArrayWithSizeInRegister(JSC::DFG::SpeculativeJIT *a1, JSC::DFG::JITCompiler *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t *v51;
  int v52;
  char *v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int i;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x8_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int8x8_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  JSC::DFG::Node *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  _BYTE *v160;
  WTF *v161;
  WTF *v162;
  uint64_t (*v163)();
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  _BYTE *v168;
  WTF *v169;
  WTF *v170;
  uint64_t v171;
  unsigned int v172;
  int v173;
  _BYTE *v174;
  WTF *v175;
  WTF *v176;
  unsigned int v177;
  int v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  unsigned int v182;
  int v183;
  _BYTE *v184;
  _BYTE *v185;
  _BYTE *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  WTF *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  char *v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  int v223;
  WTF *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  JSC::AssemblerBuffer *v229;
  uint64_t v232;
  WTF *v233;
  unsigned int v234;
  _BYTE v235[24];
  uint64_t v236;
  int v237;
  unsigned int v238[3];
  int v239;
  uint64_t v240;
  WTF *v241;
  uint64_t v242;
  _BYTE v243[24];
  uint64_t v244;
  char v245;
  uint64_t v246;
  unsigned __int8 v247;
  uint64_t v248;
  unsigned __int8 v249;
  uint64_t v250;
  unsigned __int8 v251;
  WTF *v252;
  unsigned int v253;
  unsigned int v254;
  _BYTE v255[24];
  _BYTE *v256;
  unsigned int v257;
  unsigned int v258;
  _BYTE v259[24];
  _BYTE *v260;
  unsigned int v261;
  unsigned int v262;
  _BYTE v263[24];
  _BYTE *v264;
  uint64_t v265;
  _BYTE v266[32];

  v9 = a3;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v250, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v248, a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v246, a1, v17, v18, v19, v20, v21, v22);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v244, a1, v23, v24, v25, v26, v27, v28);
  v36 = v251;
  v37 = v247;
  v38 = v245;
  v241 = (WTF *)v243;
  v242 = 2;
  v232 = v249;
  v39 = v249 & 0x1F | 0xD2800000;
  v229 = (JSC::DFG::SpeculativeJIT *)((char *)a1 + 56);
  v40 = *((_DWORD *)a1 + 50);
  if (v40 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v29, v30, v31, v32, v33, v34, v35);
    v40 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v40) = v39;
  *((_DWORD *)a1 + 50) += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 8, a5, 1000, v32, v33, v34, v35, (uint64_t)&v239);
  v48 = v239;
  if (v239 != -1)
  {
    v49 = HIDWORD(v242);
    if (HIDWORD(v242) == (_DWORD)v242)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v241, (void *)(HIDWORD(v242) + 1), (unint64_t)&v239, v43, v44, v45, v46, v47);
      v52 = *v50;
      v51 = (uint64_t *)(v50 + 1);
      v48 = v52;
      v49 = HIDWORD(v242);
    }
    else
    {
      v51 = &v240;
    }
    v53 = (char *)v241 + 12 * v49;
    *(_DWORD *)v53 = v48;
    *(_QWORD *)(v53 + 4) = *v51;
    ++HIDWORD(v242);
  }
  if ((v9 - 4) > 7u)
    v54 = 0;
  else
    v54 = dword_199123E7C[(char)(v9 - 4)];
  v55 = *((_DWORD *)a1 + 50);
  if (v55 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v41, v42, v43, v44, v45, v46, v47);
    v55 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v55) = ((-65536 * v54) & 0x1F0000 | (32 * (a5 & 0x1F)) | (v54 << 10) | v37 & 0x1F) ^ 0x53007C00;
  v56 = *((_DWORD *)a1 + 50);
  v57 = v56 + 4;
  *((_DWORD *)a1 + 50) = v56 + 4;
  if (v9 - 9 >= 3)
  {
    if ((v56 + 8) > *((_DWORD *)a1 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v229, v41, v42, v43, v44, v45, v46, v47);
      v57 = *((_DWORD *)a1 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v57) = (char)v37 | (32 * (char)v37) | 0x11001C00;
    *((_DWORD *)a1 + 50) += 4;
    JSC::MacroAssemblerARM64::and32((uint64_t)a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFF8, v37, (char)v37);
  }
  v58 = v37 & 0x1F;
  v59 = v38;
  JSC::AssemblyHelpers::emitAllocateVariableSized(a1, (char)v232, *(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 2504, (char)v37, (char)v37, v59, (uint64_t)&v241, 0);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)a1, 0, a5, v60, v61, v62, v63, (uint64_t)v238, v64);
  if ((char)v37 != (_DWORD)a5)
  {
    if ((_DWORD)a5 == 63)
    {
      v72 = v59;
      if ((char)v37 != 31)
      {
        v75 = v58 | 0xD2800000;
        goto LABEL_23;
      }
    }
    else
    {
      v72 = v59;
      if ((_DWORD)a5 != 31 && (_DWORD)v37 != 31)
      {
        v73 = v37 | ((a5 & 0x1F) << 16);
        v74 = -1442839584;
LABEL_22:
        v75 = v73 | v74;
LABEL_23:
        v76 = *((_DWORD *)a1 + 50);
        if (v76 + 4 > *((_DWORD *)a1 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v229, v65, v66, v67, v68, v69, v70, v71);
          v76 = *((_DWORD *)a1 + 50);
        }
        *(_DWORD *)(*((_QWORD *)a1 + 7) + v76) = v75;
        *((_DWORD *)a1 + 50) += 4;
        v59 = v72;
        goto LABEL_26;
      }
    }
    v73 = (char)v37 | (32 * a5);
    v74 = -1862270976;
    goto LABEL_22;
  }
LABEL_26:
  if (v9 <= 0xB)
  {
    if (((1 << v9) & 0x1C0) != 0)
      goto LABEL_35;
    if (((1 << v9) & 0x30) != 0)
    {
      JSC::MacroAssemblerARM64::lshift32(a1, 1, (char)v37, v67, v68, v69, v70, v71);
    }
    else if (((1 << v9) & 0xE00) != 0)
    {
      JSC::MacroAssemblerARM64::lshift32(a1, 1, (char)v37, v67, v68, v69, v70, v71);
      goto LABEL_35;
    }
  }
  v77 = *((_DWORD *)a1 + 50);
  if (v77 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v65, v66, v67, v68, v69, v70, v71);
    v77 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v77) = (char)v37 | (32 * (char)v37) | 0x11000C00;
  v78 = *((_DWORD *)a1 + 50);
  v79 = v78 + 4;
  *((_DWORD *)a1 + 50) = v78 + 4;
  if ((v78 + 8) > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v65, v66, v67, v68, v69, v70, v71);
    v79 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v79) = v58 | (32 * v37) | 0x53027C00;
  *((_DWORD *)a1 + 50) += 4;
LABEL_35:
  for (i = *((_DWORD *)a1 + 50); i < *((_DWORD *)a1 + 13); *((_DWORD *)a1 + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)a1 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v229, v65, v66, v67, v68, v69, v70, v71);
      i = *((_DWORD *)a1 + 50);
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + i) = -721215457;
    i = *((_DWORD *)a1 + 50) + 4;
  }
  *((_DWORD *)a1 + 52) = 0;
  v81 = i;
  if ((i + 4) > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v65, v66, v67, v68, v69, v70, v71);
    v81 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v81) = (char)v37 | (32 * (char)v37) | 0x51000400;
  *((_DWORD *)a1 + 50) += 4;
  JSC::MacroAssemblerARM64::store32((uint64_t)a1, 63, v232 | (v37 << 8) | 0x200000000, 0x200000000uLL, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)a1, 1, (char)v37, v82, v83, v84, v85, (uint64_t)&v264, v86);
  v237 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v264, (unsigned int *)&v237, (uint64_t)a1, v87, v88, v89, v90, v91);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v238, (uint64_t)a1, v92, v93, v94, v95, v96, v97);
  v100 = v9 - 1;
  v101 = (char)v36;
  switch(v100)
  {
    case 0u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40512), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 1u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40864), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 2u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40872), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 3u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40520), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 4u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40880), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 5u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40528), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 6u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40888), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 7u:
      v102 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40464);
      if (v102 && *(_DWORD *)(v102 + 60) <= 0x2Fu)
      {
        __break(0xC471u);
        JUMPOUT(0x197BE8A40);
      }
      v264 = 0;
      v265 = v102;
      JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, (char)v36, (uint64_t)&v264, (char)v37, v59, (uint64_t)&v241, 1, v98, v99);
      v108 = (a4 >> 4) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32);
      if (v108)
      {
        if (!*((_BYTE *)a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197BE8A60);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg(a1, v108, (uint64_t)a1 + 264, v103, v104, v105, v106, v107);
        v109 = 16;
      }
      else
      {
        v109 = 63;
      }
      JSC::MacroAssemblerARM64::store64((uint64_t)a1, v109, v36, v103, v104, v105, v106, v107);
      JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v36 | 0x800000000, v110, v111, v112, v113, v114);
      break;
    case 8u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40472), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 9u:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40344), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 0xAu:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40360), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    case 0xBu:
      JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 44) + 16) + 40432), (char)v36, a4, (char)v37, v59, (uint64_t)&v241, v98, v99);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197BE88E8);
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, (char)v232, v36 | 0x1000000000, v115, v116, v117, v118, v119);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a5, v36 | 0x1800000000, v120, v121, v122, v123, v124);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 63, v36 | 0x2000000000, v125, v126, v127, v128, v129);
  if (!*((_BYTE *)a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE89BCLL);
  }
  v137 = v36 | 0x2800000000;
  *(_DWORD *)(*((_QWORD *)a1 + 33) + 208) &= ~*((_DWORD *)a1 + 72);
  v138 = *((char *)a1 + 272) | 0x321C03E0;
  v139 = *((_DWORD *)a1 + 50);
  if (v139 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v130, v131, v132, v133, v134, v135, v136);
    v139 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v139) = v138;
  *((_DWORD *)a1 + 50) += 4;
  JSC::MacroAssemblerARM64::store8((uint64_t)a1, 16, v137, v132, v133, v134, v135, v136);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(a1, *(JSC::VM **)(*((_QWORD *)a1 + 44) + 16), v140, v141, v142, v143, v144, (uint64_t)&v264);
  v152 = *((_DWORD *)a1 + 50);
  if (v152 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v229, v145, v146, v147, v148, v149, v150, v151);
    v152 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v152) = -721208641;
  *((_DWORD *)a1 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v264, (uint64_t)a1, v146, v147, v148, v149, v150, v151);
  v159 = HIDWORD(v242);
  v233 = (WTF *)v235;
  v234 = HIDWORD(v242);
  if (HIDWORD(v242) < 3)
  {
    v160 = v235;
  }
  else
  {
    if (HIDWORD(v242) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE8AA0);
    }
    v160 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v242)));
    v233 = (WTF *)v160;
    v159 = HIDWORD(v242);
  }
  if (v159)
  {
    v161 = v241;
    v162 = (WTF *)((char *)v241 + 12 * v159);
    do
    {
      *(_DWORD *)v160 = *(_DWORD *)v161;
      *(_QWORD *)(v160 + 4) = *(_QWORD *)((char *)v161 + 4);
      v161 = (WTF *)((char *)v161 + 12);
      v160 += 12;
    }
    while (v161 != v162);
  }
  if (v100 >= 0xB)
  {
    __break(0xC471u);
    JUMPOUT(0x197BE8A80);
  }
  v163 = off_1E35748F8[(char)v100];
  v164 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(a1, a2, v153, v154, v155, v156, v157, v158);
  v166 = v165;
  v167 = v234;
  v252 = (WTF *)v255;
  v253 = 2;
  v254 = v234;
  if (v234 < 3)
  {
    v168 = v255;
  }
  else
  {
    if (v234 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE8AA8);
    }
    v168 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v234));
    v253 = 12 * v234 / 0xC;
    v252 = (WTF *)v168;
    v167 = v234;
  }
  if (v167)
  {
    v169 = v233;
    v170 = (WTF *)((char *)v233 + 12 * v167);
    do
    {
      *(_DWORD *)v168 = *(_DWORD *)v169;
      *(_QWORD *)(v168 + 4) = *(_QWORD *)((char *)v169 + 4);
      v169 = (WTF *)((char *)v169 + 12);
      v168 += 12;
    }
    while (v169 != v170);
  }
  v171 = WTF::fastMalloc((WTF *)0xC0);
  v172 = v254;
  v256 = v259;
  v257 = 2;
  v258 = v254;
  if (v254 < 3)
  {
    v174 = v259;
  }
  else
  {
    if (v254 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE8AB0);
    }
    v173 = 12 * v254;
    v174 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v254));
    v257 = (v173 & 0xFFFFFFFC) / 0xC;
    v256 = v174;
    v172 = v254;
  }
  if (v172)
  {
    v175 = v252;
    v176 = (WTF *)((char *)v252 + 12 * v172);
    do
    {
      *(_DWORD *)v174 = *(_DWORD *)v175;
      *(_QWORD *)(v174 + 4) = *(_QWORD *)((char *)v175 + 4);
      v175 = (WTF *)((char *)v175 + 12);
      v174 += 12;
    }
    while (v175 != v176);
  }
  v177 = v258;
  v260 = v263;
  v261 = 2;
  v262 = v258;
  if (v258 < 3)
  {
    v179 = v263;
  }
  else
  {
    if (v258 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE8AB8);
    }
    v178 = 12 * v258;
    v179 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v258));
    v261 = (v178 & 0xFFFFFFFC) / 0xC;
    v260 = v179;
    v177 = v258;
  }
  if (v177)
  {
    v180 = v256;
    v181 = &v256[12 * v177];
    do
    {
      *(_DWORD *)v179 = *(_DWORD *)v180;
      *(_QWORD *)(v179 + 4) = *(_QWORD *)(v180 + 4);
      v180 += 12;
      v179 += 12;
    }
    while (v180 != v181);
  }
  v182 = v262;
  v264 = v266;
  LODWORD(v265) = 2;
  HIDWORD(v265) = v262;
  if (v262 < 3)
  {
    v184 = v266;
  }
  else
  {
    if (v262 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE8AC0);
    }
    v183 = 12 * v262;
    v184 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v262));
    LODWORD(v265) = (v183 & 0xFFFFFFFC) / 0xC;
    v264 = v184;
    v182 = v262;
  }
  if (v182)
  {
    v185 = v260;
    v186 = &v260[12 * v182];
    do
    {
      *(_DWORD *)v184 = *(_DWORD *)v185;
      *(_QWORD *)(v184 + 4) = *(_QWORD *)(v185 + 4);
      v185 += 12;
      v184 += 12;
    }
    while (v185 != v186);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v171, (uint64_t *)&v264, a1);
  v194 = (unint64_t)v264;
  if (v266 != v264 && v264 != 0)
  {
    v264 = 0;
    LODWORD(v265) = 0;
    WTF::fastFree(v194, v187, v188, v189, v190, v191, v192, v193);
  }
  *(_QWORD *)v171 = off_1E3573DA0;
  *(_QWORD *)(v171 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v171 + 100) = 0;
  *(_BYTE *)(v171 + 102) = v101;
  *(_QWORD *)(v171 + 104) = v171 + 120;
  *(_QWORD *)(v171 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, 0, v171 + 104, v101, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v192, v193);
  v203 = (unint64_t)v260;
  if (v263 != v260 && v260)
  {
    v260 = 0;
    v261 = 0;
    WTF::fastFree(v203, v196, v197, v198, v199, v200, v201, v202);
  }
  *(_QWORD *)v171 = &off_1E3573D70;
  *(_QWORD *)(v171 + 152) = v163;
  *(_QWORD *)(v171 + 160) = v164;
  *(_QWORD *)(v171 + 168) = v166;
  *(_QWORD *)(v171 + 176) = a4;
  *(_BYTE *)(v171 + 184) = a5;
  *(_BYTE *)(v171 + 185) = v232;
  v236 = v171;
  v204 = (unint64_t)v256;
  if (v259 != v256 && v256)
  {
    v256 = 0;
    v257 = 0;
    WTF::fastFree(v204, v196, v197, v198, v199, v200, v201, v202);
  }
  v205 = v252;
  if (v255 != (_BYTE *)v252 && v252)
  {
    v252 = 0;
    v253 = 0;
    WTF::fastFree((unint64_t)v205, v196, v197, v198, v199, v200, v201, v202);
  }
  v206 = (_QWORD *)((char *)a1 + 5656);
  v207 = *((unsigned int *)a1 + 1417);
  if ((_DWORD)v207 == *((_DWORD *)a1 + 1416))
  {
    v209 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v206, v207 + 1, (unint64_t)&v236);
    v207 = *((unsigned int *)a1 + 1417);
    v208 = (uint64_t *)(*((_QWORD *)a1 + 707) + 8 * v207);
    v171 = *v209;
  }
  else
  {
    v208 = (uint64_t *)(*v206 + 8 * v207);
    v209 = &v236;
  }
  *v209 = 0;
  *v208 = v171;
  *((_DWORD *)a1 + 1417) = v207 + 1;
  v210 = v236;
  v236 = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  if (v235 != (_BYTE *)v233 && v233)
    WTF::fastFree((unint64_t)v233, v196, v197, v198, v199, v200, v201, v202);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a2, v197, v198, v199, v200, v201, v202);
  if ((int)v101 > 15)
    v218 = -1;
  else
    v218 = v101;
  v219 = (char *)a1 + 12 * v218;
  v220 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v219 + 1194) = v220;
  *((_DWORD *)v219 + 1195) = 4;
  v221 = ~v220;
  if (v221 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE8A98);
  }
  v222 = *((_QWORD *)a1 + 499) + 24 * (int)v221;
  v223 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v222 = a2;
  *(_DWORD *)(v222 + 8) = v223;
  *(_BYTE *)(v222 + 17) = v101;
  *(_DWORD *)(v222 + 12) = 6;
  *(_BYTE *)(v222 + 16) = 0;
  v224 = v241;
  if (v243 != (_BYTE *)v241 && v241)
  {
    v241 = 0;
    LODWORD(v242) = 0;
    WTF::fastFree((unint64_t)v224, v211, v212, v213, v214, v215, v216, v217);
  }
  if (v244)
  {
    v225 = v245;
    if (v245 != -1)
    {
      if (v245 > 15)
        v225 = -1;
      --*(_DWORD *)(v244 + 12 * v225 + 4784);
    }
  }
  if (v246)
  {
    v226 = (char)v247;
    if ((char)v247 != -1)
    {
      if ((char)v247 > 15)
        v226 = -1;
      --*(_DWORD *)(v246 + 12 * v226 + 4784);
    }
  }
  if (v248)
  {
    v227 = (char)v249;
    if ((char)v249 != -1)
    {
      if ((char)v249 > 15)
        v227 = -1;
      --*(_DWORD *)(v248 + 12 * v227 + 4784);
    }
  }
  if (v250)
  {
    v228 = (char)v251;
    if ((char)v251 != -1)
    {
      if ((char)v251 > 15)
        v228 = -1;
      --*(_DWORD *)(v250 + 12 * v228 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileNewRegexp(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  void *v32;
  unsigned int v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  JSC::DFG::Node *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  _BYTE *v104;
  WTF *v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  _BYTE *v117;
  WTF *v118;
  WTF *v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  _BYTE *v123;
  WTF *v124;
  WTF *v125;
  unsigned int v126;
  char v127;
  int v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  unsigned int v132;
  int v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  WTF *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  WTF *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  int v170;
  char v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  WTF *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  __int128 v195;
  WTF *v196;
  unsigned int v197;
  unsigned int v198;
  _BYTE v199[24];
  uint64_t v200;
  __int128 v201;
  WTF *v202;
  uint64_t v203;
  _BYTE v204[24];
  uint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  unsigned __int8 v210;
  WTF *v211;
  unsigned int v212;
  unsigned int v213;
  _BYTE v214[24];
  _BYTE *v215;
  unsigned int v216;
  unsigned int v217;
  _BYTE v218[24];
  _BYTE *v219;
  unsigned int v220;
  unsigned int v221;
  _BYTE v222[24];
  __int128 v223;
  _BYTE v224[32];

  v10 = **((_QWORD **)a2 + 9);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v209, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v207, this, v11, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v205, this, v17, v18, v19, v20, v21, v22);
  v29 = *((_QWORD *)a2 + 3);
  v192 = v29 & 0xFF00FFFFFFFFFFFFLL;
  if ((v29 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
  v30 = ~*(_DWORD *)((v29 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v30 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE94D4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v30 + 12))
  {
    v31 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v29, v23, v24, v25, v26, v27, v28);
    v33 = v210;
    v34 = v208;
    v35 = v206;
    v194 = v31;
    if (v31 != -1)
      goto LABEL_8;
  }
  else
  {
LABEL_6:
    v33 = v210;
    v34 = v208;
    v35 = v206;
  }
  v194 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v29, v23, v24, v25, v26, v27, v28);
LABEL_8:
  v202 = (WTF *)v204;
  v203 = 2;
  v36 = *((_QWORD *)this + 495);
  v37 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v38 = *(_QWORD *)(v36 + 32);
LABEL_10:
    v39 = (_QWORD *)(v37 & 0xFFFFFFFF8);
    v40 = 1;
    v41 = 1;
LABEL_11:
    v42 = v39;
    goto LABEL_12;
  }
  v181 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
  if ((v37 & 2) != 0
    || ((v182 = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8), v182 != 0x3FFFFFFF) ? (v183 = v182 == -1) : (v183 = 1), v183))
  {
    v184 = 2;
  }
  else if (v182 >> 28)
  {
    v190 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v190 = v181;
    *(_DWORD *)(v190 + 8) = v182;
    v184 = 1;
    v181 = v190;
  }
  else
  {
    v184 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    v181 = 0;
  }
  v37 = v181 | v184;
  v38 = *(_QWORD *)(v36 + 32);
  if (((v181 | v184) & 1) == 0)
    goto LABEL_10;
  v185 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
  if ((v37 & 2) != 0
    || ((v186 = *(_DWORD *)((v37 & 0xFFFFFFFF8) + 8), v186 != 0x3FFFFFFF) ? (v187 = v186 == -1) : (v187 = 1), v187))
  {
    v188 = 2;
  }
  else if (v186 >> 28)
  {
    v193 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    v185 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v185 = v193;
    *(_DWORD *)(v185 + 8) = v186;
    v188 = 1;
  }
  else
  {
    v188 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    v185 = 0;
  }
  v189 = v185 | v188;
  v39 = (_QWORD *)(v189 & 0xFFFFFFFF8);
  if ((v189 & 1) == 0)
  {
    v41 = 0;
    v40 = 1;
    goto LABEL_11;
  }
  v40 = 0;
  v41 = 0;
  v42 = (_QWORD *)*v39;
LABEL_12:
  if (v42)
    v38 = v42[1];
  v43 = *(_QWORD *)(v38 + 8);
  if ((v40 & 1) == 0 && v39)
    WTF::fastFree((unint64_t)v39, v32, v23, v24, v25, v26, v27, v28);
  v44 = *(_DWORD *)(v43 + 976);
  if (v44)
    v45 = 16 * (v44 & 0xFFFFFFFE);
  else
    v45 = 0;
  v53 = JSC::DFG::Graph::registerStructure(v36, v45, (int *)&v223, v24, v25, v26, v27, v28);
  if ((v41 & 1) == 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v46, v47, v48, v49, v50, v51, v52);
  v55 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
  if (*(_DWORD *)(v55 + 39380) <= 0x1Fu)
  {
    __break(0xC471u);
    JUMPOUT(0x197BE9438);
  }
  *(_QWORD *)&v223 = 0;
  *((_QWORD *)&v223 + 1) = v55 + 39320;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)this, (char)v33, (uint64_t)&v223, v34, v35, (uint64_t)&v202, 1, v52, v54);
  v61 = (v53 >> 4) | ((unint64_t)*(unsigned int *)(v53 + 8) << 32);
  if (v61)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE9468);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(this, v61, (uint64_t)this + 264, v56, v57, v58, v59, v60);
    v62 = 16;
  }
  else
  {
    v62 = 63;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v62, v33, v56, v57, v58, v59, v60);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, 63, v33 | 0x800000000, v63, v64, v65, v66, v67);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v201, this, **((_QWORD **)a2 + 9), v68, v69, v70, v71, v72);
  v223 = v201;
  JSC::DFG::JITCompiler::LinkableConstant::store((int *)&v223, (uint64_t)this, v33 | 0x1000000000, v73, v74, v75, v76, v77);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v194, v33 | 0x1800000000, v78, v79, v80, v81, v82);
  JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v83, v84, v85, v86, v87, (uint64_t)&v223);
  v95 = *((_DWORD *)this + 50);
  if (v95 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v88, v89, v90, v91, v92, v93, v94);
    v95 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v95) = -721208641;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v223, (uint64_t)this, v89, v90, v91, v92, v93, v94);
  v102 = HIDWORD(v203);
  v196 = (WTF *)v199;
  v197 = 2;
  v198 = HIDWORD(v203);
  if (HIDWORD(v203) < 3)
  {
    v104 = v199;
  }
  else
  {
    if (HIDWORD(v203) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE94E4);
    }
    v103 = 12 * HIDWORD(v203);
    v104 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v203)));
    v197 = (v103 & 0xFFFFFFFC) / 0xC;
    v196 = (WTF *)v104;
    v102 = HIDWORD(v203);
  }
  if (v102)
  {
    v105 = v202;
    v106 = (WTF *)((char *)v202 + 12 * v102);
    do
    {
      *(_DWORD *)v104 = *(_DWORD *)v105;
      *(_QWORD *)(v104 + 4) = *(_QWORD *)((char *)v105 + 4);
      v105 = (WTF *)((char *)v105 + 12);
      v104 += 12;
    }
    while (v105 != v106);
  }
  v107 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
  v109 = v108;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v195, this, v10, v110, v111, v112, v113, v114);
  v191 = v195;
  v115 = v198;
  v211 = (WTF *)v214;
  v212 = 2;
  v213 = v198;
  if (v198 < 3)
  {
    v117 = v214;
  }
  else
  {
    if (v198 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE94ECLL);
    }
    v116 = 12 * v198;
    v117 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v198));
    v212 = (v116 & 0xFFFFFFFC) / 0xC;
    v211 = (WTF *)v117;
    v115 = v198;
  }
  if (v115)
  {
    v118 = v196;
    v119 = (WTF *)((char *)v196 + 12 * v115);
    do
    {
      *(_DWORD *)v117 = *(_DWORD *)v118;
      *(_QWORD *)(v117 + 4) = *(_QWORD *)((char *)v118 + 4);
      v118 = (WTF *)((char *)v118 + 12);
      v117 += 12;
    }
    while (v118 != v119);
  }
  v120 = WTF::fastMalloc((WTF *)0xC8);
  v121 = v213;
  v215 = v218;
  v216 = 2;
  v217 = v213;
  if (v213 < 3)
  {
    v123 = v218;
  }
  else
  {
    if (v213 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE94F4);
    }
    v122 = 12 * v213;
    v123 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v213));
    v216 = (v122 & 0xFFFFFFFC) / 0xC;
    v215 = v123;
    v121 = v213;
  }
  if (v121)
  {
    v124 = v211;
    v125 = (WTF *)((char *)v211 + 12 * v121);
    do
    {
      *(_DWORD *)v123 = *(_DWORD *)v124;
      *(_QWORD *)(v123 + 4) = *(_QWORD *)((char *)v124 + 4);
      v124 = (WTF *)((char *)v124 + 12);
      v123 += 12;
    }
    while (v124 != v125);
  }
  v126 = v217;
  v219 = v222;
  v220 = 2;
  v221 = v217;
  if (v217 < 3)
  {
    v127 = v33;
    v129 = v222;
  }
  else
  {
    if (v217 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE94FCLL);
    }
    v127 = v33;
    v128 = 12 * v217;
    v129 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v217));
    v220 = (v128 & 0xFFFFFFFC) / 0xC;
    v219 = v129;
    v126 = v217;
  }
  if (v126)
  {
    v130 = v215;
    v131 = &v215[12 * v126];
    do
    {
      *(_DWORD *)v129 = *(_DWORD *)v130;
      *(_QWORD *)(v129 + 4) = *(_QWORD *)(v130 + 4);
      v130 += 12;
      v129 += 12;
    }
    while (v130 != v131);
  }
  v132 = v221;
  *(_QWORD *)&v223 = v224;
  DWORD2(v223) = 2;
  HIDWORD(v223) = v221;
  if (v221 < 3)
  {
    v134 = v224;
  }
  else
  {
    if (v221 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197BE9504);
    }
    v133 = 12 * v221;
    v134 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v221));
    DWORD2(v223) = (v133 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v223 = v134;
    v132 = v221;
  }
  if (v132)
  {
    v135 = v219;
    v136 = &v219[12 * v132];
    do
    {
      *(_DWORD *)v134 = *(_DWORD *)v135;
      *(_QWORD *)(v134 + 4) = *(_QWORD *)(v135 + 4);
      v135 += 12;
      v134 += 12;
    }
    while (v135 != v136);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v120, (uint64_t *)&v223, this);
  v144 = v223;
  if (v224 != (_BYTE *)v223 && (_QWORD)v223 != 0)
  {
    *(_QWORD *)&v223 = 0;
    DWORD2(v223) = 0;
    WTF::fastFree(v144, v137, v138, v139, v140, v141, v142, v143);
  }
  *(_QWORD *)v120 = off_1E3573E00;
  *(_QWORD *)(v120 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v120 + 100) = 0;
  *(_BYTE *)(v120 + 102) = v127;
  *(_QWORD *)(v120 + 104) = v120 + 120;
  *(_QWORD *)(v120 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v120 + 104, (char)v33, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v142, v143);
  v153 = (unint64_t)v219;
  if (v222 != v219 && v219)
  {
    v219 = 0;
    v220 = 0;
    WTF::fastFree(v153, v146, v147, v148, v149, v150, v151, v152);
  }
  *(_QWORD *)v120 = &off_1E3573DD0;
  *(_QWORD *)(v120 + 152) = operationNewRegexpWithLastIndex;
  *(_QWORD *)(v120 + 160) = v107;
  *(_QWORD *)(v120 + 168) = v109;
  *(_OWORD *)(v120 + 176) = v191;
  *(_BYTE *)(v120 + 192) = v194;
  v200 = v120;
  v154 = (unint64_t)v215;
  if (v218 != v215 && v215)
  {
    v215 = 0;
    v216 = 0;
    WTF::fastFree(v154, v146, v147, v148, v149, v150, v151, v152);
  }
  v155 = v211;
  if (v214 != (_BYTE *)v211 && v211)
  {
    v211 = 0;
    v212 = 0;
    WTF::fastFree((unint64_t)v155, v146, v147, v148, v149, v150, v151, v152);
  }
  v156 = (_QWORD *)((char *)this + 5656);
  v157 = *((unsigned int *)this + 1417);
  if ((_DWORD)v157 == *((_DWORD *)this + 1416))
  {
    v159 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v156, v157 + 1, (unint64_t)&v200);
    v157 = *((unsigned int *)this + 1417);
    v158 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v157);
    v120 = *v159;
  }
  else
  {
    v158 = (uint64_t *)(*v156 + 8 * v157);
    v159 = &v200;
  }
  *v159 = 0;
  *v158 = v120;
  *((_DWORD *)this + 1417) = v157 + 1;
  v160 = v200;
  v200 = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = v196;
  if (v199 != (_BYTE *)v196 && v196)
  {
    v196 = 0;
    v197 = 0;
    WTF::fastFree((unint64_t)v161, v146, v147, v148, v149, v150, v151, v152);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v147, v148, v149, v150, v151, v152);
  v169 = (char *)this + 4776;
  v170 = *((_DWORD *)a2 + 12);
  if ((char)v33 > 15)
    v171 = -1;
  else
    v171 = v127;
  v172 = &v169[12 * v171];
  *(_DWORD *)v172 = v170;
  *((_DWORD *)v172 + 1) = 4;
  v173 = ~v170;
  if (v173 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BE94DCLL);
  }
  v174 = *((_QWORD *)this + 499) + 24 * (int)v173;
  v175 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v174 = a2;
  *(_DWORD *)(v174 + 8) = v175;
  *(_BYTE *)(v174 + 17) = v127;
  *(_DWORD *)(v174 + 12) = 6;
  *(_BYTE *)(v174 + 16) = 0;
  v176 = v202;
  if (v204 != (_BYTE *)v202 && v202)
  {
    v202 = 0;
    LODWORD(v203) = 0;
    WTF::fastFree((unint64_t)v176, v162, v163, v164, v165, v166, v167, v168);
  }
  if (v192)
  {
    v177 = v194;
    if (v194 > 15)
      v177 = -1;
    --*(_DWORD *)&v169[12 * v177 + 8];
  }
  if (v205)
  {
    v178 = v206;
    if (v206 != -1)
    {
      if (v206 > 15)
        v178 = -1;
      --*(_DWORD *)(v205 + 12 * v178 + 4784);
    }
  }
  if (v207)
  {
    v179 = v208;
    if (v208 != -1)
    {
      if (v208 > 15)
        v179 = -1;
      --*(_DWORD *)(v207 + 12 * v179 + 4784);
    }
  }
  if (v209)
  {
    v180 = (char)v210;
    if ((char)v210 != -1)
    {
      if ((char)v210 > 15)
        v180 = -1;
      --*(_DWORD *)(v209 + 12 * v180 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateCellType(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned __int8 v10;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[12];

  v8 = a5;
  v10 = a3;
  v13 = *(_QWORD *)(a1 + 5616);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = (_QWORD *)(v14 + 24);
  v16 = (_QWORD *)(v14 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v18 = (void *)*(unsigned int *)(v13 + 88);
  if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v17, v18, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v17 + 20) = (_DWORD)v18;
  }
  if ((*(_QWORD *)(v17 + 8) & ~a4) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotType((uint64_t)v21, a1, v10, v8 | ((unint64_t)v8 << 8), a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v10 << 32) | 0x80000000), a2, a4, (uint64_t)v21, 1uLL, v19, v20);
  }
}

void JSC::DFG::SpeculativeJIT::speculateNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BYTE v32[12];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v24 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v24 | 2;
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v24 & 1) != 0)
          {
            v28 = 2 * *v25;
            while (v28 * 4)
            {
              v29 = *(_QWORD *)&v25[v28];
              if ((*(_BYTE *)(v29 + 19) & 0xC) == 0)
              {
                v30 = *(_QWORD *)(v29 + 96);
                v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
                v28 -= 2;
                if (v31 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v25, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v25)
          {
            if ((*((_BYTE *)v25 + 19) & 0xC) != 0
              || ((v26 = *((_QWORD *)v25 + 12), (v26 & 1) != 0)
                ? (v27 = (v26 >> 1) & 3)
                : (v27 = *(unsigned __int8 *)(v26 + 4)),
                  v27 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFF8CFFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      || (v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 == -1))
    {
LABEL_9:
      v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    JSC::MacroAssemblerARM64::branchTest64(a1, 0, v20, 27, a5, a6, a7, a8, (uint64_t)v32);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v20 << 32) | 0x80000000), a2, 0x7300000000uLL, (uint64_t)v32, 1uLL, v21, v22);
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if ((int)v20 > 15)
        v23 = -1;
      else
        v23 = v20;
      --*(_DWORD *)(a1 + 12 * v23 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateRealNumber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _BYTE v64[12];
  unsigned int v65[3];
  uint64_t v66;
  char v67;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v56 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v60 = 2 * *v57;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v57[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_58;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_58:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFCCFFFFFFFFLL) == 0)
    return;
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12))
    v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
  else
LABEL_9:
    v20 = -1;
  v21 = 0;
  v22 = a1 + 4968;
  v23 = (_DWORD *)(a1 + 4976);
  v24 = 0x17u;
  v25 = -1;
  while (*v23)
  {
LABEL_15:
    ++v21;
    v23 += 3;
    if (v21 == 23)
    {
      v21 = v24;
      v27 = (unsigned int *)(v22 + 12 * v24);
      v28 = *v27;
      *(_QWORD *)v27 = 0xFFFFFFFF3FFFFFFFLL;
      v23 = v27 + 2;
      goto LABEL_18;
    }
  }
  v26 = *(v23 - 1);
  if (v26 != -1)
  {
    if (v26 < v25)
    {
      v24 = v21;
      v25 = *(v23 - 1);
    }
    goto LABEL_15;
  }
  v28 = *(v23 - 2);
  *((_QWORD *)v23 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_18:
  *v23 = 1;
  v29 = JSC::FPRInfo::toRegister::registerForIndex[v21];
  if (v28 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(a1, v28, a3, a4, a5, a6, a7, a8);
  if (v20 == -1)
    v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v66, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a1, v20, v67, v29, 1, v30, v31, v32);
  v40 = *(_DWORD *)(a1 + 200);
  if (v40 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = ((_DWORD)v29 << 16) | (32 * v29) | 0x1E602000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 0, v34, v35, v36, v37, v38, v39, (uint64_t)v65);
  JSC::MacroAssemblerARM64::branch64(a1, 3, v20, 27, v41, v42, v43, v44, (uint64_t)v64);
  JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v20 << 32) | 0x80000000), a2, 0x3300000000uLL, (uint64_t)v64, 1uLL, v45, v46);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v65, a1, v47, v48, v49, v50, v51, v52);
  if (v66)
  {
    v53 = v67;
    if (v67 != -1)
    {
      if (v67 > 15)
        v53 = -1;
      --*(_DWORD *)(v66 + 12 * v53 + 4784);
    }
  }
  v54 = v22 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v29];
  --*(_DWORD *)(v54 + 8);
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v20 > 15)
      v55 = -1;
    else
      v55 = v20;
    --*(_DWORD *)(a1 + 12 * v55 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateDoubleRepReal(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v26 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_27;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_27:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFCFFFFFFFFFLL) != 0)
  {
    if (((a2 >> 50) & 0x3F) - 49 >= 3
      || (v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v19 >= *(unsigned int *)(a1 + 4004)))
    {
      __break(0xC471u);
      JUMPOUT(0x197BE9EA4);
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      || (v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, a2, a3, a4, a5, a6, a7, a8), v21 == -1))
    {
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v22 = *(_DWORD *)(a1 + 200);
    if (v22 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v20, a3, a4, a5, a6, a7, a8);
      v22 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = (v21 << 16) | (32 * v21) | 0x1E602000;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 1, a3, a4, a5, a6, a7, a8, (uint64_t)v34);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)0xFF80000000, a2, 0x3000000000uLL, (uint64_t)v34, 1uLL, v23, v24);
    v25 = a1 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v21];
    --*(_DWORD *)(v25 + 4976);
  }
}

void JSC::DFG::SpeculativeJIT::speculateBoolean(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v22 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v22 | 2;
          v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v22 & 1) != 0)
          {
            v26 = 2 * *v23;
            while (v26 * 4)
            {
              v27 = *(_QWORD *)&v23[v26];
              if ((*(_BYTE *)(v27 + 19) & 0xC) == 0)
              {
                v28 = *(_QWORD *)(v27 + 96);
                v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
                v26 -= 2;
                if (v29 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v23, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_27;
            }
          }
          else if (v23)
          {
            if ((*((_BYTE *)v23 + 19) & 0xC) != 0
              || ((v24 = *((_QWORD *)v23 + 12), (v24 & 1) != 0)
                ? (v25 = (v24 >> 1) & 3)
                : (v25 = *(unsigned __int8 *)(v24 + 4)),
                  v25 == 2))
            {
LABEL_27:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFEFFFFFFFFFFLL) != 0)
  {
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
    }
    else
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
        || (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, a2, a3, a4, a5, a6, a7, a8), v20 == -1))
      {
        v20 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a1, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 15)
        v21 = -1;
      else
        v21 = v20;
      --*(_DWORD *)(a1 + 12 * v21 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateCell(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v30 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v30 | 2;
          v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v30 & 1) != 0)
          {
            v34 = 2 * *v31;
            while (v34 * 4)
            {
              v35 = *(_QWORD *)&v31[v34];
              if ((*(_BYTE *)(v35 + 19) & 0xC) == 0)
              {
                v36 = *(_QWORD *)(v35 + 96);
                v37 = (v36 & 1) != 0 ? (v36 >> 1) & 3 : *(unsigned __int8 *)(v36 + 4);
                v34 -= 2;
                if (v37 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v31, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_31;
            }
          }
          else if (v31)
          {
            if ((*((_BYTE *)v31 + 19) & 0xC) != 0
              || ((v32 = *((_QWORD *)v31 + 12), (v32 & 1) != 0)
                ? (v33 = (v32 >> 1) & 3)
                : (v33 = *(unsigned __int8 *)(v32 + 4)),
                  v33 == 2))
            {
LABEL_31:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFD3FF00000008) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v19 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
      }
      else
      {
        v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12);
        v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
        if (v20)
          v28 = v21 == -1;
        else
          v28 = 0;
        if (v28)
          v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, v22, v23, v24, v25, v26, v27);
        if (v21 > 15)
          v29 = -1;
        else
          v29 = v21;
        --*(_DWORD *)(a1 + 12 * v29 + 4784);
      }
    }
    else
    {
      JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateCellOrOther(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  unsigned int v59[3];
  uint64_t v60;
  char v61;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = (_QWORD *)(v11 + 24);
  v14 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFD1FF00000008) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v17 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12))
    {
      v18 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v60, (JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24);
      v31 = v61;
      if ((_DWORD)v18 != -1)
      {
        JSC::MacroAssemblerARM64::branchTest64(a1, 0, v18, 28, v27, v28, v29, v30, (uint64_t)v59);
LABEL_13:
        v43 = *(_QWORD *)(a1 + 5616);
        v44 = *(_QWORD *)(v43 + 8);
        v45 = (_QWORD *)(v44 + 24);
        v46 = (_QWORD *)(v44 + 8);
        if ((a2 & 1) != 0)
          v46 = v45;
        v47 = *v46 + 32 * *(unsigned int *)(v12 + 20);
        v48 = (void *)*(unsigned int *)(v43 + 88);
        if ((_DWORD)v48 != *(_DWORD *)(v47 + 20))
        {
          if ((*(_QWORD *)(v47 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v47, v48, v32, v33, v34, v35, v36, v37);
          else
            *(_DWORD *)(v47 + 20) = (_DWORD)v48;
        }
        if ((*(_QWORD *)(v47 + 8) & 0xFFFFD1FF00000008) != 0)
        {
          v49 = (void *)(((unint64_t)v18 << 32) | 0x80000000);
          if ((_DWORD)v18 == -1)
            LODWORD(v18) = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v32, v33, v34, v35, v36, v37);
          JSC::MacroAssemblerARM64::and64(a1, -9, v18, v31);
          JSC::MacroAssemblerARM64::branch64(a1, 1, v31, 2, v50, v51, v52, v53, (uint64_t)v58);
          JSC::DFG::SpeculativeJIT::typeCheck(a1, v49, a2, 0x2E00FFFFFFF7uLL, (uint64_t)v58, 1uLL, v54, v55);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v59, a1, v32, v33, v34, v35, v36, v37);
        if (v60)
        {
          v56 = v61;
          if (v61 != -1)
          {
            if (v61 > 15)
              v56 = -1;
            --*(_DWORD *)(v60 + 12 * v56 + 4784);
          }
        }
        if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          if ((int)v18 > 15)
            v57 = -1;
          else
            v57 = v18;
          --*(_DWORD *)(a1 + 12 * v57 + 4784);
        }
        return;
      }
    }
    else
    {
LABEL_10:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v60, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
      v31 = v61;
    }
    v38 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v25, v26, v27, v28, v29, v30);
    LODWORD(v18) = v38;
    JSC::MacroAssemblerARM64::branchTest64(a1, 0, v38, 28, v39, v40, v41, v42, (uint64_t)v59);
    if ((_DWORD)v18 == -1)
      LODWORD(v18) = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v32, v33, v34, v35, v36, v37);
    goto LABEL_13;
  }
}

void JSC::DFG::SpeculativeJIT::speculateObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateFunction(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFFBLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateFunction(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateFunction(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateFinalObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if (*(_QWORD *)(v17 + 8) >= 2uLL)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 24, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 1uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateFinalObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if (*(_QWORD *)(v16 + 8) >= 2uLL)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateFinalObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateFinalObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateRegExpObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFBFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 59, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x40000uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateRegExpObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFBFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v16 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v16 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12)
      && (v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v17 != -1))
    {
      v18 = v17;
      JSC::DFG::SpeculativeJIT::speculateRegExpObject(a1, a2, v17, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v18 = v19;
      JSC::DFG::SpeculativeJIT::speculateRegExpObject(a1, a2, v19, v20, v21, v22, v23, v24);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v18 > 15)
      v25 = -1;
    else
      v25 = v18;
    --*(_DWORD *)(a1 + 12 * v25 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v16 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v16 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12)
      && (v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v17 != -1))
    {
      v18 = v17;
      JSC::DFG::SpeculativeJIT::speculateArray(a1, a2, v17, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v18 = v19;
      JSC::DFG::SpeculativeJIT::speculateArray(a1, a2, v19, v20, v21, v22, v23, v24);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v18 > 15)
      v25 = -1;
    else
      v25 = v18;
    --*(_DWORD *)(a1 + 12 * v25 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateProxyObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE v28[12];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = (_QWORD *)(v11 + 24);
  v14 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFDFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v17 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12)
      || (v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), v18 == -1))
    {
LABEL_9:
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v19 = *(_QWORD *)(a1 + 5616);
    v20 = *(_QWORD *)(v19 + 8);
    v21 = (_QWORD *)(v20 + 24);
    v22 = (_QWORD *)(v20 + 8);
    if ((a2 & 1) != 0)
      v22 = v21;
    v23 = *v22 + 32 * *(unsigned int *)(v12 + 20);
    v24 = (void *)*(unsigned int *)(v19 + 88);
    if ((_DWORD)v24 != *(_DWORD *)(v23 + 20))
    {
      if ((*(_QWORD *)(v23 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v23, v24, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v23 + 20) = (_DWORD)v24;
    }
    if ((*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFDFFFFFFLL) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotType((uint64_t)v28, a1, v18, 15677, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v18 << 32) | 0x80000000), a2, 0x2000000uLL, (uint64_t)v28, 1uLL, v25, v26);
    }
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (v18 > 15)
        v27 = -1;
      else
        v27 = v18;
      --*(_DWORD *)(a1 + 12 * v27 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateDerivedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_30;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_30:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFBFFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 37, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x4000000uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateDerivedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFBFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateDerivedArray(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateDerivedArray(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculatePromiseObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_30;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_30:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFEFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 68, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x100000uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculatePromiseObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFEFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculatePromiseObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculatePromiseObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateDateObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFF7FFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 60, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x80000uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateDateObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFF7FFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateDateObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateDateObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateImmutableButterfly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFF7FFFFFFFLL) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotType((uint64_t)v19, a1, v8, 4883, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x80000000uLL, (uint64_t)v19, 1uLL, v17, v18);
  }
}

void JSC::DFG::SpeculativeJIT::speculateMapObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BYTE v34[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_20;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_20:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFDFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 69, v20, v21, v22, v23, (uint64_t)v34);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x200000uLL, (uint64_t)v34, 1uLL, v24, v25);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateMapObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;

  if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x200000, a4, a5, a6, a7, a8))
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v23, a1, a2, v10, v11, v12, v13, v14);
    v21 = v25;
    if (v25 == 255)
    {
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v23, v24, v15, v16, v17, v18, v19, v20);
      v25 = v21;
    }
    JSC::DFG::SpeculativeJIT::speculateMapObject(a1, a2, (char)v21, v16, v17, v18, v19, v20);
    if ((v24 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v22 = (char)v25;
      if ((char)v25 > 15)
        v22 = -1;
      --*(_DWORD *)(v23 + 12 * v22 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateSetObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFBFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 70, v17, v18, v19, v20, (uint64_t)v23);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x400000uLL, (uint64_t)v23, 1uLL, v21, v22);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateSetObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFBFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateSetObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateSetObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateMapIteratorObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFF7FFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 65, v17, v18, v19, v20, (uint64_t)v23);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x8000000uLL, (uint64_t)v23, 1uLL, v21, v22);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateMapIteratorObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFF7FFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateMapIteratorObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateMapIteratorObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateSetIteratorObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFF7FFFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 66, v17, v18, v19, v20, (uint64_t)v23);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x8000000uLL, (uint64_t)v23, 1uLL, v21, v22);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateSetIteratorObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFF7FFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateSetIteratorObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateSetIteratorObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateWeakMapObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFF7FFFFFLL) != 0)
  {
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v8 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 71, v17, v18, v19, v20, (uint64_t)v23);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x800000uLL, (uint64_t)v23, 1uLL, v21, v22);
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateWeakMapObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFF7FFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateWeakMapObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateWeakMapObject(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateWeakSetObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE v56[12];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v11 + 24);
  v15 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v40 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v40 | 2;
          v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v40 & 1) != 0)
          {
            v48 = 2 * *v41;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v41[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v41, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_59;
            }
          }
          else if (v41)
          {
            if ((*((_BYTE *)v41 + 19) & 0xC) != 0
              || ((v42 = *((_QWORD *)v41 + 12), (v42 & 1) != 0)
                ? (v43 = (v42 >> 1) & 3)
                : (v43 = *(unsigned __int8 *)(v42 + 4)),
                  v43 == 2))
            {
LABEL_59:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFEFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v20 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v20 >= *(unsigned int *)(a1 + 4004))
      goto LABEL_70;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12)
      || (v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), v23 = v21, v21 == -1))
    {
LABEL_9:
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v24 = *(_QWORD *)(a1 + 5616);
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(unsigned int *)(v12 + 20);
    v27 = (uint64_t *)(v25 + 24);
    v28 = (uint64_t *)(v25 + 8);
    if ((a2 & 1) != 0)
      v28 = v27;
    v29 = *v28;
    v30 = *v28 + 32 * v26;
    v31 = *(_DWORD *)(v24 + 88);
    v32 = *(_DWORD *)(v30 + 20);
    if (v31 != v32)
    {
      if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v32 ^ v31) >= 2)
        {
          v44 = *(_QWORD *)v30;
          if (*(_QWORD *)v30 != 4)
          {
            *(_QWORD *)v30 = v44 | 2;
            v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v44 & 1) != 0)
            {
              v52 = 2 * *v45;
              while (v52 * 4)
              {
                v53 = *(_QWORD *)&v45[v52];
                if ((*(_BYTE *)(v53 + 19) & 0xC) == 0)
                {
                  v54 = *(_QWORD *)(v53 + 96);
                  v55 = (v54 & 1) != 0 ? (v54 >> 1) & 3 : *(unsigned __int8 *)(v54 + 4);
                  v52 -= 2;
                  if (v55 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v45, v22, a3, a4, a5, a6, a7, a8);
                goto LABEL_69;
              }
            }
            else if (v45)
            {
              if ((*((_BYTE *)v45 + 19) & 0xC) != 0
                || ((v46 = *((_QWORD *)v45 + 12), (v46 & 1) != 0)
                  ? (v47 = (v46 >> 1) & 3)
                  : (v47 = *(unsigned __int8 *)(v46 + 4)),
                    v47 == 2))
              {
LABEL_69:
                *(_QWORD *)v30 = 4;
              }
            }
          }
          *(_DWORD *)(v29 + 32 * v26 + 16) = -21020677;
        }
        if ((v31 & 1) != 0)
          *(_QWORD *)v30 &= ~2uLL;
      }
      *(_DWORD *)(v30 + 20) = v31;
    }
    if ((*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFEFFFFFFLL) == 0)
      goto LABEL_16;
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v23 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 72, v33, v34, v35, v36, (uint64_t)v56);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v23 << 32) | 0x80000000), a2, 0x1000000uLL, (uint64_t)v56, 1uLL, v37, v38);
LABEL_16:
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((char)v23 > 15)
          v39 = -1;
        else
          v39 = v23;
        --*(_DWORD *)(a1 + 12 * v39 + 4784);
      }
      return;
    }
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x197BED534);
  }
}

void JSC::DFG::SpeculativeJIT::speculateDataViewObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT::speculateCellType(a1, a2, a3, 0x200000000000uLL, 50, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::speculateDataViewObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE v56[12];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v11 + 24);
  v15 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v40 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v40 | 2;
          v41 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v40 & 1) != 0)
          {
            v48 = 2 * *v41;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v41[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v41, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_59;
            }
          }
          else if (v41)
          {
            if ((*((_BYTE *)v41 + 19) & 0xC) != 0
              || ((v42 = *((_QWORD *)v41 + 12), (v42 & 1) != 0)
                ? (v43 = (v42 >> 1) & 3)
                : (v43 = *(unsigned __int8 *)(v42 + 4)),
                  v43 == 2))
            {
LABEL_59:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFDFFFFFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v20 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v20 >= *(unsigned int *)(a1 + 4004))
      goto LABEL_70;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12)
      || (v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), v23 = v21, v21 == -1))
    {
LABEL_9:
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v24 = *(_QWORD *)(a1 + 5616);
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(unsigned int *)(v12 + 20);
    v27 = (uint64_t *)(v25 + 24);
    v28 = (uint64_t *)(v25 + 8);
    if ((a2 & 1) != 0)
      v28 = v27;
    v29 = *v28;
    v30 = *v28 + 32 * v26;
    v31 = *(_DWORD *)(v24 + 88);
    v32 = *(_DWORD *)(v30 + 20);
    if (v31 != v32)
    {
      if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v32 ^ v31) >= 2)
        {
          v44 = *(_QWORD *)v30;
          if (*(_QWORD *)v30 != 4)
          {
            *(_QWORD *)v30 = v44 | 2;
            v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v44 & 1) != 0)
            {
              v52 = 2 * *v45;
              while (v52 * 4)
              {
                v53 = *(_QWORD *)&v45[v52];
                if ((*(_BYTE *)(v53 + 19) & 0xC) == 0)
                {
                  v54 = *(_QWORD *)(v53 + 96);
                  v55 = (v54 & 1) != 0 ? (v54 >> 1) & 3 : *(unsigned __int8 *)(v54 + 4);
                  v52 -= 2;
                  if (v55 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v45, v22, a3, a4, a5, a6, a7, a8);
                goto LABEL_69;
              }
            }
            else if (v45)
            {
              if ((*((_BYTE *)v45 + 19) & 0xC) != 0
                || ((v46 = *((_QWORD *)v45 + 12), (v46 & 1) != 0)
                  ? (v47 = (v46 >> 1) & 3)
                  : (v47 = *(unsigned __int8 *)(v46 + 4)),
                    v47 == 2))
              {
LABEL_69:
                *(_QWORD *)v30 = 4;
              }
            }
          }
          *(_DWORD *)(v29 + 32 * v26 + 16) = -21020677;
        }
        if ((v31 & 1) != 0)
          *(_QWORD *)v30 &= ~2uLL;
      }
      *(_DWORD *)(v30 + 20) = v31;
    }
    if ((*(_QWORD *)(v30 + 8) & 0xFFFFDFFFFFFFFFFFLL) == 0)
      goto LABEL_16;
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v23 | 0x500000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 50, v33, v34, v35, v36, (uint64_t)v56);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v23 << 32) | 0x80000000), a2, 0x200000000000uLL, (uint64_t)v56, 1uLL, v37, v38);
LABEL_16:
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        if ((char)v23 > 15)
          v39 = -1;
        else
          v39 = v23;
        --*(_DWORD *)(a1 + 12 * v39 + 4784);
      }
      return;
    }
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x197BED900);
  }
}

void JSC::DFG::SpeculativeJIT::speculateObjectOrOther(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  void *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[12];
  unsigned int v82[2];
  char v83;
  __int16 v84;
  char v85;
  _BYTE v86[12];
  unsigned int v87[3];
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned int v93;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFDDFFF0000008) != 0)
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v90, a1, a2, 1, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v88, (JSC::DFG::SpeculativeJIT *)a1, v16, v17, v18, v19, v20, v21);
    v28 = v89;
    v29 = v92;
    if (v92 == 255)
    {
      v29 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v22, v23, v24, v25, v26, v27);
      v92 = v29;
    }
    JSC::AssemblyHelpers::branchIfNotCell(a1, v29, 1, v23, v24, v25, v26, v27, (uint64_t)v87);
    v36 = v92;
    v37 = v92;
    if (v92 == 255)
    {
      v38 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v30, v31, v32, v33, v34, v35);
      v92 = v38;
      if (v38 == -1)
      {
        v37 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v39, v31, v32, v33, v34, v35);
        v92 = v37;
        v36 = -1;
      }
      else
      {
        v36 = v38;
        v37 = v38;
      }
    }
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0xFFFFF3FF0FFFFFFFLL, v31, v32, v33, v34, v35))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v36, v42, v43, v44, v45, v46, (uint64_t)v86);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v37 << 32) | 0x80000000), a2, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v86, 1uLL, v47, v48);
    }
    JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v40, v41, v42, v43, v44, v45, v46, (int *)&v93);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v49, v50, v51, v52, v53, v54);
    if (*(_BYTE *)(a1 + 328))
      v61 = 69;
    else
      v61 = 65;
    v82[0] = v93;
    v82[1] = 0;
    v83 = v61;
    v84 = 15;
    v85 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v87, a1, v55, v56, v57, v58, v59, v60);
    v68 = v92;
    if (v92 == 255)
    {
      v68 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v62, v63, v64, v65, v66, v67);
      v92 = v68;
    }
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x2E00FFFFFFF7, v63, v64, v65, v66, v67))
    {
      v77 = (void *)(((unint64_t)v68 << 32) | 0x80000000);
      v78 = v92;
      if (v92 == 255)
      {
        v78 = JSC::DFG::SpeculativeJIT::fillJSValue(v90, v91, v69, v70, v71, v72, v73, v74);
        v92 = v78;
      }
      JSC::AssemblyHelpers::branchIfNotOther((uint64_t)v81, a1, v78, v28);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, v77, a2, 0x2E00FFFFFFF7uLL, (uint64_t)v81, 1uLL, v79, v80);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v82, a1, v69, v70, v71, v72, v73, v74);
    if (v88)
    {
      v75 = v89;
      if (v89 != -1)
      {
        if (v89 > 15)
          v75 = -1;
        --*(_DWORD *)(v88 + 12 * v75 + 4784);
      }
    }
    if ((v91 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v76 = (char)v92;
      if ((char)v92 > 15)
        v76 = -1;
      --*(_DWORD *)(v90 + 12 * v76 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateStringOrOther(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::AssemblerBuffer *v50;
  int i;
  unsigned int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  char v73;
  JSC::AssemblerBuffer *v74;
  uint64_t v75;
  char v76;
  _BYTE v77[12];
  unsigned int v78[2];
  char v79;
  __int16 v80;
  char v81;
  _BYTE v82[12];
  unsigned int v83[3];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = (_QWORD *)(v11 + 24);
  v14 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFDFFCFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v17 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      goto LABEL_55;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12))
    {
      v18 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v75, (JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24);
      if (v18 != -1)
      {
LABEL_12:
        v31 = v76;
        JSC::AssemblyHelpers::branchIfNotCell(a1, v18, 1, v26, v27, v28, v29, v30, (uint64_t)v83);
        v38 = *(_QWORD *)(a1 + 5616);
        v39 = *(_QWORD *)(v38 + 8);
        v40 = (_QWORD *)(v39 + 24);
        v41 = (_QWORD *)(v39 + 8);
        if ((a2 & 1) != 0)
          v41 = v40;
        v42 = *v41 + 32 * *(unsigned int *)(v12 + 20);
        v43 = *(unsigned int *)(v38 + 88);
        if ((_DWORD)v43 != *(_DWORD *)(v42 + 20))
        {
          if ((*(_QWORD *)(v42 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v42, (void *)v43, v32, v33, v34, v35, v36, v37);
          else
            *(_DWORD *)(v42 + 20) = v43;
        }
        if ((*(_QWORD *)(v42 + 8) & 0x2C00CFFFFFF7) == 0)
          goto LABEL_18;
        if (*(_BYTE *)(a1 + 212))
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
          JSC::MacroAssemblerARM64::load8(a1, v18 | 0x500000000, *(char *)(a1 + 304), v33, v34, v35, v36, v37);
          JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v44, v45, v46, v47, (uint64_t)v82);
          JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v18 << 32) | 0x80000000), a2, 0xFFFFD3FF30000008, (uint64_t)v82, 1uLL, v48, v49);
LABEL_18:
          v50 = (JSC::AssemblerBuffer *)(a1 + 56);
          for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(a1 + 192))
            {
              v74 = v50;
              JSC::AssemblerBuffer::outOfLineGrow(v50, v43, v32, v33, v34, v35, v36, v37);
              v50 = v74;
              i = *(_DWORD *)(a1 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
            i = *(_DWORD *)(a1 + 200) + 4;
          }
          v52 = i;
          if ((i + 4) > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v50, v43, v32, v33, v34, v35, v36, v37);
            v52 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v52) = 335544320;
          *(_DWORD *)(a1 + 200) += 4;
          if (*(_BYTE *)(a1 + 328))
            v53 = 69;
          else
            v53 = 65;
          v78[0] = i;
          v78[1] = 0;
          v79 = v53;
          v80 = 15;
          v81 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v83, a1, v32, v33, v34, v35, v36, v37);
          v60 = *(_QWORD *)(a1 + 5616);
          v61 = *(_QWORD *)(v60 + 8);
          v62 = (_QWORD *)(v61 + 24);
          v63 = (_QWORD *)(v61 + 8);
          if ((a2 & 1) != 0)
            v63 = v62;
          v64 = *v63 + 32 * *(unsigned int *)(v12 + 20);
          v65 = (void *)*(unsigned int *)(v60 + 88);
          if ((_DWORD)v65 != *(_DWORD *)(v64 + 20))
          {
            if ((*(_QWORD *)(v64 + 8) & 0x2800FFFFFFF7) != 0)
              JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v64, v65, v54, v55, v56, v57, v58, v59);
            else
              *(_DWORD *)(v64 + 20) = (_DWORD)v65;
          }
          if ((*(_QWORD *)(v64 + 8) & 0xFFFFD1FF00000008) != 0)
          {
            JSC::MacroAssemblerARM64::and64(a1, -9, v18, v31);
            JSC::MacroAssemblerARM64::branch64(a1, 1, v31, 2, v66, v67, v68, v69, (uint64_t)v77);
            JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v18 << 32) | 0x80000000), a2, 0x2E00FFFFFFF7uLL, (uint64_t)v77, 1uLL, v70, v71);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v78, a1, v54, v55, v56, v57, v58, v59);
          if (v75)
          {
            v72 = v76;
            if (v76 != -1)
            {
              if (v76 > 15)
                v72 = -1;
              --*(_DWORD *)(v75 + 12 * v72 + 4784);
            }
          }
          if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if ((char)v18 > 15)
              v73 = -1;
            else
              v73 = v18;
            --*(_DWORD *)(a1 + 12 * v73 + 4784);
          }
          return;
        }
        __break(0xC471u);
LABEL_55:
        JUMPOUT(0x197BEE068);
      }
    }
    else
    {
LABEL_10:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v75, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    }
    LOBYTE(v18) = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v25, v26, v27, v28, v29, v30);
    goto LABEL_12;
  }
}

void JSC::DFG::SpeculativeJIT::speculateStringIdent(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = (_QWORD *)(v11 + 24);
  v14 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFEFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v17 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v17 + 12)
      || (v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v18 == -1))
    {
LABEL_9:
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::SpeculativeJIT::speculateString(a1, a2, v18, a4, a5, a6, a7, a8);
    v25 = *(_QWORD *)(a1 + 5616);
    v26 = *(_QWORD *)(v25 + 8);
    v27 = (_QWORD *)(v26 + 24);
    v28 = (_QWORD *)(v26 + 8);
    if ((a2 & 1) != 0)
      v28 = v27;
    v29 = *v28 + 32 * *(unsigned int *)(v12 + 20);
    v30 = (void *)*(unsigned int *)(v25 + 88);
    if ((_DWORD)v30 != *(_DWORD *)(v29 + 20))
    {
      if ((*(_QWORD *)(v29 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v29, v30, v19, v20, v21, v22, v23, v24);
      else
        *(_DWORD *)(v29 + 20) = (_DWORD)v30;
    }
    if ((*(_QWORD *)(v29 + 8) & 0xFFFFFFFFEFFFFFFFLL) != 0)
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v37, (JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24);
      JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage(a1, a2, v18, v38, v31, v32, v33, v34);
      if (v37)
      {
        v35 = v38;
        if (v38 != -1)
        {
          if (v38 > 15)
            v35 = -1;
          --*(_DWORD *)(v37 + 12 * v35 + 4784);
        }
      }
    }
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if ((int)v18 > 15)
        v36 = -1;
      else
        v36 = v18;
      --*(_DWORD *)(a1 + 12 * v36 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateString(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateString(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateString(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateStringObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v28 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v28 | 2;
          v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v28 & 1) != 0)
          {
            v32 = 2 * *v29;
            while (v32 * 4)
            {
              v33 = *(_QWORD *)&v29[v32];
              if ((*(_BYTE *)(v33 + 19) & 0xC) == 0)
              {
                v34 = *(_QWORD *)(v33 + 96);
                v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
                v32 -= 2;
                if (v35 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v29, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v29)
          {
            if ((*((_BYTE *)v29 + 19) & 0xC) != 0
              || ((v30 = *((_QWORD *)v29 + 12), (v30 & 1) != 0)
                ? (v31 = (v30 >> 1) & 3)
                : (v31 = *(unsigned __int8 *)(v30 + 4)),
                  v31 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFDFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateStringObject(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v21 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::speculateStringObject(a1, a2, v21, v22, v23, v24, v25, v26);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v27 = -1;
    else
      v27 = v21;
    --*(_DWORD *)(a1 + 12 * v27 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateStringOrStringObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  JSC::DFG::AbstractValue *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102[3];
  unsigned int v103[3];
  uint64_t v104;
  char v105;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v11 + 24);
  v15 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v76 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v76 | 2;
          v77 = (unsigned int *)(v76 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v76 & 1) != 0)
          {
            v89 = 2 * *v77;
            while (v89 * 4)
            {
              v90 = *(_QWORD *)&v77[v89];
              if ((*(_BYTE *)(v90 + 19) & 0xC) == 0)
              {
                v91 = *(_QWORD *)(v90 + 96);
                v92 = (v91 & 1) != 0 ? (v91 >> 1) & 3 : *(unsigned __int8 *)(v91 + 4);
                v89 -= 2;
                if (v92 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v77, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_88;
            }
          }
          else if (v77)
          {
            if ((*((_BYTE *)v77 + 19) & 0xC) != 0
              || ((v78 = *((_QWORD *)v77 + 12), (v78 & 1) != 0)
                ? (v79 = (v78 >> 1) & 3)
                : (v79 = *(unsigned __int8 *)(v78 + 4)),
                  v79 == 2))
            {
LABEL_88:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFCFFDFFFFLL) != 0)
  {
    v20 = a2 & 0xFF00FFFFFFFFFFFFLL;
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_9;
    v21 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v21 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v21 + 12)
      || (v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), v23 == -1))
    {
LABEL_9:
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    v24 = *(_QWORD *)(a1 + 5616);
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(unsigned int *)(v12 + 20);
    v27 = (uint64_t *)(v25 + 24);
    v28 = (uint64_t *)(v25 + 8);
    if ((a2 & 1) != 0)
      v28 = v27;
    v29 = *v28;
    v30 = *v28 + 32 * v26;
    v31 = *(_DWORD *)(v24 + 88);
    v32 = *(_DWORD *)(v30 + 20);
    if (v31 != v32)
    {
      if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v32 ^ v31) >= 2)
        {
          v80 = *(_QWORD *)v30;
          if (*(_QWORD *)v30 != 4)
          {
            *(_QWORD *)v30 = v80 | 2;
            v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v80 & 1) != 0)
            {
              v93 = 2 * *v81;
              while (v93 * 4)
              {
                v94 = *(_QWORD *)&v81[v93];
                if ((*(_BYTE *)(v94 + 19) & 0xC) == 0)
                {
                  v95 = *(_QWORD *)(v94 + 96);
                  v96 = (v95 & 1) != 0 ? (v95 >> 1) & 3 : *(unsigned __int8 *)(v95 + 4);
                  v93 -= 2;
                  if (v96 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v81, v22, a3, a4, a5, a6, a7, a8);
                goto LABEL_98;
              }
            }
            else if (v81)
            {
              if ((*((_BYTE *)v81 + 19) & 0xC) != 0
                || ((v82 = *((_QWORD *)v81 + 12), (v82 & 1) != 0)
                  ? (v83 = (v82 >> 1) & 3)
                  : (v83 = *(unsigned __int8 *)(v82 + 4)),
                    v83 == 2))
              {
LABEL_98:
                *(_QWORD *)v30 = 4;
              }
            }
          }
          *(_DWORD *)(v29 + 32 * v26 + 16) = -21020677;
        }
        if ((v31 & 1) != 0)
          *(_QWORD *)v30 &= ~2uLL;
      }
      *(_DWORD *)(v30 + 20) = v31;
    }
    if ((*(_QWORD *)(v30 + 8) & 0xFFFFFFFFCFFDFFFFLL) == 0)
      goto LABEL_23;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v104, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    v33 = v105;
    JSC::MacroAssemblerARM64::load8(a1, v23 | 0x500000000, v33, v34, v35, v36, v37, v38);
    JSC::MacroAssemblerARM64::branch32(a1, 0, v33, 2, v39, v40, v41, v42, (uint64_t)v103);
    JSC::MacroAssemblerARM64::branch32(a1, 1, v33, 76, v43, v44, v45, v46, (uint64_t)v102);
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v23 << 32) | 0x80000000), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), v102);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v103, a1, v47, v48, v49, v50, v51, v52);
    v60 = *(_QWORD *)(a1 + 5616);
    v61 = *(_QWORD *)(v60 + 8);
    v62 = *(unsigned int *)(v12 + 20);
    v63 = (uint64_t *)(v61 + 24);
    v64 = (uint64_t *)(v61 + 8);
    if ((a2 & 1) != 0)
      v64 = v63;
    v65 = *v64;
    v66 = *v64 + 32 * v62;
    v67 = (JSC::DFG::AbstractValue *)v66;
    v68 = *(_DWORD *)(v60 + 88);
    v69 = *(_DWORD *)(v66 + 20);
    if (v68 != v69)
    {
      if ((*(_QWORD *)(v66 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v69 ^ v68) >= 2)
        {
          v84 = *(_QWORD *)v66;
          if (*(_QWORD *)v66 != 4)
          {
            *(_QWORD *)v66 = v84 | 2;
            v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v84 & 1) != 0)
            {
              v97 = 2 * *v85;
              while (v97 * 4)
              {
                v98 = *(_QWORD *)&v85[v97];
                if ((*(_BYTE *)(v98 + 19) & 0xC) == 0)
                {
                  v99 = *(_QWORD *)(v98 + 96);
                  v100 = (v99 & 1) != 0 ? (v99 >> 1) & 3 : *(unsigned __int8 *)(v99 + 4);
                  v97 -= 2;
                  if (v100 != 2)
                    continue;
                }
                v101 = v68;
                WTF::fastFree((unint64_t)v85, v53, v54, v55, v56, v57, v58, v59);
                v68 = v101;
                goto LABEL_108;
              }
            }
            else if (v85)
            {
              if ((*((_BYTE *)v85 + 19) & 0xC) != 0
                || ((v86 = *((_QWORD *)v85 + 12), (v86 & 1) != 0)
                  ? (v87 = (v86 >> 1) & 3)
                  : (v87 = *(unsigned __int8 *)(v86 + 4)),
                    v87 == 2))
              {
LABEL_108:
                *(_QWORD *)v66 = 4;
              }
            }
          }
          *(_DWORD *)(v65 + 32 * v62 + 16) = -21020677;
        }
        if ((v68 & 1) != 0)
          *(_QWORD *)v66 &= ~2uLL;
      }
      *(_DWORD *)(v66 + 20) = v68;
    }
    v72 = *(_QWORD *)(v66 + 8);
    v71 = (uint64_t *)(v66 + 8);
    v70 = v72;
    v73 = v72 & 0x30020000;
    if (v73 == v72)
    {
LABEL_18:
      if (v104)
      {
        v74 = v105;
        if (v105 != -1)
        {
          if (v105 > 15)
            v74 = -1;
          --*(_DWORD *)(v104 + 12 * v74 + 4784);
        }
      }
LABEL_23:
      if (v20)
      {
        if (v23 > 15)
          v75 = -1;
        else
          v75 = v23;
        --*(_DWORD *)(a1 + 12 * v75 + 4784);
      }
      return;
    }
    if ((v70 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v67, 0x30020000uLL, v54, v55, v56, v57, v58, v59))
        goto LABEL_18;
    }
    else
    {
      *v71 = v73;
      if (v73)
        goto LABEL_18;
      *v71 = 0;
      v88 = v65 + 32 * v62;
      *(_DWORD *)(v88 + 16) = 0;
      if ((*(_QWORD *)v67 & 1) != 0)
        WTF::fastFree(*(_QWORD *)v67 & 0xFFFFFFFFFFFFFFFCLL, v53, v54, v55, v56, v57, v58, v59);
      *(_QWORD *)v67 = 0;
      *(_QWORD *)(v88 + 24) = 0;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
    goto LABEL_18;
  }
}

unsigned int *JSC::DFG::SpeculativeJIT::speculateNotStringVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *result;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60[3];
  unsigned int v61[3];
  uint64_t v62;
  char v63;

  v10 = a2 & 0xFF00FFFFFFFFFFFFLL;
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  v11 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x197BEEE10);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v11 + 12))
  {
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v62, (JSC::DFG::SpeculativeJIT *)a1, v13, v14, v15, v16, v17, v18);
    v25 = v63;
    if (v12 != -1)
    {
      JSC::AssemblyHelpers::branchIfNotCell(a1, v12, 1, v20, v21, v22, v23, v24, (uint64_t)v61);
      goto LABEL_10;
    }
  }
  else
  {
LABEL_7:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v62, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    v25 = v63;
  }
  v12 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v19, v20, v21, v22, v23, v24);
  JSC::AssemblyHelpers::branchIfNotCell(a1, v12, 1, v31, v32, v33, v34, v35, (uint64_t)v61);
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v36, v26, v27, v28, v29, v30);
LABEL_10:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v12 | 0x500000000, *(char *)(a1 + 304), v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v37, v38, v39, v40, (uint64_t)v60);
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage(a1, a2, v12, v25, v41, v42, v43, v44);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v60, a1, v45, v46, v47, v48, v49, v50);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v61, a1, v51, v52, v53, v54, v55, v56);
  if (v62)
  {
    v58 = v63;
    if (v63 != -1)
    {
      if (v63 > 15)
        v58 = -1;
      --*(_DWORD *)(v62 + 12 * v58 + 4784);
    }
  }
  if (v10)
  {
    if (v12 > 15)
      v59 = -1;
    else
      v59 = v12;
    --*(_DWORD *)(a1 + 12 * v59 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::speculateNotSymbol(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44[3];
  int v45;
  uint64_t v46;
  _BYTE v47[12];
  uint64_t v48;
  uint64_t v49;
  signed __int8 v50;

  result = JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, -1073741825, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v48, a1, a2, 1, v11, v12, v13, v14);
    v21 = v50;
    if (v50 == 255)
    {
      v21 = JSC::DFG::SpeculativeJIT::fillJSValue(v48, v49, v15, v16, v17, v18, v19, v20);
      v50 = v21;
    }
    *(_QWORD *)v47 = 0xFFFFFFFFLL;
    *(_DWORD *)&v47[8] = -16773311;
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x2800FFFFFFF7, v16, v17, v18, v19, v20))
    {
      JSC::AssemblyHelpers::branchIfNotCell(a1, v21, 1, v22, v23, v24, v25, v26, (uint64_t)&v45);
      *(_DWORD *)v47 = v45;
      *(_QWORD *)&v47[4] = v46;
      JSC::AssemblyHelpers::branchIfSymbol(a1, v21, v27, v28, v29, v30, v31, (uint64_t)v44);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v21 << 32) | 0x80000000), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), v44);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v47, a1, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      JSC::AssemblyHelpers::branchIfSymbol(a1, v21, v22, v23, v24, v25, v26, (uint64_t)v44);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v21 << 32) | 0x80000000), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), v44);
    }
    result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filter<JSC::DFG::Edge>(a1 + 5592, a2, 0xFFFFFFFFBFFFFFFFLL, v38, v39, v40, v41, v42);
    if ((v49 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v43 = v50;
      if (v50 > 15)
        v43 = -1;
      --*(_DWORD *)(v48 + 12 * v43 + 4784);
    }
  }
  return result;
}

void JSC::AssemblyHelpers::branchIfSymbol(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2 | 0x500000000, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
    JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 4, v10, v11, v12, v13, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::AssemblyHelpers::branchIfNotHeapBigInt(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2 | 0x500000000, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 3, v10, v11, v12, v13, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::SpeculativeJIT::speculateHeapBigInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v29 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v29 | 2;
          v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v29 & 1) != 0)
          {
            v33 = 2 * *v30;
            while (v33 * 4)
            {
              v34 = *(_QWORD *)&v30[v33];
              if ((*(_BYTE *)(v34 + 19) & 0xC) == 0)
              {
                v35 = *(_QWORD *)(v34 + 96);
                v36 = (v35 & 1) != 0 ? (v35 >> 1) & 3 : *(unsigned __int8 *)(v35 + 4);
                v33 -= 2;
                if (v36 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v30, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_39;
            }
          }
          else if (v30)
          {
            if ((*((_BYTE *)v30 + 19) & 0xC) != 0
              || ((v31 = *((_QWORD *)v30 + 12), (v31 & 1) != 0)
                ? (v32 = (v31 >> 1) & 3)
                : (v32 = *(unsigned __int8 *)(v31 + 4)),
                  v32 == 2))
            {
LABEL_39:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFF7FFFFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8), (_DWORD)v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateHeapBigInt(a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(a1, a2, a3, a4, a5, a6, a7, a8);
      v21 = v22;
      JSC::DFG::SpeculativeJIT::speculateHeapBigInt(a1, a2, v22, v23, v24, v25, v26, v27);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v28 = -1;
    else
      v28 = v21;
    --*(_DWORD *)(a1 + 12 * v28 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateNotDouble(JSC::DFG::SpeculativeJIT *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;

  if (JSC::DFG::SpeculativeJIT::needsTypeCheck((uint64_t)a1, a2, 0xFFFFFF0FFFFFFFFFLL, a4, a5, a6, a7, a8))
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v31, (uint64_t)a1, a2, 1, v10, v11, v12, v13);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v29, a1, v14, v15, v16, v17, v18, v19);
    v26 = v33;
    if (v33 == 255)
    {
      v26 = JSC::DFG::SpeculativeJIT::fillJSValue(v31, v32, v20, v21, v22, v23, v24, v25);
      v33 = v26;
    }
    JSC::DFG::SpeculativeJIT::speculateNotDouble((uint64_t)a1, a2, v26, 0, v22, v23, v24, v25);
    if (v29)
    {
      v27 = v30;
      if (v30 != -1)
      {
        if (v30 > 15)
          v27 = -1;
        --*(_DWORD *)(v29 + 12 * v27 + 4784);
      }
    }
    if ((v32 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v28 = (char)v33;
      if ((char)v33 > 15)
        v28 = -1;
      --*(_DWORD *)(v31 + 12 * v28 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateNeitherDoubleNorHeapBigInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int *v85;
  int v86;
  unint64_t v87;
  int v88;
  unsigned int v89;
  _DWORD *v90;
  uint64_t *v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  WTF *v113;
  unsigned int v115;
  char v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  _BYTE v167[12];
  int v168;
  uint64_t v169;
  _BYTE v170[12];
  int v171;
  uint64_t v172;
  WTF *v173;
  uint64_t v174;
  _BYTE v175[24];

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v11 + 24);
  v15 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v60 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v60 | 2;
          v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v60 & 1) != 0)
          {
            v137 = 2 * *v61;
            while (v137 * 4)
            {
              v138 = *(_QWORD *)&v61[v137];
              if ((*(_BYTE *)(v138 + 19) & 0xC) == 0)
              {
                v139 = *(_QWORD *)(v138 + 96);
                v140 = (v139 & 1) != 0 ? (v139 >> 1) & 3 : *(unsigned __int8 *)(v139 + 4);
                v137 -= 2;
                if (v140 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v61, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_159;
            }
          }
          else if (v61)
          {
            if ((*((_BYTE *)v61 + 19) & 0xC) != 0
              || ((v62 = *((_QWORD *)v61 + 12), (v62 & 1) != 0)
                ? (v63 = (v62 >> 1) & 3)
                : (v63 = *(unsigned __int8 *)(v62 + 4)),
                  v63 == 2))
            {
LABEL_159:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_WORD *)(v17 + 12) & 0x8F0) != 0)
  {
    v20 = a2 & 0xFF00FFFFFFFFFFFFLL;
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v21 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v21 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      goto LABEL_213;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v21 + 12))
    {
      v22 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v165, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
      if (v22 != -1)
      {
LABEL_12:
        v36 = *(_QWORD *)(a1 + 5616);
        v37 = *(_QWORD *)(v36 + 8);
        v38 = *(unsigned int *)(v12 + 20);
        v39 = (uint64_t *)(v37 + 24);
        v40 = (uint64_t *)(v37 + 8);
        if ((a2 & 1) != 0)
          v40 = v39;
        v41 = *v40;
        v42 = *v40 + 32 * v38;
        v43 = *(_DWORD *)(v36 + 88);
        v44 = *(_DWORD *)(v42 + 20);
        if (v43 != v44)
        {
          if ((*(_QWORD *)(v42 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v44 ^ v43) >= 2)
            {
              v117 = *(_QWORD *)v42;
              if (*(_QWORD *)v42 != 4)
              {
                *(_QWORD *)v42 = v117 | 2;
                v118 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v117 & 1) != 0)
                {
                  v141 = 2 * *v118;
                  while (v141 * 4)
                  {
                    v142 = *(_QWORD *)&v118[v141];
                    if ((*(_BYTE *)(v142 + 19) & 0xC) == 0)
                    {
                      v143 = *(_QWORD *)(v142 + 96);
                      v144 = (v143 & 1) != 0 ? (v143 >> 1) & 3 : *(unsigned __int8 *)(v143 + 4);
                      v141 -= 2;
                      if (v144 != 2)
                        continue;
                    }
                    WTF::fastFree((unint64_t)v118, v29, v30, v31, v32, v33, v34, v35);
                    goto LABEL_169;
                  }
                }
                else if (v118)
                {
                  if ((*((_BYTE *)v118 + 19) & 0xC) != 0
                    || ((v119 = *((_QWORD *)v118 + 12), (v119 & 1) != 0)
                      ? (v120 = (v119 >> 1) & 3)
                      : (v120 = *(unsigned __int8 *)(v119 + 4)),
                        v120 == 2))
                  {
LABEL_169:
                    *(_QWORD *)v42 = 4;
                  }
                }
              }
              *(_DWORD *)(v41 + 32 * v38 + 16) = -21020677;
            }
            if ((v43 & 1) != 0)
              *(_QWORD *)v42 &= ~2uLL;
          }
          *(_DWORD *)(v42 + 20) = v43;
        }
        if ((*(_WORD *)(v42 + 12) & 0x8F0) == 0)
          goto LABEL_68;
        v173 = (WTF *)v175;
        v174 = 2;
        v45 = *(_QWORD *)(a1 + 5616);
        v46 = *(_QWORD *)(v45 + 8);
        v47 = *(unsigned int *)(v12 + 20);
        v48 = (uint64_t *)(v46 + 24);
        v49 = (uint64_t *)(v46 + 8);
        if ((a2 & 1) != 0)
          v49 = v48;
        v50 = *v49;
        v51 = *v49 + 32 * v47;
        v52 = *(_DWORD *)(v45 + 88);
        v53 = *(_DWORD *)(v51 + 20);
        if (v52 != v53)
        {
          if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v53 ^ v52) >= 2)
            {
              v121 = *(_QWORD *)v51;
              if (*(_QWORD *)v51 != 4)
              {
                *(_QWORD *)v51 = v121 | 2;
                v122 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v121 & 1) != 0)
                {
                  v145 = 2 * *v122;
                  while (v145 * 4)
                  {
                    v146 = *(_QWORD *)&v122[v145];
                    if ((*(_BYTE *)(v146 + 19) & 0xC) == 0)
                    {
                      v147 = *(_QWORD *)(v146 + 96);
                      v148 = (v147 & 1) != 0 ? (v147 >> 1) & 3 : *(unsigned __int8 *)(v147 + 4);
                      v145 -= 2;
                      if (v148 != 2)
                        continue;
                    }
                    v164 = v47;
                    WTF::fastFree((unint64_t)v122, v29, v30, v31, v32, v33, v34, v35);
                    v47 = v164;
                    goto LABEL_203;
                  }
                }
                else if (v122)
                {
                  if ((*((_BYTE *)v122 + 19) & 0xC) != 0
                    || ((v123 = *((_QWORD *)v122 + 12), (v123 & 1) != 0)
                      ? (v124 = (v123 >> 1) & 3)
                      : (v124 = *(unsigned __int8 *)(v123 + 4)),
                        v124 == 2))
                  {
LABEL_203:
                    *(_QWORD *)v51 = 4;
                  }
                }
              }
              *(_DWORD *)(v50 + 32 * v47 + 16) = -21020677;
            }
            if ((v52 & 1) != 0)
              *(_QWORD *)v51 &= ~2uLL;
          }
          *(_DWORD *)(v51 + 20) = v52;
        }
        v54 = *(_QWORD *)(v51 + 8) & 0x300000000;
        if (v54)
        {
          JSC::MacroAssemblerARM64::branch64(a1, 2, (char)v22, 27, v32, v33, v34, v35, (uint64_t)&v171);
          v55 = v171;
          if (v171 != -1)
          {
            v56 = HIDWORD(v174);
            if (HIDWORD(v174) == (_DWORD)v174)
            {
              v57 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v173, (void *)(HIDWORD(v174) + 1), (unint64_t)&v171, v31, v32, v33, v34, v35);
              v59 = *v57;
              v58 = (uint64_t *)(v57 + 1);
              v55 = v59;
              v56 = HIDWORD(v174);
            }
            else
            {
              v58 = &v172;
            }
            v64 = (char *)v173 + 12 * v56;
            *(_DWORD *)v64 = v55;
            *(_QWORD *)(v64 + 4) = *v58;
            ++HIDWORD(v174);
          }
        }
        v65 = *(_QWORD *)(a1 + 5616);
        v66 = *(_QWORD *)(v65 + 8);
        v67 = *(unsigned int *)(v12 + 20);
        v68 = (uint64_t *)(v66 + 24);
        v69 = (uint64_t *)(v66 + 8);
        if ((a2 & 1) != 0)
          v69 = v68;
        v70 = *v69;
        v71 = *v69 + 32 * v67;
        v72 = *(_DWORD *)(v65 + 88);
        v73 = (unsigned int *)(v71 + 20);
        v74 = *(_DWORD *)(v71 + 20);
        if (v72 != v74)
        {
          if ((*(_QWORD *)(v71 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v74 ^ v72) >= 2)
            {
              v125 = *(_QWORD *)v71;
              if (*(_QWORD *)v71 != 4)
              {
                *(_QWORD *)v71 = v125 | 2;
                v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v125 & 1) != 0)
                {
                  v149 = 2 * *v126;
                  while (v149 * 4)
                  {
                    v150 = *(_QWORD *)&v126[v149];
                    if ((*(_BYTE *)(v150 + 19) & 0xC) == 0)
                    {
                      v151 = *(_QWORD *)(v150 + 96);
                      v152 = (v151 & 1) != 0 ? (v151 >> 1) & 3 : *(unsigned __int8 *)(v151 + 4);
                      v149 -= 2;
                      if (v152 != 2)
                        continue;
                    }
                    v161 = v67;
                    WTF::fastFree((unint64_t)v126, v29, v30, v31, v32, v33, v34, v35);
                    v67 = v161;
                    v73 = (unsigned int *)(v71 + 20);
                    goto LABEL_205;
                  }
                }
                else if (v126)
                {
                  if ((*((_BYTE *)v126 + 19) & 0xC) != 0
                    || ((v127 = *((_QWORD *)v126 + 12), (v127 & 1) != 0)
                      ? (v128 = (v127 >> 1) & 3)
                      : (v128 = *(unsigned __int8 *)(v127 + 4)),
                        v128 == 2))
                  {
LABEL_205:
                    *(_QWORD *)v71 = 4;
                  }
                }
              }
              *(_DWORD *)(v70 + 32 * v67 + 16) = -21020677;
            }
            if ((v72 & 1) != 0)
              *(_QWORD *)v71 &= ~2uLL;
          }
          *v73 = v72;
        }
        if ((*(_BYTE *)(v71 + 12) & 0xF0) != 0)
        {
          JSC::MacroAssemblerARM64::branchTest64(a1, 1, (char)v22, 27, v32, v33, v34, v35, (uint64_t)v170);
          JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v22 << 32) | 0x80000000), a2, 0xFFFFFF0FFFFFFFFFLL, (uint64_t)v170, 1uLL, v75, v76);
        }
        v77 = *(_QWORD *)(a1 + 5616);
        v78 = *(_QWORD *)(v77 + 8);
        v79 = *(unsigned int *)(v12 + 20);
        v80 = (uint64_t *)(v78 + 24);
        v81 = (uint64_t *)(v78 + 8);
        if ((a2 & 1) != 0)
          v81 = v80;
        v82 = *v81;
        v83 = *v81 + 32 * v79;
        v84 = *(_DWORD *)(v77 + 88);
        v85 = (unsigned int *)(v83 + 20);
        v86 = *(_DWORD *)(v83 + 20);
        if (v84 != v86)
        {
          if ((*(_QWORD *)(v83 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v86 ^ v84) >= 2)
            {
              v129 = *(_QWORD *)v83;
              if (*(_QWORD *)v83 != 4)
              {
                *(_QWORD *)v83 = v129 | 2;
                v130 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v129 & 1) != 0)
                {
                  v153 = 2 * *v130;
                  while (v153 * 4)
                  {
                    v154 = *(_QWORD *)&v130[v153];
                    if ((*(_BYTE *)(v154 + 19) & 0xC) == 0)
                    {
                      v155 = *(_QWORD *)(v154 + 96);
                      v156 = (v155 & 1) != 0 ? (v155 >> 1) & 3 : *(unsigned __int8 *)(v155 + 4);
                      v153 -= 2;
                      if (v156 != 2)
                        continue;
                    }
                    v162 = v79;
                    WTF::fastFree((unint64_t)v130, v29, v30, v31, v32, v33, v34, v35);
                    v79 = v162;
                    v85 = (unsigned int *)(v83 + 20);
                    goto LABEL_207;
                  }
                }
                else if (v130)
                {
                  if ((*((_BYTE *)v130 + 19) & 0xC) != 0
                    || ((v131 = *((_QWORD *)v130 + 12), (v131 & 1) != 0)
                      ? (v132 = (v131 >> 1) & 3)
                      : (v132 = *(unsigned __int8 *)(v131 + 4)),
                        v132 == 2))
                  {
LABEL_207:
                    *(_QWORD *)v83 = 4;
                  }
                }
              }
              *(_DWORD *)(v82 + 32 * v79 + 16) = -21020677;
            }
            if ((v84 & 1) != 0)
              *(_QWORD *)v83 &= ~2uLL;
          }
          *v85 = v84;
        }
        v87 = *(_QWORD *)(v83 + 8) & 0xFFFFD7FF00000008;
        if (v87)
        {
          JSC::AssemblyHelpers::branchIfNotCell(a1, v22, 1, v31, v32, v33, v34, v35, (uint64_t)&v168);
          v88 = v168;
          if (v168 != -1)
          {
            v89 = HIDWORD(v174);
            if (HIDWORD(v174) == (_DWORD)v174)
            {
              v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v173, (void *)(HIDWORD(v174) + 1), (unint64_t)&v168, v31, v32, v33, v34, v35);
              v92 = *v90;
              v91 = (uint64_t *)(v90 + 1);
              v88 = v92;
              v89 = HIDWORD(v174);
            }
            else
            {
              v91 = &v169;
            }
            v93 = (char *)v173 + 12 * v89;
            *(_DWORD *)v93 = v88;
            *(_QWORD *)(v93 + 4) = *v91;
            ++HIDWORD(v174);
          }
        }
        v94 = *(_QWORD *)(a1 + 5616);
        v95 = *(_QWORD *)(v94 + 8);
        v96 = *(unsigned int *)(v12 + 20);
        v97 = (uint64_t *)(v95 + 24);
        v98 = (uint64_t *)(v95 + 8);
        if ((a2 & 1) != 0)
          v98 = v97;
        v99 = *v98;
        v100 = *v98 + 32 * v96;
        v101 = *(_DWORD *)(v94 + 88);
        v102 = (unsigned int *)(v100 + 20);
        v103 = *(_DWORD *)(v100 + 20);
        if (v101 != v103)
        {
          if ((*(_QWORD *)(v100 + 8) & 0x2800FFFFFFF7) != 0)
          {
            if ((v103 ^ v101) >= 2)
            {
              v133 = *(_QWORD *)v100;
              if (*(_QWORD *)v100 != 4)
              {
                *(_QWORD *)v100 = v133 | 2;
                v134 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v133 & 1) != 0)
                {
                  v157 = 2 * *v134;
                  while (v157 * 4)
                  {
                    v158 = *(_QWORD *)&v134[v157];
                    if ((*(_BYTE *)(v158 + 19) & 0xC) == 0)
                    {
                      v159 = *(_QWORD *)(v158 + 96);
                      v160 = (v159 & 1) != 0 ? (v159 >> 1) & 3 : *(unsigned __int8 *)(v159 + 4);
                      v157 -= 2;
                      if (v160 != 2)
                        continue;
                    }
                    v163 = v96;
                    WTF::fastFree((unint64_t)v134, v29, v30, v31, v32, v33, v34, v35);
                    v96 = v163;
                    v102 = (unsigned int *)(v100 + 20);
                    goto LABEL_209;
                  }
                }
                else if (v134)
                {
                  if ((*((_BYTE *)v134 + 19) & 0xC) != 0
                    || ((v135 = *((_QWORD *)v134 + 12), (v135 & 1) != 0)
                      ? (v136 = (v135 >> 1) & 3)
                      : (v136 = *(unsigned __int8 *)(v135 + 4)),
                        v136 == 2))
                  {
LABEL_209:
                    *(_QWORD *)v100 = 4;
                  }
                }
              }
              *(_DWORD *)(v99 + 32 * v96 + 16) = -21020677;
            }
            if ((v101 & 1) != 0)
              *(_QWORD *)v100 &= ~2uLL;
          }
          *v102 = v101;
        }
        if ((*(_BYTE *)(v100 + 13) & 8) == 0)
        {
LABEL_58:
          if (v87 | v54)
          {
            v110 = HIDWORD(v174);
            if (HIDWORD(v174))
            {
              v111 = 0;
              v112 = 0;
              do
              {
                if (v112 >= HIDWORD(v174))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197BF0038);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v173 + v111), a1, v30, v31, v32, v33, v34, v35);
                ++v112;
                v111 += 12;
              }
              while (v110 != v112);
            }
          }
          v113 = v173;
          if (v175 != (_BYTE *)v173 && v173 != 0)
          {
            v173 = 0;
            LODWORD(v174) = 0;
            WTF::fastFree((unint64_t)v113, v29, v30, v31, v32, v33, v34, v35);
          }
LABEL_68:
          if (v165)
          {
            v115 = v166;
            if (v166 != -1)
            {
              if (v166 > 15)
                v115 = -1;
              --*(_DWORD *)(v165 + 12 * v115 + 4784);
            }
          }
          if (v20)
          {
            if ((char)v22 > 15)
              v116 = -1;
            else
              v116 = v22;
            --*(_DWORD *)(a1 + 12 * v116 + 4784);
          }
          return;
        }
        if (*(_BYTE *)(a1 + 212))
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
          JSC::MacroAssemblerARM64::load8(a1, v22 | 0x500000000, *(char *)(a1 + 304), v31, v32, v33, v34, v35);
          JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 3, v104, v105, v106, v107, (uint64_t)v167);
          JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v22 << 32) | 0x80000000), a2, 0xFFFFF7FFFFFFFFFFLL, (uint64_t)v167, 1uLL, v108, v109);
          goto LABEL_58;
        }
        __break(0xC471u);
LABEL_213:
        JUMPOUT(0x197BF0030);
      }
    }
    else
    {
LABEL_10:
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v165, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
    }
    LOBYTE(v22) = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, v30, v31, v32, v33, v34, v35);
    goto LABEL_12;
  }
}

void JSC::DFG::SpeculativeJIT::speculateOther(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  _BYTE v63[12];

  v8 = a3;
  v11 = *((_QWORD *)a1 + 702);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a2 & 0xFF00FFFFFFFFFFFELL;
  v14 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (uint64_t *)(v12 + 24);
  v16 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v14;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v45 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v45 | 2;
          v47 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v45 & 1) != 0)
          {
            v53 = 2 * *v47;
            while (v53 * 4)
            {
              v54 = *(_QWORD *)&v47[v53];
              if ((*(_BYTE *)(v54 + 19) & 0xC) == 0)
              {
                v55 = *(_QWORD *)(v54 + 96);
                v56 = (v55 & 1) != 0 ? (v55 >> 1) & 3 : *(unsigned __int8 *)(v55 + 4);
                v53 -= 2;
                if (v56 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v47, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_36;
            }
          }
          else if (v47)
          {
            if ((*((_BYTE *)v47 + 19) & 0xC) != 0
              || ((v48 = *((_QWORD *)v47 + 12), (v48 & 1) != 0)
                ? (v49 = (v48 >> 1) & 3)
                : (v49 = *(unsigned __int8 *)(v48 + 4)),
                  v49 == 2))
            {
LABEL_36:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v61, a1, a3, a4, a5, a6, a7, a8);
    v28 = v62;
    v29 = *((_QWORD *)a1 + 702);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(unsigned int *)(v13 + 20);
    v32 = (uint64_t *)(v30 + 24);
    v33 = (uint64_t *)(v30 + 8);
    if ((a2 & 1) != 0)
      v33 = v32;
    v34 = *v33;
    v35 = *v33 + 32 * v31;
    v36 = *(_DWORD *)(v29 + 88);
    v37 = *(_DWORD *)(v35 + 20);
    if (v36 != v37)
    {
      if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v37 ^ v36) >= 2)
        {
          v46 = *(_QWORD *)v35;
          if (*(_QWORD *)v35 != 4)
          {
            *(_QWORD *)v35 = v46 | 2;
            v50 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v46 & 1) != 0)
            {
              v57 = 2 * *v50;
              while (v57 * 4)
              {
                v58 = *(_QWORD *)&v50[v57];
                if ((*(_BYTE *)(v58 + 19) & 0xC) == 0)
                {
                  v59 = *(_QWORD *)(v58 + 96);
                  v60 = (v59 & 1) != 0 ? (v59 >> 1) & 3 : *(unsigned __int8 *)(v59 + 4);
                  v57 -= 2;
                  if (v60 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v50, v21, v22, v23, v24, v25, v26, v27);
                goto LABEL_43;
              }
            }
            else if (v50)
            {
              if ((*((_BYTE *)v50 + 19) & 0xC) != 0
                || ((v51 = *((_QWORD *)v50 + 12), (v51 & 1) != 0)
                  ? (v52 = (v51 >> 1) & 3)
                  : (v52 = *(unsigned __int8 *)(v51 + 4)),
                    v52 == 2))
              {
LABEL_43:
                *(_QWORD *)v35 = 4;
              }
            }
          }
          *(_DWORD *)(v34 + 32 * v31 + 16) = -21020677;
        }
        if ((v36 & 1) != 0)
          *(_QWORD *)v35 &= ~2uLL;
      }
      *(_DWORD *)(v35 + 20) = v36;
    }
    if ((*(_QWORD *)(v35 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
    {
      JSC::MacroAssemblerARM64::and64((uint64_t)a1, -9, v8, v28);
      JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 1, v28, 2, v38, v39, v40, v41, (uint64_t)v63);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x20000000000uLL, (uint64_t)v63, 1uLL, v42, v43);
    }
    if (v61)
    {
      v44 = v62;
      if (v62 != -1)
      {
        if (v62 > 15)
          v44 = -1;
        --*(_DWORD *)(v61 + 12 * v44 + 4784);
      }
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateOther(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v28 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v28 | 2;
          v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v28 & 1) != 0)
          {
            v32 = 2 * *v29;
            while (v32 * 4)
            {
              v33 = *(_QWORD *)&v29[v32];
              if ((*(_BYTE *)(v33 + 19) & 0xC) == 0)
              {
                v34 = *(_QWORD *)(v33 + 96);
                v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
                v32 -= 2;
                if (v35 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v29, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v29)
          {
            if ((*((_BYTE *)v29 + 19) & 0xC) != 0
              || ((v30 = *((_QWORD *)v29 + 12), (v30 & 1) != 0)
                ? (v31 = (v30 >> 1) & 3)
                : (v31 = *(unsigned __int8 *)(v30 + 4)),
                  v31 == 2))
            {
LABEL_29:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFDFFFFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_13;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v19 + 12)
      && (v20 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8), v20 != -1))
    {
      v21 = v20;
      JSC::DFG::SpeculativeJIT::speculateOther((JSC::DFG::SpeculativeJIT *)a1, a2, v20, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_13:
      v21 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::speculateOther((JSC::DFG::SpeculativeJIT *)a1, a2, v21, v22, v23, v24, v25, v26);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v21 > 15)
      v27 = -1;
    else
      v27 = v21;
    --*(_DWORD *)(a1 + 12 * v27 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::speculateMisc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[12];

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 5616);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFCFFFFFFFFFFLL) != 0)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 8, (char)v8, 14, a5, a6, a7, a8, (uint64_t)v19);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v8 << 32) | 0x80000000), a2, 0x30000000000uLL, (uint64_t)v19, 1uLL, v17, v18);
  }
}

{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v10 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFFCFFFFFFFFFFLL) != 0)
  {
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_10;
    v16 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v16 >= *(unsigned int *)(a1 + 4004))
    {
      __break(0xC471u);
      return;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v16 + 12)
      && (v17 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8), v17 != -1))
    {
      v18 = v17;
      JSC::DFG::SpeculativeJIT::speculateMisc(a1, a2, v17, a4, a5, a6, a7, a8);
    }
    else
    {
LABEL_10:
      v18 = JSC::DFG::SpeculativeJIT::fillJSValue(a1, a2, a3, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::speculateMisc(a1, a2, v18, v19, v20, v21, v22, v23);
      if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
    }
    if (v18 > 15)
      v24 = -1;
    else
      v24 = v18;
    --*(_DWORD *)(a1 + 12 * v24 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::emitSwitchIntJump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v8 = *(_QWORD *)(a1 + 3960);
  v9 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(v8 + 324) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197BF0C90);
  }
  if (*(_DWORD *)(v8 + 340) <= v9)
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x197BF0C78);
  }
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(unsigned int ***)(*(_QWORD *)(v8 + 312) + 8 * v14);
  v16 = (unsigned int **)(*(_QWORD *)(v8 + 328) + 16 * v14);
  v17 = *v16;
  if (!*v16 || !*v17)
  {
    if (*v15 && (v18 = **v15, (_DWORD)v18))
    {
      v19 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v18 + 8));
      *v19 = v18;
      bzero(v19 + 2, 8 * v18);
      v17 = *v16;
    }
    else
    {
      v19 = 0;
    }
    *v16 = v19;
    if (v17)
      WTF::fastFree((unint64_t)v17, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::sub32(a1, a3, *((unsigned int *)v15 + 2), a3, a5, a6, a7, a8);
  if (*v16)
    v24 = **v16;
  else
    v24 = 0;
  JSC::MacroAssemblerARM64::branch32(a1, 2, a3, v24, v20, v21, v22, v23, (uint64_t)&v50);
  v30 = *(_QWORD *)(a2 + 16);
  v31 = (_QWORD *)(a1 + 5264);
  v32 = v51;
  v52 = v50;
  v53 = v51;
  v54 = v30;
  v33 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v33 == *(_DWORD *)(a1 + 5272))
  {
    v48 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v33 + 1), (unint64_t)&v52, v25, v26, v27, v28, v29);
    v49 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v49 = *(_DWORD *)v48;
    *(_QWORD *)(v49 + 4) = *(_QWORD *)(v48 + 4);
    *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 16);
  }
  else
  {
    v34 = *v31 + 24 * v33;
    *(_DWORD *)v34 = v50;
    *(_QWORD *)(v34 + 4) = v32;
    *(_QWORD *)(v34 + 16) = v30;
  }
  ++*(_DWORD *)(a1 + 5276);
  if (*v16)
    v35 = (uint64_t)(*v16 + 2);
  else
    v35 = 0;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v35, a4, v25, v26, v27, v28, v29);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a4 | ((unint64_t)a3 << 8) | 0x300000000, 0x200000000uLL, *(char *)(a1 + 272), v36, v37, v38, v39);
  v47 = *(_DWORD *)(a1 + 200);
  if (v47 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v40, v41, v42, v43, v44, v45, v46);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = -702610944;
  *(_DWORD *)(a1 + 200) += 4;
  *(_BYTE *)(a2 + 44) = 1;
}

uint64_t JSC::DFG::SpeculativeJIT::addBranch(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  result = a1 + 5264;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v10 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v10 + 1), (unint64_t)&v13, a4, a5, a6, a7, a8);
    v12 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v12 = *(_DWORD *)result;
    *(_QWORD *)(v12 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v12 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v11 = *(_QWORD *)result + 24 * v10;
    *(_DWORD *)v11 = a2;
    *(_QWORD *)(v11 + 4) = a3;
    *(_QWORD *)(v11 + 16) = a4;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

void JSC::DFG::SpeculativeJIT::emitSwitchImm(JSC::DFG::SpeculativeJIT *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  unsigned int v84[3];
  uint64_t v85;
  char v86;
  JSC::DFG::SpeculativeJIT *v87;
  unint64_t v88;
  char v89;
  _BYTE v90[7];

  v10 = *(_QWORD *)(a2 + 24);
  v11 = (v10 >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    v87 = a1;
    v88 = v10;
    v89 = -1;
    v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v12 >= *((unsigned int *)a1 + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BF1024);
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v12 + 12))
      v89 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(a1, v10, (uint64_t)v90, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v85, a1, a3, a4, a5, a6, a7, a8);
    v19 = v89;
    if (v89 == 255)
    {
      v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v87, v88, (uint64_t)v90, v14, v15, v16, v17, v18);
      v89 = v19;
    }
    JSC::DFG::SpeculativeJIT::emitSwitchIntJump((uint64_t)a1, a3, v19, v86, v15, v16, v17, v18);
    JSC::DFG::SpeculativeJIT::noResult((uint64_t)a1, a2, 0, v20, v21, v22, v23, v24);
    if (v85)
    {
      v25 = v86;
      if (v86 != -1)
      {
        if (v86 > 15)
          v25 = -1;
        --*(_DWORD *)(v85 + 12 * v25 + 4784);
      }
    }
LABEL_12:
    v26 = v89;
    if (v89 > 15)
      v26 = -1;
    --*((_DWORD *)v87 + 3 * v26 + 1196);
    return;
  }
  if ((_DWORD)v11)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v87, (uint64_t)a1, v10, 0, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v85, a1, v27, v28, v29, v30, v31, v32);
  v39 = v89;
  if (v89 == 255)
  {
    v39 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v87, v88, v33, v34, v35, v36, v37, v38);
    v89 = v39;
  }
  v40 = v86;
  JSC::DFG::SpeculativeJIT::use((uint64_t *)v87, (JSC::DFG::Node *)(v88 & 0xFF00FFFFFFFFFFFFLL), v33, v34, v35, v36, v37, v38);
  JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 3, v39, 27, v41, v42, v43, v44, (uint64_t)v84);
  JSC::DFG::SpeculativeJIT::emitSwitchIntJump((uint64_t)a1, a3, v39, v40, v45, v46, v47, v48);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v84, (uint64_t)a1, v49, v50, v51, v52, v53, v54);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)a1, 0, v39, 27, v55, v56, v57, v58, (uint64_t)&v82);
  JSC::DFG::SpeculativeJIT::addBranch((uint64_t)a1, v82, v83, *(_QWORD *)(a3 + 16), v59, v60, v61, v62);
  v65 = *((_QWORD *)a1 + 495);
  if (*(_DWORD *)(v65 + 324) <= *(_QWORD *)(a3 + 32))
  {
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x197BF101CLL);
  }
  v66 = *(_QWORD *)(*(_QWORD *)(v65 + 312) + 8 * *(_QWORD *)(a3 + 32));
  v67 = (char)v40;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, 1, (uint64_t)a1 + 5752, v67, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v63, v64);
  JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<char * (*)(JSC::VM *,long long,unsigned long,int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::JSValueRegs,unsigned long,int>(&v82, (unsigned __int8 *)a1, v67, *(_QWORD *)(*((_QWORD *)a1 + 44) + 16), v39, *(_QWORD *)(a3 + 32), *(unsigned int *)(v66 + 8), v68);
  JSC::DFG::SpeculativeJIT::silentFillAllRegisters(a1, v69, v70, v71, v72, v73, v74, v75);
  JSC::MacroAssemblerARM64::farJump(a1, v67, 40321, v76, v77, v78, v79, v80);
  if (v85)
  {
    v81 = v86;
    if (v86 != -1)
    {
      if (v86 > 15)
        v81 = -1;
      --*(_DWORD *)(v85 + 12 * v81 + 4784);
    }
  }
  if ((v88 & 0xFF00FFFFFFFFFFFFLL) != 0)
    goto LABEL_12;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<char * (*)(JSC::VM *,long long,unsigned long,int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::JSValueRegs,unsigned long,int>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::AssemblerBuffer *v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 *v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int64_t v60;
  unsigned __int8 *v61;
  char v62;
  int v63;
  unsigned __int8 *__src;
  JSC::AssemblerBuffer *v65;
  unsigned int v66;
  unsigned int v67;
  __int16 v68;
  _BYTE v69[6];

  v8 = a7;
  v11 = (JSC::AssemblerBuffer *)a3;
  v12 = (uint64_t)a2;
  if (a5 != 1)
  {
    v68 = a5 | 0x100;
    v66 = 1;
    v65 = (JSC::AssemblerBuffer *)(a2 + 56);
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v69[v15 - 1] & 0x40) != 0)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        v16 |= 1 << v69[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v69[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_61;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v69[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_61;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v69[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | 0x91000000;
          }
LABEL_28:
          v30 = *(_DWORD *)(v12 + 200);
          if (v30 + 4 > *(_DWORD *)(v12 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v65, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v12 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v29;
          *(_DWORD *)(v12 + 200) += 4;
          v17 = v66;
        }
        memmove(&v69[v23 - 2], &v69[v23], 2 * v17 - v23 - 2);
        v14 = v66 - 1;
        goto LABEL_32;
      }
      v31 = HIBYTE(v68);
      v62 = v68;
      JSC::MacroAssemblerARM64::swap(v12, (char)v68, SHIBYTE(v68), a4, a5, a6, a7, a8);
      memmove(&v68, v69, 2 * v66 - 2);
      v32 = v66 - 1;
      v28 = v66 == 1;
      v67 = v32;
      v33 = (unsigned __int8 *)&v68;
      __src = &v69[2 * v32 - 2];
      if (v28)
      {
        v34 = 0;
        v35 = 0;
        v63 = 0;
        a2 = &v69[2 * v32 - 2];
      }
      else
      {
        v37 = 2 * v32;
        v38 = &v68;
        while (*(unsigned __int8 *)v38 != v31)
        {
          ++v38;
          v37 -= 2;
          if (!v37)
            goto LABEL_43;
        }
        *(_BYTE *)v38 = v62;
LABEL_43:
        v63 = 0;
        v39 = (char *)&v68;
        a2 = __src;
        v40 = __src;
        do
        {
          if (*v33 == v33[1])
          {
            v41 = v33;
            if (v40 != &v69[2 * v67 - 2])
            {
              if (v33 == a2)
              {
                v41 = v40;
              }
              else
              {
                v60 = v39 - (char *)a2;
                v61 = v40;
                memmove(v40, a2, v39 - (char *)a2);
                v41 = &v61[v60];
              }
            }
            a2 = v33 + 2;
            ++v63;
            v40 = v41;
          }
          v33 += 2;
          v39 += 2;
        }
        while (v33 < __src);
        v34 = v67;
        v35 = v67;
        __src = v40;
      }
      v36 = &v69[2 * v34 - 2];
      if (a2 != v36)
      {
        memmove(__src, a2, v36 - a2);
        v35 = v67;
      }
      v14 = v35 - v63;
LABEL_32:
      v66 = v14;
LABEL_33:
      ;
    }
    while (v14);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v12, (JSC::ARM64LogicalImmediate *)v8, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a6, 2, v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a4, 0, v47, v48, v49, v50, v51);
  JSC::DFG::SpeculativeJIT::appendCall(v12, (uint64_t)operationFindSwitchImmTargetForDouble, v52, v53, v54, v55, v56, v57, a1);
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v11 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v11 & 0x1F | 0xAA0003E0;
    }
    v59 = *(_DWORD *)(v12 + 200);
    v12 += 200;
    v58 = v59;
    v11 = (JSC::AssemblerBuffer *)(v12 - 144);
    if (v59 + 4 > *(_DWORD *)(v12 - 8))
    {
LABEL_62:
      JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v58 = *(_DWORD *)v12;
    }
    *(_DWORD *)(*(_QWORD *)v11 + v58) = (_DWORD)a1;
    *(_DWORD *)v12 += 4;
  }
}

void JSC::MacroAssemblerARM64::farJump(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = (32 * (v8 & 0x1F)) | 0xD61F0000;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::emitSwitchCharStringJump(uint64_t a1, JSC::DFG::JITCompiler *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  int v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87[2];
  char v88;
  __int16 v89;
  char v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;

  v13 = a4;
  JSC::MacroAssemblerARM64::load64(a1, a4 | 0x800000000, a5, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64(a1, 1, a5, 1, v14, v15, v16, v17, (uint64_t)&v94, v18);
  v19 = v94;
  v20 = v95;
  v27 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, a2, v21, v22, v23, v24, v25, v26);
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v93, v19, v20, a1, a5, v27, v28, a4);
  JSC::DFG::SpeculativeJIT::addSlowPathGenerator(a1, (unint64_t)&v93);
  v33 = v93;
  v93 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a5 | 0x400000000, 1, v29, v30, v31, v32, (uint64_t)&v91);
  JSC::DFG::SpeculativeJIT::addBranch(a1, v91, v92, *(_QWORD *)(a3 + 16), v34, v35, v36, v37);
  JSC::MacroAssemblerARM64::load64(a1, a5 | 0x800000000, a4, v38, v39, v40, v41, v42);
  JSC::MacroAssemblerARM64::branchTest32(a1, 1, a5 | 0x1000000000, 4, v43, v44, v45, v46, (uint64_t)&v91);
  JSC::MacroAssemblerARM64::load16(a1, v13, a5, v47, v48, v49, v50, v51);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v52, v53, v54, v55, v56, v57, v58, (int *)&v96);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v59, v60, v61, v62, v63, v64);
  if (*(_BYTE *)(a1 + 328))
    v71 = 69;
  else
    v71 = 65;
  v87[0] = v96;
  v87[1] = 0;
  v88 = v71;
  v89 = 15;
  v90 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v91, a1, v65, v66, v67, v68, v69, v70);
  JSC::MacroAssemblerARM64::load8(a1, v13, a5, v72, v73, v74, v75, v76);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v87, a1, v77, v78, v79, v80, v81, v82);
  JSC::DFG::SpeculativeJIT::emitSwitchIntJump(a1, a3, a5, a4, v83, v84, v85, v86);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  JSC::AssemblerBuffer *v26;
  JSC::AssemblerBuffer *v27;

  v16 = WTF::fastMalloc((WTF *)0xA0);
  v17 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v16, (JSC::DFG::SpeculativeJIT *)a4);
  *(_QWORD *)v17 = off_1E35746F0;
  *(_DWORD *)(v17 + 48) = a2;
  *(_QWORD *)(v17 + 52) = a3;
  v25 = *(_DWORD *)(a4 + 200);
  *(_DWORD *)(v17 + 60) = v25;
  if (v25 < *(_DWORD *)(a4 + 52))
  {
    v26 = (JSC::AssemblerBuffer *)(a4 + 56);
    do
    {
      if ((v25 + 4) > *(_DWORD *)(a4 + 192))
      {
        v27 = v26;
        JSC::AssemblerBuffer::outOfLineGrow(v26, v18, v19, v20, v21, v22, v23, v24);
        v26 = v27;
        v25 = *(_DWORD *)(a4 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a4 + 56) + v25) = -721215457;
      v25 = *(_DWORD *)(a4 + 200) + 4;
      *(_DWORD *)(a4 + 200) = v25;
      *(_DWORD *)(v16 + 60) = v25;
    }
    while (v25 < *(_DWORD *)(a4 + 52));
  }
  *(_DWORD *)(a4 + 208) = 0;
  *(_QWORD *)v16 = off_1E3573E60;
  *(_QWORD *)(v16 + 64) = 0xFFFFFFFFLL;
  *(_WORD *)(v16 + 72) = 0;
  *(_BYTE *)(v16 + 74) = a5;
  *(_QWORD *)(v16 + 80) = v16 + 96;
  *(_QWORD *)(v16 + 88) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4, 0, v16 + 80, a5, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v23, v24);
  *(_QWORD *)v16 = &off_1E3573E30;
  *(_QWORD *)(v16 + 128) = operationResolveRope;
  *(_QWORD *)(v16 + 136) = a6;
  *(_QWORD *)(v16 + 144) = a7;
  *(_BYTE *)(v16 + 152) = a8;
  *a1 = v16;
}

void JSC::MacroAssemblerARM64::load16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v8 = a3;
  v9 = a2;
  if ((HIDWORD(a2) + 256) <= 0x1FF)
  {
    v11 = ((WORD2(a2) & 0x1FF) << 12) | a3 & 0x1F | (32 * (char)a2);
    v12 = 2017460224;
LABEL_3:
    v13 = v11 | v12;
    goto LABEL_7;
  }
  if (HIDWORD(a2) <= 0x1FFE && (a2 & 0x100000000) == 0)
  {
    v11 = (HIDWORD(a2) << 9) & 0x3FFC00;
    v12 = a3 & 0x1F | (32 * (char)a2) | 0x79400000;
    goto LABEL_3;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF19C8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2 >> 32, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  v13 = v8 & 0x1F | (32 * v9) | 0x78716800;
LABEL_7:
  v16 = *(_DWORD *)(a1 + 200);
  v15 = (unsigned int *)(a1 + 200);
  v14 = v16;
  if (v16 + 4 > *(v15 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 - 36), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*((_QWORD *)v15 - 18) + v14) = v13;
  *v15 += 4;
}

void JSC::DFG::SpeculativeJIT::emitSwitchChar(JSC::DFG::SpeculativeJIT *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  unint64_t v74;
  unsigned __int8 v75;

  v11 = a2[3];
  v12 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v12 == 21)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v73, (uint64_t)a1, v11, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v71, a1, v13, v14, v15, v16, v17, v18);
    v25 = v75;
    if (v75 == 255)
    {
      v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v73, v74, v19, v20, v21, v22, v23, v24);
      v75 = v25;
    }
    v26 = v72;
    JSC::DFG::SpeculativeJIT::use(v73, (JSC::DFG::Node *)(v74 & 0xFF00FFFFFFFFFFFFLL), v19, v20, v21, v22, v23, v24);
    v27 = (char)v25;
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, a2[3], v27, v28, v29, v30, v31, v32);
  }
  else
  {
    if ((_DWORD)v12)
    {
      __break(0xC471u);
      return;
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v73, (uint64_t)a1, v11, 0, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v71, a1, v38, v39, v40, v41, v42, v43);
    v50 = v75;
    if (v75 == 255)
    {
      v50 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)v73, v74, v44, v45, v46, v47, v48, v49);
      v75 = v50;
    }
    v26 = v72;
    JSC::DFG::SpeculativeJIT::use(v73, (JSC::DFG::Node *)(v74 & 0xFF00FFFFFFFFFFFFLL), v44, v45, v46, v47, v48, v49);
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)a1, v50, 1, v51, v52, v53, v54, v55, (uint64_t)&v69);
    JSC::DFG::SpeculativeJIT::addBranch((uint64_t)a1, v69, v70, *(_QWORD *)(a3 + 16), v56, v57, v58, v59);
    v27 = (char)v50;
    JSC::AssemblyHelpers::branchIfNotString((uint64_t)a1, v27, v60, v61, v62, v63, v64, (uint64_t)&v69);
    JSC::DFG::SpeculativeJIT::addBranch((uint64_t)a1, v69, v70, *(_QWORD *)(a3 + 16), v65, v66, v67, v68);
  }
  JSC::DFG::SpeculativeJIT::emitSwitchCharStringJump((uint64_t)a1, (JSC::DFG::JITCompiler *)a2, a3, v27, v26, v33, v34, v35);
  if (v71)
  {
    v36 = v72;
    if (v72 != -1)
    {
      if (v72 > 15)
        v36 = -1;
      --*(_DWORD *)(v71 + 12 * v36 + 4784);
    }
  }
  if ((v74 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v37 = (char)v75;
    if ((char)v75 > 15)
      v37 = -1;
    --*((_DWORD *)v73 + 3 * v37 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned int a10, unsigned __int8 a11)
{
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  WTF *v124;
  WTF *v125;
  WTF *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v155;
  int v156;
  unsigned int v157;
  int v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  int v163;
  unsigned int v164;
  uint64_t v165;
  WTF *v166;
  int v167;
  uint64_t v168;
  WTF *v169;
  int v170;
  uint64_t v171;
  WTF *v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  __int128 v177;
  _BYTE v178[132];
  uint64_t v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;

  v153 = a8;
  if ((_DWORD)a6 == (_DWORD)a5)
  {
    JSC::DFG::SpeculativeJIT::jump(a1, *(_QWORD *)(a2 + 16), 1, a4, a5, a6, a7, a8);
    return;
  }
  v12 = a3;
  v13 = *((_DWORD *)a3 + 3);
  if (v13 <= a5)
  {
    __break(0xC471u);
    JUMPOUT(0x197BF2830);
  }
  v14 = a4;
  v155 = 16 * a5;
  v15 = *(_QWORD *)(*a3 + v155);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = (a5 + 1);
  v18 = a4;
  v152 = a6;
  v150 = a5;
  if (v17 >= a6)
  {
    v20 = 1;
    v22 = *(_DWORD *)(v15 + 4);
    v21 = v22;
  }
  else
  {
    if (v13 + ~(_DWORD)a5 <= (int)a6 - (int)a5 - 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2858);
    }
    v19 = a5 + 1;
    LOBYTE(v20) = 1;
    v21 = *(_DWORD *)(v15 + 4);
    v22 = v21;
    do
    {
      v23 = *(_QWORD *)(*a3 + 16 * v19);
      v24 = *(_DWORD *)(v23 + 4);
      if (v24 >= v16)
        v25 = v16;
      else
        v25 = v24;
      LODWORD(v26) = a4;
      if (v25 > a4)
      {
        v27 = *(_QWORD *)(v15 + 8);
        v28 = *(_DWORD *)(v23 + 16);
        v29 = *(_QWORD *)(v23 + 8);
        if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        {
          v26 = a4;
          if ((v28 & 4) != 0)
          {
            while (*(unsigned __int8 *)(v27 + v26) == *(unsigned __int8 *)(v29 + v26))
            {
              if (v25 == ++v26)
                goto LABEL_14;
            }
          }
          else
          {
            v26 = a4;
            while (*(_WORD *)(v29 + 2 * v26) == *(unsigned __int8 *)(v27 + v26))
            {
              if (v25 == ++v26)
                goto LABEL_14;
            }
          }
        }
        else
        {
          v26 = a4;
          if ((v28 & 4) != 0)
          {
            while (*(_WORD *)(v27 + 2 * v26) == *(unsigned __int8 *)(v29 + v26))
            {
              if (v25 == ++v26)
                goto LABEL_14;
            }
          }
          else
          {
            v26 = a4;
            while (*(unsigned __int16 *)(v27 + 2 * v26) == *(unsigned __int16 *)(v29 + 2 * v26))
            {
              if (v25 == ++v26)
              {
LABEL_14:
                LODWORD(v26) = v25;
                break;
              }
            }
          }
        }
      }
      if (v26 < v22)
        v22 = v26;
      v20 = (v21 == v24) & v20;
      if (v24 < v21)
        v21 = v24;
      ++v19;
    }
    while (v19 < a6);
  }
  if ((a11 & 1) != 0)
  {
    if (v21 != a10)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2810);
    }
    if ((v20 & 1) == 0)
    {
      __break(0xC471u);
      goto LABEL_166;
    }
  }
  if (v21 < v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197BF26E4);
  }
  v30 = v21 <= a10 || v20 == 1;
  v156 = v20;
  v157 = a5;
  if (!v30)
  {
    v76 = v22;
    v77 = *(_QWORD *)(a2 + 16);
    JSC::MacroAssemblerARM64::branch32(a1, 3, a8, v21, a5, a6, a7, a8, (uint64_t)&v177);
    v79 = (_QWORD *)(a1 + 5264);
    v80 = *(_QWORD *)((char *)&v177 + 4);
    v159 = v177;
    v160 = *(_QWORD *)((char *)&v177 + 4);
    v161 = v77;
    v81 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v81 == *(_DWORD *)(a1 + 5272))
    {
      v144 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v79, (void *)(v81 + 1), (unint64_t)&v159, a4, v78, a6, a7, a8);
      v145 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v145 = *(_DWORD *)v144;
      *(_QWORD *)(v145 + 4) = *(_QWORD *)(v144 + 4);
      *(_QWORD *)(v145 + 16) = *(_QWORD *)(v144 + 16);
    }
    else
    {
      v82 = *v79 + 24 * v81;
      *(_DWORD *)v82 = v177;
      *(_QWORD *)(v82 + 4) = v80;
      *(_QWORD *)(v82 + 16) = v77;
    }
    ++*(_DWORD *)(a1 + 5276);
    v22 = v76;
    v20 = v156;
    a5 = v157;
  }
  v31 = a11 ^ 1;
  if (v21 > a10)
    v31 = 1;
  if ((v20 & v31) == 1)
  {
    v32 = *(_QWORD *)(a2 + 16);
    JSC::MacroAssemblerARM64::branch32(a1, 1, v153, v21, a5, a6, a7, a8, (uint64_t)&v177);
    v34 = (_QWORD *)(a1 + 5264);
    v35 = *(_QWORD *)((char *)&v177 + 4);
    v159 = v177;
    v160 = *(_QWORD *)((char *)&v177 + 4);
    v161 = v32;
    v36 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v36 == *(_DWORD *)(a1 + 5272))
    {
      v142 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, (void *)(v36 + 1), (unint64_t)&v159, a4, v33, a6, a7, a8);
      v143 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v143 = *(_DWORD *)v142;
      *(_QWORD *)(v143 + 4) = *(_QWORD *)(v142 + 4);
      *(_QWORD *)(v143 + 16) = *(_QWORD *)(v142 + 16);
    }
    else
    {
      v37 = *v34 + 24 * v36;
      *(_DWORD *)v37 = v177;
      *(_QWORD *)(v37 + 4) = v35;
      *(_QWORD *)(v37 + 16) = v32;
    }
    ++*(_DWORD *)(a1 + 5276);
    a5 = v157;
  }
  v151 = v22;
  v38 = v22 >= v14;
  v39 = v22 - v14;
  if (v39 != 0 && v38)
  {
    v40 = a7 | (v18 << 32);
    do
    {
      if (*((_DWORD *)v12 + 3) <= a5)
      {
        __break(0xC471u);
        JUMPOUT(0x197BF2820);
      }
      v41 = *(_QWORD *)(*v12 + v155);
      if (v18 >= *(unsigned int *)(v41 + 4))
      {
        __break(0xC471u);
        JUMPOUT(0x197BF2684);
      }
      v42 = *(_QWORD *)(v41 + 8);
      if ((*(_BYTE *)(v41 + 16) & 4) != 0)
        v43 = *(unsigned __int8 *)(v42 + v18);
      else
        v43 = *(unsigned __int8 *)(v42 + 2 * v18);
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197BF26A4);
      }
      v44 = v12;
      v45 = *(_QWORD *)(a2 + 16);
      v46 = v43;
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v40, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::branch32(a1, 1, 17, v46, v47, v48, v49, v50, (uint64_t)&v177);
      v52 = *(_QWORD *)((char *)&v177 + 4);
      v159 = v177;
      v160 = *(_QWORD *)((char *)&v177 + 4);
      v161 = v45;
      v53 = *(unsigned int *)(a1 + 5276);
      if ((_DWORD)v53 == *(_DWORD *)(a1 + 5272))
      {
        v55 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v53 + 1), (unint64_t)&v159, a4, v51, a6, a7, a8);
        v56 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
        *(_DWORD *)v56 = *(_DWORD *)v55;
        *(_QWORD *)(v56 + 4) = *(_QWORD *)(v55 + 4);
        *(_QWORD *)(v56 + 16) = *(_QWORD *)(v55 + 16);
      }
      else
      {
        v54 = *(_QWORD *)(a1 + 5264) + 24 * v53;
        *(_DWORD *)v54 = v177;
        *(_QWORD *)(v54 + 4) = v52;
        *(_QWORD *)(v54 + 16) = v45;
      }
      v12 = v44;
      ++*(_DWORD *)(a1 + 5276);
      ++v18;
      v40 += 0x100000000;
      --v39;
      v20 = v156;
      a5 = v157;
    }
    while (v39);
  }
  if (v21 != v151)
  {
    if ((int)a5 + 2 > v152)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2768);
    }
    JSC::MacroAssemblerARM64::load8(a1, a7 | ((unint64_t)v151 << 32), a9, a4, a5, a6, a7, a8);
    v181 = 0;
    v182 = 0;
    LODWORD(v57) = *((_DWORD *)v12 + 3);
    if (v57 <= v157)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2860);
    }
    v58 = *v12;
    v59 = *(_QWORD *)(*v12 + v155);
    if (*(_DWORD *)(v59 + 4) <= v151)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2788);
    }
    v60 = *(_QWORD *)(v59 + 8);
    if ((*(_BYTE *)(v59 + 16) & 4) != 0)
      v61 = *(unsigned __int8 *)(v60 + v151);
    else
      v61 = *(unsigned __int8 *)(v60 + 2 * v151);
    LOBYTE(v179) = v61;
    HIDWORD(v179) = v157;
    v180 = v17;
    if (v17 >= v152)
    {
      v83 = 0;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      v64 = 16 * v17;
      v65 = v17;
      do
      {
        if (v65 >= v57)
        {
          __break(0xC471u);
          JUMPOUT(0x197BF2828);
        }
        v66 = *(_QWORD *)(v58 + v64);
        if (*(_DWORD *)(v66 + 4) <= v151)
        {
          __break(0xC471u);
          JUMPOUT(0x197BF26C4);
        }
        v67 = *(_QWORD *)(v66 + 8);
        if ((*(_BYTE *)(v66 + 16) & 4) != 0)
          v68 = *(unsigned __int8 *)(v67 + v151);
        else
          v68 = *(unsigned __int16 *)(v67 + 2 * v151);
        if (v68 != v61)
        {
          v180 = v17;
          if (v63 == (_DWORD)v182)
          {
            v62 = v181;
            v63 = HIDWORD(v182);
            v74 = v181 + 12 * HIDWORD(v182);
            v75 = *(_DWORD *)(v73 + 8);
            *(_QWORD *)v74 = *(_QWORD *)v73;
            *(_DWORD *)(v74 + 8) = v75;
          }
          else
          {
            v69 = v179;
            v70 = v62 + 12 * v63;
            *(_DWORD *)(v70 + 8) = v180;
            *(_QWORD *)v70 = v69;
          }
          HIDWORD(v182) = ++v63;
          v57 = *((unsigned int *)v12 + 3);
          if (v65 >= v57)
          {
            __break(0xC471u);
            JUMPOUT(0x197BF2850);
          }
          v58 = *v12;
          v71 = *(_QWORD *)(*v12 + v64);
          if (*(_DWORD *)(v71 + 4) <= v151)
          {
            __break(0xC471u);
            JUMPOUT(0x197BF2724);
          }
          v72 = *(_QWORD *)(v71 + 8);
          if ((*(_BYTE *)(v71 + 16) & 4) != 0)
            v61 = *(unsigned __int8 *)(v72 + v151);
          else
            v61 = *(unsigned __int8 *)(v72 + 2 * v151);
          LOBYTE(v179) = v61;
          HIDWORD(v179) = v17;
        }
        ++v65;
        LODWORD(v17) = v17 + 1;
        v180 = v17;
        v64 += 16;
      }
      while (v152 != (_DWORD)v17);
      v83 = v63;
      if (v63 != (_DWORD)v182)
      {
        v84 = v63 + 1;
        v85 = v62 + 12 * v63;
        v86 = v179;
        *(_DWORD *)(v85 + 8) = v180;
        *(_QWORD *)v85 = v86;
        HIDWORD(v182) = v84;
        v87 = v181;
        v88 = a9;
LABEL_80:
        *(_QWORD *)&v177 = v178;
        *((_QWORD *)&v177 + 1) = 16;
        if (v84)
        {
          v89 = v84;
          v90 = (unsigned __int8 *)v87;
          do
          {
            v91 = HIDWORD(v177);
            if (HIDWORD(v177) == DWORD2(v177))
            {
              WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>((uint64_t)&v177, v90);
            }
            else
            {
              *(_QWORD *)(v177 + 8 * HIDWORD(v177)) = *v90;
              HIDWORD(v177) = v91 + 1;
            }
            v90 += 12;
            --v89;
          }
          while (v89);
          v92 = (_BYTE *)v177;
          v93 = HIDWORD(v177);
        }
        else
        {
          v93 = 0;
          v92 = v178;
        }
        JSC::BinarySwitch::BinarySwitch((uint64_t)&v159, v88, (uint64_t)v92, v93, 0);
        if (JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v159, (JSC::MacroAssembler *)a1, v94, v95, v96, v97, v98, v99))
        {
          do
          {
            if (v164 <= v176)
            {
              __break(0xC471u);
              JUMPOUT(0x197BF2838);
            }
            v107 = *((_DWORD *)v162 + 4 * v176 + 2);
            if (v84 <= v107)
            {
              __break(0xC471u);
              JUMPOUT(0x197BF2840);
            }
            LOBYTE(v149) = v156;
            HIDWORD(v148) = v21;
            LOBYTE(v148) = v88;
            JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse(a1, a2, v12, v151 + 1, *(unsigned int *)(v87 + 12 * v107 + 4), *(unsigned int *)(v87 + 12 * v107 + 8), a7, v153, v148, v149);
          }
          while ((JSC::BinarySwitch::advance((JSC::BinarySwitch *)&v159, (JSC::MacroAssembler *)a1, v108, v109, v110, v111, v112, v113) & 1) != 0);
        }
        if (v174)
        {
          v114 = *(_QWORD *)(a2 + 16);
          v115 = v174 - 1;
          v116 = 12 * (v174 - 1);
          do
          {
            if (v174 <= v115)
            {
              __break(0xC471u);
              JUMPOUT(0x197BF2818);
            }
            v117 = *(_DWORD *)((char *)v172 + v116);
            v118 = *(_QWORD *)((char *)v172 + v116 + 4);
            v183 = v117;
            v184 = v118;
            v185 = v114;
            v119 = *(unsigned int *)(a1 + 5276);
            if ((_DWORD)v119 == *(_DWORD *)(a1 + 5272))
            {
              v121 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v119 + 1), (unint64_t)&v183, v102, v103, v104, v105, v106);
              v122 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
              *(_DWORD *)v122 = *(_DWORD *)v121;
              *(_QWORD *)(v122 + 4) = *(_QWORD *)(v121 + 4);
              *(_QWORD *)(v122 + 16) = *(_QWORD *)(v121 + 16);
            }
            else
            {
              v120 = *(_QWORD *)(a1 + 5264) + 24 * v119;
              *(_DWORD *)v120 = v117;
              *(_QWORD *)(v120 + 4) = v118;
              *(_QWORD *)(v120 + 16) = v114;
            }
            ++*(_DWORD *)(a1 + 5276);
            v116 -= 12;
            --v115;
          }
          while (v115 != -1);
        }
        v123 = v172;
        if (&v175 != (uint64_t *)v172 && v172)
        {
          v172 = 0;
          v173 = 0;
          WTF::fastFree((unint64_t)v123, v100, v101, v102, v103, v104, v105, v106);
        }
        v124 = v169;
        if (&v171 != (uint64_t *)v169 && v169)
        {
          v169 = 0;
          v170 = 0;
          WTF::fastFree((unint64_t)v124, v100, v101, v102, v103, v104, v105, v106);
        }
        v125 = v166;
        if (&v168 != (uint64_t *)v166 && v166)
        {
          v166 = 0;
          v167 = 0;
          WTF::fastFree((unint64_t)v125, v100, v101, v102, v103, v104, v105, v106);
        }
        v126 = v162;
        if (&v165 != (uint64_t *)v162 && v162)
        {
          v162 = 0;
          v163 = 0;
          WTF::fastFree((unint64_t)v126, v100, v101, v102, v103, v104, v105, v106);
        }
        v127 = v177;
        if (v178 != (_BYTE *)v177 && (_QWORD)v177)
        {
          *(_QWORD *)&v177 = 0;
          DWORD2(v177) = 0;
          WTF::fastFree(v127, v100, v101, v102, v103, v104, v105, v106);
        }
        if (v87)
          WTF::fastFree(v87, v100, v101, v102, v103, v104, v105, v106);
        return;
      }
    }
    v88 = a9;
    v87 = v181;
    v139 = HIDWORD(v182);
    v140 = v181 + 12 * HIDWORD(v182);
    v141 = *(_DWORD *)(v138 + 8);
    *(_QWORD *)v140 = *(_QWORD *)v138;
    *(_DWORD *)(v140 + 8) = v141;
    v84 = v139 + 1;
    HIDWORD(v182) = v139 + 1;
    goto LABEL_80;
  }
  if (v20)
  {
    if ((_DWORD)v17 != v152)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2704);
    }
    if (*((_DWORD *)v12 + 3) <= a5)
    {
      __break(0xC471u);
      JUMPOUT(0x197BF2848);
    }
    JSC::DFG::SpeculativeJIT::jump(a1, *(_QWORD *)(*v12 + 16 * v150 + 8), 1, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*((_DWORD *)v12 + 3) <= a5)
    {
      __break(0xC471u);
LABEL_166:
      JUMPOUT(0x197BF2420);
    }
    v128 = *(_QWORD *)(*v12 + 16 * v150 + 8);
    JSC::MacroAssemblerARM64::branch32(a1, 0, v153, v151, a5, a6, a7, a8, (uint64_t)&v177);
    v134 = (_QWORD *)(a1 + 5264);
    v135 = *(_QWORD *)((char *)&v177 + 4);
    v159 = v177;
    v160 = *(_QWORD *)((char *)&v177 + 4);
    v161 = v128;
    v136 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v136 == *(_DWORD *)(a1 + 5272))
    {
      v146 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v134, (void *)(v136 + 1), (unint64_t)&v159, v129, v130, v131, v132, v133);
      v147 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v147 = *(_DWORD *)v146;
      *(_QWORD *)(v147 + 4) = *(_QWORD *)(v146 + 4);
      *(_QWORD *)(v147 + 16) = *(_QWORD *)(v146 + 16);
    }
    else
    {
      v137 = *v134 + 24 * v136;
      *(_DWORD *)v137 = v177;
      *(_QWORD *)(v137 + 4) = v135;
      *(_QWORD *)(v137 + 16) = v128;
    }
    ++*(_DWORD *)(a1 + 5276);
    HIDWORD(v148) = v151 + 1;
    LOBYTE(v148) = a9;
    JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse(a1, a2, v12, v151, v17, v152, a7, v153, v148, 0);
  }
}

uint64_t WTF::StringImpl::at(WTF::StringImpl *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  if (*((_DWORD *)this + 1) <= a2)
  {
    result = 1161;
    __break(0xC471u);
  }
  else
  {
    v2 = *((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 16) & 4) != 0)
      return *(unsigned __int8 *)(v2 + a2);
    else
      return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::emitSwitchStringOnString(JSC::DFG::SpeculativeJIT *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int *v74;
  int *v75;
  int v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t *v85;
  unint64_t *v86;
  WTF::StringImpl *v87;
  JSC::DFG::Node *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  unsigned int *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  WTF *v149;
  WTF *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint8x8_t v160;
  __int32 v161;
  uint8x8_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  BOOL v168;
  unsigned int v169;
  unsigned int v170;
  unint64_t v171;
  JSC::DFG::Node *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char v189;
  char v190;
  uint64_t v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int *v195;
  JSC::AssemblerBuffer *v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  unsigned __int8 *v205;
  uint64_t v206;
  int v207;
  unsigned __int8 *v208;
  uint64_t v209;
  _BYTE *v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char v217;
  int v218;
  unsigned __int8 *__dst;
  unint64_t *v220;
  int v221;
  WTF *v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  WTF *v228;
  uint64_t v229;
  _BYTE v230[24];
  uint64_t v231;
  unsigned __int8 v232;
  uint64_t v233;
  char v234;
  __int128 v235;
  __int16 v236;
  unint64_t v237;
  unsigned int *v238;

  *(_BYTE *)(a3 + 44) = 1;
  v8 = *((_QWORD *)a1 + 495);
  v9 = *(_QWORD *)(a3 + 32);
  if (*(_DWORD *)(v8 + 356) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x197BF34C0);
  }
  if (*(_DWORD *)(v8 + 372) <= v9)
  {
    __break(0xC471u);
LABEL_181:
    JUMPOUT(0x197BF3224);
  }
  v14 = *(_QWORD *)(a3 + 32);
  v15 = *(_QWORD *)(*(_QWORD *)(v8 + 344) + 8 * v14);
  v16 = *(_QWORD *)(v8 + 360);
  v17 = *(_DWORD **)(v16 + 8 * v14);
  if (!v17 || !*v17)
  {
    v18 = *(_DWORD *)(v15 + 12);
    v19 = v18 + 1;
    if (v18 == -1)
    {
      v20 = 0;
    }
    else
    {
      v20 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * (v18 + 1) + 8));
      *v20 = v19;
      bzero(v20 + 2, 8 * v19);
      v17 = *(_DWORD **)(v16 + 8 * v14);
    }
    *(_QWORD *)(v16 + 8 * v14) = v20;
    if (v17)
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v21)
  {
    v22 = 0;
    v23 = 32 * v21;
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)a3 - 32 + v23);
      if ((*(_BYTE *)(v24 + 16) & 4) == 0)
        goto LABEL_119;
      v25 = *(_DWORD *)(v24 + 4);
      if (v25 > xmmword_1ECF4C4C0)
        goto LABEL_119;
      v22 += v25;
      v23 -= 32;
    }
    while (v23);
    if (v22 > DWORD1(xmmword_1ECF4C4C0))
    {
LABEL_119:
      JSC::DFG::SpeculativeJIT::flushRegisters(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v178 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(a1, (JSC::DFG::JITCompiler *)a2, v172, v173, v174, v175, v176, v177);
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,unsigned long,JSC::UnlinkedStringJumpTable const*,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,unsigned long,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((int *)&v228, (unsigned __int8 *)a1, a4, v178, v179, *(_QWORD *)(a3 + 32), v15, a4);
      JSC::MacroAssemblerARM64::farJump(a1, a4, 40321, v180, v181, v182, v183, v184);
      return;
    }
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v233, a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v231, a1, v26, v27, v28, v29, v30, v31);
  v32 = v234;
  v33 = (char)v232;
  v34 = v232;
  v228 = (WTF *)v230;
  v229 = 2;
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a4 | 0x800000000, v33, v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)a1, 1, v33, 1, v40, v41, v42, v43, (uint64_t)&v226, v44);
  v50 = v226;
  if (v226 != -1)
  {
    v51 = HIDWORD(v229);
    if (HIDWORD(v229) == (_DWORD)v229)
    {
      v52 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v228, (void *)(HIDWORD(v229) + 1), (unint64_t)&v226, v45, v46, v47, v48, v49);
      v54 = *v52;
      v53 = (uint64_t *)(v52 + 1);
      v50 = v54;
      v51 = HIDWORD(v229);
    }
    else
    {
      v53 = &v227;
    }
    v55 = (char *)v228 + 12 * v51;
    *(_DWORD *)v55 = v50;
    *(_QWORD *)(v55 + 4) = *v53;
    ++HIDWORD(v229);
  }
  v56 = v32;
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, v34 | 0x400000000, v56, v45, v46, v47, v48, v49);
  if (!*((_BYTE *)a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_181;
  }
  *(_DWORD *)(*((_QWORD *)a1 + 37) + 208) &= ~*((_DWORD *)a1 + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, v34 | 0x1000000000, *((char *)a1 + 304), v57, v58, v59, v60, v61);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, (uint64_t)a1, 0, 17, v62, v63, v64, v65, (uint64_t)&v224, v66);
  v72 = v224;
  if (v224 != -1)
  {
    v73 = HIDWORD(v229);
    if (HIDWORD(v229) == (_DWORD)v229)
    {
      v74 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v228, (void *)(HIDWORD(v229) + 1), (unint64_t)&v224, v67, v68, v69, v70, v71);
      v76 = *v74;
      v75 = v74 + 1;
      v72 = v76;
      v73 = HIDWORD(v229);
    }
    else
    {
      v75 = &v225;
    }
    v77 = (char *)v228 + 12 * v73;
    *(_DWORD *)v77 = v72;
    *(_QWORD *)(v77 + 4) = *(_QWORD *)v75;
    ++HIDWORD(v229);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, v34 | 0x800000000, a4, v67, v68, v69, v70, v71);
  v222 = 0;
  v223 = 0;
  if (!*(_DWORD *)(a3 + 12))
  {
    v86 = 0;
    v85 = 0;
LABEL_118:
    v87 = 0;
    goto LABEL_36;
  }
  v78 = 0;
  v79 = 0;
  LODWORD(v80) = 0;
  do
  {
    v81 = (uint64_t *)(*(_QWORD *)a3 + v78);
    v82 = *v81;
    v83 = v81[2];
    *(_QWORD *)&v235 = v82;
    *((_QWORD *)&v235 + 1) = v83;
    if ((_DWORD)v80 == (_DWORD)v223)
    {
      v84 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v222, v80 + 1, (unint64_t)&v235);
      *((_OWORD *)v222 + HIDWORD(v223)) = *v84;
    }
    else
    {
      *((_OWORD *)v222 + v80) = v235;
    }
    v80 = ++HIDWORD(v223);
    ++v79;
    v78 += 32;
  }
  while (v79 < *(unsigned int *)(a3 + 12));
  v85 = (uint64_t *)v222;
  v86 = (unint64_t *)((char *)v222 + 16 * v80);
  if (!(_DWORD)v80)
    goto LABEL_118;
  v87 = (WTF::StringImpl *)(126 - 2 * __clz(v80));
LABEL_36:
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::DFG::SpeculativeJIT::StringSwitchCase *,false>(v85, v86, v87, 1);
  JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse((uint64_t)a1, a3, (uint64_t *)&v222, 0, 0, HIDWORD(v223), a4, v56, v34, 0, 0);
  if (HIDWORD(v229))
  {
    v94 = 0;
    v95 = 0;
    v96 = 12 * HIDWORD(v229);
    do
    {
      if (v95 >= HIDWORD(v229))
      {
        __break(0xC471u);
        goto LABEL_177;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v228 + v94), (uint64_t)a1, (uint64_t)v88, v89, v90, v91, v92, v93);
      ++v95;
      v94 += 12;
    }
    while (v96 != v94);
  }
  v97 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(a1, (JSC::DFG::JITCompiler *)a2, v88, v89, v90, v91, v92, v93);
  v99 = v98;
  v100 = *(_QWORD *)(a3 + 32);
  v220 = (unint64_t *)((char *)a1 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a1, 1, (uint64_t)a1 + 5752, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v101, v102);
  *(_QWORD *)&v235 = &v236;
  DWORD2(v235) = 1;
  if ((_DWORD)a4 == 3)
    goto LABEL_41;
  v236 = a4 | 0x300;
  HIDWORD(v235) = 1;
  v153 = 1;
  do
  {
    v154 = 0;
    v155 = 0;
    v156 = v235;
    v157 = v153;
    do
    {
      if ((*(_BYTE *)(v235 + v154 + 1) & 0x40) != 0)
        goto LABEL_177;
      v155 |= 1 << *(_BYTE *)(v235 + v154 + 1);
      v154 += 2;
    }
    while (2 * v153 != v154);
    v158 = 0;
    do
    {
      v159 = *(_BYTE *)(v235 + v158) & 0x7F;
      if (v159 >= 0x40)
        goto LABEL_177;
      v155 &= ~(1 << v159);
      v158 += 2;
    }
    while (2 * v153 != v158);
    v160 = (uint8x8_t)vcnt_s8((int8x8_t)v155);
    v160.i16[0] = vaddlv_u8(v160);
    v161 = v160.i32[0];
    v162 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v155));
    v162.i16[0] = vaddlv_u8(v162);
    if (v162.i32[0] + v161)
    {
      v163 = 0;
      if (v153 <= 1uLL)
        v164 = 1;
      else
        v164 = v153;
      v165 = 2 * v164;
      while (1)
      {
        v166 = *(unsigned __int8 *)(v235 + v163 + 1);
        if ((v166 & 0x7Fu) >= 0x40)
          goto LABEL_177;
        if (((v155 >> (v166 & 0x7F)) & 1) != 0)
          break;
        v163 += 2;
        if (v165 == v163)
          goto LABEL_110;
      }
      v167 = *(unsigned __int8 *)(v235 + v163);
      if (v167 == v166)
        goto LABEL_108;
      v167 = (char)v167;
      if ((char)v167 == 63)
      {
        if ((char)v166 != 31)
        {
          v169 = v166 & 0x1F | 0xD2800000;
          goto LABEL_105;
        }
      }
      else
      {
        v168 = v166 == 31 || v167 == 31;
        if (!v168)
        {
          v169 = v166 & 0xFFE0FFFF | ((v167 & 0x1F) << 16) | 0xAA0003E0;
LABEL_105:
          v170 = *((_DWORD *)a1 + 50);
          if (v170 + 4 > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v103, v104, v105, v106, v107, v108, v109);
            v170 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v170) = v169;
          *((_DWORD *)a1 + 50) += 4;
          v156 = v235;
          v157 = HIDWORD(v235);
LABEL_108:
          memmove((void *)(v156 + v163), (const void *)(v156 + v163 + 2), 2 * v157 - v163 - 2);
          v153 = HIDWORD(v235) - 1;
          goto LABEL_109;
        }
      }
      v169 = (char)v166 | (32 * v167) | 0x91000000;
      goto LABEL_105;
    }
    v203 = *(_BYTE *)(v235 + 1);
    v217 = *(_BYTE *)v235;
    JSC::MacroAssemblerARM64::swap((uint64_t)a1, *(char *)v235, v203, v105, v106, v107, v108, v109);
    memmove((void *)v235, (const void *)(v235 + 2), 2 * HIDWORD(v235) - 2);
    v204 = (HIDWORD(v235) - 1);
    v168 = HIDWORD(v235) == 1;
    HIDWORD(v235) = v204;
    v205 = (unsigned __int8 *)v235;
    __dst = (unsigned __int8 *)(v235 + 2 * v204);
    if (v168)
    {
      v206 = 0;
      v207 = 0;
      v218 = 0;
      v103 = (unsigned __int8 *)(v235 + 2 * v204);
    }
    else
    {
      v209 = 2 * v204;
      v210 = (_BYTE *)v235;
      while (*v210 != v203)
      {
        v210 += 2;
        v209 -= 2;
        if (!v209)
          goto LABEL_165;
      }
      *v210 = v217;
LABEL_165:
      v218 = 0;
      v211 = v205;
      v103 = __dst;
      v212 = __dst;
      do
      {
        if (*v205 == v205[1])
        {
          v213 = (char *)v205;
          if (v212 != (unsigned __int8 *)(v235 + 2 * HIDWORD(v235)))
          {
            if (v205 == v103)
            {
              v213 = (char *)v212;
            }
            else
            {
              v215 = v211 - v103;
              v216 = (char *)v212;
              memmove(v212, v103, v211 - v103);
              v213 = &v216[v215];
            }
          }
          v103 = v205 + 2;
          ++v218;
          v212 = (unsigned __int8 *)v213;
        }
        v205 += 2;
        v211 += 2;
      }
      while (v205 < __dst);
      v205 = (unsigned __int8 *)v235;
      v206 = HIDWORD(v235);
      v207 = HIDWORD(v235);
      __dst = v212;
    }
    v208 = &v205[2 * v206];
    if (v103 != v208)
    {
      memmove(__dst, v103, v208 - v103);
      v207 = HIDWORD(v235);
    }
    v153 = v207 - v218;
LABEL_109:
    HIDWORD(v235) = v153;
LABEL_110:
    ;
  }
  while (v153);
  v171 = v235;
  if (&v236 != (__int16 *)v235 && (_QWORD)v235)
  {
    *(_QWORD *)&v235 = 0;
    DWORD2(v235) = 0;
    WTF::fastFree(v171, v103, v104, v105, v106, v107, v108, v109);
  }
LABEL_41:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v15, 2, v105, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v100, 1, v110, v111, v112, v113, v114);
  if ((_DWORD)v97 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v99, 0, v115, v116, v117, v118, v119);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)a1, (v97 << 35) + 0x380000001ALL, 0, v115, v116, v117, v118, v119);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)a1, (uint64_t)operationSwitchString, v120, v121, v122, v123, v124, v125, &v221);
  *(_QWORD *)&v235 = 2;
  v238 = 0;
  v130 = *((_QWORD *)a1 + 495);
  v131 = *(_QWORD *)(*((_QWORD *)a1 + 497) + 8);
  if ((v131 & 1) != 0)
  {
    v199 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
    if ((v131 & 2) != 0
      || ((v200 = *(unsigned int *)((v131 & 0xFFFFFFFF8) + 8), (_DWORD)v200 != 0x3FFFFFFF)
        ? (v201 = (_DWORD)v200 == -1)
        : (v201 = 1),
          v201))
    {
      v202 = 2;
    }
    else if (v200 >> 28)
    {
      v214 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v214 = v199;
      *(_DWORD *)(v214 + 8) = v200;
      v202 = 1;
      v199 = v214;
    }
    else
    {
      v202 = *(_QWORD *)(v131 & 0xFFFFFFFF8);
      v199 = v200 << 36;
    }
    v131 = v199 | v202;
  }
  v237 = v131;
  v139 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v130, &v237, (uint64_t *)&v235, &v238, v126, v127, v128, v129);
  if ((v237 & 1) != 0 && (v237 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v237 & 0xFFFFFFFF8, v132, v133, v134, v135, v136, v137, v138);
  if ((v139 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a1, 1, v133, v134, v135, v136, v137, v138);
    LOBYTE(v140) = 0;
    goto LABEL_47;
  }
  v185 = *((unsigned int *)a1 + 1441);
  if ((_DWORD)v185)
  {
    v186 = 0;
    v187 = 16 * v185;
    v188 = (char *)(*((_QWORD *)a1 + 719) + 2);
    while (1)
    {
      v190 = *v188;
      v188 += 16;
      v189 = v190;
      if ((v190 & 0x40) != 0)
        goto LABEL_177;
      v186 |= 1 << v189;
      v187 -= 16;
      if (!v187)
        goto LABEL_124;
    }
  }
  v186 = 0;
LABEL_124:
  if ((a4 & 0x40) != 0)
  {
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
  LOBYTE(v140) = 1;
  v191 = v186 | (1 << a4);
  if ((v191 & 2) != 0)
  {
    v192 = (unsigned __int16)~(_WORD)v191 & 0xFFFE;
    if (v192)
    {
      v140 = __clz(__rbit64(v192));
      if (v140 != 1)
      {
        if (v140 == 31)
        {
          v195 = (unsigned int *)((char *)a1 + 200);
          v194 = *((_DWORD *)a1 + 50);
          v196 = (JSC::DFG::SpeculativeJIT *)((char *)a1 + 56);
          v197 = v194 + 4;
          v198 = *((_DWORD *)a1 + 48);
          v193 = -1862270913;
        }
        else
        {
          v193 = v140 | 0xAA0103E0;
          v195 = (unsigned int *)((char *)a1 + 200);
          v194 = *((_DWORD *)a1 + 50);
          v196 = (JSC::DFG::SpeculativeJIT *)((char *)a1 + 56);
          v197 = v194 + 4;
          v198 = *((_DWORD *)a1 + 48);
        }
        if (v197 > v198)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v196, (uint64_t)v132, v133, v134, v135, v136, v137, v138);
          v194 = *v195;
        }
        *(_DWORD *)(*(_QWORD *)v196 + v194) = v193;
        *v195 += 4;
      }
    }
    else
    {
      LOBYTE(v140) = -1;
    }
  }
LABEL_47:
  if ((v235 & 1) != 0 && (v235 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v235 & 0xFFFFFFFF8, v132, v133, v134, v135, v136, v137, v138);
  if ((_DWORD)a4)
  {
    if ((_DWORD)a4 == 31)
    {
      v141 = -1862270945;
    }
    else if ((_DWORD)a4 == -1)
    {
      v141 = -1442774017;
    }
    else
    {
      v141 = a4 & 0x1F | 0xAA0003E0;
    }
    v143 = (unsigned int *)((char *)a1 + 200);
    v142 = *((_DWORD *)a1 + 50);
    if (v142 + 4 > *((_DWORD *)a1 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
      v142 = *v143;
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v142) = v141;
    *v143 += 4;
  }
  v144 = *((_DWORD *)a1 + 1441);
  if (v144)
  {
    v145 = v144 - 1;
    v146 = 16 * (v144 - 1);
    while (*((_DWORD *)a1 + 1441) > v145)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)a1, *((_QWORD *)a1 + 719) + v146, v133, v134, v135, v136, v137, v138);
      v146 -= 16;
      if (--v145 == -1)
        goto LABEL_59;
    }
LABEL_178:
    __break(0xC471u);
    JUMPOUT(0x197BF34B8);
  }
LABEL_59:
  *((_BYTE *)a1 + 5768) = 0;
  if (*((_DWORD *)a1 + 1440))
  {
    if (*((_DWORD *)a1 + 1441))
      *((_DWORD *)a1 + 1441) = 0;
    v147 = *v220;
    if (*v220)
    {
      *((_QWORD *)a1 + 719) = 0;
      *((_DWORD *)a1 + 1440) = 0;
      WTF::fastFree(v147, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  if (v139)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)a1, (char)v140, v133, v134, v135, v136, v137, v138);
  v148 = *((_DWORD *)a1 + 50);
  if (v148 + 4 > *((_DWORD *)a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)a1 + 56), (uint64_t)v132, v133, v134, v135, v136, v137, v138);
    v148 = *((_DWORD *)a1 + 50);
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v148) = (32 * (a4 & 0x1F)) | 0xD61F0000;
  *((_DWORD *)a1 + 50) += 4;
  v149 = v222;
  if (v222)
  {
    v222 = 0;
    LODWORD(v223) = 0;
    WTF::fastFree((unint64_t)v149, v132, v133, v134, v135, v136, v137, v138);
  }
  v150 = v228;
  if (v230 != (_BYTE *)v228 && v228)
  {
    v228 = 0;
    LODWORD(v229) = 0;
    WTF::fastFree((unint64_t)v150, v132, v133, v134, v135, v136, v137, v138);
  }
  if (v231)
  {
    v151 = (char)v232;
    if ((char)v232 != -1)
    {
      if ((char)v232 > 15)
        v151 = -1;
      --*(_DWORD *)(v231 + 12 * v151 + 4784);
    }
  }
  if (v233)
  {
    v152 = v234;
    if (v234 != -1)
    {
      if (v234 > 15)
        v152 = -1;
      --*(_DWORD *)(v233 + 12 * v152 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,unsigned long,JSC::UnlinkedStringJumpTable const*,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,unsigned long,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::AssemblerBuffer *v12;
  uint64_t v13;
  __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  __int16 *v79;
  int v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  _BYTE v85[6];

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v11 = a4;
  v12 = (JSC::AssemblerBuffer *)a3;
  v13 = (uint64_t)a2;
  v15 = &v84;
  if ((_DWORD)a8 != 3)
  {
    v84 = a8 | 0x300;
    v82 = 1;
    v81 = (JSC::AssemblerBuffer *)(a2 + 56);
    v16 = 1;
    do
    {
      v17 = 0;
      v18 = 0;
      v19 = v16;
      do
      {
        if ((v85[v17 - 1] & 0x40) != 0)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        v18 |= 1 << v85[v17 - 1];
        v17 += 2;
      }
      while (2 * v16 != v17);
      v20 = 0;
      do
      {
        v21 = v85[v20 - 2] & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_64;
        v18 &= ~(1 << v21);
        v20 += 2;
      }
      while (2 * v16 != v20);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v18));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.i32[0] + v23)
      {
        v25 = 0;
        if (v16 <= 1)
          v26 = 1;
        else
          v26 = v16;
        v27 = 2 * v26;
        while (1)
        {
          v28 = v85[v25 - 1];
          if ((v28 & 0x7Fu) >= 0x40)
            goto LABEL_64;
          if (((v18 >> (v28 & 0x7F)) & 1) != 0)
            break;
          v25 += 2;
          if (v27 == v25)
            goto LABEL_33;
        }
        v29 = v85[v25 - 2];
        if (v29 != v28)
        {
          v30 = v15;
          v31 = v8;
          v32 = v9;
          v33 = v11;
          v34 = v10;
          v35 = a1;
          if ((char)v29 == 63)
          {
            if (v28 == 31)
              goto LABEL_27;
            v37 = v28 & 0x1F | 0xD2800000;
          }
          else
          {
            v36 = (char)v28 == 31 || (char)v29 == 31;
            if (!v36)
            {
              v37 = v28 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v37 = (char)v28 | (32 * (char)v29) | 0x91000000;
          }
LABEL_28:
          v38 = *(_DWORD *)(v13 + 200);
          if (v38 + 4 > *(_DWORD *)(v13 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v38 = *(_DWORD *)(v13 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v13 + 56) + v38) = v37;
          *(_DWORD *)(v13 + 200) += 4;
          v19 = v82;
          a1 = v35;
          v10 = v34;
          v11 = v33;
          v9 = v32;
          v8 = v31;
          v15 = v30;
        }
        memmove(&v85[v25 - 2], &v85[v25], 2 * v19 - v25 - 2);
        v16 = v82 - 1;
        goto LABEL_32;
      }
      v78 = v8;
      v79 = v15;
      v77 = v9;
      v39 = HIBYTE(v84);
      v40 = v84;
      JSC::MacroAssemblerARM64::swap(v13, (char)v84, SHIBYTE(v84), a4, a5, a6, a7, a8);
      memmove(&v84, v85, 2 * v82 - 2);
      v41 = v82 - 1;
      v36 = v82 == 1;
      v83 = v41;
      v42 = (char *)&v84;
      v43 = &v85[2 * v41 - 2];
      if (v36)
      {
        v44 = 0;
        v45 = 0;
        v80 = 0;
        a2 = &v85[2 * v41 - 2];
      }
      else
      {
        v47 = 2 * v41;
        v48 = &v84;
        while (*(unsigned __int8 *)v48 != v39)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_43;
        }
        *(_BYTE *)v48 = v40;
LABEL_43:
        v80 = 0;
        v49 = (char *)&v84;
        v50 = v43;
        a2 = (unsigned __int8 *)v43;
        do
        {
          if (*v42 == v42[1])
          {
            v51 = v42;
            if (v50 != &v85[2 * v83 - 2])
            {
              if (v42 == (char *)a2)
              {
                v51 = v50;
              }
              else
              {
                v52 = v49 - (char *)a2;
                memmove(v50, a2, v49 - (char *)a2);
                v51 = &v50[v52];
              }
            }
            a2 = (unsigned __int8 *)(v42 + 2);
            ++v80;
            v50 = v51;
          }
          v42 += 2;
          v49 += 2;
        }
        while (v42 < v43);
        v44 = v83;
        v45 = v83;
        v43 = v50;
      }
      v46 = &v85[2 * v44 - 2];
      if (a2 != v46)
      {
        memmove(v43, a2, v46 - a2);
        v45 = v83;
      }
      v16 = v45 - v80;
      v9 = v77;
      v8 = v78;
      v15 = v79;
LABEL_32:
      v82 = v16;
LABEL_33:
      ;
    }
    while (v16);
    if (v15 != &v84 && &v84)
      WTF::fastFree((unint64_t)&v84, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v8, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v9, 1, v53, v54, v55, v56, v57);
  if ((_DWORD)v11 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, v10, 0, v58, v59, v60, v61, v62);
  else
    JSC::MacroAssemblerARM64::load64(v13, (v11 << 35) + 0x380000001ALL, 0, v58, v59, v60, v61, v62);
  JSC::DFG::SpeculativeJIT::appendCall(v13, (uint64_t)operationSwitchString, v63, v64, v65, v66, v67, v68, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 1, v69, v70, v71, v72, v73, v74);
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v12 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v12 & 0x1F | 0xAA0003E0;
    }
    v76 = *(_DWORD *)(v13 + 200);
    v13 += 200;
    v75 = v76;
    v12 = (JSC::AssemblerBuffer *)(v13 - 144);
    if (v76 + 4 > *(_DWORD *)(v13 - 8))
    {
LABEL_65:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v75 = *(_DWORD *)v13;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v75) = (_DWORD)a1;
    *(_DWORD *)v13 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::emitSwitchString(JSC::DFG::SpeculativeJIT *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t i;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  WTF *v78;
  WTF *v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[12];
  uint64_t v124;
  WTF *v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  WTF *v129;
  int v130;
  uint64_t v131;
  WTF *v132;
  int v133;
  uint64_t v134;
  WTF *v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  __int128 v140;
  _BYTE v141[128];
  uint64_t v142;
  char v143;
  int v144;
  uint64_t v145;
  uint64_t v146;

  v11 = a2[3];
  v12 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v12 != 20)
  {
    if ((_DWORD)v12 == 21)
    {
      v59 = v11 & 0xFF00FFFFFFFFFFFFLL;
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_52;
      v83 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v83 >= *((unsigned int *)a1 + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BF4064);
      }
      if (!*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v83 + 12)
        || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)a1, a2[3], a3, a4, a5, a6, a7, a8),
            (_DWORD)v15 == -1))
      {
LABEL_52:
        v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)a1, v11, a3, a4, a5, a6, a7, a8);
      }
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, a2[3], v15, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), v84, v85, v86, v87, v88, v89);
LABEL_54:
      JSC::DFG::SpeculativeJIT::emitSwitchStringOnString(a1, a2, a3, v15, v90, v91, v92, v93);
      goto LABEL_41;
    }
    if (!(_DWORD)v12)
    {
      v59 = v11 & 0xFF00FFFFFFFFFFFFLL;
      if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_60;
      v94 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v94 < *((unsigned int *)a1 + 1001))
      {
        if (*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v94 + 12))
        {
          v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)a1, a2[3], a3, a4, a5, a6, a7, a8);
          if ((_DWORD)v15 != -1)
          {
LABEL_61:
            JSC::DFG::SpeculativeJIT::use((uint64_t *)a1, (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), a3, a4, a5, a6, a7, a8);
            JSC::AssemblyHelpers::branchIfNotCell((uint64_t)a1, v15, 1, v95, v96, v97, v98, v99, (uint64_t)&v140);
            v105 = *(_QWORD *)(a3 + 16);
            v106 = (_QWORD *)((char *)a1 + 5264);
            v107 = *(_QWORD *)((char *)&v140 + 4);
            *(_DWORD *)v123 = v140;
            *(_QWORD *)&v123[4] = *(_QWORD *)((char *)&v140 + 4);
            v124 = v105;
            v108 = *((unsigned int *)a1 + 1319);
            if ((_DWORD)v108 == *((_DWORD *)a1 + 1318))
            {
              v119 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1 + 5264, (void *)(v108 + 1), (unint64_t)v123, v100, v101, v102, v103, v104);
              v120 = *((_QWORD *)a1 + 658) + 24 * *((unsigned int *)a1 + 1319);
              *(_DWORD *)v120 = *(_DWORD *)v119;
              *(_QWORD *)(v120 + 4) = *(_QWORD *)(v119 + 4);
              *(_QWORD *)(v120 + 16) = *(_QWORD *)(v119 + 16);
            }
            else
            {
              v109 = *v106 + 24 * v108;
              *(_DWORD *)v109 = v140;
              *(_QWORD *)(v109 + 4) = v107;
              *(_QWORD *)(v109 + 16) = v105;
            }
            ++*((_DWORD *)a1 + 1319);
            if (!*((_BYTE *)a1 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x197BF403CLL);
            }
            *(_DWORD *)(*((_QWORD *)a1 + 37) + 208) &= ~*((_DWORD *)a1 + 80);
            JSC::MacroAssemblerARM64::load8((uint64_t)a1, v15 | 0x500000000, *((char *)a1 + 304), v100, v101, v102, v103, v104);
            JSC::MacroAssemblerARM64::branch32((uint64_t)a1, 1, 17, 2, v110, v111, v112, v113, (uint64_t)&v140);
            v115 = *(_QWORD *)(a3 + 16);
            v116 = *(_QWORD *)((char *)&v140 + 4);
            *(_DWORD *)v123 = v140;
            *(_QWORD *)&v123[4] = *(_QWORD *)((char *)&v140 + 4);
            v124 = v115;
            v117 = *((unsigned int *)a1 + 1319);
            if ((_DWORD)v117 == *((_DWORD *)a1 + 1318))
            {
              v121 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1 + 5264, (void *)(v117 + 1), (unint64_t)v123, v114, v90, v91, v92, v93);
              v122 = *((_QWORD *)a1 + 658) + 24 * *((unsigned int *)a1 + 1319);
              *(_DWORD *)v122 = *(_DWORD *)v121;
              *(_QWORD *)(v122 + 4) = *(_QWORD *)(v121 + 4);
              *(_QWORD *)(v122 + 16) = *(_QWORD *)(v121 + 16);
            }
            else
            {
              v118 = *v106 + 24 * v117;
              *(_DWORD *)v118 = v140;
              *(_QWORD *)(v118 + 4) = v116;
              *(_QWORD *)(v118 + 16) = v115;
            }
            ++*((_DWORD *)a1 + 1319);
            goto LABEL_54;
          }
        }
LABEL_60:
        v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)a1, v11, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197BF3FF4);
  }
  v13 = v11 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_67;
  v14 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)a1 + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF405CLL);
  }
  if (!*(_BYTE *)(*((_QWORD *)a1 + 499) + 24 * (int)v14 + 12))
  {
LABEL_67:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v142, a1, a3, a4, a5, a6, a7, a8);
    goto LABEL_6;
  }
  v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)a1, a2[3], a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v142, a1, v16, v17, v18, v19, v20, v21);
  if ((_DWORD)v15 == -1)
LABEL_6:
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)a1, v11, v22, v23, v24, v25, v26, v27);
  v28 = v143;
  v29 = v143;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)a1, a2[3], v15, v23, v24, v25, v26, v27);
  JSC::DFG::SpeculativeJIT::speculateStringIdentAndLoadStorage((uint64_t)a1, a2[3], v15, v28, v30, v31, v32, v33);
  *(_QWORD *)&v140 = v141;
  *((_QWORD *)&v140 + 1) = 16;
  v34 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v34)
  {
    v35 = 0;
    for (i = 0; i < v34; ++i)
    {
      v37 = *(_QWORD *)(*(_QWORD *)a3 + v35);
      *(_QWORD *)v123 = v37;
      v38 = HIDWORD(v140);
      if (HIDWORD(v140) == DWORD2(v140))
      {
        WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>((uint64_t)&v140, (unint64_t)v123);
        v34 = *(unsigned int *)(a3 + 12);
      }
      else
      {
        *(_QWORD *)(v140 + 8 * HIDWORD(v140)) = v37;
        HIDWORD(v140) = v38 + 1;
      }
      v35 += 32;
    }
    v39 = (_BYTE *)v140;
    v40 = HIDWORD(v140);
  }
  else
  {
    v40 = 0;
    v39 = v141;
  }
  JSC::BinarySwitch::BinarySwitch((uint64_t)v123, v29, (uint64_t)v39, v40, 1);
  if (JSC::BinarySwitch::advance((JSC::BinarySwitch *)v123, a1, v41, v42, v43, v44, v45, v46))
  {
    do
    {
      if (v127 <= v139)
      {
        __break(0xC471u);
        JUMPOUT(0x197BF404CLL);
      }
      v52 = *((unsigned int *)v125 + 4 * v139 + 2);
      if (*(_DWORD *)(a3 + 12) <= v52)
      {
        __break(0xC471u);
        JUMPOUT(0x197BF4054);
      }
      JSC::DFG::SpeculativeJIT::jump((uint64_t)a1, *(_QWORD *)(*(_QWORD *)a3 + 32 * v52 + 16), 1, v47, v48, v49, v50, v51);
    }
    while ((JSC::BinarySwitch::advance((JSC::BinarySwitch *)v123, a1, v53, v54, v55, v56, v57, v58) & 1) != 0);
  }
  v59 = v13;
  if (v137)
  {
    v60 = *(_QWORD *)(a3 + 16);
    v61 = v137 - 1;
    v62 = 12 * (v137 - 1);
    do
    {
      if (v137 <= v61)
      {
        __break(0xC471u);
        JUMPOUT(0x197BF4044);
      }
      v63 = *(_DWORD *)((char *)v135 + v62);
      v64 = *(_QWORD *)((char *)v135 + v62 + 4);
      v144 = v63;
      v145 = v64;
      v146 = v60;
      v65 = *((unsigned int *)a1 + 1319);
      if ((_DWORD)v65 == *((_DWORD *)a1 + 1318))
      {
        v67 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1 + 5264, (void *)(v65 + 1), (unint64_t)&v144, v47, v48, v49, v50, v51);
        v68 = *((_QWORD *)a1 + 658) + 24 * *((unsigned int *)a1 + 1319);
        *(_DWORD *)v68 = *(_DWORD *)v67;
        *(_QWORD *)(v68 + 4) = *(_QWORD *)(v67 + 4);
        *(_QWORD *)(v68 + 16) = *(_QWORD *)(v67 + 16);
      }
      else
      {
        v66 = *((_QWORD *)a1 + 658) + 24 * v65;
        *(_DWORD *)v66 = v63;
        *(_QWORD *)(v66 + 4) = v64;
        *(_QWORD *)(v66 + 16) = v60;
      }
      ++*((_DWORD *)a1 + 1319);
      v62 -= 12;
      --v61;
    }
    while (v61 != -1);
  }
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)a1, (uint64_t)a2, 0, v47, v48, v49, v50, v51);
  v76 = v135;
  if (&v138 != (uint64_t *)v135 && v135)
  {
    v135 = 0;
    v136 = 0;
    WTF::fastFree((unint64_t)v76, v69, v70, v71, v72, v73, v74, v75);
  }
  v77 = v132;
  if (&v134 != (uint64_t *)v132 && v132)
  {
    v132 = 0;
    v133 = 0;
    WTF::fastFree((unint64_t)v77, v69, v70, v71, v72, v73, v74, v75);
  }
  v78 = v129;
  if (&v131 != (uint64_t *)v129 && v129)
  {
    v129 = 0;
    v130 = 0;
    WTF::fastFree((unint64_t)v78, v69, v70, v71, v72, v73, v74, v75);
  }
  v79 = v125;
  if (&v128 != (uint64_t *)v125 && v125)
  {
    v125 = 0;
    v126 = 0;
    WTF::fastFree((unint64_t)v79, v69, v70, v71, v72, v73, v74, v75);
  }
  v80 = v140;
  if (v141 != (_BYTE *)v140 && (_QWORD)v140)
  {
    *(_QWORD *)&v140 = 0;
    DWORD2(v140) = 0;
    WTF::fastFree(v80, v69, v70, v71, v72, v73, v74, v75);
  }
  if (v142)
  {
    v81 = v143;
    if (v143 != -1)
    {
      if (v143 > 15)
        v81 = -1;
      --*(_DWORD *)(v142 + 12 * v81 + 4784);
    }
  }
LABEL_41:
  if (v59)
  {
    if ((int)v15 > 15)
      v82 = -1;
    else
      v82 = v15;
    --*((_DWORD *)a1 + 3 * v82 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::emitSwitch(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)a2 + 9);
  switch(*(_DWORD *)(v8 + 40))
  {
    case 0:
      JSC::DFG::SpeculativeJIT::emitSwitchImm((JSC::DFG::SpeculativeJIT *)this, (uint64_t)a2, v8, a4, a5, a6, a7, a8);
      break;
    case 1:
      JSC::DFG::SpeculativeJIT::emitSwitchChar((JSC::DFG::SpeculativeJIT *)this, (uint64_t *)a2, v8, a4, a5, a6, a7, a8);
      break;
    case 2:
      JSC::DFG::SpeculativeJIT::emitSwitchString((JSC::DFG::SpeculativeJIT *)this, (unint64_t *)a2, v8, a4, a5, a6, a7, a8);
      break;
    case 3:
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp", (const char *)0x3478, "void JSC::DFG::SpeculativeJIT::emitSwitch(Node *)", "Bad switch kind");
      __break(0xC471u);
      JUMPOUT(0x197BF4128);
    default:
      __break(0xC471u);
      JUMPOUT(0x197BF40E4);
  }
}

void JSC::DFG::SpeculativeJIT::compileStoreBarrier(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::AssemblerBuffer *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int *v72;
  int *v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  const char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  __int16 v93;
  int v94;
  _BYTE *v95;
  char v96;
  __int16 v97;
  char v98;
  __int16 v99;
  uint64_t v100;
  int v101;
  char *v102;
  char v103;
  __int16 v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint8x8_t v129;
  __int32 v130;
  uint8x8_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  _DWORD *v147;
  uint64_t *v148;
  int v149;
  char *v150;
  JSC::AssemblerBuffer *v151;
  JSC::AssemblerBuffer *v152;
  char v153;
  int v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  int v158;
  int v159;
  char *v160;
  uint64_t v161;
  _BYTE *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  JSC::AssemblerBuffer *v166;
  JSC::AssemblerBuffer *v167;
  JSC::AssemblerBuffer *v168;
  uint64_t v169;
  unint64_t v170;
  WTF *v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  WTF *v179;
  uint64_t v180;
  _BYTE v181[24];
  uint64_t v182;
  char v183;
  __int128 v184;
  _QWORD v185[2];

  v11 = (uint64_t)a2;
  v13 = (WTF *)*((unsigned __int16 *)a2 + 9);
  v14 = *((_QWORD *)a2 + 3);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_94;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF4C90);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
  {
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v182, this, v18, v19, v20, v21, v22, v23);
    if ((_DWORD)v17 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_94:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v182, this, a3, a4, a5, a6, a7, a8);
  }
  v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, v24, v25, v26, v27, v28, v29);
LABEL_6:
  v179 = (WTF *)v181;
  v180 = 2;
  if ((_DWORD)v13 == 383)
  {
    v13 = *(WTF **)(*((_QWORD *)this + 44) + 16);
    v31 = v183;
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v17 | 0x700000000, v31, v25, v26, v27, v28, v29);
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BF4A50);
    }
    *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
    JSC::MacroAssemblerARM64::load32((uint64_t)this, (uint64_t)v13 + 760, *((char *)this + 272), v32, v33, v34, v35, v36);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 16, v31, v37, v38, v39, v40, (uint64_t)&v177);
    v46 = v177;
    if (v177 != -1)
    {
      v47 = HIDWORD(v180);
      if (HIDWORD(v180) == (_DWORD)v180)
      {
        v48 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v179, (void *)(HIDWORD(v180) + 1), (unint64_t)&v177, v41, v42, v43, v44, v45);
        v50 = *v48;
        v49 = (uint64_t *)(v48 + 1);
        v46 = v50;
        v47 = HIDWORD(v180);
      }
      else
      {
        v49 = &v178;
      }
      v51 = (char *)v179 + 12 * v47;
      *(_DWORD *)v51 = v46;
      *(_QWORD *)(v51 + 4) = *v49;
      ++HIDWORD(v180);
    }
    JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(this, *(JSC::VM **)(*((_QWORD *)this + 44) + 16), v41, v42, v43, v44, v45, (uint64_t)&v184);
    v59 = *((_DWORD *)this + 50);
    if (v59 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v52, v53, v54, v55, v56, v57, v58);
      v59 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v59) = -721208385;
    *((_DWORD *)this + 50) += 4;
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BF4A80);
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v17 | 0x700000000, *((char *)this + 304), v54, v55, v56, v57, v58);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, 17, 0, v60, v61, v62, v63, (uint64_t)&v175);
    v70 = v175;
    if (v175 != -1)
    {
      v71 = HIDWORD(v180);
      if (HIDWORD(v180) == (_DWORD)v180)
      {
        v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v179, (void *)(HIDWORD(v180) + 1), (unint64_t)&v175, v65, v66, v67, v68, v69);
        v74 = *v72;
        v73 = v72 + 1;
        v70 = v74;
        v71 = HIDWORD(v180);
      }
      else
      {
        v73 = &v176;
      }
      v75 = (char *)v179 + 12 * v71;
      *(_DWORD *)v75 = v70;
      *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
      ++HIDWORD(v180);
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v184, (uint64_t)this, v64, v65, v66, v67, v68, v69);
LABEL_22:
    v170 = v14 & 0xFF00FFFFFFFFFFFFLL;
    v171 = (WTF *)v181;
    v14 = (unint64_t)this + 5752;
    v15 = 1;
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 1, (uint64_t)this + 5752, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v76, v77);
    v9 = *(_QWORD *)(*((_QWORD *)this + 44) + 16);
    v81 = v185;
    *(_QWORD *)&v184 = v185;
    DWORD2(v184) = 1;
    v169 = v11;
    v172 = v17;
    if ((_DWORD)v17 == 1)
      goto LABEL_23;
    LOWORD(v185[0]) = v17 | 0x100;
    HIDWORD(v184) = 1;
    v10 = -1442839584;
    v124 = 1;
    while (1)
    {
      v30 = 0;
      v125 = 0;
      v126 = v184;
      v127 = v124;
      do
      {
        if ((*((_BYTE *)v30 + v184 + 1) & 0x40) != 0)
          goto LABEL_127;
        v125 |= 1 << *((_BYTE *)v30 + v184 + 1);
        v30 = (JSC::AssemblerBuffer *)((char *)v30 + 2);
      }
      while ((JSC::AssemblerBuffer *)(2 * v124) != v30);
      v30 = 0;
      do
      {
        v128 = *((_BYTE *)v30 + v184) & 0x7F;
        if (v128 >= 0x40)
          goto LABEL_127;
        v125 &= ~(1 << v128);
        v30 = (JSC::AssemblerBuffer *)((char *)v30 + 2);
      }
      while ((JSC::AssemblerBuffer *)(2 * v124) != v30);
      v129 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
      v129.i16[0] = vaddlv_u8(v129);
      v130 = v129.i32[0];
      v131 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v125));
      v131.i16[0] = vaddlv_u8(v131);
      if (!(v131.i32[0] + v130))
      {
        v165 = v81;
        v11 = *(char *)v184;
        v153 = *(_BYTE *)(v184 + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, v11, v153, v80, v26, v27, v28, v29);
        memmove((void *)v184, (const void *)(v184 + 2), 2 * HIDWORD(v184) - 2);
        v154 = HIDWORD(v184);
        v155 = (HIDWORD(v184) - 1);
        HIDWORD(v184) = v155;
        v8 = (char *)v184;
        v156 = (char *)(v184 + 2 * v155);
        if (v154 == 1)
        {
          v157 = 0;
          v158 = 0;
          v159 = 0;
          v78 = (char *)(v184 + 2 * v155);
        }
        else
        {
          v161 = 2 * v155;
          v162 = (_BYTE *)v184;
          while (*v162 != v153)
          {
            v162 += 2;
            v161 -= 2;
            if (!v161)
              goto LABEL_132;
          }
          *v162 = v11;
LABEL_132:
          v159 = 0;
          v13 = (WTF *)v8;
          v78 = v156;
          v163 = v156;
          do
          {
            if (*v8 == v8[1])
            {
              v164 = v8;
              if (v163 != (char *)(v184 + 2 * HIDWORD(v184)))
              {
                if (v8 == v78)
                {
                  v164 = v163;
                }
                else
                {
                  v11 = v13 - (WTF *)v78;
                  memmove(v163, v78, v13 - (WTF *)v78);
                  v164 = &v163[v11];
                }
              }
              v78 = v8 + 2;
              ++v159;
              v163 = v164;
            }
            v8 += 2;
            v13 = (WTF *)((char *)v13 + 2);
          }
          while (v8 < v156);
          v8 = (char *)v184;
          v157 = HIDWORD(v184);
          v158 = HIDWORD(v184);
          v156 = v163;
        }
        v160 = &v8[2 * v157];
        if (v78 != v160)
        {
          memmove(v156, v78, v160 - v78);
          v158 = HIDWORD(v184);
        }
        v124 = v158 - v159;
        v15 = 1;
        v81 = v165;
        v17 = v172;
        goto LABEL_87;
      }
      v13 = 0;
      v132 = v124 <= 1uLL ? 1 : v124;
      v133 = 2 * v132;
      while (1)
      {
        v30 = (JSC::AssemblerBuffer *)*((unsigned __int8 *)v13 + v184 + 1);
        if ((v30 & 0x7Fu) >= 0x40)
          goto LABEL_127;
        if (((v125 >> (v30 & 0x7F)) & 1) != 0)
          break;
        v13 = (WTF *)((char *)v13 + 2);
        if ((WTF *)v133 == v13)
          goto LABEL_88;
      }
      v134 = *((unsigned __int8 *)v13 + v184);
      if (v134 != (_DWORD)v30)
        break;
LABEL_86:
      memmove((char *)v13 + v126, (char *)v13 + v126 + 2, 2 * v127 - (_QWORD)v13 - 2);
      v124 = HIDWORD(v184) - 1;
LABEL_87:
      HIDWORD(v184) = v124;
LABEL_88:
      if (!v124)
      {
        v137 = v184;
        if (v81 != (_QWORD *)v184 && (_QWORD)v184)
        {
          *(_QWORD *)&v184 = 0;
          DWORD2(v184) = 0;
          WTF::fastFree(v137, v78, (uint64_t)v79, v80, v26, v27, v28, v29);
        }
LABEL_23:
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v9, 0, v80, v26, v27, v28, v29);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationWriteBarrierSlowPath, v82, v83, v84, v85, v86, v87, (int *)&v184);
        v88 = *((_DWORD *)this + 1441);
        if (v88)
        {
          v89 = v88 - 1;
          v90 = 16 * (v88 - 1);
          do
          {
            if (*((_DWORD *)this + 1441) <= v89)
            {
              __break(0xC471u);
              JUMPOUT(0x197BF4C88);
            }
            JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)this, *((_QWORD *)this + 719) + v90, (uint64_t)v79, v80, v26, v27, v28, v29);
            v90 -= 16;
            --v89;
          }
          while (v89 != -1);
        }
        *((_BYTE *)this + 5768) = 0;
        if (*((_DWORD *)this + 1440))
        {
          if (*((_DWORD *)this + 1441))
            *((_DWORD *)this + 1441) = 0;
          v91 = *(_QWORD *)v14;
          if (*(_QWORD *)v14)
          {
            *((_QWORD *)this + 719) = 0;
            *((_DWORD *)this + 1440) = 0;
            WTF::fastFree(v91, v78, (uint64_t)v79, v80, v26, v27, v28, v29);
          }
        }
        v11 = HIDWORD(v180);
        if (HIDWORD(v180))
        {
          v17 = 0;
          v14 = (unint64_t)this + 32;
          v9 = 12;
          v10 = 24;
          goto LABEL_34;
        }
        goto LABEL_48;
      }
    }
    v134 = (char)v134;
    if ((char)v134 == 63)
    {
      if ((char)v30 != 31)
      {
        v8 = (char *)(v30 & 0x1F | 0xD2800000);
        goto LABEL_83;
      }
    }
    else if ((_DWORD)v30 != 31 && v134 != 31)
    {
      v8 = (char *)(v30 & 0xFFE0FFFF | ((v134 & 0x1F) << 16) | 0xAA0003E0);
LABEL_83:
      v136 = *((_DWORD *)this + 50);
      if (v136 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v78, (uint64_t)v79, v80, v26, v27, v28, v29);
        v136 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v136) = (_DWORD)v8;
      *((_DWORD *)this + 50) += 4;
      v126 = v184;
      v127 = HIDWORD(v184);
      goto LABEL_86;
    }
    v8 = (char *)((char)v30 | (32 * v134) | 0x91000000);
    goto LABEL_83;
  }
  if (*((_BYTE *)this + 212))
  {
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v17 | 0x700000000, *((char *)this + 304), v25, v26, v27, v28, v29);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 8, 17, 0, v138, v139, v140, v141, (uint64_t)&v173);
    v145 = v173;
    if (v173 != -1)
    {
      v146 = HIDWORD(v180);
      if (HIDWORD(v180) == (_DWORD)v180)
      {
        v147 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v179, (void *)(HIDWORD(v180) + 1), (unint64_t)&v173, v142, v143, v144, v76, v77);
        v149 = *v147;
        v148 = (uint64_t *)(v147 + 1);
        v145 = v149;
        v146 = HIDWORD(v180);
      }
      else
      {
        v148 = &v174;
      }
      v150 = (char *)v179 + 12 * v146;
      *(_DWORD *)v150 = v145;
      *(_QWORD *)(v150 + 4) = *v148;
      ++HIDWORD(v180);
    }
    goto LABEL_22;
  }
  v78 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
  v79 = "RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()";
  v80 = 176;
  __break(0xC471u);
LABEL_127:
  __break(1u);
LABEL_128:
  v166 = v30;
  JSC::AssemblerBuffer::outOfLineGrow(v30, (uint64_t)v78, (uint64_t)v79, v80, v26, v27, v28, v29);
  v30 = v166;
  v94 = *((_DWORD *)this + 50);
  while (1)
  {
    *(_DWORD *)(*((_QWORD *)this + 7) + v94) = -721215457;
    v94 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v94;
    if (v94 >= *((_DWORD *)this + 13))
      break;
LABEL_102:
    if ((v94 + 4) > *((_DWORD *)this + 48))
      goto LABEL_128;
  }
  v93 = *v8;
  while (2)
  {
    v95 = (char *)v13 + v17 * v9;
    v96 = v95[9];
    v97 = v95[10];
    v98 = v95[11];
    *(_QWORD *)&v184 = v15;
    *((_QWORD *)&v184 + 1) = v94;
    BYTE3(v185[0]) = v96 & 0xF;
    *(_WORD *)((char *)v185 + 1) = v93;
    v99 = v97 << 6;
LABEL_40:
    WORD2(v185[0]) = v99;
    LOBYTE(v185[0]) = v98;
LABEL_41:
    v105 = *((unsigned int *)this + 11);
    if ((_DWORD)v105 == *((_DWORD *)this + 10))
    {
      v112 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v105 + 1, (unint64_t)&v184, v80, v26, v27, v28, v29);
      v106 = *((_QWORD *)this + 4) + *((unsigned int *)this + 11) * (unint64_t)v10;
      *(_QWORD *)v106 = 0;
      *(_QWORD *)(v106 + 8) = 0;
      *(_BYTE *)(v106 + 16) = -1;
      v113 = (((*(unsigned __int8 *)(v106 + 19) >> 4) & 0xF) << 20) | 0xF0041;
      *(_WORD *)(v106 + 17) = 65;
      *(_BYTE *)(v106 + 19) = BYTE2(v113);
      *(_WORD *)(v106 + 20) &= 0xFC00u;
      v107 = *(_OWORD *)v112;
      v108 = *(_QWORD *)(v112 + 16);
    }
    else
    {
      v106 = *(_QWORD *)v14 + v105 * (unint64_t)v10;
      v107 = v184;
      v108 = v185[0];
    }
    *(_QWORD *)(v106 + 16) = v108;
    *(_OWORD *)v106 = v107;
    ++*((_DWORD *)this + 11);
    if (++v17 != v11)
    {
LABEL_34:
      if (v17 < HIDWORD(v180))
      {
        v13 = v179;
        v92 = (unsigned int *)((char *)v179 + v17 * v9);
        *((_DWORD *)this + 52) = 0;
        v8 = (char *)(v92 + 2);
        v93 = *((unsigned __int8 *)v92 + 8);
        switch(*((_BYTE *)v92 + 8))
        {
          case 0x83:
          case 0x87:
            v15 = *v92;
            v94 = *((_DWORD *)this + 50);
            if (v94 >= *((_DWORD *)this + 13))
              continue;
            v30 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
            goto LABEL_102;
          case 0x84:
          case 0x88:
            v100 = *v92;
            v101 = *((_DWORD *)this + 50);
            if (v101 < *((_DWORD *)this + 13))
            {
              v151 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
              do
              {
                if ((v101 + 4) > *((_DWORD *)this + 48))
                {
                  v167 = v151;
                  JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v78, (uint64_t)v79, v80, v26, v27, v28, v29);
                  v151 = v167;
                  v101 = *((_DWORD *)this + 50);
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v101) = -721215457;
                v101 = *((_DWORD *)this + 50) + 4;
                *((_DWORD *)this + 50) = v101;
              }
              while (v101 < *((_DWORD *)this + 13));
              v93 = *v8;
            }
            v102 = (char *)v13 + v17 * v9;
            v103 = v102[9];
            v104 = *((_WORD *)v102 + 2);
            v98 = v102[11];
            *(_QWORD *)&v184 = v100;
            *((_QWORD *)&v184 + 1) = v101;
            BYTE3(v185[0]) = v103 & 0xF;
            *(_WORD *)((char *)v185 + 1) = v93;
            v99 = v104 & 0x3F;
            goto LABEL_40;
          default:
            v109 = *v92;
            v110 = *((_DWORD *)this + 50);
            if (v110 < *((_DWORD *)this + 13))
            {
              v152 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
              do
              {
                if ((v110 + 4) > *((_DWORD *)this + 48))
                {
                  v168 = v152;
                  JSC::AssemblerBuffer::outOfLineGrow(v152, (uint64_t)v78, (uint64_t)v79, v80, v26, v27, v28, v29);
                  v152 = v168;
                  v110 = *((_DWORD *)this + 50);
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v110) = -721215457;
                v110 = *((_DWORD *)this + 50) + 4;
                *((_DWORD *)this + 50) = v110;
              }
              while (v110 < *((_DWORD *)this + 13));
              v93 = *v8;
            }
            v111 = *((_BYTE *)v13 + v17 * v9 + 9);
            LOBYTE(v185[0]) = -1;
            *(_QWORD *)&v184 = v109;
            *((_QWORD *)&v184 + 1) = v110;
            BYTE3(v185[0]) = v111 & 0xF;
            *(_WORD *)((char *)v185 + 1) = v93;
            WORD2(v185[0]) = 0;
            goto LABEL_41;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x197BF4C80);
    }
    break;
  }
LABEL_48:
  JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, v169, 0, v80, v26, v27, v28, v29);
  v121 = v179;
  if (v171 != v179 && v179)
  {
    v179 = 0;
    LODWORD(v180) = 0;
    WTF::fastFree((unint64_t)v121, v114, v115, v116, v117, v118, v119, v120);
  }
  if (v182)
  {
    v122 = v183;
    if (v183 != -1)
    {
      if (v183 > 15)
        v122 = -1;
      --*(_DWORD *)(v182 + 12 * v122 + 4784);
    }
  }
  if (v170)
  {
    if ((int)v172 > 15)
      v123 = -1;
    else
      v123 = v172;
    --*((_DWORD *)this + 3 * v123 + 1196);
  }
}

void JSC::AssemblyHelpers::jumpIfMutatorFenceNotNeeded(JSC::AssemblyHelpers *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  unsigned int v19;

  if (!*((_BYTE *)this + 212))
    goto LABEL_8;
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  v10 = *((unsigned __int8 *)this + 304);
  JSC::MacroAssemblerARM64::moveToCachedReg(this, (uint64_t)a2 + 755, (uint64_t)this + 296, a3, a4, a5, a6, a7);
  v19 = *((_DWORD *)this + 50);
  if (v19 + 4 > *((_DWORD *)this + 48))
  {
    v18 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), v11, v12, v13, v14, v15, v16, v17).n128_u64[0];
    v19 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v19) = v10 & 0x1F | 0x387F6A20;
  *((_DWORD *)this + 50) += 4;
  if (v10 == 17)
  {
    if (*((_BYTE *)this + 212))
    {
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      goto LABEL_7;
    }
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197BF4D88);
  }
LABEL_7:
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, 0, 17, v14, v15, v16, v17, a8, v18);
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutAccessorById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  JSC::DFG::Node *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ARM64LogicalImmediate *v25;
  char *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  JSC::ARM64LogicalImmediate *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint8x8_t v43;
  __int32 v44;
  uint8x8_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  unsigned __int8 *v63;
  char *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t result;
  char v100;
  char v101;
  int64_t v102;
  char *v103;
  int v104;
  char v105;
  char *v106;
  JSC::ARM64LogicalImmediate *v107;
  JSC::ARM64LogicalImmediate *v108;
  JSC::ARM64LogicalImmediate *v109;
  uint64_t v110;
  void *__dst;
  int v112;
  unsigned int v113;
  _WORD v114[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_91;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF53ECLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_91:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  v15 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_92;
  v16 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v16 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v16 + 12))
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_92:
    v17 = -1;
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v17 == -1)
    v17 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v18 = *((unsigned __int16 *)a2 + 9);
  v110 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v19, v20, v21, v22, v23, v24);
  v108 = v25;
  v26 = (char *)a2 + 72;
  v109 = (JSC::ARM64LogicalImmediate *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24)+ 240), *((_DWORD *)a2 + 18));
  v34 = *((unsigned __int16 *)a2 + 9);
  if ((v34 - 123) >= 3)
  {
    if ((v34 - 126) < 2)
      goto LABEL_15;
    __break(0xC471u);
LABEL_101:
    JUMPOUT(0x197BF53B4);
  }
  v26 = (char *)a2 + 80;
LABEL_15:
  v35 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v26;
  __dst = v114;
  v112 = 2;
  if (v13 == 1)
  {
    if (v17 == 4)
      goto LABEL_75;
    v107 = v35;
    v36 = 0;
  }
  else
  {
    v107 = v35;
    v114[0] = v13 | 0x100;
    v36 = 1;
    v113 = 1;
    if (v17 == 4)
      goto LABEL_21;
  }
  v114[v36++] = v17 | 0x400;
  v113 = v36;
  do
  {
LABEL_21:
    v37 = 0;
    v38 = 0;
    v39 = (char *)__dst;
    v40 = v36;
    do
    {
      if ((*((_BYTE *)__dst + v37 + 1) & 0x40) != 0)
        goto LABEL_100;
      v38 |= 1 << *((_BYTE *)__dst + v37 + 1);
      v37 += 2;
    }
    while (2 * v36 != v37);
    v41 = 0;
    do
    {
      v42 = *((_BYTE *)__dst + v41) & 0x7F;
      if (v42 >= 0x40)
        goto LABEL_100;
      v38 &= ~(1 << v42);
      v41 += 2;
    }
    while (2 * v36 != v41);
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v43.i16[0] = vaddlv_u8(v43);
    v44 = v43.i32[0];
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v38));
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.i32[0] + v44)
    {
      v46 = 0;
      if (v36 <= 1)
        v47 = 1;
      else
        v47 = v36;
      v48 = 2 * v47;
      while (1)
      {
        v49 = *((unsigned __int8 *)__dst + v46 + 1);
        if ((v49 & 0x7Fu) >= 0x40)
          goto LABEL_100;
        if (((v38 >> (v49 & 0x7F)) & 1) != 0)
          break;
        v46 += 2;
        if (v48 == v46)
          goto LABEL_71;
      }
      v50 = *((unsigned __int8 *)__dst + v46);
      if (v50 == v49)
        goto LABEL_69;
      v51 = (char)v50;
      if ((char)v50 == 63)
      {
        v52 = *((_DWORD *)this + 50);
        v53 = *((_DWORD *)this + 48);
        if ((char)v49 != 31)
        {
          v55 = v49 & 0x1F | 0xD2800000;
          goto LABEL_66;
        }
      }
      else
      {
        v52 = *((_DWORD *)this + 50);
        v53 = *((_DWORD *)this + 48);
        v54 = v49 == 31 || v51 == 31;
        if (!v54)
        {
          v55 = v49 & 0xFFE0FFFF | ((v51 & 0x1F) << 16) | 0xAA0003E0;
LABEL_66:
          if (v52 + 4 > v53)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
            v52 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v52) = v55;
          *((_DWORD *)this + 50) += 4;
          v39 = (char *)__dst;
          v40 = v113;
LABEL_69:
          memmove(&v39[v46], &v39[v46 + 2], 2 * v40 - v46 - 2);
          v36 = v113 - 1;
          goto LABEL_70;
        }
      }
      v55 = (char)v49 | (32 * v51) | 0x91000000;
      goto LABEL_66;
    }
    v56 = *((_BYTE *)__dst + 1);
    v105 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v56, v29, v30, v31, v32, v33);
    memmove(__dst, (char *)__dst + 2, 2 * v113 - 2);
    v57 = v113 - 1;
    v54 = v113 == 1;
    v113 = v57;
    v58 = (unsigned __int8 *)__dst;
    v59 = (unsigned __int8 *)__dst + 2 * v57;
    if (v54)
    {
      v66 = 0;
      v67 = 0;
      v62 = 0;
      v27 = v59;
    }
    else
    {
      v60 = 2 * v57;
      v61 = __dst;
      while (*v61 != v56)
      {
        v61 += 2;
        v60 -= 2;
        if (!v60)
          goto LABEL_49;
      }
      *v61 = v105;
LABEL_49:
      v62 = 0;
      v63 = v58;
      v27 = v59;
      v64 = (char *)v59;
      do
      {
        if (*v58 == v58[1])
        {
          v65 = v58;
          if (v64 != (char *)__dst + 2 * v113)
          {
            v104 = v62;
            v106 = (char *)v59;
            if (v58 == v27)
            {
              v65 = (unsigned __int8 *)v64;
            }
            else
            {
              v102 = v63 - v27;
              v103 = v64;
              memmove(v64, v27, v63 - v27);
              v65 = (unsigned __int8 *)&v103[v102];
            }
            v59 = (unsigned __int8 *)v106;
            v62 = v104;
          }
          v27 = v58 + 2;
          ++v62;
          v64 = (char *)v65;
        }
        v58 += 2;
        v63 += 2;
      }
      while (v58 < v59);
      v58 = (unsigned __int8 *)__dst;
      v66 = v113;
      v67 = v113;
      v59 = (unsigned __int8 *)v64;
    }
    v68 = &v58[2 * v66];
    if (v27 != v68)
    {
      v69 = v62;
      memmove(v59, v27, v68 - v27);
      v62 = v69;
      v67 = v113;
    }
    v36 = v67 - v62;
LABEL_70:
    v113 = v36;
LABEL_71:
    ;
  }
  while (v36);
  v70 = __dst;
  v35 = v107;
  if (v114 != __dst && __dst)
  {
    __dst = 0;
    v112 = 0;
    WTF::fastFree((unint64_t)v70, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_75:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v35, 3, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v109, 2, v71, v72, v73, v74, v75);
  if ((_DWORD)v110 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v108, 0, v76, v77, v78, v79, v80);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v110 << 35) + 0x380000001ALL, 0, v76, v77, v78, v79, v80);
  if (v18 == 123)
    v87 = operationPutGetterById;
  else
    v87 = operationPutSetterById;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v87, v81, v82, v83, v84, v85, v86, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v88, v89, v90, v91, v92, v93);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v94, v95, v96, v97, v98);
  if (v15)
  {
    if (v17 > 15)
      v100 = -1;
    else
      v100 = v17;
    --*((_DWORD *)this + 3 * v100 + 1196);
  }
  if (v11)
  {
    if (v13 > 15)
      v101 = -1;
    else
      v101 = v13;
    --*((_DWORD *)this + 3 * v101 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutGetterSetterById(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  JSC::DFG::Node *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  signed __int8 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 v58;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v56, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v53, (uint64_t)this, *((_QWORD *)a2 + 4), 0, v10, v11, v12, v13);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v50, (uint64_t)this, *((_QWORD *)a2 + 5), 0, v14, v15, v16, v17);
  v25 = v58;
  if (v58 == 255)
  {
    v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v56, v57, v19, v20, v21, v22, v23, v24);
    v58 = v25;
  }
  v26 = v55;
  if (v55 == 255)
  {
    v26 = JSC::DFG::SpeculativeJIT::fillJSValue(v53, v54, v19, v20, v21, v22, v23, v24);
    v55 = v26;
  }
  v27 = v52;
  if (v52 == 255)
  {
    v27 = JSC::DFG::SpeculativeJIT::fillJSValue(v50, v51, v19, v20, v21, v22, v23, v24);
    v52 = v27;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v18, v19, v20, v21, v22, v23, v24);
  v34 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v28, v29, v30, v31, v32, v33);
  v36 = v35;
  v37 = (char *)a2 + 72;
  v38 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24) + 240), *((_DWORD *)a2 + 18));
  v39 = *((unsigned __int16 *)a2 + 9);
  if ((v39 - 123) >= 3)
  {
    if ((v39 - 126) >= 2)
    {
      result = 1261;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v37 = (char *)a2 + 80;
  }
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,int,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v49, (unsigned __int8 *)this, v34, v36, (char)v25, v38, *(unsigned int *)v37, (char)v26, v27);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v40, v41, v42, v43, v44);
  if ((v51 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v46 = v52;
    if (v52 > 15)
      v46 = -1;
    --*(_DWORD *)(v50 + 12 * v46 + 4784);
  }
  if ((v54 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v47 = (char)v55;
    if ((char)v55 > 15)
      v47 = -1;
    --*(_DWORD *)(v53 + 12 * v47 + 4784);
  }
  if ((v57 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v48 = (char)v58;
    if ((char)v58 > 15)
      v48 = -1;
    --*(_DWORD *)(v56 + 12 * v48 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,int,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  unsigned int v9;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int *v68;
  JSC::AssemblerBuffer *v69;
  unsigned int v70;
  unsigned int v71;
  __int16 v72;
  _BYTE v73[6];

  v9 = a7;
  v13 = (uint64_t)a2;
  v70 = 0;
  if ((_DWORD)a5 == 1)
  {
    v15 = 0;
  }
  else
  {
    v72 = a5 | 0x100;
    v15 = 1;
    v70 = 1;
  }
  if ((_DWORD)a8 != 4)
  {
    *(_WORD *)&v73[2 * v15++ - 2] = a8 | 0x400;
    v70 = v15;
  }
  if (a9 == 5)
  {
    if (!v15)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v73[2 * v15++ - 2] = a9 | 0x500;
    v70 = v15;
  }
  v69 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = v15;
    do
    {
      if ((v73[v16 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v17 |= 1 << v73[v16 - 1];
      v16 += 2;
    }
    while (2 * v15 != v16);
    v19 = 0;
    do
    {
      v20 = v73[v19 - 2] & 0x7F;
      if (v20 >= 0x40)
        goto LABEL_65;
      v17 &= ~(1 << v20);
      v19 += 2;
    }
    while (2 * v15 != v19);
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.i32[0];
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.i32[0] + v22)
    {
      v24 = 0;
      if (v15 <= 1)
        v25 = 1;
      else
        v25 = v15;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v73[v24 - 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v17 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v24 += 2;
        if (v26 == v24)
          goto LABEL_58;
      }
      v28 = v73[v24 - 2];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v13 + 200);
          v31 = *(_DWORD *)(v13 + 192);
          if (v27 == 31)
            goto LABEL_52;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v13 + 200);
          v31 = *(_DWORD *)(v13 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_53:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v69, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v30 = *(_DWORD *)(v13 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v13 + 56) + v30) = v33;
        *(_DWORD *)(v13 + 200) += 4;
        v18 = v70;
      }
      memmove(&v73[v24 - 2], &v73[v24], 2 * v18 - v24 - 2);
      v15 = v70 - 1;
      goto LABEL_57;
    }
    v68 = a1;
    v34 = HIBYTE(v72);
    v35 = v72;
    JSC::MacroAssemblerARM64::swap(v13, (char)v72, SHIBYTE(v72), a4, a5, a6, a7, a8);
    memmove(&v72, v73, 2 * v70 - 2);
    v36 = v70 - 1;
    v32 = v70 == 1;
    v71 = v36;
    v37 = (unsigned __int8 *)&v72;
    v38 = &v73[2 * v36 - 2];
    if (v32)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a2 = v38;
    }
    else
    {
      v39 = 2 * v36;
      v40 = &v72;
      while (*(unsigned __int8 *)v40 != v34)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_37;
      }
      *(_BYTE *)v40 = v35;
LABEL_37:
      v41 = 0;
      v42 = (char *)&v72;
      a2 = v38;
      v43 = v38;
      do
      {
        if (*v37 == v37[1])
        {
          v44 = v37;
          if (v43 != &v73[2 * v71 - 2])
          {
            v67 = v38;
            if (v37 == a2)
            {
              v44 = v43;
            }
            else
            {
              v65 = v42 - (char *)a2;
              v66 = v43;
              memmove(v43, a2, v42 - (char *)a2);
              v44 = &v66[v65];
            }
            v38 = v67;
          }
          a2 = v37 + 2;
          ++v41;
          v43 = v44;
        }
        v37 += 2;
        v42 += 2;
      }
      while (v37 < v38);
      v45 = v71;
      v46 = v71;
      v38 = v43;
    }
    v47 = &v73[2 * v45 - 2];
    a1 = v68;
    if (a2 != v47)
    {
      memmove(v38, a2, v47 - a2);
      v46 = v71;
    }
    v15 = v46 - v41;
LABEL_57:
    v70 = v15;
LABEL_58:
    ;
  }
  while (v15);
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v13, (JSC::ARM64LogicalImmediate *)v9, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a6, 2, v48, v49, v50, v51, v52);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v13, a4, 0, a4, a5, a6, a7, a8);
  else
LABEL_66:
    JSC::MacroAssemblerARM64::load64(v13, (a3 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v13, (uint64_t)operationPutGetterSetter, v53, v54, v55, v56, v57, v58, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v13, 0, v59, v60, v61, v62, v63, v64);
}

unsigned int *JSC::DFG::SpeculativeJIT::compileResolveScope(unsigned int *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint8x8_t v68;
  __int32 v69;
  uint8x8_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unsigned int v79;
  unsigned int v80;
  void *v81;
  char v82;
  char v83;
  uint64_t v84;
  unsigned __int8 *v85;
  char *v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  unsigned __int8 *v92;
  char *v93;
  unsigned __int8 *v94;
  int64_t v95;
  unint64_t v96;
  __int16 *v97;
  int v98;
  uint64_t v99;
  void *__dst;
  int v101;
  unsigned int v102;
  __int16 v103;

  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= this[1001])
  {
    __break(0xC471u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  ++v9[1196];
  v14 = v9[1194];
  if ((_DWORD)v14 != 0x3FFFFFFF)
  {
    *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v14, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v14, a3, a4, a5, a6, a7, a8);
  v21 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v15, v16, v17, v18, v19, v20);
  v23 = v22;
  this = (unsigned int *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)v9 + 495) + 24) + 240), *((_DWORD *)a2 + 18));
  v31 = (uint64_t)this;
  v32 = &v103;
  __dst = &v103;
  v101 = 1;
  if (v13 != 1)
  {
    v103 = v13 | 0x100;
    v102 = 1;
    v61 = 1;
    v99 = (uint64_t)this;
    while (1)
    {
      v62 = 0;
      v63 = 0;
      v64 = (char *)__dst;
      v65 = v61;
      do
      {
        if ((*((_BYTE *)__dst + v62 + 1) & 0x40) != 0)
          goto LABEL_74;
        v63 |= 1 << *((_BYTE *)__dst + v62 + 1);
        v62 += 2;
      }
      while (2 * v61 != v62);
      v66 = 0;
      do
      {
        v67 = *((_BYTE *)__dst + v66) & 0x7F;
        if (v67 >= 0x40)
          goto LABEL_74;
        v63 &= ~(1 << v67);
        v66 += 2;
      }
      while (2 * v61 != v66);
      v68 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
      v68.i16[0] = vaddlv_u8(v68);
      v69 = v68.i32[0];
      v70 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v63));
      v70.i16[0] = vaddlv_u8(v70);
      if (v70.i32[0] + v69)
        break;
      v96 = v11;
      v97 = v32;
      v82 = *(_BYTE *)__dst;
      v83 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)v9, *(char *)__dst, v83, v26, v27, v28, v29, v30);
      this = (unsigned int *)memmove(__dst, (char *)__dst + 2, 2 * v102 - 2);
      v84 = v102 - 1;
      v78 = v102 == 1;
      v102 = v84;
      v85 = (unsigned __int8 *)__dst;
      v86 = (char *)__dst + 2 * v84;
      if (v78)
      {
        v87 = 0;
        v88 = 0;
        v98 = 0;
        v24 = (char *)__dst + 2 * v84;
      }
      else
      {
        v90 = 2 * v84;
        v91 = __dst;
        while (*v91 != v83)
        {
          v91 += 2;
          v90 -= 2;
          if (!v90)
            goto LABEL_63;
        }
        *v91 = v82;
LABEL_63:
        v98 = 0;
        v92 = v85;
        v93 = v86;
        v24 = v86;
        do
        {
          if (*v85 == v85[1])
          {
            v94 = v85;
            if (v93 != (char *)__dst + 2 * v102)
            {
              if (v85 == (unsigned __int8 *)v24)
              {
                v94 = (unsigned __int8 *)v93;
              }
              else
              {
                v95 = v92 - (unsigned __int8 *)v24;
                this = (unsigned int *)memmove(v93, v24, v92 - (unsigned __int8 *)v24);
                v94 = (unsigned __int8 *)&v93[v95];
              }
            }
            v24 = (char *)(v85 + 2);
            ++v98;
            v93 = (char *)v94;
          }
          v85 += 2;
          v92 += 2;
        }
        while (v85 < (unsigned __int8 *)v86);
        v85 = (unsigned __int8 *)__dst;
        v87 = v102;
        v88 = v102;
        v86 = v93;
      }
      v89 = (char *)&v85[2 * v87];
      if (v24 != v89)
      {
        this = (unsigned int *)memmove(v86, v24, v89 - v24);
        v88 = v102;
      }
      v61 = v88 - v98;
      v11 = v96;
      v32 = v97;
      v31 = v99;
LABEL_43:
      v102 = v61;
LABEL_44:
      if (!v61)
      {
        v81 = __dst;
        if (v32 != __dst && __dst)
        {
          __dst = 0;
          v101 = 0;
          WTF::fastFree((unint64_t)v81, v24, v25, v26, v27, v28, v29, v30);
        }
        goto LABEL_9;
      }
    }
    v71 = 0;
    if (v61 <= 1uLL)
      v72 = 1;
    else
      v72 = v61;
    v73 = 2 * v72;
    while (1)
    {
      v74 = *((unsigned __int8 *)__dst + v71 + 1);
      if ((v74 & 0x7Fu) >= 0x40)
        goto LABEL_74;
      if (((v63 >> (v74 & 0x7F)) & 1) != 0)
        break;
      v71 += 2;
      if (v73 == v71)
        goto LABEL_44;
    }
    v75 = *((unsigned __int8 *)__dst + v71);
    if (v75 == v74)
    {
LABEL_42:
      this = (unsigned int *)memmove(&v64[v71], &v64[v71 + 2], 2 * v65 - v71 - 2);
      v61 = v102 - 1;
      goto LABEL_43;
    }
    v76 = v21;
    v77 = v23;
    if ((char)v75 == 63)
    {
      if ((char)v74 != 31)
      {
        v79 = v74 & 0x1F | 0xD2800000;
        goto LABEL_39;
      }
    }
    else
    {
      v78 = v74 == 31 || (char)v75 == 31;
      if (!v78)
      {
        v79 = v74 & 0xFFE0FFFF | ((v75 & 0x1F) << 16) | 0xAA0003E0;
LABEL_39:
        v80 = v9[50];
        if (v80 + 4 > v9[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
          v80 = v9[50];
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + v80) = v79;
        v9[50] += 4;
        v65 = v102;
        v23 = v77;
        v21 = v76;
        v31 = v99;
        v64 = (char *)__dst;
        goto LABEL_42;
      }
    }
    v79 = (char)v74 | (32 * (char)v75) | 0x91000000;
    goto LABEL_39;
  }
LABEL_9:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v31, 2, v26, v27, v28, v29, v30);
  if ((_DWORD)v21 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v23, 0, v33, v34, v35, v36, v37);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v21 << 35) + 0x380000001ALL, 0, v33, v34, v35, v36, v37);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationResolveScope, v38, v39, v40, v41, v42, v43, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v44, v45, v46, v47, v48, v49);
  this = (unsigned int *)JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v50, v51, v52, v53, v54, v55);
  v56 = *((_DWORD *)a2 + 12);
  v9[1194] = v56;
  v9[1195] = 4;
  v57 = (int)~v56;
  if (v57 >= v9[1001])
  {
LABEL_75:
    __break(0xC471u);
    return this;
  }
  v58 = *((_QWORD *)v9 + 499) + 24 * (int)v57;
  v59 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v58 = a2;
  *(_DWORD *)(v58 + 8) = v59;
  *(_BYTE *)(v58 + 12) = 6;
  *(_DWORD *)(v58 + 13) = 0;
  *(_BYTE *)(v58 + 17) = 0;
  --v9[1196];
  if (v11)
  {
    if (v13 > 15)
      v60 = -1;
    else
      v60 = v13;
    --v9[3 * v60 + 1196];
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileResolveScopeForHoistingFuncDeclInEval(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  uint8x8_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  __int16 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  char v57;
  char v58;
  uint64_t v59;
  unsigned __int8 *v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned __int8 *v67;
  char *v68;
  unsigned __int8 *v69;
  int64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  __int16 *v95;
  int v96;
  void *__dst;
  int v98;
  unsigned int v99;
  __int16 v100;

  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
LABEL_73:
    __break(1u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8), v14 == -1))
  {
LABEL_5:
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v13, a3, a4, a5, a6, a7, a8);
  ++*(_DWORD *)(v9 + 4784);
  v21 = *(unsigned int *)(v9 + 4776);
  if ((_DWORD)v21 != 0x3FFFFFFF)
  {
    *(_QWORD *)(v9 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill(v9, v21, (uint64_t)v15, v16, v17, v18, v19, v20);
  }
  v22 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v15, v16, v17, v18, v19, v20);
  v24 = v23;
  this = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)(v9 + 3960) + 24) + 240), *((_DWORD *)a2 + 18));
  v32 = this;
  v33 = &v100;
  __dst = &v100;
  v98 = 1;
  if (v14 != 1)
  {
    v100 = v14 | 0x100;
    v99 = 1;
    v34 = 1;
    while (1)
    {
      v35 = 0;
      v36 = 0;
      v37 = (char *)__dst;
      v38 = v34;
      do
      {
        if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
          goto LABEL_73;
        v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
        v35 += 2;
      }
      while (2 * v34 != v35);
      v39 = 0;
      do
      {
        v40 = *((_BYTE *)__dst + v39) & 0x7F;
        if (v40 >= 0x40)
          goto LABEL_73;
        v36 &= ~(1 << v40);
        v39 += 2;
      }
      while (2 * v34 != v39);
      v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
      v41.i16[0] = vaddlv_u8(v41);
      v42 = v41.i32[0];
      v43 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v36));
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.i32[0] + v42)
        break;
      v94 = v11;
      v95 = v33;
      v93 = v32;
      v57 = *(_BYTE *)__dst;
      v58 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v58, v27, v28, v29, v30, v31);
      this = (uint64_t)memmove(__dst, (char *)__dst + 2, 2 * v99 - 2);
      v59 = v99 - 1;
      v54 = v99 == 1;
      v99 = v59;
      v60 = (unsigned __int8 *)__dst;
      v61 = (char *)__dst + 2 * v59;
      if (v54)
      {
        v62 = 0;
        v63 = 0;
        v96 = 0;
        v25 = (char *)__dst + 2 * v59;
      }
      else
      {
        v65 = 2 * v59;
        v66 = __dst;
        while (*v66 != v58)
        {
          v66 += 2;
          v65 -= 2;
          if (!v65)
            goto LABEL_50;
        }
        *v66 = v57;
LABEL_50:
        v96 = 0;
        v67 = v60;
        v68 = v61;
        v25 = v61;
        do
        {
          if (*v60 == v60[1])
          {
            v69 = v60;
            if (v68 != (char *)__dst + 2 * v99)
            {
              if (v60 == (unsigned __int8 *)v25)
              {
                v69 = (unsigned __int8 *)v68;
              }
              else
              {
                v70 = v67 - (unsigned __int8 *)v25;
                this = (uint64_t)memmove(v68, v25, v67 - (unsigned __int8 *)v25);
                v69 = (unsigned __int8 *)&v68[v70];
              }
            }
            v25 = (char *)(v60 + 2);
            ++v96;
            v68 = (char *)v69;
          }
          v60 += 2;
          v67 += 2;
        }
        while (v60 < (unsigned __int8 *)v61);
        v60 = (unsigned __int8 *)__dst;
        v62 = v99;
        v63 = v99;
        v61 = v68;
      }
      v64 = (char *)&v60[2 * v62];
      if (v25 != v64)
      {
        this = (uint64_t)memmove(v61, v25, v64 - v25);
        v63 = v99;
      }
      v34 = v63 - v96;
      v32 = v93;
      v11 = v94;
      v33 = v95;
LABEL_39:
      v99 = v34;
LABEL_40:
      if (!v34)
      {
        v71 = __dst;
        if (v33 != __dst && __dst)
        {
          __dst = 0;
          v98 = 0;
          WTF::fastFree((unint64_t)v71, v25, v26, v27, v28, v29, v30, v31);
        }
        goto LABEL_61;
      }
    }
    v44 = 0;
    if (v34 <= 1)
      v45 = 1;
    else
      v45 = v34;
    v46 = 2 * v45;
    while (1)
    {
      v47 = *((unsigned __int8 *)__dst + v44 + 1);
      if ((v47 & 0x7Fu) >= 0x40)
        goto LABEL_73;
      if (((v36 >> (v47 & 0x7F)) & 1) != 0)
        break;
      v44 += 2;
      if (v46 == v44)
        goto LABEL_40;
    }
    v48 = *((unsigned __int8 *)__dst + v44);
    if (v48 == v47)
    {
LABEL_38:
      this = (uint64_t)memmove(&v37[v44], &v37[v44 + 2], 2 * v38 - v44 - 2);
      v34 = v99 - 1;
      goto LABEL_39;
    }
    v49 = v33;
    v50 = v11;
    v51 = v32;
    v52 = v22;
    v53 = v24;
    if ((char)v48 == 63)
    {
      if ((char)v47 != 31)
      {
        v55 = v47 & 0x1F | 0xD2800000;
        goto LABEL_35;
      }
    }
    else
    {
      v54 = v47 == 31 || (char)v48 == 31;
      if (!v54)
      {
        v55 = v47 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
LABEL_35:
        v56 = *(_DWORD *)(v9 + 200);
        if (v56 + 4 > *(_DWORD *)(v9 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v56 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v56) = v55;
        *(_DWORD *)(v9 + 200) += 4;
        v37 = (char *)__dst;
        v38 = v99;
        v24 = v53;
        v22 = v52;
        v32 = v51;
        v11 = v50;
        v33 = v49;
        goto LABEL_38;
      }
    }
    v55 = (char)v47 | (32 * (char)v48) | 0x91000000;
    goto LABEL_35;
  }
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v32, 2, v27, v28, v29, v30, v31);
  if ((_DWORD)v22 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v24, 0, v72, v73, v74, v75, v76);
  else
    JSC::MacroAssemblerARM64::load64(v9, (v22 << 35) + 0x380000001ALL, 0, v72, v73, v74, v75, v76);
  JSC::DFG::SpeculativeJIT::appendCall(v9, (uint64_t)operationResolveScopeForHoistingFuncDeclInEval, v77, v78, v79, v80, v81, v82, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, v83, v84, v85, v86, v87, v88);
  this = JSC::DFG::SpeculativeJIT::jsValueResult(v9, 0, (uint64_t)a2, 16, 0, v89, v90, v91);
  --*(_DWORD *)(v9 + 4784);
  if (v11)
  {
    if (v14 > 15)
      v92 = -1;
    else
      v92 = v14;
    --*(_DWORD *)(v9 + 4776 + 12 * v92 + 8);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetGlobalVariable(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned int v20;
  uint64_t v21;
  char v22;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v21, this, a3, a4, a5, a6, a7, a8);
  v10 = v22;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, *((_QWORD *)a2 + 9), v22, v11, v12, v13, v14, v15);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v10, (uint64_t)a2, 16, 0, v16, v17, v18);
  if (v21)
  {
    v20 = v22;
    if (v22 != -1)
    {
      if (v22 > 15)
        v20 = -1;
      --*(_DWORD *)(v21 + 12 * v20 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutGlobalVariable(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v9 = this;
  v10 = *((_QWORD *)a2 + 4);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v11 + 12)
    || (v12 = JSC::DFG::SpeculativeJIT::fillJSValue(this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8), (_DWORD)v12 == -1))
  {
LABEL_5:
    v12 = JSC::DFG::SpeculativeJIT::fillJSValue(v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::store64(v9, v12, *((_QWORD *)a2 + 9), a4, a5, a6, a7, a8);
  this = JSC::DFG::SpeculativeJIT::noResult(v9, (uint64_t)a2, 0, v13, v14, v15, v16, v17);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((int)v12 > 15)
      v18 = -1;
    else
      v18 = v12;
    --*(_DWORD *)(v9 + 12 * v18 + 4784);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetDynamicVar(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;

  v9 = this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12)
    || (v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v14 == -1))
  {
LABEL_5:
    v14 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v9, v10, a3, a4, a5, a6, a7, a8);
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v13, a3, a4, a5, a6, a7, a8);
  ++*(_DWORD *)(v9 + 4784);
  v21 = *(unsigned int *)(v9 + 4776);
  if ((_DWORD)v21 != 0x3FFFFFFF)
  {
    *(_QWORD *)(v9 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill(v9, v21, (uint64_t)v15, v16, v17, v18, v19, v20);
  }
  v22 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, a2, v15, v16, v17, v18, v19, v20);
  v24 = v23;
  v25 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*(_QWORD *)(v9 + 3960) + 24) + 240), *((_DWORD *)a2 + 18));
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,WTF::UniquedStringImpl *,unsigned int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned int>(v9, (unsigned __int8 *)operationGetDynamicVar, 0, v22, v24, v14, v25, *((unsigned int *)a2 + 19), &v30);
  this = JSC::DFG::SpeculativeJIT::jsValueResult(v9, 0, (uint64_t)a2, 16, 0, v26, v27, v28);
  --*(_DWORD *)(v9 + 4784);
  if (v11)
  {
    if ((int)v14 > 15)
      v29 = -1;
    else
      v29 = v14;
    --*(_DWORD *)(v9 + 4776 + 12 * v29 + 8);
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,WTF::UniquedStringImpl *,unsigned int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned int>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint8x8_t v24;
  __int32 v25;
  uint8x8_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  JSC::AssemblerBuffer *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  JSC::AssemblerBuffer *v78;
  unsigned int v79;
  int v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  _BYTE v85[6];

  v10 = a8;
  v11 = a7;
  v12 = a5;
  v13 = a4;
  v14 = (JSC::AssemblerBuffer *)a3;
  v15 = (uint64_t)a2;
  v16 = a1;
  if ((_DWORD)a6 != 1)
  {
    v84 = a6 | 0x100;
    v82 = 1;
    v81 = (JSC::AssemblerBuffer *)(a1 + 56);
    v18 = 1;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = v18;
      do
      {
        if ((v85[v19 - 1] & 0x40) != 0)
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v20 |= 1 << v85[v19 - 1];
        v19 += 2;
      }
      while (2 * v18 != v19);
      v22 = 0;
      do
      {
        v23 = v85[v22 - 2] & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_62;
        v20 &= ~(1 << v23);
        v22 += 2;
      }
      while (2 * v18 != v22);
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v24.i16[0] = vaddlv_u8(v24);
      v25 = v24.i32[0];
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.i32[0] + v25)
      {
        v9 = 0;
        if (v18 <= 1)
          v27 = 1;
        else
          v27 = v18;
        v28 = 2 * v27;
        while (1)
        {
          v29 = v85[(_QWORD)v9 - 1];
          if ((v29 & 0x7Fu) >= 0x40)
            goto LABEL_62;
          if (((v20 >> (v29 & 0x7F)) & 1) != 0)
            break;
          v9 += 2;
          if ((char *)v28 == v9)
            goto LABEL_33;
        }
        v30 = v85[(_QWORD)v9 - 2];
        if (v30 != v29)
        {
          v31 = v10;
          v32 = v14;
          v33 = v11;
          v34 = v13;
          v35 = v12;
          v36 = a9;
          v37 = v15;
          if ((char)v30 == 63)
          {
            if (v29 == 31)
              goto LABEL_27;
            v39 = v29 & 0x1F | 0xD2800000;
          }
          else
          {
            v38 = (char)v29 == 31 || (char)v30 == 31;
            if (!v38)
            {
              v39 = v29 & 0xFFE0FFFF | ((v30 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v39 = (char)v29 | (32 * (char)v30) | 0x91000000;
          }
LABEL_28:
          v40 = *(_DWORD *)(v16 + 200);
          if (v40 + 4 > *(_DWORD *)(v16 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v40 = *(_DWORD *)(v16 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + v40) = v39;
          *(_DWORD *)(v16 + 200) += 4;
          v21 = v82;
          v15 = v37;
          a9 = v36;
          v12 = v35;
          v13 = v34;
          v11 = v33;
          v14 = v32;
          v10 = v31;
        }
        memmove(&v85[(_QWORD)v9 - 2], &v85[(_QWORD)v9], 2 * v21 - (_QWORD)v9 - 2);
        v18 = v82 - 1;
        goto LABEL_32;
      }
      v79 = v10;
      v77 = v11;
      v78 = v14;
      v41 = v84;
      LODWORD(v9) = SHIBYTE(v84);
      JSC::MacroAssemblerARM64::swap(v16, (char)v84, SHIBYTE(v84), a4, a5, a6, a7, a8);
      memmove(&v84, v85, 2 * v82 - 2);
      v42 = v82 - 1;
      v38 = v82 == 1;
      v83 = v42;
      v43 = (char *)&v84;
      v44 = &v85[2 * v42 - 2];
      if (v38)
      {
        v45 = 0;
        v46 = 0;
        v80 = 0;
        a2 = &v85[2 * v42 - 2];
      }
      else
      {
        v48 = 2 * v42;
        v49 = &v84;
        while (*(unsigned __int8 *)v49 != v9)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v41;
LABEL_43:
        v80 = 0;
        v9 = (char *)&v84;
        v50 = v44;
        a2 = (unsigned __int8 *)v44;
        do
        {
          if (*v43 == v43[1])
          {
            v51 = v43;
            if (v50 != &v85[2 * v83 - 2])
            {
              if (v43 == (char *)a2)
              {
                v51 = v50;
              }
              else
              {
                v52 = v9 - (char *)a2;
                memmove(v50, a2, v9 - (char *)a2);
                v51 = &v50[v52];
              }
            }
            a2 = (unsigned __int8 *)(v43 + 2);
            ++v80;
            v50 = v51;
          }
          v9 += 2;
          v43 += 2;
        }
        while (v43 < v44);
        v45 = v83;
        v46 = v83;
        v44 = v50;
      }
      v47 = &v85[2 * v45 - 2];
      if (a2 != v47)
      {
        memmove(v44, a2, v47 - a2);
        v46 = v83;
      }
      v10 = v79;
      v18 = v46 - v80;
      v11 = v77;
      v14 = v78;
LABEL_32:
      v82 = v18;
LABEL_33:
      ;
    }
    while (v18);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v16, (JSC::ARM64LogicalImmediate *)v10, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v11, 2, v53, v54, v55, v56, v57);
  if ((_DWORD)v13 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v16, v12, 0, v58, v59, v60, v61, v62);
  else
    JSC::MacroAssemblerARM64::load64(v16, (v13 << 35) + 0x380000001ALL, 0, v58, v59, v60, v61, v62);
  JSC::DFG::SpeculativeJIT::appendCall(v16, v15, v63, v64, v65, v66, v67, v68, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v16, 1, v69, v70, v71, v72, v73, v74);
  if ((_BYTE)v14)
  {
    if (v14 == 31)
      LODWORD(v9) = -1862270945;
    else
      LODWORD(v9) = v14 & 0x1F | 0xAA0003E0;
    v76 = *(_DWORD *)(v16 + 200);
    v16 += 200;
    v75 = v76;
    v14 = (JSC::AssemblerBuffer *)(v16 - 144);
    if (v76 + 4 > *(_DWORD *)(v16 - 8))
    {
LABEL_63:
      JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v75 = *(_DWORD *)v16;
    }
    *(_DWORD *)(*(_QWORD *)v14 + v75) = (_DWORD)v9;
    *(_DWORD *)v16 += 4;
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutDynamicVar(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  JSC::ARM64LogicalImmediate *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::ARM64LogicalImmediate *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint8x8_t v42;
  __int32 v43;
  uint8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  char v85;
  char v86;
  char v87;
  char v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  _BYTE *v93;
  int v94;
  unsigned __int8 *v95;
  char *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned int v99;
  unsigned __int8 *v100;
  int v101;
  int64_t v102;
  char *v103;
  int v104;
  char v105;
  char *v106;
  int v107;
  JSC::ARM64LogicalImmediate *v108;
  JSC::ARM64LogicalImmediate *v109;
  uint64_t v110;
  void *__dst;
  int v112;
  unsigned int v113;
  _WORD v114[4];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_69;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF734CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_69:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_68;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_107:
    __break(1u);
LABEL_108:
    JUMPOUT(0x197BF728CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_68:
    v16 = -1;
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v23 = *((unsigned __int16 *)a2 + 9);
  if (v23 == 6)
    goto LABEL_14;
  if (*((unsigned __int16 *)a2 + 9) <= 0x74u)
  {
    if ((v23 - 101) < 4)
      goto LABEL_73;
LABEL_94:
    __break(0xC471u);
    goto LABEL_108;
  }
  v87 = v23 - 117;
  if ((v23 - 117) > 0x3C)
    goto LABEL_93;
  if (((1 << v87) & 0x100000000000201FLL) != 0)
  {
LABEL_73:
    v24 = (unsigned __int8 *)a2 + 80;
    goto LABEL_15;
  }
  if (((1 << v87) & 0x4020) == 0)
  {
LABEL_93:
    if (v23 == 391)
      goto LABEL_73;
    if (v23 != 253)
      goto LABEL_94;
  }
LABEL_14:
  v24 = (unsigned __int8 *)a2 + 72;
LABEL_15:
  v25 = *v24;
  v110 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v17, v18, v19, v20, v21, v22);
  v108 = v26;
  v109 = (JSC::ARM64LogicalImmediate *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(*((_QWORD *)this + 495) + 24)+ 240), *((_DWORD *)a2 + 18));
  v34 = (JSC::ARM64LogicalImmediate *)*((unsigned int *)a2 + 19);
  __dst = v114;
  v112 = 2;
  if (v12 == 1)
  {
    if (v16 == 2)
      goto LABEL_52;
    v107 = v25;
    v35 = 0;
  }
  else
  {
    v107 = v25;
    v114[0] = v12 | 0x100;
    v35 = 1;
    v113 = 1;
    if (v16 == 2)
      goto LABEL_21;
  }
  v114[v35++] = v16 | 0x200;
  v113 = v35;
  do
  {
LABEL_21:
    v36 = 0;
    v37 = 0;
    v38 = (char *)__dst;
    v39 = v35;
    do
    {
      if ((*((_BYTE *)__dst + v36 + 1) & 0x40) != 0)
        goto LABEL_107;
      v37 |= 1 << *((_BYTE *)__dst + v36 + 1);
      v36 += 2;
    }
    while (2 * v35 != v36);
    v40 = 0;
    do
    {
      v41 = *((_BYTE *)__dst + v40) & 0x7F;
      if (v41 >= 0x40)
        goto LABEL_107;
      v37 &= ~(1 << v41);
      v40 += 2;
    }
    while (2 * v35 != v40);
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)v37);
    v42.i16[0] = vaddlv_u8(v42);
    v43 = v42.i32[0];
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v37));
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.i32[0] + v43)
    {
      v45 = 0;
      if (v35 <= 1uLL)
        v46 = 1;
      else
        v46 = v35;
      v47 = 2 * v46;
      while (1)
      {
        v48 = *((unsigned __int8 *)__dst + v45 + 1);
        if ((v48 & 0x7Fu) >= 0x40)
          goto LABEL_107;
        if (((v37 >> (v48 & 0x7F)) & 1) != 0)
          break;
        v45 += 2;
        if (v47 == v45)
          goto LABEL_46;
      }
      v49 = *((unsigned __int8 *)__dst + v45);
      if (v49 == v48)
        goto LABEL_44;
      v50 = (char)v49;
      if ((char)v49 == 63)
      {
        v51 = *((_DWORD *)this + 50);
        v52 = *((_DWORD *)this + 48);
        if ((char)v48 != 31)
        {
          v54 = v48 & 0x1F | 0xD2800000;
          goto LABEL_41;
        }
      }
      else
      {
        v51 = *((_DWORD *)this + 50);
        v52 = *((_DWORD *)this + 48);
        v53 = v48 == 31 || v50 == 31;
        if (!v53)
        {
          v54 = v48 & 0xFFE0FFFF | ((v50 & 0x1F) << 16) | 0xAA0003E0;
LABEL_41:
          if (v51 + 4 > v52)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
            v51 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v51) = v54;
          *((_DWORD *)this + 50) += 4;
          v38 = (char *)__dst;
          v39 = v113;
LABEL_44:
          memmove(&v38[v45], &v38[v45 + 2], 2 * v39 - v45 - 2);
          v35 = v113 - 1;
          goto LABEL_45;
        }
      }
      v54 = (char)v48 | (32 * v50) | 0x91000000;
      goto LABEL_41;
    }
    v88 = *((_BYTE *)__dst + 1);
    v105 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v88, v29, v30, v31, v32, v33);
    memmove(__dst, (char *)__dst + 2, 2 * v113 - 2);
    v89 = v113 - 1;
    v53 = v113 == 1;
    v113 = v89;
    v90 = (unsigned __int8 *)__dst;
    v91 = (unsigned __int8 *)__dst + 2 * v89;
    if (v53)
    {
      v98 = 0;
      v99 = 0;
      v94 = 0;
      v27 = v91;
    }
    else
    {
      v92 = 2 * v89;
      v93 = __dst;
      while (*v93 != v88)
      {
        v93 += 2;
        v92 -= 2;
        if (!v92)
          goto LABEL_78;
      }
      *v93 = v105;
LABEL_78:
      v94 = 0;
      v95 = v90;
      v27 = v91;
      v96 = (char *)v91;
      do
      {
        if (*v90 == v90[1])
        {
          v97 = v90;
          if (v96 != (char *)__dst + 2 * v113)
          {
            v104 = v94;
            v106 = (char *)v91;
            if (v90 == v27)
            {
              v97 = (unsigned __int8 *)v96;
            }
            else
            {
              v102 = v95 - v27;
              v103 = v96;
              memmove(v96, v27, v95 - v27);
              v97 = (unsigned __int8 *)&v103[v102];
            }
            v91 = (unsigned __int8 *)v106;
            v94 = v104;
          }
          v27 = v90 + 2;
          ++v94;
          v96 = (char *)v97;
        }
        v90 += 2;
        v95 += 2;
      }
      while (v90 < v91);
      v90 = (unsigned __int8 *)__dst;
      v98 = v113;
      v99 = v113;
      v91 = (unsigned __int8 *)v96;
    }
    v100 = &v90[2 * v98];
    if (v27 != v100)
    {
      v101 = v94;
      memmove(v91, v27, v100 - v27);
      v94 = v101;
      v99 = v113;
    }
    v35 = v99 - v94;
LABEL_45:
    v113 = v35;
LABEL_46:
    ;
  }
  while (v35);
  v55 = __dst;
  v25 = v107;
  if (v114 != __dst && __dst)
  {
    __dst = 0;
    v112 = 0;
    WTF::fastFree((unint64_t)v55, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_52:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v34, 4, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v109, 3, v56, v57, v58, v59, v60);
  if ((_DWORD)v110 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v108, 0, v61, v62, v63, v64, v65);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v110 << 35) + 0x380000001ALL, 0, v61, v62, v63, v64, v65);
  if (v25)
    v72 = operationPutDynamicVarSloppy;
  else
    v72 = operationPutDynamicVarStrict;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v72, v66, v67, v68, v69, v70, v71, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v73, v74, v75, v76, v77, v78);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v79, v80, v81, v82, v83);
  if (v14)
  {
    if (v16 > 15)
      v85 = -1;
    else
      v85 = v16;
    --*((_DWORD *)this + 3 * v85 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v86 = -1;
    else
      v86 = v12;
    --*((_DWORD *)this + 3 * v86 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetClosureVar(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_17;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, v9, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_17:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, v20, v21, v22, v23, v24, v25);
LABEL_6:
  v26 = v33;
  JSC::MacroAssemblerARM64::load64((uint64_t)v9, v13 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 32) >> 3) << 35), v33, v21, v22, v23, v24, v25);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, v26, (uint64_t)a2, 16, 0, v27, v28, v29);
  if (v32)
  {
    v30 = v33;
    if (v33 != -1)
    {
      if (v33 > 15)
        v30 = -1;
      --*(_DWORD *)(v32 + 12 * v30 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v31 = -1;
    else
      v31 = v13;
    --*((_DWORD *)v9 + 3 * v31 + 1196);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutClosureVar(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_25;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_26;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_25:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_24;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197BF764CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_24:
  v15 = -1;
LABEL_9:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v15, v12 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 32) >> 3) << 35), a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v16, v17, v18, v19, v20);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v22 = -1;
    else
      v22 = v15;
    --*((_DWORD *)this + 3 * v22 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v23 = -1;
    else
      v23 = v12;
    --*((_DWORD *)this + 3 * v23 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetInternalField(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  char v33;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_17;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, v9, v14, v15, v16, v17, v18, v19);
    if (v13 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_17:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v32, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, v20, v21, v22, v23, v24, v25);
LABEL_6:
  v26 = v33;
  JSC::MacroAssemblerARM64::load64((uint64_t)v9, v13 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 16) >> 3) << 35), v33, v21, v22, v23, v24, v25);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, v26, (uint64_t)a2, 16, 0, v27, v28, v29);
  if (v32)
  {
    v30 = v33;
    if (v33 != -1)
    {
      if (v33 > 15)
        v30 = -1;
      --*(_DWORD *)(v32 + 12 * v30 + 4784);
    }
  }
  if (v11)
  {
    if (v13 > 15)
      v31 = -1;
    else
      v31 = v13;
    --*((_DWORD *)v9 + 3 * v31 + 1196);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutInternalField(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  char v23;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_25;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_26;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_25:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_24;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197BF794CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_24:
  v15 = -1;
LABEL_9:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v15, v12 | ((unint64_t)((8 * *((_DWORD *)a2 + 18) + 16) >> 3) << 35), a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v16, v17, v18, v19, v20);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v22 = -1;
    else
      v22 = v15;
    --*((_DWORD *)this + 3 * v22 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v23 = -1;
    else
      v23 = v12;
    --*((_DWORD *)this + 3 * v23 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePutAccessorByVal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  JSC::DFG::Node *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint8x8_t v44;
  __int32 v45;
  uint8x8_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  char v57;
  char v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  unsigned __int8 *v65;
  char *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, WTF::AtomStringImpl *, uint64_t, uint64_t, WTF::StringImpl *, __n128, int32x2_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t result;
  char v91;
  char v92;
  char v93;
  int64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  JSC::ARM64LogicalImmediate *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  void *__dst;
  uint64_t v105;
  _WORD v106[4];

  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_107;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_116;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12))
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_107:
    v13 = -1;
  v14 = *((_QWORD *)a2 + 4);
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF8020);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_9:
    v16 = -1;
  v17 = *((_QWORD *)a2 + 5);
  v101 = v17 & 0xFF00FFFFFFFFFFFFLL;
  v102 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_108;
  v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v18 >= *((unsigned int *)this + 1001))
  {
LABEL_116:
    __break(0xC471u);
    JUMPOUT(0x197BF8018);
  }
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
  {
LABEL_108:
    v19 = -1;
    goto LABEL_14;
  }
  v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
LABEL_14:
  v103 = *((unsigned __int16 *)a2 + 9);
  if (v13 == -1)
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  if (v19 == -1)
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v26 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v20, v21, v22, v23, v24, v25);
  v34 = (uint64_t)v27;
  v35 = *((unsigned __int16 *)a2 + 9);
  v36 = (v35 - 123);
  if (v36 >= 3)
  {
    if ((v35 - 126) >= 2)
    {
      v29 = 373;
      __break(0xC471u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    v37 = (char *)a2 + 72;
  }
  else
  {
    v37 = (char *)a2 + 80;
  }
  v99 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)v37;
  __dst = v106;
  v105 = 3;
  if (v13 == 1)
  {
    v38 = 0;
  }
  else
  {
    v106[0] = v13 | 0x100;
    v38 = 1;
    HIDWORD(v105) = 1;
  }
  if (v16 != 2)
  {
    v106[v38++] = v16 | 0x200;
    HIDWORD(v105) = v38;
  }
  v100 = v26;
  if (v19 == 4)
  {
    if (!v38)
      goto LABEL_86;
  }
  else
  {
    v106[v38++] = v19 | 0x400;
    HIDWORD(v105) = v38;
  }
  v98 = (uint64_t)v27;
  do
  {
    v39 = 0;
    v40 = 0;
    v36 = (unint64_t)__dst;
    v41 = v38;
    do
    {
      if ((*((_BYTE *)__dst + v39 + 1) & 0x40) != 0)
        goto LABEL_112;
      v40 |= 1 << *((_BYTE *)__dst + v39 + 1);
      v39 += 2;
    }
    while (2 * v38 != v39);
    v42 = 0;
    do
    {
      v43 = *((_BYTE *)__dst + v42) & 0x7F;
      if (v43 >= 0x40)
        goto LABEL_112;
      v40 &= ~(1 << v43);
      v42 += 2;
    }
    while (2 * v38 != v42);
    v44 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
    v44.i16[0] = vaddlv_u8(v44);
    v45 = v44.i32[0];
    v46 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v40));
    v46.i16[0] = vaddlv_u8(v46);
    if (v46.i32[0] + v45)
    {
      v47 = 0;
      if (v38 <= 1)
        v48 = 1;
      else
        v48 = v38;
      v49 = 2 * v48;
      while (1)
      {
        v50 = *((unsigned __int8 *)__dst + v47 + 1);
        if ((v50 & 0x7Fu) >= 0x40)
          goto LABEL_112;
        if (((v40 >> (v50 & 0x7F)) & 1) != 0)
          break;
        v47 += 2;
        if (v49 == v47)
          goto LABEL_79;
      }
      v51 = *((unsigned __int8 *)__dst + v47);
      if (v51 == v50)
      {
LABEL_77:
        memmove((void *)(v36 + v47), (const void *)(v36 + v47 + 2), 2 * v41 - v47 - 2);
        v38 = HIDWORD(v105) - 1;
        goto LABEL_78;
      }
      v52 = (char)v51;
      if ((char)v51 == 63)
      {
        v53 = *((_DWORD *)this + 50);
        v54 = *((_DWORD *)this + 48);
        if ((char)v50 != 31)
        {
          v56 = v50 & 0x1F | 0xD2800000;
          goto LABEL_74;
        }
      }
      else
      {
        v53 = *((_DWORD *)this + 50);
        v54 = *((_DWORD *)this + 48);
        v55 = v50 == 31 || v52 == 31;
        if (!v55)
        {
          v56 = v50 & 0xFFE0FFFF | ((v52 & 0x1F) << 16) | 0xAA0003E0;
LABEL_74:
          if (v53 + 4 > v54)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
            v53 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v53) = v56;
          *((_DWORD *)this + 50) += 4;
          v36 = (unint64_t)__dst;
          v41 = HIDWORD(v105);
          goto LABEL_77;
        }
      }
      v56 = (char)v50 | (32 * v52) | 0x91000000;
      goto LABEL_74;
    }
    v97 = v11;
    v57 = *(_BYTE *)__dst;
    v58 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v58, v29, v30, v31, v32, v33);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v105) - 2);
    v59 = (HIDWORD(v105) - 1);
    v55 = HIDWORD(v105) == 1;
    HIDWORD(v105) = v59;
    v60 = (unsigned __int8 *)__dst;
    v61 = (unsigned __int8 *)__dst + 2 * v59;
    if (v55)
    {
      v68 = 0;
      v69 = 0;
      v64 = 0;
      v27 = v61;
    }
    else
    {
      v62 = 2 * v59;
      v63 = __dst;
      while (*v63 != v58)
      {
        v63 += 2;
        v62 -= 2;
        if (!v62)
          goto LABEL_58;
      }
      *v63 = v57;
LABEL_58:
      v64 = 0;
      v65 = v60;
      v27 = v61;
      v66 = (char *)v61;
      do
      {
        if (*v60 == v60[1])
        {
          v67 = v60;
          if (v66 != (char *)__dst + 2 * HIDWORD(v105))
          {
            v96 = (char *)v61;
            if (v60 == v27)
            {
              v67 = (unsigned __int8 *)v66;
            }
            else
            {
              v94 = v65 - v27;
              v95 = v66;
              memmove(v66, v27, v65 - v27);
              v67 = (unsigned __int8 *)&v95[v94];
            }
            v61 = (unsigned __int8 *)v96;
          }
          v27 = v60 + 2;
          ++v64;
          v66 = (char *)v67;
        }
        v60 += 2;
        v65 += 2;
      }
      while (v60 < v61);
      v60 = (unsigned __int8 *)__dst;
      v68 = HIDWORD(v105);
      v69 = HIDWORD(v105);
      v61 = (unsigned __int8 *)v66;
    }
    v70 = &v60[2 * v68];
    v11 = v97;
    if (v27 != v70)
    {
      memmove(v61, v27, v70 - v27);
      v69 = HIDWORD(v105);
    }
    v38 = v69 - v64;
LABEL_78:
    HIDWORD(v105) = v38;
LABEL_79:
    ;
  }
  while (v38);
  v71 = __dst;
  v34 = v98;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v105) = 0;
    WTF::fastFree((unint64_t)v71, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_86:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v99, 3, v29, v30, v31, v32, v33);
  v36 = v100;
  if ((_DWORD)v100 == -1)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v34, 0, v29, v30, v31, v32, v33);
    goto LABEL_88;
  }
LABEL_113:
  JSC::MacroAssemblerARM64::load64((uint64_t)this, (v36 << 35) + 0x380000001ALL, 0, v29, v30, v31, v32, v33);
LABEL_88:
  if (v103 == 126)
    v78 = operationPutGetterByVal;
  else
    v78 = operationPutSetterByVal;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)v78, v72, v73, v74, v75, v76, v77, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 0, v79, v80, v81, v82, v83, v84);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v85, v86, v87, v88, v89);
  if (v101)
  {
    if (v19 > 15)
      v91 = -1;
    else
      v91 = v19;
    --*((_DWORD *)this + 3 * v91 + 1196);
  }
  if (v102)
  {
    if (v16 > 15)
      v92 = -1;
    else
      v92 = v16;
    --*((_DWORD *)this + 3 * v92 + 1196);
  }
  if (v11)
  {
    if (v13 > 15)
      v93 = -1;
    else
      v93 = v13;
    --*((_DWORD *)this + 3 * v93 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileGetRegExpObjectLastIndex(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_17;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12))
  {
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v37, v9, v14, v15, v16, v17, v18, v19);
    if ((_DWORD)v13 != -1)
      goto LABEL_6;
  }
  else
  {
LABEL_17:
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v37, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
  }
  v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, v20, v21, v22, v23, v24, v25);
LABEL_6:
  v26 = v38;
  JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)v9, *((_QWORD *)a2 + 3), v13, v21, v22, v23, v24, v25);
  JSC::MacroAssemblerARM64::load64((uint64_t)v9, v13 | 0x1800000000, v26, v27, v28, v29, v30, v31);
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, v26, (uint64_t)a2, 16, 0, v32, v33, v34);
  if (v37)
  {
    v35 = v38;
    if (v38 != -1)
    {
      if (v38 > 15)
        v35 = -1;
      --*(_DWORD *)(v37 + 12 * v35 + 4784);
    }
  }
  if (v11)
  {
    if ((int)v13 > 15)
      v36 = -1;
    else
      v36 = v13;
    --*((_DWORD *)v9 + 3 * v36 + 1196);
  }
  return this;
}

uint64_t JSC::DFG::SpeculativeJIT::compileSetRegExpObjectLastIndex(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;
  char v35;
  int v36[3];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_28;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF83B8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_28:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  v14 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_27;
  v15 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v15 >= *((unsigned int *)this + 1001))
    goto LABEL_32;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
  else
LABEL_27:
    v16 = -1;
  if (v12 == 0xFF)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v16 == -1)
    v16 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  if (!*((_DWORD *)a2 + 18))
  {
    JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *((_QWORD *)a2 + 3), (char)v12, a4, a5, a6, a7, a8);
    if (*((_BYTE *)this + 212))
    {
      v22 = v12;
      *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v12 | 0x1000000000, *((char *)this + 272), v17, v18, v19, v20, v21);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, 16, 1, v23, v24, v25, v26, (uint64_t)v36, v27);
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x12uLL, (JSC::DFG::Node *)0xFF80000000, 0, v36);
      goto LABEL_16;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x197BF83B0);
  }
  v22 = v12;
LABEL_16:
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v16, v22 | 0x1800000000, a4, a5, a6, a7, a8);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v28, v29, v30, v31, v32);
  if (v14)
  {
    if (v16 > 15)
      v34 = -1;
    else
      v34 = v16;
    --*((_DWORD *)this + 3 * v34 + 1196);
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((char)v12 > 15)
      v35 = -1;
    else
      v35 = v12;
    --*((_DWORD *)this + 3 * v35 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileRegExpExec(uint64_t this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int8 v105;
  uint64_t v106;
  unint64_t v107;
  unsigned __int8 v108;

  v9 = (unsigned int *)this;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *(unsigned int *)(this + 4004))
  {
    __break(0xC471u);
    return this;
  }
  if (!*(_BYTE *)(*(_QWORD *)(this + 3992) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)v9, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)a2 + 4);
  if ((v14 & 0xFC000000000000) == 0x40000000000000)
  {
    if ((*((_QWORD *)a2 + 5) & 0xFC000000000000) == 0x54000000000000)
    {
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v106, (uint64_t)v9, v14, a4, a5, a6, a7, a8);
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v103, (uint64_t)v9, *((_QWORD *)a2 + 5), v48, v49, v50, v51, v52);
      v59 = v108;
      if (v108 == 255)
      {
        v59 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v106, v107, v53, v54, v55, v56, v57, v58);
        v108 = v59;
      }
      v60 = v105;
      if (v105 == 255)
      {
        v60 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v103, v104, v53, v54, v55, v56, v57, v58);
        v105 = v60;
      }
      v61 = (char)v59;
      JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)v9, *((_QWORD *)a2 + 4), v61, v54, v55, v56, v57, v58);
      v62 = (char)v60;
      JSC::DFG::SpeculativeJIT::speculateString((uint64_t)v9, *((_QWORD *)a2 + 5), v62, v63, v64, v65, v66, v67);
      JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v68, v69, v70, v71, v72, v73, v74);
      ++v9[1196];
      v81 = v9[1194];
      if ((_DWORD)v81 != 0x3FFFFFFF)
      {
        *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v81, v75, v76, v77, v78, v79, v80);
      }
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v102, (unsigned __int8 *)v9, (uint64_t)operationRegExpExecString, v13, v61, v62, v79, v80);
    }
    else
    {
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v106, (uint64_t)v9, v14, a4, a5, a6, a7, a8);
      JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v103, (uint64_t)v9, *((_QWORD *)a2 + 5), 0, v15, v16, v17, v18);
      v25 = v108;
      if (v108 == 255)
      {
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v106, v107, v19, v20, v21, v22, v23, v24);
        v108 = v25;
      }
      v26 = v105;
      if (v105 == 255)
      {
        v26 = JSC::DFG::SpeculativeJIT::fillJSValue(v103, v104, v19, v20, v21, v22, v23, v24);
        v105 = v26;
      }
      v27 = (char)v25;
      JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)v9, *((_QWORD *)a2 + 4), v27, v20, v21, v22, v23, v24);
      JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v28, v29, v30, v31, v32, v33, v34);
      ++v9[1196];
      v41 = v9[1194];
      if ((_DWORD)v41 != 0x3FFFFFFF)
      {
        *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v41, v35, v36, v37, v38, v39, v40);
      }
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,long long),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(&v102, (unsigned __int8 *)v9, v13, v27, v26, v38, v39, v40);
    }
  }
  else
  {
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v106, (uint64_t)v9, v14, 0, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v103, (uint64_t)v9, *((_QWORD *)a2 + 5), 0, v82, v83, v84, v85);
    v93 = v108;
    if (v108 == 255)
    {
      v93 = JSC::DFG::SpeculativeJIT::fillJSValue(v106, v107, v87, v88, v89, v90, v91, v92);
      v108 = v93;
    }
    v94 = v105;
    if (v105 == 255)
    {
      v94 = JSC::DFG::SpeculativeJIT::fillJSValue(v103, v104, v87, v88, v89, v90, v91, v92);
      v105 = v94;
    }
    JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v9, v86, v87, v88, v89, v90, v91, v92);
    ++v9[1196];
    v101 = v9[1194];
    if ((_DWORD)v101 != 0x3FFFFFFF)
    {
      *((_QWORD *)v9 + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v101, v95, v96, v97, v98, v99, v100);
    }
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(&v102, (unsigned __int8 *)v9, v13, v93, v94, v98, v99, v100);
  }
  this = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)v9, 0, (uint64_t)a2, 16, 0, v42, v43, v44);
  --v9[1196];
  if ((v104 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v45 = (char)v105;
    if ((char)v105 > 15)
      v45 = -1;
    --*(_DWORD *)(v103 + 12 * v45 + 4784);
  }
  if ((v107 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v46 = (char)v108;
    if ((char)v108 > 15)
      v46 = -1;
    --*(_DWORD *)(v106 + 12 * v46 + 4784);
  }
  if (v11)
  {
    if ((int)v13 > 15)
      v47 = -1;
    else
      v47 = v13;
    --v9[3 * v47 + 1196];
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint8x8_t v17;
  __int32 v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  __int16 *v36;
  int v37;
  char *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  _BYTE v56[6];

  v9 = a2;
  v53 = 0;
  if ((_DWORD)a4)
  {
    v55 = a4;
    v11 = 1;
    v53 = 1;
  }
  else
  {
    v11 = 0;
  }
  if ((_DWORD)a5 != 1)
  {
    *(_WORD *)&v56[2 * v11++ - 2] = a5 | 0x100;
    v53 = v11;
  }
  if ((_DWORD)a6 == 2)
  {
    if (!v11)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v56[2 * v11++ - 2] = a6 | 0x200;
    v53 = v11;
  }
  do
  {
    v12 = 0;
    v13 = 0;
    v14 = v11;
    do
    {
      if ((v56[v12 - 1] & 0x40) != 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
      v13 |= 1 << v56[v12 - 1];
      v12 += 2;
    }
    while (2 * v11 != v12);
    v15 = 0;
    do
    {
      v16 = v56[v15 - 2] & 0x7F;
      if (v16 >= 0x40)
        goto LABEL_62;
      v13 &= ~(1 << v16);
      v15 += 2;
    }
    while (2 * v11 != v15);
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v17.i16[0] = vaddlv_u8(v17);
    v18 = v17.i32[0];
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v13));
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.i32[0] + v18)
    {
      v20 = 0;
      if (v11 <= 1)
        v21 = 1;
      else
        v21 = v11;
      v22 = 2 * v21;
      while (1)
      {
        v23 = v56[v20 - 1];
        if ((v23 & 0x7Fu) >= 0x40)
          goto LABEL_62;
        if (((v13 >> (v23 & 0x7F)) & 1) != 0)
          break;
        v20 += 2;
        if (v22 == v20)
          goto LABEL_57;
      }
      v24 = v56[v20 - 2];
      if (v24 != v23)
      {
        v25 = (char)v24;
        if ((char)v24 == 63)
        {
          v26 = *((_DWORD *)v9 + 50);
          v27 = *((_DWORD *)v9 + 48);
          if (v23 == 31)
            goto LABEL_51;
          v29 = v23 & 0x1F | 0xD2800000;
        }
        else
        {
          v26 = *((_DWORD *)v9 + 50);
          v27 = *((_DWORD *)v9 + 48);
          v28 = (char)v23 == 31 || v25 == 31;
          if (!v28)
          {
            v29 = v23 & 0xFFE0FFFF | ((v25 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v29 = (char)v23 | (32 * v25) | 0x91000000;
        }
LABEL_52:
        if (v26 + 4 > v27)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v26 = *((_DWORD *)v9 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + v26) = v29;
        *((_DWORD *)v9 + 50) += 4;
        v14 = v53;
      }
      memmove(&v56[v20 - 2], &v56[v20], 2 * v14 - v20 - 2);
      v11 = v53 - 1;
      goto LABEL_56;
    }
    v30 = HIBYTE(v55);
    v31 = v55;
    JSC::MacroAssemblerARM64::swap((uint64_t)v9, (char)v55, SHIBYTE(v55), a4, a5, a6, a7, a8);
    memmove(&v55, v56, 2 * v53 - 2);
    v32 = v53 - 1;
    v28 = v53 == 1;
    v54 = v32;
    v33 = (unsigned __int8 *)&v55;
    v34 = &v56[2 * v32 - 2];
    if (v28)
    {
      v41 = 0;
      v42 = 0;
      v37 = 0;
      a2 = v34;
    }
    else
    {
      v35 = 2 * v32;
      v36 = &v55;
      while (*(unsigned __int8 *)v36 != v30)
      {
        ++v36;
        v35 -= 2;
        if (!v35)
          goto LABEL_36;
      }
      *(_BYTE *)v36 = v31;
LABEL_36:
      v37 = 0;
      v38 = (char *)&v55;
      a2 = v34;
      v39 = v34;
      do
      {
        if (*v33 == v33[1])
        {
          v40 = v33;
          if (v39 != &v56[2 * v54 - 2])
          {
            v52 = v34;
            if (v33 == a2)
            {
              v40 = v39;
            }
            else
            {
              v50 = v38 - (char *)a2;
              v51 = v39;
              memmove(v39, a2, v38 - (char *)a2);
              v40 = &v51[v50];
            }
            v34 = v52;
          }
          a2 = v33 + 2;
          ++v37;
          v39 = v40;
        }
        v33 += 2;
        v38 += 2;
      }
      while (v33 < v34);
      v41 = v54;
      v42 = v54;
      v34 = v39;
    }
    v43 = &v56[2 * v41 - 2];
    if (a2 != v43)
    {
      memmove(v34, a2, v43 - a2);
      v42 = v54;
    }
    v11 = v42 - v37;
LABEL_56:
    v53 = v11;
LABEL_57:
    ;
  }
  while (v11);
LABEL_61:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, a3, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v44, v45, v46, v47, v48, v49);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,long long),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int16 *v35;
  int v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char *v40;
  int64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  _BYTE v58[6];

  v8 = a2;
  v55 = 0;
  if ((_DWORD)a3)
  {
    v57 = a3;
    v10 = 1;
    v55 = 1;
  }
  else
  {
    v10 = 0;
  }
  if ((_DWORD)a4 != 1)
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a4 | 0x100;
    v55 = v10;
  }
  if (a5 == 2)
  {
    if (!v10)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a5 | 0x200;
    v55 = v10;
  }
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = v10;
    do
    {
      if ((v58[v11 - 1] & 0x40) != 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
      v12 |= 1 << v58[v11 - 1];
      v11 += 2;
    }
    while (2 * v10 != v11);
    v14 = 0;
    do
    {
      v15 = v58[v14 - 2] & 0x7F;
      if (v15 >= 0x40)
        goto LABEL_62;
      v12 &= ~(1 << v15);
      v14 += 2;
    }
    while (2 * v10 != v14);
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.i32[0];
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v12));
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.i32[0] + v17)
    {
      v19 = 0;
      if (v10 <= 1)
        v20 = 1;
      else
        v20 = v10;
      v21 = 2 * v20;
      while (1)
      {
        v22 = v58[v19 - 1];
        if ((v22 & 0x7Fu) >= 0x40)
          goto LABEL_62;
        if (((v12 >> (v22 & 0x7F)) & 1) != 0)
          break;
        v19 += 2;
        if (v21 == v19)
          goto LABEL_57;
      }
      v23 = v58[v19 - 2];
      if (v23 != v22)
      {
        v24 = (char)v23;
        if ((char)v23 == 63)
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          if (v22 == 31)
            goto LABEL_51;
          v28 = v22 & 0x1F | 0xD2800000;
        }
        else
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          v27 = (char)v22 == 31 || v24 == 31;
          if (!v27)
          {
            v28 = v22 & 0xFFE0FFFF | ((v24 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v28 = (char)v22 | (32 * v24) | 0x91000000;
        }
LABEL_52:
        if (v25 + 4 > v26)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v25 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v25) = v28;
        *((_DWORD *)v8 + 50) += 4;
        v13 = v55;
      }
      memmove(&v58[v19 - 2], &v58[v19], 2 * v13 - v19 - 2);
      v10 = v55 - 1;
      goto LABEL_56;
    }
    v29 = HIBYTE(v57);
    v30 = v57;
    JSC::MacroAssemblerARM64::swap((uint64_t)v8, (char)v57, SHIBYTE(v57), a4, a5, a6, a7, a8);
    memmove(&v57, v58, 2 * v55 - 2);
    v31 = v55 - 1;
    v27 = v55 == 1;
    v56 = v31;
    v32 = (unsigned __int8 *)&v57;
    v33 = &v58[2 * v31 - 2];
    if (v27)
    {
      v43 = 0;
      v44 = 0;
      v36 = 0;
      a2 = v33;
    }
    else
    {
      v34 = 2 * v31;
      v35 = &v57;
      while (*(unsigned __int8 *)v35 != v29)
      {
        ++v35;
        v34 -= 2;
        if (!v34)
          goto LABEL_36;
      }
      *(_BYTE *)v35 = v30;
LABEL_36:
      v36 = 0;
      v37 = (char *)&v57;
      a2 = v33;
      v38 = v33;
      do
      {
        if (*v32 == v32[1])
        {
          v39 = v32;
          if (v38 != &v58[2 * v56 - 2])
          {
            v54 = v36;
            v52 = v33;
            v53 = v32;
            if (v32 == a2)
            {
              v39 = v38;
            }
            else
            {
              v40 = v37;
              v41 = v37 - (char *)a2;
              v42 = v38;
              memmove(v38, a2, v37 - (char *)a2);
              v37 = v40;
              v39 = &v42[v41];
            }
            v33 = v52;
            v32 = v53;
            v36 = v54;
          }
          a2 = v32 + 2;
          ++v36;
          v38 = v39;
        }
        v32 += 2;
        v37 += 2;
      }
      while (v32 < v33);
      v43 = v56;
      v44 = v56;
      v33 = v38;
    }
    v45 = &v58[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v33, a2, v45 - a2);
      v44 = v56;
    }
    v10 = v44 - v36;
LABEL_56:
    v55 = v10;
LABEL_57:
    ;
  }
  while (v10);
LABEL_61:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationRegExpExec, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v46, v47, v48, v49, v50, v51);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int16 *v35;
  int v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char *v40;
  int64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  _BYTE v58[6];

  v8 = a2;
  v55 = 0;
  if ((_DWORD)a3)
  {
    v57 = a3;
    v10 = 1;
    v55 = 1;
  }
  else
  {
    v10 = 0;
  }
  if (a4 != 1)
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a4 | 0x100;
    v55 = v10;
  }
  if (a5 == 2)
  {
    if (!v10)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a5 | 0x200;
    v55 = v10;
  }
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = v10;
    do
    {
      if ((v58[v11 - 1] & 0x40) != 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
      v12 |= 1 << v58[v11 - 1];
      v11 += 2;
    }
    while (2 * v10 != v11);
    v14 = 0;
    do
    {
      v15 = v58[v14 - 2] & 0x7F;
      if (v15 >= 0x40)
        goto LABEL_62;
      v12 &= ~(1 << v15);
      v14 += 2;
    }
    while (2 * v10 != v14);
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.i32[0];
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v12));
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.i32[0] + v17)
    {
      v19 = 0;
      if (v10 <= 1)
        v20 = 1;
      else
        v20 = v10;
      v21 = 2 * v20;
      while (1)
      {
        v22 = v58[v19 - 1];
        if ((v22 & 0x7Fu) >= 0x40)
          goto LABEL_62;
        if (((v12 >> (v22 & 0x7F)) & 1) != 0)
          break;
        v19 += 2;
        if (v21 == v19)
          goto LABEL_57;
      }
      v23 = v58[v19 - 2];
      if (v23 != v22)
      {
        v24 = (char)v23;
        if ((char)v23 == 63)
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          if (v22 == 31)
            goto LABEL_51;
          v28 = v22 & 0x1F | 0xD2800000;
        }
        else
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          v27 = (char)v22 == 31 || v24 == 31;
          if (!v27)
          {
            v28 = v22 & 0xFFE0FFFF | ((v24 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v28 = (char)v22 | (32 * v24) | 0x91000000;
        }
LABEL_52:
        if (v25 + 4 > v26)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v25 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v25) = v28;
        *((_DWORD *)v8 + 50) += 4;
        v13 = v55;
      }
      memmove(&v58[v19 - 2], &v58[v19], 2 * v13 - v19 - 2);
      v10 = v55 - 1;
      goto LABEL_56;
    }
    v29 = HIBYTE(v57);
    v30 = v57;
    JSC::MacroAssemblerARM64::swap((uint64_t)v8, (char)v57, SHIBYTE(v57), a4, a5, a6, a7, a8);
    memmove(&v57, v58, 2 * v55 - 2);
    v31 = v55 - 1;
    v27 = v55 == 1;
    v56 = v31;
    v32 = (unsigned __int8 *)&v57;
    v33 = &v58[2 * v31 - 2];
    if (v27)
    {
      v43 = 0;
      v44 = 0;
      v36 = 0;
      a2 = v33;
    }
    else
    {
      v34 = 2 * v31;
      v35 = &v57;
      while (*(unsigned __int8 *)v35 != v29)
      {
        ++v35;
        v34 -= 2;
        if (!v34)
          goto LABEL_36;
      }
      *(_BYTE *)v35 = v30;
LABEL_36:
      v36 = 0;
      v37 = (char *)&v57;
      a2 = v33;
      v38 = v33;
      do
      {
        if (*v32 == v32[1])
        {
          v39 = v32;
          if (v38 != &v58[2 * v56 - 2])
          {
            v54 = v36;
            v52 = v33;
            v53 = v32;
            if (v32 == a2)
            {
              v39 = v38;
            }
            else
            {
              v40 = v37;
              v41 = v37 - (char *)a2;
              v42 = v38;
              memmove(v38, a2, v37 - (char *)a2);
              v37 = v40;
              v39 = &v42[v41];
            }
            v33 = v52;
            v32 = v53;
            v36 = v54;
          }
          a2 = v32 + 2;
          ++v36;
          v38 = v39;
        }
        v32 += 2;
        v37 += 2;
      }
      while (v32 < v33);
      v43 = v56;
      v44 = v56;
      v33 = v38;
    }
    v45 = &v58[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v33, a2, v45 - a2);
      v44 = v56;
    }
    v10 = v44 - v36;
LABEL_56:
    v55 = v10;
LABEL_57:
    ;
  }
  while (v10);
LABEL_61:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationRegExpExecGeneric, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v46, v47, v48, v49, v50, v51);
}

uint64_t JSC::DFG::SpeculativeJIT::compileRegExpTest(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char v47;
  char v48;
  char *v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint8x8_t v78;
  __int32 v79;
  uint8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  char v90;
  unsigned __int8 v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  char *v139;
  char *v140;
  _WORD *v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 v147;
  void *__dst;
  uint64_t v149;
  _WORD v150[4];

  v8 = a2;
  v10 = *((_QWORD *)a2 + 3);
  v11 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_5;
  v12 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v12 >= *((unsigned int *)this + 1001))
    goto LABEL_150;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v12 + 12)
    || (v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8),
        (_DWORD)v13 == -1))
  {
LABEL_5:
    v13 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  }
  v14 = *((_QWORD *)v8 + 4);
  if ((v14 & 0xFC000000000000) != 0x40000000000000)
  {
    v114 = v10 & 0xFF00FFFFFFFFFFFFLL;
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&__dst, (uint64_t)this, *((_QWORD *)v8 + 4), 0, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v145, (uint64_t)this, *((_QWORD *)v8 + 5), 0, v115, v116, v117, v118);
    v126 = v150[0];
    if (LOBYTE(v150[0]) == 255)
    {
      v126 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)__dst, v149, v120, v121, v122, v123, v124, v125);
      LOBYTE(v150[0]) = v126;
    }
    v127 = v147;
    if (v147 == 255)
    {
      v127 = JSC::DFG::SpeculativeJIT::fillJSValue(v145, v146, v120, v121, v122, v123, v124, v125);
      v147 = v127;
    }
    v128 = (uint64_t)v8;
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v119, v120, v121, v122, v123, v124, v125);
    ++*((_DWORD *)this + 1196);
    v135 = *((unsigned int *)this + 1194);
    if ((_DWORD)v135 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v135, v129, v130, v131, v132, v133, v134);
    }
    LODWORD(v8) = v13;
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(&v144, (unsigned __int8 *)this, v13, v126, v127, v132, v133, v134);
    result = JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, 0, v128, 0);
    --*((_DWORD *)this + 1196);
    if ((v146 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v136 = (char)v147;
      if ((char)v147 > 15)
        v136 = -1;
      --*(_DWORD *)(v145 + 12 * v136 + 4784);
    }
    v21 = v114;
    if ((v149 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v137 = SLOBYTE(v150[0]);
      if (SLOBYTE(v150[0]) > 15)
        v137 = -1;
      --*((_DWORD *)__dst + 3 * v137 + 1196);
    }
    goto LABEL_33;
  }
  v15 = *((_QWORD *)v8 + 5);
  v16 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v15 & 0xFC000000000000) == 0x54000000000000)
  {
    if (!v16)
      goto LABEL_102;
    v17 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BF9D40);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
    {
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
      v15 = *((_QWORD *)v8 + 5);
    }
    else
    {
LABEL_102:
      v18 = -1;
    }
    v19 = (uint64_t)v8;
    if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v20 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v20 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197BF9D48);
      }
      v8 = (JSC::DFG::Node *)v13;
      v21 = v11;
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v20 + 12))
      {
        v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
        goto LABEL_16;
      }
    }
    else
    {
      v8 = (JSC::DFG::Node *)v13;
      v21 = v11;
    }
    v22 = -1;
LABEL_16:
    if (v18 == -1)
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
    if (v22 == -1)
      v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *(_QWORD *)(v19 + 32), v18, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *(_QWORD *)(v19 + 40), v22, v23, v24, v25, v26, v27);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v28, v29, v30, v31, v32, v33, v34);
    ++*((_DWORD *)this + 1196);
    v41 = *((unsigned int *)this + 1194);
    if ((_DWORD)v41 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v41, v35, v36, v37, v38, v39, v40);
    }
    v42 = (char *)this + 4776;
    JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)this, (unsigned __int8 *)operationRegExpTestString, 0, (uint64_t)v8, v18, v22, v39, v40, (int *)&__dst);
    JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
    result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, v19, 21, 0, v43, v44, v45);
    --*((_DWORD *)this + 1196);
    if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (v22 > 15)
        v47 = -1;
      else
        v47 = v22;
      --*(_DWORD *)&v42[12 * v47 + 8];
    }
    if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (v18 > 15)
        v48 = -1;
      else
        v48 = v18;
      v49 = &v42[12 * v48];
LABEL_32:
      --*((_DWORD *)v49 + 2);
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  if (!v16)
    goto LABEL_119;
  v51 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v51 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BF9D50);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v51 + 12))
  {
    v52 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)v8 + 4), a3, a4, a5, a6, a7, a8);
    v15 = *((_QWORD *)v8 + 5);
  }
  else
  {
LABEL_119:
    v52 = -1;
  }
  v142 = v15 & 0xFF00FFFFFFFFFFFFLL;
  v143 = v11;
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_118;
  v53 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v53 >= *((unsigned int *)this + 1001))
  {
LABEL_150:
    __break(0xC471u);
    JUMPOUT(0x197BF9D38);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v53 + 12))
  {
    v54 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
    goto LABEL_47;
  }
LABEL_118:
  v54 = -1;
LABEL_47:
  if (v52 == -1)
    v52 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  if (v54 == -1)
    v54 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *((_QWORD *)v8 + 4), v52, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v55, v56, v57, v58, v59, v60, v61);
  ++*((_DWORD *)this + 1196);
  v69 = *((unsigned int *)this + 1194);
  if ((_DWORD)v69 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v69, v63, v64, v65, v66, v67, v68);
  }
  v70 = v150;
  __dst = v150;
  v149 = 3;
  if ((_DWORD)v13)
  {
    v150[0] = v13;
    v71 = 1;
    HIDWORD(v149) = 1;
  }
  else
  {
    v71 = 0;
  }
  if (v52 != 1)
  {
    v150[v71++] = v52 | 0x100;
    HIDWORD(v149) = v71;
  }
  if (v54 != 2)
  {
    v150[v71++] = v54 | 0x200;
    HIDWORD(v149) = v71;
    goto LABEL_59;
  }
  if (v71)
  {
    while (1)
    {
LABEL_59:
      v72 = 0;
      v73 = 0;
      v74 = (char *)__dst;
      v75 = v71;
      do
      {
        if ((*((_BYTE *)__dst + v72 + 1) & 0x40) != 0)
        {
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v73 |= 1 << *((_BYTE *)__dst + v72 + 1);
        v72 += 2;
      }
      while (2 * v71 != v72);
      v76 = 0;
      do
      {
        v77 = *((_BYTE *)__dst + v76) & 0x7F;
        if (v77 >= 0x40)
          goto LABEL_136;
        v73 &= ~(1 << v77);
        v76 += 2;
      }
      while (2 * v71 != v76);
      v78 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
      v78.i16[0] = vaddlv_u8(v78);
      v79 = v78.i32[0];
      v80 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v73));
      v80.i16[0] = vaddlv_u8(v80);
      if (!(v80.i32[0] + v79))
      {
        v141 = v70;
        v70 = (_WORD *)v16;
        v90 = *(_BYTE *)__dst;
        v91 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, (char)v91, v64, v65, v66, v67, v68);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v149) - 2);
        v92 = (HIDWORD(v149) - 1);
        v88 = HIDWORD(v149) == 1;
        HIDWORD(v149) = v92;
        v14 = (unint64_t)__dst;
        v62 = (char *)__dst + 2 * v92;
        if (v88)
        {
          v97 = 0;
          v98 = 0;
          v93 = 0;
          v69 = (uint64_t)v62;
        }
        else
        {
          LOBYTE(v71) = v90;
          LODWORD(v74) = v91;
          v75 = 2 * v92;
          v73 = (unint64_t)__dst;
          while (*(unsigned __int8 *)v73 != (_DWORD)v74)
          {
LABEL_137:
            v73 += 2;
            v75 -= 2;
            if (!v75)
              goto LABEL_92;
          }
          *(_BYTE *)v73 = v71;
LABEL_92:
          v93 = 0;
          v94 = v14;
          v69 = (uint64_t)v62;
          v95 = v62;
          do
          {
            if (*(unsigned __int8 *)v14 == *(unsigned __int8 *)(v14 + 1))
            {
              v96 = (char *)v14;
              if (v95 != (char *)__dst + 2 * HIDWORD(v149))
              {
                v140 = v62;
                if (v14 == v69)
                {
                  v96 = v95;
                }
                else
                {
                  v138 = v94 - v69;
                  v139 = v95;
                  memmove(v95, (const void *)v69, v94 - v69);
                  v96 = &v139[v138];
                }
                v62 = v140;
              }
              v69 = v14 + 2;
              ++v93;
              v95 = v96;
            }
            v14 += 2;
            v94 += 2;
          }
          while (v14 < (unint64_t)v62);
          v14 = (unint64_t)__dst;
          v97 = HIDWORD(v149);
          v98 = HIDWORD(v149);
          v62 = v95;
        }
        v99 = v14 + 2 * v97;
        v16 = (unint64_t)v70;
        if (v69 != v99)
        {
          v62 = (char *)memmove(v62, (const void *)v69, v99 - v69);
          v98 = HIDWORD(v149);
        }
        v71 = v98 - v93;
        v70 = v141;
        goto LABEL_85;
      }
      v14 = 0;
      v81 = v71 <= 1uLL ? 1 : v71;
      v82 = 2 * v81;
      while (1)
      {
        v83 = *((unsigned __int8 *)__dst + v14 + 1);
        if ((v83 & 0x7Fu) >= 0x40)
          goto LABEL_136;
        if (((v73 >> (v83 & 0x7F)) & 1) != 0)
          break;
        v14 += 2;
        if (v82 == v14)
          goto LABEL_86;
      }
      v84 = *((unsigned __int8 *)__dst + v14);
      if (v84 != v83)
        break;
LABEL_84:
      v62 = (char *)memmove(&v74[v14], &v74[v14 + 2], 2 * v75 - v14 - 2);
      v71 = HIDWORD(v149) - 1;
LABEL_85:
      HIDWORD(v149) = v71;
LABEL_86:
      if (!v71)
      {
        v100 = __dst;
        if (v70 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v149) = 0;
          WTF::fastFree((unint64_t)v100, (void *)v69, v63, v64, v65, v66, v67, v68);
        }
        goto LABEL_108;
      }
    }
    v85 = (char)v84;
    if ((char)v84 == 63)
    {
      v86 = *((_DWORD *)this + 50);
      v87 = *((_DWORD *)this + 48);
      if ((char)v83 != 31)
      {
        v89 = v83 & 0x1F | 0xD2800000;
        goto LABEL_81;
      }
    }
    else
    {
      v86 = *((_DWORD *)this + 50);
      v87 = *((_DWORD *)this + 48);
      v88 = v83 == 31 || v85 == 31;
      if (!v88)
      {
        v89 = v83 & 0xFFE0FFFF | ((v85 & 0x1F) << 16) | 0xAA0003E0;
LABEL_81:
        if (v86 + 4 > v87)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v69, v63, v64, v65, v66, v67, v68);
          v86 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v86) = v89;
        *((_DWORD *)this + 50) += 4;
        v74 = (char *)__dst;
        v75 = HIDWORD(v149);
        goto LABEL_84;
      }
    }
    v89 = (char)v83 | (32 * v85) | 0x91000000;
    goto LABEL_81;
  }
LABEL_108:
  v101 = (uint64_t)v8;
  LODWORD(v8) = v13;
  v102 = (char *)this + 4776;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationRegExpTest, v63, v64, v65, v66, v67, v68, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v103, v104, v105, v106, v107, v108);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, 0, 0);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, v101, 21, 0, v109, v110, v111);
  --*((_DWORD *)this + 1196);
  if (v142)
  {
    if (v54 > 15)
      v112 = -1;
    else
      v112 = v54;
    --*(_DWORD *)&v102[12 * v112 + 8];
  }
  v21 = v143;
  if (v16)
  {
    if (v52 > 15)
      v113 = -1;
    else
      v113 = v52;
    v49 = &v102[12 * v113];
    goto LABEL_32;
  }
LABEL_33:
  if (v21)
  {
    if ((int)v8 > 15)
      v50 = -1;
    else
      v50 = v8;
    --*((_DWORD *)this + 3 * v50 + 1196);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int *a9@<X8>)
{
  JSC::AssemblerBuffer *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  JSC::AssemblerBuffer *v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  _BYTE v62[6];

  v9 = (JSC::AssemblerBuffer *)a3;
  v10 = (uint64_t)a2;
  v11 = a1;
  v59 = 0;
  if ((_DWORD)a4)
  {
    v61 = a4;
    v13 = 1;
    v59 = 1;
  }
  else
  {
    v13 = 0;
  }
  if ((_DWORD)a5 != 1)
  {
    *(_WORD *)&v62[2 * v13++ - 2] = a5 | 0x100;
    v59 = v13;
  }
  if ((_DWORD)a6 == 2)
  {
    if (!v13)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v62[2 * v13++ - 2] = a6 | 0x200;
    v59 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a1 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v62[v15 - 1] & 0x40) != 0)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v16 |= 1 << v62[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v62[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_70;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v62[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_70;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v62[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v59;
      }
      memmove(&v62[v23 - 2], &v62[v23], 2 * v17 - v23 - 2);
      v13 = v59 - 1;
      goto LABEL_57;
    }
    v33 = v14;
    v34 = HIBYTE(v61);
    v35 = v61;
    JSC::MacroAssemblerARM64::swap(v11, (char)v61, SHIBYTE(v61), a4, a5, a6, a7, a8);
    memmove(&v61, v62, 2 * v59 - 2);
    v36 = v59 - 1;
    v31 = v59 == 1;
    v60 = v36;
    v37 = (unsigned __int8 *)&v61;
    v38 = &v62[2 * v36 - 2];
    if (v31)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a2 = v38;
    }
    else
    {
      v39 = 2 * v36;
      v40 = &v61;
      while (*(unsigned __int8 *)v40 != v34)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_37;
      }
      *(_BYTE *)v40 = v35;
LABEL_37:
      v41 = 0;
      v42 = (char *)&v61;
      a2 = v38;
      v43 = v38;
      do
      {
        if (*v37 == v37[1])
        {
          v44 = v37;
          if (v43 != &v62[2 * v60 - 2])
          {
            v58 = v38;
            if (v37 == a2)
            {
              v44 = v43;
            }
            else
            {
              v56 = v42 - (char *)a2;
              v57 = v43;
              memmove(v43, a2, v42 - (char *)a2);
              v44 = &v57[v56];
            }
            v38 = v58;
          }
          a2 = v37 + 2;
          ++v41;
          v43 = v44;
        }
        v37 += 2;
        v42 += 2;
      }
      while (v37 < v38);
      v45 = v60;
      v46 = v60;
      v38 = v43;
    }
    v47 = &v62[2 * v45 - 2];
    v14 = v33;
    if (a2 != v47)
    {
      memmove(v38, a2, v47 - a2);
      v46 = v60;
    }
    v13 = v46 - v41;
LABEL_57:
    v59 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_62:
  JSC::DFG::SpeculativeJIT::appendCall(v11, v10, a3, a4, a5, a6, a7, a8, a9);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v48, v49, v50, v51, v52, v53);
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 31)
    {
      LODWORD(v10) = -1862270945;
    }
    else if ((_DWORD)v9 == -1)
    {
      LODWORD(v10) = -1442774017;
    }
    else
    {
      LODWORD(v10) = v9 | 0xAA0003E0;
    }
    v55 = *(_DWORD *)(v11 + 200);
    v11 += 200;
    v54 = v55;
    v9 = (JSC::AssemblerBuffer *)(v11 - 144);
    if (v55 + 4 > *(_DWORD *)(v11 - 8))
    {
LABEL_71:
      JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v54 = *(_DWORD *)v11;
    }
    *(_DWORD *)(*(_QWORD *)v9 + v54) = v10;
    *(_DWORD *)v11 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int16 *v35;
  int v36;
  char *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char *v40;
  int64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  _BYTE v58[6];

  v8 = a2;
  v55 = 0;
  if ((_DWORD)a3)
  {
    v57 = a3;
    v10 = 1;
    v55 = 1;
  }
  else
  {
    v10 = 0;
  }
  if (a4 != 1)
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a4 | 0x100;
    v55 = v10;
  }
  if (a5 == 2)
  {
    if (!v10)
      goto LABEL_61;
  }
  else
  {
    *(_WORD *)&v58[2 * v10++ - 2] = a5 | 0x200;
    v55 = v10;
  }
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = v10;
    do
    {
      if ((v58[v11 - 1] & 0x40) != 0)
      {
LABEL_62:
        __break(1u);
        return;
      }
      v12 |= 1 << v58[v11 - 1];
      v11 += 2;
    }
    while (2 * v10 != v11);
    v14 = 0;
    do
    {
      v15 = v58[v14 - 2] & 0x7F;
      if (v15 >= 0x40)
        goto LABEL_62;
      v12 &= ~(1 << v15);
      v14 += 2;
    }
    while (2 * v10 != v14);
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.i32[0];
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v12));
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.i32[0] + v17)
    {
      v19 = 0;
      if (v10 <= 1)
        v20 = 1;
      else
        v20 = v10;
      v21 = 2 * v20;
      while (1)
      {
        v22 = v58[v19 - 1];
        if ((v22 & 0x7Fu) >= 0x40)
          goto LABEL_62;
        if (((v12 >> (v22 & 0x7F)) & 1) != 0)
          break;
        v19 += 2;
        if (v21 == v19)
          goto LABEL_57;
      }
      v23 = v58[v19 - 2];
      if (v23 != v22)
      {
        v24 = (char)v23;
        if ((char)v23 == 63)
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          if (v22 == 31)
            goto LABEL_51;
          v28 = v22 & 0x1F | 0xD2800000;
        }
        else
        {
          v25 = *((_DWORD *)v8 + 50);
          v26 = *((_DWORD *)v8 + 48);
          v27 = (char)v22 == 31 || v24 == 31;
          if (!v27)
          {
            v28 = v22 & 0xFFE0FFFF | ((v24 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v28 = (char)v22 | (32 * v24) | 0x91000000;
        }
LABEL_52:
        if (v25 + 4 > v26)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v25 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v25) = v28;
        *((_DWORD *)v8 + 50) += 4;
        v13 = v55;
      }
      memmove(&v58[v19 - 2], &v58[v19], 2 * v13 - v19 - 2);
      v10 = v55 - 1;
      goto LABEL_56;
    }
    v29 = HIBYTE(v57);
    v30 = v57;
    JSC::MacroAssemblerARM64::swap((uint64_t)v8, (char)v57, SHIBYTE(v57), a4, a5, a6, a7, a8);
    memmove(&v57, v58, 2 * v55 - 2);
    v31 = v55 - 1;
    v27 = v55 == 1;
    v56 = v31;
    v32 = (unsigned __int8 *)&v57;
    v33 = &v58[2 * v31 - 2];
    if (v27)
    {
      v43 = 0;
      v44 = 0;
      v36 = 0;
      a2 = v33;
    }
    else
    {
      v34 = 2 * v31;
      v35 = &v57;
      while (*(unsigned __int8 *)v35 != v29)
      {
        ++v35;
        v34 -= 2;
        if (!v34)
          goto LABEL_36;
      }
      *(_BYTE *)v35 = v30;
LABEL_36:
      v36 = 0;
      v37 = (char *)&v57;
      a2 = v33;
      v38 = v33;
      do
      {
        if (*v32 == v32[1])
        {
          v39 = v32;
          if (v38 != &v58[2 * v56 - 2])
          {
            v54 = v36;
            v52 = v33;
            v53 = v32;
            if (v32 == a2)
            {
              v39 = v38;
            }
            else
            {
              v40 = v37;
              v41 = v37 - (char *)a2;
              v42 = v38;
              memmove(v38, a2, v37 - (char *)a2);
              v37 = v40;
              v39 = &v42[v41];
            }
            v33 = v52;
            v32 = v53;
            v36 = v54;
          }
          a2 = v32 + 2;
          ++v36;
          v38 = v39;
        }
        v32 += 2;
        v37 += 2;
      }
      while (v32 < v33);
      v43 = v56;
      v44 = v56;
      v33 = v38;
    }
    v45 = &v58[2 * v43 - 2];
    if (a2 != v45)
    {
      memmove(v33, a2, v45 - a2);
      v44 = v56;
    }
    v10 = v44 - v36;
LABEL_56:
    v55 = v10;
LABEL_57:
    ;
  }
  while (v10);
LABEL_61:
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationRegExpTestGeneric, a3, a4, a5, a6, a7, a8, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v46, v47, v48, v49, v50, v51);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileStringReplace(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::DFG::Node *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::AssemblerBuffer *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint8x8_t v67;
  __int32 v68;
  uint8x8_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v79;
  char v80;
  char v81;
  uint64_t v82;
  unsigned __int8 *v83;
  JSC::AssemblerBuffer *v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  unsigned __int8 *v88;
  char *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  int v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  JSC::DFG::Node *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint8x8_t v124;
  __int32 v125;
  uint8x8_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v136;
  char v137;
  char v138;
  uint64_t v139;
  unsigned __int8 *v140;
  char *v141;
  uint64_t v142;
  _BYTE *v143;
  int v144;
  unsigned __int8 *v145;
  char *v146;
  unsigned __int8 *v147;
  uint64_t v148;
  int v149;
  char *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *result;
  int v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  int v176;
  char v177;
  BOOL v178;
  char v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unint64_t v200;
  uint64_t v201;
  int v202;
  char v203;
  uint64_t v204;
  _DWORD *v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  JSC::DFG::Node *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint8x8_t v246;
  __int32 v247;
  uint8x8_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  char v282;
  char *v283;
  char v284;
  char v285;
  uint64_t v286;
  unsigned __int8 *v287;
  JSC::AssemblerBuffer *v288;
  uint64_t v289;
  _BYTE *v290;
  unsigned __int8 *v291;
  JSC::AssemblerBuffer *v292;
  unsigned __int8 *v293;
  uint64_t v294;
  int v295;
  char *v296;
  int v297;
  int64_t v298;
  int v299;
  unint64_t v300;
  int64_t v301;
  JSC::AssemblerBuffer *v302;
  JSC::AssemblerBuffer *v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  unint64_t v308;
  int v309;
  JSC::AssemblerBuffer *v310;
  JSC::AssemblerBuffer *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  unint64_t v318;
  void *__dst;
  uint64_t v320;
  _WORD v321[4];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFC000000000000) != 0x54000000000000
    || (v11 = *((_QWORD *)a2 + 4), (v11 & 0xFC000000000000) != 0x40000000000000)
    || (v12 = *((_QWORD *)a2 + 5), (v12 & 0xFC000000000000) != 0x54000000000000))
  {
    v16 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_189;
    v94 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v94 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      goto LABEL_317;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v94 + 12))
      v18 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    else
LABEL_189:
      v18 = 255;
    v95 = *((_QWORD *)a2 + 4);
    if ((v95 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_190;
    v96 = ~*(_DWORD *)((v95 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v96 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFB9ACLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v96 + 12))
      v20 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    else
LABEL_190:
      v20 = -1;
    v97 = *((_QWORD *)a2 + 5);
    v316 = v97 & 0xFF00FFFFFFFFFFFFLL;
    if ((v97 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_191;
    v98 = ~*(_DWORD *)((v97 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v98 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFB9B4);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v98 + 12))
      v99 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v97, a3, a4, a5, a6, a7, a8);
    else
LABEL_191:
      v99 = -1;
    if ((_BYTE)v18 == 0xFF)
      v18 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v20 == -1)
      v20 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v95, a3, a4, a5, a6, a7, a8);
    if (v99 == -1)
      v99 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v97, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    ++*((_DWORD *)this + 1196);
    v106 = *((unsigned int *)this + 1194);
    if ((_DWORD)v106 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v106, (uint64_t)v100, v101, v102, v103, v104, v105);
    }
    v107 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v100, v101, v102, v103, v104, v105);
    v115 = v107;
    v116 = (uint64_t)v108;
    __dst = v321;
    v320 = 3;
    if (v18 == 1)
    {
      v117 = 0;
    }
    else
    {
      v321[0] = v18 | 0x100;
      v117 = 1;
      HIDWORD(v320) = 1;
    }
    if (v20 != 2)
    {
      v321[v117++] = v20 | 0x200;
      HIDWORD(v320) = v117;
    }
    if (v99 == 3)
    {
      if (!v117)
        goto LABEL_157;
    }
    else
    {
      v321[v117++] = v99 | 0x300;
      HIDWORD(v320) = v117;
    }
    v313 = v107;
    while (1)
    {
      v118 = 0;
      v119 = 0;
      v120 = (char *)__dst;
      v121 = v117;
      do
      {
        if ((*((_BYTE *)__dst + v118 + 1) & 0x40) != 0)
          goto LABEL_315;
        v119 |= 1 << *((_BYTE *)__dst + v118 + 1);
        v118 += 2;
      }
      while (2 * v117 != v118);
      v122 = 0;
      do
      {
        v123 = *((_BYTE *)__dst + v122) & 0x7F;
        if (v123 >= 0x40)
          goto LABEL_315;
        v119 &= ~(1 << v123);
        v122 += 2;
      }
      while (2 * v117 != v122);
      v124 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
      v124.i16[0] = vaddlv_u8(v124);
      v125 = v124.i32[0];
      v126 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v119));
      v126.i16[0] = vaddlv_u8(v126);
      if (!(v126.i32[0] + v125))
      {
        v302 = (JSC::AssemblerBuffer *)v116;
        v308 = v16;
        v305 = v18;
        v137 = *(_BYTE *)__dst;
        v138 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v138, v110, v111, v112, v113, v114);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v320) - 2);
        v139 = (HIDWORD(v320) - 1);
        v15 = HIDWORD(v320) == 1;
        HIDWORD(v320) = v139;
        v140 = (unsigned __int8 *)__dst;
        v141 = (char *)__dst + 2 * v139;
        if (v15)
        {
          v148 = 0;
          v149 = 0;
          v144 = 0;
          v108 = (char *)__dst + 2 * v139;
        }
        else
        {
          v142 = 2 * v139;
          v143 = __dst;
          while (*v143 != v138)
          {
            v143 += 2;
            v142 -= 2;
            if (!v142)
              goto LABEL_139;
          }
          *v143 = v137;
LABEL_139:
          v144 = 0;
          v145 = v140;
          v108 = v141;
          v146 = v141;
          do
          {
            if (*v140 == v140[1])
            {
              v147 = v140;
              if (v146 != (char *)__dst + 2 * HIDWORD(v320))
              {
                if (v140 == (unsigned __int8 *)v108)
                {
                  v147 = (unsigned __int8 *)v146;
                }
                else
                {
                  v301 = v145 - (unsigned __int8 *)v108;
                  memmove(v146, v108, v145 - (unsigned __int8 *)v108);
                  v147 = (unsigned __int8 *)&v146[v301];
                }
              }
              v108 = (char *)(v140 + 2);
              ++v144;
              v146 = (char *)v147;
            }
            v140 += 2;
            v145 += 2;
          }
          while (v140 < (unsigned __int8 *)v141);
          v140 = (unsigned __int8 *)__dst;
          v148 = HIDWORD(v320);
          v149 = HIDWORD(v320);
          v141 = v146;
        }
        v150 = (char *)&v140[2 * v148];
        v18 = v305;
        if (v108 != v150)
        {
          memmove(v141, v108, v150 - v108);
          v149 = HIDWORD(v320);
        }
        v117 = v149 - v144;
        v16 = v308;
        v116 = (uint64_t)v302;
        goto LABEL_132;
      }
      v127 = 0;
      v128 = v117 <= 1uLL ? 1 : v117;
      v129 = 2 * v128;
      while (1)
      {
        v130 = *((unsigned __int8 *)__dst + v127 + 1);
        if ((v130 & 0x7Fu) >= 0x40)
          goto LABEL_315;
        if (((v119 >> (v130 & 0x7F)) & 1) != 0)
          break;
        v127 += 2;
        if (v129 == v127)
          goto LABEL_133;
      }
      v131 = *((unsigned __int8 *)__dst + v127);
      if (v131 != v130)
        break;
LABEL_131:
      memmove(&v120[v127], &v120[v127 + 2], 2 * v121 - v127 - 2);
      v117 = HIDWORD(v320) - 1;
LABEL_132:
      HIDWORD(v320) = v117;
LABEL_133:
      if (!v117)
      {
        v151 = __dst;
        v115 = v313;
        if (v321 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v320) = 0;
          WTF::fastFree((unint64_t)v151, v108, v109, v110, v111, v112, v113, v114);
        }
LABEL_157:
        if ((_DWORD)v115 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v116, 0, v110, v111, v112, v113, v114);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v115 << 35) + 0x380000001ALL, 0, v110, v111, v112, v113, v114);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringProtoFuncReplaceGeneric, v153, v154, v155, v156, v157, v158, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v159, v160, v161, v162, v163, v164);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v165, v166, v167, v168, v169, v170);
        v172 = *((_DWORD *)a2 + 12);
        *((_DWORD *)this + 1194) = v172;
        *((_DWORD *)this + 1195) = 4;
        v173 = ~v172;
        if (v173 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BFB9BCLL);
        }
        v174 = (char *)this + 4776;
        v175 = *((_QWORD *)this + 499) + 24 * (int)v173;
        v176 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v175 = a2;
        *(_DWORD *)(v175 + 8) = v176;
        *(_BYTE *)(v175 + 12) = 6;
        *(_DWORD *)(v175 + 13) = 0;
        *(_BYTE *)(v175 + 17) = 0;
        --*((_DWORD *)this + 1196);
        if (v316)
        {
          if (v99 > 15)
            v177 = -1;
          else
            v177 = v99;
          --*(_DWORD *)&v174[12 * v177 + 8];
        }
        if ((v95 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v178 = v20 <= 15;
          goto LABEL_167;
        }
LABEL_171:
        if (!v16)
          return result;
LABEL_172:
        if ((char)v18 > 15)
          v180 = -1;
        else
          v180 = v18;
        --*((_DWORD *)this + 3 * v180 + 1196);
        return result;
      }
    }
    v132 = (char)v131;
    if ((char)v131 == 63)
    {
      v133 = *((_DWORD *)this + 50);
      v134 = *((_DWORD *)this + 48);
      if ((char)v130 != 31)
      {
        v136 = v130 & 0x1F | 0xD2800000;
        goto LABEL_128;
      }
    }
    else
    {
      v133 = *((_DWORD *)this + 50);
      v134 = *((_DWORD *)this + 48);
      if (v130 != 31 && v132 != 31)
      {
        v136 = v130 & 0xFFE0FFFF | ((v132 & 0x1F) << 16) | 0xAA0003E0;
LABEL_128:
        if (v133 + 4 > v134)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v108, v109, v110, v111, v112, v113, v114);
          v133 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v133) = v136;
        *((_DWORD *)this + 50) += 4;
        v120 = (char *)__dst;
        v121 = HIDWORD(v320);
        goto LABEL_131;
      }
    }
    v136 = (char)v130 | (32 * v132) | 0x91000000;
    goto LABEL_128;
  }
  v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
  if (*(unsigned __int16 *)(v13 + 18) > 2u)
    goto LABEL_9;
  v14 = **(_QWORD **)(v13 + 72);
  v15 = v14 && (v14 & 0xFFFE000000000002) == 0;
  if (!v15 || *(_BYTE *)(v14 + 5) != 2)
    goto LABEL_9;
  v204 = *(_QWORD *)(v14 + 8);
  v205 = (_DWORD *)(v14 + 16);
  if ((v204 & 1) == 0)
    v205 = (_DWORD *)(v204 + 4);
  if (*v205)
  {
LABEL_9:
    v16 = v10 & 0xFF00FFFFFFFFFFFFLL;
    if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_213;
    v17 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v17 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFB9CCLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
    {
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
      v11 = *((_QWORD *)a2 + 4);
    }
    else
    {
LABEL_213:
      v18 = 255;
    }
    if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_214;
    v19 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFB9D4);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
      v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    else
LABEL_214:
      v20 = -1;
    v21 = *((_QWORD *)a2 + 5);
    v312 = v21 & 0xFF00FFFFFFFFFFFFLL;
    v315 = v11 & 0xFF00FFFFFFFFFFFFLL;
    if ((v21 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_215;
    v22 = ~*(_DWORD *)((v21 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v22 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFB9DCLL);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v22 + 12))
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    else
LABEL_215:
      v23 = -1;
    if ((_BYTE)v18 == 0xFF)
      v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
    if (v20 == -1)
      v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
    if (v23 == -1)
      v23 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), (char)v18, a4, a5, a6, a7, a8);
    v24 = v20;
    JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *((_QWORD *)a2 + 4), v20, v25, v26, v27, v28, v29);
    v30 = v23;
    JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 5), v23, v31, v32, v33, v34, v35);
    JSC::DFG::SpeculativeJIT::flushRegisters(this, v36, v37, v38, v39, v40, v41, v42);
    ++*((_DWORD *)this + 1196);
    v49 = *((unsigned int *)this + 1194);
    if ((_DWORD)v49 != 0x3FFFFFFF)
    {
      *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v49, (uint64_t)v43, v44, v45, v46, v47, v48);
    }
    v50 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v43, v44, v45, v46, v47, v48);
    v58 = v50;
    v59 = (uint64_t)v51;
    __dst = v321;
    v320 = 3;
    if (v18 == 1)
    {
      v60 = 0;
    }
    else
    {
      v321[0] = v18 | 0x100;
      v60 = 1;
      HIDWORD(v320) = 1;
    }
    if (v20 != 2)
    {
      v321[v60++] = v20 | 0x200;
      HIDWORD(v320) = v60;
    }
    if (v23 == 3)
    {
      if (!v60)
        goto LABEL_179;
    }
    else
    {
      v321[v60++] = v23 | 0x300;
      HIDWORD(v320) = v60;
    }
    v307 = v50;
    v310 = v51;
    while (1)
    {
      v61 = 0;
      v62 = 0;
      v63 = (char *)__dst;
      v64 = v60;
      do
      {
        if ((*((_BYTE *)__dst + v61 + 1) & 0x40) != 0)
          goto LABEL_315;
        v62 |= 1 << *((_BYTE *)__dst + v61 + 1);
        v61 += 2;
      }
      while (2 * v60 != v61);
      v65 = 0;
      do
      {
        v66 = *((_BYTE *)__dst + v65) & 0x7F;
        if (v66 >= 0x40)
          goto LABEL_315;
        v62 &= ~(1 << v66);
        v65 += 2;
      }
      while (2 * v60 != v65);
      v67 = (uint8x8_t)vcnt_s8((int8x8_t)v62);
      v67.i16[0] = vaddlv_u8(v67);
      v68 = v67.i32[0];
      v69 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v62));
      v69.i16[0] = vaddlv_u8(v69);
      if (!(v69.i32[0] + v68))
      {
        v299 = v24;
        v300 = v16;
        v304 = v18;
        v80 = *(_BYTE *)__dst;
        v81 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v81, v53, v54, v55, v56, v57);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v320) - 2);
        v82 = (HIDWORD(v320) - 1);
        v15 = HIDWORD(v320) == 1;
        HIDWORD(v320) = v82;
        v83 = (unsigned __int8 *)__dst;
        v84 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v82);
        if (v15)
        {
          v91 = 0;
          v92 = 0;
          v87 = 0;
          v51 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v82);
        }
        else
        {
          v85 = 2 * v82;
          v86 = __dst;
          while (*v86 != v81)
          {
            v86 += 2;
            v85 -= 2;
            if (!v85)
              goto LABEL_69;
          }
          *v86 = v80;
LABEL_69:
          v87 = 0;
          v88 = v83;
          v51 = v84;
          v89 = (char *)v84;
          do
          {
            if (*v83 == v83[1])
            {
              v90 = v83;
              if (v89 != (char *)__dst + 2 * HIDWORD(v320))
              {
                if (v83 == (unsigned __int8 *)v51)
                {
                  v90 = (unsigned __int8 *)v89;
                }
                else
                {
                  v298 = v88 - (unsigned __int8 *)v51;
                  memmove(v89, v51, v88 - (unsigned __int8 *)v51);
                  v90 = (unsigned __int8 *)&v89[v298];
                }
              }
              v51 = (JSC::AssemblerBuffer *)(v83 + 2);
              ++v87;
              v89 = (char *)v90;
            }
            v83 += 2;
            v88 += 2;
          }
          while (v83 < (unsigned __int8 *)v84);
          v83 = (unsigned __int8 *)__dst;
          v91 = HIDWORD(v320);
          v92 = HIDWORD(v320);
          v84 = (JSC::AssemblerBuffer *)v89;
        }
        v93 = (char *)&v83[2 * v91];
        v18 = v304;
        if (v51 != (JSC::AssemblerBuffer *)v93)
        {
          memmove(v84, v51, v93 - (char *)v51);
          v92 = HIDWORD(v320);
        }
        v60 = v92 - v87;
        v16 = v300;
        v24 = v299;
        goto LABEL_62;
      }
      v70 = 0;
      v71 = v60 <= 1uLL ? 1 : v60;
      v72 = 2 * v71;
      while (1)
      {
        v73 = *((unsigned __int8 *)__dst + v70 + 1);
        if ((v73 & 0x7Fu) >= 0x40)
          goto LABEL_315;
        if (((v62 >> (v73 & 0x7F)) & 1) != 0)
          break;
        v70 += 2;
        if (v72 == v70)
          goto LABEL_63;
      }
      v74 = *((unsigned __int8 *)__dst + v70);
      if (v74 != v73)
        break;
LABEL_61:
      memmove(&v63[v70], &v63[v70 + 2], 2 * v64 - v70 - 2);
      v60 = HIDWORD(v320) - 1;
LABEL_62:
      HIDWORD(v320) = v60;
LABEL_63:
      if (!v60)
      {
        v152 = __dst;
        v30 = v23;
        v58 = v307;
        v59 = (uint64_t)v310;
        if (v321 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v320) = 0;
          WTF::fastFree((unint64_t)v152, v51, v52, v53, v54, v55, v56, v57);
        }
LABEL_179:
        if ((_DWORD)v58 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v59, 0, v53, v54, v55, v56, v57);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)this, (v58 << 35) + 0x380000001ALL, 0, v53, v54, v55, v56, v57);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringProtoFuncReplaceRegExpString, v181, v182, v183, v184, v185, v186, (int *)&__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v187, v188, v189, v190, v191, v192);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v193, v194, v195, v196, v197, v198);
        v199 = *((_DWORD *)a2 + 12);
        *((_DWORD *)this + 1194) = v199;
        *((_DWORD *)this + 1195) = 4;
        v200 = ~v199;
        if (v200 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197BFB9C4);
        }
        v174 = (char *)this + 4776;
        v201 = *((_QWORD *)this + 499) + 24 * (int)v200;
        v202 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v201 = a2;
        *(_DWORD *)(v201 + 8) = v202;
        *(_BYTE *)(v201 + 12) = 6;
        *(_DWORD *)(v201 + 13) = 0;
        *(_BYTE *)(v201 + 17) = 0;
        --*((_DWORD *)this + 1196);
        if (v312)
        {
          if (v30 > 15)
            v203 = -1;
          else
            v203 = v23;
          --*(_DWORD *)&v174[12 * v203 + 8];
        }
        if (v315)
        {
          v178 = v24 <= 15;
LABEL_167:
          if (v178)
            v179 = v20;
          else
            v179 = -1;
          --*(_DWORD *)&v174[12 * v179 + 8];
        }
        goto LABEL_171;
      }
    }
    v75 = (char)v74;
    if ((char)v74 == 63)
    {
      v76 = *((_DWORD *)this + 50);
      v77 = *((_DWORD *)this + 48);
      if ((char)v73 != 31)
      {
        v79 = v73 & 0x1F | 0xD2800000;
        goto LABEL_58;
      }
    }
    else
    {
      v76 = *((_DWORD *)this + 50);
      v77 = *((_DWORD *)this + 48);
      if (v73 != 31 && v75 != 31)
      {
        v79 = v73 & 0xFFE0FFFF | ((v75 & 0x1F) << 16) | 0xAA0003E0;
LABEL_58:
        if (v76 + 4 > v77)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v51, v52, v53, v54, v55, v56, v57);
          v76 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v76) = v79;
        *((_DWORD *)this + 50) += 4;
        v63 = (char *)__dst;
        v64 = HIDWORD(v320);
        goto LABEL_61;
      }
    }
    v79 = (char)v73 | (32 * v75) | 0x91000000;
    goto LABEL_58;
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_260;
  v206 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v206 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFB9E4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v206 + 12))
  {
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
    v11 = *((_QWORD *)a2 + 4);
  }
  else
  {
LABEL_260:
    v18 = 255;
  }
  v207 = v11 & 0xFF00FFFFFFFFFFFFLL;
  v318 = v10 & 0xFF00FFFFFFFFFFFFLL;
  if ((v11 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_261;
  v208 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v208 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_315:
    __break(1u);
    goto LABEL_316;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v208 + 12))
    v209 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  else
LABEL_261:
    v209 = -1;
  if ((_BYTE)v18 == 0xFF)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v209 == -1)
    v209 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v11, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), (char)v18, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *((_QWORD *)a2 + 4), v209, v210, v211, v212, v213, v214);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v215, v216, v217, v218, v219, v220, v221);
  ++*((_DWORD *)this + 1196);
  v228 = *((unsigned int *)this + 1194);
  if ((_DWORD)v228 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v228, (uint64_t)v222, v223, v224, v225, v226, v227);
  }
  v229 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v222, v223, v224, v225, v226, v227);
  v237 = v229;
  v238 = (uint64_t)v230;
  __dst = v321;
  LODWORD(v320) = 2;
  if (v18 == 1)
  {
    if (v209 == 2)
      goto LABEL_250;
    v314 = v229;
    v317 = v230;
    v239 = 0;
  }
  else
  {
    v314 = v229;
    v317 = v230;
    v321[0] = v18 | 0x100;
    v239 = 1;
    HIDWORD(v320) = 1;
    if (v209 == 2)
      goto LABEL_219;
  }
  v321[v239++] = v209 | 0x200;
  HIDWORD(v320) = v239;
  do
  {
LABEL_219:
    v240 = 0;
    v241 = 0;
    v242 = (char *)__dst;
    v243 = v239;
    do
    {
      if ((*((_BYTE *)__dst + v240 + 1) & 0x40) != 0)
        goto LABEL_315;
      v241 |= 1 << *((_BYTE *)__dst + v240 + 1);
      v240 += 2;
    }
    while (2 * v239 != v240);
    v244 = 0;
    do
    {
      v245 = *((_BYTE *)__dst + v244) & 0x7F;
      if (v245 >= 0x40)
        goto LABEL_315;
      v241 &= ~(1 << v245);
      v244 += 2;
    }
    while (2 * v239 != v244);
    v246 = (uint8x8_t)vcnt_s8((int8x8_t)v241);
    v246.i16[0] = vaddlv_u8(v246);
    v247 = v246.i32[0];
    v248 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v241));
    v248.i16[0] = vaddlv_u8(v248);
    if (v248.i32[0] + v247)
    {
      v249 = 0;
      if (v239 <= 1uLL)
        v250 = 1;
      else
        v250 = v239;
      v251 = 2 * v250;
      while (1)
      {
        v252 = *((unsigned __int8 *)__dst + v249 + 1);
        if ((v252 & 0x7Fu) >= 0x40)
          goto LABEL_315;
        if (((v241 >> (v252 & 0x7F)) & 1) != 0)
          break;
        v249 += 2;
        if (v251 == v249)
          goto LABEL_244;
      }
      v253 = *((unsigned __int8 *)__dst + v249);
      if (v253 == v252)
        goto LABEL_242;
      v254 = (char)v253;
      if ((char)v253 == 63)
      {
        v255 = *((_DWORD *)this + 50);
        v256 = *((_DWORD *)this + 48);
        if ((char)v252 != 31)
        {
          v258 = v252 & 0x1F | 0xD2800000;
          goto LABEL_239;
        }
      }
      else
      {
        v255 = *((_DWORD *)this + 50);
        v256 = *((_DWORD *)this + 48);
        if (v252 != 31 && v254 != 31)
        {
          v258 = v252 & 0xFFE0FFFF | ((v254 & 0x1F) << 16) | 0xAA0003E0;
LABEL_239:
          if (v255 + 4 > v256)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v230, v231, v232, v233, v234, v235, v236);
            v255 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v255) = v258;
          *((_DWORD *)this + 50) += 4;
          v242 = (char *)__dst;
          v243 = HIDWORD(v320);
LABEL_242:
          memmove(&v242[v249], &v242[v249 + 2], 2 * v243 - v249 - 2);
          v239 = HIDWORD(v320) - 1;
          goto LABEL_243;
        }
      }
      v258 = (char)v252 | (32 * v254) | 0x91000000;
      goto LABEL_239;
    }
    v306 = v18;
    v284 = *(_BYTE *)__dst;
    v285 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v285, v232, v233, v234, v235, v236);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v320) - 2);
    v286 = (HIDWORD(v320) - 1);
    v15 = HIDWORD(v320) == 1;
    HIDWORD(v320) = v286;
    v287 = (unsigned __int8 *)__dst;
    v288 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v286);
    if (v15)
    {
      v294 = 0;
      v295 = 0;
      v230 = (char *)__dst + 2 * v286;
    }
    else
    {
      v289 = 2 * v286;
      v290 = __dst;
      while (*v290 != v285)
      {
        v290 += 2;
        v289 -= 2;
        if (!v289)
          goto LABEL_266;
      }
      *v290 = v284;
LABEL_266:
      LODWORD(v286) = 0;
      v291 = v287;
      v230 = (char *)v288;
      v292 = v288;
      do
      {
        if (*v287 == v287[1])
        {
          v293 = v287;
          if (v292 != (JSC::AssemblerBuffer *)((char *)__dst + 2 * HIDWORD(v320)))
          {
            v309 = v286;
            v311 = v288;
            if (v287 == (unsigned __int8 *)v230)
            {
              v293 = (unsigned __int8 *)v292;
            }
            else
            {
              v303 = (JSC::AssemblerBuffer *)(v291 - (unsigned __int8 *)v230);
              memmove(v292, v230, v291 - (unsigned __int8 *)v230);
              v293 = (unsigned __int8 *)v303 + (_QWORD)v292;
            }
            v288 = v311;
            LODWORD(v286) = v309;
          }
          v230 = (char *)(v287 + 2);
          LODWORD(v286) = v286 + 1;
          v292 = (JSC::AssemblerBuffer *)v293;
        }
        v287 += 2;
        v291 += 2;
      }
      while (v287 < (unsigned __int8 *)v288);
      v287 = (unsigned __int8 *)__dst;
      v294 = HIDWORD(v320);
      v295 = HIDWORD(v320);
      v288 = v292;
    }
    v296 = (char *)&v287[2 * v294];
    v18 = v306;
    if (v230 != v296)
    {
      v297 = v286;
      memmove(v288, v230, v296 - v230);
      LODWORD(v286) = v297;
      v295 = HIDWORD(v320);
    }
    v239 = v295 - v286;
LABEL_243:
    HIDWORD(v320) = v239;
LABEL_244:
    ;
  }
  while (v239);
  v259 = __dst;
  v237 = v314;
  v238 = (uint64_t)v317;
  if (v321 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v320) = 0;
    WTF::fastFree((unint64_t)v259, v230, v231, v232, v233, v234, v235, v236);
  }
LABEL_250:
  if ((_DWORD)v237 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v238, 0, v232, v233, v234, v235, v236);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v237 << 35) + 0x380000001ALL, 0, v232, v233, v234, v235, v236);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringProtoFuncReplaceRegExpEmptyStr, v260, v261, v262, v263, v264, v265, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v266, v267, v268, v269, v270, v271);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v272, v273, v274, v275, v276, v277);
  v278 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v278;
  *((_DWORD *)this + 1195) = 4;
  v279 = ~v278;
  if (v279 >= *((unsigned int *)this + 1001))
  {
LABEL_316:
    __break(0xC471u);
LABEL_317:
    JUMPOUT(0x197BFB9A4);
  }
  v280 = *((_QWORD *)this + 499) + 24 * (int)v279;
  v281 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v280 = a2;
  *(_DWORD *)(v280 + 8) = v281;
  *(_BYTE *)(v280 + 12) = 6;
  *(_DWORD *)(v280 + 13) = 0;
  *(_BYTE *)(v280 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v207)
  {
    if (v209 > 15)
      v282 = -1;
    else
      v282 = v209;
    v283 = (char *)this + 12 * v282 + 4776;
    --*((_DWORD *)v283 + 2);
  }
  if (v318)
    goto LABEL_172;
  return result;
}

void JSC::DFG::SpeculativeJIT::compileStringReplaceString(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Graph *v10;
  unsigned int v11;
  WTF *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::DFG::Node *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  char v67;
  char v68;
  char v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::DFG::Node *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::ARM64LogicalImmediate *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  JSC::ARM64LogicalImmediate *v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint8x8_t v120;
  __int32 v121;
  uint8x8_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v131;
  char v132;
  unsigned __int8 v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  int v140;
  JSC::ARM64LogicalImmediate *v141;
  __int128 *v142;
  __int128 *v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  int v183;
  char v184;
  char v185;
  char v186;
  double v187;
  double v188;
  float v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  JSC::DFG::Node *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  JSC::DFG::Node *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  int v287;
  int v288;
  unint64_t v289;
  JSC::ARM64LogicalImmediate *v290;
  int v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  unint64_t v297;
  unsigned __int8 v298;
  uint64_t v299;
  unint64_t v300;
  unsigned __int8 v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  __int128 v304;
  _WORD v305[8];

  if ((*((_QWORD *)a2 + 5) & 0xFC000000000000) == 0x54000000000000)
  {
    v10 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
    v11 = *(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v11 <= 2)
      goto LABEL_165;
    if (*(unsigned __int16 *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
    {
      if (v11 == 182)
      {
LABEL_165:
        v142 = *(__int128 **)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
LABEL_166:
        DWORD2(v304) = 0;
        *(_QWORD *)&v304 = v142;
LABEL_167:
        JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v304, v10, a4, a5, a6, a7, a8, (int **)&v303);
        v10 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
        if (v303)
        {
          v12 = JSC::DFG::Graph::tryAddStringSearchTable8(*((JSC::DFG::Graph **)this + 495), &v303, a3, a4, a5, a6, a7, a8);
          v10 = (JSC::DFG::Graph *)*((_QWORD *)this + 495);
        }
        else
        {
          v12 = 0;
        }
LABEL_5:
        v13 = *(unsigned __int16 *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v13 <= 2)
          goto LABEL_169;
        if (*(unsigned __int16 *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x12) > 0xB5u)
        {
          if (v13 == 182)
          {
LABEL_169:
            v143 = *(__int128 **)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
LABEL_170:
            DWORD2(v304) = 0;
            *(_QWORD *)&v304 = v143;
LABEL_171:
            JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v304, v10, a4, a5, a6, a7, a8, (int **)&v302);
            if (v302)
            {
              if (!*((_DWORD *)v302 + 1))
              {
                JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v304, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
                JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v299, (uint64_t)this, *((_QWORD *)a2 + 4), v190, v191, v192, v193, v194);
                v201 = v305[0];
                if (LOBYTE(v305[0]) == 255)
                {
                  v201 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v304, *((unint64_t *)&v304 + 1), v195, v196, v197, v198, v199, v200);
                  LOBYTE(v305[0]) = v201;
                }
                v202 = v301;
                if (v301 == 255)
                {
                  v202 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v299, v300, v195, v196, v197, v198, v199, v200);
                  v301 = v202;
                }
                v203 = v201;
                JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v203, v196, v197, v198, v199, v200);
                v204 = (char)v202;
                JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v204, v205, v206, v207, v208, v209);
                JSC::DFG::SpeculativeJIT::flushRegisters(this, v210, v211, v212, v213, v214, v215, v216);
                ++*((_DWORD *)this + 1196);
                v223 = *((unsigned int *)this + 1194);
                if ((_DWORD)v223 != 0x3FFFFFFF)
                {
                  *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
                  JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v223, (uint64_t)v217, v218, v219, v220, v221, v222);
                }
                v225 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v217, v218, v219, v220, v221, v222);
                if (v12)
                  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v296, (int *)this, v225, v224, v203, v204, (uint64_t)v12, v226);
                else
                  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v296, (int *)this, (uint64_t)operationStringReplaceStringEmptyString, v225, v224, v203, v204, v226);
                JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v227, v228, v229, v230);
                --*((_DWORD *)this + 1196);
LABEL_182:
                if ((v300 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v231 = (char)v301;
                  if ((char)v301 > 15)
                    v231 = -1;
                  --*(_DWORD *)(v299 + 12 * v231 + 4784);
                }
                if ((*((_QWORD *)&v304 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v232 = SLOBYTE(v305[0]);
                  if (SLOBYTE(v305[0]) > 15)
                    v232 = -1;
                  --*(_DWORD *)(v304 + 12 * v232 + 4784);
                }
LABEL_46:
                v70 = v302;
                v302 = 0;
                if (v70)
                {
                  if (*(_DWORD *)v70 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v70, v55, v56, v57, v58, v59, v60, v61);
                    WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
                  }
                  else
                  {
                    *(_DWORD *)v70 -= 2;
                  }
                }
                v71 = v303;
                v303 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v71, v55, v56, v57, v58, v59, v60, v61);
                    WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
                  }
                  else
                  {
                    *(_DWORD *)v71 -= 2;
                  }
                }
                return;
              }
              if (WTF::String::find((uint64_t)&v302, 0x24u, 0, v187, v188, v189) == -1)
              {
                JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v304, (uint64_t)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
                JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v299, (uint64_t)this, *((_QWORD *)a2 + 4), v233, v234, v235, v236, v237);
                JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v296, (uint64_t)this, *((_QWORD *)a2 + 5), v238, v239, v240, v241, v242);
                v249 = v305[0];
                if (LOBYTE(v305[0]) == 255)
                {
                  v249 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v304, *((unint64_t *)&v304 + 1), v243, v244, v245, v246, v247, v248);
                  LOBYTE(v305[0]) = v249;
                }
                v250 = v301;
                if (v301 == 255)
                {
                  v250 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v299, v300, v243, v244, v245, v246, v247, v248);
                  v301 = v250;
                }
                v251 = v298;
                if (v298 == 255)
                {
                  v251 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v296, v297, v243, v244, v245, v246, v247, v248);
                  v298 = v251;
                }
                v252 = v249;
                JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v252, v244, v245, v246, v247, v248);
                v253 = (char)v250;
                JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v253, v254, v255, v256, v257, v258);
                v259 = (char)v251;
                JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 5), v259, v260, v261, v262, v263, v264);
                JSC::DFG::SpeculativeJIT::flushRegisters(this, v265, v266, v267, v268, v269, v270, v271);
                ++*((_DWORD *)this + 1196);
                v278 = *((unsigned int *)this + 1194);
                if ((_DWORD)v278 != 0x3FFFFFFF)
                {
                  *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
                  JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v278, (uint64_t)v272, v273, v274, v275, v276, v277);
                }
                v280 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v272, v273, v274, v275, v276, v277);
                if (v12)
                  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(&v295, (unsigned __int8 *)this, (uint64_t)operationStringReplaceStringStringWithoutSubstitutionWithTable8, v280, v279, v252, v253, v259, v12);
                else
                  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v295, (unsigned __int8 *)this, (uint64_t)operationStringReplaceStringStringWithoutSubstitution, v280, v279, v252, v253, v259);
                JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, 0, a2, 0, v281, v282, v283, v284);
                --*((_DWORD *)this + 1196);
                if ((v297 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v285 = (char)v298;
                  if ((char)v298 > 15)
                    v285 = -1;
                  --*(_DWORD *)(v296 + 12 * v285 + 4784);
                }
                goto LABEL_182;
              }
            }
LABEL_8:
            v14 = *((_QWORD *)a2 + 3);
            if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_190;
            v15 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v15 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BFC96CLL);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v15 + 12))
              v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), (uint64_t)a3, a4, a5, a6, a7, a8);
            else
LABEL_190:
              v16 = -1;
            v17 = *((_QWORD *)a2 + 4);
            if ((v17 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_191;
            v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v18 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BFC974);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v18 + 12))
              v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
LABEL_191:
              v19 = -1;
            v20 = *((_QWORD *)a2 + 5);
            if ((v20 & 0xFF00FFFFFFFFFFFFLL) == 0)
              goto LABEL_192;
            v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v21 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BFC97CLL);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
              v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
LABEL_192:
              v22 = -1;
            if (v16 == -1)
              v16 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v19 == -1)
              v19 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v22 == -1)
              v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v20, (uint64_t)a3, a4, a5, a6, a7, a8);
            JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v16, a4, a5, a6, a7, a8);
            JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v19, v23, v24, v25, v26, v27);
            JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 5), v22, v28, v29, v30, v31, v32);
            JSC::DFG::SpeculativeJIT::flushRegisters(this, v33, v34, v35, v36, v37, v38, v39);
            ++*((_DWORD *)this + 1196);
            v46 = *((unsigned int *)this + 1194);
            if ((_DWORD)v46 != 0x3FFFFFFF)
            {
              *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
              JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v46, (uint64_t)v40, v41, v42, v43, v44, v45);
            }
            v48 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v40, v41, v42, v43, v44, v45);
            if (v12)
              JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v304, (unsigned __int8 *)this, (uint64_t)operationStringReplaceStringStringWithTable8, v48, v47, v16, v19, v22, v12);
            else
              JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v304, (unsigned __int8 *)this, (uint64_t)operationStringReplaceStringString, v48, v47, v16, v19, v22);
            JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v49, v50, v51, v52, v53, v54);
            v62 = *((_DWORD *)a2 + 12);
            *((_DWORD *)this + 1194) = v62;
            *((_DWORD *)this + 1195) = 4;
            v63 = ~v62;
            if (v63 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BFC964);
            }
            v64 = (char *)this + 4776;
            v65 = *((_QWORD *)this + 499) + 24 * (int)v63;
            v66 = *((_DWORD *)a2 + 13);
            *(_QWORD *)v65 = a2;
            *(_DWORD *)(v65 + 8) = v66;
            *(_BYTE *)(v65 + 12) = 6;
            *(_DWORD *)(v65 + 13) = 0;
            *(_BYTE *)(v65 + 17) = 0;
            --*((_DWORD *)this + 1196);
            if ((v20 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if (v22 > 15)
                v67 = -1;
              else
                v67 = v22;
              --*(_DWORD *)&v64[12 * v67 + 8];
            }
            if ((v17 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if (v19 > 15)
                v68 = -1;
              else
                v68 = v19;
              --*(_DWORD *)&v64[12 * v68 + 8];
            }
            if ((v14 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if (v16 > 15)
                v69 = -1;
              else
                v69 = v16;
              --*(_DWORD *)&v64[12 * v69 + 8];
            }
            goto LABEL_46;
          }
          if (v13 == 355 || v13 == 348)
          {
            v143 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
            }
            goto LABEL_170;
          }
        }
        else if (v13 == 3)
        {
          v304 = *(_OWORD *)*(_QWORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
          goto LABEL_171;
        }
        v302 = 0;
        goto LABEL_8;
      }
      if (v11 == 355 || v11 == 348)
      {
        v142 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
        {
          JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
          LODWORD(qword_1EE342DB8) = 0;
        }
        goto LABEL_166;
      }
    }
    else if (v11 == 3)
    {
      v304 = *(_OWORD *)*(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
      goto LABEL_167;
    }
    v12 = 0;
    v303 = 0;
    goto LABEL_5;
  }
  v72 = *((_QWORD *)a2 + 3);
  v73 = v72 & 0xFF00FFFFFFFFFFFFLL;
  if ((v72 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_194;
  v74 = ~*(_DWORD *)((v72 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v74 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFC994);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v74 + 12))
    v75 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_194:
    v75 = -1;
  v76 = *((_QWORD *)a2 + 4);
  if ((v76 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_195;
  v77 = ~*(_DWORD *)((v76 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v77 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFC99CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v77 + 12))
    v78 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_195:
    v78 = -1;
  v79 = *((_QWORD *)a2 + 5);
  v293 = v79 & 0xFF00FFFFFFFFFFFFLL;
  v294 = v76 & 0xFF00FFFFFFFFFFFFLL;
  if ((v79 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_193;
  v80 = ~*(_DWORD *)((v79 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v80 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFC984);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v80 + 12))
    v81 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v79, (uint64_t)a3, a4, a5, a6, a7, a8);
  else
LABEL_193:
    v81 = -1;
  if (v75 == -1)
    v75 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v72, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v78 == -1)
    v78 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v76, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v81 == -1)
    v81 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v79, (uint64_t)a3, a4, a5, a6, a7, a8);
  v82 = v75;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 3), v75, a4, a5, a6, a7, a8);
  v83 = v78;
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v83, v84, v85, v86, v87, v88);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v89, v90, v91, v92, v93, v94, v95);
  ++*((_DWORD *)this + 1196);
  v102 = *((unsigned int *)this + 1194);
  if ((_DWORD)v102 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v102, (uint64_t)v96, v97, v98, v99, v100, v101);
  }
  v103 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v96, v97, v98, v99, v100, v101);
  v111 = (uint64_t)v104;
  v112 = (JSC::ARM64LogicalImmediate *)v305;
  *(_QWORD *)&v304 = v305;
  *((_QWORD *)&v304 + 1) = 3;
  if (v75 == 1)
  {
    v113 = 0;
  }
  else
  {
    v305[0] = v75 | 0x100;
    v113 = 1;
    HIDWORD(v304) = 1;
  }
  v292 = v103;
  if (v78 != 2)
  {
    v305[v113++] = v78 | 0x200;
    HIDWORD(v304) = v113;
  }
  if (v81 == 3)
  {
    if (!v113)
      goto LABEL_147;
  }
  else
  {
    v305[v113++] = v81 | 0x300;
    HIDWORD(v304) = v113;
  }
  v291 = v83;
  v290 = v104;
  do
  {
    v114 = 0;
    v115 = 0;
    v116 = v304;
    v117 = v113;
    do
    {
      if ((*(_BYTE *)(v304 + v114 + 1) & 0x40) != 0)
      {
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      v115 |= 1 << *(_BYTE *)(v304 + v114 + 1);
      v114 += 2;
    }
    while (2 * v113 != v114);
    v118 = 0;
    do
    {
      v119 = *(_BYTE *)(v304 + v118) & 0x7F;
      if (v119 >= 0x40)
        goto LABEL_212;
      v115 &= ~(1 << v119);
      v118 += 2;
    }
    while (2 * v113 != v118);
    v120 = (uint8x8_t)vcnt_s8((int8x8_t)v115);
    v120.i16[0] = vaddlv_u8(v120);
    v121 = v120.i32[0];
    v122 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v115));
    v122.i16[0] = vaddlv_u8(v122);
    if (v122.i32[0] + v121)
    {
      v83 = 0;
      if (v113 <= 1uLL)
        v123 = 1;
      else
        v123 = v113;
      v124 = 2 * v123;
      while (1)
      {
        v125 = *(unsigned __int8 *)(v304 + v83 + 1);
        if ((v125 & 0x7Fu) >= 0x40)
          goto LABEL_212;
        if (((v115 >> (v125 & 0x7F)) & 1) != 0)
          break;
        v83 += 2;
        if (v124 == v83)
          goto LABEL_114;
      }
      v126 = *(unsigned __int8 *)(v304 + v83);
      if (v126 == v125)
        goto LABEL_112;
      v127 = (char)v126;
      if ((char)v126 == 63)
      {
        v128 = *((_DWORD *)this + 50);
        v129 = *((_DWORD *)this + 48);
        if ((char)v125 != 31)
        {
          v131 = v125 & 0x1F | 0xD2800000;
          goto LABEL_109;
        }
      }
      else
      {
        v128 = *((_DWORD *)this + 50);
        v129 = *((_DWORD *)this + 48);
        if (v125 != 31 && v127 != 31)
        {
          v131 = v125 & 0xFFE0FFFF | ((v127 & 0x1F) << 16) | 0xAA0003E0;
LABEL_109:
          if (v128 + 4 > v129)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v104, v105, v106, v107, v108, v109, v110);
            v128 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v128) = v131;
          *((_DWORD *)this + 50) += 4;
          v116 = v304;
          v117 = HIDWORD(v304);
          v112 = (JSC::ARM64LogicalImmediate *)v305;
LABEL_112:
          memmove((void *)(v116 + v83), (const void *)(v116 + v83 + 2), 2 * v117 - v83 - 2);
          v113 = HIDWORD(v304) - 1;
          goto LABEL_113;
        }
      }
      v131 = (char)v125 | (32 * v127) | 0x91000000;
      goto LABEL_109;
    }
    v288 = v82;
    v289 = v73;
    v132 = *(_BYTE *)v304;
    v133 = *(_BYTE *)(v304 + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)v304, (char)v133, v106, v107, v108, v109, v110);
    memmove((void *)v304, (const void *)(v304 + 2), 2 * HIDWORD(v304) - 2);
    v134 = HIDWORD(v304);
    v135 = (HIDWORD(v304) - 1);
    HIDWORD(v304) = v135;
    v83 = v304;
    v112 = (JSC::ARM64LogicalImmediate *)(v304 + 2 * v135);
    if (v134 == 1)
    {
      v139 = 0;
      v140 = 0;
      v104 = (JSC::ARM64LogicalImmediate *)(v304 + 2 * v135);
    }
    else
    {
      LOBYTE(v113) = v132;
      LODWORD(v116) = v133;
      v117 = 2 * v135;
      v115 = v304;
      while (*(unsigned __int8 *)v115 != (_DWORD)v116)
      {
LABEL_213:
        v115 += 2;
        v117 -= 2;
        if (!v117)
          goto LABEL_120;
      }
      *(_BYTE *)v115 = v113;
LABEL_120:
      v135 = 0;
      v136 = v83;
      v104 = v112;
      v137 = (char *)v112;
      do
      {
        if (*(unsigned __int8 *)v83 == *(unsigned __int8 *)(v83 + 1))
        {
          v138 = (char *)v83;
          if (v137 != (char *)(v304 + 2 * HIDWORD(v304)))
          {
            v287 = v135;
            if ((JSC::ARM64LogicalImmediate *)v83 == v104)
            {
              v138 = v137;
            }
            else
            {
              v286 = v136 - (_QWORD)v104;
              memmove(v137, v104, v136 - (_QWORD)v104);
              v138 = &v137[v286];
            }
            LODWORD(v135) = v287;
          }
          v104 = (JSC::ARM64LogicalImmediate *)(v83 + 2);
          v135 = (v135 + 1);
          v137 = v138;
        }
        v83 += 2;
        v136 += 2;
      }
      while (v83 < (unint64_t)v112);
      v83 = v304;
      v139 = HIDWORD(v304);
      v140 = HIDWORD(v304);
      v112 = (JSC::ARM64LogicalImmediate *)v137;
    }
    v141 = (JSC::ARM64LogicalImmediate *)(v83 + 2 * v139);
    v73 = v289;
    v82 = v288;
    if (v104 != v141)
    {
      v83 = v135;
      memmove(v112, v104, v141 - v104);
      LODWORD(v135) = v83;
      v140 = HIDWORD(v304);
    }
    v113 = v140 - v135;
    v112 = (JSC::ARM64LogicalImmediate *)v305;
LABEL_113:
    HIDWORD(v304) = v113;
LABEL_114:
    ;
  }
  while (v113);
  v144 = v304;
  LODWORD(v83) = v291;
  v111 = (uint64_t)v290;
  if (v305 != (_WORD *)v304 && (_QWORD)v304)
  {
    *(_QWORD *)&v304 = 0;
    DWORD2(v304) = 0;
    WTF::fastFree(v144, v104, v105, v106, v107, v108, v109, v110);
  }
LABEL_147:
  if ((_DWORD)v292 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v111, 0, v106, v107, v108, v109, v110);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v292 << 35) + 0x380000001ALL, 0, v106, v107, v108, v109, v110);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)this, (uint64_t)operationStringReplaceStringGeneric, v161, v162, v163, v164, v165, v166, (int *)&v304);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)this, 1, v167, v168, v169, v170, v171, v172);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v173, v174, v175, v176, v177, v178);
  v179 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 1194) = v179;
  *((_DWORD *)this + 1195) = 4;
  v180 = ~v179;
  if (v180 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFC98CLL);
  }
  v181 = (char *)this + 4776;
  v182 = *((_QWORD *)this + 499) + 24 * (int)v180;
  v183 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v182 = a2;
  *(_DWORD *)(v182 + 8) = v183;
  *(_BYTE *)(v182 + 12) = 6;
  *(_DWORD *)(v182 + 13) = 0;
  *(_BYTE *)(v182 + 17) = 0;
  --*((_DWORD *)this + 1196);
  if (v293)
  {
    if (v81 > 15)
      v184 = -1;
    else
      v184 = v81;
    --*(_DWORD *)&v181[12 * v184 + 8];
  }
  if (v294)
  {
    if ((int)v83 > 15)
      v185 = -1;
    else
      v185 = v78;
    --*(_DWORD *)&v181[12 * v185 + 8];
  }
  if (v73)
  {
    if (v82 > 15)
      v186 = -1;
    else
      v186 = v75;
    --*(_DWORD *)&v181[12 * v186 + 8];
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int *v64;
  int *v65;
  JSC::AssemblerBuffer *v66;
  unsigned int v67;
  unsigned int v68;
  __int16 v69;
  _BYTE v70[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  if ((_DWORD)a5 == 1)
  {
    if ((_DWORD)a6 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v69 = a5 | 0x100;
  v13 = 1;
  v67 = 1;
  if ((_DWORD)a6 != 2)
  {
LABEL_6:
    *(_WORD *)&v70[2 * v13++ - 2] = a6 | 0x200;
    v67 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v70[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v70[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v70[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v70[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v70[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v67;
      }
      a1 = (int *)memmove(&v70[v23 - 2], &v70[v23], 2 * v17 - v23 - 2);
      v13 = v67 - 1;
      goto LABEL_57;
    }
    v66 = v14;
    v33 = HIBYTE(v69);
    v34 = v69;
    JSC::MacroAssemblerARM64::swap(v11, (char)v69, SHIBYTE(v69), a4, a5, a6, a7, a8);
    memmove(&v69, v70, 2 * v67 - 2);
    v35 = v67 - 1;
    v31 = v67 == 1;
    v68 = v35;
    v36 = (int *)&v69;
    a1 = (int *)&v70[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v69;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v69;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v70[2 * v68 - 2])
          {
            v65 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v63 = v40 - (char *)a2;
              v64 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v64 + v63);
            }
            a1 = v65;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v68;
      v44 = v68;
      a1 = v41;
    }
    v45 = (int *)&v70[2 * v43 - 2];
    v14 = v66;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v68;
    }
    v13 = v44 - v39;
LABEL_57:
    v67 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a7, 3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a4, 0, v46, v47, v48, v49, v50);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a3 << 35) + 0x380000001ALL, 0, v46, v47, v48, v49, v50);
  JSC::DFG::SpeculativeJIT::appendCall(v11, (uint64_t)operationStringReplaceStringEmptyStringWithTable8, v51, v52, v53, v54, v55, v56, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v57, v58, v59, v60, v61, v62);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int *v59;
  int *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  if ((_DWORD)a6 == 1)
  {
    if ((_DWORD)a7 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v64 = a6 | 0x100;
  v13 = 1;
  v62 = 1;
  if ((_DWORD)a7 != 2)
  {
LABEL_6:
    *(_WORD *)&v65[2 * v13++ - 2] = a7 | 0x200;
    v62 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v65[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v65[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v65[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v65[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v65[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v62;
      }
      a1 = (int *)memmove(&v65[v23 - 2], &v65[v23], 2 * v17 - v23 - 2);
      v13 = v62 - 1;
      goto LABEL_57;
    }
    v61 = v14;
    v33 = HIBYTE(v64);
    v34 = v64;
    JSC::MacroAssemblerARM64::swap(v11, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v35 = v62 - 1;
    v31 = v62 == 1;
    v63 = v35;
    v36 = (int *)&v64;
    a1 = (int *)&v65[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v65[2 * v63 - 2])
          {
            v60 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v40 - (char *)a2;
              v59 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v59 + v58);
            }
            a1 = v60;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v63;
      v44 = v63;
      a1 = v41;
    }
    v45 = (int *)&v65[2 * v43 - 2];
    v14 = v61;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v63;
    }
    v13 = v44 - v39;
LABEL_57:
    v62 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v46, v47, v48, v49, v50, v51, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v52, v53, v54, v55, v56, v57);
}

uint64_t WTF::String::find(uint64_t this, unsigned __int8 a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int16x8_t *v13;
  unint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t *v18;
  __int8 *v19;

  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return -1;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 4);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if (v8 > a3)
    {
      v9 = v8 - a3;
      v10 = 16;
      if (v9 < 0x10)
        v10 = v9;
      if (v10)
      {
        v11 = v10;
        v12 = (unsigned __int8 *)(v7 + a3);
        while (*v12 != a2)
        {
          ++v12;
          if (!--v11)
            goto LABEL_10;
        }
        return (uint64_t)&v12[-v7];
      }
LABEL_10:
      if (v9 >= 0x11)
      {
        v12 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v10), a2, v9 - v10);
        if (v12)
          return (uint64_t)&v12[-v7];
      }
    }
    return -1;
  }
  if (v8 <= a3)
    return -1;
  v13 = (int16x8_t *)(v7 + 2 * a3);
  v14 = v7 + 2 * v8;
  v15 = v14 - (_QWORD)v13;
  if ((uint64_t)(v14 - (_QWORD)v13) <= -2)
  {
    __break(1u);
  }
  else
  {
    if (v15 > 0x3E)
    {
      v16 = vdupq_n_s16(a2);
      if ((unint64_t)&v13->u64[1] + 6 >= v14)
      {
        v18 = (int16x8_t *)(v7 + 2 * a3);
LABEL_26:
        if ((unint64_t)v18 >= v14)
          return -1;
        v13 = (int16x8_t *)(v14 - 16);
        v17 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v14 - 16), v16);
        v16.i16[0] = vmaxvq_u16((uint16x8_t)v17);
        if (!v16.i32[0])
          return -1;
      }
      else
      {
        while (1)
        {
          v17 = (int8x16_t)vceqq_s16(*v13, v16);
          LOWORD(a6) = vmaxvq_u16((uint16x8_t)v17);
          if (a6 != 0.0)
            break;
          v18 = v13 + 1;
          v19 = &v13[1].i8[14];
          ++v13;
          if ((unint64_t)v19 >= v14)
            goto LABEL_26;
        }
      }
      v13 = (int16x8_t *)((char *)v13
                        + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v17)));
    }
    else
    {
      this = -1;
      while (v13->i16[0] != a2)
      {
        v13 = (int16x8_t *)((char *)v13 + 2);
        v15 -= 2;
        if (!v15)
          return this;
      }
    }
    if (v13 == (int16x8_t *)v14)
      return -1;
    else
      return ((uint64_t)v13->i64 - v7) >> 1;
  }
  return this;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *,WTF::BoyerMooreHorspoolTable<unsigned char> const*),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, JSC::ARM64LogicalImmediate *a9)
{
  uint64_t v12;
  unsigned int v14;
  JSC::AssemblerBuffer *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  JSC::AssemblerBuffer *v63;
  unsigned int v64;
  unsigned int v65;
  __int16 v66;
  _BYTE v67[6];

  v12 = (uint64_t)a2;
  v64 = 0;
  if ((_DWORD)a6 == 1)
  {
    v14 = 0;
  }
  else
  {
    v66 = a6 | 0x100;
    v14 = 1;
    v64 = 1;
  }
  if ((_DWORD)a7 != 2)
  {
    *(_WORD *)&v67[2 * v14++ - 2] = a7 | 0x200;
    v64 = v14;
  }
  if ((_DWORD)a8 == 3)
  {
    if (!v14)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v67[2 * v14++ - 2] = a8 | 0x300;
    v64 = v14;
  }
  v15 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = v14;
    do
    {
      if ((v67[v16 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v17 |= 1 << v67[v16 - 1];
      v16 += 2;
    }
    while (2 * v14 != v16);
    v19 = 0;
    do
    {
      v20 = v67[v19 - 2] & 0x7F;
      if (v20 >= 0x40)
        goto LABEL_65;
      v17 &= ~(1 << v20);
      v19 += 2;
    }
    while (2 * v14 != v19);
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.i32[0];
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.i32[0] + v22)
    {
      v24 = 0;
      if (v14 <= 1)
        v25 = 1;
      else
        v25 = v14;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v67[v24 - 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v17 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v24 += 2;
        if (v26 == v24)
          goto LABEL_58;
      }
      v28 = v67[v24 - 2];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          if (v27 == 31)
            goto LABEL_52;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_53:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v30 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v33;
        *(_DWORD *)(v12 + 200) += 4;
        v18 = v64;
      }
      memmove(&v67[v24 - 2], &v67[v24], 2 * v18 - v24 - 2);
      v14 = v64 - 1;
      goto LABEL_57;
    }
    v63 = v15;
    v34 = HIBYTE(v66);
    v35 = v66;
    JSC::MacroAssemblerARM64::swap(v12, (char)v66, SHIBYTE(v66), a4, a5, a6, a7, a8);
    memmove(&v66, v67, 2 * v64 - 2);
    v36 = v64 - 1;
    v32 = v64 == 1;
    v65 = v36;
    v37 = (unsigned __int8 *)&v66;
    v38 = &v67[2 * v36 - 2];
    if (v32)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a2 = v38;
    }
    else
    {
      v39 = 2 * v36;
      v40 = &v66;
      while (*(unsigned __int8 *)v40 != v34)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_37;
      }
      *(_BYTE *)v40 = v35;
LABEL_37:
      v41 = 0;
      v42 = (char *)&v66;
      a2 = v38;
      v43 = v38;
      do
      {
        if (*v37 == v37[1])
        {
          v44 = v37;
          if (v43 != &v67[2 * v65 - 2])
          {
            v62 = v38;
            if (v37 == a2)
            {
              v44 = v43;
            }
            else
            {
              v60 = v42 - (char *)a2;
              v61 = v43;
              memmove(v43, a2, v42 - (char *)a2);
              v44 = &v61[v60];
            }
            v38 = v62;
          }
          a2 = v37 + 2;
          ++v41;
          v43 = v44;
        }
        v37 += 2;
        v42 += 2;
      }
      while (v37 < v38);
      v45 = v65;
      v46 = v65;
      v38 = v43;
    }
    v47 = &v67[2 * v45 - 2];
    v15 = v63;
    if (a2 != v47)
    {
      memmove(v38, a2, v47 - a2);
      v46 = v65;
    }
    v14 = v46 - v41;
LABEL_57:
    v64 = v14;
LABEL_58:
    ;
  }
  while (v14);
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, (uint64_t)a9, 4, a4, a5, a6, a7, a8);
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, a5, 0, a4, a5, a6, a7, a8);
  else
LABEL_66:
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, a3, v48, v49, v50, v51, v52, v53, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 1, v54, v55, v56, v57, v58, v59);
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  char *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  JSC::AssemblerBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  _BYTE v66[6];

  v11 = (uint64_t)a2;
  v63 = 0;
  if ((_DWORD)a6 == 1)
  {
    v13 = 0;
  }
  else
  {
    v65 = a6 | 0x100;
    v13 = 1;
    v63 = 1;
  }
  if ((_DWORD)a7 != 2)
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a7 | 0x200;
    v63 = v13;
  }
  if ((_DWORD)a8 == 3)
  {
    if (!v13)
      goto LABEL_62;
  }
  else
  {
    *(_WORD *)&v66[2 * v13++ - 2] = a8 | 0x300;
    v63 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v66[v15 - 1] & 0x40) != 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      v16 |= 1 << v66[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v66[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_65;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v66[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_65;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v66[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v63;
      }
      memmove(&v66[v23 - 2], &v66[v23], 2 * v17 - v23 - 2);
      v13 = v63 - 1;
      goto LABEL_57;
    }
    v62 = v14;
    v33 = HIBYTE(v65);
    v34 = v65;
    JSC::MacroAssemblerARM64::swap(v11, (char)v65, SHIBYTE(v65), a4, a5, a6, a7, a8);
    memmove(&v65, v66, 2 * v63 - 2);
    v35 = v63 - 1;
    v31 = v63 == 1;
    v64 = v35;
    v36 = (unsigned __int8 *)&v65;
    v37 = &v66[2 * v35 - 2];
    if (v31)
    {
      v44 = 0;
      v45 = 0;
      v40 = 0;
      a2 = v37;
    }
    else
    {
      v38 = 2 * v35;
      v39 = &v65;
      while (*(unsigned __int8 *)v39 != v33)
      {
        ++v39;
        v38 -= 2;
        if (!v38)
          goto LABEL_37;
      }
      *(_BYTE *)v39 = v34;
LABEL_37:
      v40 = 0;
      v41 = (char *)&v65;
      a2 = v37;
      v42 = v37;
      do
      {
        if (*v36 == v36[1])
        {
          v43 = v36;
          if (v42 != &v66[2 * v64 - 2])
          {
            v61 = v37;
            if (v36 == a2)
            {
              v43 = v42;
            }
            else
            {
              v59 = v41 - (char *)a2;
              v60 = v42;
              memmove(v42, a2, v41 - (char *)a2);
              v43 = &v60[v59];
            }
            v37 = v61;
          }
          a2 = v36 + 2;
          ++v40;
          v42 = v43;
        }
        v36 += 2;
        v41 += 2;
      }
      while (v36 < v37);
      v44 = v64;
      v45 = v64;
      v37 = v42;
    }
    v46 = &v66[2 * v44 - 2];
    v14 = v62;
    if (a2 != v46)
    {
      memmove(v37, a2, v46 - a2);
      v45 = v64;
    }
    v13 = v45 - v40;
LABEL_57:
    v63 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_62:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a5, 0, a4, a5, a6, a7, a8);
  else
LABEL_66:
    JSC::MacroAssemblerARM64::load64(v11, (a4 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v47, v48, v49, v50, v51, v52, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v53, v54, v55, v56, v57, v58);
}

uint64_t JSC::DFG::SpeculativeJIT::compileRegExpExecNonGlobalOrSticky(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  char v37;
  int v38;
  uint64_t v39[2];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_26;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_28;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_26:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_27;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197BFDE20);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_27:
  v15 = -1;
LABEL_9:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v15, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, v17, v18, v19, v20, v21, v22);
  ++*((_DWORD *)this + 1196);
  v29 = *((unsigned int *)this + 1194);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, v23, v24, v25, v26, v27, v28);
  }
  v30 = (char *)this + 4776;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v39, this, **((_QWORD **)a2 + 9), v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExp *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v38, (int *)this, (uint64_t)operationRegExpExecNonGlobalOrSticky, v12, v39[0], v39[1], v15, v31);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v32, v33, v34);
  --*((_DWORD *)this + 1196);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v36 = -1;
    else
      v36 = v15;
    --*(_DWORD *)&v30[12 * v36 + 8];
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v37 = -1;
    else
      v37 = v12;
    --*(_DWORD *)&v30[12 * v37 + 8];
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExp *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int *v12;
  unsigned int v13;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  __int16 *v38;
  int v39;
  char *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int *v59;
  int *v60;
  JSC::AssemblerBuffer *v61;
  unsigned int v62;
  unsigned int v63;
  __int16 v64;
  _BYTE v65[6];

  v11 = (uint64_t)a2;
  v12 = a1;
  if (!(_DWORD)a4)
  {
    if ((_DWORD)a7 == 2)
      goto LABEL_61;
    v13 = 0;
    goto LABEL_6;
  }
  v64 = a4;
  v13 = 1;
  v62 = 1;
  if ((_DWORD)a7 != 2)
  {
LABEL_6:
    *(_WORD *)&v65[2 * v13++ - 2] = a7 | 0x200;
    v62 = v13;
  }
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  do
  {
    v15 = 0;
    v16 = 0;
    v17 = v13;
    do
    {
      if ((v65[v15 - 1] & 0x40) != 0)
      {
LABEL_64:
        __break(1u);
        if (a1)
          WTF::fastFree((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_61;
      }
      v16 |= 1 << v65[v15 - 1];
      v15 += 2;
    }
    while (2 * v13 != v15);
    v18 = 0;
    do
    {
      v19 = v65[v18 - 2] & 0x7F;
      if (v19 >= 0x40)
        goto LABEL_64;
      v16 &= ~(1 << v19);
      v18 += 2;
    }
    while (2 * v13 != v18);
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v20.i16[0] = vaddlv_u8(v20);
    v21 = v20.i32[0];
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.i32[0] + v21)
    {
      v23 = 0;
      if (v13 <= 1)
        v24 = 1;
      else
        v24 = v13;
      v25 = 2 * v24;
      while (1)
      {
        v26 = v65[v23 - 1];
        if ((v26 & 0x7Fu) >= 0x40)
          goto LABEL_64;
        if (((v16 >> (v26 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v25 == v23)
          goto LABEL_58;
      }
      v27 = v65[v23 - 2];
      if (v27 != v26)
      {
        v28 = (char)v27;
        if ((char)v27 == 63)
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          if (v26 == 31)
            goto LABEL_52;
          v32 = v26 & 0x1F | 0xD2800000;
        }
        else
        {
          v29 = *(_DWORD *)(v11 + 200);
          v30 = *(_DWORD *)(v11 + 192);
          v31 = (char)v26 == 31 || v28 == 31;
          if (!v31)
          {
            v32 = v26 & 0xFFE0FFFF | ((v28 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v32 = (char)v26 | (32 * v28) | 0x91000000;
        }
LABEL_53:
        if (v29 + 4 > v30)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v29 = *(_DWORD *)(v11 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v11 + 56) + v29) = v32;
        *(_DWORD *)(v11 + 200) += 4;
        v17 = v62;
      }
      a1 = (int *)memmove(&v65[v23 - 2], &v65[v23], 2 * v17 - v23 - 2);
      v13 = v62 - 1;
      goto LABEL_57;
    }
    v61 = v14;
    v33 = HIBYTE(v64);
    v34 = v64;
    JSC::MacroAssemblerARM64::swap(v11, (char)v64, SHIBYTE(v64), a4, a5, a6, a7, a8);
    memmove(&v64, v65, 2 * v62 - 2);
    v35 = v62 - 1;
    v31 = v62 == 1;
    v63 = v35;
    v36 = (int *)&v64;
    a1 = (int *)&v65[2 * v35 - 2];
    if (v31)
    {
      v43 = 0;
      v44 = 0;
      v39 = 0;
      a2 = a1;
    }
    else
    {
      v37 = 2 * v35;
      v38 = &v64;
      while (*(unsigned __int8 *)v38 != v33)
      {
        ++v38;
        v37 -= 2;
        if (!v37)
          goto LABEL_36;
      }
      *(_BYTE *)v38 = v34;
LABEL_36:
      v39 = 0;
      v40 = (char *)&v64;
      a2 = a1;
      v41 = a1;
      do
      {
        if (*(unsigned __int8 *)v36 == *((unsigned __int8 *)v36 + 1))
        {
          v42 = v36;
          if (v41 != (int *)&v65[2 * v63 - 2])
          {
            v60 = a1;
            if (v36 == a2)
            {
              v42 = v41;
            }
            else
            {
              v58 = v40 - (char *)a2;
              v59 = v41;
              memmove(v41, a2, v40 - (char *)a2);
              v42 = (int *)((char *)v59 + v58);
            }
            a1 = v60;
          }
          a2 = (int *)((char *)v36 + 2);
          ++v39;
          v41 = v42;
        }
        v36 = (int *)((char *)v36 + 2);
        v40 += 2;
      }
      while (v36 < a1);
      v43 = v63;
      v44 = v63;
      a1 = v41;
    }
    v45 = (int *)&v65[2 * v43 - 2];
    v14 = v61;
    if (a2 != v45)
    {
      a1 = (int *)memmove(a1, a2, (char *)v45 - (char *)a2);
      v44 = v63;
    }
    v13 = v44 - v39;
LABEL_57:
    v62 = v13;
LABEL_58:
    ;
  }
  while (v13);
LABEL_61:
  if ((_DWORD)a5 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, a6, 1, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (a5 << 35) + 0x380000001ALL, 1, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, a3, v46, v47, v48, v49, v50, v51, v12);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, v52, v53, v54, v55, v56, v57);
}

uint64_t JSC::DFG::SpeculativeJIT::compileRegExpMatchFastGlobal(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  char v36;
  char v37;
  int v38;
  uint64_t v39[2];

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_26;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_28;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_26:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_27;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197BFE468);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 4), a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_27:
  v15 = -1;
LABEL_9:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 4), v15, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v16, v17, v18, v19, v20, v21, v22);
  ++*((_DWORD *)this + 1196);
  v29 = *((unsigned int *)this + 1194);
  if ((_DWORD)v29 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v29, v23, v24, v25, v26, v27, v28);
  }
  v30 = (char *)this + 4776;
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)v39, this, **((_QWORD **)a2 + 9), v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExp *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(&v38, (int *)this, (uint64_t)operationRegExpMatchFastGlobalString, v12, v39[0], v39[1], v15, v31);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v32, v33, v34);
  --*((_DWORD *)this + 1196);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v36 = -1;
    else
      v36 = v15;
    --*(_DWORD *)&v30[12 * v36 + 8];
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v37 = -1;
    else
      v37 = v12;
    --*(_DWORD *)&v30[12 * v37 + 8];
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileRegExpMatchFast(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  char v44;
  char v45;
  int v46;

  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_37;
  v11 = ~*(_DWORD *)((v10 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v11 >= *((unsigned int *)this + 1001))
    goto LABEL_42;
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
LABEL_37:
    v12 = -1;
  v13 = *((_QWORD *)a2 + 4);
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_38;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFE744);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v14 + 12))
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  else
LABEL_38:
    v15 = -1;
  v16 = *((_QWORD *)a2 + 5);
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_39;
  v17 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *((unsigned int *)this + 1001))
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x197BFE73CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v17 + 12))
  {
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
LABEL_39:
  v18 = -1;
LABEL_13:
  if (v12 == -1)
    v12 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v10, a3, a4, a5, a6, a7, a8);
  if (v15 == -1)
    v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v13, a3, a4, a5, a6, a7, a8);
  if (v18 == -1)
    v18 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateRegExpObject((uint64_t)this, *((_QWORD *)a2 + 4), v15, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::speculateString((uint64_t)this, *((_QWORD *)a2 + 5), v18, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v24, v25, v26, v27, v28, v29, v30);
  ++*((_DWORD *)this + 1196);
  v37 = *((unsigned int *)this + 1194);
  if ((_DWORD)v37 != 0x3FFFFFFF)
  {
    *((_QWORD *)this + 597) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v37, v31, v32, v33, v34, v35, v36);
  }
  v38 = (char *)this + 4776;
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::RegExpObject *,JSC::JSString *),JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v46, (unsigned __int8 *)this, (uint64_t)operationRegExpMatchFastString, v12, v15, v18, v35, v36);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, 0, (uint64_t)a2, 16, 0, v39, v40, v41);
  --*((_DWORD *)this + 1196);
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v18 > 15)
      v43 = -1;
    else
      v43 = v18;
    --*(_DWORD *)&v38[12 * v43 + 8];
  }
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v15 > 15)
      v44 = -1;
    else
      v44 = v15;
    --*(_DWORD *)&v38[12 * v44 + 8];
  }
  if ((v10 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v12 > 15)
      v45 = -1;
    else
      v45 = v12;
    --*(_DWORD *)&v38[12 * v45 + 8];
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileLazyJSConstant(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  unsigned __int8 v22;

  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v21, this, a3, a4, a5, a6, a7, a8);
  v10 = (char)v22;
  v20 = *(_OWORD *)*((_QWORD *)a2 + 9);
  JSC::DFG::LazyJSValue::emit((uint64_t)&v20, (uint64_t)this, v22, *(_QWORD *)(*((_QWORD *)this + 495) + 24), v11, v12, v13, v14);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)this, v10, (uint64_t)a2, 16, 0, v15, v16, v17);
  if (v21)
  {
    v19 = (char)v22;
    if ((char)v22 != -1)
    {
      if ((char)v22 > 15)
        v19 = -1;
      --*(_DWORD *)(v21 + 12 * v19 + 4784);
    }
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileMaterializeNewObject(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  __int128 *v26;
  unint64_t v27;
  int v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::DFG::SpeculativeJIT *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  WTF *v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  char v72;
  unint64_t v73;
  int v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *result;
  unsigned int v92;
  char *v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  JSC::DFG::Node *v102;
  int v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  char v112;
  WTF **v113;

  v8 = a2;
  v10 = **((_QWORD **)a2 + 9);
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v10 & 1) != 0)
    v11 = *(_QWORD *)(v11 + 8);
  v12 = *((_QWORD *)a2 + 10);
  if ((*(_BYTE *)(v11 + 8) & 0xE) != 0 && (v13 = *(_DWORD *)(v12 + 12)) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = *((_QWORD *)this + 495);
    v17 = *((_DWORD *)a2 + 6);
    v19 = *(_DWORD *)(v16 + 164);
    v20 = 8 * (v13 - 1);
    do
    {
      v21 = v17 + v13;
      if (v19 <= v17 + v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197BFEE8CLL);
      }
      if (*(_DWORD *)(v12 + 12) <= --v13)
      {
        __break(0xC471u);
        JUMPOUT(0x197BFEE94);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v16 + 152) + 8 * v21);
      v23 = *(_DWORD *)(*(_QWORD *)v12 + v20);
      if (v23 == 14)
      {
        v27 = v22 & 0xFF00FFFFFFFFFFFFLL;
        v28 = *(unsigned __int16 *)(v27 + 18);
        if (v28 == 355 || v28 == 348)
        {
          if ((v18 & 1) != 0)
          {
            v18 = 1;
            v29 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          }
          else
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
            v18 = 1;
            v29 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          }
        }
        else
        {
          v29 = *(__int128 **)(v27 + 72);
        }
        v15 = *(unsigned int *)v29;
      }
      else if (v23 == 12)
      {
        v24 = v22 & 0xFF00FFFFFFFFFFFFLL;
        v25 = *(unsigned __int16 *)(v24 + 18);
        if (v25 == 355 || v25 == 348)
        {
          if ((v18 & 1) != 0)
          {
            v18 = 1;
            v26 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          }
          else
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
            v18 = 1;
            v26 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          }
        }
        else
        {
          v26 = *(__int128 **)(v24 + 72);
        }
        v14 = *(_DWORD *)v26;
      }
      v20 -= 8;
    }
    while (v13);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v111, this, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v109, this, v30, v31, v32, v33, v34, v35);
  v36 = v110;
  v103 = v112;
  JSC::DFG::SpeculativeJIT::emitAllocateRawObject((uint64_t)this, v112, v11, (char)v110, 0, v15, v37, v38);
  v105 = v36;
  if (v14)
  {
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197BFEE6CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v14, (uint64_t)this + 264, v39, v40, v41, v42, v43);
    v44 = this;
    v45 = 16;
  }
  else
  {
    v44 = this;
    v45 = 63;
  }
  JSC::MacroAssemblerARM64::store32((uint64_t)v44, v45, v36 | 0xFFFFFFF800000000, v39, v40, v41, v42, v43);
  v52 = *(_DWORD *)(v12 + 12);
  if (v52)
  {
    v100 = v12;
    v104 = (char *)this + 4776;
    v101 = v11;
    v102 = v8;
    do
    {
      v53 = *((_QWORD *)this + 495);
      v54 = *((_DWORD *)v8 + 6) + v52;
      if (*(_DWORD *)(v53 + 164) <= v54)
      {
        __break(0xC471u);
        JUMPOUT(0x197BFEE7CLL);
      }
      if (*(_DWORD *)(v12 + 12) <= --v52)
      {
        __break(0xC471u);
        JUMPOUT(0x197BFEE84);
      }
      v106 = *(_QWORD *)(*(_QWORD *)(v53 + 152) + 8 * v54);
      v55 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v52);
      v56 = HIDWORD(v55);
      if ((_DWORD)v55 == 11)
      {
        v60 = JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*(_QWORD *)(v53 + 24) + 240), HIDWORD(v55));
        v107 = 0;
        v108 = 0;
        v113 = &v107;
        JSC::Structure::forEachPropertyConcurrently<JSC::Structure::getPropertiesConcurrently(void)::$_0>(v11, (uint64_t *)&v113, v61, v62, v63, v64, v65, v66);
        v68 = v107;
        if (!HIDWORD(v108))
        {
LABEL_76:
          if (v68)
          {
            v107 = 0;
            LODWORD(v108) = 0;
            WTF::fastFree((unint64_t)v68, v67, v46, v47, v48, v49, v50, v51);
          }
          continue;
        }
        v69 = v106 & 0xFF00FFFFFFFFFFFFLL;
        v70 = 16 * HIDWORD(v108);
        v71 = (int *)((char *)v107 + 8);
        v72 = v103;
        while (2)
        {
          if (v60 == *((_QWORD *)v71 - 1))
          {
            if (!v69)
              goto LABEL_53;
            v73 = ~*(_DWORD *)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v73 >= *((unsigned int *)this + 1001))
            {
              __break(0xC471u);
              JUMPOUT(0x197BFEE74);
            }
            if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v73 + 12))
            {
              v74 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v106, v46, v47, v48, v49, v50, v51);
              v75 = *v71;
              if (*v71 >= 64)
                v76 = v105;
              else
                v76 = v72;
              if (v74 != -1)
              {
                v77 = v74;
                goto LABEL_58;
              }
              v79 = v71;
            }
            else
            {
LABEL_53:
              v78 = v72;
              v79 = (int *)((char *)v68 + 8);
              if (*v71 >= 64)
                v76 = v105;
              else
                v76 = v78;
            }
            v77 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v106, v46, v47, v48, v49, v50, v51);
            v75 = *v79;
            v72 = v103;
LABEL_58:
            if (v75 <= 63)
              v80 = 8 * v75 + 16;
            else
              v80 = 496 - 8 * v75;
            if ((v80 + 256) > 0x1FF)
            {
              if (v80 <= 0x7FF8)
              {
                v81 = (v80 << 7) & 0x3FFC00 | v77 & 0x1F | (32 * v76) | 0xF9000000;
              }
              else
              {
                if (!*((_BYTE *)this + 212))
                  goto LABEL_107;
                *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v80, *((char *)this + 304), v47, v48, v49, v50, v51);
                v81 = v77 & 0x1F | (32 * v76) | 0xF8316800;
              }
            }
            else
            {
              v81 = (v80 << 12) & 0x1F8000 | v77 & 0x1F | (32 * v76) | 0xF8000000;
            }
            v82 = *((_DWORD *)this + 50);
            if (v82 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)v67, v46, v47, v48, v49, v50, v51);
              v82 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v82) = v81;
            *((_DWORD *)this + 50) += 4;
            if (v69)
            {
              if (v77 > 15)
                v83 = -1;
              else
                v83 = v77;
              --*(_DWORD *)&v104[12 * v83 + 8];
            }
          }
          v68 = (WTF *)((char *)v68 + 16);
          v71 += 4;
          v70 -= 16;
          if (!v70)
          {
            v68 = v107;
            v11 = v101;
            v8 = v102;
            v12 = v100;
            goto LABEL_76;
          }
          continue;
        }
      }
      if ((_DWORD)v55 == 10)
      {
        if ((v106 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v57 = ~*(_DWORD *)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
          if (v57 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197BFEE9CLL);
          }
          if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v57 + 12))
          {
            v58 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v106, v46, v47, v48, v49, v50, v51);
            if ((_DWORD)v58 != -1)
            {
              v59 = v58;
              JSC::MacroAssemblerARM64::store64((uint64_t)this, v58, v105 | (v56 << 35), v47, v48, v49, v50, v51);
LABEL_79:
              if (v59 > 15)
                v90 = -1;
              else
                v90 = v59;
              --*(_DWORD *)&v104[12 * v90 + 8];
              continue;
            }
          }
        }
        v84 = JSC::DFG::SpeculativeJIT::fillJSValue((uint64_t)this, v106, v46, v47, v48, v49, v50, v51);
        v59 = v84;
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v84, v105 | (v56 << 35), v85, v86, v87, v88, v89);
        if ((v106 & 0xFF00FFFFFFFFFFFFLL) != 0)
          goto LABEL_79;
      }
    }
    while (v52);
  }
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v8, v46, v47, v48, v49, v50, v51);
  if (v103 > 15)
    v92 = -1;
  else
    v92 = v103;
  v93 = (char *)this + 12 * v92;
  v94 = *((_DWORD *)v8 + 12);
  *((_DWORD *)v93 + 1194) = v94;
  *((_DWORD *)v93 + 1195) = 4;
  v95 = ~v94;
  if (v95 >= *((unsigned int *)this + 1001))
  {
LABEL_107:
    __break(0xC471u);
    JUMPOUT(0x197BFEE4CLL);
  }
  v96 = *((_QWORD *)this + 499) + 24 * (int)v95;
  v97 = *((_DWORD *)v8 + 13);
  *(_QWORD *)v96 = v8;
  *(_DWORD *)(v96 + 8) = v97;
  *(_BYTE *)(v96 + 17) = v103;
  *(_DWORD *)(v96 + 12) = 6;
  *(_BYTE *)(v96 + 16) = 0;
  if (v109)
  {
    v98 = (char)v110;
    if ((char)v110 != -1)
    {
      if ((char)v110 > 15)
        v98 = -1;
      --*(_DWORD *)(v109 + 12 * v98 + 4784);
    }
  }
  if (v111)
  {
    v99 = v112;
    if (v112 != -1)
    {
      if (v112 > 15)
        v99 = -1;
      --*(_DWORD *)(v111 + 12 * v99 + 4784);
    }
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileRecordRegExpCachedResult(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  unsigned int v56;
  unsigned int v57;
  char v58;
  char v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  _BYTE v64[7];
  JSC::DFG::SpeculativeJIT *v65;
  unint64_t v66;
  char v67;
  _BYTE v68[7];

  v8 = *((_QWORD *)this + 495);
  v9 = *((_QWORD *)a2 + 3);
  v10 = *(_DWORD *)(v8 + 164);
  if (v10 <= v9)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  if (v10 <= (int)v9 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2D4);
  }
  if (v10 <= (int)v9 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2DCLL);
  }
  if (v10 <= (int)v9 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2E4);
  }
  if (v10 <= (int)v9 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2ECLL);
  }
  v13 = *(_QWORD *)(v8 + 152);
  v14 = *(_QWORD *)(v13 + 8 * *((_QWORD *)a2 + 3));
  v15 = *(_QWORD *)(v13 + 8 * (v9 + 1));
  v16 = *(_QWORD *)(v13 + 8 * (v9 + 2));
  v17 = *(_QWORD *)(v13 + 8 * (v9 + 3));
  v18 = *(_QWORD *)(v13 + 8 * (v9 + 4));
  if ((v14 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_54;
  v19 = ~*(_DWORD *)((v14 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v19 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2F4);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v19 + 12))
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  else
LABEL_54:
    v20 = -1;
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_55;
  v21 = ~*(_DWORD *)((v15 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF2FCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v21 + 12))
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
  else
LABEL_55:
    v22 = -1;
  v61 = v14 & 0xFF00FFFFFFFFFFFFLL;
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_56;
  v23 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v23 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF304);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  else
LABEL_56:
    v24 = -1;
  v65 = this;
  v66 = v17;
  v67 = -1;
  v25 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v26 = *((unsigned int *)this + 1001);
  if (v25 >= v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197BFF30CLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v25 + 12))
  {
    v67 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v17, (uint64_t)v68, a4, a5, a6, a7, a8);
    v26 = *((unsigned int *)this + 1001);
  }
  v62 = v18;
  v63 = -1;
  v27 = ~*(_DWORD *)((v18 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v27 >= v26)
  {
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x197BFF2CCLL);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v27 + 12))
    v63 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v18, (uint64_t)v64, a4, a5, a6, a7, a8);
  if (v20 == 0xFF)
    v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v14, a3, a4, a5, a6, a7, a8);
  if (v22 == -1)
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v15, a3, a4, a5, a6, a7, a8);
  if (v24 == -1)
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateCell((uint64_t)this, v16, a3, a4, a5, a6, a7, a8);
  v28 = v67;
  if (v67 == 255)
  {
    v28 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v65, v66, (uint64_t)v68, a4, a5, a6, a7, a8);
    v67 = v28;
  }
  v29 = v63;
  if (v63 == 255)
  {
    v29 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v62, (uint64_t)v64, a4, a5, a6, a7, a8);
    v63 = v29;
  }
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v22, v20 | 0x86800000000, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::store64((uint64_t)this, v24, v20 | 0x86000000000, v30, v31, v32, v33, v34);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v28, v20 | 0x84800000000, v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::store32((uint64_t)this, v29, v20 | 0x85000000000, v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::store8((uint64_t)this, 63, v20 | 0x85800000000, v45, v46, v47, v48, v49);
  result = JSC::DFG::SpeculativeJIT::noResult((uint64_t)this, (uint64_t)a2, 0, v50, v51, v52, v53, v54);
  v56 = v63;
  if (v63 > 15)
    v56 = -1;
  --*((_DWORD *)this + 3 * v56 + 1196);
  v57 = v67;
  if (v67 > 15)
    v57 = -1;
  --*((_DWORD *)v65 + 3 * v57 + 1196);
  if ((v16 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v24 > 15)
      v58 = -1;
    else
      v58 = v24;
    --*((_DWORD *)this + 3 * v58 + 1196);
  }
  if ((v15 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if (v22 > 15)
      v59 = -1;
    else
      v59 = v22;
    --*((_DWORD *)this + 3 * v59 + 1196);
  }
  if (v61)
  {
    if ((char)v20 > 15)
      v60 = -1;
    else
      v60 = v20;
    --*((_DWORD *)this + 3 * v60 + 1196);
  }
  return result;
}

