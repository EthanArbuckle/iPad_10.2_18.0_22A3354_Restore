unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  size_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  BOOL v37;
  WTF *v38;
  int *v39;
  _BYTE *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  __int16 *v57;
  __int16 *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  char *v106;
  __int16 *v107;
  __int16 *v108;
  char v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  BOOL v134;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t i;
  char *v140;
  __int16 *v141;
  __int16 *v142;
  char v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  size_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  int *v182;
  _BYTE *v183;
  int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  size_t v194;
  _BYTE *v195;
  int *v196;
  _BYTE *v197;
  const void *v198;
  size_t v199;
  size_t __n;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  uint64_t v204;
  _BYTE v205[512];
  char v206;
  int v207;
  char v208;
  int v209;
  char v210;
  char v211;
  unint64_t v212;
  _BYTE v213[16];
  WTF::StringImpl *v214;
  __int128 v215;
  __int16 v216;
  uint64_t v217;

  v10 = (uint64_t)a1;
  v217 = *MEMORY[0x1E0C80C00];
  v213[0] = 0;
  v213[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(**a1, (uint64_t)v213, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = v11;
    v201 = a2;
    v202 = a3;
    v19 = (WTF *)v205;
    v203 = (WTF *)v205;
    v204 = 16;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = BYTE4(a3);
    v212 = 0;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
    v27 = **(_QWORD **)(v10 + 24);
    if (*(_DWORD *)(v27 + 80))
    {
      v167 = *(_DWORD *)(v27 + 80);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v21, v22, v23, v24, v25, v26);
      if (*(_QWORD *)(v27 + 16))
      {
        v168 = 0;
        goto LABEL_92;
      }
    }
    v28 = **(_QWORD **)(v10 + 16);
    if (v18 >= v28)
      v29 = **(WTF ***)(v10 + 16);
    else
      v29 = (WTF *)v18;
    if (v29)
    {
      v19 = 0;
      v20 = 10;
      v21 = 24;
      while (1)
      {
        v30 = *(_QWORD *)(**(_QWORD **)v10 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v31 = *(__int16 *)(v30 + 2 * (_QWORD)v19);
        v32 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 56);
        if (v31 > 0xFF)
        {
          v43 = v32 + 48368;
          v44 = 9 * ((~((_DWORD)v31 << 15) + v31) ^ ((~((_DWORD)v31 << 15) + v31) >> 10));
          v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
          v46 = (v45 ^ BYTE2(v45));
          v47 = (_DWORD *)(v32 + 48368 + 24 * (v45 ^ BYTE2(v45)));
          if (*v47 != (_DWORD)v31
            || (v48 = v43 + 24 * v46, v49 = *(_QWORD *)(v48 + 8), v33 = (WTF::StringImpl **)(v48 + 8), !v49))
          {
            *v47 = v31;
            WTF::String::number(v31, (uint64_t *)&v214);
            v21 = 24;
            v74 = v43 + 24 * v46;
            v75 = (uint64_t)v214;
            v214 = 0;
            v77 = *(WTF::StringImpl **)(v74 + 8);
            v33 = (WTF::StringImpl **)(v74 + 8);
            v76 = v77;
            *v33 = (WTF::StringImpl *)v75;
            if (v77)
            {
              if (*(_DWORD *)v76 == 2)
              {
                WTF::StringImpl::~StringImpl(v76, v73, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                v21 = 24;
              }
              else
              {
                *(_DWORD *)v76 -= 2;
              }
            }
            v78 = v214;
            v214 = 0;
            v20 = 10;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
            *(_QWORD *)(v43 + 24 * v46 + 16) = 0;
          }
        }
        else
        {
          v33 = (WTF::StringImpl **)(v32 + 16 * v31 + 44272);
          if (!*v33)
          {
            v34 = 0;
            do
            {
              v35 = (v31 % 0xA) | 0x30;
              v36 = (WTF::StringImpl *)((char *)&v214 + v34);
              *((_BYTE *)&v215 + v34-- + 4) = (v31 % 0xA) | 0x30;
              v37 = v31 > 9;
              LODWORD(v31) = v31 / 0xA;
            }
            while (v37);
            v38 = (WTF *)(v34 + 14);
            if ((uint64_t)(v34 + 14) >= 15)
            {
              __break(1u);
              goto LABEL_159;
            }
            if (v34)
            {
              __n = -(uint64_t)v34;
              if ((unint64_t)-(uint64_t)v34 >> 31)
                goto LABEL_211;
              v39 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v34));
              v40 = v39 + 5;
              *v39 = 2;
              v39[1] = -(int)v34;
              *((_QWORD *)v39 + 1) = v39 + 5;
              v39[4] = 4;
              if (v34 == -1)
              {
                *v40 = v35;
              }
              else
              {
                v41 = (char *)&v215 + v34 + 5;
                v42 = v39;
                memcpy(v40, v41, __n);
                v39 = v42;
              }
              v20 = 10;
              v21 = 24;
            }
            else
            {
              v39 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v79 = *v33;
            *v33 = (WTF::StringImpl *)v39;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
              {
                WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v79 -= 2;
              }
            }
          }
        }
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v50 = (uint64_t)*v33;
        if (*v33)
          v51 = *(_DWORD *)(v50 + 4);
        else
          v51 = 0;
        v52 = __CFADD__(v207, v51);
        v53 = v207 + v51;
        if (v52)
          v206 = 1;
        else
          v207 = v53;
        v54 = v18 & 0xFFFFFF0000000000;
        if (v50)
        {
          v55 = *(_QWORD *)(v50 + 8);
          v18 = *(unsigned int *)(v50 + 4) | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32) | v54;
          *(_DWORD *)v50 += 2;
        }
        else
        {
          v55 = 0;
          v18 = v54 | 0x100000000;
        }
        v214 = (WTF::StringImpl *)v50;
        *(_QWORD *)&v215 = v55;
        *((_QWORD *)&v215 + 1) = v18;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v70 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v70)
          {
            v59 = 1;
            v20 = 10;
            v21 = 24;
            goto LABEL_33;
          }
          v71 = (char *)v203 + 32 * HIDWORD(v204);
          v72 = *(_QWORD *)v70;
          *(_QWORD *)v70 = 0;
          *(_QWORD *)v71 = v72;
          *(_OWORD *)(v71 + 8) = *(_OWORD *)(v70 + 8);
          v57 = (__int16 *)(v71 + 24);
          v58 = (__int16 *)(v70 + 24);
          v20 = 10;
          v21 = 24;
        }
        else
        {
          v56 = (char *)v203 + 32 * HIDWORD(v204);
          v214 = 0;
          *(_QWORD *)v56 = v50;
          *(_OWORD *)(v56 + 8) = v215;
          v57 = (__int16 *)(v56 + 24);
          v58 = &v216;
        }
        v59 = 0;
        *v57 = *v58;
        ++HIDWORD(v204);
LABEL_33:
        v210 |= v59;
        v60 = v214;
        v214 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
            v21 = 24;
            v20 = 10;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v212 = 0;
        if (*(_DWORD *)(v32 + 80))
        {
          v104 = *(_DWORD *)(v32 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
        }
        v61 = **(_QWORD **)(v10 + 24);
        if (*(_DWORD *)(v61 + 80))
        {
          v105 = *(_DWORD *)(v61 + 80);
          if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
          if (*(_QWORD *)(v61 + 16))
          {
            v168 = 0;
            v19 = (WTF *)v205;
            goto LABEL_92;
          }
        }
        v19 = (WTF *)((char *)v19 + 1);
        if (v19 == v29)
        {
          v28 = **(_QWORD **)(v10 + 16);
          v19 = (WTF *)v205;
          break;
        }
      }
    }
    if ((unint64_t)v29 < v28)
    {
      do
      {
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v214 = 0;
        *(_QWORD *)&v215 = 0;
        *((_QWORD *)&v215 + 1) = 0x100000000;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v119 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v119)
          {
            v109 = 1;
            goto LABEL_80;
          }
          v120 = (char *)v203 + 32 * HIDWORD(v204);
          v121 = *(_QWORD *)v119;
          *(_QWORD *)v119 = 0;
          *(_QWORD *)v120 = v121;
          *(_OWORD *)(v120 + 8) = *(_OWORD *)(v119 + 8);
          v107 = (__int16 *)(v120 + 24);
          v108 = (__int16 *)(v119 + 24);
        }
        else
        {
          v106 = (char *)v203 + 32 * HIDWORD(v204);
          *(_QWORD *)v106 = 0;
          *(_OWORD *)(v106 + 8) = v215;
          v107 = (__int16 *)(v106 + 24);
          v108 = &v216;
        }
        v109 = 0;
        *v107 = *v108;
        ++HIDWORD(v204);
LABEL_80:
        v210 |= v109;
        v110 = v214;
        v214 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_DWORD *)v110 -= 2;
          }
        }
        v212 = 0;
        v29 = (WTF *)((char *)v29 + 1);
      }
      while ((unint64_t)v29 < **(_QWORD **)(v10 + 16));
    }
    if (v208)
    {
      __break(0xC471u);
      JUMPOUT(0x198AE5364);
    }
    v20 = **(_QWORD **)(v10 + 8);
    if (v209 != 1)
    {
      v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_92:
      if (HIDWORD(v204))
      {
        v122 = v203;
        v123 = 32 * HIDWORD(v204);
        do
        {
          v124 = *(WTF::StringImpl **)v122;
          *(_QWORD *)v122 = 0;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
            {
              WTF::StringImpl::~StringImpl(v124, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v124 -= 2;
            }
          }
          v122 = (WTF *)((char *)v122 + 32);
          v123 -= 32;
        }
        while (v123);
      }
      v133 = v203;
      v134 = v19 == v203;
      goto LABEL_101;
    }
    v168 = v212;
    if (v212)
      goto LABEL_92;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE5418);
    }
    v10 = *(_QWORD *)(v20 + 56);
    v38 = v203;
    v34 = *((unsigned int *)v203 + 4);
    v36 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v34 == *((_DWORD *)v36 + 1))
      {
        *(_DWORD *)v36 += 2;
LABEL_112:
        v214 = v36;
        goto LABEL_113;
      }
    }
    else
    {
LABEL_159:
      if (!(_DWORD)v34)
        goto LABEL_112;
    }
    v181 = (_BYTE *)*((_QWORD *)v38 + 1);
    if (*((_BYTE *)v38 + 20))
    {
      if (v181)
      {
        if ((_DWORD)v34)
        {
          if ((v34 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE5428);
          }
          v182 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
          v183 = v182 + 5;
          *v182 = 2;
          v182[1] = v34;
          *((_QWORD *)v182 + 1) = v182 + 5;
          v182[4] = 4;
          if ((_DWORD)v34 == 1)
          {
            *v183 = *v181;
LABEL_182:
            v214 = (WTF::StringImpl *)v182;
LABEL_113:
            v168 = JSC::jsString(v10, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v137 = v214;
            v214 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
              {
                WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              }
              else
              {
                *(_DWORD *)v137 -= 2;
              }
            }
            goto LABEL_92;
          }
          v193 = v181;
          v194 = v34;
          goto LABEL_181;
        }
        goto LABEL_177;
      }
    }
    else if (v181)
    {
      if ((_DWORD)v34)
      {
        if (v34 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE5430);
        }
        v182 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v34 + 20));
        v183 = v182 + 5;
        *v182 = 2;
        v182[1] = v34;
        *((_QWORD *)v182 + 1) = v182 + 5;
        v182[4] = 0;
        if ((_DWORD)v34 == 1)
        {
          *(_WORD *)v183 = *(_WORD *)v181;
          goto LABEL_182;
        }
        v193 = v181;
        v194 = 2 * v34;
LABEL_181:
        memcpy(v183, v193, v194);
        goto LABEL_182;
      }
LABEL_177:
      v182 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_182;
    }
    v182 = 0;
    goto LABEL_182;
  }
  v201 = a2;
  v202 = a3;
  v203 = (WTF *)v205;
  v204 = 16;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = BYTE4(a3);
  v212 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
  v138 = **(_QWORD **)(v10 + 24);
  if (*(_DWORD *)(v138 + 80))
  {
    v184 = *(_DWORD *)(v138 + 80);
    if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v138 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v138 + 16))
    {
      v168 = 0;
      goto LABEL_136;
    }
  }
  if (**(_QWORD **)(v10 + 16))
  {
    for (i = 0; i < **(_QWORD **)(v10 + 16); ++i)
    {
      if (v209 == -1)
        v208 = 1;
      ++v209;
      v214 = 0;
      *(_QWORD *)&v215 = 0;
      *((_QWORD *)&v215 + 1) = 0x100000000;
      v216 = 0;
      if (HIDWORD(v204) == (_DWORD)v204)
      {
        v153 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
        if (!v153)
        {
          v143 = 1;
          goto LABEL_124;
        }
        v154 = (char *)v203 + 32 * HIDWORD(v204);
        v155 = *(_QWORD *)v153;
        *(_QWORD *)v153 = 0;
        *(_QWORD *)v154 = v155;
        *(_OWORD *)(v154 + 8) = *(_OWORD *)(v153 + 8);
        v141 = (__int16 *)(v154 + 24);
        v142 = (__int16 *)(v153 + 24);
      }
      else
      {
        v140 = (char *)v203 + 32 * HIDWORD(v204);
        *(_QWORD *)v140 = 0;
        *(_OWORD *)(v140 + 8) = v215;
        v141 = (__int16 *)(v140 + 24);
        v142 = &v216;
      }
      v143 = 0;
      *v141 = *v142;
      ++HIDWORD(v204);
LABEL_124:
      v210 |= v143;
      v144 = v214;
      v214 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v144 -= 2;
        }
      }
      v212 = 0;
    }
  }
  if (v208)
  {
    __break(0xC471u);
    JUMPOUT(0x198AE5410);
  }
  v20 = **(_QWORD **)(v10 + 8);
  if (v209 == 1)
  {
    v168 = v212;
    if (v212)
      goto LABEL_136;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE5420);
    }
    v169 = *(_QWORD *)(v20 + 56);
    v170 = *((unsigned int *)v203 + 4);
    v171 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v170 == *((_DWORD *)v171 + 1))
      {
        *(_DWORD *)v171 += 2;
LABEL_153:
        v214 = v171;
        goto LABEL_154;
      }
    }
    else if (!(_DWORD)v170)
    {
      goto LABEL_153;
    }
    v195 = (_BYTE *)*((_QWORD *)v203 + 1);
    if (*((_BYTE *)v203 + 20))
    {
      if (v195)
      {
        if ((_DWORD)v170)
        {
          if ((v170 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE5438);
          }
          v196 = (int *)WTF::fastCompactMalloc((WTF *)(v170 + 20));
          v197 = v196 + 5;
          *v196 = 2;
          v196[1] = v170;
          *((_QWORD *)v196 + 1) = v196 + 5;
          v196[4] = 4;
          if ((_DWORD)v170 == 1)
          {
            *v197 = *v195;
LABEL_204:
            v214 = (WTF::StringImpl *)v196;
LABEL_154:
            v168 = JSC::jsString(v169, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v172 = v214;
            v214 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
              {
                WTF::StringImpl::~StringImpl(v172, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v172 -= 2;
              }
            }
            goto LABEL_136;
          }
          v198 = v195;
          v199 = v170;
          goto LABEL_203;
        }
        goto LABEL_200;
      }
    }
    else if (v195)
    {
      if ((_DWORD)v170)
      {
        if (v170 > 0x7FFFFFEF)
        {
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x198AE535CLL);
        }
        v196 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v170 + 20));
        v197 = v196 + 5;
        *v196 = 2;
        v196[1] = v170;
        *((_QWORD *)v196 + 1) = v196 + 5;
        v196[4] = 0;
        if ((_DWORD)v170 == 1)
        {
          *(_WORD *)v197 = *(_WORD *)v195;
          goto LABEL_204;
        }
        v198 = v195;
        v199 = 2 * v170;
LABEL_203:
        memcpy(v197, v198, v199);
        goto LABEL_204;
      }
LABEL_200:
      v196 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_204;
    }
    v196 = 0;
    goto LABEL_204;
  }
  v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_136:
  if (HIDWORD(v204))
  {
    v156 = v203;
    v157 = 32 * HIDWORD(v204);
    do
    {
      v158 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
        {
          WTF::StringImpl::~StringImpl(v158, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
        }
        else
        {
          *(_DWORD *)v158 -= 2;
        }
      }
      v156 = (WTF *)((char *)v156 + 32);
      v157 -= 32;
    }
    while (v157);
  }
  v133 = v203;
  v134 = v205 == (_BYTE *)v203;
LABEL_101:
  if (!v134 && v133 != 0)
  {
    v203 = 0;
    LODWORD(v204) = 0;
    WTF::fastFree((unint64_t)v133, (void *)v20, v21, v22, v23, v24, v25, v26);
  }
  return v168;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  size_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  BOOL v37;
  WTF *v38;
  int *v39;
  _BYTE *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  __int16 *v57;
  __int16 *v58;
  char v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  char *v106;
  __int16 *v107;
  __int16 *v108;
  char v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  BOOL v134;
  WTF::StringImpl *v137;
  uint64_t v138;
  unint64_t i;
  char *v140;
  __int16 *v141;
  __int16 *v142;
  char v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  size_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  int *v182;
  _BYTE *v183;
  int v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  size_t v194;
  _BYTE *v195;
  int *v196;
  _BYTE *v197;
  const void *v198;
  size_t v199;
  size_t __n;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  uint64_t v204;
  _BYTE v205[512];
  char v206;
  int v207;
  char v208;
  int v209;
  char v210;
  char v211;
  unint64_t v212;
  _BYTE v213[16];
  WTF::StringImpl *v214;
  __int128 v215;
  __int16 v216;
  uint64_t v217;

  v10 = (uint64_t)a1;
  v217 = *MEMORY[0x1E0C80C00];
  v213[0] = 0;
  v213[8] = 0;
  v11 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(**a1, (uint64_t)v213, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = v11;
    v201 = a2;
    v202 = a3;
    v19 = (WTF *)v205;
    v203 = (WTF *)v205;
    v204 = 16;
    v206 = 0;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = BYTE4(a3);
    v212 = 0;
    JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
    v27 = **(_QWORD **)(v10 + 24);
    if (*(_DWORD *)(v27 + 80))
    {
      v167 = *(_DWORD *)(v27 + 80);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v27 + 64), 7u, v21, v22, v23, v24, v25, v26);
      if (*(_QWORD *)(v27 + 16))
      {
        v168 = 0;
        goto LABEL_92;
      }
    }
    v28 = **(_QWORD **)(v10 + 16);
    if (v18 >= v28)
      v29 = **(WTF ***)(v10 + 16);
    else
      v29 = (WTF *)v18;
    if (v29)
    {
      v19 = 0;
      v20 = 10;
      v21 = 24;
      while (1)
      {
        v30 = *(_QWORD *)(**(_QWORD **)v10 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v31 = *(unsigned __int16 *)(v30 + 2 * (_QWORD)v19);
        v32 = *(_QWORD *)(**(_QWORD **)(v10 + 8) + 56);
        if (v31 > 0xFF)
        {
          v43 = v32 + 48368;
          v44 = 9 * ((~((_DWORD)v31 << 15) + v31) ^ ((~((_DWORD)v31 << 15) + v31) >> 10));
          v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
          v46 = (v45 ^ BYTE2(v45));
          v47 = (_DWORD *)(v32 + 48368 + 24 * (v45 ^ BYTE2(v45)));
          if (*v47 != (_DWORD)v31
            || (v48 = v43 + 24 * v46, v49 = *(_QWORD *)(v48 + 8), v33 = (WTF::StringImpl **)(v48 + 8), !v49))
          {
            *v47 = v31;
            WTF::String::number(v31, (uint64_t *)&v214);
            v21 = 24;
            v74 = v43 + 24 * v46;
            v75 = (uint64_t)v214;
            v214 = 0;
            v77 = *(WTF::StringImpl **)(v74 + 8);
            v33 = (WTF::StringImpl **)(v74 + 8);
            v76 = v77;
            *v33 = (WTF::StringImpl *)v75;
            if (v77)
            {
              if (*(_DWORD *)v76 == 2)
              {
                WTF::StringImpl::~StringImpl(v76, v73, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                v21 = 24;
              }
              else
              {
                *(_DWORD *)v76 -= 2;
              }
            }
            v78 = v214;
            v214 = 0;
            v20 = 10;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
            *(_QWORD *)(v43 + 24 * v46 + 16) = 0;
          }
        }
        else
        {
          v33 = (WTF::StringImpl **)(v32 + 16 * *(unsigned __int16 *)(v30 + 2 * (_QWORD)v19) + 44272);
          if (!*v33)
          {
            v34 = 0;
            do
            {
              v35 = (v31 % 0xA) | 0x30;
              v36 = (WTF::StringImpl *)((char *)&v214 + v34);
              *((_BYTE *)&v215 + v34-- + 4) = (v31 % 0xA) | 0x30;
              v37 = v31 > 9;
              LODWORD(v31) = v31 / 0xA;
            }
            while (v37);
            v38 = (WTF *)(v34 + 14);
            if ((uint64_t)(v34 + 14) >= 15)
            {
              __break(1u);
              goto LABEL_159;
            }
            if (v34)
            {
              __n = -(uint64_t)v34;
              if ((unint64_t)-(uint64_t)v34 >> 31)
                goto LABEL_211;
              v39 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v34));
              v40 = v39 + 5;
              *v39 = 2;
              v39[1] = -(int)v34;
              *((_QWORD *)v39 + 1) = v39 + 5;
              v39[4] = 4;
              if (v34 == -1)
              {
                *v40 = v35;
              }
              else
              {
                v41 = (char *)&v215 + v34 + 5;
                v42 = v39;
                memcpy(v40, v41, __n);
                v39 = v42;
              }
              v20 = 10;
              v21 = 24;
            }
            else
            {
              v39 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v79 = *v33;
            *v33 = (WTF::StringImpl *)v39;
            if (v79)
            {
              if (*(_DWORD *)v79 == 2)
              {
                WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
                WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
                v21 = 24;
                v20 = 10;
              }
              else
              {
                *(_DWORD *)v79 -= 2;
              }
            }
          }
        }
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v50 = (uint64_t)*v33;
        if (*v33)
          v51 = *(_DWORD *)(v50 + 4);
        else
          v51 = 0;
        v52 = __CFADD__(v207, v51);
        v53 = v207 + v51;
        if (v52)
          v206 = 1;
        else
          v207 = v53;
        v54 = v18 & 0xFFFFFF0000000000;
        if (v50)
        {
          v55 = *(_QWORD *)(v50 + 8);
          v18 = *(unsigned int *)(v50 + 4) | ((unint64_t)((*(_DWORD *)(v50 + 16) >> 2) & 1) << 32) | v54;
          *(_DWORD *)v50 += 2;
        }
        else
        {
          v55 = 0;
          v18 = v54 | 0x100000000;
        }
        v214 = (WTF::StringImpl *)v50;
        *(_QWORD *)&v215 = v55;
        *((_QWORD *)&v215 + 1) = v18;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v70 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v70)
          {
            v59 = 1;
            v20 = 10;
            v21 = 24;
            goto LABEL_33;
          }
          v71 = (char *)v203 + 32 * HIDWORD(v204);
          v72 = *(_QWORD *)v70;
          *(_QWORD *)v70 = 0;
          *(_QWORD *)v71 = v72;
          *(_OWORD *)(v71 + 8) = *(_OWORD *)(v70 + 8);
          v57 = (__int16 *)(v71 + 24);
          v58 = (__int16 *)(v70 + 24);
          v20 = 10;
          v21 = 24;
        }
        else
        {
          v56 = (char *)v203 + 32 * HIDWORD(v204);
          v214 = 0;
          *(_QWORD *)v56 = v50;
          *(_OWORD *)(v56 + 8) = v215;
          v57 = (__int16 *)(v56 + 24);
          v58 = &v216;
        }
        v59 = 0;
        *v57 = *v58;
        ++HIDWORD(v204);
LABEL_33:
        v210 |= v59;
        v60 = v214;
        v214 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::~StringImpl(v60, (WTF::AtomStringImpl *)0xA, 24, v22, v23, v24, v25, v26);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
            v21 = 24;
            v20 = 10;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v212 = 0;
        if (*(_DWORD *)(v32 + 80))
        {
          v104 = *(_DWORD *)(v32 + 80);
          if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
        }
        v61 = **(_QWORD **)(v10 + 24);
        if (*(_DWORD *)(v61 + 80))
        {
          v105 = *(_DWORD *)(v61 + 80);
          if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, 24, v22, v23, v24, v25, v26);
            v21 = 24;
            v20 = 10;
          }
          if (*(_QWORD *)(v61 + 16))
          {
            v168 = 0;
            v19 = (WTF *)v205;
            goto LABEL_92;
          }
        }
        v19 = (WTF *)((char *)v19 + 1);
        if (v19 == v29)
        {
          v28 = **(_QWORD **)(v10 + 16);
          v19 = (WTF *)v205;
          break;
        }
      }
    }
    if ((unint64_t)v29 < v28)
    {
      do
      {
        if (v209 == -1)
          v208 = 1;
        ++v209;
        v214 = 0;
        *(_QWORD *)&v215 = 0;
        *((_QWORD *)&v215 + 1) = 0x100000000;
        v216 = 0;
        if (HIDWORD(v204) == (_DWORD)v204)
        {
          v119 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
          if (!v119)
          {
            v109 = 1;
            goto LABEL_80;
          }
          v120 = (char *)v203 + 32 * HIDWORD(v204);
          v121 = *(_QWORD *)v119;
          *(_QWORD *)v119 = 0;
          *(_QWORD *)v120 = v121;
          *(_OWORD *)(v120 + 8) = *(_OWORD *)(v119 + 8);
          v107 = (__int16 *)(v120 + 24);
          v108 = (__int16 *)(v119 + 24);
        }
        else
        {
          v106 = (char *)v203 + 32 * HIDWORD(v204);
          *(_QWORD *)v106 = 0;
          *(_OWORD *)(v106 + 8) = v215;
          v107 = (__int16 *)(v106 + 24);
          v108 = &v216;
        }
        v109 = 0;
        *v107 = *v108;
        ++HIDWORD(v204);
LABEL_80:
        v210 |= v109;
        v110 = v214;
        v214 = 0;
        if (v110)
        {
          if (*(_DWORD *)v110 == 2)
          {
            WTF::StringImpl::~StringImpl(v110, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_DWORD *)v110 -= 2;
          }
        }
        v212 = 0;
        v29 = (WTF *)((char *)v29 + 1);
      }
      while ((unint64_t)v29 < **(_QWORD **)(v10 + 16));
    }
    if (v208)
    {
      __break(0xC471u);
      JUMPOUT(0x198AE60D0);
    }
    v20 = **(_QWORD **)(v10 + 8);
    if (v209 != 1)
    {
      v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_92:
      if (HIDWORD(v204))
      {
        v122 = v203;
        v123 = 32 * HIDWORD(v204);
        do
        {
          v124 = *(WTF::StringImpl **)v122;
          *(_QWORD *)v122 = 0;
          if (v124)
          {
            if (*(_DWORD *)v124 == 2)
            {
              WTF::StringImpl::~StringImpl(v124, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
              WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            else
            {
              *(_DWORD *)v124 -= 2;
            }
          }
          v122 = (WTF *)((char *)v122 + 32);
          v123 -= 32;
        }
        while (v123);
      }
      v133 = v203;
      v134 = v19 == v203;
      goto LABEL_101;
    }
    v168 = v212;
    if (v212)
      goto LABEL_92;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE6184);
    }
    v10 = *(_QWORD *)(v20 + 56);
    v38 = v203;
    v34 = *((unsigned int *)v203 + 4);
    v36 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v34 == *((_DWORD *)v36 + 1))
      {
        *(_DWORD *)v36 += 2;
LABEL_112:
        v214 = v36;
        goto LABEL_113;
      }
    }
    else
    {
LABEL_159:
      if (!(_DWORD)v34)
        goto LABEL_112;
    }
    v181 = (_BYTE *)*((_QWORD *)v38 + 1);
    if (*((_BYTE *)v38 + 20))
    {
      if (v181)
      {
        if ((_DWORD)v34)
        {
          if ((v34 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE6194);
          }
          v182 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
          v183 = v182 + 5;
          *v182 = 2;
          v182[1] = v34;
          *((_QWORD *)v182 + 1) = v182 + 5;
          v182[4] = 4;
          if ((_DWORD)v34 == 1)
          {
            *v183 = *v181;
LABEL_182:
            v214 = (WTF::StringImpl *)v182;
LABEL_113:
            v168 = JSC::jsString(v10, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v137 = v214;
            v214 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
              {
                WTF::StringImpl::~StringImpl(v137, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
              }
              else
              {
                *(_DWORD *)v137 -= 2;
              }
            }
            goto LABEL_92;
          }
          v193 = v181;
          v194 = v34;
          goto LABEL_181;
        }
        goto LABEL_177;
      }
    }
    else if (v181)
    {
      if ((_DWORD)v34)
      {
        if (v34 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE619CLL);
        }
        v182 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v34 + 20));
        v183 = v182 + 5;
        *v182 = 2;
        v182[1] = v34;
        *((_QWORD *)v182 + 1) = v182 + 5;
        v182[4] = 0;
        if ((_DWORD)v34 == 1)
        {
          *(_WORD *)v183 = *(_WORD *)v181;
          goto LABEL_182;
        }
        v193 = v181;
        v194 = 2 * v34;
LABEL_181:
        memcpy(v183, v193, v194);
        goto LABEL_182;
      }
LABEL_177:
      v182 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_182;
    }
    v182 = 0;
    goto LABEL_182;
  }
  v201 = a2;
  v202 = a3;
  v203 = (WTF *)v205;
  v204 = 16;
  v206 = 0;
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  v211 = BYTE4(a3);
  v212 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v201, **(JSC::JSGlobalObject ***)(v10 + 8), **(_QWORD **)(v10 + 16), v12, v13, v14, v15, v16);
  v138 = **(_QWORD **)(v10 + 24);
  if (*(_DWORD *)(v138 + 80))
  {
    v184 = *(_DWORD *)(v138 + 80);
    if ((v184 & 0x27) != 0 && (v184 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v138 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v138 + 16))
    {
      v168 = 0;
      goto LABEL_136;
    }
  }
  if (**(_QWORD **)(v10 + 16))
  {
    for (i = 0; i < **(_QWORD **)(v10 + 16); ++i)
    {
      if (v209 == -1)
        v208 = 1;
      ++v209;
      v214 = 0;
      *(_QWORD *)&v215 = 0;
      *((_QWORD *)&v215 + 1) = 0x100000000;
      v216 = 0;
      if (HIDWORD(v204) == (_DWORD)v204)
      {
        v153 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v203, (WTF::AtomStringImpl *)(HIDWORD(v204) + 1), (unint64_t)&v214, v22, v23, v24, v25, v26);
        if (!v153)
        {
          v143 = 1;
          goto LABEL_124;
        }
        v154 = (char *)v203 + 32 * HIDWORD(v204);
        v155 = *(_QWORD *)v153;
        *(_QWORD *)v153 = 0;
        *(_QWORD *)v154 = v155;
        *(_OWORD *)(v154 + 8) = *(_OWORD *)(v153 + 8);
        v141 = (__int16 *)(v154 + 24);
        v142 = (__int16 *)(v153 + 24);
      }
      else
      {
        v140 = (char *)v203 + 32 * HIDWORD(v204);
        *(_QWORD *)v140 = 0;
        *(_OWORD *)(v140 + 8) = v215;
        v141 = (__int16 *)(v140 + 24);
        v142 = &v216;
      }
      v143 = 0;
      *v141 = *v142;
      ++HIDWORD(v204);
LABEL_124:
      v210 |= v143;
      v144 = v214;
      v214 = 0;
      if (v144)
      {
        if (*(_DWORD *)v144 == 2)
        {
          WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        }
        else
        {
          *(_DWORD *)v144 -= 2;
        }
      }
      v212 = 0;
    }
  }
  if (v208)
  {
    __break(0xC471u);
    JUMPOUT(0x198AE617CLL);
  }
  v20 = **(_QWORD **)(v10 + 8);
  if (v209 == 1)
  {
    v168 = v212;
    if (v212)
      goto LABEL_136;
    if (!HIDWORD(v204))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE618CLL);
    }
    v169 = *(_QWORD *)(v20 + 56);
    v170 = *((unsigned int *)v203 + 4);
    v171 = *(WTF::StringImpl **)v203;
    if (*(_QWORD *)v203)
    {
      if ((_DWORD)v170 == *((_DWORD *)v171 + 1))
      {
        *(_DWORD *)v171 += 2;
LABEL_153:
        v214 = v171;
        goto LABEL_154;
      }
    }
    else if (!(_DWORD)v170)
    {
      goto LABEL_153;
    }
    v195 = (_BYTE *)*((_QWORD *)v203 + 1);
    if (*((_BYTE *)v203 + 20))
    {
      if (v195)
      {
        if ((_DWORD)v170)
        {
          if ((v170 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE61A4);
          }
          v196 = (int *)WTF::fastCompactMalloc((WTF *)(v170 + 20));
          v197 = v196 + 5;
          *v196 = 2;
          v196[1] = v170;
          *((_QWORD *)v196 + 1) = v196 + 5;
          v196[4] = 4;
          if ((_DWORD)v170 == 1)
          {
            *v197 = *v195;
LABEL_204:
            v214 = (WTF::StringImpl *)v196;
LABEL_154:
            v168 = JSC::jsString(v169, (JSC::VM *)&v214, v21, v22, v23, v24, v25, v26);
            v172 = v214;
            v214 = 0;
            if (v172)
            {
              if (*(_DWORD *)v172 == 2)
              {
                WTF::StringImpl::~StringImpl(v172, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
              }
              else
              {
                *(_DWORD *)v172 -= 2;
              }
            }
            goto LABEL_136;
          }
          v198 = v195;
          v199 = v170;
          goto LABEL_203;
        }
        goto LABEL_200;
      }
    }
    else if (v195)
    {
      if ((_DWORD)v170)
      {
        if (v170 > 0x7FFFFFEF)
        {
LABEL_211:
          __break(0xC471u);
          JUMPOUT(0x198AE60C8);
        }
        v196 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v170 + 20));
        v197 = v196 + 5;
        *v196 = 2;
        v196[1] = v170;
        *((_QWORD *)v196 + 1) = v196 + 5;
        v196[4] = 0;
        if ((_DWORD)v170 == 1)
        {
          *(_WORD *)v197 = *(_WORD *)v195;
          goto LABEL_204;
        }
        v198 = v195;
        v199 = 2 * v170;
LABEL_203:
        memcpy(v197, v198, v199);
        goto LABEL_204;
      }
LABEL_200:
      v196 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_204;
    }
    v196 = 0;
    goto LABEL_204;
  }
  v168 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v201, (int8x16_t *)v20, v21, v22, v23, v24, v25, v26);
LABEL_136:
  if (HIDWORD(v204))
  {
    v156 = v203;
    v157 = 32 * HIDWORD(v204);
    do
    {
      v158 = *(WTF::StringImpl **)v156;
      *(_QWORD *)v156 = 0;
      if (v158)
      {
        if (*(_DWORD *)v158 == 2)
        {
          WTF::StringImpl::~StringImpl(v158, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
        }
        else
        {
          *(_DWORD *)v158 -= 2;
        }
      }
      v156 = (WTF *)((char *)v156 + 32);
      v157 -= 32;
    }
    while (v157);
  }
  v133 = v203;
  v134 = v205 == (_BYTE *)v203;
LABEL_101:
  if (!v134 && v133 != 0)
  {
    v203 = 0;
    LODWORD(v204) = 0;
    WTF::fastFree((unint64_t)v133, (void *)v20, v21, v22, v23, v24, v25, v26);
  }
  return v168;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSGlobalObject **v34;
  uint64_t v35;
  JSC::JSGlobalObject *v36;
  unint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  BOOL v54;
  char *v55;
  __int16 *v56;
  __int16 *v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int *v74;
  BOOL v76;
  char *v77;
  __int16 *v78;
  __int16 *v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int **v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  int v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  __int16 *v145;
  __int16 *v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  int v178;
  int v179;
  char v180;
  int v181;
  int v182;
  int v183;
  int **v184;
  uint64_t (*v185)(WTF::StringImpl **);
  int v186;
  int v187;
  WTF::StringImpl *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  double v215;
  char *v216;
  __int16 *v217;
  __int16 *v218;
  char v219;
  WTF::StringImpl *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  int **v234;
  uint64_t v235;
  unsigned int v236;
  int *v237;
  _BYTE *v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  int v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  double *v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  WTF::StringImpl **v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  char *v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  __int16 *v319;
  __int16 *v320;
  char v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  WTF *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  WTF *v335;
  BOOL v336;
  uint64_t v339;
  size_t v340;
  int *v341;
  WTF::StringImpl *v342;
  JSC::ArrayBuffer *v343;
  int v344;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _BYTE *v366;
  int *v367;
  _BYTE *v368;
  uint64_t v369;
  unint64_t i;
  char *v371;
  __int16 *v372;
  __int16 *v373;
  char v374;
  WTF::StringImpl *v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  uint64_t v386;
  WTF *v387;
  uint64_t v388;
  WTF::StringImpl *v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  size_t v399;
  int *v400;
  WTF::StringImpl *v401;
  int v402;
  unint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const void *v411;
  size_t v412;
  _BYTE *v413;
  int *v414;
  _BYTE *v415;
  uint64_t v416;
  const void *v417;
  size_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t StatusReg;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  WTF *v434;
  uint64_t v435;
  _BYTE v436[512];
  char v437;
  int v438;
  char v439;
  int v440;
  char v441;
  char v442;
  unint64_t v443;
  unint64_t v444;
  char v445;
  WTF::StringImpl *v446;
  int8x16_t v447;
  __int16 v448;
  uint64_t v449;

  v449 = *MEMORY[0x1E0C80C00];
  LOBYTE(v444) = 0;
  v445 = 0;
  v11 = **(_QWORD **)a1;
  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, &v444, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_519;
  v19 = *(unsigned __int8 *)(v11 + 40);
  if ((v19 & 1) == 0)
  {
    v20 = *(_QWORD *)(v11 + 24);
    goto LABEL_4;
  }
  if (v19 == 88)
  {
LABEL_477:
    v343 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
    goto LABEL_491;
  }
  if (v19 == 48 || v19 == 16)
  {
    v343 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v354 = v19 - 90;
    if (v354 > 0x33)
    {
LABEL_519:
      v432 = a2;
      v433 = a3;
      v434 = (WTF *)v436;
      v435 = 16;
      v437 = 0;
      v438 = 0;
      v439 = 0;
      v440 = 0;
      v441 = 0;
      v442 = BYTE4(a3);
      v443 = 0;
      JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v432, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
      v369 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v369 + 80))
      {
        v402 = *(_DWORD *)(v369 + 80);
        if ((v402 & 0x27) != 0 && (v402 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v369 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v369 + 16))
        {
          v328 = 0;
          goto LABEL_539;
        }
      }
      if (**(_QWORD **)(a1 + 16))
      {
        for (i = 0; i < **(_QWORD **)(a1 + 16); ++i)
        {
          if (v440 == -1)
            v439 = 1;
          ++v440;
          v446 = 0;
          v447.i64[0] = 0;
          v447.i64[1] = 0x100000000;
          v448 = 0;
          if (HIDWORD(v435) == (_DWORD)v435)
          {
            v384 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
            if (!v384)
            {
              v374 = 1;
              goto LABEL_527;
            }
            v385 = (char *)v434 + 32 * HIDWORD(v435);
            v386 = *(_QWORD *)v384;
            *(_QWORD *)v384 = 0;
            *(_QWORD *)v385 = v386;
            *(_OWORD *)(v385 + 8) = *(_OWORD *)(v384 + 8);
            v372 = (__int16 *)(v385 + 24);
            v373 = (__int16 *)(v384 + 24);
          }
          else
          {
            v371 = (char *)v434 + 32 * HIDWORD(v435);
            *(_QWORD *)v371 = 0;
            *(int8x16_t *)(v371 + 8) = v447;
            v372 = (__int16 *)(v371 + 24);
            v373 = &v448;
          }
          v374 = 0;
          *v372 = *v373;
          ++HIDWORD(v435);
LABEL_527:
          v441 |= v374;
          v375 = v446;
          v446 = 0;
          if (v375)
          {
            if (*(_DWORD *)v375 == 2)
            {
              WTF::StringImpl::~StringImpl(v375, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
            }
            else
            {
              *(_DWORD *)v375 -= 2;
            }
          }
          v443 = 0;
        }
      }
      if (v439)
      {
        __break(0xC471u);
        JUMPOUT(0x198AE833CLL);
      }
      v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
      if (v440 != 1)
      {
        v328 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v432, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_539:
        if (HIDWORD(v435))
        {
          v387 = v434;
          v388 = 32 * HIDWORD(v435);
          do
          {
            v389 = *(WTF::StringImpl **)v387;
            *(_QWORD *)v387 = 0;
            if (v389)
            {
              if (*(_DWORD *)v389 == 2)
              {
                WTF::StringImpl::~StringImpl(v389, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
              }
              else
              {
                *(_DWORD *)v389 -= 2;
              }
            }
            v387 = (WTF *)((char *)v387 + 32);
            v388 -= 32;
          }
          while (v388);
        }
        v335 = v434;
        v336 = v436 == (_BYTE *)v434;
        goto LABEL_460;
      }
      v328 = v443;
      if (v443)
        goto LABEL_539;
      if (!HIDWORD(v435))
      {
        __break(0xC471u);
        JUMPOUT(0x198AE834CLL);
      }
      v398 = *((_QWORD *)v21 + 7);
      v399 = *((unsigned int *)v434 + 4);
      v400 = *(int **)v434;
      if (*(_QWORD *)v434)
      {
        if ((_DWORD)v399 == v400[1])
        {
          *v400 += 2;
LABEL_553:
          v446 = (WTF::StringImpl *)v400;
          goto LABEL_554;
        }
      }
      else if (!(_DWORD)v399)
      {
        goto LABEL_553;
      }
      v413 = (_BYTE *)*((_QWORD *)v434 + 1);
      if (*((_BYTE *)v434 + 20))
      {
        if (v413)
        {
          if ((_DWORD)v399)
          {
            if ((v399 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198AE8364);
            }
            v414 = (int *)WTF::fastCompactMalloc((WTF *)(v399 + 20));
            v415 = v414 + 5;
            *v414 = 2;
            v414[1] = v399;
            *((_QWORD *)v414 + 1) = v414 + 5;
            v414[4] = 4;
            if ((_DWORD)v399 == 1)
            {
              *v415 = *v413;
LABEL_592:
              v446 = (WTF::StringImpl *)v414;
LABEL_554:
              v328 = JSC::jsString(v398, (JSC::VM *)&v446, (uint64_t)v22, v23, v24, v25, v26, v27);
              v401 = v446;
              v446 = 0;
              if (v401)
              {
                if (*(_DWORD *)v401 == 2)
                {
                  WTF::StringImpl::~StringImpl(v401, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v403, v404, v405, v406, v407, v408, v409, v410);
                }
                else
                {
                  *(_DWORD *)v401 -= 2;
                }
              }
              goto LABEL_539;
            }
            v417 = v413;
            v418 = v399;
            goto LABEL_591;
          }
          goto LABEL_588;
        }
      }
      else if (v413)
      {
        if ((_DWORD)v399)
        {
          if (v399 > 0x7FFFFFEF)
          {
            __break(0xC471u);
LABEL_600:
            __break(1u);
LABEL_601:
            JUMPOUT(0x198AE825CLL);
          }
          v414 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v399 + 20));
          v415 = v414 + 5;
          *v414 = 2;
          v414[1] = v399;
          *((_QWORD *)v414 + 1) = v414 + 5;
          v414[4] = 0;
          if ((_DWORD)v399 == 1)
          {
            *(_WORD *)v415 = *(_WORD *)v413;
            goto LABEL_592;
          }
          v417 = v413;
          v418 = 2 * v399;
LABEL_591:
          memcpy(v415, v417, v418);
          goto LABEL_592;
        }
LABEL_588:
        v414 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_592;
      }
      v414 = 0;
      goto LABEL_592;
    }
    if (((1 << v354) & 0xF400000000000) == 0)
    {
      if (((1 << v354) & 0xF) == 0)
        goto LABEL_519;
      goto LABEL_477;
    }
    v343 = *(JSC::ArrayBuffer **)(v11 + 48);
  }
LABEL_491:
  if (!v343)
    goto LABEL_519;
  *(_DWORD *)v343 += 2;
  if (v445)
  {
    v355 = v444;
  }
  else
  {
    if (*((_BYTE *)v343 + 64) && (v416 = *((_QWORD *)v343 + 4)) != 0)
      v355 = atomic_load((unint64_t *)(v416 + 32));
    else
      v355 = *((_QWORD *)v343 + 6);
    v444 = v355;
    v445 = 1;
  }
  v356 = v355 - *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(v11 + 5) - 42) > 7u)
    LOBYTE(v357) = 0;
  else
    v357 = qword_199158A40[(char)(*(_BYTE *)(v11 + 5) - 42)];
  v20 = v356 >> v357;
  v44 = *(_DWORD *)v343 == 2;
  *(_DWORD *)v343 -= 2;
  if (v44)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v343, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
  }
LABEL_4:
  v432 = a2;
  v433 = a3;
  v434 = (WTF *)v436;
  v435 = 16;
  v437 = 0;
  v438 = 0;
  v439 = 0;
  v440 = 0;
  v441 = 0;
  v442 = BYTE4(a3);
  v443 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v432, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
  v28 = **(_QWORD **)(a1 + 24);
  if (!*(_DWORD *)(v28 + 80))
    goto LABEL_5;
  v344 = *(_DWORD *)(v28 + 80);
  if ((v344 & 0x27) != 0 && (v344 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
  if (!*(_QWORD *)(v28 + 16))
  {
LABEL_5:
    v29 = **(_QWORD **)(a1 + 16);
    if (v20 >= v29)
      v30 = **(_QWORD **)(a1 + 16);
    else
      v30 = v20;
    if (v30)
    {
      v31 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v32 = *(_QWORD *)(**(_QWORD **)a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v33 = *(_QWORD *)(v32 + 8 * v31);
        v34 = **(JSC::JSGlobalObject ****)(a1 + 8);
        if (v33 >= 0)
          v35 = *(_QWORD *)(v32 + 8 * v31);
        else
          v35 = -v33;
        v36 = v34[7];
        if (v33)
        {
          v37 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v34, v34[7], (JSC::VM *)1, v23, v24, v25, v26, v27);
          if (!*((_DWORD *)v36 + 20))
            goto LABEL_18;
          v187 = *((_DWORD *)v36 + 20);
          if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*((_QWORD *)v36 + 2))
          {
            v37 = 0;
          }
          else
          {
LABEL_18:
            v39 = *(_QWORD *)(v37 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_QWORD *)v39 = v35;
            *(_BYTE *)(v37 + 16) = v33 < 0;
          }
        }
        else
        {
          v37 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v34, v34[7], 0, v23, v24, v25, v26, v27);
        }
        v40 = **(_QWORD **)(a1 + 24);
        if (*(_DWORD *)(v40 + 80))
        {
          v178 = *(_DWORD *)(v40 + 80);
          if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v40 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v40 + 16))
          {
LABEL_475:
            v328 = 0;
            goto LABEL_440;
          }
        }
        v41 = **(_QWORD **)(a1 + 8);
        v42 = *(_QWORD *)(v41 + 56);
        if ((v37 & 0xFFFE000000000002) == 0)
        {
          v43 = *(unsigned __int8 *)(v37 + 5);
          v44 = v43 != 2 || v37 == 0;
          v45 = !v44;
          if (v44)
            goto LABEL_59;
          v46 = *(_QWORD *)(v37 + 8);
          if ((v46 & 1) == 0)
          {
            if (v46)
            {
              v47 = *(unsigned int *)(v46 + 16);
              v48 = *(const char **)(v46 + 8);
              v46 = *(unsigned int *)(v46 + 4);
              v49 = (v47 >> 2) & 1;
            }
            else
            {
              v48 = 0;
              v49 = 1;
            }
            v50 = v430 & 0xFFFFFF0000000000 | v46 | (v49 << 32);
            v430 = v50;
            v51 = v37;
            goto LABEL_36;
          }
          if ((v46 & 2) == 0)
          {
            v124 = (unint64_t)*JSC::JSRopeString::resolveRope(v37, **(JSC::JSGlobalObject ***)(a1 + 8), (uint64_t)v22, v23, v38, v24, v25, v26, v27);
            if (v124)
            {
              v125 = *(unsigned int *)(v124 + 16);
              v48 = *(const char **)(v124 + 8);
              v124 = *(unsigned int *)(v124 + 4);
              v126 = (v125 >> 2) & 1;
            }
            else
            {
              v48 = 0;
              v126 = 1;
            }
            v50 = v424 & 0xFFFFFF0000000000 | v124 | (v126 << 32);
            v51 = v37;
            v424 = v50;
            goto LABEL_36;
          }
          v51 = *(_QWORD *)(v37 + 20) & 0xFFFFFFFFFLL;
          v92 = v428 & 0xFFFFFF0000000000;
          v93 = *(_QWORD *)(v51 + 8);
          if (v93)
          {
            v94 = *(unsigned int *)(v93 + 4);
            v95 = ((unint64_t)*(unsigned int *)(v93 + 16) >> 2) & 1;
            v428 = v92 | (v95 << 32) | v94;
            v96 = *(_QWORD *)(v37 + 24);
            v97 = v96 >> 16;
            if (v94 > (v96 >> 16))
            {
              v48 = *(const char **)(v93 + 8);
              v98 = *(_DWORD *)(v37 + 16);
              if ((int)v94 - (int)v97 > v98 || (v98 = v94 - v97, (_DWORD)v97))
              {
                v99 = (v96 >> 16);
                v50 = v98;
                v100 = v94 - v97;
                if ((_DWORD)v95)
                {
                  if (v100 < v98)
                    goto LABEL_600;
                  v48 += v99;
                  v50 = v98 | 0x100000000;
                }
                else
                {
                  if (v100 < v98)
                    goto LABEL_600;
                  v48 += 2 * v99;
                }
              }
              else
              {
                v50 = v428;
              }
LABEL_36:
              if (*(_DWORD *)(v42 + 80))
              {
                v186 = *(_DWORD *)(v42 + 80);
                if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
                if (*(_QWORD *)(v42 + 16))
                {
                  LOBYTE(v43) = 0;
                  goto LABEL_59;
                }
              }
              v52 = *(WTF::StringImpl **)(v51 + 8);
              if ((v52 & 1) != 0)
              {
                v52 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v51, 0, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
                if (v52)
LABEL_39:
                  *(_DWORD *)v52 += 2;
              }
              else if (v52)
              {
                goto LABEL_39;
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              if (v443 == v37)
              {
                if (!HIDWORD(v435))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198AE8274);
                }
                v120 = (char *)v434 + 32 * HIDWORD(v435) - 32;
                v121 = *((unsigned __int16 *)v120 + 12);
                if (v121 != 0xFFFF)
                {
                  *((_WORD *)v120 + 12) = v121 + 1;
                  v122 = *((_DWORD *)v120 + 4);
                  v115 = __CFADD__(v438, v122);
                  v123 = v438 + v122;
                  if (v115)
                  {
                    v437 = 1;
                    if (v52)
                      goto LABEL_154;
                  }
                  else
                  {
                    v438 = v123;
                    if (v52)
                    {
LABEL_154:
                      if (*(_DWORD *)v52 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v52, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                        WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
                      }
                      else
                      {
                        *(_DWORD *)v52 -= 2;
                      }
                    }
                  }
LABEL_58:
                  LOBYTE(v43) = 1;
LABEL_59:
                  v60 = v45 & v43;
                  goto LABEL_60;
                }
              }
              if (__CFADD__(v438, (_DWORD)v50))
                v437 = 1;
              else
                v438 += v50;
              v54 = (v50 & 0xFF00000000) != 0 && v442 != 0;
              v442 = v54;
              v446 = v52;
              v447.i64[0] = (uint64_t)v48;
              v447.i64[1] = v50;
              v448 = 0;
              if (HIDWORD(v435) != (_DWORD)v435)
              {
                v55 = (char *)v434 + 32 * HIDWORD(v435);
                v446 = 0;
                *(_QWORD *)v55 = v52;
                v56 = &v448;
                v38 = v447;
                *(int8x16_t *)(v55 + 8) = v447;
                v57 = (__int16 *)(v55 + 24);
                goto LABEL_53;
              }
              v149 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
              if (v149)
              {
                v150 = (char *)v434 + 32 * HIDWORD(v435);
                v151 = *(_QWORD *)v149;
                *(_QWORD *)v149 = 0;
                *(_QWORD *)v150 = v151;
                v38 = *(int8x16_t *)(v149 + 8);
                *(int8x16_t *)(v150 + 8) = v38;
                v57 = (__int16 *)(v150 + 24);
                v56 = (__int16 *)(v149 + 24);
LABEL_53:
                v58 = 0;
                *v57 = *v56;
                ++HIDWORD(v435);
              }
              else
              {
                v58 = 1;
              }
              v441 |= v58;
              v59 = (unint64_t)v446;
              v446 = 0;
              if (!v59)
              {
LABEL_57:
                v443 = v37;
                goto LABEL_58;
              }
              if (*(_DWORD *)v59 != 2)
              {
                *(_DWORD *)v59 -= 2;
                goto LABEL_57;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v59, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              v110 = *(_QWORD *)(StatusReg + 752);
              if (!v110)
              {
                pas_try_deallocate_slow_no_cache(v59, (uint64_t)&bmalloc_heap_config, 1);
                goto LABEL_57;
              }
              if (!(v59 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v59 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v59)) & 1) != 0)
              {
LABEL_138:
                v111 = *(unsigned int *)(v110 + 8000);
                if (v111 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v110, v59, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v110 + 8 * v111) = v59 | 0x5000000000000;
                  *(_DWORD *)(v110 + 8000) = v111 + 1;
                }
                goto LABEL_57;
              }
              if (v59 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v59 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v59 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v59) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_138;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v110, v59, 1, v23, v24, v25, v26, v27);
              goto LABEL_57;
            }
          }
          else
          {
            v428 = v92 | 0x100000000;
          }
          v50 = 0x100000000;
          v48 = "";
          goto LABEL_36;
        }
        if (v37 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v215 = v37 - 0x2000000000000;
          if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((*(_QWORD *)&v215 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v233 = (int)v215, (double)(int)v233 == v215)
              && ((*(_QWORD *)&v215 & 0x8000000000000000) == 0 || (_DWORD)v233))
            {
              if (v233 > 0xFF)
              {
                v267 = v42 + 48368;
                v268 = 9 * ((~((_DWORD)v233 << 15) + v233) ^ ((~((_DWORD)v233 << 15) + v233) >> 10));
                v269 = (v268 ^ (v268 >> 6)) + ~((v268 ^ (v268 >> 6)) << 11);
                v270 = (v269 ^ BYTE2(v269));
                v271 = (_DWORD *)(v42 + 48368 + 24 * (v269 ^ BYTE2(v269)));
                if (*v271 != (_DWORD)v233
                  || (v272 = v267 + 24 * v270, v273 = *(_QWORD *)(v272 + 8), v234 = (int **)(v272 + 8), !v273))
                {
                  *v271 = v233;
                  WTF::String::number(v233, (uint64_t *)&v446);
                  v287 = v267 + 24 * v270;
                  v288 = (int *)v446;
                  v446 = 0;
                  v290 = *(WTF::StringImpl **)(v287 + 8);
                  v234 = (int **)(v287 + 8);
                  v289 = v290;
                  *v234 = v288;
                  if (v290)
                  {
                    if (*(_DWORD *)v289 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v289, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
                    }
                    else
                    {
                      *(_DWORD *)v289 -= 2;
                    }
                  }
                  v300 = v446;
                  v446 = 0;
                  if (v300)
                  {
                    if (*(_DWORD *)v300 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v300, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v309, v310, v311, v312, v313, v314, v315, v316);
                    }
                    else
                    {
                      *(_DWORD *)v300 -= 2;
                    }
                  }
                  *(_QWORD *)(v267 + 24 * v270 + 16) = 0;
                }
              }
              else
              {
                v234 = (int **)(v42 + 16 * v233 + 44272);
                if (!*v234)
                {
                  v235 = 0;
                  do
                  {
                    v236 = (v233 % 0xA) | 0x30;
                    v447.i8[v235-- + 4] = (v233 % 0xA) | 0x30;
                    v107 = v233 > 9;
                    LODWORD(v233) = v233 / 0xA;
                  }
                  while (v107);
                  if (v235 + 14 >= 15)
                    goto LABEL_600;
                  if (v235)
                  {
                    if ((unint64_t)-v235 >> 31)
                    {
                      __break(0xC471u);
                      goto LABEL_601;
                    }
                    v237 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v235));
                    v238 = v237 + 5;
                    *v237 = 2;
                    v237[1] = -(int)v235;
                    *((_QWORD *)v237 + 1) = v237 + 5;
                    v237[4] = 4;
                    if (v235 == -1)
                      *v238 = v236;
                    else
                      memcpy(v238, &v447.u8[v235 + 5], -v235);
                  }
                  else
                  {
                    v237 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                  v291 = (WTF::StringImpl *)*v234;
                  *v234 = v237;
                  if (v291)
                  {
                    if (*(_DWORD *)v291 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v291, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
                    }
                    else
                    {
                      *(_DWORD *)v291 -= 2;
                    }
                  }
                }
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v240 = (WTF::StringImpl *)*v234;
              if (*v234)
                v274 = *((_DWORD *)v240 + 1);
              else
                v274 = 0;
              v115 = __CFADD__(v438, v274);
              v275 = v438 + v274;
              if (v115)
                v437 = 1;
              else
                v438 = v275;
              v276 = v419 & 0xFFFFFF0000000000;
              if (v240)
              {
                v277 = *((_QWORD *)v240 + 1);
                v419 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v276;
                *(_DWORD *)v240 += 2;
              }
              else
              {
                v277 = 0;
                v419 = v276 | 0x100000000;
              }
              v446 = v240;
              v447.i64[0] = v277;
              v245 = v419;
            }
            else
            {
              v251 = v42 + 54512;
              v252 = (*(_QWORD *)&v215 + ~(v37 << 32)) ^ ((*(_QWORD *)&v215 + ~(v37 << 32)) >> 22);
              v253 = 9 * ((v252 + ~(v252 << 13)) ^ ((v252 + ~(v252 << 13)) >> 8));
              v254 = (v253 ^ (v253 >> 15)) + ~((v253 ^ (v253 >> 15)) << 27);
              v255 = ((v254 >> 31) ^ v254);
              v256 = (double *)(v42 + 54512 + 24 * ((v254 >> 31) ^ v254));
              if (*v256 != v215
                || (v261 = v251 + 24 * v255, v262 = *(_QWORD *)(v261 + 8),
                                               v259 = (WTF::StringImpl **)(v261 + 8),
                                               !v262))
              {
                *v256 = v215;
                WTF::String::number(COERCE_DOUBLE(v37 - 0x2000000000000), (int **)&v446);
                v257 = v251 + 24 * v255;
                v260 = *(WTF::StringImpl **)(v257 + 8);
                v259 = (WTF::StringImpl **)(v257 + 8);
                v258 = v260;
                *v259 = v446;
                if (v260)
                {
                  if (*(_DWORD *)v258 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v258, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
                  }
                  else
                  {
                    *(_DWORD *)v258 -= 2;
                  }
                }
                *(_QWORD *)(v251 + 24 * v255 + 16) = 0;
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v240 = *v259;
              if (*v259)
                v263 = *((_DWORD *)v240 + 1);
              else
                v263 = 0;
              v115 = __CFADD__(v438, v263);
              v264 = v438 + v263;
              if (v115)
                v437 = 1;
              else
                v438 = v264;
              v265 = v420 & 0xFFFFFF0000000000;
              if (v240)
              {
                v266 = *((_QWORD *)v240 + 1);
                v420 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v265;
                *(_DWORD *)v240 += 2;
              }
              else
              {
                v266 = 0;
                v420 = v265 | 0x100000000;
              }
              v446 = v240;
              v447.i64[0] = v266;
              v245 = v420;
            }
          }
          else if (v37 == 7)
          {
            if (v440 == -1)
              v439 = 1;
            v239 = *(_QWORD *)(v42 + 41952);
            ++v440;
            v240 = *(WTF::StringImpl **)(v239 + 432);
            if (v240)
              v241 = *((_DWORD *)v240 + 1);
            else
              v241 = 0;
            v115 = __CFADD__(v438, v241);
            v242 = v438 + v241;
            if (v115)
              v437 = 1;
            else
              v438 = v242;
            v243 = v421 & 0xFFFFFF0000000000;
            if (v240)
            {
              v244 = *((_QWORD *)v240 + 1);
              v421 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v243;
              *(_DWORD *)v240 += 2;
            }
            else
            {
              v244 = 0;
              v421 = v243 | 0x100000000;
            }
            v446 = v240;
            v447.i64[0] = v244;
            v245 = v421;
          }
          else
          {
            if (v37 != 6)
            {
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v446 = 0;
              v447.i64[0] = 0;
              v423 = v423 & 0xFFFFFF0000000000 | 0x100000000;
              v447.i64[1] = v423;
              v448 = 0;
              if (HIDWORD(v435) != (_DWORD)v435)
              {
                v216 = (char *)v434 + 32 * HIDWORD(v435);
                *(_QWORD *)v216 = 0;
                v217 = &v448;
                v38 = v447;
                *(int8x16_t *)(v216 + 8) = v447;
                v218 = (__int16 *)(v216 + 24);
                goto LABEL_303;
              }
              v229 = (WTF::AtomStringImpl *)(HIDWORD(v435) + 1);
LABEL_317:
              v230 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, v229, (unint64_t)&v446, v23, v24, v25, v26, v27);
              if (v230)
              {
                v231 = (char *)v434 + 32 * HIDWORD(v435);
                v232 = *(_QWORD *)v230;
                *(_QWORD *)v230 = 0;
                *(_QWORD *)v231 = v232;
                v38 = *(int8x16_t *)(v230 + 8);
                *(int8x16_t *)(v231 + 8) = v38;
                v218 = (__int16 *)(v231 + 24);
                v217 = (__int16 *)(v230 + 24);
                goto LABEL_303;
              }
              v219 = 1;
LABEL_304:
              v441 |= v219;
              v220 = v446;
              v446 = 0;
              if (v220)
              {
                if (*(_DWORD *)v220 == 2)
                {
                  WTF::StringImpl::~StringImpl(v220, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
                }
                else
                {
                  *(_DWORD *)v220 -= 2;
                }
              }
              goto LABEL_179;
            }
            if (v440 == -1)
              v439 = 1;
            v246 = *(_QWORD *)(v42 + 41952);
            ++v440;
            v240 = *(WTF::StringImpl **)(v246 + 248);
            if (v240)
              v247 = *((_DWORD *)v240 + 1);
            else
              v247 = 0;
            v115 = __CFADD__(v438, v247);
            v248 = v438 + v247;
            if (v115)
              v437 = 1;
            else
              v438 = v248;
            v249 = v422 & 0xFFFFFF0000000000;
            if (v240)
            {
              v250 = *((_QWORD *)v240 + 1);
              v422 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v249;
              *(_DWORD *)v240 += 2;
            }
            else
            {
              v250 = 0;
              v422 = v249 | 0x100000000;
            }
            v446 = v240;
            v447.i64[0] = v250;
            v245 = v422;
          }
          v447.i64[1] = v245;
          v448 = 0;
          if (HIDWORD(v435) == (_DWORD)v435)
          {
            v229 = (WTF::AtomStringImpl *)(HIDWORD(v435) + 1);
            goto LABEL_317;
          }
          v278 = (char *)v434 + 32 * HIDWORD(v435);
          v446 = 0;
          *(_QWORD *)v278 = v240;
          v217 = &v448;
          v38 = v447;
          *(int8x16_t *)(v278 + 8) = v447;
          v218 = (__int16 *)(v278 + 24);
LABEL_303:
          v219 = 0;
          *v218 = *v217;
          ++HIDWORD(v435);
          goto LABEL_304;
        }
        if (v37 > 0xFF)
        {
          v130 = v42 + 48368;
          v131 = 9 * ((~((_DWORD)v37 << 15) + v37) ^ ((~((_DWORD)v37 << 15) + v37) >> 10));
          v132 = (v131 ^ (v131 >> 6)) + ~((v131 ^ (v131 >> 6)) << 11);
          v133 = (v132 ^ BYTE2(v132));
          v134 = (_DWORD *)(v42 + 48368 + 24 * (v132 ^ BYTE2(v132)));
          if (*v134 != (_DWORD)v37
            || (v135 = v130 + 24 * v133, v136 = *(_QWORD *)(v135 + 8), v103 = (int **)(v135 + 8), !v136))
          {
            *v134 = v37;
            WTF::String::number(v37, (uint64_t *)&v446);
            v173 = v130 + 24 * v133;
            v174 = (int *)v446;
            v446 = 0;
            v176 = *(WTF::StringImpl **)(v173 + 8);
            v103 = (int **)(v173 + 8);
            v175 = v176;
            *v103 = v174;
            if (v176)
            {
              if (*(_DWORD *)v175 == 2)
              {
                WTF::StringImpl::~StringImpl(v175, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
              }
              else
              {
                *(_DWORD *)v175 -= 2;
              }
            }
            v177 = v446;
            v446 = 0;
            if (v177)
            {
              if (*(_DWORD *)v177 == 2)
              {
                WTF::StringImpl::~StringImpl(v177, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
              }
              else
              {
                *(_DWORD *)v177 -= 2;
              }
            }
            *(_QWORD *)(v130 + 24 * v133 + 16) = 0;
          }
        }
        else
        {
          v103 = (int **)(v42 + 16 * v37 + 44272);
          if (!*v103)
          {
            v104 = 0;
            v105 = v37;
            do
            {
              v106 = (v105 % 0xA) | 0x30;
              v447.i8[v104-- + 4] = (v105 % 0xA) | 0x30;
              v107 = v105 > 9;
              v105 /= 0xAu;
            }
            while (v107);
            if (v104 + 14 >= 15)
              goto LABEL_600;
            if (v104)
            {
              if ((unint64_t)-v104 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x198AE8264);
              }
              v108 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v104));
              v109 = v108 + 5;
              *v108 = 2;
              v108[1] = -(int)v104;
              *((_QWORD *)v108 + 1) = v108 + 5;
              v108[4] = 4;
              if (v104 == -1)
                *v109 = v106;
              else
                memcpy(v109, &v447.u8[v104 + 5], -v104);
            }
            else
            {
              v108 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v188 = (WTF::StringImpl *)*v103;
            *v103 = v108;
            if (v188)
            {
              if (*(_DWORD *)v188 == 2)
              {
                WTF::StringImpl::~StringImpl(v188, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
              }
              else
              {
                *(_DWORD *)v188 -= 2;
              }
            }
          }
        }
        if (v440 == -1)
          v439 = 1;
        ++v440;
        v137 = (WTF::StringImpl *)*v103;
        v138 = *v103 ? *((_DWORD *)v137 + 1) : 0;
        v115 = __CFADD__(v438, v138);
        v139 = v438 + v138;
        if (v115)
          v437 = 1;
        else
          v438 = v139;
        v140 = v426 & 0xFFFFFF0000000000;
        if (v137)
        {
          v141 = *((_QWORD *)v137 + 1);
          v142 = *((unsigned int *)v137 + 1) | ((unint64_t)((*((_DWORD *)v137 + 4) >> 2) & 1) << 32) | v140;
          *(_DWORD *)v137 += 2;
          v143 = v142;
        }
        else
        {
          v141 = 0;
          v143 = v140 | 0x100000000;
        }
        v446 = v137;
        v447.i64[0] = v141;
        v426 = v143;
        v447.i64[1] = v143;
        v448 = 0;
        if (HIDWORD(v435) != (_DWORD)v435)
          break;
        v170 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
        if (v170)
        {
          v171 = (char *)v434 + 32 * HIDWORD(v435);
          v172 = *(_QWORD *)v170;
          *(_QWORD *)v170 = 0;
          *(_QWORD *)v171 = v172;
          v38 = *(int8x16_t *)(v170 + 8);
          *(int8x16_t *)(v171 + 8) = v38;
          v146 = (__int16 *)(v171 + 24);
          v145 = (__int16 *)(v170 + 24);
          goto LABEL_175;
        }
        v147 = 1;
LABEL_176:
        v441 |= v147;
        v148 = (unint64_t)v446;
        v446 = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v148, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v152 = *(_QWORD *)(StatusReg + 752);
            if (v152)
            {
              if (!(v148 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v148 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v148)) & 1) != 0)
              {
LABEL_187:
                v153 = *(unsigned int *)(v152 + 8000);
                if (v153 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v152, v148, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v152 + 8 * v153) = v148 | 0x5000000000000;
                  *(_DWORD *)(v152 + 8000) = v153 + 1;
                }
                goto LABEL_179;
              }
              if (v148 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v148 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v148 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v148) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_187;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v152, v148, 1, v23, v24, v25, v26, v27);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v148, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v148 -= 2;
          }
        }
LABEL_179:
        v443 = 0;
        v60 = 1;
LABEL_60:
        if (*(_DWORD *)(v42 + 80))
        {
          v179 = *(_DWORD *)(v42 + 80);
          if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            v180 = 1;
          else
            v180 = v60;
          if ((v180 & 1) != 0)
            goto LABEL_101;
        }
        else if ((v60 & 1) != 0)
        {
          goto LABEL_101;
        }
        v61 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x40);
        if (v61)
        {
          if (*(_BYTE *)(v61 + 5) != 1)
          {
            v62 = *(_QWORD *)(v61 + 64);
            if (v62)
            {
              if ((*(_QWORD *)(v62 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v63 = *(_QWORD *)(v62 + 40);
                if (v63 == 1)
                  v64 = 0;
                else
                  v64 = v63;
                v65 = *(_QWORD *)(v41 + 512);
                if ((v65 & 1) != 0)
                {
                  if ((v41 & 8) != 0)
                    v184 = (int **)(v41 - 16);
                  else
                    v184 = (int **)(v41 & 0xFFFFFFFFFFFFC000 | 8);
                  v185 = *(uint64_t (**)(WTF::StringImpl **))(v65 & 0xFFFFFFFFFFFFFFFCLL);
                  v446 = (WTF::StringImpl *)*v184;
                  v447.i64[0] = v41;
                  v447.i64[1] = v41 + 512;
                  v65 = v185(&v446);
                }
                if (v64 == v65)
                {
                  v213 = *(_QWORD *)(v61 + 64);
                  if (v213)
                  {
                    v214 = *(_QWORD *)(v213 + 16);
                    if (v214 >= 2)
                    {
                      v37 = v214;
                      goto LABEL_74;
                    }
                  }
                }
              }
            }
          }
        }
        v66 = *(unsigned __int8 *)(v37 + 5);
        if (v66 < 0x17)
        {
          if (v66 == 2)
            goto LABEL_74;
          v67 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v37, (JSC::JSGlobalObject *)v41, (uint64_t)v22, v23, v24, v25, v26, v27);
        }
        else
        {
          v67 = JSC::JSObject::toString((JSC::JSObject *)v37, (JSC::JSGlobalObject *)v41, v22, v23, v24, v25, v26, v27);
        }
        v37 = v67;
LABEL_74:
        if (*(_DWORD *)(v42 + 80))
        {
          v182 = *(_DWORD *)(v42 + 80);
          if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            goto LABEL_101;
        }
        v68 = *(_QWORD *)(v37 + 8);
        if ((v68 & 1) == 0)
        {
          if (v68)
          {
            v69 = *(unsigned int *)(v68 + 16);
            v70 = *(const char **)(v68 + 8);
            v68 = *(unsigned int *)(v68 + 4);
            v71 = (v69 >> 2) & 1;
          }
          else
          {
            v70 = 0;
            v71 = 1;
          }
          v72 = v431 & 0xFFFFFF0000000000 | v68 | (v71 << 32);
          v431 = v72;
          v73 = v37;
          goto LABEL_79;
        }
        if ((v68 & 2) == 0)
        {
          v117 = (unint64_t)*JSC::JSRopeString::resolveRope(v37, (JSC::JSGlobalObject *)v41, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
          if (v117)
          {
            v118 = *(unsigned int *)(v117 + 16);
            v70 = *(const char **)(v117 + 8);
            v117 = *(unsigned int *)(v117 + 4);
            v119 = (v118 >> 2) & 1;
          }
          else
          {
            v70 = 0;
            v119 = 1;
          }
          v72 = v425 & 0xFFFFFF0000000000 | v117 | (v119 << 32);
          v73 = v37;
          v425 = v72;
          goto LABEL_79;
        }
        v73 = *(_QWORD *)(v37 + 20) & 0xFFFFFFFFFLL;
        v83 = v429 & 0xFFFFFF0000000000;
        v84 = *(_QWORD *)(v73 + 8);
        if (!v84)
        {
          v429 = v83 | 0x100000000;
LABEL_199:
          v72 = 0x100000000;
          v70 = "";
          goto LABEL_79;
        }
        v85 = *(unsigned int *)(v84 + 4);
        v86 = ((unint64_t)*(unsigned int *)(v84 + 16) >> 2) & 1;
        v429 = v83 | (v86 << 32) | v85;
        v87 = *(_QWORD *)(v37 + 24);
        v88 = v87 >> 16;
        if (v85 <= (v87 >> 16))
          goto LABEL_199;
        v70 = *(const char **)(v84 + 8);
        v89 = *(_DWORD *)(v37 + 16);
        if ((int)v85 - (int)v88 > v89 || (v89 = v85 - v88, (_DWORD)v88))
        {
          v90 = (v87 >> 16);
          v72 = v89;
          v91 = v85 - v88;
          if ((_DWORD)v86)
          {
            if (v91 < v89)
              goto LABEL_600;
            v70 += v90;
            v72 = v89 | 0x100000000;
          }
          else
          {
            if (v91 < v89)
              goto LABEL_600;
            v70 += 2 * v90;
          }
        }
        else
        {
          v72 = v429;
        }
LABEL_79:
        if (*(_DWORD *)(v42 + 80))
        {
          v183 = *(_DWORD *)(v42 + 80);
          if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            goto LABEL_101;
        }
        v74 = *(int **)(v73 + 8);
        if ((v74 & 1) == 0)
        {
          if (!v74)
            goto LABEL_83;
LABEL_82:
          *v74 += 2;
          goto LABEL_83;
        }
        v74 = *JSC::JSRopeString::resolveRope(v73, 0, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
        if (v74)
          goto LABEL_82;
LABEL_83:
        if (v440 == -1)
          v439 = 1;
        ++v440;
        if (v443 != v37)
          goto LABEL_86;
        if (!HIDWORD(v435))
        {
          __break(0xC471u);
          JUMPOUT(0x198AE826CLL);
        }
        v112 = (char *)v434 + 32 * HIDWORD(v435) - 32;
        v113 = *((unsigned __int16 *)v112 + 12);
        if (v113 == 0xFFFF)
        {
LABEL_86:
          if (__CFADD__(v438, (_DWORD)v72))
            v437 = 1;
          else
            v438 += v72;
          v76 = (v72 & 0xFF00000000) != 0 && v442 != 0;
          v442 = v76;
          v446 = (WTF::StringImpl *)v74;
          v447.i64[0] = (uint64_t)v70;
          v447.i64[1] = v72;
          v448 = 0;
          if (HIDWORD(v435) != (_DWORD)v435)
          {
            v77 = (char *)v434 + 32 * HIDWORD(v435);
            v446 = 0;
            *(_QWORD *)v77 = v74;
            v78 = &v448;
            *(int8x16_t *)(v77 + 8) = v447;
            v79 = (__int16 *)(v77 + 24);
            goto LABEL_96;
          }
          v127 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
          if (v127)
          {
            v128 = (char *)v434 + 32 * HIDWORD(v435);
            v129 = *(_QWORD *)v127;
            *(_QWORD *)v127 = 0;
            *(_QWORD *)v128 = v129;
            *(_OWORD *)(v128 + 8) = *(_OWORD *)(v127 + 8);
            v79 = (__int16 *)(v128 + 24);
            v78 = (__int16 *)(v127 + 24);
LABEL_96:
            v80 = 0;
            *v79 = *v78;
            ++HIDWORD(v435);
          }
          else
          {
            v80 = 1;
          }
          v441 |= v80;
          v81 = (unint64_t)v446;
          v446 = 0;
          if (!v81)
          {
LABEL_100:
            v443 = v37;
            goto LABEL_101;
          }
          if (*(_DWORD *)v81 != 2)
          {
            *(_DWORD *)v81 -= 2;
            goto LABEL_100;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v101 = *(_QWORD *)(StatusReg + 752);
          if (!v101)
          {
            pas_try_deallocate_slow_no_cache(v81, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_100;
          }
          if (!(v81 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v81 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v81)) & 1) != 0)
          {
LABEL_123:
            v102 = *(unsigned int *)(v101 + 8000);
            if (v102 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v101, v81, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_QWORD *)(v101 + 8 * v102) = v81 | 0x5000000000000;
              *(_DWORD *)(v101 + 8000) = v102 + 1;
            }
            goto LABEL_100;
          }
          if (v81 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v81 >> 24)
          {
            v23 = 0;
          }
          else
          {
            v23 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v81 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v81) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v23 == 1)
              goto LABEL_123;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v101, v81, 1, v23, v24, v25, v26, v27);
          goto LABEL_100;
        }
        *((_WORD *)v112 + 12) = v113 + 1;
        v114 = *((_DWORD *)v112 + 4);
        v115 = __CFADD__(v438, v114);
        v116 = v438 + v114;
        if (v115)
        {
          v437 = 1;
          if (!v74)
            goto LABEL_101;
        }
        else
        {
          v438 = v116;
          if (!v74)
            goto LABEL_101;
        }
        if (*v74 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v74, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *v74 -= 2;
        }
LABEL_101:
        v82 = **(_QWORD **)(a1 + 24);
        if (*(_DWORD *)(v82 + 80))
        {
          v181 = *(_DWORD *)(v82 + 80);
          if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v82 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v82 + 16))
            goto LABEL_475;
        }
        if (++v31 == v30)
        {
          v29 = **(_QWORD **)(a1 + 16);
          goto LABEL_410;
        }
      }
      v144 = (char *)v434 + 32 * HIDWORD(v435);
      v446 = 0;
      *(_QWORD *)v144 = v137;
      v145 = &v448;
      v38 = v447;
      *(int8x16_t *)(v144 + 8) = v447;
      v146 = (__int16 *)(v144 + 24);
LABEL_175:
      v147 = 0;
      *v146 = *v145;
      ++HIDWORD(v435);
      goto LABEL_176;
    }
LABEL_410:
    if (v30 < v29)
    {
      v317 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (v440 == -1)
          v439 = 1;
        ++v440;
        v446 = 0;
        v447.i64[0] = 0;
        v447.i64[1] = 0x100000000;
        v448 = 0;
        if (HIDWORD(v435) != (_DWORD)v435)
          break;
        v325 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
        if (v325)
        {
          v326 = (char *)v434 + 32 * HIDWORD(v435);
          v327 = *(_QWORD *)v325;
          *(_QWORD *)v325 = 0;
          *(_QWORD *)v326 = v327;
          *(_OWORD *)(v326 + 8) = *(_OWORD *)(v325 + 8);
          v319 = (__int16 *)(v326 + 24);
          v320 = (__int16 *)(v325 + 24);
          goto LABEL_416;
        }
        v321 = 1;
LABEL_417:
        v441 |= v321;
        v322 = (unint64_t)v446;
        v446 = 0;
        if (v322)
        {
          if (*(_DWORD *)v322 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v322, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v323 = *(_QWORD *)(v317 + 752);
            if (v323)
            {
              if (!(v322 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v322 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v322)) & 1) != 0)
              {
LABEL_425:
                v324 = *(unsigned int *)(v323 + 8000);
                if (v324 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v323, v322, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v323 + 8 * v324) = v322 | 0x5000000000000;
                  *(_DWORD *)(v323 + 8000) = v324 + 1;
                }
                goto LABEL_420;
              }
              if (v322 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v322 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v322 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v322) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_425;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v323, v322, 1, v23, v24, v25, v26, v27);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v322, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v322 -= 2;
          }
        }
LABEL_420:
        v443 = 0;
        if (++v30 >= **(_QWORD **)(a1 + 16))
          goto LABEL_437;
      }
      v318 = (char *)v434 + 32 * HIDWORD(v435);
      *(_QWORD *)v318 = 0;
      *(int8x16_t *)(v318 + 8) = v447;
      v319 = (__int16 *)(v318 + 24);
      v320 = &v448;
LABEL_416:
      v321 = 0;
      *v319 = *v320;
      ++HIDWORD(v435);
      goto LABEL_417;
    }
LABEL_437:
    if (v439)
    {
      __break(0xC471u);
      JUMPOUT(0x198AE827CLL);
    }
    v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
    if (v440 != 1)
    {
      v328 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v432, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      goto LABEL_440;
    }
    v328 = v443;
    if (v443)
      goto LABEL_440;
    if (!HIDWORD(v435))
    {
      __break(0xC471u);
      JUMPOUT(0x198AE8344);
    }
    v339 = *((_QWORD *)v21 + 7);
    v340 = *((unsigned int *)v434 + 4);
    v341 = *(int **)v434;
    if (*(_QWORD *)v434)
    {
      if ((_DWORD)v340 == v341[1])
      {
        *v341 += 2;
LABEL_471:
        v446 = (WTF::StringImpl *)v341;
        goto LABEL_472;
      }
    }
    else if (!(_DWORD)v340)
    {
      goto LABEL_471;
    }
    v366 = (_BYTE *)*((_QWORD *)v434 + 1);
    if (*((_BYTE *)v434 + 20))
    {
      if (v366)
      {
        if ((_DWORD)v340)
        {
          if ((v340 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AE8354);
          }
          v367 = (int *)WTF::fastCompactMalloc((WTF *)(v340 + 20));
          v368 = v367 + 5;
          *v367 = 2;
          v367[1] = v340;
          *((_QWORD *)v367 + 1) = v367 + 5;
          v367[4] = 4;
          if ((_DWORD)v340 == 1)
          {
            *v368 = *v366;
LABEL_565:
            v446 = (WTF::StringImpl *)v367;
LABEL_472:
            v328 = JSC::jsString(v339, (JSC::VM *)&v446, (uint64_t)v22, v23, v24, v25, v26, v27);
            v342 = v446;
            v446 = 0;
            if (v342)
            {
              if (*(_DWORD *)v342 == 2)
              {
                WTF::StringImpl::~StringImpl(v342, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
              }
              else
              {
                *(_DWORD *)v342 -= 2;
              }
            }
            goto LABEL_440;
          }
          v411 = v366;
          v412 = v340;
          goto LABEL_564;
        }
        goto LABEL_560;
      }
    }
    else if (v366)
    {
      if ((_DWORD)v340)
      {
        if (v340 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AE835CLL);
        }
        v367 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v340 + 20));
        v368 = v367 + 5;
        *v367 = 2;
        v367[1] = v340;
        *((_QWORD *)v367 + 1) = v367 + 5;
        v367[4] = 0;
        if ((_DWORD)v340 == 1)
        {
          *(_WORD *)v368 = *(_WORD *)v366;
          goto LABEL_565;
        }
        v411 = v366;
        v412 = 2 * v340;
LABEL_564:
        memcpy(v368, v411, v412);
        goto LABEL_565;
      }
LABEL_560:
      v367 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_565;
    }
    v367 = 0;
    goto LABEL_565;
  }
  v328 = 0;
LABEL_440:
  if (HIDWORD(v435))
  {
    v329 = v434;
    v330 = 32 * HIDWORD(v435);
    v331 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v332 = *(_QWORD *)v329;
      *(_QWORD *)v329 = 0;
      if (v332)
      {
        if (*(_DWORD *)v332 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v332, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v333 = *(_QWORD *)(v331 + 752);
          if (v333)
          {
            if (!(v332 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v332 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v332)) & 1) != 0)
            {
LABEL_450:
              v334 = *(unsigned int *)(v333 + 8000);
              if (v334 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v333, v332, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v333 + 8 * v334) = v332 | 0x5000000000000;
                *(_DWORD *)(v333 + 8000) = v334 + 1;
              }
              goto LABEL_445;
            }
            if (v332 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v332 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v332 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v332) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_450;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v333, v332, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v332, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v332 -= 2;
        }
      }
LABEL_445:
      v329 = (WTF *)((char *)v329 + 32);
      v330 -= 32;
    }
    while (v330);
  }
  v335 = v434;
  v336 = v436 == (_BYTE *)v434;
LABEL_460:
  if (!v336 && v335 != 0)
  {
    v434 = 0;
    LODWORD(v435) = 0;
    WTF::fastFree((unint64_t)v335, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  return v328;
}

unint64_t JSC::genericTypedArrayViewProtoFuncJoin<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(WTF::StringView)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::AtomStringImpl *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSBigInt **v34;
  JSC::JSBigInt *v35;
  uint64_t v36;
  unint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  BOOL v54;
  char *v55;
  __int16 *v56;
  __int16 *v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int *v74;
  BOOL v76;
  char *v77;
  __int16 *v78;
  __int16 *v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int **v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  int v121;
  int v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  int v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  __int16 *v145;
  __int16 *v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  int v178;
  int v179;
  char v180;
  int v181;
  int v182;
  int v183;
  int **v184;
  uint64_t (*v185)(WTF::StringImpl **);
  int v186;
  int v187;
  WTF::StringImpl *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  double v215;
  char *v216;
  __int16 *v217;
  __int16 *v218;
  char v219;
  WTF::StringImpl *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  int **v234;
  uint64_t v235;
  unsigned int v236;
  int *v237;
  _BYTE *v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  int v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  double *v256;
  uint64_t v257;
  WTF::StringImpl *v258;
  WTF::StringImpl **v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  char *v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  WTF::StringImpl *v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  __int16 *v319;
  __int16 *v320;
  char v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  unint64_t v328;
  WTF *v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  WTF *v335;
  BOOL v336;
  uint64_t v339;
  size_t v340;
  int *v341;
  WTF::StringImpl *v342;
  JSC::ArrayBuffer *v343;
  int v344;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _BYTE *v366;
  int *v367;
  _BYTE *v368;
  uint64_t v369;
  unint64_t i;
  char *v371;
  __int16 *v372;
  __int16 *v373;
  char v374;
  WTF::StringImpl *v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  uint64_t v386;
  WTF *v387;
  uint64_t v388;
  WTF::StringImpl *v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  size_t v399;
  int *v400;
  WTF::StringImpl *v401;
  int v402;
  unint64_t v403;
  void *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  const void *v411;
  size_t v412;
  _BYTE *v413;
  int *v414;
  _BYTE *v415;
  uint64_t v416;
  const void *v417;
  size_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t StatusReg;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  WTF *v434;
  uint64_t v435;
  _BYTE v436[512];
  char v437;
  int v438;
  char v439;
  int v440;
  char v441;
  char v442;
  unint64_t v443;
  unint64_t v444;
  char v445;
  WTF::StringImpl *v446;
  int8x16_t v447;
  __int16 v448;
  uint64_t v449;

  v449 = *MEMORY[0x1E0C80C00];
  LOBYTE(v444) = 0;
  v445 = 0;
  v11 = **(_QWORD **)a1;
  if ((JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, &v444, a3, a4, a5, a6, a7, a8) & 1) != 0)goto LABEL_516;
  v19 = *(unsigned __int8 *)(v11 + 40);
  if ((v19 & 1) == 0)
  {
    v20 = *(_QWORD *)(v11 + 24);
    goto LABEL_4;
  }
  if (v19 == 88)
  {
LABEL_474:
    v343 = *(JSC::ArrayBuffer **)(*(_QWORD *)(v11 + 8) - 8);
    goto LABEL_488;
  }
  if (v19 == 48 || v19 == 16)
  {
    v343 = JSC::JSArrayBufferView::slowDownAndWasteMemory(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v354 = v19 - 90;
    if (v354 > 0x33)
    {
LABEL_516:
      v432 = a2;
      v433 = a3;
      v434 = (WTF *)v436;
      v435 = 16;
      v437 = 0;
      v438 = 0;
      v439 = 0;
      v440 = 0;
      v441 = 0;
      v442 = BYTE4(a3);
      v443 = 0;
      JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v432, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
      v369 = **(_QWORD **)(a1 + 24);
      if (*(_DWORD *)(v369 + 80))
      {
        v402 = *(_DWORD *)(v369 + 80);
        if ((v402 & 0x27) != 0 && (v402 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v369 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
        if (*(_QWORD *)(v369 + 16))
        {
          v328 = 0;
          goto LABEL_536;
        }
      }
      if (**(_QWORD **)(a1 + 16))
      {
        for (i = 0; i < **(_QWORD **)(a1 + 16); ++i)
        {
          if (v440 == -1)
            v439 = 1;
          ++v440;
          v446 = 0;
          v447.i64[0] = 0;
          v447.i64[1] = 0x100000000;
          v448 = 0;
          if (HIDWORD(v435) == (_DWORD)v435)
          {
            v384 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
            if (!v384)
            {
              v374 = 1;
              goto LABEL_524;
            }
            v385 = (char *)v434 + 32 * HIDWORD(v435);
            v386 = *(_QWORD *)v384;
            *(_QWORD *)v384 = 0;
            *(_QWORD *)v385 = v386;
            *(_OWORD *)(v385 + 8) = *(_OWORD *)(v384 + 8);
            v372 = (__int16 *)(v385 + 24);
            v373 = (__int16 *)(v384 + 24);
          }
          else
          {
            v371 = (char *)v434 + 32 * HIDWORD(v435);
            *(_QWORD *)v371 = 0;
            *(int8x16_t *)(v371 + 8) = v447;
            v372 = (__int16 *)(v371 + 24);
            v373 = &v448;
          }
          v374 = 0;
          *v372 = *v373;
          ++HIDWORD(v435);
LABEL_524:
          v441 |= v374;
          v375 = v446;
          v446 = 0;
          if (v375)
          {
            if (*(_DWORD *)v375 == 2)
            {
              WTF::StringImpl::~StringImpl(v375, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
            }
            else
            {
              *(_DWORD *)v375 -= 2;
            }
          }
          v443 = 0;
        }
      }
      if (v439)
      {
        __break(0xC471u);
        JUMPOUT(0x198AEA4F0);
      }
      v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
      if (v440 != 1)
      {
        v328 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v432, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
LABEL_536:
        if (HIDWORD(v435))
        {
          v387 = v434;
          v388 = 32 * HIDWORD(v435);
          do
          {
            v389 = *(WTF::StringImpl **)v387;
            *(_QWORD *)v387 = 0;
            if (v389)
            {
              if (*(_DWORD *)v389 == 2)
              {
                WTF::StringImpl::~StringImpl(v389, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
              }
              else
              {
                *(_DWORD *)v389 -= 2;
              }
            }
            v387 = (WTF *)((char *)v387 + 32);
            v388 -= 32;
          }
          while (v388);
        }
        v335 = v434;
        v336 = v436 == (_BYTE *)v434;
        goto LABEL_457;
      }
      v328 = v443;
      if (v443)
        goto LABEL_536;
      if (!HIDWORD(v435))
      {
        __break(0xC471u);
        JUMPOUT(0x198AEA500);
      }
      v398 = *((_QWORD *)v21 + 7);
      v399 = *((unsigned int *)v434 + 4);
      v400 = *(int **)v434;
      if (*(_QWORD *)v434)
      {
        if ((_DWORD)v399 == v400[1])
        {
          *v400 += 2;
LABEL_550:
          v446 = (WTF::StringImpl *)v400;
          goto LABEL_551;
        }
      }
      else if (!(_DWORD)v399)
      {
        goto LABEL_550;
      }
      v413 = (_BYTE *)*((_QWORD *)v434 + 1);
      if (*((_BYTE *)v434 + 20))
      {
        if (v413)
        {
          if ((_DWORD)v399)
          {
            if ((v399 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198AEA518);
            }
            v414 = (int *)WTF::fastCompactMalloc((WTF *)(v399 + 20));
            v415 = v414 + 5;
            *v414 = 2;
            v414[1] = v399;
            *((_QWORD *)v414 + 1) = v414 + 5;
            v414[4] = 4;
            if ((_DWORD)v399 == 1)
            {
              *v415 = *v413;
LABEL_589:
              v446 = (WTF::StringImpl *)v414;
LABEL_551:
              v328 = JSC::jsString(v398, (JSC::VM *)&v446, (uint64_t)v22, v23, v24, v25, v26, v27);
              v401 = v446;
              v446 = 0;
              if (v401)
              {
                if (*(_DWORD *)v401 == 2)
                {
                  WTF::StringImpl::~StringImpl(v401, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v403, v404, v405, v406, v407, v408, v409, v410);
                }
                else
                {
                  *(_DWORD *)v401 -= 2;
                }
              }
              goto LABEL_536;
            }
            v417 = v413;
            v418 = v399;
            goto LABEL_588;
          }
          goto LABEL_585;
        }
      }
      else if (v413)
      {
        if ((_DWORD)v399)
        {
          if (v399 > 0x7FFFFFEF)
          {
            __break(0xC471u);
LABEL_597:
            __break(1u);
LABEL_598:
            JUMPOUT(0x198AEA410);
          }
          v414 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v399 + 20));
          v415 = v414 + 5;
          *v414 = 2;
          v414[1] = v399;
          *((_QWORD *)v414 + 1) = v414 + 5;
          v414[4] = 0;
          if ((_DWORD)v399 == 1)
          {
            *(_WORD *)v415 = *(_WORD *)v413;
            goto LABEL_589;
          }
          v417 = v413;
          v418 = 2 * v399;
LABEL_588:
          memcpy(v415, v417, v418);
          goto LABEL_589;
        }
LABEL_585:
        v414 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_589;
      }
      v414 = 0;
      goto LABEL_589;
    }
    if (((1 << v354) & 0xF400000000000) == 0)
    {
      if (((1 << v354) & 0xF) == 0)
        goto LABEL_516;
      goto LABEL_474;
    }
    v343 = *(JSC::ArrayBuffer **)(v11 + 48);
  }
LABEL_488:
  if (!v343)
    goto LABEL_516;
  *(_DWORD *)v343 += 2;
  if (v445)
  {
    v355 = v444;
  }
  else
  {
    if (*((_BYTE *)v343 + 64) && (v416 = *((_QWORD *)v343 + 4)) != 0)
      v355 = atomic_load((unint64_t *)(v416 + 32));
    else
      v355 = *((_QWORD *)v343 + 6);
    v444 = v355;
    v445 = 1;
  }
  v356 = v355 - *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(v11 + 5) - 42) > 7u)
    LOBYTE(v357) = 0;
  else
    v357 = qword_199158A40[(char)(*(_BYTE *)(v11 + 5) - 42)];
  v20 = v356 >> v357;
  v44 = *(_DWORD *)v343 == 2;
  *(_DWORD *)v343 -= 2;
  if (v44)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v343, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
  }
LABEL_4:
  v432 = a2;
  v433 = a3;
  v434 = (WTF *)v436;
  v435 = 16;
  v437 = 0;
  v438 = 0;
  v439 = 0;
  v440 = 0;
  v441 = 0;
  v442 = BYTE4(a3);
  v443 = 0;
  JSC::JSStringJoiner::reserveCapacity((JSC::JSStringJoiner *)&v432, **(JSC::JSGlobalObject ***)(a1 + 8), **(_QWORD **)(a1 + 16), v14, v15, v16, v17, v18);
  v28 = **(_QWORD **)(a1 + 24);
  if (!*(_DWORD *)(v28 + 80))
    goto LABEL_5;
  v344 = *(_DWORD *)(v28 + 80);
  if ((v344 & 0x27) != 0 && (v344 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
  if (!*(_QWORD *)(v28 + 16))
  {
LABEL_5:
    v29 = **(_QWORD **)(a1 + 16);
    if (v20 >= v29)
      v30 = **(_QWORD **)(a1 + 16);
    else
      v30 = v20;
    if (v30)
    {
      v31 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        v32 = *(_QWORD *)(**(_QWORD **)a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v33 = *(_QWORD *)(v32 + 8 * v31);
        v34 = *(JSC::JSBigInt ***)(a1 + 8);
        v35 = *v34;
        v36 = *((_QWORD *)*v34 + 7);
        if (v33)
        {
          v37 = JSC::JSBigInt::createWithLength(v35, *((JSC::JSGlobalObject **)*v34 + 7), (JSC::VM *)1, v23, v24, v25, v26, v27);
          if (!*(_DWORD *)(v36 + 80))
            goto LABEL_15;
          v187 = *(_DWORD *)(v36 + 80);
          if ((v187 & 0x27) != 0 && (v187 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v36 + 16))
          {
            v37 = 0;
          }
          else
          {
LABEL_15:
            v39 = *(_QWORD *)(v37 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_QWORD *)v39 = v33;
            *(_BYTE *)(v37 + 16) = 0;
          }
        }
        else
        {
          v37 = JSC::JSBigInt::createWithLength(v35, *((JSC::JSGlobalObject **)*v34 + 7), 0, v23, v24, v25, v26, v27);
        }
        v40 = **(_QWORD **)(a1 + 24);
        if (*(_DWORD *)(v40 + 80))
        {
          v178 = *(_DWORD *)(v40 + 80);
          if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v40 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v40 + 16))
          {
LABEL_472:
            v328 = 0;
            goto LABEL_437;
          }
        }
        v41 = **(_QWORD **)(a1 + 8);
        v42 = *(_QWORD *)(v41 + 56);
        if ((v37 & 0xFFFE000000000002) == 0)
        {
          v43 = *(unsigned __int8 *)(v37 + 5);
          v44 = v43 != 2 || v37 == 0;
          v45 = !v44;
          if (v44)
            goto LABEL_56;
          v46 = *(_QWORD *)(v37 + 8);
          if ((v46 & 1) == 0)
          {
            if (v46)
            {
              v47 = *(unsigned int *)(v46 + 16);
              v48 = *(const char **)(v46 + 8);
              v46 = *(unsigned int *)(v46 + 4);
              v49 = (v47 >> 2) & 1;
            }
            else
            {
              v48 = 0;
              v49 = 1;
            }
            v50 = v430 & 0xFFFFFF0000000000 | v46 | (v49 << 32);
            v430 = v50;
            v51 = v37;
            goto LABEL_33;
          }
          if ((v46 & 2) == 0)
          {
            v124 = (unint64_t)*JSC::JSRopeString::resolveRope(v37, **(JSC::JSGlobalObject ***)(a1 + 8), (uint64_t)v22, v23, v38, v24, v25, v26, v27);
            if (v124)
            {
              v125 = *(unsigned int *)(v124 + 16);
              v48 = *(const char **)(v124 + 8);
              v124 = *(unsigned int *)(v124 + 4);
              v126 = (v125 >> 2) & 1;
            }
            else
            {
              v48 = 0;
              v126 = 1;
            }
            v50 = v424 & 0xFFFFFF0000000000 | v124 | (v126 << 32);
            v51 = v37;
            v424 = v50;
            goto LABEL_33;
          }
          v51 = *(_QWORD *)(v37 + 20) & 0xFFFFFFFFFLL;
          v92 = v428 & 0xFFFFFF0000000000;
          v93 = *(_QWORD *)(v51 + 8);
          if (v93)
          {
            v94 = *(unsigned int *)(v93 + 4);
            v95 = ((unint64_t)*(unsigned int *)(v93 + 16) >> 2) & 1;
            v428 = v92 | (v95 << 32) | v94;
            v96 = *(_QWORD *)(v37 + 24);
            v97 = v96 >> 16;
            if (v94 > (v96 >> 16))
            {
              v48 = *(const char **)(v93 + 8);
              v98 = *(_DWORD *)(v37 + 16);
              if ((int)v94 - (int)v97 > v98 || (v98 = v94 - v97, (_DWORD)v97))
              {
                v99 = (v96 >> 16);
                v50 = v98;
                v100 = v94 - v97;
                if ((_DWORD)v95)
                {
                  if (v100 < v98)
                    goto LABEL_597;
                  v48 += v99;
                  v50 = v98 | 0x100000000;
                }
                else
                {
                  if (v100 < v98)
                    goto LABEL_597;
                  v48 += 2 * v99;
                }
              }
              else
              {
                v50 = v428;
              }
LABEL_33:
              if (*(_DWORD *)(v42 + 80))
              {
                v186 = *(_DWORD *)(v42 + 80);
                if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
                if (*(_QWORD *)(v42 + 16))
                {
                  LOBYTE(v43) = 0;
                  goto LABEL_56;
                }
              }
              v52 = *(WTF::StringImpl **)(v51 + 8);
              if ((v52 & 1) != 0)
              {
                v52 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v51, 0, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
                if (v52)
LABEL_36:
                  *(_DWORD *)v52 += 2;
              }
              else if (v52)
              {
                goto LABEL_36;
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              if (v443 == v37)
              {
                if (!HIDWORD(v435))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198AEA428);
                }
                v120 = (char *)v434 + 32 * HIDWORD(v435) - 32;
                v121 = *((unsigned __int16 *)v120 + 12);
                if (v121 != 0xFFFF)
                {
                  *((_WORD *)v120 + 12) = v121 + 1;
                  v122 = *((_DWORD *)v120 + 4);
                  v115 = __CFADD__(v438, v122);
                  v123 = v438 + v122;
                  if (v115)
                  {
                    v437 = 1;
                    if (v52)
                      goto LABEL_151;
                  }
                  else
                  {
                    v438 = v123;
                    if (v52)
                    {
LABEL_151:
                      if (*(_DWORD *)v52 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v52, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                        WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
                      }
                      else
                      {
                        *(_DWORD *)v52 -= 2;
                      }
                    }
                  }
LABEL_55:
                  LOBYTE(v43) = 1;
LABEL_56:
                  v60 = v45 & v43;
                  goto LABEL_57;
                }
              }
              if (__CFADD__(v438, (_DWORD)v50))
                v437 = 1;
              else
                v438 += v50;
              v54 = (v50 & 0xFF00000000) != 0 && v442 != 0;
              v442 = v54;
              v446 = v52;
              v447.i64[0] = (uint64_t)v48;
              v447.i64[1] = v50;
              v448 = 0;
              if (HIDWORD(v435) != (_DWORD)v435)
              {
                v55 = (char *)v434 + 32 * HIDWORD(v435);
                v446 = 0;
                *(_QWORD *)v55 = v52;
                v56 = &v448;
                v38 = v447;
                *(int8x16_t *)(v55 + 8) = v447;
                v57 = (__int16 *)(v55 + 24);
                goto LABEL_50;
              }
              v149 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
              if (v149)
              {
                v150 = (char *)v434 + 32 * HIDWORD(v435);
                v151 = *(_QWORD *)v149;
                *(_QWORD *)v149 = 0;
                *(_QWORD *)v150 = v151;
                v38 = *(int8x16_t *)(v149 + 8);
                *(int8x16_t *)(v150 + 8) = v38;
                v57 = (__int16 *)(v150 + 24);
                v56 = (__int16 *)(v149 + 24);
LABEL_50:
                v58 = 0;
                *v57 = *v56;
                ++HIDWORD(v435);
              }
              else
              {
                v58 = 1;
              }
              v441 |= v58;
              v59 = (unint64_t)v446;
              v446 = 0;
              if (!v59)
              {
LABEL_54:
                v443 = v37;
                goto LABEL_55;
              }
              if (*(_DWORD *)v59 != 2)
              {
                *(_DWORD *)v59 -= 2;
                goto LABEL_54;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v59, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
              v110 = *(_QWORD *)(StatusReg + 752);
              if (!v110)
              {
                pas_try_deallocate_slow_no_cache(v59, (uint64_t)&bmalloc_heap_config, 1);
                goto LABEL_54;
              }
              if (!(v59 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v59 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v59)) & 1) != 0)
              {
LABEL_135:
                v111 = *(unsigned int *)(v110 + 8000);
                if (v111 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v110, v59, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v110 + 8 * v111) = v59 | 0x5000000000000;
                  *(_DWORD *)(v110 + 8000) = v111 + 1;
                }
                goto LABEL_54;
              }
              if (v59 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v59 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v59 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v59) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_135;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v110, v59, 1, v23, v24, v25, v26, v27);
              goto LABEL_54;
            }
          }
          else
          {
            v428 = v92 | 0x100000000;
          }
          v50 = 0x100000000;
          v48 = "";
          goto LABEL_33;
        }
        if (v37 < 0xFFFE000000000000)
        {
          *(_QWORD *)&v215 = v37 - 0x2000000000000;
          if (v37 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((*(_QWORD *)&v215 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v233 = (int)v215, (double)(int)v233 == v215)
              && ((*(_QWORD *)&v215 & 0x8000000000000000) == 0 || (_DWORD)v233))
            {
              if (v233 > 0xFF)
              {
                v267 = v42 + 48368;
                v268 = 9 * ((~((_DWORD)v233 << 15) + v233) ^ ((~((_DWORD)v233 << 15) + v233) >> 10));
                v269 = (v268 ^ (v268 >> 6)) + ~((v268 ^ (v268 >> 6)) << 11);
                v270 = (v269 ^ BYTE2(v269));
                v271 = (_DWORD *)(v42 + 48368 + 24 * (v269 ^ BYTE2(v269)));
                if (*v271 != (_DWORD)v233
                  || (v272 = v267 + 24 * v270, v273 = *(_QWORD *)(v272 + 8), v234 = (int **)(v272 + 8), !v273))
                {
                  *v271 = v233;
                  WTF::String::number(v233, (uint64_t *)&v446);
                  v287 = v267 + 24 * v270;
                  v288 = (int *)v446;
                  v446 = 0;
                  v290 = *(WTF::StringImpl **)(v287 + 8);
                  v234 = (int **)(v287 + 8);
                  v289 = v290;
                  *v234 = v288;
                  if (v290)
                  {
                    if (*(_DWORD *)v289 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v289, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
                    }
                    else
                    {
                      *(_DWORD *)v289 -= 2;
                    }
                  }
                  v300 = v446;
                  v446 = 0;
                  if (v300)
                  {
                    if (*(_DWORD *)v300 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v300, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v309, v310, v311, v312, v313, v314, v315, v316);
                    }
                    else
                    {
                      *(_DWORD *)v300 -= 2;
                    }
                  }
                  *(_QWORD *)(v267 + 24 * v270 + 16) = 0;
                }
              }
              else
              {
                v234 = (int **)(v42 + 16 * v233 + 44272);
                if (!*v234)
                {
                  v235 = 0;
                  do
                  {
                    v236 = (v233 % 0xA) | 0x30;
                    v447.i8[v235-- + 4] = (v233 % 0xA) | 0x30;
                    v107 = v233 > 9;
                    LODWORD(v233) = v233 / 0xA;
                  }
                  while (v107);
                  if (v235 + 14 >= 15)
                    goto LABEL_597;
                  if (v235)
                  {
                    if ((unint64_t)-v235 >> 31)
                    {
                      __break(0xC471u);
                      goto LABEL_598;
                    }
                    v237 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v235));
                    v238 = v237 + 5;
                    *v237 = 2;
                    v237[1] = -(int)v235;
                    *((_QWORD *)v237 + 1) = v237 + 5;
                    v237[4] = 4;
                    if (v235 == -1)
                      *v238 = v236;
                    else
                      memcpy(v238, &v447.u8[v235 + 5], -v235);
                  }
                  else
                  {
                    v237 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                  v291 = (WTF::StringImpl *)*v234;
                  *v234 = v237;
                  if (v291)
                  {
                    if (*(_DWORD *)v291 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v291, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                      WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
                    }
                    else
                    {
                      *(_DWORD *)v291 -= 2;
                    }
                  }
                }
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v240 = (WTF::StringImpl *)*v234;
              if (*v234)
                v274 = *((_DWORD *)v240 + 1);
              else
                v274 = 0;
              v115 = __CFADD__(v438, v274);
              v275 = v438 + v274;
              if (v115)
                v437 = 1;
              else
                v438 = v275;
              v276 = v419 & 0xFFFFFF0000000000;
              if (v240)
              {
                v277 = *((_QWORD *)v240 + 1);
                v419 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v276;
                *(_DWORD *)v240 += 2;
              }
              else
              {
                v277 = 0;
                v419 = v276 | 0x100000000;
              }
              v446 = v240;
              v447.i64[0] = v277;
              v245 = v419;
            }
            else
            {
              v251 = v42 + 54512;
              v252 = (*(_QWORD *)&v215 + ~(v37 << 32)) ^ ((*(_QWORD *)&v215 + ~(v37 << 32)) >> 22);
              v253 = 9 * ((v252 + ~(v252 << 13)) ^ ((v252 + ~(v252 << 13)) >> 8));
              v254 = (v253 ^ (v253 >> 15)) + ~((v253 ^ (v253 >> 15)) << 27);
              v255 = ((v254 >> 31) ^ v254);
              v256 = (double *)(v42 + 54512 + 24 * ((v254 >> 31) ^ v254));
              if (*v256 != v215
                || (v261 = v251 + 24 * v255, v262 = *(_QWORD *)(v261 + 8),
                                               v259 = (WTF::StringImpl **)(v261 + 8),
                                               !v262))
              {
                *v256 = v215;
                WTF::String::number(COERCE_DOUBLE(v37 - 0x2000000000000), (int **)&v446);
                v257 = v251 + 24 * v255;
                v260 = *(WTF::StringImpl **)(v257 + 8);
                v259 = (WTF::StringImpl **)(v257 + 8);
                v258 = v260;
                *v259 = v446;
                if (v260)
                {
                  if (*(_DWORD *)v258 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v258, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                    WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
                  }
                  else
                  {
                    *(_DWORD *)v258 -= 2;
                  }
                }
                *(_QWORD *)(v251 + 24 * v255 + 16) = 0;
              }
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v240 = *v259;
              if (*v259)
                v263 = *((_DWORD *)v240 + 1);
              else
                v263 = 0;
              v115 = __CFADD__(v438, v263);
              v264 = v438 + v263;
              if (v115)
                v437 = 1;
              else
                v438 = v264;
              v265 = v420 & 0xFFFFFF0000000000;
              if (v240)
              {
                v266 = *((_QWORD *)v240 + 1);
                v420 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v265;
                *(_DWORD *)v240 += 2;
              }
              else
              {
                v266 = 0;
                v420 = v265 | 0x100000000;
              }
              v446 = v240;
              v447.i64[0] = v266;
              v245 = v420;
            }
          }
          else if (v37 == 7)
          {
            if (v440 == -1)
              v439 = 1;
            v239 = *(_QWORD *)(v42 + 41952);
            ++v440;
            v240 = *(WTF::StringImpl **)(v239 + 432);
            if (v240)
              v241 = *((_DWORD *)v240 + 1);
            else
              v241 = 0;
            v115 = __CFADD__(v438, v241);
            v242 = v438 + v241;
            if (v115)
              v437 = 1;
            else
              v438 = v242;
            v243 = v421 & 0xFFFFFF0000000000;
            if (v240)
            {
              v244 = *((_QWORD *)v240 + 1);
              v421 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v243;
              *(_DWORD *)v240 += 2;
            }
            else
            {
              v244 = 0;
              v421 = v243 | 0x100000000;
            }
            v446 = v240;
            v447.i64[0] = v244;
            v245 = v421;
          }
          else
          {
            if (v37 != 6)
            {
              if (v440 == -1)
                v439 = 1;
              ++v440;
              v446 = 0;
              v447.i64[0] = 0;
              v423 = v423 & 0xFFFFFF0000000000 | 0x100000000;
              v447.i64[1] = v423;
              v448 = 0;
              if (HIDWORD(v435) != (_DWORD)v435)
              {
                v216 = (char *)v434 + 32 * HIDWORD(v435);
                *(_QWORD *)v216 = 0;
                v217 = &v448;
                v38 = v447;
                *(int8x16_t *)(v216 + 8) = v447;
                v218 = (__int16 *)(v216 + 24);
                goto LABEL_300;
              }
              v229 = (WTF::AtomStringImpl *)(HIDWORD(v435) + 1);
LABEL_314:
              v230 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, v229, (unint64_t)&v446, v23, v24, v25, v26, v27);
              if (v230)
              {
                v231 = (char *)v434 + 32 * HIDWORD(v435);
                v232 = *(_QWORD *)v230;
                *(_QWORD *)v230 = 0;
                *(_QWORD *)v231 = v232;
                v38 = *(int8x16_t *)(v230 + 8);
                *(int8x16_t *)(v231 + 8) = v38;
                v218 = (__int16 *)(v231 + 24);
                v217 = (__int16 *)(v230 + 24);
                goto LABEL_300;
              }
              v219 = 1;
LABEL_301:
              v441 |= v219;
              v220 = v446;
              v446 = 0;
              if (v220)
              {
                if (*(_DWORD *)v220 == 2)
                {
                  WTF::StringImpl::~StringImpl(v220, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                  WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
                }
                else
                {
                  *(_DWORD *)v220 -= 2;
                }
              }
              goto LABEL_176;
            }
            if (v440 == -1)
              v439 = 1;
            v246 = *(_QWORD *)(v42 + 41952);
            ++v440;
            v240 = *(WTF::StringImpl **)(v246 + 248);
            if (v240)
              v247 = *((_DWORD *)v240 + 1);
            else
              v247 = 0;
            v115 = __CFADD__(v438, v247);
            v248 = v438 + v247;
            if (v115)
              v437 = 1;
            else
              v438 = v248;
            v249 = v422 & 0xFFFFFF0000000000;
            if (v240)
            {
              v250 = *((_QWORD *)v240 + 1);
              v422 = *((unsigned int *)v240 + 1) | ((unint64_t)((*((_DWORD *)v240 + 4) >> 2) & 1) << 32) | v249;
              *(_DWORD *)v240 += 2;
            }
            else
            {
              v250 = 0;
              v422 = v249 | 0x100000000;
            }
            v446 = v240;
            v447.i64[0] = v250;
            v245 = v422;
          }
          v447.i64[1] = v245;
          v448 = 0;
          if (HIDWORD(v435) == (_DWORD)v435)
          {
            v229 = (WTF::AtomStringImpl *)(HIDWORD(v435) + 1);
            goto LABEL_314;
          }
          v278 = (char *)v434 + 32 * HIDWORD(v435);
          v446 = 0;
          *(_QWORD *)v278 = v240;
          v217 = &v448;
          v38 = v447;
          *(int8x16_t *)(v278 + 8) = v447;
          v218 = (__int16 *)(v278 + 24);
LABEL_300:
          v219 = 0;
          *v218 = *v217;
          ++HIDWORD(v435);
          goto LABEL_301;
        }
        if (v37 > 0xFF)
        {
          v130 = v42 + 48368;
          v131 = 9 * ((~((_DWORD)v37 << 15) + v37) ^ ((~((_DWORD)v37 << 15) + v37) >> 10));
          v132 = (v131 ^ (v131 >> 6)) + ~((v131 ^ (v131 >> 6)) << 11);
          v133 = (v132 ^ BYTE2(v132));
          v134 = (_DWORD *)(v42 + 48368 + 24 * (v132 ^ BYTE2(v132)));
          if (*v134 != (_DWORD)v37
            || (v135 = v130 + 24 * v133, v136 = *(_QWORD *)(v135 + 8), v103 = (int **)(v135 + 8), !v136))
          {
            *v134 = v37;
            WTF::String::number(v37, (uint64_t *)&v446);
            v173 = v130 + 24 * v133;
            v174 = (int *)v446;
            v446 = 0;
            v176 = *(WTF::StringImpl **)(v173 + 8);
            v103 = (int **)(v173 + 8);
            v175 = v176;
            *v103 = v174;
            if (v176)
            {
              if (*(_DWORD *)v175 == 2)
              {
                WTF::StringImpl::~StringImpl(v175, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
              }
              else
              {
                *(_DWORD *)v175 -= 2;
              }
            }
            v177 = v446;
            v446 = 0;
            if (v177)
            {
              if (*(_DWORD *)v177 == 2)
              {
                WTF::StringImpl::~StringImpl(v177, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
              }
              else
              {
                *(_DWORD *)v177 -= 2;
              }
            }
            *(_QWORD *)(v130 + 24 * v133 + 16) = 0;
          }
        }
        else
        {
          v103 = (int **)(v42 + 16 * v37 + 44272);
          if (!*v103)
          {
            v104 = 0;
            v105 = v37;
            do
            {
              v106 = (v105 % 0xA) | 0x30;
              v447.i8[v104-- + 4] = (v105 % 0xA) | 0x30;
              v107 = v105 > 9;
              v105 /= 0xAu;
            }
            while (v107);
            if (v104 + 14 >= 15)
              goto LABEL_597;
            if (v104)
            {
              if ((unint64_t)-v104 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x198AEA418);
              }
              v108 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v104));
              v109 = v108 + 5;
              *v108 = 2;
              v108[1] = -(int)v104;
              *((_QWORD *)v108 + 1) = v108 + 5;
              v108[4] = 4;
              if (v104 == -1)
                *v109 = v106;
              else
                memcpy(v109, &v447.u8[v104 + 5], -v104);
            }
            else
            {
              v108 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            v188 = (WTF::StringImpl *)*v103;
            *v103 = v108;
            if (v188)
            {
              if (*(_DWORD *)v188 == 2)
              {
                WTF::StringImpl::~StringImpl(v188, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
              }
              else
              {
                *(_DWORD *)v188 -= 2;
              }
            }
          }
        }
        if (v440 == -1)
          v439 = 1;
        ++v440;
        v137 = (WTF::StringImpl *)*v103;
        v138 = *v103 ? *((_DWORD *)v137 + 1) : 0;
        v115 = __CFADD__(v438, v138);
        v139 = v438 + v138;
        if (v115)
          v437 = 1;
        else
          v438 = v139;
        v140 = v426 & 0xFFFFFF0000000000;
        if (v137)
        {
          v141 = *((_QWORD *)v137 + 1);
          v142 = *((unsigned int *)v137 + 1) | ((unint64_t)((*((_DWORD *)v137 + 4) >> 2) & 1) << 32) | v140;
          *(_DWORD *)v137 += 2;
          v143 = v142;
        }
        else
        {
          v141 = 0;
          v143 = v140 | 0x100000000;
        }
        v446 = v137;
        v447.i64[0] = v141;
        v426 = v143;
        v447.i64[1] = v143;
        v448 = 0;
        if (HIDWORD(v435) != (_DWORD)v435)
          break;
        v170 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
        if (v170)
        {
          v171 = (char *)v434 + 32 * HIDWORD(v435);
          v172 = *(_QWORD *)v170;
          *(_QWORD *)v170 = 0;
          *(_QWORD *)v171 = v172;
          v38 = *(int8x16_t *)(v170 + 8);
          *(int8x16_t *)(v171 + 8) = v38;
          v146 = (__int16 *)(v171 + 24);
          v145 = (__int16 *)(v170 + 24);
          goto LABEL_172;
        }
        v147 = 1;
LABEL_173:
        v441 |= v147;
        v148 = (unint64_t)v446;
        v446 = 0;
        if (v148)
        {
          if (*(_DWORD *)v148 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v148, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v152 = *(_QWORD *)(StatusReg + 752);
            if (v152)
            {
              if (!(v148 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v148 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v148)) & 1) != 0)
              {
LABEL_184:
                v153 = *(unsigned int *)(v152 + 8000);
                if (v153 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v152, v148, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v152 + 8 * v153) = v148 | 0x5000000000000;
                  *(_DWORD *)(v152 + 8000) = v153 + 1;
                }
                goto LABEL_176;
              }
              if (v148 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v148 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v148 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v148) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_184;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v152, v148, 1, v23, v24, v25, v26, v27);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v148, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v148 -= 2;
          }
        }
LABEL_176:
        v443 = 0;
        v60 = 1;
LABEL_57:
        if (*(_DWORD *)(v42 + 80))
        {
          v179 = *(_DWORD *)(v42 + 80);
          if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            v180 = 1;
          else
            v180 = v60;
          if ((v180 & 1) != 0)
            goto LABEL_98;
        }
        else if ((v60 & 1) != 0)
        {
          goto LABEL_98;
        }
        v61 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x40);
        if (v61)
        {
          if (*(_BYTE *)(v61 + 5) != 1)
          {
            v62 = *(_QWORD *)(v61 + 64);
            if (v62)
            {
              if ((*(_QWORD *)(v62 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v63 = *(_QWORD *)(v62 + 40);
                if (v63 == 1)
                  v64 = 0;
                else
                  v64 = v63;
                v65 = *(_QWORD *)(v41 + 512);
                if ((v65 & 1) != 0)
                {
                  if ((v41 & 8) != 0)
                    v184 = (int **)(v41 - 16);
                  else
                    v184 = (int **)(v41 & 0xFFFFFFFFFFFFC000 | 8);
                  v185 = *(uint64_t (**)(WTF::StringImpl **))(v65 & 0xFFFFFFFFFFFFFFFCLL);
                  v446 = (WTF::StringImpl *)*v184;
                  v447.i64[0] = v41;
                  v447.i64[1] = v41 + 512;
                  v65 = v185(&v446);
                }
                if (v64 == v65)
                {
                  v213 = *(_QWORD *)(v61 + 64);
                  if (v213)
                  {
                    v214 = *(_QWORD *)(v213 + 16);
                    if (v214 >= 2)
                    {
                      v37 = v214;
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
        }
        v66 = *(unsigned __int8 *)(v37 + 5);
        if (v66 < 0x17)
        {
          if (v66 == 2)
            goto LABEL_71;
          v67 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v37, (JSC::JSGlobalObject *)v41, (uint64_t)v22, v23, v24, v25, v26, v27);
        }
        else
        {
          v67 = JSC::JSObject::toString((JSC::JSObject *)v37, (JSC::JSGlobalObject *)v41, v22, v23, v24, v25, v26, v27);
        }
        v37 = v67;
LABEL_71:
        if (*(_DWORD *)(v42 + 80))
        {
          v182 = *(_DWORD *)(v42 + 80);
          if ((v182 & 0x27) != 0 && (v182 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            goto LABEL_98;
        }
        v68 = *(_QWORD *)(v37 + 8);
        if ((v68 & 1) == 0)
        {
          if (v68)
          {
            v69 = *(unsigned int *)(v68 + 16);
            v70 = *(const char **)(v68 + 8);
            v68 = *(unsigned int *)(v68 + 4);
            v71 = (v69 >> 2) & 1;
          }
          else
          {
            v70 = 0;
            v71 = 1;
          }
          v72 = v431 & 0xFFFFFF0000000000 | v68 | (v71 << 32);
          v431 = v72;
          v73 = v37;
          goto LABEL_76;
        }
        if ((v68 & 2) == 0)
        {
          v117 = (unint64_t)*JSC::JSRopeString::resolveRope(v37, (JSC::JSGlobalObject *)v41, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
          if (v117)
          {
            v118 = *(unsigned int *)(v117 + 16);
            v70 = *(const char **)(v117 + 8);
            v117 = *(unsigned int *)(v117 + 4);
            v119 = (v118 >> 2) & 1;
          }
          else
          {
            v70 = 0;
            v119 = 1;
          }
          v72 = v425 & 0xFFFFFF0000000000 | v117 | (v119 << 32);
          v73 = v37;
          v425 = v72;
          goto LABEL_76;
        }
        v73 = *(_QWORD *)(v37 + 20) & 0xFFFFFFFFFLL;
        v83 = v429 & 0xFFFFFF0000000000;
        v84 = *(_QWORD *)(v73 + 8);
        if (!v84)
        {
          v429 = v83 | 0x100000000;
LABEL_196:
          v72 = 0x100000000;
          v70 = "";
          goto LABEL_76;
        }
        v85 = *(unsigned int *)(v84 + 4);
        v86 = ((unint64_t)*(unsigned int *)(v84 + 16) >> 2) & 1;
        v429 = v83 | (v86 << 32) | v85;
        v87 = *(_QWORD *)(v37 + 24);
        v88 = v87 >> 16;
        if (v85 <= (v87 >> 16))
          goto LABEL_196;
        v70 = *(const char **)(v84 + 8);
        v89 = *(_DWORD *)(v37 + 16);
        if ((int)v85 - (int)v88 > v89 || (v89 = v85 - v88, (_DWORD)v88))
        {
          v90 = (v87 >> 16);
          v72 = v89;
          v91 = v85 - v88;
          if ((_DWORD)v86)
          {
            if (v91 < v89)
              goto LABEL_597;
            v70 += v90;
            v72 = v89 | 0x100000000;
          }
          else
          {
            if (v91 < v89)
              goto LABEL_597;
            v70 += 2 * v90;
          }
        }
        else
        {
          v72 = v429;
        }
LABEL_76:
        if (*(_DWORD *)(v42 + 80))
        {
          v183 = *(_DWORD *)(v42 + 80);
          if ((v183 & 0x27) != 0 && (v183 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v42 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v42 + 16))
            goto LABEL_98;
        }
        v74 = *(int **)(v73 + 8);
        if ((v74 & 1) == 0)
        {
          if (!v74)
            goto LABEL_80;
LABEL_79:
          *v74 += 2;
          goto LABEL_80;
        }
        v74 = *JSC::JSRopeString::resolveRope(v73, 0, (uint64_t)v22, v23, v38, v24, v25, v26, v27);
        if (v74)
          goto LABEL_79;
LABEL_80:
        if (v440 == -1)
          v439 = 1;
        ++v440;
        if (v443 != v37)
          goto LABEL_83;
        if (!HIDWORD(v435))
        {
          __break(0xC471u);
          JUMPOUT(0x198AEA420);
        }
        v112 = (char *)v434 + 32 * HIDWORD(v435) - 32;
        v113 = *((unsigned __int16 *)v112 + 12);
        if (v113 == 0xFFFF)
        {
LABEL_83:
          if (__CFADD__(v438, (_DWORD)v72))
            v437 = 1;
          else
            v438 += v72;
          v76 = (v72 & 0xFF00000000) != 0 && v442 != 0;
          v442 = v76;
          v446 = (WTF::StringImpl *)v74;
          v447.i64[0] = (uint64_t)v70;
          v447.i64[1] = v72;
          v448 = 0;
          if (HIDWORD(v435) != (_DWORD)v435)
          {
            v77 = (char *)v434 + 32 * HIDWORD(v435);
            v446 = 0;
            *(_QWORD *)v77 = v74;
            v78 = &v448;
            *(int8x16_t *)(v77 + 8) = v447;
            v79 = (__int16 *)(v77 + 24);
            goto LABEL_93;
          }
          v127 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
          if (v127)
          {
            v128 = (char *)v434 + 32 * HIDWORD(v435);
            v129 = *(_QWORD *)v127;
            *(_QWORD *)v127 = 0;
            *(_QWORD *)v128 = v129;
            *(_OWORD *)(v128 + 8) = *(_OWORD *)(v127 + 8);
            v79 = (__int16 *)(v128 + 24);
            v78 = (__int16 *)(v127 + 24);
LABEL_93:
            v80 = 0;
            *v79 = *v78;
            ++HIDWORD(v435);
          }
          else
          {
            v80 = 1;
          }
          v441 |= v80;
          v81 = (unint64_t)v446;
          v446 = 0;
          if (!v81)
          {
LABEL_97:
            v443 = v37;
            goto LABEL_98;
          }
          if (*(_DWORD *)v81 != 2)
          {
            *(_DWORD *)v81 -= 2;
            goto LABEL_97;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v101 = *(_QWORD *)(StatusReg + 752);
          if (!v101)
          {
            pas_try_deallocate_slow_no_cache(v81, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_97;
          }
          if (!(v81 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v81 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v81)) & 1) != 0)
          {
LABEL_120:
            v102 = *(unsigned int *)(v101 + 8000);
            if (v102 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v101, v81, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
            }
            else
            {
              *(_QWORD *)(v101 + 8 * v102) = v81 | 0x5000000000000;
              *(_DWORD *)(v101 + 8000) = v102 + 1;
            }
            goto LABEL_97;
          }
          if (v81 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v81 >> 24)
          {
            v23 = 0;
          }
          else
          {
            v23 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v81 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v81) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v23 == 1)
              goto LABEL_120;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v101, v81, 1, v23, v24, v25, v26, v27);
          goto LABEL_97;
        }
        *((_WORD *)v112 + 12) = v113 + 1;
        v114 = *((_DWORD *)v112 + 4);
        v115 = __CFADD__(v438, v114);
        v116 = v438 + v114;
        if (v115)
        {
          v437 = 1;
          if (!v74)
            goto LABEL_98;
        }
        else
        {
          v438 = v116;
          if (!v74)
            goto LABEL_98;
        }
        if (*v74 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v74, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *v74 -= 2;
        }
LABEL_98:
        v82 = **(_QWORD **)(a1 + 24);
        if (*(_DWORD *)(v82 + 80))
        {
          v181 = *(_DWORD *)(v82 + 80);
          if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v82 + 64), 7u, (uint64_t)v22, v23, v24, v25, v26, v27);
          if (*(_QWORD *)(v82 + 16))
            goto LABEL_472;
        }
        if (++v31 == v30)
        {
          v29 = **(_QWORD **)(a1 + 16);
          goto LABEL_407;
        }
      }
      v144 = (char *)v434 + 32 * HIDWORD(v435);
      v446 = 0;
      *(_QWORD *)v144 = v137;
      v145 = &v448;
      v38 = v447;
      *(int8x16_t *)(v144 + 8) = v447;
      v146 = (__int16 *)(v144 + 24);
LABEL_172:
      v147 = 0;
      *v146 = *v145;
      ++HIDWORD(v435);
      goto LABEL_173;
    }
LABEL_407:
    if (v30 < v29)
    {
      v317 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        if (v440 == -1)
          v439 = 1;
        ++v440;
        v446 = 0;
        v447.i64[0] = 0;
        v447.i64[1] = 0x100000000;
        v448 = 0;
        if (HIDWORD(v435) != (_DWORD)v435)
          break;
        v325 = WTF::Vector<JSC::JSStringJoiner::Entry,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>((uint64_t)&v434, (WTF::AtomStringImpl *)(HIDWORD(v435) + 1), (unint64_t)&v446, v23, v24, v25, v26, v27);
        if (v325)
        {
          v326 = (char *)v434 + 32 * HIDWORD(v435);
          v327 = *(_QWORD *)v325;
          *(_QWORD *)v325 = 0;
          *(_QWORD *)v326 = v327;
          *(_OWORD *)(v326 + 8) = *(_OWORD *)(v325 + 8);
          v319 = (__int16 *)(v326 + 24);
          v320 = (__int16 *)(v325 + 24);
          goto LABEL_413;
        }
        v321 = 1;
LABEL_414:
        v441 |= v321;
        v322 = (unint64_t)v446;
        v446 = 0;
        if (v322)
        {
          if (*(_DWORD *)v322 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v322, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
            v323 = *(_QWORD *)(v317 + 752);
            if (v323)
            {
              if (!(v322 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v322 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v322)) & 1) != 0)
              {
LABEL_422:
                v324 = *(unsigned int *)(v323 + 8000);
                if (v324 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v323, v322, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
                }
                else
                {
                  *(_QWORD *)(v323 + 8 * v324) = v322 | 0x5000000000000;
                  *(_DWORD *)(v323 + 8000) = v324 + 1;
                }
                goto LABEL_417;
              }
              if (v322 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v322 >> 24)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v322 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v322) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v23 == 1)
                  goto LABEL_422;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v323, v322, 1, v23, v24, v25, v26, v27);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v322, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v322 -= 2;
          }
        }
LABEL_417:
        v443 = 0;
        if (++v30 >= **(_QWORD **)(a1 + 16))
          goto LABEL_434;
      }
      v318 = (char *)v434 + 32 * HIDWORD(v435);
      *(_QWORD *)v318 = 0;
      *(int8x16_t *)(v318 + 8) = v447;
      v319 = (__int16 *)(v318 + 24);
      v320 = &v448;
LABEL_413:
      v321 = 0;
      *v319 = *v320;
      ++HIDWORD(v435);
      goto LABEL_414;
    }
LABEL_434:
    if (v439)
    {
      __break(0xC471u);
      JUMPOUT(0x198AEA430);
    }
    v21 = **(WTF::AtomStringImpl ***)(a1 + 8);
    if (v440 != 1)
    {
      v328 = JSC::JSStringJoiner::joinSlow((JSC::JSStringJoiner *)&v432, (int8x16_t *)v21, (uint64_t)v22, v23, v24, v25, v26, v27);
      goto LABEL_437;
    }
    v328 = v443;
    if (v443)
      goto LABEL_437;
    if (!HIDWORD(v435))
    {
      __break(0xC471u);
      JUMPOUT(0x198AEA4F8);
    }
    v339 = *((_QWORD *)v21 + 7);
    v340 = *((unsigned int *)v434 + 4);
    v341 = *(int **)v434;
    if (*(_QWORD *)v434)
    {
      if ((_DWORD)v340 == v341[1])
      {
        *v341 += 2;
LABEL_468:
        v446 = (WTF::StringImpl *)v341;
        goto LABEL_469;
      }
    }
    else if (!(_DWORD)v340)
    {
      goto LABEL_468;
    }
    v366 = (_BYTE *)*((_QWORD *)v434 + 1);
    if (*((_BYTE *)v434 + 20))
    {
      if (v366)
      {
        if ((_DWORD)v340)
        {
          if ((v340 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198AEA508);
          }
          v367 = (int *)WTF::fastCompactMalloc((WTF *)(v340 + 20));
          v368 = v367 + 5;
          *v367 = 2;
          v367[1] = v340;
          *((_QWORD *)v367 + 1) = v367 + 5;
          v367[4] = 4;
          if ((_DWORD)v340 == 1)
          {
            *v368 = *v366;
LABEL_562:
            v446 = (WTF::StringImpl *)v367;
LABEL_469:
            v328 = JSC::jsString(v339, (JSC::VM *)&v446, (uint64_t)v22, v23, v24, v25, v26, v27);
            v342 = v446;
            v446 = 0;
            if (v342)
            {
              if (*(_DWORD *)v342 == 2)
              {
                WTF::StringImpl::~StringImpl(v342, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
                WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
              }
              else
              {
                *(_DWORD *)v342 -= 2;
              }
            }
            goto LABEL_437;
          }
          v411 = v366;
          v412 = v340;
          goto LABEL_561;
        }
        goto LABEL_557;
      }
    }
    else if (v366)
    {
      if ((_DWORD)v340)
      {
        if (v340 > 0x7FFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x198AEA510);
        }
        v367 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v340 + 20));
        v368 = v367 + 5;
        *v367 = 2;
        v367[1] = v340;
        *((_QWORD *)v367 + 1) = v367 + 5;
        v367[4] = 0;
        if ((_DWORD)v340 == 1)
        {
          *(_WORD *)v368 = *(_WORD *)v366;
          goto LABEL_562;
        }
        v411 = v366;
        v412 = 2 * v340;
LABEL_561:
        memcpy(v368, v411, v412);
        goto LABEL_562;
      }
LABEL_557:
      v367 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_562;
    }
    v367 = 0;
    goto LABEL_562;
  }
  v328 = 0;
LABEL_437:
  if (HIDWORD(v435))
  {
    v329 = v434;
    v330 = 32 * HIDWORD(v435);
    v331 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v332 = *(_QWORD *)v329;
      *(_QWORD *)v329 = 0;
      if (v332)
      {
        if (*(_DWORD *)v332 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v332, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
          v333 = *(_QWORD *)(v331 + 752);
          if (v333)
          {
            if (!(v332 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v332 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v332)) & 1) != 0)
            {
LABEL_447:
              v334 = *(unsigned int *)(v333 + 8000);
              if (v334 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v333, v332, (os_unfair_lock_s *)5, v23, v24, v25, v26, v27);
              }
              else
              {
                *(_QWORD *)(v333 + 8 * v334) = v332 | 0x5000000000000;
                *(_DWORD *)(v333 + 8000) = v334 + 1;
              }
              goto LABEL_442;
            }
            if (v332 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v332 >> 24)
            {
              v23 = 0;
            }
            else
            {
              v23 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v332 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v332) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v23 == 1)
                goto LABEL_447;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v333, v332, 1, v23, v24, v25, v26, v27);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v332, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v332 -= 2;
        }
      }
LABEL_442:
      v329 = (WTF *)((char *)v329 + 32);
      v330 -= 32;
    }
    while (v330);
  }
  v335 = v434;
  v336 = v436 == (_BYTE *)v434;
LABEL_457:
  if (!v336 && v335 != 0)
  {
    v434 = 0;
    LODWORD(v435) = 0;
    WTF::fastFree((unint64_t)v335, v21, (uint64_t)v22, v23, v24, v25, v26, v27);
  }
  return v328;
}

void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  JSC::VM *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  JSC::JSObject *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  JSC::Heap **v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC::Exception *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  uint64_t v58;
  JSC::JSObject *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  JSC::JSObject *v76;
  int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double v95;
  double v96;
  double v97;
  unint64_t v98;
  char v99;
  int v100;
  int v101;
  int v102;
  uint64_t (*v103)(WTF::StringImpl **);
  WTF::StringImpl **v104;
  JSC::JSObject *v105;
  unint64_t v106;
  WTF::StringImpl *v107;
  JSC::JSObject *v108;
  JSC::VM *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  char *v113;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v109 = (JSC::VM *)v12;
  v110 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v109, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromArrayLike((JSC::JSArrayBufferView *)a1, (JSC::JSGlobalObject *)a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_82:
    v94 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_83;
  }
  LOBYTE(v111) = 0;
  LOBYTE(v112) = 0;
  v98 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v111, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v99)
    v16 = v98;
  else
    v16 = 0;
  if (v14)
    goto LABEL_82;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v94 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_83:
    v8 = (unsigned __int8 *)v94;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v100 = *(_DWORD *)(v12 + 80);
  if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v108 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v101 = *(_DWORD *)(v12 + 80);
      if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v19, v20, v21, v22, v23, v24);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v108;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v108, (JSC::JSGlobalObject *)a2, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
      else
        *(_QWORD *)&v95 = (char *)v17 - 0x2000000000000;
      v96 = trunc(v95 + 0.0);
      v97 = 9.00719925e15;
      if (v96 <= 9.00719925e15)
        v97 = v96;
      if (v96 > 0.0)
        v26 = (unint64_t)v97;
      else
        v26 = 0;
    }
    else
    {
      v26 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v102 = *(_DWORD *)(v12 + 80);
    if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v19, v20, v21, v22, v23, v24);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v26, a3) || (unint64_t)a3 + v26 > v16)
      {
        v38 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v38 = 0x3700000002;
        *(_QWORD *)(v38 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v38 + 16) = 4;
        v107 = (WTF::StringImpl *)v38;
        v39 = *(_QWORD *)(a2 + 128);
        v40 = *(JSC::Heap ***)(a2 + 56);
        if ((v39 & 1) != 0)
        {
          v103 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v104 = (WTF::StringImpl **)(a2 - 16);
          else
            v104 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v111 = *v104;
          v112 = a2;
          v113 = (char *)(a2 + 128);
          v39 = v103(&v111);
        }
        v41 = JSC::ErrorInstance::create(v40, v39, &v107, 0, 0, 0, 2, 1);
        v48 = (JSC::Exception *)v41;
        if ((v41 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)))
        {
          v48 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v41, 0, v42, v43, v44, v45, v46);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v48, v47, v42, v43, v44, v45, v46);
        v56 = v107;
        v107 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
      }
      else
      {
        if (v26 >= 0xFFFFFFFF)
          v27 = 0xFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = 0;
          while (1)
          {
            v29 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v28);
            v36 = (JSC::JSObject *)v29;
            if (*(_DWORD *)(v12 + 80))
            {
              v105 = (JSC::JSObject *)v29;
              v37 = *(_DWORD *)(v12 + 80);
              if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v30, v29, v31, v32, v33, v34);
              v36 = v105;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex((JSC::JSArrayBufferView *)a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v28, v36, v31, v32, v33, v34, v35))break;
            if (v27 == ++v28)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v26))
          {
            v57 = v26 - 1;
            do
            {
              if (v27 > 0xFFFFFFFE)
              {
                v106 = v57;
                v66 = *(uint64_t ***)(a2 + 56);
                if (v27 == 0xFFFFFFFF)
                  JSC::Identifier::from(v66, 0xFFFFFFFFuLL, v19, v20, v21, v22, v23, v24, (int **)&v111);
                else
                  JSC::Identifier::from(v66, v18, (double)v27, v19, v20, v21, v22, v23, v24, &v111);
                v74 = JSC::JSObject::get((unsigned int *)v8, a2, (unint64_t)v111, v67, v68, v69, v70, v71);
                v75 = v111;
                v111 = 0;
                if (v75)
                {
                  if (*(_DWORD *)v75 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v75, v72, v58, v73, v60, v61, v62, v63);
                    WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
                  }
                  else
                  {
                    *(_DWORD *)v75 -= 2;
                  }
                }
                v59 = (JSC::JSObject *)v74;
                v57 = v106;
              }
              else
              {
                v59 = (JSC::JSObject *)JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
              }
              if (*(_DWORD *)(v12 + 80))
              {
                v76 = v59;
                v77 = *(_DWORD *)(v12 + 80);
                if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v58, (uint64_t)v59, v60, v61, v62, v63);
                v59 = v76;
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex((JSC::JSArrayBufferView *)a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v59, v60, v61, v62, v63, v64))break;
            }
            while (v57 != v27++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    for (i = 0; a3 != i; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * i);
      if (v4)
      {
        if ((int)v4 >= 255)
          LODWORD(v4) = 255;
        v5 = v4 & ~((int)v4 >> 31);
        v6 = *(_QWORD *)(result + 16);
        v7 = qword_1ECF4C038;
        if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
          goto LABEL_9;
      }
      else
      {
        v6 = *(_QWORD *)(result + 16);
        v7 = qword_1ECF4C038;
        if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
        {
          LOBYTE(v5) = 0;
          goto LABEL_9;
        }
        LOBYTE(v5) = 0;
      }
      v6 = (v6 & 0x3FFFFFFFFLL) + v7;
LABEL_9:
      *(_BYTE *)(v6 + i) = v5;
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  double v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v4 = *(double *)(*(_QWORD *)(a2 + 8) + 8 * i);
      if (v4 >= 0.0)
      {
        if (v4 <= 255.0)
          v5 = (uint64_t)rint(v4);
        else
          LOBYTE(v5) = -1;
      }
      else
      {
        LOBYTE(v5) = 0;
      }
      v6 = *(_QWORD *)(result + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_BYTE *)(v6 + i) = v5;
    }
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  JSC::VM *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  JSC::Heap **v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC::Exception *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double v95;
  double v96;
  double v97;
  unint64_t v98;
  char v99;
  int v100;
  int v101;
  int v102;
  uint64_t (*v103)(WTF::StringImpl **);
  WTF::StringImpl **v104;
  unint64_t v105;
  unint64_t v106;
  WTF::StringImpl *v107;
  JSC::JSObject *v108;
  JSC::VM *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  char *v113;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v109 = (JSC::VM *)v12;
  v110 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v109, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromArrayLike(a1, (JSC::JSGlobalObject *)a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_82:
    v94 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v110, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_83;
  }
  LOBYTE(v111) = 0;
  LOBYTE(v112) = 0;
  v98 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v111, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v99)
    v16 = v98;
  else
    v16 = 0;
  if (v14)
    goto LABEL_82;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v94 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_83:
    v8 = (unsigned __int8 *)v94;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v100 = *(_DWORD *)(v12 + 80);
  if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v108 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v101 = *(_DWORD *)(v12 + 80);
      if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v19, v20, v21, v22, v23, v24);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v108;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v108, (JSC::JSGlobalObject *)a2, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
      else
        *(_QWORD *)&v95 = (char *)v17 - 0x2000000000000;
      v96 = trunc(v95 + 0.0);
      v97 = 9.00719925e15;
      if (v96 <= 9.00719925e15)
        v97 = v96;
      if (v96 > 0.0)
        v26 = (unint64_t)v97;
      else
        v26 = 0;
    }
    else
    {
      v26 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v102 = *(_DWORD *)(v12 + 80);
    if ((v102 & 0x27) != 0 && (v102 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)v19, v20, v21, v22, v23, v24);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v26, a3) || (unint64_t)a3 + v26 > v16)
      {
        v38 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v38 = 0x3700000002;
        *(_QWORD *)(v38 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v38 + 16) = 4;
        v107 = (WTF::StringImpl *)v38;
        v39 = *(_QWORD *)(a2 + 128);
        v40 = *(JSC::Heap ***)(a2 + 56);
        if ((v39 & 1) != 0)
        {
          v103 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v104 = (WTF::StringImpl **)(a2 - 16);
          else
            v104 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v111 = *v104;
          v112 = a2;
          v113 = (char *)(a2 + 128);
          v39 = v103(&v111);
        }
        v41 = JSC::ErrorInstance::create(v40, v39, &v107, 0, 0, 0, 2, 1);
        v48 = (JSC::Exception *)v41;
        if ((v41 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)))
        {
          v48 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v41, 0, v42, v43, v44, v45, v46);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v48, v47, v42, v43, v44, v45, v46);
        v56 = v107;
        v107 = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 2)
          {
            WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
            WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
          }
          else
          {
            *(_DWORD *)v56 -= 2;
          }
        }
      }
      else
      {
        if (v26 >= 0xFFFFFFFF)
          v27 = 0xFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = 0;
          while (1)
          {
            v29 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v28);
            v36 = v29;
            if (*(_DWORD *)(v12 + 80))
            {
              v105 = v29;
              v37 = *(_DWORD *)(v12 + 80);
              if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v30, v29, v31, v32, v33, v34);
              v36 = v105;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v28, v36, v31, v32, v33, v34, v35))break;
            if (v27 == ++v28)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v26))
          {
            v57 = v26 - 1;
            do
            {
              if (v27 > 0xFFFFFFFE)
              {
                v106 = v57;
                v66 = *(uint64_t ***)(a2 + 56);
                if (v27 == 0xFFFFFFFF)
                  JSC::Identifier::from(v66, 0xFFFFFFFFuLL, v19, v20, v21, v22, v23, v24, (int **)&v111);
                else
                  JSC::Identifier::from(v66, v18, (double)v27, v19, v20, v21, v22, v23, v24, &v111);
                v74 = JSC::JSObject::get((unsigned int *)v8, a2, (unint64_t)v111, v67, v68, v69, v70, v71);
                v75 = v111;
                v111 = 0;
                if (v75)
                {
                  if (*(_DWORD *)v75 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v75, v72, v58, v73, v60, v61, v62, v63);
                    WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
                  }
                  else
                  {
                    *(_DWORD *)v75 -= 2;
                  }
                }
                v59 = v74;
                v57 = v106;
              }
              else
              {
                v59 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
              }
              if (*(_DWORD *)(v12 + 80))
              {
                v76 = v59;
                v77 = *(_DWORD *)(v12 + 80);
                if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v58, v59, v60, v61, v62, v63);
                v59 = v76;
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v59, v60, v61, v62, v63, v64))break;
            }
            while (v57 != v27++);
          }
        }
      }
    }
  }
}

void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  JSC::JSObject *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::JSObject *v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  JSC::JSObject *v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromArrayLike(a1, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (JSC::JSObject *)this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = (JSC::JSObject *)v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = (JSC::JSObject *)v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = (JSC::JSObject *)JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;

  v11 = *((_QWORD *)a2 + 7);
  v12 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(a2, a4, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v28 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v28;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v23 + 64) && (v27 = *(_QWORD *)(v23 + 32)) != 0)
      v24 = *(_QWORD *)(v27 + 32);
    else
      v24 = *(_QWORD *)(v23 + 48);
    v26 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 32);
    if (v25 + 4 * v26 > v24)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v24 - v25) >> 2)
        return 0;
    }
    else if (v26 <= a3)
    {
      return 0;
    }
LABEL_9:
    v20 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_DWORD *)(v20 + 4 * a3) = v12;
    return 1;
  }
  if (*(_QWORD *)(a1 + 24) > a3)
    goto LABEL_9;
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, unint64_t a3)
{
  const float *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int128 v6;
  uint64_t v7;

  if (result && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    result = (result & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v3 = *(const float **)(a2 + 8);
  v4 = result + 4 * a3;
  if (a3 >= 4)
  {
    v5 = result + 4 * (a3 & 0x3FFFFFFFFFFFFFFCLL);
    do
    {
      v6 = (unsigned __int128)vld2q_f32(v3);
      v3 += 8;
      *(_OWORD *)result = v6;
      result += 16;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v7 = *(_QWORD *)v3;
    v3 += 2;
    *(_DWORD *)result = v7;
    result += 4;
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromArrayLike(a1, a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  if (a3)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (disablePrimitiveGigacageRequested)
    {
      v4 = qword_1ECF4C038;
      if (qword_1ECF4C038)
      {
        for (i = 0; i != a3; ++i)
        {
          v6 = *(_QWORD *)(v3 + 8 * i);
          if (v6)
          {
            v7 = (double)(int)v6;
            v8 = *(_QWORD *)(result + 16);
            if (byte_1ECF4C022)
              v8 = (v8 & 0x3FFFFFFFFLL) + v4;
          }
          else
          {
            v8 = *(_QWORD *)(result + 16);
            v7 = NAN;
            if (byte_1ECF4C022)
              v8 = (v8 & 0x3FFFFFFFFLL) + v4;
          }
          *(double *)(v8 + 8 * i) = v7;
        }
      }
      else
      {
        v9 = 0;
        v10 = *(_QWORD *)(result + 16);
        do
        {
          v11 = *(_QWORD *)(v3 + 8 * v9);
          v12 = (double)(int)v11;
          if (!v11)
            v12 = NAN;
          *(double *)(v10 + 8 * v9++) = v12;
        }
        while (a3 != v9);
      }
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(result + 16);
      if (qword_1ECF4C038)
        v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      do
      {
        v15 = *(_QWORD *)(v3 + 8 * v13);
        v16 = (double)(int)v15;
        if (!v15)
          v16 = NAN;
        *(double *)(v14 + 8 * v13++) = v16;
      }
      while (a3 != v13);
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  if (result && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    result = (result & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (a3)
  {
    v3 = *(_QWORD **)(a2 + 8);
    if (a3 == 1)
      *(_QWORD *)result = *v3;
    else
      return (uint64_t)memcpy((void *)result, v3, 8 * a3);
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromArrayLike(a1, (JSC::JSGlobalObject *)a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if (!JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34))break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (a3)
  {
    v3 = *(_QWORD *)(a2 + 8);
    if (disablePrimitiveGigacageRequested)
    {
      v4 = 0;
      v5 = qword_1ECF4C038;
      do
      {
        v6 = *(_QWORD *)(v3 + 8 * v4);
        if (v6)
        {
          v7 = (float)(int)v6;
          v8 = *(_QWORD *)(result + 16);
          if (v5)
          {
            if (byte_1ECF4C022)
              v8 = (v8 & 0x3FFFFFFFFLL) + v5;
          }
        }
        else
        {
          v8 = *(_QWORD *)(result + 16);
          v7 = NAN;
          if (v5 && byte_1ECF4C022)
          {
            v8 = (v8 & 0x3FFFFFFFFLL) + v5;
            v7 = NAN;
          }
        }
        *(float *)(v8 + 4 * v4++) = v7;
      }
      while (a3 != v4);
    }
    else
    {
      v9 = 0;
      v10 = *(_QWORD *)(result + 16);
      if (qword_1ECF4C038)
        v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      do
      {
        v11 = *(_QWORD *)(v3 + 8 * v9);
        v12 = (float)(int)v11;
        if (!v11)
          v12 = NAN;
        *(float *)(v10 + 4 * v9++) = v12;
      }
      while (a3 != v9);
    }
  }
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::copyFromDoubleShapeArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  float result;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (a3)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v5 = qword_1ECF4C038;
    if (qword_1ECF4C038)
    {
      v6 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        for (i = 0; i != a3; ++i)
        {
          result = *(double *)(v3 + 8 * i);
          *(float *)(v6 + 4 * i) = result;
        }
      }
      else
      {
        v9 = 0;
        v10 = disablePrimitiveGigacageRequested;
        do
        {
          v11 = v4;
          if (!v10)
            v11 = v6;
          result = *(double *)(v3 + 8 * v9);
          *(float *)(v11 + 4 * v9++) = result;
        }
        while (a3 != v9);
      }
    }
    else
    {
      do
      {
        result = *(double *)(v3 + 8 * v5);
        *(float *)(v4 + 4 * v5++) = result;
      }
      while (a3 != v5);
    }
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromArrayLike(a1, a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;

  v11 = *((_QWORD *)a2 + 7);
  v12 = JSC::toNativeFromValue<JSC::Int8Adaptor>(a2, a4, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v23 = *(_DWORD *)(v11 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
    {
      v29 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v29;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v20 = *(_QWORD *)(a1 + 24);
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v24 + 64) && (v28 = *(_QWORD *)(v24 + 32)) != 0)
    v25 = *(_QWORD *)(v28 + 32);
  else
    v25 = *(_QWORD *)(v24 + 48);
  v27 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 32);
  if (v27 + v26 > v25)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v20 = v25 - v26;
LABEL_9:
    if (v20 > a3)
      goto LABEL_10;
    return 0;
  }
  if (v27 > a3)
  {
LABEL_10:
    v21 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v21 + a3) = v12;
    return 1;
  }
  return 0;
}

int8x8_t *JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::copyFromInt32ShapeArray(int8x8_t *result, uint64_t a2, unint64_t a3)
{
  const __int16 *v3;
  int8x8_t *v4;
  int8x8_t *v5;
  unsigned __int128 v6;
  uint64_t v7;

  if (result && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    result = (int8x8_t *)(((unint64_t)result & 0x3FFFFFFFFLL) + qword_1ECF4C038);
  v3 = *(const __int16 **)(a2 + 8);
  v4 = (int8x8_t *)((char *)result + a3);
  if (a3 >= 8)
  {
    v5 = (int8x8_t *)((char *)result + (a3 & 0xFFFFFFFFFFFFFFF8));
    do
    {
      v6 = (unsigned __int128)vld4q_s16(v3);
      v3 += 32;
      *result++ = vmovn_s16((int16x8_t)v6);
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v7 = *(_QWORD *)v3;
    v3 += 4;
    result->i8[0] = v7;
    result = (int8x8_t *)((char *)result + 1);
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  double v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v4 = *(double *)(*(_QWORD *)(a2 + 8) + 8 * i);
      v5 = (int)v4;
      if (v4 != (double)(int)v4)
      {
        v6 = (*(_QWORD *)&v4 >> 52) & 0x7FFLL;
        v7 = v6 - 1023;
        v8 = *(_QWORD *)&v4 >> (51 - (*(_QWORD *)&v4 >> 52));
        if (v6 > 0x433)
          LODWORD(v8) = *(_QWORD *)&v4 << ((*(_QWORD *)&v4 >> 52) - 51);
        if (v6 >= 0x41F)
          v9 = v8;
        else
          v9 = (((1 << ((*(_QWORD *)&v4 >> 52) + 1)) - 1) & v8) + (1 << ((*(_QWORD *)&v4 >> 52) + 1));
        if (v4 >= 0.0)
          LOBYTE(v5) = v9;
        else
          v5 = -v9;
        if (v7 > 0x53)
          LOBYTE(v5) = 0;
      }
      v10 = *(_QWORD *)(result + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_BYTE *)(v10 + i) = v5;
    }
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromArrayLike(JSC::JSArrayBufferView *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::Symbol *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const WTF::String *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v94;
  WTF::StringImpl *v95;
  JSC::JSObject *v96;
  JSC::VM *v97;
  uint64_t v98;

  v8 = *((_QWORD *)a2 + 7);
  v97 = (JSC::VM *)v8;
  v98 = a4;
  if (JSC::JSArrayBufferView::isDetached(a1))
  {
    JSC::throwTypeError((unint64_t)a2, &v97, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
  }
  else if ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 36)
  {
    v17 = JSC::JSArrayBufferView::length(a1, v9, v10, v11, v12, v13, v14, v15);
    v31 = (unsigned int *)JSC::JSValue::toObject((JSC::JSValue *)&v98, a2, v18, v19, v20, v21, v22, v23);
    if (!*(_DWORD *)(v8 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, v24, v25, v26, v27, v28, v29, v30))
    {
      v96 = (JSC::JSObject *)JSC::JSObject::get(v31, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 1768), v26, v27, v28, v29, v30);
      if (!*(_DWORD *)(v8 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, v32, v33, v34, v35, v36, v37, v38))
      {
        v47 = JSC::JSValue::toLength(&v96, a2, v33, v34, v35, v36, v37, v38, v39);
        if (!*(_DWORD *)(v8 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, v40, v41, v42, v43, v44, v45, v46))
        {
          if (a3 > 0x100000000 || __CFADD__(v47, a3) || v47 + a3 > v17)
          {
            v48 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v48 = 0x3700000002;
            *(_QWORD *)(v48 + 8) = "Range consisting of offset and length are out of bounds";
            *(_DWORD *)(v48 + 16) = 4;
            v95 = (WTF::StringImpl *)v48;
            v50 = JSC::createRangeError((unint64_t)a2, &v95, v49);
            JSC::VM::throwException((JSC::VM *)v8, a2, v50, v51, v52, v53, v54, v55);
            v63 = v95;
            v95 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
                WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
          }
          else
          {
            if (v47 >= 0xFFFFFFFF)
              v64 = 0xFFFFFFFFLL;
            else
              v64 = v47;
            if (v64)
            {
              v65 = 0;
              while (1)
              {
                v68 = JSC::JSObject::get((JSC::JSObject *)v31, a2, v65);
                if (*(_DWORD *)(v8 + 80))
                {
                  v94 = v68;
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, v66, v67, v68, v69, v70, v71, v72);
                  v68 = v94;
                  if (hasExceptionsAfterHandlingTraps)
                    break;
                }
                if (!JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex((uint64_t)a1, a2, a3 + v65, v68, v69, v70, v71, v72, v73))break;
                if (v64 == ++v65)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              if (HIDWORD(v47))
              {
                v74 = v47 - 1;
                do
                {
                  v82 = JSC::JSObject::get((JSC::JSObject *)v31, (uint64_t ***)a2, (const WTF::StringImpl *)v64, v42, v43, v44, v45, v46);
                  if (*(_DWORD *)(v8 + 80)
                    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, v75, v76, v77, v78, v79, v80, v81))
                  {
                    break;
                  }
                  if (!JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex((uint64_t)a1, a2, a3 + v64, v82, v78, v79, v80, v81, v83))break;
                }
                while (v74 != v64++);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if ((*(_BYTE *)(a4 + 4) & 0xE) != 0)
      v16 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
    else
      v16 = 0;
    JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromArrayLike((uint64_t)a1, a2, a3, a4, 0, v16, v14, v15);
  }
}

void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromArrayLike(a1, a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;

  v11 = *((_QWORD *)a2 + 7);
  v12 = JSC::toNativeFromValue<JSC::Int16Adaptor>(a2, a4, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v28 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v28;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v23 + 64) && (v27 = *(_QWORD *)(v23 + 32)) != 0)
      v24 = *(_QWORD *)(v27 + 32);
    else
      v24 = *(_QWORD *)(v23 + 48);
    v26 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 32);
    if (v25 + 2 * v26 > v24)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v24 - v25) >> 1)
        return 0;
    }
    else if (v26 <= a3)
    {
      return 0;
    }
LABEL_9:
    v20 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_WORD *)(v20 + 2 * a3) = v12;
    return 1;
  }
  if (*(_QWORD *)(a1 + 24) > a3)
    goto LABEL_9;
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, unint64_t a3)
{
  const __int16 *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int128 v6;
  uint64_t v7;

  if (result && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    result = (result & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v3 = *(const __int16 **)(a2 + 8);
  v4 = result + 2 * a3;
  if (a3 >= 8)
  {
    v5 = result + 2 * (a3 & 0x7FFFFFFFFFFFFFF8);
    do
    {
      v6 = (unsigned __int128)vld4q_s16(v3);
      v3 += 32;
      *(_OWORD *)result = v6;
      result += 16;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v7 = *(_QWORD *)v3;
    v3 += 4;
    *(_WORD *)result = v7;
    result += 2;
  }
  return result;
}

void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromArrayLike(a1, a2, (uint64_t)a3, this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;

  v11 = *((_QWORD *)a2 + 7);
  v12 = JSC::toNativeFromValue<JSC::Uint16Adaptor>(a2, a4, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v28 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v28;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v19 = *(_QWORD *)(a1 + 16);
    if (!v19
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v23 + 64) && (v27 = *(_QWORD *)(v23 + 32)) != 0)
      v24 = *(_QWORD *)(v27 + 32);
    else
      v24 = *(_QWORD *)(v23 + 48);
    v26 = *(_QWORD *)(a1 + 24);
    v25 = *(_QWORD *)(a1 + 32);
    if (v25 + 2 * v26 > v24)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v24 - v25) >> 1)
        return 0;
    }
    else if (v26 <= a3)
    {
      return 0;
    }
LABEL_9:
    v20 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_WORD *)(v20 + 2 * a3) = v12;
    return 1;
  }
  if (*(_QWORD *)(a1 + 24) > a3)
    goto LABEL_9;
  return 0;
}

void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(uint64_t a1, uint64_t a2, JSC::Structure *a3, uint64_t this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  JSC::Structure *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  JSC::Heap **v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  JSC::Exception *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::Structure *v63;
  int8x16_t v64;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  char v80;
  int v81;
  int v82;
  int v83;
  uint64_t (*v84)(uint64_t *);
  uint64_t *v85;
  JSC::Structure *v86;
  WTF::StringImpl *v87;
  JSC::JSObject *v88;
  JSC::VM *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;

  v8 = (unsigned __int8 *)this;
  v12 = *(_QWORD *)(a2 + 56);
  v89 = (JSC::VM *)v12;
  v90 = this;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      JSC::throwTypeError(a2, &v89, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      return;
    }
  }
  v14 = this & 0xFFFE000000000002;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 36)
  {
    if ((*(_BYTE *)(this + 4) & 0xE) != 0)
      v15 = *(unsigned int *)(*(_QWORD *)(this + 8) - 8);
    else
      v15 = 0;
    JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(a1, (JSC::JSGlobalObject *)a2, (uint64_t)a3, (JSC::JSObject *)this, 0, v15, a7, a8);
    return;
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (!v14)
      goto LABEL_16;
LABEL_72:
    v75 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v90, (JSC::JSGlobalObject *)a2, a3, this, a5, a6, a7, a8);
    goto LABEL_73;
  }
  LOBYTE(v91) = 0;
  LOBYTE(v92) = 0;
  v79 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v91, (uint64_t)a3, this, a5, a6, a7, a8);
  if (v80)
    v16 = v79;
  else
    v16 = 0;
  if (v14)
    goto LABEL_72;
LABEL_16:
  if (v8[5] <= 0x16u)
  {
    v75 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v8, (JSC::SymbolObject **)a2, (uint64_t)a3, (JSC::Symbol *)this, a5, a6, a7, a8);
LABEL_73:
    v8 = (unsigned __int8 *)v75;
  }
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_18;
  v81 = *(_DWORD *)(v12 + 80);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, this, a5, a6, a7, a8);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_18:
    v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), this, a5, a6, a7, a8);
    v88 = v17;
    if (*(_DWORD *)(v12 + 80))
    {
      v82 = *(_DWORD *)(v12 + 80);
      if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v12 + 16))
        return;
      v17 = v88;
    }
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v88, (JSC::JSGlobalObject *)a2, v18, v19, v20, v21, v22, v23, v24);
      else
        *(_QWORD *)&v76 = (char *)v17 - 0x2000000000000;
      v77 = trunc(v76 + 0.0);
      v78 = 9.00719925e15;
      if (v77 <= 9.00719925e15)
        v78 = v77;
      if (v77 > 0.0)
        v25 = (unint64_t)v78;
      else
        v25 = 0;
    }
    else
    {
      v25 = v17 & ~((int)v17 >> 31);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_24;
    v83 = *(_DWORD *)(v12 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_24:
      if ((unint64_t)a3 > 0x100000000 || __CFADD__(v25, a3) || (unint64_t)a3 + v25 > v16)
      {
        v37 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v37 = 0x3700000002;
        *(_QWORD *)(v37 + 8) = "Range consisting of offset and length are out of bounds";
        *(_DWORD *)(v37 + 16) = 4;
        v87 = (WTF::StringImpl *)v37;
        v38 = *(_QWORD *)(a2 + 128);
        v39 = *(JSC::Heap ***)(a2 + 56);
        if ((v38 & 1) != 0)
        {
          v84 = *(uint64_t (**)(uint64_t *))(v38 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v85 = (uint64_t *)(a2 - 16);
          else
            v85 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v91 = *v85;
          v92 = a2;
          v93 = (char *)(a2 + 128);
          v38 = v84(&v91);
        }
        v40 = JSC::ErrorInstance::create(v39, v38, &v87, 0, 0, 0, 2, 1);
        v47 = (JSC::Exception *)v40;
        if ((v40 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x4C)))
        {
          v47 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)v40, 0, v41, v42, v43, v44, v45);
        }
        JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v47, v46, v41, v42, v43, v44, v45);
        v55 = v87;
        v87 = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v55 -= 2;
          }
        }
      }
      else
      {
        if (v25 >= 0xFFFFFFFF)
          v26 = 0xFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
        {
          v27 = 0;
          while (1)
          {
            v28 = JSC::JSObject::get((JSC::JSObject *)v8, (JSC::JSGlobalObject *)a2, v27);
            v35 = (JSC::Structure *)v28;
            if (*(_DWORD *)(v12 + 80))
            {
              v86 = (JSC::Structure *)v28;
              v36 = *(_DWORD *)(v12 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v29, v28, v30, v31, v32, v33);
              v35 = v86;
              if (*(_QWORD *)(v12 + 16))
                break;
            }
            if ((JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v27, v35, v30, v31, v32, v33, v34) & 1) == 0)break;
            if (v26 == ++v27)
              goto LABEL_46;
          }
        }
        else
        {
LABEL_46:
          if (HIDWORD(v25))
          {
            v56 = v25 - 1;
            do
            {
              v63 = (JSC::Structure *)JSC::JSObject::get((JSC::JSObject *)v8, (uint64_t ***)a2, (const WTF::StringImpl *)v26, v19, v20, v21, v22, v23);
              if (*(_DWORD *)(v12 + 80))
              {
                v66 = *(_DWORD *)(v12 + 80);
                if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v57, v58, v59, v60, v61, v62);
                if (*(_QWORD *)(v12 + 16))
                  break;
              }
              if (!JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, (unint64_t)a3 + v26, v63, v59, v60, v61, v62, v64))break;
            }
            while (v56 != v26++);
          }
        }
      }
    }
  }
}

uint64_t JSC::JSGlobalObject::typedArrayStructure(unint64_t a1, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v6)(_QWORD *);
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[3];

  if (a3)
  {
    switch(a2)
    {
      case 1:
        v3 = (uint64_t *)(a1 + 1680);
        break;
      case 2:
        v3 = (uint64_t *)(a1 + 1704);
        break;
      case 3:
        v3 = (uint64_t *)(a1 + 1728);
        break;
      case 4:
        v3 = (uint64_t *)(a1 + 1752);
        break;
      case 5:
        v3 = (uint64_t *)(a1 + 1776);
        break;
      case 6:
        v3 = (uint64_t *)(a1 + 1800);
        break;
      case 7:
        v3 = (uint64_t *)(a1 + 1824);
        break;
      case 8:
        v3 = (uint64_t *)(a1 + 1848);
        break;
      case 9:
        v3 = (uint64_t *)(a1 + 1872);
        break;
      case 10:
        v3 = (uint64_t *)(a1 + 1896);
        break;
      case 11:
        v3 = (uint64_t *)(a1 + 1920);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198AEE374);
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        v3 = (uint64_t *)(a1 + 1664);
        break;
      case 2:
        v3 = (uint64_t *)(a1 + 1688);
        break;
      case 3:
        v3 = (uint64_t *)(a1 + 1712);
        break;
      case 4:
        v3 = (uint64_t *)(a1 + 1736);
        break;
      case 5:
        v3 = (uint64_t *)(a1 + 1760);
        break;
      case 6:
        v3 = (uint64_t *)(a1 + 1784);
        break;
      case 7:
        v3 = (uint64_t *)(a1 + 1808);
        break;
      case 8:
        v3 = (uint64_t *)(a1 + 1832);
        break;
      case 9:
        v3 = (uint64_t *)(a1 + 1856);
        break;
      case 10:
        v3 = (uint64_t *)(a1 + 1880);
        break;
      case 11:
        v3 = (uint64_t *)(a1 + 1904);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198AEE354);
    }
  }
  v4 = *v3;
  if ((*v3 & 1) != 0)
  {
    v6 = *(uint64_t (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    if (a1)
    {
      v7 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v7 = (uint64_t *)(a1 - 16);
      v8 = *v7;
    }
    else
    {
      v8 = -192;
    }
    v9[0] = v8;
    v9[1] = a1;
    v9[2] = v3;
    return v6(v9);
  }
  return v4;
}

JSC::JSCell *JSC::genericTypedArrayViewProtoFuncSlice<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  JSC *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSCell *v21;
  JSC::JSCell *v22;
  unint64_t OutOfMemoryError;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  uint64_t (*v32)(_QWORD *);
  _QWORD *v33;
  _QWORD v34[6];

  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 1736);
  if ((v10 & 1) != 0)
  {
    v32 = *(uint64_t (**)(_QWORD *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v33 = (_QWORD *)(v9 - 16);
    v34[0] = *v33;
    v34[1] = v9;
    v34[2] = v9 + 1736;
    v10 = v32(v34);
    v9 = **a1;
  }
  v11 = *(_BYTE *)(*a1[1] + 40);
  v12 = *a1[2];
  v13 = *(JSC **)(v9 + 56);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v34, v13, v10, v12, 2, (v11 & 6) == 0, a7, a8);
  if (v34[0])
  {
    v21 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v13, (JSC::VM *)0x30, v15, v16, v17, v18, v19, v20);
    v22 = JSC::JSArrayBufferView::JSArrayBufferView(v21, (uint64_t)v13, (uint64_t)v34);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v22, v13);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(v9, v14);
    v30 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v30 = (JSC::Exception *)JSC::Exception::create((uint64_t)v13, (JSC::VM *)OutOfMemoryError, 0, v24, v25, v26, v27, v28);
    }
    JSC::VM::throwException(v13, (JSC::JSGlobalObject *)v9, v30, v29, v24, v25, v26, v27, v28);
    return 0;
  }
  return v21;
}

unint64_t JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1712);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1712);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2416);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 3);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2416), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1712);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1712);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1720);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2416);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_92;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_92;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_92;
          }
          if (*(unsigned __int8 *)(v28 + 5) - 39 < 9)
            goto LABEL_115;
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_92:
        v28 = 0;
LABEL_115:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        return v28;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = **a3;
  if (*(_BYTE *)(*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1728);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1728);
    goto LABEL_96;
  }
  v27 = *(_QWORD *)(v26 + 1712);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1712);
LABEL_96:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
}

unint64_t JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject ***a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1784);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1784);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2464);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 6);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2464), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1784);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1784);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1792);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2464);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_92;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_92;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_92;
          }
          if (*(unsigned __int8 *)(v28 + 5) - 39 < 9)
            goto LABEL_115;
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_92:
        v28 = 0;
LABEL_115:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        return v28;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = (uint64_t)**a3;
  if (*((_BYTE *)*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1800);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1800);
    goto LABEL_96;
  }
  v27 = *(_QWORD *)(v26 + 1784);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1784);
LABEL_96:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
}

unint64_t JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(JSC::JSGlobalObject ***a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v18[3];

  v10 = **a1;
  if (*((_BYTE *)*a1[1] + 64))
  {
    v11 = *((_QWORD *)v10 + 228);
    if ((v11 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(**a1, v11, (uint64_t)a1[1], (unint64_t)*a1[2], (unint64_t)*a1[3], (uint64_t)a1[3][1], a2, a8, a9);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)((unint64_t)v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v17 = (uint64_t *)((char *)v10 - 16);
    v15 = *v17;
    v16 = (uint64_t)v10 + 1824;
    goto LABEL_7;
  }
  v11 = *((_QWORD *)v10 + 226);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)((unint64_t)v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v14 = (uint64_t *)((char *)v10 - 16);
    v15 = *v14;
    v16 = (uint64_t)v10 + 1808;
LABEL_7:
    v18[0] = v15;
    v18[1] = v10;
    v18[2] = v16;
    v11 = v13(v18);
  }
  return JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(**a1, v11, (uint64_t)a1[1], (unint64_t)*a1[2], (unint64_t)*a1[3], (uint64_t)a1[3][1], a2, a8, a9);
}

uint64_t *JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v36;
  uint64_t *v37;
  _BYTE v38[24];
  uint64_t v39;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 93024)
                                                                                + 16))(*(_QWORD *)(*(_QWORD *)a1 + 93024), **(_QWORD **)(a1 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a1 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a1 + 24));
  v10 = result;
  v11 = *(unsigned int *)(a2 + 8);
  v12 = (_DWORD *)(a2 + 8);
  if ((_DWORD)v11 == *(_DWORD *)(a2 + 12))
  {
    if (v11 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(a2 + 8), 2 * (int)v11),
          (_DWORD)result))
    {
      *(_BYTE *)a2 = 1;
      goto LABEL_5;
    }
    LODWORD(v11) = *v12;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 16);
    if (v13 == a2 + 32 || !v13)
    {
      *(_QWORD *)(v13 + 8 * v11) = result;
      *v12 = v11 + 1;
      goto LABEL_5;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v11) = v10;
  *(_DWORD *)(a2 + 8) = v11 + 1;
  if (!*(_QWORD *)(a2 + 24) && ((unint64_t)v10 & 0xFFFE000000000002) == 0 && v10 != 0)
  {
    v30 = (uint64_t *)((unint64_t)v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v30 = v10 - 2;
    v31 = (uint64_t *)(*v30 + 560);
    *(_QWORD *)(a2 + 24) = v31;
    v39 = a2 + 8;
    result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v31, &v39, v5, v6, v7, v8, v9, (uint64_t)v38);
  }
LABEL_5:
  v14 = **(_QWORD **)(a1 + 32);
  v15 = HIDWORD(v14);
  v16 = v14 | 0xFFFE000000000000;
  if ((v14 & 0x80000000) != 0)
    v16 = COERCE__INT64((double)v14) + 0x2000000000000;
  v17 = COERCE__INT64((double)v14) + 0x2000000000000;
  if (v15)
    v18 = v17;
  else
    v18 = v16;
  v19 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v19 == *(_DWORD *)(a2 + 12))
  {
    if (v19 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(a2 + 8), 2 * (int)v19),
          (_DWORD)result))
    {
      *(_BYTE *)a2 = 1;
      goto LABEL_14;
    }
    LODWORD(v19) = *v12;
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 16);
    if (v20 == a2 + 32 || !v20)
    {
      *(_QWORD *)(v20 + 8 * v19) = v18;
      *v12 = v19 + 1;
      goto LABEL_14;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v19) = v18;
  *(_DWORD *)(a2 + 8) = v19 + 1;
  if (!*(_QWORD *)(a2 + 24) && (v18 & 0xFFFE000000000002) == 0 && v18 != 0)
  {
    v33 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v33 = (_QWORD *)(v18 - 16);
    v34 = (uint64_t *)(*v33 + 560);
    *(_QWORD *)(a2 + 24) = v34;
    v39 = a2 + 8;
    result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v34, &v39, v5, v6, v7, v8, v9, (uint64_t)v38);
  }
LABEL_14:
  v21 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v21 + 8))
    return result;
  v22 = *(_QWORD *)v21;
  v23 = HIDWORD(v22);
  v24 = v22 | 0xFFFE000000000000;
  if ((v22 & 0x80000000) != 0)
    v24 = COERCE__INT64((double)v22) + 0x2000000000000;
  v25 = COERCE__INT64((double)v22) + 0x2000000000000;
  if (v23)
    v26 = v25;
  else
    v26 = v24;
  v27 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v27 == *(_DWORD *)(a2 + 12))
  {
    if (v27 >> 30
      || (result = (uint64_t *)JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(a2 + 8), 2 * (int)v27),
          (_DWORD)result))
    {
      *(_BYTE *)a2 = 1;
      return result;
    }
    LODWORD(v27) = *v12;
  }
  else
  {
    v28 = *(_QWORD *)(a2 + 16);
    if (v28 == a2 + 32 || !v28)
    {
      *(_QWORD *)(v28 + 8 * v27) = v26;
      *v12 = v27 + 1;
      return result;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v27) = v26;
  *(_DWORD *)(a2 + 8) = v27 + 1;
  if (!*(_QWORD *)(a2 + 24) && (v26 & 0xFFFE000000000002) == 0 && v26 != 0)
  {
    v36 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v36 = (_QWORD *)(v26 - 16);
    v37 = (uint64_t *)(*v36 + 560);
    *(_QWORD *)(a2 + 24) = v37;
    v39 = a2 + 8;
    return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v37, &v39, v5, v6, v7, v8, v9, (uint64_t)v38);
  }
  return result;
}

JSC::JSCell *JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject ***a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1856);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1856);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2512);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 9);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2512), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1856);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1856);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1864);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2512);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_92;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_92;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_92;
          }
          if (*(unsigned __int8 *)(v28 + 5) - 39 < 9)
            goto LABEL_115;
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_92:
        v28 = 0;
LABEL_115:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        return (JSC::JSCell *)v28;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = (uint64_t)**a3;
  if (*((_BYTE *)*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1872);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1872);
    goto LABEL_96;
  }
  v27 = *(_QWORD *)(v26 + 1856);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1856);
LABEL_96:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
}

JSC::JSCell *JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::JSArrayBufferView *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  int v74;
  _BYTE v75[8];
  uint64_t v76;
  char *v77;
  _OWORD v78[4];
  uint64_t v79;
  JSC::VM *v80;

  v12 = a1[7];
  v80 = (JSC::VM *)v12;
  v13 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v13 == a1)
  {
    v16 = JSC::JSGlobalObject::typedArrayPrototype(a1, 8);
    v17 = a1[312];
    if ((v17 & 1) != 0)
      v18 = (v17 >> 1) & 3;
    else
      v18 = *(unsigned __int8 *)(v17 + 4);
    if (!v18)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint(a1, 8);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_19;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    if (v19 == v16
      && ((v20 = a1[312], (v20 & 1) != 0) ? (v21 = (v20 >> 1) & 3) : (v21 = *(unsigned __int8 *)(v20 + 4)),
          v21 == 1))
    {
      v22 = a1[295];
      if ((v22 & 1) != 0)
        v23 = (v22 >> 1) & 3;
      else
        v23 = *(unsigned __int8 *)(v22 + 4);
      v24 = v23 == 1;
    }
    else
    {
LABEL_19:
      v24 = 0;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, v15, a4, a5, a6, a7, a8);
      if (!hasExceptionsAfterHandlingTraps && v24)
        return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
      if (hasExceptionsAfterHandlingTraps)
        return 0;
    }
    else if (v24)
    {
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    }
  }
  v34 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v27, v28, v29, v30, v31, v32, v33))
  {
    if (v34 == 10)
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) <= 0x16u)
    {
      JSC::throwTypeError((unint64_t)a1, &v80, (uint64_t)"constructor Property should not be null", 40);
      return 0;
    }
    v35 = JSC::JSGlobalObject::typedArrayConstructor((unint64_t)a1, 8);
    if (v13 == a1 && v35 == v34)
    {
      v42 = a1[312];
      v43 = (v42 & 1) != 0 ? (v42 >> 1) & 3 : *(unsigned __int8 *)(v42 + 4);
      if (v43 == 1)
      {
        v44 = a1[295];
        v45 = (v44 & 1) != 0 ? (v44 >> 1) & 3 : *(unsigned __int8 *)(v44 + 4);
        if (v45 == 1)
          return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
      }
    }
    v46 = v35;
    v54 = JSC::JSObject::get((unsigned int *)v34, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2752), v36, v37, v38, v39, v40);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v47, v48, v49, v50, v51, v52, v53))
    {
      return 0;
    }
    if ((v54 & 0xFFFFFFFFFFFFFFF7) == 2 || v54 == v46)
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    v75[0] = 0;
    v76 = 0x800000000;
    v77 = (char *)v78 + 8;
    memset(v78, 0, sizeof(v78));
    v79 = 0;
    JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}::operator()(a4, (uint64_t)v75);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v55, v56, v57, v58, v59, v60, v61))
    {
      goto LABEL_50;
    }
    v73 = v77;
    v74 = v76;
    v69 = JSC::construct((unint64_t)a1, v54, (uint64_t)&v73, (uint64_t)"species is not a constructor", 29);
    if (*(_DWORD *)(v12 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v62, (uint64_t)v63, v64, v65, v66, v67, v68))
        goto LABEL_50;
    }
    if ((v69 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v69 + 5) - 50 < 0xFFFFFFF5)
    {
      v70 = "species constructor did not return a TypedArray View";
      v71 = 53;
    }
    else
    {
      JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v69, v63, v64, v65, v66, v67, v68);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v72, (uint64_t)v63, v64, v65, v66, v67, v68))
      {
        goto LABEL_50;
      }
      if (*(unsigned __int8 *)(v69 + 5) - 39 < 9)
        goto LABEL_60;
      v70 = "Content types of source and created typed arrays are different";
      v71 = 63;
    }
    JSC::throwTypeError((unint64_t)a1, &v80, (uint64_t)v70, v71);
LABEL_50:
    v69 = 0;
LABEL_60:
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v76, v72, (uint64_t)v63, v64, v65, v66, v67, v68);
    return (JSC::JSCell *)v69;
  }
  return 0;
}

JSC::JSCell *JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = JSC::JSGlobalObject::typedArrayStructure(**(_QWORD **)a1, 8, *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 64));
  return JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(**(JSC::JSGlobalObject ***)a1, v2, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v5, v3, v4);
}

JSC::JSCell *JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  JSC::JSArrayBufferView *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  int v74;
  _BYTE v75[8];
  uint64_t v76;
  char *v77;
  _OWORD v78[4];
  uint64_t v79;
  JSC::VM *v80;

  v12 = a1[7];
  v80 = (JSC::VM *)v12;
  v13 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v13 == a1)
  {
    v16 = JSC::JSGlobalObject::typedArrayPrototype(a1, 1);
    v17 = a1[298];
    if ((v17 & 1) != 0)
      v18 = (v17 >> 1) & 3;
    else
      v18 = *(unsigned __int8 *)(v17 + 4);
    if (!v18)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint(a1, 1);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_16;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    if (v19 == v16
      && ((v20 = a1[298], (v20 & 1) != 0) ? (v21 = (v20 >> 1) & 3) : (v21 = *(unsigned __int8 *)(v20 + 4)),
          v21 == 1))
    {
      v22 = a1[295];
      if ((v22 & 1) != 0)
        v23 = (v22 >> 1) & 3;
      else
        v23 = *(unsigned __int8 *)(v22 + 4);
      v24 = v23 == 1;
    }
    else
    {
LABEL_16:
      v24 = 0;
    }
    if (*(_DWORD *)(v12 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, v15, a4, a5, a6, a7, a8);
      if (!hasExceptionsAfterHandlingTraps && v24)
        return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
      if (hasExceptionsAfterHandlingTraps)
        return 0;
    }
    else if (v24)
    {
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    }
  }
  v34 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v27, v28, v29, v30, v31, v32, v33))
  {
    if (v34 == 10)
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) <= 0x16u)
    {
      JSC::throwTypeError((unint64_t)a1, &v80, (uint64_t)"constructor Property should not be null", 40);
      return 0;
    }
    v35 = JSC::JSGlobalObject::typedArrayConstructor((unint64_t)a1, 1);
    if (v13 == a1 && v35 == v34)
    {
      v42 = a1[298];
      v43 = (v42 & 1) != 0 ? (v42 >> 1) & 3 : *(unsigned __int8 *)(v42 + 4);
      if (v43 == 1)
      {
        v44 = a1[295];
        v45 = (v44 & 1) != 0 ? (v44 >> 1) & 3 : *(unsigned __int8 *)(v44 + 4);
        if (v45 == 1)
          return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
      }
    }
    v46 = v35;
    v54 = JSC::JSObject::get((unsigned int *)v34, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 2752), v36, v37, v38, v39, v40);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v47, v48, v49, v50, v51, v52, v53))
    {
      return 0;
    }
    if ((v54 & 0xFFFFFFFFFFFFFFF7) == 2 || v54 == v46)
      return JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(a3);
    v75[0] = 0;
    v76 = 0x800000000;
    v77 = (char *)v78 + 8;
    memset(v78, 0, sizeof(v78));
    v79 = 0;
    JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}::operator()(a4, (uint64_t)v75);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v55, v56, v57, v58, v59, v60, v61))
    {
      goto LABEL_50;
    }
    v73 = v77;
    v74 = v76;
    v69 = JSC::construct((unint64_t)a1, v54, (uint64_t)&v73, (uint64_t)"species is not a constructor", 29);
    if (*(_DWORD *)(v12 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v62, (uint64_t)v63, v64, v65, v66, v67, v68))
        goto LABEL_50;
    }
    if ((v69 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v69 + 5) - 50 < 0xFFFFFFF5)
    {
      v70 = "species constructor did not return a TypedArray View";
      v71 = 53;
    }
    else
    {
      JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v69, v63, v64, v65, v66, v67, v68);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v72, (uint64_t)v63, v64, v65, v66, v67, v68))
      {
        goto LABEL_50;
      }
      if (*(unsigned __int8 *)(v69 + 5) - 39 < 9)
        goto LABEL_60;
      v70 = "Content types of source and created typed arrays are different";
      v71 = 63;
    }
    JSC::throwTypeError((unint64_t)a1, &v80, (uint64_t)v70, v71);
LABEL_50:
    v69 = 0;
LABEL_60:
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v76, v72, (uint64_t)v63, v64, v65, v66, v67, v68);
    return (JSC::JSCell *)v69;
  }
  return 0;
}

JSC::JSCell *JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = JSC::JSGlobalObject::typedArrayStructure(**(_QWORD **)a1, 1, *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 64));
  return JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create(**(JSC::JSGlobalObject ***)a1, v2, *(_QWORD *)(a1 + 8), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v5, v3, v4);
}

unint64_t JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(JSC::JSGlobalObject ***a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD *);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD v18[3];

  v10 = **a1;
  if (*((_BYTE *)*a1[1] + 64))
  {
    v11 = *((_QWORD *)v10 + 213);
    if ((v11 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create(**a1, v11, (uint64_t)a1[1], (unint64_t)*a1[2], (unint64_t)*a1[3], (uint64_t)a1[3][1], a2, a8, a9);
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v17 = (uint64_t *)((unint64_t)v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v17 = (uint64_t *)((char *)v10 - 16);
    v15 = *v17;
    v16 = (uint64_t)v10 + 1704;
    goto LABEL_7;
  }
  v11 = *((_QWORD *)v10 + 211);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (uint64_t *)((unint64_t)v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v14 = (uint64_t *)((char *)v10 - 16);
    v15 = *v14;
    v16 = (uint64_t)v10 + 1688;
LABEL_7:
    v18[0] = v15;
    v18[1] = v10;
    v18[2] = v16;
    v11 = v13(v18);
  }
  return JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create(**a1, v11, (uint64_t)a1[1], (unint64_t)*a1[2], (unint64_t)*a1[3], (uint64_t)a1[3][1], a2, a8, a9);
}

JSC::JSCell *JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject ***a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1736);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1736);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2432);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 4);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2432), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1736);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1736);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1744);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2432);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_92;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_92;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_92;
          }
          if (*(unsigned __int8 *)(v28 + 5) - 39 < 9)
            goto LABEL_115;
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_92:
        v28 = 0;
LABEL_115:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        return (JSC::JSCell *)v28;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = (uint64_t)**a3;
  if (*((_BYTE *)*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1752);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1752);
    goto LABEL_96;
  }
  v27 = *(_QWORD *)(v26 + 1736);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1736);
LABEL_96:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
}

JSC::JSCell *JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, JSC::JSGlobalObject ***a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1760);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1760);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2448);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 5);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2448), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1760);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1760);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1768);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2448);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_92;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_92;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_92;
          }
          if (*(unsigned __int8 *)(v28 + 5) - 39 < 9)
            goto LABEL_115;
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_92:
        v28 = 0;
LABEL_115:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        return (JSC::JSCell *)v28;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = (uint64_t)**a3;
  if (*((_BYTE *)*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1776);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1776);
    goto LABEL_96;
  }
  v27 = *(_QWORD *)(v26 + 1760);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1760);
LABEL_96:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create(**a3, v27, (uint64_t)a3[1], (unint64_t)*a3[2], (unint64_t)*a3[3], (uint64_t)a3[3][1], a9, a7, a8);
}

unint64_t JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1880);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1880);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2528);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 10);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2528), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1880);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1880);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1888);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2528);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_115;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_115;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_115;
          }
          if ((*(_BYTE *)(v28 + 5) & 0xFE) == 0x30)
          {
LABEL_116:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
            return v28;
          }
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_115:
        v28 = 0;
        goto LABEL_116;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = **a3;
  if (*(_BYTE *)(*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1896);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1896);
    goto LABEL_94;
  }
  v27 = *(_QWORD *)(v26 + 1880);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1880);
LABEL_94:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
}

unint64_t JSC::speciesConstruct<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>,long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1},long long JSC::genericTypedArrayViewProtoFuncSubarray<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::VM &,JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)#1}>(uint64_t a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v30)(uint64_t *);
  uint64_t *v31;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  JSC::JSArrayBufferView *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  WTF *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  WTF *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t *);
  uint64_t *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t *v87;
  int v88;
  void (*v89)(uint64_t *);
  uint64_t *v90;
  unsigned int v91;
  _QWORD *v92;
  unsigned int v93;
  _QWORD *v94;
  unsigned int v95;
  _QWORD *v96;
  int v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  unint64_t v104;
  WTF *v105;
  uint64_t v106;
  BOOL v107;
  _QWORD *v109;
  int v110;
  int v112;
  int v114;
  int v115;
  unint64_t v116;
  WTF *v117;
  uint64_t v118;
  BOOL v119;
  _QWORD *v121;
  int v122;
  int v124;
  uint64_t v125;
  WTF *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  _OWORD v131[4];
  uint64_t v132;
  JSC::VM *v133;
  JSC::VM *v134;
  uint64_t v135[3];

  v13 = *(_QWORD *)(a1 + 56);
  v133 = (JSC::VM *)v13;
  v14 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if (v14 == (uint64_t *)a1)
  {
    v15 = *(_QWORD *)(a1 + 1904);
    if ((v15 & 1) != 0)
    {
      v30 = *(uint64_t (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v31 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v31 = (uint64_t *)(a1 - 16);
      v128 = *v31;
      v129 = a1;
      v130 = (WTF *)(a1 + 1904);
      v15 = v30(&v128);
    }
    v16 = *(_QWORD *)(a1 + 2544);
    if ((v16 & 1) != 0)
      v17 = (v16 >> 1) & 3;
    else
      v17 = *(unsigned __int8 *)(v16 + 4);
    v18 = *(_QWORD *)(v15 + 48);
    if (!v17)
      JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint((uint64_t *)a1, 11);
    if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v19)
      v19 = *(_QWORD *)(a2 + 16);
    v20 = v18 == 2 ? 0 : v18;
    if (v20 == v19
      && ((v21 = *(_QWORD *)(a1 + 2544), (v21 & 1) != 0)
        ? (v22 = (v21 >> 1) & 3)
        : (v22 = *(unsigned __int8 *)(v21 + 4)),
          v22 == 1))
    {
      v23 = *(_QWORD *)(a1 + 2360);
      if ((v23 & 1) != 0)
        v24 = (v23 >> 1) & 3;
      else
        v24 = *(unsigned __int8 *)(v23 + 4);
      v25 = v24 == 1;
    }
    else
    {
LABEL_20:
      v25 = 0;
    }
    if (*(_DWORD *)(v13 + 80))
    {
      v32 = *(_DWORD *)(v13 + 80);
      if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(_QWORD *)(v13 + 16);
      if (v33)
        v34 = 0;
      else
        v34 = v25;
      if (v34)
        goto LABEL_23;
      if (v33)
        return 0;
    }
    else if (v25)
    {
      goto LABEL_23;
    }
  }
  v39 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1080), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v88 = *(_DWORD *)(v13 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v35, v36, v37, v38, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if (v39 == 10)
    goto LABEL_23;
  if ((v39 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v39 + 5) <= 0x16u)
  {
    JSC::throwTypeError(a1, &v133, (uint64_t)"constructor Property should not be null", 40);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 1904);
  if ((v40 & 1) != 0)
  {
    v89 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v90 = (uint64_t *)(a1 - 16);
    else
      v90 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v128 = *v90;
    v129 = a1;
    v130 = (WTF *)(a1 + 1904);
    v89(&v128);
  }
  v41 = *(_QWORD *)(a1 + 1912);
  if (v14 == (uint64_t *)a1 && v41 == v39)
  {
    v43 = *(_QWORD *)(a1 + 2544);
    v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
    if (v44 == 1)
    {
      v45 = *(_QWORD *)(a1 + 2360);
      v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
      if (v46 == 1)
        goto LABEL_23;
    }
  }
  v51 = JSC::JSObject::get((unsigned int *)v39, a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2752), v36, v37, v38, a7, a8);
  v125 = v13;
  if (*(_DWORD *)(v13 + 80))
  {
    v97 = *(_DWORD *)(v13 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v47, v48, v49, v50, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  if ((v51 & 0xFFFFFFFFFFFFFFF7) != 2 && v51 != v41)
  {
    LOBYTE(v128) = 0;
    v129 = 0x800000000;
    v130 = (WTF *)((char *)v131 + 8);
    v132 = 0;
    memset(v131, 0, sizeof(v131));
    v52 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a4 + 93024) + 16))(*(_QWORD *)(*(_QWORD *)a4 + 93024), **(_QWORD **)(a4 + 8), *(_QWORD *)(16 * (***(_DWORD ***)(a4 + 16) & 0xFFFFFFFE) + 0x28), **(_QWORD **)(a4 + 24));
    v60 = v52;
    v61 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v62 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_62;
      }
      v91 = v129;
      if ((_DWORD)v129)
      {
        v98 = 0;
        do
        {
          v99 = v130;
          *((_QWORD *)v62 + v98) = *((_QWORD *)v130 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v131[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v131[0] = *v103 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v91 = v129;
          }
          ++v98;
        }
        while (v98 < v91);
      }
      v110 = 2 * v61;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v91 = v129;
      }
      v130 = v62;
      HIDWORD(v129) = v110;
    }
    else
    {
      v62 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v52;
        LODWORD(v129) = v61 + 1;
        goto LABEL_62;
      }
      v91 = v129;
    }
    *((_QWORD *)v62 + v91) = v60;
    LODWORD(v129) = v91 + 1;
    if (!*(_QWORD *)&v131[0] && (v60 & 0xFFFE000000000002) == 0 && v60)
    {
      v92 = (_QWORD *)(v60 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v60 & 8) != 0)
        v92 = (_QWORD *)(v60 - 16);
      *(_QWORD *)&v131[0] = *v92 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_62:
    v63 = **(_QWORD **)(a4 + 32);
    v64 = HIDWORD(v63);
    v65 = v63 | 0xFFFE000000000000;
    if ((v63 & 0x80000000) != 0)
      v65 = COERCE__INT64((double)v63) + 0x2000000000000;
    v66 = COERCE__INT64((double)v63) + 0x2000000000000;
    if (v64)
      v67 = v66;
    else
      v67 = v65;
    v68 = v129;
    if ((_DWORD)v129 == HIDWORD(v129))
    {
      if (v129 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v69 = (WTF *)v135[0]) == 0))
      {
        LOBYTE(v128) = 1;
        goto LABEL_71;
      }
      v93 = v129;
      if ((_DWORD)v129)
      {
        v104 = 0;
        do
        {
          v105 = v130;
          *((_QWORD *)v69 + v104) = *((_QWORD *)v130 + v104);
          v106 = *((_QWORD *)v105 + v104);
          if (*(_QWORD *)&v131[0])
            v107 = 0;
          else
            v107 = (v106 & 0xFFFE000000000002) == 0;
          if (v107 && v106 != 0)
          {
            v109 = (_QWORD *)(v106 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v106 & 8) != 0)
              v109 = (_QWORD *)(v106 - 16);
            *(_QWORD *)&v131[0] = *v109 + 560;
            v126 = (WTF *)&v129;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
            v93 = v129;
          }
          ++v104;
        }
        while (v104 < v93);
      }
      v112 = 2 * v68;
      if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
      {
        WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
        v93 = v129;
      }
      v130 = v69;
      HIDWORD(v129) = v112;
    }
    else
    {
      v69 = v130;
      if (v130 == (WTF *)((char *)v131 + 8) || !v130)
      {
        *((_QWORD *)v130 + v129) = v67;
        LODWORD(v129) = v68 + 1;
        goto LABEL_71;
      }
      v93 = v129;
    }
    *((_QWORD *)v69 + v93) = v67;
    LODWORD(v129) = v93 + 1;
    if (!*(_QWORD *)&v131[0] && (v67 & 0xFFFE000000000002) == 0 && v67)
    {
      v94 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v67 & 8) != 0)
        v94 = (_QWORD *)(v67 - 16);
      *(_QWORD *)&v131[0] = *v94 + 560;
      v126 = (WTF *)&v129;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
    }
LABEL_71:
    v70 = *(_QWORD *)(a4 + 40);
    if (*(_BYTE *)(v70 + 8))
    {
      v71 = *(_QWORD *)v70;
      v72 = HIDWORD(v71);
      v73 = v71 | 0xFFFE000000000000;
      if ((v71 & 0x80000000) != 0)
        v73 = COERCE__INT64((double)v71) + 0x2000000000000;
      v74 = COERCE__INT64((double)v71) + 0x2000000000000;
      if (v72)
        v75 = v74;
      else
        v75 = v73;
      v76 = v129;
      if ((_DWORD)v129 == HIDWORD(v129))
      {
        if (v129 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v129), v135), (v77 = (WTF *)v135[0]) == 0))
        {
          LOBYTE(v128) = 1;
          goto LABEL_81;
        }
        v95 = v129;
        if ((_DWORD)v129)
        {
          v116 = 0;
          do
          {
            v117 = v130;
            *((_QWORD *)v77 + v116) = *((_QWORD *)v130 + v116);
            v118 = *((_QWORD *)v117 + v116);
            if (*(_QWORD *)&v131[0])
              v119 = 0;
            else
              v119 = (v118 & 0xFFFE000000000002) == 0;
            if (v119 && v118 != 0)
            {
              v121 = (_QWORD *)(v118 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v118 & 8) != 0)
                v121 = (_QWORD *)(v118 - 16);
              *(_QWORD *)&v131[0] = *v121 + 560;
              v126 = (WTF *)&v129;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
              v95 = v129;
            }
            ++v116;
          }
          while (v116 < v95);
        }
        v122 = 2 * v76;
        if (v130 != (WTF *)((char *)v131 + 8) && v130 != 0)
        {
          WTF::fastFree((unint64_t)v130, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
          v95 = v129;
        }
        v130 = v77;
        HIDWORD(v129) = v122;
      }
      else
      {
        v77 = v130;
        if (v130 == (WTF *)((char *)v131 + 8) || !v130)
        {
          *((_QWORD *)v130 + v129) = v75;
          LODWORD(v129) = v76 + 1;
          goto LABEL_81;
        }
        v95 = v129;
      }
      *((_QWORD *)v77 + v95) = v75;
      LODWORD(v129) = v95 + 1;
      if (!*(_QWORD *)&v131[0] && (v75 & 0xFFFE000000000002) == 0 && v75)
      {
        v96 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v75 & 8) != 0)
          v96 = (_QWORD *)(v75 - 16);
        *(_QWORD *)&v131[0] = *v96 + 560;
        v126 = (WTF *)&v129;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v131[0], (uint64_t *)&v126, v55, v56, v57, v58, v59, (uint64_t)v135);
      }
    }
LABEL_81:
    if (*(_DWORD *)(v125 + 80))
    {
      v114 = *(_DWORD *)(v125 + 80);
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
      if (*(_QWORD *)(v125 + 16))
        goto LABEL_115;
    }
    v126 = v130;
    v127 = v129;
    v134 = *(JSC::VM **)(a1 + 56);
    if ((v51 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v135[0]) = 0;
    }
    else
    {
      if (*(_BYTE *)(v51 + 5) == 26)
        JSC::JSFunction::getConstructData(v135, (uint64_t *)v51, (JSC::JSCell *)v53);
      else
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x40))(v135, v51);
      if (LOBYTE(v135[0]))
      {
        v28 = JSC::Interpreter::executeConstruct((JSC::VM *)(*(_QWORD *)(a1 + 56) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)v135, (uint64_t)&v126, (WTF *)v51, v78, v79, v80);
LABEL_87:
        if (*(_DWORD *)(v125 + 80))
        {
          v115 = *(_DWORD *)(v125 + 80);
          if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
          if (*(_QWORD *)(v125 + 16))
            goto LABEL_115;
        }
        if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 50 < 0xFFFFFFF5)
        {
          v81 = "species constructor did not return a TypedArray View";
          v82 = 53;
        }
        else
        {
          JSC::validateTypedArray((JSC *)a1, (JSC::ArrayBuffer **)v28, v54, v55, v56, v57, v58, v59);
          if (*(_DWORD *)(v125 + 80))
          {
            v124 = *(_DWORD *)(v125 + 80);
            if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v125 + 64), 7u, (uint64_t)v54, v55, v56, v57, v58, v59);
            if (*(_QWORD *)(v125 + 16))
              goto LABEL_115;
          }
          if ((*(_BYTE *)(v28 + 5) & 0xFE) == 0x30)
          {
LABEL_116:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v129, v53, (uint64_t)v54, v55, v56, v57, v58, v59);
            return v28;
          }
          v81 = "Content types of source and created typed arrays are different";
          v82 = 63;
        }
        JSC::throwTypeError(a1, &v133, (uint64_t)v81, v82);
LABEL_115:
        v28 = 0;
        goto LABEL_116;
      }
    }
    JSC::throwTypeError(a1, &v134, (uint64_t)"species is not a constructor", 29);
    v28 = 0;
    goto LABEL_87;
  }
LABEL_23:
  v26 = **a3;
  if (*(_BYTE *)(*a3[1] + 64))
  {
    v27 = *(_QWORD *)(v26 + 1920);
    if ((v27 & 1) == 0)
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v87 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v87 = (uint64_t *)(v26 - 16);
    v85 = *v87;
    v86 = (WTF *)(v26 + 1920);
    goto LABEL_94;
  }
  v27 = *(_QWORD *)(v26 + 1904);
  if ((v27 & 1) != 0)
  {
    v83 = *(uint64_t (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
    v84 = (uint64_t *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v84 = (uint64_t *)(v26 - 16);
    v85 = *v84;
    v86 = (WTF *)(v26 + 1904);
LABEL_94:
    v128 = v85;
    v129 = v26;
    v130 = v86;
    v27 = v83(&v128);
  }
  return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(**a3, v27, (uint64_t)a3[1], *a3[2], *a3[3], a3[3][1], a9, a7, a8);
}

unint64_t JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>(JSC::JSArrayBufferView *this, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  JSC::ArrayBuffer *v15;
  JSC::ArrayBuffer *v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v8 = a2;
  v10 = *((unsigned __int8 *)this + 40);
  if ((v10 & 8) != 0)
  {
    v11 = *((_QWORD *)this + 2);
    if (!v11
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      goto LABEL_54;
    }
  }
  if ((v10 & 6) == 0)
    goto LABEL_7;
  if (v10 == 88)
    goto LABEL_11;
  v17 = v10 == 48 || v10 == 16;
  if (v17)
  {
    v15 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    LOBYTE(v12) = 0;
    v18 = v10 - 90;
    if (v18 > 0x33)
      goto LABEL_70;
    if (((1 << v18) & 0xF400000000000) == 0)
    {
      v46 = 1 << v18;
      a2 = 0;
      v13 = 0;
      if ((v46 & 0xF) == 0)
        return v12 | (v13 << 8);
LABEL_11:
      v15 = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
      goto LABEL_26;
    }
    v15 = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
  }
LABEL_26:
  if (!v15)
    goto LABEL_54;
  *(_DWORD *)v15 += 2;
  if (v8[8])
  {
    v19 = *(_QWORD *)v8;
  }
  else
  {
    if (*((_BYTE *)v15 + 64) && (v48 = *((_QWORD *)v15 + 4)) != 0)
      v19 = *(_QWORD *)(v48 + 32);
    else
      v19 = *((_QWORD *)v15 + 6);
    *(_QWORD *)v8 = v19;
    v8[8] = 1;
  }
  v20 = *((_QWORD *)this + 4);
  v10 = *((unsigned __int8 *)this + 40);
  v21 = v19;
  if ((v10 & 1) == 0)
  {
    if ((*((_BYTE *)this + 5) - 42) > 7u)
      LOBYTE(v22) = 0;
    else
      v22 = qword_199158A40[(char)(*((_BYTE *)this + 5) - 42)];
    v21 = (*((_QWORD *)this + 3) << v22) + v20;
  }
  v24 = v20 > v19 || v21 > v19;
  v17 = *(_DWORD *)v15 == 2;
  *(_DWORD *)v15 -= 2;
  if (v17)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v15, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    if (!v24)
    {
      v10 = *((unsigned __int8 *)this + 40);
      goto LABEL_7;
    }
LABEL_54:
    LOBYTE(v12) = 0;
    v13 = 0;
    return v12 | (v13 << 8);
  }
  if (v24)
    goto LABEL_54;
LABEL_7:
  if ((v10 & 1) == 0)
  {
    v12 = *((_QWORD *)this + 3);
    v13 = v12 >> 8;
    return v12 | (v13 << 8);
  }
  if (v10 == 88)
    goto LABEL_13;
  if (v10 == 48 || v10 == 16)
  {
    v16 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_51;
  }
  LOBYTE(v12) = 0;
  v33 = v10 - 90;
  if (v33 > 0x33)
  {
LABEL_70:
    v13 = 0;
    return v12 | (v13 << 8);
  }
  if (((1 << v33) & 0xF400000000000) == 0)
  {
    v47 = 1 << v33;
    a2 = 0;
    v13 = 0;
    if ((v47 & 0xF) == 0)
      return v12 | (v13 << 8);
LABEL_13:
    v16 = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
    goto LABEL_51;
  }
  v16 = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
LABEL_51:
  if (!v16)
    goto LABEL_54;
  *(_DWORD *)v16 += 2;
  if (v8[8])
  {
    v34 = *(_QWORD *)v8;
  }
  else
  {
    if (*((_BYTE *)v16 + 64) && (v49 = *((_QWORD *)v16 + 4)) != 0)
      v34 = *(_QWORD *)(v49 + 32);
    else
      v34 = *((_QWORD *)v16 + 6);
    *(_QWORD *)v8 = v34;
    v8[8] = 1;
  }
  v35 = v34 - *((_QWORD *)this + 4);
  if ((*((_BYTE *)this + 5) - 42) > 7u)
    LOBYTE(v36) = 0;
  else
    v36 = qword_199158A40[(char)(*((_BYTE *)this + 5) - 42)];
  v12 = v35 >> v36;
  v13 = v35 >> v36 >> 8;
  v17 = *(_DWORD *)v16 == 2;
  *(_DWORD *)v16 -= 2;
  if (v17)
  {
    v37 = v13;
    JSC::ArrayBuffer::~ArrayBuffer(v16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    v13 = v37;
  }
  return v12 | (v13 << 8);
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[208];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 208);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)1>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1680);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1680;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[210];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 210);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[217];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 217);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)4>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1752);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1752;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[219];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 219);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)6>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1784);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1784;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[223];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 223);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)6>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1800);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1800;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[225];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 225);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)2>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1688);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1688;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[211];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 211);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)2>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1704);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1704;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[213];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 213);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)5>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1760);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1760;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[220];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 220);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)5>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1776);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1776;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[222];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 222);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)7>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1808);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1808;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[226];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 226);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)7>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1824);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1824;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[228];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 228);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)8>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1832);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1832;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[229];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 229);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)9>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1856);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1856;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[232];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 232);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)9>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1872);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1872;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[234];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 234);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::typedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)12>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1928);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1928;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(JSC::JSObject *result, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v17;
  uint64_t (*v18)(JSC::VM **);
  JSC::VM **v19;
  JSC::JSObject *v20;
  unint64_t v21;
  JSC::JSObject *v22;
  unint64_t *v23;
  JSC::VM *v24[3];

  v8 = *(_QWORD *)result;
  v9 = **((_QWORD **)result + 1);
  v10 = **((_QWORD **)result + 2);
  v24[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v21 = v9;
    v22 = result;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v21;
    result = v22;
  }
  JSC::throwTypeError(v21, v24, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  result = v22;
LABEL_9:
  if (!*(_DWORD *)(v8 + 80))
    goto LABEL_10;
  v17 = *(_DWORD *)(v8 + 80);
  if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
  {
    v23 = v13;
    v20 = result;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    v13 = v23;
    result = v20;
  }
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_10:
    v14 = (JSC::InternalFunction *)**((_QWORD **)result + 1);
    v15 = (JSC::JSGlobalObject *)**((_QWORD **)result + 2);
    v16 = v13[241];
    if ((v16 & 1) != 0)
    {
      v18 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v19 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v13 & 8) != 0)
        v19 = (JSC::VM **)(v13 - 2);
      v24[0] = *v19;
      v24[1] = (JSC::VM *)v13;
      v24[2] = (JSC::VM *)(v13 + 241);
      v16 = v18(v24);
    }
    return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t JSC::JSGlobalObject::resizableOrGrowableSharedTypedArrayStructureWithTypedArrayType<(JSC::TypedArrayType)12>(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(a1 + 1944);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v4 = (_QWORD *)(a1 - 16);
    v5[0] = *v4;
    v5[1] = a1;
    v5[2] = a1 + 1944;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[243];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 243);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

JSC::JSObject *JSC::constructGenericTypedArrayViewImpl<JSC::JSDataView>(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#3}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[241];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 241);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

void JSC::LazyClassStructure::visit<JSC::SlotVisitor>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;

  v10 = *a1;
  if (*a1)
    v11 = (*a1 & 1) == 0;
  else
    v11 = 0;
  if (!v11)
    goto LABEL_5;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0 && !*(_QWORD *)(a2 + 168))
      goto LABEL_5;
LABEL_17:
    JSC::SlotVisitor::appendSlow(a2, v10, 0, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v14 = v10 & 0xFFFFFFFFFFFFC000;
  v15 = *(_DWORD *)(a2 + 132);
  if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
  {
    v16 = *a1;
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000), v15, a3, a4, a5, a6, a7, a8);
    v10 = v16;
  }
  if (((*(_QWORD *)(v14 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) == 0 || *(_QWORD *)(a2 + 168))
    goto LABEL_17;
LABEL_5:
  v12 = a1[1];
  if (!v12)
    return;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v13 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
      goto LABEL_19;
  }
  if (*(_QWORD *)(a2 + 168))
LABEL_19:
    JSC::SlotVisitor::appendSlow(a2, v12, 0, a4, a5, a6, a7, a8);
}

_QWORD *JSC::LazyClassStructure::Initializer::setPrototype(_QWORD *this, JSC::JSObject *a2)
{
  if (this[4])
    goto LABEL_7;
  if (this[5])
  {
    __break(0xC471u);
    JUMPOUT(0x198AF62B0);
  }
  if (this[6])
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x198AF6290);
  }
  this[4] = a2;
  return this;
}

_QWORD *JSC::LazyClassStructure::Initializer::setStructure(_QWORD *this, JSC::Structure *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  JSC::Structure *v6;
  _QWORD *v7;

  if (this[5])
  {
    __break(0xC471u);
    JUMPOUT(0x198AF6340);
  }
  if (this[6])
  {
    __break(0xC471u);
    JUMPOUT(0x198AF6360);
  }
  this[5] = a2;
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198AF6380);
  }
  v2 = (uint64_t *)this[3];
  v4 = *v2;
  v3 = v2[1];
  *(_QWORD *)v2[2] = a2;
  if ((a2 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198AF63A0);
  }
  if (v3 && *(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v3 + 7))
  {
    v6 = a2;
    v7 = this;
    JSC::Heap::writeBarrierSlowPath(v4 + 192, v3);
    a2 = v6;
    this = v7;
  }
  if (!this[4])
  {
    v5 = *((_QWORD *)a2 + 6);
    if (v5 == 2)
      v5 = 0;
    this[4] = v5;
  }
  return this;
}

void JSC::LazyClassStructure::Initializer::setConstructor(JSC::LazyClassStructure::Initializer *this, JSC::JSObject *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSObject *v10;
  unint64_t v12;
  uint64_t v13;

  if (!*((_QWORD *)this + 5))
  {
    __break(0xC471u);
    JUMPOUT(0x198AF646CLL);
  }
  v10 = (JSC::JSObject *)*((_QWORD *)this + 4);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198AF648CLL);
  }
  if (*((_QWORD *)this + 6))
  {
    __break(0xC471u);
    JUMPOUT(0x198AF64ACLL);
  }
  *((_QWORD *)this + 6) = a2;
  JSC::JSObject::putDirectWithoutTransition(v10, *(_QWORD *)this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 41952) + 1080), (uint64_t)a2, 4, a7, a8, a9, a3);
  v12 = *((_QWORD *)this + 1);
  v13 = *(_QWORD *)this;
  *(_QWORD *)(*((_QWORD *)this + 2) + 8) = a2;
  if (a2 && v12 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath(v13 + 192, v12);
}

unint64_t JSC::LiteralParser<unsigned char>::parseRecursivelyEntry(uint64_t a1, unsigned __int8 **a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  _BYTE *v11;
  WTF::StringImpl **v13;
  int v14;
  unint64_t v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  size_t v34;
  unint64_t v35;
  int8x16_t *v36;
  unsigned __int8 *v37;
  int8x16_t v38;
  int8x16_t v39;
  uint8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  double v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  unint64_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unsigned __int8 *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  char v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unint64_t v82;
  unsigned __int8 *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  int v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  char v102;
  unsigned __int8 *v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  unsigned __int8 *v107;
  int v108;
  double v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  size_t v116;
  unint64_t v117;
  int8x16_t *v118;
  unsigned __int8 *v119;
  int8x16_t v120;
  int8x16_t v121;
  uint8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  unsigned __int8 *v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  uint8x16_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  size_t v143;
  unint64_t v144;
  int8x16_t *v145;
  unsigned __int8 *v146;
  int8x16_t v147;
  int8x16_t v148;
  uint8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  unsigned __int8 *v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  uint8x16_t v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unint64_t v161;
  unsigned __int8 *v162;
  uint8x16_t v163;
  char v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  unint64_t v167;
  unsigned __int8 *v168;
  char v169;
  unsigned __int8 *v170;
  int v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  int v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  double v179;
  uint8x16_t v180;
  char v181;
  char v182;
  unsigned __int8 *v183;
  int v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  unsigned __int8 *v189;
  int v190;
  int v191;
  double v192;
  int8x16_t *v193;
  unint64_t v194;
  unint64_t v195;
  BOOL v196;
  uint64_t v197;
  unsigned int v198;
  int v199;
  size_t v200;
  unint64_t v201;
  int8x16_t *v202;
  unsigned __int8 *v203;
  int8x16_t v204;
  int8x16_t v205;
  uint8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  unsigned __int8 *v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  uint8x16_t v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unint64_t v219;
  unsigned __int8 *v220;
  WTF::StringImpl *v221;
  int v222;
  unsigned __int8 *v223;
  uint8x16_t v224;
  char v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::AtomStringImpl *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  unint64_t v243;
  int v244;
  int v245;
  BOOL v246;
  char v248;
  unsigned __int8 *v249;
  int v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  int v253;
  int v254;
  unsigned __int8 *v255;
  int v256;
  int v257;
  double v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  int v268;
  BOOL v269;
  int8x16_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned __int8 *v284;
  int8x16_t *v285;
  WTF::AtomStringImpl *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::AtomStringImpl *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  int v304;
  int v305;
  unint64_t v306;
  int v307;
  int v308;
  BOOL v309;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int8x16_t *v321;
  uint64_t v322;
  uint64_t v323;
  const char *v324;
  int v325;
  int v326;
  unint64_t v327;
  int v328;
  int v329;
  BOOL v330;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned __int8 *v340;
  int v341;
  unsigned __int8 *v342;
  WTF::AtomStringImpl *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351;
  uint64_t v352;
  unsigned int v353;
  BOOL v354;
  BOOL v355;
  BOOL v356;
  unsigned int v357;
  BOOL v358;
  BOOL v359;
  BOOL v360;
  int v361;
  int v362;
  unint64_t v363;
  int v364;
  int v365;
  BOOL v366;
  unint64_t v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  const char *v378;
  unsigned __int8 *v379;
  int v380;
  unsigned __int8 *v381;
  uint64_t v382;
  uint64_t v383;
  const char *v384;
  unsigned int v385;
  BOOL v388;
  unsigned __int8 *v389;
  int v390;
  unsigned __int8 *v391;
  unsigned int v392;
  BOOL v393;
  BOOL v394;
  BOOL v395;
  uint64_t v396;
  uint64_t v397;
  const char *v398;
  unsigned __int8 *v399;
  int v400;
  unsigned __int8 *v401;
  unsigned int v402;
  BOOL v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;

  if (!HIBYTE(qword_1ECF4C789))
    return JSC::LiteralParser<unsigned char>::parse(a1, (uint64_t)a2, 2uLL, a5, a6, a7, a8, a9);
  v11 = (_BYTE *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 24) & 0xFD) == 0)
    return (unint64_t)JSC::LiteralParser<unsigned char>::parseRecursively(a1, (unint64_t)a2, a2[1], a5, a6, a7, a8, a9, a3);
  v13 = (WTF::StringImpl **)(a1 + 16);
  switch(*(_BYTE *)(a1 + 24))
  {
    case 1:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token ']'";
      goto LABEL_467;
    case 3:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token '}'";
      goto LABEL_467;
    case 4:
      v14 = *(_DWORD *)(a1 + 28);
      v15 = v14 & 0x7FFFFFFF;
      if ((*(_BYTE *)(a1 + 25) & 1) != 0)
      {
        if ((v14 & 0x7FFFFFFFu) < 0xB)
        {
          JSC::Identifier::fromString((uint64_t)a2, *(WTF::AtomStringImpl **)(a1 + 32), v15, a5, a6, a7, a8, a9, (rlim_t *)&v407);
LABEL_9:
          v22 = JSC::jsString((JSC *)a2, (JSC::VM *)&v407, v16, v17, v18, v19, v20, v21);
          goto LABEL_10;
        }
        WTF::String::String((uint64_t *)&v407, *(_BYTE **)(a1 + 32), v15);
      }
      else
      {
        if ((v14 & 0x7FFFFFFFu) < 0xB)
        {
          JSC::Identifier::fromString((uint64_t)a2, *(WTF::AtomStringImpl **)(a1 + 32), v15, a5, a6, a7, a8, a9, &v407);
          goto LABEL_9;
        }
        WTF::String::String((int **)&v407, *(_WORD **)(a1 + 32), v15);
      }
      v22 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v407, v74, v75, v76, v77, v78, v79);
LABEL_10:
      v26 = v22;
      v27 = v407;
      v407 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, v23, v24, v25, a6, a7, a8, a9);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      v29 = *(_QWORD *)(a1 + 48);
      v28 = *(_QWORD *)(a1 + 56);
      if (v29 >= v28)
      {
        v30 = 0;
      }
      else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v29] == 19)
      {
        v70 = *(unsigned __int8 **)(a1 + 56);
        v71 = (unsigned __int8 *)(v29 + 1);
        v72 = ~v29 + v28;
        while (1)
        {
          v73 = v71;
          *(_QWORD *)(a1 + 48) = v71;
          if (!v72)
            break;
          ++v71;
          --v72;
          if (JSC::tokenTypesOfLatin1Characters[*v73] != 19)
          {
            v70 = v73;
            break;
          }
        }
        v30 = (unint64_t)v73 < v28;
        v29 = (unint64_t)v70;
      }
      else
      {
        v30 = 1;
      }
      if (v29 == v28)
      {
LABEL_260:
        *v11 = 14;
        return v26;
      }
      *v11 = 18;
      v31 = *(unsigned __int8 *)v29;
      v32 = JSC::tokenTypesOfLatin1Characters[v31];
      if (v32 <= 4)
      {
        if (v32 == 4)
        {
          v33 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v31 != 39)
          {
            v34 = v29 + 1;
            *(_QWORD *)(a1 + 48) = v29 + 1;
            if (!v33)
            {
              v35 = v28 - v34;
              if ((uint64_t)(v28 - v34) < 0)
                goto LABEL_491;
              v36 = (int8x16_t *)(v35 + v29 + 1);
              if (v35 < 0x10)
              {
                if (v28 != v34)
                {
                  v193 = (int8x16_t *)(v29 + 1);
                  while (JSC::safeStringLatin1CharactersInStrictJSON[v193->u8[0]])
                  {
                    v193 = (int8x16_t *)((char *)v193 + 1);
                    if (!--v35)
                      goto LABEL_51;
                  }
LABEL_307:
                  v36 = v193;
                }
              }
              else
              {
                v37 = (unsigned __int8 *)(v29 + 16);
                v38.i64[0] = 0x2222222222222222;
                v38.i64[1] = 0x2222222222222222;
                v39.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v39.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v40.i64[0] = 0x2020202020202020;
                v40.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v41 = *(int8x16_t *)(v37 - 15);
                  v42 = vceqq_s8(v41, v38);
                  v43 = vorrq_s8(vorrq_s8(vceqq_s8(v41, v39), (int8x16_t)vcgtq_u8(v40, (uint8x16_t)v41)), v42);
                  v42.i8[0] = vmaxvq_u8((uint8x16_t)v43);
                  if (v42.i32[0])
                    break;
                  v37 += 16;
                  if (v37 >= (unsigned __int8 *)v36)
                    goto LABEL_45;
                }
LABEL_49:
                v54 = v37 - 15;
LABEL_50:
                v60 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v43);
                v60.i8[0] = vminvq_u8(v60);
                v36 = (int8x16_t *)&v54[v60.u32[0]];
              }
              goto LABEL_51;
            }
LABEL_613:
            if (v34 >= v28)
            {
LABEL_665:
              v36 = (int8x16_t *)v34;
            }
            else
            {
              v352 = v29 + v28 - v34 + 1;
              v36 = (int8x16_t *)v34;
              while (1)
              {
                v353 = v36->u8[0];
                v354 = v353 < 0x20 || v353 == 92;
                v355 = v354 || v353 == (_DWORD)v31;
                v356 = v355;
                if (v353 != 9 && v356)
                  break;
                v36 = (int8x16_t *)((char *)v36 + 1);
                *(_QWORD *)(a1 + 48) = v36;
                if (v36 == (int8x16_t *)v352)
                  goto LABEL_644;
              }
            }
            goto LABEL_52;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v34 = v29 + 1;
            *(_QWORD *)(a1 + 48) = v29 + 1;
            goto LABEL_613;
          }
LABEL_731:
          v322 = WTF::fastCompactMalloc((WTF *)0x20);
          v69 = (WTF::StringImpl *)v322;
          v323 = 0x2900000002;
          v324 = "Single quotes (') are not allowed in JSON";
          goto LABEL_576;
        }
LABEL_64:
        *(_BYTE *)(a1 + 24) = v32;
        *(_QWORD *)(a1 + 48) = v29 + 1;
        return v26;
      }
      if (v32 == 6)
      {
        v92 = (_DWORD)v31 != 45 || !v30;
        v93 = (unsigned __int8 *)v29;
        if ((v92 & 1) == 0)
        {
          v93 = (unsigned __int8 *)(v29 + 1);
          *(_QWORD *)(a1 + 48) = v29 + 1;
        }
        if ((unint64_t)v93 < v28)
        {
          v94 = *v93;
          if (v94 == 48)
          {
            v96 = v93 + 1;
            *(_QWORD *)(a1 + 48) = v96;
LABEL_90:
            if ((unint64_t)v96 < v28)
            {
              v97 = *v96;
              if (v97 == 46)
              {
                *(_QWORD *)(a1 + 48) = v96 + 1;
                if ((unint64_t)(v96 + 1) >= v28 || v96[1] - 48 > 9)
                {
LABEL_593:
                  v322 = WTF::fastCompactMalloc((WTF *)0x20);
                  v69 = (WTF::StringImpl *)v322;
                  v323 = 0x2200000002;
                  v324 = "Invalid digits after decimal point";
                  goto LABEL_576;
                }
                v132 = v96 + 2;
                do
                {
                  v96 = v132;
                  *(_QWORD *)(a1 + 48) = v132;
                  if ((unint64_t)v132 >= v28)
                    break;
                  ++v132;
                }
                while (*v96 - 48 < 0xA);
              }
              else if (v97 != 69 && v97 != 101 && (uint64_t)&v96[-v29] <= 9)
              {
                *v11 = 6;
                v98 = *(unsigned __int8 *)v29;
                if (v98 == 45)
                  v99 = (unsigned __int8 *)(v29 + 1);
                else
                  v99 = (unsigned __int8 *)v29;
                if (v99 < v96)
                {
                  v100 = 0;
                  do
                  {
                    v101 = *v99++;
                    v100 = v101 + 10 * v100 - 48;
                  }
                  while (v99 < v96);
LABEL_124:
                  if (v98 != 45)
                    goto LABEL_125;
                  if (v100)
                  {
                    v100 = -v100;
                    goto LABEL_125;
                  }
                  goto LABEL_308;
                }
LABEL_127:
                if (v98 != 45)
                {
                  v100 = 0;
LABEL_125:
                  v109 = (double)v100;
LABEL_126:
                  *(double *)(a1 + 32) = v109;
                  return v26;
                }
LABEL_308:
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                return v26;
              }
            }
            if ((unint64_t)v96 >= v28 || (*v96 | 0x20) != 0x65)
              goto LABEL_169;
            v133 = v96 + 1;
            *(_QWORD *)(a1 + 48) = v96 + 1;
            if ((unint64_t)(v96 + 1) < v28)
            {
              v134 = *v133;
              if (v134 == 45 || v134 == 43)
              {
                v133 = v96 + 2;
                *(_QWORD *)(a1 + 48) = v96 + 2;
              }
            }
            if ((unint64_t)v133 < v28 && *v133 - 48 <= 9)
            {
              v135 = v133 + 1;
              do
              {
                v96 = v135;
                *(_QWORD *)(a1 + 48) = v135;
                if ((unint64_t)v135 >= v28)
                  break;
                ++v135;
              }
              while (*v96 - 48 < 0xA);
LABEL_169:
              *v11 = 6;
              if ((uint64_t)&v96[-v29] >= 0)
              {
                v407 = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v29, v96, (unint64_t *)&v407, 0x2E00000005);
                v109 = *(double *)&v407;
                goto LABEL_126;
              }
              goto LABEL_491;
            }
LABEL_605:
            v322 = WTF::fastCompactMalloc((WTF *)0x20);
            v69 = (WTF::StringImpl *)v322;
            v323 = 0x5D00000002;
            v324 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_576:
            *(_QWORD *)v322 = v323;
            *(_QWORD *)(v322 + 8) = v324;
            *(_DWORD *)(v322 + 16) = 4;
LABEL_352:
            v221 = *v13;
            *v13 = v69;
            if (v221)
            {
              v222 = *(_DWORD *)v221 - 2;
              if (*(_DWORD *)v221 == 2)
              {
                WTF::StringImpl::~StringImpl(v221, v62, v63, v64, v65, v66, v67, v68);
                WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
              }
              else
              {
LABEL_354:
                *(_DWORD *)v221 = v222;
              }
            }
            return v26;
          }
          if ((v94 - 49) <= 8)
          {
            v95 = v93 + 1;
            do
            {
              v96 = v95;
              *(_QWORD *)(a1 + 48) = v95;
              if ((unint64_t)v95 >= v28)
                break;
              ++v95;
            }
            while (*v96 - 48 < 0xA);
            goto LABEL_90;
          }
        }
LABEL_575:
        v322 = WTF::fastCompactMalloc((WTF *)0x20);
        v69 = (WTF::StringImpl *)v322;
        v323 = 0xE00000002;
        v324 = "Invalid number";
        goto LABEL_576;
      }
      if (v32 != 5)
      {
        if (v32 - 18 < 2)
        {
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v407);
          v69 = v407;
          if (!v407)
          {
            __break(0xC471u);
            JUMPOUT(0x198AF6888);
          }
LABEL_351:
          *(_QWORD *)v69 = 0x1600000002;
          *((_QWORD *)v69 + 1) = (char *)v69 + 20;
          *((_DWORD *)v69 + 4) = 4;
          *((_DWORD *)v69 + 9) = 656436837;
          *(_OWORD *)((char *)v69 + 20) = *(_OWORD *)"Unrecognized token '";
          *((_BYTE *)v69 + 40) = *(_BYTE *)v29;
          *((_BYTE *)v69 + 41) = 39;
          goto LABEL_352;
        }
        goto LABEL_64;
      }
      if ((_DWORD)v31 == 110)
      {
        if ((uint64_t)(v28 - v29) < 4 || *(_WORD *)(v29 + 1) != 27765 || *(_BYTE *)(v29 + 3) != 108)
        {
LABEL_389:
          v241 = v29;
          *(_QWORD *)(a1 + 32) = v29;
          v242 = v29;
          if (v29 >= v28)
          {
LABEL_456:
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v242 - v241) & 0x7FFFFFFF;
            v61 = 5;
            goto LABEL_55;
          }
          v243 = v28 - v29;
          v244 = v29 + v243;
          while (1)
          {
            v245 = *(unsigned __int8 *)v29;
            if (v245 != 36)
            {
              v246 = v245 != 95 && (v245 - 48) >= 0xA;
              if (v246 && (v245 | 0x20u) - 97 > 0x19)
                break;
            }
            *(_QWORD *)(a1 + 48) = ++v29;
            if (!--v243)
              goto LABEL_454;
          }
LABEL_455:
          v242 = v29;
          goto LABEL_456;
        }
LABEL_220:
        *(_QWORD *)(a1 + 48) = v29 + 4;
        v61 = 13;
      }
      else if ((_DWORD)v31 == 102)
      {
        if ((uint64_t)(v28 - v29) < 5 || *(_WORD *)(v29 + 1) != 27745 || *(_WORD *)(v29 + 3) != 25971)
          goto LABEL_389;
LABEL_270:
        *(_QWORD *)(a1 + 48) = v29 + 5;
        v61 = 12;
      }
      else
      {
        if ((_DWORD)v31 != 116
          || (uint64_t)(v28 - v29) < 4
          || *(_WORD *)(v29 + 1) != 30066
          || *(_BYTE *)(v29 + 3) != 101)
        {
          goto LABEL_389;
        }
LABEL_405:
        *(_QWORD *)(a1 + 48) = v29 + 4;
        v61 = 11;
      }
LABEL_55:
      *(_BYTE *)(a1 + 24) = v61;
      return v26;
    case 5:
      v226 = *(_DWORD *)(a1 + 28);
      if ((v226 & 0x7FFFFFFFu) >= 0xC8)
        v227 = 200;
      else
        v227 = v226 & 0x7FFFFFFF;
      JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v407, v226, *(_QWORD *)(a1 + 32), v227);
      if (!v407)
      {
        v319 = *(_DWORD *)(a1 + 28);
        if ((v319 & 0x7FFFFFFFu) < 0xB
          || (JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v406, v319, *(_QWORD *)(a1 + 32), 10), (v407 = v406) == 0))
        {
          v320 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v320 = 0x1500000002;
          *(_QWORD *)(v320 + 8) = "Unexpected identifier";
          *(_DWORD *)(v320 + 16) = 4;
          v407 = (WTF::StringImpl *)v320;
        }
      }
      WTF::String::operator=((unint64_t *)(a1 + 96), (WTF::AtomStringImpl *)&v407, v228, v229, v230, v231, v232, v233);
      v221 = v407;
      v407 = 0;
      if (!v221)
        return 0;
      if (*(_DWORD *)v221 == 2)
        goto LABEL_470;
      *(_DWORD *)v221 -= 2;
      return 0;
    case 6:
      v44 = *(double *)(a1 + 32);
      if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v45 = (int)v44, v44 == (double)(int)v45)
        && ((_DWORD)v45 || (*(_QWORD *)&v44 & 0x8000000000000000) == 0))
      {
        v26 = v45 | 0xFFFE000000000000;
      }
      else
      {
        v26 = *(_QWORD *)&v44 + 0x2000000000000;
      }
      v29 = *(_QWORD *)(a1 + 48);
      v28 = *(_QWORD *)(a1 + 56);
      if (v29 < v28)
      {
        if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v29] != 19)
        {
          v46 = 1;
          goto LABEL_35;
        }
        v80 = *(unsigned __int8 **)(a1 + 56);
        v81 = (unsigned __int8 *)(v29 + 1);
        v82 = ~v29 + v28;
        do
        {
          v83 = v81;
          *(_QWORD *)(a1 + 48) = v81;
          if (!v82)
            goto LABEL_77;
          ++v81;
          --v82;
        }
        while (JSC::tokenTypesOfLatin1Characters[*v83] == 19);
        v80 = v83;
LABEL_77:
        v46 = (unint64_t)v83 < v28;
        v29 = (unint64_t)v80;
        goto LABEL_35;
      }
      v46 = 0;
LABEL_35:
      if (v29 == v28)
        goto LABEL_260;
      *v11 = 18;
      v31 = *(unsigned __int8 *)v29;
      v32 = JSC::tokenTypesOfLatin1Characters[v31];
      if (v32 <= 4)
      {
        if (v32 != 4)
          goto LABEL_64;
        v47 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v31 == 39)
        {
          if (!*(_BYTE *)(a1 + 40))
            goto LABEL_731;
          v34 = v29 + 1;
          *(_QWORD *)(a1 + 48) = v29 + 1;
        }
        else
        {
          v34 = v29 + 1;
          *(_QWORD *)(a1 + 48) = v29 + 1;
          if (!v47)
          {
            v48 = v28 - v34;
            if ((uint64_t)(v28 - v34) < 0)
              goto LABEL_491;
            v36 = (int8x16_t *)(v48 + v29 + 1);
            if (v48 < 0x10)
            {
              if (v28 == v34)
                goto LABEL_51;
              v193 = (int8x16_t *)(v29 + 1);
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v193->u8[0]])
                  goto LABEL_307;
                v193 = (int8x16_t *)((char *)v193 + 1);
                --v48;
              }
              while (v48);
            }
            else
            {
              v37 = (unsigned __int8 *)(v29 + 16);
              v49.i64[0] = 0x2222222222222222;
              v49.i64[1] = 0x2222222222222222;
              v50.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v50.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v51.i64[0] = 0x2020202020202020;
              v51.i64[1] = 0x2020202020202020;
              do
              {
                v52 = *(int8x16_t *)(v37 - 15);
                v53 = vceqq_s8(v52, v49);
                v43 = vorrq_s8(vorrq_s8(vceqq_s8(v52, v50), (int8x16_t)vcgtq_u8(v51, (uint8x16_t)v52)), v53);
                v53.i8[0] = vmaxvq_u8((uint8x16_t)v43);
                if (v53.i32[0])
                  goto LABEL_49;
                v37 += 16;
              }
              while (v37 < (unsigned __int8 *)v36);
LABEL_45:
              if (v37 - 15 < (unsigned __int8 *)v36)
              {
                v54 = (unsigned __int8 *)&v36[-1];
                v55 = v36[-1];
                v56.i64[0] = 0x2222222222222222;
                v56.i64[1] = 0x2222222222222222;
                v57 = vceqq_s8(v55, v56);
                v58.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v58.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v59.i64[0] = 0x2020202020202020;
                v59.i64[1] = 0x2020202020202020;
                v43 = vorrq_s8(vorrq_s8(vceqq_s8(v55, v58), (int8x16_t)vcgtq_u8(v59, (uint8x16_t)v55)), v57);
                v57.i8[0] = vmaxvq_u8((uint8x16_t)v43);
                if (v57.i32[0])
                  goto LABEL_50;
              }
            }
LABEL_51:
            *(_QWORD *)(a1 + 48) = v36;
LABEL_52:
            if ((unint64_t)v36 >= v28 || v36->u8[0] != (_DWORD)v31)
            {
              JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, v34, v31, a6, a7, a8, a9);
              return v26;
            }
            *(_BYTE *)(a1 + 25) |= 1u;
            *(_QWORD *)(a1 + 32) = v34;
            *(_QWORD *)(a1 + 48) = (char *)v36->i64 + 1;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v36 - v34) & 0x7FFFFFFF;
            v61 = 4;
            goto LABEL_55;
          }
        }
        if (v34 >= v28)
          goto LABEL_665;
        v352 = v29 + v28 - v34 + 1;
        v36 = (int8x16_t *)v34;
        while (1)
        {
          v357 = v36->u8[0];
          v358 = v357 < 0x20 || v357 == 92;
          v359 = v358 || v357 == (_DWORD)v31;
          v360 = v359;
          if (v357 != 9 && v360)
            goto LABEL_52;
          v36 = (int8x16_t *)((char *)v36 + 1);
          *(_QWORD *)(a1 + 48) = v36;
          if (v36 == (int8x16_t *)v352)
          {
LABEL_644:
            v36 = (int8x16_t *)v352;
            goto LABEL_52;
          }
        }
      }
      if (v32 != 6)
      {
        if (v32 != 5)
        {
          if (v32 - 18 >= 2)
            goto LABEL_64;
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v407);
          v69 = v407;
          if (!v407)
          {
            __break(0xC471u);
            JUMPOUT(0x198AF89A0);
          }
          goto LABEL_351;
        }
        if ((_DWORD)v31 == 110)
        {
          if ((uint64_t)(v28 - v29) >= 4 && *(_WORD *)(v29 + 1) == 27765 && *(_BYTE *)(v29 + 3) == 108)
            goto LABEL_220;
        }
        else if ((_DWORD)v31 == 102)
        {
          if ((uint64_t)(v28 - v29) >= 5 && *(_WORD *)(v29 + 1) == 27745 && *(_WORD *)(v29 + 3) == 25971)
            goto LABEL_270;
        }
        else if ((_DWORD)v31 == 116
               && (uint64_t)(v28 - v29) >= 4
               && *(_WORD *)(v29 + 1) == 30066
               && *(_BYTE *)(v29 + 3) == 101)
        {
          goto LABEL_405;
        }
        v241 = v29;
        *(_QWORD *)(a1 + 32) = v29;
        v242 = v29;
        if (v29 >= v28)
          goto LABEL_456;
        v267 = v28 - v29;
        v244 = v29 + v267;
        while (1)
        {
          v268 = *(unsigned __int8 *)v29;
          if (v268 != 36)
          {
            v269 = v268 != 95 && (v268 - 48) >= 0xA;
            if (v269 && (v268 | 0x20u) - 97 > 0x19)
              goto LABEL_455;
          }
          *(_QWORD *)(a1 + 48) = ++v29;
          if (!--v267)
          {
LABEL_454:
            LODWORD(v29) = v244;
            goto LABEL_455;
          }
        }
      }
      v102 = (_DWORD)v31 != 45 || !v46;
      v103 = (unsigned __int8 *)v29;
      if ((v102 & 1) == 0)
      {
        v103 = (unsigned __int8 *)(v29 + 1);
        *(_QWORD *)(a1 + 48) = v29 + 1;
      }
      if ((unint64_t)v103 >= v28)
        goto LABEL_575;
      v104 = *v103;
      if (v104 == 48)
      {
        v96 = v103 + 1;
        *(_QWORD *)(a1 + 48) = v96;
      }
      else
      {
        if ((v104 - 49) > 8)
          goto LABEL_575;
        v105 = v103 + 1;
        do
        {
          v96 = v105;
          *(_QWORD *)(a1 + 48) = v105;
          if ((unint64_t)v105 >= v28)
            break;
          ++v105;
        }
        while (*v96 - 48 < 0xA);
      }
      if ((unint64_t)v96 >= v28)
        goto LABEL_167;
      v106 = *v96;
      if (v106 == 46)
      {
        *(_QWORD *)(a1 + 48) = v96 + 1;
        if ((unint64_t)(v96 + 1) >= v28 || v96[1] - 48 > 9)
          goto LABEL_593;
        v136 = v96 + 2;
        do
        {
          v96 = v136;
          *(_QWORD *)(a1 + 48) = v136;
          if ((unint64_t)v136 >= v28)
            break;
          ++v136;
        }
        while (*v96 - 48 < 0xA);
      }
      else if (v106 != 69 && v106 != 101 && (uint64_t)&v96[-v29] <= 9)
      {
        *v11 = 6;
        v98 = *(unsigned __int8 *)v29;
        if (v98 == 45)
          v107 = (unsigned __int8 *)(v29 + 1);
        else
          v107 = (unsigned __int8 *)v29;
        if (v107 < v96)
        {
          v100 = 0;
          do
          {
            v108 = *v107++;
            v100 = v108 + 10 * v100 - 48;
          }
          while (v107 < v96);
          goto LABEL_124;
        }
        goto LABEL_127;
      }
LABEL_167:
      if ((unint64_t)v96 >= v28 || (*v96 | 0x20) != 0x65)
        goto LABEL_169;
      v340 = v96 + 1;
      *(_QWORD *)(a1 + 48) = v96 + 1;
      if ((unint64_t)(v96 + 1) < v28)
      {
        v341 = *v340;
        if (v341 == 45 || v341 == 43)
        {
          v340 = v96 + 2;
          *(_QWORD *)(a1 + 48) = v96 + 2;
        }
      }
      if ((unint64_t)v340 < v28 && *v340 - 48 <= 9)
      {
        v342 = v340 + 1;
        do
        {
          v96 = v342;
          *(_QWORD *)(a1 + 48) = v342;
          if ((unint64_t)v342 >= v28)
            break;
          ++v342;
        }
        while (*v96 - 48 < 0xA);
        goto LABEL_169;
      }
      goto LABEL_605;
    case 7:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token ':'";
      goto LABEL_467;
    case 8:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token '('";
      goto LABEL_467;
    case 9:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token ')'";
      goto LABEL_467;
    case 0xA:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token ','";
      goto LABEL_467;
    case 0xB:
      v195 = *(_QWORD *)(a1 + 48);
      v194 = *(_QWORD *)(a1 + 56);
      if (v195 < v194)
      {
        if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v195] != 19)
        {
          v196 = 1;
          goto LABEL_314;
        }
        v217 = *(unsigned __int8 **)(a1 + 56);
        v218 = (unsigned __int8 *)(v195 + 1);
        v219 = ~v195 + v194;
        do
        {
          v220 = v218;
          *(_QWORD *)(a1 + 48) = v218;
          if (!v219)
            goto LABEL_349;
          ++v218;
          --v219;
        }
        while (JSC::tokenTypesOfLatin1Characters[*v220] == 19);
        v217 = v220;
LABEL_349:
        v196 = (unint64_t)v220 < v194;
        v195 = (unint64_t)v217;
        goto LABEL_314;
      }
      v196 = 0;
LABEL_314:
      if (v195 == v194)
      {
        *v11 = 14;
        return 7;
      }
      *v11 = 18;
      v197 = *(unsigned __int8 *)v195;
      v198 = JSC::tokenTypesOfLatin1Characters[v197];
      if (v198 <= 4)
      {
        if (v198 == 4)
        {
          v199 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v197 != 39)
          {
            v200 = v195 + 1;
            *(_QWORD *)(a1 + 48) = v195 + 1;
            if (!v199)
            {
              v201 = v194 - v200;
              if ((uint64_t)(v194 - v200) < 0)
                goto LABEL_491;
              v202 = (int8x16_t *)(v201 + v195 + 1);
              if (v201 >= 0x10)
              {
                v203 = (unsigned __int8 *)(v195 + 16);
                v204.i64[0] = 0x2222222222222222;
                v204.i64[1] = 0x2222222222222222;
                v205.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v205.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v206.i64[0] = 0x2020202020202020;
                v206.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v207 = *(int8x16_t *)(v203 - 15);
                  v208 = vceqq_s8(v207, v204);
                  v209 = vorrq_s8(vorrq_s8(vceqq_s8(v207, v205), (int8x16_t)vcgtq_u8(v206, (uint8x16_t)v207)), v208);
                  v208.i8[0] = vmaxvq_u8((uint8x16_t)v209);
                  if (v208.i32[0])
                    break;
                  v203 += 16;
                  if (v203 >= (unsigned __int8 *)v202)
                  {
                    if (v203 - 15 >= (unsigned __int8 *)v202)
                      goto LABEL_367;
                    v210 = (unsigned __int8 *)&v202[-1];
                    v211 = v202[-1];
                    v212.i64[0] = 0x2222222222222222;
                    v212.i64[1] = 0x2222222222222222;
                    v213 = vceqq_s8(v211, v212);
                    v214.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v214.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v215.i64[0] = 0x2020202020202020;
                    v215.i64[1] = 0x2020202020202020;
                    v209 = vorrq_s8(vorrq_s8(vceqq_s8(v211, v214), (int8x16_t)vcgtq_u8(v215, (uint8x16_t)v211)), v213);
                    v213.i8[0] = vmaxvq_u8((uint8x16_t)v209);
                    if (!v213.i32[0])
                      goto LABEL_367;
LABEL_366:
                    v224 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v209);
                    v224.i8[0] = vminvq_u8(v224);
                    v202 = (int8x16_t *)&v210[v224.u32[0]];
                    goto LABEL_367;
                  }
                }
                v210 = v203 - 15;
                goto LABEL_366;
              }
              if (v194 == v200)
                goto LABEL_367;
              v321 = (int8x16_t *)(v195 + 1);
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v321->u8[0]])
                {
                  v202 = v321;
                  break;
                }
                v321 = (int8x16_t *)((char *)v321 + 1);
                --v201;
              }
              while (v201);
LABEL_367:
              *(_QWORD *)(a1 + 48) = v202;
LABEL_368:
              if ((unint64_t)v202 >= v194 || v202->u8[0] != (_DWORD)v197)
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, v200, v197, a6, a7, a8, a9);
                return 7;
              }
              *(_BYTE *)(a1 + 25) |= 1u;
              *(_QWORD *)(a1 + 32) = v200;
              *(_QWORD *)(a1 + 48) = (char *)v202->i64 + 1;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v202 - v200) & 0x7FFFFFFF;
              v225 = 4;
              goto LABEL_371;
            }
LABEL_747:
            if (v200 >= v194)
            {
              v202 = (int8x16_t *)v200;
            }
            else
            {
              v202 = (int8x16_t *)v200;
              do
              {
                v402 = v202->u8[0];
                v405 = v402 < 0x20 || v402 == 92 || v402 == (_DWORD)v197;
                if (v402 != 9 && v405)
                  goto LABEL_368;
                v202 = (int8x16_t *)((char *)v202 + 1);
                *(_QWORD *)(a1 + 48) = v202;
              }
              while (v202 != (int8x16_t *)(v195 + v194 - v200 + 1));
              v202 = (int8x16_t *)(v195 + v194 - v200 + 1);
            }
            goto LABEL_368;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v200 = v195 + 1;
            *(_QWORD *)(a1 + 48) = v195 + 1;
            goto LABEL_747;
          }
          v396 = WTF::fastCompactMalloc((WTF *)0x20);
          v350 = (WTF::StringImpl *)v396;
          v397 = 0x2900000002;
          v398 = "Single quotes (') are not allowed in JSON";
          goto LABEL_730;
        }
LABEL_341:
        *(_BYTE *)(a1 + 24) = v198;
        *(_QWORD *)(a1 + 48) = v195 + 1;
        return 7;
      }
      if (v198 != 6)
      {
        if (v198 != 5)
        {
          if (v198 - 18 < 2)
          {
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v407);
            v350 = v407;
            if (!v407)
            {
              __break(0xC471u);
              JUMPOUT(0x198AF89D8);
            }
            *(_QWORD *)v407 = 0x1600000002;
            *((_QWORD *)v350 + 1) = (char *)v350 + 20;
            *((_DWORD *)v350 + 4) = 4;
            *((_DWORD *)v350 + 9) = 656436837;
            *(_OWORD *)((char *)v350 + 20) = *(_OWORD *)"Unrecognized token '";
            *((_BYTE *)v350 + 40) = *(_BYTE *)v195;
            *((_BYTE *)v350 + 41) = 39;
            goto LABEL_608;
          }
          goto LABEL_341;
        }
        if ((_DWORD)v197 == 110)
        {
          if ((uint64_t)(v194 - v195) >= 4 && *(_WORD *)(v195 + 1) == 27765 && *(_BYTE *)(v195 + 3) == 108)
          {
            *(_QWORD *)(a1 + 48) = v195 + 4;
            v225 = 13;
LABEL_371:
            *(_BYTE *)(a1 + 24) = v225;
            return 7;
          }
        }
        else if ((_DWORD)v197 == 102)
        {
          if ((uint64_t)(v194 - v195) >= 5 && *(_WORD *)(v195 + 1) == 27745 && *(_WORD *)(v195 + 3) == 25971)
          {
            *(_QWORD *)(a1 + 48) = v195 + 5;
            v225 = 12;
            goto LABEL_371;
          }
        }
        else if ((_DWORD)v197 == 116
               && (uint64_t)(v194 - v195) >= 4
               && *(_WORD *)(v195 + 1) == 30066
               && *(_BYTE *)(v195 + 3) == 101)
        {
          *(_QWORD *)(a1 + 48) = v195 + 4;
          v225 = 11;
          goto LABEL_371;
        }
        v361 = v195;
        *(_QWORD *)(a1 + 32) = v195;
        v362 = v195;
        if (v195 < v194)
        {
          v363 = v194 - v195;
          v364 = v195 + v363;
          do
          {
            v365 = *(unsigned __int8 *)v195;
            if (v365 != 36)
            {
              v366 = v365 != 95 && (v365 - 48) >= 0xA;
              if (v366 && (v365 | 0x20u) - 97 > 0x19)
                goto LABEL_662;
            }
            *(_QWORD *)(a1 + 48) = ++v195;
            --v363;
          }
          while (v363);
          LODWORD(v195) = v364;
LABEL_662:
          v362 = v195;
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v362 - v361) & 0x7FFFFFFF;
        v225 = 5;
        goto LABEL_371;
      }
      v248 = (_DWORD)v197 != 45 || !v196;
      v249 = (unsigned __int8 *)v195;
      if ((v248 & 1) == 0)
      {
        v249 = (unsigned __int8 *)(v195 + 1);
        *(_QWORD *)(a1 + 48) = v195 + 1;
      }
      if ((unint64_t)v249 >= v194)
        goto LABEL_729;
      v250 = *v249;
      if (v250 == 48)
      {
        v252 = v249 + 1;
        *(_QWORD *)(a1 + 48) = v252;
      }
      else
      {
        if ((v250 - 49) > 8)
        {
LABEL_729:
          v396 = WTF::fastCompactMalloc((WTF *)0x20);
          v350 = (WTF::StringImpl *)v396;
          v397 = 0xE00000002;
          v398 = "Invalid number";
          goto LABEL_730;
        }
        v251 = v249 + 1;
        do
        {
          v252 = v251;
          *(_QWORD *)(a1 + 48) = v251;
          if ((unint64_t)v251 >= v194)
            break;
          ++v251;
        }
        while (*v252 - 48 < 0xA);
      }
      if ((unint64_t)v252 < v194)
      {
        v253 = *v252;
        if (v253 == 46)
        {
          *(_QWORD *)(a1 + 48) = v252 + 1;
          if ((unint64_t)(v252 + 1) >= v194 || v252[1] - 48 > 9)
          {
            v396 = WTF::fastCompactMalloc((WTF *)0x20);
            v350 = (WTF::StringImpl *)v396;
            v397 = 0x2200000002;
            v398 = "Invalid digits after decimal point";
            goto LABEL_730;
          }
          v284 = v252 + 2;
          do
          {
            v252 = v284;
            *(_QWORD *)(a1 + 48) = v284;
            if ((unint64_t)v284 >= v194)
              break;
            ++v284;
          }
          while (*v252 - 48 < 0xA);
        }
        else if (v253 != 69 && v253 != 101 && (uint64_t)&v252[-v195] <= 9)
        {
          *v11 = 6;
          v254 = *(unsigned __int8 *)v195;
          if (v254 == 45)
            v255 = (unsigned __int8 *)(v195 + 1);
          else
            v255 = (unsigned __int8 *)v195;
          if (v255 >= v252)
          {
            if (v254 != 45)
            {
              v256 = 0;
LABEL_429:
              v258 = (double)v256;
LABEL_430:
              *(double *)(a1 + 32) = v258;
              return 7;
            }
          }
          else
          {
            v256 = 0;
            do
            {
              v257 = *v255++;
              v256 = v257 + 10 * v256 - 48;
            }
            while (v255 < v252);
            if (v254 != 45)
              goto LABEL_429;
            if (v256)
            {
              v256 = -v256;
              goto LABEL_429;
            }
          }
          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
          return 7;
        }
      }
      if ((unint64_t)v252 >= v194 || (*v252 | 0x20) != 0x65)
        goto LABEL_489;
      v399 = v252 + 1;
      *(_QWORD *)(a1 + 48) = v252 + 1;
      if ((unint64_t)(v252 + 1) < v194)
      {
        v400 = *v399;
        if (v400 == 45 || v400 == 43)
        {
          v399 = v252 + 2;
          *(_QWORD *)(a1 + 48) = v252 + 2;
        }
      }
      if ((unint64_t)v399 < v194 && *v399 - 48 <= 9)
      {
        v401 = v399 + 1;
        do
        {
          v252 = v401;
          *(_QWORD *)(a1 + 48) = v401;
          if ((unint64_t)v401 >= v194)
            break;
          ++v401;
        }
        while (*v252 - 48 < 0xA);
LABEL_489:
        *v11 = 6;
        if ((uint64_t)&v252[-v195] >= 0)
        {
          v407 = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v195, v252, (unint64_t *)&v407, 0x2E00000005);
          v258 = *(double *)&v407;
          goto LABEL_430;
        }
LABEL_491:
        __break(1u);
LABEL_492:
        *v11 = 14;
        return 6;
      }
      v396 = WTF::fastCompactMalloc((WTF *)0x20);
      v350 = (WTF::StringImpl *)v396;
      v397 = 0x5D00000002;
      v398 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_730:
      *(_QWORD *)v396 = v397;
      *(_QWORD *)(v396 + 8) = v398;
      *(_DWORD *)(v396 + 16) = 4;
LABEL_608:
      v351 = *v13;
      *v13 = v350;
      if (v351)
      {
        if (*(_DWORD *)v351 == 2)
        {
          WTF::StringImpl::~StringImpl(v351, v343, v344, v345, v346, v347, v348, v349);
          WTF::fastFree(v368, v369, v370, v371, v372, v373, v374, v375);
        }
        else
        {
          *(_DWORD *)v351 -= 2;
        }
      }
      return 7;
    case 0xC:
      v138 = *(_QWORD *)(a1 + 48);
      v137 = *(_QWORD *)(a1 + 56);
      if (v138 < v137)
      {
        if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v138] != 19)
        {
          v139 = 1;
          goto LABEL_179;
        }
        v165 = *(unsigned __int8 **)(a1 + 56);
        v166 = (unsigned __int8 *)(v138 + 1);
        v167 = ~v138 + v137;
        do
        {
          v168 = v166;
          *(_QWORD *)(a1 + 48) = v166;
          if (!v167)
            goto LABEL_225;
          ++v166;
          --v167;
        }
        while (JSC::tokenTypesOfLatin1Characters[*v168] == 19);
        v165 = v168;
LABEL_225:
        v139 = (unint64_t)v168 < v137;
        v138 = (unint64_t)v165;
        goto LABEL_179;
      }
      v139 = 0;
LABEL_179:
      if (v138 == v137)
        goto LABEL_492;
      *v11 = 18;
      v140 = *(unsigned __int8 *)v138;
      v141 = JSC::tokenTypesOfLatin1Characters[v140];
      if (v141 <= 4)
      {
        if (v141 == 4)
        {
          v142 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v140 != 39)
          {
            v143 = v138 + 1;
            *(_QWORD *)(a1 + 48) = v138 + 1;
            if (!v142)
            {
              v144 = v137 - v143;
              if ((uint64_t)(v137 - v143) < 0)
                goto LABEL_491;
              v145 = (int8x16_t *)(v144 + v138 + 1);
              if (v144 >= 0x10)
              {
                v146 = (unsigned __int8 *)(v138 + 16);
                v147.i64[0] = 0x2222222222222222;
                v147.i64[1] = 0x2222222222222222;
                v148.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v148.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v149.i64[0] = 0x2020202020202020;
                v149.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v150 = *(int8x16_t *)(v146 - 15);
                  v151 = vceqq_s8(v150, v147);
                  v152 = vorrq_s8(vorrq_s8(vceqq_s8(v150, v148), (int8x16_t)vcgtq_u8(v149, (uint8x16_t)v150)), v151);
                  v151.i8[0] = vmaxvq_u8((uint8x16_t)v152);
                  if (v151.i32[0])
                    break;
                  v146 += 16;
                  if (v146 >= (unsigned __int8 *)v145)
                  {
                    if (v146 - 15 >= (unsigned __int8 *)v145)
                      goto LABEL_253;
                    v153 = (unsigned __int8 *)&v145[-1];
                    v154 = v145[-1];
                    v155.i64[0] = 0x2222222222222222;
                    v155.i64[1] = 0x2222222222222222;
                    v156 = vceqq_s8(v154, v155);
                    v157.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v157.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v158.i64[0] = 0x2020202020202020;
                    v158.i64[1] = 0x2020202020202020;
                    v152 = vorrq_s8(vorrq_s8(vceqq_s8(v154, v157), (int8x16_t)vcgtq_u8(v158, (uint8x16_t)v154)), v156);
                    v156.i8[0] = vmaxvq_u8((uint8x16_t)v152);
                    if (!v156.i32[0])
                      goto LABEL_253;
LABEL_252:
                    v180 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v152);
                    v180.i8[0] = vminvq_u8(v180);
                    v145 = (int8x16_t *)&v153[v180.u32[0]];
                    goto LABEL_253;
                  }
                }
                v153 = v146 - 15;
                goto LABEL_252;
              }
              if (v137 == v143)
                goto LABEL_253;
              v285 = (int8x16_t *)(v138 + 1);
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v285->u8[0]])
                {
                  v145 = v285;
                  break;
                }
                v285 = (int8x16_t *)((char *)v285 + 1);
                --v144;
              }
              while (v144);
LABEL_253:
              *(_QWORD *)(a1 + 48) = v145;
LABEL_254:
              if ((unint64_t)v145 >= v137 || v145->u8[0] != (_DWORD)v140)
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, v143, v140, a6, a7, a8, a9);
                return 6;
              }
              *(_BYTE *)(a1 + 25) |= 1u;
              *(_QWORD *)(a1 + 32) = v143;
              *(_QWORD *)(a1 + 48) = (char *)v145->i64 + 1;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v145 - v143) & 0x7FFFFFFF;
              v181 = 4;
              goto LABEL_257;
            }
LABEL_713:
            if (v143 >= v137)
            {
              v145 = (int8x16_t *)v143;
            }
            else
            {
              v145 = (int8x16_t *)v143;
              while (1)
              {
                v392 = v145->u8[0];
                v393 = v392 < 0x20 || v392 == 92;
                v394 = v393 || v392 == (_DWORD)v140;
                v395 = v394;
                if (v392 != 9 && v395)
                  break;
                v145 = (int8x16_t *)((char *)v145 + 1);
                *(_QWORD *)(a1 + 48) = v145;
                if (v145 == (int8x16_t *)(v138 + v137 - v143 + 1))
                {
                  v145 = (int8x16_t *)(v138 + v137 - v143 + 1);
                  goto LABEL_254;
                }
              }
            }
            goto LABEL_254;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v143 = v138 + 1;
            *(_QWORD *)(a1 + 48) = v138 + 1;
            goto LABEL_713;
          }
          v382 = WTF::fastCompactMalloc((WTF *)0x20);
          v302 = (WTF::StringImpl *)v382;
          v383 = 0x2900000002;
          v384 = "Single quotes (') are not allowed in JSON";
          goto LABEL_681;
        }
LABEL_214:
        *(_BYTE *)(a1 + 24) = v141;
        *(_QWORD *)(a1 + 48) = v138 + 1;
        return 6;
      }
      if (v141 != 6)
      {
        if (v141 != 5)
        {
          if (v141 - 18 < 2)
          {
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v407);
            v302 = v407;
            if (!v407)
            {
              __break(0xC471u);
              JUMPOUT(0x198AF89D0);
            }
            *(_QWORD *)v407 = 0x1600000002;
            *((_QWORD *)v302 + 1) = (char *)v302 + 20;
            *((_DWORD *)v302 + 4) = 4;
            *((_DWORD *)v302 + 9) = 656436837;
            *(_OWORD *)((char *)v302 + 20) = *(_OWORD *)"Unrecognized token '";
            *((_BYTE *)v302 + 40) = *(_BYTE *)v138;
            *((_BYTE *)v302 + 41) = 39;
            goto LABEL_521;
          }
          goto LABEL_214;
        }
        if ((_DWORD)v140 == 110)
        {
          if ((uint64_t)(v137 - v138) >= 4 && *(_WORD *)(v138 + 1) == 27765 && *(_BYTE *)(v138 + 3) == 108)
          {
            *(_QWORD *)(a1 + 48) = v138 + 4;
            v181 = 13;
LABEL_257:
            *(_BYTE *)(a1 + 24) = v181;
            return 6;
          }
        }
        else if ((_DWORD)v140 == 102)
        {
          if ((uint64_t)(v137 - v138) >= 5 && *(_WORD *)(v138 + 1) == 27745 && *(_WORD *)(v138 + 3) == 25971)
          {
            *(_QWORD *)(a1 + 48) = v138 + 5;
            v181 = 12;
            goto LABEL_257;
          }
        }
        else if ((_DWORD)v140 == 116
               && (uint64_t)(v137 - v138) >= 4
               && *(_WORD *)(v138 + 1) == 30066
               && *(_BYTE *)(v138 + 3) == 101)
        {
          *(_QWORD *)(a1 + 48) = v138 + 4;
          v181 = 11;
          goto LABEL_257;
        }
        v325 = v138;
        *(_QWORD *)(a1 + 32) = v138;
        v326 = v138;
        if (v138 < v137)
        {
          v327 = v137 - v138;
          v328 = v138 + v327;
          while (1)
          {
            v329 = *(unsigned __int8 *)v138;
            if (v329 != 36)
            {
              v330 = v329 != 95 && (v329 - 48) >= 0xA;
              if (v330 && (v329 | 0x20u) - 97 > 0x19)
                break;
            }
            *(_QWORD *)(a1 + 48) = ++v138;
            if (!--v327)
            {
              LODWORD(v138) = v328;
              break;
            }
          }
          v326 = v138;
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v326 - v325) & 0x7FFFFFFF;
        v181 = 5;
        goto LABEL_257;
      }
      v182 = (_DWORD)v140 != 45 || !v139;
      v183 = (unsigned __int8 *)v138;
      if ((v182 & 1) == 0)
      {
        v183 = (unsigned __int8 *)(v138 + 1);
        *(_QWORD *)(a1 + 48) = v138 + 1;
      }
      if ((unint64_t)v183 >= v137)
        goto LABEL_680;
      v184 = *v183;
      if (v184 == 48)
      {
        v186 = v183 + 1;
        *(_QWORD *)(a1 + 48) = v186;
      }
      else
      {
        if ((v184 - 49) > 8)
        {
LABEL_680:
          v382 = WTF::fastCompactMalloc((WTF *)0x20);
          v302 = (WTF::StringImpl *)v382;
          v383 = 0xE00000002;
          v384 = "Invalid number";
          goto LABEL_681;
        }
        v185 = v183 + 1;
        do
        {
          v186 = v185;
          *(_QWORD *)(a1 + 48) = v185;
          if ((unint64_t)v185 >= v137)
            break;
          ++v185;
        }
        while (*v186 - 48 < 0xA);
      }
      if ((unint64_t)v186 < v137)
      {
        v187 = *v186;
        if (v187 == 46)
        {
          *(_QWORD *)(a1 + 48) = v186 + 1;
          if ((unint64_t)(v186 + 1) >= v137 || v186[1] - 48 > 9)
          {
            v382 = WTF::fastCompactMalloc((WTF *)0x20);
            v302 = (WTF::StringImpl *)v382;
            v383 = 0x2200000002;
            v384 = "Invalid digits after decimal point";
            goto LABEL_681;
          }
          v223 = v186 + 2;
          do
          {
            v186 = v223;
            *(_QWORD *)(a1 + 48) = v223;
            if ((unint64_t)v223 >= v137)
              break;
            ++v223;
          }
          while (*v186 - 48 < 0xA);
        }
        else if (v187 != 69 && v187 != 101 && (uint64_t)&v186[-v138] <= 9)
        {
          *v11 = 6;
          v188 = *(unsigned __int8 *)v138;
          if (v188 == 45)
            v189 = (unsigned __int8 *)(v138 + 1);
          else
            v189 = (unsigned __int8 *)v138;
          if (v189 >= v186)
          {
            if (v188 != 45)
            {
              v190 = 0;
LABEL_294:
              v192 = (double)v190;
LABEL_295:
              *(double *)(a1 + 32) = v192;
              return 6;
            }
          }
          else
          {
            v190 = 0;
            do
            {
              v191 = *v189++;
              v190 = v191 + 10 * v190 - 48;
            }
            while (v189 < v186);
            if (v188 != 45)
              goto LABEL_294;
            if (v190)
            {
              v190 = -v190;
              goto LABEL_294;
            }
          }
          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
          return 6;
        }
      }
      if ((unint64_t)v186 >= v137 || (*v186 | 0x20) != 0x65)
      {
LABEL_363:
        *v11 = 6;
        if ((uint64_t)&v186[-v138] < 0)
          goto LABEL_491;
        v407 = 0;
        fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v138, v186, (unint64_t *)&v407, 0x2E00000005);
        v192 = *(double *)&v407;
        goto LABEL_295;
      }
      v389 = v186 + 1;
      *(_QWORD *)(a1 + 48) = v186 + 1;
      if ((unint64_t)(v186 + 1) < v137)
      {
        v390 = *v389;
        if (v390 == 45 || v390 == 43)
        {
          v389 = v186 + 2;
          *(_QWORD *)(a1 + 48) = v186 + 2;
        }
      }
      if ((unint64_t)v389 < v137 && *v389 - 48 <= 9)
      {
        v391 = v389 + 1;
        do
        {
          v186 = v391;
          *(_QWORD *)(a1 + 48) = v391;
          if ((unint64_t)v391 >= v137)
            break;
          ++v391;
        }
        while (*v186 - 48 < 0xA);
        goto LABEL_363;
      }
      v382 = WTF::fastCompactMalloc((WTF *)0x20);
      v302 = (WTF::StringImpl *)v382;
      v383 = 0x5D00000002;
      v384 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_681:
      *(_QWORD *)v382 = v383;
      *(_QWORD *)(v382 + 8) = v384;
      *(_DWORD *)(v382 + 16) = 4;
LABEL_521:
      v303 = *v13;
      *v13 = v302;
      if (v303)
      {
        if (*(_DWORD *)v303 == 2)
        {
          WTF::StringImpl::~StringImpl(v303, v295, v296, v297, v298, v299, v300, v301);
          WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
        }
        else
        {
          *(_DWORD *)v303 -= 2;
        }
      }
      return 6;
    case 0xD:
      v111 = *(_QWORD *)(a1 + 48);
      v110 = *(_QWORD *)(a1 + 56);
      if (v111 < v110)
      {
        if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v111] != 19)
        {
          v112 = 1;
          goto LABEL_132;
        }
        v159 = *(unsigned __int8 **)(a1 + 56);
        v160 = (unsigned __int8 *)(v111 + 1);
        v161 = ~v111 + v110;
        do
        {
          v162 = v160;
          *(_QWORD *)(a1 + 48) = v160;
          if (!v161)
            goto LABEL_196;
          ++v160;
          --v161;
        }
        while (JSC::tokenTypesOfLatin1Characters[*v162] == 19);
        v159 = v162;
LABEL_196:
        v112 = (unint64_t)v162 < v110;
        v111 = (unint64_t)v159;
        goto LABEL_132;
      }
      v112 = 0;
LABEL_132:
      if (v111 == v110)
      {
        *v11 = 14;
        return 2;
      }
      *v11 = 18;
      v113 = *(unsigned __int8 *)v111;
      v114 = JSC::tokenTypesOfLatin1Characters[v113];
      if (v114 <= 4)
      {
        if (v114 == 4)
        {
          v115 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v113 != 39)
          {
            v116 = v111 + 1;
            *(_QWORD *)(a1 + 48) = v111 + 1;
            if (!v115)
            {
              v117 = v110 - v116;
              if ((uint64_t)(v110 - v116) < 0)
                goto LABEL_491;
              v118 = (int8x16_t *)(v117 + v111 + 1);
              if (v117 >= 0x10)
              {
                v119 = (unsigned __int8 *)(v111 + 16);
                v120.i64[0] = 0x2222222222222222;
                v120.i64[1] = 0x2222222222222222;
                v121.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v121.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v122.i64[0] = 0x2020202020202020;
                v122.i64[1] = 0x2020202020202020;
                while (1)
                {
                  v123 = *(int8x16_t *)(v119 - 15);
                  v124 = vceqq_s8(v123, v120);
                  v125 = vorrq_s8(vorrq_s8(vceqq_s8(v123, v121), (int8x16_t)vcgtq_u8(v122, (uint8x16_t)v123)), v124);
                  v124.i8[0] = vmaxvq_u8((uint8x16_t)v125);
                  if (v124.i32[0])
                    break;
                  v119 += 16;
                  if (v119 >= (unsigned __int8 *)v118)
                  {
                    if (v119 - 15 >= (unsigned __int8 *)v118)
                      goto LABEL_201;
                    v126 = (unsigned __int8 *)&v118[-1];
                    v127 = v118[-1];
                    v128.i64[0] = 0x2222222222222222;
                    v128.i64[1] = 0x2222222222222222;
                    v129 = vceqq_s8(v127, v128);
                    v130.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v130.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v131.i64[0] = 0x2020202020202020;
                    v131.i64[1] = 0x2020202020202020;
                    v125 = vorrq_s8(vorrq_s8(vceqq_s8(v127, v130), (int8x16_t)vcgtq_u8(v131, (uint8x16_t)v127)), v129);
                    v129.i8[0] = vmaxvq_u8((uint8x16_t)v125);
                    if (!v129.i32[0])
                      goto LABEL_201;
LABEL_200:
                    v163 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v125);
                    v163.i8[0] = vminvq_u8(v163);
                    v118 = (int8x16_t *)&v126[v163.u32[0]];
                    goto LABEL_201;
                  }
                }
                v126 = v119 - 15;
                goto LABEL_200;
              }
              if (v110 == v116)
                goto LABEL_201;
              v271 = (int8x16_t *)(v111 + 1);
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v271->u8[0]])
                {
                  v118 = v271;
                  break;
                }
                v271 = (int8x16_t *)((char *)v271 + 1);
                --v117;
              }
              while (v117);
LABEL_201:
              *(_QWORD *)(a1 + 48) = v118;
LABEL_202:
              if ((unint64_t)v118 >= v110 || v118->u8[0] != (_DWORD)v113)
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, v116, v113, a6, a7, a8, a9);
                return 2;
              }
              *(_BYTE *)(a1 + 25) |= 1u;
              *(_QWORD *)(a1 + 32) = v116;
              *(_QWORD *)(a1 + 48) = (char *)v118->i64 + 1;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v118 - v116) & 0x7FFFFFFF;
              v164 = 4;
              goto LABEL_205;
            }
LABEL_684:
            if (v116 >= v110)
            {
              v118 = (int8x16_t *)v116;
            }
            else
            {
              v118 = (int8x16_t *)v116;
              do
              {
                v385 = v118->u8[0];
                v388 = v385 < 0x20 || v385 == 92 || v385 == (_DWORD)v113;
                if (v385 != 9 && v388)
                  goto LABEL_202;
                v118 = (int8x16_t *)((char *)v118 + 1);
                *(_QWORD *)(a1 + 48) = v118;
              }
              while (v118 != (int8x16_t *)(v111 + v110 - v116 + 1));
              v118 = (int8x16_t *)(v111 + v110 - v116 + 1);
            }
            goto LABEL_202;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v116 = v111 + 1;
            *(_QWORD *)(a1 + 48) = v111 + 1;
            goto LABEL_684;
          }
          v376 = WTF::fastCompactMalloc((WTF *)0x20);
          v293 = (WTF::StringImpl *)v376;
          v377 = 0x2900000002;
          v378 = "Single quotes (') are not allowed in JSON";
          goto LABEL_667;
        }
LABEL_174:
        *(_BYTE *)(a1 + 24) = v114;
        *(_QWORD *)(a1 + 48) = v111 + 1;
        return 2;
      }
      if (v114 != 6)
      {
        if (v114 != 5)
        {
          if (v114 - 18 < 2)
          {
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v407);
            v293 = v407;
            if (!v407)
            {
              __break(0xC471u);
              JUMPOUT(0x198AF89C8);
            }
            *(_QWORD *)v407 = 0x1600000002;
            *((_QWORD *)v293 + 1) = (char *)v293 + 20;
            *((_DWORD *)v293 + 4) = 4;
            *((_DWORD *)v293 + 9) = 656436837;
            *(_OWORD *)((char *)v293 + 20) = *(_OWORD *)"Unrecognized token '";
            *((_BYTE *)v293 + 40) = *(_BYTE *)v111;
            *((_BYTE *)v293 + 41) = 39;
            goto LABEL_504;
          }
          goto LABEL_174;
        }
        if ((_DWORD)v113 == 110)
        {
          if ((uint64_t)(v110 - v111) >= 4 && *(_WORD *)(v111 + 1) == 27765 && *(_BYTE *)(v111 + 3) == 108)
          {
            *(_QWORD *)(a1 + 48) = v111 + 4;
            v164 = 13;
LABEL_205:
            *(_BYTE *)(a1 + 24) = v164;
            return 2;
          }
        }
        else if ((_DWORD)v113 == 102)
        {
          if ((uint64_t)(v110 - v111) >= 5 && *(_WORD *)(v111 + 1) == 27745 && *(_WORD *)(v111 + 3) == 25971)
          {
            *(_QWORD *)(a1 + 48) = v111 + 5;
            v164 = 12;
            goto LABEL_205;
          }
        }
        else if ((_DWORD)v113 == 116
               && (uint64_t)(v110 - v111) >= 4
               && *(_WORD *)(v111 + 1) == 30066
               && *(_BYTE *)(v111 + 3) == 101)
        {
          *(_QWORD *)(a1 + 48) = v111 + 4;
          v164 = 11;
          goto LABEL_205;
        }
        v304 = v111;
        *(_QWORD *)(a1 + 32) = v111;
        v305 = v111;
        if (v111 < v110)
        {
          v306 = v110 - v111;
          v307 = v111 + v306;
          do
          {
            v308 = *(unsigned __int8 *)v111;
            if (v308 != 36)
            {
              v309 = v308 != 95 && (v308 - 48) >= 0xA;
              if (v309 && (v308 | 0x20u) - 97 > 0x19)
                goto LABEL_547;
            }
            *(_QWORD *)(a1 + 48) = ++v111;
            --v306;
          }
          while (v306);
          LODWORD(v111) = v307;
LABEL_547:
          v305 = v111;
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v305 - v304) & 0x7FFFFFFF;
        v164 = 5;
        goto LABEL_205;
      }
      v169 = (_DWORD)v113 != 45 || !v112;
      v170 = (unsigned __int8 *)v111;
      if ((v169 & 1) == 0)
      {
        v170 = (unsigned __int8 *)(v111 + 1);
        *(_QWORD *)(a1 + 48) = v111 + 1;
      }
      if ((unint64_t)v170 >= v110)
        goto LABEL_666;
      v171 = *v170;
      if (v171 == 48)
      {
        v173 = v170 + 1;
        *(_QWORD *)(a1 + 48) = v173;
      }
      else
      {
        if ((v171 - 49) > 8)
        {
LABEL_666:
          v376 = WTF::fastCompactMalloc((WTF *)0x20);
          v293 = (WTF::StringImpl *)v376;
          v377 = 0xE00000002;
          v378 = "Invalid number";
          goto LABEL_667;
        }
        v172 = v170 + 1;
        do
        {
          v173 = v172;
          *(_QWORD *)(a1 + 48) = v172;
          if ((unint64_t)v172 >= v110)
            break;
          ++v172;
        }
        while (*v173 - 48 < 0xA);
      }
      if ((unint64_t)v173 < v110)
      {
        v174 = *v173;
        if (v174 == 46)
        {
          *(_QWORD *)(a1 + 48) = v173 + 1;
          if ((unint64_t)(v173 + 1) >= v110 || v173[1] - 48 > 9)
          {
            v376 = WTF::fastCompactMalloc((WTF *)0x20);
            v293 = (WTF::StringImpl *)v376;
            v377 = 0x2200000002;
            v378 = "Invalid digits after decimal point";
            goto LABEL_667;
          }
          v216 = v173 + 2;
          do
          {
            v173 = v216;
            *(_QWORD *)(a1 + 48) = v216;
            if ((unint64_t)v216 >= v110)
              break;
            ++v216;
          }
          while (*v173 - 48 < 0xA);
        }
        else if (v174 != 69 && v174 != 101 && (uint64_t)&v173[-v111] <= 9)
        {
          *v11 = 6;
          v175 = *(unsigned __int8 *)v111;
          if (v175 == 45)
            v176 = (unsigned __int8 *)(v111 + 1);
          else
            v176 = (unsigned __int8 *)v111;
          if (v176 >= v173)
          {
            if (v175 != 45)
            {
              v177 = 0;
LABEL_249:
              v179 = (double)v177;
LABEL_250:
              *(double *)(a1 + 32) = v179;
              return 2;
            }
          }
          else
          {
            v177 = 0;
            do
            {
              v178 = *v176++;
              v177 = v178 + 10 * v177 - 48;
            }
            while (v176 < v173);
            if (v175 != 45)
              goto LABEL_249;
            if (v177)
            {
              v177 = -v177;
              goto LABEL_249;
            }
          }
          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
          return 2;
        }
      }
      if ((unint64_t)v173 >= v110 || (*v173 | 0x20) != 0x65)
      {
LABEL_336:
        *v11 = 6;
        if ((uint64_t)&v173[-v111] < 0)
          goto LABEL_491;
        v407 = 0;
        fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v111, v173, (unint64_t *)&v407, 0x2E00000005);
        v179 = *(double *)&v407;
        goto LABEL_250;
      }
      v379 = v173 + 1;
      *(_QWORD *)(a1 + 48) = v173 + 1;
      if ((unint64_t)(v173 + 1) < v110)
      {
        v380 = *v379;
        if (v380 == 45 || v380 == 43)
        {
          v379 = v173 + 2;
          *(_QWORD *)(a1 + 48) = v173 + 2;
        }
      }
      if ((unint64_t)v379 < v110 && *v379 - 48 <= 9)
      {
        v381 = v379 + 1;
        do
        {
          v173 = v381;
          *(_QWORD *)(a1 + 48) = v381;
          if ((unint64_t)v381 >= v110)
            break;
          ++v381;
        }
        while (*v173 - 48 < 0xA);
        goto LABEL_336;
      }
      v376 = WTF::fastCompactMalloc((WTF *)0x20);
      v293 = (WTF::StringImpl *)v376;
      v377 = 0x5D00000002;
      v378 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_667:
      *(_QWORD *)v376 = v377;
      *(_QWORD *)(v376 + 8) = v378;
      *(_DWORD *)(v376 + 16) = 4;
LABEL_504:
      v294 = *v13;
      *v13 = v293;
      if (v294)
      {
        if (*(_DWORD *)v294 == 2)
        {
          WTF::StringImpl::~StringImpl(v294, v286, v287, v288, v289, v290, v291, v292);
          WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
        }
        else
        {
          *(_DWORD *)v294 -= 2;
        }
      }
      return 2;
    case 0xE:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0xE00000002;
      v275 = "Unexpected EOF";
      goto LABEL_467;
    case 0xF:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token '.'";
      goto LABEL_467;
    case 0x10:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token '='";
      goto LABEL_467;
    case 0x11:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x1400000002;
      v275 = "Unexpected token ';'";
      goto LABEL_467;
    default:
      v272 = WTF::fastCompactMalloc((WTF *)0x20);
      v273 = v272;
      v274 = 0x2000000002;
      v275 = "Could not parse value expression";
LABEL_467:
      *(_QWORD *)v272 = v274;
      *(_QWORD *)(v272 + 8) = v275;
      *(_DWORD *)(v272 + 16) = 4;
      v221 = *(WTF::StringImpl **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v273;
      if (!v221)
        return 0;
      v222 = *(_DWORD *)v221 - 2;
      if (*(_DWORD *)v221 != 2)
      {
        v26 = 0;
        goto LABEL_354;
      }
LABEL_470:
      WTF::StringImpl::~StringImpl(v221, v234, v235, v236, v237, v238, v239, v240);
      WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
      return 0;
  }
}

unint64_t JSC::LiteralParser<unsigned char>::parse(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  WTF::AtomStringImpl **v11;
  unsigned __int8 **v12;
  int *v13;
  __n128 v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  int8x16_t *v27;
  unsigned __int8 *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint8x16_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t SlowCase;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  int8x16_t *v49;
  int v50;
  unint64_t v51;
  uint8x8_t *v52;
  uint64_t v53;
  int16x8_t *v54;
  uint16x8_t v55;
  unint64_t v56;
  int16x8_t *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  size_t v64;
  unint64_t v65;
  int8x16_t *v66;
  unsigned __int8 *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v78;
  unsigned __int8 *v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  int8x16_t *v84;
  unsigned __int8 *v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  uint8x16_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  int v98;
  unsigned __int8 *v99;
  uint8x16_t v100;
  char v101;
  uint64_t v102;
  const char *v103;
  unint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  char v123;
  int v124;
  size_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  size_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  uint64_t v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  unsigned __int8 *v143;
  int v144;
  int v145;
  double v146;
  unsigned int v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  char *v153;
  unint64_t v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  unsigned int v162;
  unsigned int v163;
  _opaque_pthread_t *v164;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unsigned __int8 *v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  int v177;
  unsigned __int8 *v178;
  int v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  unsigned __int8 *v183;
  unint64_t v184;
  unsigned int v185;
  int v186;
  unint64_t v187;
  int8x16_t *v188;
  unsigned __int8 *v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  uint8x16_t v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  char *stackaddr_np;
  _opaque_pthread_t *v200;
  unint64_t v201;
  int v202;
  int v203;
  int v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  int v209;
  unint64_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  unsigned __int8 *v215;
  WTF::StringImpl *v216;
  int v217;
  _BYTE *v218;
  uint64_t v219;
  JSC::VM *v220;
  unint64_t v221;
  unint64_t v222;
  BOOL v223;
  unsigned int v224;
  int v225;
  unint64_t v226;
  int8x16_t *v227;
  unsigned __int8 *v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  uint8x16_t v233;
  unsigned __int16 *v235;
  uint64_t v236;
  unsigned int v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  _opaque_pthread_t *v252;
  rlim_t stacksize_np;
  unint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  unsigned int v257;
  unsigned int v258;
  _opaque_pthread_t *v259;
  unint64_t v261;
  unsigned __int8 *v262;
  int v263;
  unsigned __int8 *v264;
  int v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  int v269;
  char v270;
  unsigned __int8 *v271;
  int v272;
  unsigned __int8 *v273;
  int v274;
  int v275;
  unsigned __int8 *v276;
  int v277;
  int v278;
  double v279;
  unsigned __int8 *v280;
  int v281;
  unsigned __int8 *v282;
  int v283;
  unsigned __int8 *v284;
  int v285;
  int8x16_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  BOOL v292;
  BOOL v293;
  unsigned int v294;
  BOOL v295;
  BOOL v296;
  BOOL v297;
  unsigned int v298;
  BOOL v299;
  BOOL v300;
  BOOL v301;
  uint64_t v302;
  uint64_t v303;
  unsigned __int8 *v304;
  char *v305;
  _opaque_pthread_t *v306;
  unint64_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  uint8x16_t v312;
  unsigned __int8 *v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  unint64_t v316;
  unsigned __int8 *v317;
  unint64_t v318;
  unsigned __int8 *v319;
  unint64_t v320;
  unsigned int v321;
  int v322;
  size_t v323;
  unint64_t v324;
  unsigned __int8 *v325;
  unsigned int v326;
  BOOL v327;
  BOOL v328;
  BOOL v329;
  int8x16_t *v330;
  unsigned __int8 *v331;
  int v332;
  int v333;
  unsigned __int8 *v334;
  unint64_t v335;
  unsigned __int8 *v336;
  unsigned __int8 *v337;
  unsigned int v338;
  BOOL v339;
  BOOL v340;
  BOOL v341;
  unsigned __int8 *v342;
  unsigned __int8 *v343;
  uint64_t v344;
  char v345;
  char v346;
  unsigned __int8 *v347;
  int v348;
  unsigned __int8 *v349;
  int v350;
  int v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  uint8x16_t v356;
  unsigned __int8 *v357;
  unsigned __int8 *v358;
  unsigned __int8 *v359;
  int v360;
  int v361;
  uint64_t v362;
  unsigned int v363;
  BOOL v364;
  BOOL v365;
  BOOL v366;
  unsigned __int8 *v367;
  int v368;
  int v369;
  unsigned __int8 *v370;
  int v371;
  unsigned __int8 *v372;
  int v373;
  unsigned __int8 *v374;
  unsigned __int8 *v375;
  int v376;
  int v377;
  unsigned __int8 *v378;
  int v379;
  int v380;
  double v381;
  WTF::AtomStringImpl *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  WTF::StringImpl *v390;
  unint64_t v392;
  int *v393;
  uint64_t v394;
  rlim_t v395;
  WTF::StringImpl *v396;
  uint64_t v397;
  _DWORD *v398;
  int v399;
  _opaque_pthread_t *v400;
  rlim_t v401;
  int v402;
  unint64_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  unsigned __int8 *v412;
  unsigned int v413;
  unsigned __int8 *v414;
  int v415;
  int *v416;
  unsigned __int8 *v417;
  int v418;
  unsigned __int8 *v419;
  char v420;
  unsigned __int8 *v421;
  int v422;
  unint64_t v423;
  unsigned __int8 *v424;
  unsigned __int8 *v425;
  unint64_t v426;
  unsigned int v427;
  int v428;
  size_t v429;
  unint64_t v430;
  int8x16_t *v431;
  unsigned __int8 *v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  uint8x16_t v437;
  unsigned __int8 *v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  WTF::StringImpl **v443;
  char v444;
  char v445;
  char v446;
  unsigned __int8 *v447;
  unint64_t v448;
  unsigned int v449;
  int v450;
  size_t v451;
  unint64_t v452;
  int8x16_t *v453;
  unsigned __int8 *v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  int8x16_t v458;
  uint8x16_t v459;
  unsigned __int8 *v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  unint64_t v465;
  char v466;
  uint64_t v467;
  WTF::StringImpl *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  const char *v472;
  unint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int8x16_t *v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  int v484;
  unsigned __int8 *v485;
  int v486;
  unsigned __int8 *v487;
  char v488;
  int v489;
  size_t v490;
  const WTF::String *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  WTF::StringImpl *v500;
  unint64_t v501;
  unint64_t v502;
  BOOL v503;
  unsigned int v504;
  unint64_t v505;
  int v506;
  size_t v507;
  unint64_t v508;
  int8x16_t *v509;
  unsigned __int8 *v510;
  int8x16_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  uint8x16_t v515;
  unsigned __int8 *v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  unsigned __int8 *v521;
  int v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  int v525;
  int v526;
  unsigned __int8 *v527;
  int v528;
  int v529;
  int8x16_t *v530;
  int8x16_t *v531;
  WTF::AtomStringImpl *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  rlim_t v539;
  WTF::StringImpl *v540;
  int8x16_t *v541;
  unint64_t v542;
  int *v543;
  uint64_t *v544;
  int8x16_t *v545;
  unint64_t v546;
  unint64_t v547;
  BOOL v548;
  unsigned int v549;
  int v550;
  size_t v551;
  unint64_t v552;
  int8x16_t *v553;
  unsigned __int8 *v554;
  int8x16_t v555;
  int8x16_t v556;
  int8x16_t v557;
  int8x16_t v558;
  uint8x16_t v559;
  unint64_t v560;
  int v561;
  unint64_t v562;
  int8x16_t v563;
  int8x16_t v564;
  int8x16_t v565;
  int8x16_t v566;
  unsigned __int8 *v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  unint64_t v572;
  unsigned __int8 *v573;
  unint64_t v574;
  unsigned int v575;
  int v576;
  unint64_t v577;
  int8x16_t *v578;
  unsigned __int8 *v579;
  int8x16_t v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  uint8x16_t v584;
  unsigned __int8 *v585;
  int8x16_t v586;
  int8x16_t v587;
  int8x16_t v588;
  int8x16_t v589;
  rlim_t v590;
  WTF::StringImpl *v591;
  int v592;
  unint64_t v593;
  unsigned __int8 *v594;
  unint64_t v595;
  unsigned int v596;
  int v597;
  size_t v598;
  unint64_t v599;
  int8x16_t *v600;
  unsigned __int8 *v601;
  int8x16_t v602;
  int8x16_t v603;
  uint8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  unsigned __int8 *v608;
  int8x16_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int8x16_t v612;
  uint8x16_t v613;
  int8x16_t v614;
  _QWORD *v615;
  uint64_t *v616;
  unint64_t v617;
  unint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unsigned __int8 *v626;
  int v627;
  unsigned __int8 *v628;
  unsigned __int8 *v629;
  int v630;
  int v631;
  unsigned __int8 *v632;
  int v633;
  int v634;
  int v636;
  unint64_t v637;
  uint8x8_t *v638;
  unsigned int v639;
  uint64_t v640;
  char *v641;
  uint16x8_t v642;
  unint64_t v643;
  int16x8_t *v644;
  WTF::StringImpl *v645;
  unint64_t v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t v649;
  BOOL v650;
  unsigned int v651;
  int v652;
  size_t v653;
  unint64_t v654;
  int8x16_t *v655;
  unsigned __int8 *v656;
  int8x16_t v657;
  int8x16_t v658;
  int8x16_t v659;
  int8x16_t v660;
  uint8x16_t v661;
  unsigned __int8 *v662;
  int8x16_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  __n128 v672;
  unint64_t v673;
  unint64_t v674;
  int v675;
  _BYTE *v676;
  uint64_t v677;
  JSC::VM *v678;
  int v679;
  int v680;
  unint64_t v681;
  unsigned __int8 *v682;
  unint64_t v683;
  unsigned int v684;
  int *v685;
  int v686;
  unint64_t v687;
  int8x16_t *v688;
  unsigned __int8 *v689;
  int8x16_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int8x16_t v693;
  uint8x16_t v694;
  unsigned __int8 *v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int *v700;
  uint64_t v701;
  rlim_t rlim_cur;
  int8x16_t *v703;
  unsigned int v704;
  unsigned __int8 *v705;
  unsigned __int8 *v706;
  unint64_t v707;
  unsigned __int8 *v708;
  unsigned __int8 *v709;
  unint64_t v710;
  unsigned int v711;
  int v712;
  size_t v713;
  unint64_t v714;
  int8x16_t *v715;
  unsigned __int8 *v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  uint8x16_t v721;
  unsigned __int8 *v722;
  int8x16_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int8x16_t v726;
  uint64_t v727;
  rlim_t v728;
  WTF::StringImpl *v729;
  WTF::AtomStringImpl *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  rlim_t v737;
  WTF::StringImpl *v738;
  WTF::AtomStringImpl *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  rlim_t v746;
  WTF::StringImpl *v747;
  int v748;
  int v749;
  unint64_t v750;
  int v751;
  int v752;
  BOOL v753;
  unint64_t v755;
  void *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unsigned __int8 *v767;
  WTF::StringImpl *v768;
  uint8x16_t v769;
  unsigned __int8 *v770;
  unsigned __int8 *v771;
  unint64_t v772;
  unsigned __int8 *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unsigned __int8 *v780;
  unsigned __int8 *v781;
  unint64_t v782;
  unsigned __int8 *v783;
  unsigned __int16 *v785;
  uint64_t v786;
  unsigned int v787;
  unsigned __int8 *v788;
  unint64_t v789;
  int v790;
  int v791;
  BOOL v792;
  int v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  WTF::StringImpl *v802;
  int *v803;
  unint64_t v804;
  unsigned __int8 *v805;
  unint64_t v806;
  unsigned int v807;
  int *v808;
  int v809;
  unint64_t v810;
  int8x16_t *v811;
  unsigned __int8 *v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  uint8x16_t v817;
  unsigned __int8 *v818;
  int8x16_t v819;
  int8x16_t v820;
  int8x16_t v821;
  int8x16_t v822;
  unint64_t v823;
  void *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  int v832;
  unint64_t v833;
  int v834;
  int v835;
  BOOL v836;
  char v838;
  unsigned __int8 *v839;
  int v840;
  unsigned __int8 *v841;
  unsigned __int8 *v842;
  int v843;
  int v844;
  unsigned __int8 *v845;
  int v846;
  int v847;
  unsigned __int8 *v848;
  int v849;
  unsigned __int8 *v850;
  int v851;
  unsigned __int8 *v852;
  int v853;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  __int16 v862;
  uint64_t v863;
  unsigned int v864;
  BOOL v867;
  unsigned int v868;
  BOOL v869;
  BOOL v870;
  BOOL v871;
  unsigned __int8 *v872;
  int v873;
  unsigned __int8 *v874;
  unsigned __int8 *v875;
  int v876;
  int v877;
  unsigned __int8 *v878;
  int v879;
  int v880;
  double v881;
  int *v882;
  unsigned __int8 *v883;
  int v884;
  unsigned __int8 *v885;
  unsigned __int8 *v886;
  int v887;
  int v888;
  unsigned __int8 *v889;
  int v890;
  int v891;
  unsigned __int8 *v892;
  unint64_t v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unsigned int v901;
  BOOL v902;
  BOOL v903;
  BOOL v904;
  uint64_t v905;
  rlim_t v906;
  WTF::StringImpl *v907;
  unint64_t v908;
  void *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  unint64_t v916;
  void *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  unsigned int v924;
  char v925;
  int v926;
  int v927;
  unint64_t v928;
  int v929;
  int v930;
  BOOL v931;
  int *v933;
  char v934;
  unsigned __int8 *v935;
  int v936;
  unsigned __int8 *v937;
  unsigned __int8 *v938;
  int v939;
  int v940;
  unsigned __int8 *v941;
  int v942;
  int v943;
  uint64_t v944;
  char *v945;
  int v946;
  unint64_t v947;
  uint8x8_t *v948;
  unsigned int v949;
  uint64_t v950;
  char *v951;
  uint16x8_t v952;
  unint64_t v953;
  int16x8_t *v954;
  char *v955;
  uint64_t v956;
  uint64_t v957;
  WTF::StringImpl *v958;
  unint64_t v959;
  unsigned __int8 *v960;
  unint64_t v961;
  unsigned int v962;
  int v963;
  size_t v964;
  unint64_t v965;
  int8x16_t *v966;
  unsigned __int8 *v967;
  int8x16_t v968;
  int8x16_t v969;
  int8x16_t v970;
  int8x16_t v971;
  uint8x16_t v972;
  int8x16_t v973;
  unsigned __int8 *v974;
  int8x16_t v975;
  int8x16_t v976;
  int8x16_t v977;
  int8x16_t v978;
  unint64_t v979;
  int v980;
  BOOL v981;
  char v983;
  unsigned __int8 *v984;
  int v985;
  unsigned __int8 *v986;
  unsigned __int8 *v987;
  int v988;
  int v989;
  unsigned __int8 *v990;
  int v991;
  int v992;
  int v993;
  int v994;
  unint64_t v995;
  int v996;
  int v997;
  BOOL v998;
  unint64_t v1000;
  void *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unsigned int v1008;
  BOOL v1011;
  unint64_t v1012;
  void *v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  unsigned __int8 *v1020;
  int v1021;
  unsigned __int8 *v1022;
  unsigned __int8 *v1023;
  int v1024;
  int v1025;
  unsigned __int8 *v1026;
  int v1027;
  int v1028;
  unint64_t v1029;
  void *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  const char *v1039;
  WTF::StringImpl *v1040;
  char v1041;
  unint64_t v1042;
  unint64_t v1043;
  uint64_t v1044;
  unint64_t v1046;
  unsigned __int8 *v1047;
  unint64_t v1048;
  unsigned int v1049;
  int v1050;
  unint64_t v1051;
  int8x16_t *v1052;
  unsigned __int8 *v1053;
  int8x16_t v1054;
  int8x16_t v1055;
  int8x16_t v1056;
  int8x16_t v1057;
  uint8x16_t v1058;
  unsigned __int8 *v1059;
  int8x16_t v1060;
  int8x16_t v1061;
  int8x16_t v1062;
  int8x16_t v1063;
  unint64_t v1064;
  void *v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  unsigned __int8 *v1072;
  int v1073;
  unsigned __int8 *v1074;
  unsigned __int8 *v1075;
  int v1076;
  int v1077;
  unsigned __int8 *v1078;
  int v1079;
  int v1080;
  double v1081;
  char v1082;
  int v1083;
  int v1084;
  unint64_t v1085;
  int v1086;
  int v1087;
  BOOL v1088;
  unint64_t v1090;
  _QWORD *v1091;
  uint64_t v1092;
  unsigned __int8 *v1093;
  int v1094;
  unsigned __int8 *v1095;
  unsigned __int8 *v1096;
  int v1097;
  int v1098;
  unsigned __int8 *v1099;
  int v1100;
  int v1101;
  uint8x16_t v1102;
  uint64_t v1103;
  char v1104;
  uint64_t v1105;
  int v1106;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  __int16 v1115;
  unsigned __int8 *v1116;
  unsigned __int8 *v1117;
  int v1118;
  unsigned __int8 *v1119;
  unsigned __int8 *v1120;
  unint64_t v1121;
  int v1122;
  BOOL v1123;
  unint64_t v1125;
  void *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  unsigned __int8 *v1133;
  unsigned __int8 *v1134;
  unint64_t v1135;
  void *v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  int8x16_t *v1143;
  uint64_t v1144;
  char v1145;
  unint64_t v1146;
  unint64_t v1147;
  BOOL v1148;
  unsigned int v1149;
  int v1150;
  size_t v1151;
  unint64_t v1152;
  int8x16_t *v1153;
  unsigned __int8 *v1154;
  int8x16_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  uint8x16_t v1159;
  unsigned __int8 *v1160;
  int8x16_t v1161;
  int8x16_t v1162;
  int8x16_t v1163;
  int8x16_t v1164;
  unsigned __int8 *v1165;
  int v1166;
  unsigned __int8 *v1167;
  unsigned __int8 *v1168;
  int v1169;
  int v1170;
  unsigned __int8 *v1171;
  int v1172;
  int v1173;
  double v1174;
  unint64_t v1175;
  void *v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  unsigned __int8 *v1183;
  unsigned __int8 *v1184;
  unint64_t v1185;
  void *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  unsigned __int8 *v1193;
  unsigned __int8 *v1194;
  int v1195;
  unsigned __int8 *v1196;
  unsigned __int8 *v1197;
  int v1198;
  int v1199;
  unsigned __int8 *v1200;
  int v1201;
  int v1202;
  int8x16_t *v1203;
  unint64_t v1204;
  unint64_t v1205;
  BOOL v1206;
  unsigned int v1207;
  int v1208;
  size_t v1209;
  unint64_t v1210;
  int8x16_t *v1211;
  unsigned __int8 *v1212;
  int8x16_t v1213;
  int8x16_t v1214;
  int8x16_t v1215;
  int8x16_t v1216;
  uint8x16_t v1217;
  unsigned __int8 *v1218;
  int8x16_t v1219;
  int8x16_t v1220;
  int8x16_t v1221;
  int8x16_t v1222;
  char v1223;
  unsigned __int8 *v1224;
  unsigned __int8 *v1225;
  unint64_t v1226;
  unsigned __int8 *v1227;
  char v1228;
  char v1229;
  unsigned __int8 *v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  WTF::AtomStringImpl *v1235;
  uint64_t v1236;
  rlim_t v1237;
  WTF::StringImpl *v1238;
  char v1239;
  int v1240;
  unint64_t v1241;
  int16x8_t *v1242;
  unsigned int v1243;
  unsigned int v1244;
  uint64_t v1245;
  char *v1246;
  _WORD *v1247;
  unsigned __int8 *v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  unint64_t v1254;
  unint64_t v1255;
  unsigned int v1256;
  int v1257;
  size_t v1258;
  unint64_t v1259;
  int8x16_t *v1260;
  unsigned __int8 *v1261;
  int8x16_t v1262;
  int8x16_t v1263;
  int8x16_t v1264;
  int8x16_t v1265;
  uint8x16_t v1266;
  int v1267;
  unint64_t v1268;
  JSC *v1269;
  const WTF::String *v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  WTF::StringImpl *v1278;
  unint64_t v1279;
  int v1280;
  unint64_t v1281;
  int8x16_t v1282;
  int8x16_t v1283;
  int8x16_t v1284;
  int8x16_t v1285;
  unsigned __int8 *v1286;
  int8x16_t v1287;
  int8x16_t v1288;
  int8x16_t v1289;
  int8x16_t v1290;
  char v1291;
  char v1292;
  unsigned __int8 *v1293;
  unsigned __int8 *v1294;
  unint64_t v1295;
  unsigned __int8 *v1296;
  uint64_t v1297;
  WTF::AtomStringImpl *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  const char *v1307;
  WTF::StringImpl *v1308;
  char v1309;
  char v1310;
  unsigned __int8 *v1311;
  int v1312;
  unsigned __int8 *v1313;
  unsigned __int8 *v1314;
  int v1315;
  int v1316;
  unsigned __int8 *v1317;
  int v1318;
  int v1319;
  unsigned __int8 *v1320;
  WTF::AtomStringImpl *v1321;
  uint64_t v1322;
  rlim_t v1323;
  WTF::StringImpl *v1324;
  int *v1325;
  unsigned __int8 *v1326;
  int v1327;
  unsigned __int8 *v1328;
  char v1329;
  uint64_t v1330;
  char v1331;
  uint64_t v1332;
  rlim_t v1333;
  unint64_t v1334;
  _QWORD *v1335;
  uint64_t v1336;
  uint64_t v1337;
  const char *v1338;
  WTF::StringImpl *v1339;
  char v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int8x16_t *v1348;
  int v1349;
  __int32 v1350;
  WTF::StringImpl *v1351;
  uint64_t v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  WTF::AtomStringImpl *v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  const char *v1368;
  WTF::StringImpl *v1369;
  int8x16_t *v1370;
  int8x16_t *v1371;
  int v1372;
  WTF::AtomStringImpl *v1373;
  WTF::AtomStringImpl *v1374;
  WTF::StringImpl *v1375;
  WTF::AtomStringImpl *v1376;
  rlim_t v1377;
  WTF::StringImpl *v1378;
  unsigned __int8 *v1379;
  uint64_t v1380;
  int *v1381;
  unsigned __int8 *v1382;
  int v1383;
  unsigned __int8 *v1384;
  char v1385;
  char v1386;
  unsigned __int8 *v1387;
  int v1388;
  unsigned __int8 *v1389;
  unsigned __int8 *v1390;
  int v1391;
  int v1392;
  unsigned __int8 *v1393;
  int v1394;
  int v1395;
  uint64_t v1396;
  uint64_t v1397;
  const char *v1398;
  WTF::StringImpl *v1399;
  const WTF::String *v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  WTF::StringImpl *v1406;
  int v1407;
  int v1408;
  unint64_t v1409;
  int v1410;
  int v1411;
  BOOL v1412;
  unint64_t v1414;
  void *v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  unint64_t v1422;
  void *v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  int8x16_t *v1431;
  unint64_t v1432;
  void *v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  int8x16_t *v1440;
  int8x16_t *v1441;
  uint64_t v1442;
  uint64_t v1443;
  const char *v1444;
  WTF::StringImpl *v1445;
  char v1446;
  uint64_t v1447;
  WTF::AtomStringImpl *v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  const char *v1457;
  WTF::StringImpl *v1458;
  uint64_t v1459;
  uint64_t v1460;
  const char *v1461;
  uint64_t v1462;
  uint64_t v1463;
  const char *v1464;
  unsigned __int8 *v1465;
  int v1466;
  unsigned __int8 *v1467;
  unsigned __int8 *v1468;
  int v1469;
  int v1470;
  unsigned __int8 *v1471;
  int v1472;
  int v1473;
  unsigned __int8 *v1474;
  int v1475;
  unsigned __int8 *v1476;
  int v1477;
  unsigned __int8 *v1478;
  int v1479;
  unint64_t v1480;
  unint64_t v1481;
  BOOL v1482;
  unsigned int v1483;
  int v1484;
  size_t v1485;
  unint64_t v1486;
  int8x16_t *v1487;
  unsigned __int8 *v1488;
  int8x16_t v1489;
  int8x16_t v1490;
  int8x16_t v1491;
  int8x16_t v1492;
  uint8x16_t v1493;
  unsigned __int8 *v1494;
  int8x16_t v1495;
  int8x16_t v1496;
  int8x16_t v1497;
  int8x16_t v1498;
  unint64_t v1499;
  void *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  const char *v1509;
  WTF::StringImpl *v1510;
  unsigned __int8 *v1511;
  int v1512;
  unsigned __int8 *v1513;
  int *v1514;
  unsigned __int8 *v1515;
  int v1516;
  unsigned __int8 *v1517;
  int8x16_t *v1518;
  int v1519;
  int v1520;
  unint64_t v1521;
  int v1522;
  int v1523;
  BOOL v1524;
  int *v1526;
  unsigned __int8 *v1527;
  int v1528;
  unsigned __int8 *v1529;
  unint64_t v1530;
  void *v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  char v1538;
  WTF::StringImpl *v1539;
  int *v1540;
  unsigned __int8 *v1541;
  int v1542;
  unsigned __int8 *v1543;
  uint64_t v1544;
  uint64_t v1545;
  const char *v1546;
  WTF::StringImpl *v1547;
  unint64_t v1548;
  void *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  unsigned __int8 *v1556;
  uint64_t v1557;
  WTF::AtomStringImpl *v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  const char *v1567;
  WTF::StringImpl *v1568;
  uint64_t v1569;
  unint64_t v1570;
  void *v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  WTF::AtomStringImpl *v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  const char *v1588;
  WTF::StringImpl *v1589;
  WTF::AtomStringImpl *v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  rlim_t v1597;
  WTF::StringImpl *v1598;
  int8x16_t v1599;
  int8x16_t v1600;
  int8x16_t v1601;
  int8x16_t v1602;
  rlim_t v1603;
  WTF::StringImpl *v1604;
  unint64_t v1605;
  void *v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  int8x16_t *v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  const char *v1617;
  WTF::StringImpl *v1618;
  uint64_t v1619;
  WTF::StringImpl *v1620;
  int v1621;
  int v1622;
  char *v1623;
  unsigned int v1624;
  uint64_t v1625;
  char *v1626;
  uint16x8_t v1627;
  unint64_t v1628;
  int16x8_t *v1629;
  unsigned __int8 *v1630;
  unsigned __int8 *v1631;
  unint64_t v1632;
  unsigned __int8 *v1633;
  JSC::SmallStrings *v1634;
  unint64_t v1635;
  void *v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  int v1643;
  unint64_t v1644;
  int v1645;
  int v1646;
  BOOL v1647;
  unsigned __int8 *v1649;
  uint64_t v1650;
  unsigned int v1651;
  int8x16_t v1652;
  int8x16_t v1653;
  int8x16_t v1654;
  int8x16_t v1655;
  unint64_t v1656;
  void *v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  unint64_t v1664;
  void *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  int v1672;
  int v1673;
  unint64_t v1674;
  int v1675;
  int v1676;
  BOOL v1677;
  uint64_t v1679;
  rlim_t v1680;
  WTF::StringImpl *v1681;
  WTF::StringImpl *v1682;
  unint64_t v1683;
  void *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  unsigned __int8 *v1691;
  unint64_t v1692;
  void *v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  int8x16_t *v1700;
  WTF::AtomStringImpl *v1701;
  uint64_t v1702;
  rlim_t v1703;
  WTF::StringImpl *v1704;
  char v1705;
  unsigned __int8 *v1706;
  int v1707;
  unsigned __int8 *v1708;
  uint64_t v1709;
  const char *v1710;
  unint64_t v1711;
  void *v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  int8x16_t v1719;
  int8x16_t v1720;
  int8x16_t v1721;
  int8x16_t v1722;
  int v1723;
  int v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  char v1731;
  int8x16_t *v1732;
  WTF::AtomStringImpl *v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  rlim_t v1740;
  WTF::StringImpl *v1741;
  unint64_t v1742;
  void *v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  unsigned __int8 *v1750;
  unsigned __int8 *v1751;
  int v1752;
  unsigned __int8 *v1753;
  unsigned __int8 *v1754;
  int8x16_t v1755;
  int8x16_t v1756;
  int8x16_t v1757;
  int8x16_t v1758;
  char v1759;
  unsigned __int8 *v1760;
  int v1761;
  unsigned __int8 *v1762;
  unsigned __int8 *v1763;
  int v1764;
  int v1765;
  unsigned __int8 *v1766;
  int v1767;
  int v1768;
  uint64_t v1769;
  unint64_t v1770;
  int v1771;
  BOOL v1772;
  int8x16_t v1774;
  int8x16_t v1775;
  int8x16_t v1776;
  int8x16_t v1777;
  unint64_t v1778;
  void *v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  unint64_t v1786;
  void *v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  rlim_t v1794;
  WTF::StringImpl *v1795;
  int v1796;
  int v1797;
  unint64_t v1798;
  int v1799;
  int v1800;
  BOOL v1801;
  int v1803;
  int v1804;
  unint64_t v1805;
  int v1806;
  int v1807;
  BOOL v1808;
  unint64_t v1810;
  void *v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  unint64_t v1818;
  void *v1819;
  uint64_t v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  unint64_t v1826;
  void *v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  int8x16_t v1834;
  int8x16_t v1835;
  int8x16_t v1836;
  int8x16_t v1837;
  unint64_t v1838;
  void *v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  char v1846;
  int v1847;
  int v1848;
  unint64_t v1849;
  int v1850;
  int v1851;
  BOOL v1852;
  WTF::AtomStringImpl *v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  rlim_t v1861;
  WTF::StringImpl *v1862;
  int v1863;
  int v1864;
  unint64_t v1865;
  int v1866;
  int v1867;
  BOOL v1868;
  unint64_t v1870;
  void *v1871;
  uint64_t v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  unint64_t v1878;
  void *v1879;
  uint64_t v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  int v1886;
  int v1887;
  unint64_t v1888;
  int v1889;
  int v1890;
  BOOL v1891;
  unint64_t v1893;
  void *v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  char v1901;
  int8x16_t *v1902;
  rlim_t v1903;
  WTF::StringImpl *v1904;
  int v1905;
  int v1906;
  unint64_t v1907;
  int v1908;
  int v1909;
  BOOL v1910;
  unint64_t v1912;
  void *v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  int v1920;
  int v1921;
  unint64_t v1922;
  int v1923;
  int v1924;
  BOOL v1925;
  unint64_t v1927;
  void *v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  uint64_t v1934;
  unsigned __int8 *v1935;
  int8x16_t *v1936;
  uint64_t v1937;
  const char *v1938;
  unint64_t v1939;
  void *v1940;
  uint64_t v1941;
  uint64_t v1942;
  uint64_t v1943;
  uint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  int v1947;
  int v1948;
  unint64_t v1949;
  int v1950;
  int v1951;
  BOOL v1952;
  int v1954;
  uint64_t v1955;
  int8x16_t *v1956;
  unsigned __int8 *v1957;
  int v1958;
  unsigned __int8 *v1959;
  uint64_t v1960;
  rlim_t v1961;
  WTF::StringImpl *v1962;
  uint64_t v1963;
  WTF::StringImpl *v1964;
  WTF::AtomStringImpl *v1965;
  uint64_t v1966;
  uint64_t v1967;
  WTF::StringImpl *v1968;
  int v1969;
  int v1970;
  unint64_t v1971;
  int v1972;
  int v1973;
  BOOL v1974;
  int v1976;
  unint64_t v1977;
  void *v1978;
  uint64_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  uint64_t v1982;
  uint64_t v1983;
  uint64_t v1984;
  uint64_t v1985;
  const char *v1986;
  char v1987;
  unsigned int v1988;
  BOOL v1989;
  BOOL v1990;
  BOOL v1991;
  unsigned __int8 *v1992;
  int v1993;
  unsigned __int8 *v1994;
  uint64_t v1995;
  rlim_t v1996;
  WTF::StringImpl *v1997;
  WTF::AtomStringImpl *v1998;
  uint64_t v1999;
  uint64_t v2000;
  WTF::StringImpl *v2001;
  unsigned int v2002;
  BOOL v2003;
  BOOL v2004;
  BOOL v2005;
  uint64_t v2006;
  const char *v2007;
  int v2008;
  int v2009;
  unint64_t v2010;
  int v2011;
  int v2012;
  BOOL v2013;
  unint64_t v2015;
  void *v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  unint64_t v2023;
  void *v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  uint64_t v2030;
  unint64_t v2031;
  void *v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  uint64_t v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  int v2045;
  rlim_t v2046;
  int8x16_t *v2047;
  int v2048;
  int v2049;
  unint64_t v2050;
  int v2051;
  int v2052;
  BOOL v2053;
  uint64_t v2055;
  uint64_t v2056;
  const char *v2057;
  uint64_t v2058;
  const char *v2059;
  int v2060;
  int v2061;
  unint64_t v2062;
  int v2063;
  int v2064;
  BOOL v2065;
  unint64_t v2067;
  void *v2068;
  uint64_t v2069;
  uint64_t v2070;
  uint64_t v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  const WTF::String *v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  WTF::StringImpl *v2083;
  unsigned __int8 *v2084;
  int v2085;
  unsigned __int8 *v2086;
  unsigned __int8 *v2087;
  int v2088;
  unsigned __int8 *v2089;
  unsigned __int8 *v2090;
  int v2091;
  unsigned __int8 *v2092;
  unint64_t v2093;
  void *v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  const char *v2102;
  uint64_t v2103;
  const char *v2104;
  uint64_t v2105;
  unint64_t v2106;
  int v2107;
  BOOL v2108;
  int v2110;
  uint64_t v2111;
  WTF::AtomStringImpl *v2112;
  uint64_t v2113;
  uint64_t v2114;
  const char *v2115;
  WTF::StringImpl *v2116;
  unint64_t v2117;
  int16x8_t *v2118;
  int16x8_t *v2119;
  uint64_t v2120;
  uint64_t v2121;
  uint64_t v2122;
  uint64_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  unsigned __int8 *v2126;
  int v2127;
  unsigned __int8 *v2128;
  unsigned int v2129;
  BOOL v2132;
  unsigned __int8 *v2133;
  int v2134;
  unsigned __int8 *v2135;
  unsigned __int8 *v2136;
  int v2137;
  unsigned __int8 *v2138;
  uint64_t v2139;
  rlim_t v2140;
  WTF::StringImpl *v2141;
  uint64_t v2142;
  uint64_t v2143;
  const char *v2144;
  unint64_t v2145;
  void *v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t v2151;
  uint64_t v2152;
  unsigned int v2153;
  BOOL v2156;
  uint64_t v2157;
  uint64_t v2158;
  const char *v2159;
  unsigned __int8 *v2160;
  int v2161;
  unsigned __int8 *v2162;
  unsigned int v2163;
  BOOL v2164;
  BOOL v2165;
  BOOL v2166;
  unint64_t v2167;
  void *v2168;
  uint64_t v2169;
  uint64_t v2170;
  uint64_t v2171;
  uint64_t v2172;
  uint64_t v2173;
  uint64_t v2174;
  int v2175;
  unint64_t v2176;
  int16x8_t *v2177;
  unsigned int v2178;
  unsigned int v2179;
  uint64_t v2180;
  char *v2181;
  _WORD *v2182;
  unsigned __int8 *v2183;
  int v2184;
  unsigned __int8 *v2185;
  unsigned int v2186;
  BOOL v2187;
  BOOL v2188;
  BOOL v2189;
  uint64_t v2190;
  uint64_t v2191;
  uint64_t v2192;
  const char *v2193;
  unsigned __int8 *v2194;
  uint64_t v2195;
  unsigned int v2196;
  unsigned int v2197;
  BOOL v2198;
  BOOL v2199;
  BOOL v2200;
  unsigned __int8 *v2201;
  int v2202;
  unsigned __int8 *v2203;
  uint64_t v2204;
  const char *v2205;
  int v2206;
  int v2207;
  unint64_t v2208;
  int v2209;
  int v2210;
  BOOL v2211;
  unint64_t v2213;
  void *v2214;
  uint64_t v2215;
  uint64_t v2216;
  uint64_t v2217;
  uint64_t v2218;
  uint64_t v2219;
  uint64_t v2220;
  int v2221;
  __int32 v2222;
  unsigned __int8 *v2223;
  int v2224;
  unsigned __int8 *v2225;
  unsigned int v2226;
  BOOL v2227;
  BOOL v2228;
  BOOL v2229;
  unint64_t v2230;
  unint64_t v2231;
  uint64_t v2232;
  unsigned int v2234;
  BOOL v2235;
  BOOL v2236;
  BOOL v2237;
  uint64_t v2239;
  uint64_t v2240;
  uint64_t v2241;
  uint64_t v2242;
  uint64_t v2243;
  uint64_t v2244;
  uint64_t v2245;
  __int16 v2246;
  uint64_t v2247;
  const char *v2248;
  unsigned __int8 *v2249;
  int v2250;
  unsigned __int8 *v2251;
  uint64_t v2252;
  const char *v2253;
  uint64_t v2254;
  uint64_t v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  unsigned int v2260;
  BOOL v2263;
  unsigned __int8 *v2264;
  int v2265;
  unsigned __int8 *v2266;
  unsigned int v2267;
  BOOL v2270;
  unsigned __int8 *v2271;
  int v2272;
  unsigned __int8 *v2273;
  uint64_t v2274;
  unsigned int v2275;
  BOOL v2278;
  unsigned int v2279;
  BOOL v2280;
  BOOL v2281;
  BOOL v2282;
  uint64_t v2283;
  const char *v2284;
  unsigned __int8 *v2285;
  int v2286;
  unsigned __int8 *v2287;
  WTF::AtomStringImpl *v2288;
  uint64_t v2289;
  uint64_t v2290;
  WTF::StringImpl *v2291;
  unsigned int v2292;
  BOOL v2295;
  unint64_t v2296;
  void *v2297;
  uint64_t v2298;
  uint64_t v2299;
  uint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  unint64_t v2304;
  int16x8_t *v2305;
  int16x8_t *v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  uint64_t v2310;
  uint64_t v2311;
  uint64_t v2312;
  uint64_t v2313;
  uint64_t v2314;
  uint64_t v2315;
  uint64_t v2316;
  uint64_t v2317;
  uint64_t v2318;
  int *v2319;
  uint64_t v2320;
  WTF::StringBuilder *v2321;
  uint64_t v2322;
  unint64_t v2323;
  unint64_t v2324;
  uint64_t v2325;
  uint64_t *v2326;
  unint64_t StatusReg;
  WTF::AtomStringImpl **v2328;
  unint64_t v2329;
  JSC::MarkedVectorBase *v2330;
  uint64_t v2331;
  unint64_t *v2332;
  JSC::VM *v2333;
  char *v2335;
  unsigned __int8 **v2336;
  char *v2337;
  WTF::StringImpl *v2338;
  WTF::AtomStringImpl *v2339;
  rlimit v2340;
  int v2341;
  int v2342;
  uint64_t v2343;
  WTF::AtomStringImpl *v2344;
  size_t v2345;
  int v2346;
  char v2347;
  _QWORD v2348[2];

  v8 = a1;
  v9 = 0;
  v2322 = a2 + 41968;
  v2332 = (unint64_t *)(a2 + 39696);
  v10 = (char *)(a1 + 24);
  v11 = (WTF::AtomStringImpl **)(a1 + 32);
  v12 = (unsigned __int8 **)(a1 + 48);
  v2320 = a1 + 208;
  v2321 = (WTF::StringBuilder *)(a1 + 16);
  v13 = (int *)(a1 + 96);
  v2333 = (JSC::VM *)a2;
  v2330 = (JSC::MarkedVectorBase *)(a1 + 120);
  v2331 = a2 + 64784;
  v14 = (__n128)xmmword_19911D0A0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2328 = (WTF::AtomStringImpl **)(a1 + 32);
  v2323 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2329 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v2335 = (char *)(a1 + 24);
  v2336 = (unsigned __int8 **)(a1 + 48);
  while (2)
  {
    v2324 = v9;
    if (a3 == 8)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * (*(_DWORD *)(v8 + 120) - 1));
      if ((*(_BYTE *)(v15 + 4) & 0xE) != 0)
        v16 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v15 + 8) - 8);
      else
        v16 = 0;
      JSC::JSObject::putDirectIndex(v15, *(_QWORD *)v8, v16, v9, a5, a6, a7, a8, (int32x4_t)v14);
      if (*((_DWORD *)v2333 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
        return 0;
      v17 = *v10;
      if (v17 != 10)
      {
        if (v17 == 1)
        {
          v547 = *(_QWORD *)(v8 + 48);
          v546 = *(_QWORD *)(v8 + 56);
          if (v547 < v546)
          {
            v560 = v546 - v547;
            while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v547] == 19)
            {
              *v12 = (unsigned __int8 *)++v547;
              if (!--v560)
              {
                v547 = v546;
                break;
              }
            }
          }
          if (v547 != v546)
          {
            *v10 = 18;
            a4 = *(unsigned __int8 *)v547;
            v549 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v549 <= 4)
            {
              if (v549 == 4)
              {
                v561 = *(unsigned __int8 *)(v8 + 40);
                if ((_DWORD)a4 != 39)
                {
                  v551 = v547 + 1;
                  *v12 = (unsigned __int8 *)(v547 + 1);
                  if (!v561)
                  {
                    v562 = v546 - v551;
                    if ((uint64_t)(v546 - v551) < 0)
                      goto LABEL_3864;
                    v553 = (int8x16_t *)(v562 + v547 + 1);
                    if (v562 >= 0x10)
                    {
                      v554 = (unsigned __int8 *)(v547 + 16);
                      while (1)
                      {
                        v563 = *(int8x16_t *)(v554 - 15);
                        v564.i64[0] = 0x2222222222222222;
                        v564.i64[1] = 0x2222222222222222;
                        v565 = vceqq_s8(v563, v564);
                        v566.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v566.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v559.i64[0] = 0x2020202020202020;
                        v559.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v563, v566), (int8x16_t)vcgtq_u8(v559, (uint8x16_t)v563)), v565);
                        v565.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v565.i32[0])
                          break;
                        v554 += 16;
                        if (v554 >= (unsigned __int8 *)v553)
                          goto LABEL_1337;
                      }
LABEL_1454:
                      v567 = v554 - 15;
LABEL_1455:
                      v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                      v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                      v553 = (int8x16_t *)&v567[v14.n128_u32[0]];
LABEL_1456:
                      *v12 = (unsigned __int8 *)v553;
LABEL_1457:
                      if ((unint64_t)v553 < v546 && v553->u8[0] == (_DWORD)a4)
                      {
                        *(_BYTE *)(v8 + 25) |= 1u;
                        *(_QWORD *)(v8 + 32) = v551;
                        *(_QWORD *)(v8 + 48) = (char *)v553->i64 + 1;
                        *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v553 - v551) & 0x7FFFFFFF;
                        *(_BYTE *)(v8 + 24) = 4;
                      }
                      else
                      {
                        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v551, a4, a5, a6, a7, a8);
                      }
                      goto LABEL_1532;
                    }
                    v1348 = (int8x16_t *)(v547 + 1);
                    if (v546 != v551)
                    {
                      while (JSC::safeStringLatin1CharactersInStrictJSON[v1348->u8[0]])
                      {
                        v1348 = (int8x16_t *)((char *)v1348 + 1);
                        if (!--v562)
                          goto LABEL_2907;
                      }
LABEL_2906:
                      v553 = v1348;
                      goto LABEL_2907;
                    }
                    goto LABEL_2907;
                  }
                  v700 = v13;
LABEL_1857:
                  if (v551 < v546)
                  {
                    v863 = v547 + v546 - v551 + 1;
                    v553 = (int8x16_t *)v551;
                    v12 = v2336;
                    while (1)
                    {
                      v868 = v553->u8[0];
                      v869 = v868 < 0x20 || v868 == 92;
                      v870 = v869 || v868 == (_DWORD)a4;
                      v871 = v870;
                      if (v868 != 9 && v871)
                        break;
                      v553 = (int8x16_t *)((char *)v553 + 1);
                      *v2336 = (unsigned __int8 *)v553;
                      if (v553 == (int8x16_t *)v863)
                        goto LABEL_1871;
                    }
LABEL_1872:
                    v13 = v700;
                    v11 = v2328;
LABEL_1873:
                    v8 = a1;
                    v10 = v2335;
                    goto LABEL_1457;
                  }
                  goto LABEL_4384;
                }
                v700 = v13;
                if (*(_BYTE *)(v8 + 40))
                {
                  v551 = v547 + 1;
                  *v2336 = (unsigned __int8 *)(v547 + 1);
                  goto LABEL_1857;
                }
                goto LABEL_4662;
              }
              goto LABEL_1531;
            }
            if (v549 != 6)
            {
              if (v549 != 5)
              {
                if (v549 - 18 >= 2)
                  goto LABEL_1531;
                v700 = v13;
                WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                rlim_cur = v2340.rlim_cur;
                if (!v2340.rlim_cur)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B0613CLL);
                }
                goto LABEL_3256;
              }
              if ((_DWORD)a4 == 110)
              {
                if ((uint64_t)(v546 - v547) >= 4 && *(_WORD *)(v547 + 1) == 27765 && *(_BYTE *)(v547 + 3) == 108)
                {
LABEL_2571:
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v547 + 4);
                  v1223 = 13;
LABEL_2572:
                  v10 = v2335;
                  *v2335 = v1223;
                  v11 = v2328;
                  goto LABEL_1825;
                }
LABEL_3617:
                v1672 = v547;
                *v2328 = (WTF::AtomStringImpl *)v547;
                v1673 = v547;
                if (v547 < v546)
                {
                  v1770 = v546 - v547;
                  v1675 = v547 + v1770;
                  while (1)
                  {
                    v1771 = *(unsigned __int8 *)v547;
                    if (v1771 != 36)
                    {
                      v1772 = v1771 != 95 && (v1771 - 48) >= 0xA;
                      if (v1772 && (v1771 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    *v2336 = (unsigned __int8 *)++v547;
                    if (!--v1770)
                      goto LABEL_3628;
                  }
LABEL_3629:
                  v1673 = v547;
                  goto LABEL_3630;
                }
                goto LABEL_3630;
              }
              if ((_DWORD)a4 == 102)
              {
                if ((uint64_t)(v546 - v547) < 5 || *(_WORD *)(v547 + 1) != 27745 || *(_WORD *)(v547 + 3) != 25971)
                  goto LABEL_3617;
LABEL_2766:
                v12 = v2336;
                *v2336 = (unsigned __int8 *)(v547 + 5);
                v1223 = 12;
                goto LABEL_2572;
              }
              if ((_DWORD)a4 != 116
                || (uint64_t)(v546 - v547) < 4
                || *(_WORD *)(v547 + 1) != 30066
                || *(_BYTE *)(v547 + 3) != 101)
              {
                goto LABEL_3617;
              }
LABEL_3447:
              v12 = v2336;
              *v2336 = (unsigned __int8 *)(v547 + 4);
              v1223 = 11;
              goto LABEL_2572;
            }
            v700 = v13;
            v848 = (unsigned __int8 *)v547;
            if (v547 < v546)
            {
              v848 = (unsigned __int8 *)v547;
              if ((_DWORD)a4 == 45)
              {
                v848 = (unsigned __int8 *)(v547 + 1);
                *v2336 = (unsigned __int8 *)(v547 + 1);
              }
            }
            if ((unint64_t)v848 < v546)
            {
              v849 = *v848;
              if (v849 == 48)
              {
                v842 = v848 + 1;
                *v2336 = v842;
LABEL_1810:
                if ((unint64_t)v842 >= v546)
                {
LABEL_2365:
                  if ((unint64_t)v842 >= v546 || (*v842 | 0x20) != 0x65)
                  {
LABEL_2367:
                    *v2335 = 6;
                    if ((uint64_t)&v842[-v547] < 0)
                      goto LABEL_3864;
                    v2340.rlim_cur = 0;
                    fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v547, v842, &v2340.rlim_cur, 0x2E00000005);
                    v14.n128_u64[0] = v2340.rlim_cur;
                    goto LABEL_1823;
                  }
                  v2084 = v842 + 1;
                  *v2336 = v842 + 1;
                  if ((unint64_t)(v842 + 1) < v546)
                  {
                    v2085 = *v2084;
                    if (v2085 == 45 || v2085 == 43)
                    {
                      v2084 = v842 + 2;
                      *v2336 = v842 + 2;
                    }
                  }
                  if ((unint64_t)v2084 < v546 && *v2084 - 48 <= 9)
                  {
                    v2086 = v2084 + 1;
                    do
                    {
                      v842 = v2086;
                      *v2336 = v2086;
                      if ((unint64_t)v2086 >= v546)
                        break;
                      ++v2086;
                    }
                    while (*v842 - 48 < 0xA);
                    goto LABEL_2367;
                  }
                  goto LABEL_4168;
                }
                v851 = *v842;
                if (v851 != 46)
                {
                  if (v851 != 69 && v851 != 101 && (uint64_t)&v842[-v547] <= 9)
                  {
                    *v2335 = 6;
                    v844 = *(unsigned __int8 *)v547;
                    if (v844 == 45)
                      v852 = (unsigned __int8 *)(v547 + 1);
                    else
                      v852 = (unsigned __int8 *)v547;
                    if (v852 < v842)
                    {
                      v846 = 0;
                      do
                      {
                        v853 = *v852++;
                        v846 = v853 + 10 * v846 - 48;
                      }
                      while (v852 < v842);
LABEL_1821:
                      if (v844 != 45)
                      {
LABEL_1822:
                        v14.n128_f64[0] = (double)v846;
LABEL_1823:
                        v11 = v2328;
                        *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_1824:
                        v13 = v700;
                        v10 = v2335;
                        v12 = v2336;
LABEL_1825:
                        v8 = a1;
                        goto LABEL_1532;
                      }
                      if (v846)
                      {
                        v14.n128_f64[0] = (double)-v846;
                        goto LABEL_1823;
                      }
                      goto LABEL_2940;
                    }
                    goto LABEL_2158;
                  }
                  goto LABEL_2365;
                }
                *v2336 = v842 + 1;
                if ((unint64_t)(v842 + 1) < v546 && v842[1] - 48 <= 9)
                {
                  v1120 = v842 + 2;
                  do
                  {
                    v842 = v1120;
                    *v2336 = v1120;
                    if ((unint64_t)v1120 >= v546)
                      break;
                    ++v1120;
                  }
                  while (*v842 - 48 < 0xA);
                  goto LABEL_2365;
                }
                goto LABEL_4098;
              }
              if ((v849 - 49) <= 8)
              {
                v850 = v848 + 1;
                do
                {
                  v842 = v850;
                  *v2336 = v850;
                  if ((unint64_t)v850 >= v546)
                    break;
                  ++v850;
                }
                while (*v842 - 48 < 0xA);
                goto LABEL_1810;
              }
            }
LABEL_4063:
            v2006 = WTF::fastCompactMalloc((WTF *)0x20);
            rlim_cur = v2006;
            v14.n128_u64[0] = 0xE00000002;
            v2007 = "Invalid number";
LABEL_4064:
            *(_QWORD *)v2006 = v14.n128_u64[0];
            *(_QWORD *)(v2006 + 8) = v2007;
            *(_DWORD *)(v2006 + 16) = 4;
LABEL_3257:
            v1539 = *(WTF::StringImpl **)v2321;
            *(_QWORD *)v2321 = rlim_cur;
            v13 = v700;
            v11 = v2328;
            v10 = v2335;
            v12 = v2336;
            v8 = a1;
            if (v1539)
            {
              if (*(_DWORD *)v1539 == 2)
              {
                WTF::StringImpl::~StringImpl(v1539, (WTF::AtomStringImpl *)a2, v701, a4, a5, a6, a7, a8);
                WTF::fastFree(v1711, v1712, v1713, v1714, v1715, v1716, v1717, v1718);
              }
              else
              {
                *(_DWORD *)v1539 -= 2;
              }
              v13 = v700;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
            }
            goto LABEL_1532;
          }
          goto LABEL_2738;
        }
        v1105 = v8;
        v1106 = 1;
LABEL_2331:
        JSC::LiteralParser<unsigned char>::setErrorMessageForToken(v1105, v1106);
        return 0;
      }
LABEL_14:
      v21 = *(_QWORD *)(v8 + 48);
      v22 = *(_QWORD *)(v8 + 56);
      if (v21 >= v22)
      {
        v23 = 0;
      }
      else
      {
        v23 = 1;
        if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v21] == 19)
        {
          v314 = *(unsigned __int8 **)(v8 + 56);
          v315 = (unsigned __int8 *)(v21 + 1);
          v316 = ~v21 + v22;
          while (1)
          {
            v317 = v315;
            *v12 = v315;
            if (!v316)
              break;
            ++v315;
            --v316;
            if (JSC::tokenTypesOfLatin1Characters[*v317] != 19)
            {
              v314 = v317;
              break;
            }
          }
          v23 = (unint64_t)v317 < v22;
          v21 = (unint64_t)v314;
        }
      }
      if (v21 == v22)
      {
        v466 = 14;
        goto LABEL_1072;
      }
      *v10 = 18;
      a4 = *(unsigned __int8 *)v21;
      v24 = JSC::tokenTypesOfLatin1Characters[a4];
      if (v24 <= 4)
      {
        if (v24 == 4)
        {
          v25 = *(unsigned __int8 *)(v8 + 40);
          if ((_DWORD)a4 != 39)
          {
            a3 = v21 + 1;
            *v12 = (unsigned __int8 *)(v21 + 1);
            if (!v25)
            {
              v26 = v22 - a3;
              if ((uint64_t)(v22 - a3) < 0)
                goto LABEL_3864;
              v27 = (int8x16_t *)(v26 + v21 + 1);
              if (v26 < 0x10)
              {
                v545 = (int8x16_t *)(v21 + 1);
                if (v22 == a3)
                  goto LABEL_697;
                do
                {
                  if (!JSC::safeStringLatin1CharactersInStrictJSON[v545->u8[0]])
                  {
                    v27 = v545;
                    goto LABEL_697;
                  }
                  v545 = (int8x16_t *)((char *)v545 + 1);
                  --v26;
                }
                while (v26);
                goto LABEL_697;
              }
              v28 = (unsigned __int8 *)(v21 + 16);
              while (1)
              {
                v29 = *(int8x16_t *)(v28 - 15);
                v30.i64[0] = 0x2222222222222222;
                v30.i64[1] = 0x2222222222222222;
                v31 = vceqq_s8(v29, v30);
                v32.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v32.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v33.i64[0] = 0x2020202020202020;
                v33.i64[1] = 0x2020202020202020;
                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v29, v32), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v29)), v31);
                v31.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                if (v31.i32[0])
                  break;
                v28 += 16;
                if (v28 >= (unsigned __int8 *)v27)
                {
                  if (v28 - 15 >= (unsigned __int8 *)v27)
                  {
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    goto LABEL_697;
                  }
                  v334 = (unsigned __int8 *)&v27[-1];
                  v1834 = v27[-1];
                  v1835.i64[0] = 0x2222222222222222;
                  v1835.i64[1] = 0x2222222222222222;
                  v1836 = vceqq_s8(v1834, v1835);
                  v1837.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v1837.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1834, v1837), (int8x16_t)vcgtq_u8(v33, (uint8x16_t)v1834)), v1836);
                  v1836.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  if (!v1836.i32[0])
                  {
LABEL_697:
                    *v12 = (unsigned __int8 *)v27;
                    goto LABEL_698;
                  }
LABEL_696:
                  v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                  v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                  v27 = (int8x16_t *)&v334[v14.n128_u32[0]];
                  goto LABEL_697;
                }
              }
              v334 = v28 - 15;
              goto LABEL_696;
            }
            goto LABEL_775;
          }
          if (*(_BYTE *)(v8 + 40))
          {
            a3 = v21 + 1;
            v10 = v2335;
            v12 = v2336;
            *v2336 = (unsigned __int8 *)(v21 + 1);
            v11 = v2328;
            v8 = a1;
LABEL_775:
            if (a3 >= v22)
            {
              v27 = (int8x16_t *)a3;
              goto LABEL_698;
            }
            v362 = v21 + v22 - a3 + 1;
            v27 = (int8x16_t *)a3;
            while (1)
            {
              v363 = v27->u8[0];
              v364 = v363 < 0x20 || v363 == 92;
              v365 = v364 || v363 == (_DWORD)a4;
              v366 = v365;
              if (v363 != 9 && v366)
                break;
              v27 = (int8x16_t *)((char *)v27 + 1);
              *v12 = (unsigned __int8 *)v27;
              if (v27 == (int8x16_t *)v362)
              {
                v27 = (int8x16_t *)v362;
                break;
              }
            }
LABEL_698:
            if ((unint64_t)v27 < v22 && v27->u8[0] == (_DWORD)a4)
            {
              *(_BYTE *)(v8 + 25) |= 1u;
              *(_QWORD *)(v8 + 32) = a3;
              *(_QWORD *)(v8 + 48) = (char *)v27->i64 + 1;
              *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v27 - a3) & 0x7FFFFFFF;
              *(_BYTE *)(v8 + 24) = 4;
              goto LABEL_32;
            }
            v24 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
            goto LABEL_31;
          }
          v2105 = WTF::fastCompactMalloc((WTF *)0x20);
          v14.n128_u64[0] = 0x2900000002;
          *(_QWORD *)v2105 = 0x2900000002;
          *(_QWORD *)(v2105 + 8) = "Single quotes (') are not allowed in JSON";
          *(_DWORD *)(v2105 + 16) = 4;
          v1620 = *(WTF::StringImpl **)v2321;
          *(_QWORD *)v2321 = v2105;
          v11 = v2328;
          v10 = v2335;
          v12 = v2336;
          v8 = a1;
          if (!v1620)
            goto LABEL_32;
          if (*(_DWORD *)v1620 != 2)
          {
            *(_DWORD *)v1620 -= 2;
            goto LABEL_3334;
          }
          goto LABEL_3689;
        }
LABEL_30:
        *v10 = v24;
        *v12 = (unsigned __int8 *)(v21 + 1);
LABEL_31:
        if (v24 == 1)
        {
          if (v17 == 10)
          {
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x2F00000002;
            v472 = "Unexpected comma at the end of array expression";
            goto LABEL_1080;
          }
          v547 = *(_QWORD *)(v8 + 48);
          v546 = *(_QWORD *)(v8 + 56);
          if (v547 >= v546)
          {
            v548 = 0;
          }
          else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v547] == 19)
          {
            v705 = *(unsigned __int8 **)(v8 + 56);
            v706 = (unsigned __int8 *)(v547 + 1);
            v707 = ~v547 + v546;
            do
            {
              v708 = v706;
              *v12 = v706;
              if (!v707)
                goto LABEL_1537;
              ++v706;
              --v707;
            }
            while (JSC::tokenTypesOfLatin1Characters[*v708] == 19);
            v705 = v708;
LABEL_1537:
            v548 = (unint64_t)v708 < v546;
            v547 = (unint64_t)v705;
          }
          else
          {
            v548 = 1;
          }
          if (v547 != v546)
          {
            *v10 = 18;
            a4 = *(unsigned __int8 *)v547;
            v549 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v549 <= 4)
            {
              if (v549 == 4)
              {
                v550 = *(unsigned __int8 *)(v8 + 40);
                if ((_DWORD)a4 == 39)
                {
                  v700 = v13;
                  if (!*(_BYTE *)(v8 + 40))
                  {
LABEL_4662:
                    v2006 = WTF::fastCompactMalloc((WTF *)0x20);
                    rlim_cur = v2006;
                    v14.n128_u64[0] = 0x2900000002;
                    v2007 = "Single quotes (') are not allowed in JSON";
                    goto LABEL_4064;
                  }
                  v551 = v547 + 1;
                  *v2336 = (unsigned __int8 *)(v547 + 1);
                }
                else
                {
                  v551 = v547 + 1;
                  *v12 = (unsigned __int8 *)(v547 + 1);
                  if (!v550)
                  {
                    v552 = v546 - v551;
                    if ((uint64_t)(v546 - v551) < 0)
                      goto LABEL_3864;
                    v553 = (int8x16_t *)(v552 + v547 + 1);
                    if (v552 < 0x10)
                    {
                      v1348 = (int8x16_t *)(v547 + 1);
                      if (v546 != v551)
                      {
                        while (JSC::safeStringLatin1CharactersInStrictJSON[v1348->u8[0]])
                        {
                          v1348 = (int8x16_t *)((char *)v1348 + 1);
                          if (!--v552)
                            goto LABEL_2907;
                        }
                        goto LABEL_2906;
                      }
                    }
                    else
                    {
                      v554 = (unsigned __int8 *)(v547 + 16);
                      do
                      {
                        v555 = *(int8x16_t *)(v554 - 15);
                        v556.i64[0] = 0x2222222222222222;
                        v556.i64[1] = 0x2222222222222222;
                        v557 = vceqq_s8(v555, v556);
                        v558.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v558.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v559.i64[0] = 0x2020202020202020;
                        v559.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v555, v558), (int8x16_t)vcgtq_u8(v559, (uint8x16_t)v555)), v557);
                        v557.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v557.i32[0])
                          goto LABEL_1454;
                        v554 += 16;
                      }
                      while (v554 < (unsigned __int8 *)v553);
LABEL_1337:
                      if (v554 - 15 < (unsigned __int8 *)v553)
                      {
                        v567 = (unsigned __int8 *)&v553[-1];
                        v568 = v553[-1];
                        v569.i64[0] = 0x2222222222222222;
                        v569.i64[1] = 0x2222222222222222;
                        v570 = vceqq_s8(v568, v569);
                        v571.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v571.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v568, v571), (int8x16_t)vcgtq_u8(v559, (uint8x16_t)v568)), v570);
                        v570.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        v11 = v2328;
                        v10 = v2335;
                        v12 = v2336;
                        v8 = a1;
                        if (!v570.i32[0])
                          goto LABEL_1456;
                        goto LABEL_1455;
                      }
                    }
LABEL_2907:
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    goto LABEL_1456;
                  }
                  v700 = v13;
                }
                if (v551 < v546)
                {
                  v863 = v547 + v546 - v551 + 1;
                  v553 = (int8x16_t *)v551;
                  v12 = v2336;
                  do
                  {
                    v864 = v553->u8[0];
                    v867 = v864 < 0x20 || v864 == 92 || v864 == (_DWORD)a4;
                    if (v864 != 9 && v867)
                      goto LABEL_1872;
                    v553 = (int8x16_t *)((char *)v553 + 1);
                    *v2336 = (unsigned __int8 *)v553;
                  }
                  while (v553 != (int8x16_t *)v863);
LABEL_1871:
                  v553 = (int8x16_t *)v863;
                  goto LABEL_1872;
                }
LABEL_4384:
                v553 = (int8x16_t *)v551;
                v13 = v700;
                v11 = v2328;
                v12 = v2336;
                goto LABEL_1873;
              }
              goto LABEL_1531;
            }
            if (v549 != 6)
            {
              if (v549 != 5)
              {
                if (v549 - 18 >= 2)
                {
LABEL_1531:
                  *v10 = v549;
                  *v12 = (unsigned __int8 *)(v547 + 1);
LABEL_1532:
                  v704 = *(_DWORD *)(v8 + 120) - 1;
                  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * v704);
                  *(_DWORD *)(v8 + 120) = v704;
                  goto LABEL_740;
                }
                v700 = v13;
                WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                rlim_cur = v2340.rlim_cur;
                if (!v2340.rlim_cur)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198AFD7BCLL);
                }
LABEL_3256:
                *(_QWORD *)rlim_cur = 0x1600000002;
                *(_QWORD *)(rlim_cur + 8) = rlim_cur + 20;
                *(_DWORD *)(rlim_cur + 16) = 4;
                *(_DWORD *)(rlim_cur + 36) = 656436837;
                v14 = *(__n128 *)"Unrecognized token '";
                *(_OWORD *)(rlim_cur + 20) = *(_OWORD *)"Unrecognized token '";
                *(_BYTE *)(rlim_cur + 40) = *(_BYTE *)v547;
                *(_BYTE *)(rlim_cur + 41) = 39;
                goto LABEL_3257;
              }
              if ((_DWORD)a4 == 110)
              {
                if ((uint64_t)(v546 - v547) >= 4 && *(_WORD *)(v547 + 1) == 27765 && *(_BYTE *)(v547 + 3) == 108)
                  goto LABEL_2571;
              }
              else if ((_DWORD)a4 == 102)
              {
                if ((uint64_t)(v546 - v547) >= 5 && *(_WORD *)(v547 + 1) == 27745 && *(_WORD *)(v547 + 3) == 25971)
                  goto LABEL_2766;
              }
              else if ((_DWORD)a4 == 116
                     && (uint64_t)(v546 - v547) >= 4
                     && *(_WORD *)(v547 + 1) == 30066
                     && *(_BYTE *)(v547 + 3) == 101)
              {
                goto LABEL_3447;
              }
              v1672 = v547;
              *v2328 = (WTF::AtomStringImpl *)v547;
              v1673 = v547;
              if (v547 < v546)
              {
                v1674 = v546 - v547;
                v1675 = v547 + v1674;
                do
                {
                  v1676 = *(unsigned __int8 *)v547;
                  if (v1676 != 36)
                  {
                    v1677 = v1676 != 95 && (v1676 - 48) >= 0xA;
                    if (v1677 && (v1676 | 0x20u) - 97 > 0x19)
                      goto LABEL_3629;
                  }
                  *v2336 = (unsigned __int8 *)++v547;
                  --v1674;
                }
                while (v1674);
LABEL_3628:
                LODWORD(v547) = v1675;
                goto LABEL_3629;
              }
LABEL_3630:
              v8 = a1;
              v10 = v2335;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1673 - v1672) & 0x7FFFFFFF;
              *(_BYTE *)(a1 + 24) = 5;
              v11 = v2328;
              v12 = v2336;
              goto LABEL_1532;
            }
            v700 = v13;
            v838 = (_DWORD)a4 != 45 || !v548;
            v839 = (unsigned __int8 *)v547;
            if ((v838 & 1) == 0)
            {
              v839 = (unsigned __int8 *)(v547 + 1);
              *v2336 = (unsigned __int8 *)(v547 + 1);
            }
            if ((unint64_t)v839 >= v546)
              goto LABEL_4063;
            v840 = *v839;
            if (v840 == 48)
            {
              v842 = v839 + 1;
              *v2336 = v842;
            }
            else
            {
              if ((v840 - 49) > 8)
                goto LABEL_4063;
              v841 = v839 + 1;
              do
              {
                v842 = v841;
                *v2336 = v841;
                if ((unint64_t)v841 >= v546)
                  break;
                ++v841;
              }
              while (*v842 - 48 < 0xA);
            }
            if ((unint64_t)v842 < v546)
            {
              v843 = *v842;
              if (v843 == 46)
              {
                *v2336 = v842 + 1;
                if ((unint64_t)(v842 + 1) >= v546 || v842[1] - 48 > 9)
                {
LABEL_4098:
                  v2006 = WTF::fastCompactMalloc((WTF *)0x20);
                  rlim_cur = v2006;
                  v14.n128_u64[0] = 0x2200000002;
                  v2007 = "Invalid digits after decimal point";
                  goto LABEL_4064;
                }
                v1116 = v842 + 2;
                do
                {
                  v842 = v1116;
                  *v2336 = v1116;
                  if ((unint64_t)v1116 >= v546)
                    break;
                  ++v1116;
                }
                while (*v842 - 48 < 0xA);
              }
              else if (v843 != 69 && v843 != 101 && (uint64_t)&v842[-v547] <= 9)
              {
                *v2335 = 6;
                v844 = *(unsigned __int8 *)v547;
                if (v844 == 45)
                  v845 = (unsigned __int8 *)(v547 + 1);
                else
                  v845 = (unsigned __int8 *)v547;
                if (v845 < v842)
                {
                  v846 = 0;
                  do
                  {
                    v847 = *v845++;
                    v846 = v847 + 10 * v846 - 48;
                  }
                  while (v845 < v842);
                  goto LABEL_1821;
                }
LABEL_2158:
                if (v844 != 45)
                {
                  v846 = 0;
                  goto LABEL_1822;
                }
LABEL_2940:
                v11 = v2328;
                *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                goto LABEL_1824;
              }
            }
            if ((unint64_t)v842 >= v546 || (*v842 | 0x20) != 0x65)
              goto LABEL_2367;
            v1117 = v842 + 1;
            *v2336 = v842 + 1;
            if ((unint64_t)(v842 + 1) < v546)
            {
              v1118 = *v1117;
              if (v1118 == 45 || v1118 == 43)
              {
                v1117 = v842 + 2;
                *v2336 = v842 + 2;
              }
            }
            if ((unint64_t)v1117 < v546 && *v1117 - 48 <= 9)
            {
              v1119 = v1117 + 1;
              do
              {
                v842 = v1119;
                *v2336 = v1119;
                if ((unint64_t)v1119 >= v546)
                  break;
                ++v1119;
              }
              while (*v842 - 48 < 0xA);
              goto LABEL_2367;
            }
LABEL_4168:
            v2006 = WTF::fastCompactMalloc((WTF *)0x20);
            rlim_cur = v2006;
            v14.n128_u64[0] = 0x5D00000002;
            v2007 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_4064;
          }
LABEL_2738:
          *v10 = 14;
          goto LABEL_1532;
        }
LABEL_32:
        LOBYTE(v2340.rlim_cur) = 8;
        v34 = *(unsigned int *)(v8 + 220);
        if ((_DWORD)v34 != *(_DWORD *)(v8 + 216))
        {
          *(_BYTE *)(*(_QWORD *)(v8 + 208) + v34) = 8;
          *(_DWORD *)(v8 + 220) = v34 + 1;
          goto LABEL_34;
        }
LABEL_2612:
        WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(v2320, (unint64_t)&v2340);
        goto LABEL_34;
      }
      if (v24 != 6)
      {
        if (v24 != 5)
        {
          if (v24 - 18 < 2)
          {
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>((uint64_t)&v2340, "Unrecognized token '", 21, (_BYTE *)v21, 1uLL, 39);
            if (!v2340.rlim_cur)
            {
              __break(0xC471u);
              JUMPOUT(0x198B05A04);
            }
            v768 = *(WTF::StringImpl **)v2321;
            *(_QWORD *)v2321 = v2340.rlim_cur;
            if (v768)
            {
              if (*(_DWORD *)v768 == 2)
              {
                WTF::StringImpl::~StringImpl(v768, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1029, v1030, v1031, v1032, v1033, v1034, v1035, v1036);
              }
              else
              {
                *(_DWORD *)v768 -= 2;
              }
            }
            goto LABEL_32;
          }
          goto LABEL_30;
        }
        switch((_DWORD)a4)
        {
          case 'n':
            v465 = v21;
            if ((uint64_t)(v22 - v21) >= 4)
            {
              v465 = v21;
              if (*(_WORD *)(v21 + 1) == 27765)
              {
                v465 = v21;
                if (*(_BYTE *)(v21 + 3) == 108)
                {
                  *v12 = (unsigned __int8 *)(v21 + 4);
                  v466 = 13;
LABEL_1072:
                  *v10 = v466;
                  goto LABEL_32;
                }
              }
            }
            break;
          case 'f':
            v465 = v21;
            if ((uint64_t)(v22 - v21) >= 5)
            {
              v465 = v21;
              if (*(_WORD *)(v21 + 1) == 27745)
              {
                v465 = v21;
                if (*(_WORD *)(v21 + 3) == 25971)
                {
                  *v12 = (unsigned __int8 *)(v21 + 5);
                  v466 = 12;
                  goto LABEL_1072;
                }
              }
            }
            break;
          case 't':
            v465 = v21;
            if ((uint64_t)(v22 - v21) >= 4)
            {
              v465 = v21;
              if (*(_WORD *)(v21 + 1) == 30066)
              {
                v465 = v21;
                if (*(_BYTE *)(v21 + 3) == 101)
                {
                  *v12 = (unsigned __int8 *)(v21 + 4);
                  v466 = 11;
                  goto LABEL_1072;
                }
              }
            }
            break;
          default:
            v465 = v21;
            break;
        }
        *v11 = (WTF::AtomStringImpl *)v21;
        v1643 = v465;
        if (v21 < v22)
        {
          v1644 = v22 - v465;
          v1645 = v21 + v1644;
          while (1)
          {
            v1646 = *(unsigned __int8 *)v21;
            if (v1646 != 36)
            {
              v1647 = v1646 != 95 && (v1646 - 48) >= 0xA;
              if (v1647 && (v1646 | 0x20u) - 97 > 0x19)
                break;
            }
            *v2336 = (unsigned __int8 *)++v21;
            if (!--v1644)
            {
              LODWORD(v21) = v1645;
              break;
            }
          }
          v1643 = v21;
        }
        v8 = a1;
        v10 = v2335;
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1643 - v465) & 0x7FFFFFFF;
        *(_BYTE *)(a1 + 24) = 5;
        v11 = v2328;
        v12 = v2336;
        goto LABEL_32;
      }
      v345 = !v23;
      if ((_DWORD)a4 == 45)
        v346 = v345;
      else
        v346 = 1;
      v347 = (unsigned __int8 *)v21;
      if ((v346 & 1) == 0)
      {
        v347 = (unsigned __int8 *)(v21 + 1);
        *v12 = (unsigned __int8 *)(v21 + 1);
      }
      if ((unint64_t)v347 < v22)
      {
        v348 = *v347;
        if (v348 == 48)
        {
          v336 = v347 + 1;
          *v12 = v336;
LABEL_755:
          if ((unint64_t)v336 >= v22)
            goto LABEL_923;
          v350 = *v336;
          if (v350 != 46)
          {
            if (v350 != 69 && v350 != 101 && (uint64_t)&v336[-v21] <= 9)
            {
              *v10 = 6;
              v331 = (unsigned __int8 *)(v21 + 1);
              v351 = *(unsigned __int8 *)v21;
              if (v351 != 45)
                v331 = (unsigned __int8 *)v21;
              if (v331 < v336)
              {
                v333 = 0;
                do
                {
                  v332 = *v331++;
                  v333 = v332 + 10 * v333 - 48;
                }
                while (v331 < v336);
                if (v351 == 45)
                {
                  if (!v333)
                  {
LABEL_944:
                    *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                    goto LABEL_32;
                  }
                  v333 = -v333;
                }
              }
              else
              {
                v333 = 0;
                if (v351 == 45)
                  goto LABEL_944;
              }
              v14.n128_f64[0] = (double)v333;
LABEL_791:
              *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
              goto LABEL_32;
            }
LABEL_923:
            if ((unint64_t)v336 < v22 && (*v336 | 0x20) == 0x65)
            {
              v1540 = v13;
              v1541 = v336 + 1;
              *v12 = v336 + 1;
              if ((unint64_t)(v336 + 1) < v22)
              {
                v1542 = *v1541;
                if (v1542 == 45 || v1542 == 43)
                {
                  v1541 = v336 + 2;
                  *v2336 = v336 + 2;
                }
              }
              if ((unint64_t)v1541 >= v22 || *v1541 - 48 > 9)
              {
                v1619 = WTF::fastCompactMalloc((WTF *)0x20);
                v14.n128_u64[0] = 0x5D00000002;
                *(_QWORD *)v1619 = 0x5D00000002;
                *(_QWORD *)(v1619 + 8) = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                *(_DWORD *)(v1619 + 16) = 4;
                v1620 = *(WTF::StringImpl **)v2321;
                *(_QWORD *)v2321 = v1619;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                if (!v1620)
                  goto LABEL_32;
                if (*(_DWORD *)v1620 != 2)
                {
                  *(_DWORD *)v1620 -= 2;
LABEL_3334:
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  goto LABEL_32;
                }
LABEL_3689:
                WTF::StringImpl::~StringImpl(v1620, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1838, v1839, v1840, v1841, v1842, v1843, v1844, v1845);
                goto LABEL_3334;
              }
              v1543 = v1541 + 1;
              v12 = v2336;
              while (1)
              {
                v336 = v1543;
                *v12 = v1543;
                if ((unint64_t)v1543 >= v22)
                  break;
                ++v1543;
                v13 = v1540;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                if (*v336 - 48 >= 0xA)
                  goto LABEL_925;
              }
              v13 = v1540;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
            }
LABEL_925:
            *v10 = 6;
            if ((uint64_t)&v336[-v21] < 0)
              goto LABEL_3864;
            v2340.rlim_cur = 0;
            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v21, v336, &v2340.rlim_cur, 0x2E00000005);
            v14.n128_u64[0] = v2340.rlim_cur;
            goto LABEL_791;
          }
          *v12 = v336 + 1;
          if ((unint64_t)(v336 + 1) < v22 && v336[1] - 48 <= 9)
          {
            v337 = v336 + 2;
            do
            {
              v336 = v337;
              *v12 = v337;
              if ((unint64_t)v337 >= v22)
                break;
              ++v337;
            }
            while (*v336 - 48 < 0xA);
            goto LABEL_923;
          }
          v1507 = WTF::fastCompactMalloc((WTF *)0x20);
          v1508 = v1507;
          v14.n128_u64[0] = 0x2200000002;
          v1509 = "Invalid digits after decimal point";
LABEL_3178:
          *(_QWORD *)v1507 = v14.n128_u64[0];
          *(_QWORD *)(v1507 + 8) = v1509;
          *(_DWORD *)(v1507 + 16) = 4;
          v1510 = *(WTF::StringImpl **)v2321;
          *(_QWORD *)v2321 = v1508;
          if (v1510)
          {
            if (*(_DWORD *)v1510 == 2)
            {
              WTF::StringImpl::~StringImpl(v1510, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v1683, v1684, v1685, v1686, v1687, v1688, v1689, v1690);
            }
            else
            {
              *(_DWORD *)v1510 -= 2;
            }
            v11 = v2328;
            v10 = v2335;
            v12 = v2336;
            v8 = a1;
          }
          goto LABEL_32;
        }
        if ((v348 - 49) <= 8)
        {
          v349 = v347 + 1;
          do
          {
            v336 = v349;
            *v12 = v349;
            if ((unint64_t)v349 >= v22)
              break;
            ++v349;
          }
          while (*v336 - 48 < 0xA);
          goto LABEL_755;
        }
      }
      v1507 = WTF::fastCompactMalloc((WTF *)0x20);
      v1508 = v1507;
      v14.n128_u64[0] = 0xE00000002;
      v1509 = "Invalid number";
      goto LABEL_3178;
    }
    switch((char)a3)
    {
      case 0:
        goto LABEL_35;
      case 1:
        goto LABEL_947;
      case 2:
        goto LABEL_34;
      case 3:
        if (*v10 == 5)
        {
          v469 = WTF::fastCompactMalloc((WTF *)0x20);
          v470 = v469;
          v471 = 0x1500000002;
          v472 = "Unexpected identifier";
          goto LABEL_1080;
        }
        switch(*v10)
        {
          case 0:
LABEL_2667:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x2000000002;
            v472 = "Could not parse value expression";
            goto LABEL_1080;
          case 1:
LABEL_2666:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token ']'";
            goto LABEL_1080;
          case 2:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token '{'";
            goto LABEL_1080;
          case 3:
LABEL_2665:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token '}'";
            goto LABEL_1080;
          case 4:
            v1267 = *(_DWORD *)(v8 + 28);
            v1268 = v1267 & 0x7FFFFFFF;
            if ((*(_BYTE *)(v8 + 25) & 1) != 0)
            {
              if ((v1267 & 0x7FFFFFFFu) < 0xB)
              {
                v1269 = v2333;
                JSC::Identifier::fromString((uint64_t)v2333, *v2328, v1268, a4, a5, a6, a7, a8, &v2340.rlim_cur);
LABEL_2696:
                v1276 = JSC::jsString(v1269, (JSC::VM *)&v2340, v1270, v1271, v1272, v1273, v1274, v1275);
                goto LABEL_2697;
              }
              WTF::String::String((uint64_t *)&v2340, *v2328, v1268);
            }
            else
            {
              if ((v1267 & 0x7FFFFFFFu) < 0xB)
              {
                v1269 = v2333;
                JSC::Identifier::fromString((uint64_t)v2333, *v2328, v1268, a4, a5, a6, a7, a8, &v2340);
                goto LABEL_2696;
              }
              WTF::String::String((int **)&v2340, *v2328, v1268);
            }
            v1276 = JSC::jsNontrivialString((uint64_t)v2333, (JSC::VM *)&v2340, v1352, v1353, v1354, v1355, v1356, v1357);
LABEL_2697:
            v9 = v1276;
            v1278 = (WTF::StringImpl *)v2340.rlim_cur;
            v2340.rlim_cur = 0;
            if (v1278)
            {
              if (*(_DWORD *)v1278 == 2)
              {
                WTF::StringImpl::~StringImpl(v1278, (WTF::AtomStringImpl *)a2, v1277, a4, a5, a6, a7, a8);
                WTF::fastFree(v1432, v1433, v1434, v1435, v1436, v1437, v1438, v1439);
              }
              else
              {
                *(_DWORD *)v1278 -= 2;
              }
            }
            v649 = *(_QWORD *)(a1 + 48);
            v1254 = *(_QWORD *)(a1 + 56);
            if (v649 < v1254)
            {
              v1279 = v1254 - v649;
              do
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v649] != 19)
                  goto LABEL_2705;
                *v2336 = (unsigned __int8 *)++v649;
                --v1279;
              }
              while (v1279);
              v649 = v1254;
            }
LABEL_2705:
            if (v649 == v1254)
            {
LABEL_3868:
              v1901 = 14;
              goto LABEL_3793;
            }
            *v2335 = 18;
            a4 = *(unsigned __int8 *)v649;
            v1256 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v1256 <= 4)
            {
              if (v1256 == 4)
              {
                v1280 = *(unsigned __int8 *)(a1 + 40);
                if ((_DWORD)a4 != 39)
                {
                  v1258 = v649 + 1;
                  *v2336 = (unsigned __int8 *)(v649 + 1);
                  if (!v1280)
                  {
                    v1281 = v1254 - v1258;
                    if ((uint64_t)(v1254 - v1258) < 0)
                      goto LABEL_3864;
                    v1260 = (int8x16_t *)(v1281 + v649 + 1);
                    if (v1281 >= 0x10)
                    {
                      v1261 = (unsigned __int8 *)(v649 + 16);
                      while (1)
                      {
                        v1282 = *(int8x16_t *)(v1261 - 15);
                        v1283.i64[0] = 0x2222222222222222;
                        v1283.i64[1] = 0x2222222222222222;
                        v1284 = vceqq_s8(v1282, v1283);
                        v1285.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v1285.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v1266.i64[0] = 0x2020202020202020;
                        v1266.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1282, v1285), (int8x16_t)vcgtq_u8(v1266, (uint8x16_t)v1282)), v1284);
                        v1284.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v1284.i32[0])
                          break;
                        v1261 += 16;
                        if (v1261 >= (unsigned __int8 *)v1260)
                          goto LABEL_2715;
                      }
LABEL_2846:
                      v1286 = v1261 - 15;
LABEL_2847:
                      v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                      v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                      v1260 = (int8x16_t *)&v1286[v14.n128_u32[0]];
LABEL_2848:
                      *v2336 = (unsigned __int8 *)v1260;
                      goto LABEL_2849;
                    }
                    v1956 = (int8x16_t *)(v649 + 1);
                    if (v1254 == v1258)
                      goto LABEL_2848;
                    while (JSC::safeStringLatin1CharactersInStrictJSON[v1956->u8[0]])
                    {
                      v1956 = (int8x16_t *)((char *)v1956 + 1);
                      if (!--v1281)
                        goto LABEL_2848;
                    }
                    goto LABEL_3933;
                  }
                  goto LABEL_4647;
                }
                if (*(_BYTE *)(a1 + 40))
                {
                  v1258 = v649 + 1;
                  *v2336 = (unsigned __int8 *)(v649 + 1);
LABEL_4647:
                  if (v1258 < v1254)
                  {
                    v2274 = v649 + v1254 - v1258 + 1;
                    v1260 = (int8x16_t *)v1258;
                    while (1)
                    {
                      v2279 = v1260->u8[0];
                      v2280 = v2279 < 0x20 || v2279 == 92;
                      v2281 = v2280 || v2279 == (_DWORD)a4;
                      v2282 = v2281;
                      if (v2279 != 9 && v2282)
                        goto LABEL_2849;
                      v1260 = (int8x16_t *)((char *)v1260 + 1);
                      *v2336 = (unsigned __int8 *)v1260;
                      if (v1260 == (int8x16_t *)v2274)
                        goto LABEL_4661;
                    }
                  }
                  goto LABEL_4674;
                }
LABEL_4688:
                v2103 = WTF::fastCompactMalloc((WTF *)0x20);
                v1333 = v2103;
                v14.n128_u64[0] = 0x2900000002;
                v2104 = "Single quotes (') are not allowed in JSON";
                goto LABEL_4202;
              }
              goto LABEL_2867;
            }
            if (v1256 != 6)
            {
              if (v1256 != 5)
              {
                if (v1256 - 18 < 2)
                {
                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                  v1333 = v2340.rlim_cur;
                  if (!v2340.rlim_cur)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198B064F4);
                  }
                  goto LABEL_3449;
                }
                goto LABEL_2867;
              }
              if ((_DWORD)a4 == 110)
              {
                if ((uint64_t)(v1254 - v649) >= 4 && *(_WORD *)(v649 + 1) == 27765 && *(_BYTE *)(v649 + 3) == 108)
                {
LABEL_3792:
                  *v2336 = (unsigned __int8 *)(v649 + 4);
                  v1901 = 13;
LABEL_3793:
                  *v2335 = v1901;
                  goto LABEL_2869;
                }
LABEL_4207:
                v2048 = v649;
                *v2328 = (WTF::AtomStringImpl *)v649;
                v2049 = v649;
                if (v649 < v1254)
                {
                  v2106 = v1254 - v649;
                  v2051 = v649 + v2106;
                  while (1)
                  {
                    v2107 = *(unsigned __int8 *)v649;
                    if (v2107 != 36)
                    {
                      v2108 = v2107 != 95 && (v2107 - 48) >= 0xA;
                      if (v2108 && (v2107 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    *v2336 = (unsigned __int8 *)++v649;
                    if (!--v2106)
                      goto LABEL_4218;
                  }
LABEL_4219:
                  v2049 = v649;
                  goto LABEL_4220;
                }
                goto LABEL_4220;
              }
              if ((_DWORD)a4 == 102)
              {
                if ((uint64_t)(v1254 - v649) < 5 || *(_WORD *)(v649 + 1) != 27745 || *(_WORD *)(v649 + 3) != 25971)
                  goto LABEL_4207;
LABEL_3898:
                *v2336 = (unsigned __int8 *)(v649 + 5);
                v1901 = 12;
                goto LABEL_3793;
              }
              if ((_DWORD)a4 != 116
                || (uint64_t)(v1254 - v649) < 4
                || *(_WORD *)(v649 + 1) != 30066
                || *(_BYTE *)(v649 + 3) != 101)
              {
                goto LABEL_4207;
              }
LABEL_4130:
              *v2336 = (unsigned __int8 *)(v649 + 4);
              v1901 = 11;
              goto LABEL_3793;
            }
            v1474 = (unsigned __int8 *)v649;
            if (v649 < v1254)
            {
              v1474 = (unsigned __int8 *)v649;
              if ((_DWORD)a4 == 45)
              {
                v1474 = (unsigned __int8 *)(v649 + 1);
                *v2336 = (unsigned __int8 *)(v649 + 1);
              }
            }
            if ((unint64_t)v1474 >= v1254)
              goto LABEL_4201;
            v1475 = *v1474;
            if (v1475 == 48)
            {
              v1468 = v1474 + 1;
              *v2336 = v1468;
LABEL_3141:
              if ((unint64_t)v1468 >= v1254)
              {
LABEL_3570:
                if ((unint64_t)v1468 >= v1254 || (*v1468 | 0x20) != 0x65)
                {
LABEL_3572:
                  *v2335 = 6;
                  if ((uint64_t)&v1468[-v649] < 0)
                    goto LABEL_3864;
                  v2340.rlim_cur = 0;
                  fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v649, v1468, &v2340.rlim_cur, 0x2E00000005);
                  v14.n128_u64[0] = v2340.rlim_cur;
                  goto LABEL_3154;
                }
                v2271 = v1468 + 1;
                *v2336 = v1468 + 1;
                if ((unint64_t)(v1468 + 1) < v1254)
                {
                  v2272 = *v2271;
                  if (v2272 == 45 || v2272 == 43)
                  {
                    v2271 = v1468 + 2;
                    *v2336 = v1468 + 2;
                  }
                }
                if ((unint64_t)v2271 < v1254 && *v2271 - 48 <= 9)
                {
                  v2273 = v2271 + 1;
                  do
                  {
                    v1468 = v2273;
                    *v2336 = v2273;
                    if ((unint64_t)v2273 >= v1254)
                      break;
                    ++v2273;
                  }
                  while (*v1468 - 48 < 0xA);
                  goto LABEL_3572;
                }
LABEL_4627:
                v2103 = WTF::fastCompactMalloc((WTF *)0x20);
                v1333 = v2103;
                v14.n128_u64[0] = 0x5D00000002;
                v2104 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                goto LABEL_4202;
              }
              v1477 = *v1468;
              if (v1477 != 46)
              {
                if (v1477 != 69 && v1477 != 101 && (uint64_t)&v1468[-v649] <= 9)
                {
                  *v2335 = 6;
                  v1470 = *(unsigned __int8 *)v649;
                  if (v1470 == 45)
                    v1478 = (unsigned __int8 *)(v649 + 1);
                  else
                    v1478 = (unsigned __int8 *)v649;
                  if (v1478 < v1468)
                  {
                    v1472 = 0;
                    do
                    {
                      v1479 = *v1478++;
                      v1472 = v1479 + 10 * v1472 - 48;
                    }
                    while (v1478 < v1468);
LABEL_3152:
                    if (v1470 != 45)
                    {
LABEL_3153:
                      v14.n128_f64[0] = (double)v1472;
LABEL_3154:
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                      goto LABEL_2869;
                    }
                    if (v1472)
                    {
                      v14.n128_f64[0] = (double)-v1472;
                      goto LABEL_3154;
                    }
                    goto LABEL_3959;
                  }
                  goto LABEL_3365;
                }
                goto LABEL_3570;
              }
              *v2336 = v1468 + 1;
              if ((unint64_t)(v1468 + 1) < v1254 && v1468[1] - 48 <= 9)
              {
                v1754 = v1468 + 2;
                do
                {
                  v1468 = v1754;
                  *v2336 = v1754;
                  if ((unint64_t)v1754 >= v1254)
                    break;
                  ++v1754;
                }
                while (*v1468 - 48 < 0xA);
                goto LABEL_3570;
              }
LABEL_4270:
              v2103 = WTF::fastCompactMalloc((WTF *)0x20);
              v1333 = v2103;
              v14.n128_u64[0] = 0x2200000002;
              v2104 = "Invalid digits after decimal point";
              goto LABEL_4202;
            }
            if ((v1475 - 49) <= 8)
            {
              v1476 = v1474 + 1;
              do
              {
                v1468 = v1476;
                *v2336 = v1476;
                if ((unint64_t)v1476 >= v1254)
                  break;
                ++v1476;
              }
              while (*v1468 - 48 < 0xA);
              goto LABEL_3141;
            }
            goto LABEL_4201;
          case 6:
            v14.n128_u64[0] = (unint64_t)*v11;
            if (((unint64_t)*v11 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v1253 = (int)v14.n128_f64[0], v14.n128_f64[0] == (double)(int)v1253)
              && ((_DWORD)v1253 || (v14.n128_u64[0] & 0x8000000000000000) == 0))
            {
              v9 = v1253 | 0xFFFE000000000000;
            }
            else
            {
              v9 = v14.n128_u64[0] + 0x2000000000000;
            }
            v649 = *(_QWORD *)(a1 + 48);
            v1254 = *(_QWORD *)(a1 + 56);
            if (v649 >= v1254)
              goto LABEL_2682;
            v1255 = v1254 - v649;
            do
            {
              if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v649] != 19)
                goto LABEL_2682;
              *v2336 = (unsigned __int8 *)++v649;
              --v1255;
            }
            while (v1255);
            v649 = v1254;
LABEL_2682:
            if (v649 == v1254)
              goto LABEL_3868;
            *v2335 = 18;
            a4 = *(unsigned __int8 *)v649;
            v1256 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v1256 <= 4)
            {
              if (v1256 == 4)
              {
                v1257 = *(unsigned __int8 *)(a1 + 40);
                if ((_DWORD)a4 == 39)
                {
                  if (!*(_BYTE *)(a1 + 40))
                    goto LABEL_4688;
                  v1258 = v649 + 1;
                  *v2336 = (unsigned __int8 *)(v649 + 1);
                }
                else
                {
                  v1258 = v649 + 1;
                  *v2336 = (unsigned __int8 *)(v649 + 1);
                  if (!v1257)
                  {
                    v1259 = v1254 - v1258;
                    if ((uint64_t)(v1254 - v1258) < 0)
                      goto LABEL_3864;
                    v1260 = (int8x16_t *)(v1259 + v649 + 1);
                    if (v1259 >= 0x10)
                    {
                      v1261 = (unsigned __int8 *)(v649 + 16);
                      do
                      {
                        v1262 = *(int8x16_t *)(v1261 - 15);
                        v1263.i64[0] = 0x2222222222222222;
                        v1263.i64[1] = 0x2222222222222222;
                        v1264 = vceqq_s8(v1262, v1263);
                        v1265.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v1265.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v1266.i64[0] = 0x2020202020202020;
                        v1266.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1262, v1265), (int8x16_t)vcgtq_u8(v1266, (uint8x16_t)v1262)), v1264);
                        v1264.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v1264.i32[0])
                          goto LABEL_2846;
                        v1261 += 16;
                      }
                      while (v1261 < (unsigned __int8 *)v1260);
LABEL_2715:
                      if (v1261 - 15 >= (unsigned __int8 *)v1260)
                        goto LABEL_2848;
                      v1286 = (unsigned __int8 *)&v1260[-1];
                      v1287 = v1260[-1];
                      v1288.i64[0] = 0x2222222222222222;
                      v1288.i64[1] = 0x2222222222222222;
                      v1289 = vceqq_s8(v1287, v1288);
                      v1290.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v1290.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1287, v1290), (int8x16_t)vcgtq_u8(v1266, (uint8x16_t)v1287)), v1289);
                      v1289.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                      if (!v1289.i32[0])
                        goto LABEL_2848;
                      goto LABEL_2847;
                    }
                    v1956 = (int8x16_t *)(v649 + 1);
                    if (v1254 == v1258)
                      goto LABEL_2848;
                    while (JSC::safeStringLatin1CharactersInStrictJSON[v1956->u8[0]])
                    {
                      v1956 = (int8x16_t *)((char *)v1956 + 1);
                      if (!--v1259)
                        goto LABEL_2848;
                    }
LABEL_3933:
                    v1260 = v1956;
                    goto LABEL_2848;
                  }
                }
                if (v1258 < v1254)
                {
                  v2274 = v649 + v1254 - v1258 + 1;
                  v1260 = (int8x16_t *)v1258;
                  do
                  {
                    v2275 = v1260->u8[0];
                    v2278 = v2275 < 0x20 || v2275 == 92 || v2275 == (_DWORD)a4;
                    if (v2275 != 9 && v2278)
                      goto LABEL_2849;
                    v1260 = (int8x16_t *)((char *)v1260 + 1);
                    *v2336 = (unsigned __int8 *)v1260;
                  }
                  while (v1260 != (int8x16_t *)v2274);
LABEL_4661:
                  v1260 = (int8x16_t *)v2274;
                  goto LABEL_2849;
                }
LABEL_4674:
                v1260 = (int8x16_t *)v1258;
LABEL_2849:
                if ((unint64_t)v1260 >= v1254 || v1260->u8[0] != (_DWORD)a4)
                {
                  JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v1258, a4, a5, a6, a7, a8);
                  goto LABEL_2869;
                }
                v1330 = a1;
                *(_BYTE *)(a1 + 25) |= 1u;
                *(_QWORD *)(a1 + 32) = v1258;
                *(_QWORD *)(a1 + 48) = (char *)v1260->i64 + 1;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v1260 - v1258) & 0x7FFFFFFF;
                v1331 = 4;
                goto LABEL_2852;
              }
              goto LABEL_2867;
            }
            if (v1256 != 6)
            {
              if (v1256 != 5)
              {
                if (v1256 - 18 < 2)
                {
                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                  v1333 = v2340.rlim_cur;
                  if (!v2340.rlim_cur)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198B01F3CLL);
                  }
                  goto LABEL_3449;
                }
LABEL_2867:
                *v2335 = v1256;
                v1334 = v649 + 1;
                v1335 = v2336;
LABEL_2868:
                *v1335 = v1334;
                goto LABEL_2869;
              }
              if ((_DWORD)a4 == 110)
              {
                if ((uint64_t)(v1254 - v649) >= 4 && *(_WORD *)(v649 + 1) == 27765 && *(_BYTE *)(v649 + 3) == 108)
                  goto LABEL_3792;
              }
              else if ((_DWORD)a4 == 102)
              {
                if ((uint64_t)(v1254 - v649) >= 5 && *(_WORD *)(v649 + 1) == 27745 && *(_WORD *)(v649 + 3) == 25971)
                  goto LABEL_3898;
              }
              else if ((_DWORD)a4 == 116
                     && (uint64_t)(v1254 - v649) >= 4
                     && *(_WORD *)(v649 + 1) == 30066
                     && *(_BYTE *)(v649 + 3) == 101)
              {
                goto LABEL_4130;
              }
              v2048 = v649;
              *v2328 = (WTF::AtomStringImpl *)v649;
              v2049 = v649;
              if (v649 < v1254)
              {
                v2050 = v1254 - v649;
                v2051 = v649 + v2050;
                do
                {
                  v2052 = *(unsigned __int8 *)v649;
                  if (v2052 != 36)
                  {
                    v2053 = v2052 != 95 && (v2052 - 48) >= 0xA;
                    if (v2053 && (v2052 | 0x20u) - 97 > 0x19)
                      goto LABEL_4219;
                  }
                  *v2336 = (unsigned __int8 *)++v649;
                  --v2050;
                }
                while (v2050);
LABEL_4218:
                LODWORD(v649) = v2051;
                goto LABEL_4219;
              }
LABEL_4220:
              v2110 = v2049 - v2048;
              v1330 = a1;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | v2110 & 0x7FFFFFFF;
              v1331 = 5;
LABEL_2852:
              *(_BYTE *)(v1330 + 24) = v1331;
LABEL_2869:
              v11 = v2328;
              goto LABEL_2121;
            }
            v1465 = (unsigned __int8 *)v649;
            if (v649 < v1254)
            {
              v1465 = (unsigned __int8 *)v649;
              if ((_DWORD)a4 == 45)
              {
                v1465 = (unsigned __int8 *)(v649 + 1);
                *v2336 = (unsigned __int8 *)(v649 + 1);
              }
            }
            if ((unint64_t)v1465 >= v1254)
              goto LABEL_4201;
            v1466 = *v1465;
            if (v1466 == 48)
            {
              v1468 = v1465 + 1;
              *v2336 = v1468;
            }
            else
            {
              if ((v1466 - 49) > 8)
              {
LABEL_4201:
                v2103 = WTF::fastCompactMalloc((WTF *)0x20);
                v1333 = v2103;
                v14.n128_u64[0] = 0xE00000002;
                v2104 = "Invalid number";
LABEL_4202:
                *(_QWORD *)v2103 = v14.n128_u64[0];
                *(_QWORD *)(v2103 + 8) = v2104;
                *(_DWORD *)(v2103 + 16) = 4;
LABEL_3450:
                v1682 = *(WTF::StringImpl **)v2321;
                *(_QWORD *)v2321 = v1333;
                if (v1682)
                {
                  if (*(_DWORD *)v1682 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1682, (WTF::AtomStringImpl *)a2, v1332, a4, a5, a6, a7, a8);
                    WTF::fastFree(v1878, v1879, v1880, v1881, v1882, v1883, v1884, v1885);
                  }
                  else
                  {
                    *(_DWORD *)v1682 -= 2;
                  }
                }
                goto LABEL_2869;
              }
              v1467 = v1465 + 1;
              do
              {
                v1468 = v1467;
                *v2336 = v1467;
                if ((unint64_t)v1467 >= v1254)
                  break;
                ++v1467;
              }
              while (*v1468 - 48 < 0xA);
            }
            if ((unint64_t)v1468 < v1254)
            {
              v1469 = *v1468;
              if (v1469 == 46)
              {
                *v2336 = v1468 + 1;
                if ((unint64_t)(v1468 + 1) >= v1254 || v1468[1] - 48 > 9)
                  goto LABEL_4270;
                v1750 = v1468 + 2;
                do
                {
                  v1468 = v1750;
                  *v2336 = v1750;
                  if ((unint64_t)v1750 >= v1254)
                    break;
                  ++v1750;
                }
                while (*v1468 - 48 < 0xA);
              }
              else if (v1469 != 69 && v1469 != 101 && (uint64_t)&v1468[-v649] <= 9)
              {
                *v2335 = 6;
                v1470 = *(unsigned __int8 *)v649;
                if (v1470 == 45)
                  v1471 = (unsigned __int8 *)(v649 + 1);
                else
                  v1471 = (unsigned __int8 *)v649;
                if (v1471 < v1468)
                {
                  v1472 = 0;
                  do
                  {
                    v1473 = *v1471++;
                    v1472 = v1473 + 10 * v1472 - 48;
                  }
                  while (v1471 < v1468);
                  goto LABEL_3152;
                }
LABEL_3365:
                if (v1470 != 45)
                {
                  v1472 = 0;
                  goto LABEL_3153;
                }
LABEL_3959:
                v1334 = 0x8000000000000000;
                v1335 = v2328;
                goto LABEL_2868;
              }
            }
            if ((unint64_t)v1468 >= v1254 || (*v1468 | 0x20) != 0x65)
              goto LABEL_3572;
            v1751 = v1468 + 1;
            *v2336 = v1468 + 1;
            if ((unint64_t)(v1468 + 1) < v1254)
            {
              v1752 = *v1751;
              if (v1752 == 45 || v1752 == 43)
              {
                v1751 = v1468 + 2;
                *v2336 = v1468 + 2;
              }
            }
            if ((unint64_t)v1751 < v1254 && *v1751 - 48 <= 9)
            {
              v1753 = v1751 + 1;
              do
              {
                v1468 = v1753;
                *v2336 = v1753;
                if ((unint64_t)v1753 >= v1254)
                  break;
                ++v1753;
              }
              while (*v1468 - 48 < 0xA);
              goto LABEL_3572;
            }
            goto LABEL_4627;
          case 7:
LABEL_2664:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token ':'";
            goto LABEL_1080;
          case 8:
            v573 = *(unsigned __int8 **)(v8 + 48);
            v572 = *(_QWORD *)(v8 + 56);
            if ((unint64_t)v573 >= v572)
              goto LABEL_1350;
            v574 = v572 - (_QWORD)v573;
            while (JSC::tokenTypesOfLatin1Characters[*v573] == 19)
            {
              *v12 = ++v573;
              if (!--v574)
              {
                v573 = (unsigned __int8 *)v572;
                break;
              }
            }
LABEL_1350:
            if (v573 == (unsigned __int8 *)v572)
            {
              *v10 = 14;
              goto LABEL_1572;
            }
            *v10 = 18;
            a4 = *v573;
            v575 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v575 <= 4)
            {
              if (v575 == 4)
              {
                v576 = *(unsigned __int8 *)(v8 + 40);
                if ((_DWORD)a4 != 39)
                {
                  a3 = (size_t)(v573 + 1);
                  *v12 = v573 + 1;
                  if (!v576)
                  {
                    v577 = v572 - a3;
                    if ((uint64_t)(v572 - a3) < 0)
                      goto LABEL_3864;
                    v578 = (int8x16_t *)&v573[v577 + 1];
                    if (v577 >= 0x10)
                    {
                      v579 = v573 + 16;
                      while (1)
                      {
                        v580 = *(int8x16_t *)(v579 - 15);
                        v581.i64[0] = 0x2222222222222222;
                        v581.i64[1] = 0x2222222222222222;
                        v582 = vceqq_s8(v580, v581);
                        v583.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v583.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v584.i64[0] = 0x2020202020202020;
                        v584.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v580, v583), (int8x16_t)vcgtq_u8(v584, (uint8x16_t)v580)), v582);
                        v582.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v582.i32[0])
                          break;
                        v579 += 16;
                        if (v579 >= (unsigned __int8 *)v578)
                        {
                          if (v579 - 15 >= (unsigned __int8 *)v578)
                            goto LABEL_2931;
                          v585 = (unsigned __int8 *)&v578[-1];
                          v586 = v578[-1];
                          v587.i64[0] = 0x2222222222222222;
                          v587.i64[1] = 0x2222222222222222;
                          v588 = vceqq_s8(v586, v587);
                          v589.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v589.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v586, v589), (int8x16_t)vcgtq_u8(v584, (uint8x16_t)v586)), v588);
                          v588.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          v11 = v2328;
                          v10 = v2335;
                          v12 = v2336;
                          v8 = a1;
                          if (!v588.i32[0])
                          {
LABEL_1656:
                            *v12 = (unsigned __int8 *)v578;
                            goto LABEL_1657;
                          }
LABEL_1655:
                          v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                          v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                          v578 = (int8x16_t *)&v585[v14.n128_u32[0]];
                          goto LABEL_1656;
                        }
                      }
                      v585 = v579 - 15;
                      goto LABEL_1655;
                    }
                    v1371 = (int8x16_t *)(v573 + 1);
                    if (v572 != a3)
                    {
                      while (JSC::safeStringLatin1CharactersInStrictJSON[v1371->u8[0]])
                      {
                        v1371 = (int8x16_t *)((char *)v1371 + 1);
                        if (!--v577)
                          goto LABEL_2931;
                      }
                      v578 = v1371;
                    }
LABEL_2931:
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    goto LABEL_1656;
                  }
                  v882 = v13;
                  goto LABEL_1955;
                }
                v882 = v13;
                if (*(_BYTE *)(v8 + 40))
                {
                  a3 = (size_t)(v573 + 1);
                  *v2336 = v573 + 1;
LABEL_1955:
                  if (a3 >= v572)
                  {
                    v578 = (int8x16_t *)a3;
                    v13 = v882;
                    v11 = v2328;
                    v12 = v2336;
                  }
                  else
                  {
                    v578 = (int8x16_t *)a3;
                    v12 = v2336;
                    while (1)
                    {
                      v901 = v578->u8[0];
                      v902 = v901 < 0x20 || v901 == 92;
                      v903 = v902 || v901 == (_DWORD)a4;
                      v904 = v903;
                      if (v901 != 9 && v904)
                        break;
                      v578 = (int8x16_t *)((char *)v578 + 1);
                      *v2336 = (unsigned __int8 *)v578;
                      if (v578 == (int8x16_t *)&v573[v572 - a3 + 1])
                      {
                        v578 = (int8x16_t *)&v573[v572 - a3 + 1];
                        break;
                      }
                    }
                    v13 = v882;
                    v11 = v2328;
                  }
                  v8 = a1;
                  v10 = v2335;
LABEL_1657:
                  if ((unint64_t)v578 < v572 && v578->u8[0] == (_DWORD)a4)
                  {
                    *(_BYTE *)(v8 + 25) |= 1u;
                    *(_QWORD *)(v8 + 32) = a3;
                    *(_QWORD *)(v8 + 48) = (char *)v578->i64 + 1;
                    *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v578 - a3) & 0x7FFFFFFF;
                    *(_BYTE *)(v8 + 24) = 4;
                  }
                  else
                  {
                    JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_1572;
                }
                v2058 = WTF::fastCompactMalloc((WTF *)0x20);
                v1603 = v2058;
                v14.n128_u64[0] = 0x2900000002;
                v2059 = "Single quotes (') are not allowed in JSON";
                goto LABEL_4135;
              }
LABEL_1571:
              *v10 = v575;
              *v12 = v573 + 1;
              goto LABEL_1572;
            }
            if (v575 != 6)
            {
              if (v575 != 5)
              {
                if (v575 - 18 < 2)
                {
                  v882 = v13;
                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                  v1603 = v2340.rlim_cur;
                  if (!v2340.rlim_cur)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198B06134);
                  }
                  *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                  *(_QWORD *)(v1603 + 8) = v1603 + 20;
                  *(_DWORD *)(v1603 + 16) = 4;
                  *(_DWORD *)(v1603 + 36) = 656436837;
                  v14 = *(__n128 *)"Unrecognized token '";
                  *(_OWORD *)(v1603 + 20) = *(_OWORD *)"Unrecognized token '";
                  *(_BYTE *)(v1603 + 40) = *v573;
                  *(_BYTE *)(v1603 + 41) = 39;
                  goto LABEL_3314;
                }
                goto LABEL_1571;
              }
              if ((_DWORD)a4 == 110)
              {
                if ((uint64_t)(v572 - (_QWORD)v573) >= 4 && *(_WORD *)(v573 + 1) == 27765 && v573[3] == 108)
                {
                  v12 = v2336;
                  *v2336 = v573 + 4;
                  v1229 = 13;
LABEL_2592:
                  v10 = v2335;
                  *v2335 = v1229;
                  v11 = v2328;
                  goto LABEL_1932;
                }
              }
              else if ((_DWORD)a4 == 102)
              {
                if ((uint64_t)(v572 - (_QWORD)v573) >= 5
                  && *(_WORD *)(v573 + 1) == 27745
                  && *(_WORD *)(v573 + 3) == 25971)
                {
                  v12 = v2336;
                  *v2336 = v573 + 5;
                  v1229 = 12;
                  goto LABEL_2592;
                }
              }
              else if ((_DWORD)a4 == 116
                     && (uint64_t)(v572 - (_QWORD)v573) >= 4
                     && *(_WORD *)(v573 + 1) == 30066
                     && v573[3] == 101)
              {
                v12 = v2336;
                *v2336 = v573 + 4;
                v1229 = 11;
                goto LABEL_2592;
              }
              v1803 = (int)v573;
              *v2328 = (WTF::AtomStringImpl *)v573;
              v1804 = (int)v573;
              if ((unint64_t)v573 < v572)
              {
                v1805 = v572 - (_QWORD)v573;
                v1806 = (_DWORD)v573 + v1805;
                while (1)
                {
                  v1807 = *v573;
                  if (v1807 != 36)
                  {
                    v1808 = v1807 != 95 && (v1807 - 48) >= 0xA;
                    if (v1808 && (v1807 | 0x20u) - 97 > 0x19)
                      break;
                  }
                  *v2336 = ++v573;
                  if (!--v1805)
                  {
                    LODWORD(v573) = v1806;
                    break;
                  }
                }
                v1804 = (int)v573;
              }
              v8 = a1;
              v10 = v2335;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1804 - v1803) & 0x7FFFFFFF;
              *(_BYTE *)(a1 + 24) = 5;
              v11 = v2328;
              v12 = v2336;
LABEL_1572:
              LOBYTE(v2340.rlim_cur) = 4;
              v727 = *(unsigned int *)(v8 + 220);
              if ((_DWORD)v727 != *(_DWORD *)(v8 + 216))
              {
                *(_BYTE *)(*(_QWORD *)(v8 + 208) + v727) = 4;
                *(_DWORD *)(v8 + 220) = v727 + 1;
                goto LABEL_34;
              }
              goto LABEL_2612;
            }
            v882 = v13;
            v883 = v573;
            if ((unint64_t)v573 < v572)
            {
              v883 = v573;
              if ((_DWORD)a4 == 45)
              {
                v883 = v573 + 1;
                *v2336 = v573 + 1;
              }
            }
            if ((unint64_t)v883 >= v572)
              goto LABEL_4134;
            v884 = *v883;
            if (v884 == 48)
            {
              v886 = v883 + 1;
              *v2336 = v886;
            }
            else
            {
              if ((v884 - 49) > 8)
              {
LABEL_4134:
                v2058 = WTF::fastCompactMalloc((WTF *)0x20);
                v1603 = v2058;
                v14.n128_u64[0] = 0xE00000002;
                v2059 = "Invalid number";
                goto LABEL_4135;
              }
              v885 = v883 + 1;
              do
              {
                v886 = v885;
                *v2336 = v885;
                if ((unint64_t)v885 >= v572)
                  break;
                ++v885;
              }
              while (*v886 - 48 < 0xA);
            }
            if ((unint64_t)v886 < v572)
            {
              v887 = *v886;
              if (v887 == 46)
              {
                *v2336 = v886 + 1;
                if ((unint64_t)(v886 + 1) >= v572 || v886[1] - 48 > 9)
                {
                  v2058 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1603 = v2058;
                  v14.n128_u64[0] = 0x2200000002;
                  v2059 = "Invalid digits after decimal point";
                  goto LABEL_4135;
                }
                v1134 = v886 + 2;
                do
                {
                  v886 = v1134;
                  *v2336 = v1134;
                  if ((unint64_t)v1134 >= v572)
                    break;
                  ++v1134;
                }
                while (*v886 - 48 < 0xA);
              }
              else if (v887 != 69 && v887 != 101 && v886 - v573 <= 9)
              {
                *v2335 = 6;
                v888 = *v573;
                if (v888 == 45)
                  v889 = v573 + 1;
                else
                  v889 = v573;
                if (v889 >= v886)
                {
                  if (v888 != 45)
                  {
                    v890 = 0;
LABEL_1929:
                    v14.n128_f64[0] = (double)v890;
LABEL_1930:
                    v11 = v2328;
                    *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_1931:
                    v10 = v2335;
                    v12 = v2336;
LABEL_1932:
                    v8 = a1;
                    goto LABEL_1572;
                  }
                }
                else
                {
                  v890 = 0;
                  do
                  {
                    v891 = *v889++;
                    v890 = v891 + 10 * v890 - 48;
                  }
                  while (v889 < v886);
                  if (v888 != 45)
                    goto LABEL_1929;
                  if (v890)
                  {
                    v14.n128_f64[0] = (double)-v890;
                    goto LABEL_1930;
                  }
                }
                v11 = v2328;
                *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                goto LABEL_1931;
              }
            }
            if ((unint64_t)v886 >= v572 || (*v886 | 0x20) != 0x65)
            {
LABEL_2403:
              *v2335 = 6;
              if (v886 - v573 < 0)
                goto LABEL_3864;
              v2340.rlim_cur = 0;
              fast_float::from_chars_advanced<double,char>(v573, v886, &v2340.rlim_cur, 0x2E00000005);
              v14.n128_u64[0] = v2340.rlim_cur;
              goto LABEL_1930;
            }
            v2090 = v886 + 1;
            *v2336 = v886 + 1;
            if ((unint64_t)(v886 + 1) < v572)
            {
              v2091 = *v2090;
              if (v2091 == 45 || v2091 == 43)
              {
                v2090 = v886 + 2;
                *v2336 = v886 + 2;
              }
            }
            if ((unint64_t)v2090 < v572 && *v2090 - 48 <= 9)
            {
              v2092 = v2090 + 1;
              do
              {
                v886 = v2092;
                *v2336 = v2092;
                if ((unint64_t)v2092 >= v572)
                  break;
                ++v2092;
              }
              while (*v886 - 48 < 0xA);
              goto LABEL_2403;
            }
            v2058 = WTF::fastCompactMalloc((WTF *)0x20);
            v1603 = v2058;
            v14.n128_u64[0] = 0x5D00000002;
            v2059 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4135:
            *(_QWORD *)v2058 = v14.n128_u64[0];
            *(_QWORD *)(v2058 + 8) = v2059;
            *(_DWORD *)(v2058 + 16) = 4;
LABEL_3314:
            v1604 = *(WTF::StringImpl **)v2321;
            *(_QWORD *)v2321 = v1603;
            v13 = v882;
            v11 = v2328;
            v10 = v2335;
            v12 = v2336;
            v8 = a1;
            if (v1604)
            {
              if (*(_DWORD *)v1604 == 2)
              {
                WTF::StringImpl::~StringImpl(v1604, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1826, v1827, v1828, v1829, v1830, v1831, v1832, v1833);
              }
              else
              {
                *(_DWORD *)v1604 -= 2;
              }
              v13 = v882;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
            }
            goto LABEL_1572;
          case 9:
LABEL_2663:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token ')'";
            goto LABEL_1080;
          case 10:
LABEL_2662:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token ','";
            goto LABEL_1080;
          case 11:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1700000002;
            v472 = "Unexpected token 'true'";
            goto LABEL_1080;
          case 12:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1800000002;
            v472 = "Unexpected token 'false'";
            goto LABEL_1080;
          case 13:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1700000002;
            v472 = "Unexpected token 'null'";
            goto LABEL_1080;
          case 14:
LABEL_2661:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0xE00000002;
            v472 = "Unexpected EOF";
            goto LABEL_1080;
          case 15:
LABEL_2660:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token '.'";
            goto LABEL_1080;
          case 16:
LABEL_2659:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token '='";
            goto LABEL_1080;
          case 17:
LABEL_2658:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1400000002;
            v472 = "Unexpected token ';'";
            goto LABEL_1080;
          default:
            v469 = WTF::fastCompactMalloc((WTF *)0x20);
            v470 = v469;
            v471 = 0x1900000002;
            v472 = "Could not parse statement";
            goto LABEL_1080;
        }
      case 4:
        if (*v10 != 9)
          return 0;
        v594 = *(unsigned __int8 **)(v8 + 48);
        v593 = *(_QWORD *)(v8 + 56);
        if ((unint64_t)v594 >= v593)
          goto LABEL_1377;
        v595 = v593 - (_QWORD)v594;
        do
        {
          if (JSC::tokenTypesOfLatin1Characters[*v594] != 19)
            goto LABEL_1377;
          *v12 = ++v594;
          --v595;
        }
        while (v595);
        v594 = (unsigned __int8 *)v593;
LABEL_1377:
        if (v594 == (unsigned __int8 *)v593)
        {
          *v10 = 14;
          return v9;
        }
        *v10 = 18;
        a4 = *v594;
        v596 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v596 <= 4)
        {
          if (v596 == 4)
          {
            v597 = *(unsigned __int8 *)(v8 + 40);
            if ((_DWORD)a4 != 39)
            {
              v598 = (size_t)(v594 + 1);
              *v12 = v594 + 1;
              if (!v597)
              {
                v599 = v593 - v598;
                if ((uint64_t)(v593 - v598) < 0)
                  goto LABEL_3864;
                v600 = (int8x16_t *)&v594[v599 + 1];
                if (v599 < 0x10)
                {
                  if (v593 != v598)
                  {
                    v1370 = (int8x16_t *)(v594 + 1);
                    while (JSC::safeStringLatin1CharactersInStrictJSON[v1370->u8[0]])
                    {
                      v1370 = (int8x16_t *)((char *)v1370 + 1);
                      if (!--v599)
                        goto LABEL_2925;
                    }
                    v600 = v1370;
                  }
                }
                else
                {
                  v601 = v594 + 16;
                  v602.i64[0] = 0x2222222222222222;
                  v602.i64[1] = 0x2222222222222222;
                  v603.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v603.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v604.i64[0] = 0x2020202020202020;
                  v604.i64[1] = 0x2020202020202020;
                  do
                  {
                    v605 = *(int8x16_t *)(v601 - 15);
                    v606 = vceqq_s8(v605, v602);
                    v607 = vorrq_s8(vorrq_s8(vceqq_s8(v605, v603), (int8x16_t)vcgtq_u8(v604, (uint8x16_t)v605)), v606);
                    v606.i8[0] = vmaxvq_u8((uint8x16_t)v607);
                    if (v606.i32[0])
                    {
                      v608 = v601 - 15;
                      goto LABEL_1648;
                    }
                    v601 += 16;
                  }
                  while (v601 < (unsigned __int8 *)v600);
                  if (v601 - 15 < (unsigned __int8 *)v600)
                  {
                    v608 = (unsigned __int8 *)&v600[-1];
                    v609 = v600[-1];
                    v610.i64[0] = 0x2222222222222222;
                    v610.i64[1] = 0x2222222222222222;
                    v611 = vceqq_s8(v609, v610);
                    v612.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v612.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v613.i64[0] = 0x2020202020202020;
                    v613.i64[1] = 0x2020202020202020;
                    v614 = vorrq_s8(vceqq_s8(v609, v612), (int8x16_t)vcgtq_u8(v613, (uint8x16_t)v609));
                    v607 = vorrq_s8(v614, v611);
                    v614.i8[0] = vmaxvq_u8((uint8x16_t)v607);
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    if (!v614.i32[0])
                    {
LABEL_1649:
                      *v12 = (unsigned __int8 *)v600;
LABEL_1650:
                      if ((unint64_t)v600 < v593 && v600->u8[0] == (_DWORD)a4)
                      {
                        *(_BYTE *)(v8 + 25) |= 1u;
                        *(_QWORD *)(v8 + 32) = v598;
                        *(_QWORD *)(v8 + 48) = (char *)v600->i64 + 1;
                        *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v600 - v598) & 0x7FFFFFFF;
                        *(_BYTE *)(v8 + 24) = 4;
                        goto LABEL_1653;
                      }
                      v596 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v598, a4, a5, a6, a7, a8);
LABEL_1566:
                      if (v596 == 14)
                        return v9;
LABEL_1653:
                      v469 = WTF::fastCompactMalloc((WTF *)0x20);
                      v470 = v469;
                      v471 = 0x2900000002;
                      v472 = "Unexpected content at end of JSON literal";
LABEL_1080:
                      *(_QWORD *)v469 = v471;
LABEL_1081:
                      *(_QWORD *)(v469 + 8) = v472;
                      *(_DWORD *)(v469 + 16) = 4;
                      v390 = *(WTF::StringImpl **)v13;
                      *(_QWORD *)v13 = v470;
                      if (!v390)
                        return 0;
                      if (*(_DWORD *)v390 != 2)
                      {
                        v9 = 0;
                        *(_DWORD *)v390 -= 2;
                        return v9;
                      }
                      goto LABEL_1084;
                    }
LABEL_1648:
                    v769 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v607);
                    v769.i8[0] = vminvq_u8(v769);
                    v600 = (int8x16_t *)&v608[v769.u32[0]];
                    goto LABEL_1649;
                  }
                }
LABEL_2925:
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                goto LABEL_1649;
              }
LABEL_4252:
              if (v598 >= v593)
              {
                v600 = (int8x16_t *)v598;
              }
              else
              {
                v600 = (int8x16_t *)v598;
                do
                {
                  v2129 = v600->u8[0];
                  v2132 = v2129 < 0x20 || v2129 == 92 || v2129 == (_DWORD)a4;
                  if (v2129 != 9 && v2132)
                    goto LABEL_4267;
                  v600 = (int8x16_t *)((char *)v600 + 1);
                  *v2336 = (unsigned __int8 *)v600;
                }
                while (v600 != (int8x16_t *)&v594[v593 - v598 + 1]);
                v600 = (int8x16_t *)&v594[v593 - v598 + 1];
              }
LABEL_4267:
              v8 = a1;
              v10 = v2335;
              goto LABEL_1650;
            }
            if (*(_BYTE *)(v8 + 40))
            {
              v598 = (size_t)(v594 + 1);
              *v2336 = v594 + 1;
              goto LABEL_4252;
            }
            v2055 = WTF::fastCompactMalloc((WTF *)0x20);
            v1597 = v2055;
            v2056 = 0x2900000002;
            v2057 = "Single quotes (') are not allowed in JSON";
            goto LABEL_4133;
          }
LABEL_1565:
          *v10 = v596;
          *v12 = v594 + 1;
          goto LABEL_1566;
        }
        if (v596 != 6)
        {
          if (v596 != 5)
          {
            if (v596 - 18 < 2)
            {
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
              v1597 = v2340.rlim_cur;
              if (!v2340.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B08664);
              }
              *(_QWORD *)v2340.rlim_cur = 0x1600000002;
              *(_QWORD *)(v1597 + 8) = v1597 + 20;
              *(_DWORD *)(v1597 + 16) = 4;
              *(_DWORD *)(v1597 + 36) = 656436837;
              *(_OWORD *)(v1597 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v1597 + 40) = *v594;
              *(_BYTE *)(v1597 + 41) = 39;
              goto LABEL_3306;
            }
            goto LABEL_1565;
          }
          if ((_DWORD)a4 == 110)
          {
            if ((uint64_t)(v593 - (_QWORD)v594) >= 4 && *(_WORD *)(v594 + 1) == 27765 && v594[3] == 108)
            {
              *v2336 = v594 + 4;
              v1228 = 13;
LABEL_2586:
              *v2335 = v1228;
              goto LABEL_1653;
            }
          }
          else if ((_DWORD)a4 == 102)
          {
            if ((uint64_t)(v593 - (_QWORD)v594) >= 5 && *(_WORD *)(v594 + 1) == 27745 && *(_WORD *)(v594 + 3) == 25971)
            {
              *v2336 = v594 + 5;
              v1228 = 12;
              goto LABEL_2586;
            }
          }
          else if ((_DWORD)a4 == 116
                 && (uint64_t)(v593 - (_QWORD)v594) >= 4
                 && *(_WORD *)(v594 + 1) == 30066
                 && v594[3] == 101)
          {
            *v2336 = v594 + 4;
            v1228 = 11;
            goto LABEL_2586;
          }
          v1796 = (int)v594;
          *v2328 = (WTF::AtomStringImpl *)v594;
          v1797 = (int)v594;
          if ((unint64_t)v594 < v593)
          {
            v1798 = v593 - (_QWORD)v594;
            v1799 = (_DWORD)v594 + v1798;
            do
            {
              v1800 = *v594;
              if (v1800 != 36)
              {
                v1801 = v1800 != 95 && (v1800 - 48) >= 0xA;
                if (v1801 && (v1800 | 0x20u) - 97 > 0x19)
                  goto LABEL_3665;
              }
              *v2336 = ++v594;
              --v1798;
            }
            while (v1798);
            LODWORD(v594) = v1799;
LABEL_3665:
            v1797 = (int)v594;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1797 - v1796) & 0x7FFFFFFF;
          *(_BYTE *)(a1 + 24) = 5;
          goto LABEL_1653;
        }
        v872 = v594;
        if ((unint64_t)v594 < v593)
        {
          v872 = v594;
          if ((_DWORD)a4 == 45)
          {
            v872 = v594 + 1;
            *v2336 = v594 + 1;
          }
        }
        if ((unint64_t)v872 >= v593)
          goto LABEL_4132;
        v873 = *v872;
        if (v873 == 48)
        {
          v875 = v872 + 1;
          *v2336 = v875;
        }
        else
        {
          if ((v873 - 49) > 8)
          {
LABEL_4132:
            v2055 = WTF::fastCompactMalloc((WTF *)0x20);
            v1597 = v2055;
            v2056 = 0xE00000002;
            v2057 = "Invalid number";
            goto LABEL_4133;
          }
          v874 = v872 + 1;
          do
          {
            v875 = v874;
            *v2336 = v874;
            if ((unint64_t)v874 >= v593)
              break;
            ++v874;
          }
          while (*v875 - 48 < 0xA);
        }
        if ((unint64_t)v875 < v593)
        {
          v876 = *v875;
          if (v876 == 46)
          {
            *v2336 = v875 + 1;
            if ((unint64_t)(v875 + 1) >= v593 || v875[1] - 48 > 9)
            {
              v2055 = WTF::fastCompactMalloc((WTF *)0x20);
              v1597 = v2055;
              v2056 = 0x2200000002;
              v2057 = "Invalid digits after decimal point";
              goto LABEL_4133;
            }
            v1133 = v875 + 2;
            do
            {
              v875 = v1133;
              *v2336 = v1133;
              if ((unint64_t)v1133 >= v593)
                break;
              ++v1133;
            }
            while (*v875 - 48 < 0xA);
          }
          else if (v876 != 69 && v876 != 101 && v875 - v594 <= 9)
          {
            *v2335 = 6;
            v877 = *v594;
            if (v877 == 45)
              v878 = v594 + 1;
            else
              v878 = v594;
            if (v878 >= v875)
            {
              if (v877 != 45)
              {
                v879 = 0;
LABEL_1906:
                v881 = (double)v879;
LABEL_1907:
                *(double *)v2328 = v881;
                goto LABEL_1653;
              }
            }
            else
            {
              v879 = 0;
              do
              {
                v880 = *v878++;
                v879 = v880 + 10 * v879 - 48;
              }
              while (v878 < v875);
              if (v877 != 45)
                goto LABEL_1906;
              if (v879)
              {
                v879 = -v879;
                goto LABEL_1906;
              }
            }
            *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
            goto LABEL_1653;
          }
        }
        if ((unint64_t)v875 >= v593 || (*v875 | 0x20) != 0x65)
        {
LABEL_2394:
          *v2335 = 6;
          if (v875 - v594 < 0)
            goto LABEL_3864;
          v2340.rlim_cur = 0;
          fast_float::from_chars_advanced<double,char>(v594, v875, &v2340.rlim_cur, 0x2E00000005);
          v881 = *(double *)&v2340.rlim_cur;
          goto LABEL_1907;
        }
        v2087 = v875 + 1;
        *v2336 = v875 + 1;
        if ((unint64_t)(v875 + 1) < v593)
        {
          v2088 = *v2087;
          if (v2088 == 45 || v2088 == 43)
          {
            v2087 = v875 + 2;
            *v2336 = v875 + 2;
          }
        }
        if ((unint64_t)v2087 < v593 && *v2087 - 48 <= 9)
        {
          v2089 = v2087 + 1;
          do
          {
            v875 = v2089;
            *v2336 = v2089;
            if ((unint64_t)v2089 >= v593)
              break;
            ++v2089;
          }
          while (*v875 - 48 < 0xA);
          goto LABEL_2394;
        }
        v2055 = WTF::fastCompactMalloc((WTF *)0x20);
        v1597 = v2055;
        v2056 = 0x5D00000002;
        v2057 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4133:
        *(_QWORD *)v2055 = v2056;
        *(_QWORD *)(v2055 + 8) = v2057;
        *(_DWORD *)(v2055 + 16) = 4;
LABEL_3306:
        v1598 = *(WTF::StringImpl **)v2321;
        *(_QWORD *)v2321 = v1597;
        if (v1598)
        {
          if (*(_DWORD *)v1598 == 2)
          {
            WTF::StringImpl::~StringImpl(v1598, v1590, v1591, v1592, v1593, v1594, v1595, v1596);
            WTF::fastFree(v1818, v1819, v1820, v1821, v1822, v1823, v1824, v1825);
          }
          else
          {
            *(_DWORD *)v1598 -= 2;
          }
        }
        goto LABEL_1653;
      case 5:
        goto LABEL_1500;
      case 6:
        v2344 = 0;
        v2344 = *(WTF::AtomStringImpl **)(*(_QWORD *)(v8 + 128) + 8 * (*(_DWORD *)(v8 + 120) - 1));
        WTF::Vector<JSC::Identifier,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast(v2348, (unsigned int *)(v8 + 240), a3, a4, a5, a6, a7, a8);
        if (*(_BYTE *)(v8 + 88))
        {
          v673 = v2348[0];
          v674 = v9;
          if (v2348[0] == *(_QWORD *)(*((_QWORD *)v2333 + 5244) + 16))
          {
            WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add((uint64_t *)(v8 + 104), (uint64_t *)&v2344, v667, v9, v668, v669, v670, v671, (uint64_t)&v2340);
            if (!(_BYTE)v2341)
            {
              v1963 = WTF::fastCompactMalloc((WTF *)0x20);
              v14.n128_u64[0] = 0x2800000002;
              *(_QWORD *)v1963 = 0x2800000002;
              *(_QWORD *)(v1963 + 8) = "Attempted to redefine __proto__ property";
              *(_DWORD *)(v1963 + 16) = 4;
              v1964 = *(WTF::StringImpl **)v13;
              *(_QWORD *)v13 = v1963;
              if (v1964)
              {
                if (*(_DWORD *)v1964 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1964, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v2023, v2024, v2025, v2026, v2027, v2028, v2029, v2030);
                }
                else
                {
                  *(_DWORD *)v1964 -= 2;
                }
              }
              goto LABEL_1877;
            }
            v1252 = *(_QWORD *)(a1 + 8);
            if (v1252)
              LOBYTE(v1252) = *(_BYTE *)(*(_QWORD *)(v1252 + 64) + 68) & 1;
            v2340.rlim_cur = 0;
            v2340.rlim_max = (rlim_t)v2344;
            v2341 = -1;
            LOBYTE(v2342) = v2342 & 0xF8 | v1252;
            *(_WORD *)((char *)&v2342 + 1) = 0;
            HIBYTE(v2342) = 1;
            v2343 = 0;
            v2339 = v2344;
            JSC::JSValue::put((JSC::JSValue *)&v2339, *(JSC::JSGlobalObject **)a1, v673, v9, (uint64_t)&v2340, v1249, v1250, v1251);
            if (*((_DWORD *)v2333 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
            {
LABEL_1877:
              v680 = 1;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              goto LABEL_1495;
            }
            goto LABEL_2657;
          }
        }
        else
        {
          v673 = v2348[0];
          v674 = v9;
        }
        if (!v673)
          goto LABEL_1492;
        v675 = *(_DWORD *)(v673 + 16);
        if ((v675 & 0x20) != 0)
          goto LABEL_1492;
        v676 = *(_BYTE **)(v673 + 8);
        v677 = *(unsigned int *)(v673 + 4);
        if ((v675 & 4) != 0)
        {
          if ((_DWORD)v677)
          {
            v678 = (JSC::VM *)(*v676 - 48);
            if (v678 <= 9 && (v677 < 2 || *v676 != 48))
            {
              v2194 = v676 + 1;
              v2195 = v677 - 1;
              while (v2195)
              {
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                v674 = v9;
                if (v678 <= 0x19999999)
                {
                  v2196 = *v2194 - 48;
                  if (v2196 <= 9)
                  {
                    v753 = __CFADD__(v2196, 10 * (_DWORD)v678);
                    v678 = (JSC::VM *)(v2196 + 10 * (_DWORD)v678);
                    ++v2194;
                    --v2195;
                    if (!v753)
                      continue;
                  }
                }
                goto LABEL_1492;
              }
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              v674 = v9;
              if ((_DWORD)v678 != -1)
                goto LABEL_1875;
            }
          }
LABEL_1492:
          JSC::JSObject::putDirect((int *)v2344, (uint64_t)v2333, v673, v674, 0, v672, v669, v670, v671);
          goto LABEL_1493;
        }
        if (!(_DWORD)v677)
          goto LABEL_1492;
        v678 = (JSC::VM *)(*(unsigned __int16 *)v676 - 48);
        if (v678 > 9)
          goto LABEL_1492;
        if (*(_WORD *)v676 == 48 && v677 > 1)
          goto LABEL_1492;
        v785 = (unsigned __int16 *)(v676 + 2);
        v786 = v677 - 1;
        while (v786)
        {
          if (v678 <= 0x19999999)
          {
            v787 = *v785 - 48;
            if (v787 <= 9)
            {
              v753 = __CFADD__(v787, 10 * (_DWORD)v678);
              v678 = (JSC::VM *)(v787 + 10 * (_DWORD)v678);
              ++v785;
              --v786;
              if (!v753)
                continue;
            }
          }
          goto LABEL_1492;
        }
        if ((_DWORD)v678 == -1)
          goto LABEL_1492;
LABEL_1875:
        JSC::JSObject::putDirectIndex((unint64_t)v2344, *(_QWORD *)v8, v678, v674, v668, v669, v670, v671, (int32x4_t)v672);
        if (!*((_DWORD *)v2333 + 20))
          goto LABEL_1493;
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_1877;
LABEL_2657:
        v11 = v2328;
        v10 = v2335;
        v12 = v2336;
        v8 = a1;
LABEL_1493:
        v679 = *v10;
        if (v679 == 10)
        {
          v680 = 19;
          goto LABEL_1495;
        }
        if (v679 == 3)
        {
          v805 = *(unsigned __int8 **)(v8 + 48);
          v804 = *(_QWORD *)(v8 + 56);
          if ((unint64_t)v805 < v804)
          {
            v806 = v804 - (_QWORD)v805;
            while (JSC::tokenTypesOfLatin1Characters[*v805] == 19)
            {
              *v12 = ++v805;
              if (!--v806)
              {
                v805 = (unsigned __int8 *)v804;
                break;
              }
            }
          }
          if (v805 == (unsigned __int8 *)v804)
          {
            *v10 = 14;
            goto LABEL_1990;
          }
          *v10 = 18;
          a4 = *v805;
          v807 = JSC::tokenTypesOfLatin1Characters[a4];
          if (v807 <= 4)
          {
            if (v807 == 4)
            {
              v808 = v13;
              v809 = *(unsigned __int8 *)(v8 + 40);
              if ((_DWORD)a4 != 39)
              {
                a3 = (size_t)(v805 + 1);
                *v2336 = v805 + 1;
                if (!v809)
                {
                  v810 = v804 - a3;
                  if ((uint64_t)(v804 - a3) < 0)
                    goto LABEL_3864;
                  v811 = (int8x16_t *)&v805[v810 + 1];
                  if (v810 >= 0x10)
                  {
                    v812 = v805 + 16;
                    while (1)
                    {
                      v813 = *(int8x16_t *)(v812 - 15);
                      v814.i64[0] = 0x2222222222222222;
                      v814.i64[1] = 0x2222222222222222;
                      v815 = vceqq_s8(v813, v814);
                      v816.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v816.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v817.i64[0] = 0x2020202020202020;
                      v817.i64[1] = 0x2020202020202020;
                      v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v813, v816), (int8x16_t)vcgtq_u8(v817, (uint8x16_t)v813)), v815);
                      v815.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                      if (v815.i32[0])
                        break;
                      v812 += 16;
                      if (v812 >= (unsigned __int8 *)v811)
                      {
                        if (v812 - 15 >= (unsigned __int8 *)v811)
                          goto LABEL_2196;
                        v818 = (unsigned __int8 *)&v811[-1];
                        v819 = v811[-1];
                        v820.i64[0] = 0x2222222222222222;
                        v820.i64[1] = 0x2222222222222222;
                        v821 = vceqq_s8(v819, v820);
                        v822.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v822.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v819, v822), (int8x16_t)vcgtq_u8(v817, (uint8x16_t)v819)), v821);
                        v821.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (!v821.i32[0])
                          goto LABEL_2196;
LABEL_2195:
                        v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                        v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                        v811 = (int8x16_t *)&v818[v14.n128_u32[0]];
                        goto LABEL_2196;
                      }
                    }
                    v818 = v812 - 15;
                    goto LABEL_2195;
                  }
                  v1613 = (int8x16_t *)(v805 + 1);
                  if (v804 == a3)
                    goto LABEL_2196;
                  do
                  {
                    if (!JSC::safeStringLatin1CharactersInStrictJSON[v1613->u8[0]])
                    {
                      v811 = v1613;
                      break;
                    }
                    v1613 = (int8x16_t *)((char *)v1613 + 1);
                    --v810;
                  }
                  while (v810);
LABEL_2196:
                  *v2336 = (unsigned __int8 *)v811;
LABEL_2197:
                  if ((unint64_t)v811 < v804 && v811->u8[0] == (_DWORD)a4)
                  {
                    v8 = a1;
                    *(_BYTE *)(a1 + 25) |= 1u;
                    *(_QWORD *)(a1 + 32) = a3;
                    *(_QWORD *)(a1 + 48) = (char *)v811->i64 + 1;
                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v811 - a3) & 0x7FFFFFFF;
                    v1041 = 4;
LABEL_2200:
                    *(_BYTE *)(v8 + 24) = v1041;
                    v13 = v808;
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    goto LABEL_1990;
                  }
                  v10 = v2335;
                  JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, a3, a4, a5, a6, a7, a8);
                  v11 = v2328;
                  v12 = v2336;
LABEL_2322:
                  v8 = a1;
                  goto LABEL_1990;
                }
LABEL_4422:
                if (a3 >= v804)
                {
                  v811 = (int8x16_t *)a3;
                }
                else
                {
                  v811 = (int8x16_t *)a3;
                  while (1)
                  {
                    v2197 = v811->u8[0];
                    v2198 = v2197 < 0x20 || v2197 == 92;
                    v2199 = v2198 || v2197 == (_DWORD)a4;
                    v2200 = v2199;
                    if (v2197 != 9 && v2200)
                      break;
                    v811 = (int8x16_t *)((char *)v811 + 1);
                    *v2336 = (unsigned __int8 *)v811;
                    if (v811 == (int8x16_t *)&v805[v804 - a3 + 1])
                    {
                      v811 = (int8x16_t *)&v805[v804 - a3 + 1];
                      goto LABEL_2197;
                    }
                  }
                }
                goto LABEL_2197;
              }
              if (*(_BYTE *)(v8 + 40))
              {
                a3 = (size_t)(v805 + 1);
                *v2336 = v805 + 1;
                goto LABEL_4422;
              }
              v2157 = WTF::fastCompactMalloc((WTF *)0x20);
              v2158 = v2157;
              v14.n128_u64[0] = 0x2900000002;
              v2159 = "Single quotes (') are not allowed in JSON";
              goto LABEL_4326;
            }
LABEL_1989:
            *v10 = v807;
            *v12 = v805 + 1;
LABEL_1990:
            v924 = *(_DWORD *)(v8 + 120) - 1;
            v2324 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * v924);
            *(_DWORD *)(v8 + 120) = v924;
            v680 = 4;
            v673 = v2348[0];
            goto LABEL_1495;
          }
          v808 = v13;
          if (v807 != 6)
          {
            if (v807 != 5)
            {
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              if (v807 - 18 < 2)
              {
                WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                v1794 = v2340.rlim_cur;
                if (!v2340.rlim_cur)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B06124);
                }
                *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                *(_QWORD *)(v1794 + 8) = v1794 + 20;
                *(_DWORD *)(v1794 + 16) = 4;
                *(_DWORD *)(v1794 + 36) = 656436837;
                v14 = *(__n128 *)"Unrecognized token '";
                *(_OWORD *)(v1794 + 20) = *(_OWORD *)"Unrecognized token '";
                *(_BYTE *)(v1794 + 40) = *v805;
                *(_BYTE *)(v1794 + 41) = 39;
                v1795 = *(WTF::StringImpl **)v2321;
                *(_QWORD *)v2321 = v1794;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                if (!v1795)
                  goto LABEL_1990;
                goto LABEL_3650;
              }
              goto LABEL_1989;
            }
            if ((_DWORD)a4 == 110)
            {
              if ((uint64_t)(v804 - (_QWORD)v805) >= 4 && *(_WORD *)(v805 + 1) == 27765 && v805[3] == 108)
              {
                v12 = v2336;
                *v2336 = v805 + 4;
                v1385 = 13;
LABEL_2970:
                v10 = v2335;
                *v2335 = v1385;
                v11 = v2328;
                goto LABEL_2322;
              }
            }
            else if ((_DWORD)a4 == 102)
            {
              if ((uint64_t)(v804 - (_QWORD)v805) >= 5 && *(_WORD *)(v805 + 1) == 27745 && *(_WORD *)(v805 + 3) == 25971)
              {
                v12 = v2336;
                *v2336 = v805 + 5;
                v1385 = 12;
                goto LABEL_2970;
              }
            }
            else if ((_DWORD)a4 == 116
                   && (uint64_t)(v804 - (_QWORD)v805) >= 4
                   && *(_WORD *)(v805 + 1) == 30066
                   && v805[3] == 101)
            {
              v12 = v2336;
              *v2336 = v805 + 4;
              v1385 = 11;
              goto LABEL_2970;
            }
            v1920 = (int)v805;
            *v2328 = (WTF::AtomStringImpl *)v805;
            v1921 = (int)v805;
            if ((unint64_t)v805 < v804)
            {
              v1922 = v804 - (_QWORD)v805;
              v1923 = (_DWORD)v805 + v1922;
              while (1)
              {
                v1924 = *v805;
                if (v1924 != 36)
                {
                  v1925 = v1924 != 95 && (v1924 - 48) >= 0xA;
                  if (v1925 && (v1924 | 0x20u) - 97 > 0x19)
                    break;
                }
                *v2336 = ++v805;
                if (!--v1922)
                {
                  LODWORD(v805) = v1923;
                  break;
                }
              }
              v1921 = (int)v805;
            }
            v8 = a1;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1921 - v1920) & 0x7FFFFFFF;
            v1041 = 5;
            goto LABEL_2200;
          }
          v1093 = v805;
          if ((unint64_t)v805 < v804)
          {
            v1093 = v805;
            if ((_DWORD)a4 == 45)
            {
              v1093 = v805 + 1;
              *v2336 = v805 + 1;
            }
          }
          if ((unint64_t)v1093 < v804)
          {
            v1094 = *v1093;
            if (v1094 == 48)
            {
              v1096 = v1093 + 1;
              *v2336 = v1096;
              goto LABEL_2307;
            }
            if ((v1094 - 49) <= 8)
            {
              v1095 = v1093 + 1;
              do
              {
                v1096 = v1095;
                *v2336 = v1095;
                if ((unint64_t)v1095 >= v804)
                  break;
                ++v1095;
              }
              while (*v1096 - 48 < 0xA);
LABEL_2307:
              if ((unint64_t)v1096 < v804)
              {
                v1097 = *v1096;
                if (v1097 == 46)
                {
                  *v2336 = v1096 + 1;
                  if ((unint64_t)(v1096 + 1) >= v804 || v1096[1] - 48 > 9)
                  {
                    v2157 = WTF::fastCompactMalloc((WTF *)0x20);
                    v2158 = v2157;
                    v14.n128_u64[0] = 0x2200000002;
                    v2159 = "Invalid digits after decimal point";
                    goto LABEL_4326;
                  }
                  v1248 = v1096 + 2;
                  do
                  {
                    v1096 = v1248;
                    *v2336 = v1248;
                    if ((unint64_t)v1248 >= v804)
                      break;
                    ++v1248;
                  }
                  while (*v1096 - 48 < 0xA);
                }
                else if (v1097 != 69 && v1097 != 101 && v1096 - v805 <= 9)
                {
                  *v2335 = 6;
                  v1098 = *v805;
                  if (v1098 == 45)
                    v1099 = v805 + 1;
                  else
                    v1099 = v805;
                  if (v1099 >= v1096)
                  {
                    if (v1098 != 45)
                    {
                      v1100 = 0;
LABEL_2319:
                      v14.n128_f64[0] = (double)v1100;
LABEL_2320:
                      v11 = v2328;
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_2321:
                      v10 = v2335;
                      v12 = v2336;
                      goto LABEL_2322;
                    }
                  }
                  else
                  {
                    v1100 = 0;
                    do
                    {
                      v1101 = *v1099++;
                      v1100 = v1101 + 10 * v1100 - 48;
                    }
                    while (v1099 < v1096);
                    if (v1098 != 45)
                      goto LABEL_2319;
                    if (v1100)
                    {
                      v14.n128_f64[0] = (double)-v1100;
                      goto LABEL_2320;
                    }
                  }
                  v11 = v2328;
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_2321;
                }
              }
              if ((unint64_t)v1096 >= v804 || (*v1096 | 0x20) != 0x65)
              {
LABEL_2646:
                *v2335 = 6;
                if (v1096 - v805 < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>(v805, v1096, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_2320;
              }
              v2183 = v1096 + 1;
              *v2336 = v1096 + 1;
              if ((unint64_t)(v1096 + 1) < v804)
              {
                v2184 = *v2183;
                if (v2184 == 45 || v2184 == 43)
                {
                  v2183 = v1096 + 2;
                  *v2336 = v1096 + 2;
                }
              }
              if ((unint64_t)v2183 < v804 && *v2183 - 48 <= 9)
              {
                v2185 = v2183 + 1;
                do
                {
                  v1096 = v2185;
                  *v2336 = v2185;
                  if ((unint64_t)v2185 >= v804)
                    break;
                  ++v2185;
                }
                while (*v1096 - 48 < 0xA);
                goto LABEL_2646;
              }
              v2157 = WTF::fastCompactMalloc((WTF *)0x20);
              v2158 = v2157;
              v14.n128_u64[0] = 0x5D00000002;
              v2159 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4326:
              *(_QWORD *)v2157 = v14.n128_u64[0];
              *(_QWORD *)(v2157 + 8) = v2159;
              *(_DWORD *)(v2157 + 16) = 4;
              v1795 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v2158;
              v13 = v808;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              if (!v1795)
                goto LABEL_1990;
LABEL_3650:
              if (*(_DWORD *)v1795 == 2)
              {
                WTF::StringImpl::~StringImpl(v1795, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1927, v1928, v1929, v1930, v1931, v1932, v1933, v1934);
              }
              else
              {
                *(_DWORD *)v1795 -= 2;
              }
              v13 = v808;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              goto LABEL_1990;
            }
          }
          v2157 = WTF::fastCompactMalloc((WTF *)0x20);
          v2158 = v2157;
          v14.n128_u64[0] = 0xE00000002;
          v2159 = "Invalid number";
          goto LABEL_4326;
        }
        JSC::LiteralParser<unsigned char>::setErrorMessageForToken(v8, 3);
        v680 = 1;
LABEL_1495:
        v2348[0] = 0;
        if (v673)
        {
          if (*(_DWORD *)v673 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v673, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v916, v917, v918, v919, v920, v921, v922, v923);
          }
          else
          {
            *(_DWORD *)v673 -= 2;
          }
        }
        if (v680 == 4)
        {
          v9 = v2324;
          goto LABEL_740;
        }
        if (v680 != 19)
          return 0;
LABEL_1500:
        v682 = *(unsigned __int8 **)(v8 + 48);
        v681 = *(_QWORD *)(v8 + 56);
        if ((unint64_t)v682 < v681)
        {
          v683 = v681 - (_QWORD)v682;
          while (JSC::tokenTypesOfLatin1Characters[*v682] == 19)
          {
            *v12 = ++v682;
            if (!--v683)
            {
              v682 = (unsigned __int8 *)v681;
              break;
            }
          }
        }
        if (v682 == (unsigned __int8 *)v681)
        {
          *v10 = 14;
          goto LABEL_1953;
        }
        *v10 = 18;
        a4 = *v682;
        v684 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v684 > 4)
        {
          if (v684 != 6)
          {
            if (v684 != 5)
            {
              v10 = v2335;
              v12 = v2336;
              if (v684 - 18 >= 2)
                goto LABEL_1952;
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
              v1740 = v2340.rlim_cur;
              if (!v2340.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B0868CLL);
              }
              *(_QWORD *)v2340.rlim_cur = 0x1600000002;
              *(_QWORD *)(v1740 + 8) = v1740 + 20;
              *(_DWORD *)(v1740 + 16) = 4;
              *(_DWORD *)(v1740 + 36) = 656436837;
              *(_OWORD *)(v1740 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v1740 + 40) = *v682;
              *(_BYTE *)(v1740 + 41) = 39;
LABEL_3544:
              v1741 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1740;
              if (!v1741)
                goto LABEL_1953;
              if (*(_DWORD *)v1741 != 2)
              {
                *(_DWORD *)v1741 -= 2;
                goto LABEL_1953;
              }
              goto LABEL_3818;
            }
            if ((_DWORD)a4 == 110)
            {
              if ((uint64_t)(v681 - (_QWORD)v682) >= 4 && *(_WORD *)(v682 + 1) == 27765 && v682[3] == 108)
              {
                *v2336 = v682 + 4;
                v1340 = 13;
LABEL_2880:
                *v2335 = v1340;
                goto LABEL_1953;
              }
            }
            else if ((_DWORD)a4 == 102)
            {
              if ((uint64_t)(v681 - (_QWORD)v682) >= 5 && *(_WORD *)(v682 + 1) == 27745 && *(_WORD *)(v682 + 3) == 25971)
              {
                *v2336 = v682 + 5;
                v1340 = 12;
                goto LABEL_2880;
              }
            }
            else if ((_DWORD)a4 == 116
                   && (uint64_t)(v681 - (_QWORD)v682) >= 4
                   && *(_WORD *)(v682 + 1) == 30066
                   && v682[3] == 101)
            {
              *v2336 = v682 + 4;
              v1340 = 11;
              goto LABEL_2880;
            }
            v1905 = (int)v682;
            *v2328 = (WTF::AtomStringImpl *)v682;
            v1906 = (int)v682;
            if ((unint64_t)v682 < v681)
            {
              v1907 = v681 - (_QWORD)v682;
              v1908 = (_DWORD)v682 + v1907;
              while (1)
              {
                v1909 = *v682;
                if (v1909 != 36)
                {
                  v1910 = v1909 != 95 && (v1909 - 48) >= 0xA;
                  if (v1910 && (v1909 | 0x20u) - 97 > 0x19)
                    break;
                }
                *v2336 = ++v682;
                if (!--v1907)
                {
                  LODWORD(v682) = v1908;
                  break;
                }
              }
              v1906 = (int)v682;
            }
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1906 - v1905) & 0x7FFFFFFF;
            v1621 = 5;
            *(_BYTE *)(a1 + 24) = 5;
            goto LABEL_3339;
          }
          v1072 = v682;
          if ((unint64_t)v682 < v681)
          {
            v1072 = v682;
            if ((_DWORD)a4 == 45)
            {
              v1072 = v682 + 1;
              *v2336 = v682 + 1;
            }
          }
          if ((unint64_t)v1072 < v681)
          {
            v1073 = *v1072;
            if (v1073 == 48)
            {
              v1075 = v1072 + 1;
              *v2336 = v1075;
LABEL_2246:
              if ((unint64_t)v1075 < v681)
              {
                v1076 = *v1075;
                if (v1076 == 46)
                {
                  *v2336 = v1075 + 1;
                  if ((unint64_t)(v1075 + 1) >= v681 || v1075[1] - 48 > 9)
                  {
                    v2142 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1740 = v2142;
                    v2143 = 0x2200000002;
                    v2144 = "Invalid digits after decimal point";
                    goto LABEL_4302;
                  }
                  v1230 = v1075 + 2;
                  do
                  {
                    v1075 = v1230;
                    *v2336 = v1230;
                    if ((unint64_t)v1230 >= v681)
                      break;
                    ++v1230;
                  }
                  while (*v1075 - 48 < 0xA);
                }
                else if (v1076 != 69 && v1076 != 101 && v1075 - v682 <= 9)
                {
                  *v2335 = 6;
                  v1077 = *v682;
                  if (v1077 == 45)
                    v1078 = v682 + 1;
                  else
                    v1078 = v682;
                  if (v1078 >= v1075)
                  {
                    if (v1077 != 45)
                    {
                      v1079 = 0;
LABEL_2258:
                      v1081 = (double)v1079;
LABEL_2259:
                      *(double *)v2328 = v1081;
                      goto LABEL_1953;
                    }
                  }
                  else
                  {
                    v1079 = 0;
                    do
                    {
                      v1080 = *v1078++;
                      v1079 = v1080 + 10 * v1079 - 48;
                    }
                    while (v1078 < v1075);
                    if (v1077 != 45)
                      goto LABEL_2258;
                    if (v1079)
                    {
                      v1079 = -v1079;
                      goto LABEL_2258;
                    }
                  }
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_1953;
                }
              }
              if ((unint64_t)v1075 >= v681 || (*v1075 | 0x20) != 0x65)
              {
LABEL_2600:
                *v2335 = 6;
                if (v1075 - v682 < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>(v682, v1075, &v2340.rlim_cur, 0x2E00000005);
                v1081 = *(double *)&v2340.rlim_cur;
                goto LABEL_2259;
              }
              v2160 = v1075 + 1;
              *v2336 = v1075 + 1;
              if ((unint64_t)(v1075 + 1) < v681)
              {
                v2161 = *v2160;
                if (v2161 == 45 || v2161 == 43)
                {
                  v2160 = v1075 + 2;
                  *v2336 = v1075 + 2;
                }
              }
              if ((unint64_t)v2160 < v681 && *v2160 - 48 <= 9)
              {
                v2162 = v2160 + 1;
                do
                {
                  v1075 = v2162;
                  *v2336 = v2162;
                  if ((unint64_t)v2162 >= v681)
                    break;
                  ++v2162;
                }
                while (*v1075 - 48 < 0xA);
                goto LABEL_2600;
              }
              v2142 = WTF::fastCompactMalloc((WTF *)0x20);
              v1740 = v2142;
              v2143 = 0x5D00000002;
              v2144 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4302:
              *(_QWORD *)v2142 = v2143;
              *(_QWORD *)(v2142 + 8) = v2144;
              *(_DWORD *)(v2142 + 16) = 4;
              goto LABEL_3544;
            }
            if ((v1073 - 49) <= 8)
            {
              v1074 = v1072 + 1;
              do
              {
                v1075 = v1074;
                *v2336 = v1074;
                if ((unint64_t)v1074 >= v681)
                  break;
                ++v1074;
              }
              while (*v1075 - 48 < 0xA);
              goto LABEL_2246;
            }
          }
          v2142 = WTF::fastCompactMalloc((WTF *)0x20);
          v1740 = v2142;
          v2143 = 0xE00000002;
          v2144 = "Invalid number";
          goto LABEL_4302;
        }
        if (v684 != 4)
        {
LABEL_1952:
          *v10 = v684;
          *v12 = v682 + 1;
          goto LABEL_1953;
        }
        v685 = v13;
        v686 = *(unsigned __int8 *)(v8 + 40);
        if ((_DWORD)a4 == 39)
        {
          if (*(_BYTE *)(v8 + 40))
          {
            a3 = (size_t)(v682 + 1);
            *v2336 = v682 + 1;
            goto LABEL_4388;
          }
          v2190 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v2190 = 0x2900000002;
          *(_QWORD *)(v2190 + 8) = "Single quotes (') are not allowed in JSON";
          *(_DWORD *)(v2190 + 16) = 4;
          v1741 = *(WTF::StringImpl **)v2321;
          *(_QWORD *)v2321 = v2190;
          if (!v1741)
            goto LABEL_1953;
          if (*(_DWORD *)v1741 != 2)
          {
            *(_DWORD *)v1741 -= 2;
            goto LABEL_1953;
          }
LABEL_3818:
          WTF::StringImpl::~StringImpl(v1741, v1733, v1734, v1735, v1736, v1737, v1738, v1739);
          WTF::fastFree(v1912, v1913, v1914, v1915, v1916, v1917, v1918, v1919);
          goto LABEL_1953;
        }
        a3 = (size_t)(v682 + 1);
        *v12 = v682 + 1;
        if (!v686)
        {
          v687 = v681 - a3;
          if ((uint64_t)(v681 - a3) < 0)
            goto LABEL_3864;
          v688 = (int8x16_t *)&v682[v687 + 1];
          if (v687 >= 0x10)
          {
            v689 = v682 + 16;
            while (1)
            {
              v690 = *(int8x16_t *)(v689 - 15);
              v691.i64[0] = 0x2222222222222222;
              v691.i64[1] = 0x2222222222222222;
              v692 = vceqq_s8(v690, v691);
              v693.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v693.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v694.i64[0] = 0x2020202020202020;
              v694.i64[1] = 0x2020202020202020;
              v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v690, v693), (int8x16_t)vcgtq_u8(v694, (uint8x16_t)v690)), v692);
              v692.i8[0] = vmaxvq_u8((uint8x16_t)v14);
              if (v692.i32[0])
                break;
              v689 += 16;
              if (v689 >= (unsigned __int8 *)v688)
              {
                if (v689 - 15 >= (unsigned __int8 *)v688)
                  goto LABEL_2042;
                v695 = (unsigned __int8 *)&v688[-1];
                v696 = v688[-1];
                v697.i64[0] = 0x2222222222222222;
                v697.i64[1] = 0x2222222222222222;
                v698 = vceqq_s8(v696, v697);
                v699.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v699.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v696, v699), (int8x16_t)vcgtq_u8(v694, (uint8x16_t)v696)), v698);
                v698.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                if (!v698.i32[0])
                  goto LABEL_2042;
LABEL_2041:
                v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                v688 = (int8x16_t *)&v695[v14.n128_u32[0]];
                goto LABEL_2042;
              }
            }
            v695 = v689 - 15;
            goto LABEL_2041;
          }
          v1518 = (int8x16_t *)(v682 + 1);
          if (v681 == a3)
            goto LABEL_2042;
          do
          {
            if (!JSC::safeStringLatin1CharactersInStrictJSON[v1518->u8[0]])
            {
              v688 = v1518;
              break;
            }
            v1518 = (int8x16_t *)((char *)v1518 + 1);
            --v687;
          }
          while (v687);
LABEL_2042:
          *v2336 = (unsigned __int8 *)v688;
          goto LABEL_2043;
        }
LABEL_4388:
        if (a3 >= v681)
        {
          v688 = (int8x16_t *)a3;
        }
        else
        {
          v688 = (int8x16_t *)a3;
          while (1)
          {
            v2186 = v688->u8[0];
            v2187 = v2186 < 0x20 || v2186 == 92;
            v2188 = v2187 || v2186 == (_DWORD)a4;
            v2189 = v2188;
            if (v2186 != 9 && v2189)
              break;
            v688 = (int8x16_t *)((char *)v688 + 1);
            *v2336 = (unsigned __int8 *)v688;
            if (v688 == (int8x16_t *)&v682[v681 - a3 + 1])
            {
              v688 = (int8x16_t *)&v682[v681 - a3 + 1];
              break;
            }
          }
        }
LABEL_2043:
        if ((unint64_t)v688 < v681 && v688->u8[0] == (_DWORD)a4)
        {
          v944 = a1;
          *(_BYTE *)(a1 + 25) |= 1u;
          *(_QWORD *)(a1 + 32) = a3;
          *(_QWORD *)(a1 + 48) = (char *)v688->i64 + 1;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v688 - a3) & 0x7FFFFFFF;
          *(_BYTE *)(a1 + 24) = 4;
          goto LABEL_2046;
        }
        v1621 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, a3, a4, a5, a6, a7, a8);
        if (v1621 != 4)
        {
LABEL_3339:
          if (v1621 == 5 && *(_BYTE *)(a1 + 88))
            goto LABEL_3341;
LABEL_1953:
          v469 = WTF::fastCompactMalloc((WTF *)0x20);
          v470 = v469;
          *(_QWORD *)v469 = 0x2600000002;
          v472 = "Property name must be a string literal";
          goto LABEL_1081;
        }
LABEL_3341:
        v685 = v13;
        v944 = a1;
        if (*v2335 == 5)
        {
          v1622 = *(_DWORD *)(a1 + 28);
          v947 = v1622 & 0x7FFFFFFF;
          if ((v1622 & 0x7FFFFFFF) == 0)
            goto LABEL_4366;
          v1623 = (char *)v2333 + 64784;
          v948 = *(uint8x8_t **)(a1 + 32);
          a2 = v948->u8[0];
          if ((_DWORD)v947 == 1)
          {
            v1634 = (JSC::VM *)((char *)v2333 + 41968);
            goto LABEL_3378;
          }
          if (v947 >= 0x1C)
          {
LABEL_3506:
            WTF::AtomStringImpl::add((uint64_t)v948, v947, a4, a5, a6, a7, a8, &v2340);
            goto LABEL_3379;
          }
          v1624 = ((((_DWORD)a2 << 6) | (v948->u8[v947 - 1] << 14)) ^ a2) + v948->u8[v947 - 1];
          v1625 = (v1624 + (v1624 >> 6));
          v1626 = &v1623[64 * v1625];
          if ((_DWORD)v947 == *((unsigned __int16 *)v1626 + 27))
          {
            if (v947 >= 8)
            {
              v1627 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v1626, (int16x8_t)vmovl_u8(*v948));
              v1627.i16[0] = vminvq_u16(v1627);
              if (v1627.i32[0])
              {
                v1628 = v1622 & 7;
                v1629 = (int16x8_t *)(v2331 + ((2 * v1628) | (v1625 << 6)));
                while (1)
                {
                  v14 = (__n128)vceqq_s16(*v1629, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v948 + v1628)));
                  v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                  if (!v14.n128_u32[0])
                    break;
                  v1628 += 8;
                  ++v1629;
                  if (v1628 >= v947)
                    goto LABEL_3351;
                }
              }
              goto LABEL_4534;
            }
            if (v947 < 4)
            {
              if (((v948->u16[0] | (v948->u16[0] << 8)) & 0xFF00FF) != *(_DWORD *)v1626
                || ((*(unsigned __int16 *)((char *)v948->u16 + (v1622 & 1)) | (*(unsigned __int16 *)((char *)v948->u16 + (v1622 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)&v1626[2 * (v1622 & 1)])
              {
                goto LABEL_4534;
              }
            }
            else
            {
              v2230 = (v948->u32[0] | ((unint64_t)v948->u32[0] << 16)) & 0xFFFF0000FFFFLL;
              v2231 = (*(unsigned int *)((char *)v948->u32 + (v1622 & 3)) | ((unint64_t)*(unsigned int *)((char *)v948->u32 + (v1622 & 3)) << 16)) & 0xFFFF0000FFFFLL;
              v2232 = (v2231 | (v2231 << 8)) & 0xFF00FF00FF00FFLL;
              if (((v2230 | (v2230 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v1626
                || v2232 != *(_QWORD *)&v1626[2 * (v1622 & 3)])
              {
                goto LABEL_4534;
              }
            }
LABEL_3351:
            v955 = &v1623[64 * v1625];
            goto LABEL_2057;
          }
LABEL_4534:
          WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1622 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
          v13 = (int *)v2340.rlim_cur;
          JSC::Identifier::operator=((WTF::StringImpl **)v1626 + 7, (WTF::AtomStringImpl *)v2340.rlim_cur, v2239, v2240, v2241, v2242, v2243, v2244);
          *((_WORD *)v1626 + 27) = v1622;
          v2245 = 2 * v947;
          do
          {
            v2246 = v948->u8[0];
            v948 = (uint8x8_t *)((char *)v948 + 1);
            *(_WORD *)v1626 = v2246;
            v1626 += 2;
            v2245 -= 2;
          }
          while (v2245);
          goto LABEL_2059;
        }
LABEL_2046:
        v945 = (char *)v2333 + 64784;
        if ((*(_BYTE *)(v944 + 25) & 1) != 0)
        {
          v946 = *(_DWORD *)(v944 + 28);
          v947 = v946 & 0x7FFFFFFF;
          if ((v946 & 0x7FFFFFFF) != 0)
          {
            v948 = *(uint8x8_t **)(v944 + 32);
            a2 = v948->u8[0];
            if ((_DWORD)v947 != 1)
            {
              if (v947 < 0x1C)
              {
                v949 = ((((_DWORD)a2 << 6) | (v948->u8[v947 - 1] << 14)) ^ a2) + v948->u8[v947 - 1];
                v950 = (v949 + (v949 >> 6));
                v951 = &v945[64 * v950];
                if ((_DWORD)v947 != *((unsigned __int16 *)v951 + 27))
                {
LABEL_2340:
                  WTF::AtomStringImpl::add((uint64_t)v948, v946 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                  v13 = (int *)v2340.rlim_cur;
                  JSC::Identifier::operator=((WTF::StringImpl **)v951 + 7, (WTF::AtomStringImpl *)v2340.rlim_cur, v1108, v1109, v1110, v1111, v1112, v1113);
                  *((_WORD *)v951 + 27) = v946;
                  v1114 = 2 * v947;
                  do
                  {
                    v1115 = v948->u8[0];
                    v948 = (uint8x8_t *)((char *)v948 + 1);
                    *(_WORD *)v951 = v1115;
                    v951 += 2;
                    v1114 -= 2;
                  }
                  while (v1114);
                  goto LABEL_2059;
                }
                if (v947 >= 8)
                {
                  v952 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v951, (int16x8_t)vmovl_u8(*v948));
                  v952.i16[0] = vminvq_u16(v952);
                  if (v952.i32[0])
                  {
                    v953 = v946 & 7;
                    v954 = (int16x8_t *)(v2331 + ((2 * v953) | (v950 << 6)));
                    while (1)
                    {
                      v14 = (__n128)vceqq_s16(*v954, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v948 + v953)));
                      v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                      if (!v14.n128_u32[0])
                        break;
                      v953 += 8;
                      ++v954;
                      if (v953 >= v947)
                        goto LABEL_2056;
                    }
                  }
                  goto LABEL_2340;
                }
                if (v947 < 4)
                {
                  if (((v948->u16[0] | (v948->u16[0] << 8)) & 0xFF00FF) != *(_DWORD *)v951
                    || ((*(unsigned __int16 *)((char *)v948->u16 + (v946 & 1)) | (*(unsigned __int16 *)((char *)v948->u16 + (v946 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)&v951[2 * (v946 & 1)])
                  {
                    goto LABEL_2340;
                  }
                }
                else
                {
                  v1042 = (v948->u32[0] | ((unint64_t)v948->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                  v1043 = (*(unsigned int *)((char *)v948->u32 + (v946 & 3)) | ((unint64_t)*(unsigned int *)((char *)v948->u32 + (v946 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                  v1044 = (v1043 | (v1043 << 8)) & 0xFF00FF00FF00FFLL;
                  if (((v1042 | (v1042 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v951
                    || v1044 != *(_QWORD *)&v951[2 * (v946 & 3)])
                  {
                    goto LABEL_2340;
                  }
                }
LABEL_2056:
                v955 = &v945[64 * v950];
                goto LABEL_2057;
              }
              goto LABEL_3506;
            }
            v1634 = (JSC::VM *)((char *)v2333 + 41968);
LABEL_3378:
            JSC::SmallStrings::singleCharacterStringRep(v1634, a2, a4, a5, a6, a7, a8, &v2340);
LABEL_3379:
            v13 = (int *)v2340.rlim_cur;
            goto LABEL_2059;
          }
LABEL_4366:
          v13 = &WTF::StringImpl::s_emptyAtomString;
          goto LABEL_2058;
        }
        v2175 = *(_DWORD *)(v944 + 28);
        v2176 = v2175 & 0x7FFFFFFF;
        if ((v2175 & 0x7FFFFFFF) == 0)
          goto LABEL_4366;
        v2177 = *(int16x8_t **)(a1 + 32);
        v2178 = v2177->u16[0];
        if ((_DWORD)v2176 == 1)
        {
          if (v2178 <= 0xFF)
          {
            v1634 = (JSC::VM *)((char *)v2333 + 41968);
            LODWORD(a2) = v2177->i16[0];
            goto LABEL_3378;
          }
        }
        else if (v2176 >= 0x1C)
        {
          WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v2175 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
          goto LABEL_3379;
        }
        v2179 = (v2178 << 6) ^ (v2177->u16[v2176 - 1] << 14) ^ v2178;
        v2180 = (v2179 + (v2179 >> 14) + ((v2179 + (v2179 >> 14)) >> 6));
        v2181 = &v945[64 * v2180];
        v2182 = v2181 + 54;
        if ((_DWORD)v2176 == *((unsigned __int16 *)v2181 + 27))
        {
          if ((_DWORD)v2176 != 1)
          {
            switch(31 - __clz(v2176 - 1))
            {
              case 0u:
                v2221 = *(_DWORD *)v2181;
                v2222 = v2177->i32[0];
                goto LABEL_4468;
              case 1u:
                if (*(_DWORD *)v2181 != v2177->i32[0])
                  goto LABEL_4724;
                v2221 = *(_DWORD *)&v2181[2 * v2176 - 4];
                v2222 = *(__int32 *)((char *)&v2177->i32[-1] + 2 * v2176);
LABEL_4468:
                if (v2221 == v2222)
                  goto LABEL_4469;
                goto LABEL_4724;
              case 2u:
                if (*(_QWORD *)v2181 != v2177->i64[0]
                  || *(_QWORD *)&v2181[2 * v2176 - 8] != *(uint64_t *)((char *)&v2177->i64[-1] + 2 * v2176))
                {
                  goto LABEL_4724;
                }
                goto LABEL_4469;
              case 3u:
                v14 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v2181[2 * v2176 - 16], *(int16x8_t *)((char *)v2177 + 2 * v2176 - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v2181, *v2177));
                v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                if (!v14.n128_u32[0])
                  goto LABEL_4724;
                goto LABEL_4469;
              default:
                v14 = (__n128)vceqq_s16(*(int16x8_t *)v2181, *v2177);
                v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                if (!v14.n128_u32[0])
                  goto LABEL_4724;
                v2304 = v2175 & 7;
                if ((*(_DWORD *)(v944 + 28) & 7u) >= v2176)
                  goto LABEL_4469;
                v2305 = (int16x8_t *)((char *)v2177 + 2 * v2304);
                v2306 = (int16x8_t *)(v2331 + ((2 * v2304) | (v2180 << 6)));
                break;
            }
            while (1)
            {
              v14 = (__n128)vceqq_s16(*v2306, *v2305);
              v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
              if (!v14.n128_u32[0])
                goto LABEL_4724;
              v2304 += 8;
              ++v2305;
              ++v2306;
              if (v2304 >= v2176)
                goto LABEL_4469;
            }
          }
          if (*(unsigned __int16 *)v2181 != v2178)
          {
            WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v2175 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
            v13 = (int *)v2340.rlim_cur;
            JSC::Identifier::operator=((WTF::StringImpl **)&v945[64 * v2180 + 56], (WTF::AtomStringImpl *)v2340.rlim_cur, v2313, v2314, v2315, v2316, v2317, v2318);
            *v2182 = v2175;
            goto LABEL_4736;
          }
LABEL_4469:
          v955 = &v945[64 * v2180];
LABEL_2057:
          v13 = (int *)*((_QWORD *)v955 + 7);
LABEL_2058:
          *v13 += 2;
          goto LABEL_2059;
        }
LABEL_4724:
        WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v2175 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
        v13 = (int *)v2340.rlim_cur;
        JSC::Identifier::operator=((WTF::StringImpl **)v2181 + 7, (WTF::AtomStringImpl *)v2340.rlim_cur, v2307, v2308, v2309, v2310, v2311, v2312);
        *v2182 = v2175;
        if (v2176 == 1)
        {
LABEL_4736:
          *(_WORD *)v2181 = v2177->i16[0];
          goto LABEL_2059;
        }
        if ((v2175 & 0x7FFFFFFF) != 0)
          memcpy(&v945[64 * v2180], v2177, 2 * v2176);
LABEL_2059:
        v2344 = (WTF::AtomStringImpl *)v13;
        v956 = *(unsigned int *)(a1 + 252);
        if ((_DWORD)v956 == *(_DWORD *)(a1 + 248))
        {
          WTF::Vector<JSC::Identifier,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(a1 + 240, (unint64_t)&v2344);
        }
        else
        {
          v957 = *(_QWORD *)(a1 + 240);
          v2344 = 0;
          *(_QWORD *)(v957 + 8 * v956) = v13;
          *(_DWORD *)(a1 + 252) = v956 + 1;
        }
        v958 = v2344;
        v2344 = 0;
        if (v958)
        {
          if (*(_DWORD *)v958 == 2)
          {
            WTF::StringImpl::~StringImpl(v958, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v1135, v1136, v1137, v1138, v1139, v1140, v1141, v1142);
          }
          else
          {
            *(_DWORD *)v958 -= 2;
          }
        }
        v960 = *(unsigned __int8 **)(a1 + 48);
        v959 = *(_QWORD *)(a1 + 56);
        if ((unint64_t)v960 < v959)
        {
          v961 = v959 - (_QWORD)v960;
          while (JSC::tokenTypesOfLatin1Characters[*v960] == 19)
          {
            *v2336 = ++v960;
            if (!--v961)
            {
              v960 = (unsigned __int8 *)v959;
              break;
            }
          }
        }
        if (v960 == (unsigned __int8 *)v959)
        {
          v1446 = 14;
          goto LABEL_3093;
        }
        *v2335 = 18;
        a4 = *v960;
        v962 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v962 > 4)
        {
          if (v962 != 6)
          {
            if (v962 != 5)
            {
              if (v962 - 18 < 2)
              {
                WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                v1861 = v2340.rlim_cur;
                if (!v2340.rlim_cur)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B08694);
                }
                *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                *(_QWORD *)(v1861 + 8) = v1861 + 20;
                *(_DWORD *)(v1861 + 16) = 4;
                *(_DWORD *)(v1861 + 36) = 656436837;
                *(_OWORD *)(v1861 + 20) = *(_OWORD *)"Unrecognized token '";
                *(_BYTE *)(v1861 + 40) = *v960;
                *(_BYTE *)(v1861 + 41) = 39;
                goto LABEL_3733;
              }
LABEL_2216:
              *v2335 = v962;
              *v2336 = v960 + 1;
              goto LABEL_2217;
            }
            if ((_DWORD)a4 == 110)
            {
              if ((uint64_t)(v959 - (_QWORD)v960) >= 4 && *(_WORD *)(v960 + 1) == 27765 && v960[3] == 108)
              {
                *v2336 = v960 + 4;
                v1446 = 13;
LABEL_3093:
                *v2335 = v1446;
                goto LABEL_2330;
              }
            }
            else if ((_DWORD)a4 == 102)
            {
              if ((uint64_t)(v959 - (_QWORD)v960) >= 5 && *(_WORD *)(v960 + 1) == 27745 && *(_WORD *)(v960 + 3) == 25971)
              {
                *v2336 = v960 + 5;
                v1446 = 12;
                goto LABEL_3093;
              }
            }
            else if ((_DWORD)a4 == 116
                   && (uint64_t)(v959 - (_QWORD)v960) >= 4
                   && *(_WORD *)(v960 + 1) == 30066
                   && v960[3] == 101)
            {
              *v2336 = v960 + 4;
              v1446 = 11;
              goto LABEL_3093;
            }
            v1947 = (int)v960;
            *v2328 = (WTF::AtomStringImpl *)v960;
            v1948 = (int)v960;
            if ((unint64_t)v960 < v959)
            {
              v1949 = v959 - (_QWORD)v960;
              v1950 = (_DWORD)v960 + v1949;
              do
              {
                v1951 = *v960;
                if (v1951 != 36)
                {
                  v1952 = v1951 != 95 && (v1951 - 48) >= 0xA;
                  if (v1952 && (v1951 | 0x20u) - 97 > 0x19)
                    goto LABEL_3915;
                }
                *v2336 = ++v960;
                --v1949;
              }
              while (v1949);
              LODWORD(v960) = v1950;
LABEL_3915:
              v1948 = (int)v960;
            }
            v1954 = v1948 - v1947;
            v1103 = a1;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | v1954 & 0x7FFFFFFF;
            v1104 = 5;
            goto LABEL_2329;
          }
          v1165 = v960;
          if ((unint64_t)v960 < v959)
          {
            v1165 = v960;
            if ((_DWORD)a4 == 45)
            {
              v1165 = v960 + 1;
              *v2336 = v960 + 1;
            }
          }
          if ((unint64_t)v1165 < v959)
          {
            v1166 = *v1165;
            if (v1166 == 48)
            {
              v1168 = v1165 + 1;
              *v2336 = v1168;
LABEL_2448:
              if ((unint64_t)v1168 < v959)
              {
                v1169 = *v1168;
                if (v1169 == 46)
                {
                  *v2336 = v1168 + 1;
                  if ((unint64_t)(v1168 + 1) >= v959 || v1168[1] - 48 > 9)
                  {
                    v2191 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1861 = v2191;
                    v2192 = 0x2200000002;
                    v2193 = "Invalid digits after decimal point";
                    goto LABEL_4502;
                  }
                  v1320 = v1168 + 2;
                  do
                  {
                    v1168 = v1320;
                    *v2336 = v1320;
                    if ((unint64_t)v1320 >= v959)
                      break;
                    ++v1320;
                  }
                  while (*v1168 - 48 < 0xA);
                }
                else if (v1169 != 69 && v1169 != 101 && v1168 - v960 <= 9)
                {
                  *v2335 = 6;
                  v1170 = *v960;
                  if (v1170 == 45)
                    v1171 = v960 + 1;
                  else
                    v1171 = v960;
                  if (v1171 >= v1168)
                  {
                    if (v1170 != 45)
                    {
                      v1172 = 0;
LABEL_2460:
                      v1174 = (double)v1172;
LABEL_2461:
                      *(double *)v2328 = v1174;
                      goto LABEL_2330;
                    }
                  }
                  else
                  {
                    v1172 = 0;
                    do
                    {
                      v1173 = *v1171++;
                      v1172 = v1173 + 10 * v1172 - 48;
                    }
                    while (v1171 < v1168);
                    if (v1170 != 45)
                      goto LABEL_2460;
                    if (v1172)
                    {
                      v1172 = -v1172;
                      goto LABEL_2460;
                    }
                  }
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_2330;
                }
              }
              if ((unint64_t)v1168 >= v959 || (*v1168 | 0x20) != 0x65)
              {
LABEL_2801:
                *v2335 = 6;
                if (v1168 - v960 < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>(v960, v1168, &v2340.rlim_cur, 0x2E00000005);
                v1174 = *(double *)&v2340.rlim_cur;
                goto LABEL_2461;
              }
              v2201 = v1168 + 1;
              *v2336 = v1168 + 1;
              if ((unint64_t)(v1168 + 1) < v959)
              {
                v2202 = *v2201;
                if (v2202 == 45 || v2202 == 43)
                {
                  v2201 = v1168 + 2;
                  *v2336 = v1168 + 2;
                }
              }
              if ((unint64_t)v2201 < v959 && *v2201 - 48 <= 9)
              {
                v2203 = v2201 + 1;
                do
                {
                  v1168 = v2203;
                  *v2336 = v2203;
                  if ((unint64_t)v2203 >= v959)
                    break;
                  ++v2203;
                }
                while (*v1168 - 48 < 0xA);
                goto LABEL_2801;
              }
              v2191 = WTF::fastCompactMalloc((WTF *)0x20);
              v1861 = v2191;
              v2192 = 0x5D00000002;
              v2193 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4502:
              *(_QWORD *)v2191 = v2192;
              *(_QWORD *)(v2191 + 8) = v2193;
              *(_DWORD *)(v2191 + 16) = 4;
LABEL_3733:
              v1862 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1861;
              if (v1862)
              {
                if (*(_DWORD *)v1862 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1862, v1854, v1855, v1856, v1857, v1858, v1859, v1860);
                  WTF::fastFree(v1939, v1940, v1941, v1942, v1943, v1944, v1945, v1946);
                }
                else
                {
                  *(_DWORD *)v1862 -= 2;
                }
              }
              goto LABEL_2330;
            }
            if ((v1166 - 49) <= 8)
            {
              v1167 = v1165 + 1;
              do
              {
                v1168 = v1167;
                *v2336 = v1167;
                if ((unint64_t)v1167 >= v959)
                  break;
                ++v1167;
              }
              while (*v1168 - 48 < 0xA);
              goto LABEL_2448;
            }
          }
          v2191 = WTF::fastCompactMalloc((WTF *)0x20);
          v1861 = v2191;
          v2192 = 0xE00000002;
          v2193 = "Invalid number";
          goto LABEL_4502;
        }
        if (v962 != 4)
          goto LABEL_2216;
        v963 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)a4 == 39)
        {
          if (*(_BYTE *)(a1 + 40))
          {
            v964 = (size_t)(v960 + 1);
            *v2336 = v960 + 1;
LABEL_4486:
            if (v964 >= v959)
            {
              v966 = (int8x16_t *)v964;
            }
            else
            {
              v966 = (int8x16_t *)v964;
              while (1)
              {
                v2226 = v966->u8[0];
                v2227 = v2226 < 0x20 || v2226 == 92;
                v2228 = v2227 || v2226 == (_DWORD)a4;
                v2229 = v2228;
                if (v2226 != 9 && v2229)
                  break;
                v966 = (int8x16_t *)((char *)v966 + 1);
                *v2336 = (unsigned __int8 *)v966;
                if (v966 == (int8x16_t *)&v960[v959 - v964 + 1])
                {
                  v966 = (int8x16_t *)&v960[v959 - v964 + 1];
                  goto LABEL_2326;
                }
              }
            }
            goto LABEL_2326;
          }
          v2191 = WTF::fastCompactMalloc((WTF *)0x20);
          v1861 = v2191;
          v2192 = 0x2900000002;
          v2193 = "Single quotes (') are not allowed in JSON";
          goto LABEL_4502;
        }
        v964 = (size_t)(v960 + 1);
        *v2336 = v960 + 1;
        if (v963)
          goto LABEL_4486;
        v965 = v959 - v964;
        if ((uint64_t)(v959 - v964) < 0)
          goto LABEL_3864;
        v966 = (int8x16_t *)&v960[v965 + 1];
        if (v965 >= 0x10)
        {
          v967 = v960 + 16;
          while (1)
          {
            v968 = *(int8x16_t *)(v967 - 15);
            v969.i64[0] = 0x2222222222222222;
            v969.i64[1] = 0x2222222222222222;
            v970 = vceqq_s8(v968, v969);
            v971.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v971.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v972.i64[0] = 0x2020202020202020;
            v972.i64[1] = 0x2020202020202020;
            v973 = vorrq_s8(vorrq_s8(vceqq_s8(v968, v971), (int8x16_t)vcgtq_u8(v972, (uint8x16_t)v968)), v970);
            v970.i8[0] = vmaxvq_u8((uint8x16_t)v973);
            if (v970.i32[0])
              break;
            v967 += 16;
            if (v967 >= (unsigned __int8 *)v966)
            {
              if (v967 - 15 >= (unsigned __int8 *)v966)
                goto LABEL_2325;
              v974 = (unsigned __int8 *)&v966[-1];
              v975 = v966[-1];
              v976.i64[0] = 0x2222222222222222;
              v976.i64[1] = 0x2222222222222222;
              v977 = vceqq_s8(v975, v976);
              v978.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v978.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v973 = vorrq_s8(vorrq_s8(vceqq_s8(v975, v978), (int8x16_t)vcgtq_u8(v972, (uint8x16_t)v975)), v977);
              v977.i8[0] = vmaxvq_u8((uint8x16_t)v973);
              if (!v977.i32[0])
                goto LABEL_2325;
LABEL_2324:
              v1102 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v973);
              v1102.i8[0] = vminvq_u8(v1102);
              v966 = (int8x16_t *)&v974[v1102.u32[0]];
              goto LABEL_2325;
            }
          }
          v974 = v967 - 15;
          goto LABEL_2324;
        }
        v1700 = (int8x16_t *)(v960 + 1);
        if (v959 == v964)
          goto LABEL_2325;
        do
        {
          if (!JSC::safeStringLatin1CharactersInStrictJSON[v1700->u8[0]])
          {
            v966 = v1700;
            break;
          }
          v1700 = (int8x16_t *)((char *)v1700 + 1);
          --v965;
        }
        while (v965);
LABEL_2325:
        *v2336 = (unsigned __int8 *)v966;
LABEL_2326:
        if ((unint64_t)v966 < v959 && v966->u8[0] == (_DWORD)a4)
        {
          v1103 = a1;
          *(_BYTE *)(a1 + 25) |= 1u;
          *(_QWORD *)(a1 + 32) = v964;
          *(_QWORD *)(a1 + 48) = (char *)v966->i64 + 1;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v966 - v964) & 0x7FFFFFFF;
          v1104 = 4;
LABEL_2329:
          *(_BYTE *)(v1103 + 24) = v1104;
          goto LABEL_2330;
        }
        v962 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v964, a4, a5, a6, a7, a8);
LABEL_2217:
        if (v962 != 7)
        {
LABEL_2330:
          v1105 = a1;
          v1106 = 7;
          goto LABEL_2331;
        }
        v1047 = *(unsigned __int8 **)(a1 + 48);
        v1046 = *(_QWORD *)(a1 + 56);
        if ((unint64_t)v1047 < v1046)
        {
          v1048 = v1046 - (_QWORD)v1047;
          while (JSC::tokenTypesOfLatin1Characters[*v1047] == 19)
          {
            *v2336 = ++v1047;
            if (!--v1048)
            {
              v1047 = (unsigned __int8 *)v1046;
              break;
            }
          }
        }
        if (v1047 == (unsigned __int8 *)v1046)
        {
          v1538 = 14;
          goto LABEL_3253;
        }
        *v2335 = 18;
        a4 = *v1047;
        v1049 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v1049 > 4)
        {
          if (v1049 != 6)
          {
            if (v1049 != 5)
            {
              if (v1049 - 18 < 2)
              {
                WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                v1903 = v2340.rlim_cur;
                if (!v2340.rlim_cur)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B0612CLL);
                }
                *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                *(_QWORD *)(v1903 + 8) = v1903 + 20;
                *(_DWORD *)(v1903 + 16) = 4;
                *(_DWORD *)(v1903 + 36) = 656436837;
                v14 = *(__n128 *)"Unrecognized token '";
                *(_OWORD *)(v1903 + 20) = *(_OWORD *)"Unrecognized token '";
                *(_BYTE *)(v1903 + 40) = *v1047;
                *(_BYTE *)(v1903 + 41) = 39;
                goto LABEL_3801;
              }
              goto LABEL_2294;
            }
            if ((_DWORD)a4 == 110)
            {
              if ((uint64_t)(v1046 - (_QWORD)v1047) >= 4 && *(_WORD *)(v1047 + 1) == 27765 && v1047[3] == 108)
              {
                *v2336 = v1047 + 4;
                v1538 = 13;
LABEL_3253:
                *v2335 = v1538;
                goto LABEL_2296;
              }
            }
            else if ((_DWORD)a4 == 102)
            {
              if ((uint64_t)(v1046 - (_QWORD)v1047) >= 5
                && *(_WORD *)(v1047 + 1) == 27745
                && *(_WORD *)(v1047 + 3) == 25971)
              {
                *v2336 = v1047 + 5;
                v1538 = 12;
                goto LABEL_3253;
              }
            }
            else if ((_DWORD)a4 == 116
                   && (uint64_t)(v1046 - (_QWORD)v1047) >= 4
                   && *(_WORD *)(v1047 + 1) == 30066
                   && v1047[3] == 101)
            {
              *v2336 = v1047 + 4;
              v1538 = 11;
              goto LABEL_3253;
            }
            v1969 = (int)v1047;
            *v2328 = (WTF::AtomStringImpl *)v1047;
            v1970 = (int)v1047;
            if ((unint64_t)v1047 < v1046)
            {
              v1971 = v1046 - (_QWORD)v1047;
              v1972 = (_DWORD)v1047 + v1971;
              while (1)
              {
                v1973 = *v1047;
                if (v1973 != 36)
                {
                  v1974 = v1973 != 95 && (v1973 - 48) >= 0xA;
                  if (v1974 && (v1973 | 0x20u) - 97 > 0x19)
                    break;
                }
                *v2336 = ++v1047;
                if (!--v1971)
                {
                  LODWORD(v1047) = v1972;
                  break;
                }
              }
              v1970 = (int)v1047;
            }
            v1976 = v1970 - v1969;
            v1144 = a1;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | v1976 & 0x7FFFFFFF;
            v1145 = 5;
            goto LABEL_2418;
          }
          v1194 = v1047;
          if ((unint64_t)v1047 < v1046)
          {
            v1194 = v1047;
            if ((_DWORD)a4 == 45)
            {
              v1194 = v1047 + 1;
              *v2336 = v1047 + 1;
            }
          }
          if ((unint64_t)v1194 < v1046)
          {
            v1195 = *v1194;
            if (v1195 == 48)
            {
              v1197 = v1194 + 1;
              *v2336 = v1197;
LABEL_2516:
              if ((unint64_t)v1197 < v1046)
              {
                v1198 = *v1197;
                if (v1198 == 46)
                {
                  *v2336 = v1197 + 1;
                  if ((unint64_t)(v1197 + 1) >= v1046 || v1197[1] - 48 > 9)
                  {
                    v2204 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1903 = v2204;
                    v14.n128_u64[0] = 0x2200000002;
                    v2205 = "Invalid digits after decimal point";
                    goto LABEL_4449;
                  }
                  v1379 = v1197 + 2;
                  do
                  {
                    v1197 = v1379;
                    *v2336 = v1379;
                    if ((unint64_t)v1379 >= v1046)
                      break;
                    ++v1379;
                  }
                  while (*v1197 - 48 < 0xA);
                }
                else if (v1198 != 69 && v1198 != 101 && v1197 - v1047 <= 9)
                {
                  *v2335 = 6;
                  v1199 = *v1047;
                  if (v1199 == 45)
                    v1200 = v1047 + 1;
                  else
                    v1200 = v1047;
                  if (v1200 >= v1197)
                  {
                    if (v1199 != 45)
                    {
                      v1201 = 0;
LABEL_2528:
                      v14.n128_f64[0] = (double)v1201;
LABEL_2529:
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                      goto LABEL_2296;
                    }
                  }
                  else
                  {
                    v1201 = 0;
                    do
                    {
                      v1202 = *v1200++;
                      v1201 = v1202 + 10 * v1201 - 48;
                    }
                    while (v1200 < v1197);
                    if (v1199 != 45)
                      goto LABEL_2528;
                    if (v1201)
                    {
                      v14.n128_f64[0] = (double)-v1201;
                      goto LABEL_2529;
                    }
                  }
                  v1090 = 0x8000000000000000;
                  v1091 = v2328;
                  goto LABEL_2295;
                }
              }
              if ((unint64_t)v1197 >= v1046 || (*v1197 | 0x20) != 0x65)
              {
LABEL_2948:
                *v2335 = 6;
                if (v1197 - v1047 < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>(v1047, v1197, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_2529;
              }
              v2223 = v1197 + 1;
              *v2336 = v1197 + 1;
              if ((unint64_t)(v1197 + 1) < v1046)
              {
                v2224 = *v2223;
                if (v2224 == 45 || v2224 == 43)
                {
                  v2223 = v1197 + 2;
                  *v2336 = v1197 + 2;
                }
              }
              if ((unint64_t)v2223 < v1046 && *v2223 - 48 <= 9)
              {
                v2225 = v2223 + 1;
                do
                {
                  v1197 = v2225;
                  *v2336 = v2225;
                  if ((unint64_t)v2225 >= v1046)
                    break;
                  ++v2225;
                }
                while (*v1197 - 48 < 0xA);
                goto LABEL_2948;
              }
              v2204 = WTF::fastCompactMalloc((WTF *)0x20);
              v1903 = v2204;
              v14.n128_u64[0] = 0x5D00000002;
              v2205 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4449:
              *(_QWORD *)v2204 = v14.n128_u64[0];
              *(_QWORD *)(v2204 + 8) = v2205;
              *(_DWORD *)(v2204 + 16) = 4;
LABEL_3801:
              v1904 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1903;
              if (v1904)
              {
                if (*(_DWORD *)v1904 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1904, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v1977, v1978, v1979, v1980, v1981, v1982, v1983, v1984);
                }
                else
                {
                  *(_DWORD *)v1904 -= 2;
                }
              }
              goto LABEL_2296;
            }
            if ((v1195 - 49) <= 8)
            {
              v1196 = v1194 + 1;
              do
              {
                v1197 = v1196;
                *v2336 = v1196;
                if ((unint64_t)v1196 >= v1046)
                  break;
                ++v1196;
              }
              while (*v1197 - 48 < 0xA);
              goto LABEL_2516;
            }
          }
          v2204 = WTF::fastCompactMalloc((WTF *)0x20);
          v1903 = v2204;
          v14.n128_u64[0] = 0xE00000002;
          v2205 = "Invalid number";
          goto LABEL_4449;
        }
        if (v1049 != 4)
        {
LABEL_2294:
          *v2335 = v1049;
          v1090 = (unint64_t)(v1047 + 1);
          v1091 = v2336;
LABEL_2295:
          *v1091 = v1090;
          goto LABEL_2296;
        }
        v1050 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)a4 == 39)
        {
          if (*(_BYTE *)(a1 + 40))
          {
            a3 = (size_t)(v1047 + 1);
            *v2336 = v1047 + 1;
LABEL_4515:
            if (a3 >= v1046)
            {
              v1052 = (int8x16_t *)a3;
            }
            else
            {
              v1052 = (int8x16_t *)a3;
              while (1)
              {
                v2234 = v1052->u8[0];
                v2235 = v2234 < 0x20 || v2234 == 92;
                v2236 = v2235 || v2234 == (_DWORD)a4;
                v2237 = v2236;
                if (v2234 != 9 && v2237)
                  break;
                v1052 = (int8x16_t *)((char *)v1052 + 1);
                *v2336 = (unsigned __int8 *)v1052;
                if (v1052 == (int8x16_t *)&v1047[v1046 - a3 + 1])
                {
                  v1052 = (int8x16_t *)&v1047[v1046 - a3 + 1];
                  goto LABEL_2415;
                }
              }
            }
            goto LABEL_2415;
          }
          v2204 = WTF::fastCompactMalloc((WTF *)0x20);
          v1903 = v2204;
          v14.n128_u64[0] = 0x2900000002;
          v2205 = "Single quotes (') are not allowed in JSON";
          goto LABEL_4449;
        }
        a3 = (size_t)(v1047 + 1);
        *v2336 = v1047 + 1;
        if (v1050)
          goto LABEL_4515;
        v1051 = v1046 - a3;
        if ((uint64_t)(v1046 - a3) < 0)
          goto LABEL_3864;
        v1052 = (int8x16_t *)&v1047[v1051 + 1];
        if (v1051 >= 0x10)
        {
          v1053 = v1047 + 16;
          while (1)
          {
            v1054 = *(int8x16_t *)(v1053 - 15);
            v1055.i64[0] = 0x2222222222222222;
            v1055.i64[1] = 0x2222222222222222;
            v1056 = vceqq_s8(v1054, v1055);
            v1057.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v1057.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v1058.i64[0] = 0x2020202020202020;
            v1058.i64[1] = 0x2020202020202020;
            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1054, v1057), (int8x16_t)vcgtq_u8(v1058, (uint8x16_t)v1054)), v1056);
            v1056.i8[0] = vmaxvq_u8((uint8x16_t)v14);
            if (v1056.i32[0])
              break;
            v1053 += 16;
            if (v1053 >= (unsigned __int8 *)v1052)
            {
              if (v1053 - 15 >= (unsigned __int8 *)v1052)
                goto LABEL_2414;
              v1059 = (unsigned __int8 *)&v1052[-1];
              v1060 = v1052[-1];
              v1061.i64[0] = 0x2222222222222222;
              v1061.i64[1] = 0x2222222222222222;
              v1062 = vceqq_s8(v1060, v1061);
              v1063.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v1063.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1060, v1063), (int8x16_t)vcgtq_u8(v1058, (uint8x16_t)v1060)), v1062);
              v1062.i8[0] = vmaxvq_u8((uint8x16_t)v14);
              if (!v1062.i32[0])
                goto LABEL_2414;
LABEL_2413:
              v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
              v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
              v1052 = (int8x16_t *)&v1059[v14.n128_u32[0]];
              goto LABEL_2414;
            }
          }
          v1059 = v1053 - 15;
          goto LABEL_2413;
        }
        v1732 = (int8x16_t *)(v1047 + 1);
        if (v1046 == a3)
          goto LABEL_2414;
        do
        {
          if (!JSC::safeStringLatin1CharactersInStrictJSON[v1732->u8[0]])
          {
            v1052 = v1732;
            break;
          }
          v1732 = (int8x16_t *)((char *)v1732 + 1);
          --v1051;
        }
        while (v1051);
LABEL_2414:
        *v2336 = (unsigned __int8 *)v1052;
LABEL_2415:
        if ((unint64_t)v1052 < v1046 && v1052->u8[0] == (_DWORD)a4)
        {
          v1144 = a1;
          *(_BYTE *)(a1 + 25) |= 1u;
          *(_QWORD *)(a1 + 32) = a3;
          *(_QWORD *)(a1 + 48) = (char *)v1052->i64 + 1;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v1052 - a3) & 0x7FFFFFFF;
          v1145 = 4;
LABEL_2418:
          *(_BYTE *)(v1144 + 24) = v1145;
          goto LABEL_2296;
        }
        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, a3, a4, a5, a6, a7, a8);
LABEL_2296:
        LOBYTE(v2340.rlim_cur) = 6;
        v1092 = *(unsigned int *)(a1 + 220);
        if ((_DWORD)v1092 == *(_DWORD *)(a1 + 216))
        {
          WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(v2320, (unint64_t)&v2340);
          v13 = v685;
          v11 = v2328;
          v10 = v2335;
          v12 = v2336;
          v8 = a1;
        }
        else
        {
          v8 = a1;
          v10 = v2335;
          *(_BYTE *)(*(_QWORD *)(a1 + 208) + v1092) = 6;
          *(_DWORD *)(a1 + 220) = v1092 + 1;
          v13 = v685;
          v11 = v2328;
          v12 = v2336;
        }
LABEL_34:
        if (*v10 != 2)
        {
          switch(*v10)
          {
            case 0:
              goto LABEL_947;
            case 1:
              goto LABEL_2666;
            case 3:
              goto LABEL_2665;
            case 4:
              v489 = *(_DWORD *)(v8 + 28);
              v490 = v489 & 0x7FFFFFFF;
              if ((*(_BYTE *)(v8 + 25) & 1) != 0)
              {
                if ((v489 & 0x7FFFFFFFu) >= 0xB)
                {
                  WTF::String::String((uint64_t *)&v2340, *v11, v490);
                  v497 = JSC::jsNontrivialString((uint64_t)v2333, (JSC::VM *)&v2340, v774, v775, v776, v777, v778, v779);
                }
                else
                {
                  JSC::Identifier::fromString((uint64_t)v2333, *v11, v490, a4, a5, a6, a7, a8, &v2340.rlim_cur);
                  v497 = JSC::jsString(v2333, (JSC::VM *)&v2340, v491, v492, v493, v494, v495, v496);
                }
                v499 = v497;
                v500 = (WTF::StringImpl *)v2340.rlim_cur;
                v2340.rlim_cur = 0;
                if (v500)
                {
                  if (*(_DWORD *)v500 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v500, (WTF::AtomStringImpl *)a2, v498, a4, a5, a6, a7, a8);
                    WTF::fastFree(v908, v909, v910, v911, v912, v913, v914, v915);
                  }
                  else
                  {
                    *(_DWORD *)v500 -= 2;
                  }
                }
              }
              else
              {
                if ((v489 & 0x7FFFFFFFu) >= 0xB)
                {
                  WTF::String::String((int **)&v2340, *v2328, v490);
                  v2081 = JSC::jsNontrivialString((uint64_t)v2333, (JSC::VM *)&v2340, v2039, v2040, v2041, v2042, v2043, v2044);
                }
                else
                {
                  JSC::Identifier::fromString((uint64_t)v2333, *v2328, v490, a4, a5, a6, a7, a8, &v2340);
                  v2081 = JSC::jsString(v2333, (JSC::VM *)&v2340, v2075, v2076, v2077, v2078, v2079, v2080);
                }
                v499 = v2081;
                v2083 = (WTF::StringImpl *)v2340.rlim_cur;
                v2340.rlim_cur = 0;
                if (v2083)
                {
                  if (*(_DWORD *)v2083 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v2083, (WTF::AtomStringImpl *)a2, v2082, a4, a5, a6, a7, a8);
                    WTF::fastFree(v2145, v2146, v2147, v2148, v2149, v2150, v2151, v2152);
                  }
                  else
                  {
                    *(_DWORD *)v2083 -= 2;
                  }
                }
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
              }
              v502 = *(_QWORD *)(v8 + 48);
              v501 = *(_QWORD *)(v8 + 56);
              if (v502 < v501)
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v502] != 19)
                {
                  v503 = 1;
                  goto LABEL_1195;
                }
                v770 = *(unsigned __int8 **)(v8 + 56);
                v771 = (unsigned __int8 *)(v502 + 1);
                v772 = ~v502 + v501;
                do
                {
                  v773 = v771;
                  *v12 = v771;
                  if (!v772)
                    goto LABEL_1675;
                  ++v771;
                  --v772;
                }
                while (JSC::tokenTypesOfLatin1Characters[*v773] == 19);
                v770 = v773;
LABEL_1675:
                v503 = (unint64_t)v773 < v501;
                v502 = (unint64_t)v770;
                goto LABEL_1195;
              }
              v503 = 0;
LABEL_1195:
              if (v502 == v501)
              {
                v505 = v499;
                *v10 = 14;
                goto LABEL_1664;
              }
              *v10 = 18;
              a4 = *(unsigned __int8 *)v502;
              v504 = JSC::tokenTypesOfLatin1Characters[a4];
              v505 = v499;
              if (v504 <= 4)
              {
                if (v504 == 4)
                {
                  v506 = *(unsigned __int8 *)(v8 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    v507 = v502 + 1;
                    *v12 = (unsigned __int8 *)(v502 + 1);
                    if (!v506)
                    {
                      v508 = v501 - v507;
                      if ((uint64_t)(v501 - v507) < 0)
                        goto LABEL_3864;
                      v509 = (int8x16_t *)(v508 + v502 + 1);
                      if (v508 >= 0x10)
                      {
                        v510 = (unsigned __int8 *)(v502 + 16);
                        while (1)
                        {
                          v511 = *(int8x16_t *)(v510 - 15);
                          v512.i64[0] = 0x2222222222222222;
                          v512.i64[1] = 0x2222222222222222;
                          v513 = vceqq_s8(v511, v512);
                          v514.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v514.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v515.i64[0] = 0x2020202020202020;
                          v515.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v511, v514), (int8x16_t)vcgtq_u8(v515, (uint8x16_t)v511)), v513);
                          v513.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v513.i32[0])
                            break;
                          v510 += 16;
                          if (v510 >= (unsigned __int8 *)v509)
                          {
                            if (v510 - 15 >= (unsigned __int8 *)v509)
                              goto LABEL_1851;
                            v516 = (unsigned __int8 *)&v509[-1];
                            v517 = v509[-1];
                            v518.i64[0] = 0x2222222222222222;
                            v518.i64[1] = 0x2222222222222222;
                            v519 = vceqq_s8(v517, v518);
                            v520.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v520.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v517, v520), (int8x16_t)vcgtq_u8(v515, (uint8x16_t)v517)), v519);
                            v519.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (!v519.i32[0])
                              goto LABEL_1851;
LABEL_1850:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v509 = (int8x16_t *)&v516[v14.n128_u32[0]];
                            goto LABEL_1851;
                          }
                        }
                        v516 = v510 - 15;
                        goto LABEL_1850;
                      }
                      v1431 = (int8x16_t *)(v502 + 1);
                      if (v501 == v507)
                        goto LABEL_1851;
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v1431->u8[0]])
                        {
                          v509 = v1431;
                          break;
                        }
                        v1431 = (int8x16_t *)((char *)v1431 + 1);
                        --v508;
                      }
                      while (v508);
LABEL_1851:
                      v12 = v2336;
                      *v2336 = (unsigned __int8 *)v509;
                      goto LABEL_1852;
                    }
                    v933 = v13;
LABEL_2142:
                    if (v507 >= v501)
                    {
                      v509 = (int8x16_t *)v507;
                      v13 = v933;
                      v11 = v2328;
                      v12 = v2336;
                      goto LABEL_1853;
                    }
                    v509 = (int8x16_t *)v507;
                    v12 = v2336;
                    do
                    {
                      v1008 = v509->u8[0];
                      v1011 = v1008 < 0x20 || v1008 == 92 || v1008 == (_DWORD)a4;
                      if (v1008 != 9 && v1011)
                        goto LABEL_2157;
                      v509 = (int8x16_t *)((char *)v509 + 1);
                      *v2336 = (unsigned __int8 *)v509;
                    }
                    while (v509 != (int8x16_t *)(v502 + v501 - v507 + 1));
                    v509 = (int8x16_t *)(v502 + v501 - v507 + 1);
LABEL_2157:
                    v13 = v933;
LABEL_1852:
                    v11 = v2328;
LABEL_1853:
                    v8 = a1;
                    v10 = v2335;
                    if ((unint64_t)v509 < v501 && v509->u8[0] == (_DWORD)a4)
                    {
                      *(_BYTE *)(a1 + 25) |= 1u;
                      *(_QWORD *)(a1 + 32) = v507;
                      *(_QWORD *)(a1 + 48) = (char *)v509->i64 + 1;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v509 - v507) & 0x7FFFFFFF;
                      *(_BYTE *)(a1 + 24) = 4;
                    }
                    else
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v507, a4, a5, a6, a7, a8);
                    }
                    goto LABEL_1664;
                  }
                  v933 = v13;
                  if (*(_BYTE *)(v8 + 40))
                  {
                    v507 = v502 + 1;
                    *v2336 = (unsigned __int8 *)(v502 + 1);
                    goto LABEL_2142;
                  }
                  v2101 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1680 = v2101;
                  v14.n128_u64[0] = 0x2900000002;
                  v2102 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_4198;
                }
                goto LABEL_1663;
              }
              if (v504 != 6)
              {
                if (v504 != 5)
                {
                  if (v504 - 18 < 2)
                  {
                    v933 = v13;
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                    v1680 = v2340.rlim_cur;
                    if (!v2340.rlim_cur)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B06154);
                    }
                    *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v1680 + 8) = v1680 + 20;
                    *(_DWORD *)(v1680 + 16) = 4;
                    *(_DWORD *)(v1680 + 36) = 656436837;
                    v14 = *(__n128 *)"Unrecognized token '";
                    *(_OWORD *)(v1680 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v1680 + 40) = *(_BYTE *)v502;
                    *(_BYTE *)(v1680 + 41) = 39;
                    goto LABEL_3438;
                  }
LABEL_1663:
                  *v10 = v504;
                  *v12 = (unsigned __int8 *)(v502 + 1);
LABEL_1664:
                  v9 = v505;
                  goto LABEL_1665;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v501 - v502) >= 4 && *(_WORD *)(v502 + 1) == 27765 && *(_BYTE *)(v502 + 3) == 108)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v502 + 4);
                    v1291 = 13;
LABEL_2724:
                    v10 = v2335;
                    *v2335 = v1291;
                    v11 = v2328;
                    goto LABEL_2039;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v501 - v502) >= 5 && *(_WORD *)(v502 + 1) == 27745 && *(_WORD *)(v502 + 3) == 25971)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v502 + 5);
                    v1291 = 12;
                    goto LABEL_2724;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v501 - v502) >= 4
                       && *(_WORD *)(v502 + 1) == 30066
                       && *(_BYTE *)(v502 + 3) == 101)
                {
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v502 + 4);
                  v1291 = 11;
                  goto LABEL_2724;
                }
                v1847 = v502;
                *v2328 = (WTF::AtomStringImpl *)v502;
                v1848 = v502;
                if (v502 < v501)
                {
                  v1849 = v501 - v502;
                  v1850 = v502 + v1849;
                  do
                  {
                    v1851 = *(unsigned __int8 *)v502;
                    if (v1851 != 36)
                    {
                      v1852 = v1851 != 95 && (v1851 - 48) >= 0xA;
                      if (v1852 && (v1851 | 0x20u) - 97 > 0x19)
                        goto LABEL_3724;
                    }
                    *v2336 = (unsigned __int8 *)++v502;
                    --v1849;
                  }
                  while (v1849);
                  LODWORD(v502) = v1850;
LABEL_3724:
                  v1848 = v502;
                }
                v8 = a1;
                v10 = v2335;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1848 - v1847) & 0x7FFFFFFF;
                *(_BYTE *)(a1 + 24) = 5;
                v11 = v2328;
                v12 = v2336;
                goto LABEL_1664;
              }
              v933 = v13;
              v934 = (_DWORD)a4 != 45 || !v503;
              v935 = (unsigned __int8 *)v502;
              if ((v934 & 1) == 0)
              {
                v935 = (unsigned __int8 *)(v502 + 1);
                *v2336 = (unsigned __int8 *)(v502 + 1);
              }
              if ((unint64_t)v935 >= v501)
                goto LABEL_4197;
              v936 = *v935;
              if (v936 == 48)
              {
                v938 = v935 + 1;
                *v2336 = v938;
              }
              else
              {
                if ((v936 - 49) > 8)
                {
LABEL_4197:
                  v2101 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1680 = v2101;
                  v14.n128_u64[0] = 0xE00000002;
                  v2102 = "Invalid number";
                  goto LABEL_4198;
                }
                v937 = v935 + 1;
                do
                {
                  v938 = v937;
                  *v2336 = v937;
                  if ((unint64_t)v937 >= v501)
                    break;
                  ++v937;
                }
                while (*v938 - 48 < 0xA);
              }
              if ((unint64_t)v938 < v501)
              {
                v939 = *v938;
                if (v939 == 46)
                {
                  *v2336 = v938 + 1;
                  if ((unint64_t)(v938 + 1) >= v501 || v938[1] - 48 > 9)
                  {
                    v2101 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1680 = v2101;
                    v14.n128_u64[0] = 0x2200000002;
                    v2102 = "Invalid digits after decimal point";
                    goto LABEL_4198;
                  }
                  v1183 = v938 + 2;
                  do
                  {
                    v938 = v1183;
                    *v2336 = v1183;
                    if ((unint64_t)v1183 >= v501)
                      break;
                    ++v1183;
                  }
                  while (*v938 - 48 < 0xA);
                }
                else if (v939 != 69 && v939 != 101 && (uint64_t)&v938[-v502] <= 9)
                {
                  *v2335 = 6;
                  v940 = *(unsigned __int8 *)v502;
                  if (v940 == 45)
                    v941 = (unsigned __int8 *)(v502 + 1);
                  else
                    v941 = (unsigned __int8 *)v502;
                  if (v941 >= v938)
                  {
                    if (v940 != 45)
                    {
                      v942 = 0;
LABEL_2036:
                      v14.n128_f64[0] = (double)v942;
LABEL_2037:
                      v11 = v2328;
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_2038:
                      v10 = v2335;
                      v12 = v2336;
LABEL_2039:
                      v8 = a1;
                      goto LABEL_1664;
                    }
                  }
                  else
                  {
                    v942 = 0;
                    do
                    {
                      v943 = *v941++;
                      v942 = v943 + 10 * v942 - 48;
                    }
                    while (v941 < v938);
                    if (v940 != 45)
                      goto LABEL_2036;
                    if (v942)
                    {
                      v14.n128_f64[0] = (double)-v942;
                      goto LABEL_2037;
                    }
                  }
                  v11 = v2328;
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_2038;
                }
              }
              if ((unint64_t)v938 >= v501 || (*v938 | 0x20) != 0x65)
              {
LABEL_2480:
                *v2335 = 6;
                if ((uint64_t)&v938[-v502] < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v502, v938, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_2037;
              }
              v2126 = v938 + 1;
              *v2336 = v938 + 1;
              if ((unint64_t)(v938 + 1) < v501)
              {
                v2127 = *v2126;
                if (v2127 == 45 || v2127 == 43)
                {
                  v2126 = v938 + 2;
                  *v2336 = v938 + 2;
                }
              }
              if ((unint64_t)v2126 < v501 && *v2126 - 48 <= 9)
              {
                v2128 = v2126 + 1;
                do
                {
                  v938 = v2128;
                  *v2336 = v2128;
                  if ((unint64_t)v2128 >= v501)
                    break;
                  ++v2128;
                }
                while (*v938 - 48 < 0xA);
                goto LABEL_2480;
              }
              v2101 = WTF::fastCompactMalloc((WTF *)0x20);
              v1680 = v2101;
              v14.n128_u64[0] = 0x5D00000002;
              v2102 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4198:
              *(_QWORD *)v2101 = v14.n128_u64[0];
              *(_QWORD *)(v2101 + 8) = v2102;
              *(_DWORD *)(v2101 + 16) = 4;
LABEL_3438:
              v1681 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1680;
              v13 = v933;
              v11 = v2328;
              v10 = v2335;
              v12 = v2336;
              v8 = a1;
              if (v1681)
              {
                if (*(_DWORD *)v1681 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1681, (WTF::AtomStringImpl *)a2, v1679, a4, a5, a6, a7, a8);
                  WTF::fastFree(v1870, v1871, v1872, v1873, v1874, v1875, v1876, v1877);
                }
                else
                {
                  *(_DWORD *)v1681 -= 2;
                }
                v13 = v933;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
              }
              goto LABEL_1664;
            case 5:
              v1723 = *(_DWORD *)(v8 + 28);
              if ((v1723 & 0x7FFFFFFFu) >= 0xC8)
                v1724 = 200;
              else
                v1724 = v1723 & 0x7FFFFFFF;
              JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v2340, v1723, *(_QWORD *)(v8 + 32), v1724);
              if (!v2340.rlim_cur)
              {
                v2045 = *(_DWORD *)(a1 + 28);
                if ((v2045 & 0x7FFFFFFFu) < 0xB
                  || (JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v2344, v2045, (uint64_t)*v2328, 10), (v2340.rlim_cur = (rlim_t)v2344) == 0))
                {
                  v2046 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v2046 = 0x1500000002;
                  *(_QWORD *)(v2046 + 8) = "Unexpected identifier";
                  *(_DWORD *)(v2046 + 16) = 4;
                  v2340.rlim_cur = v2046;
                }
              }
              WTF::String::operator=((unint64_t *)v13, (WTF::AtomStringImpl *)&v2340, v1725, v1726, v1727, v1728, v1729, v1730);
              v390 = (WTF::StringImpl *)v2340.rlim_cur;
              v2340.rlim_cur = 0;
              if (!v390)
                return 0;
              goto LABEL_832;
            case 6:
              v14.n128_u64[0] = (unint64_t)*v11;
              if (((unint64_t)*v11 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v647 = (int)v14.n128_f64[0], v14.n128_f64[0] == (double)(int)v647)
                && ((_DWORD)v647 || (v14.n128_u64[0] & 0x8000000000000000) == 0))
              {
                v9 = v647 | 0xFFFE000000000000;
              }
              else
              {
                v9 = v14.n128_u64[0] + 0x2000000000000;
              }
              v649 = *(_QWORD *)(v8 + 48);
              v648 = *(_QWORD *)(v8 + 56);
              if (v649 < v648)
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v649] != 19)
                {
                  v650 = 1;
                  goto LABEL_1472;
                }
                v780 = *(unsigned __int8 **)(v8 + 56);
                v781 = (unsigned __int8 *)(v649 + 1);
                v782 = ~v649 + v648;
                do
                {
                  v783 = v781;
                  *v12 = v781;
                  if (!v782)
                    goto LABEL_1681;
                  ++v781;
                  --v782;
                }
                while (JSC::tokenTypesOfLatin1Characters[*v783] == 19);
                v780 = v783;
LABEL_1681:
                v650 = (unint64_t)v783 < v648;
                v649 = (unint64_t)v780;
                goto LABEL_1472;
              }
              v650 = 0;
LABEL_1472:
              if (v649 == v648)
              {
                *v10 = 14;
                goto LABEL_1665;
              }
              *v10 = 18;
              a4 = *(unsigned __int8 *)v649;
              v651 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v651 <= 4)
              {
                if (v651 == 4)
                {
                  v652 = *(unsigned __int8 *)(v8 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    v653 = v649 + 1;
                    *v12 = (unsigned __int8 *)(v649 + 1);
                    if (!v652)
                    {
                      v654 = v648 - v653;
                      if ((uint64_t)(v648 - v653) < 0)
                        goto LABEL_3864;
                      v655 = (int8x16_t *)(v654 + v649 + 1);
                      if (v654 >= 0x10)
                      {
                        v656 = (unsigned __int8 *)(v649 + 16);
                        while (1)
                        {
                          v657 = *(int8x16_t *)(v656 - 15);
                          v658.i64[0] = 0x2222222222222222;
                          v658.i64[1] = 0x2222222222222222;
                          v659 = vceqq_s8(v657, v658);
                          v660.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v660.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v661.i64[0] = 0x2020202020202020;
                          v661.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v657, v660), (int8x16_t)vcgtq_u8(v661, (uint8x16_t)v657)), v659);
                          v659.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v659.i32[0])
                            break;
                          v656 += 16;
                          if (v656 >= (unsigned __int8 *)v655)
                          {
                            if (v656 - 15 >= (unsigned __int8 *)v655)
                              goto LABEL_1880;
                            v662 = (unsigned __int8 *)&v655[-1];
                            v663 = v655[-1];
                            v664.i64[0] = 0x2222222222222222;
                            v664.i64[1] = 0x2222222222222222;
                            v665 = vceqq_s8(v663, v664);
                            v666.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v666.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v663, v666), (int8x16_t)vcgtq_u8(v661, (uint8x16_t)v663)), v665);
                            v665.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (!v665.i32[0])
                              goto LABEL_1880;
LABEL_1879:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v655 = (int8x16_t *)&v662[v14.n128_u32[0]];
                            goto LABEL_1880;
                          }
                        }
                        v662 = v656 - 15;
                        goto LABEL_1879;
                      }
                      v1440 = (int8x16_t *)(v649 + 1);
                      if (v648 == v653)
                        goto LABEL_1880;
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v1440->u8[0]])
                        {
                          v655 = v1440;
                          break;
                        }
                        v1440 = (int8x16_t *)((char *)v1440 + 1);
                        --v654;
                      }
                      while (v654);
LABEL_1880:
                      v12 = v2336;
                      *v2336 = (unsigned __int8 *)v655;
                      goto LABEL_1881;
                    }
LABEL_4310:
                    if (v653 >= v648)
                    {
                      v655 = (int8x16_t *)v653;
                      v11 = v2328;
                      v12 = v2336;
                      goto LABEL_1882;
                    }
                    v655 = (int8x16_t *)v653;
                    v12 = v2336;
                    do
                    {
                      v2153 = v655->u8[0];
                      v2156 = v2153 < 0x20 || v2153 == 92 || v2153 == (_DWORD)a4;
                      if (v2153 != 9 && v2156)
                        goto LABEL_1881;
                      v655 = (int8x16_t *)((char *)v655 + 1);
                      *v2336 = (unsigned __int8 *)v655;
                    }
                    while (v655 != (int8x16_t *)(v649 + v648 - v653 + 1));
                    v655 = (int8x16_t *)(v649 + v648 - v653 + 1);
LABEL_1881:
                    v11 = v2328;
LABEL_1882:
                    v8 = a1;
                    v10 = v2335;
                    if ((unint64_t)v655 < v648 && v655->u8[0] == (_DWORD)a4)
                    {
                      *(_BYTE *)(a1 + 25) |= 1u;
                      *(_QWORD *)(a1 + 32) = v653;
                      *(_QWORD *)(a1 + 48) = (char *)v655->i64 + 1;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v655 - v653) & 0x7FFFFFFF;
                      *(_BYTE *)(a1 + 24) = 4;
                    }
                    else
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v653, a4, a5, a6, a7, a8);
                    }
                    goto LABEL_1665;
                  }
                  if (*(_BYTE *)(v8 + 40))
                  {
                    v653 = v649 + 1;
                    *v2336 = (unsigned __int8 *)(v649 + 1);
                    goto LABEL_4310;
                  }
                  goto LABEL_4688;
                }
LABEL_1670:
                *v10 = v651;
                *v12 = (unsigned __int8 *)(v649 + 1);
                goto LABEL_1665;
              }
              if (v651 != 6)
              {
                if (v651 != 5)
                {
                  if (v651 - 18 >= 2)
                    goto LABEL_1670;
                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                  v1333 = v2340.rlim_cur;
                  if (!v2340.rlim_cur)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198B0614CLL);
                  }
LABEL_3449:
                  *(_QWORD *)v1333 = 0x1600000002;
                  *(_QWORD *)(v1333 + 8) = v1333 + 20;
                  *(_DWORD *)(v1333 + 16) = 4;
                  *(_DWORD *)(v1333 + 36) = 656436837;
                  v14 = *(__n128 *)"Unrecognized token '";
                  *(_OWORD *)(v1333 + 20) = *(_OWORD *)"Unrecognized token '";
                  *(_BYTE *)(v1333 + 40) = *(_BYTE *)v649;
                  *(_BYTE *)(v1333 + 41) = 39;
                  goto LABEL_3450;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v648 - v649) >= 4 && *(_WORD *)(v649 + 1) == 27765 && *(_BYTE *)(v649 + 3) == 108)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v649 + 4);
                    v1292 = 13;
LABEL_2737:
                    v10 = v2335;
                    *v2335 = v1292;
                    v11 = v2328;
                    goto LABEL_2122;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v648 - v649) >= 5 && *(_WORD *)(v649 + 1) == 27745 && *(_WORD *)(v649 + 3) == 25971)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v649 + 5);
                    v1292 = 12;
                    goto LABEL_2737;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v648 - v649) >= 4
                       && *(_WORD *)(v649 + 1) == 30066
                       && *(_BYTE *)(v649 + 3) == 101)
                {
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v649 + 4);
                  v1292 = 11;
                  goto LABEL_2737;
                }
                v1863 = v649;
                *v2328 = (WTF::AtomStringImpl *)v649;
                v1864 = v649;
                if (v649 < v648)
                {
                  v1865 = v648 - v649;
                  v1866 = v649 + v1865;
                  do
                  {
                    v1867 = *(unsigned __int8 *)v649;
                    if (v1867 != 36)
                    {
                      v1868 = v1867 != 95 && (v1867 - 48) >= 0xA;
                      if (v1868 && (v1867 | 0x20u) - 97 > 0x19)
                        goto LABEL_3748;
                    }
                    *v2336 = (unsigned __int8 *)++v649;
                    --v1865;
                  }
                  while (v1865);
                  LODWORD(v649) = v1866;
LABEL_3748:
                  v1864 = v649;
                }
                v8 = a1;
                v10 = v2335;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1864 - v1863) & 0x7FFFFFFF;
                *(_BYTE *)(a1 + 24) = 5;
                v11 = v2328;
                v12 = v2336;
LABEL_1665:
                if (!v9)
                  return v9;
                goto LABEL_740;
              }
              v983 = (_DWORD)a4 != 45 || !v650;
              v984 = (unsigned __int8 *)v649;
              if ((v983 & 1) == 0)
              {
                v984 = (unsigned __int8 *)(v649 + 1);
                *v2336 = (unsigned __int8 *)(v649 + 1);
              }
              if ((unint64_t)v984 >= v648)
                goto LABEL_4201;
              v985 = *v984;
              if (v985 == 48)
              {
                v987 = v984 + 1;
                *v2336 = v987;
LABEL_2107:
                if ((unint64_t)v987 >= v648)
                {
LABEL_2487:
                  if ((unint64_t)v987 >= v648 || (*v987 | 0x20) != 0x65)
                  {
LABEL_2489:
                    *v2335 = 6;
                    if ((uint64_t)&v987[-v649] < 0)
                      goto LABEL_3864;
                    v2340.rlim_cur = 0;
                    fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v649, v987, &v2340.rlim_cur, 0x2E00000005);
                    v14.n128_u64[0] = v2340.rlim_cur;
                    goto LABEL_2120;
                  }
                  v2133 = v987 + 1;
                  *v2336 = v987 + 1;
                  if ((unint64_t)(v987 + 1) < v648)
                  {
                    v2134 = *v2133;
                    if (v2134 == 45 || v2134 == 43)
                    {
                      v2133 = v987 + 2;
                      *v2336 = v987 + 2;
                    }
                  }
                  if ((unint64_t)v2133 < v648 && *v2133 - 48 <= 9)
                  {
                    v2135 = v2133 + 1;
                    do
                    {
                      v987 = v2135;
                      *v2336 = v2135;
                      if ((unint64_t)v2135 >= v648)
                        break;
                      ++v2135;
                    }
                    while (*v987 - 48 < 0xA);
                    goto LABEL_2489;
                  }
                  goto LABEL_4627;
                }
                v988 = *v987;
                if (v988 != 46)
                {
                  if (v988 != 69 && v988 != 101 && (uint64_t)&v987[-v649] <= 9)
                  {
                    *v2335 = 6;
                    v989 = *(unsigned __int8 *)v649;
                    if (v989 == 45)
                      v990 = (unsigned __int8 *)(v649 + 1);
                    else
                      v990 = (unsigned __int8 *)v649;
                    if (v990 >= v987)
                    {
                      if (v989 != 45)
                      {
                        v991 = 0;
LABEL_2119:
                        v14.n128_f64[0] = (double)v991;
LABEL_2120:
                        v11 = v2328;
                        *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_2121:
                        v10 = v2335;
                        v12 = v2336;
LABEL_2122:
                        v8 = a1;
                        goto LABEL_1665;
                      }
                    }
                    else
                    {
                      v991 = 0;
                      do
                      {
                        v992 = *v990++;
                        v991 = v992 + 10 * v991 - 48;
                      }
                      while (v990 < v987);
                      if (v989 != 45)
                        goto LABEL_2119;
                      if (v991)
                      {
                        v14.n128_f64[0] = (double)-v991;
                        goto LABEL_2120;
                      }
                    }
                    v11 = v2328;
                    *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                    goto LABEL_2121;
                  }
                  goto LABEL_2487;
                }
                *v2336 = v987 + 1;
                if ((unint64_t)(v987 + 1) < v648 && v987[1] - 48 <= 9)
                {
                  v1184 = v987 + 2;
                  do
                  {
                    v987 = v1184;
                    *v2336 = v1184;
                    if ((unint64_t)v1184 >= v648)
                      break;
                    ++v1184;
                  }
                  while (*v987 - 48 < 0xA);
                  goto LABEL_2487;
                }
                goto LABEL_4270;
              }
              if ((v985 - 49) <= 8)
              {
                v986 = v984 + 1;
                do
                {
                  v987 = v986;
                  *v2336 = v986;
                  if ((unint64_t)v986 >= v648)
                    break;
                  ++v986;
                }
                while (*v987 - 48 < 0xA);
                goto LABEL_2107;
              }
              goto LABEL_4201;
            case 7:
              goto LABEL_2664;
            case 8:
              v469 = WTF::fastCompactMalloc((WTF *)0x20);
              v470 = v469;
              v471 = 0x1400000002;
              v472 = "Unexpected token '('";
              goto LABEL_1080;
            case 9:
              goto LABEL_2663;
            case 10:
              goto LABEL_2662;
            case 11:
              v1481 = *(_QWORD *)(v8 + 48);
              v1480 = *(_QWORD *)(v8 + 56);
              if (v1481 < v1480)
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v1481] != 19)
                {
                  v1482 = 1;
                  goto LABEL_3161;
                }
                v1630 = *(unsigned __int8 **)(v8 + 56);
                v1631 = (unsigned __int8 *)(v1481 + 1);
                v1632 = ~v1481 + v1480;
                do
                {
                  v1633 = v1631;
                  *v2336 = v1631;
                  if (!v1632)
                    goto LABEL_3371;
                  ++v1631;
                  --v1632;
                }
                while (JSC::tokenTypesOfLatin1Characters[*v1633] == 19);
                v1630 = v1633;
LABEL_3371:
                v1482 = (unint64_t)v1633 < v1480;
                v1481 = (unint64_t)v1630;
                goto LABEL_3161;
              }
              v1482 = 0;
LABEL_3161:
              if (v1481 == v1480)
              {
                v10 = v2335;
                *v2335 = 14;
                goto LABEL_4097;
              }
              *v2335 = 18;
              a4 = *(unsigned __int8 *)v1481;
              v1483 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v1483 <= 4)
              {
                if (v1483 == 4)
                {
                  v1484 = *(unsigned __int8 *)(a1 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    v1485 = v1481 + 1;
                    *v2336 = (unsigned __int8 *)(v1481 + 1);
                    if (!v1484)
                    {
                      v1486 = v1480 - v1485;
                      if ((uint64_t)(v1480 - v1485) < 0)
                        goto LABEL_3864;
                      v1487 = (int8x16_t *)(v1486 + v1481 + 1);
                      if (v1486 >= 0x10)
                      {
                        v1488 = (unsigned __int8 *)(v1481 + 16);
                        while (1)
                        {
                          v1489 = *(int8x16_t *)(v1488 - 15);
                          v1490.i64[0] = 0x2222222222222222;
                          v1490.i64[1] = 0x2222222222222222;
                          v1491 = vceqq_s8(v1489, v1490);
                          v1492.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v1492.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v1493.i64[0] = 0x2020202020202020;
                          v1493.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1489, v1492), (int8x16_t)vcgtq_u8(v1493, (uint8x16_t)v1489)), v1491);
                          v1491.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v1491.i32[0])
                            break;
                          v1488 += 16;
                          if (v1488 >= (unsigned __int8 *)v1487)
                          {
                            if (v1488 - 15 >= (unsigned __int8 *)v1487)
                              goto LABEL_3489;
                            v1494 = (unsigned __int8 *)&v1487[-1];
                            v1495 = v1487[-1];
                            v1496.i64[0] = 0x2222222222222222;
                            v1496.i64[1] = 0x2222222222222222;
                            v1497 = vceqq_s8(v1495, v1496);
                            v1498.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v1498.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1495, v1498), (int8x16_t)vcgtq_u8(v1493, (uint8x16_t)v1495)), v1497);
                            v1497.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (!v1497.i32[0])
                              goto LABEL_3489;
LABEL_3488:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v1487 = (int8x16_t *)&v1494[v14.n128_u32[0]];
                            goto LABEL_3489;
                          }
                        }
                        v1494 = v1488 - 15;
                        goto LABEL_3488;
                      }
                      v2047 = (int8x16_t *)(v1481 + 1);
                      if (v1480 == v1485)
                        goto LABEL_3489;
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v2047->u8[0]])
                        {
                          v1487 = v2047;
                          break;
                        }
                        v2047 = (int8x16_t *)((char *)v2047 + 1);
                        --v1486;
                      }
                      while (v1486);
LABEL_3489:
                      *v2336 = (unsigned __int8 *)v1487;
LABEL_3490:
                      if ((unint64_t)v1487 < v1480 && v1487->u8[0] == (_DWORD)a4)
                      {
                        v8 = a1;
                        *(_BYTE *)(a1 + 25) |= 1u;
                        *(_QWORD *)(a1 + 32) = v1485;
                        *(_QWORD *)(a1 + 48) = (char *)v1487->i64 + 1;
                        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v1487 - v1485) & 0x7FFFFFFF;
                        v1705 = 4;
LABEL_3493:
                        *(_BYTE *)(v8 + 24) = v1705;
                        v9 = 7;
                        goto LABEL_2627;
                      }
                      v10 = v2335;
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v1485, a4, a5, a6, a7, a8);
LABEL_4097:
                      v9 = 7;
                      goto LABEL_3782;
                    }
LABEL_4696:
                    if (v1485 >= v1480)
                    {
                      v1487 = (int8x16_t *)v1485;
                    }
                    else
                    {
                      v1487 = (int8x16_t *)v1485;
                      do
                      {
                        v2292 = v1487->u8[0];
                        v2295 = v2292 < 0x20 || v2292 == 92 || v2292 == (_DWORD)a4;
                        if (v2292 != 9 && v2295)
                          goto LABEL_3490;
                        v1487 = (int8x16_t *)((char *)v1487 + 1);
                        *v2336 = (unsigned __int8 *)v1487;
                      }
                      while (v1487 != (int8x16_t *)(v1481 + v1480 - v1485 + 1));
                      v1487 = (int8x16_t *)(v1481 + v1480 - v1485 + 1);
                    }
                    goto LABEL_3490;
                  }
                  if (*(_BYTE *)(a1 + 40))
                  {
                    v1485 = v1481 + 1;
                    *v2336 = (unsigned __int8 *)(v1481 + 1);
                    goto LABEL_4696;
                  }
                  v2283 = WTF::fastCompactMalloc((WTF *)0x20);
                  v2140 = v2283;
                  v14.n128_u64[0] = 0x2900000002;
                  v2284 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_4670;
                }
                goto LABEL_3357;
              }
              if (v1483 != 6)
              {
                if (v1483 != 5)
                {
                  if (v1483 - 18 < 2)
                  {
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                    v2140 = v2340.rlim_cur;
                    if (!v2340.rlim_cur)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B07228);
                    }
                    *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v2140 + 8) = v2140 + 20;
                    *(_DWORD *)(v2140 + 16) = 4;
                    *(_DWORD *)(v2140 + 36) = 656436837;
                    v14 = *(__n128 *)"Unrecognized token '";
                    *(_OWORD *)(v2140 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v2140 + 40) = *(_BYTE *)v1481;
                    *(_BYTE *)(v2140 + 41) = 39;
                    goto LABEL_4295;
                  }
LABEL_3357:
                  v10 = v2335;
                  v12 = v2336;
                  *v2335 = v1483;
                  *v2336 = (unsigned __int8 *)(v1481 + 1);
LABEL_3358:
                  v9 = 7;
                  goto LABEL_2543;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v1480 - v1481) >= 4 && *(_WORD *)(v1481 + 1) == 27765 && *(_BYTE *)(v1481 + 3) == 108)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1481 + 4);
                    v1987 = 13;
LABEL_3994:
                    v10 = v2335;
                    *v2335 = v1987;
                    goto LABEL_3358;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v1480 - v1481) >= 5 && *(_WORD *)(v1481 + 1) == 27745 && *(_WORD *)(v1481 + 3) == 25971)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1481 + 5);
                    v1987 = 12;
                    goto LABEL_3994;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v1480 - v1481) >= 4
                       && *(_WORD *)(v1481 + 1) == 30066
                       && *(_BYTE *)(v1481 + 3) == 101)
                {
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v1481 + 4);
                  v1987 = 11;
                  goto LABEL_3994;
                }
                v2206 = v1481;
                *v2328 = (WTF::AtomStringImpl *)v1481;
                v2207 = v1481;
                if (v1481 < v1480)
                {
                  v2208 = v1480 - v1481;
                  v2209 = v1481 + v2208;
                  do
                  {
                    v2210 = *(unsigned __int8 *)v1481;
                    if (v2210 != 36)
                    {
                      v2211 = v2210 != 95 && (v2210 - 48) >= 0xA;
                      if (v2211 && (v2210 | 0x20u) - 97 > 0x19)
                        goto LABEL_4462;
                    }
                    *v2336 = (unsigned __int8 *)++v1481;
                    --v2208;
                  }
                  while (v2208);
                  LODWORD(v1481) = v2209;
LABEL_4462:
                  v2207 = v1481;
                }
                v8 = a1;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v2207 - v2206) & 0x7FFFFFFF;
                v1705 = 5;
                goto LABEL_3493;
              }
              v1759 = (_DWORD)a4 != 45 || !v1482;
              v1760 = (unsigned __int8 *)v1481;
              if ((v1759 & 1) == 0)
              {
                v1760 = (unsigned __int8 *)(v1481 + 1);
                *v2336 = (unsigned __int8 *)(v1481 + 1);
              }
              if ((unint64_t)v1760 >= v1480)
                goto LABEL_4669;
              v1761 = *v1760;
              if (v1761 == 48)
              {
                v1763 = v1760 + 1;
                *v2336 = v1763;
              }
              else
              {
                if ((v1761 - 49) > 8)
                {
LABEL_4669:
                  v2283 = WTF::fastCompactMalloc((WTF *)0x20);
                  v2140 = v2283;
                  v14.n128_u64[0] = 0xE00000002;
                  v2284 = "Invalid number";
                  goto LABEL_4670;
                }
                v1762 = v1760 + 1;
                do
                {
                  v1763 = v1762;
                  *v2336 = v1762;
                  if ((unint64_t)v1762 >= v1480)
                    break;
                  ++v1762;
                }
                while (*v1763 - 48 < 0xA);
              }
              if ((unint64_t)v1763 < v1480)
              {
                v1764 = *v1763;
                if (v1764 == 46)
                {
                  *v2336 = v1763 + 1;
                  if ((unint64_t)(v1763 + 1) >= v1480 || v1763[1] - 48 > 9)
                  {
                    v2283 = WTF::fastCompactMalloc((WTF *)0x20);
                    v2140 = v2283;
                    v14.n128_u64[0] = 0x2200000002;
                    v2284 = "Invalid digits after decimal point";
                    goto LABEL_4670;
                  }
                  v1935 = v1763 + 2;
                  do
                  {
                    v1763 = v1935;
                    *v2336 = v1935;
                    if ((unint64_t)v1935 >= v1480)
                      break;
                    ++v1935;
                  }
                  while (*v1763 - 48 < 0xA);
                }
                else if (v1764 != 69 && v1764 != 101 && (uint64_t)&v1763[-v1481] <= 9)
                {
                  *v2335 = 6;
                  v1765 = *(unsigned __int8 *)v1481;
                  if (v1765 == 45)
                    v1766 = (unsigned __int8 *)(v1481 + 1);
                  else
                    v1766 = (unsigned __int8 *)v1481;
                  if (v1766 >= v1763)
                  {
                    if (v1765 != 45)
                    {
                      v1767 = 0;
LABEL_3610:
                      v14.n128_f64[0] = (double)v1767;
LABEL_3611:
                      v11 = v2328;
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_3612:
                      v9 = 7;
                      goto LABEL_2793;
                    }
                  }
                  else
                  {
                    v1767 = 0;
                    do
                    {
                      v1768 = *v1766++;
                      v1767 = v1768 + 10 * v1767 - 48;
                    }
                    while (v1766 < v1763);
                    if (v1765 != 45)
                      goto LABEL_3610;
                    if (v1767)
                    {
                      v14.n128_f64[0] = (double)-v1767;
                      goto LABEL_3611;
                    }
                  }
                  v11 = v2328;
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_3612;
                }
              }
              if ((unint64_t)v1763 >= v1480 || (*v1763 | 0x20) != 0x65)
              {
LABEL_3862:
                *v2335 = 6;
                if ((uint64_t)&v1763[-v1481] < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v1481, v1763, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_3611;
              }
              v2285 = v1763 + 1;
              *v2336 = v1763 + 1;
              if ((unint64_t)(v1763 + 1) < v1480)
              {
                v2286 = *v2285;
                if (v2286 == 45 || v2286 == 43)
                {
                  v2285 = v1763 + 2;
                  *v2336 = v1763 + 2;
                }
              }
              if ((unint64_t)v2285 < v1480 && *v2285 - 48 <= 9)
              {
                v2287 = v2285 + 1;
                do
                {
                  v1763 = v2287;
                  *v2336 = v2287;
                  if ((unint64_t)v2287 >= v1480)
                    break;
                  ++v2287;
                }
                while (*v1763 - 48 < 0xA);
                goto LABEL_3862;
              }
              v2283 = WTF::fastCompactMalloc((WTF *)0x20);
              v2140 = v2283;
              v14.n128_u64[0] = 0x5D00000002;
              v2284 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4670:
              *(_QWORD *)v2283 = v14.n128_u64[0];
              *(_QWORD *)(v2283 + 8) = v2284;
              *(_DWORD *)(v2283 + 16) = 4;
LABEL_4295:
              v2141 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v2140;
              if (v2141)
              {
                if (*(_DWORD *)v2141 == 2)
                {
                  WTF::StringImpl::~StringImpl(v2141, (WTF::AtomStringImpl *)a2, v2139, a4, a5, a6, a7, a8);
                  WTF::fastFree(v2213, v2214, v2215, v2216, v2217, v2218, v2219, v2220);
                }
                else
                {
                  *(_DWORD *)v2141 -= 2;
                }
              }
              v9 = 7;
LABEL_3951:
              v11 = v2328;
              goto LABEL_2793;
            case 12:
              v1205 = *(_QWORD *)(v8 + 48);
              v1204 = *(_QWORD *)(v8 + 56);
              if (v1205 < v1204)
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v1205] != 19)
                {
                  v1206 = 1;
                  goto LABEL_2548;
                }
                v1293 = *(unsigned __int8 **)(v8 + 56);
                v1294 = (unsigned __int8 *)(v1205 + 1);
                v1295 = ~v1205 + v1204;
                do
                {
                  v1296 = v1294;
                  *v2336 = v1294;
                  if (!v1295)
                    goto LABEL_2743;
                  ++v1294;
                  --v1295;
                }
                while (JSC::tokenTypesOfLatin1Characters[*v1296] == 19);
                v1293 = v1296;
LABEL_2743:
                v1206 = (unint64_t)v1296 < v1204;
                v1205 = (unint64_t)v1293;
                goto LABEL_2548;
              }
              v1206 = 0;
LABEL_2548:
              if (v1205 == v1204)
                goto LABEL_3865;
              *v2335 = 18;
              a4 = *(unsigned __int8 *)v1205;
              v1207 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v1207 <= 4)
              {
                if (v1207 == 4)
                {
                  v1208 = *(unsigned __int8 *)(a1 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    v1209 = v1205 + 1;
                    *v2336 = (unsigned __int8 *)(v1205 + 1);
                    if (!v1208)
                    {
                      v1210 = v1204 - v1209;
                      if ((uint64_t)(v1204 - v1209) < 0)
                        goto LABEL_3864;
                      v1211 = (int8x16_t *)(v1210 + v1205 + 1);
                      if (v1210 >= 0x10)
                      {
                        v1212 = (unsigned __int8 *)(v1205 + 16);
                        while (1)
                        {
                          v1213 = *(int8x16_t *)(v1212 - 15);
                          v1214.i64[0] = 0x2222222222222222;
                          v1214.i64[1] = 0x2222222222222222;
                          v1215 = vceqq_s8(v1213, v1214);
                          v1216.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v1216.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v1217.i64[0] = 0x2020202020202020;
                          v1217.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1213, v1216), (int8x16_t)vcgtq_u8(v1217, (uint8x16_t)v1213)), v1215);
                          v1215.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v1215.i32[0])
                            break;
                          v1212 += 16;
                          if (v1212 >= (unsigned __int8 *)v1211)
                          {
                            if (v1212 - 15 >= (unsigned __int8 *)v1211)
                              goto LABEL_2841;
                            v1218 = (unsigned __int8 *)&v1211[-1];
                            v1219 = v1211[-1];
                            v1220.i64[0] = 0x2222222222222222;
                            v1220.i64[1] = 0x2222222222222222;
                            v1221 = vceqq_s8(v1219, v1220);
                            v1222.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v1222.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1219, v1222), (int8x16_t)vcgtq_u8(v1217, (uint8x16_t)v1219)), v1221);
                            v1221.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (!v1221.i32[0])
                              goto LABEL_2841;
LABEL_2840:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v1211 = (int8x16_t *)&v1218[v14.n128_u32[0]];
                            goto LABEL_2841;
                          }
                        }
                        v1218 = v1212 - 15;
                        goto LABEL_2840;
                      }
                      v1936 = (int8x16_t *)(v1205 + 1);
                      if (v1204 == v1209)
                        goto LABEL_2841;
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v1936->u8[0]])
                        {
                          v1211 = v1936;
                          break;
                        }
                        v1936 = (int8x16_t *)((char *)v1936 + 1);
                        --v1210;
                      }
                      while (v1210);
LABEL_2841:
                      *v2336 = (unsigned __int8 *)v1211;
LABEL_2842:
                      if ((unint64_t)v1211 >= v1204 || v1211->u8[0] != (_DWORD)a4)
                      {
                        v10 = v2335;
                        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v1209, a4, a5, a6, a7, a8);
LABEL_3866:
                        v9 = 6;
                        goto LABEL_3782;
                      }
                      v8 = a1;
                      *(_BYTE *)(a1 + 25) |= 1u;
                      *(_QWORD *)(a1 + 32) = v1209;
                      *(_QWORD *)(a1 + 48) = (char *)v1211->i64 + 1;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v1211 - v1209) & 0x7FFFFFFF;
                      v1329 = 4;
                      goto LABEL_2845;
                    }
LABEL_4602:
                    if (v1209 >= v1204)
                    {
                      v1211 = (int8x16_t *)v1209;
                    }
                    else
                    {
                      v1211 = (int8x16_t *)v1209;
                      do
                      {
                        v2267 = v1211->u8[0];
                        v2270 = v2267 < 0x20 || v2267 == 92 || v2267 == (_DWORD)a4;
                        if (v2267 != 9 && v2270)
                          goto LABEL_2842;
                        v1211 = (int8x16_t *)((char *)v1211 + 1);
                        *v2336 = (unsigned __int8 *)v1211;
                      }
                      while (v1211 != (int8x16_t *)(v1205 + v1204 - v1209 + 1));
                      v1211 = (int8x16_t *)(v1205 + v1204 - v1209 + 1);
                    }
                    goto LABEL_2842;
                  }
                  if (*(_BYTE *)(a1 + 40))
                  {
                    v1209 = v1205 + 1;
                    *v2336 = (unsigned __int8 *)(v1205 + 1);
                    goto LABEL_4602;
                  }
                  v2252 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1996 = v2252;
                  v14.n128_u64[0] = 0x2900000002;
                  v2253 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_4559;
                }
                goto LABEL_2728;
              }
              if (v1207 != 6)
              {
                if (v1207 != 5)
                {
                  if (v1207 - 18 < 2)
                  {
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                    v1996 = v2340.rlim_cur;
                    if (!v2340.rlim_cur)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B063B4);
                    }
                    *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v1996 + 8) = v1996 + 20;
                    *(_DWORD *)(v1996 + 16) = 4;
                    *(_DWORD *)(v1996 + 36) = 656436837;
                    v14 = *(__n128 *)"Unrecognized token '";
                    *(_OWORD *)(v1996 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v1996 + 40) = *(_BYTE *)v1205;
                    *(_BYTE *)(v1996 + 41) = 39;
                    goto LABEL_4032;
                  }
LABEL_2728:
                  v10 = v2335;
                  v12 = v2336;
                  *v2335 = v1207;
                  *v2336 = (unsigned __int8 *)(v1205 + 1);
LABEL_2729:
                  v9 = 6;
                  goto LABEL_2543;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v1204 - v1205) >= 4 && *(_WORD *)(v1205 + 1) == 27765 && *(_BYTE *)(v1205 + 3) == 108)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1205 + 4);
                    v1846 = 13;
LABEL_3695:
                    v10 = v2335;
                    *v2335 = v1846;
                    goto LABEL_2729;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v1204 - v1205) >= 5 && *(_WORD *)(v1205 + 1) == 27745 && *(_WORD *)(v1205 + 3) == 25971)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1205 + 5);
                    v1846 = 12;
                    goto LABEL_3695;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v1204 - v1205) >= 4
                       && *(_WORD *)(v1205 + 1) == 30066
                       && *(_BYTE *)(v1205 + 3) == 101)
                {
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v1205 + 4);
                  v1846 = 11;
                  goto LABEL_3695;
                }
                v2060 = v1205;
                *v2328 = (WTF::AtomStringImpl *)v1205;
                v2061 = v1205;
                if (v1205 < v1204)
                {
                  v2062 = v1204 - v1205;
                  v2063 = v1205 + v2062;
                  do
                  {
                    v2064 = *(unsigned __int8 *)v1205;
                    if (v2064 != 36)
                    {
                      v2065 = v2064 != 95 && (v2064 - 48) >= 0xA;
                      if (v2065 && (v2064 | 0x20u) - 97 > 0x19)
                        goto LABEL_4149;
                    }
                    *v2336 = (unsigned __int8 *)++v1205;
                    --v2062;
                  }
                  while (v2062);
                  LODWORD(v1205) = v2063;
LABEL_4149:
                  v2061 = v1205;
                }
                v8 = a1;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v2061 - v2060) & 0x7FFFFFFF;
                v1329 = 5;
LABEL_2845:
                *(_BYTE *)(v8 + 24) = v1329;
                v9 = 6;
                goto LABEL_2627;
              }
              v1386 = (_DWORD)a4 != 45 || !v1206;
              v1387 = (unsigned __int8 *)v1205;
              if ((v1386 & 1) == 0)
              {
                v1387 = (unsigned __int8 *)(v1205 + 1);
                *v2336 = (unsigned __int8 *)(v1205 + 1);
              }
              if ((unint64_t)v1387 >= v1204)
                goto LABEL_4558;
              v1388 = *v1387;
              if (v1388 == 48)
              {
                v1390 = v1387 + 1;
                *v2336 = v1390;
              }
              else
              {
                if ((v1388 - 49) > 8)
                {
LABEL_4558:
                  v2252 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1996 = v2252;
                  v14.n128_u64[0] = 0xE00000002;
                  v2253 = "Invalid number";
                  goto LABEL_4559;
                }
                v1389 = v1387 + 1;
                do
                {
                  v1390 = v1389;
                  *v2336 = v1389;
                  if ((unint64_t)v1389 >= v1204)
                    break;
                  ++v1389;
                }
                while (*v1390 - 48 < 0xA);
              }
              if ((unint64_t)v1390 < v1204)
              {
                v1391 = *v1390;
                if (v1391 == 46)
                {
                  *v2336 = v1390 + 1;
                  if ((unint64_t)(v1390 + 1) >= v1204 || v1390[1] - 48 > 9)
                  {
                    v2252 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1996 = v2252;
                    v14.n128_u64[0] = 0x2200000002;
                    v2253 = "Invalid digits after decimal point";
                    goto LABEL_4559;
                  }
                  v1691 = v1390 + 2;
                  do
                  {
                    v1390 = v1691;
                    *v2336 = v1691;
                    if ((unint64_t)v1691 >= v1204)
                      break;
                    ++v1691;
                  }
                  while (*v1390 - 48 < 0xA);
                }
                else if (v1391 != 69 && v1391 != 101 && (uint64_t)&v1390[-v1205] <= 9)
                {
                  *v2335 = 6;
                  v1392 = *(unsigned __int8 *)v1205;
                  if (v1392 == 45)
                    v1393 = (unsigned __int8 *)(v1205 + 1);
                  else
                    v1393 = (unsigned __int8 *)v1205;
                  if (v1393 >= v1390)
                  {
                    if (v1392 != 45)
                    {
                      v1394 = 0;
LABEL_3009:
                      v14.n128_f64[0] = (double)v1394;
LABEL_3010:
                      v11 = v2328;
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_3011:
                      v9 = 6;
                      goto LABEL_2793;
                    }
                  }
                  else
                  {
                    v1394 = 0;
                    do
                    {
                      v1395 = *v1393++;
                      v1394 = v1395 + 10 * v1394 - 48;
                    }
                    while (v1393 < v1390);
                    if (v1392 != 45)
                      goto LABEL_3009;
                    if (v1394)
                    {
                      v14.n128_f64[0] = (double)-v1394;
                      goto LABEL_3010;
                    }
                  }
                  v11 = v2328;
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_3011;
                }
              }
              if ((unint64_t)v1390 >= v1204 || (*v1390 | 0x20) != 0x65)
              {
LABEL_3464:
                *v2335 = 6;
                if ((uint64_t)&v1390[-v1205] < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v1205, v1390, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_3010;
              }
              v2264 = v1390 + 1;
              *v2336 = v1390 + 1;
              if ((unint64_t)(v1390 + 1) < v1204)
              {
                v2265 = *v2264;
                if (v2265 == 45 || v2265 == 43)
                {
                  v2264 = v1390 + 2;
                  *v2336 = v1390 + 2;
                }
              }
              if ((unint64_t)v2264 < v1204 && *v2264 - 48 <= 9)
              {
                v2266 = v2264 + 1;
                do
                {
                  v1390 = v2266;
                  *v2336 = v2266;
                  if ((unint64_t)v2266 >= v1204)
                    break;
                  ++v2266;
                }
                while (*v1390 - 48 < 0xA);
                goto LABEL_3464;
              }
              v2252 = WTF::fastCompactMalloc((WTF *)0x20);
              v1996 = v2252;
              v14.n128_u64[0] = 0x5D00000002;
              v2253 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4559:
              *(_QWORD *)v2252 = v14.n128_u64[0];
              *(_QWORD *)(v2252 + 8) = v2253;
              *(_DWORD *)(v2252 + 16) = 4;
LABEL_4032:
              v1997 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1996;
              if (v1997)
              {
                if (*(_DWORD *)v1997 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1997, (WTF::AtomStringImpl *)a2, v1995, a4, a5, a6, a7, a8);
                  WTF::fastFree(v2067, v2068, v2069, v2070, v2071, v2072, v2073, v2074);
                }
                else
                {
                  *(_DWORD *)v1997 -= 2;
                }
              }
              v9 = 6;
              goto LABEL_3951;
            case 13:
              v1147 = *(_QWORD *)(v8 + 48);
              v1146 = *(_QWORD *)(v8 + 56);
              if (v1147 < v1146)
              {
                if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v1147] != 19)
                {
                  v1148 = 1;
                  goto LABEL_2424;
                }
                v1224 = *(unsigned __int8 **)(v8 + 56);
                v1225 = (unsigned __int8 *)(v1147 + 1);
                v1226 = ~v1147 + v1146;
                do
                {
                  v1227 = v1225;
                  *v2336 = v1225;
                  if (!v1226)
                    goto LABEL_2577;
                  ++v1225;
                  --v1226;
                }
                while (JSC::tokenTypesOfLatin1Characters[*v1227] == 19);
                v1224 = v1227;
LABEL_2577:
                v1148 = (unint64_t)v1227 < v1146;
                v1147 = (unint64_t)v1224;
                goto LABEL_2424;
              }
              v1148 = 0;
LABEL_2424:
              if (v1147 == v1146)
              {
                v10 = v2335;
                *v2335 = 14;
                goto LABEL_3781;
              }
              *v2335 = 18;
              a4 = *(unsigned __int8 *)v1147;
              v1149 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v1149 <= 4)
              {
                if (v1149 == 4)
                {
                  v1150 = *(unsigned __int8 *)(a1 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    v1151 = v1147 + 1;
                    *v2336 = (unsigned __int8 *)(v1147 + 1);
                    if (!v1150)
                    {
                      v1152 = v1146 - v1151;
                      if ((uint64_t)(v1146 - v1151) < 0)
                        goto LABEL_3864;
                      v1153 = (int8x16_t *)(v1152 + v1147 + 1);
                      if (v1152 >= 0x10)
                      {
                        v1154 = (unsigned __int8 *)(v1147 + 16);
                        while (1)
                        {
                          v1155 = *(int8x16_t *)(v1154 - 15);
                          v1156.i64[0] = 0x2222222222222222;
                          v1156.i64[1] = 0x2222222222222222;
                          v1157 = vceqq_s8(v1155, v1156);
                          v1158.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v1158.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v1159.i64[0] = 0x2020202020202020;
                          v1159.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1155, v1158), (int8x16_t)vcgtq_u8(v1159, (uint8x16_t)v1155)), v1157);
                          v1157.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v1157.i32[0])
                            break;
                          v1154 += 16;
                          if (v1154 >= (unsigned __int8 *)v1153)
                          {
                            if (v1154 - 15 >= (unsigned __int8 *)v1153)
                              goto LABEL_2622;
                            v1160 = (unsigned __int8 *)&v1153[-1];
                            v1161 = v1153[-1];
                            v1162.i64[0] = 0x2222222222222222;
                            v1162.i64[1] = 0x2222222222222222;
                            v1163 = vceqq_s8(v1161, v1162);
                            v1164.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v1164.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1161, v1164), (int8x16_t)vcgtq_u8(v1159, (uint8x16_t)v1161)), v1163);
                            v1163.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (!v1163.i32[0])
                              goto LABEL_2622;
LABEL_2621:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v1153 = (int8x16_t *)&v1160[v14.n128_u32[0]];
                            goto LABEL_2622;
                          }
                        }
                        v1160 = v1154 - 15;
                        goto LABEL_2621;
                      }
                      v1902 = (int8x16_t *)(v1147 + 1);
                      if (v1146 == v1151)
                        goto LABEL_2622;
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v1902->u8[0]])
                        {
                          v1153 = v1902;
                          break;
                        }
                        v1902 = (int8x16_t *)((char *)v1902 + 1);
                        --v1152;
                      }
                      while (v1152);
LABEL_2622:
                      *v2336 = (unsigned __int8 *)v1153;
LABEL_2623:
                      if ((unint64_t)v1153 < v1146 && v1153->u8[0] == (_DWORD)a4)
                      {
                        v8 = a1;
                        *(_BYTE *)(a1 + 25) |= 1u;
                        *(_QWORD *)(a1 + 32) = v1151;
                        *(_QWORD *)(a1 + 48) = (char *)v1153->i64 + 1;
                        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v1153 - v1151) & 0x7FFFFFFF;
                        v1239 = 4;
LABEL_2626:
                        *(_BYTE *)(v8 + 24) = v1239;
                        v9 = 2;
LABEL_2627:
                        v11 = v2328;
                        v10 = v2335;
                        v12 = v2336;
                        goto LABEL_740;
                      }
                      v10 = v2335;
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v1151, a4, a5, a6, a7, a8);
LABEL_3781:
                      v9 = 2;
LABEL_3782:
                      v11 = v2328;
                      v12 = v2336;
                      goto LABEL_2544;
                    }
LABEL_4569:
                    if (v1151 >= v1146)
                    {
                      v1153 = (int8x16_t *)v1151;
                    }
                    else
                    {
                      v1153 = (int8x16_t *)v1151;
                      do
                      {
                        v2260 = v1153->u8[0];
                        v2263 = v2260 < 0x20 || v2260 == 92 || v2260 == (_DWORD)a4;
                        if (v2260 != 9 && v2263)
                          goto LABEL_2623;
                        v1153 = (int8x16_t *)((char *)v1153 + 1);
                        *v2336 = (unsigned __int8 *)v1153;
                      }
                      while (v1153 != (int8x16_t *)(v1147 + v1146 - v1151 + 1));
                      v1153 = (int8x16_t *)(v1147 + v1146 - v1151 + 1);
                    }
                    goto LABEL_2623;
                  }
                  if (*(_BYTE *)(a1 + 40))
                  {
                    v1151 = v1147 + 1;
                    *v2336 = (unsigned __int8 *)(v1147 + 1);
                    goto LABEL_4569;
                  }
                  v2247 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1961 = v2247;
                  v14.n128_u64[0] = 0x2900000002;
                  v2248 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_4538;
                }
                goto LABEL_2541;
              }
              if (v1149 != 6)
              {
                if (v1149 != 5)
                {
                  if (v1149 - 18 < 2)
                  {
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                    v1961 = v2340.rlim_cur;
                    if (!v2340.rlim_cur)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B06144);
                    }
                    *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v1961 + 8) = v1961 + 20;
                    *(_DWORD *)(v1961 + 16) = 4;
                    *(_DWORD *)(v1961 + 36) = 656436837;
                    v14 = *(__n128 *)"Unrecognized token '";
                    *(_OWORD *)(v1961 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v1961 + 40) = *(_BYTE *)v1147;
                    *(_BYTE *)(v1961 + 41) = 39;
                    goto LABEL_3947;
                  }
LABEL_2541:
                  v10 = v2335;
                  v12 = v2336;
                  *v2335 = v1149;
                  *v2336 = (unsigned __int8 *)(v1147 + 1);
LABEL_2542:
                  v9 = 2;
LABEL_2543:
                  v11 = v2328;
LABEL_2544:
                  v8 = a1;
                  goto LABEL_740;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v1146 - v1147) >= 4 && *(_WORD *)(v1147 + 1) == 27765 && *(_BYTE *)(v1147 + 3) == 108)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1147 + 4);
                    v1731 = 13;
LABEL_3532:
                    v10 = v2335;
                    *v2335 = v1731;
                    goto LABEL_2542;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v1146 - v1147) >= 5 && *(_WORD *)(v1147 + 1) == 27745 && *(_WORD *)(v1147 + 3) == 25971)
                  {
                    v12 = v2336;
                    *v2336 = (unsigned __int8 *)(v1147 + 5);
                    v1731 = 12;
                    goto LABEL_3532;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v1146 - v1147) >= 4
                       && *(_WORD *)(v1147 + 1) == 30066
                       && *(_BYTE *)(v1147 + 3) == 101)
                {
                  v12 = v2336;
                  *v2336 = (unsigned __int8 *)(v1147 + 4);
                  v1731 = 11;
                  goto LABEL_3532;
                }
                v2008 = v1147;
                *v2328 = (WTF::AtomStringImpl *)v1147;
                v2009 = v1147;
                if (v1147 < v1146)
                {
                  v2010 = v1146 - v1147;
                  v2011 = v1147 + v2010;
                  do
                  {
                    v2012 = *(unsigned __int8 *)v1147;
                    if (v2012 != 36)
                    {
                      v2013 = v2012 != 95 && (v2012 - 48) >= 0xA;
                      if (v2013 && (v2012 | 0x20u) - 97 > 0x19)
                        goto LABEL_4087;
                    }
                    *v2336 = (unsigned __int8 *)++v1147;
                    --v2010;
                  }
                  while (v2010);
                  LODWORD(v1147) = v2011;
LABEL_4087:
                  v2009 = v1147;
                }
                v8 = a1;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v2009 - v2008) & 0x7FFFFFFF;
                v1239 = 5;
                goto LABEL_2626;
              }
              v1310 = (_DWORD)a4 != 45 || !v1148;
              v1311 = (unsigned __int8 *)v1147;
              if ((v1310 & 1) == 0)
              {
                v1311 = (unsigned __int8 *)(v1147 + 1);
                *v2336 = (unsigned __int8 *)(v1147 + 1);
              }
              if ((unint64_t)v1311 >= v1146)
                goto LABEL_4537;
              v1312 = *v1311;
              if (v1312 == 48)
              {
                v1314 = v1311 + 1;
                *v2336 = v1314;
              }
              else
              {
                if ((v1312 - 49) > 8)
                {
LABEL_4537:
                  v2247 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1961 = v2247;
                  v14.n128_u64[0] = 0xE00000002;
                  v2248 = "Invalid number";
                  goto LABEL_4538;
                }
                v1313 = v1311 + 1;
                do
                {
                  v1314 = v1313;
                  *v2336 = v1313;
                  if ((unint64_t)v1313 >= v1146)
                    break;
                  ++v1313;
                }
                while (*v1314 - 48 < 0xA);
              }
              if ((unint64_t)v1314 < v1146)
              {
                v1315 = *v1314;
                if (v1315 == 46)
                {
                  *v2336 = v1314 + 1;
                  if ((unint64_t)(v1314 + 1) >= v1146 || v1314[1] - 48 > 9)
                  {
                    v2247 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1961 = v2247;
                    v14.n128_u64[0] = 0x2200000002;
                    v2248 = "Invalid digits after decimal point";
                    goto LABEL_4538;
                  }
                  v1556 = v1314 + 2;
                  do
                  {
                    v1314 = v1556;
                    *v2336 = v1556;
                    if ((unint64_t)v1556 >= v1146)
                      break;
                    ++v1556;
                  }
                  while (*v1314 - 48 < 0xA);
                }
                else if (v1315 != 69 && v1315 != 101 && (uint64_t)&v1314[-v1147] <= 9)
                {
                  *v2335 = 6;
                  v1316 = *(unsigned __int8 *)v1147;
                  if (v1316 == 45)
                    v1317 = (unsigned __int8 *)(v1147 + 1);
                  else
                    v1317 = (unsigned __int8 *)v1147;
                  if (v1317 >= v1314)
                  {
                    if (v1316 != 45)
                    {
                      v1318 = 0;
LABEL_2790:
                      v14.n128_f64[0] = (double)v1318;
LABEL_2791:
                      v11 = v2328;
                      *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_2792:
                      v9 = 2;
LABEL_2793:
                      v10 = v2335;
                      v12 = v2336;
                      goto LABEL_2544;
                    }
                  }
                  else
                  {
                    v1318 = 0;
                    do
                    {
                      v1319 = *v1317++;
                      v1318 = v1319 + 10 * v1318 - 48;
                    }
                    while (v1317 < v1314);
                    if (v1316 != 45)
                      goto LABEL_2790;
                    if (v1318)
                    {
                      v14.n128_f64[0] = (double)-v1318;
                      goto LABEL_2791;
                    }
                  }
                  v11 = v2328;
                  *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_2792;
                }
              }
              if ((unint64_t)v1314 >= v1146 || (*v1314 | 0x20) != 0x65)
              {
LABEL_3286:
                *v2335 = 6;
                if ((uint64_t)&v1314[-v1147] < 0)
                  goto LABEL_3864;
                v2340.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v1147, v1314, &v2340.rlim_cur, 0x2E00000005);
                v14.n128_u64[0] = v2340.rlim_cur;
                goto LABEL_2791;
              }
              v2249 = v1314 + 1;
              *v2336 = v1314 + 1;
              if ((unint64_t)(v1314 + 1) < v1146)
              {
                v2250 = *v2249;
                if (v2250 == 45 || v2250 == 43)
                {
                  v2249 = v1314 + 2;
                  *v2336 = v1314 + 2;
                }
              }
              if ((unint64_t)v2249 < v1146 && *v2249 - 48 <= 9)
              {
                v2251 = v2249 + 1;
                do
                {
                  v1314 = v2251;
                  *v2336 = v2251;
                  if ((unint64_t)v2251 >= v1146)
                    break;
                  ++v2251;
                }
                while (*v1314 - 48 < 0xA);
                goto LABEL_3286;
              }
              v2247 = WTF::fastCompactMalloc((WTF *)0x20);
              v1961 = v2247;
              v14.n128_u64[0] = 0x5D00000002;
              v2248 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4538:
              *(_QWORD *)v2247 = v14.n128_u64[0];
              *(_QWORD *)(v2247 + 8) = v2248;
              *(_DWORD *)(v2247 + 16) = 4;
LABEL_3947:
              v1962 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1961;
              if (v1962)
              {
                if (*(_DWORD *)v1962 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1962, (WTF::AtomStringImpl *)a2, v1960, a4, a5, a6, a7, a8);
                  WTF::fastFree(v2015, v2016, v2017, v2018, v2019, v2020, v2021, v2022);
                }
                else
                {
                  *(_DWORD *)v1962 -= 2;
                }
              }
              v9 = 2;
              goto LABEL_3951;
            case 14:
              goto LABEL_2661;
            case 15:
              goto LABEL_2660;
            case 16:
              goto LABEL_2659;
            case 17:
              goto LABEL_2658;
            default:
              goto LABEL_2667;
          }
        }
        while (1)
        {
LABEL_35:
          v2339 = 0;
          v35 = *(_QWORD *)v8;
          v36 = *(_QWORD *)(*(_QWORD *)v8 + 56);
          v37 = *(_QWORD *)(v36 + 15056);
          if (v37)
          {
            v38 = *(unsigned int *)(v37 + 60);
            SlowCase = *(_QWORD *)(v37 + 24);
            if (SlowCase < *(_QWORD *)(v37 + 32))
              goto LABEL_37;
            SlowCase = *(_QWORD *)(v37 + 40);
            if ((SlowCase & 1) == 0)
            {
              v542 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v37 + 48);
              *(_QWORD *)(v37 + 32) = SlowCase + HIDWORD(v542);
              *(_QWORD *)(v37 + 40) = SlowCase + (int)v542;
LABEL_37:
              *(_QWORD *)(v37 + 24) = SlowCase + v38;
              goto LABEL_38;
            }
            JSC::sanitizeStackForVM(*(JSC **)(*(_QWORD *)v8 + 56), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v37, v36 + 192, v38, 0, 0);
          }
          else
          {
            SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v36 + 14936, *(JSC **)(*(_QWORD *)v8 + 56), 0x40uLL, 0, a5, a6, a7, a8);
            if (!SlowCase)
            {
              __break(0xC471u);
              JUMPOUT(0x198B05BACLL);
            }
          }
LABEL_38:
          *(_DWORD *)SlowCase = 0;
          *(_DWORD *)SlowCase = *(_DWORD *)(v35 + 848);
          *(_DWORD *)(SlowCase + 4) = 16783360;
          v14 = 0uLL;
          *(_OWORD *)(SlowCase + 8) = 0u;
          *(_OWORD *)(SlowCase + 24) = 0u;
          *(_OWORD *)(SlowCase + 40) = 0u;
          *(_QWORD *)(SlowCase + 56) = 0;
          v11 = v2328;
          if (*(_BYTE *)(v36 + 755))
            __dmb(0xAu);
          v2339 = (WTF::AtomStringImpl *)SlowCase;
          v41 = *(unsigned __int8 **)(v8 + 48);
          v40 = *(_QWORD *)(v8 + 56);
          if ((unint64_t)v41 < v40)
          {
            v42 = v40 - (_QWORD)v41;
            while (JSC::tokenTypesOfLatin1Characters[*v41] == 19)
            {
              *v12 = ++v41;
              if (!--v42)
              {
                v41 = (unsigned __int8 *)v40;
                break;
              }
            }
          }
          if (v41 == (unsigned __int8 *)v40)
          {
            v444 = 14;
LABEL_1015:
            *v10 = v444;
LABEL_831:
            v389 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v389 = 0xC00000002;
            *(_QWORD *)(v389 + 8) = "Expected '}'";
            *(_DWORD *)(v389 + 16) = 4;
            v390 = *(WTF::StringImpl **)v13;
            *(_QWORD *)v13 = v389;
            if (!v390)
              return 0;
LABEL_832:
            if (*(_DWORD *)v390 != 2)
            {
              *(_DWORD *)v390 -= 2;
              return 0;
            }
LABEL_1084:
            WTF::StringImpl::~StringImpl(v390, v382, v383, v384, v385, v386, v387, v388);
            WTF::fastFree(v473, v474, v475, v476, v477, v478, v479, v480);
            return 0;
          }
          *v10 = 18;
          a4 = *v41;
          v43 = JSC::tokenTypesOfLatin1Characters[a4];
          if (v43 > 4)
          {
            if (v43 != 6)
            {
              if (v43 == 5)
              {
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v40 - (_QWORD)v41) >= 4 && *(_WORD *)(v41 + 1) == 27765 && v41[3] == 108)
                  {
                    *v12 = v41 + 4;
                    v444 = 13;
                    goto LABEL_1015;
                  }
                }
                else if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v40 - (_QWORD)v41) >= 5 && *(_WORD *)(v41 + 1) == 27745 && *(_WORD *)(v41 + 3) == 25971)
                  {
                    *v12 = v41 + 5;
                    v444 = 12;
                    goto LABEL_1015;
                  }
                }
                else if ((_DWORD)a4 == 116
                       && (uint64_t)(v40 - (_QWORD)v41) >= 4
                       && *(_WORD *)(v41 + 1) == 30066
                       && v41[3] == 101)
                {
                  *v2336 = v41 + 4;
                  *v2335 = 11;
                  goto LABEL_831;
                }
                v926 = (int)v41;
                *v2328 = (WTF::AtomStringImpl *)v41;
                v927 = (int)v41;
                if ((unint64_t)v41 < v40)
                {
                  v928 = v40 - (_QWORD)v41;
                  v929 = (_DWORD)v41 + v928;
                  while (1)
                  {
                    v930 = *v41;
                    if (v930 != 36)
                    {
                      v931 = v930 != 95 && (v930 - 48) >= 0xA;
                      if (v931 && (v930 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    *v2336 = ++v41;
                    if (!--v928)
                    {
                      LODWORD(v41) = v929;
                      break;
                    }
                  }
                  v927 = (int)v41;
                }
                v8 = a1;
                v10 = v2335;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v927 - v926) & 0x7FFFFFFF;
                v43 = 5;
                *(_BYTE *)(a1 + 24) = 5;
                v11 = v2328;
                v12 = v2336;
LABEL_1341:
                if (v43 != 5 || !*(_BYTE *)(v8 + 88))
                  goto LABEL_662;
                goto LABEL_70;
              }
              if (v43 - 18 >= 2)
              {
LABEL_661:
                *v10 = v43;
                *v12 = v41 + 1;
LABEL_662:
                if (v43 != 3)
                  goto LABEL_831;
                v319 = *(unsigned __int8 **)(v8 + 48);
                v318 = *(_QWORD *)(v8 + 56);
                if ((unint64_t)v319 < v318)
                {
                  v320 = v318 - (_QWORD)v319;
                  while (JSC::tokenTypesOfLatin1Characters[*v319] == 19)
                  {
                    *v12 = ++v319;
                    if (!--v320)
                    {
                      v319 = (unsigned __int8 *)v318;
                      break;
                    }
                  }
                }
                if (v319 == (unsigned __int8 *)v318)
                  goto LABEL_1423;
                *v10 = 18;
                a4 = *v319;
                v321 = JSC::tokenTypesOfLatin1Characters[a4];
                if (v321 > 4)
                {
                  if (v321 != 6)
                  {
                    if (v321 != 5)
                    {
                      if (v321 - 18 >= 2)
                        goto LABEL_738;
                      WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                      v906 = v2340.rlim_cur;
                      if (!v2340.rlim_cur)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B06224);
                      }
                      *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                      *(_QWORD *)(v906 + 8) = v906 + 20;
                      *(_DWORD *)(v906 + 16) = 4;
                      *(_DWORD *)(v906 + 36) = 656436837;
                      v14 = *(__n128 *)"Unrecognized token '";
                      *(_OWORD *)(v906 + 20) = *(_OWORD *)"Unrecognized token '";
                      *(_BYTE *)(v906 + 40) = *v319;
                      *(_BYTE *)(v906 + 41) = 39;
                      v907 = *(WTF::StringImpl **)v2321;
                      *(_QWORD *)v2321 = v906;
                      if (v907)
                      {
                        if (*(_DWORD *)v907 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v907, (WTF::AtomStringImpl *)a2, v905, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1125, v1126, v1127, v1128, v1129, v1130, v1131, v1132);
                        }
                        else
                        {
                          *(_DWORD *)v907 -= 2;
                        }
                      }
                      goto LABEL_739;
                    }
                    if ((_DWORD)a4 == 110)
                    {
                      if ((uint64_t)(v318 - (_QWORD)v319) >= 4 && *(_WORD *)(v319 + 1) == 27765 && v319[3] == 108)
                      {
LABEL_1182:
                        *v12 = v319 + 4;
                        v488 = 13;
LABEL_1183:
                        *v10 = v488;
                        goto LABEL_739;
                      }
                    }
                    else if ((_DWORD)a4 == 102)
                    {
                      if ((uint64_t)(v318 - (_QWORD)v319) >= 5
                        && *(_WORD *)(v319 + 1) == 27745
                        && *(_WORD *)(v319 + 3) == 25971)
                      {
                        goto LABEL_1438;
                      }
                    }
                    else if ((_DWORD)a4 == 116
                           && (uint64_t)(v318 - (_QWORD)v319) >= 4
                           && *(_WORD *)(v319 + 1) == 30066
                           && v319[3] == 101)
                    {
LABEL_2205:
                      v10 = v2335;
                      v12 = v2336;
                      *v2336 = v319 + 4;
                      *v2335 = 11;
                      v11 = v2328;
                      goto LABEL_2206;
                    }
                    v1083 = (int)v319;
                    *v2328 = (WTF::AtomStringImpl *)v319;
                    v1084 = (int)v319;
                    if ((unint64_t)v319 < v318)
                    {
                      v1121 = v318 - (_QWORD)v319;
                      v1086 = (_DWORD)v319 + v1121;
                      while (1)
                      {
                        v1122 = *v319;
                        if (v1122 != 36)
                        {
                          v1123 = v1122 != 95 && (v1122 - 48) >= 0xA;
                          if (v1123 && (v1122 | 0x20u) - 97 > 0x19)
                            goto LABEL_2381;
                        }
                        *v2336 = ++v319;
                        if (!--v1121)
                        {
LABEL_2380:
                          LODWORD(v319) = v1086;
                          goto LABEL_2381;
                        }
                      }
                    }
LABEL_2382:
                    v8 = a1;
                    v10 = v2335;
                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1084 - v1083) & 0x7FFFFFFF;
                    *(_BYTE *)(a1 + 24) = 5;
                    v11 = v2328;
                    v12 = v2336;
                    goto LABEL_739;
                  }
                  v414 = v319;
                  if ((unint64_t)v319 < v318)
                  {
                    v414 = v319;
                    if ((_DWORD)a4 == 45)
                    {
                      v414 = v319 + 1;
                      *v12 = v319 + 1;
                    }
                  }
                  if ((unint64_t)v414 >= v318)
                    goto LABEL_3326;
                  v415 = *v414;
                  if (v415 == 48)
                  {
                    v342 = v414 + 1;
                    *v12 = v342;
                  }
                  else
                  {
                    if ((v415 - 49) > 8)
                      goto LABEL_3326;
                    v343 = v414 + 1;
                    do
                    {
                      v342 = v343;
                      *v12 = v343;
                      if ((unint64_t)v343 >= v318)
                        break;
                      ++v343;
                    }
                    while (*v342 - 48 < 0xA);
                  }
                  if ((unint64_t)v342 < v318)
                  {
                    v486 = *v342;
                    if (v486 == 46)
                    {
                      *v12 = v342 + 1;
                      if ((unint64_t)(v342 + 1) >= v318 || v342[1] - 48 > 9)
                      {
LABEL_3381:
                        v1614 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1616 = v1614;
                        v14.n128_u64[0] = 0x2200000002;
                        v1617 = "Invalid digits after decimal point";
                        goto LABEL_3327;
                      }
                      v487 = v342 + 2;
                      do
                      {
                        v342 = v487;
                        *v12 = v487;
                        if ((unint64_t)v487 >= v318)
                          break;
                        ++v487;
                      }
                      while (*v342 - 48 < 0xA);
                    }
                    else if (v486 != 69 && v486 != 101 && v342 - v319 <= 9)
                    {
                      *v10 = 6;
                      v369 = *v319;
                      if (v369 == 45)
                        v359 = v319 + 1;
                      else
                        v359 = v319;
                      if (v359 < v342)
                      {
                        v361 = 0;
                        do
                        {
                          v360 = *v359++;
                          v361 = v360 + 10 * v361 - 48;
                        }
                        while (v359 < v342);
                        goto LABEL_805;
                      }
LABEL_1131:
                      if (v369 != 45)
                      {
                        v361 = 0;
                        goto LABEL_806;
                      }
LABEL_1595:
                      *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                      goto LABEL_739;
                    }
                  }
                  if ((unint64_t)v342 >= v318 || (*v342 | 0x20) != 0x65)
                    goto LABEL_1140;
                  v393 = v13;
                  v1706 = v342 + 1;
                  *v12 = v342 + 1;
                  if ((unint64_t)(v342 + 1) < v318)
                  {
                    v1707 = *v1706;
                    if (v1707 == 45 || v1707 == 43)
                    {
                      v1706 = v342 + 2;
                      *v2336 = v342 + 2;
                    }
                  }
                  if ((unint64_t)v1706 < v318 && *v1706 - 48 <= 9)
                  {
                    v1708 = v1706 + 1;
                    v12 = v2336;
                    while (1)
                    {
                      v342 = v1708;
                      *v12 = v1708;
                      if ((unint64_t)v1708 >= v318)
                        goto LABEL_3754;
                      ++v1708;
                      v13 = v393;
                      v11 = v2328;
                      v10 = v2335;
                      v12 = v2336;
                      v8 = a1;
                      if (*v342 - 48 >= 0xA)
                        goto LABEL_1140;
                    }
                  }
LABEL_3504:
                  v1709 = WTF::fastCompactMalloc((WTF *)0x20);
                  v395 = v1709;
                  v14.n128_u64[0] = 0x5D00000002;
                  v1710 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                  goto LABEL_3505;
                }
                if (v321 != 4)
                  goto LABEL_738;
                v322 = *(unsigned __int8 *)(v8 + 40);
                if ((_DWORD)a4 == 39)
                {
                  v393 = v13;
                  if (!*(_BYTE *)(v8 + 40))
                    goto LABEL_4304;
                  v323 = (size_t)(v319 + 1);
                  v10 = v2335;
                  v12 = v2336;
                  *v2336 = v319 + 1;
                  v11 = v2328;
                  v8 = a1;
                }
                else
                {
                  v323 = (size_t)(v319 + 1);
                  *v12 = v319 + 1;
                  if (!v322)
                  {
                    v392 = v318 - v323;
                    if ((uint64_t)(v318 - v323) < 0)
                      goto LABEL_3864;
                    v330 = (int8x16_t *)&v319[v392 + 1];
                    if (v392 < 0x10)
                    {
                      v703 = (int8x16_t *)(v319 + 1);
                      if (v318 != v323)
                      {
                        while (JSC::safeStringLatin1CharactersInStrictJSON[v703->u8[0]])
                        {
                          v703 = (int8x16_t *)((char *)v703 + 1);
                          if (!--v392)
                            goto LABEL_769;
                        }
LABEL_1630:
                        v330 = v703;
                      }
                    }
                    else
                    {
                      v357 = v319 + 16;
                      while (1)
                      {
                        v352 = *(int8x16_t *)(v357 - 15);
                        v353.i64[0] = 0x2222222222222222;
                        v353.i64[1] = 0x2222222222222222;
                        v354 = vceqq_s8(v352, v353);
                        v355.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v355.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v356.i64[0] = 0x2020202020202020;
                        v356.i64[1] = 0x2020202020202020;
                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v352, v355), (int8x16_t)vcgtq_u8(v356, (uint8x16_t)v352)), v354);
                        v354.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                        if (v354.i32[0])
                          break;
                        v357 += 16;
                        if (v357 >= (unsigned __int8 *)v330)
                        {
LABEL_880:
                          if (v357 - 15 >= (unsigned __int8 *)v330)
                          {
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                          }
                          else
                          {
                            v358 = (unsigned __int8 *)&v330[-1];
                            v408 = v330[-1];
                            v409.i64[0] = 0x2222222222222222;
                            v409.i64[1] = 0x2222222222222222;
                            v410 = vceqq_s8(v408, v409);
                            v411.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v411.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v408, v411), (int8x16_t)vcgtq_u8(v356, (uint8x16_t)v408)), v410);
                            v410.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            if (v410.i32[0])
                              goto LABEL_768;
                          }
                          goto LABEL_769;
                        }
                      }
LABEL_767:
                      v358 = v357 - 15;
LABEL_768:
                      v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                      v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                      v330 = (int8x16_t *)&v358[v14.n128_u32[0]];
                    }
LABEL_769:
                    *v12 = (unsigned __int8 *)v330;
LABEL_770:
                    if ((unint64_t)v330 < v318 && v330->u8[0] == (_DWORD)a4)
                    {
                      *(_BYTE *)(v8 + 25) |= 1u;
                      *(_QWORD *)(v8 + 32) = v323;
                      *(_QWORD *)(v8 + 48) = (char *)v330->i64 + 1;
                      *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v330 - v323) & 0x7FFFFFFF;
                      *(_BYTE *)(v8 + 24) = 4;
                    }
                    else
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v323, a4, a5, a6, a7, a8);
                    }
                    goto LABEL_739;
                  }
                }
                if (v323 >= v318)
                  goto LABEL_3823;
                v1769 = (uint64_t)&v319[v318 - v323 + 1];
                v330 = (int8x16_t *)v323;
                while (1)
                {
                  v326 = v330->u8[0];
                  v327 = v326 < 0x20 || v326 == 92;
                  v328 = v327 || v326 == (_DWORD)a4;
                  v329 = v328;
                  if (v326 != 9 && v329)
                    goto LABEL_770;
                  v330 = (int8x16_t *)((char *)v330 + 1);
                  *v12 = (unsigned __int8 *)v330;
                  if (v330 == (int8x16_t *)v1769)
                  {
LABEL_3534:
                    v330 = (int8x16_t *)v1769;
                    goto LABEL_770;
                  }
                }
              }
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
              v746 = v2340.rlim_cur;
              if (!v2340.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B08050);
              }
              *(_QWORD *)v2340.rlim_cur = 0x1600000002;
              *(_QWORD *)(v746 + 8) = v746 + 20;
              *(_DWORD *)(v746 + 16) = 4;
              *(_DWORD *)(v746 + 36) = 656436837;
              *(_OWORD *)(v746 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v746 + 40) = *v41;
              *(_BYTE *)(v746 + 41) = 39;
LABEL_1598:
              v747 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v746;
              if (v747)
              {
                if (*(_DWORD *)v747 == 2)
                {
                  WTF::StringImpl::~StringImpl(v747, v739, v740, v741, v742, v743, v744, v745);
                  WTF::fastFree(v1012, v1013, v1014, v1015, v1016, v1017, v1018, v1019);
                }
                else
                {
                  *(_DWORD *)v747 -= 2;
                }
              }
              goto LABEL_831;
            }
            v372 = v41;
            if ((unint64_t)v41 < v40)
            {
              v372 = v41;
              if ((_DWORD)a4 == 45)
              {
                v372 = v41 + 1;
                *v12 = v41 + 1;
              }
            }
            if ((unint64_t)v372 < v40)
            {
              v373 = *v372;
              if (v373 == 48)
              {
                v375 = v372 + 1;
                *v12 = v375;
LABEL_817:
                if ((unint64_t)v375 >= v40)
                  goto LABEL_964;
                v376 = *v375;
                if (v376 != 46)
                {
                  if (v376 != 69 && v376 != 101 && v375 - v41 <= 9)
                  {
                    *v10 = 6;
                    v377 = *v41;
                    if (v377 == 45)
                      v378 = v41 + 1;
                    else
                      v378 = v41;
                    if (v378 >= v375)
                    {
                      if (v377 != 45)
                      {
                        v379 = 0;
LABEL_829:
                        v381 = (double)v379;
                        goto LABEL_830;
                      }
                    }
                    else
                    {
                      v379 = 0;
                      do
                      {
                        v380 = *v378++;
                        v379 = v380 + 10 * v379 - 48;
                      }
                      while (v378 < v375);
                      if (v377 != 45)
                        goto LABEL_829;
                      if (v379)
                      {
                        v379 = -v379;
                        goto LABEL_829;
                      }
                    }
                    *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                    goto LABEL_831;
                  }
LABEL_964:
                  if ((unint64_t)v375 < v40 && (*v375 | 0x20) == 0x65)
                  {
                    v1526 = v13;
                    v1527 = v375 + 1;
                    *v12 = v375 + 1;
                    if ((unint64_t)(v375 + 1) < v40)
                    {
                      v1528 = *v1527;
                      if (v1528 == 45 || v1528 == 43)
                      {
                        v1527 = v375 + 2;
                        *v2336 = v375 + 2;
                      }
                    }
                    if ((unint64_t)v1527 >= v40 || *v1527 - 48 > 9)
                    {
                      v1578 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1586 = v1578;
                      v1587 = 0x5D00000002;
                      v1588 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                      goto LABEL_3300;
                    }
                    v1529 = v1527 + 1;
                    v11 = v2328;
                    v10 = v2335;
                    while (1)
                    {
                      v375 = v1529;
                      *v2336 = v1529;
                      if ((unint64_t)v1529 >= v40)
                        break;
                      ++v1529;
                      v13 = v1526;
                      if (*v375 - 48 >= 0xA)
                        goto LABEL_966;
                    }
                    v13 = v1526;
                    v11 = v2328;
                    v10 = v2335;
                  }
LABEL_966:
                  *v10 = 6;
                  if (v375 - v41 < 0)
                    goto LABEL_3864;
                  v2340.rlim_cur = 0;
                  fast_float::from_chars_advanced<double,char>(v41, v375, &v2340.rlim_cur, 0x2E00000005);
                  v381 = *(double *)&v2340.rlim_cur;
LABEL_830:
                  *(double *)v11 = v381;
                  goto LABEL_831;
                }
                *v12 = v375 + 1;
                if ((unint64_t)(v375 + 1) < v40 && v375[1] - 48 <= 9)
                {
                  v424 = v375 + 2;
                  do
                  {
                    v375 = v424;
                    *v12 = v424;
                    if ((unint64_t)v424 >= v40)
                      break;
                    ++v424;
                  }
                  while (*v375 - 48 < 0xA);
                  goto LABEL_964;
                }
                v1462 = WTF::fastCompactMalloc((WTF *)0x20);
                v746 = v1462;
                v1463 = 0x2200000002;
                v1464 = "Invalid digits after decimal point";
LABEL_3109:
                *(_QWORD *)v1462 = v1463;
                *(_QWORD *)(v1462 + 8) = v1464;
                *(_DWORD *)(v1462 + 16) = 4;
                goto LABEL_1598;
              }
              if ((v373 - 49) <= 8)
              {
                v374 = v372 + 1;
                do
                {
                  v375 = v374;
                  *v12 = v374;
                  if ((unint64_t)v374 >= v40)
                    break;
                  ++v374;
                }
                while (*v375 - 48 < 0xA);
                goto LABEL_817;
              }
            }
            v1462 = WTF::fastCompactMalloc((WTF *)0x20);
            v746 = v1462;
            v1463 = 0xE00000002;
            v1464 = "Invalid number";
            goto LABEL_3109;
          }
          if (v43 != 4)
            goto LABEL_661;
          v44 = *(unsigned __int8 *)(v8 + 40);
          if ((_DWORD)a4 == 39)
          {
            v1526 = v13;
            if (!*(_BYTE *)(v8 + 40))
            {
              v1578 = WTF::fastCompactMalloc((WTF *)0x20);
              v1586 = v1578;
              v1587 = 0x2900000002;
              v1588 = "Single quotes (') are not allowed in JSON";
LABEL_3300:
              *(_QWORD *)v1578 = v1587;
              *(_QWORD *)(v1578 + 8) = v1588;
              *(_DWORD *)(v1578 + 16) = 4;
              v1589 = *(WTF::StringImpl **)v2321;
              *(_QWORD *)v2321 = v1586;
              v13 = v1526;
              if (v1589)
              {
                if (*(_DWORD *)v1589 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1589, v1579, v1580, v1581, v1582, v1583, v1584, v1585);
                  WTF::fastFree(v1810, v1811, v1812, v1813, v1814, v1815, v1816, v1817);
                }
                else
                {
                  *(_DWORD *)v1589 -= 2;
                }
                v13 = v1526;
              }
              goto LABEL_831;
            }
            a3 = (size_t)(v41 + 1);
            v10 = v2335;
            v12 = v2336;
            *v2336 = v41 + 1;
            v11 = v2328;
            v8 = a1;
          }
          else
          {
            a3 = (size_t)(v41 + 1);
            *v12 = v41 + 1;
            if (!v44)
            {
              v324 = v40 - a3;
              if ((uint64_t)(v40 - a3) < 0)
                goto LABEL_3864;
              v49 = (int8x16_t *)&v41[v324 + 1];
              if (v324 < 0x10)
              {
                v530 = (int8x16_t *)(v41 + 1);
                if (v40 == a3)
                  goto LABEL_679;
                do
                {
                  if (!JSC::safeStringLatin1CharactersInStrictJSON[v530->u8[0]])
                  {
                    v49 = v530;
                    goto LABEL_679;
                  }
                  v530 = (int8x16_t *)((char *)v530 + 1);
                  --v324;
                }
                while (v324);
                goto LABEL_679;
              }
              v313 = v41 + 16;
              while (1)
              {
                v308 = *(int8x16_t *)(v313 - 15);
                v309.i64[0] = 0x2222222222222222;
                v309.i64[1] = 0x2222222222222222;
                v310 = vceqq_s8(v308, v309);
                v311.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v311.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v312.i64[0] = 0x2020202020202020;
                v312.i64[1] = 0x2020202020202020;
                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v308, v311), (int8x16_t)vcgtq_u8(v312, (uint8x16_t)v308)), v310);
                v310.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                if (v310.i32[0])
                  break;
                v313 += 16;
                if (v313 >= (unsigned __int8 *)v49)
                {
                  if (v313 - 15 >= (unsigned __int8 *)v49)
                  {
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    goto LABEL_679;
                  }
                  v325 = (unsigned __int8 *)&v49[-1];
                  v1755 = v49[-1];
                  v1756.i64[0] = 0x2222222222222222;
                  v1756.i64[1] = 0x2222222222222222;
                  v1757 = vceqq_s8(v1755, v1756);
                  v1758.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v1758.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1755, v1758), (int8x16_t)vcgtq_u8(v312, (uint8x16_t)v1755)), v1757);
                  v1757.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  if (!v1757.i32[0])
                  {
LABEL_679:
                    *v12 = (unsigned __int8 *)v49;
                    goto LABEL_67;
                  }
LABEL_678:
                  v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                  v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                  v49 = (int8x16_t *)&v325[v14.n128_u32[0]];
                  goto LABEL_679;
                }
              }
              v325 = v313 - 15;
              goto LABEL_678;
            }
          }
          if (a3 >= v40)
          {
            v49 = (int8x16_t *)a3;
          }
          else
          {
            v49 = (int8x16_t *)a3;
            while (1)
            {
              v45 = v49->u8[0];
              v46 = v45 < 0x20 || v45 == 92;
              v47 = v46 || v45 == (_DWORD)a4;
              v48 = v47;
              if (v45 != 9 && v48)
                break;
              v49 = (int8x16_t *)((char *)v49 + 1);
              *v12 = (unsigned __int8 *)v49;
              if (v49 == (int8x16_t *)&v41[v40 - a3 + 1])
              {
                v49 = (int8x16_t *)&v41[v40 - a3 + 1];
                break;
              }
            }
          }
LABEL_67:
          if ((unint64_t)v49 < v40 && v49->u8[0] == (_DWORD)a4)
          {
            *(_BYTE *)(v8 + 25) |= 1u;
            *(_QWORD *)(v8 + 32) = a3;
            *(_QWORD *)(v8 + 48) = (char *)v49->i64 + 1;
            *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v49 - a3) & 0x7FFFFFFF;
            *(_BYTE *)(v8 + 24) = 4;
          }
          else
          {
            v43 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
            if (v43 != 4)
              goto LABEL_1341;
          }
LABEL_70:
          v2337 = (char *)v2333 + 64784;
          v2325 = v8 + 144;
          v2326 = (uint64_t *)(v8 + 240);
          do
          {
            if (*v10 == 5)
            {
              v636 = *(_DWORD *)(v8 + 28);
              v637 = v636 & 0x7FFFFFFF;
              if ((v636 & 0x7FFFFFFF) != 0)
              {
                v638 = *(uint8x8_t **)(v8 + 32);
                a2 = v638->u8[0];
                if ((_DWORD)v637 == 1)
                {
                  JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v2333 + 41968), a2, a4, a5, a6, a7, a8, &v2340);
                }
                else
                {
                  if (v637 < 0x1C)
                  {
                    v639 = ((((_DWORD)a2 << 6) | (v638->u8[v637 - 1] << 14)) ^ a2) + v638->u8[v637 - 1];
                    v640 = (v639 + (v639 >> 6));
                    v641 = &v2337[64 * v640];
                    if ((_DWORD)v637 != *((unsigned __int16 *)v641 + 27))
                    {
LABEL_1830:
                      WTF::AtomStringImpl::add((uint64_t)v638, v636 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                      v645 = (WTF::StringImpl *)v2340.rlim_cur;
                      JSC::Identifier::operator=((WTF::StringImpl **)v641 + 7, (WTF::AtomStringImpl *)v2340.rlim_cur, v855, v856, v857, v858, v859, v860);
                      *((_WORD *)v641 + 27) = v636;
                      v861 = 2 * v637;
                      do
                      {
                        v862 = v638->u8[0];
                        v638 = (uint8x8_t *)((char *)v638 + 1);
                        *(_WORD *)v641 = v862;
                        v641 += 2;
                        v861 -= 2;
                      }
                      while (v861);
                      goto LABEL_1451;
                    }
                    if (v637 >= 8)
                    {
                      v642 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v641, (int16x8_t)vmovl_u8(*v638));
                      v642.i16[0] = vminvq_u16(v642);
                      if (v642.i32[0])
                      {
                        v643 = v636 & 7;
                        v644 = (int16x8_t *)(v2331 + ((2 * v643) | (v640 << 6)));
                        while (1)
                        {
                          v14 = (__n128)vceqq_s16(*v644, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v638 + v643)));
                          v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                          if (!v14.n128_u32[0])
                            break;
                          v643 += 8;
                          ++v644;
                          if (v643 >= v637)
                            goto LABEL_1449;
                        }
                      }
                      goto LABEL_1830;
                    }
                    if (v637 < 4)
                    {
                      if (((v638->u16[0] | (v638->u16[0] << 8)) & 0xFF00FF) != *(_DWORD *)v641
                        || ((*(unsigned __int16 *)((char *)v638->u16 + (v636 & 1)) | (*(unsigned __int16 *)((char *)v638->u16 + (v636 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)&v641[2 * (v636 & 1)])
                      {
                        goto LABEL_1830;
                      }
                    }
                    else
                    {
                      v763 = (v638->u32[0] | ((unint64_t)v638->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                      v764 = (*(unsigned int *)((char *)v638->u32 + (v636 & 3)) | ((unint64_t)*(unsigned int *)((char *)v638->u32 + (v636 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                      v765 = (v764 | (v764 << 8)) & 0xFF00FF00FF00FFLL;
                      if (((v763 | (v763 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v641
                        || v765 != *(_QWORD *)&v641[2 * (v636 & 3)])
                      {
                        goto LABEL_1830;
                      }
                    }
LABEL_1449:
                    v645 = *(WTF::StringImpl **)&v2337[64 * v640 + 56];
                    goto LABEL_1450;
                  }
                  WTF::AtomStringImpl::add(*(_QWORD *)(v8 + 32), v636 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                }
                v645 = (WTF::StringImpl *)v2340.rlim_cur;
                goto LABEL_1451;
              }
              v645 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_1450:
              *(_DWORD *)v645 += 2;
LABEL_1451:
              v2338 = v645;
              v11 = v2328;
              v8 = a1;
              v10 = v2335;
              goto LABEL_84;
            }
            if ((*(_BYTE *)(v8 + 25) & 1) != 0)
            {
              v50 = *(_DWORD *)(v8 + 28);
              v51 = v50 & 0x7FFFFFFF;
              if ((v50 & 0x7FFFFFFF) == 0)
              {
                v58 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
                WTF::StringImpl::s_emptyAtomString += 2;
                goto LABEL_83;
              }
              v52 = *(uint8x8_t **)(v8 + 32);
              a2 = v52->u8[0];
              if ((_DWORD)v51 == 1)
              {
                JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v2333 + 41968), a2, a4, a5, a6, a7, a8, &v2340);
              }
              else
              {
                if (v51 < 0x1C)
                {
                  v53 = ((((_BYTE)a2 << 6) ^ a2)
                                        + v52->i8[v51 - 1]
                                        + ((((((_DWORD)a2 << 6) | (v52->u8[v51 - 1] << 14)) ^ a2)
                                          + v52->u8[v51 - 1]) >> 6));
                  v54 = (int16x8_t *)&v2337[64 * v53];
                  if ((_DWORD)v51 != v54[3].u16[3])
                    goto LABEL_165;
                  if (v51 >= 8)
                  {
                    v55 = (uint16x8_t)vceqq_s16(*v54, (int16x8_t)vmovl_u8(*v52));
                    v55.i16[0] = vminvq_u16(v55);
                    if (v55.i32[0])
                    {
                      v56 = v50 & 7;
                      v57 = (int16x8_t *)(v2331 + ((2 * v56) | (v53 << 6)));
                      while (1)
                      {
                        v14 = (__n128)vceqq_s16(*v57, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v52 + v56)));
                        v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                        if (!v14.n128_u32[0])
                          break;
                        v56 += 8;
                        ++v57;
                        if (v56 >= v51)
                          goto LABEL_82;
                      }
                    }
LABEL_165:
                    v107 = 0;
                    v2344 = (WTF::AtomStringImpl *)v52;
                    v2345 = v50 & 0x7FFFFFFF;
                    v108 = -1640531527;
                    do
                    {
                      v109 = ((v108 + v52->u8[v107]) << 16) ^ (v52->u8[v107 + 1] << 11) ^ (v108 + v52->u8[v107]);
                      v108 = v109 + (v109 >> 11);
                      v110 = v107 + 3;
                      v107 += 2;
                    }
                    while (v110 < v51);
                    if ((v50 & 1) != 0)
                    {
                      v111 = (v108 + v52->u8[v51 - 1]) ^ ((v108 + v52->u8[v51 - 1]) << 11);
                      v108 = v111 + (v111 >> 17);
                    }
                    v112 = (v108 ^ (8 * v108)) + ((v108 ^ (8 * v108)) >> 5);
                    v113 = (v112 ^ (4 * v112)) + ((v112 ^ (4 * v112)) >> 15);
                    v114 = (v113 ^ (v113 << 10)) & 0xFFFFFF;
                    if (!v114)
                      v114 = 0x800000;
                    v2346 = v114;
                    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                    {
LABEL_174:
                      v116 = *(_QWORD *)(v2329 + 736);
                      if (v116)
                        goto LABEL_175;
                      v159 = atomic_load(&WTF::initialize(void)::onceKey);
                      if (v159 != -1)
                      {
                        v2340.rlim_cur = (rlim_t)&v2338;
                        v2348[0] = &v2340;
                        std::__call_once(&WTF::initialize(void)::onceKey, v2348, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                      }
                      v160 = WTF::fastMalloc((WTF *)0x68);
                      v116 = v160;
                      *(_OWORD *)v160 = 0u;
                      *(_OWORD *)(v160 + 16) = 0u;
                      *(_OWORD *)(v160 + 32) = 0u;
                      *(_OWORD *)(v160 + 48) = 0u;
                      *(_OWORD *)(v160 + 64) = 0u;
                      *(_OWORD *)(v160 + 80) = 0u;
                      *(_QWORD *)(v160 + 96) = 0;
                      *(_DWORD *)v160 = 1;
                      *(_OWORD *)(v160 + 8) = 0u;
                      v161 = (unint64_t *)(v160 + 8);
                      *(_OWORD *)(v160 + 24) = 0u;
                      do
                      {
                        v162 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                        v163 = v162 + 1;
                      }
                      while (__stlxr(v163, (unsigned int *)&WTF::ThreadLike::s_uid));
                      *(_DWORD *)(v160 + 48) = v163;
                      *(_QWORD *)(v160 + 52) = 0;
                      *(_QWORD *)(v160 + 68) = 0;
                      *(_QWORD *)(v160 + 60) = 0;
                      *(_DWORD *)(v160 + 76) = 0;
                      *(_QWORD *)(v160 + 88) = 0;
                      *(_QWORD *)(v160 + 96) = 0;
                      v164 = pthread_self();
                      if (__ldaxr(v161))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1uLL, v161))
                      {
LABEL_276:
                        *(_QWORD *)(v116 + 40) = v164;
                        *(_DWORD *)(v116 + 52) = pthread_mach_thread_np(v164);
                        v166 = __ldxr(v161);
                        if (v166 == 1)
                        {
                          if (!__stlxr(0, v161))
                            goto LABEL_360;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::WordLock::unlockSlow((WTF::WordLock *)v161);
LABEL_360:
                        stackaddr_np = *(char **)(v116 + 16);
                        if (!stackaddr_np)
                        {
                          v2319 = v13;
                          v251 = pthread_main_np();
                          v252 = pthread_self();
                          stackaddr_np = (char *)pthread_get_stackaddr_np(v252);
                          if (v251)
                          {
                            getrlimit(3, &v2340);
                            if (v2340.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                              stacksize_np = 0x800000;
                            else
                              stacksize_np = v2340.rlim_cur;
                          }
                          else
                          {
                            stacksize_np = pthread_get_stacksize_np(v252);
                          }
                          *(_QWORD *)(v116 + 16) = stackaddr_np;
                          *(_QWORD *)(v116 + 24) = &stackaddr_np[-stacksize_np];
                          v13 = v2319;
                        }
                        *(_QWORD *)(v116 + 80) = stackaddr_np;
                        *(_QWORD *)(v116 + 56) = v116 + 64;
                        v200 = pthread_self();
                        v11 = v2328;
                        if (pthread_equal(v200, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                        {
                          v201 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                          if (v201 != -1)
                          {
                            v2340.rlim_cur = (rlim_t)&v2338;
                            v2348[0] = &v2340;
                            std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v2348, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                          }
                          *(_QWORD *)(v116 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                        }
                        *(_QWORD *)(v2329 + 736) = v116;
                        pthread_key_init_np();
LABEL_175:
                        WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v116 + 56), (uint64_t)&v2344, a4, a5, a6, a7, a8, (uint64_t)&v2340);
                        v118 = *(unsigned int *)v2340.rlim_cur;
                        v58 = (WTF::StringImpl *)(16 * v118);
                        if (!(_BYTE)v2341)
                          *(_DWORD *)v58 += 2;
                        v119 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                        if (v119 == 1)
                        {
                          if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                          {
LABEL_254:
                            if ((_DWORD)v118)
                              *(_DWORD *)v58 += 2;
                            v153 = &v2337[64 * v53];
                            v154 = *((_QWORD *)v153 + 7);
                            *((_QWORD *)v153 + 7) = v58;
                            v8 = a1;
                            if (!v154)
                              goto LABEL_259;
                            if (*(_DWORD *)v154 != 2)
                            {
                              *(_DWORD *)v154 -= 2;
                              goto LABEL_259;
                            }
                            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v154, (WTF::AtomStringImpl *)a2, a3, v117, a5, a6, a7, a8);
                            v249 = *(_QWORD *)(v2329 + 752);
                            if (v249)
                            {
                              if (!(v154 >> 43)
                                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v154 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v154)) & 1) != 0)
                              {
                                goto LABEL_476;
                              }
                              if (v154 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v154 >> 24)
                              {
                                v248 = 0;
                              }
                              else
                              {
                                v248 = (*(_DWORD *)((char *)off_1ECF425F8
                                                  + ((((v154 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                  + 24) >> (2 * ((BYTE3(v154) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                if ((_DWORD)v248 == 1)
                                {
LABEL_476:
                                  v250 = *(unsigned int *)(v249 + 8000);
                                  if (v250 >= 0x3E7)
                                  {
                                    pas_thread_local_cache_append_deallocation_slow(v249, v154, (os_unfair_lock_s *)5, v248, a5, a6, a7, a8);
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v249 + 8 * v250) = v154 | 0x5000000000000;
                                    *(_DWORD *)(v249 + 8000) = v250 + 1;
                                  }
                                  goto LABEL_259;
                                }
                              }
                              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v249, v154, 1, v248, a5, a6, a7, a8);
                            }
                            else
                            {
                              pas_try_deallocate_slow_no_cache(v154, (uint64_t)&bmalloc_heap_config, 1);
                            }
LABEL_259:
                            v54[3].i16[3] = v50;
                            v155 = 2 * v51;
                            do
                            {
                              v156 = v52->u8[0];
                              v52 = (uint8x8_t *)((char *)v52 + 1);
                              v54->i16[0] = v156;
                              v54 = (int16x8_t *)((char *)v54 + 2);
                              v155 -= 2;
                            }
                            while (v155);
                            v10 = v2335;
                            v12 = v2336;
                            goto LABEL_83;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, v117, a5, a6, a7, a8);
                        goto LABEL_254;
                      }
                      WTF::WordLock::lockSlow((WTF::WordLock *)v161);
                      goto LABEL_276;
                    }
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                    goto LABEL_174;
                  }
                  if (v51 < 4)
                  {
                    if (((v52->u16[0] | (v52->u16[0] << 8)) & 0xFF00FF) != v54->i32[0]
                      || ((*(unsigned __int16 *)((char *)v52->u16 + (v50 & 1)) | (*(unsigned __int16 *)((char *)v52->u16 + (v50 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v54->i32 + 2 * (v50 & 1)))
                    {
                      goto LABEL_165;
                    }
                  }
                  else
                  {
                    v74 = (v52->u32[0] | ((unint64_t)v52->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                    v75 = (*(unsigned int *)((char *)v52->u32 + (v50 & 3)) | ((unint64_t)*(unsigned int *)((char *)v52->u32 + (v50 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                    v76 = (v75 | (v75 << 8)) & 0xFF00FF00FF00FFLL;
                    if (((v74 | (v74 << 8)) & 0xFF00FF00FF00FFLL) != v54->i64[0]
                      || v76 != *(uint64_t *)((char *)v54->i64 + 2 * (v50 & 3)))
                    {
                      goto LABEL_165;
                    }
                  }
LABEL_82:
                  v12 = v2336;
                  v58 = *(WTF::StringImpl **)&v2337[64 * v53 + 56];
                  *(_DWORD *)v58 += 2;
                  v8 = a1;
                  v10 = v2335;
LABEL_83:
                  v2338 = v58;
                  goto LABEL_84;
                }
                WTF::AtomStringImpl::add(*(_QWORD *)(v8 + 32), v50 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
              }
              v58 = (WTF::StringImpl *)v2340.rlim_cur;
              goto LABEL_83;
            }
            v1240 = *(_DWORD *)(v8 + 28);
            v1241 = v1240 & 0x7FFFFFFF;
            if ((v1240 & 0x7FFFFFFF) != 0)
            {
              v1242 = *(int16x8_t **)(a1 + 32);
              v1243 = v1242->u16[0];
              if ((_DWORD)v1241 == 1)
              {
                if (v1243 <= 0xFF)
                {
                  JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v2333 + 41968), v1242->i16[0], a4, a5, a6, a7, a8, &v2340);
                  goto LABEL_3924;
                }
              }
              else if (v1241 >= 0x1C)
              {
                WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1240 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
LABEL_3924:
                v1351 = (WTF::StringImpl *)v2340.rlim_cur;
                goto LABEL_2901;
              }
              v1244 = (v1243 << 6) ^ (v1242->u16[v1241 - 1] << 14) ^ v1243;
              v1245 = (v1244 + (v1244 >> 14) + ((v1244 + (v1244 >> 14)) >> 6));
              v1246 = &v2337[64 * v1245];
              v1247 = v1246 + 54;
              if ((_DWORD)v1241 != *((unsigned __int16 *)v1246 + 27))
                goto LABEL_4236;
              if ((_DWORD)v1241 != 1)
              {
                switch(31 - __clz(v1241 - 1))
                {
                  case 0u:
                    v1349 = *(_DWORD *)v1246;
                    v1350 = v1242->i32[0];
                    goto LABEL_2898;
                  case 1u:
                    if (*(_DWORD *)v1246 != v1242->i32[0])
                      goto LABEL_4236;
                    v1349 = *(_DWORD *)&v1246[2 * v1241 - 4];
                    v1350 = *(__int32 *)((char *)&v1242->i32[-1] + 2 * v1241);
LABEL_2898:
                    if (v1349 == v1350)
                      goto LABEL_2899;
                    goto LABEL_4236;
                  case 2u:
                    if (*(_QWORD *)v1246 != v1242->i64[0]
                      || *(_QWORD *)&v1246[2 * v1241 - 8] != *(uint64_t *)((char *)&v1242->i64[-1] + 2 * v1241))
                    {
                      goto LABEL_4236;
                    }
                    goto LABEL_2899;
                  case 3u:
                    v14 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v1246[2 * v1241 - 16], *(int16x8_t *)((char *)v1242 + 2 * v1241 - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v1246, *v1242));
                    v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                    if (!v14.n128_u32[0])
                      goto LABEL_4236;
                    goto LABEL_2899;
                  default:
                    v14 = (__n128)vceqq_s16(*(int16x8_t *)v1246, *v1242);
                    v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                    if (!v14.n128_u32[0])
                      goto LABEL_4236;
                    v2117 = v1240 & 7;
                    if ((v1240 & 7u) >= v1241)
                      goto LABEL_2899;
                    v2118 = (int16x8_t *)((char *)v1242 + 2 * v2117);
                    v2119 = (int16x8_t *)(v2331 + ((2 * v2117) | (v1245 << 6)));
                    break;
                }
                while (1)
                {
                  v14 = (__n128)vceqq_s16(*v2119, *v2118);
                  v14.n128_u16[0] = vminvq_u16((uint16x8_t)v14);
                  if (!v14.n128_u32[0])
                    break;
                  v2117 += 8;
                  ++v2118;
                  ++v2119;
                  if (v2117 >= v1241)
                    goto LABEL_2899;
                }
LABEL_4236:
                WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1240 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                v1351 = (WTF::StringImpl *)v2340.rlim_cur;
                JSC::Identifier::operator=((WTF::StringImpl **)v1246 + 7, (WTF::AtomStringImpl *)v2340.rlim_cur, v2120, v2121, v2122, v2123, v2124, v2125);
                *v1247 = v1240;
                if (v1241 != 1)
                {
                  if ((v1240 & 0x7FFFFFFF) != 0)
                    memcpy(v1246, v1242, 2 * v1241);
                  goto LABEL_2901;
                }
LABEL_4566:
                *(_WORD *)v1246 = v1242->i16[0];
                goto LABEL_2901;
              }
              if (*(unsigned __int16 *)v1246 != v1243)
              {
                WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1240 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                v1351 = (WTF::StringImpl *)v2340.rlim_cur;
                JSC::Identifier::operator=((WTF::StringImpl **)&v2337[64 * v1245 + 56], (WTF::AtomStringImpl *)v2340.rlim_cur, v2254, v2255, v2256, v2257, v2258, v2259);
                *v1247 = v1240;
                goto LABEL_4566;
              }
LABEL_2899:
              v1351 = *(WTF::StringImpl **)&v2337[64 * v1245 + 56];
            }
            else
            {
              v1351 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
            }
            *(_DWORD *)v1351 += 2;
LABEL_2901:
            v2338 = v1351;
            v11 = v2328;
            v10 = v2335;
            v12 = v2336;
            v8 = a1;
LABEL_84:
            v60 = *(unsigned __int8 **)(v8 + 48);
            v59 = *(_QWORD *)(v8 + 56);
            if ((unint64_t)v60 < v59)
            {
              v61 = v59 - (_QWORD)v60;
              while (JSC::tokenTypesOfLatin1Characters[*v60] == 19)
              {
                *v12 = ++v60;
                if (!--v61)
                {
                  v60 = (unsigned __int8 *)v59;
                  break;
                }
              }
            }
            if (v60 == (unsigned __int8 *)v59)
            {
              v420 = 14;
              goto LABEL_934;
            }
            *v10 = 18;
            a4 = *v60;
            v62 = JSC::tokenTypesOfLatin1Characters[a4];
            if (v62 > 4)
            {
              if (v62 != 6)
              {
                if (v62 == 5)
                {
                  if ((_DWORD)a4 == 110)
                  {
                    if ((uint64_t)(v59 - (_QWORD)v60) >= 4 && *(_WORD *)(v60 + 1) == 27765 && v60[3] == 108)
                    {
                      *v12 = v60 + 4;
                      v420 = 13;
LABEL_934:
                      *v10 = v420;
                      goto LABEL_151;
                    }
                  }
                  else if ((_DWORD)a4 == 102)
                  {
                    if ((uint64_t)(v59 - (_QWORD)v60) >= 5
                      && *(_WORD *)(v60 + 1) == 27745
                      && *(_WORD *)(v60 + 3) == 25971)
                    {
                      *v12 = v60 + 5;
                      v420 = 12;
                      goto LABEL_934;
                    }
                  }
                  else if ((_DWORD)a4 == 116
                         && (uint64_t)(v59 - (_QWORD)v60) >= 4
                         && *(_WORD *)(v60 + 1) == 30066
                         && v60[3] == 101)
                  {
                    *v12 = v60 + 4;
                    v420 = 11;
                    goto LABEL_934;
                  }
                  v748 = (int)v60;
                  *v11 = (WTF::AtomStringImpl *)v60;
                  v749 = (int)v60;
                  if ((unint64_t)v60 < v59)
                  {
                    v750 = v59 - (_QWORD)v60;
                    v751 = (_DWORD)v60 + v750;
                    while (1)
                    {
                      v752 = *v60;
                      if (v752 != 36)
                      {
                        v753 = v752 != 95 && (v752 - 48) >= 0xA;
                        if (v753 && (v752 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      *v12 = ++v60;
                      if (!--v750)
                      {
                        LODWORD(v60) = v751;
                        break;
                      }
                    }
                    v749 = (int)v60;
                  }
                  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | (v749 - v748) & 0x7FFFFFFF;
                  v101 = 5;
                  goto LABEL_150;
                }
                if (v62 - 18 < 2)
                {
                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                  v539 = v2340.rlim_cur;
                  if (!v2340.rlim_cur)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198B05BB4);
                  }
                  *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                  *(_QWORD *)(v539 + 8) = v539 + 20;
                  *(_DWORD *)(v539 + 16) = 4;
                  *(_DWORD *)(v539 + 36) = 656436837;
                  *(_OWORD *)(v539 + 20) = *(_OWORD *)"Unrecognized token '";
                  *(_BYTE *)(v539 + 40) = *v60;
                  *(_BYTE *)(v539 + 41) = 39;
                  v540 = *(WTF::StringImpl **)v2321;
                  *(_QWORD *)v2321 = v539;
                  if (v540)
                  {
                    if (*(_DWORD *)v540 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v540, v532, v533, v534, v535, v536, v537, v538);
                      WTF::fastFree(v755, v756, v757, v758, v759, v760, v761, v762);
                    }
                    else
                    {
                      *(_DWORD *)v540 -= 2;
                    }
                  }
                  goto LABEL_151;
                }
LABEL_109:
                *v10 = v62;
                *v12 = v60 + 1;
                goto LABEL_110;
              }
              v137 = v60;
              if ((unint64_t)v60 < v59)
              {
                v137 = v60;
                if ((_DWORD)a4 == 45)
                {
                  v137 = v60 + 1;
                  *v12 = v60 + 1;
                }
              }
              if ((unint64_t)v137 >= v59)
              {
LABEL_2745:
                v1297 = WTF::fastCompactMalloc((WTF *)0x20);
                v1305 = v1297;
                v1306 = 0xE00000002;
                v1307 = "Invalid number";
                goto LABEL_2746;
              }
              v138 = *v137;
              if (v138 == 48)
              {
                v140 = v137 + 1;
                *v12 = v140;
              }
              else
              {
                if ((v138 - 49) > 8)
                  goto LABEL_2745;
                v139 = v137 + 1;
                do
                {
                  v140 = v139;
                  *v12 = v139;
                  if ((unint64_t)v139 >= v59)
                    break;
                  ++v139;
                }
                while (*v140 - 48 < 0xA);
              }
              if ((unint64_t)v140 < v59)
              {
                v141 = *v140;
                if (v141 == 46)
                {
                  *v12 = v140 + 1;
                  if ((unint64_t)(v140 + 1) >= v59 || v140[1] - 48 > 9)
                  {
                    v1297 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1305 = v1297;
                    v1306 = 0x2200000002;
                    v1307 = "Invalid digits after decimal point";
LABEL_2746:
                    *(_QWORD *)v1297 = v1306;
                    *(_QWORD *)(v1297 + 8) = v1307;
                    *(_DWORD *)(v1297 + 16) = 4;
                    v1308 = *(WTF::StringImpl **)v2321;
                    *(_QWORD *)v2321 = v1305;
                    if (v1308)
                    {
                      if (*(_DWORD *)v1308 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1308, v1298, v1299, v1300, v1301, v1302, v1303, v1304);
                        WTF::fastFree(v1422, v1423, v1424, v1425, v1426, v1427, v1428, v1429);
                      }
                      else
                      {
                        *(_DWORD *)v1308 -= 2;
                      }
                      v11 = v2328;
                      v10 = v2335;
                      v12 = v2336;
                      v8 = a1;
                    }
                    goto LABEL_151;
                  }
                  v304 = v140 + 2;
                  do
                  {
                    v140 = v304;
                    *v12 = v304;
                    if ((unint64_t)v304 >= v59)
                      break;
                    ++v304;
                  }
                  while (*v140 - 48 < 0xA);
                }
                else if (v141 != 69 && v141 != 101 && v140 - v60 <= 9)
                {
                  *v10 = 6;
                  v142 = *v60;
                  if (v142 == 45)
                    v143 = v60 + 1;
                  else
                    v143 = v60;
                  if (v143 >= v140)
                  {
                    if (v142 == 45)
                      goto LABEL_1119;
                    v144 = 0;
LABEL_232:
                    v146 = (double)v144;
                  }
                  else
                  {
                    v144 = 0;
                    do
                    {
                      v145 = *v143++;
                      v144 = v145 + 10 * v144 - 48;
                    }
                    while (v143 < v140);
                    if (v142 != 45)
                      goto LABEL_232;
                    if (!v144)
                    {
LABEL_1119:
                      *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                      goto LABEL_151;
                    }
                    v146 = (double)-v144;
                  }
LABEL_233:
                  *(double *)v11 = v146;
                  goto LABEL_151;
                }
              }
              if ((unint64_t)v140 < v59 && (*v140 | 0x20) == 0x65)
              {
                v1325 = v13;
                v1326 = v140 + 1;
                *v12 = v140 + 1;
                if ((unint64_t)(v140 + 1) < v59)
                {
                  v1327 = *v1326;
                  if (v1327 == 45 || v1327 == 43)
                  {
                    v1326 = v140 + 2;
                    *v2336 = v140 + 2;
                  }
                }
                if ((unint64_t)v1326 >= v59 || *v1326 - 48 > 9)
                {
                  v1358 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1366 = v1358;
                  v1367 = 0x5D00000002;
                  v1368 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                  goto LABEL_2911;
                }
                v1328 = v1326 + 1;
                v12 = v2336;
                while (1)
                {
                  v140 = v1328;
                  *v12 = v1328;
                  if ((unint64_t)v1328 >= v59)
                    break;
                  ++v1328;
                  v13 = v1325;
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  if (*v140 - 48 >= 0xA)
                    goto LABEL_637;
                }
                v13 = v1325;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
              }
LABEL_637:
              *v10 = 6;
              if (v140 - v60 < 0)
                goto LABEL_3864;
              v2340.rlim_cur = 0;
              fast_float::from_chars_advanced<double,char>(v60, v140, &v2340.rlim_cur, 0x2E00000005);
              v146 = *(double *)&v2340.rlim_cur;
              goto LABEL_233;
            }
            if (v62 != 4)
              goto LABEL_109;
            v63 = *(unsigned __int8 *)(v8 + 40);
            if ((_DWORD)a4 == 39)
            {
              v1325 = v13;
              if (!*(_BYTE *)(v8 + 40))
              {
                v1358 = WTF::fastCompactMalloc((WTF *)0x20);
                v1366 = v1358;
                v1367 = 0x2900000002;
                v1368 = "Single quotes (') are not allowed in JSON";
LABEL_2911:
                *(_QWORD *)v1358 = v1367;
                *(_QWORD *)(v1358 + 8) = v1368;
                *(_DWORD *)(v1358 + 16) = 4;
                v1369 = *(WTF::StringImpl **)v2321;
                *(_QWORD *)v2321 = v1366;
                v13 = v1325;
                v11 = v2328;
                v10 = v2335;
                v12 = v2336;
                v8 = a1;
                if (v1369)
                {
                  if (*(_DWORD *)v1369 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v1369, v1359, v1360, v1361, v1362, v1363, v1364, v1365);
                    WTF::fastFree(v1605, v1606, v1607, v1608, v1609, v1610, v1611, v1612);
                  }
                  else
                  {
                    *(_DWORD *)v1369 -= 2;
                  }
                  v13 = v1325;
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                }
                goto LABEL_151;
              }
              v64 = (size_t)(v60 + 1);
              v10 = v2335;
              v12 = v2336;
              *v2336 = v60 + 1;
              v11 = v2328;
              v8 = a1;
            }
            else
            {
              v64 = (size_t)(v60 + 1);
              *v12 = v60 + 1;
              if (!v63)
              {
                v65 = v59 - v64;
                if ((uint64_t)(v59 - v64) >= 0)
                {
                  v66 = (int8x16_t *)&v60[v65 + 1];
                  if (v65 < 0x10)
                  {
                    v286 = (int8x16_t *)(v60 + 1);
                    if (v59 != v64)
                    {
                      do
                      {
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v286->u8[0]])
                        {
                          v66 = v286;
                          goto LABEL_146;
                        }
                        v286 = (int8x16_t *)((char *)v286 + 1);
                        --v65;
                      }
                      while (v65);
                    }
                    goto LABEL_146;
                  }
                  v67 = v60 + 16;
                  while (1)
                  {
                    v68 = *(int8x16_t *)(v67 - 15);
                    v69.i64[0] = 0x2222222222222222;
                    v69.i64[1] = 0x2222222222222222;
                    v70 = vceqq_s8(v68, v69);
                    v71.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v71.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v72.i64[0] = 0x2020202020202020;
                    v72.i64[1] = 0x2020202020202020;
                    v73 = vorrq_s8(vorrq_s8(vceqq_s8(v68, v71), (int8x16_t)vcgtq_u8(v72, (uint8x16_t)v68)), v70);
                    v70.i8[0] = vmaxvq_u8((uint8x16_t)v73);
                    if (v70.i32[0])
                      break;
                    v67 += 16;
                    if (v67 >= (unsigned __int8 *)v66)
                    {
                      if (v67 - 15 >= (unsigned __int8 *)v66)
                      {
                        v11 = v2328;
                        v10 = v2335;
                        v12 = v2336;
                        v8 = a1;
                        goto LABEL_146;
                      }
                      v99 = (unsigned __int8 *)&v66[-1];
                      v1599 = v66[-1];
                      v1600.i64[0] = 0x2222222222222222;
                      v1600.i64[1] = 0x2222222222222222;
                      v1601 = vceqq_s8(v1599, v1600);
                      v1602.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v1602.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v73 = vorrq_s8(vorrq_s8(vceqq_s8(v1599, v1602), (int8x16_t)vcgtq_u8(v72, (uint8x16_t)v1599)), v1601);
                      v1601.i8[0] = vmaxvq_u8((uint8x16_t)v73);
                      v11 = v2328;
                      v10 = v2335;
                      v12 = v2336;
                      v8 = a1;
                      if (!v1601.i32[0])
                      {
LABEL_146:
                        *v12 = (unsigned __int8 *)v66;
                        goto LABEL_147;
                      }
LABEL_145:
                      v100 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v73);
                      v100.i8[0] = vminvq_u8(v100);
                      v66 = (int8x16_t *)&v99[v100.u32[0]];
                      goto LABEL_146;
                    }
                  }
                  v99 = v67 - 15;
                  goto LABEL_145;
                }
LABEL_3864:
                __break(1u);
LABEL_3865:
                v10 = v2335;
                *v2335 = 14;
                goto LABEL_3866;
              }
            }
            if (v64 >= v59)
            {
              v66 = (int8x16_t *)v64;
              goto LABEL_147;
            }
            v66 = (int8x16_t *)v64;
            while (1)
            {
              v147 = v66->u8[0];
              v148 = v147 < 0x20 || v147 == 92;
              v149 = v148 || v147 == (_DWORD)a4;
              v150 = v149;
              if (v147 != 9 && v150)
                break;
              v66 = (int8x16_t *)((char *)v66 + 1);
              *v12 = (unsigned __int8 *)v66;
              if (v66 == (int8x16_t *)&v60[v59 - v64 + 1])
              {
                v66 = (int8x16_t *)&v60[v59 - v64 + 1];
                break;
              }
            }
LABEL_147:
            if ((unint64_t)v66 < v59 && v66->u8[0] == (_DWORD)a4)
            {
              *(_BYTE *)(v8 + 25) |= 1u;
              *(_QWORD *)(v8 + 32) = v64;
              *(_QWORD *)(v8 + 48) = (char *)v66->i64 + 1;
              *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v66 - v64) & 0x7FFFFFFF;
              v101 = 4;
LABEL_150:
              *(_BYTE *)(v8 + 24) = v101;
              goto LABEL_151;
            }
            v62 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v64, a4, a5, a6, a7, a8);
LABEL_110:
            if (v62 == 7)
            {
              v79 = *(unsigned __int8 **)(v8 + 48);
              v78 = *(_QWORD *)(v8 + 56);
              if ((unint64_t)v79 < v78)
              {
                v80 = v78 - (_QWORD)v79;
                while (JSC::tokenTypesOfLatin1Characters[*v79] == 19)
                {
                  *v12 = ++v79;
                  if (!--v80)
                  {
                    v79 = (unsigned __int8 *)v78;
                    break;
                  }
                }
              }
              if (v79 == (unsigned __int8 *)v78)
              {
                *v10 = 14;
LABEL_1074:
                v467 = WTF::fastCompactMalloc((WTF *)0x20);
                v14.n128_u64[0] = 0xE00000002;
                *(_QWORD *)v467 = 0xE00000002;
                *(_QWORD *)(v467 + 8) = "Unexpected EOF";
                *(_DWORD *)(v467 + 16) = 4;
                v468 = *(WTF::StringImpl **)v13;
                *(_QWORD *)v13 = v467;
                if (v468)
                {
                  if (*(_DWORD *)v468 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v468, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v618, v619, v620, v621, v622, v623, v624, v625);
                  }
                  else
                  {
                    *(_DWORD *)v468 -= 2;
                  }
                }
                goto LABEL_155;
              }
              *v10 = 18;
              a4 = *v79;
              v81 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v81 <= 4)
              {
                if (v81 == 4)
                {
                  v82 = *(unsigned __int8 *)(v8 + 40);
                  if ((_DWORD)a4 != 39)
                  {
                    a3 = (size_t)(v79 + 1);
                    *v12 = v79 + 1;
                    if (!v82)
                    {
                      v83 = v78 - a3;
                      if ((uint64_t)(v78 - a3) >= 0)
                      {
                        v84 = (int8x16_t *)&v79[v83 + 1];
                        if (v83 < 0x10)
                        {
                          v481 = (int8x16_t *)(v79 + 1);
                          if (v78 == a3)
                            goto LABEL_187;
                          do
                          {
                            if (!JSC::safeStringLatin1CharactersInStrictJSON[v481->u8[0]])
                            {
                              v84 = v481;
                              goto LABEL_187;
                            }
                            v481 = (int8x16_t *)((char *)v481 + 1);
                            --v83;
                          }
                          while (v83);
                          goto LABEL_187;
                        }
                        v85 = v79 + 16;
                        while (1)
                        {
                          v86 = *(int8x16_t *)(v85 - 15);
                          v87.i64[0] = 0x2222222222222222;
                          v87.i64[1] = 0x2222222222222222;
                          v88 = vceqq_s8(v86, v87);
                          v89.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v89.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v90.i64[0] = 0x2020202020202020;
                          v90.i64[1] = 0x2020202020202020;
                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v86, v89), (int8x16_t)vcgtq_u8(v90, (uint8x16_t)v86)), v88);
                          v88.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                          if (v88.i32[0])
                            break;
                          v85 += 16;
                          if (v85 >= (unsigned __int8 *)v84)
                          {
                            if (v85 - 15 >= (unsigned __int8 *)v84)
                            {
                              v11 = v2328;
                              v10 = v2335;
                              v12 = v2336;
                              v8 = a1;
                              goto LABEL_187;
                            }
                            v122 = (unsigned __int8 *)&v84[-1];
                            v1652 = v84[-1];
                            v1653.i64[0] = 0x2222222222222222;
                            v1653.i64[1] = 0x2222222222222222;
                            v1654 = vceqq_s8(v1652, v1653);
                            v1655.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v1655.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1652, v1655), (int8x16_t)vcgtq_u8(v90, (uint8x16_t)v1652)), v1654);
                            v1654.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            if (!v1654.i32[0])
                            {
LABEL_187:
                              *v12 = (unsigned __int8 *)v84;
                              goto LABEL_188;
                            }
LABEL_186:
                            v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                            v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                            v84 = (int8x16_t *)&v122[v14.n128_u32[0]];
                            goto LABEL_187;
                          }
                        }
                        v122 = v85 - 15;
                        goto LABEL_186;
                      }
                      goto LABEL_3864;
                    }
                    goto LABEL_340;
                  }
                  v1381 = v13;
                  if (*(_BYTE *)(v8 + 40))
                  {
                    a3 = (size_t)(v79 + 1);
                    v10 = v2335;
                    v12 = v2336;
                    *v2336 = v79 + 1;
                    v11 = v2328;
                    v8 = a1;
LABEL_340:
                    if (a3 >= v78)
                    {
                      v84 = (int8x16_t *)a3;
                      goto LABEL_188;
                    }
                    v84 = (int8x16_t *)a3;
                    while (1)
                    {
                      v195 = v84->u8[0];
                      v196 = v195 < 0x20 || v195 == 92;
                      v197 = v196 || v195 == (_DWORD)a4;
                      v198 = v197;
                      if (v195 != 9 && v198)
                        break;
                      v84 = (int8x16_t *)((char *)v84 + 1);
                      *v12 = (unsigned __int8 *)v84;
                      if (v84 == (int8x16_t *)&v79[v78 - a3 + 1])
                      {
                        v84 = (int8x16_t *)&v79[v78 - a3 + 1];
                        break;
                      }
                    }
LABEL_188:
                    if ((unint64_t)v84 < v78 && v84->u8[0] == (_DWORD)a4)
                    {
                      v123 = *(_BYTE *)(v8 + 25) | 1;
                      *(_BYTE *)(v8 + 25) = v123;
                      *(_QWORD *)(v8 + 32) = a3;
                      *(_QWORD *)(v8 + 48) = (char *)v84->i64 + 1;
                      v124 = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v84 - a3) & 0x7FFFFFFF;
                      *(_DWORD *)(v8 + 28) = v124;
                      *(_BYTE *)(v8 + 24) = 4;
LABEL_191:
                      v125 = v124 & 0x7FFFFFFF;
                      if ((v123 & 1) != 0)
                      {
                        v126 = (unint64_t)*v11;
                        if (v125 < 0xB)
                        {
                          if (v125 == 1)
                          {
                            if (*(_BYTE *)(v2322 + 2297))
                            {
                              v397 = *((_QWORD *)v2333 + *(unsigned __int8 *)v126 + 5277);
                              v126 = *(_QWORD *)(v397 + 8);
                              if ((v126 & 1) != 0)
                                v398 = 0;
                              else
                                v398 = *(_DWORD **)(v397 + 8);
                              *v398 += 2;
                            }
                            else
                            {
                              LOBYTE(v2344) = *(_BYTE *)v126;
                              WTF::AtomStringImpl::add((uint64_t)&v2344, 1uLL, a4, a5, a6, a7, a8, &v2340);
                              v126 = v2340.rlim_cur;
                            }
                            if (!v126)
                            {
                              v172 = *(_QWORD *)v2322;
                              goto LABEL_383;
                            }
LABEL_370:
                            v203 = *(_DWORD *)(v126 + 4);
                            if (v203 != 1)
                            {
                              if (!v203)
                              {
                                v172 = *(_QWORD *)v2322;
                                goto LABEL_381;
                              }
LABEL_372:
                              *(_DWORD *)v126 += 2;
                              v204 = *(_DWORD *)(v126 + 16);
                              v205 = v126;
                              if ((v204 & 3) == 2)
                              {
                                v205 = v126;
                                do
                                {
                                  v205 = *(_QWORD *)(v205 + 24);
                                  v204 = *(_DWORD *)(v205 + 16);
                                }
                                while ((v204 & 3) == 2);
                              }
                              if ((v204 & 8) != 0)
                              {
                                v206 = 0;
                              }
                              else
                              {
                                *(_DWORD *)(v205 + 16) = v204 | 8;
                                v206 = (unint64_t)*(unsigned int *)(v205 + 4) << ((v204 & 4) == 0);
                              }
                              v207 = v2332;
                              v172 = *v2332;
                              if (*v2332 >= v2332[1])
                              {
                                v172 = v2332[2];
                                if ((v172 & 1) != 0)
                                {
                                  JSC::sanitizeStackForVM(v2333, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
                                  v1380 = JSC::LocalAllocator::allocateSlowCase((char *)v2333 + 39672, (char *)v2333 + 192, 16, 0, 0);
                                  v207 = v2332;
                                  v172 = v1380;
                                }
                                else
                                {
                                  v617 = *(_QWORD *)(v172 + 8) ^ v2332[3];
                                  v2332[2] = v172 + (int)v617;
                                  v2332[1] = v172 + HIDWORD(v617);
                                  *v2332 = v172 + 16;
                                  v207 = v2332;
                                }
                              }
                              else
                              {
                                *v2332 = v172 + 16;
                              }
                              *(_DWORD *)v172 = v207[227] >> 4;
                              v14.n128_u64[0] = 17302016;
                              *(_DWORD *)(v172 + 4) = 17302016;
                              *(_QWORD *)(v172 + 8) = v126;
                              if (*((_BYTE *)v2333 + 755))
                                __dmb(0xAu);
                              if (v206 >= 0x101)
                                JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v2333 + 192, 0, v172, v206, a5, a6, a7, a8);
LABEL_381:
                              if (*(_DWORD *)v126 != 2)
                              {
                                *(_DWORD *)v126 -= 2;
                                goto LABEL_383;
                              }
                              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v126, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                              v287 = *(_QWORD *)(StatusReg + 752);
                              if (!v287)
                              {
                                pas_try_deallocate_slow_no_cache(v126, (uint64_t)&bmalloc_heap_config, 1);
                                goto LABEL_383;
                              }
                              if (!(v126 >> 43)
                                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v126 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v126)) & 1) != 0)
                              {
                                goto LABEL_574;
                              }
                              if (v126 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v126 >> 24)
                              {
                                a4 = 0;
                              }
                              else
                              {
                                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                                + ((((v126 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                + 24) >> (2 * ((BYTE3(v126) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                if ((_DWORD)a4 == 1)
                                {
LABEL_574:
                                  v288 = *(unsigned int *)(v287 + 8000);
                                  if (v288 >= 0x3E7)
                                  {
                                    pas_thread_local_cache_append_deallocation_slow(v287, v126, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v287 + 8 * v288) = v126 | 0x5000000000000;
                                    *(_DWORD *)(v287 + 8000) = v288 + 1;
                                  }
                                  goto LABEL_383;
                                }
                              }
                              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v287, v126, 1, a4, a5, a6, a7, a8);
                              goto LABEL_383;
                            }
                            v412 = *(unsigned __int8 **)(v126 + 8);
                            if ((*(_BYTE *)(v126 + 16) & 4) != 0)
                            {
                              v413 = *v412;
                            }
                            else
                            {
                              v413 = *(unsigned __int16 *)v412;
                              if (v413 > 0xFF)
                                goto LABEL_372;
                            }
                            v172 = *((_QWORD *)v2333 + v413 + 5277);
                            goto LABEL_381;
                          }
                          if ((v124 & 0x7FFFFFFF) == 0)
                          {
                            v126 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
                            v202 = WTF::StringImpl::s_emptyAtomString + 2;
                            goto LABEL_369;
                          }
                          if (!v126)
                          {
LABEL_368:
                            v202 = *(_DWORD *)v126;
                            *(_DWORD *)v126 += 2;
                            if (v202)
                            {
LABEL_369:
                              *(_DWORD *)v126 = v202;
                              goto LABEL_370;
                            }
                            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v126, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            v302 = *(_QWORD *)(StatusReg + 752);
                            if (!v302)
                            {
                              pas_try_deallocate_slow_no_cache(v126, (uint64_t)&bmalloc_heap_config, 1);
                              goto LABEL_370;
                            }
                            if (!(v126 >> 43)
                              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v126 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v126)) & 1) != 0)
                            {
                              goto LABEL_624;
                            }
                            if (v126 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v126 >> 24)
                            {
                              a4 = 0;
                            }
                            else
                            {
                              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                              + ((((v126 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                              + 24) >> (2 * ((BYTE3(v126) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                              if ((_DWORD)a4 == 1)
                              {
LABEL_624:
                                v303 = *(unsigned int *)(v302 + 8000);
                                if (v303 >= 0x3E7)
                                {
                                  pas_thread_local_cache_append_deallocation_slow(v302, v126, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                                }
                                else
                                {
                                  *(_QWORD *)(v302 + 8 * v303) = v126 | 0x5000000000000;
                                  *(_DWORD *)(v302 + 8000) = v303 + 1;
                                }
                                goto LABEL_370;
                              }
                            }
                            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v302, v126, 1, a4, a5, a6, a7, a8);
                            goto LABEL_370;
                          }
                          v127 = 0;
                          v2344 = *v11;
                          v2345 = v125;
                          v128 = -1640531527;
                          do
                          {
                            v129 = ((v128 + *(unsigned __int8 *)(v126 + v127)) << 16) ^ (*(unsigned __int8 *)(v126 + v127 + 1) << 11) ^ (v128 + *(unsigned __int8 *)(v126 + v127));
                            v128 = v129 + (v129 >> 11);
                            v130 = v127 + 3;
                            v127 += 2;
                          }
                          while (v130 < v125);
                          if ((v125 & 1) != 0)
                            v128 = ((v128 + *(unsigned __int8 *)(v125 + v126 - 1)) ^ ((v128
                                                                                     + *(unsigned __int8 *)(v125 + v126 - 1)) << 11))
                                 + (((v128 + *(unsigned __int8 *)(v125 + v126 - 1)) ^ ((v128
                                                                                      + *(unsigned __int8 *)(v125 + v126 - 1)) << 11)) >> 17);
                          v131 = (v128 ^ (8 * v128)) + ((v128 ^ (8 * v128)) >> 5);
                          v132 = (v131 ^ (4 * v131)) + ((v131 ^ (4 * v131)) >> 15);
                          v133 = (v132 ^ (v132 << 10)) & 0xFFFFFF;
                          if (!v133)
                            v133 = 0x800000;
                          v2346 = v133;
                          if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                          {
LABEL_205:
                            v135 = *(_QWORD *)(v2323 + 736);
                            if (v135)
                              goto LABEL_206;
                            v254 = atomic_load(&WTF::initialize(void)::onceKey);
                            if (v254 != -1)
                            {
                              v2340.rlim_cur = (rlim_t)&v2347;
                              v2348[0] = &v2340;
                              std::__call_once(&WTF::initialize(void)::onceKey, v2348, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                            }
                            v255 = WTF::fastMalloc((WTF *)0x68);
                            v135 = v255;
                            *(_OWORD *)v255 = 0u;
                            *(_OWORD *)(v255 + 16) = 0u;
                            *(_OWORD *)(v255 + 32) = 0u;
                            *(_OWORD *)(v255 + 48) = 0u;
                            *(_OWORD *)(v255 + 64) = 0u;
                            *(_OWORD *)(v255 + 80) = 0u;
                            *(_QWORD *)(v255 + 96) = 0;
                            *(_DWORD *)v255 = 1;
                            *(_OWORD *)(v255 + 8) = 0u;
                            v256 = (unint64_t *)(v255 + 8);
                            *(_OWORD *)(v255 + 24) = 0u;
                            do
                            {
                              v257 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                              v258 = v257 + 1;
                            }
                            while (__stlxr(v258, (unsigned int *)&WTF::ThreadLike::s_uid));
                            *(_DWORD *)(v255 + 48) = v258;
                            *(_QWORD *)(v255 + 52) = 0;
                            *(_QWORD *)(v255 + 68) = 0;
                            *(_QWORD *)(v255 + 60) = 0;
                            *(_DWORD *)(v255 + 76) = 0;
                            *(_QWORD *)(v255 + 88) = 0;
                            *(_QWORD *)(v255 + 96) = 0;
                            v259 = pthread_self();
                            if (__ldaxr(v256))
                            {
                              __clrex();
                            }
                            else if (!__stxr(1uLL, v256))
                            {
LABEL_497:
                              *(_QWORD *)(v135 + 40) = v259;
                              *(_DWORD *)(v135 + 52) = pthread_mach_thread_np(v259);
                              v261 = __ldxr(v256);
                              if (v261 == 1)
                              {
                                if (!__stlxr(0, v256))
                                  goto LABEL_641;
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::WordLock::unlockSlow((WTF::WordLock *)v256);
LABEL_641:
                              v305 = *(char **)(v135 + 16);
                              if (!v305)
                              {
                                v399 = pthread_main_np();
                                v400 = pthread_self();
                                v305 = (char *)pthread_get_stackaddr_np(v400);
                                if (v399)
                                {
                                  getrlimit(3, &v2340);
                                  if (v2340.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                    v401 = 0x800000;
                                  else
                                    v401 = v2340.rlim_cur;
                                }
                                else
                                {
                                  v401 = pthread_get_stacksize_np(v400);
                                }
                                *(_QWORD *)(v135 + 16) = v305;
                                *(_QWORD *)(v135 + 24) = &v305[-v401];
                                v11 = v2328;
                              }
                              *(_QWORD *)(v135 + 80) = v305;
                              *(_QWORD *)(v135 + 56) = v135 + 64;
                              v306 = pthread_self();
                              if (pthread_equal(v306, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                              {
                                v307 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                                if (v307 != -1)
                                {
                                  v2340.rlim_cur = (rlim_t)&v2347;
                                  v2348[0] = &v2340;
                                  std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v2348, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                                }
                                *(_QWORD *)(v135 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                              }
                              *(_QWORD *)(v2323 + 736) = v135;
                              pthread_key_init_np();
LABEL_206:
                              WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v135 + 56), (uint64_t)&v2344, a4, a5, a6, a7, a8, (uint64_t)&v2340);
                              v126 = 16 * *(unsigned int *)v2340.rlim_cur;
                              if (!(_BYTE)v2341)
                                *(_DWORD *)v126 += 2;
                              v136 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                              if (v136 == 1)
                              {
                                if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                                  goto LABEL_368;
                              }
                              else
                              {
                                __clrex();
                              }
                              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, a4, a5, a6, a7, a8);
                              goto LABEL_368;
                            }
                            WTF::WordLock::lockSlow((WTF::WordLock *)v256);
                            goto LABEL_497;
                          }
                          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                          goto LABEL_205;
                        }
                        if (v126)
                        {
                          v167 = WTF::fastCompactMalloc((WTF *)(v125 + 20));
                          *(_DWORD *)v167 = 2;
                          *(_DWORD *)(v167 + 4) = v125;
                          *(_QWORD *)(v167 + 8) = v167 + 20;
                          *(_DWORD *)(v167 + 16) = 4;
                          memcpy((void *)(v167 + 20), (const void *)v126, v125);
                        }
                        else
                        {
                          v167 = 0;
                        }
                        v168 = *(_DWORD *)(v167 + 16);
                        v169 = v167;
                        if ((v168 & 3) == 2)
                        {
                          v169 = v167;
                          do
                          {
                            v169 = *(_QWORD *)(v169 + 24);
                            v168 = *(_DWORD *)(v169 + 16);
                          }
                          while ((v168 & 3) == 2);
                        }
                        if ((v168 & 8) != 0)
                        {
                          v170 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(v169 + 16) = v168 | 8;
                          v170 = (unint64_t)*(unsigned int *)(v169 + 4) << ((v168 & 4) == 0);
                        }
                        v171 = v2332;
                        v172 = *v2332;
                        if (*v2332 >= v2332[1])
                        {
                          v172 = v2332[2];
                          if ((v172 & 1) != 0)
                          {
                            JSC::sanitizeStackForVM(v2333, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
                            v1430 = JSC::LocalAllocator::allocateSlowCase((char *)v2333 + 39672, (char *)v2333 + 192, 16, 0, 0);
                            v171 = v2332;
                            v172 = v1430;
                          }
                          else
                          {
                            v646 = *(_QWORD *)(v172 + 8) ^ v2332[3];
                            v2332[2] = v172 + (int)v646;
                            v2332[1] = v172 + HIDWORD(v646);
                            *v2332 = v172 + 16;
                            v171 = v2332;
                          }
                        }
                        else
                        {
                          *v2332 = v172 + 16;
                        }
                        *(_DWORD *)v172 = v171[227] >> 4;
                        v14.n128_u64[0] = 17302016;
                        *(_DWORD *)(v172 + 4) = 17302016;
                        *(_QWORD *)(v172 + 8) = v167;
                        if (*((_BYTE *)v2333 + 755))
                          __dmb(0xAu);
                        if (v170 >= 0x101)
                          JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v2333 + 192, 0, v172, v170, a5, a6, a7, a8);
                      }
                      else
                      {
                        if (v125 < 0xB)
                        {
                          JSC::Identifier::fromString((uint64_t)v2333, *v2328, v124 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v2340);
                          v1347 = JSC::jsString(v2333, (JSC::VM *)&v2340, v1400, v1401, v1402, v1403, v1404, v1405);
                        }
                        else
                        {
                          WTF::String::String((int **)&v2340, *v2328, v124 & 0x7FFFFFFF);
                          v1347 = JSC::jsNontrivialString((uint64_t)v2333, (JSC::VM *)&v2340, v1341, v1342, v1343, v1344, v1345, v1346);
                        }
                        v172 = v1347;
                        v1406 = (WTF::StringImpl *)v2340.rlim_cur;
                        v2340.rlim_cur = 0;
                        if (v1406)
                        {
                          if (*(_DWORD *)v1406 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1406, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577);
                          }
                          else
                          {
                            *(_DWORD *)v1406 -= 2;
                          }
                        }
                        v11 = v2328;
                        v10 = v2335;
                        v12 = v2336;
                        v8 = a1;
                      }
LABEL_383:
                      v183 = *(unsigned __int8 **)(v8 + 48);
                      v182 = *(_QWORD *)(v8 + 56);
                      if ((unint64_t)v183 < v182)
                      {
                        v208 = v182 - (_QWORD)v183;
                        while (JSC::tokenTypesOfLatin1Characters[*v183] == 19)
                        {
                          *v12 = ++v183;
                          if (!--v208)
                          {
                            v183 = (unsigned __int8 *)v182;
                            break;
                          }
                        }
                      }
                      if (v183 != (unsigned __int8 *)v182)
                      {
                        *v10 = 18;
                        a4 = *v183;
                        v185 = JSC::tokenTypesOfLatin1Characters[a4];
                        if (v185 <= 4)
                        {
                          if (v185 == 4)
                          {
                            v209 = *(unsigned __int8 *)(v8 + 40);
                            if ((_DWORD)a4 != 39)
                            {
                              a3 = (size_t)(v183 + 1);
                              *v12 = v183 + 1;
                              if (!v209)
                              {
                                v210 = v182 - a3;
                                if ((uint64_t)(v182 - a3) < 0)
                                  goto LABEL_3864;
                                v188 = (int8x16_t *)&v183[v210 + 1];
                                if (v210 >= 0x10)
                                {
                                  v189 = v183 + 16;
                                  while (1)
                                  {
                                    v211 = *(int8x16_t *)(v189 - 15);
                                    v212.i64[0] = 0x2222222222222222;
                                    v212.i64[1] = 0x2222222222222222;
                                    v213 = vceqq_s8(v211, v212);
                                    v214.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                    v214.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                    v194.i64[0] = 0x2020202020202020;
                                    v194.i64[1] = 0x2020202020202020;
                                    v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v211, v214), (int8x16_t)vcgtq_u8(v194, (uint8x16_t)v211)), v213);
                                    v213.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                    if (v213.i32[0])
                                      break;
                                    v189 += 16;
                                    if (v189 >= (unsigned __int8 *)v188)
                                      goto LABEL_3515;
                                  }
LABEL_399:
                                  v215 = v189 - 15;
LABEL_400:
                                  v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                                  v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                                  v188 = (int8x16_t *)&v215[v14.n128_u32[0]];
                                  goto LABEL_401;
                                }
                                v531 = (int8x16_t *)(v183 + 1);
                                if (v182 != a3)
                                {
                                  while (JSC::safeStringLatin1CharactersInStrictJSON[v531->u8[0]])
                                  {
                                    v531 = (int8x16_t *)((char *)v531 + 1);
                                    if (!--v210)
                                      goto LABEL_401;
                                  }
LABEL_1275:
                                  v188 = v531;
                                  goto LABEL_401;
                                }
                                goto LABEL_401;
                              }
                              goto LABEL_576;
                            }
                            v416 = v13;
                            if (*(_BYTE *)(v8 + 40))
                            {
                              a3 = (size_t)(v183 + 1);
                              v10 = v2335;
                              v12 = v2336;
                              *v2336 = v183 + 1;
                              v11 = v2328;
                              v8 = a1;
LABEL_576:
                              if (a3 < v182)
                              {
                                v289 = (uint64_t)&v183[v182 - a3 + 1];
                                v188 = (int8x16_t *)a3;
                                while (1)
                                {
                                  v290 = v188->u8[0];
                                  v291 = v290 < 0x20 || v290 == 92;
                                  v292 = v291 || v290 == (_DWORD)a4;
                                  v293 = v292;
                                  if (v290 != 9 && v293)
                                    goto LABEL_402;
                                  v188 = (int8x16_t *)((char *)v188 + 1);
                                  *v12 = (unsigned __int8 *)v188;
                                  if (v188 == (int8x16_t *)v289)
                                    goto LABEL_3244;
                                }
                              }
                              goto LABEL_3647;
                            }
                            v1544 = WTF::fastCompactMalloc((WTF *)0x20);
                            v1545 = v1544;
                            v14.n128_u64[0] = 0x2900000002;
                            v1546 = "Single quotes (') are not allowed in JSON";
                            goto LABEL_3274;
                          }
LABEL_408:
                          *v10 = v185;
                          *v12 = v183 + 1;
                          goto LABEL_409;
                        }
                        if (v185 != 6)
                        {
                          if (v185 != 5)
                          {
                            if (v185 - 18 >= 2)
                              goto LABEL_408;
                            WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                            v728 = v2340.rlim_cur;
                            if (!v2340.rlim_cur)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198B05BD4);
                            }
                            goto LABEL_1582;
                          }
                          if ((_DWORD)a4 == 110)
                          {
                            if ((uint64_t)(v182 - (_QWORD)v183) >= 4 && *(_WORD *)(v183 + 1) == 27765 && v183[3] == 108)
                            {
LABEL_1023:
                              *v12 = v183 + 4;
                              v445 = 13;
LABEL_1024:
                              *v10 = v445;
                              goto LABEL_409;
                            }
LABEL_2082:
                            v831 = (int)v183;
                            *v2328 = (WTF::AtomStringImpl *)v183;
                            v832 = (int)v183;
                            if ((unint64_t)v183 < v182)
                            {
                              v979 = v182 - (_QWORD)v183;
                              v834 = (_DWORD)v183 + v979;
                              while (1)
                              {
                                v980 = *v183;
                                if (v980 != 36)
                                {
                                  v981 = v980 != 95 && (v980 - 48) >= 0xA;
                                  if (v981 && (v980 | 0x20u) - 97 > 0x19)
                                    break;
                                }
                                *v2336 = ++v183;
                                if (!--v979)
                                  goto LABEL_2093;
                              }
LABEL_2094:
                              v832 = (int)v183;
                              goto LABEL_2095;
                            }
                            goto LABEL_2095;
                          }
                          if ((_DWORD)a4 == 102)
                          {
                            if ((uint64_t)(v182 - (_QWORD)v183) < 5
                              || *(_WORD *)(v183 + 1) != 27745
                              || *(_WORD *)(v183 + 3) != 25971)
                            {
                              goto LABEL_2082;
                            }
LABEL_1165:
                            *v12 = v183 + 5;
                            v445 = 12;
                            goto LABEL_1024;
                          }
                          if ((_DWORD)a4 != 116
                            || (uint64_t)(v182 - (_QWORD)v183) < 4
                            || *(_WORD *)(v183 + 1) != 30066
                            || v183[3] != 101)
                          {
                            goto LABEL_2082;
                          }
                          goto LABEL_1754;
                        }
                        v262 = v183;
                        if ((unint64_t)v183 < v182)
                        {
                          v262 = v183;
                          if ((_DWORD)a4 == 45)
                          {
                            v262 = v183 + 1;
                            *v12 = v183 + 1;
                          }
                        }
                        if ((unint64_t)v262 < v182)
                        {
                          v263 = *v262;
                          if (v263 == 48)
                          {
                            v243 = v262 + 1;
                            *v12 = v243;
LABEL_507:
                            if ((unint64_t)v243 >= v182)
                            {
LABEL_900:
                              if ((unint64_t)v243 >= v182 || (*v243 | 0x20) != 0x65)
                                goto LABEL_902;
                              v416 = v13;
                              v1511 = v243 + 1;
                              *v12 = v243 + 1;
                              if ((unint64_t)(v243 + 1) < v182)
                              {
                                v1512 = *v1511;
                                if (v1512 == 45 || v1512 == 43)
                                {
                                  v1511 = v243 + 2;
                                  *v2336 = v243 + 2;
                                }
                              }
                              if ((unint64_t)v1511 >= v182 || *v1511 - 48 > 9)
                              {
                                v1544 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1545 = v1544;
                                v14.n128_u64[0] = 0x5D00000002;
                                v1546 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_3274:
                                *(_QWORD *)v1544 = v14.n128_u64[0];
                                *(_QWORD *)(v1544 + 8) = v1546;
                                *(_DWORD *)(v1544 + 16) = 4;
                                v1547 = *(WTF::StringImpl **)v2321;
                                *(_QWORD *)v2321 = v1545;
                                v13 = v416;
                                v11 = v2328;
                                v10 = v2335;
                                v12 = v2336;
                                v8 = a1;
                                if (v1547)
                                {
                                  if (*(_DWORD *)v1547 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v1547, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                                    WTF::fastFree(v1778, v1779, v1780, v1781, v1782, v1783, v1784, v1785);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v1547 -= 2;
                                  }
                                  v13 = v416;
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                }
                                goto LABEL_409;
                              }
                              v1513 = v1511 + 1;
                              v12 = v2336;
                              while (1)
                              {
                                v243 = v1513;
                                *v12 = v1513;
                                if ((unint64_t)v1513 >= v182)
                                  break;
                                ++v1513;
                                v13 = v416;
                                v11 = v2328;
                                v10 = v2335;
                                v12 = v2336;
                                v8 = a1;
                                if (*v243 - 48 >= 0xA)
                                  goto LABEL_902;
                              }
LABEL_3513:
                              v13 = v416;
                              v11 = v2328;
                              v10 = v2335;
                              v12 = v2336;
                              v8 = a1;
LABEL_902:
                              *v10 = 6;
                              if (v243 - v183 < 0)
                                goto LABEL_3864;
                              v2340.rlim_cur = 0;
                              fast_float::from_chars_advanced<double,char>(v183, v243, &v2340.rlim_cur, 0x2E00000005);
                              v14.n128_u64[0] = v2340.rlim_cur;
                              goto LABEL_566;
                            }
                            v265 = *v243;
                            if (v265 != 46)
                            {
                              if (v265 != 69 && v265 != 101 && v243 - v183 <= 9)
                              {
                                *v10 = 6;
                                v266 = *v183;
                                if (v266 == 45)
                                  v267 = v183 + 1;
                                else
                                  v267 = v183;
                                if (v267 < v243)
                                {
                                  v268 = 0;
                                  do
                                  {
                                    v269 = *v267++;
                                    v268 = v269 + 10 * v268 - 48;
                                  }
                                  while (v267 < v243);
LABEL_564:
                                  if (v266 != 45)
                                  {
LABEL_565:
                                    v14.n128_f64[0] = (double)v268;
LABEL_566:
                                    *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                                    goto LABEL_409;
                                  }
                                  if (v268)
                                  {
                                    v14.n128_f64[0] = (double)-v268;
                                    goto LABEL_566;
                                  }
                                  goto LABEL_1287;
                                }
                                goto LABEL_889;
                              }
                              goto LABEL_900;
                            }
                            *v12 = v243 + 1;
                            if ((unint64_t)(v243 + 1) < v182 && v243[1] - 48 <= 9)
                            {
                              v244 = v243 + 2;
                              do
                              {
                                v243 = v244;
                                *v12 = v244;
                                if ((unint64_t)v244 >= v182)
                                  break;
                                ++v244;
                              }
                              while (*v243 - 48 < 0xA);
                              goto LABEL_900;
                            }
                            v1442 = WTF::fastCompactMalloc((WTF *)0x20);
                            v1443 = v1442;
                            v14.n128_u64[0] = 0x2200000002;
                            v1444 = "Invalid digits after decimal point";
                            goto LABEL_3084;
                          }
                          if ((v263 - 49) <= 8)
                          {
                            v264 = v262 + 1;
                            do
                            {
                              v243 = v264;
                              *v12 = v264;
                              if ((unint64_t)v264 >= v182)
                                break;
                              ++v264;
                            }
                            while (*v243 - 48 < 0xA);
                            goto LABEL_507;
                          }
                        }
                        v1442 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1443 = v1442;
                        v14.n128_u64[0] = 0xE00000002;
                        v1444 = "Invalid number";
LABEL_3084:
                        *(_QWORD *)v1442 = v14.n128_u64[0];
                        *(_QWORD *)(v1442 + 8) = v1444;
                        *(_DWORD *)(v1442 + 16) = 4;
                        v1445 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v1443;
                        if (!v1445)
                          goto LABEL_409;
                        goto LABEL_3085;
                      }
LABEL_1142:
                      v445 = 14;
                      goto LABEL_1024;
                    }
                    v81 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
LABEL_131:
                    if ((v81 | 2) == 2)
                    {
                      v91 = (unint64_t)v2339;
                      v92 = *(unsigned int *)(v8 + 120);
                      if ((_DWORD)v92 == *(_DWORD *)(v8 + 124))
                      {
                        if (v92 >> 30
                          || JSC::MarkedVectorBase::expandCapacity(v2330, 2 * (int)v92))
                        {
                          *(_BYTE *)(v8 + 112) = 1;
LABEL_2335:
                          __break(0xC471u);
                          JUMPOUT(0x198AFFF78);
                        }
                        LODWORD(v92) = *(_DWORD *)v2330;
                      }
                      else
                      {
                        v93 = *(_QWORD *)(v8 + 128);
                        if (v93 == v2325 || !v93)
                        {
                          *(_QWORD *)(v93 + 8 * v92) = v2339;
                          *(_DWORD *)v2330 = v92 + 1;
LABEL_136:
                          if (*(_BYTE *)(v8 + 112))
                            goto LABEL_2335;
                          v94 = *(unsigned int *)(v8 + 252);
                          if ((_DWORD)v94 == *(_DWORD *)(v8 + 248))
                          {
                            v443 = (WTF::StringImpl **)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2326, v94 + 1, (unint64_t)&v2338);
                            v94 = *(unsigned int *)(v8 + 252);
                            v95 = *(_QWORD *)(v8 + 240);
                            v96 = *v443;
                            *v443 = 0;
                          }
                          else
                          {
                            v95 = *v2326;
                            v96 = v2338;
                            v2338 = 0;
                          }
                          *(_QWORD *)(v95 + 8 * v94) = v96;
                          *(_DWORD *)(v8 + 252) = v94 + 1;
                          LOBYTE(v2340.rlim_cur) = 6;
                          v97 = *(unsigned int *)(v8 + 220);
                          if ((_DWORD)v97 == *(_DWORD *)(v8 + 216))
                          {
                            WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(v2320, (unint64_t)&v2340);
                          }
                          else
                          {
                            *(_BYTE *)(*(_QWORD *)(v8 + 208) + v97) = 6;
                            *(_DWORD *)(v8 + 220) = v97 + 1;
                          }
                          if (v81 == 2)
                            v98 = 12;
                          else
                            v98 = 5;
                          goto LABEL_156;
                        }
                      }
                      *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * v92) = v91;
                      *(_DWORD *)(v8 + 120) = v92 + 1;
                      if (!*(_QWORD *)(v8 + 136) && (v91 & 0xFFFE000000000002) == 0 && v91)
                      {
                        v543 = (int *)(v91 & 0xFFFFFFFFFFFFC000 | 8);
                        if ((v91 & 8) != 0)
                          v543 = (int *)(v91 - 16);
                        v544 = (uint64_t *)(*(_QWORD *)v543 + 560);
                        *(_QWORD *)(v8 + 136) = v544;
                        v2344 = v2330;
                        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v544, (uint64_t *)&v2344, a4, a5, a6, a7, a8, (uint64_t)&v2340);
                      }
                      goto LABEL_136;
                    }
LABEL_313:
                    if (*v10 != 6)
                    {
                      switch(*v10)
                      {
                        case 1:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token ']'";
                          goto LABEL_2190;
                        case 3:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token '}'";
                          goto LABEL_2190;
                        case 4:
                          v123 = *(_BYTE *)(v8 + 25);
                          v124 = *(_DWORD *)(v8 + 28);
                          goto LABEL_191;
                        case 5:
                          v794 = *(_DWORD *)(v8 + 28);
                          v79 = *(unsigned __int8 **)(v8 + 32);
                          goto LABEL_1706;
                        case 7:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token ':'";
                          goto LABEL_2190;
                        case 8:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token '('";
                          goto LABEL_2190;
                        case 9:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token ')'";
                          goto LABEL_2190;
                        case 10:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token ','";
                          goto LABEL_2190;
                        case 11:
                          v709 = *(unsigned __int8 **)(v8 + 48);
                          v78 = *(_QWORD *)(v8 + 56);
                          goto LABEL_1543;
                        case 12:
                          v447 = *(unsigned __int8 **)(v8 + 48);
                          v78 = *(_QWORD *)(v8 + 56);
                          goto LABEL_1042;
                        case 13:
                          v425 = *(unsigned __int8 **)(v8 + 48);
                          v78 = *(_QWORD *)(v8 + 56);
                          goto LABEL_973;
                        case 14:
                          goto LABEL_1074;
                        case 15:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token '.'";
                          goto LABEL_2190;
                        case 16:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token '='";
                          goto LABEL_2190;
                        case 17:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x1400000002;
                          v1039 = "Unexpected token ';'";
                          goto LABEL_2190;
                        default:
                          v1037 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1038 = v1037;
                          v14.n128_u64[0] = 0x2000000002;
                          v1039 = "Could not parse value expression";
LABEL_2190:
                          *(_QWORD *)v1037 = v14.n128_u64[0];
                          *(_QWORD *)(v1037 + 8) = v1039;
                          *(_DWORD *)(v1037 + 16) = 4;
                          v1040 = *(WTF::StringImpl **)v13;
                          *(_QWORD *)v13 = v1038;
                          if (v1040)
                          {
                            if (*(_DWORD *)v1040 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1040, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                              WTF::fastFree(v1185, v1186, v1187, v1188, v1189, v1190, v1191, v1192);
                            }
                            else
                            {
                              *(_DWORD *)v1040 -= 2;
                            }
                          }
                          v98 = 1;
                          v11 = v2328;
                          v10 = v2335;
                          v12 = v2336;
                          v8 = a1;
                          break;
                      }
                      goto LABEL_156;
                    }
                    v14.n128_u64[0] = (unint64_t)*v11;
                    if (((unint64_t)*v11 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
                      && (v181 = (int)v14.n128_f64[0], v14.n128_f64[0] == (double)(int)v181)
                      && ((_DWORD)v181 || (v14.n128_u64[0] & 0x8000000000000000) == 0))
                    {
                      v172 = v181 | 0xFFFE000000000000;
                    }
                    else
                    {
                      v172 = v14.n128_u64[0] + 0x2000000000000;
                    }
                    v183 = *(unsigned __int8 **)(v8 + 48);
                    v182 = *(_QWORD *)(v8 + 56);
                    if ((unint64_t)v183 < v182)
                    {
                      v184 = v182 - (_QWORD)v183;
                      while (JSC::tokenTypesOfLatin1Characters[*v183] == 19)
                      {
                        *v12 = ++v183;
                        if (!--v184)
                        {
                          v183 = (unsigned __int8 *)v182;
                          break;
                        }
                      }
                    }
                    if (v183 == (unsigned __int8 *)v182)
                      goto LABEL_1142;
                    *v10 = 18;
                    a4 = *v183;
                    v185 = JSC::tokenTypesOfLatin1Characters[a4];
                    if (v185 <= 4)
                    {
                      if (v185 != 4)
                        goto LABEL_408;
                      v186 = *(unsigned __int8 *)(v8 + 40);
                      if ((_DWORD)a4 != 39)
                      {
                        a3 = (size_t)(v183 + 1);
                        *v12 = v183 + 1;
                        if (!v186)
                        {
                          v187 = v182 - a3;
                          if ((uint64_t)(v182 - a3) < 0)
                            goto LABEL_3864;
                          v188 = (int8x16_t *)&v183[v187 + 1];
                          if (v187 >= 0x10)
                          {
                            v189 = v183 + 16;
                            while (1)
                            {
                              v190 = *(int8x16_t *)(v189 - 15);
                              v191.i64[0] = 0x2222222222222222;
                              v191.i64[1] = 0x2222222222222222;
                              v192 = vceqq_s8(v190, v191);
                              v193.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                              v193.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                              v194.i64[0] = 0x2020202020202020;
                              v194.i64[1] = 0x2020202020202020;
                              v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v190, v193), (int8x16_t)vcgtq_u8(v194, (uint8x16_t)v190)), v192);
                              v192.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                              if (v192.i32[0])
                                goto LABEL_399;
                              v189 += 16;
                              if (v189 >= (unsigned __int8 *)v188)
                              {
LABEL_3515:
                                if (v189 - 15 >= (unsigned __int8 *)v188)
                                {
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                }
                                else
                                {
                                  v215 = (unsigned __int8 *)&v188[-1];
                                  v1719 = v188[-1];
                                  v1720.i64[0] = 0x2222222222222222;
                                  v1720.i64[1] = 0x2222222222222222;
                                  v1721 = vceqq_s8(v1719, v1720);
                                  v1722.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                  v1722.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1719, v1722), (int8x16_t)vcgtq_u8(v194, (uint8x16_t)v1719)), v1721);
                                  v1721.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                  if (v1721.i32[0])
                                    goto LABEL_400;
                                }
                                goto LABEL_401;
                              }
                            }
                          }
                          v531 = (int8x16_t *)(v183 + 1);
                          if (v182 != a3)
                          {
                            while (JSC::safeStringLatin1CharactersInStrictJSON[v531->u8[0]])
                            {
                              v531 = (int8x16_t *)((char *)v531 + 1);
                              if (!--v187)
                                goto LABEL_401;
                            }
                            goto LABEL_1275;
                          }
LABEL_401:
                          *v12 = (unsigned __int8 *)v188;
LABEL_402:
                          if ((unint64_t)v188 < v182 && v188->u8[0] == (_DWORD)a4)
                          {
                            *(_BYTE *)(v8 + 25) |= 1u;
                            *(_QWORD *)(v8 + 32) = a3;
                            *(_QWORD *)(v8 + 48) = (char *)v188->i64 + 1;
                            *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v188 - a3) & 0x7FFFFFFF;
                            *(_BYTE *)(v8 + 24) = 4;
                          }
                          else
                          {
                            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
                          }
                          goto LABEL_409;
                        }
                        goto LABEL_606;
                      }
                      if (*(_BYTE *)(v8 + 40))
                      {
                        a3 = (size_t)(v183 + 1);
                        v10 = v2335;
                        v12 = v2336;
                        *v2336 = v183 + 1;
                        v11 = v2328;
                        v8 = a1;
LABEL_606:
                        if (a3 < v182)
                        {
                          v289 = (uint64_t)&v183[v182 - a3 + 1];
                          v188 = (int8x16_t *)a3;
                          while (1)
                          {
                            v298 = v188->u8[0];
                            v299 = v298 < 0x20 || v298 == 92;
                            v300 = v299 || v298 == (_DWORD)a4;
                            v301 = v300;
                            if (v298 != 9 && v301)
                              goto LABEL_402;
                            v188 = (int8x16_t *)((char *)v188 + 1);
                            *v12 = (unsigned __int8 *)v188;
                            if (v188 == (int8x16_t *)v289)
                            {
LABEL_3244:
                              v188 = (int8x16_t *)v289;
                              goto LABEL_402;
                            }
                          }
                        }
LABEL_3647:
                        v188 = (int8x16_t *)a3;
                        goto LABEL_402;
                      }
                      v1459 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1460 = v1459;
                      v14.n128_u64[0] = 0x2900000002;
                      v1461 = "Single quotes (') are not allowed in JSON";
LABEL_3100:
                      *(_QWORD *)v1459 = v14.n128_u64[0];
                      *(_QWORD *)(v1459 + 8) = v1461;
                      *(_DWORD *)(v1459 + 16) = 4;
                      v1445 = *(WTF::StringImpl **)v2321;
                      *(_QWORD *)v2321 = v1460;
                      if (!v1445)
                        goto LABEL_3087;
LABEL_3085:
                      if (*(_DWORD *)v1445 != 2)
                      {
                        *(_DWORD *)v1445 -= 2;
                        goto LABEL_3087;
                      }
                      goto LABEL_3278;
                    }
                    if (v185 != 6)
                    {
                      if (v185 != 5)
                      {
                        if (v185 - 18 >= 2)
                          goto LABEL_408;
                        WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                        v728 = v2340.rlim_cur;
                        if (!v2340.rlim_cur)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198AFDC08);
                        }
LABEL_1582:
                        *(_QWORD *)v728 = 0x1600000002;
                        *(_QWORD *)(v728 + 8) = v728 + 20;
                        *(_DWORD *)(v728 + 16) = 4;
                        *(_DWORD *)(v728 + 36) = 656436837;
                        v14 = *(__n128 *)"Unrecognized token '";
                        *(_OWORD *)(v728 + 20) = *(_OWORD *)"Unrecognized token '";
                        *(_BYTE *)(v728 + 40) = *v183;
                        *(_BYTE *)(v728 + 41) = 39;
                        v729 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v728;
                        if (v729)
                        {
                          if (*(_DWORD *)v729 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v729, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v893, v894, v895, v896, v897, v898, v899, v900);
                          }
                          else
                          {
                            *(_DWORD *)v729 -= 2;
                          }
                        }
LABEL_409:
                        if (!v172)
                          goto LABEL_155;
LABEL_410:
                        if (*(_BYTE *)(v8 + 88))
                        {
                          v216 = v2338;
                          if (v2338 == *(WTF::StringImpl **)(v2332[282] + 16))
                          {
                            WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add((uint64_t *)(v8 + 104), (uint64_t *)&v2339, (uint64_t)v2338, a4, a5, a6, a7, a8, (uint64_t)&v2340);
                            if (!(_BYTE)v2341)
                            {
                              v1955 = WTF::fastCompactMalloc((WTF *)0x20);
                              v14.n128_u64[0] = 0x2800000002;
                              *(_QWORD *)v1955 = 0x2800000002;
                              *(_QWORD *)(v1955 + 8) = "Attempted to redefine __proto__ property";
                              *(_DWORD *)(v1955 + 16) = 4;
                              v802 = *(WTF::StringImpl **)v13;
                              *(_QWORD *)v13 = v1955;
                              if (v802)
                                goto LABEL_1711;
                              goto LABEL_1713;
                            }
                            v1234 = *(_QWORD *)(a1 + 8);
                            if (v1234)
                              LOBYTE(v1234) = *(_BYTE *)(*(_QWORD *)(v1234 + 64) + 68) & 1;
                            v2340.rlim_cur = 0;
                            v2340.rlim_max = (rlim_t)v2339;
                            v2341 = -1;
                            LOBYTE(v2342) = v2342 & 0xF8 | v1234;
                            *(_WORD *)((char *)&v2342 + 1) = 0;
                            HIBYTE(v2342) = 1;
                            v2343 = 0;
                            v2344 = v2339;
                            JSC::JSValue::put((JSC::JSValue *)&v2344, *(JSC::JSGlobalObject **)a1, (uint64_t)v2338, v172, (uint64_t)&v2340, v1231, v1232, v1233);
                            if (*((_DWORD *)v2333 + 20)
                              && JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
                            {
                              goto LABEL_1713;
                            }
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
LABEL_418:
                            if (*v10 != 10)
                            {
                              v98 = 14;
                              goto LABEL_156;
                            }
                            v222 = *(_QWORD *)(v8 + 48);
                            v221 = *(_QWORD *)(v8 + 56);
                            if (v222 >= v221)
                            {
                              v223 = 0;
                            }
                            else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v222] == 19)
                            {
                              v238 = *(unsigned __int8 **)(v8 + 56);
                              v239 = (unsigned __int8 *)(v222 + 1);
                              v240 = ~v222 + v221;
                              while (1)
                              {
                                v241 = v239;
                                *v12 = v239;
                                if (!v240)
                                  break;
                                ++v239;
                                --v240;
                                if (JSC::tokenTypesOfLatin1Characters[*v241] != 19)
                                {
                                  v238 = v241;
                                  break;
                                }
                              }
                              v223 = (unint64_t)v241 < v221;
                              v222 = (unint64_t)v238;
                            }
                            else
                            {
                              v223 = 1;
                            }
                            if (v222 == v221)
                            {
                              v446 = 14;
                              goto LABEL_1030;
                            }
                            *v10 = 18;
                            a4 = *(unsigned __int8 *)v222;
                            v224 = JSC::tokenTypesOfLatin1Characters[a4];
                            if (v224 <= 4)
                            {
                              if (v224 == 4)
                              {
                                v225 = *(unsigned __int8 *)(v8 + 40);
                                if ((_DWORD)a4 != 39)
                                {
                                  a3 = v222 + 1;
                                  *v12 = (unsigned __int8 *)(v222 + 1);
                                  if (!v225)
                                  {
                                    v226 = v221 - a3;
                                    if ((uint64_t)(v221 - a3) >= 0)
                                    {
                                      v227 = (int8x16_t *)(v226 + v222 + 1);
                                      if (v226 < 0x10)
                                      {
                                        v541 = (int8x16_t *)(v222 + 1);
                                        if (v221 == a3)
                                          goto LABEL_460;
                                        do
                                        {
                                          if (!JSC::safeStringLatin1CharactersInStrictJSON[v541->u8[0]])
                                          {
                                            v227 = v541;
                                            goto LABEL_460;
                                          }
                                          v541 = (int8x16_t *)((char *)v541 + 1);
                                          --v226;
                                        }
                                        while (v226);
                                        goto LABEL_460;
                                      }
                                      v228 = (unsigned __int8 *)(v222 + 16);
                                      while (1)
                                      {
                                        v229 = *(int8x16_t *)(v228 - 15);
                                        v230.i64[0] = 0x2222222222222222;
                                        v230.i64[1] = 0x2222222222222222;
                                        v231 = vceqq_s8(v229, v230);
                                        v232.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                        v232.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                        v233.i64[0] = 0x2020202020202020;
                                        v233.i64[1] = 0x2020202020202020;
                                        v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v229, v232), (int8x16_t)vcgtq_u8(v233, (uint8x16_t)v229)), v231);
                                        v231.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                        if (v231.i32[0])
                                          break;
                                        v228 += 16;
                                        if (v228 >= (unsigned __int8 *)v227)
                                        {
                                          if (v228 - 15 >= (unsigned __int8 *)v227)
                                          {
                                            v11 = v2328;
                                            v10 = v2335;
                                            v12 = v2336;
                                            v8 = a1;
                                            goto LABEL_460;
                                          }
                                          v242 = (unsigned __int8 *)&v227[-1];
                                          v1774 = v227[-1];
                                          v1775.i64[0] = 0x2222222222222222;
                                          v1775.i64[1] = 0x2222222222222222;
                                          v1776 = vceqq_s8(v1774, v1775);
                                          v1777.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                          v1777.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                          v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1774, v1777), (int8x16_t)vcgtq_u8(v233, (uint8x16_t)v1774)), v1776);
                                          v1776.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                          v11 = v2328;
                                          v10 = v2335;
                                          v12 = v2336;
                                          v8 = a1;
                                          if (!v1776.i32[0])
                                          {
LABEL_460:
                                            *v12 = (unsigned __int8 *)v227;
                                            goto LABEL_461;
                                          }
LABEL_459:
                                          v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                                          v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                                          v227 = (int8x16_t *)&v242[v14.n128_u32[0]];
                                          goto LABEL_460;
                                        }
                                      }
                                      v242 = v228 - 15;
                                      goto LABEL_459;
                                    }
                                    goto LABEL_3864;
                                  }
LABEL_591:
                                  if (a3 >= v221)
                                  {
                                    v227 = (int8x16_t *)a3;
                                    goto LABEL_461;
                                  }
                                  v227 = (int8x16_t *)a3;
                                  while (1)
                                  {
                                    v294 = v227->u8[0];
                                    v295 = v294 < 0x20 || v294 == 92;
                                    v296 = v295 || v294 == (_DWORD)a4;
                                    v297 = v296;
                                    if (v294 != 9 && v297)
                                      break;
                                    v227 = (int8x16_t *)((char *)v227 + 1);
                                    *v12 = (unsigned __int8 *)v227;
                                    if (v227 == (int8x16_t *)(v222 + v221 - a3 + 1))
                                    {
                                      v227 = (int8x16_t *)(v222 + v221 - a3 + 1);
                                      break;
                                    }
                                  }
LABEL_461:
                                  if ((unint64_t)v227 < v221 && v227->u8[0] == (_DWORD)a4)
                                  {
                                    v98 = 0;
                                    *(_BYTE *)(v8 + 25) |= 1u;
                                    *(_QWORD *)(v8 + 32) = a3;
                                    *(_QWORD *)(v8 + 48) = (char *)v227->i64 + 1;
                                    *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v227 - a3) & 0x7FFFFFFF;
                                    *(_BYTE *)(v8 + 24) = 4;
                                    goto LABEL_156;
                                  }
                                  v592 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
                                  if (v592 == 4)
                                  {
LABEL_1370:
                                    v98 = 0;
                                    goto LABEL_156;
                                  }
                                  goto LABEL_2137;
                                }
                                v1514 = v13;
                                if (*(_BYTE *)(v8 + 40))
                                {
                                  a3 = v222 + 1;
                                  v10 = v2335;
                                  v12 = v2336;
                                  *v2336 = (unsigned __int8 *)(v222 + 1);
                                  v11 = v2328;
                                  v8 = a1;
                                  goto LABEL_591;
                                }
                                v1557 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1565 = v1557;
                                v1566 = 0x2900000002;
                                v1567 = "Single quotes (') are not allowed in JSON";
                                goto LABEL_3289;
                              }
                              goto LABEL_451;
                            }
                            if (v224 != 6)
                            {
                              if (v224 != 5)
                              {
                                if (v224 - 18 < 2)
                                {
                                  WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                                  v737 = v2340.rlim_cur;
                                  if (!v2340.rlim_cur)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x198B05BE4);
                                  }
                                  *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                                  *(_QWORD *)(v737 + 8) = v737 + 20;
                                  *(_DWORD *)(v737 + 16) = 4;
                                  *(_DWORD *)(v737 + 36) = 656436837;
                                  *(_OWORD *)(v737 + 20) = *(_OWORD *)"Unrecognized token '";
                                  *(_BYTE *)(v737 + 40) = *(_BYTE *)v222;
                                  *(_BYTE *)(v737 + 41) = 39;
                                  v738 = *(WTF::StringImpl **)v2321;
                                  *(_QWORD *)v2321 = v737;
                                  if (v738)
                                  {
                                    if (*(_DWORD *)v738 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v738, v730, v731, v732, v733, v734, v735, v736);
                                      WTF::fastFree(v1000, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v738 -= 2;
                                    }
                                  }
                                  goto LABEL_452;
                                }
LABEL_451:
                                *v10 = v224;
                                *v12 = (unsigned __int8 *)(v222 + 1);
LABEL_452:
                                v102 = WTF::fastCompactMalloc((WTF *)0x20);
                                v14.n128_u64[0] = 0x2600000002;
                                *(_QWORD *)v102 = 0x2600000002;
                                v103 = "Property name must be a string literal";
                                goto LABEL_152;
                              }
                              if ((_DWORD)a4 == 110)
                              {
                                if ((uint64_t)(v221 - v222) >= 4
                                  && *(_WORD *)(v222 + 1) == 27765
                                  && *(_BYTE *)(v222 + 3) == 108)
                                {
                                  *v12 = (unsigned __int8 *)(v222 + 4);
                                  v446 = 13;
LABEL_1030:
                                  *v10 = v446;
                                  goto LABEL_452;
                                }
                                goto LABEL_2123;
                              }
                              if ((_DWORD)a4 == 102)
                              {
                                if ((uint64_t)(v221 - v222) >= 5
                                  && *(_WORD *)(v222 + 1) == 27745
                                  && *(_WORD *)(v222 + 3) == 25971)
                                {
                                  *v12 = (unsigned __int8 *)(v222 + 5);
                                  v446 = 12;
                                  goto LABEL_1030;
                                }
LABEL_2123:
                                v993 = v222;
                                *v2328 = (WTF::AtomStringImpl *)v222;
                                v994 = v222;
                                if (v222 < v221)
                                {
                                  v995 = v221 - v222;
                                  v996 = v222 + v995;
                                  while (1)
                                  {
                                    v997 = *(unsigned __int8 *)v222;
                                    if (v997 != 36)
                                    {
                                      v998 = v997 != 95 && (v997 - 48) >= 0xA;
                                      if (v998 && (v997 | 0x20u) - 97 > 0x19)
                                        break;
                                    }
                                    *v2336 = (unsigned __int8 *)++v222;
                                    if (!--v995)
                                    {
                                      LODWORD(v222) = v996;
                                      break;
                                    }
                                  }
                                  v994 = v222;
                                }
                                v8 = a1;
                                v10 = v2335;
                                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v994 - v993) & 0x7FFFFFFF;
                                v592 = 5;
                                *(_BYTE *)(a1 + 24) = 5;
                                v11 = v2328;
                                v12 = v2336;
LABEL_2137:
                                if (v592 == 5 && *(_BYTE *)(v8 + 88))
                                  goto LABEL_1370;
                                goto LABEL_452;
                              }
                              if ((_DWORD)a4 != 116
                                || (uint64_t)(v221 - v222) < 4
                                || *(_WORD *)(v222 + 1) != 30066
                                || *(_BYTE *)(v222 + 3) != 101)
                              {
                                goto LABEL_2123;
                              }
                              v10 = v2335;
                              v12 = v2336;
                              *v2336 = (unsigned __int8 *)(v222 + 4);
                              *v2335 = 11;
                              v11 = v2328;
LABEL_1761:
                              v8 = a1;
                              goto LABEL_452;
                            }
                            v270 = (_DWORD)a4 != 45 || !v223;
                            v271 = (unsigned __int8 *)v222;
                            if ((v270 & 1) == 0)
                            {
                              v271 = (unsigned __int8 *)(v222 + 1);
                              *v12 = (unsigned __int8 *)(v222 + 1);
                            }
                            if ((unint64_t)v271 < v221)
                            {
                              v272 = *v271;
                              if (v272 == 48)
                              {
                                v245 = v271 + 1;
                                *v12 = v245;
LABEL_532:
                                if ((unint64_t)v245 >= v221)
                                  goto LABEL_904;
                                v274 = *v245;
                                if (v274 != 46)
                                {
                                  if (v274 != 69 && v274 != 101 && (uint64_t)&v245[-v222] <= 9)
                                  {
                                    *v10 = 6;
                                    v275 = *(unsigned __int8 *)v222;
                                    if (v275 == 45)
                                      v276 = (unsigned __int8 *)(v222 + 1);
                                    else
                                      v276 = (unsigned __int8 *)v222;
                                    if (v276 >= v245)
                                    {
                                      if (v275 != 45)
                                      {
                                        v277 = 0;
LABEL_544:
                                        v279 = (double)v277;
LABEL_545:
                                        *(double *)v11 = v279;
                                        goto LABEL_452;
                                      }
                                    }
                                    else
                                    {
                                      v277 = 0;
                                      do
                                      {
                                        v278 = *v276++;
                                        v277 = v278 + 10 * v277 - 48;
                                      }
                                      while (v276 < v245);
                                      if (v275 != 45)
                                        goto LABEL_544;
                                      if (v277)
                                      {
                                        v279 = (double)-v277;
                                        goto LABEL_545;
                                      }
                                    }
                                    *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                                    goto LABEL_452;
                                  }
LABEL_904:
                                  if ((unint64_t)v245 < v221 && (*v245 | 0x20) == 0x65)
                                  {
                                    v1514 = v13;
                                    v1515 = v245 + 1;
                                    *v12 = v245 + 1;
                                    if ((unint64_t)(v245 + 1) < v221)
                                    {
                                      v1516 = *v1515;
                                      if (v1516 == 45 || v1516 == 43)
                                      {
                                        v1515 = v245 + 2;
                                        *v2336 = v245 + 2;
                                      }
                                    }
                                    if ((unint64_t)v1515 >= v221 || *v1515 - 48 > 9)
                                    {
                                      v1557 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1565 = v1557;
                                      v1566 = 0x5D00000002;
                                      v1567 = "Exponent symbols should be followed by an optional '+' or '-' and then by "
                                              "at least one number";
LABEL_3289:
                                      *(_QWORD *)v1557 = v1566;
                                      *(_QWORD *)(v1557 + 8) = v1567;
                                      *(_DWORD *)(v1557 + 16) = 4;
                                      v1568 = *(WTF::StringImpl **)v2321;
                                      *(_QWORD *)v2321 = v1565;
                                      v13 = v1514;
                                      v11 = v2328;
                                      v10 = v2335;
                                      v12 = v2336;
                                      v8 = a1;
                                      if (v1568)
                                      {
                                        if (*(_DWORD *)v1568 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1568, v1558, v1559, v1560, v1561, v1562, v1563, v1564);
                                          WTF::fastFree(v1786, v1787, v1788, v1789, v1790, v1791, v1792, v1793);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1568 -= 2;
                                        }
                                        v13 = v1514;
                                        v11 = v2328;
                                        v10 = v2335;
                                        v12 = v2336;
                                        v8 = a1;
                                      }
                                      goto LABEL_452;
                                    }
                                    v1517 = v1515 + 1;
                                    v12 = v2336;
                                    while (1)
                                    {
                                      v245 = v1517;
                                      *v12 = v1517;
                                      if ((unint64_t)v1517 >= v221)
                                        break;
                                      ++v1517;
                                      v13 = v1514;
                                      v11 = v2328;
                                      v10 = v2335;
                                      v12 = v2336;
                                      v8 = a1;
                                      if (*v245 - 48 >= 0xA)
                                        goto LABEL_906;
                                    }
                                    v13 = v1514;
                                    v11 = v2328;
                                    v10 = v2335;
                                    v12 = v2336;
                                    v8 = a1;
                                  }
LABEL_906:
                                  *v10 = 6;
                                  if ((uint64_t)&v245[-v222] < 0)
                                    goto LABEL_3864;
                                  v2340.rlim_cur = 0;
                                  fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v222, v245, &v2340.rlim_cur, 0x2E00000005);
                                  v279 = *(double *)&v2340.rlim_cur;
                                  goto LABEL_545;
                                }
                                *v12 = v245 + 1;
                                if ((unint64_t)(v245 + 1) < v221 && v245[1] - 48 <= 9)
                                {
                                  v246 = v245 + 2;
                                  do
                                  {
                                    v245 = v246;
                                    *v12 = v246;
                                    if ((unint64_t)v246 >= v221)
                                      break;
                                    ++v246;
                                  }
                                  while (*v245 - 48 < 0xA);
                                  goto LABEL_904;
                                }
                                v1447 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1455 = v1447;
                                v1456 = 0x2200000002;
                                v1457 = "Invalid digits after decimal point";
LABEL_3095:
                                *(_QWORD *)v1447 = v1456;
                                *(_QWORD *)(v1447 + 8) = v1457;
                                *(_DWORD *)(v1447 + 16) = 4;
                                v1458 = *(WTF::StringImpl **)v2321;
                                *(_QWORD *)v2321 = v1455;
                                if (!v1458)
                                  goto LABEL_452;
                                if (*(_DWORD *)v1458 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v1458, v1448, v1449, v1450, v1451, v1452, v1453, v1454);
                                  WTF::fastFree(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663);
                                }
                                else
                                {
                                  *(_DWORD *)v1458 -= 2;
                                }
                                v11 = v2328;
                                v10 = v2335;
                                v12 = v2336;
                                goto LABEL_1761;
                              }
                              if ((v272 - 49) <= 8)
                              {
                                v273 = v271 + 1;
                                do
                                {
                                  v245 = v273;
                                  *v12 = v273;
                                  if ((unint64_t)v273 >= v221)
                                    break;
                                  ++v273;
                                }
                                while (*v245 - 48 < 0xA);
                                goto LABEL_532;
                              }
                            }
                            v1447 = WTF::fastCompactMalloc((WTF *)0x20);
                            v1455 = v1447;
                            v1456 = 0xE00000002;
                            v1457 = "Invalid number";
                            goto LABEL_3095;
                          }
                        }
                        else
                        {
                          v216 = v2338;
                        }
                        if (v216)
                        {
                          v217 = *((_DWORD *)v216 + 4);
                          if ((v217 & 0x20) == 0)
                          {
                            v218 = (_BYTE *)*((_QWORD *)v216 + 1);
                            v219 = *((unsigned int *)v216 + 1);
                            if ((v217 & 4) != 0)
                            {
                              if ((_DWORD)v219)
                              {
                                v220 = (JSC::VM *)(*v218 - 48);
                                if (v220 <= 9 && (v219 < 2 || *v218 != 48))
                                {
                                  v1649 = v218 + 1;
                                  v1650 = v219 - 1;
                                  while (v1650)
                                  {
                                    v11 = v2328;
                                    v10 = v2335;
                                    v12 = v2336;
                                    v8 = a1;
                                    if (v220 <= 0x19999999)
                                    {
                                      v1651 = *v1649 - 48;
                                      if (v1651 <= 9)
                                      {
                                        v753 = __CFADD__(v1651, 10 * (_DWORD)v220);
                                        v220 = (JSC::VM *)(v1651 + 10 * (_DWORD)v220);
                                        ++v1649;
                                        --v1650;
                                        if (!v753)
                                          continue;
                                      }
                                    }
                                    goto LABEL_417;
                                  }
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                  if ((_DWORD)v220 != -1)
                                  {
LABEL_446:
                                    JSC::JSObject::putDirectIndex((unint64_t)v2339, *(_QWORD *)v8, v220, v172, a5, a6, a7, a8, (int32x4_t)v14);
                                    if (*((_DWORD *)v2333 + 20))
                                    {
                                      if (JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
                                        goto LABEL_155;
                                    }
                                    goto LABEL_418;
                                  }
                                }
                              }
                            }
                            else if ((_DWORD)v219)
                            {
                              v220 = (JSC::VM *)(*(unsigned __int16 *)v218 - 48);
                              if (v220 <= 9 && (*(_WORD *)v218 != 48 || v219 <= 1))
                              {
                                v235 = (unsigned __int16 *)(v218 + 2);
                                v236 = v219 - 1;
                                while (v236)
                                {
                                  if (v220 <= 0x19999999)
                                  {
                                    v237 = *v235 - 48;
                                    if (v237 <= 9)
                                    {
                                      v753 = __CFADD__(v237, 10 * (_DWORD)v220);
                                      v220 = (JSC::VM *)(v237 + 10 * (_DWORD)v220);
                                      ++v235;
                                      --v236;
                                      if (!v753)
                                        continue;
                                    }
                                  }
                                  goto LABEL_417;
                                }
                                if ((_DWORD)v220 != -1)
                                  goto LABEL_446;
                              }
                            }
                          }
                        }
LABEL_417:
                        v2340.rlim_cur = 0;
                        v2340.rlim_max = (rlim_t)v2339;
                        v2341 = -1;
                        v14.n128_u64[0] = 0x100000001000000;
                        v2342 = 0x1000000;
                        v2343 = 0;
                        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v2339, (uint64_t)v2333, (unint64_t)v216, v172, 0, (uint64_t)&v2340, a7, a8, v14);
                        goto LABEL_418;
                      }
                      if ((_DWORD)a4 == 110)
                      {
                        if ((uint64_t)(v182 - (_QWORD)v183) >= 4 && *(_WORD *)(v183 + 1) == 27765 && v183[3] == 108)
                          goto LABEL_1023;
                      }
                      else if ((_DWORD)a4 == 102)
                      {
                        if ((uint64_t)(v182 - (_QWORD)v183) >= 5
                          && *(_WORD *)(v183 + 1) == 27745
                          && *(_WORD *)(v183 + 3) == 25971)
                        {
                          goto LABEL_1165;
                        }
                      }
                      else if ((_DWORD)a4 == 116
                             && (uint64_t)(v182 - (_QWORD)v183) >= 4
                             && *(_WORD *)(v183 + 1) == 30066
                             && v183[3] == 101)
                      {
LABEL_1754:
                        v10 = v2335;
                        v12 = v2336;
                        *v2336 = v183 + 4;
                        *v2335 = 11;
                        v11 = v2328;
LABEL_1755:
                        v8 = a1;
                        goto LABEL_409;
                      }
                      v831 = (int)v183;
                      *v2328 = (WTF::AtomStringImpl *)v183;
                      v832 = (int)v183;
                      if ((unint64_t)v183 < v182)
                      {
                        v833 = v182 - (_QWORD)v183;
                        v834 = (_DWORD)v183 + v833;
                        while (1)
                        {
                          v835 = *v183;
                          if (v835 != 36)
                          {
                            v836 = v835 != 95 && (v835 - 48) >= 0xA;
                            if (v836 && (v835 | 0x20u) - 97 > 0x19)
                              goto LABEL_2094;
                          }
                          *v2336 = ++v183;
                          if (!--v833)
                          {
LABEL_2093:
                            LODWORD(v183) = v834;
                            goto LABEL_2094;
                          }
                        }
                      }
LABEL_2095:
                      v8 = a1;
                      v10 = v2335;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v832 - v831) & 0x7FFFFFFF;
                      *(_BYTE *)(a1 + 24) = 5;
                      v11 = v2328;
                      v12 = v2336;
                      goto LABEL_409;
                    }
                    v280 = v183;
                    if ((unint64_t)v183 < v182)
                    {
                      v280 = v183;
                      if ((_DWORD)a4 == 45)
                      {
                        v280 = v183 + 1;
                        *v12 = v183 + 1;
                      }
                    }
                    if ((unint64_t)v280 < v182)
                    {
                      v281 = *v280;
                      if (v281 == 48)
                      {
                        v243 = v280 + 1;
                        *v12 = v243;
                        goto LABEL_553;
                      }
                      if ((v281 - 49) <= 8)
                      {
                        v282 = v280 + 1;
                        do
                        {
                          v243 = v282;
                          *v12 = v282;
                          if ((unint64_t)v282 >= v182)
                            break;
                          ++v282;
                        }
                        while (*v243 - 48 < 0xA);
LABEL_553:
                        if ((unint64_t)v243 < v182)
                        {
                          v283 = *v243;
                          if (v283 == 46)
                          {
                            *v12 = v243 + 1;
                            if ((unint64_t)(v243 + 1) >= v182 || v243[1] - 48 > 9)
                            {
                              v1459 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1460 = v1459;
                              v14.n128_u64[0] = 0x2200000002;
                              v1461 = "Invalid digits after decimal point";
                              goto LABEL_3100;
                            }
                            v247 = v243 + 2;
                            do
                            {
                              v243 = v247;
                              *v12 = v247;
                              if ((unint64_t)v247 >= v182)
                                break;
                              ++v247;
                            }
                            while (*v243 - 48 < 0xA);
                          }
                          else if (v283 != 69 && v283 != 101 && v243 - v183 <= 9)
                          {
                            *v10 = 6;
                            v266 = *v183;
                            if (v266 == 45)
                              v284 = v183 + 1;
                            else
                              v284 = v183;
                            if (v284 < v243)
                            {
                              v268 = 0;
                              do
                              {
                                v285 = *v284++;
                                v268 = v285 + 10 * v268 - 48;
                              }
                              while (v284 < v243);
                              goto LABEL_564;
                            }
LABEL_889:
                            if (v266 != 45)
                            {
                              v268 = 0;
                              goto LABEL_565;
                            }
LABEL_1287:
                            *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                            goto LABEL_409;
                          }
                        }
                        if ((unint64_t)v243 >= v182 || (*v243 | 0x20) != 0x65)
                          goto LABEL_902;
                        v416 = v13;
                        v417 = v243 + 1;
                        *v12 = v243 + 1;
                        if ((unint64_t)(v243 + 1) < v182)
                        {
                          v418 = *v417;
                          if (v418 == 45 || v418 == 43)
                          {
                            v417 = v243 + 2;
                            *v2336 = v243 + 2;
                          }
                        }
                        if ((unint64_t)v417 < v182 && *v417 - 48 <= 9)
                        {
                          v419 = v417 + 1;
                          v12 = v2336;
                          while (1)
                          {
                            v243 = v419;
                            *v12 = v419;
                            if ((unint64_t)v419 >= v182)
                              goto LABEL_3513;
                            ++v419;
                            v13 = v416;
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            if (*v243 - 48 >= 0xA)
                              goto LABEL_902;
                          }
                        }
                        v1569 = WTF::fastCompactMalloc((WTF *)0x20);
                        v14.n128_u64[0] = 0x5D00000002;
                        *(_QWORD *)v1569 = 0x5D00000002;
                        *(_QWORD *)(v1569 + 8) = "Exponent symbols should be followed by an optional '+' or '-' and then "
                                                 "by at least one number";
                        *(_DWORD *)(v1569 + 16) = 4;
                        v1445 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v1569;
                        if (!v1445)
                        {
LABEL_3087:
                          v11 = v2328;
                          v10 = v2335;
                          v12 = v2336;
                          goto LABEL_1755;
                        }
                        if (*(_DWORD *)v1445 != 2)
                        {
                          *(_DWORD *)v1445 -= 2;
                          goto LABEL_3087;
                        }
LABEL_3278:
                        WTF::StringImpl::~StringImpl(v1445, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v1548, v1549, v1550, v1551, v1552, v1553, v1554, v1555);
                        goto LABEL_3087;
                      }
                    }
                    v1459 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1460 = v1459;
                    v14.n128_u64[0] = 0xE00000002;
                    v1461 = "Invalid number";
                    goto LABEL_3100;
                  }
                  v1396 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1397 = v1396;
                  v14.n128_u64[0] = 0x2900000002;
                  v1398 = "Single quotes (') are not allowed in JSON";
LABEL_3016:
                  *(_QWORD *)v1396 = v14.n128_u64[0];
                  *(_QWORD *)(v1396 + 8) = v1398;
                  *(_DWORD *)(v1396 + 16) = 4;
                  v1399 = *(WTF::StringImpl **)v2321;
                  *(_QWORD *)v2321 = v1397;
                  v13 = v1381;
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  if (v1399)
                  {
                    if (*(_DWORD *)v1399 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1399, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1664, v1665, v1666, v1667, v1668, v1669, v1670, v1671);
                    }
                    else
                    {
                      *(_DWORD *)v1399 -= 2;
                    }
                    v13 = v1381;
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                  }
                  goto LABEL_313;
                }
LABEL_130:
                *v10 = v81;
                *v12 = v79 + 1;
                goto LABEL_131;
              }
              if (v81 != 6)
              {
                if (v81 != 5)
                {
                  if (v81 - 18 < 2)
                  {
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                    v590 = v2340.rlim_cur;
                    if (!v2340.rlim_cur)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B05BBCLL);
                    }
                    *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v590 + 8) = v590 + 20;
                    *(_DWORD *)(v590 + 16) = 4;
                    *(_DWORD *)(v590 + 36) = 656436837;
                    v14 = *(__n128 *)"Unrecognized token '";
                    *(_OWORD *)(v590 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v590 + 40) = *v79;
                    *(_BYTE *)(v590 + 41) = 39;
                    v591 = *(WTF::StringImpl **)v2321;
                    *(_QWORD *)v2321 = v590;
                    if (v591)
                    {
                      if (*(_DWORD *)v591 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v591, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v823, v824, v825, v826, v827, v828, v829, v830);
                      }
                      else
                      {
                        *(_DWORD *)v591 -= 2;
                      }
                    }
                    goto LABEL_313;
                  }
                  goto LABEL_130;
                }
                if ((_DWORD)a4 == 110)
                {
                  if ((uint64_t)(v78 - (_QWORD)v79) < 4 || *(_WORD *)(v79 + 1) != 27765 || v79[3] != 108)
                    goto LABEL_1693;
                  v425 = v79 + 4;
                  *v12 = v425;
                  *v10 = 13;
LABEL_973:
                  if ((unint64_t)v425 < v78)
                  {
                    v426 = v78 - (_QWORD)v425;
                    while (JSC::tokenTypesOfLatin1Characters[*v425] == 19)
                    {
                      *v12 = ++v425;
                      if (!--v426)
                      {
                        v425 = (unsigned __int8 *)v78;
                        break;
                      }
                    }
                  }
                  if (v425 == (unsigned __int8 *)v78)
                  {
                    *v10 = 14;
                    goto LABEL_1064;
                  }
                  *v10 = 18;
                  a4 = *v425;
                  v427 = JSC::tokenTypesOfLatin1Characters[a4];
                  if (v427 <= 4)
                  {
                    if (v427 == 4)
                    {
                      v428 = *(unsigned __int8 *)(v8 + 40);
                      if ((_DWORD)a4 != 39)
                      {
                        v429 = (size_t)(v425 + 1);
                        *v12 = v425 + 1;
                        if (!v428)
                        {
                          v430 = v78 - v429;
                          if ((uint64_t)(v78 - v429) >= 0)
                          {
                            v431 = (int8x16_t *)&v425[v430 + 1];
                            if (v430 >= 0x10)
                            {
                              v432 = v425 + 16;
                              while (1)
                              {
                                v433 = *(int8x16_t *)(v432 - 15);
                                v434.i64[0] = 0x2222222222222222;
                                v434.i64[1] = 0x2222222222222222;
                                v435 = vceqq_s8(v433, v434);
                                v436.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                v436.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                v437.i64[0] = 0x2020202020202020;
                                v437.i64[1] = 0x2020202020202020;
                                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v433, v436), (int8x16_t)vcgtq_u8(v437, (uint8x16_t)v433)), v435);
                                v435.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                if (v435.i32[0])
                                  break;
                                v432 += 16;
                                if (v432 >= (unsigned __int8 *)v431)
                                {
                                  if (v432 - 15 >= (unsigned __int8 *)v431)
                                    goto LABEL_2411;
                                  v438 = (unsigned __int8 *)&v431[-1];
                                  v439 = v431[-1];
                                  v440.i64[0] = 0x2222222222222222;
                                  v440.i64[1] = 0x2222222222222222;
                                  v441 = vceqq_s8(v439, v440);
                                  v442.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                  v442.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v439, v442), (int8x16_t)vcgtq_u8(v437, (uint8x16_t)v439)), v441);
                                  v441.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                  if (!v441.i32[0])
                                  {
LABEL_1115:
                                    *v12 = (unsigned __int8 *)v431;
                                    goto LABEL_1116;
                                  }
LABEL_1114:
                                  v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                                  v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                                  v431 = (int8x16_t *)&v438[v14.n128_u32[0]];
                                  goto LABEL_1115;
                                }
                              }
                              v438 = v432 - 15;
                              goto LABEL_1114;
                            }
                            v1143 = (int8x16_t *)(v425 + 1);
                            if (v78 != v429)
                            {
                              while (JSC::safeStringLatin1CharactersInStrictJSON[v1143->u8[0]])
                              {
                                v1143 = (int8x16_t *)((char *)v1143 + 1);
                                if (!--v430)
                                  goto LABEL_2411;
                              }
                              v431 = v1143;
                            }
LABEL_2411:
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            goto LABEL_1115;
                          }
                          goto LABEL_3864;
                        }
                        goto LABEL_3997;
                      }
                      if (*(_BYTE *)(v8 + 40))
                      {
                        v429 = (size_t)(v425 + 1);
                        v10 = v2335;
                        v12 = v2336;
                        *v2336 = v425 + 1;
                        v11 = v2328;
                        v8 = a1;
LABEL_3997:
                        if (v429 >= v78)
                        {
                          v431 = (int8x16_t *)v429;
                        }
                        else
                        {
                          v431 = (int8x16_t *)v429;
                          while (1)
                          {
                            v1988 = v431->u8[0];
                            v1989 = v1988 < 0x20 || v1988 == 92;
                            v1990 = v1989 || v1988 == (_DWORD)a4;
                            v1991 = v1990;
                            if (v1988 != 9 && v1991)
                              break;
                            v431 = (int8x16_t *)((char *)v431 + 1);
                            *v12 = (unsigned __int8 *)v431;
                            if (v431 == (int8x16_t *)&v425[v78 - v429 + 1])
                            {
                              v431 = (int8x16_t *)&v425[v78 - v429 + 1];
                              break;
                            }
                          }
                        }
LABEL_1116:
                        if ((unint64_t)v431 < v78 && v431->u8[0] == (_DWORD)a4)
                        {
                          *(_BYTE *)(v8 + 25) |= 1u;
                          *(_QWORD *)(v8 + 32) = v429;
                          *(_QWORD *)(v8 + 48) = (char *)v431->i64 + 1;
                          *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v431 - v429) & 0x7FFFFFFF;
                          *(_BYTE *)(v8 + 24) = 4;
                        }
                        else
                        {
                          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v429, a4, a5, a6, a7, a8);
                        }
                        goto LABEL_1064;
                      }
                      v1937 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1237 = v1937;
                      v14.n128_u64[0] = 0x2900000002;
                      v1938 = "Single quotes (') are not allowed in JSON";
                      goto LABEL_3900;
                    }
                    goto LABEL_1063;
                  }
                  if (v427 != 6)
                  {
                    if (v427 != 5)
                    {
                      if (v427 - 18 < 2)
                      {
                        WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                        v1237 = v2340.rlim_cur;
                        if (!v2340.rlim_cur)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198B05BC4);
                        }
                        *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                        *(_QWORD *)(v1237 + 8) = v1237 + 20;
                        *(_DWORD *)(v1237 + 16) = 4;
                        *(_DWORD *)(v1237 + 36) = 656436837;
                        v14 = *(__n128 *)"Unrecognized token '";
                        *(_OWORD *)(v1237 + 20) = *(_OWORD *)"Unrecognized token '";
                        *(_BYTE *)(v1237 + 40) = *v425;
                        *(_BYTE *)(v1237 + 41) = 39;
                        goto LABEL_2615;
                      }
LABEL_1063:
                      *v10 = v427;
                      *v12 = v425 + 1;
LABEL_1064:
                      v172 = 2;
                      goto LABEL_410;
                    }
                    if ((_DWORD)a4 == 110)
                    {
                      if ((uint64_t)(v78 - (_QWORD)v425) >= 4 && *(_WORD *)(v425 + 1) == 27765 && v425[3] == 108)
                      {
                        v12 = v2336;
                        *v2336 = v425 + 4;
                        v925 = 13;
LABEL_1996:
                        v10 = v2335;
                        *v2335 = v925;
                        v172 = 2;
LABEL_1997:
                        v11 = v2328;
LABEL_1998:
                        v8 = a1;
                        goto LABEL_410;
                      }
                    }
                    else if ((_DWORD)a4 == 102)
                    {
                      if ((uint64_t)(v78 - (_QWORD)v425) >= 5
                        && *(_WORD *)(v425 + 1) == 27745
                        && *(_WORD *)(v425 + 3) == 25971)
                      {
                        v12 = v2336;
                        *v2336 = v425 + 5;
                        v925 = 12;
                        goto LABEL_1996;
                      }
                    }
                    else if ((_DWORD)a4 == 116
                           && (uint64_t)(v78 - (_QWORD)v425) >= 4
                           && *(_WORD *)(v425 + 1) == 30066
                           && v425[3] == 101)
                    {
                      v12 = v2336;
                      *v2336 = v425 + 4;
                      v925 = 11;
                      goto LABEL_1996;
                    }
                    v1407 = (int)v425;
                    *v2328 = (WTF::AtomStringImpl *)v425;
                    v1408 = (int)v425;
                    if ((unint64_t)v425 < v78)
                    {
                      v1409 = v78 - (_QWORD)v425;
                      v1410 = (_DWORD)v425 + v1409;
                      while (1)
                      {
                        v1411 = *v425;
                        if (v1411 != 36)
                        {
                          v1412 = v1411 != 95 && (v1411 - 48) >= 0xA;
                          if (v1412 && (v1411 | 0x20u) - 97 > 0x19)
                            break;
                        }
                        *v2336 = ++v425;
                        if (!--v1409)
                        {
                          LODWORD(v425) = v1410;
                          break;
                        }
                      }
                      v1408 = (int)v425;
                    }
                    v8 = a1;
                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1408 - v1407) & 0x7FFFFFFF;
                    *(_BYTE *)(a1 + 24) = 5;
                    v172 = 2;
LABEL_1978:
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    goto LABEL_410;
                  }
                  v521 = v425;
                  if ((unint64_t)v425 < v78)
                  {
                    v521 = v425;
                    if ((_DWORD)a4 == 45)
                    {
                      v521 = v425 + 1;
                      *v12 = v425 + 1;
                    }
                  }
                  if ((unint64_t)v521 < v78)
                  {
                    v522 = *v521;
                    if (v522 == 48)
                    {
                      v524 = v521 + 1;
                      *v12 = v524;
LABEL_1219:
                      if ((unint64_t)v524 >= v78)
                      {
LABEL_1638:
                        if ((unint64_t)v524 >= v78 || (*v524 | 0x20) != 0x65)
                        {
LABEL_1640:
                          *v10 = 6;
                          if (v524 - v425 < 0)
                            goto LABEL_3864;
                          v2340.rlim_cur = 0;
                          fast_float::from_chars_advanced<double,char>(v425, v524, &v2340.rlim_cur, 0x2E00000005);
                          v14.n128_u64[0] = v2340.rlim_cur;
                          goto LABEL_1232;
                        }
                        v803 = v13;
                        v1957 = v524 + 1;
                        *v12 = v524 + 1;
                        if ((unint64_t)(v524 + 1) < v78)
                        {
                          v1958 = *v1957;
                          if (v1958 == 45 || v1958 == 43)
                          {
                            v1957 = v524 + 2;
                            *v2336 = v524 + 2;
                          }
                        }
                        if ((unint64_t)v1957 < v78 && *v1957 - 48 <= 9)
                        {
                          v1959 = v1957 + 1;
                          v12 = v2336;
                          while (1)
                          {
                            v524 = v1959;
                            *v12 = v1959;
                            if ((unint64_t)v1959 >= v78)
                              break;
                            ++v1959;
                            v13 = v803;
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            if (*v524 - 48 >= 0xA)
                              goto LABEL_1640;
                          }
                          v13 = v803;
                          v11 = v2328;
                          v10 = v2335;
                          v12 = v2336;
                          v8 = a1;
                          goto LABEL_1640;
                        }
                        v1967 = WTF::fastCompactMalloc((WTF *)0x20);
                        v14.n128_u64[0] = 0x5D00000002;
                        *(_QWORD *)v1967 = 0x5D00000002;
                        *(_QWORD *)(v1967 + 8) = "Exponent symbols should be followed by an optional '+' or '-' and then "
                                                 "by at least one number";
                        *(_DWORD *)(v1967 + 16) = 4;
                        v1968 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v1967;
                        if (v1968)
                        {
                          if (*(_DWORD *)v1968 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1968, v1965, v1966, a4, a5, a6, a7, a8);
                            WTF::fastFree(v2031, v2032, v2033, v2034, v2035, v2036, v2037, v2038);
                          }
                          else
                          {
                            *(_DWORD *)v1968 -= 2;
                          }
                        }
                        v172 = 2;
                        goto LABEL_3964;
                      }
                      v525 = *v524;
                      if (v525 != 46)
                      {
                        if (v525 != 69 && v525 != 101 && v524 - v425 <= 9)
                        {
                          *v10 = 6;
                          v526 = *v425;
                          if (v526 == 45)
                            v527 = v425 + 1;
                          else
                            v527 = v425;
                          if (v527 >= v524)
                          {
                            if (v526 != 45)
                            {
                              v528 = 0;
LABEL_1231:
                              v14.n128_f64[0] = (double)v528;
LABEL_1232:
                              *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                              goto LABEL_1064;
                            }
                          }
                          else
                          {
                            v528 = 0;
                            do
                            {
                              v529 = *v527++;
                              v528 = v529 + 10 * v528 - 48;
                            }
                            while (v527 < v524);
                            if (v526 != 45)
                              goto LABEL_1231;
                            if (v528)
                            {
                              v14.n128_f64[0] = (double)-v528;
                              goto LABEL_1232;
                            }
                          }
                          *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                          goto LABEL_1064;
                        }
                        goto LABEL_1638;
                      }
                      *v12 = v524 + 1;
                      if ((unint64_t)(v524 + 1) < v78 && v524[1] - 48 <= 9)
                      {
                        v767 = v524 + 2;
                        do
                        {
                          v524 = v767;
                          *v12 = v767;
                          if ((unint64_t)v767 >= v78)
                            break;
                          ++v767;
                        }
                        while (*v524 - 48 < 0xA);
                        goto LABEL_1638;
                      }
                      v1937 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1237 = v1937;
                      v14.n128_u64[0] = 0x2200000002;
                      v1938 = "Invalid digits after decimal point";
LABEL_3900:
                      *(_QWORD *)v1937 = v14.n128_u64[0];
                      *(_QWORD *)(v1937 + 8) = v1938;
                      *(_DWORD *)(v1937 + 16) = 4;
LABEL_2615:
                      v1238 = *(WTF::StringImpl **)v2321;
                      *(_QWORD *)v2321 = v1237;
                      if (v1238)
                      {
                        if (*(_DWORD *)v1238 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1238, v1235, v1236, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1414, v1415, v1416, v1417, v1418, v1419, v1420, v1421);
                        }
                        else
                        {
                          *(_DWORD *)v1238 -= 2;
                        }
                      }
                      v172 = 2;
                      goto LABEL_2619;
                    }
                    if ((v522 - 49) <= 8)
                    {
                      v523 = v521 + 1;
                      do
                      {
                        v524 = v523;
                        *v12 = v523;
                        if ((unint64_t)v523 >= v78)
                          break;
                        ++v523;
                      }
                      while (*v524 - 48 < 0xA);
                      goto LABEL_1219;
                    }
                  }
                  v1937 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1237 = v1937;
                  v14.n128_u64[0] = 0xE00000002;
                  v1938 = "Invalid number";
                  goto LABEL_3900;
                }
                if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v78 - (_QWORD)v79) < 5 || *(_WORD *)(v79 + 1) != 27745 || *(_WORD *)(v79 + 3) != 25971)
                    goto LABEL_1693;
                  v447 = v79 + 5;
                  *v12 = v447;
                  *v10 = 12;
LABEL_1042:
                  if ((unint64_t)v447 < v78)
                  {
                    v448 = v78 - (_QWORD)v447;
                    while (JSC::tokenTypesOfLatin1Characters[*v447] == 19)
                    {
                      *v12 = ++v447;
                      if (!--v448)
                      {
                        v447 = (unsigned __int8 *)v78;
                        break;
                      }
                    }
                  }
                  if (v447 == (unsigned __int8 *)v78)
                  {
                    *v10 = 14;
                    goto LABEL_1147;
                  }
                  *v10 = 18;
                  a4 = *v447;
                  v449 = JSC::tokenTypesOfLatin1Characters[a4];
                  if (v449 <= 4)
                  {
                    if (v449 == 4)
                    {
                      v450 = *(unsigned __int8 *)(v8 + 40);
                      if ((_DWORD)a4 != 39)
                      {
                        v451 = (size_t)(v447 + 1);
                        *v12 = v447 + 1;
                        if (!v450)
                        {
                          v452 = v78 - v451;
                          if ((uint64_t)(v78 - v451) >= 0)
                          {
                            v453 = (int8x16_t *)&v447[v452 + 1];
                            if (v452 >= 0x10)
                            {
                              v454 = v447 + 16;
                              while (1)
                              {
                                v455 = *(int8x16_t *)(v454 - 15);
                                v456.i64[0] = 0x2222222222222222;
                                v456.i64[1] = 0x2222222222222222;
                                v457 = vceqq_s8(v455, v456);
                                v458.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                v458.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                v459.i64[0] = 0x2020202020202020;
                                v459.i64[1] = 0x2020202020202020;
                                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v455, v458), (int8x16_t)vcgtq_u8(v459, (uint8x16_t)v455)), v457);
                                v457.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                if (v457.i32[0])
                                  break;
                                v454 += 16;
                                if (v454 >= (unsigned __int8 *)v453)
                                {
                                  if (v454 - 15 >= (unsigned __int8 *)v453)
                                    goto LABEL_2535;
                                  v460 = (unsigned __int8 *)&v453[-1];
                                  v461 = v453[-1];
                                  v462.i64[0] = 0x2222222222222222;
                                  v462.i64[1] = 0x2222222222222222;
                                  v463 = vceqq_s8(v461, v462);
                                  v464.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                  v464.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                  v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v461, v464), (int8x16_t)vcgtq_u8(v459, (uint8x16_t)v461)), v463);
                                  v463.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                                  v11 = v2328;
                                  v10 = v2335;
                                  v12 = v2336;
                                  v8 = a1;
                                  if (!v463.i32[0])
                                  {
LABEL_1251:
                                    *v12 = (unsigned __int8 *)v453;
                                    goto LABEL_1252;
                                  }
LABEL_1250:
                                  v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                                  v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                                  v453 = (int8x16_t *)&v460[v14.n128_u32[0]];
                                  goto LABEL_1251;
                                }
                              }
                              v460 = v454 - 15;
                              goto LABEL_1250;
                            }
                            v1203 = (int8x16_t *)(v447 + 1);
                            if (v78 != v451)
                            {
                              while (JSC::safeStringLatin1CharactersInStrictJSON[v1203->u8[0]])
                              {
                                v1203 = (int8x16_t *)((char *)v1203 + 1);
                                if (!--v452)
                                  goto LABEL_2535;
                              }
                              v453 = v1203;
                            }
LABEL_2535:
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            goto LABEL_1251;
                          }
                          goto LABEL_3864;
                        }
                        goto LABEL_4046;
                      }
                      if (*(_BYTE *)(v8 + 40))
                      {
                        v451 = (size_t)(v447 + 1);
                        v10 = v2335;
                        v12 = v2336;
                        *v2336 = v447 + 1;
                        v11 = v2328;
                        v8 = a1;
LABEL_4046:
                        if (v451 >= v78)
                        {
                          v453 = (int8x16_t *)v451;
                        }
                        else
                        {
                          v453 = (int8x16_t *)v451;
                          while (1)
                          {
                            v2002 = v453->u8[0];
                            v2003 = v2002 < 0x20 || v2002 == 92;
                            v2004 = v2003 || v2002 == (_DWORD)a4;
                            v2005 = v2004;
                            if (v2002 != 9 && v2005)
                              break;
                            v453 = (int8x16_t *)((char *)v453 + 1);
                            *v12 = (unsigned __int8 *)v453;
                            if (v453 == (int8x16_t *)&v447[v78 - v451 + 1])
                            {
                              v453 = (int8x16_t *)&v447[v78 - v451 + 1];
                              break;
                            }
                          }
                        }
LABEL_1252:
                        if ((unint64_t)v453 < v78 && v453->u8[0] == (_DWORD)a4)
                        {
                          *(_BYTE *)(v8 + 25) |= 1u;
                          *(_QWORD *)(v8 + 32) = v451;
                          *(_QWORD *)(v8 + 48) = (char *)v453->i64 + 1;
                          *(_DWORD *)(v8 + 28) = *(_DWORD *)(v8 + 28) & 0x80000000 | ((_DWORD)v453 - v451) & 0x7FFFFFFF;
                          *(_BYTE *)(v8 + 24) = 4;
                        }
                        else
                        {
                          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v10, v451, a4, a5, a6, a7, a8);
                        }
                        goto LABEL_1147;
                      }
                      v1985 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1323 = v1985;
                      v14.n128_u64[0] = 0x2900000002;
                      v1986 = "Single quotes (') are not allowed in JSON";
                      goto LABEL_3981;
                    }
                    goto LABEL_1146;
                  }
                  if (v449 != 6)
                  {
                    if (v449 != 5)
                    {
                      if (v449 - 18 < 2)
                      {
                        WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                        v1323 = v2340.rlim_cur;
                        if (!v2340.rlim_cur)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198B05BCCLL);
                        }
                        *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                        *(_QWORD *)(v1323 + 8) = v1323 + 20;
                        *(_DWORD *)(v1323 + 16) = 4;
                        *(_DWORD *)(v1323 + 36) = 656436837;
                        v14 = *(__n128 *)"Unrecognized token '";
                        *(_OWORD *)(v1323 + 20) = *(_OWORD *)"Unrecognized token '";
                        *(_BYTE *)(v1323 + 40) = *v447;
                        *(_BYTE *)(v1323 + 41) = 39;
                        goto LABEL_2824;
                      }
LABEL_1146:
                      *v10 = v449;
                      *v12 = v447 + 1;
LABEL_1147:
                      v172 = 6;
                      goto LABEL_410;
                    }
                    if ((_DWORD)a4 == 110)
                    {
                      if ((uint64_t)(v78 - (_QWORD)v447) >= 4 && *(_WORD *)(v447 + 1) == 27765 && v447[3] == 108)
                      {
                        v12 = v2336;
                        *v2336 = v447 + 4;
                        v1082 = 13;
LABEL_2265:
                        v10 = v2335;
                        *v2335 = v1082;
                        v172 = 6;
                        goto LABEL_1997;
                      }
                    }
                    else if ((_DWORD)a4 == 102)
                    {
                      if ((uint64_t)(v78 - (_QWORD)v447) >= 5
                        && *(_WORD *)(v447 + 1) == 27745
                        && *(_WORD *)(v447 + 3) == 25971)
                      {
                        v12 = v2336;
                        *v2336 = v447 + 5;
                        v1082 = 12;
                        goto LABEL_2265;
                      }
                    }
                    else if ((_DWORD)a4 == 116
                           && (uint64_t)(v78 - (_QWORD)v447) >= 4
                           && *(_WORD *)(v447 + 1) == 30066
                           && v447[3] == 101)
                    {
                      v12 = v2336;
                      *v2336 = v447 + 4;
                      v1082 = 11;
                      goto LABEL_2265;
                    }
                    v1519 = (int)v447;
                    *v2328 = (WTF::AtomStringImpl *)v447;
                    v1520 = (int)v447;
                    if ((unint64_t)v447 < v78)
                    {
                      v1521 = v78 - (_QWORD)v447;
                      v1522 = (_DWORD)v447 + v1521;
                      while (1)
                      {
                        v1523 = *v447;
                        if (v1523 != 36)
                        {
                          v1524 = v1523 != 95 && (v1523 - 48) >= 0xA;
                          if (v1524 && (v1523 | 0x20u) - 97 > 0x19)
                            break;
                        }
                        *v2336 = ++v447;
                        if (!--v1521)
                        {
                          LODWORD(v447) = v1522;
                          break;
                        }
                      }
                      v1520 = (int)v447;
                    }
                    v8 = a1;
                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1520 - v1519) & 0x7FFFFFFF;
                    *(_BYTE *)(a1 + 24) = 5;
                    v172 = 6;
                    goto LABEL_1978;
                  }
                  v626 = v447;
                  if ((unint64_t)v447 < v78)
                  {
                    v626 = v447;
                    if ((_DWORD)a4 == 45)
                    {
                      v626 = v447 + 1;
                      *v12 = v447 + 1;
                    }
                  }
                  if ((unint64_t)v626 < v78)
                  {
                    v627 = *v626;
                    if (v627 == 48)
                    {
                      v629 = v626 + 1;
                      *v12 = v629;
LABEL_1408:
                      if ((unint64_t)v629 >= v78)
                      {
LABEL_1944:
                        if ((unint64_t)v629 >= v78 || (*v629 | 0x20) != 0x65)
                        {
LABEL_1946:
                          *v10 = 6;
                          if (v629 - v447 < 0)
                            goto LABEL_3864;
                          v2340.rlim_cur = 0;
                          fast_float::from_chars_advanced<double,char>(v447, v629, &v2340.rlim_cur, 0x2E00000005);
                          v14.n128_u64[0] = v2340.rlim_cur;
                          goto LABEL_1421;
                        }
                        v803 = v13;
                        v1992 = v629 + 1;
                        *v12 = v629 + 1;
                        if ((unint64_t)(v629 + 1) < v78)
                        {
                          v1993 = *v1992;
                          if (v1993 == 45 || v1993 == 43)
                          {
                            v1992 = v629 + 2;
                            *v2336 = v629 + 2;
                          }
                        }
                        if ((unint64_t)v1992 < v78 && *v1992 - 48 <= 9)
                        {
                          v1994 = v1992 + 1;
                          v12 = v2336;
                          while (1)
                          {
                            v629 = v1994;
                            *v12 = v1994;
                            if ((unint64_t)v1994 >= v78)
                              break;
                            ++v1994;
                            v13 = v803;
                            v11 = v2328;
                            v10 = v2335;
                            v12 = v2336;
                            v8 = a1;
                            if (*v629 - 48 >= 0xA)
                              goto LABEL_1946;
                          }
                          v13 = v803;
                          v11 = v2328;
                          v10 = v2335;
                          v12 = v2336;
                          v8 = a1;
                          goto LABEL_1946;
                        }
                        v2000 = WTF::fastCompactMalloc((WTF *)0x20);
                        v14.n128_u64[0] = 0x5D00000002;
                        *(_QWORD *)v2000 = 0x5D00000002;
                        *(_QWORD *)(v2000 + 8) = "Exponent symbols should be followed by an optional '+' or '-' and then "
                                                 "by at least one number";
                        *(_DWORD *)(v2000 + 16) = 4;
                        v2001 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v2000;
                        if (v2001)
                        {
                          if (*(_DWORD *)v2001 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v2001, v1998, v1999, a4, a5, a6, a7, a8);
                            WTF::fastFree(v2093, v2094, v2095, v2096, v2097, v2098, v2099, v2100);
                          }
                          else
                          {
                            *(_DWORD *)v2001 -= 2;
                          }
                        }
                        v172 = 6;
LABEL_3964:
                        v13 = v803;
LABEL_2619:
                        v11 = v2328;
                        goto LABEL_2185;
                      }
                      v630 = *v629;
                      if (v630 != 46)
                      {
                        if (v630 != 69 && v630 != 101 && v629 - v447 <= 9)
                        {
                          *v10 = 6;
                          v631 = *v447;
                          if (v631 == 45)
                            v632 = v447 + 1;
                          else
                            v632 = v447;
                          if (v632 >= v629)
                          {
                            if (v631 != 45)
                            {
                              v633 = 0;
LABEL_1420:
                              v14.n128_f64[0] = (double)v633;
LABEL_1421:
                              *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                              goto LABEL_1147;
                            }
                          }
                          else
                          {
                            v633 = 0;
                            do
                            {
                              v634 = *v632++;
                              v633 = v634 + 10 * v633 - 48;
                            }
                            while (v632 < v629);
                            if (v631 != 45)
                              goto LABEL_1420;
                            if (v633)
                            {
                              v14.n128_f64[0] = (double)-v633;
                              goto LABEL_1421;
                            }
                          }
                          *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                          goto LABEL_1147;
                        }
                        goto LABEL_1944;
                      }
                      *v12 = v629 + 1;
                      if ((unint64_t)(v629 + 1) < v78 && v629[1] - 48 <= 9)
                      {
                        v892 = v629 + 2;
                        do
                        {
                          v629 = v892;
                          *v12 = v892;
                          if ((unint64_t)v892 >= v78)
                            break;
                          ++v892;
                        }
                        while (*v629 - 48 < 0xA);
                        goto LABEL_1944;
                      }
                      v1985 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1323 = v1985;
                      v14.n128_u64[0] = 0x2200000002;
                      v1986 = "Invalid digits after decimal point";
LABEL_3981:
                      *(_QWORD *)v1985 = v14.n128_u64[0];
                      *(_QWORD *)(v1985 + 8) = v1986;
                      *(_DWORD *)(v1985 + 16) = 4;
LABEL_2824:
                      v1324 = *(WTF::StringImpl **)v2321;
                      *(_QWORD *)v2321 = v1323;
                      if (v1324)
                      {
                        if (*(_DWORD *)v1324 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1324, v1321, v1322, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1530, v1531, v1532, v1533, v1534, v1535, v1536, v1537);
                        }
                        else
                        {
                          *(_DWORD *)v1324 -= 2;
                        }
                      }
                      v172 = 6;
                      goto LABEL_2619;
                    }
                    if ((v627 - 49) <= 8)
                    {
                      v628 = v626 + 1;
                      do
                      {
                        v629 = v628;
                        *v12 = v628;
                        if ((unint64_t)v628 >= v78)
                          break;
                        ++v628;
                      }
                      while (*v629 - 48 < 0xA);
                      goto LABEL_1408;
                    }
                  }
                  v1985 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1323 = v1985;
                  v14.n128_u64[0] = 0xE00000002;
                  v1986 = "Invalid number";
                  goto LABEL_3981;
                }
                if ((_DWORD)a4 != 116
                  || (uint64_t)(v78 - (_QWORD)v79) < 4
                  || *(_WORD *)(v79 + 1) != 30066
                  || v79[3] != 101)
                {
LABEL_1693:
                  *v11 = (WTF::AtomStringImpl *)v79;
                  LODWORD(v788) = (_DWORD)v79;
                  if ((unint64_t)v79 < v78)
                  {
                    v789 = v78 - (_QWORD)v79;
                    v790 = (_DWORD)v79 + v789;
                    v788 = v79;
                    while (1)
                    {
                      v791 = *v788;
                      if (v791 != 36)
                      {
                        v792 = v791 != 95 && (v791 - 48) >= 0xA;
                        if (v792 && (v791 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      *v2336 = ++v788;
                      if (!--v789)
                      {
                        LODWORD(v788) = v790;
                        break;
                      }
                    }
                  }
                  v794 = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v788 - (_DWORD)v79) & 0x7FFFFFFF;
                  *(_DWORD *)(a1 + 28) = v794;
                  *(_BYTE *)(a1 + 24) = 5;
LABEL_1706:
                  if ((v794 & 0x7FFFFFFFu) >= 0xC8)
                    v795 = 200;
                  else
                    v795 = v794 & 0x7FFFFFFF;
                  JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v2340, v794, (uint64_t)v79, v795);
                  if (!v2340.rlim_cur)
                  {
                    v1372 = *(_DWORD *)(a1 + 28);
                    if ((v1372 & 0x7FFFFFFFu) < 0xB)
                      goto LABEL_2937;
                    JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v2344, v1372, (uint64_t)*v2328, 10);
                    v1374 = v2344;
                    v1375 = (WTF::StringImpl *)v2340.rlim_cur;
                    v2340.rlim_cur = (rlim_t)v2344;
                    if (v1375)
                    {
                      if (*(_DWORD *)v1375 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1375, v1373, v796, v797, v798, v799, v800, v801);
                        WTF::fastFree(v1692, v1693, v1694, v1695, v1696, v1697, v1698, v1699);
                        v1374 = (WTF::AtomStringImpl *)v2340.rlim_cur;
                      }
                      else
                      {
                        *(_DWORD *)v1375 -= 2;
                      }
                    }
                    if (!v1374)
                    {
LABEL_2937:
                      v1377 = WTF::fastCompactMalloc((WTF *)0x20);
                      *(_QWORD *)v1377 = 0x1500000002;
                      *(_QWORD *)(v1377 + 8) = "Unexpected identifier";
                      *(_DWORD *)(v1377 + 16) = 4;
                      v1378 = (WTF::StringImpl *)v2340.rlim_cur;
                      v2340.rlim_cur = v1377;
                      if (v1378)
                      {
                        if (*(_DWORD *)v1378 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1378, v1376, v796, v797, v798, v799, v800, v801);
                          WTF::fastFree(v1635, v1636, v1637, v1638, v1639, v1640, v1641, v1642);
                        }
                        else
                        {
                          *(_DWORD *)v1378 -= 2;
                        }
                      }
                    }
                  }
                  WTF::String::operator=((unint64_t *)v13, (WTF::AtomStringImpl *)&v2340, v796, v797, v798, v799, v800, v801);
                  v802 = (WTF::StringImpl *)v2340.rlim_cur;
                  v2340.rlim_cur = 0;
                  if (v802)
                  {
LABEL_1711:
                    if (*(_DWORD *)v802 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v802, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1064, v1065, v1066, v1067, v1068, v1069, v1070, v1071);
                    }
                    else
                    {
                      *(_DWORD *)v802 -= 2;
                    }
                  }
LABEL_1713:
                  v98 = 1;
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
                  goto LABEL_156;
                }
                v709 = v79 + 4;
                *v12 = v709;
                *v10 = 11;
LABEL_1543:
                if ((unint64_t)v709 < v78)
                {
                  v710 = v78 - (_QWORD)v709;
                  while (JSC::tokenTypesOfLatin1Characters[*v709] == 19)
                  {
                    *v12 = ++v709;
                    if (!--v710)
                    {
                      v709 = (unsigned __int8 *)v78;
                      break;
                    }
                  }
                }
                if (v709 == (unsigned __int8 *)v78)
                {
                  *v10 = 14;
                  goto LABEL_1718;
                }
                *v10 = 18;
                a4 = *v709;
                v711 = JSC::tokenTypesOfLatin1Characters[a4];
                if (v711 <= 4)
                {
                  if (v711 == 4)
                  {
                    v712 = *(unsigned __int8 *)(v8 + 40);
                    if ((_DWORD)a4 == 39)
                    {
                      if (!*(_BYTE *)(v8 + 40))
                      {
                        v2290 = WTF::fastCompactMalloc((WTF *)0x20);
                        v14.n128_u64[0] = 0x2900000002;
                        *(_QWORD *)v2290 = 0x2900000002;
                        *(_QWORD *)(v2290 + 8) = "Single quotes (') are not allowed in JSON";
                        *(_DWORD *)(v2290 + 16) = 4;
                        v2291 = *(WTF::StringImpl **)v2321;
                        *(_QWORD *)v2321 = v2290;
                        if (v2291)
                        {
                          if (*(_DWORD *)v2291 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v2291, v2288, v2289, a4, a5, a6, a7, a8);
                            WTF::fastFree(v2296, v2297, v2298, v2299, v2300, v2301, v2302, v2303);
                          }
                          else
                          {
                            *(_DWORD *)v2291 -= 2;
                          }
                        }
                        v172 = 7;
                        goto LABEL_2619;
                      }
                      v713 = (size_t)(v709 + 1);
                      *v2336 = v709 + 1;
                    }
                    else
                    {
                      v713 = (size_t)(v709 + 1);
                      *v12 = v709 + 1;
                      if (!v712)
                      {
                        v714 = v78 - v713;
                        if ((uint64_t)(v78 - v713) < 0)
                          goto LABEL_3864;
                        v715 = (int8x16_t *)&v709[v714 + 1];
                        if (v714 >= 0x10)
                        {
                          v716 = v709 + 16;
                          while (1)
                          {
                            v717 = *(int8x16_t *)(v716 - 15);
                            v718.i64[0] = 0x2222222222222222;
                            v718.i64[1] = 0x2222222222222222;
                            v719 = vceqq_s8(v717, v718);
                            v720.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v720.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v721.i64[0] = 0x2020202020202020;
                            v721.i64[1] = 0x2020202020202020;
                            v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v717, v720), (int8x16_t)vcgtq_u8(v721, (uint8x16_t)v717)), v719);
                            v719.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                            if (v719.i32[0])
                              break;
                            v716 += 16;
                            if (v716 >= (unsigned __int8 *)v715)
                            {
                              if (v716 - 15 >= (unsigned __int8 *)v715)
                                goto LABEL_1974;
                              v722 = (unsigned __int8 *)&v715[-1];
                              v723 = v715[-1];
                              v724.i64[0] = 0x2222222222222222;
                              v724.i64[1] = 0x2222222222222222;
                              v725 = vceqq_s8(v723, v724);
                              v726.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                              v726.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                              v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v723, v726), (int8x16_t)vcgtq_u8(v721, (uint8x16_t)v723)), v725);
                              v725.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                              if (!v725.i32[0])
                                goto LABEL_1974;
LABEL_1973:
                              v14 = (__n128)vornq_s8((int8x16_t)xmmword_19911D0A0, (int8x16_t)v14);
                              v14.n128_u8[0] = vminvq_u8((uint8x16_t)v14);
                              v715 = (int8x16_t *)&v722[v14.n128_u32[0]];
                              goto LABEL_1974;
                            }
                          }
                          v722 = v716 - 15;
                          goto LABEL_1973;
                        }
                        v1441 = (int8x16_t *)(v709 + 1);
                        if (v78 == v713)
                          goto LABEL_1974;
                        do
                        {
                          if (!JSC::safeStringLatin1CharactersInStrictJSON[v1441->u8[0]])
                          {
                            v715 = v1441;
                            break;
                          }
                          v1441 = (int8x16_t *)((char *)v1441 + 1);
                          --v714;
                        }
                        while (v714);
LABEL_1974:
                        *v2336 = (unsigned __int8 *)v715;
                        goto LABEL_1975;
                      }
                    }
                    if (v713 >= v78)
                    {
                      v715 = (int8x16_t *)v713;
                    }
                    else
                    {
                      v715 = (int8x16_t *)v713;
                      while (1)
                      {
                        v2163 = v715->u8[0];
                        v2164 = v2163 < 0x20 || v2163 == 92;
                        v2165 = v2164 || v2163 == (_DWORD)a4;
                        v2166 = v2165;
                        if (v2163 != 9 && v2166)
                          break;
                        v715 = (int8x16_t *)((char *)v715 + 1);
                        *v2336 = (unsigned __int8 *)v715;
                        if (v715 == (int8x16_t *)&v709[v78 - v713 + 1])
                        {
                          v715 = (int8x16_t *)&v709[v78 - v713 + 1];
                          break;
                        }
                      }
                    }
LABEL_1975:
                    if ((unint64_t)v715 >= v78 || v715->u8[0] != (_DWORD)a4)
                    {
                      v10 = v2335;
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v2321, (uint64_t)v2335, v713, a4, a5, a6, a7, a8);
                      v172 = 7;
                      v11 = v2328;
                      v12 = v2336;
                      goto LABEL_1998;
                    }
                    v8 = a1;
                    *(_BYTE *)(a1 + 25) |= 1u;
                    *(_QWORD *)(a1 + 32) = v713;
                    *(_QWORD *)(a1 + 48) = (char *)v715->i64 + 1;
                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v715 - v713) & 0x7FFFFFFF;
                    *(_BYTE *)(a1 + 24) = 4;
                    v172 = 7;
                    goto LABEL_1978;
                  }
                  goto LABEL_1717;
                }
                v803 = v13;
                if (v711 != 6)
                {
                  if (v711 != 5)
                  {
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    if (v711 - 18 < 2)
                    {
                      WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
                      v1703 = v2340.rlim_cur;
                      if (!v2340.rlim_cur)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B05BDCLL);
                      }
                      *(_QWORD *)v2340.rlim_cur = 0x1600000002;
                      *(_QWORD *)(v1703 + 8) = v1703 + 20;
                      *(_DWORD *)(v1703 + 16) = 4;
                      *(_DWORD *)(v1703 + 36) = 656436837;
                      v14 = *(__n128 *)"Unrecognized token '";
                      *(_OWORD *)(v1703 + 20) = *(_OWORD *)"Unrecognized token '";
                      *(_BYTE *)(v1703 + 40) = *v709;
                      *(_BYTE *)(v1703 + 41) = 39;
                      v1704 = *(WTF::StringImpl **)v2321;
                      *(_QWORD *)v2321 = v1703;
                      if (v1704)
                      {
                        if (*(_DWORD *)v1704 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1704, v1701, v1702, a4, a5, a6, a7, a8);
                          WTF::fastFree(v1893, v1894, v1895, v1896, v1897, v1898, v1899, v1900);
                        }
                        else
                        {
                          *(_DWORD *)v1704 -= 2;
                        }
                      }
                      v172 = 7;
                      v11 = v2328;
                      v10 = v2335;
                      v12 = v2336;
                      v8 = a1;
                      goto LABEL_410;
                    }
LABEL_1717:
                    *v10 = v711;
                    *v12 = v709 + 1;
LABEL_1718:
                    v172 = 7;
                    goto LABEL_410;
                  }
                  if ((_DWORD)a4 == 110)
                  {
                    if ((uint64_t)(v78 - (_QWORD)v709) >= 4 && *(_WORD *)(v709 + 1) == 27765 && v709[3] == 108)
                    {
                      v12 = v2336;
                      *v2336 = v709 + 4;
                      v1309 = 13;
LABEL_2755:
                      v10 = v2335;
                      *v2335 = v1309;
                      v172 = 7;
                      goto LABEL_1997;
                    }
                  }
                  else if ((_DWORD)a4 == 102)
                  {
                    if ((uint64_t)(v78 - (_QWORD)v709) >= 5
                      && *(_WORD *)(v709 + 1) == 27745
                      && *(_WORD *)(v709 + 3) == 25971)
                    {
                      v12 = v2336;
                      *v2336 = v709 + 5;
                      v1309 = 12;
                      goto LABEL_2755;
                    }
                  }
                  else if ((_DWORD)a4 == 116
                         && (uint64_t)(v78 - (_QWORD)v709) >= 4
                         && *(_WORD *)(v709 + 1) == 30066
                         && v709[3] == 101)
                  {
                    v12 = v2336;
                    *v2336 = v709 + 4;
                    v1309 = 11;
                    goto LABEL_2755;
                  }
                  v1886 = (int)v709;
                  *v2328 = (WTF::AtomStringImpl *)v709;
                  v1887 = (int)v709;
                  if ((unint64_t)v709 < v78)
                  {
                    v1888 = v78 - (_QWORD)v709;
                    v1889 = (_DWORD)v709 + v1888;
                    while (1)
                    {
                      v1890 = *v709;
                      if (v1890 != 36)
                      {
                        v1891 = v1890 != 95 && (v1890 - 48) >= 0xA;
                        if (v1891 && (v1890 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      *v2336 = ++v709;
                      if (!--v1888)
                      {
                        LODWORD(v709) = v1889;
                        break;
                      }
                    }
                    v1887 = (int)v709;
                  }
                  v8 = a1;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v1887 - v1886) & 0x7FFFFFFF;
                  *(_BYTE *)(a1 + 24) = 5;
                  v172 = 7;
                  goto LABEL_1978;
                }
                v1020 = v709;
                if ((unint64_t)v709 < v78)
                {
                  v1020 = v709;
                  if ((_DWORD)a4 == 45)
                  {
                    v1020 = v709 + 1;
                    *v2336 = v709 + 1;
                  }
                }
                if ((unint64_t)v1020 < v78)
                {
                  v1021 = *v1020;
                  if (v1021 == 48)
                  {
                    v1023 = v1020 + 1;
                    *v2336 = v1023;
LABEL_2170:
                    if ((unint64_t)v1023 < v78)
                    {
                      v1024 = *v1023;
                      if (v1024 == 46)
                      {
                        *v2336 = v1023 + 1;
                        if ((unint64_t)(v1023 + 1) >= v78 || v1023[1] - 48 > 9)
                        {
                          v2111 = WTF::fastCompactMalloc((WTF *)0x20);
                          v2114 = v2111;
                          v14.n128_u64[0] = 0x2200000002;
                          v2115 = "Invalid digits after decimal point";
                          goto LABEL_4222;
                        }
                        v1193 = v1023 + 2;
                        do
                        {
                          v1023 = v1193;
                          *v2336 = v1193;
                          if ((unint64_t)v1193 >= v78)
                            break;
                          ++v1193;
                        }
                        while (*v1023 - 48 < 0xA);
                      }
                      else if (v1024 != 69 && v1024 != 101 && v1023 - v709 <= 9)
                      {
                        *v2335 = 6;
                        v1025 = *v709;
                        if (v1025 == 45)
                          v1026 = v709 + 1;
                        else
                          v1026 = v709;
                        if (v1026 >= v1023)
                        {
                          if (v1025 != 45)
                          {
                            v1027 = 0;
LABEL_2182:
                            v14.n128_f64[0] = (double)v1027;
LABEL_2183:
                            v11 = v2328;
                            *v2328 = (WTF::AtomStringImpl *)v14.n128_u64[0];
LABEL_2184:
                            v172 = 7;
LABEL_2185:
                            v10 = v2335;
                            v12 = v2336;
                            goto LABEL_1998;
                          }
                        }
                        else
                        {
                          v1027 = 0;
                          do
                          {
                            v1028 = *v1026++;
                            v1027 = v1028 + 10 * v1027 - 48;
                          }
                          while (v1026 < v1023);
                          if (v1025 != 45)
                            goto LABEL_2182;
                          if (v1027)
                          {
                            v14.n128_f64[0] = (double)-v1027;
                            goto LABEL_2183;
                          }
                        }
                        v11 = v2328;
                        *v2328 = (WTF::AtomStringImpl *)0x8000000000000000;
                        goto LABEL_2184;
                      }
                    }
                    if ((unint64_t)v1023 >= v78 || (*v1023 | 0x20) != 0x65)
                    {
LABEL_2501:
                      *v2335 = 6;
                      if (v1023 - v709 < 0)
                        goto LABEL_3864;
                      v2340.rlim_cur = 0;
                      fast_float::from_chars_advanced<double,char>(v709, v1023, &v2340.rlim_cur, 0x2E00000005);
                      v14.n128_u64[0] = v2340.rlim_cur;
                      goto LABEL_2183;
                    }
                    v2136 = v1023 + 1;
                    *v2336 = v1023 + 1;
                    if ((unint64_t)(v1023 + 1) < v78)
                    {
                      v2137 = *v2136;
                      if (v2137 == 45 || v2137 == 43)
                      {
                        v2136 = v1023 + 2;
                        *v2336 = v1023 + 2;
                      }
                    }
                    if ((unint64_t)v2136 < v78 && *v2136 - 48 <= 9)
                    {
                      v2138 = v2136 + 1;
                      do
                      {
                        v1023 = v2138;
                        *v2336 = v2138;
                        if ((unint64_t)v2138 >= v78)
                          break;
                        ++v2138;
                      }
                      while (*v1023 - 48 < 0xA);
                      goto LABEL_2501;
                    }
                    v2111 = WTF::fastCompactMalloc((WTF *)0x20);
                    v2114 = v2111;
                    v14.n128_u64[0] = 0x5D00000002;
                    v2115 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4222:
                    *(_QWORD *)v2111 = v14.n128_u64[0];
                    *(_QWORD *)(v2111 + 8) = v2115;
                    *(_DWORD *)(v2111 + 16) = 4;
                    v2116 = *(WTF::StringImpl **)v2321;
                    *(_QWORD *)v2321 = v2114;
                    if (v2116)
                    {
                      if (*(_DWORD *)v2116 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v2116, v2112, v2113, a4, a5, a6, a7, a8);
                        WTF::fastFree(v2167, v2168, v2169, v2170, v2171, v2172, v2173, v2174);
                      }
                      else
                      {
                        *(_DWORD *)v2116 -= 2;
                      }
                    }
                    v172 = 7;
                    goto LABEL_3964;
                  }
                  if ((v1021 - 49) <= 8)
                  {
                    v1022 = v1020 + 1;
                    do
                    {
                      v1023 = v1022;
                      *v2336 = v1022;
                      if ((unint64_t)v1022 >= v78)
                        break;
                      ++v1022;
                    }
                    while (*v1023 - 48 < 0xA);
                    goto LABEL_2170;
                  }
                }
                v2111 = WTF::fastCompactMalloc((WTF *)0x20);
                v2114 = v2111;
                v14.n128_u64[0] = 0xE00000002;
                v2115 = "Invalid number";
                goto LABEL_4222;
              }
              v173 = v79;
              if ((unint64_t)v79 < v78)
              {
                v173 = v79;
                if ((_DWORD)a4 == 45)
                {
                  v173 = v79 + 1;
                  *v12 = v79 + 1;
                }
              }
              if ((unint64_t)v173 < v78)
              {
                v174 = *v173;
                if (v174 == 48)
                {
                  v151 = v173 + 1;
                  *v12 = v151;
LABEL_299:
                  if ((unint64_t)v151 >= v78)
                    goto LABEL_626;
                  v176 = *v151;
                  if (v176 != 46)
                  {
                    if (v176 != 69 && v176 != 101 && v151 - v79 <= 9)
                    {
                      *v10 = 6;
                      v177 = *v79;
                      if (v177 == 45)
                        v178 = v79 + 1;
                      else
                        v178 = v79;
                      if (v178 >= v151)
                      {
                        if (v177 != 45)
                        {
                          v179 = 0;
LABEL_311:
                          v14.n128_f64[0] = (double)v179;
                          goto LABEL_312;
                        }
                      }
                      else
                      {
                        v179 = 0;
                        do
                        {
                          v180 = *v178++;
                          v179 = v180 + 10 * v179 - 48;
                        }
                        while (v178 < v151);
                        if (v177 != 45)
                          goto LABEL_311;
                        if (v179)
                        {
                          v14.n128_f64[0] = (double)-v179;
                          goto LABEL_312;
                        }
                      }
                      *v11 = (WTF::AtomStringImpl *)0x8000000000000000;
                      goto LABEL_313;
                    }
LABEL_626:
                    if ((unint64_t)v151 < v78 && (*v151 | 0x20) == 0x65)
                    {
                      v1381 = v13;
                      v1382 = v151 + 1;
                      *v12 = v151 + 1;
                      if ((unint64_t)(v151 + 1) < v78)
                      {
                        v1383 = *v1382;
                        if (v1383 == 45 || v1383 == 43)
                        {
                          v1382 = v151 + 2;
                          *v2336 = v151 + 2;
                        }
                      }
                      if ((unint64_t)v1382 >= v78 || *v1382 - 48 > 9)
                      {
                        v1396 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1397 = v1396;
                        v14.n128_u64[0] = 0x5D00000002;
                        v1398 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                        goto LABEL_3016;
                      }
                      v1384 = v1382 + 1;
                      v12 = v2336;
                      while (1)
                      {
                        v151 = v1384;
                        *v12 = v1384;
                        if ((unint64_t)v1384 >= v78)
                          break;
                        ++v1384;
                        v13 = v1381;
                        v11 = v2328;
                        v10 = v2335;
                        v12 = v2336;
                        v8 = a1;
                        if (*v151 - 48 >= 0xA)
                          goto LABEL_628;
                      }
                      v13 = v1381;
                      v11 = v2328;
                      v10 = v2335;
                      v12 = v2336;
                      v8 = a1;
                    }
LABEL_628:
                    *v10 = 6;
                    if (v151 - v79 < 0)
                      goto LABEL_3864;
                    v2340.rlim_cur = 0;
                    fast_float::from_chars_advanced<double,char>(v79, v151, &v2340.rlim_cur, 0x2E00000005);
                    v14.n128_u64[0] = v2340.rlim_cur;
LABEL_312:
                    *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                    goto LABEL_313;
                  }
                  *v12 = v151 + 1;
                  if ((unint64_t)(v151 + 1) < v78 && v151[1] - 48 <= 9)
                  {
                    v152 = v151 + 2;
                    do
                    {
                      v151 = v152;
                      *v12 = v152;
                      if ((unint64_t)v152 >= v78)
                        break;
                      ++v152;
                    }
                    while (*v151 - 48 < 0xA);
                    goto LABEL_626;
                  }
                  v1336 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1337 = v1336;
                  v14.n128_u64[0] = 0x2200000002;
                  v1338 = "Invalid digits after decimal point";
LABEL_2871:
                  *(_QWORD *)v1336 = v14.n128_u64[0];
                  *(_QWORD *)(v1336 + 8) = v1338;
                  *(_DWORD *)(v1336 + 16) = 4;
                  v1339 = *(WTF::StringImpl **)v2321;
                  *(_QWORD *)v2321 = v1337;
                  if (v1339)
                  {
                    if (*(_DWORD *)v1339 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1339, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1499, v1500, v1501, v1502, v1503, v1504, v1505, v1506);
                    }
                    else
                    {
                      *(_DWORD *)v1339 -= 2;
                    }
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                  }
                  goto LABEL_313;
                }
                if ((v174 - 49) <= 8)
                {
                  v175 = v173 + 1;
                  do
                  {
                    v151 = v175;
                    *v12 = v175;
                    if ((unint64_t)v175 >= v78)
                      break;
                    ++v175;
                  }
                  while (*v151 - 48 < 0xA);
                  goto LABEL_299;
                }
              }
              v1336 = WTF::fastCompactMalloc((WTF *)0x20);
              v1337 = v1336;
              v14.n128_u64[0] = 0xE00000002;
              v1338 = "Invalid number";
              goto LABEL_2871;
            }
LABEL_151:
            v102 = WTF::fastCompactMalloc((WTF *)0x20);
            v14.n128_u64[0] = 0x3700000002;
            *(_QWORD *)v102 = 0x3700000002;
            v103 = "Expected ':' before value in object property definition";
LABEL_152:
            *(_QWORD *)(v102 + 8) = v103;
            *(_DWORD *)(v102 + 16) = 4;
            v104 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v102;
            if (!v104)
              goto LABEL_155;
            if (*(_DWORD *)v104 != 2)
            {
              *(_DWORD *)v104 -= 2;
LABEL_155:
              v98 = 1;
              goto LABEL_156;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v104, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            v157 = *(_QWORD *)(StatusReg + 752);
            if (v157)
            {
              if (!(v104 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v104 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v104)) & 1) != 0)
              {
LABEL_265:
                v158 = *(unsigned int *)(v157 + 8000);
                if (v158 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v157, v104, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_QWORD *)(v157 + 8 * v158) = v104 | 0x5000000000000;
                  *(_DWORD *)(v157 + 8000) = v158 + 1;
                }
                goto LABEL_155;
              }
              if (v104 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v104 >> 24)
              {
                a4 = 0;
              }
              else
              {
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v104 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v104) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 == 1)
                  goto LABEL_265;
              }
              v98 = 1;
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v157, v104, 1, a4, a5, a6, a7, a8);
            }
            else
            {
              v98 = 1;
              pas_try_deallocate_slow_no_cache(v104, (uint64_t)&bmalloc_heap_config, 1);
            }
LABEL_156:
            v105 = v2338;
            v2338 = 0;
            if (!v105)
              continue;
            if (*(_DWORD *)v105 != 2)
            {
              *(_DWORD *)v105 -= 2;
              continue;
            }
            WTF::StringImpl::~StringImpl(v105, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            v120 = *(_QWORD *)(StatusReg + 752);
            if (v120)
            {
              if ((unint64_t)v105 >> 43
                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                     + (((unint64_t)v105 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v105)) & 1) == 0)
              {
                if ((unint64_t)v105 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v105 >> 24)
                {
                  a4 = 0;
LABEL_1160:
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v120, (unint64_t)v105, 1, a4, a5, a6, a7, a8);
                  continue;
                }
                a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                + (((((unint64_t)v105 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v105) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)a4 != 1)
                  goto LABEL_1160;
              }
              v121 = *(unsigned int *)(v120 + 8000);
              if (v121 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v120, (uint64_t)v105, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v120 + 8 * v121) = (unint64_t)v105 | 0x5000000000000;
                *(_DWORD *)(v120 + 8000) = v121 + 1;
              }
            }
            else
            {
              pas_try_deallocate_slow_no_cache((unint64_t)v105, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          while (!v98);
          if (v98 == 14)
            break;
          if (v98 != 12)
          {
            if (v98 != 5)
              return 0;
LABEL_947:
            v423 = JSC::constructEmptyArray(*(_QWORD *)v8, 0, 0, 0, a5, a6, a7, a8, v14);
            if (*((_DWORD *)v2333 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v2333, a2, a3, a4, a5, a6, a7, a8))
              return 0;
            v18 = *(unsigned int *)(v8 + 120);
            if ((_DWORD)v18 == *(_DWORD *)(v8 + 124))
            {
              v20 = (int *)v2330;
              if (!(v18 >> 30)
                && !JSC::MarkedVectorBase::expandCapacity(v2330, 2 * (int)v18))
              {
                LODWORD(v18) = *(_DWORD *)v2330;
                goto LABEL_713;
              }
              *(_BYTE *)(v8 + 112) = 1;
            }
            else
            {
              v19 = *(_QWORD *)(v8 + 128);
              v20 = (int *)v2330;
              if (v19 == v8 + 144 || !v19)
              {
                *(_QWORD *)(v19 + 8 * v18) = v423;
                *(_DWORD *)v2330 = v18 + 1;
                goto LABEL_12;
              }
LABEL_713:
              *(_QWORD *)(*(_QWORD *)(v8 + 128) + 8 * v18) = v423;
              *(_DWORD *)(v8 + 120) = v18 + 1;
              if (!*(_QWORD *)(v8 + 136) && (v423 & 0xFFFE000000000002) == 0 && v423)
              {
                v615 = (_QWORD *)(v423 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v423 & 8) != 0)
                  v615 = (_QWORD *)(v423 - 16);
                v616 = (uint64_t *)(*v615 + 560);
                *(_QWORD *)(v8 + 136) = v616;
                v2344 = (WTF::AtomStringImpl *)v20;
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v616, (uint64_t *)&v2344, a4, a5, a6, a7, a8, (uint64_t)&v2340);
              }
LABEL_12:
              if (!*(_BYTE *)(v8 + 112))
              {
LABEL_13:
                v17 = *v10;
                goto LABEL_14;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x198B00238);
          }
        }
        if (*v10 != 3)
          goto LABEL_831;
        v319 = *(unsigned __int8 **)(v8 + 48);
        v318 = *(_QWORD *)(v8 + 56);
        if ((unint64_t)v319 < v318)
        {
          v335 = v318 - (_QWORD)v319;
          while (JSC::tokenTypesOfLatin1Characters[*v319] == 19)
          {
            *v12 = ++v319;
            if (!--v335)
            {
              v319 = (unsigned __int8 *)v318;
              break;
            }
          }
        }
        if (v319 == (unsigned __int8 *)v318)
        {
LABEL_1423:
          v488 = 14;
          goto LABEL_1183;
        }
        *v10 = 18;
        a4 = *v319;
        v321 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v321 > 4)
        {
          if (v321 != 6)
          {
            if (v321 != 5)
            {
              if (v321 - 18 >= 2)
                goto LABEL_738;
              v393 = v13;
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v2340);
              v395 = v2340.rlim_cur;
              if (!v2340.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B0622CLL);
              }
              *(_QWORD *)v2340.rlim_cur = 0x1600000002;
              *(_QWORD *)(v395 + 8) = v395 + 20;
              *(_DWORD *)(v395 + 16) = 4;
              *(_DWORD *)(v395 + 36) = 656436837;
              v14 = *(__n128 *)"Unrecognized token '";
              *(_OWORD *)(v395 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v395 + 40) = *v319;
              *(_BYTE *)(v395 + 41) = 39;
              goto LABEL_844;
            }
            if ((_DWORD)a4 == 110)
            {
              if ((uint64_t)(v318 - (_QWORD)v319) < 4 || *(_WORD *)(v319 + 1) != 27765 || v319[3] != 108)
                goto LABEL_2270;
              goto LABEL_1182;
            }
            if ((_DWORD)a4 == 102)
            {
              if ((uint64_t)(v318 - (_QWORD)v319) < 5 || *(_WORD *)(v319 + 1) != 27745 || *(_WORD *)(v319 + 3) != 25971)
                goto LABEL_2270;
LABEL_1438:
              *v12 = v319 + 5;
              v488 = 12;
              goto LABEL_1183;
            }
            if ((_DWORD)a4 != 116
              || (uint64_t)(v318 - (_QWORD)v319) < 4
              || *(_WORD *)(v319 + 1) != 30066
              || v319[3] != 101)
            {
LABEL_2270:
              v1083 = (int)v319;
              *v2328 = (WTF::AtomStringImpl *)v319;
              v1084 = (int)v319;
              if ((unint64_t)v319 < v318)
              {
                v1085 = v318 - (_QWORD)v319;
                v1086 = (_DWORD)v319 + v1085;
                while (1)
                {
                  v1087 = *v319;
                  if (v1087 != 36)
                  {
                    v1088 = v1087 != 95 && (v1087 - 48) >= 0xA;
                    if (v1088 && (v1087 | 0x20u) - 97 > 0x19)
                      break;
                  }
                  *v2336 = ++v319;
                  if (!--v1085)
                    goto LABEL_2380;
                }
LABEL_2381:
                v1084 = (int)v319;
                goto LABEL_2382;
              }
              goto LABEL_2382;
            }
            goto LABEL_2205;
          }
          v421 = v319;
          if ((unint64_t)v319 < v318)
          {
            v421 = v319;
            if ((_DWORD)a4 == 45)
            {
              v421 = v319 + 1;
              *v12 = v319 + 1;
            }
          }
          if ((unint64_t)v421 < v318)
          {
            v422 = *v421;
            if (v422 == 48)
            {
              v342 = v421 + 1;
              *v12 = v342;
LABEL_794:
              if ((unint64_t)v342 >= v318)
                goto LABEL_1096;
              v368 = *v342;
              if (v368 != 46)
              {
                if (v368 != 69 && v368 != 101 && v342 - v319 <= 9)
                {
                  *v10 = 6;
                  v369 = *v319;
                  if (v369 == 45)
                    v370 = v319 + 1;
                  else
                    v370 = v319;
                  if (v370 < v342)
                  {
                    v361 = 0;
                    do
                    {
                      v371 = *v370++;
                      v361 = v371 + 10 * v361 - 48;
                    }
                    while (v370 < v342);
LABEL_805:
                    if (v369 != 45)
                    {
LABEL_806:
                      v14.n128_f64[0] = (double)v361;
LABEL_807:
                      *v11 = (WTF::AtomStringImpl *)v14.n128_u64[0];
                      goto LABEL_739;
                    }
                    if (v361)
                    {
                      v14.n128_f64[0] = (double)-v361;
                      goto LABEL_807;
                    }
                    goto LABEL_1595;
                  }
                  goto LABEL_1131;
                }
LABEL_1096:
                if ((unint64_t)v342 >= v318 || (*v342 | 0x20) != 0x65)
                  goto LABEL_1140;
                v393 = v13;
                v483 = v342 + 1;
                *v12 = v342 + 1;
                if ((unint64_t)(v342 + 1) < v318)
                {
                  v484 = *v483;
                  if (v484 == 45 || v484 == 43)
                  {
                    v483 = v342 + 2;
                    *v2336 = v342 + 2;
                  }
                }
                if ((unint64_t)v483 < v318 && *v483 - 48 <= 9)
                {
                  v485 = v483 + 1;
                  v12 = v2336;
                  while (1)
                  {
                    v342 = v485;
                    *v12 = v485;
                    if ((unint64_t)v485 >= v318)
                      break;
                    ++v485;
                    v13 = v393;
                    v11 = v2328;
                    v10 = v2335;
                    v12 = v2336;
                    v8 = a1;
                    if (*v342 - 48 >= 0xA)
                      goto LABEL_1140;
                  }
LABEL_3754:
                  v13 = v393;
                  v11 = v2328;
                  v10 = v2335;
                  v12 = v2336;
                  v8 = a1;
LABEL_1140:
                  *v10 = 6;
                  if (v342 - v319 < 0)
                    goto LABEL_3864;
                  v2340.rlim_cur = 0;
                  fast_float::from_chars_advanced<double,char>(v319, v342, &v2340.rlim_cur, 0x2E00000005);
                  v14.n128_u64[0] = v2340.rlim_cur;
                  goto LABEL_807;
                }
                goto LABEL_3504;
              }
              *v12 = v342 + 1;
              if ((unint64_t)(v342 + 1) < v318 && v342[1] - 48 <= 9)
              {
                v482 = v342 + 2;
                do
                {
                  v342 = v482;
                  *v12 = v482;
                  if ((unint64_t)v482 >= v318)
                    break;
                  ++v482;
                }
                while (*v342 - 48 < 0xA);
                goto LABEL_1096;
              }
              goto LABEL_3381;
            }
            if ((v422 - 49) <= 8)
            {
              v367 = v421 + 1;
              do
              {
                v342 = v367;
                *v12 = v367;
                if ((unint64_t)v367 >= v318)
                  break;
                ++v367;
              }
              while (*v342 - 48 < 0xA);
              goto LABEL_794;
            }
          }
LABEL_3326:
          v1614 = WTF::fastCompactMalloc((WTF *)0x20);
          v1616 = v1614;
          v14.n128_u64[0] = 0xE00000002;
          v1617 = "Invalid number";
LABEL_3327:
          *(_QWORD *)v1614 = v14.n128_u64[0];
          *(_QWORD *)(v1614 + 8) = v1617;
          *(_DWORD *)(v1614 + 16) = 4;
          v1618 = *(WTF::StringImpl **)v2321;
          *(_QWORD *)v2321 = v1616;
          if (!v1618)
            goto LABEL_739;
          if (*(_DWORD *)v1618 == 2)
          {
            WTF::StringImpl::~StringImpl(v1618, (WTF::AtomStringImpl *)a2, v1615, a4, a5, a6, a7, a8);
            WTF::fastFree(v1742, v1743, v1744, v1745, v1746, v1747, v1748, v1749);
          }
          else
          {
            *(_DWORD *)v1618 -= 2;
          }
          v11 = v2328;
          v10 = v2335;
          v12 = v2336;
LABEL_2206:
          v8 = a1;
          goto LABEL_739;
        }
        if (v321 != 4)
        {
LABEL_738:
          *v10 = v321;
          *v12 = v319 + 1;
          goto LABEL_739;
        }
        v402 = *(unsigned __int8 *)(v8 + 40);
        if ((_DWORD)a4 != 39)
        {
          v323 = (size_t)(v319 + 1);
          *v12 = v319 + 1;
          if (!v402)
          {
            v403 = v318 - v323;
            if ((uint64_t)(v318 - v323) < 0)
              goto LABEL_3864;
            v330 = (int8x16_t *)&v319[v403 + 1];
            if (v403 >= 0x10)
            {
              v357 = v319 + 16;
              while (1)
              {
                v404 = *(int8x16_t *)(v357 - 15);
                v405.i64[0] = 0x2222222222222222;
                v405.i64[1] = 0x2222222222222222;
                v406 = vceqq_s8(v404, v405);
                v407.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v407.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v356.i64[0] = 0x2020202020202020;
                v356.i64[1] = 0x2020202020202020;
                v14 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v404, v407), (int8x16_t)vcgtq_u8(v356, (uint8x16_t)v404)), v406);
                v406.i8[0] = vmaxvq_u8((uint8x16_t)v14);
                if (v406.i32[0])
                  goto LABEL_767;
                v357 += 16;
                if (v357 >= (unsigned __int8 *)v330)
                  goto LABEL_880;
              }
            }
            v703 = (int8x16_t *)(v319 + 1);
            if (v318 != v323)
            {
              while (JSC::safeStringLatin1CharactersInStrictJSON[v703->u8[0]])
              {
                v703 = (int8x16_t *)((char *)v703 + 1);
                if (!--v403)
                  goto LABEL_769;
              }
              goto LABEL_1630;
            }
            goto LABEL_769;
          }
LABEL_3698:
          if (v323 < v318)
          {
            v1769 = (uint64_t)&v319[v318 - v323 + 1];
            v330 = (int8x16_t *)v323;
            while (1)
            {
              v338 = v330->u8[0];
              v339 = v338 < 0x20 || v338 == 92;
              v340 = v339 || v338 == (_DWORD)a4;
              v341 = v340;
              if (v338 != 9 && v341)
                goto LABEL_770;
              v330 = (int8x16_t *)((char *)v330 + 1);
              *v12 = (unsigned __int8 *)v330;
              if (v330 == (int8x16_t *)v1769)
                goto LABEL_3534;
            }
          }
LABEL_3823:
          v330 = (int8x16_t *)v323;
          goto LABEL_770;
        }
        v393 = v13;
        if (*(_BYTE *)(v8 + 40))
        {
          v323 = (size_t)(v319 + 1);
          v10 = v2335;
          v12 = v2336;
          *v2336 = v319 + 1;
          v11 = v2328;
          v8 = a1;
          goto LABEL_3698;
        }
LABEL_4304:
        v1709 = WTF::fastCompactMalloc((WTF *)0x20);
        v395 = v1709;
        v14.n128_u64[0] = 0x2900000002;
        v1710 = "Single quotes (') are not allowed in JSON";
LABEL_3505:
        *(_QWORD *)v1709 = v14.n128_u64[0];
        *(_QWORD *)(v1709 + 8) = v1710;
        *(_DWORD *)(v1709 + 16) = 4;
LABEL_844:
        v396 = *(WTF::StringImpl **)v2321;
        *(_QWORD *)v2321 = v395;
        v13 = v393;
        v11 = v2328;
        v10 = v2335;
        v12 = v2336;
        v8 = a1;
        if (v396)
        {
          if (*(_DWORD *)v396 == 2)
          {
            WTF::StringImpl::~StringImpl(v396, (WTF::AtomStringImpl *)a2, v394, a4, a5, a6, a7, a8);
            WTF::fastFree(v1175, v1176, v1177, v1178, v1179, v1180, v1181, v1182);
          }
          else
          {
            *(_DWORD *)v396 -= 2;
          }
          v13 = v393;
          v11 = v2328;
          v10 = v2335;
          v12 = v2336;
          v8 = a1;
        }
LABEL_739:
        v9 = (unint64_t)v2339;
LABEL_740:
        v344 = *(unsigned int *)(v8 + 220);
        if ((_DWORD)v344)
        {
          a3 = *(unsigned __int8 *)(v344 + *(_QWORD *)(v8 + 208) - 1);
          *(_DWORD *)(v8 + 220) = v344 - 1;
          continue;
        }
        return v9;
      case 7:
        goto LABEL_13;
      default:
        __break(0xC471u);
        JUMPOUT(0x198B011E0);
    }
  }
}

BOOL JSC::LiteralParser<unsigned char>::tryJSONPParse(uint64_t a1, WTF::AtomStringImpl *a2, size_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int8x16_t *v22;
  unsigned __int8 *v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unsigned __int8 *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  _BOOL8 result;
  uint8x16_t v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  double v47;
  unsigned __int8 *v48;
  char v49;
  int8x16_t *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  WTF::StringImpl *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v63;
  _DWORD *v64;
  char *v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  int8x16_t *v71;
  unsigned __int8 *v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  int8x16_t *v85;
  BOOL v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int8x16_t *v90;
  unsigned __int8 *v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  uint8x16_t v96;
  int8x16_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::AtomStringImpl *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint8x16_t v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  WTF *v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t **v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  int v139;
  int v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  _QWORD *v145;
  int v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  unint64_t v189;
  unsigned __int8 *v190;
  BOOL v191;
  int v192;
  unint64_t v193;
  unsigned __int8 *v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  uint8x16_t v199;
  int8x16_t v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  unsigned int v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  int v207;
  unint64_t v208;
  unsigned __int8 *v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  uint8x16_t v214;
  int8x16_t v215;
  unsigned __int8 *v216;
  uint8x16_t v217;
  char v218;
  WTF **v219;
  WTF *v220;
  WTF *v221;
  unsigned int v222;
  unsigned __int8 *v223;
  int v224;
  unsigned __int8 *v225;
  int v226;
  int v227;
  unsigned __int8 *v228;
  int v229;
  int v230;
  double v231;
  unsigned __int8 *v232;
  uint8x16_t v233;
  char v234;
  unsigned int v235;
  BOOL v236;
  BOOL v237;
  BOOL v238;
  unsigned __int8 *v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  unsigned __int8 *v245;
  unint64_t v246;
  unsigned __int8 *v247;
  char v248;
  unsigned __int8 *v249;
  int v250;
  unsigned __int8 *v251;
  int v252;
  int v253;
  unsigned __int8 *v254;
  int v255;
  int v256;
  double v257;
  unsigned int v258;
  BOOL v259;
  BOOL v260;
  BOOL v261;
  unsigned __int8 *v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  int v266;
  unsigned __int8 *v267;
  int v268;
  int v269;
  unsigned __int8 *v270;
  int v271;
  double v272;
  uint64_t v273;
  WTF *v274;
  uint64_t **v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int v282;
  int v283;
  unint64_t *v284;
  unint64_t v285;
  unsigned int v286;
  unsigned __int8 *v287;
  uint8x16_t v288;
  unsigned int v289;
  BOOL v290;
  BOOL v291;
  BOOL v292;
  int8x16_t *v293;
  unsigned __int8 *v294;
  WTF::AtomStringImpl *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WTF *v302;
  WTF::StringImpl *v303;
  BOOL v304;
  int v305;
  unint64_t v306;
  unsigned __int8 *v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  uint8x16_t v312;
  int8x16_t v313;
  unsigned __int8 *v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  char v319;
  unsigned __int8 *v320;
  int v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  unint64_t v324;
  unsigned __int8 *v325;
  uint8x16_t v326;
  char v327;
  int v328;
  int v329;
  unint64_t v330;
  int v331;
  int v332;
  BOOL v333;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  BOOL v343;
  int v344;
  unint64_t v345;
  unsigned __int8 *v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  uint8x16_t v351;
  int8x16_t v352;
  unsigned __int8 *v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  char v358;
  unsigned __int8 *v359;
  int v360;
  unsigned __int8 *v361;
  unsigned __int8 *v362;
  int v363;
  int v364;
  unsigned __int8 *v365;
  int v366;
  int v367;
  double v368;
  uint64_t v369;
  WTF *v370;
  char *v371;
  _BYTE *v372;
  int v373;
  BOOL v374;
  int v375;
  unint64_t v376;
  int8x16_t *v377;
  unsigned __int8 *v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  uint8x16_t v383;
  int8x16_t v384;
  unsigned __int8 *v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  char v390;
  char v391;
  int v392;
  unsigned __int8 *v393;
  int v394;
  unsigned __int8 *v395;
  int8x16_t *v396;
  WTF *v397;
  unsigned __int8 *v398;
  unsigned __int8 *v399;
  unsigned __int8 *v400;
  unint64_t v401;
  unsigned __int8 *v402;
  int8x16_t *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  unint64_t v406;
  unsigned __int8 *v407;
  uint8x16_t v408;
  double v409;
  int8x16_t *v410;
  uint8x16_t v411;
  char v412;
  WTF::AtomStringImpl *v413;
  unsigned int v414;
  WTF *v415;
  WTF::StringImpl *v416;
  int v417;
  char v418;
  unsigned __int8 *v419;
  int v420;
  unsigned __int8 *v421;
  unsigned __int8 *v422;
  int v423;
  int v424;
  unsigned __int8 *v425;
  int v426;
  int v427;
  BOOL v428;
  unsigned int v429;
  int v430;
  unint64_t v431;
  unsigned __int8 *v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  uint8x16_t v437;
  int8x16_t v438;
  unsigned __int8 *v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  char v444;
  WTF *v445;
  WTF::StringImpl *v446;
  int8x16_t *v447;
  char v448;
  unsigned __int8 *v449;
  int v450;
  unsigned __int8 *v451;
  unsigned __int8 *v452;
  int v453;
  int v454;
  unsigned __int8 *v455;
  int v456;
  int v457;
  double v458;
  WTF::AtomStringImpl *v459;
  unsigned int v460;
  WTF::AtomStringImpl *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  WTF *v468;
  WTF::StringImpl *v469;
  int v470;
  uint64_t v471;
  int v472;
  char *v473;
  int v474;
  WTF *v475;
  WTF::StringImpl *v476;
  uint64_t v477;
  BOOL v478;
  int v479;
  unint64_t v480;
  int8x16_t *v481;
  unsigned __int8 *v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  uint8x16_t v487;
  int8x16_t v488;
  unsigned __int8 *v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  unint64_t v496;
  unsigned __int8 *v497;
  WTF::StringImpl *v498;
  char *v499;
  int v500;
  unsigned __int8 *v501;
  unsigned __int8 *v502;
  unint64_t v503;
  unsigned __int8 *v504;
  WTF::StringImpl *v505;
  uint8x16_t v506;
  uint64_t v507;
  uint64_t v508;
  const char *v509;
  uint8x16_t v510;
  int8x16_t *v511;
  unsigned __int8 *v512;
  int v513;
  unsigned __int8 *v514;
  int v515;
  int v516;
  unint64_t v517;
  int v518;
  int v519;
  BOOL v520;
  char v522;
  unsigned __int8 *v523;
  int v524;
  unsigned __int8 *v525;
  unsigned __int8 *v526;
  int v527;
  int v528;
  unsigned __int8 *v529;
  int v530;
  int v531;
  double v532;
  unint64_t v533;
  void *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unsigned __int8 *v541;
  char v542;
  unsigned __int8 *v543;
  int v544;
  unsigned __int8 *v545;
  int v546;
  unsigned __int8 *v547;
  int v548;
  unint64_t v549;
  void *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  void *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  WTF::StringImpl *v565;
  char *v566;
  int v567;
  unsigned int v568;
  BOOL v569;
  BOOL v570;
  BOOL v571;
  unsigned __int8 *v572;
  unint64_t v573;
  void *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  int v582;
  unint64_t v583;
  int v584;
  int v585;
  BOOL v586;
  unint64_t v588;
  void *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  unint64_t v597;
  int v598;
  int v599;
  BOOL v600;
  int v602;
  unint64_t v603;
  int v604;
  int v605;
  BOOL v606;
  unint64_t v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  WTF::AtomStringImpl *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  unint64_t v623;
  void *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  WTF *v631;
  WTF::StringImpl *v632;
  char v633;
  unsigned __int8 *v634;
  unsigned __int8 *v635;
  unsigned __int8 *v636;
  int v637;
  unsigned __int8 *v638;
  int8x16_t *v639;
  int v640;
  int v641;
  unint64_t v642;
  int v643;
  int v644;
  BOOL v645;
  unint64_t v647;
  void *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  int8x16_t *v655;
  _QWORD *v656;
  uint64_t v657;
  WTF *v658;
  WTF::StringImpl *v659;
  int8x16_t *v660;
  int8x16_t *v661;
  uint64_t v662;
  uint64_t v663;
  const char *v664;
  int v665;
  int v666;
  unint64_t v667;
  int v668;
  int v669;
  BOOL v670;
  unsigned __int8 *v672;
  int v673;
  unsigned __int8 *v674;
  uint64_t v675;
  uint64_t v676;
  const char *v677;
  uint64_t v678;
  uint64_t v679;
  const char *v680;
  unsigned __int8 *v681;
  int v682;
  unsigned __int8 *v683;
  unsigned __int8 *v684;
  int v685;
  unsigned __int8 *v686;
  _QWORD *v687;
  uint64_t v688;
  WTF *v689;
  WTF::StringImpl *v690;
  int v691;
  int v692;
  unint64_t v693;
  int v694;
  int v695;
  BOOL v696;
  unint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int8x16_t v709;
  unint64_t v710;
  int v711;
  BOOL v712;
  int8x16_t v714;
  int8x16_t v715;
  int8x16_t v716;
  int8x16_t v717;
  uint64_t v718;
  uint64_t v719;
  const char *v720;
  int8x16_t v721;
  int8x16_t v722;
  int8x16_t v723;
  int8x16_t v724;
  int v725;
  int v726;
  unint64_t v727;
  int v728;
  int v729;
  BOOL v730;
  unint64_t v732;
  void *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unsigned __int8 *v740;
  int v741;
  unsigned __int8 *v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int8x16_t v746;
  unsigned __int8 *v747;
  int v748;
  unsigned __int8 *v749;
  uint64_t v750;
  uint64_t v751;
  const char *v752;
  unsigned __int8 *v753;
  int v754;
  unsigned __int8 *v755;
  unsigned int v756;
  BOOL v757;
  BOOL v758;
  BOOL v759;
  unsigned int v760;
  BOOL v761;
  BOOL v762;
  BOOL v763;
  uint64_t v764;
  const char *v765;
  unsigned __int8 *v766;
  int v767;
  unsigned __int8 *v768;
  unsigned int v769;
  BOOL v770;
  BOOL v771;
  BOOL v772;
  unsigned int v773;
  BOOL v774;
  BOOL v775;
  BOOL v776;
  int8x16_t v777;
  uint64_t v778;
  int v779;
  WTF *v780;
  uint64_t v781;
  uint64_t *v782;
  WTF::StringImpl *v783;
  int v784;
  char v785;
  WTF::StringImpl *v786;
  WTF *v787;
  WTF *v788;

  v8 = a3;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v13 = (unsigned __int8 **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  if (v12 < v14)
  {
    v15 = v14 - v12;
    while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
    {
      *v13 = (unsigned __int8 *)++v12;
      if (!--v15)
      {
        v12 = v14;
        break;
      }
    }
  }
  v16 = (char *)(a1 + 24);
  if (v12 == v14)
  {
    result = 0;
    v49 = 14;
    goto LABEL_70;
  }
  v17 = (WTF::StringImpl **)(a1 + 16);
  *v16 = 18;
  v18 = *(unsigned __int8 *)v12;
  v19 = JSC::tokenTypesOfLatin1Characters[v18];
  if (v19 > 4)
  {
    if (v19 != 6)
    {
      if (v19 != 5)
      {
        if (v19 - 18 < 2)
        {
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
          v302 = v780;
          if (!v780)
          {
            __break(0xC471u);
            JUMPOUT(0x198B0CEF8);
          }
          *(_QWORD *)v780 = 0x1600000002;
          *((_QWORD *)v302 + 1) = (char *)v302 + 20;
          *((_DWORD *)v302 + 4) = 4;
          *((_DWORD *)v302 + 9) = 656436837;
          *(_OWORD *)((char *)v302 + 20) = *(_OWORD *)"Unrecognized token '";
          *((_BYTE *)v302 + 40) = *(_BYTE *)v12;
          *((_BYTE *)v302 + 41) = 39;
          v303 = *v17;
          *v17 = v302;
          if (!v303)
            return 0;
          goto LABEL_469;
        }
LABEL_22:
        result = 0;
        *v16 = v19;
        *v13 = (unsigned __int8 *)(v12 + 1);
        return result;
      }
      if ((_DWORD)v18 == 110)
      {
        if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
        {
          result = 0;
          *v13 = (unsigned __int8 *)(v12 + 4);
          v49 = 13;
LABEL_70:
          *v16 = v49;
          return result;
        }
      }
      else if ((_DWORD)v18 == 102)
      {
        if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
        {
          result = 0;
          *v13 = (unsigned __int8 *)(v12 + 5);
          v49 = 12;
          goto LABEL_70;
        }
      }
      else if ((_DWORD)v18 == 116
             && (uint64_t)(v14 - v12) >= 4
             && *(_WORD *)(v12 + 1) == 30066
             && *(_BYTE *)(v12 + 3) == 101)
      {
        result = 0;
        *v13 = (unsigned __int8 *)(v12 + 4);
        v49 = 11;
        goto LABEL_70;
      }
      v328 = v12;
      *(_QWORD *)(a1 + 32) = v12;
      v329 = v12;
      if (v12 < v14)
      {
        v330 = v14 - v12;
        v331 = v12 + v330;
        do
        {
          v332 = *(unsigned __int8 *)v12;
          if (v332 != 36)
          {
            v333 = v332 != 95 && (v332 - 48) >= 0xA;
            if (v333 && (v332 | 0x20u) - 97 > 0x19)
              goto LABEL_545;
          }
          *v13 = (unsigned __int8 *)++v12;
          --v330;
        }
        while (v330);
        LODWORD(v12) = v331;
LABEL_545:
        v329 = v12;
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v329 - v328) & 0x7FFFFFFF;
      *(_BYTE *)(a1 + 24) = 5;
      goto LABEL_86;
    }
    v38 = (unsigned __int8 *)v12;
    if (v12 < v14)
    {
      v38 = (unsigned __int8 *)v12;
      if ((_DWORD)v18 == 45)
      {
        v38 = (unsigned __int8 *)(v12 + 1);
        *v13 = (unsigned __int8 *)(v12 + 1);
      }
    }
    if ((unint64_t)v38 < v14)
    {
      v39 = *v38;
      if (v39 == 48)
      {
        v41 = v38 + 1;
        *v13 = v41;
        goto LABEL_38;
      }
      if ((v39 - 49) <= 8)
      {
        v40 = v38 + 1;
        do
        {
          v41 = v40;
          *v13 = v40;
          if ((unint64_t)v40 >= v14)
            break;
          ++v40;
        }
        while (*v41 - 48 < 0xA);
LABEL_38:
        if ((unint64_t)v41 < v14)
        {
          v42 = *v41;
          if (v42 == 46)
          {
            *v13 = v41 + 1;
            if ((unint64_t)(v41 + 1) >= v14 || v41[1] - 48 > 9)
            {
              v507 = WTF::fastCompactMalloc((WTF *)0x20);
              v508 = 0x2200000002;
              v509 = "Invalid digits after decimal point";
              goto LABEL_934;
            }
            v48 = v41 + 2;
            do
            {
              v41 = v48;
              *v13 = v48;
              if ((unint64_t)v48 >= v14)
                break;
              ++v48;
            }
            while (*v41 - 48 < 0xA);
          }
          else if (v42 != 69 && v42 != 101 && (uint64_t)&v41[-v12] <= 9)
          {
            *v16 = 6;
            v43 = *(unsigned __int8 *)v12;
            if (v43 == 45)
              v44 = (unsigned __int8 *)(v12 + 1);
            else
              v44 = (unsigned __int8 *)v12;
            if (v44 >= v41)
            {
              if (v43 != 45)
              {
                v45 = 0;
LABEL_50:
                result = 0;
LABEL_51:
                v47 = (double)v45;
                goto LABEL_52;
              }
            }
            else
            {
              v45 = 0;
              do
              {
                v46 = *v44++;
                v45 = v46 + 10 * v45 - 48;
              }
              while (v44 < v41);
              if (v43 != 45)
                goto LABEL_50;
              if (v45)
              {
                result = 0;
                v45 = -v45;
                goto LABEL_51;
              }
            }
            result = 0;
            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
            return result;
          }
        }
        if ((unint64_t)v41 >= v14 || (*v41 | 0x20) != 0x65)
        {
LABEL_62:
          *v16 = 6;
          v14 = (unint64_t)&v41[-v12];
          if ((uint64_t)&v41[-v12] < 0)
            goto LABEL_1169;
          v780 = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v41, (unint64_t *)&v780, 0x2E00000005);
          result = 0;
          v47 = *(double *)&v780;
LABEL_52:
          *(double *)(a1 + 32) = v47;
          return result;
        }
        v512 = v41 + 1;
        *v13 = v41 + 1;
        if ((unint64_t)(v41 + 1) < v14)
        {
          v513 = *v512;
          if (v513 == 45 || v513 == 43)
          {
            v512 = v41 + 2;
            *v13 = v41 + 2;
          }
        }
        if ((unint64_t)v512 < v14 && *v512 - 48 <= 9)
        {
          v514 = v512 + 1;
          do
          {
            v41 = v514;
            *v13 = v514;
            if ((unint64_t)v514 >= v14)
              break;
            ++v514;
          }
          while (*v41 - 48 < 0xA);
          goto LABEL_62;
        }
        v507 = WTF::fastCompactMalloc((WTF *)0x20);
        v508 = 0x5D00000002;
        v509 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_934:
        *(_QWORD *)v507 = v508;
        *(_QWORD *)(v507 + 8) = v509;
        *(_DWORD *)(v507 + 16) = 4;
        v303 = *v17;
        *v17 = (WTF::StringImpl *)v507;
        if (!v303)
          return 0;
LABEL_469:
        if (*(_DWORD *)v303 == 2)
        {
          WTF::StringImpl::~StringImpl(v303, v295, v296, v297, v298, v299, v300, v301);
          WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
          return 0;
        }
        result = 0;
        *(_DWORD *)v303 -= 2;
        return result;
      }
    }
    v507 = WTF::fastCompactMalloc((WTF *)0x20);
    v508 = 0xE00000002;
    v509 = "Invalid number";
    goto LABEL_934;
  }
  if (v19 != 4)
    goto LABEL_22;
  v20 = *(unsigned __int8 *)(a1 + 40);
  if ((_DWORD)v18 == 39)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      a3 = v12 + 1;
      *v13 = (unsigned __int8 *)(v12 + 1);
LABEL_1064:
      if (a3 >= v14)
      {
        v22 = (int8x16_t *)a3;
      }
      else
      {
        v22 = (int8x16_t *)a3;
        while (1)
        {
          v568 = v22->u8[0];
          v569 = v568 < 0x20 || v568 == 92;
          v570 = v569 || v568 == (_DWORD)v18;
          v571 = v570;
          if (v568 != 9 && v571)
            break;
          v22 = (int8x16_t *)((char *)v22 + 1);
          *v13 = (unsigned __int8 *)v22;
          if (v22 == (int8x16_t *)(v12 + v14 - a3 + 1))
          {
            v22 = (int8x16_t *)(v12 + v14 - a3 + 1);
            goto LABEL_26;
          }
        }
      }
      goto LABEL_26;
    }
    v507 = WTF::fastCompactMalloc((WTF *)0x20);
    v508 = 0x2900000002;
    v509 = "Single quotes (') are not allowed in JSON";
    goto LABEL_934;
  }
  a3 = v12 + 1;
  *v13 = (unsigned __int8 *)(v12 + 1);
  if (v20)
    goto LABEL_1064;
  v21 = v14 - a3;
  if ((uint64_t)(v14 - a3) < 0)
    goto LABEL_1169;
  v22 = (int8x16_t *)(v21 + v12 + 1);
  if (v21 >= 0x10)
  {
    v23 = (unsigned __int8 *)(v12 + 16);
    v24.i64[0] = 0x2222222222222222;
    v24.i64[1] = 0x2222222222222222;
    v25.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
    v25.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
    v26.i64[0] = 0x2020202020202020;
    v26.i64[1] = 0x2020202020202020;
    while (1)
    {
      v27 = *(int8x16_t *)(v23 - 15);
      v28 = vceqq_s8(v27, v24);
      v29 = vorrq_s8(vorrq_s8(vceqq_s8(v27, v25), (int8x16_t)vcgtq_u8(v26, (uint8x16_t)v27)), v28);
      v28.i8[0] = vmaxvq_u8((uint8x16_t)v29);
      if (v28.i32[0])
        break;
      v23 += 16;
      if (v23 >= (unsigned __int8 *)v22)
      {
        if (v23 - 15 >= (unsigned __int8 *)v22)
          goto LABEL_25;
        v30 = (unsigned __int8 *)&v22[-1];
        v31 = v22[-1];
        v32.i64[0] = 0x2222222222222222;
        v32.i64[1] = 0x2222222222222222;
        v33 = vceqq_s8(v31, v32);
        v34.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
        v34.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
        v35.i64[0] = 0x2020202020202020;
        v35.i64[1] = 0x2020202020202020;
        v29 = vorrq_s8(vorrq_s8(vceqq_s8(v31, v34), (int8x16_t)vcgtq_u8(v35, (uint8x16_t)v31)), v33);
        v33.i8[0] = vmaxvq_u8((uint8x16_t)v29);
        if (!v33.i32[0])
          goto LABEL_25;
LABEL_24:
        v37 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v29);
        v37.i8[0] = vminvq_u8(v37);
        v22 = (int8x16_t *)&v30[v37.u32[0]];
        goto LABEL_25;
      }
    }
    v30 = v23 - 15;
    goto LABEL_24;
  }
  if (v14 == a3)
    goto LABEL_25;
  v50 = (int8x16_t *)(v12 + 1);
  do
  {
    if (!JSC::safeStringLatin1CharactersInStrictJSON[v50->u8[0]])
    {
      v22 = v50;
      break;
    }
    v50 = (int8x16_t *)((char *)v50 + 1);
    --v21;
  }
  while (v21);
LABEL_25:
  *v13 = (unsigned __int8 *)v22;
LABEL_26:
  if ((unint64_t)v22 < v14 && v22->u8[0] == (_DWORD)v18)
  {
    result = 0;
    *(_BYTE *)(a1 + 25) |= 1u;
    *(_QWORD *)(a1 + 32) = a3;
    *(_QWORD *)(a1 + 48) = (char *)v22->i64 + 1;
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v22 - a3) & 0x7FFFFFFF;
    *(_BYTE *)(a1 + 24) = 4;
    return result;
  }
  if (JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8) == 5)
  {
LABEL_86:
    v778 = v11 + 41952;
    v777 = (int8x16_t)xmmword_19911D0A0;
    while (1)
    {
      v787 = 0;
      v788 = 0;
      JSC::Identifier::fromString(v11, *(WTF::AtomStringImpl **)(a1 + 32), *(_DWORD *)(a1 + 28) & 0x7FFFFFFF, v18, a5, a6, a7, a8, (rlim_t *)&v786);
      v783 = 0;
      if (v786 != *(WTF::StringImpl **)(*(_QWORD *)v778 + 464))
      {
        v785 = 1;
        JSC::Identifier::fromString(v11, *(WTF::AtomStringImpl **)(a1 + 32), *(_DWORD *)(a1 + 28) & 0x7FFFFFFF, v18, a5, a6, a7, a8, (rlim_t *)&v780);
        v58 = v780;
        v780 = 0;
        v59 = v783;
        v783 = v58;
        if (v59)
        {
          v60 = *(_DWORD *)v59 - 2;
          if (*(_DWORD *)v59 != 2)
            goto LABEL_90;
          WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
          v59 = v780;
          v780 = 0;
          if (v59)
          {
            v60 = *(_DWORD *)v59 - 2;
            if (*(_DWORD *)v59 == 2)
            {
              WTF::StringImpl::~StringImpl(v59, v106, v107, v108, v109, v110, v111, v112);
              WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
            }
            else
            {
LABEL_90:
              *(_DWORD *)v59 = v60;
            }
          }
        }
        v61 = WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v787, 1uLL, (unint64_t)&v783);
        v62 = HIDWORD(v788);
        v63 = v787;
        v64 = *(_DWORD **)v61;
        if (*(_QWORD *)v61)
          *v64 += 2;
        v65 = (char *)v63 + 16 * v62;
        *(_QWORD *)v65 = v64;
        v66 = *(_DWORD *)(v61 + 8);
        v65[12] = *(_BYTE *)(v61 + 12);
        *((_DWORD *)v65 + 2) = v66;
        goto LABEL_94;
      }
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      if (v12 >= v14)
      {
        v191 = 0;
      }
      else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
      {
        v244 = *(unsigned __int8 **)(a1 + 56);
        v245 = (unsigned __int8 *)(v12 + 1);
        v246 = ~v12 + v14;
        while (1)
        {
          v247 = v245;
          *v13 = v245;
          if (!v246)
            break;
          ++v245;
          --v246;
          if (JSC::tokenTypesOfLatin1Characters[*v247] != 19)
          {
            v244 = v247;
            break;
          }
        }
        v191 = (unint64_t)v247 < v14;
        v12 = (unint64_t)v244;
      }
      else
      {
        v191 = 1;
      }
      if (v12 == v14)
      {
LABEL_813:
        v391 = 14;
        goto LABEL_639;
      }
      *v16 = 18;
      v18 = *(unsigned __int8 *)v12;
      v80 = JSC::tokenTypesOfLatin1Characters[v18];
      if (v80 <= 4)
        break;
      if (v80 == 6)
      {
        v319 = (_DWORD)v18 != 45 || !v191;
        v320 = (unsigned __int8 *)v12;
        if ((v319 & 1) == 0)
        {
          v320 = (unsigned __int8 *)(v12 + 1);
          *v13 = (unsigned __int8 *)(v12 + 1);
        }
        if ((unint64_t)v320 >= v14)
          goto LABEL_1313;
        v321 = *v320;
        if (v321 == 48)
        {
          v241 = v320 + 1;
          *v13 = v241;
        }
        else
        {
          if ((v321 - 49) > 8)
            goto LABEL_1313;
          v242 = v320 + 1;
          do
          {
            v241 = v242;
            *v13 = v242;
            if ((unint64_t)v242 >= v14)
              break;
            ++v242;
          }
          while (*v241 - 48 < 0xA);
        }
        if ((unint64_t)v241 < v14)
        {
          v392 = *v241;
          if (v392 == 46)
          {
            *v13 = v241 + 1;
            if ((unint64_t)(v241 + 1) >= v14 || v241[1] - 48 > 9)
              goto LABEL_1324;
            v294 = v241 + 2;
            do
            {
              v241 = v294;
              *v13 = v294;
              if ((unint64_t)v294 >= v14)
                break;
              ++v294;
            }
            while (*v241 - 48 < 0xA);
          }
          else if (v392 != 69 && v392 != 101 && (uint64_t)&v241[-v12] <= 9)
          {
            *v16 = 6;
            v269 = *(unsigned __int8 *)v12;
            if (v269 == 45)
              v262 = (unsigned __int8 *)(v12 + 1);
            else
              v262 = (unsigned __int8 *)v12;
            if (v262 >= v241)
              goto LABEL_1051;
            v264 = 0;
            do
            {
              v263 = *v262++;
              v264 = v263 + 10 * v264 - 48;
            }
            while (v262 < v241);
LABEL_412:
            if (v269 == 45)
            {
              if (!v264)
                goto LABEL_1053;
              v272 = (double)-v264;
            }
            else
            {
LABEL_413:
              v272 = (double)v264;
            }
LABEL_414:
            *(double *)(a1 + 32) = v272;
            goto LABEL_204;
          }
        }
        if ((unint64_t)v241 >= v14 || (*v241 | 0x20) != 0x65)
          goto LABEL_524;
        v393 = v241 + 1;
        *v13 = v241 + 1;
        if ((unint64_t)(v241 + 1) < v14)
        {
          v394 = *v393;
          if (v394 == 45 || v394 == 43)
          {
            v393 = v241 + 2;
            *v13 = v241 + 2;
          }
        }
        if ((unint64_t)v393 >= v14 || *v393 - 48 > 9)
          goto LABEL_1471;
        v395 = v393 + 1;
        do
        {
          v241 = v395;
          *v13 = v395;
          if ((unint64_t)v395 >= v14)
            break;
          ++v395;
        }
        while (*v241 - 48 < 0xA);
        goto LABEL_524;
      }
      if (v80 != 5)
      {
        if (v80 - 18 < 2)
        {
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
          v397 = v780;
          if (!v780)
          {
            __break(0xC471u);
            JUMPOUT(0x198B0B654);
          }
          goto LABEL_913;
        }
LABEL_144:
        *v16 = v80;
        *v13 = (unsigned __int8 *)(v12 + 1);
        goto LABEL_204;
      }
      if ((_DWORD)v18 == 110)
      {
        if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
          goto LABEL_638;
      }
      else if ((_DWORD)v18 == 102)
      {
        if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
          goto LABEL_718;
      }
      else if ((_DWORD)v18 == 116
             && (uint64_t)(v14 - v12) >= 4
             && *(_WORD *)(v12 + 1) == 30066
             && *(_BYTE *)(v12 + 3) == 101)
      {
        goto LABEL_972;
      }
      v459 = (WTF::AtomStringImpl *)v12;
      *(_QWORD *)(a1 + 32) = v12;
      v596 = v12;
      if (v12 < v14)
      {
        v597 = v14 - v12;
        v598 = v12 + v597;
        while (1)
        {
          v599 = *(unsigned __int8 *)v12;
          if (v599 != 36)
          {
            v600 = v599 != 95 && (v599 - 48) >= 0xA;
            if (v600 && (v599 | 0x20u) - 97 > 0x19)
              break;
          }
          *v13 = (unsigned __int8 *)++v12;
          if (!--v597)
          {
            LODWORD(v12) = v598;
            break;
          }
        }
        v596 = v12;
      }
      v460 = *(_DWORD *)(a1 + 28) & 0x80000000 | (v596 - (_DWORD)v459) & 0x7FFFFFFF;
      *(_DWORD *)(a1 + 28) = v460;
      *(_BYTE *)(a1 + 24) = 5;
LABEL_860:
      v785 = 0;
      JSC::Identifier::fromString(v11, v459, v460 & 0x7FFFFFFF, v18, a5, a6, a7, a8, (rlim_t *)&v780);
      v468 = v780;
      v780 = 0;
      v469 = v783;
      v783 = v468;
      if (!v469)
        goto LABEL_863;
      v470 = *(_DWORD *)v469 - 2;
      if (*(_DWORD *)v469 != 2)
      {
LABEL_862:
        *(_DWORD *)v469 = v470;
        goto LABEL_863;
      }
      WTF::StringImpl::~StringImpl(v469, v461, v462, v463, v464, v465, v466, v467);
      WTF::fastFree(v608, v609, v610, v611, v612, v613, v614, v615);
      v469 = v780;
      v780 = 0;
      if (v469)
      {
        v470 = *(_DWORD *)v469 - 2;
        if (*(_DWORD *)v469 != 2)
          goto LABEL_862;
        WTF::StringImpl::~StringImpl(v469, v616, v617, v618, v619, v620, v621, v622);
        WTF::fastFree(v623, v624, v625, v626, v627, v628, v629, v630);
      }
LABEL_863:
      v62 = HIDWORD(v788);
      if (HIDWORD(v788) == (_DWORD)v788)
      {
        v471 = WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v787, HIDWORD(v788) + 1, (unint64_t)&v783);
        v62 = *(_QWORD *)v471;
        if (*(_QWORD *)v471)
          *(_DWORD *)v62 += 2;
        v472 = HIDWORD(v788);
        v473 = (char *)v787 + 16 * HIDWORD(v788);
        *(_QWORD *)v473 = v62;
        v474 = *(_DWORD *)(v471 + 8);
        v473[12] = *(_BYTE *)(v471 + 12);
        *((_DWORD *)v473 + 2) = v474;
        LODWORD(v62) = v472;
      }
      else
      {
        v565 = v783;
        if (v783)
          *(_DWORD *)v783 += 2;
        v566 = (char *)v787 + 16 * v62;
        *(_QWORD *)v566 = v565;
        v567 = v784;
        v566[12] = v785;
        *((_DWORD *)v566 + 2) = v567;
      }
LABEL_94:
      HIDWORD(v788) = v62 + 1;
      if ((JSC::isLexerKeyword((uint64_t *)&v783) & 1) != 0)
        goto LABEL_204;
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      if (v12 < v14)
      {
        v67 = v14 - v12;
        while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
        {
          *v13 = (unsigned __int8 *)++v12;
          if (!--v67)
          {
            v12 = v14;
            break;
          }
        }
      }
      if (v12 == v14)
      {
        v68 = 14;
        goto LABEL_604;
      }
      *v16 = 18;
      v18 = *(unsigned __int8 *)v12;
      v68 = JSC::tokenTypesOfLatin1Characters[v18];
      if (v68 <= 4)
      {
        if (v68 != 4)
          goto LABEL_114;
        v69 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v18 != 39)
        {
          a3 = v12 + 1;
          *v13 = (unsigned __int8 *)(v12 + 1);
          if (v69)
          {
LABEL_319:
            if (a3 >= v14)
            {
              v71 = (int8x16_t *)a3;
            }
            else
            {
              v71 = (int8x16_t *)a3;
              while (1)
              {
                v235 = v71->u8[0];
                v236 = v235 < 0x20 || v235 == 92;
                v237 = v236 || v235 == (_DWORD)v18;
                v238 = v237;
                if (v235 != 9 && v238)
                  break;
                v71 = (int8x16_t *)((char *)v71 + 1);
                *v13 = (unsigned __int8 *)v71;
                if (v71 == (int8x16_t *)(v12 + v14 - a3 + 1))
                {
                  v71 = (int8x16_t *)(v12 + v14 - a3 + 1);
                  break;
                }
              }
            }
          }
          else
          {
            v70 = v14 - a3;
            if ((uint64_t)(v14 - a3) < 0)
              goto LABEL_1169;
            v71 = (int8x16_t *)(v70 + v12 + 1);
            if (v70 >= 0x10)
            {
              v72 = (unsigned __int8 *)(v12 + 16);
              while (1)
              {
                v73 = *(int8x16_t *)(v72 - 15);
                v74.i64[0] = 0x2222222222222222;
                v74.i64[1] = 0x2222222222222222;
                v75 = vceqq_s8(v73, v74);
                v76.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v76.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v77.i64[0] = 0x2020202020202020;
                v77.i64[1] = 0x2020202020202020;
                v78 = vorrq_s8(vorrq_s8(vceqq_s8(v73, v76), (int8x16_t)vcgtq_u8(v77, (uint8x16_t)v73)), v75);
                v75.i8[0] = vmaxvq_u8((uint8x16_t)v78);
                if (v75.i32[0])
                  break;
                v72 += 16;
                if (v72 >= (unsigned __int8 *)v71)
                {
                  if (v72 - 15 >= (unsigned __int8 *)v71)
                    goto LABEL_165;
                  v121 = (unsigned __int8 *)&v71[-1];
                  v706 = v71[-1];
                  v707.i64[0] = 0x2222222222222222;
                  v707.i64[1] = 0x2222222222222222;
                  v708 = vceqq_s8(v706, v707);
                  v709.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v709.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v78 = vorrq_s8(vorrq_s8(vceqq_s8(v706, v709), (int8x16_t)vcgtq_u8(v77, (uint8x16_t)v706)), v708);
                  v708.i8[0] = vmaxvq_u8((uint8x16_t)v78);
                  if (!v708.i32[0])
                    goto LABEL_165;
LABEL_164:
                  v122 = (uint8x16_t)vornq_s8(v777, v78);
                  v122.i8[0] = vminvq_u8(v122);
                  v71 = (int8x16_t *)&v121[v122.u32[0]];
                  goto LABEL_165;
                }
              }
              v121 = v72 - 15;
              goto LABEL_164;
            }
            v396 = (int8x16_t *)(v12 + 1);
            if (v14 == a3)
              goto LABEL_165;
            do
            {
              if (!JSC::safeStringLatin1CharactersInStrictJSON[v396->u8[0]])
              {
                v71 = v396;
                break;
              }
              v396 = (int8x16_t *)((char *)v396 + 1);
              --v70;
            }
            while (v70);
LABEL_165:
            *v13 = (unsigned __int8 *)v71;
          }
          if ((unint64_t)v71 >= v14 || v71->u8[0] != (_DWORD)v18)
          {
            v68 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
            goto LABEL_115;
          }
          *(_BYTE *)(a1 + 25) |= 1u;
          *(_QWORD *)(a1 + 32) = a3;
          *(_QWORD *)(a1 + 48) = (char *)v71->i64 + 1;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v71 - a3) & 0x7FFFFFFF;
          v68 = 4;
LABEL_169:
          *(_BYTE *)(a1 + 24) = v68;
          goto LABEL_115;
        }
        if (*(_BYTE *)(a1 + 40))
        {
          a3 = v12 + 1;
          *v13 = (unsigned __int8 *)(v12 + 1);
          goto LABEL_319;
        }
        v662 = WTF::fastCompactMalloc((WTF *)0x20);
        v445 = (WTF *)v662;
        v663 = 0x2900000002;
        v664 = "Single quotes (') are not allowed in JSON";
        goto LABEL_1280;
      }
      if (v68 == 6)
      {
        v223 = (unsigned __int8 *)v12;
        if (v12 < v14)
        {
          v223 = (unsigned __int8 *)v12;
          if ((_DWORD)v18 == 45)
          {
            v223 = (unsigned __int8 *)(v12 + 1);
            *v13 = (unsigned __int8 *)(v12 + 1);
          }
        }
        if ((unint64_t)v223 >= v14)
          goto LABEL_1279;
        v224 = *v223;
        if (v224 == 48)
        {
          v201 = v223 + 1;
          *v13 = v201;
          goto LABEL_297;
        }
        if ((v224 - 49) > 8)
        {
LABEL_1279:
          v662 = WTF::fastCompactMalloc((WTF *)0x20);
          v445 = (WTF *)v662;
          v663 = 0xE00000002;
          v664 = "Invalid number";
        }
        else
        {
          v225 = v223 + 1;
          do
          {
            v201 = v225;
            *v13 = v225;
            if ((unint64_t)v225 >= v14)
              break;
            ++v225;
          }
          while (*v201 - 48 < 0xA);
LABEL_297:
          if ((unint64_t)v201 >= v14)
          {
LABEL_485:
            if ((unint64_t)v201 >= v14 || (*v201 | 0x20) != 0x65)
              goto LABEL_487;
            v672 = v201 + 1;
            *v13 = v201 + 1;
            if ((unint64_t)(v201 + 1) < v14)
            {
              v673 = *v672;
              if (v673 == 45 || v673 == 43)
              {
                v672 = v201 + 2;
                *v13 = v201 + 2;
              }
            }
            if ((unint64_t)v672 < v14 && *v672 - 48 <= 9)
            {
              v674 = v672 + 1;
              do
              {
                v201 = v674;
                *v13 = v674;
                if ((unint64_t)v674 >= v14)
                  break;
                ++v674;
              }
              while (*v201 - 48 < 0xA);
LABEL_487:
              *v16 = 6;
              v14 = (unint64_t)&v201[-v12];
              if ((uint64_t)&v201[-v12] < 0)
                goto LABEL_1169;
              v780 = 0;
              fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v201, (unint64_t *)&v780, 0x2E00000005);
              v231 = *(double *)&v780;
LABEL_310:
              *(double *)(a1 + 32) = v231;
LABEL_311:
              v68 = 6;
              goto LABEL_115;
            }
            v662 = WTF::fastCompactMalloc((WTF *)0x20);
            v445 = (WTF *)v662;
            v663 = 0x5D00000002;
            v664 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
          }
          else
          {
            v226 = *v201;
            if (v226 != 46)
            {
              if (v226 != 69 && v226 != 101 && (uint64_t)&v201[-v12] <= 9)
              {
                *v16 = 6;
                v227 = *(unsigned __int8 *)v12;
                if (v227 == 45)
                  v228 = (unsigned __int8 *)(v12 + 1);
                else
                  v228 = (unsigned __int8 *)v12;
                if (v228 >= v201)
                {
                  if (v227 != 45)
                  {
                    v229 = 0;
LABEL_309:
                    v231 = (double)v229;
                    goto LABEL_310;
                  }
                }
                else
                {
                  v229 = 0;
                  do
                  {
                    v230 = *v228++;
                    v229 = v230 + 10 * v229 - 48;
                  }
                  while (v228 < v201);
                  if (v227 != 45)
                    goto LABEL_309;
                  if (v229)
                  {
                    v231 = (double)-v229;
                    goto LABEL_310;
                  }
                }
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                goto LABEL_311;
              }
              goto LABEL_485;
            }
            *v13 = v201 + 1;
            if ((unint64_t)(v201 + 1) < v14 && v201[1] - 48 <= 9)
            {
              v202 = v201 + 2;
              do
              {
                v201 = v202;
                *v13 = v202;
                if ((unint64_t)v202 >= v14)
                  break;
                ++v202;
              }
              while (*v201 - 48 < 0xA);
              goto LABEL_485;
            }
            v662 = WTF::fastCompactMalloc((WTF *)0x20);
            v445 = (WTF *)v662;
            v663 = 0x2200000002;
            v664 = "Invalid digits after decimal point";
          }
        }
LABEL_1280:
        *(_QWORD *)v662 = v663;
        *(_QWORD *)(v662 + 8) = v664;
        *(_DWORD *)(v662 + 16) = 4;
        goto LABEL_823;
      }
      if (v68 == 5)
      {
        if ((_DWORD)v18 == 110)
        {
          if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
          {
            *v13 = (unsigned __int8 *)(v12 + 4);
            v68 = 13;
LABEL_604:
            *v16 = v68;
            goto LABEL_115;
          }
        }
        else if ((_DWORD)v18 == 102)
        {
          if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
          {
            *v13 = (unsigned __int8 *)(v12 + 5);
            v68 = 12;
            goto LABEL_604;
          }
        }
        else if ((_DWORD)v18 == 116
               && (uint64_t)(v14 - v12) >= 4
               && *(_WORD *)(v12 + 1) == 30066
               && *(_BYTE *)(v12 + 3) == 101)
        {
          *v13 = (unsigned __int8 *)(v12 + 4);
          v68 = 11;
          goto LABEL_604;
        }
        v515 = v12;
        *(_QWORD *)(a1 + 32) = v12;
        v516 = v12;
        if (v12 < v14)
        {
          v517 = v14 - v12;
          v518 = v12 + v517;
          while (1)
          {
            v519 = *(unsigned __int8 *)v12;
            if (v519 != 36)
            {
              v520 = v519 != 95 && (v519 - 48) >= 0xA;
              if (v520 && (v519 | 0x20u) - 97 > 0x19)
                break;
            }
            *v13 = (unsigned __int8 *)++v12;
            if (!--v517)
            {
              LODWORD(v12) = v518;
              break;
            }
          }
          v516 = v12;
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v516 - v515) & 0x7FFFFFFF;
        v68 = 5;
        goto LABEL_169;
      }
      if ((v68 - 18) >= 2)
      {
LABEL_114:
        *v16 = v68;
        *v13 = (unsigned __int8 *)(v12 + 1);
        goto LABEL_115;
      }
      WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
      v445 = v780;
      if (!v780)
      {
        __break(0xC471u);
        JUMPOUT(0x198B0CD00);
      }
      *(_QWORD *)v780 = 0x1600000002;
      *((_QWORD *)v445 + 1) = (char *)v445 + 20;
      *((_DWORD *)v445 + 4) = 4;
      *((_DWORD *)v445 + 9) = 656436837;
      *(_OWORD *)((char *)v445 + 20) = *(_OWORD *)"Unrecognized token '";
      *((_BYTE *)v445 + 40) = *(_BYTE *)v12;
      *((_BYTE *)v445 + 41) = 39;
LABEL_823:
      v446 = *v17;
      *v17 = v445;
      if (v446)
      {
        if (*(_DWORD *)v446 == 2)
        {
          WTF::StringImpl::~StringImpl(v446, a2, a3, v18, a5, a6, a7, a8);
          WTF::fastFree(v533, v534, v535, v536, v537, v538, v539, v540);
        }
        else
        {
          *(_DWORD *)v446 -= 2;
        }
      }
      v68 = 18;
LABEL_115:
      if (!v785 && v68 != 16)
        goto LABEL_204;
      while (1)
      {
        if (v68 > 15)
        {
          v779 = 1;
          if (v68 != 16)
            goto LABEL_206;
          goto LABEL_146;
        }
        if (v68 != 15)
          break;
        v785 = 1;
        v12 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        if (v12 < v14)
        {
          v79 = v14 - v12;
          while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
          {
            *v13 = (unsigned __int8 *)++v12;
            if (!--v79)
            {
              v12 = v14;
              break;
            }
          }
        }
        if (v12 == v14)
          goto LABEL_813;
        *v16 = 18;
        v18 = *(unsigned __int8 *)v12;
        v80 = JSC::tokenTypesOfLatin1Characters[v18];
        if (v80 <= 4)
        {
          if (v80 != 4)
            goto LABEL_144;
          v207 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v18 == 39)
          {
            if (!*(_BYTE *)(a1 + 40))
              goto LABEL_1572;
            a3 = v12 + 1;
            *v13 = (unsigned __int8 *)(v12 + 1);
          }
          else
          {
            a3 = v12 + 1;
            *v13 = (unsigned __int8 *)(v12 + 1);
            if (!v207)
            {
              v208 = v14 - a3;
              if ((uint64_t)(v14 - a3) < 0)
                goto LABEL_1169;
              v85 = (int8x16_t *)(v208 + v12 + 1);
              if (v208 >= 0x10)
              {
                v209 = (unsigned __int8 *)(v12 + 16);
                while (1)
                {
                  v210 = *(int8x16_t *)(v209 - 15);
                  v211.i64[0] = 0x2222222222222222;
                  v211.i64[1] = 0x2222222222222222;
                  v212 = vceqq_s8(v210, v211);
                  v213.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v213.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v214.i64[0] = 0x2020202020202020;
                  v214.i64[1] = 0x2020202020202020;
                  v215 = vorrq_s8(vorrq_s8(vceqq_s8(v210, v213), (int8x16_t)vcgtq_u8(v214, (uint8x16_t)v210)), v212);
                  v212.i8[0] = vmaxvq_u8((uint8x16_t)v215);
                  if (v212.i32[0])
                    break;
                  v209 += 16;
                  if (v209 >= (unsigned __int8 *)v85)
                  {
                    if (v209 - 15 >= (unsigned __int8 *)v85)
                      goto LABEL_314;
                    v232 = (unsigned __int8 *)&v85[-1];
                    v721 = v85[-1];
                    v722.i64[0] = 0x2222222222222222;
                    v722.i64[1] = 0x2222222222222222;
                    v723 = vceqq_s8(v721, v722);
                    v724.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v724.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v215 = vorrq_s8(vorrq_s8(vceqq_s8(v721, v724), (int8x16_t)vcgtq_u8(v214, (uint8x16_t)v721)), v723);
                    v723.i8[0] = vmaxvq_u8((uint8x16_t)v215);
                    if (!v723.i32[0])
                      goto LABEL_314;
LABEL_313:
                    v233 = (uint8x16_t)vornq_s8(v777, v215);
                    v233.i8[0] = vminvq_u8(v233);
                    v85 = (int8x16_t *)&v232[v233.u32[0]];
                    goto LABEL_314;
                  }
                }
                v232 = v209 - 15;
                goto LABEL_313;
              }
              v410 = (int8x16_t *)(v12 + 1);
              if (v14 == a3)
                goto LABEL_314;
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v410->u8[0]])
                {
                  v85 = v410;
                  break;
                }
                v410 = (int8x16_t *)((char *)v410 + 1);
                --v208;
              }
              while (v208);
LABEL_314:
              *v13 = (unsigned __int8 *)v85;
              goto LABEL_315;
            }
          }
          if (a3 >= v14)
          {
            v85 = (int8x16_t *)a3;
          }
          else
          {
            v85 = (int8x16_t *)a3;
            while (1)
            {
              v81 = v85->u8[0];
              v82 = v81 < 0x20 || v81 == 92;
              v83 = v82 || v81 == (_DWORD)v18;
              v84 = v83;
              if (v81 != 9 && v84)
                break;
              v85 = (int8x16_t *)((char *)v85 + 1);
              *v13 = (unsigned __int8 *)v85;
              if (v85 == (int8x16_t *)(v12 + v14 - a3 + 1))
              {
                v85 = (int8x16_t *)(v12 + v14 - a3 + 1);
                break;
              }
            }
          }
LABEL_315:
          if ((unint64_t)v85 < v14 && v85->u8[0] == (_DWORD)v18)
            goto LABEL_317;
          if (JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8) != 5)goto LABEL_204;
          v413 = *(WTF::AtomStringImpl **)(a1 + 32);
          v414 = *(_DWORD *)(a1 + 28);
          goto LABEL_767;
        }
        if (v80 == 6)
        {
          v265 = (unsigned __int8 *)v12;
          if (v12 < v14)
          {
            v265 = (unsigned __int8 *)v12;
            if ((_DWORD)v18 == 45)
            {
              v265 = (unsigned __int8 *)(v12 + 1);
              *v13 = (unsigned __int8 *)(v12 + 1);
            }
          }
          if ((unint64_t)v265 >= v14)
            goto LABEL_1313;
          v266 = *v265;
          if (v266 == 48)
          {
            v241 = v265 + 1;
            *v13 = v241;
          }
          else
          {
            if ((v266 - 49) > 8)
              goto LABEL_1313;
            v267 = v265 + 1;
            do
            {
              v241 = v267;
              *v13 = v267;
              if ((unint64_t)v267 >= v14)
                break;
              ++v267;
            }
            while (*v241 - 48 < 0xA);
          }
          if ((unint64_t)v241 < v14)
          {
            v268 = *v241;
            if (v268 == 46)
            {
              *v13 = v241 + 1;
              if ((unint64_t)(v241 + 1) >= v14 || v241[1] - 48 > 9)
                goto LABEL_1324;
              v243 = v241 + 2;
              do
              {
                v241 = v243;
                *v13 = v243;
                if ((unint64_t)v243 >= v14)
                  break;
                ++v243;
              }
              while (*v241 - 48 < 0xA);
            }
            else if (v268 != 69 && v268 != 101 && (uint64_t)&v241[-v12] <= 9)
            {
              *v16 = 6;
              v269 = *(unsigned __int8 *)v12;
              if (v269 == 45)
                v270 = (unsigned __int8 *)(v12 + 1);
              else
                v270 = (unsigned __int8 *)v12;
              if (v270 < v241)
              {
                v264 = 0;
                do
                {
                  v271 = *v270++;
                  v264 = v271 + 10 * v264 - 48;
                }
                while (v270 < v241);
                goto LABEL_412;
              }
              goto LABEL_1051;
            }
          }
          if ((unint64_t)v241 >= v14 || (*v241 | 0x20) != 0x65)
            goto LABEL_524;
          v684 = v241 + 1;
          *v13 = v241 + 1;
          if ((unint64_t)(v241 + 1) < v14)
          {
            v685 = *v684;
            if (v685 == 45 || v685 == 43)
            {
              v684 = v241 + 2;
              *v13 = v241 + 2;
            }
          }
          if ((unint64_t)v684 < v14 && *v684 - 48 <= 9)
          {
            v686 = v684 + 1;
            do
            {
              v241 = v686;
              *v13 = v686;
              if ((unint64_t)v686 >= v14)
                break;
              ++v686;
            }
            while (*v241 - 48 < 0xA);
            goto LABEL_524;
          }
          goto LABEL_1471;
        }
        if (v80 != 5)
        {
          if (v80 - 18 >= 2)
            goto LABEL_144;
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
          v397 = v780;
          if (!v780)
          {
            __break(0xC471u);
            JUMPOUT(0x198B0CD10);
          }
          goto LABEL_913;
        }
        if ((_DWORD)v18 == 110)
        {
          if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
            goto LABEL_638;
        }
        else if ((_DWORD)v18 == 102)
        {
          if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
            goto LABEL_718;
        }
        else if ((_DWORD)v18 == 116
               && (uint64_t)(v14 - v12) >= 4
               && *(_WORD *)(v12 + 1) == 30066
               && *(_BYTE *)(v12 + 3) == 101)
        {
          goto LABEL_972;
        }
        v413 = (WTF::AtomStringImpl *)v12;
        *(_QWORD *)(a1 + 32) = v12;
        v602 = v12;
        if (v12 < v14)
        {
          v603 = v14 - v12;
          v604 = v12 + v603;
          while (1)
          {
            v605 = *(unsigned __int8 *)v12;
            if (v605 != 36)
            {
              v606 = v605 != 95 && (v605 - 48) >= 0xA;
              if (v606 && (v605 | 0x20u) - 97 > 0x19)
                break;
            }
            *v13 = (unsigned __int8 *)++v12;
            if (!--v603)
            {
              LODWORD(v12) = v604;
              break;
            }
          }
          v602 = v12;
        }
        v414 = *(_DWORD *)(a1 + 28) & 0x80000000 | (v602 - (_DWORD)v413) & 0x7FFFFFFF;
        *(_DWORD *)(a1 + 28) = v414;
        *(_BYTE *)(a1 + 24) = 5;
LABEL_767:
        JSC::Identifier::fromString(v11, v413, v414 & 0x7FFFFFFF, v18, a5, a6, a7, a8, (rlim_t *)&v780);
        v415 = v780;
        v780 = 0;
        v416 = v783;
        v783 = v415;
        if (v416)
        {
          v417 = *(_DWORD *)v416 - 2;
          if (*(_DWORD *)v416 == 2)
          {
            WTF::StringImpl::~StringImpl(v416, a2, a3, v18, a5, a6, a7, a8);
            WTF::fastFree(v549, v550, v551, v552, v553, v554, v555, v556);
            v416 = v780;
            v780 = 0;
            if (!v416)
              goto LABEL_877;
            v417 = *(_DWORD *)v416 - 2;
            if (*(_DWORD *)v416 == 2)
            {
              WTF::StringImpl::~StringImpl(v416, a2, a3, v18, a5, a6, a7, a8);
              WTF::fastFree(v557, v558, v559, v560, v561, v562, v563, v564);
              goto LABEL_877;
            }
          }
          *(_DWORD *)v416 = v417;
        }
LABEL_877:
        v477 = HIDWORD(v788);
        if (HIDWORD(v788) == (_DWORD)v788)
        {
          WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPPathEntry&>((uint64_t)&v787, (unint64_t)&v783);
        }
        else
        {
          v498 = v783;
          if (v783)
            *(_DWORD *)v783 += 2;
          v499 = (char *)v787 + 16 * v477;
          *(_QWORD *)v499 = v498;
          v500 = v784;
          v499[12] = v785;
          *((_DWORD *)v499 + 2) = v500;
          HIDWORD(v788) = v477 + 1;
        }
        v12 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        if (v12 >= v14)
        {
          v478 = 0;
        }
        else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
        {
          v494 = *(unsigned __int8 **)(a1 + 56);
          v495 = (unsigned __int8 *)(v12 + 1);
          v496 = ~v12 + v14;
          while (1)
          {
            v497 = v495;
            *v13 = v495;
            if (!v496)
              break;
            ++v495;
            --v496;
            if (JSC::tokenTypesOfLatin1Characters[*v497] != 19)
            {
              v494 = v497;
              break;
            }
          }
          v478 = (unint64_t)v497 < v14;
          v12 = (unint64_t)v494;
        }
        else
        {
          v478 = 1;
        }
        if (v12 == v14)
        {
          v68 = 14;
          *v16 = 14;
        }
        else
        {
          *v16 = 18;
          v18 = *(unsigned __int8 *)v12;
          v68 = JSC::tokenTypesOfLatin1Characters[v18];
          if (v68 > 4)
          {
            if (v68 == 6)
            {
              v522 = (_DWORD)v18 != 45 || !v478;
              v523 = (unsigned __int8 *)v12;
              if ((v522 & 1) == 0)
              {
                v523 = (unsigned __int8 *)(v12 + 1);
                *v13 = (unsigned __int8 *)(v12 + 1);
              }
              if ((unint64_t)v523 >= v14)
              {
LABEL_1522:
                v764 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v764 = 0xE00000002;
                v765 = "Invalid number";
LABEL_1523:
                *(_QWORD *)(v764 + 8) = v765;
                *(_DWORD *)(v764 + 16) = 4;
                v690 = *v17;
                *v17 = (WTF::StringImpl *)v764;
                goto LABEL_1352;
              }
              v524 = *v523;
              if (v524 == 48)
              {
                v526 = v523 + 1;
                *v13 = v526;
              }
              else
              {
                if ((v524 - 49) > 8)
                  goto LABEL_1522;
                v525 = v523 + 1;
                do
                {
                  v526 = v525;
                  *v13 = v525;
                  if ((unint64_t)v525 >= v14)
                    break;
                  ++v525;
                }
                while (*v526 - 48 < 0xA);
              }
              if ((unint64_t)v526 >= v14)
                goto LABEL_1165;
              v527 = *v526;
              if (v527 == 46)
              {
                *v13 = v526 + 1;
                if ((unint64_t)(v526 + 1) >= v14 || v526[1] - 48 > 9)
                {
                  v764 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v764 = 0x2200000002;
                  v765 = "Invalid digits after decimal point";
                  goto LABEL_1523;
                }
                v634 = v526 + 2;
                do
                {
                  v526 = v634;
                  *v13 = v634;
                  if ((unint64_t)v634 >= v14)
                    break;
                  ++v634;
                }
                while (*v526 - 48 < 0xA);
                goto LABEL_1165;
              }
              if (v527 == 69 || v527 == 101 || (uint64_t)&v526[-v12] > 9)
              {
LABEL_1165:
                if ((unint64_t)v526 < v14 && (*v526 | 0x20) == 0x65)
                {
                  v766 = v526 + 1;
                  *v13 = v526 + 1;
                  if ((unint64_t)(v526 + 1) < v14)
                  {
                    v767 = *v766;
                    if (v767 == 45 || v767 == 43)
                    {
                      v766 = v526 + 2;
                      *v13 = v526 + 2;
                    }
                  }
                  if ((unint64_t)v766 >= v14 || *v766 - 48 > 9)
                  {
                    v764 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v764 = 0x5D00000002;
                    v765 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_1523;
                  }
                  v768 = v766 + 1;
                  do
                  {
                    v526 = v768;
                    *v13 = v768;
                    if ((unint64_t)v768 >= v14)
                      break;
                    ++v768;
                  }
                  while (*v526 - 48 < 0xA);
                }
                *v16 = 6;
                v14 = (unint64_t)&v526[-v12];
                if ((uint64_t)&v526[-v12] < 0)
                  goto LABEL_1169;
                v780 = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v526, (unint64_t *)&v780, 0x2E00000005);
                v532 = *(double *)&v780;
LABEL_1014:
                *(double *)(a1 + 32) = v532;
                v68 = 6;
              }
              else
              {
                *v16 = 6;
                v528 = *(unsigned __int8 *)v12;
                if (v528 == 45)
                  v529 = (unsigned __int8 *)(v12 + 1);
                else
                  v529 = (unsigned __int8 *)v12;
                if (v529 >= v526)
                {
                  if (v528 != 45)
                  {
                    v530 = 0;
LABEL_1013:
                    v532 = (double)v530;
                    goto LABEL_1014;
                  }
                }
                else
                {
                  v530 = 0;
                  do
                  {
                    v531 = *v529++;
                    v530 = v531 + 10 * v530 - 48;
                  }
                  while (v529 < v526);
                  if (v528 != 45)
                    goto LABEL_1013;
                  if (v530)
                  {
                    v532 = (double)-v530;
                    goto LABEL_1014;
                  }
                }
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                v68 = 6;
              }
            }
            else if (v68 == 5)
            {
              if ((_DWORD)v18 == 110)
              {
                if ((uint64_t)(v14 - v12) < 4 || *(_WORD *)(v12 + 1) != 27765 || *(_BYTE *)(v12 + 3) != 108)
                  goto LABEL_1414;
                *v13 = (unsigned __int8 *)(v12 + 4);
                v68 = 13;
                *v16 = 13;
              }
              else if ((_DWORD)v18 == 102)
              {
                if ((uint64_t)(v14 - v12) < 5 || *(_WORD *)(v12 + 1) != 27745 || *(_WORD *)(v12 + 3) != 25971)
                  goto LABEL_1414;
                *v13 = (unsigned __int8 *)(v12 + 5);
                v68 = 12;
                *v16 = 12;
              }
              else if ((_DWORD)v18 == 116
                     && (uint64_t)(v14 - v12) >= 4
                     && *(_WORD *)(v12 + 1) == 30066
                     && *(_BYTE *)(v12 + 3) == 101)
              {
                *v13 = (unsigned __int8 *)(v12 + 4);
                v68 = 11;
                *v16 = 11;
              }
              else
              {
LABEL_1414:
                v725 = v12;
                *(_QWORD *)(a1 + 32) = v12;
                v726 = v12;
                if (v12 < v14)
                {
                  v727 = v14 - v12;
                  v728 = v12 + v727;
                  while (1)
                  {
                    v729 = *(unsigned __int8 *)v12;
                    if (v729 != 36)
                    {
                      v730 = v729 != 95 && (v729 - 48) >= 0xA;
                      if (v730 && (v729 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    *v13 = (unsigned __int8 *)++v12;
                    if (!--v727)
                    {
                      LODWORD(v12) = v728;
                      break;
                    }
                  }
                  v726 = v12;
                }
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v726 - v725) & 0x7FFFFFFF;
                v68 = 5;
                *(_BYTE *)(a1 + 24) = 5;
              }
            }
            else if ((v68 - 18) < 2)
            {
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
              v689 = v780;
              if (!v780)
              {
                __break(0xC471u);
                JUMPOUT(0x198B0CCD0);
              }
              *(_QWORD *)v780 = 0x1600000002;
              *((_QWORD *)v689 + 1) = (char *)v689 + 20;
              *((_DWORD *)v689 + 4) = 4;
              *((_DWORD *)v689 + 9) = 656436837;
              *(_OWORD *)((char *)v689 + 20) = *(_OWORD *)"Unrecognized token '";
              *((_BYTE *)v689 + 40) = *(_BYTE *)v12;
              *((_BYTE *)v689 + 41) = 39;
              v690 = *v17;
              *v17 = v689;
LABEL_1352:
              v68 = 18;
              if (v690)
              {
                if (*(_DWORD *)v690 == 2)
                {
                  WTF::StringImpl::~StringImpl(v690, a2, a3, v18, a5, a6, a7, a8);
                  WTF::fastFree(v732, v733, v734, v735, v736, v737, v738, v739);
                  v68 = 18;
                }
                else
                {
                  *(_DWORD *)v690 -= 2;
                }
              }
            }
            else
            {
LABEL_898:
              *v16 = v68;
              *v13 = (unsigned __int8 *)(v12 + 1);
            }
          }
          else
          {
            if (v68 != 4)
              goto LABEL_898;
            v479 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v18 == 39)
            {
              if (*(_BYTE *)(a1 + 40))
              {
                a3 = v12 + 1;
                *v13 = (unsigned __int8 *)(v12 + 1);
LABEL_1539:
                if (a3 >= v14)
                {
                  v481 = (int8x16_t *)a3;
                }
                else
                {
                  v481 = (int8x16_t *)a3;
                  while (1)
                  {
                    v769 = v481->u8[0];
                    v770 = v769 < 0x20 || v769 == 92;
                    v771 = v770 || v769 == (_DWORD)v18;
                    v772 = v771;
                    if (v769 != 9 && v772)
                      break;
                    v481 = (int8x16_t *)((char *)v481 + 1);
                    *v13 = (unsigned __int8 *)v481;
                    if (v481 == (int8x16_t *)(v12 + v14 - a3 + 1))
                    {
                      v481 = (int8x16_t *)(v12 + v14 - a3 + 1);
                      goto LABEL_930;
                    }
                  }
                }
                goto LABEL_930;
              }
              v764 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v764 = 0x2900000002;
              v765 = "Single quotes (') are not allowed in JSON";
              goto LABEL_1523;
            }
            a3 = v12 + 1;
            *v13 = (unsigned __int8 *)(v12 + 1);
            if (v479)
              goto LABEL_1539;
            v480 = v14 - a3;
            if ((uint64_t)(v14 - a3) < 0)
              goto LABEL_1169;
            v481 = (int8x16_t *)(v480 + v12 + 1);
            if (v480 >= 0x10)
            {
              v482 = (unsigned __int8 *)(v12 + 16);
              while (1)
              {
                v483 = *(int8x16_t *)(v482 - 15);
                v484.i64[0] = 0x2222222222222222;
                v484.i64[1] = 0x2222222222222222;
                v485 = vceqq_s8(v483, v484);
                v486.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v486.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v487.i64[0] = 0x2020202020202020;
                v487.i64[1] = 0x2020202020202020;
                v488 = vorrq_s8(vorrq_s8(vceqq_s8(v483, v486), (int8x16_t)vcgtq_u8(v487, (uint8x16_t)v483)), v485);
                v485.i8[0] = vmaxvq_u8((uint8x16_t)v488);
                if (v485.i32[0])
                  break;
                v482 += 16;
                if (v482 >= (unsigned __int8 *)v481)
                {
                  if (v482 - 15 >= (unsigned __int8 *)v481)
                    goto LABEL_929;
                  v489 = (unsigned __int8 *)&v481[-1];
                  v490 = v481[-1];
                  v491.i64[0] = 0x2222222222222222;
                  v491.i64[1] = 0x2222222222222222;
                  v492 = vceqq_s8(v490, v491);
                  v493.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v493.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v488 = vorrq_s8(vorrq_s8(vceqq_s8(v490, v493), (int8x16_t)vcgtq_u8(v487, (uint8x16_t)v490)), v492);
                  v492.i8[0] = vmaxvq_u8((uint8x16_t)v488);
                  if (!v492.i32[0])
                    goto LABEL_929;
LABEL_928:
                  v506 = (uint8x16_t)vornq_s8(v777, v488);
                  v506.i8[0] = vminvq_u8(v506);
                  v481 = (int8x16_t *)&v489[v506.u32[0]];
                  goto LABEL_929;
                }
              }
              v489 = v482 - 15;
              goto LABEL_928;
            }
            v660 = (int8x16_t *)(v12 + 1);
            if (v14 == a3)
              goto LABEL_929;
            do
            {
              if (!JSC::safeStringLatin1CharactersInStrictJSON[v660->u8[0]])
              {
                v481 = v660;
                break;
              }
              v660 = (int8x16_t *)((char *)v660 + 1);
              --v480;
            }
            while (v480);
LABEL_929:
            *v13 = (unsigned __int8 *)v481;
LABEL_930:
            if ((unint64_t)v481 < v14 && v481->u8[0] == (_DWORD)v18)
            {
              *(_BYTE *)(a1 + 25) |= 1u;
              *(_QWORD *)(a1 + 32) = a3;
              *(_QWORD *)(a1 + 48) = (char *)v481->i64 + 1;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v481 - a3) & 0x7FFFFFFF;
              v68 = 4;
              *(_BYTE *)(a1 + 24) = 4;
            }
            else
            {
              v68 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
            }
          }
        }
      }
      v779 = 1;
      if (v68 == 8)
      {
        if (!HIDWORD(v788))
        {
          __break(0xC471u);
          JUMPOUT(0x198B0CCF8);
        }
        v369 = HIDWORD(v788) - 1;
        v370 = v787;
        v371 = (char *)v787 + 16 * v369;
        v373 = v371[12];
        v372 = v371 + 12;
        v779 = 1;
        if (v373 != 1 || (v8 & 1) != 0)
          goto LABEL_206;
        *v372 = 3;
        JSC::JSONPPathEntry::operator=((uint64_t)&v783, (uint64_t)v370 + 16 * v369, a3, v18, a5, a6, a7, a8);
LABEL_146:
        v12 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        if (v12 >= v14)
        {
          v86 = 0;
        }
        else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
        {
          v187 = *(unsigned __int8 **)(a1 + 56);
          v188 = (unsigned __int8 *)(v12 + 1);
          v189 = ~v12 + v14;
          while (1)
          {
            v190 = v188;
            *v13 = v188;
            if (!v189)
              break;
            ++v188;
            --v189;
            if (JSC::tokenTypesOfLatin1Characters[*v190] != 19)
            {
              v187 = v190;
              break;
            }
          }
          v86 = (unint64_t)v190 < v14;
          v12 = (unint64_t)v187;
        }
        else
        {
          v86 = 1;
        }
        if (v12 == v14)
        {
          v390 = 14;
          goto LABEL_633;
        }
        *v16 = 18;
        v18 = *(unsigned __int8 *)v12;
        v87 = JSC::tokenTypesOfLatin1Characters[v18];
        if (v87 <= 4)
        {
          if (v87 == 4)
          {
            v88 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v18 != 39)
            {
              a3 = v12 + 1;
              *v13 = (unsigned __int8 *)(v12 + 1);
              if (!v88)
              {
                v89 = v14 - a3;
                if ((uint64_t)(v14 - a3) < 0)
                  goto LABEL_1169;
                v90 = (int8x16_t *)(v89 + v12 + 1);
                if (v89 >= 0x10)
                {
                  v91 = (unsigned __int8 *)(v12 + 16);
                  while (1)
                  {
                    v92 = *(int8x16_t *)(v91 - 15);
                    v93.i64[0] = 0x2222222222222222;
                    v93.i64[1] = 0x2222222222222222;
                    v94 = vceqq_s8(v92, v93);
                    v95.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v95.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v96.i64[0] = 0x2020202020202020;
                    v96.i64[1] = 0x2020202020202020;
                    v97 = vorrq_s8(vorrq_s8(vceqq_s8(v92, v95), (int8x16_t)vcgtq_u8(v96, (uint8x16_t)v92)), v94);
                    v94.i8[0] = vmaxvq_u8((uint8x16_t)v97);
                    if (v94.i32[0])
                      break;
                    v91 += 16;
                    if (v91 >= (unsigned __int8 *)v90)
                    {
                      if (v91 - 15 >= (unsigned __int8 *)v90)
                        goto LABEL_279;
                      v216 = (unsigned __int8 *)&v90[-1];
                      v714 = v90[-1];
                      v715.i64[0] = 0x2222222222222222;
                      v715.i64[1] = 0x2222222222222222;
                      v716 = vceqq_s8(v714, v715);
                      v717.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v717.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v97 = vorrq_s8(vorrq_s8(vceqq_s8(v714, v717), (int8x16_t)vcgtq_u8(v96, (uint8x16_t)v714)), v716);
                      v716.i8[0] = vmaxvq_u8((uint8x16_t)v97);
                      if (!v716.i32[0])
                        goto LABEL_279;
LABEL_278:
                      v217 = (uint8x16_t)vornq_s8(v777, v97);
                      v217.i8[0] = vminvq_u8(v217);
                      v90 = (int8x16_t *)&v216[v217.u32[0]];
                      goto LABEL_279;
                    }
                  }
                  v216 = v91 - 15;
                  goto LABEL_278;
                }
                v403 = (int8x16_t *)(v12 + 1);
                if (v14 == a3)
                  goto LABEL_279;
                do
                {
                  if (!JSC::safeStringLatin1CharactersInStrictJSON[v403->u8[0]])
                  {
                    v90 = v403;
                    break;
                  }
                  v403 = (int8x16_t *)((char *)v403 + 1);
                  --v89;
                }
                while (v89);
LABEL_279:
                *v13 = (unsigned __int8 *)v90;
LABEL_280:
                if ((unint64_t)v90 < v14 && v90->u8[0] == (_DWORD)v18)
                {
                  *(_BYTE *)(a1 + 25) |= 1u;
                  *(_QWORD *)(a1 + 32) = a3;
                  *(_QWORD *)(a1 + 48) = (char *)v90->i64 + 1;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v90 - a3) & 0x7FFFFFFF;
                  v218 = 4;
                  goto LABEL_283;
                }
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
LABEL_174:
                v780 = 0;
                v781 = 0;
                v782 = 0;
                v123 = *((_DWORD *)a2 + 3);
                if (v123 == *((_DWORD *)a2 + 2))
                {
                  WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPData>((uint64_t)a2, (unint64_t)&v780);
                }
                else
                {
                  v273 = *(_QWORD *)a2 + 24 * v123;
                  *(_QWORD *)v273 = 0;
                  *(_QWORD *)(v273 + 8) = 0;
                  v274 = v780;
                  v780 = 0;
                  *(_QWORD *)v273 = v274;
                  LODWORD(v274) = v781;
                  LODWORD(v781) = 0;
                  *(_DWORD *)(v273 + 8) = (_DWORD)v274;
                  LODWORD(v274) = HIDWORD(v781);
                  HIDWORD(v781) = 0;
                  *(_DWORD *)(v273 + 12) = (_DWORD)v274;
                  *(_QWORD *)(v273 + 16) = 0;
                  v275 = (uint64_t **)(v273 + 16);
                  if (v782)
                  {
                    v276 = *(_QWORD *)(((unint64_t)(v782 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                    v277 = *(_QWORD *)(v276 + 40);
                    if (!v277)
                    {
                      JSC::HandleSet::grow(*(JSC::HandleSet **)(((unint64_t)(v782 - 2) & 0xFFFFFFFFFFFFF000) + 0x10), (uint64_t)a2, a3, v18, a5, a6, a7, a8);
                      v277 = *(_QWORD *)(v276 + 40);
                    }
                    v278 = 0;
                    *(_QWORD *)(v276 + 40) = *(_QWORD *)v277;
                    *(_QWORD *)(v277 + 16) = 0;
                    v279 = (uint64_t *)(v277 + 16);
                    *(_QWORD *)v277 = 0;
                    *(_QWORD *)(v277 + 8) = 0;
                    *v275 = (uint64_t *)(v277 + 16);
                    if (v782)
                      v278 = *v782;
                    v280 = *v279;
                    v282 = (v278 & 0xFFFE000000000002) == 0 && v278 != 0;
                    if (v280)
                      v283 = (v280 & 0xFFFE000000000002) == 0;
                    else
                      v283 = 0;
                    if (v283 != v282)
                    {
                      if ((v282 & 1) != 0)
                      {
                        v284 = *(unint64_t **)((v277 & 0xFFFFFFFFFFFFF000) + 0x10);
                        v285 = v284[3];
                        v284 += 3;
                        *(_QWORD *)v277 = v285;
                        *(_QWORD *)(v277 + 8) = v284;
                        *v284 = v277;
                        *(_QWORD *)(v285 + 8) = v277;
                      }
                      else
                      {
                        v688 = *(_QWORD *)v277;
                        v687 = *(_QWORD **)(v277 + 8);
                        *v687 = *(_QWORD *)v277;
                        *(_QWORD *)(v688 + 8) = v687;
                        *(_QWORD *)v277 = 0;
                        *(_QWORD *)(v277 + 8) = 0;
                        v279 = *v275;
                      }
                    }
                    *v279 = v278;
                  }
                  ++*((_DWORD *)a2 + 3);
                }
                if (v782)
                {
                  v124 = v782 - 2;
                  v125 = *(_QWORD *)(((unint64_t)(v782 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
                  v126 = (uint64_t *)*(v782 - 1);
                  if (v126)
                  {
                    v127 = *v124;
                    *v126 = *v124;
                    *(_QWORD *)(v127 + 8) = v126;
                    *v124 = 0;
                    v124[1] = 0;
                  }
                  *v124 = *(_QWORD *)(v125 + 40);
                  *(_QWORD *)(v125 + 40) = v124;
                  v782 = 0;
                }
                if (HIDWORD(v781))
                {
                  v176 = v780;
                  v177 = 16 * HIDWORD(v781);
                  do
                  {
                    v178 = *(WTF::StringImpl **)v176;
                    *(_QWORD *)v176 = 0;
                    if (v178)
                    {
                      if (*(_DWORD *)v178 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v178, a2, a3, v18, a5, a6, a7, a8);
                        WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
                      }
                      else
                      {
                        *(_DWORD *)v178 -= 2;
                      }
                    }
                    v176 = (WTF *)((char *)v176 + 16);
                    v177 -= 16;
                  }
                  while (v177);
                }
                v128 = v780;
                if (v780)
                {
                  v780 = 0;
                  LODWORD(v781) = 0;
                  WTF::fastFree((unint64_t)v128, a2, a3, v18, a5, a6, a7, a8);
                }
                v129 = JSC::LiteralParser<unsigned char>::parse(a1, v11, 2uLL, v18, a5, a6, a7, a8);
                if (*(_DWORD *)(v11 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, v18, a5, a6, a7, a8))
                {
                  goto LABEL_204;
                }
                v130 = *((_DWORD *)a2 + 3);
                if (!v130)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B0CCE0);
                }
                v131 = *(_QWORD *)a2 + 24 * v130;
                v134 = *(unint64_t **)(v131 - 8);
                v133 = (unint64_t **)(v131 - 8);
                v132 = v134;
                if (!v134)
                {
                  v135 = *(_QWORD **)(v11 + 712);
                  if (!v135)
                  {
                    JSC::HandleSet::grow((JSC::HandleSet *)(v11 + 672), (uint64_t)a2, a3, v18, a5, a6, a7, a8);
                    v135 = *(_QWORD **)(v11 + 712);
                  }
                  *(_QWORD *)(v11 + 712) = *v135;
                  v135[2] = 0;
                  v132 = v135 + 2;
                  *v135 = 0;
                  v135[1] = 0;
                  *v133 = v135 + 2;
                }
                v136 = (unint64_t)(v132 - 2);
                v137 = *v132;
                v139 = (v129 & 0xFFFE000000000002) == 0 && v129 != 0;
                if (v137)
                  v140 = (v137 & 0xFFFE000000000002) == 0;
                else
                  v140 = 0;
                if (v140 != v139)
                {
                  if ((v139 & 1) != 0)
                  {
                    v141 = *(unint64_t **)((v136 & 0xFFFFFFFFFFFFF000) + 0x10);
                    v142 = v141[3];
                    v141 += 3;
                    *(_QWORD *)v136 = v142;
                    *(v132 - 1) = (unint64_t)v141;
                    *v141 = v136;
                    *(_QWORD *)(v142 + 8) = v136;
                  }
                  else
                  {
                    v657 = *(_QWORD *)v136;
                    v656 = (_QWORD *)*(v132 - 1);
                    *v656 = *(_QWORD *)v136;
                    *(_QWORD *)(v657 + 8) = v656;
                    *(_QWORD *)v136 = 0;
                    *(_QWORD *)(v136 + 8) = 0;
                    v132 = *v133;
                  }
                }
                *v132 = v129;
                v143 = *((_DWORD *)a2 + 3);
                if (!v143)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B0CCE8);
                }
                v144 = *(_QWORD *)a2 + 24 * v143;
                v145 = *(_QWORD **)(v144 - 8);
                if (!v145 || !*v145)
                  goto LABEL_204;
                v220 = *(WTF **)(v144 - 24);
                v219 = (WTF **)(v144 - 24);
                *v219 = v787;
                v787 = v220;
                v221 = v219[1];
                v219[1] = v788;
                v788 = v221;
                if (v785 != 3)
                {
LABEL_285:
                  v222 = *v16;
                  goto LABEL_286;
                }
                if (*v16 != 9)
                  goto LABEL_204;
                v12 = *(_QWORD *)(a1 + 48);
                v14 = *(_QWORD *)(a1 + 56);
                if (v12 >= v14)
                {
                  v374 = 0;
                }
                else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
                {
                  v404 = *(unsigned __int8 **)(a1 + 56);
                  v405 = (unsigned __int8 *)(v12 + 1);
                  v406 = ~v12 + v14;
                  while (1)
                  {
                    v407 = v405;
                    *v13 = v405;
                    if (!v406)
                      break;
                    ++v405;
                    --v406;
                    if (JSC::tokenTypesOfLatin1Characters[*v407] != 19)
                    {
                      v404 = v407;
                      break;
                    }
                  }
                  v374 = (unint64_t)v407 < v14;
                  v12 = (unint64_t)v404;
                }
                else
                {
                  v374 = 1;
                }
                if (v12 == v14)
                {
                  v633 = 14;
                  goto LABEL_1159;
                }
                *v16 = 18;
                v18 = *(unsigned __int8 *)v12;
                v222 = JSC::tokenTypesOfLatin1Characters[v18];
                if (v222 <= 4)
                {
                  if (v222 == 4)
                  {
                    v375 = *(unsigned __int8 *)(a1 + 40);
                    if ((_DWORD)v18 != 39)
                    {
                      a3 = v12 + 1;
                      *v13 = (unsigned __int8 *)(v12 + 1);
                      if (!v375)
                      {
                        v376 = v14 - a3;
                        if ((uint64_t)(v14 - a3) < 0)
                          goto LABEL_1169;
                        v377 = (int8x16_t *)(v376 + v12 + 1);
                        if (v376 >= 0x10)
                        {
                          v378 = (unsigned __int8 *)(v12 + 16);
                          while (1)
                          {
                            v379 = *(int8x16_t *)(v378 - 15);
                            v380.i64[0] = 0x2222222222222222;
                            v380.i64[1] = 0x2222222222222222;
                            v381 = vceqq_s8(v379, v380);
                            v382.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v382.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v383.i64[0] = 0x2020202020202020;
                            v383.i64[1] = 0x2020202020202020;
                            v384 = vorrq_s8(vorrq_s8(vceqq_s8(v379, v382), (int8x16_t)vcgtq_u8(v383, (uint8x16_t)v379)), v381);
                            v381.i8[0] = vmaxvq_u8((uint8x16_t)v384);
                            if (v381.i32[0])
                              break;
                            v378 += 16;
                            if (v378 >= (unsigned __int8 *)v377)
                            {
                              if (v378 - 15 >= (unsigned __int8 *)v377)
                                goto LABEL_753;
                              v385 = (unsigned __int8 *)&v377[-1];
                              v386 = v377[-1];
                              v387.i64[0] = 0x2222222222222222;
                              v387.i64[1] = 0x2222222222222222;
                              v388 = vceqq_s8(v386, v387);
                              v389.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                              v389.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                              v384 = vorrq_s8(vorrq_s8(vceqq_s8(v386, v389), (int8x16_t)vcgtq_u8(v383, (uint8x16_t)v386)), v388);
                              v388.i8[0] = vmaxvq_u8((uint8x16_t)v384);
                              if (!v388.i32[0])
                                goto LABEL_753;
LABEL_752:
                              v411 = (uint8x16_t)vornq_s8(v777, v384);
                              v411.i8[0] = vminvq_u8(v411);
                              v377 = (int8x16_t *)&v385[v411.u32[0]];
                              goto LABEL_753;
                            }
                          }
                          v385 = v378 - 15;
                          goto LABEL_752;
                        }
                        v655 = (int8x16_t *)(v12 + 1);
                        if (v14 == a3)
                          goto LABEL_753;
                        do
                        {
                          if (!JSC::safeStringLatin1CharactersInStrictJSON[v655->u8[0]])
                          {
                            v377 = v655;
                            break;
                          }
                          v655 = (int8x16_t *)((char *)v655 + 1);
                          --v376;
                        }
                        while (v376);
LABEL_753:
                        *v13 = (unsigned __int8 *)v377;
LABEL_754:
                        if ((unint64_t)v377 >= v14 || v377->u8[0] != (_DWORD)v18)
                        {
                          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
                          goto LABEL_285;
                        }
                        *(_BYTE *)(a1 + 25) |= 1u;
                        *(_QWORD *)(a1 + 32) = a3;
                        *(_QWORD *)(a1 + 48) = (char *)v377->i64 + 1;
                        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v377 - a3) & 0x7FFFFFFF;
                        v412 = 4;
LABEL_757:
                        *(_BYTE *)(a1 + 24) = v412;
LABEL_287:
                        v146 = 2;
                        goto LABEL_205;
                      }
LABEL_1506:
                      if (a3 >= v14)
                      {
                        v377 = (int8x16_t *)a3;
                      }
                      else
                      {
                        v377 = (int8x16_t *)a3;
                        while (1)
                        {
                          v760 = v377->u8[0];
                          v761 = v760 < 0x20 || v760 == 92;
                          v762 = v761 || v760 == (_DWORD)v18;
                          v763 = v762;
                          if (v760 != 9 && v763)
                            break;
                          v377 = (int8x16_t *)((char *)v377 + 1);
                          *v13 = (unsigned __int8 *)v377;
                          if (v377 == (int8x16_t *)(v12 + v14 - a3 + 1))
                          {
                            v377 = (int8x16_t *)(v12 + v14 - a3 + 1);
                            goto LABEL_754;
                          }
                        }
                      }
                      goto LABEL_754;
                    }
                    if (*(_BYTE *)(a1 + 40))
                    {
                      a3 = v12 + 1;
                      *v13 = (unsigned __int8 *)(v12 + 1);
                      goto LABEL_1506;
                    }
                    v750 = WTF::fastCompactMalloc((WTF *)0x20);
                    v658 = (WTF *)v750;
                    v751 = 0x2900000002;
                    v752 = "Single quotes (') are not allowed in JSON";
LABEL_1473:
                    *(_QWORD *)v750 = v751;
                    *(_QWORD *)(v750 + 8) = v752;
                    *(_DWORD *)(v750 + 16) = 4;
LABEL_1266:
                    v659 = *v17;
                    *v17 = v658;
                    if (v659)
                    {
                      if (*(_DWORD *)v659 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v659, a2, a3, v18, a5, a6, a7, a8);
                        WTF::fastFree(v698, v699, v700, v701, v702, v703, v704, v705);
                      }
                      else
                      {
                        *(_DWORD *)v659 -= 2;
                      }
                    }
                    goto LABEL_285;
                  }
                  goto LABEL_722;
                }
                if (v222 != 6)
                {
                  if (v222 != 5)
                  {
                    if (v222 - 18 < 2)
                    {
                      WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
                      v658 = v780;
                      if (!v780)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B0CD20);
                      }
                      *(_QWORD *)v780 = 0x1600000002;
                      *((_QWORD *)v658 + 1) = (char *)v658 + 20;
                      *((_DWORD *)v658 + 4) = 4;
                      *((_DWORD *)v658 + 9) = 656436837;
                      *(_OWORD *)((char *)v658 + 20) = *(_OWORD *)"Unrecognized token '";
                      *((_BYTE *)v658 + 40) = *(_BYTE *)v12;
                      *((_BYTE *)v658 + 41) = 39;
                      goto LABEL_1266;
                    }
LABEL_722:
                    *v16 = v222;
                    *v13 = (unsigned __int8 *)(v12 + 1);
LABEL_286:
                    if (v222 != 17)
                      goto LABEL_287;
                    v12 = *(_QWORD *)(a1 + 48);
                    v14 = *(_QWORD *)(a1 + 56);
                    if (v12 >= v14)
                    {
                      v304 = 0;
                    }
                    else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
                    {
                      v322 = *(unsigned __int8 **)(a1 + 56);
                      v323 = (unsigned __int8 *)(v12 + 1);
                      v324 = ~v12 + v14;
                      while (1)
                      {
                        v325 = v323;
                        *v13 = v323;
                        if (!v324)
                          break;
                        ++v323;
                        --v324;
                        if (JSC::tokenTypesOfLatin1Characters[*v325] != 19)
                        {
                          v322 = v325;
                          break;
                        }
                      }
                      v304 = (unint64_t)v325 < v14;
                      v12 = (unint64_t)v322;
                    }
                    else
                    {
                      v304 = 1;
                    }
                    if (v12 == v14)
                    {
                      v779 = 0;
                      v444 = 14;
                      goto LABEL_820;
                    }
                    *v16 = 18;
                    v18 = *(unsigned __int8 *)v12;
                    v286 = JSC::tokenTypesOfLatin1Characters[v18];
                    if (v286 > 4)
                    {
                      if (v286 != 6)
                      {
                        if (v286 != 5)
                        {
                          if (v286 - 18 >= 2)
                            goto LABEL_508;
                          WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
                          v631 = v780;
                          if (!v780)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198B0CD18);
                          }
                          *(_QWORD *)v780 = 0x1600000002;
                          *((_QWORD *)v631 + 1) = (char *)v631 + 20;
                          *((_DWORD *)v631 + 4) = 4;
                          *((_DWORD *)v631 + 9) = 656436837;
                          *(_OWORD *)((char *)v631 + 20) = *(_OWORD *)"Unrecognized token '";
                          *((_BYTE *)v631 + 40) = *(_BYTE *)v12;
                          *((_BYTE *)v631 + 41) = 39;
LABEL_1144:
                          v632 = *v17;
                          *v17 = v631;
                          if (v632)
                          {
                            if (*(_DWORD *)v632 != 2)
                            {
                              v779 = 0;
                              *(_DWORD *)v632 -= 2;
                              goto LABEL_206;
                            }
                            WTF::StringImpl::~StringImpl(v632, a2, a3, v18, a5, a6, a7, a8);
                            WTF::fastFree(v647, v648, v649, v650, v651, v652, v653, v654);
                          }
LABEL_1055:
                          v779 = 0;
                          goto LABEL_206;
                        }
                        if ((_DWORD)v18 == 110)
                        {
                          if ((uint64_t)(v14 - v12) < 4 || *(_WORD *)(v12 + 1) != 27765 || *(_BYTE *)(v12 + 3) != 108)
                            goto LABEL_1213;
                          v779 = 0;
                          *v13 = (unsigned __int8 *)(v12 + 4);
                          v444 = 13;
                        }
                        else
                        {
                          if ((_DWORD)v18 != 102)
                            goto LABEL_1170;
                          if ((uint64_t)(v14 - v12) < 5 || *(_WORD *)(v12 + 1) != 27745 || *(_WORD *)(v12 + 3) != 25971)
                            goto LABEL_1213;
                          v779 = 0;
                          *v13 = (unsigned __int8 *)(v12 + 5);
                          v444 = 12;
                        }
LABEL_820:
                        *v16 = v444;
                        goto LABEL_206;
                      }
                      v358 = (_DWORD)v18 != 45 || !v304;
                      v359 = (unsigned __int8 *)v12;
                      if ((v358 & 1) == 0)
                      {
                        v359 = (unsigned __int8 *)(v12 + 1);
                        *v13 = (unsigned __int8 *)(v12 + 1);
                      }
                      if ((unint64_t)v359 >= v14)
                        goto LABEL_1408;
                      v360 = *v359;
                      if (v360 == 48)
                      {
                        v362 = v359 + 1;
                        *v13 = v362;
                        goto LABEL_585;
                      }
                      if ((v360 - 49) > 8)
                      {
LABEL_1408:
                        v718 = WTF::fastCompactMalloc((WTF *)0x20);
                        v631 = (WTF *)v718;
                        v719 = 0xE00000002;
                        v720 = "Invalid number";
                      }
                      else
                      {
                        v361 = v359 + 1;
                        do
                        {
                          v362 = v361;
                          *v13 = v361;
                          if ((unint64_t)v361 >= v14)
                            break;
                          ++v361;
                        }
                        while (*v362 - 48 < 0xA);
LABEL_585:
                        if ((unint64_t)v362 >= v14)
                          goto LABEL_703;
                        v363 = *v362;
                        if (v363 == 46)
                        {
                          *v13 = v362 + 1;
                          if ((unint64_t)(v362 + 1) < v14 && v362[1] - 48 <= 9)
                          {
                            v398 = v362 + 2;
                            do
                            {
                              v362 = v398;
                              *v13 = v398;
                              if ((unint64_t)v398 >= v14)
                                break;
                              ++v398;
                            }
                            while (*v362 - 48 < 0xA);
                            goto LABEL_703;
                          }
                          v718 = WTF::fastCompactMalloc((WTF *)0x20);
                          v631 = (WTF *)v718;
                          v719 = 0x2200000002;
                          v720 = "Invalid digits after decimal point";
                        }
                        else
                        {
                          if (v363 != 69 && v363 != 101 && (uint64_t)&v362[-v12] <= 9)
                          {
                            *v16 = 6;
                            v364 = *(unsigned __int8 *)v12;
                            if (v364 == 45)
                              v365 = (unsigned __int8 *)(v12 + 1);
                            else
                              v365 = (unsigned __int8 *)v12;
                            if (v365 >= v362)
                            {
                              if (v364 != 45)
                              {
                                v366 = 0;
                                goto LABEL_597;
                              }
                            }
                            else
                            {
                              v366 = 0;
                              do
                              {
                                v367 = *v365++;
                                v366 = v367 + 10 * v366 - 48;
                              }
                              while (v365 < v362);
                              if (v364 != 45)
                              {
LABEL_597:
                                v779 = 0;
                                v368 = (double)v366;
                                goto LABEL_598;
                              }
                              if (v366)
                              {
                                v779 = 0;
                                v368 = (double)-v366;
                                goto LABEL_598;
                              }
                            }
                            v779 = 0;
                            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                            goto LABEL_206;
                          }
LABEL_703:
                          if ((unint64_t)v362 >= v14 || (*v362 | 0x20) != 0x65)
                          {
LABEL_705:
                            *v16 = 6;
                            v14 = (unint64_t)&v362[-v12];
                            if ((uint64_t)&v362[-v12] < 0)
                              goto LABEL_1169;
                            v780 = 0;
                            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v362, (unint64_t *)&v780, 0x2E00000005);
                            v779 = 0;
                            v368 = *(double *)&v780;
LABEL_598:
                            *(double *)(a1 + 32) = v368;
                            goto LABEL_206;
                          }
                          v740 = v362 + 1;
                          *v13 = v362 + 1;
                          if ((unint64_t)(v362 + 1) < v14)
                          {
                            v741 = *v740;
                            if (v741 == 45 || v741 == 43)
                            {
                              v740 = v362 + 2;
                              *v13 = v362 + 2;
                            }
                          }
                          if ((unint64_t)v740 < v14 && *v740 - 48 <= 9)
                          {
                            v742 = v740 + 1;
                            do
                            {
                              v362 = v742;
                              *v13 = v742;
                              if ((unint64_t)v742 >= v14)
                                break;
                              ++v742;
                            }
                            while (*v362 - 48 < 0xA);
                            goto LABEL_705;
                          }
                          v718 = WTF::fastCompactMalloc((WTF *)0x20);
                          v631 = (WTF *)v718;
                          v719 = 0x5D00000002;
                          v720 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                        }
                      }
LABEL_1409:
                      *(_QWORD *)v718 = v719;
                      *(_QWORD *)(v718 + 8) = v720;
                      *(_DWORD *)(v718 + 16) = 4;
                      goto LABEL_1144;
                    }
                    if (v286 != 4)
                    {
LABEL_508:
                      v779 = 0;
                      *v16 = v286;
                      *v13 = (unsigned __int8 *)(v12 + 1);
                      goto LABEL_206;
                    }
                    v305 = *(unsigned __int8 *)(a1 + 40);
                    if ((_DWORD)v18 == 39)
                    {
                      if (!*(_BYTE *)(a1 + 40))
                      {
                        v718 = WTF::fastCompactMalloc((WTF *)0x20);
                        v631 = (WTF *)v718;
                        v719 = 0x2900000002;
                        v720 = "Single quotes (') are not allowed in JSON";
                        goto LABEL_1409;
                      }
                      a3 = v12 + 1;
                      *v13 = (unsigned __int8 *)(v12 + 1);
                    }
                    else
                    {
                      a3 = v12 + 1;
                      *v13 = (unsigned __int8 *)(v12 + 1);
                      if (!v305)
                      {
                        v306 = v14 - a3;
                        if ((uint64_t)(v14 - a3) < 0)
                          goto LABEL_1169;
                        v293 = (int8x16_t *)(v306 + v12 + 1);
                        if (v306 >= 0x10)
                        {
                          v307 = (unsigned __int8 *)(v12 + 16);
                          while (1)
                          {
                            v308 = *(int8x16_t *)(v307 - 15);
                            v309.i64[0] = 0x2222222222222222;
                            v309.i64[1] = 0x2222222222222222;
                            v310 = vceqq_s8(v308, v309);
                            v311.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v311.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v312.i64[0] = 0x2020202020202020;
                            v312.i64[1] = 0x2020202020202020;
                            v313 = vorrq_s8(vorrq_s8(vceqq_s8(v308, v311), (int8x16_t)vcgtq_u8(v312, (uint8x16_t)v308)), v310);
                            v310.i8[0] = vmaxvq_u8((uint8x16_t)v313);
                            if (v310.i32[0])
                              break;
                            v307 += 16;
                            if (v307 >= (unsigned __int8 *)v293)
                            {
                              if (v307 - 15 >= (unsigned __int8 *)v293)
                                goto LABEL_528;
                              v314 = (unsigned __int8 *)&v293[-1];
                              v315 = v293[-1];
                              v316.i64[0] = 0x2222222222222222;
                              v316.i64[1] = 0x2222222222222222;
                              v317 = vceqq_s8(v315, v316);
                              v318.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                              v318.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                              v313 = vorrq_s8(vorrq_s8(vceqq_s8(v315, v318), (int8x16_t)vcgtq_u8(v312, (uint8x16_t)v315)), v317);
                              v317.i8[0] = vmaxvq_u8((uint8x16_t)v313);
                              if (!v317.i32[0])
                                goto LABEL_528;
LABEL_527:
                              v326 = (uint8x16_t)vornq_s8(v777, v313);
                              v326.i8[0] = vminvq_u8(v326);
                              v293 = (int8x16_t *)&v314[v326.u32[0]];
                              goto LABEL_528;
                            }
                          }
                          v314 = v307 - 15;
                          goto LABEL_527;
                        }
                        v511 = (int8x16_t *)(v12 + 1);
                        if (v14 == a3)
                          goto LABEL_528;
                        do
                        {
                          if (!JSC::safeStringLatin1CharactersInStrictJSON[v511->u8[0]])
                          {
                            v293 = v511;
                            break;
                          }
                          v511 = (int8x16_t *)((char *)v511 + 1);
                          --v306;
                        }
                        while (v306);
LABEL_528:
                        *v13 = (unsigned __int8 *)v293;
                        goto LABEL_529;
                      }
                    }
                    if (a3 >= v14)
                    {
                      v293 = (int8x16_t *)a3;
                    }
                    else
                    {
                      v293 = (int8x16_t *)a3;
                      while (1)
                      {
                        v289 = v293->u8[0];
                        v290 = v289 < 0x20 || v289 == 92;
                        v291 = v290 || v289 == (_DWORD)v18;
                        v292 = v291;
                        if (v289 != 9 && v292)
                          break;
                        v293 = (int8x16_t *)((char *)v293 + 1);
                        *v13 = (unsigned __int8 *)v293;
                        if (v293 == (int8x16_t *)(v12 + v14 - a3 + 1))
                        {
                          v293 = (int8x16_t *)(v12 + v14 - a3 + 1);
                          break;
                        }
                      }
                    }
LABEL_529:
                    if ((unint64_t)v293 < v14 && v293->u8[0] == (_DWORD)v18)
                    {
                      v779 = 0;
                      *(_BYTE *)(a1 + 25) |= 1u;
                      *(_QWORD *)(a1 + 32) = a3;
                      *(_QWORD *)(a1 + 48) = (char *)v293->i64 + 1;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v293 - a3) & 0x7FFFFFFF;
                      v327 = 4;
                      goto LABEL_532;
                    }
                    JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
                    goto LABEL_1055;
                  }
                  if ((_DWORD)v18 == 110)
                  {
                    if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
                    {
                      *v13 = (unsigned __int8 *)(v12 + 4);
                      v633 = 13;
LABEL_1159:
                      *v16 = v633;
                      goto LABEL_287;
                    }
                  }
                  else if ((_DWORD)v18 == 102)
                  {
                    if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
                    {
                      *v13 = (unsigned __int8 *)(v12 + 5);
                      v633 = 12;
                      goto LABEL_1159;
                    }
                  }
                  else if ((_DWORD)v18 == 116
                         && (uint64_t)(v14 - v12) >= 4
                         && *(_WORD *)(v12 + 1) == 30066
                         && *(_BYTE *)(v12 + 3) == 101)
                  {
                    *v13 = (unsigned __int8 *)(v12 + 4);
                    v633 = 11;
                    goto LABEL_1159;
                  }
                  v691 = v12;
                  *(_QWORD *)(a1 + 32) = v12;
                  v692 = v12;
                  if (v12 < v14)
                  {
                    v693 = v14 - v12;
                    v694 = v12 + v693;
                    while (1)
                    {
                      v695 = *(unsigned __int8 *)v12;
                      if (v695 != 36)
                      {
                        v696 = v695 != 95 && (v695 - 48) >= 0xA;
                        if (v696 && (v695 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      *v13 = (unsigned __int8 *)++v12;
                      if (!--v693)
                      {
                        LODWORD(v12) = v694;
                        break;
                      }
                    }
                    v692 = v12;
                  }
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v692 - v691) & 0x7FFFFFFF;
                  v412 = 5;
                  goto LABEL_757;
                }
                v448 = (_DWORD)v18 != 45 || !v374;
                v449 = (unsigned __int8 *)v12;
                if ((v448 & 1) == 0)
                {
                  v449 = (unsigned __int8 *)(v12 + 1);
                  *v13 = (unsigned __int8 *)(v12 + 1);
                }
                if ((unint64_t)v449 >= v14)
                  goto LABEL_1472;
                v450 = *v449;
                if (v450 == 48)
                {
                  v452 = v449 + 1;
                  *v13 = v452;
                  goto LABEL_843;
                }
                if ((v450 - 49) > 8)
                {
LABEL_1472:
                  v750 = WTF::fastCompactMalloc((WTF *)0x20);
                  v658 = (WTF *)v750;
                  v751 = 0xE00000002;
                  v752 = "Invalid number";
                  goto LABEL_1473;
                }
                v451 = v449 + 1;
                do
                {
                  v452 = v451;
                  *v13 = v451;
                  if ((unint64_t)v451 >= v14)
                    break;
                  ++v451;
                }
                while (*v452 - 48 < 0xA);
LABEL_843:
                if ((unint64_t)v452 < v14)
                {
                  v453 = *v452;
                  if (v453 == 46)
                  {
                    *v13 = v452 + 1;
                    if ((unint64_t)(v452 + 1) >= v14 || v452[1] - 48 > 9)
                    {
                      v750 = WTF::fastCompactMalloc((WTF *)0x20);
                      v658 = (WTF *)v750;
                      v751 = 0x2200000002;
                      v752 = "Invalid digits after decimal point";
                      goto LABEL_1473;
                    }
                    v572 = v452 + 2;
                    do
                    {
                      v452 = v572;
                      *v13 = v572;
                      if ((unint64_t)v572 >= v14)
                        break;
                      ++v572;
                    }
                    while (*v452 - 48 < 0xA);
                  }
                  else if (v453 != 69 && v453 != 101 && (uint64_t)&v452[-v12] <= 9)
                  {
                    *v16 = 6;
                    v454 = *(unsigned __int8 *)v12;
                    if (v454 == 45)
                      v455 = (unsigned __int8 *)(v12 + 1);
                    else
                      v455 = (unsigned __int8 *)v12;
                    if (v455 >= v452)
                    {
                      if (v454 != 45)
                      {
                        v456 = 0;
                        goto LABEL_855;
                      }
                    }
                    else
                    {
                      v456 = 0;
                      do
                      {
                        v457 = *v455++;
                        v456 = v457 + 10 * v456 - 48;
                      }
                      while (v455 < v452);
                      if (v454 != 45)
                      {
LABEL_855:
                        v458 = (double)v456;
                        goto LABEL_856;
                      }
                      if (v456)
                      {
                        v458 = (double)-v456;
                        goto LABEL_856;
                      }
                    }
                    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                    goto LABEL_285;
                  }
                }
                if ((unint64_t)v452 < v14 && (*v452 | 0x20) == 0x65)
                {
                  v753 = v452 + 1;
                  *v13 = v452 + 1;
                  if ((unint64_t)(v452 + 1) < v14)
                  {
                    v754 = *v753;
                    if (v754 == 45 || v754 == 43)
                    {
                      v753 = v452 + 2;
                      *v13 = v452 + 2;
                    }
                  }
                  if ((unint64_t)v753 >= v14 || *v753 - 48 > 9)
                  {
                    v750 = WTF::fastCompactMalloc((WTF *)0x20);
                    v658 = (WTF *)v750;
                    v751 = 0x5D00000002;
                    v752 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_1473;
                  }
                  v755 = v753 + 1;
                  do
                  {
                    v452 = v755;
                    *v13 = v755;
                    if ((unint64_t)v755 >= v14)
                      break;
                    ++v755;
                  }
                  while (*v452 - 48 < 0xA);
                }
                *v16 = 6;
                v14 = (unint64_t)&v452[-v12];
                if ((uint64_t)&v452[-v12] < 0)
                  goto LABEL_1169;
                v780 = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v452, (unint64_t *)&v780, 0x2E00000005);
                v458 = *(double *)&v780;
LABEL_856:
                *(double *)(a1 + 32) = v458;
                goto LABEL_285;
              }
LABEL_377:
              if (a3 >= v14)
              {
                v90 = (int8x16_t *)a3;
              }
              else
              {
                v90 = (int8x16_t *)a3;
                while (1)
                {
                  v258 = v90->u8[0];
                  v259 = v258 < 0x20 || v258 == 92;
                  v260 = v259 || v258 == (_DWORD)v18;
                  v261 = v260;
                  if (v258 != 9 && v261)
                    break;
                  v90 = (int8x16_t *)((char *)v90 + 1);
                  *v13 = (unsigned __int8 *)v90;
                  if (v90 == (int8x16_t *)(v12 + v14 - a3 + 1))
                  {
                    v90 = (int8x16_t *)(v12 + v14 - a3 + 1);
                    goto LABEL_280;
                  }
                }
              }
              goto LABEL_280;
            }
            if (*(_BYTE *)(a1 + 40))
            {
              a3 = v12 + 1;
              *v13 = (unsigned __int8 *)(v12 + 1);
              goto LABEL_377;
            }
            v678 = WTF::fastCompactMalloc((WTF *)0x20);
            v475 = (WTF *)v678;
            v679 = 0x2900000002;
            v680 = "Single quotes (') are not allowed in JSON";
LABEL_1316:
            *(_QWORD *)v678 = v679;
            *(_QWORD *)(v678 + 8) = v680;
            *(_DWORD *)(v678 + 16) = 4;
LABEL_869:
            v476 = *v17;
            *v17 = v475;
            if (v476)
            {
              if (*(_DWORD *)v476 == 2)
              {
                WTF::StringImpl::~StringImpl(v476, a2, a3, v18, a5, a6, a7, a8);
                WTF::fastFree(v588, v589, v590, v591, v592, v593, v594, v595);
              }
              else
              {
                *(_DWORD *)v476 -= 2;
              }
            }
            goto LABEL_174;
          }
          goto LABEL_173;
        }
        if (v87 != 6)
        {
          if (v87 != 5)
          {
            if (v87 - 18 < 2)
            {
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
              v475 = v780;
              if (!v780)
              {
                __break(0xC471u);
                JUMPOUT(0x198B0CD08);
              }
              *(_QWORD *)v780 = 0x1600000002;
              *((_QWORD *)v475 + 1) = (char *)v475 + 20;
              *((_DWORD *)v475 + 4) = 4;
              *((_DWORD *)v475 + 9) = 656436837;
              *(_OWORD *)((char *)v475 + 20) = *(_OWORD *)"Unrecognized token '";
              *((_BYTE *)v475 + 40) = *(_BYTE *)v12;
              *((_BYTE *)v475 + 41) = 39;
              goto LABEL_869;
            }
LABEL_173:
            *v16 = v87;
            *v13 = (unsigned __int8 *)(v12 + 1);
            goto LABEL_174;
          }
          if ((_DWORD)v18 == 110)
          {
            if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
            {
              *v13 = (unsigned __int8 *)(v12 + 4);
              v390 = 13;
LABEL_633:
              *v16 = v390;
              goto LABEL_174;
            }
          }
          else if ((_DWORD)v18 == 102)
          {
            if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
            {
              *v13 = (unsigned __int8 *)(v12 + 5);
              v390 = 12;
              goto LABEL_633;
            }
          }
          else if ((_DWORD)v18 == 116
                 && (uint64_t)(v14 - v12) >= 4
                 && *(_WORD *)(v12 + 1) == 30066
                 && *(_BYTE *)(v12 + 3) == 101)
          {
            *v13 = (unsigned __int8 *)(v12 + 4);
            v390 = 11;
            goto LABEL_633;
          }
          v581 = v12;
          *(_QWORD *)(a1 + 32) = v12;
          v582 = v12;
          if (v12 < v14)
          {
            v583 = v14 - v12;
            v584 = v12 + v583;
            while (1)
            {
              v585 = *(unsigned __int8 *)v12;
              if (v585 != 36)
              {
                v586 = v585 != 95 && (v585 - 48) >= 0xA;
                if (v586 && (v585 | 0x20u) - 97 > 0x19)
                  break;
              }
              *v13 = (unsigned __int8 *)++v12;
              if (!--v583)
              {
                LODWORD(v12) = v584;
                break;
              }
            }
            v582 = v12;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v582 - v581) & 0x7FFFFFFF;
          v218 = 5;
LABEL_283:
          *(_BYTE *)(a1 + 24) = v218;
          goto LABEL_174;
        }
        v248 = (_DWORD)v18 != 45 || !v86;
        v249 = (unsigned __int8 *)v12;
        if ((v248 & 1) == 0)
        {
          v249 = (unsigned __int8 *)(v12 + 1);
          *v13 = (unsigned __int8 *)(v12 + 1);
        }
        if ((unint64_t)v249 >= v14)
          goto LABEL_1315;
        v250 = *v249;
        if (v250 == 48)
        {
          v239 = v249 + 1;
          *v13 = v239;
          goto LABEL_363;
        }
        if ((v250 - 49) > 8)
        {
LABEL_1315:
          v678 = WTF::fastCompactMalloc((WTF *)0x20);
          v475 = (WTF *)v678;
          v679 = 0xE00000002;
          v680 = "Invalid number";
          goto LABEL_1316;
        }
        v251 = v249 + 1;
        do
        {
          v239 = v251;
          *v13 = v251;
          if ((unint64_t)v251 >= v14)
            break;
          ++v251;
        }
        while (*v239 - 48 < 0xA);
LABEL_363:
        if ((unint64_t)v239 < v14)
        {
          v252 = *v239;
          if (v252 == 46)
          {
            *v13 = v239 + 1;
            if ((unint64_t)(v239 + 1) >= v14 || v239[1] - 48 > 9)
            {
              v678 = WTF::fastCompactMalloc((WTF *)0x20);
              v475 = (WTF *)v678;
              v679 = 0x2200000002;
              v680 = "Invalid digits after decimal point";
              goto LABEL_1316;
            }
            v240 = v239 + 2;
            do
            {
              v239 = v240;
              *v13 = v240;
              if ((unint64_t)v240 >= v14)
                break;
              ++v240;
            }
            while (*v239 - 48 < 0xA);
          }
          else if (v252 != 69 && v252 != 101 && (uint64_t)&v239[-v12] <= 9)
          {
            *v16 = 6;
            v253 = *(unsigned __int8 *)v12;
            if (v253 == 45)
              v254 = (unsigned __int8 *)(v12 + 1);
            else
              v254 = (unsigned __int8 *)v12;
            if (v254 >= v239)
            {
              if (v253 != 45)
              {
                v255 = 0;
                goto LABEL_375;
              }
            }
            else
            {
              v255 = 0;
              do
              {
                v256 = *v254++;
                v255 = v256 + 10 * v255 - 48;
              }
              while (v254 < v239);
              if (v253 != 45)
              {
LABEL_375:
                v257 = (double)v255;
                goto LABEL_376;
              }
              if (v255)
              {
                v257 = (double)-v255;
                goto LABEL_376;
              }
            }
            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
            goto LABEL_174;
          }
        }
        if ((unint64_t)v239 < v14 && (*v239 | 0x20) == 0x65)
        {
          v681 = v239 + 1;
          *v13 = v239 + 1;
          if ((unint64_t)(v239 + 1) < v14)
          {
            v682 = *v681;
            if (v682 == 45 || v682 == 43)
            {
              v681 = v239 + 2;
              *v13 = v239 + 2;
            }
          }
          if ((unint64_t)v681 >= v14 || *v681 - 48 > 9)
          {
            v678 = WTF::fastCompactMalloc((WTF *)0x20);
            v475 = (WTF *)v678;
            v679 = 0x5D00000002;
            v680 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_1316;
          }
          v683 = v681 + 1;
          do
          {
            v239 = v683;
            *v13 = v683;
            if ((unint64_t)v683 >= v14)
              break;
            ++v683;
          }
          while (*v239 - 48 < 0xA);
        }
        *v16 = 6;
        v14 = (unint64_t)&v239[-v12];
        if ((uint64_t)&v239[-v12] < 0)
          goto LABEL_1169;
        v780 = 0;
        fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v239, (unint64_t *)&v780, 0x2E00000005);
        v257 = *(double *)&v780;
LABEL_376:
        *(double *)(a1 + 32) = v257;
        goto LABEL_174;
      }
      if (v68)
        goto LABEL_206;
      v785 = 2;
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      if (v12 >= v14)
      {
        v343 = 0;
      }
      else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
      {
        v399 = *(unsigned __int8 **)(a1 + 56);
        v400 = (unsigned __int8 *)(v12 + 1);
        v401 = ~v12 + v14;
        while (1)
        {
          v402 = v400;
          *v13 = v400;
          if (!v401)
            break;
          ++v400;
          --v401;
          if (JSC::tokenTypesOfLatin1Characters[*v402] != 19)
          {
            v399 = v402;
            break;
          }
        }
        v343 = (unint64_t)v402 < v14;
        v12 = (unint64_t)v399;
      }
      else
      {
        v343 = 1;
      }
      if (v12 == v14)
        goto LABEL_813;
      *v16 = 18;
      v18 = *(unsigned __int8 *)v12;
      v80 = JSC::tokenTypesOfLatin1Characters[v18];
      if (v80 > 4)
      {
        if (v80 != 6)
        {
          if (v80 == 5)
          {
            if ((_DWORD)v18 == 110)
            {
              if ((uint64_t)(v14 - v12) >= 4 && *(_WORD *)(v12 + 1) == 27765 && *(_BYTE *)(v12 + 3) == 108)
                goto LABEL_638;
            }
            else if ((_DWORD)v18 == 102)
            {
              if ((uint64_t)(v14 - v12) >= 5 && *(_WORD *)(v12 + 1) == 27745 && *(_WORD *)(v12 + 3) == 25971)
                goto LABEL_718;
            }
            else if ((_DWORD)v18 == 116
                   && (uint64_t)(v14 - v12) >= 4
                   && *(_WORD *)(v12 + 1) == 30066
                   && *(_BYTE *)(v12 + 3) == 101)
            {
              goto LABEL_972;
            }
            v665 = v12;
            *(_QWORD *)(a1 + 32) = v12;
            v666 = v12;
            if (v12 < v14)
            {
              v667 = v14 - v12;
              v668 = v12 + v667;
              while (1)
              {
                v669 = *(unsigned __int8 *)v12;
                if (v669 != 36)
                {
                  v670 = v669 != 95 && (v669 - 48) >= 0xA;
                  if (v670 && (v669 | 0x20u) - 97 > 0x19)
                    break;
                }
                *v13 = (unsigned __int8 *)++v12;
                if (!--v667)
                {
LABEL_1297:
                  LODWORD(v12) = v668;
                  break;
                }
              }
LABEL_1298:
              v666 = v12;
            }
LABEL_1299:
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v666 - v665) & 0x7FFFFFFF;
            v234 = 5;
            goto LABEL_318;
          }
          if (v80 - 18 < 2)
          {
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
            v397 = v780;
            if (!v780)
            {
              __break(0xC471u);
              JUMPOUT(0x198B0A77CLL);
            }
LABEL_913:
            *(_QWORD *)v397 = 0x1600000002;
            *((_QWORD *)v397 + 1) = (char *)v397 + 20;
            *((_DWORD *)v397 + 4) = 4;
            *((_DWORD *)v397 + 9) = 656436837;
            *(_OWORD *)((char *)v397 + 20) = *(_OWORD *)"Unrecognized token '";
            *((_BYTE *)v397 + 40) = *(_BYTE *)v12;
            *((_BYTE *)v397 + 41) = 39;
            goto LABEL_914;
          }
          goto LABEL_144;
        }
        v418 = (_DWORD)v18 != 45 || !v343;
        v419 = (unsigned __int8 *)v12;
        if ((v418 & 1) == 0)
        {
          v419 = (unsigned __int8 *)(v12 + 1);
          *v13 = (unsigned __int8 *)(v12 + 1);
        }
        if ((unint64_t)v419 >= v14)
          goto LABEL_1313;
        v420 = *v419;
        if (v420 == 48)
        {
          v422 = v419 + 1;
          *v13 = v422;
        }
        else
        {
          if ((v420 - 49) > 8)
            goto LABEL_1313;
          v421 = v419 + 1;
          do
          {
            v422 = v421;
            *v13 = v421;
            if ((unint64_t)v421 >= v14)
              break;
            ++v421;
          }
          while (*v422 - 48 < 0xA);
        }
        if ((unint64_t)v422 < v14)
        {
          v423 = *v422;
          if (v423 == 46)
          {
            *v13 = v422 + 1;
            if ((unint64_t)(v422 + 1) >= v14 || v422[1] - 48 > 9)
              goto LABEL_1324;
            v541 = v422 + 2;
            do
            {
              v422 = v541;
              *v13 = v541;
              if ((unint64_t)v541 >= v14)
                break;
              ++v541;
            }
            while (*v422 - 48 < 0xA);
          }
          else if (v423 != 69 && v423 != 101 && (uint64_t)&v422[-v12] <= 9)
          {
            *v16 = 6;
            v424 = *(unsigned __int8 *)v12;
            if (v424 == 45)
              v425 = (unsigned __int8 *)(v12 + 1);
            else
              v425 = (unsigned __int8 *)v12;
            if (v425 >= v422)
            {
              if (v424 != 45)
              {
                v426 = 0;
                goto LABEL_793;
              }
            }
            else
            {
              v426 = 0;
              do
              {
                v427 = *v425++;
                v426 = v427 + 10 * v426 - 48;
              }
              while (v425 < v422);
              if (v424 != 45)
              {
LABEL_793:
                v409 = (double)v426;
LABEL_794:
                *(double *)(a1 + 32) = v409;
                goto LABEL_795;
              }
              if (v426)
              {
                v409 = (double)-v426;
                goto LABEL_794;
              }
            }
            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
            v409 = -0.0;
            goto LABEL_795;
          }
        }
        if ((unint64_t)v422 < v14 && (*v422 | 0x20) == 0x65)
        {
          v747 = v422 + 1;
          *v13 = v422 + 1;
          if ((unint64_t)(v422 + 1) < v14)
          {
            v748 = *v747;
            if (v748 == 45 || v748 == 43)
            {
              v747 = v422 + 2;
              *v13 = v422 + 2;
            }
          }
          if ((unint64_t)v747 >= v14 || *v747 - 48 > 9)
            goto LABEL_1471;
          v749 = v747 + 1;
          do
          {
            v422 = v749;
            *v13 = v749;
            if ((unint64_t)v749 >= v14)
              break;
            ++v749;
          }
          while (*v422 - 48 < 0xA);
        }
        *v16 = 6;
        v14 = (unint64_t)&v422[-v12];
        if ((uint64_t)&v422[-v12] < 0)
          goto LABEL_1169;
        v780 = 0;
        fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v422, (unint64_t *)&v780, 0x2E00000005);
        v409 = *(double *)&v780;
        goto LABEL_794;
      }
      if (v80 != 4)
        goto LABEL_144;
      v344 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v18 == 39)
      {
        if (!*(_BYTE *)(a1 + 40))
          goto LABEL_1572;
        a3 = v12 + 1;
        *v13 = (unsigned __int8 *)(v12 + 1);
LABEL_1487:
        if (a3 >= v14)
        {
          v85 = (int8x16_t *)a3;
        }
        else
        {
          v85 = (int8x16_t *)a3;
          while (1)
          {
            v756 = v85->u8[0];
            v757 = v756 < 0x20 || v756 == 92;
            v758 = v757 || v756 == (_DWORD)v18;
            v759 = v758;
            if (v756 != 9 && v759)
              break;
            v85 = (int8x16_t *)((char *)v85 + 1);
            *v13 = (unsigned __int8 *)v85;
            if (v85 == (int8x16_t *)(v12 + v14 - a3 + 1))
            {
              v85 = (int8x16_t *)(v12 + v14 - a3 + 1);
              goto LABEL_740;
            }
          }
        }
        goto LABEL_740;
      }
      a3 = v12 + 1;
      *v13 = (unsigned __int8 *)(v12 + 1);
      if (v344)
        goto LABEL_1487;
      v345 = v14 - a3;
      if ((uint64_t)(v14 - a3) < 0)
        goto LABEL_1169;
      v85 = (int8x16_t *)(v345 + v12 + 1);
      if (v345 >= 0x10)
      {
        v346 = (unsigned __int8 *)(v12 + 16);
        while (1)
        {
          v347 = *(int8x16_t *)(v346 - 15);
          v348.i64[0] = 0x2222222222222222;
          v348.i64[1] = 0x2222222222222222;
          v349 = vceqq_s8(v347, v348);
          v350.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
          v350.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
          v351.i64[0] = 0x2020202020202020;
          v351.i64[1] = 0x2020202020202020;
          v352 = vorrq_s8(vorrq_s8(vceqq_s8(v347, v350), (int8x16_t)vcgtq_u8(v351, (uint8x16_t)v347)), v349);
          v349.i8[0] = vmaxvq_u8((uint8x16_t)v352);
          if (v349.i32[0])
            break;
          v346 += 16;
          if (v346 >= (unsigned __int8 *)v85)
          {
            if (v346 - 15 >= (unsigned __int8 *)v85)
              goto LABEL_739;
            v353 = (unsigned __int8 *)&v85[-1];
            v354 = v85[-1];
            v355.i64[0] = 0x2222222222222222;
            v355.i64[1] = 0x2222222222222222;
            v356 = vceqq_s8(v354, v355);
            v357.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v357.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v352 = vorrq_s8(vorrq_s8(vceqq_s8(v354, v357), (int8x16_t)vcgtq_u8(v351, (uint8x16_t)v354)), v356);
            v356.i8[0] = vmaxvq_u8((uint8x16_t)v352);
            if (!v356.i32[0])
              goto LABEL_739;
LABEL_738:
            v408 = (uint8x16_t)vornq_s8(v777, v352);
            v408.i8[0] = vminvq_u8(v408);
            v85 = (int8x16_t *)&v353[v408.u32[0]];
            goto LABEL_739;
          }
        }
        v353 = v346 - 15;
        goto LABEL_738;
      }
      v639 = (int8x16_t *)(v12 + 1);
      if (v14 == a3)
        goto LABEL_739;
      do
      {
        if (!JSC::safeStringLatin1CharactersInStrictJSON[v639->u8[0]])
        {
          v85 = v639;
          break;
        }
        v639 = (int8x16_t *)((char *)v639 + 1);
        --v345;
      }
      while (v345);
LABEL_739:
      *v13 = (unsigned __int8 *)v85;
LABEL_740:
      if ((unint64_t)v85 < v14 && v85->u8[0] == (_DWORD)v18)
        goto LABEL_317;
      if (JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8) != 6)goto LABEL_204;
      v409 = *(double *)(a1 + 32);
LABEL_795:
      v779 = 1;
      if ((int)v409 < 0 || v409 != (double)(int)v409)
        goto LABEL_206;
      v784 = (int)v409;
      v12 = *(_QWORD *)(a1 + 48);
      v14 = *(_QWORD *)(a1 + 56);
      if (v12 >= v14)
      {
        v428 = 0;
      }
      else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v12] == 19)
      {
        v501 = *(unsigned __int8 **)(a1 + 56);
        v502 = (unsigned __int8 *)(v12 + 1);
        v503 = ~v12 + v14;
        while (1)
        {
          v504 = v502;
          *v13 = v502;
          if (!v503)
            break;
          ++v502;
          --v503;
          if (JSC::tokenTypesOfLatin1Characters[*v504] != 19)
          {
            v501 = v504;
            break;
          }
        }
        v428 = (unint64_t)v504 < v14;
        v12 = (unint64_t)v501;
      }
      else
      {
        v428 = 1;
      }
      if (v12 == v14)
        goto LABEL_813;
      *v16 = 18;
      v18 = *(unsigned __int8 *)v12;
      v429 = JSC::tokenTypesOfLatin1Characters[v18];
      if (v429 <= 4)
      {
        if (v429 == 4)
        {
          v430 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v18 == 39)
          {
            if (!*(_BYTE *)(a1 + 40))
              goto LABEL_1572;
            a3 = v12 + 1;
            *v13 = (unsigned __int8 *)(v12 + 1);
          }
          else
          {
            a3 = v12 + 1;
            *v13 = (unsigned __int8 *)(v12 + 1);
            if (!v430)
            {
              v431 = v14 - a3;
              if ((uint64_t)(v14 - a3) < 0)
                goto LABEL_1169;
              v85 = (int8x16_t *)(v431 + v12 + 1);
              if (v431 >= 0x10)
              {
                v432 = (unsigned __int8 *)(v12 + 16);
                while (1)
                {
                  v433 = *(int8x16_t *)(v432 - 15);
                  v434.i64[0] = 0x2222222222222222;
                  v434.i64[1] = 0x2222222222222222;
                  v435 = vceqq_s8(v433, v434);
                  v436.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v436.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v437.i64[0] = 0x2020202020202020;
                  v437.i64[1] = 0x2020202020202020;
                  v438 = vorrq_s8(vorrq_s8(vceqq_s8(v433, v436), (int8x16_t)vcgtq_u8(v437, (uint8x16_t)v433)), v435);
                  v435.i8[0] = vmaxvq_u8((uint8x16_t)v438);
                  if (v435.i32[0])
                    break;
                  v432 += 16;
                  if (v432 >= (unsigned __int8 *)v85)
                  {
                    if (v432 - 15 >= (unsigned __int8 *)v85)
                      goto LABEL_940;
                    v439 = (unsigned __int8 *)&v85[-1];
                    v440 = v85[-1];
                    v441.i64[0] = 0x2222222222222222;
                    v441.i64[1] = 0x2222222222222222;
                    v442 = vceqq_s8(v440, v441);
                    v443.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v443.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v438 = vorrq_s8(vorrq_s8(vceqq_s8(v440, v443), (int8x16_t)vcgtq_u8(v437, (uint8x16_t)v440)), v442);
                    v442.i8[0] = vmaxvq_u8((uint8x16_t)v438);
                    if (!v442.i32[0])
                      goto LABEL_940;
LABEL_939:
                    v510 = (uint8x16_t)vornq_s8(v777, v438);
                    v510.i8[0] = vminvq_u8(v510);
                    v85 = (int8x16_t *)&v439[v510.u32[0]];
                    goto LABEL_940;
                  }
                }
                v439 = v432 - 15;
                goto LABEL_939;
              }
              v661 = (int8x16_t *)(v12 + 1);
              if (v14 == a3)
                goto LABEL_940;
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v661->u8[0]])
                {
                  v85 = v661;
                  break;
                }
                v661 = (int8x16_t *)((char *)v661 + 1);
                --v431;
              }
              while (v431);
LABEL_940:
              *v13 = (unsigned __int8 *)v85;
LABEL_941:
              if ((unint64_t)v85 < v14 && v85->u8[0] == (_DWORD)v18)
                goto LABEL_317;
              v429 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8);
LABEL_876:
              if (v429 != 1)
                goto LABEL_204;
              goto LABEL_877;
            }
          }
          if (a3 >= v14)
          {
            v85 = (int8x16_t *)a3;
          }
          else
          {
            v85 = (int8x16_t *)a3;
            while (1)
            {
              v773 = v85->u8[0];
              v774 = v773 < 0x20 || v773 == 92;
              v775 = v774 || v773 == (_DWORD)v18;
              v776 = v775;
              if (v773 != 9 && v776)
                break;
              v85 = (int8x16_t *)((char *)v85 + 1);
              *v13 = (unsigned __int8 *)v85;
              if (v85 == (int8x16_t *)(v12 + v14 - a3 + 1))
              {
                v85 = (int8x16_t *)(v12 + v14 - a3 + 1);
                goto LABEL_941;
              }
            }
          }
          goto LABEL_941;
        }
LABEL_875:
        *v16 = v429;
        *v13 = (unsigned __int8 *)(v12 + 1);
        goto LABEL_876;
      }
      if (v429 == 6)
      {
        v542 = (_DWORD)v18 != 45 || !v428;
        v543 = (unsigned __int8 *)v12;
        if ((v542 & 1) == 0)
        {
          v543 = (unsigned __int8 *)(v12 + 1);
          *v13 = (unsigned __int8 *)(v12 + 1);
        }
        if ((unint64_t)v543 < v14)
        {
          v544 = *v543;
          if (v544 == 48)
          {
            v241 = v543 + 1;
            *v13 = v241;
            goto LABEL_1039;
          }
          if ((v544 - 49) <= 8)
          {
            v545 = v543 + 1;
            do
            {
              v241 = v545;
              *v13 = v545;
              if ((unint64_t)v545 >= v14)
                break;
              ++v545;
            }
            while (*v241 - 48 < 0xA);
LABEL_1039:
            if ((unint64_t)v241 >= v14)
              goto LABEL_1180;
            v546 = *v241;
            if (v546 != 46)
            {
              if (v546 != 69 && v546 != 101 && (uint64_t)&v241[-v12] <= 9)
              {
                *v16 = 6;
                v269 = *(unsigned __int8 *)v12;
                if (v269 == 45)
                  v547 = (unsigned __int8 *)(v12 + 1);
                else
                  v547 = (unsigned __int8 *)v12;
                if (v547 < v241)
                {
                  v264 = 0;
                  do
                  {
                    v548 = *v547++;
                    v264 = v548 + 10 * v264 - 48;
                  }
                  while (v547 < v241);
                  goto LABEL_412;
                }
LABEL_1051:
                if (v269 != 45)
                {
                  v264 = 0;
                  goto LABEL_413;
                }
LABEL_1053:
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                goto LABEL_204;
              }
LABEL_1180:
              if ((unint64_t)v241 < v14 && (*v241 | 0x20) == 0x65)
              {
                v636 = v241 + 1;
                *v13 = v241 + 1;
                if ((unint64_t)(v241 + 1) < v14)
                {
                  v637 = *v636;
                  if (v637 == 45 || v637 == 43)
                  {
                    v636 = v241 + 2;
                    *v13 = v241 + 2;
                  }
                }
                if ((unint64_t)v636 < v14 && *v636 - 48 <= 9)
                {
                  v638 = v636 + 1;
                  do
                  {
                    v241 = v638;
                    *v13 = v638;
                    if ((unint64_t)v638 >= v14)
                      break;
                    ++v638;
                  }
                  while (*v241 - 48 < 0xA);
                  goto LABEL_524;
                }
LABEL_1471:
                v675 = WTF::fastCompactMalloc((WTF *)0x20);
                v397 = (WTF *)v675;
                v676 = 0x5D00000002;
                v677 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                goto LABEL_1314;
              }
LABEL_524:
              *v16 = 6;
              v14 = (unint64_t)&v241[-v12];
              if ((uint64_t)&v241[-v12] >= 0)
              {
                v780 = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v12, v241, (unint64_t *)&v780, 0x2E00000005);
                v272 = *(double *)&v780;
                goto LABEL_414;
              }
LABEL_1169:
              __break(1u);
LABEL_1170:
              if ((_DWORD)v18 == 116
                && (uint64_t)(v14 - v12) >= 4
                && *(_WORD *)(v12 + 1) == 30066
                && *(_BYTE *)(v12 + 3) == 101)
              {
                v779 = 0;
                *v13 = (unsigned __int8 *)(v12 + 4);
                v444 = 11;
                goto LABEL_820;
              }
LABEL_1213:
              v640 = v12;
              *(_QWORD *)(a1 + 32) = v12;
              v641 = v12;
              if (v12 < v14)
              {
                v642 = v14 - v12;
                v643 = v12 + v642;
                while (1)
                {
                  v644 = *(unsigned __int8 *)v12;
                  if (v644 != 36)
                  {
                    v645 = v644 != 95 && (v644 - 48) >= 0xA;
                    if (v645 && (v644 | 0x20u) - 97 > 0x19)
                      break;
                  }
                  *v13 = (unsigned __int8 *)++v12;
                  if (!--v642)
                  {
                    LODWORD(v12) = v643;
                    break;
                  }
                }
                v641 = v12;
              }
              v779 = 0;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (v641 - v640) & 0x7FFFFFFF;
              v327 = 5;
LABEL_532:
              *(_BYTE *)(a1 + 24) = v327;
              goto LABEL_206;
            }
            *v13 = v241 + 1;
            if ((unint64_t)(v241 + 1) < v14 && v241[1] - 48 <= 9)
            {
              v635 = v241 + 2;
              do
              {
                v241 = v635;
                *v13 = v635;
                if ((unint64_t)v635 >= v14)
                  break;
                ++v635;
              }
              while (*v241 - 48 < 0xA);
              goto LABEL_1180;
            }
LABEL_1324:
            v675 = WTF::fastCompactMalloc((WTF *)0x20);
            v397 = (WTF *)v675;
            v676 = 0x2200000002;
            v677 = "Invalid digits after decimal point";
            goto LABEL_1314;
          }
        }
LABEL_1313:
        v675 = WTF::fastCompactMalloc((WTF *)0x20);
        v397 = (WTF *)v675;
        v676 = 0xE00000002;
        v677 = "Invalid number";
        goto LABEL_1314;
      }
      if (v429 != 5)
      {
        if (v429 - 18 < 2)
        {
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v780);
          v397 = v780;
          if (!v780)
          {
            __break(0xC471u);
            JUMPOUT(0x198B0C8B4);
          }
          goto LABEL_913;
        }
        goto LABEL_875;
      }
      if ((_DWORD)v18 != 110)
      {
        if ((_DWORD)v18 == 102)
        {
          if ((uint64_t)(v14 - v12) < 5 || *(_WORD *)(v12 + 1) != 27745 || *(_WORD *)(v12 + 3) != 25971)
            goto LABEL_1388;
LABEL_718:
          *v13 = (unsigned __int8 *)(v12 + 5);
          v391 = 12;
          goto LABEL_639;
        }
        if ((_DWORD)v18 != 116
          || (uint64_t)(v14 - v12) < 4
          || *(_WORD *)(v12 + 1) != 30066
          || *(_BYTE *)(v12 + 3) != 101)
        {
LABEL_1388:
          v665 = v12;
          *(_QWORD *)(a1 + 32) = v12;
          v666 = v12;
          if (v12 < v14)
          {
            v710 = v14 - v12;
            v668 = v12 + v710;
            while (1)
            {
              v711 = *(unsigned __int8 *)v12;
              if (v711 != 36)
              {
                v712 = v711 != 95 && (v711 - 48) >= 0xA;
                if (v712 && (v711 | 0x20u) - 97 > 0x19)
                  goto LABEL_1298;
              }
              *v13 = (unsigned __int8 *)++v12;
              if (!--v710)
                goto LABEL_1297;
            }
          }
          goto LABEL_1299;
        }
LABEL_972:
        *v13 = (unsigned __int8 *)(v12 + 4);
        v391 = 11;
        goto LABEL_639;
      }
      if ((uint64_t)(v14 - v12) < 4 || *(_WORD *)(v12 + 1) != 27765 || *(_BYTE *)(v12 + 3) != 108)
        goto LABEL_1388;
LABEL_638:
      *v13 = (unsigned __int8 *)(v12 + 4);
      v391 = 13;
LABEL_639:
      *v16 = v391;
LABEL_204:
      v146 = 1;
LABEL_205:
      v779 = v146;
LABEL_206:
      v147 = v783;
      v783 = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
        {
          WTF::StringImpl::~StringImpl(v147, a2, a3, v18, a5, a6, a7, a8);
          WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
        }
        else
        {
          *(_DWORD *)v147 -= 2;
        }
      }
      v148 = v786;
      v786 = 0;
      if (v148)
      {
        if (*(_DWORD *)v148 == 2)
        {
          WTF::StringImpl::~StringImpl(v148, a2, a3, v18, a5, a6, a7, a8);
          WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
        }
        else
        {
          *(_DWORD *)v148 -= 2;
        }
      }
      if (HIDWORD(v788))
      {
        v149 = v787;
        v150 = 16 * HIDWORD(v788);
        do
        {
          v151 = *(WTF::StringImpl **)v149;
          *(_QWORD *)v149 = 0;
          if (v151)
          {
            if (*(_DWORD *)v151 == 2)
            {
              WTF::StringImpl::~StringImpl(v151, a2, a3, v18, a5, a6, a7, a8);
              WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
            }
            else
            {
              *(_DWORD *)v151 -= 2;
            }
          }
          v149 = (WTF *)((char *)v149 + 16);
          v150 -= 16;
        }
        while (v150);
      }
      if (v787)
        WTF::fastFree((unint64_t)v787, a2, a3, v18, a5, a6, a7, a8);
      if (v779)
      {
        if (v779 == 2)
          return *v16 == 14;
        return 0;
      }
      if (*v16 != 5)
        return *v16 == 14;
    }
    if (v80 != 4)
      goto LABEL_144;
    v192 = *(unsigned __int8 *)(a1 + 40);
    if ((_DWORD)v18 == 39)
    {
      if (!*(_BYTE *)(a1 + 40))
      {
LABEL_1572:
        v675 = WTF::fastCompactMalloc((WTF *)0x20);
        v397 = (WTF *)v675;
        v676 = 0x2900000002;
        v677 = "Single quotes (') are not allowed in JSON";
LABEL_1314:
        *(_QWORD *)v675 = v676;
        *(_QWORD *)(v675 + 8) = v677;
        *(_DWORD *)(v675 + 16) = 4;
LABEL_914:
        v505 = *v17;
        *v17 = v397;
        if (v505)
        {
          if (*(_DWORD *)v505 == 2)
          {
            WTF::StringImpl::~StringImpl(v505, a2, a3, v18, a5, a6, a7, a8);
            WTF::fastFree(v573, v574, v575, v576, v577, v578, v579, v580);
          }
          else
          {
            *(_DWORD *)v505 -= 2;
          }
        }
        goto LABEL_204;
      }
      a3 = v12 + 1;
      *v13 = (unsigned __int8 *)(v12 + 1);
    }
    else
    {
      a3 = v12 + 1;
      *v13 = (unsigned __int8 *)(v12 + 1);
      if (!v192)
      {
        v193 = v14 - a3;
        if ((uint64_t)(v14 - a3) < 0)
          goto LABEL_1169;
        v85 = (int8x16_t *)(v193 + v12 + 1);
        if (v193 >= 0x10)
        {
          v194 = (unsigned __int8 *)(v12 + 16);
          while (1)
          {
            v195 = *(int8x16_t *)(v194 - 15);
            v196.i64[0] = 0x2222222222222222;
            v196.i64[1] = 0x2222222222222222;
            v197 = vceqq_s8(v195, v196);
            v198.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v198.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v199.i64[0] = 0x2020202020202020;
            v199.i64[1] = 0x2020202020202020;
            v200 = vorrq_s8(vorrq_s8(vceqq_s8(v195, v198), (int8x16_t)vcgtq_u8(v199, (uint8x16_t)v195)), v197);
            v197.i8[0] = vmaxvq_u8((uint8x16_t)v200);
            if (v197.i32[0])
              break;
            v194 += 16;
            if (v194 >= (unsigned __int8 *)v85)
            {
              if (v194 - 15 >= (unsigned __int8 *)v85)
                goto LABEL_444;
              v287 = (unsigned __int8 *)&v85[-1];
              v743 = v85[-1];
              v744.i64[0] = 0x2222222222222222;
              v744.i64[1] = 0x2222222222222222;
              v745 = vceqq_s8(v743, v744);
              v746.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v746.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v200 = vorrq_s8(vorrq_s8(vceqq_s8(v743, v746), (int8x16_t)vcgtq_u8(v199, (uint8x16_t)v743)), v745);
              v745.i8[0] = vmaxvq_u8((uint8x16_t)v200);
              if (!v745.i32[0])
                goto LABEL_444;
LABEL_443:
              v288 = (uint8x16_t)vornq_s8(v777, v200);
              v288.i8[0] = vminvq_u8(v288);
              v85 = (int8x16_t *)&v287[v288.u32[0]];
              goto LABEL_444;
            }
          }
          v287 = v194 - 15;
          goto LABEL_443;
        }
        v447 = (int8x16_t *)(v12 + 1);
        if (v14 == a3)
          goto LABEL_444;
        do
        {
          if (!JSC::safeStringLatin1CharactersInStrictJSON[v447->u8[0]])
          {
            v85 = v447;
            break;
          }
          v447 = (int8x16_t *)((char *)v447 + 1);
          --v193;
        }
        while (v193);
LABEL_444:
        *v13 = (unsigned __int8 *)v85;
        goto LABEL_445;
      }
    }
    if (a3 >= v14)
    {
      v85 = (int8x16_t *)a3;
    }
    else
    {
      v85 = (int8x16_t *)a3;
      while (1)
      {
        v203 = v85->u8[0];
        v204 = v203 < 0x20 || v203 == 92;
        v205 = v204 || v203 == (_DWORD)v18;
        v206 = v205;
        if (v203 != 9 && v206)
          break;
        v85 = (int8x16_t *)((char *)v85 + 1);
        *v13 = (unsigned __int8 *)v85;
        if (v85 == (int8x16_t *)(v12 + v14 - a3 + 1))
        {
          v85 = (int8x16_t *)(v12 + v14 - a3 + 1);
          break;
        }
      }
    }
LABEL_445:
    if ((unint64_t)v85 < v14 && v85->u8[0] == (_DWORD)v18)
    {
LABEL_317:
      *(_BYTE *)(a1 + 25) |= 1u;
      *(_QWORD *)(a1 + 32) = a3;
      *(_QWORD *)(a1 + 48) = (char *)v85->i64 + 1;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | ((_DWORD)v85 - a3) & 0x7FFFFFFF;
      v234 = 4;
LABEL_318:
      *(_BYTE *)(a1 + 24) = v234;
      goto LABEL_204;
    }
    if (JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)(a1 + 16), a1 + 24, a3, v18, a5, a6, a7, a8) != 5)goto LABEL_204;
    v459 = *(WTF::AtomStringImpl **)(a1 + 32);
    v460 = *(_DWORD *)(a1 + 28);
    goto LABEL_860;
  }
  return 0;
}

uint64_t JSC::JSONPPathEntry::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v12;
  return a1;
}

void JSC::JSONPData::~JSONPData(JSC::JSONPData *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = (uint64_t *)(v9 - 16);
    v11 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v12 = *(uint64_t **)(v9 - 8);
    if (v12)
    {
      v13 = *v10;
      *v12 = *v10;
      *(_QWORD *)(v13 + 8) = v12;
      *v10 = 0;
      v10[1] = 0;
    }
    *v10 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;
    *((_QWORD *)this + 2) = 0;
  }
  v14 = *((unsigned int *)this + 3);
  if ((_DWORD)v14)
  {
    v16 = *(WTF::StringImpl ***)this;
    v17 = 16 * v14;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  v15 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t **JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set(unint64_t **result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t **v21;

  v8 = *result;
  if (!*result)
  {
    v9 = *(_QWORD **)(a2 + 712);
    if (!v9)
    {
      v21 = result;
      v19 = a2;
      v20 = a3;
      JSC::HandleSet::grow((JSC::HandleSet *)(a2 + 672), a2, a3, a4, a5, a6, a7, a8);
      a2 = v19;
      a3 = v20;
      result = v21;
      v9 = *(_QWORD **)(v19 + 712);
    }
    *(_QWORD *)(a2 + 712) = *v9;
    v9[2] = 0;
    v8 = v9 + 2;
    *v9 = 0;
    v9[1] = 0;
    *result = v9 + 2;
  }
  v10 = (unint64_t)(v8 - 2);
  v11 = *v8;
  v13 = (a3 & 0xFFFE000000000002) == 0 && a3 != 0;
  v14 = (v11 & 0xFFFE000000000002) == 0;
  if (!v11)
    v14 = 0;
  if (v14 != v13)
  {
    if ((v13 & 1) != 0)
    {
      v15 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFF000) + 0x10);
      v16 = v15[3];
      v15 += 3;
      *(_QWORD *)v10 = v16;
      *(v8 - 1) = (unint64_t)v15;
      *v15 = v10;
      *(_QWORD *)(v16 + 8) = v10;
    }
    else
    {
      v18 = *(_QWORD *)v10;
      v17 = (_QWORD *)*(v8 - 1);
      *v17 = *(_QWORD *)v10;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v10 + 8) = 0;
      v8 = *result;
    }
  }
  *v8 = a3;
  return result;
}

uint64_t JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(WTF::StringBuilder *this, uint64_t a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int8x16_t *v9;
  WTF::StringImpl *v12;
  WTF::StringBuilder *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int8x16_t *v16;
  unint64_t v17;
  __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int8x16_t *v24;
  int64_t v25;
  int8x16_t *v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int8x16_t v117;

  v8 = a4;
  v9 = (int8x16_t *)a3;
  v13 = (WTF::StringBuilder *)((char *)this + 48);
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *(_QWORD *)v13 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  *((_DWORD *)this + 16) = 0;
  v15 = *((unsigned __int8 *)this + 24);
  if ((_DWORD)v15 != 1)
  {
    while (1)
    {
      v16 = v9;
      v9 = (int8x16_t *)*((_QWORD *)this + 4);
      v17 = *((_QWORD *)this + 5);
      if ((unint64_t)v9 < v17 && v9->i8[0] == 92)
        break;
      while (1)
      {
        if ((_DWORD)v15 == 1)
          goto LABEL_105;
        if (v9 == v16)
          goto LABEL_105;
        v24 = (int8x16_t *)*((_QWORD *)this + 5);
        if (v9 >= v24 || v9->u8[0] == v8)
          goto LABEL_105;
        v25 = (char *)v24 - (char *)v9;
        v26 = v9;
        if ((_DWORD)v15)
        {
          while (1)
          {
            v27 = v26->u8[0];
            v28 = v27 < 0x20 || v27 == 92;
            v29 = v28 || v27 == v8;
            v30 = v29;
            if (v27 != 9 && v30)
              break;
            v26 = (int8x16_t *)((char *)v26 + 1);
            *((_QWORD *)this + 4) = v26;
            if (!--v25)
            {
LABEL_79:
              v26 = v24;
              break;
            }
          }
        }
        else
        {
          while (JSC::safeStringLatin1CharactersInStrictJSON[v26->u8[0]])
          {
            v26 = (int8x16_t *)((char *)v26 + 1);
            *((_QWORD *)this + 4) = v26;
            if (!--v25)
              goto LABEL_79;
          }
        }
        v17 = *((unsigned int *)this + 16);
        if (!(_DWORD)v17)
          goto LABEL_47;
        a3 = (char *)v26 - (char *)v9;
        if ((char *)v26 - (char *)v9 >= 0)
          break;
LABEL_73:
        __break(1u);
LABEL_74:
        *(_WORD *)(v17 + 2 * v15) = 47;
LABEL_21:
        v23 = 1;
LABEL_22:
        v9 = (int8x16_t *)(*((_QWORD *)this + 4) + v23);
        *((_QWORD *)this + 4) = v9;
        v15 = *((unsigned __int8 *)this + 24);
      }
      WTF::StringBuilder::append((uint64_t)v13, v9, a3, a4, a5, a6, a7, a8);
      v15 = *((unsigned __int8 *)this + 24);
LABEL_47:
      v16 = v9;
      if ((_DWORD)v15 == 1)
        goto LABEL_105;
    }
    v15 = *((unsigned int *)this + 16);
    if (v16 < v9 && (_DWORD)v15 == 0)
    {
      a3 = (char *)v9 - (char *)v16;
      if ((char *)v9 - (char *)v16 < 0)
        goto LABEL_73;
      WTF::StringBuilder::append((uint64_t)v13, v16, a3, a4, a5, a6, a7, a8);
      v9 = (int8x16_t *)*((_QWORD *)this + 4);
      v17 = *((_QWORD *)this + 5);
    }
    v19 = &v9->i8[1];
    *((_QWORD *)this + 4) = (char *)v9->i64 + 1;
    if ((unint64_t)v9->u64 + 1 < v17)
    {
      v20 = *v19;
      if (v20 == 47)
      {
        v117.i8[0] = 47;
        v21 = *((_QWORD *)this + 7);
        if (v21)
        {
          v15 = *((unsigned int *)this + 16);
          if (v15 < *(_DWORD *)(v21 + 4) && !*(_QWORD *)v13)
          {
            v22 = *(_DWORD *)(v21 + 16);
            v17 = *(_QWORD *)(v21 + 8);
            *((_DWORD *)this + 16) = v15 + 1;
            if ((v22 & 4) != 0)
            {
              *(_BYTE *)(v17 + v15) = 47;
              goto LABEL_21;
            }
            goto LABEL_74;
          }
        }
        goto LABEL_72;
      }
      if (*v19 <= 0x61u)
      {
        if (v20 == 92)
        {
          v117.i8[0] = 92;
          v31 = *((_QWORD *)this + 7);
          if (v31)
          {
            v32 = *((unsigned int *)this + 16);
            if (v32 < *(_DWORD *)(v31 + 4) && !*(_QWORD *)v13)
            {
              v33 = *(_DWORD *)(v31 + 16);
              v34 = *(_QWORD *)(v31 + 8);
              *((_DWORD *)this + 16) = v32 + 1;
              if ((v33 & 4) != 0)
                *(_BYTE *)(v34 + v32) = 92;
              else
                *(_WORD *)(v34 + 2 * v32) = 92;
              goto LABEL_21;
            }
          }
          goto LABEL_72;
        }
        if (v20 == 34)
        {
          v117.i8[0] = 34;
          v39 = *((_QWORD *)this + 7);
          if (v39)
          {
            v40 = *((unsigned int *)this + 16);
            if (v40 < *(_DWORD *)(v39 + 4) && !*(_QWORD *)v13)
            {
              v41 = *(_DWORD *)(v39 + 16);
              v42 = *(_QWORD *)(v39 + 8);
              *((_DWORD *)this + 16) = v40 + 1;
              if ((v41 & 4) != 0)
                *(_BYTE *)(v42 + v40) = 34;
              else
                *(_WORD *)(v42 + 2 * v40) = 34;
              goto LABEL_21;
            }
          }
LABEL_72:
          WTF::StringBuilder::append((uint64_t)v13, &v117, 1uLL, a4, a5, a6, a7, a8);
          goto LABEL_21;
        }
        if (v20 == 39 && *((_BYTE *)this + 24))
        {
          v59 = (uint64_t)v13;
          v60 = 39;
          goto LABEL_84;
        }
        goto LABEL_99;
      }
      switch(*v19)
      {
        case 'n':
          v117.i8[0] = 10;
          v35 = *((_QWORD *)this + 7);
          if (!v35)
            goto LABEL_72;
          v36 = *((unsigned int *)this + 16);
          if (v36 >= *(_DWORD *)(v35 + 4) || *(_QWORD *)v13)
            goto LABEL_72;
          v37 = *(_DWORD *)(v35 + 16);
          v38 = *(_QWORD *)(v35 + 8);
          *((_DWORD *)this + 16) = v36 + 1;
          if ((v37 & 4) != 0)
            *(_BYTE *)(v38 + v36) = 10;
          else
            *(_WORD *)(v38 + 2 * v36) = 10;
          goto LABEL_21;
        case 'o':
        case 'p':
        case 'q':
        case 's':
          goto LABEL_99;
        case 'r':
          v59 = (uint64_t)v13;
          v60 = 13;
          goto LABEL_84;
        case 't':
          v59 = (uint64_t)v13;
          v60 = 9;
          goto LABEL_84;
        case 'u':
          if ((uint64_t)(v17 - (_QWORD)v19) < 5)
          {
            v106 = WTF::fastCompactMalloc((WTF *)0x20);
            v97 = v106;
            v107 = 0x2300000002;
            v108 = "\\u must be followed by 4 hex digits";
            goto LABEL_123;
          }
          v61 = v9->u8[2];
          if ((v61 - 48) < 0xA || (v61 | 0x20u) - 97 < 6)
          {
            v62 = v9->u8[3];
            if ((v62 - 48) < 0xA || (v62 | 0x20u) - 97 <= 5)
            {
              v63 = v9->u8[4];
              if ((v63 - 48) < 0xA || (v63 | 0x20u) - 97 <= 5)
              {
                v64 = v9->u8[5];
                if ((v64 - 48) < 0xA || (v64 | 0x20u) - 97 <= 5)
                {
                  v65 = JSC::Lexer<unsigned char>::convertUnicode(v61, v9->u8[3], v63, v64);
                  WTF::StringBuilder::append((uint64_t)v13, v65, v66, v67, v68, v69, v70, v71);
                  v23 = 5;
                  goto LABEL_22;
                }
              }
            }
          }
          WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,WTF::ASCIILiteral>(&v117, v19, 5uLL);
          v97 = v117.i64[0];
          goto LABEL_124;
        default:
          if (v20 == 98)
          {
            v59 = (uint64_t)v13;
            v60 = 8;
          }
          else
          {
            if (v20 != 102)
            {
LABEL_99:
              WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>>((int **)&v117, (uint64_t)v19, 1);
              v79 = v117.i64[0];
              v117.i64[0] = 0;
              v80 = *(WTF::StringImpl **)this;
              *(_QWORD *)this = v79;
              if (!v80)
                return 18;
              v81 = *(_DWORD *)v80 - 2;
              if (*(_DWORD *)v80 != 2)
              {
LABEL_126:
                *(_DWORD *)v80 = v81;
                return 18;
              }
              WTF::StringImpl::~StringImpl(v80, v72, v73, v74, v75, v76, v77, v78);
              WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
              v80 = (WTF::StringImpl *)v117.i64[0];
              v117.i64[0] = 0;
              if (!v80)
                return 18;
LABEL_125:
              v81 = *(_DWORD *)v80 - 2;
              if (*(_DWORD *)v80 == 2)
              {
                WTF::StringImpl::~StringImpl(v80, v90, v91, v92, v93, v94, v95, v96);
                WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
                return 18;
              }
              goto LABEL_126;
            }
            v59 = (uint64_t)v13;
            v60 = 12;
          }
LABEL_84:
          WTF::StringBuilder::append(v59, v60, a3, a4, a5, a6, a7, a8);
          goto LABEL_21;
      }
    }
LABEL_122:
    v106 = WTF::fastCompactMalloc((WTF *)0x20);
    v97 = v106;
    v107 = 0x1300000002;
    v108 = "Unterminated string";
LABEL_123:
    *(_QWORD *)v106 = v107;
    *(_QWORD *)(v106 + 8) = v108;
    *(_DWORD *)(v106 + 16) = 4;
LABEL_124:
    v80 = *(WTF::StringImpl **)this;
    *(_QWORD *)this = v97;
    if (!v80)
      return 18;
    goto LABEL_125;
  }
  v16 = v9;
LABEL_105:
  v98 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if ((unint64_t)v98 >= *((_QWORD *)this + 5) || *v98 != v8)
    goto LABEL_122;
  if (*((_DWORD *)this + 16))
  {
    v99 = *((_QWORD *)this + 7);
    if ((v99 || (v99 = *(_QWORD *)v13) != 0) && (*(_BYTE *)(v99 + 16) & 4) == 0)
    {
      *(_BYTE *)(a2 + 1) &= ~1u;
      v102 = WTF::StringBuilder::span16(v13);
    }
    else
    {
      *(_BYTE *)(a2 + 1) |= 1u;
      v100 = *((_DWORD *)this + 16);
      if (v100)
      {
        v101 = *(_QWORD *)v13;
        if (!*(_QWORD *)v13)
          v101 = *((_QWORD *)this + 7);
        if (v100 < 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198B0D98CLL);
        }
        v102 = *(_QWORD *)(v101 + 8);
      }
      else
      {
        v102 = 0;
      }
    }
    *(_QWORD *)(a2 + 8) = v102;
    v103 = *((_DWORD *)this + 16);
    if ((v103 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198B0D96CLL);
    }
    v104 = *(_DWORD *)(a2 + 4) & 0x80000000;
  }
  else
  {
    *(_BYTE *)(a2 + 1) |= 1u;
    *(_QWORD *)(a2 + 8) = v16;
    v104 = (*((_DWORD *)this + 8) - (_DWORD)v16) & 0x7FFFFFFF;
    v103 = *(_DWORD *)(a2 + 4) & 0x80000000;
  }
  *(_DWORD *)(a2 + 4) = v104 | v103;
  result = 4;
  *(_BYTE *)a2 = 4;
  ++*((_QWORD *)this + 4);
  return result;
}

void WTF::StringBuilder::clear(WTF::StringImpl **this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *this;
  *this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = this[1];
  this[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  *((_DWORD *)this + 4) = 0;
}

double WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,WTF::ASCIILiteral>(_QWORD *a1, _BYTE *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  double result;
  uint64_t v10;

  if (a3 >> 31)
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  if (__OFADD__((_DWORD)a3, 31)
    || (v5 = (a3 + 33), __OFADD__(a3 + 31, 2))
    || (WTF::tryFastCompactMalloc((WTF *)(v5 + 20), &v10), (v7 = v10) == 0))
  {
    *a1 = 0;
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x198B0DBD4);
  }
  *(_WORD *)(v10 + 20) = 23586;
  *(_DWORD *)v7 = 2;
  *(_DWORD *)(v7 + 4) = v5;
  *(_QWORD *)(v7 + 8) = v7 + 20;
  *(_DWORD *)(v7 + 16) = 4;
  v8 = (_BYTE *)(v7 + 22);
  if ((_DWORD)a3 == 1)
  {
    *v8 = *a2;
  }
  else if ((_DWORD)a3)
  {
    memcpy((void *)(v7 + 22), a2, a3);
  }
  qmemcpy(&v8[a3], "\" is not a valid unicode escape", 31);
  result = *(double *)"d unicode escape";
  *a1 = v7;
  return result;
}

uint64_t WTF::StringBuilder::append(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v12 = a2;
  v8 = *(_QWORD *)(result + 8);
  if (!v8)
    return WTF::StringBuilder::append(result, &v12, 1uLL, a4, a5, a6, a7, a8);
  v9 = *(unsigned int *)(result + 16);
  if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)result)
    return WTF::StringBuilder::append(result, &v12, 1uLL, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v10 = *(_QWORD *)(v8 + 8);
    *(_DWORD *)(result + 16) = v9 + 1;
    *(_WORD *)(v10 + 2 * v9) = a2;
    return result;
  }
  if (a2 > 0xFF)
    return WTF::StringBuilder::append(result, &v12, 1uLL, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v8 + 8);
  *(_DWORD *)(result + 16) = v9 + 1;
  *(_BYTE *)(v11 + v9) = a2;
  return result;
}

_QWORD *WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>>(int **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD v5[2];
  _QWORD v6[2];

  v6[0] = "Invalid escape character ";
  v6[1] = 26;
  v5[0] = a2;
  v5[1] = a3;
  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>>(v6, (uint64_t)v5, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t WTF::StringBuilder::span8(WTF::StringBuilder *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    v2 = *((_QWORD *)this + 1);
  if (v1 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B0DCF8);
  }
  return *(_QWORD *)(v2 + 8);
}

uint64_t WTF::StringBuilder::span16(WTF::StringBuilder *this)
{
  int v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_DWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    v2 = *((_QWORD *)this + 1);
  if ((v1 & 0x80000000) == 0)
    return *(_QWORD *)(v2 + 8);
  result = 268;
  __break(0xC471u);
  return result;
}

JSC::JSCell *JSC::LiteralParser<unsigned char>::parseRecursively(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int16x8_t *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  __n128 v22;
  rlim_t v23;
  rlim_t rlim_cur;
  _QWORD *i64;
  unint64_t v26;
  rlim_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  int8x16_t *v32;
  rlim_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unsigned __int8 *v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  unint64_t v46;
  rlim_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  int8x16_t *v51;
  rlim_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  unsigned __int8 *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  BOOL v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  int8x16_t *v70;
  rlim_t v71;
  int8x16_t v72;
  int8x16_t v73;
  uint8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  unsigned __int8 *v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  uint8x16_t v83;
  unsigned __int8 *v84;
  int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  double v93;
  uint64_t v94;
  int v95;
  uint8x16_t v96;
  uint64_t v97;
  _BYTE *v98;
  rlim_t v99;
  int v100;
  JSC *v101;
  unint64_t *v102;
  int v103;
  int v104;
  rlim_t v105;
  uint64_t v106;
  BOOL v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  int8x16_t *v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  uint8x16_t v117;
  unint64_t v118;
  __int8 v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  int v123;
  BOOL v124;
  int v125;
  unint64_t v126;
  int8x16_t *v127;
  rlim_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  uint8x16_t v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  rlim_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  BOOL v139;
  int v140;
  unint64_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  unint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unint64_t *v156;
  int v157;
  uint64_t v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unint64_t v161;
  unsigned __int8 *v162;
  char v163;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  int v171;
  unsigned int v172;
  BOOL v173;
  BOOL v174;
  BOOL v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  unsigned __int8 *v179;
  int v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  char v184;
  unsigned __int8 *v185;
  int v186;
  unsigned __int8 *v187;
  int v188;
  int v189;
  char v190;
  unsigned __int8 *v191;
  int v192;
  unsigned __int8 *v193;
  int v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  BOOL v205;
  BOOL v206;
  BOOL v207;
  unsigned int v208;
  BOOL v209;
  BOOL v210;
  BOOL v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  unsigned int v222;
  int v223;
  unint64_t v224;
  int8x16_t *v225;
  rlim_t v226;
  int8x16_t v227;
  int8x16_t v228;
  uint8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  unsigned __int8 *v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  uint8x16_t v238;
  int8x16_t v239;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  rlim_t v243;
  unsigned __int8 *v244;
  uint8x16_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  rlim_t v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  int v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  int v254;
  int v255;
  unsigned __int8 *v256;
  int v257;
  int v258;
  double v259;
  uint64_t v260;
  _DWORD *v261;
  char v262;
  unsigned __int8 *v263;
  int v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  int v267;
  int v268;
  unsigned __int8 *v269;
  int v270;
  int v271;
  uint8x16_t v272;
  unsigned __int8 *v273;
  unsigned int v274;
  unsigned __int8 *v275;
  unsigned __int8 *v276;
  int v277;
  unsigned __int8 *v278;
  BOOL v279;
  char v280;
  unsigned __int8 *v281;
  int v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  int v285;
  int v286;
  unsigned __int8 *v287;
  int v288;
  int v289;
  BOOL v290;
  unsigned int v291;
  int v292;
  unint64_t v293;
  int8x16_t *v294;
  unint64_t v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  uint8x16_t v300;
  unsigned __int8 *v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  rlim_t v306;
  unsigned int v307;
  int v308;
  unint64_t v309;
  int8x16_t *v310;
  rlim_t v311;
  int8x16_t v312;
  int8x16_t v313;
  uint8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  unsigned __int8 *v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  uint8x16_t v323;
  uint64_t v324;
  WTF::AtomStringImpl *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  int v334;
  unsigned __int8 *v335;
  BOOL v336;
  unsigned int v337;
  int v338;
  unint64_t v339;
  int8x16_t *v340;
  unint64_t v341;
  int8x16_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  uint8x16_t v346;
  unsigned __int8 *v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  unsigned __int8 *v352;
  unsigned __int8 *v353;
  unint64_t v354;
  unsigned __int8 *v355;
  JSC::JSCell *v356;
  unsigned __int8 *v357;
  uint8x16_t v358;
  char v359;
  unsigned __int8 *v360;
  unsigned __int8 *v361;
  unint64_t v362;
  unsigned __int8 *v363;
  unsigned __int8 *v364;
  char v365;
  unsigned __int8 *v366;
  int v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  int v370;
  int v371;
  unsigned __int8 *v372;
  int v373;
  int v374;
  int v375;
  int8x16_t *v376;
  unsigned __int8 *v377;
  int v378;
  unsigned __int8 *v379;
  unsigned __int8 *v380;
  int v381;
  int v382;
  unsigned __int8 *v383;
  int v384;
  int v385;
  int8x16_t *v386;
  unint64_t v387;
  char v388;
  unsigned __int8 *v389;
  int v390;
  unsigned __int8 *v391;
  unsigned __int8 *v392;
  int v393;
  int v394;
  unsigned __int8 *v395;
  int v396;
  int v397;
  int8x16_t *v398;
  int8x16_t *v399;
  BOOL v400;
  unsigned int v401;
  int v402;
  unint64_t v403;
  int8x16_t *v404;
  unint64_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  uint8x16_t v410;
  unsigned __int8 *v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int v416;
  rlim_t v417;
  unint64_t v418;
  int8x16_t *v419;
  WTF::AtomStringImpl *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  rlim_t v427;
  WTF::StringImpl *v428;
  unsigned __int8 *v429;
  unint64_t v430;
  char v431;
  unsigned __int8 *v432;
  unsigned __int8 **v433;
  unsigned __int8 *v434;
  unsigned __int8 *v435;
  unint64_t v436;
  unsigned __int8 *v437;
  int8x16_t *v438;
  WTF::AtomStringImpl *v439;
  rlim_t v440;
  WTF::StringImpl *v441;
  rlim_t v442;
  unsigned __int8 *v443;
  char v444;
  rlim_t v445;
  WTF::StringImpl *v446;
  unsigned int v447;
  int v448;
  unsigned __int8 *v449;
  BOOL v450;
  int v451;
  const char *v452;
  rlim_t v453;
  WTF::StringImpl *v454;
  char v455;
  int v456;
  int v457;
  rlim_t v458;
  int v459;
  int v460;
  BOOL v461;
  int v463;
  uint64_t v464;
  WTF::AtomStringImpl *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  rlim_t v472;
  unint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  rlim_t v491;
  int v492;
  int v493;
  BOOL v494;
  char v496;
  char v497;
  unsigned __int8 *v498;
  int v499;
  unsigned __int8 *v500;
  unsigned __int8 *v501;
  int v502;
  int v503;
  unsigned __int8 *v504;
  int v505;
  int v506;
  int v507;
  int v508;
  rlim_t v509;
  int v510;
  int v511;
  BOOL v512;
  unint64_t v514;
  void *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  rlim_t v531;
  int v532;
  BOOL v533;
  int v535;
  int v536;
  rlim_t v537;
  int v538;
  int v539;
  BOOL v540;
  int v542;
  uint64_t v543;
  unint64_t v544;
  void *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  int8x16_t *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  const char *v556;
  unint64_t v557;
  void *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  void *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  int v574;
  rlim_t v575;
  int v576;
  int v577;
  BOOL v578;
  int8x16_t *v580;
  rlim_t v581;
  int v582;
  BOOL v583;
  int v585;
  uint64_t v586;
  unsigned __int8 *v587;
  int8x16_t *v588;
  WTF::AtomStringImpl *v589;
  rlim_t v590;
  WTF::StringImpl *v591;
  WTF::StringImpl *v592;
  char v593;
  WTF::AtomStringImpl *v594;
  rlim_t v595;
  WTF::StringImpl *v596;
  int v597;
  int v598;
  rlim_t v599;
  int v600;
  int v601;
  BOOL v602;
  unint64_t v604;
  void *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  int v613;
  rlim_t v614;
  int v615;
  int v616;
  BOOL v617;
  int v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  const char *v637;
  int8x16_t *v638;
  uint64_t v639;
  uint64_t v640;
  WTF::AtomStringImpl *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  const char *v650;
  WTF::StringImpl *v651;
  char *v652;
  char *v653;
  unsigned __int8 *v654;
  int v655;
  unsigned __int8 *v656;
  int v657;
  int v658;
  rlim_t v659;
  int v660;
  int v661;
  BOOL v662;
  unint64_t v664;
  void *v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  JSC *v672;
  const WTF::String *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  WTF::StringImpl *v679;
  unsigned __int8 *v680;
  int v681;
  unsigned __int8 *v682;
  const char *v683;
  char *v684;
  char *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  const char *v689;
  uint64_t v690;
  uint64_t v691;
  const char *v692;
  unint64_t v693;
  void *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  const char *v702;
  unsigned int v703;
  BOOL v704;
  BOOL v705;
  BOOL v706;
  unint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  const char *v717;
  uint64_t v718;
  uint64_t v719;
  const char *v720;
  unsigned __int8 *v721;
  int v722;
  unsigned __int8 *v723;
  WTF::AtomStringImpl *v724;
  rlim_t v725;
  WTF::StringImpl *v726;
  uint64_t v727;
  const char *v728;
  unint64_t v729;
  void *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unsigned __int8 *v737;
  int v738;
  unsigned __int8 *v739;
  unsigned __int8 *v740;
  int v741;
  unsigned __int8 *v742;
  int8x16_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int8x16_t v746;
  unsigned int v747;
  BOOL v748;
  BOOL v749;
  BOOL v750;
  int8x16_t v751;
  int8x16_t v752;
  int8x16_t v753;
  int8x16_t v754;
  unsigned int v755;
  BOOL v756;
  BOOL v757;
  BOOL v758;
  unsigned __int8 *v759;
  int v760;
  unsigned __int8 *v761;
  int v762;
  int v763;
  rlim_t v764;
  int v765;
  int v766;
  BOOL v767;
  unint64_t v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  unsigned int v777;
  BOOL v780;
  uint64_t v781;
  const char *v782;
  uint64_t v783;
  uint64_t v784;
  const char *v785;
  unsigned __int8 *v786;
  int v787;
  unsigned __int8 *v788;
  unsigned __int8 *v789;
  int v790;
  unsigned __int8 *v791;
  uint64_t v792;
  const char *v793;
  unsigned int v794;
  BOOL v797;
  unsigned __int8 *v798;
  int v799;
  unsigned __int8 *v800;
  unsigned int v801;
  BOOL v802;
  BOOL v803;
  BOOL v804;
  unsigned int v805;
  BOOL v806;
  BOOL v807;
  BOOL v808;
  uint64_t v809;
  const char *v810;
  unsigned __int8 *v811;
  int v812;
  unsigned __int8 *v813;
  unsigned int v814;
  BOOL v815;
  BOOL v816;
  BOOL v817;
  unint64_t v818;
  uint8x8_t *v819;
  uint64_t v820;
  uint64_t v821;
  int16x8_t *v822;
  uint16x8_t v823;
  unint64_t v824;
  int16x8_t *v825;
  char *v826;
  unsigned __int8 *v827;
  rlim_t v828;
  int v829;
  int v830;
  unint64_t v831;
  int8x16_t *v832;
  unsigned __int8 *v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  uint8x16_t v838;
  int8x16_t v839;
  unsigned __int8 *v840;
  rlim_t v841;
  int v842;
  int v843;
  unint64_t *v844;
  unint64_t v845;
  int8x16_t *v846;
  unsigned __int8 *v847;
  int8x16_t v848;
  int8x16_t v849;
  int8x16_t v850;
  int8x16_t v851;
  uint8x16_t v852;
  unint64_t v853;
  unint64_t v854;
  uint64_t v855;
  unint64_t v857;
  int v858;
  _BYTE *v859;
  uint64_t v860;
  unsigned int v861;
  uint64_t v862;
  uint64_t v863;
  unsigned int v864;
  unint64_t v865;
  unint64_t v866;
  unint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  int v872;
  int v873;
  int v874;
  unsigned int v875;
  unsigned int v876;
  int v877;
  int v878;
  int v879;
  int v880;
  int v881;
  unsigned __int8 *v882;
  int v883;
  unsigned __int8 *v884;
  rlim_t v885;
  int v886;
  int v887;
  int v888;
  unint64_t v889;
  int8x16_t *v890;
  unsigned __int8 *v891;
  int8x16_t v892;
  int8x16_t v893;
  int8x16_t v894;
  int8x16_t v895;
  uint8x16_t v896;
  uint64_t v897;
  const char *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unsigned __int8 *v903;
  uint8x16_t v904;
  char v905;
  unint64_t v906;
  int v907;
  uint64_t v908;
  uint64_t v909;
  unsigned __int16 *v910;
  uint64_t v911;
  unsigned int v912;
  uint64_t v914;
  int v915;
  unsigned int v916;
  unint64_t v917;
  unsigned int v918;
  unsigned int v919;
  unsigned int v920;
  int v921;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  int v926;
  uint64_t v927;
  unint64_t v928;
  char v929;
  unsigned int v930;
  unint64_t v931;
  int v932;
  unsigned __int8 *v933;
  unsigned int v934;
  unint64_t v935;
  _BYTE *v936;
  uint64_t v937;
  unsigned int v938;
  unsigned int v939;
  unint64_t v940;
  unsigned int v941;
  unsigned int v942;
  int v943;
  uint64_t v945;
  rlim_t v946;
  int v947;
  uint64_t v948;
  uint64_t v949;
  int v950;
  unsigned __int8 *v951;
  int v952;
  unsigned __int8 *v953;
  unsigned __int8 *v954;
  int v955;
  int v956;
  unsigned __int8 *v957;
  int v958;
  int v959;
  double v960;
  unsigned __int8 *v961;
  unsigned int v962;
  BOOL v963;
  BOOL v964;
  BOOL v965;
  unsigned __int8 *v966;
  unsigned __int8 *v967;
  rlim_t v968;
  int v969;
  unint64_t v970;
  int8x16_t *v971;
  unint64_t v972;
  int8x16_t v973;
  int8x16_t v974;
  int8x16_t v975;
  int8x16_t v976;
  uint8x16_t v977;
  unint64_t v978;
  unint64_t v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  unint64_t *v986;
  unsigned int v987;
  unsigned int v988;
  _opaque_pthread_t *v989;
  unint64_t v991;
  unsigned int v992;
  int v993;
  unint64_t v994;
  unint64_t v995;
  uint64_t v996;
  __int16 v997;
  unsigned __int8 *v998;
  int v999;
  unsigned __int8 *v1000;
  unsigned __int8 *v1001;
  int v1002;
  int v1003;
  unsigned __int8 *v1004;
  int v1005;
  int v1006;
  uint64_t v1007;
  unsigned __int8 *v1008;
  rlim_t v1009;
  unsigned int v1010;
  BOOL v1011;
  BOOL v1012;
  BOOL v1013;
  unsigned int v1014;
  int v1015;
  unint64_t v1016;
  int8x16_t *v1017;
  unsigned __int8 *v1018;
  int8x16_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  uint8x16_t v1023;
  unsigned __int8 *v1024;
  int v1025;
  unsigned __int8 *v1026;
  int v1027;
  int v1028;
  unsigned __int8 *v1029;
  int v1030;
  int v1031;
  double v1032;
  unsigned int v1033;
  BOOL v1034;
  BOOL v1035;
  BOOL v1036;
  int v1037;
  int v1038;
  int v1039;
  rlim_t v1040;
  unint64_t v1041;
  rlim_t v1042;
  int v1043;
  unint64_t v1044;
  int8x16_t v1045;
  int8x16_t v1046;
  int8x16_t v1047;
  int8x16_t v1048;
  unsigned __int8 *v1049;
  unsigned int v1050;
  BOOL v1051;
  BOOL v1052;
  BOOL v1053;
  char *v1054;
  _opaque_pthread_t *v1055;
  unint64_t v1056;
  unsigned __int8 *v1057;
  unsigned __int8 *v1058;
  unsigned int v1059;
  unsigned int v1060;
  unsigned __int8 *v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  int v1065;
  _opaque_pthread_t *v1066;
  rlim_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  unint64_t *v1070;
  unsigned int v1071;
  unsigned int v1072;
  _opaque_pthread_t *v1073;
  unint64_t v1075;
  unsigned int v1076;
  unsigned __int8 *v1077;
  unsigned __int8 *v1078;
  unsigned __int8 *v1079;
  unsigned __int8 *v1080;
  int v1081;
  unsigned __int8 *v1082;
  int v1083;
  int v1084;
  unsigned __int8 *v1085;
  int v1086;
  int v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unsigned int v1091;
  BOOL v1092;
  BOOL v1093;
  BOOL v1094;
  int8x16_t *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned __int8 *v1098;
  int v1099;
  unsigned __int8 *v1100;
  int v1101;
  int v1102;
  unsigned __int8 *v1103;
  int v1104;
  int v1105;
  unsigned __int8 *v1106;
  int v1107;
  uint64_t v1108;
  unsigned int v1109;
  BOOL v1110;
  BOOL v1111;
  BOOL v1112;
  char *stackaddr_np;
  _opaque_pthread_t *v1114;
  unint64_t v1115;
  unsigned __int8 *v1116;
  _QWORD *v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  _DWORD *v1121;
  int8x16_t *v1122;
  int v1123;
  _opaque_pthread_t *v1124;
  rlim_t stacksize_np;
  int8x16_t *v1126;
  unsigned __int8 *v1127;
  unsigned __int8 *v1128;
  unsigned int v1129;
  unsigned __int8 *v1130;
  unsigned __int8 *v1131;
  int v1132;
  unsigned __int8 *v1133;
  int v1134;
  unsigned __int8 *v1135;
  unsigned int v1136;
  unsigned int v1137;
  int v1138;
  unsigned int v1139;
  unsigned int v1140;
  unint64_t MoreOutOfLineStorage;
  unsigned __int8 *v1142;
  rlim_t v1143;
  unsigned int v1144;
  int v1145;
  unint64_t v1146;
  int8x16_t *v1147;
  unsigned __int8 *v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  uint8x16_t v1153;
  unsigned __int8 *v1154;
  int8x16_t v1155;
  int8x16_t v1156;
  int8x16_t v1157;
  int8x16_t v1158;
  BOOL v1159;
  uint64_t v1160;
  _DWORD *v1161;
  JSC::JSCell *v1162;
  unsigned __int8 *v1163;
  rlim_t v1164;
  unsigned int v1165;
  int v1166;
  unint64_t v1167;
  int8x16_t *v1168;
  unsigned __int8 *v1169;
  int8x16_t v1170;
  int8x16_t v1171;
  int8x16_t v1172;
  int8x16_t v1173;
  uint8x16_t v1174;
  unsigned __int8 *v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  unsigned int v1180;
  unsigned int v1181;
  char v1182;
  uint64_t v1183;
  WTF::StringImpl *v1184;
  int v1185;
  int v1186;
  unsigned __int8 *v1187;
  int v1188;
  unsigned __int8 *v1189;
  unsigned __int8 *v1190;
  int v1191;
  unsigned __int8 *v1192;
  unsigned __int8 *v1193;
  int v1194;
  int v1195;
  unsigned __int8 *v1196;
  int v1197;
  int v1198;
  int8x16_t *v1199;
  WTF::AtomStringImpl *v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  rlim_t v1207;
  WTF::StringImpl *v1208;
  int8x16_t *v1209;
  unsigned __int8 *v1210;
  int v1211;
  unsigned __int8 *v1212;
  unsigned __int8 *v1213;
  int v1214;
  int v1215;
  unsigned __int8 *v1216;
  int v1217;
  int v1218;
  int v1219;
  rlim_t v1220;
  WTF::StringImpl *v1221;
  unint64_t v1222;
  unint64_t v1223;
  void *v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  WTF::AtomStringImpl *v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  rlim_t v1238;
  WTF::StringImpl *v1239;
  unint64_t v1240;
  int v1241;
  unint64_t v1242;
  uint8x8_t *v1243;
  unsigned int v1244;
  uint64_t v1245;
  uint16x8_t v1246;
  unint64_t v1247;
  int16x8_t *v1248;
  unsigned __int8 *v1249;
  rlim_t v1250;
  unsigned int v1251;
  int v1252;
  unint64_t v1253;
  int8x16_t *v1254;
  unsigned __int8 *v1255;
  int8x16_t v1256;
  int8x16_t v1257;
  int8x16_t v1258;
  int8x16_t v1259;
  uint8x16_t v1260;
  unsigned __int8 *v1261;
  int8x16_t v1262;
  int8x16_t v1263;
  int8x16_t v1264;
  int8x16_t v1265;
  unsigned __int8 *v1266;
  rlim_t v1267;
  WTF::StringImpl *v1268;
  int v1269;
  int v1270;
  rlim_t v1271;
  int v1272;
  int v1273;
  BOOL v1274;
  unint64_t v1276;
  void *v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  unint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  rlim_t v1288;
  WTF::StringImpl *v1289;
  unsigned __int8 *v1290;
  rlim_t v1291;
  int v1292;
  int v1293;
  BOOL v1294;
  unsigned int v1296;
  unsigned int v1297;
  int v1298;
  BOOL v1299;
  int v1300;
  const char *v1301;
  rlim_t v1302;
  WTF::StringImpl *v1303;
  unint64_t v1304;
  void *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  unsigned __int8 *v1312;
  _QWORD *v1313;
  _QWORD *v1314;
  _QWORD *v1315;
  int v1316;
  int v1317;
  rlim_t v1318;
  int v1319;
  int v1320;
  BOOL v1321;
  unint64_t v1323;
  void *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1332;
  WTF::StringImpl *v1333;
  uint64_t v1334;
  __int16 v1335;
  int v1336;
  char v1337;
  _DWORD *v1338;
  _QWORD *v1339;
  uint64_t v1340;
  char v1342;
  rlim_t v1343;
  WTF::StringImpl *v1344;
  unsigned __int8 *v1345;
  int v1346;
  unsigned __int8 *v1347;
  unsigned __int8 **v1348;
  unsigned __int8 *v1349;
  int v1350;
  int v1351;
  unsigned __int8 *v1352;
  int v1353;
  int v1354;
  int v1355;
  int v1356;
  rlim_t v1357;
  int v1358;
  int v1359;
  BOOL v1360;
  unint64_t v1362;
  void *v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  int v1370;
  int v1371;
  rlim_t v1372;
  int v1373;
  _QWORD *v1374;
  int v1375;
  BOOL v1376;
  unint64_t v1378;
  void *v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  char v1386;
  unint64_t v1387;
  void *v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  void *v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  int8x16_t *v1403;
  unint64_t v1404;
  void *v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  int v1412;
  int v1413;
  rlim_t v1414;
  int v1415;
  int v1416;
  BOOL v1417;
  unint64_t v1419;
  void *v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  const char *v1429;
  WTF::StringImpl *v1430;
  int v1431;
  unsigned __int8 *v1432;
  unsigned __int8 **v1433;
  int8x16_t *v1434;
  rlim_t v1435;
  WTF::StringImpl *v1436;
  int v1437;
  unint64_t v1438;
  int16x8_t *v1439;
  unsigned int v1440;
  unsigned int v1441;
  uint64_t v1442;
  unsigned __int16 *v1443;
  char v1444;
  unint64_t v1445;
  void *v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  rlim_t v1453;
  WTF::StringImpl *v1454;
  uint64_t v1455;
  WTF::AtomStringImpl *v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  const char *v1464;
  WTF::StringImpl *v1465;
  unsigned __int8 *v1466;
  int v1467;
  unsigned __int8 *v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  const char *v1478;
  WTF::StringImpl *v1479;
  int v1480;
  __int32 v1481;
  int v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  const char *v1486;
  uint64_t v1487;
  WTF::AtomStringImpl *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  const char *v1496;
  WTF::StringImpl *v1497;
  int v1498;
  int v1499;
  rlim_t v1500;
  int v1501;
  int v1502;
  BOOL v1503;
  unint64_t v1505;
  void *v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  unsigned __int8 *v1513;
  int v1514;
  unsigned __int8 *v1515;
  unint64_t v1516;
  void *v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  JSC *v1524;
  const WTF::String *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  WTF::StringImpl *v1531;
  unsigned __int8 *v1532;
  int v1533;
  unsigned __int8 *v1534;
  int8x16_t *v1535;
  uint64_t v1536;
  uint64_t v1537;
  const char *v1538;
  WTF::StringImpl *v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  const char *v1543;
  uint64_t v1544;
  uint64_t v1545;
  const char *v1546;
  int v1547;
  int v1548;
  rlim_t v1549;
  int v1550;
  int v1551;
  BOOL v1552;
  unint64_t v1554;
  void *v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  unint64_t v1562;
  void *v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  unint64_t v1570;
  void *v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  uint64_t v1579;
  const char *v1580;
  unint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  const char *v1584;
  WTF::StringImpl *v1585;
  WTF::StringImpl *v1586;
  unsigned __int8 *v1587;
  int v1588;
  unsigned __int8 *v1589;
  unint64_t v1590;
  void *v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  int8x16_t v1598;
  int8x16_t v1599;
  int8x16_t v1600;
  int8x16_t v1601;
  unsigned __int8 *v1602;
  uint64_t v1603;
  unsigned int v1604;
  rlim_t v1605;
  WTF::StringImpl *v1606;
  uint64_t v1607;
  const char *v1608;
  int8x16_t v1609;
  int8x16_t v1610;
  int8x16_t v1611;
  int8x16_t v1612;
  unint64_t v1613;
  void *v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  unint64_t v1621;
  void *v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  int8x16_t v1629;
  int8x16_t v1630;
  int8x16_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  int8x16_t v1634;
  int8x16_t v1635;
  int8x16_t v1636;
  unint64_t v1637;
  void *v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  int8x16_t v1645;
  int8x16_t v1646;
  int8x16_t v1647;
  int8x16_t v1648;
  int v1649;
  int v1650;
  rlim_t v1651;
  int v1652;
  int v1653;
  BOOL v1654;
  unint64_t v1656;
  void *v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  const char *v1665;
  unsigned __int8 *v1666;
  int v1667;
  unsigned __int8 *v1668;
  uint64_t v1669;
  const char *v1670;
  unsigned int v1671;
  BOOL v1672;
  BOOL v1673;
  BOOL v1674;
  unsigned __int8 *v1675;
  int v1676;
  unsigned __int8 *v1677;
  unsigned int v1678;
  BOOL v1679;
  BOOL v1680;
  BOOL v1681;
  uint64_t v1682;
  const char *v1683;
  unsigned __int8 *v1684;
  int v1685;
  unsigned __int8 *v1686;
  unint64_t v1687;
  int16x8_t *v1688;
  int16x8_t *v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unsigned int v1696;
  BOOL v1697;
  BOOL v1698;
  BOOL v1699;
  WTF::StringImpl **v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  unint64_t v1708;
  WTF::StringBuilder *v1709;
  unint64_t v1710;
  char *v1711;
  unint64_t v1712;
  __n128 v1713;
  unint64_t v1714;
  unint64_t StatusReg;
  unsigned __int8 *v1716;
  unint64_t *v1717;
  unint64_t *v1718;
  unsigned __int8 *v1719;
  uint64_t v1720;
  int8x16_t v1721;
  unint64_t v1722;
  JSC::JSCell *v1723;
  JSC::JSCell *v1724;
  JSC *v1725;
  unint64_t v1726;
  __n128 v1727;
  int8x16_t v1728;
  rlim_t v1729;
  rlimit *v1730;
  int v1731;
  unsigned __int8 *v1732;
  uint64_t v1733;
  int v1734;
  rlimit v1735;
  char v1736;

  v13 = a2;
  v14 = (int16x8_t *)a1;
  v1719 = a3;
  if (&v1707 < (uint64_t *)a3)
    return (JSC::JSCell *)JSC::LiteralParser<unsigned char>::parse(a1, a2, 2uLL, a4, a5, a6, a7, a8);
  v1710 = a2 + 41968;
  v1718 = (unint64_t *)(a2 + 39696);
  v15 = *(_QWORD *)a1;
  v1709 = (WTF::StringBuilder *)(a1 + 16);
  v16 = *(unsigned __int8 *)(a1 + 24);
  v1722 = a1 + 24;
  v1720 = a1;
  v1725 = (JSC *)a2;
  if (v16)
  {
    v17 = *(_QWORD *)(v15 + 56);
    v18 = *(_QWORD *)(v17 + 15056);
    if (v18)
    {
      v19 = *(unsigned int *)(v18 + 60);
      SlowCase = *(_QWORD *)(v18 + 24);
      if (SlowCase < *(_QWORD *)(v18 + 32))
      {
LABEL_5:
        *(_QWORD *)(v18 + 24) = SlowCase + v19;
        goto LABEL_6;
      }
      SlowCase = *(_QWORD *)(v18 + 40);
      if ((SlowCase & 1) == 0)
      {
        v387 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 48);
        *(_QWORD *)(v18 + 32) = SlowCase + HIDWORD(v387);
        *(_QWORD *)(v18 + 40) = SlowCase + (int)v387;
        goto LABEL_5;
      }
      JSC::sanitizeStackForVM(*(JSC **)(v15 + 56), (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v13 = (unint64_t)v1725;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v18, v17 + 192, v19, 0, 0);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v17 + 14936, *(JSC **)(v15 + 56), 0x40uLL, 0, a5, a6, a7, a8);
      if (!SlowCase)
      {
        __break(0xC471u);
        JUMPOUT(0x198B13364);
      }
    }
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *(_DWORD *)(v15 + 848);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v21 = SlowCase + 4;
    v22 = 0uLL;
    *(_OWORD *)(SlowCase + 8) = 0u;
    v1717 = (unint64_t *)(SlowCase + 8);
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    v1724 = (JSC::JSCell *)SlowCase;
    *(_QWORD *)(SlowCase + 56) = 0;
    v9 = v1720;
    if (*(_BYTE *)(v17 + 755))
      __dmb(0xAu);
    rlim_cur = *(_QWORD *)(v9 + 48);
    v23 = *(_QWORD *)(v9 + 56);
    i64 = (_QWORD *)(v9 + 48);
    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
    v15 = v1722;
    if (rlim_cur < v23)
    {
      v27 = v23 - rlim_cur;
      while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
      {
        *i64 = ++rlim_cur;
        if (!--v27)
        {
          rlim_cur = v23;
          break;
        }
      }
    }
    if (rlim_cur == v23)
    {
      *(_BYTE *)v15 = 14;
      goto LABEL_101;
    }
    *(_BYTE *)v15 = 18;
    v28 = *(unsigned __int8 *)rlim_cur;
    v29 = JSC::tokenTypesOfLatin1Characters[v28];
    v1727.n128_u64[0] = v9 + 48;
    v1728.i64[0] = v21;
    if (v29 <= 4)
    {
      if (v29 == 4)
      {
        v30 = *(unsigned __int8 *)(v9 + 40);
        if ((_DWORD)v28 != 39)
        {
          a3 = (unsigned __int8 *)(rlim_cur + 1);
          *i64 = rlim_cur + 1;
          if (!v30)
          {
            v31 = v23 - (_QWORD)a3;
            if ((uint64_t)(v23 - (_QWORD)a3) < 0)
              goto LABEL_1827;
            v32 = (int8x16_t *)(v31 + rlim_cur + 1);
            if (v31 < 0x10)
            {
              if ((unsigned __int8 *)v23 != a3)
              {
                v386 = (int8x16_t *)(rlim_cur + 1);
                while (JSC::safeStringLatin1CharactersInStrictJSON[v386->u8[0]])
                {
                  v386 = (int8x16_t *)((char *)v386 + 1);
                  if (!--v31)
                    goto LABEL_53;
                }
                v32 = v386;
              }
            }
            else
            {
              v33 = rlim_cur + 16;
              v34.i64[0] = 0x2222222222222222;
              v34.i64[1] = 0x2222222222222222;
              v35.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v35.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v36.i64[0] = 0x2020202020202020;
              v36.i64[1] = 0x2020202020202020;
              do
              {
                v37 = *(int8x16_t *)(v33 - 15);
                v38 = vceqq_s8(v37, v34);
                v39 = vorrq_s8(vorrq_s8(vceqq_s8(v37, v35), (int8x16_t)vcgtq_u8(v36, (uint8x16_t)v37)), v38);
                v38.i8[0] = vmaxvq_u8((uint8x16_t)v39);
                if (v38.i32[0])
                {
                  v40 = (unsigned __int8 *)(v33 - 15);
LABEL_52:
                  v65 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v39);
                  v65.i8[0] = vminvq_u8(v65);
                  v32 = (int8x16_t *)&v40[v65.u32[0]];
                  goto LABEL_53;
                }
                v33 += 16;
              }
              while (v33 < (unint64_t)v32);
              if (v33 - 15 < (unint64_t)v32)
              {
                v40 = (unsigned __int8 *)&v32[-1];
                v41 = v32[-1];
                v42.i64[0] = 0x2222222222222222;
                v42.i64[1] = 0x2222222222222222;
                v43 = vceqq_s8(v41, v42);
                v44.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v44.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v45.i64[0] = 0x2020202020202020;
                v45.i64[1] = 0x2020202020202020;
                v39 = vorrq_s8(vorrq_s8(vceqq_s8(v41, v44), (int8x16_t)vcgtq_u8(v45, (uint8x16_t)v41)), v43);
                v43.i8[0] = vmaxvq_u8((uint8x16_t)v39);
                v9 = v1720;
                v15 = v1722;
                v13 = (unint64_t)v1725;
                i64 = (_QWORD *)v1727.n128_u64[0];
                v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                if (!v43.i32[0])
                  goto LABEL_53;
                goto LABEL_52;
              }
              v9 = v1720;
              v15 = v1722;
              v13 = (unint64_t)v1725;
              i64 = (_QWORD *)v1727.n128_u64[0];
              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
            }
LABEL_53:
            *i64 = v32;
LABEL_54:
            if ((unint64_t)v32 < v23 && v32->u8[0] == (_DWORD)v28)
            {
              *(_BYTE *)(v9 + 25) |= 1u;
              *(_QWORD *)(v9 + 32) = a3;
              *(_QWORD *)(v9 + 48) = (char *)v32->i64 + 1;
              *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v32 - (_DWORD)a3) & 0x7FFFFFFF;
              *(_BYTE *)(v9 + 24) = 4;
              goto LABEL_31;
            }
            v29 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_30:
            if (v29 == 4)
            {
LABEL_31:
              v1716 = (unsigned __int8 *)v1724 + 7;
              v46 = v13 + 64784;
              v1711 = (char *)v1724 + 16;
              v10 = 0x3700000002;
              StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v11 = 0xE00000002;
              v12 = 0x2600000002;
              v22.n128_u64[1] = 0xF0E0D0C0B0A0908;
              v1721 = (int8x16_t)xmmword_19911D0A0;
              v22.n128_u64[0] = 17302016;
              v1713 = v22;
              v1708 = v13;
              v1712 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v1714 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
              v1726 = v13 + 64784;
              while (2)
              {
                if (*(_BYTE *)v15 != 5)
                {
                  if ((*(_BYTE *)(v9 + 25) & 1) != 0)
                  {
                    LODWORD(v14) = *(_DWORD *)(v9 + 28);
                    v818 = v14 & 0x7FFFFFFF;
                    if ((v14 & 0x7FFFFFFF) != 0)
                    {
                      v819 = *(uint8x8_t **)(v9 + 32);
                      v820 = v819->u8[0];
                      if ((_DWORD)v818 == 1)
                      {
                        v826 = (char *)v1728.i64[0];
                        if (*(_BYTE *)(v46 - 20519))
                        {
                          v1160 = *(_QWORD *)(v1708 + 8 * v820 + 42216);
                          rlim_cur = *(_QWORD *)(v1160 + 8);
                          if ((rlim_cur & 1) != 0)
                            v1161 = 0;
                          else
                            v1161 = *(_DWORD **)(v1160 + 8);
                          *v1161 += 2;
                        }
                        else
                        {
                          LOBYTE(v1732) = v819->i8[0];
                          WTF::AtomStringImpl::add((uint64_t)&v1732, 1uLL, v28, a5, a6, a7, a8, &v1735);
                          rlim_cur = v1735.rlim_cur;
                        }
LABEL_1844:
                        v827 = *(unsigned __int8 **)(v9 + 48);
                        v23 = *(_QWORD *)(v9 + 56);
                        if ((unint64_t)v827 < v23)
                        {
                          v828 = v23 - (_QWORD)v827;
                          while (*(_BYTE *)(v26 + *v827) == 19)
                          {
                            *i64 = ++v827;
                            if (!--v828)
                            {
                              v827 = (unsigned __int8 *)v23;
                              break;
                            }
                          }
                        }
                        if (v827 == (unsigned __int8 *)v23)
                        {
                          *(_BYTE *)v15 = 14;
                          goto LABEL_1954;
                        }
                        *(_BYTE *)v15 = 18;
                        v28 = *v827;
                        v829 = *(unsigned __int8 *)(v26 + v28);
                        switch(*(_BYTE *)(v26 + v28))
                        {
                          case 4:
                            v830 = *(unsigned __int8 *)(v9 + 40);
                            if ((_DWORD)v28 == 39)
                            {
                              if (!*(_BYTE *)(v9 + 40))
                              {
                                v1483 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1484 = v1483;
                                v1485 = 0x2900000002;
                                v1486 = "Single quotes (') are not allowed in JSON";
LABEL_3348:
                                *(_QWORD *)v1483 = v1485;
                                *(_QWORD *)(v1483 + 8) = v1486;
                                *(_DWORD *)(v1483 + 16) = 4;
                                v1465 = *(WTF::StringImpl **)v1709;
                                *(_QWORD *)v1709 = v1484;
                                v9 = v1720;
                                v15 = v1722;
                                v13 = (unint64_t)v1725;
                                i64 = (_QWORD *)v1727.n128_u64[0];
                                if (!v1465)
                                  goto LABEL_1954;
LABEL_3316:
                                if (*(_DWORD *)v1465 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v1465, v1456, v1457, v1458, v1459, v1460, v1461, v1462);
                                  WTF::fastFree(v1516, v1517, v1518, v1519, v1520, v1521, v1522, v1523);
                                }
                                else
                                {
                                  *(_DWORD *)v1465 -= 2;
                                }
                                v9 = v1720;
                                v15 = v1722;
                                v13 = (unint64_t)v1725;
                                i64 = (_QWORD *)v1727.n128_u64[0];
                                goto LABEL_1954;
                              }
                              a3 = v827 + 1;
                              i64 = (_QWORD *)v1727.n128_u64[0];
                              *(_QWORD *)v1727.n128_u64[0] = v827 + 1;
                              v9 = v1720;
                              v15 = v1722;
                              v13 = (unint64_t)v1725;
                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                              v826 = (char *)v1728.i64[0];
                            }
                            else
                            {
                              a3 = v827 + 1;
                              *i64 = v827 + 1;
                              if (!v830)
                              {
                                v831 = v23 - (_QWORD)a3;
                                if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                  goto LABEL_1827;
                                v832 = (int8x16_t *)&v827[v831 + 1];
                                if (v831 >= 0x10)
                                {
                                  v833 = v827 + 16;
                                  while (1)
                                  {
                                    v834 = *(int8x16_t *)(v833 - 15);
                                    v835.i64[0] = 0x2222222222222222;
                                    v835.i64[1] = 0x2222222222222222;
                                    v836 = vceqq_s8(v834, v835);
                                    v837.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                    v837.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                    v838.i64[0] = 0x2020202020202020;
                                    v838.i64[1] = 0x2020202020202020;
                                    v839 = vorrq_s8(vorrq_s8(vceqq_s8(v834, v837), (int8x16_t)vcgtq_u8(v838, (uint8x16_t)v834)), v836);
                                    v836.i8[0] = vmaxvq_u8((uint8x16_t)v839);
                                    if (v836.i32[0])
                                      break;
                                    v833 += 16;
                                    if (v833 >= (unsigned __int8 *)v832)
                                    {
                                      if (v833 - 15 >= (unsigned __int8 *)v832)
                                      {
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                        goto LABEL_1949;
                                      }
                                      v903 = (unsigned __int8 *)&v832[-1];
                                      v1598 = v832[-1];
                                      v1599.i64[0] = 0x2222222222222222;
                                      v1599.i64[1] = 0x2222222222222222;
                                      v1600 = vceqq_s8(v1598, v1599);
                                      v1601.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                      v1601.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                      v839 = vorrq_s8(vorrq_s8(vceqq_s8(v1598, v1601), (int8x16_t)vcgtq_u8(v838, (uint8x16_t)v1598)), v1600);
                                      v1600.i8[0] = vmaxvq_u8((uint8x16_t)v839);
                                      v9 = v1720;
                                      v15 = v1722;
                                      v13 = (unint64_t)v1725;
                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      v826 = (char *)v1728.i64[0];
                                      if (!v1600.i32[0])
                                      {
LABEL_1949:
                                        *i64 = v832;
                                        goto LABEL_1950;
                                      }
LABEL_1948:
                                      v904 = (uint8x16_t)vornq_s8(v1721, v839);
                                      v904.i8[0] = vminvq_u8(v904);
                                      v832 = (int8x16_t *)&v903[v904.u32[0]];
                                      goto LABEL_1949;
                                    }
                                  }
                                  v903 = v833 - 15;
                                  goto LABEL_1948;
                                }
                                v1095 = (int8x16_t *)(v827 + 1);
                                if ((unsigned __int8 *)v23 == a3)
                                  goto LABEL_1949;
                                while (JSC::safeStringLatin1CharactersInStrictJSON[v1095->u8[0]])
                                {
                                  v1095 = (int8x16_t *)((char *)v1095 + 1);
                                  if (!--v831)
                                    goto LABEL_1949;
                                }
                                v832 = v1095;
                                *i64 = v1095;
LABEL_1950:
                                if ((unint64_t)v832 < v23 && v832->u8[0] == (_DWORD)v28)
                                {
                                  *(_BYTE *)(v9 + 25) |= 1u;
                                  *(_QWORD *)(v9 + 32) = a3;
                                  *(_QWORD *)(v9 + 48) = (char *)v832->i64 + 1;
                                  *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v832 - (_DWORD)a3) & 0x7FFFFFFF;
                                  v905 = 4;
LABEL_1953:
                                  *(_BYTE *)(v9 + 24) = v905;
                                  goto LABEL_1954;
                                }
                                v829 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_1860:
                                if (v829 != 7)
                                  goto LABEL_1954;
                                v840 = *(unsigned __int8 **)(v9 + 48);
                                v23 = *(_QWORD *)(v9 + 56);
                                if ((unint64_t)v840 < v23)
                                {
                                  v841 = v23 - (_QWORD)v840;
                                  while (*(_BYTE *)(v26 + *v840) == 19)
                                  {
                                    *i64 = ++v840;
                                    if (!--v841)
                                    {
                                      v840 = (unsigned __int8 *)v23;
                                      break;
                                    }
                                  }
                                }
                                if (v840 == (unsigned __int8 *)v23)
                                {
                                  *(_BYTE *)v15 = 14;
LABEL_2707:
                                  v1183 = WTF::fastCompactMalloc((WTF *)0x20);
                                  *(_QWORD *)v1183 = v11;
                                  *(_QWORD *)(v1183 + 8) = "Unexpected EOF";
                                  *(_DWORD *)(v1183 + 16) = 4;
                                  v1184 = *(WTF::StringImpl **)(v9 + 96);
                                  *(_QWORD *)(v9 + 96) = v1183;
                                  if (v1184)
                                  {
                                    v1185 = *(_DWORD *)v1184 - 2;
                                    if (*(_DWORD *)v1184 != 2)
                                    {
                                      v1723 = 0;
                                      LOBYTE(v14) = 0;
                                      *(_DWORD *)v1184 = v1185;
                                      goto LABEL_1959;
                                    }
                                    WTF::StringImpl::~StringImpl(v1184, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                    WTF::fastFree(v1223, v1224, v1225, v1226, v1227, v1228, v1229, v1230);
                                  }
                                  goto LABEL_2873;
                                }
                                *(_BYTE *)v15 = 18;
                                v28 = *v840;
                                v842 = *(unsigned __int8 *)(v26 + v28);
                                switch(*(_BYTE *)(v26 + v28))
                                {
                                  case 4:
                                    v843 = *(unsigned __int8 *)(v9 + 40);
                                    if ((_DWORD)v28 == 39)
                                    {
                                      if (!*(_BYTE *)(v9 + 40))
                                      {
                                        v1536 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1537 = v1536;
                                        v22.n128_u64[0] = 0x2900000002;
                                        v1538 = "Single quotes (') are not allowed in JSON";
LABEL_3425:
                                        *(_QWORD *)v1536 = v22.n128_u64[0];
                                        *(_QWORD *)(v1536 + 8) = v1538;
                                        *(_DWORD *)(v1536 + 16) = 4;
                                        v1539 = *(WTF::StringImpl **)v1709;
                                        *(_QWORD *)v1709 = v1537;
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                        if (v1539)
                                        {
                                          if (*(_DWORD *)v1539 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1539, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                            WTF::fastFree(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1539 -= 2;
                                          }
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          v826 = (char *)v1728.i64[0];
                                        }
                                        goto LABEL_2166;
                                      }
                                      a3 = v840 + 1;
                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                      *(_QWORD *)v1727.n128_u64[0] = v840 + 1;
                                      v9 = v1720;
                                      v15 = v1722;
                                      v13 = (unint64_t)v1725;
                                      v844 = v1718;
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      v826 = (char *)v1728.i64[0];
LABEL_2177:
                                      if ((unint64_t)a3 >= v23)
                                      {
                                        v846 = (int8x16_t *)a3;
                                        goto LABEL_2004;
                                      }
                                      v846 = (int8x16_t *)a3;
                                      while (1)
                                      {
                                        v1010 = v846->u8[0];
                                        v1011 = v1010 < 0x20 || v1010 == 92;
                                        v1012 = v1011 || v1010 == (_DWORD)v28;
                                        v1013 = v1012;
                                        if (v1010 != 9 && v1013)
                                          goto LABEL_2004;
                                        v846 = (int8x16_t *)((char *)v846 + 1);
                                        *i64 = v846;
                                        if (v846 == (int8x16_t *)&v840[v23 - (_QWORD)a3 + 1])
                                        {
                                          v846 = (int8x16_t *)&v840[v23 - (_QWORD)a3 + 1];
                                          goto LABEL_2004;
                                        }
                                      }
                                    }
                                    a3 = v840 + 1;
                                    *i64 = v840 + 1;
                                    v844 = v1718;
                                    if (v843)
                                      goto LABEL_2177;
                                    v845 = v23 - (_QWORD)a3;
                                    if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                      goto LABEL_1827;
                                    v846 = (int8x16_t *)&v840[v845 + 1];
                                    if (v845 >= 0x10)
                                    {
                                      v847 = v840 + 16;
                                      while (1)
                                      {
                                        v848 = *(int8x16_t *)(v847 - 15);
                                        v849.i64[0] = 0x2222222222222222;
                                        v849.i64[1] = 0x2222222222222222;
                                        v850 = vceqq_s8(v848, v849);
                                        v851.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                        v851.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                        v852.i64[0] = 0x2020202020202020;
                                        v852.i64[1] = 0x2020202020202020;
                                        v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v848, v851), (int8x16_t)vcgtq_u8(v852, (uint8x16_t)v848)), v850);
                                        v850.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                        if (v850.i32[0])
                                          break;
                                        v847 += 16;
                                        if (v847 >= (unsigned __int8 *)v846)
                                        {
                                          if (v847 - 15 >= (unsigned __int8 *)v846)
                                          {
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            v844 = v1718;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                            goto LABEL_2003;
                                          }
                                          v933 = (unsigned __int8 *)&v846[-1];
                                          v1609 = v846[-1];
                                          v1610.i64[0] = 0x2222222222222222;
                                          v1610.i64[1] = 0x2222222222222222;
                                          v1611 = vceqq_s8(v1609, v1610);
                                          v1612.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                          v1612.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                          v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1609, v1612), (int8x16_t)vcgtq_u8(v852, (uint8x16_t)v1609)), v1611);
                                          v1611.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          v844 = v1718;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
                                          if (!v1611.i32[0])
                                          {
LABEL_2003:
                                            *i64 = v846;
                                            goto LABEL_2004;
                                          }
LABEL_2002:
                                          v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                          v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                          v846 = (int8x16_t *)&v933[v22.n128_u32[0]];
                                          goto LABEL_2003;
                                        }
                                      }
                                      v933 = v847 - 15;
                                      goto LABEL_2002;
                                    }
                                    v1122 = (int8x16_t *)(v840 + 1);
                                    if ((unsigned __int8 *)v23 == a3)
                                      goto LABEL_2003;
                                    while (JSC::safeStringLatin1CharactersInStrictJSON[v1122->u8[0]])
                                    {
                                      v1122 = (int8x16_t *)((char *)v1122 + 1);
                                      if (!--v845)
                                        goto LABEL_2003;
                                    }
                                    v846 = v1122;
                                    *i64 = v1122;
LABEL_2004:
                                    if ((unint64_t)v846 >= v23 || v846->u8[0] != (_DWORD)v28)
                                    {
                                      v842 = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_1883:
                                      if ((v842 & 0xFFFFFFFD) == 0)
                                      {
                                        v857 = JSC::LiteralParser<unsigned char>::parseRecursively(v9, v13, v1719);
                                        if (!v857)
                                          goto LABEL_2873;
                                        goto LABEL_1885;
                                      }
LABEL_2166:
                                      if (*(_BYTE *)v15 != 6)
                                      {
                                        v844 = v1718;
                                        switch(*(_BYTE *)v15)
                                        {
                                          case 1:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token ']'";
                                            goto LABEL_3251;
                                          case 3:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token '}'";
                                            goto LABEL_3251;
                                          case 4:
                                            v934 = *(_DWORD *)(v9 + 28);
                                            goto LABEL_2007;
                                          case 5:
                                            v1296 = *(_DWORD *)(v9 + 28);
                                            v840 = *(unsigned __int8 **)(v9 + 32);
                                            goto LABEL_3033;
                                          case 7:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token ':'";
                                            goto LABEL_3251;
                                          case 8:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token '('";
                                            goto LABEL_3251;
                                          case 9:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token ')'";
                                            goto LABEL_3251;
                                          case 0xA:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token ','";
                                            goto LABEL_3251;
                                          case 0xB:
                                            v1249 = *(unsigned __int8 **)(v9 + 48);
                                            v23 = *(_QWORD *)(v9 + 56);
                                            goto LABEL_2937;
                                          case 0xC:
                                            v1163 = *(unsigned __int8 **)(v9 + 48);
                                            v23 = *(_QWORD *)(v9 + 56);
                                            goto LABEL_2666;
                                          case 0xD:
                                            v1142 = *(unsigned __int8 **)(v9 + 48);
                                            v23 = *(_QWORD *)(v9 + 56);
                                            goto LABEL_2586;
                                          case 0xE:
                                            goto LABEL_2707;
                                          case 0xF:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token '.'";
                                            goto LABEL_3251;
                                          case 0x10:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token '='";
                                            goto LABEL_3251;
                                          case 0x11:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x1400000002;
                                            v1429 = "Unexpected token ';'";
                                            goto LABEL_3251;
                                          default:
                                            v1427 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1428 = v1427;
                                            v22.n128_u64[0] = 0x2000000002;
                                            v1429 = "Could not parse value expression";
LABEL_3251:
                                            *(_QWORD *)v1427 = v22.n128_u64[0];
                                            *(_QWORD *)(v1427 + 8) = v1429;
                                            *(_DWORD *)(v1427 + 16) = 4;
                                            v1430 = *(WTF::StringImpl **)(v9 + 96);
                                            *(_QWORD *)(v9 + 96) = v1428;
                                            if (!v1430)
                                              goto LABEL_3302;
                                            v1431 = *(_DWORD *)v1430 - 2;
                                            if (*(_DWORD *)v1430 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v1430, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                              WTF::fastFree(v1445, v1446, v1447, v1448, v1449, v1450, v1451, v1452);
LABEL_3302:
                                              v1723 = 0;
                                              LOBYTE(v14) = 0;
                                            }
                                            else
                                            {
                                              v1723 = 0;
                                              LOBYTE(v14) = 0;
                                              *(_DWORD *)v1430 = v1431;
                                            }
                                            break;
                                        }
                                        goto LABEL_3254;
                                      }
                                      v22.n128_u64[0] = *(_QWORD *)(v9 + 32);
                                      if ((v22.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
                                        && (v1007 = (int)v22.n128_f64[0],
                                            v22.n128_f64[0] == (double)(int)v1007)
                                        && ((_DWORD)v1007 || (v22.n128_u64[0] & 0x8000000000000000) == 0))
                                      {
                                        v857 = v1007 | 0xFFFE000000000000;
                                      }
                                      else
                                      {
                                        v857 = v22.n128_u64[0] + 0x2000000000000;
                                      }
                                      v1008 = *(unsigned __int8 **)(v9 + 48);
                                      v23 = *(_QWORD *)(v9 + 56);
                                      if ((unint64_t)v1008 < v23)
                                      {
                                        v1009 = v23 - (_QWORD)v1008;
                                        while (*(_BYTE *)(v26 + *v1008) == 19)
                                        {
                                          *i64 = ++v1008;
                                          if (!--v1009)
                                          {
                                            v1008 = (unsigned __int8 *)v23;
                                            break;
                                          }
                                        }
                                      }
                                      if (v1008 == (unsigned __int8 *)v23)
                                      {
LABEL_2803:
                                        *(_BYTE *)v15 = 14;
                                        if (!v857)
                                          goto LABEL_2873;
                                        goto LABEL_1885;
                                      }
                                      *(_BYTE *)v15 = 18;
                                      v28 = *v1008;
                                      v1014 = *(unsigned __int8 *)(v26 + v28);
                                      if (v1014 <= 4)
                                      {
                                        if (v1014 != 4)
                                          goto LABEL_2376;
                                        v1015 = *(unsigned __int8 *)(v9 + 40);
                                        if ((_DWORD)v28 != 39)
                                        {
                                          a3 = v1008 + 1;
                                          *i64 = v1008 + 1;
                                          if (!v1015)
                                          {
                                            v1016 = v23 - (_QWORD)a3;
                                            if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                              goto LABEL_1827;
                                            v1017 = (int8x16_t *)&v1008[v1016 + 1];
                                            if (v1016 >= 0x10)
                                            {
                                              v1018 = v1008 + 16;
                                              while (1)
                                              {
                                                v1019 = *(int8x16_t *)(v1018 - 15);
                                                v1020.i64[0] = 0x2222222222222222;
                                                v1020.i64[1] = 0x2222222222222222;
                                                v1021 = vceqq_s8(v1019, v1020);
                                                v1022.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1022.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1023.i64[0] = 0x2020202020202020;
                                                v1023.i64[1] = 0x2020202020202020;
                                                v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1019, v1022), (int8x16_t)vcgtq_u8(v1023, (uint8x16_t)v1019)), v1021);
                                                v1021.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                if (v1021.i32[0])
                                                  break;
                                                v1018 += 16;
                                                if (v1018 >= (unsigned __int8 *)v1017)
                                                {
LABEL_3563:
                                                  if (v1018 - 15 >= (unsigned __int8 *)v1017)
                                                  {
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    v826 = (char *)v1728.i64[0];
                                                  }
                                                  else
                                                  {
                                                    v1049 = (unsigned __int8 *)&v1017[-1];
                                                    v1633 = v1017[-1];
                                                    v1634.i64[0] = 0x2222222222222222;
                                                    v1634.i64[1] = 0x2222222222222222;
                                                    v1635 = vceqq_s8(v1633, v1634);
                                                    v1636.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v1636.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1633, v1636), (int8x16_t)vcgtq_u8(v1023, (uint8x16_t)v1633)), v1635);
                                                    v1635.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    v826 = (char *)v1728.i64[0];
                                                    if (v1635.i32[0])
                                                      goto LABEL_2275;
                                                  }
                                                  goto LABEL_2276;
                                                }
                                              }
LABEL_2274:
                                              v1049 = v1018 - 15;
LABEL_2275:
                                              v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                              v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                              v1017 = (int8x16_t *)&v1049[v22.n128_u32[0]];
                                              goto LABEL_2276;
                                            }
                                            v1199 = (int8x16_t *)(v1008 + 1);
                                            if ((unsigned __int8 *)v23 == a3)
                                              goto LABEL_2276;
                                            while (JSC::safeStringLatin1CharactersInStrictJSON[v1199->u8[0]])
                                            {
                                              v1199 = (int8x16_t *)((char *)v1199 + 1);
                                              if (!--v1016)
                                                goto LABEL_2276;
                                            }
LABEL_2931:
                                            v1017 = v1199;
                                            goto LABEL_2276;
                                          }
LABEL_3570:
                                          if ((unint64_t)a3 < v23)
                                          {
                                            v1090 = (uint64_t)&v1008[v23 - (_QWORD)a3 + 1];
                                            v1017 = (int8x16_t *)a3;
                                            while (1)
                                            {
                                              v1050 = v1017->u8[0];
                                              v1051 = v1050 < 0x20 || v1050 == 92;
                                              v1052 = v1051 || v1050 == (_DWORD)v28;
                                              v1053 = v1052;
                                              if (v1050 != 9 && v1053)
                                                goto LABEL_2277;
                                              v1017 = (int8x16_t *)((char *)v1017 + 1);
                                              *i64 = v1017;
                                              if (v1017 == (int8x16_t *)v1090)
                                              {
LABEL_3517:
                                                v1017 = (int8x16_t *)v1090;
                                                goto LABEL_2277;
                                              }
                                            }
                                          }
LABEL_3580:
                                          v1017 = (int8x16_t *)a3;
LABEL_2277:
                                          if ((unint64_t)v1017 < v23 && v1017->u8[0] == (_DWORD)v28)
                                          {
                                            *(_BYTE *)(v9 + 25) |= 1u;
                                            *(_QWORD *)(v9 + 32) = a3;
                                            *(_QWORD *)(v9 + 48) = (char *)v1017->i64 + 1;
                                            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v1017 - (_DWORD)a3) & 0x7FFFFFFF;
                                            *(_BYTE *)(v9 + 24) = 4;
                                            if (!v857)
                                              goto LABEL_2873;
                                            goto LABEL_1885;
                                          }
                                          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_2847:
                                          if (!v857)
                                            goto LABEL_2873;
                                          goto LABEL_1885;
                                        }
                                        if (*(_BYTE *)(v9 + 40))
                                        {
                                          a3 = v1008 + 1;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          *(_QWORD *)v1727.n128_u64[0] = v1008 + 1;
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
                                          goto LABEL_3570;
                                        }
                                        v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1343 = v1607;
                                        v22.n128_u64[0] = 0x2900000002;
                                        v1608 = "Single quotes (') are not allowed in JSON";
LABEL_3549:
                                        *(_QWORD *)v1607 = v22.n128_u64[0];
LABEL_3550:
                                        *(_QWORD *)(v1607 + 8) = v1608;
                                        *(_DWORD *)(v1607 + 16) = 4;
LABEL_3131:
                                        v1344 = *(WTF::StringImpl **)v1709;
                                        *(_QWORD *)v1709 = v1343;
                                        if (v1344)
                                        {
LABEL_3132:
                                          if (*(_DWORD *)v1344 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1344, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                            WTF::fastFree(v1419, v1420, v1421, v1422, v1423, v1424, v1425, v1426);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1344 -= 2;
                                          }
                                        }
                                        v9 = v1720;
LABEL_3135:
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_3136:
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                        if (!v857)
                                          goto LABEL_2873;
                                        goto LABEL_1885;
                                      }
                                      if (v1014 != 6)
                                      {
                                        if (v1014 != 5)
                                        {
                                          if (v1014 - 18 >= 2)
                                          {
LABEL_2376:
                                            *(_BYTE *)v15 = v1014;
                                            *i64 = v1008 + 1;
                                            if (!v857)
                                              goto LABEL_2873;
                                            goto LABEL_1885;
                                          }
                                          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                          v1343 = v1735.rlim_cur;
                                          if (!v1735.rlim_cur)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B19FE0);
                                          }
                                          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                          *(_QWORD *)(v1343 + 8) = v1343 + 20;
                                          *(_DWORD *)(v1343 + 16) = 4;
                                          *(_DWORD *)(v1343 + 36) = 656436837;
                                          v22 = *(__n128 *)"Unrecognized token '";
                                          *(_OWORD *)(v1343 + 20) = *(_OWORD *)"Unrecognized token '";
                                          *(_BYTE *)(v1343 + 40) = *v1008;
                                          *(_BYTE *)(v1343 + 41) = 39;
                                          goto LABEL_3131;
                                        }
                                        if ((_DWORD)v28 == 110)
                                        {
                                          if ((uint64_t)(v23 - (_QWORD)v1008) >= 4
                                            && *(_WORD *)(v1008 + 1) == 27765
                                            && v1008[3] == 108)
                                          {
LABEL_2652:
                                            *i64 = v1008 + 4;
                                            *(_BYTE *)v15 = 13;
                                            if (!v857)
                                              goto LABEL_2873;
                                            goto LABEL_1885;
                                          }
                                        }
                                        else if ((_DWORD)v28 == 102)
                                        {
                                          if ((uint64_t)(v23 - (_QWORD)v1008) >= 5
                                            && *(_WORD *)(v1008 + 1) == 27745
                                            && *(_WORD *)(v1008 + 3) == 25971)
                                          {
LABEL_2791:
                                            *i64 = v1008 + 5;
                                            *(_BYTE *)v15 = 12;
                                            if (!v857)
                                              goto LABEL_2873;
                                            goto LABEL_1885;
                                          }
                                        }
                                        else if ((_DWORD)v28 == 116
                                               && (uint64_t)(v23 - (_QWORD)v1008) >= 4
                                               && *(_WORD *)(v1008 + 1) == 30066
                                               && v1008[3] == 101)
                                        {
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          *(_QWORD *)v1727.n128_u64[0] = v1008 + 4;
                                          v15 = v1722;
                                          *(_BYTE *)v1722 = 11;
                                          v9 = v1720;
                                          v13 = (unint64_t)v1725;
                                          goto LABEL_3136;
                                        }
                                        v1412 = (int)v1008;
                                        *(_QWORD *)(v1720 + 32) = v1008;
                                        v1413 = (int)v1008;
                                        if ((unint64_t)v1008 < v23)
                                        {
                                          v1414 = v23 - (_QWORD)v1008;
                                          v1415 = (_DWORD)v1008 + v1414;
                                          while (1)
                                          {
                                            v1416 = *v1008;
                                            if (v1416 != 36)
                                            {
                                              v1417 = v1416 != 95 && (v1416 - 48) >= 0xA;
                                              if (v1417 && (v1416 | 0x20u) - 97 > 0x19)
                                                break;
                                            }
                                            *(_QWORD *)v1727.n128_u64[0] = ++v1008;
                                            if (!--v1414)
                                            {
                                              LODWORD(v1008) = v1415;
                                              break;
                                            }
                                          }
                                          v1413 = (int)v1008;
                                        }
                                        v9 = v1720;
                                        *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v1413 - v1412) & 0x7FFFFFFF;
                                        *(_BYTE *)(v9 + 24) = 5;
                                        goto LABEL_3135;
                                      }
                                      v1131 = v1008;
                                      if ((unint64_t)v1008 < v23)
                                      {
                                        v1131 = v1008;
                                        if ((_DWORD)v28 == 45)
                                        {
                                          v1131 = v1008 + 1;
                                          *i64 = v1008 + 1;
                                        }
                                      }
                                      if ((unint64_t)v1131 >= v23)
                                      {
LABEL_3532:
                                        v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1343 = v1607;
                                        v1608 = "Invalid number";
                                        *(_QWORD *)v1607 = v11;
                                        goto LABEL_3550;
                                      }
                                      v1132 = *v1131;
                                      if (v1132 == 48)
                                      {
                                        v1057 = v1131 + 1;
                                        *i64 = v1057;
                                      }
                                      else
                                      {
                                        if ((v1132 - 49) > 8)
                                          goto LABEL_3532;
                                        v1079 = v1131 + 1;
                                        do
                                        {
                                          v1057 = v1079;
                                          *i64 = v1079;
                                          if ((unint64_t)v1079 >= v23)
                                            break;
                                          ++v1079;
                                        }
                                        while (*v1057 - 48 < 0xA);
                                      }
                                      if ((unint64_t)v1057 < v23)
                                      {
                                        v1186 = *v1057;
                                        if (v1186 == 46)
                                        {
                                          *i64 = v1057 + 1;
                                          if ((unint64_t)(v1057 + 1) >= v23 || v1057[1] - 48 > 9)
                                          {
                                            v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1343 = v1607;
                                            v22.n128_u64[0] = 0x2200000002;
                                            v1608 = "Invalid digits after decimal point";
                                            goto LABEL_3549;
                                          }
                                          v1127 = v1057 + 2;
                                          do
                                          {
                                            v1057 = v1127;
                                            *i64 = v1127;
                                            if ((unint64_t)v1127 >= v23)
                                              break;
                                            ++v1127;
                                          }
                                          while (*v1057 - 48 < 0xA);
                                        }
                                        else if (v1186 != 69 && v1186 != 101 && v1057 - v1008 <= 9)
                                        {
                                          *(_BYTE *)v15 = 6;
                                          v1084 = *v1008;
                                          if (v1084 == 45)
                                            v1106 = v1008 + 1;
                                          else
                                            v1106 = v1008;
                                          if (v1106 < v1057)
                                          {
                                            v1086 = 0;
                                            do
                                            {
                                              v1107 = *v1106++;
                                              v1086 = v1107 + 10 * v1086 - 48;
                                            }
                                            while (v1106 < v1057);
                                            goto LABEL_2369;
                                          }
LABEL_2740:
                                          if (v1084 != 45)
                                          {
                                            v1086 = 0;
LABEL_2370:
                                            v22.n128_f64[0] = (double)v1086;
                                            *(double *)(v9 + 32) = (double)v1086;
                                            if (!v857)
                                              goto LABEL_2873;
                                            goto LABEL_1885;
                                          }
LABEL_2885:
                                          *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                          if (!v857)
                                            goto LABEL_2873;
                                          goto LABEL_1885;
                                        }
                                      }
                                      if ((unint64_t)v1057 < v23 && (*v1057 | 0x20) == 0x65)
                                      {
                                        v1187 = v1057 + 1;
                                        *i64 = v1057 + 1;
                                        if ((unint64_t)(v1057 + 1) < v23)
                                        {
                                          v1188 = *v1187;
                                          if (v1188 == 45 || v1188 == 43)
                                          {
                                            v1187 = v1057 + 2;
                                            *(_QWORD *)v1727.n128_u64[0] = v1057 + 2;
                                          }
                                        }
                                        if ((unint64_t)v1187 >= v23 || *v1187 - 48 > 9)
                                        {
                                          v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1343 = v1607;
                                          v22.n128_u64[0] = 0x5D00000002;
                                          v1608 = "Exponent symbols should be followed by an optional '+' or '-' and then"
                                                  " by at least one number";
                                          goto LABEL_3549;
                                        }
                                        v1189 = v1187 + 1;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        while (1)
                                        {
                                          v1057 = v1189;
                                          *i64 = v1189;
                                          if ((unint64_t)v1189 >= v23)
                                            break;
                                          ++v1189;
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
                                          if (*v1057 - 48 >= 0xA)
                                            goto LABEL_2520;
                                        }
LABEL_3562:
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                      }
LABEL_2520:
                                      *(_BYTE *)v15 = 6;
                                      LODWORD(v23) = (_DWORD)v1057 - (_DWORD)v1008;
                                      if (v1057 - v1008 < 0)
                                        goto LABEL_1827;
                                      v1735.rlim_cur = 0;
                                      fast_float::from_chars_advanced<double,char>(v1008, v1057, &v1735.rlim_cur, 0x2E00000005);
                                      v22.n128_u64[0] = v1735.rlim_cur;
                                      *(_QWORD *)(v9 + 32) = v1735.rlim_cur;
                                      if (!v857)
                                        goto LABEL_2873;
                                      goto LABEL_1885;
                                    }
                                    *(_BYTE *)(v9 + 25) |= 1u;
                                    *(_QWORD *)(v9 + 32) = a3;
                                    *(_QWORD *)(v9 + 48) = (char *)v846->i64 + 1;
                                    v934 = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v846 - (_DWORD)a3) & 0x7FFFFFFF;
                                    *(_DWORD *)(v9 + 28) = v934;
                                    *(_BYTE *)(v9 + 24) = 4;
LABEL_2007:
                                    v935 = v934 & 0x7FFFFFFF;
                                    if ((*(_BYTE *)(v9 + 25) & 1) == 0)
                                    {
                                      if (v935 < 0xB)
                                      {
                                        v1524 = v1725;
                                        JSC::Identifier::fromString((uint64_t)v1725, *(WTF::AtomStringImpl **)(v1720 + 32), v935, v28, a5, a6, a7, a8, &v1735);
                                        v1475 = JSC::jsString(v1524, (JSC::VM *)&v1735, v1525, v1526, v1527, v1528, v1529, v1530);
                                      }
                                      else
                                      {
                                        WTF::String::String((int **)&v1735, *(_WORD **)(v1720 + 32), v935);
                                        v1475 = JSC::jsNontrivialString((uint64_t)v1725, (JSC::VM *)&v1735, v1469, v1470, v1471, v1472, v1473, v1474);
                                      }
                                      v857 = v1475;
                                      v1531 = (WTF::StringImpl *)v1735.rlim_cur;
                                      v1735.rlim_cur = 0;
                                      if (v1531)
                                      {
                                        if (*(_DWORD *)v1531 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1531, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                          WTF::fastFree(v1590, v1591, v1592, v1593, v1594, v1595, v1596, v1597);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1531 -= 2;
                                        }
                                      }
                                      v9 = v1720;
                                      v15 = v1722;
                                      v13 = (unint64_t)v1725;
                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      v826 = (char *)v1728.i64[0];
                                      goto LABEL_2259;
                                    }
                                    v936 = *(_BYTE **)(v9 + 32);
                                    if (v935 >= 0xB)
                                    {
                                      if (v936)
                                      {
                                        v980 = WTF::fastCompactMalloc((WTF *)(v935 + 20));
                                        *(_DWORD *)v980 = 2;
                                        *(_DWORD *)(v980 + 4) = v935;
                                        *(_QWORD *)(v980 + 8) = v980 + 20;
                                        *(_DWORD *)(v980 + 16) = 4;
                                        memcpy((void *)(v980 + 20), v936, v935);
                                        v844 = v1718;
                                      }
                                      else
                                      {
                                        v980 = 0;
                                      }
                                      v981 = *(_DWORD *)(v980 + 16);
                                      v982 = v980;
                                      if ((v981 & 3) == 2)
                                      {
                                        v982 = v980;
                                        do
                                        {
                                          v982 = *(_QWORD *)(v982 + 24);
                                          v981 = *(_DWORD *)(v982 + 16);
                                        }
                                        while ((v981 & 3) == 2);
                                      }
                                      if ((v981 & 8) != 0)
                                      {
                                        v983 = 0;
                                      }
                                      else
                                      {
                                        *(_DWORD *)(v982 + 16) = v981 | 8;
                                        v983 = (unint64_t)*(unsigned int *)(v982 + 4) << ((v981 & 4) == 0);
                                      }
                                      v857 = *v844;
                                      if (*v844 >= v844[1])
                                      {
                                        v857 = v844[2];
                                        if ((v857 & 1) == 0)
                                        {
                                          v1240 = *(_QWORD *)(v857 + 8) ^ v844[3];
                                          v844[1] = v857 + HIDWORD(v1240);
                                          v844[2] = v857 + (int)v1240;
                                          goto LABEL_2114;
                                        }
                                        JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                        v15 = v1722;
                                        v9 = v1720;
                                        v857 = JSC::LocalAllocator::allocateSlowCase(v13 + 39672, v13 + 192, 16, 0, 0);
                                        v844 = v1718;
                                      }
                                      else
                                      {
LABEL_2114:
                                        *v844 = v857 + 16;
                                      }
                                      *(_DWORD *)v857 = v844[227] >> 4;
                                      v22 = v1713;
                                      *(_DWORD *)(v857 + 4) = v1713.n128_u32[0];
                                      *(_QWORD *)(v857 + 8) = v980;
                                      if (*(_BYTE *)(v13 + 755))
                                        __dmb(0xAu);
                                      if (v983 >= 0x101)
                                        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v13 + 192, 0, v857, v983, a5, a6, a7, a8);
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      goto LABEL_2259;
                                    }
                                    if ((_DWORD)v935 == 1)
                                    {
                                      if (*(_BYTE *)(v1710 + 2297))
                                      {
                                        v1120 = *(_QWORD *)(v13 + 8 * *v936 + 42216);
                                        v946 = *(_QWORD *)(v1120 + 8);
                                        if ((v946 & 1) != 0)
                                          v1121 = 0;
                                        else
                                          v1121 = *(_DWORD **)(v1120 + 8);
                                        *v1121 += 2;
                                      }
                                      else
                                      {
                                        LOBYTE(v1732) = *v936;
                                        WTF::AtomStringImpl::add((uint64_t)&v1732, 1uLL, v28, a5, a6, a7, a8, &v1735);
                                        v844 = v1718;
                                        v946 = v1735.rlim_cur;
                                      }
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      if (!v946)
                                      {
                                        v857 = *(_QWORD *)v1710;
                                        goto LABEL_2259;
                                      }
                                    }
                                    else
                                    {
                                      if ((v934 & 0x7FFFFFFF) != 0)
                                      {
                                        if (!v936)
                                        {
                                          v946 = 0;
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_2242;
                                        }
                                        v937 = 0;
                                        v1732 = *(unsigned __int8 **)(v9 + 32);
                                        v1733 = v934 & 0x7FFFFFFF;
                                        v938 = -1640531527;
                                        do
                                        {
                                          v939 = ((v938 + v936[v937]) << 16) ^ (v936[v937 + 1] << 11) ^ (v938 + v936[v937]);
                                          v938 = v939 + (v939 >> 11);
                                          v940 = v937 + 3;
                                          v937 += 2;
                                        }
                                        while (v940 < v935);
                                        if ((v935 & 1) != 0)
                                          v938 = ((v938 + v936[v935 - 1]) ^ ((v938
                                                                                             + v936[v935 - 1]) << 11))
                                               + (((v938 + v936[v935 - 1]) ^ ((v938
                                                                                              + v936[v935 - 1]) << 11)) >> 17);
                                        v941 = (v938 ^ (8 * v938)) + ((v938 ^ (8 * v938)) >> 5);
                                        v942 = (v941 ^ (4 * v941)) + ((v941 ^ (4 * v941)) >> 15);
                                        v943 = (v942 ^ (v942 << 10)) & 0xFFFFFF;
                                        if (!v943)
                                          v943 = 0x800000;
                                        v1734 = v943;
                                        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                                        {
                                          __clrex();
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_2020;
                                        }
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_2020:
                                          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                                        v945 = *(_QWORD *)(v1712 + 736);
                                        if (v945)
                                        {
LABEL_2022:
                                          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v945 + 56), (uint64_t)&v1732, v28, a5, a6, a7, a8, (uint64_t)&v1735);
                                          v946 = 16 * *(unsigned int *)v1735.rlim_cur;
                                          if (!v1736)
                                            *(_DWORD *)v946 += 2;
                                          v947 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                                          if (v947 == 1)
                                          {
                                            if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                                            {
LABEL_2304:
                                              v844 = v1718;
LABEL_2242:
                                              v1037 = *(_DWORD *)v946;
                                              *(_DWORD *)v946 += 2;
                                              if (v1037)
                                              {
                                                *(_DWORD *)v946 = v1037;
                                                goto LABEL_2244;
                                              }
                                              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v946, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                              v1096 = *(_QWORD *)(StatusReg + 752);
                                              if (v1096)
                                              {
                                                if (v946 >> 43
                                                  || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                       + ((v946 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v946)) & 1) == 0)
                                                {
                                                  if (v946 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v946 >> 24)
                                                  {
                                                    v28 = 0;
                                                  }
                                                  else
                                                  {
                                                    v28 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                     + ((((v946 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                     + 24) >> (2
                                                                             * ((BYTE3(v946) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                                    if ((_DWORD)v28 == 1)
                                                      goto LABEL_2406;
                                                  }
                                                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1096, v946, 1, v28, a5, a6, a7, a8);
                                                }
                                                else
                                                {
LABEL_2406:
                                                  v1097 = *(unsigned int *)(v1096 + 8000);
                                                  if (v1097 >= 0x3E7)
                                                  {
                                                    pas_thread_local_cache_append_deallocation_slow(v1096, v946, (os_unfair_lock_s *)5, v28, a5, a6, a7, a8);
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)(v1096 + 8 * v1097) = v946 | 0x5000000000000;
                                                    *(_DWORD *)(v1096 + 8000) = v1097 + 1;
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                pas_try_deallocate_slow_no_cache(v946, (uint64_t)&bmalloc_heap_config, 1);
                                              }
                                              v844 = v1718;
                                              goto LABEL_2244;
                                            }
                                          }
                                          else
                                          {
                                            __clrex();
                                          }
                                          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, (uint64_t)a3, v28, a5, a6, a7, a8);
                                          goto LABEL_2304;
                                        }
                                        v1068 = atomic_load(&WTF::initialize(void)::onceKey);
                                        if (v1068 != -1)
                                        {
                                          v1735.rlim_cur = (rlim_t)&v1729;
                                          v1730 = &v1735;
                                          std::__call_once(&WTF::initialize(void)::onceKey, &v1730, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                                        }
                                        v1069 = WTF::fastMalloc((WTF *)0x68);
                                        v945 = v1069;
                                        *(_OWORD *)v1069 = 0u;
                                        *(_OWORD *)(v1069 + 16) = 0u;
                                        *(_OWORD *)(v1069 + 32) = 0u;
                                        *(_OWORD *)(v1069 + 48) = 0u;
                                        *(_OWORD *)(v1069 + 64) = 0u;
                                        *(_OWORD *)(v1069 + 80) = 0u;
                                        *(_QWORD *)(v1069 + 96) = 0;
                                        *(_DWORD *)v1069 = 1;
                                        *(_OWORD *)(v1069 + 8) = 0u;
                                        v1070 = (unint64_t *)(v1069 + 8);
                                        *(_OWORD *)(v1069 + 24) = 0u;
                                        do
                                        {
                                          v1071 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                                          v1072 = v1071 + 1;
                                        }
                                        while (__stlxr(v1072, (unsigned int *)&WTF::ThreadLike::s_uid));
                                        *(_DWORD *)(v1069 + 48) = v1072;
                                        *(_QWORD *)(v1069 + 52) = 0;
                                        *(_QWORD *)(v1069 + 68) = 0;
                                        *(_QWORD *)(v1069 + 60) = 0;
                                        *(_DWORD *)(v1069 + 76) = 0;
                                        *(_QWORD *)(v1069 + 88) = 0;
                                        *(_QWORD *)(v1069 + 96) = 0;
                                        v1073 = pthread_self();
                                        if (__ldaxr(v1070))
                                        {
                                          __clrex();
                                          goto LABEL_2338;
                                        }
                                        if (__stxr(1uLL, v1070))
LABEL_2338:
                                          WTF::WordLock::lockSlow((WTF::WordLock *)v1070);
                                        *(_QWORD *)(v945 + 40) = v1073;
                                        *(_DWORD *)(v945 + 52) = pthread_mach_thread_np(v1073);
                                        v1075 = __ldxr(v1070);
                                        if (v1075 == 1)
                                        {
                                          v1076 = __stlxr(0, v1070);
                                          v9 = v1720;
                                          if (!v1076)
                                            goto LABEL_2453;
                                        }
                                        else
                                        {
                                          __clrex();
                                          v9 = v1720;
                                        }
                                        WTF::WordLock::unlockSlow((WTF::WordLock *)v1070);
LABEL_2453:
                                        stackaddr_np = *(char **)(v945 + 16);
                                        if (!stackaddr_np)
                                        {
                                          v1123 = pthread_main_np();
                                          v1124 = pthread_self();
                                          stackaddr_np = (char *)pthread_get_stackaddr_np(v1124);
                                          if (v1123)
                                          {
                                            getrlimit(3, &v1735);
                                            if (v1735.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                              stacksize_np = 0x800000;
                                            else
                                              stacksize_np = v1735.rlim_cur;
                                          }
                                          else
                                          {
                                            stacksize_np = pthread_get_stacksize_np(v1124);
                                          }
                                          *(_QWORD *)(v945 + 16) = stackaddr_np;
                                          *(_QWORD *)(v945 + 24) = &stackaddr_np[-stacksize_np];
                                          v9 = v1720;
                                          v15 = v1722;
                                        }
                                        *(_QWORD *)(v945 + 80) = stackaddr_np;
                                        *(_QWORD *)(v945 + 56) = v945 + 64;
                                        v1114 = pthread_self();
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if (pthread_equal(v1114, (pthread_t)WTF::s_webThreadPthread)
                                          || pthread_main_np())
                                        {
                                          v1115 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                                          if (v1115 != -1)
                                          {
                                            v1735.rlim_cur = (rlim_t)&v1729;
                                            v1730 = &v1735;
                                            std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v1730, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                                          }
                                          *(_QWORD *)(v945 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                                        }
                                        *(_QWORD *)(v1712 + 736) = v945;
                                        pthread_key_init_np();
                                        goto LABEL_2022;
                                      }
                                      v946 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                                      WTF::StringImpl::s_emptyAtomString += 2;
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    }
LABEL_2244:
                                    v1038 = *(_DWORD *)(v946 + 4);
                                    if (v1038 == 1)
                                    {
                                      v1039 = *(_DWORD *)(v946 + 16);
                                      v1128 = *(unsigned __int8 **)(v946 + 8);
                                      if ((v1039 & 4) != 0)
                                      {
                                        v1129 = *v1128;
LABEL_2509:
                                        v857 = *(_QWORD *)(v13 + 8 * v1129 + 42216);
                                        goto LABEL_2257;
                                      }
                                      v1129 = *(unsigned __int16 *)v1128;
                                      if (v1129 <= 0xFF)
                                        goto LABEL_2509;
                                    }
                                    else
                                    {
                                      if (!v1038)
                                      {
                                        v857 = *(_QWORD *)v1710;
                                        goto LABEL_2257;
                                      }
                                      v1039 = *(_DWORD *)(v946 + 16);
                                    }
                                    *(_DWORD *)v946 += 2;
                                    v1040 = v946;
                                    if ((v1039 & 3) == 2)
                                    {
                                      v1040 = v946;
                                      do
                                      {
                                        v1040 = *(_QWORD *)(v1040 + 24);
                                        v1039 = *(_DWORD *)(v1040 + 16);
                                      }
                                      while ((v1039 & 3) == 2);
                                    }
                                    if ((v1039 & 8) != 0)
                                    {
                                      v1041 = 0;
                                    }
                                    else
                                    {
                                      *(_DWORD *)(v1040 + 16) = v1039 | 8;
                                      v1041 = (unint64_t)*(unsigned int *)(v1040 + 4) << ((v1039 & 4) == 0);
                                    }
                                    v857 = *v844;
                                    if (*v844 >= v844[1])
                                    {
                                      v857 = v844[2];
                                      if ((v857 & 1) != 0)
                                      {
                                        JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                        v15 = v1722;
                                        v9 = v1720;
                                        v857 = JSC::LocalAllocator::allocateSlowCase(v13 + 39672, v13 + 192, 16, 0, 0);
                                        v844 = v1718;
                                        goto LABEL_2252;
                                      }
                                      v1222 = *(_QWORD *)(v857 + 8) ^ v844[3];
                                      v844[1] = v857 + HIDWORD(v1222);
                                      v844[2] = v857 + (int)v1222;
                                    }
                                    *v844 = v857 + 16;
LABEL_2252:
                                    *(_DWORD *)v857 = v844[227] >> 4;
                                    v22 = v1713;
                                    *(_DWORD *)(v857 + 4) = v1713.n128_u32[0];
                                    *(_QWORD *)(v857 + 8) = v946;
                                    if (*(_BYTE *)(v13 + 755))
                                      __dmb(0xAu);
                                    if (v1041 >= 0x101)
                                      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v13 + 192, 0, v857, v1041, a5, a6, a7, a8);
                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_2257:
                                    if (*(_DWORD *)v946 != 2)
                                    {
                                      *(_DWORD *)v946 -= 2;
                                      goto LABEL_2259;
                                    }
                                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v946, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                    v1088 = *(_QWORD *)(StatusReg + 752);
                                    if (v1088)
                                    {
                                      if (v946 >> 43
                                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                             + ((v946 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v946)) & 1) == 0)
                                      {
                                        if (v946 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v946 >> 24)
                                        {
                                          v28 = 0;
LABEL_2974:
                                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1088, v946, 1, v28, a5, a6, a7, a8);
                                          goto LABEL_2259;
                                        }
                                        v28 = (*(_DWORD *)((char *)off_1ECF425F8
                                                         + ((((v946 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                         + 24) >> (2 * ((BYTE3(v946) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                        if ((_DWORD)v28 != 1)
                                          goto LABEL_2974;
                                      }
                                      v1089 = *(unsigned int *)(v1088 + 8000);
                                      if (v1089 >= 0x3E7)
                                      {
                                        pas_thread_local_cache_append_deallocation_slow(v1088, v946, (os_unfair_lock_s *)5, v28, a5, a6, a7, a8);
                                      }
                                      else
                                      {
                                        *(_QWORD *)(v1088 + 8 * v1089) = v946 | 0x5000000000000;
                                        *(_DWORD *)(v1088 + 8000) = v1089 + 1;
                                      }
                                    }
                                    else
                                    {
                                      pas_try_deallocate_slow_no_cache(v946, (uint64_t)&bmalloc_heap_config, 1);
                                    }
LABEL_2259:
                                    v1008 = *(unsigned __int8 **)(v9 + 48);
                                    v23 = *(_QWORD *)(v9 + 56);
                                    if ((unint64_t)v1008 < v23)
                                    {
                                      v1042 = v23 - (_QWORD)v1008;
                                      while (JSC::tokenTypesOfLatin1Characters[*v1008] == 19)
                                      {
                                        *i64 = ++v1008;
                                        if (!--v1042)
                                        {
                                          v1008 = (unsigned __int8 *)v23;
                                          break;
                                        }
                                      }
                                    }
                                    if (v1008 == (unsigned __int8 *)v23)
                                      goto LABEL_2803;
                                    *(_BYTE *)v15 = 18;
                                    v28 = *v1008;
                                    LOBYTE(v1014) = JSC::tokenTypesOfLatin1Characters[v28];
                                    switch(*v1008)
                                    {
                                      case 0u:
                                      case 1u:
                                      case 2u:
                                      case 3u:
                                      case 4u:
                                      case 5u:
                                      case 6u:
                                      case 7u:
                                      case 8u:
                                      case 9u:
                                      case 0xAu:
                                      case 0xBu:
                                      case 0xCu:
                                      case 0xDu:
                                      case 0xEu:
                                      case 0xFu:
                                      case 0x10u:
                                      case 0x11u:
                                      case 0x12u:
                                      case 0x13u:
                                      case 0x14u:
                                      case 0x15u:
                                      case 0x16u:
                                      case 0x17u:
                                      case 0x18u:
                                      case 0x19u:
                                      case 0x1Au:
                                      case 0x1Bu:
                                      case 0x1Cu:
                                      case 0x1Du:
                                      case 0x1Eu:
                                      case 0x1Fu:
                                      case 0x20u:
                                      case 0x21u:
                                      case 0x23u:
                                      case 0x25u:
                                      case 0x26u:
                                      case 0x2Au:
                                      case 0x2Bu:
                                      case 0x2Fu:
                                      case 0x3Cu:
                                      case 0x3Eu:
                                      case 0x3Fu:
                                      case 0x40u:
                                      case 0x5Cu:
                                      case 0x5Eu:
                                      case 0x60u:
                                      case 0x7Cu:
                                      case 0x7Eu:
                                      case 0x7Fu:
                                      case 0x80u:
                                      case 0x81u:
                                      case 0x82u:
                                      case 0x83u:
                                      case 0x84u:
                                      case 0x85u:
                                      case 0x86u:
                                      case 0x87u:
                                      case 0x88u:
                                      case 0x89u:
                                      case 0x8Au:
                                      case 0x8Bu:
                                      case 0x8Cu:
                                      case 0x8Du:
                                      case 0x8Eu:
                                      case 0x8Fu:
                                      case 0x90u:
                                      case 0x91u:
                                      case 0x92u:
                                      case 0x93u:
                                      case 0x94u:
                                      case 0x95u:
                                      case 0x96u:
                                      case 0x97u:
                                      case 0x98u:
                                      case 0x99u:
                                      case 0x9Au:
                                      case 0x9Bu:
                                      case 0x9Cu:
                                      case 0x9Du:
                                      case 0x9Eu:
                                      case 0x9Fu:
                                      case 0xA0u:
                                      case 0xA1u:
                                      case 0xA2u:
                                      case 0xA3u:
                                      case 0xA4u:
                                      case 0xA5u:
                                      case 0xA6u:
                                      case 0xA7u:
                                      case 0xA8u:
                                      case 0xA9u:
                                      case 0xAAu:
                                      case 0xABu:
                                      case 0xACu:
                                      case 0xADu:
                                      case 0xAEu:
                                      case 0xAFu:
                                      case 0xB0u:
                                      case 0xB1u:
                                      case 0xB2u:
                                      case 0xB3u:
                                      case 0xB4u:
                                      case 0xB5u:
                                      case 0xB6u:
                                      case 0xB7u:
                                      case 0xB8u:
                                      case 0xB9u:
                                      case 0xBAu:
                                      case 0xBBu:
                                      case 0xBCu:
                                      case 0xBDu:
                                      case 0xBEu:
                                      case 0xBFu:
                                      case 0xC0u:
                                      case 0xC1u:
                                      case 0xC2u:
                                      case 0xC3u:
                                      case 0xC4u:
                                      case 0xC5u:
                                      case 0xC6u:
                                      case 0xC7u:
                                      case 0xC8u:
                                      case 0xC9u:
                                      case 0xCAu:
                                      case 0xCBu:
                                      case 0xCCu:
                                      case 0xCDu:
                                      case 0xCEu:
                                      case 0xCFu:
                                      case 0xD0u:
                                      case 0xD1u:
                                      case 0xD2u:
                                      case 0xD3u:
                                      case 0xD4u:
                                      case 0xD5u:
                                      case 0xD6u:
                                      case 0xD7u:
                                      case 0xD8u:
                                      case 0xD9u:
                                      case 0xDAu:
                                      case 0xDBu:
                                      case 0xDCu:
                                      case 0xDDu:
                                      case 0xDEu:
                                      case 0xDFu:
                                      case 0xE0u:
                                      case 0xE1u:
                                      case 0xE2u:
                                      case 0xE3u:
                                      case 0xE4u:
                                      case 0xE5u:
                                      case 0xE6u:
                                      case 0xE7u:
                                      case 0xE8u:
                                      case 0xE9u:
                                      case 0xEAu:
                                      case 0xEBu:
                                      case 0xECu:
                                      case 0xEDu:
                                      case 0xEEu:
                                      case 0xEFu:
                                      case 0xF0u:
                                      case 0xF1u:
                                      case 0xF2u:
                                      case 0xF3u:
                                      case 0xF4u:
                                      case 0xF5u:
                                      case 0xF6u:
                                      case 0xF7u:
                                      case 0xF8u:
                                      case 0xF9u:
                                      case 0xFAu:
                                      case 0xFBu:
                                      case 0xFCu:
                                      case 0xFDu:
                                      case 0xFEu:
                                      case 0xFFu:
                                        WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                        v1267 = v1735.rlim_cur;
                                        if (!v1735.rlim_cur)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x198B19FD8);
                                        }
                                        *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                        *(_QWORD *)(v1267 + 8) = v1267 + 20;
                                        *(_DWORD *)(v1267 + 16) = 4;
                                        *(_DWORD *)(v1267 + 36) = 656436837;
                                        v22 = *(__n128 *)"Unrecognized token '";
                                        *(_OWORD *)(v1267 + 20) = *(_OWORD *)"Unrecognized token '";
                                        *(_BYTE *)(v1267 + 40) = *v1008;
                                        *(_BYTE *)(v1267 + 41) = 39;
                                        v1268 = *(WTF::StringImpl **)v1709;
                                        *(_QWORD *)v1709 = v1267;
                                        if (!v1268)
                                          goto LABEL_2847;
                                        if (*(_DWORD *)v1268 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1268, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                          WTF::fastFree(v1362, v1363, v1364, v1365, v1366, v1367, v1368, v1369);
                                          if (!v857)
                                            goto LABEL_2873;
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1268 -= 2;
                                          if (!v857)
                                            goto LABEL_2873;
                                        }
                                        goto LABEL_1885;
                                      case 0x22u:
                                      case 0x27u:
                                        v1043 = *(unsigned __int8 *)(v9 + 40);
                                        if ((_DWORD)v28 != 39)
                                        {
                                          a3 = v1008 + 1;
                                          *i64 = v1008 + 1;
                                          if (!v1043)
                                          {
                                            v1044 = v23 - (_QWORD)a3;
                                            if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                              goto LABEL_1827;
                                            v1017 = (int8x16_t *)&v1008[v1044 + 1];
                                            if (v1044 >= 0x10)
                                            {
                                              v1018 = v1008 + 16;
                                              while (1)
                                              {
                                                v1045 = *(int8x16_t *)(v1018 - 15);
                                                v1046.i64[0] = 0x2222222222222222;
                                                v1046.i64[1] = 0x2222222222222222;
                                                v1047 = vceqq_s8(v1045, v1046);
                                                v1048.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1048.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1023.i64[0] = 0x2020202020202020;
                                                v1023.i64[1] = 0x2020202020202020;
                                                v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1045, v1048), (int8x16_t)vcgtq_u8(v1023, (uint8x16_t)v1045)), v1047);
                                                v1047.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                if (v1047.i32[0])
                                                  goto LABEL_2274;
                                                v1018 += 16;
                                                if (v1018 >= (unsigned __int8 *)v1017)
                                                  goto LABEL_3563;
                                              }
                                            }
                                            v1199 = (int8x16_t *)(v1008 + 1);
                                            if ((unsigned __int8 *)v23 != a3)
                                            {
                                              while (JSC::safeStringLatin1CharactersInStrictJSON[v1199->u8[0]])
                                              {
                                                v1199 = (int8x16_t *)((char *)v1199 + 1);
                                                if (!--v1044)
                                                  goto LABEL_2276;
                                              }
                                              goto LABEL_2931;
                                            }
LABEL_2276:
                                            *i64 = v1017;
                                            goto LABEL_2277;
                                          }
                                          goto LABEL_2385;
                                        }
                                        if (*(_BYTE *)(v9 + 40))
                                        {
                                          a3 = v1008 + 1;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          *(_QWORD *)v1727.n128_u64[0] = v1008 + 1;
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
LABEL_2385:
                                          if ((unint64_t)a3 >= v23)
                                            goto LABEL_3580;
                                          v1090 = (uint64_t)&v1008[v23 - (_QWORD)a3 + 1];
                                          v1017 = (int8x16_t *)a3;
                                          while (1)
                                          {
                                            v1091 = v1017->u8[0];
                                            v1092 = v1091 < 0x20 || v1091 == 92;
                                            v1093 = v1092 || v1091 == (_DWORD)v28;
                                            v1094 = v1093;
                                            if (v1091 != 9 && v1094)
                                              goto LABEL_2277;
                                            v1017 = (int8x16_t *)((char *)v1017 + 1);
                                            *i64 = v1017;
                                            if (v1017 == (int8x16_t *)v1090)
                                              goto LABEL_3517;
                                          }
                                        }
                                        v1582 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1583 = v1582;
                                        v22.n128_u64[0] = 0x2900000002;
                                        v1584 = "Single quotes (') are not allowed in JSON";
                                        goto LABEL_3480;
                                      case 0x24u:
                                      case 0x41u:
                                      case 0x42u:
                                      case 0x43u:
                                      case 0x44u:
                                      case 0x45u:
                                      case 0x46u:
                                      case 0x47u:
                                      case 0x48u:
                                      case 0x49u:
                                      case 0x4Au:
                                      case 0x4Bu:
                                      case 0x4Cu:
                                      case 0x4Du:
                                      case 0x4Eu:
                                      case 0x4Fu:
                                      case 0x50u:
                                      case 0x51u:
                                      case 0x52u:
                                      case 0x53u:
                                      case 0x54u:
                                      case 0x55u:
                                      case 0x56u:
                                      case 0x57u:
                                      case 0x58u:
                                      case 0x59u:
                                      case 0x5Au:
                                      case 0x5Fu:
                                      case 0x61u:
                                      case 0x62u:
                                      case 0x63u:
                                      case 0x64u:
                                      case 0x65u:
                                      case 0x66u:
                                      case 0x67u:
                                      case 0x68u:
                                      case 0x69u:
                                      case 0x6Au:
                                      case 0x6Bu:
                                      case 0x6Cu:
                                      case 0x6Du:
                                      case 0x6Eu:
                                      case 0x6Fu:
                                      case 0x70u:
                                      case 0x71u:
                                      case 0x72u:
                                      case 0x73u:
                                      case 0x74u:
                                      case 0x75u:
                                      case 0x76u:
                                      case 0x77u:
                                      case 0x78u:
                                      case 0x79u:
                                      case 0x7Au:
                                        if ((_DWORD)v28 == 110)
                                        {
                                          if ((uint64_t)(v23 - (_QWORD)v1008) >= 4
                                            && *(_WORD *)(v1008 + 1) == 27765
                                            && v1008[3] == 108)
                                          {
                                            goto LABEL_2652;
                                          }
                                        }
                                        else if ((_DWORD)v28 == 102)
                                        {
                                          if ((uint64_t)(v23 - (_QWORD)v1008) >= 5
                                            && *(_WORD *)(v1008 + 1) == 27745
                                            && *(_WORD *)(v1008 + 3) == 25971)
                                          {
                                            goto LABEL_2791;
                                          }
                                        }
                                        else if ((_DWORD)v28 == 116
                                               && (uint64_t)(v23 - (_QWORD)v1008) >= 4
                                               && *(_WORD *)(v1008 + 1) == 30066
                                               && v1008[3] == 101)
                                        {
                                          *i64 = v1008 + 4;
                                          *(_BYTE *)v15 = 11;
                                          if (!v857)
                                            goto LABEL_2873;
                                          goto LABEL_1885;
                                        }
                                        v1355 = (int)v1008;
                                        *(_QWORD *)(v9 + 32) = v1008;
                                        v1356 = (int)v1008;
                                        if ((unint64_t)v1008 < v23)
                                        {
                                          v1357 = v23 - (_QWORD)v1008;
                                          v1358 = (_DWORD)v1008 + v1357;
                                          while (1)
                                          {
                                            v1359 = *v1008;
                                            if (v1359 != 36)
                                            {
                                              v1360 = v1359 != 95 && (v1359 - 48) >= 0xA;
                                              if (v1360 && (v1359 | 0x20u) - 97 > 0x19)
                                                break;
                                            }
                                            *i64 = ++v1008;
                                            if (!--v1357)
                                            {
                                              LODWORD(v1008) = v1358;
                                              break;
                                            }
                                          }
                                          v1356 = (int)v1008;
                                          v9 = v1720;
                                        }
                                        *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | (v1356 - v1355) & 0x7FFFFFFF;
                                        *(_BYTE *)(v9 + 24) = 5;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        goto LABEL_3136;
                                      case 0x2Du:
                                      case 0x30u:
                                      case 0x31u:
                                      case 0x32u:
                                      case 0x33u:
                                      case 0x34u:
                                      case 0x35u:
                                      case 0x36u:
                                      case 0x37u:
                                      case 0x38u:
                                      case 0x39u:
                                        v1080 = v1008;
                                        if ((unint64_t)v1008 < v23)
                                        {
                                          v1080 = v1008;
                                          if ((_DWORD)v28 == 45)
                                          {
                                            v1080 = v1008 + 1;
                                            *i64 = v1008 + 1;
                                          }
                                        }
                                        if ((unint64_t)v1080 >= v23)
                                          goto LABEL_3437;
                                        v1081 = *v1080;
                                        if (v1081 == 48)
                                        {
                                          v1057 = v1080 + 1;
                                          *i64 = v1057;
                                        }
                                        else
                                        {
                                          if ((v1081 - 49) > 8)
                                          {
LABEL_3437:
                                            v1544 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1545 = v1544;
                                            v1546 = "Invalid number";
                                            *(_QWORD *)v1544 = v11;
                                            goto LABEL_3438;
                                          }
                                          v1082 = v1080 + 1;
                                          do
                                          {
                                            v1057 = v1082;
                                            *i64 = v1082;
                                            if ((unint64_t)v1082 >= v23)
                                              break;
                                            ++v1082;
                                          }
                                          while (*v1057 - 48 < 0xA);
                                        }
                                        if ((unint64_t)v1057 < v23)
                                        {
                                          v1083 = *v1057;
                                          if (v1083 == 46)
                                          {
                                            *i64 = v1057 + 1;
                                            if ((unint64_t)(v1057 + 1) >= v23 || v1057[1] - 48 > 9)
                                            {
                                              v1544 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1545 = v1544;
                                              v22.n128_u64[0] = 0x2200000002;
                                              v1546 = "Invalid digits after decimal point";
                                              *(_QWORD *)v1544 = 0x2200000002;
LABEL_3438:
                                              *(_QWORD *)(v1544 + 8) = v1546;
                                              *(_DWORD *)(v1544 + 16) = 4;
                                              v1344 = *(WTF::StringImpl **)v1709;
                                              *(_QWORD *)v1709 = v1545;
                                              if (!v1344)
                                                goto LABEL_2847;
                                              goto LABEL_3132;
                                            }
                                            v1058 = v1057 + 2;
                                            do
                                            {
                                              v1057 = v1058;
                                              *i64 = v1058;
                                              if ((unint64_t)v1058 >= v23)
                                                break;
                                              ++v1058;
                                            }
                                            while (*v1057 - 48 < 0xA);
                                          }
                                          else if (v1083 != 69 && v1083 != 101 && v1057 - v1008 <= 9)
                                          {
                                            *(_BYTE *)v15 = 6;
                                            v1084 = *v1008;
                                            if (v1084 == 45)
                                              v1085 = v1008 + 1;
                                            else
                                              v1085 = v1008;
                                            if (v1085 >= v1057)
                                              goto LABEL_2740;
                                            v1086 = 0;
                                            do
                                            {
                                              v1087 = *v1085++;
                                              v1086 = v1087 + 10 * v1086 - 48;
                                            }
                                            while (v1085 < v1057);
LABEL_2369:
                                            if (v1084 != 45)
                                              goto LABEL_2370;
                                            if (v1086)
                                            {
                                              v22.n128_f64[0] = (double)-v1086;
                                              *(double *)(v9 + 32) = v22.n128_f64[0];
                                              if (!v857)
                                                goto LABEL_2873;
                                              goto LABEL_1885;
                                            }
                                            goto LABEL_2885;
                                          }
                                        }
                                        if ((unint64_t)v1057 >= v23 || (*v1057 | 0x20) != 0x65)
                                          goto LABEL_2520;
                                        v1133 = v1057 + 1;
                                        *i64 = v1057 + 1;
                                        if ((unint64_t)(v1057 + 1) < v23)
                                        {
                                          v1134 = *v1133;
                                          if (v1134 == 45 || v1134 == 43)
                                          {
                                            v1133 = v1057 + 2;
                                            *(_QWORD *)v1727.n128_u64[0] = v1057 + 2;
                                          }
                                        }
                                        if ((unint64_t)v1133 < v23 && *v1133 - 48 <= 9)
                                        {
                                          v1135 = v1133 + 1;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          while (1)
                                          {
                                            v1057 = v1135;
                                            *i64 = v1135;
                                            if ((unint64_t)v1135 >= v23)
                                              goto LABEL_3562;
                                            ++v1135;
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                            if (*v1057 - 48 >= 0xA)
                                              goto LABEL_2520;
                                          }
                                        }
                                        v1582 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1583 = v1582;
                                        v22.n128_u64[0] = 0x5D00000002;
                                        v1584 = "Exponent symbols should be followed by an optional '+' or '-' and then b"
                                                "y at least one number";
LABEL_3480:
                                        *(_QWORD *)v1582 = v22.n128_u64[0];
                                        *(_QWORD *)(v1582 + 8) = v1584;
                                        *(_DWORD *)(v1582 + 16) = 4;
                                        v1585 = *(WTF::StringImpl **)v1709;
                                        *(_QWORD *)v1709 = v1583;
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                        if (!v1585)
                                          goto LABEL_2847;
                                        if (*(_DWORD *)v1585 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1585, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                          WTF::fastFree(v1637, v1638, v1639, v1640, v1641, v1642, v1643, v1644);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1585 -= 2;
                                        }
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v826 = (char *)v1728.i64[0];
                                        if (!v857)
                                          goto LABEL_2873;
LABEL_1885:
                                        if (rlim_cur)
                                        {
                                          v858 = *(_DWORD *)(rlim_cur + 16);
                                          if ((v858 & 0x20) == 0)
                                          {
                                            v859 = *(_BYTE **)(rlim_cur + 8);
                                            v860 = *(unsigned int *)(rlim_cur + 4);
                                            if ((v858 & 4) != 0)
                                            {
                                              if ((_DWORD)v860)
                                              {
                                                v861 = *v859 - 48;
                                                if (v861 <= 9 && (v860 < 2 || *v859 != 48))
                                                {
                                                  v1602 = v859 + 1;
                                                  v1603 = v860 - 1;
                                                  while (v1603)
                                                  {
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    if (v861 <= 0x19999999)
                                                    {
                                                      v1604 = *v1602 - 48;
                                                      if (v1604 <= 9)
                                                      {
                                                        v450 = __CFADD__(v1604, 10 * v861);
                                                        v861 = v1604 + 10 * v861;
                                                        ++v1602;
                                                        --v1603;
                                                        if (!v450)
                                                          continue;
                                                      }
                                                    }
                                                    goto LABEL_1890;
                                                  }
                                                  v9 = v1720;
                                                  v15 = v1722;
                                                  v13 = (unint64_t)v1725;
                                                  i64 = (_QWORD *)v1727.n128_u64[0];
                                                  v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  v826 = (char *)v1728.i64[0];
                                                  if (v861 != -1)
                                                  {
LABEL_1993:
                                                    v927 = v861;
                                                    v928 = *(_QWORD *)v9;
                                                    v929 = *v826;
                                                    v930 = *v826 & 0x1F;
                                                    if (v930 - 4 >= 0xA)
                                                    {
                                                      v1159 = v930 > 3 || v930 == 2;
                                                      if (v1159 && (*v826 & 0x10) == 0)
                                                      {
                                                        __break(0xC471u);
                                                        JUMPOUT(0x198B19A24);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v931 = *v1717;
                                                      if (*(_DWORD *)(*v1717 - 4) > v927)
                                                      {
                                                        a2 = *(_QWORD *)(v928 + 56);
                                                        v932 = v929 & 0xF;
                                                        if ((v932 - 8) >= 2)
                                                        {
                                                          switch(v932)
                                                          {
                                                            case 0:
                                                            case 1:
                                                              JSC::JSObject::setIndexQuicklyForTypedArray((uint64_t)v1724, v927, v857);
                                                              break;
                                                            case 4:
                                                            case 5:
                                                              if (v857 > 0xFFFDFFFFFFFFFFFFLL)
                                                                goto LABEL_1996;
                                                              JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex(v1724, (JSC::VM *)a2, v927, v857, a5, a6, a7, a8);
                                                              break;
                                                            case 6:
                                                            case 7:
                                                              if (v857 >> 49)
                                                              {
                                                                v22.n128_f64[0] = (double)(int)v857;
                                                                if (v857 <= 0xFFFDFFFFFFFFFFFFLL)
                                                                  v22.n128_u64[0] = v857 - 0x2000000000000;
                                                                *(_QWORD *)(v931 + 8 * v927) = v22.n128_u64[0];
LABEL_2609:
                                                                if (*(_DWORD *)(v931 - 8) <= v927)
                                                                  *(_DWORD *)(v931 - 8) = v927 + 1;
                                                              }
                                                              else
                                                              {
                                                                JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(v1724, (JSC::VM *)a2, v927, v857, a5, a6, a7, a8, v22.n128_f64[0]);
                                                              }
                                                              break;
                                                            case 10:
                                                            case 11:
                                                            case 12:
                                                            case 13:
                                                              v1581 = v931 + 8 * v927;
                                                              v14 = *(int16x8_t **)(v1581 + 16);
                                                              *(_QWORD *)(v1581 + 16) = v857;
                                                              if ((v857 & 0xFFFE000000000002) == 0
                                                                && *(_DWORD *)(a2 + 760) >= *v1716)
                                                              {
                                                                JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1724);
                                                              }
                                                              v9 = v1720;
                                                              v15 = v1722;
                                                              v13 = (unint64_t)v1725;
                                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                              if (v14)
                                                                break;
                                                              ++*(_DWORD *)(v931 + 12);
                                                              goto LABEL_2609;
                                                            default:
                                                              __break(0xC471u);
                                                              JUMPOUT(0x198B19A00);
                                                          }
                                                        }
                                                        else
                                                        {
LABEL_1996:
                                                          *(_QWORD *)(v931 + 8 * v927) = v857;
                                                          if (*(_DWORD *)(v931 - 8) <= v927)
                                                            *(_DWORD *)(v931 - 8) = v927 + 1;
                                                          if ((v857 & 0xFFFE000000000002) == 0
                                                            && *(_DWORD *)(a2 + 760) >= *v1716)
                                                          {
                                                            JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1724);
                                                          }
                                                        }
LABEL_1999:
                                                        if (*(_DWORD *)(v13 + 80))
                                                        {
                                                          v1219 = *(_DWORD *)(v13 + 80);
                                                          if ((v1219 & 0x27) != 0 && (v1219 & 0x20) == 0)
                                                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, v28, a5, a6, a7, a8);
                                                          if (*(_QWORD *)(v13 + 16))
                                                            goto LABEL_2873;
                                                        }
                                                        goto LABEL_1919;
                                                      }
                                                    }
                                                    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(v1724, v928, (JSC::VM *)v927, v857, 0, 0, a7, a8, (int32x4_t)v22);
                                                    goto LABEL_1999;
                                                  }
                                                }
                                              }
                                            }
                                            else if ((_DWORD)v860)
                                            {
                                              v861 = *(unsigned __int16 *)v859 - 48;
                                              if (v861 <= 9 && (*(_WORD *)v859 != 48 || v860 <= 1))
                                              {
                                                v910 = (unsigned __int16 *)(v859 + 2);
                                                v911 = v860 - 1;
                                                while (v911)
                                                {
                                                  if (v861 <= 0x19999999)
                                                  {
                                                    v912 = *v910 - 48;
                                                    if (v912 <= 9)
                                                    {
                                                      v450 = __CFADD__(v912, 10 * v861);
                                                      v861 = v912 + 10 * v861;
                                                      ++v910;
                                                      --v911;
                                                      if (!v450)
                                                        continue;
                                                    }
                                                  }
                                                  goto LABEL_1890;
                                                }
                                                if (v861 != -1)
                                                  goto LABEL_1993;
                                              }
                                            }
                                          }
                                        }
LABEL_1890:
                                        LODWORD(v14) = *(_DWORD *)v1724;
                                        if ((*(_DWORD *)(16 * (*(_DWORD *)v1724 & 0xFFFFFFFE) + 0x10) & 0x8000003) != 0)
                                          goto LABEL_2089;
                                        v862 = *(_QWORD *)(16 * (v14 & 0xFFFFFFFE) + 0x50);
                                        if ((v862 & 1) == 0)
                                        {
                                          v863 = *(_QWORD *)(v862 + 8);
                                          if (!v863)
                                            goto LABEL_2089;
                                          v864 = *(_DWORD *)(v863 - 8);
                                          v865 = ((rlim_cur | 0x100000000000000) + ~(rlim_cur << 32)) ^ (((rlim_cur | 0x100000000000000) + ~(rlim_cur << 32)) >> 22);
                                          v866 = 9 * ((v865 + ~(v865 << 13)) ^ ((v865 + ~(v865 << 13)) >> 8));
                                          v867 = (v866 ^ (v866 >> 15)) + ~((v866 ^ (v866 >> 15)) << 27);
                                          v868 = v864 & ((v867 >> 31) ^ v867);
                                          v869 = *(_QWORD *)(v863 + 16 * v868);
                                          if (v869 == (rlim_cur | 0x100000000000000))
                                          {
LABEL_1894:
                                            v870 = *(_QWORD *)(v863 + 16 * v868 + 8);
                                            if (!v870)
                                              goto LABEL_2089;
                                            if ((*(_BYTE *)(v870 + 8) & 3) != 0)
                                              goto LABEL_2089;
                                            v871 = *(_QWORD *)v870;
                                            if (!*(_QWORD *)v870)
                                              goto LABEL_2089;
                                            goto LABEL_1897;
                                          }
                                          v950 = 1;
                                          while (v869)
                                          {
                                            v868 = ((_DWORD)v868 + v950) & v864;
                                            v869 = *(_QWORD *)(v863 + 16 * v868);
                                            ++v950;
                                            if (v869 == (rlim_cur | 0x100000000000000))
                                              goto LABEL_1894;
                                          }
LABEL_2089:
                                          JSC::JSObject::putDirectForJSONSlow((unsigned __int8 *)v1724, (JSC::VM *)v13, rlim_cur, v857, a5, a6, a7, a8, v22.n128_f64[0]);
                                          v883 = *(unsigned __int8 *)v15;
                                          if (v883 != 10)
                                            goto LABEL_2090;
LABEL_1920:
                                          v884 = *(unsigned __int8 **)(v9 + 48);
                                          v23 = *(_QWORD *)(v9 + 56);
                                          if ((unint64_t)v884 < v23)
                                          {
                                            v885 = v23 - (_QWORD)v884;
                                            while (*(_BYTE *)(v26 + *v884) == 19)
                                            {
                                              *i64 = ++v884;
                                              if (!--v885)
                                              {
                                                v884 = (unsigned __int8 *)v23;
                                                break;
                                              }
                                            }
                                          }
                                          if (v884 == (unsigned __int8 *)v23)
                                          {
                                            *(_BYTE *)v15 = 14;
                                            goto LABEL_1940;
                                          }
                                          *(_BYTE *)v15 = 18;
                                          v28 = *v884;
                                          switch(*(_BYTE *)(v26 + v28))
                                          {
                                            case 4:
                                              v888 = *(unsigned __int8 *)(v9 + 40);
                                              if ((_DWORD)v28 == 39)
                                              {
                                                if (!*(_BYTE *)(v9 + 40))
                                                {
                                                  v1540 = WTF::fastCompactMalloc((WTF *)0x20);
                                                  v1541 = v1540;
                                                  v1542 = 0x2900000002;
                                                  v1543 = "Single quotes (') are not allowed in JSON";
                                                  goto LABEL_3435;
                                                }
                                                a3 = v884 + 1;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
                                                *(_QWORD *)v1727.n128_u64[0] = v884 + 1;
                                                v9 = v1720;
                                                v15 = v1722;
                                                v13 = (unint64_t)v1725;
                                                v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              }
                                              else
                                              {
                                                a3 = v884 + 1;
                                                *i64 = v884 + 1;
                                                if (!v888)
                                                {
                                                  v889 = v23 - (_QWORD)a3;
                                                  if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                                    goto LABEL_1827;
                                                  v890 = (int8x16_t *)&v884[v889 + 1];
                                                  if (v889 >= 0x10)
                                                  {
                                                    v891 = v884 + 16;
                                                    do
                                                    {
                                                      v892 = *(int8x16_t *)(v891 - 15);
                                                      v893.i64[0] = 0x2222222222222222;
                                                      v893.i64[1] = 0x2222222222222222;
                                                      v894 = vceqq_s8(v892, v893);
                                                      v895.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v895.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v896.i64[0] = 0x2020202020202020;
                                                      v896.i64[1] = 0x2020202020202020;
                                                      v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v892, v895), (int8x16_t)vcgtq_u8(v896, (uint8x16_t)v892)), v894);
                                                      v894.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                      if (v894.i32[0])
                                                      {
                                                        v961 = v891 - 15;
                                                        goto LABEL_2062;
                                                      }
                                                      v891 += 16;
                                                    }
                                                    while (v891 < (unsigned __int8 *)v890);
                                                    if (v891 - 15 >= (unsigned __int8 *)v890)
                                                    {
                                                      v9 = v1720;
                                                      v15 = v1722;
                                                      v13 = (unint64_t)v1725;
                                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    }
                                                    else
                                                    {
                                                      v961 = (unsigned __int8 *)&v890[-1];
                                                      v1629 = v890[-1];
                                                      v1630.i64[0] = 0x2222222222222222;
                                                      v1630.i64[1] = 0x2222222222222222;
                                                      v1631 = vceqq_s8(v1629, v1630);
                                                      v1632.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v1632.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1629, v1632), (int8x16_t)vcgtq_u8(v896, (uint8x16_t)v1629)), v1631);
                                                      v1631.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                      v9 = v1720;
                                                      v15 = v1722;
                                                      v13 = (unint64_t)v1725;
                                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                      if (!v1631.i32[0])
                                                        goto LABEL_2063;
LABEL_2062:
                                                      v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                                      v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                                      v890 = (int8x16_t *)&v961[v22.n128_u32[0]];
                                                    }
LABEL_2063:
                                                    *i64 = v890;
                                                    goto LABEL_2064;
                                                  }
                                                  v1126 = (int8x16_t *)(v884 + 1);
                                                  if ((unsigned __int8 *)v23 == a3)
                                                    goto LABEL_2063;
                                                  while (JSC::safeStringLatin1CharactersInStrictJSON[v1126->u8[0]])
                                                  {
                                                    v1126 = (int8x16_t *)((char *)v1126 + 1);
                                                    if (!--v889)
                                                      goto LABEL_2063;
                                                  }
                                                  v890 = v1126;
                                                  *i64 = v1126;
LABEL_2064:
                                                  if ((unint64_t)v890 < v23 && v890->u8[0] == (_DWORD)v28)
                                                  {
                                                    *(_BYTE *)(v9 + 25) |= 1u;
                                                    *(_QWORD *)(v9 + 32) = a3;
                                                    *(_QWORD *)(v9 + 48) = (char *)v890->i64 + 1;
                                                    *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v890 - (_DWORD)a3) & 0x7FFFFFFF;
                                                    *(_BYTE *)(v9 + 24) = 4;
                                                    LOBYTE(v14) = 1;
                                                    goto LABEL_1959;
                                                  }
                                                  if (JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8) == 4)
                                                  {
                                                    LOBYTE(v14) = 1;
                                                    goto LABEL_1959;
                                                  }
LABEL_1940:
                                                  v897 = WTF::fastCompactMalloc((WTF *)0x20);
                                                  *(_QWORD *)v897 = v12;
                                                  v898 = "Property name must be a string literal";
LABEL_1955:
                                                  *(_QWORD *)(v897 + 8) = v898;
                                                  *(_DWORD *)(v897 + 16) = 4;
                                                  v906 = *(_QWORD *)(v9 + 96);
                                                  *(_QWORD *)(v9 + 96) = v897;
                                                  if (v906)
                                                  {
                                                    v907 = *(_DWORD *)v906 - 2;
                                                    if (*(_DWORD *)v906 != 2)
                                                    {
                                                      v1723 = 0;
                                                      LOBYTE(v14) = 0;
                                                      *(_DWORD *)v906 = v907;
                                                      goto LABEL_1958;
                                                    }
                                                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v906, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                                    v948 = *(_QWORD *)(StatusReg + 752);
                                                    if (v948)
                                                    {
                                                      if (v906 >> 43
                                                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                             + ((v906 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v906)) & 1) == 0)
                                                      {
                                                        if (v906 >> 24 < *off_1ECF425F8
                                                          || off_1ECF425F8[1] <= v906 >> 24)
                                                        {
                                                          v28 = 0;
                                                        }
                                                        else
                                                        {
                                                          v28 = (*(_DWORD *)((char *)off_1ECF425F8
                                                                           + ((((v906 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                           + 24) >> (2
                                                                                   * ((BYTE3(v906)
                                                                                     - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                                          if ((_DWORD)v28 == 1)
                                                            goto LABEL_2030;
                                                        }
                                                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v948, v906, 1, v28, a5, a6, a7, a8);
                                                      }
                                                      else
                                                      {
LABEL_2030:
                                                        v949 = *(unsigned int *)(v948 + 8000);
                                                        if (v949 < 0x3E7)
                                                        {
                                                          v1723 = 0;
                                                          LOBYTE(v14) = 0;
                                                          *(_QWORD *)(v948 + 8 * v949) = v906 | 0x5000000000000;
                                                          *(_DWORD *)(v948 + 8000) = v949 + 1;
                                                          goto LABEL_1958;
                                                        }
                                                        pas_thread_local_cache_append_deallocation_slow(v948, v906, (os_unfair_lock_s *)5, v28, a5, a6, a7, a8);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      pas_try_deallocate_slow_no_cache(v906, (uint64_t)&bmalloc_heap_config, 1);
                                                    }
                                                  }
LABEL_2822:
                                                  v1723 = 0;
                                                  LOBYTE(v14) = 0;
                                                  goto LABEL_1958;
                                                }
                                              }
                                              if ((unint64_t)a3 >= v23)
                                              {
                                                v890 = (int8x16_t *)a3;
                                              }
                                              else
                                              {
                                                v890 = (int8x16_t *)a3;
                                                while (1)
                                                {
                                                  v1033 = v890->u8[0];
                                                  v1034 = v1033 < 0x20 || v1033 == 92;
                                                  v1035 = v1034 || v1033 == (_DWORD)v28;
                                                  v1036 = v1035;
                                                  if (v1033 != 9 && v1036)
                                                    break;
                                                  v890 = (int8x16_t *)((char *)v890 + 1);
                                                  *i64 = v890;
                                                  if (v890 == (int8x16_t *)&v884[v23 - (_QWORD)a3 + 1])
                                                  {
                                                    v890 = (int8x16_t *)&v884[v23 - (_QWORD)a3 + 1];
                                                    goto LABEL_2064;
                                                  }
                                                }
                                              }
                                              goto LABEL_2064;
                                            case 5:
                                              if ((_DWORD)v28 == 110)
                                              {
                                                if ((uint64_t)(v23 - (_QWORD)v884) >= 4
                                                  && *(_WORD *)(v884 + 1) == 27765
                                                  && v884[3] == 108)
                                                {
                                                  *i64 = v884 + 4;
                                                  *(_BYTE *)v15 = 13;
                                                  goto LABEL_1940;
                                                }
                                              }
                                              else if ((_DWORD)v28 == 102)
                                              {
                                                if ((uint64_t)(v23 - (_QWORD)v884) >= 5
                                                  && *(_WORD *)(v884 + 1) == 27745
                                                  && *(_WORD *)(v884 + 3) == 25971)
                                                {
                                                  *i64 = v884 + 5;
                                                  *(_BYTE *)v15 = 12;
                                                  goto LABEL_1940;
                                                }
                                              }
                                              else if ((_DWORD)v28 == 116
                                                     && (uint64_t)(v23 - (_QWORD)v884) >= 4
                                                     && *(_WORD *)(v884 + 1) == 30066
                                                     && v884[3] == 101)
                                              {
                                                *i64 = v884 + 4;
                                                *(_BYTE *)v15 = 11;
                                                goto LABEL_1940;
                                              }
                                              v1316 = (int)v884;
                                              *(_QWORD *)(v9 + 32) = v884;
                                              v1317 = (int)v884;
                                              if ((unint64_t)v884 >= v23)
                                                goto LABEL_3089;
                                              v1318 = v23 - (_QWORD)v884;
                                              v1319 = (_DWORD)v884 + v1318;
                                              while (1)
                                              {
                                                v1320 = *v884;
                                                if (v1320 != 36)
                                                {
                                                  v1321 = v1320 != 95 && (v1320 - 48) >= 0xA;
                                                  if (v1321 && (v1320 | 0x20u) - 97 > 0x19)
                                                    break;
                                                }
                                                *i64 = ++v884;
                                                if (!--v1318)
                                                {
                                                  LODWORD(v884) = v1319;
                                                  break;
                                                }
                                              }
                                              v1317 = (int)v884;
LABEL_3089:
                                              *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | (v1317 - v1316) & 0x7FFFFFFF;
                                              *(_BYTE *)(v9 + 24) = 5;
                                              goto LABEL_1940;
                                            case 6:
                                              v1024 = v884;
                                              if ((unint64_t)v884 < v23)
                                              {
                                                v1024 = v884;
                                                if ((_DWORD)v28 == 45)
                                                {
                                                  v1024 = v884 + 1;
                                                  *i64 = v884 + 1;
                                                }
                                              }
                                              if ((unint64_t)v1024 >= v23)
                                                goto LABEL_3360;
                                              v1025 = *v1024;
                                              if (v1025 == 48)
                                              {
                                                v966 = v1024 + 1;
                                                *i64 = v966;
                                              }
                                              else
                                              {
                                                if ((v1025 - 49) > 8)
                                                {
LABEL_3360:
                                                  v1487 = WTF::fastCompactMalloc((WTF *)0x20);
                                                  v1495 = v1487;
                                                  v1496 = "Invalid number";
                                                  *(_QWORD *)v1487 = v11;
                                                  goto LABEL_3361;
                                                }
                                                v1026 = v1024 + 1;
                                                do
                                                {
                                                  v966 = v1026;
                                                  *i64 = v1026;
                                                  if ((unint64_t)v1026 >= v23)
                                                    break;
                                                  ++v1026;
                                                }
                                                while (*v966 - 48 < 0xA);
                                              }
                                              if ((unint64_t)v966 >= v23)
                                                goto LABEL_2485;
                                              v1027 = *v966;
                                              if (v1027 != 46)
                                              {
                                                if (v1027 != 69 && v1027 != 101 && v966 - v884 <= 9)
                                                {
                                                  *(_BYTE *)v15 = 6;
                                                  v1028 = *v884;
                                                  if (v1028 == 45)
                                                    v1029 = v884 + 1;
                                                  else
                                                    v1029 = v884;
                                                  if (v1029 >= v966)
                                                  {
                                                    if (v1028 != 45)
                                                    {
                                                      v1030 = 0;
LABEL_2224:
                                                      v1032 = (double)v1030;
LABEL_2225:
                                                      *(double *)(v9 + 32) = v1032;
                                                      goto LABEL_1940;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1030 = 0;
                                                    do
                                                    {
                                                      v1031 = *v1029++;
                                                      v1030 = v1031 + 10 * v1030 - 48;
                                                    }
                                                    while (v1029 < v966);
                                                    if (v1028 != 45)
                                                      goto LABEL_2224;
                                                    if (v1030)
                                                    {
                                                      v1032 = (double)-v1030;
                                                      goto LABEL_2225;
                                                    }
                                                  }
                                                  *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                                  goto LABEL_1940;
                                                }
LABEL_2485:
                                                if ((unint64_t)v966 >= v23 || (*v966 | 0x20) != 0x65)
                                                  goto LABEL_2487;
                                                v1532 = v966 + 1;
                                                *i64 = v966 + 1;
                                                if ((unint64_t)(v966 + 1) < v23)
                                                {
                                                  v1533 = *v1532;
                                                  if (v1533 == 45 || v1533 == 43)
                                                  {
                                                    v1532 = v966 + 2;
                                                    *(_QWORD *)v1727.n128_u64[0] = v966 + 2;
                                                  }
                                                }
                                                if ((unint64_t)v1532 < v23 && *v1532 - 48 <= 9)
                                                {
                                                  v1534 = v1532 + 1;
                                                  i64 = (_QWORD *)v1727.n128_u64[0];
                                                  while (1)
                                                  {
                                                    v966 = v1534;
                                                    *i64 = v1534;
                                                    if ((unint64_t)v1534 >= v23)
                                                      break;
                                                    ++v1534;
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    if (*v966 - 48 >= 0xA)
                                                      goto LABEL_2487;
                                                  }
                                                  v9 = v1720;
                                                  v15 = v1722;
                                                  v13 = (unint64_t)v1725;
                                                  i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_2487:
                                                  *(_BYTE *)v15 = 6;
                                                  LODWORD(v23) = (_DWORD)v966 - (_DWORD)v884;
                                                  if (v966 - v884 >= 0)
                                                  {
                                                    v1735.rlim_cur = 0;
                                                    fast_float::from_chars_advanced<double,char>(v884, v966, &v1735.rlim_cur, 0x2E00000005);
                                                    v1032 = *(double *)&v1735.rlim_cur;
                                                    goto LABEL_2225;
                                                  }
                                                  goto LABEL_1827;
                                                }
                                                v1540 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1541 = v1540;
                                                v1542 = 0x5D00000002;
                                                v1543 = "Exponent symbols should be followed by an optional '+' or '-' an"
                                                        "d then by at least one number";
LABEL_3435:
                                                *(_QWORD *)v1540 = v1542;
                                                *(_QWORD *)(v1540 + 8) = v1543;
                                                *(_DWORD *)(v1540 + 16) = 4;
                                                v1497 = *(WTF::StringImpl **)v1709;
                                                *(_QWORD *)v1709 = v1541;
                                                v9 = v1720;
                                                v15 = v1722;
                                                v13 = (unint64_t)v1725;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
                                                if (!v1497)
                                                  goto LABEL_1940;
LABEL_3362:
                                                if (*(_DWORD *)v1497 == 2)
                                                {
                                                  WTF::StringImpl::~StringImpl(v1497, v1488, v1489, v1490, v1491, v1492, v1493, v1494);
                                                  WTF::fastFree(v1570, v1571, v1572, v1573, v1574, v1575, v1576, v1577);
                                                }
                                                else
                                                {
                                                  *(_DWORD *)v1497 -= 2;
                                                }
                                                v9 = v1720;
                                                v15 = v1722;
                                                v13 = (unint64_t)v1725;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
                                                goto LABEL_1940;
                                              }
                                              *i64 = v966 + 1;
                                              if ((unint64_t)(v966 + 1) < v23 && v966[1] - 48 <= 9)
                                              {
                                                v967 = v966 + 2;
                                                do
                                                {
                                                  v966 = v967;
                                                  *i64 = v967;
                                                  if ((unint64_t)v967 >= v23)
                                                    break;
                                                  ++v967;
                                                }
                                                while (*v966 - 48 < 0xA);
                                                goto LABEL_2485;
                                              }
                                              v1487 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1495 = v1487;
                                              v1496 = "Invalid digits after decimal point";
                                              *(_QWORD *)v1487 = 0x2200000002;
LABEL_3361:
                                              *(_QWORD *)(v1487 + 8) = v1496;
                                              *(_DWORD *)(v1487 + 16) = 4;
                                              v1497 = *(WTF::StringImpl **)v1709;
                                              *(_QWORD *)v1709 = v1495;
                                              if (!v1497)
                                                goto LABEL_1940;
                                              goto LABEL_3362;
                                            case 0x12:
                                            case 0x13:
                                              WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                              v1238 = v1735.rlim_cur;
                                              if (!v1735.rlim_cur)
                                              {
                                                __break(0xC471u);
                                                JUMPOUT(0x198B19FF0);
                                              }
                                              *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                              *(_QWORD *)(v1238 + 8) = v1238 + 20;
                                              *(_DWORD *)(v1238 + 16) = 4;
                                              *(_DWORD *)(v1238 + 36) = 656436837;
                                              *(_OWORD *)(v1238 + 20) = *(_OWORD *)"Unrecognized token '";
                                              *(_BYTE *)(v1238 + 40) = *v884;
                                              *(_BYTE *)(v1238 + 41) = 39;
                                              v1239 = *(WTF::StringImpl **)v1709;
                                              *(_QWORD *)v1709 = v1238;
                                              if (v1239)
                                              {
                                                if (*(_DWORD *)v1239 == 2)
                                                {
                                                  WTF::StringImpl::~StringImpl(v1239, v1231, v1232, v1233, v1234, v1235, v1236, v1237);
                                                  WTF::fastFree(v1323, v1324, v1325, v1326, v1327, v1328, v1329, v1330);
                                                }
                                                else
                                                {
                                                  *(_DWORD *)v1239 -= 2;
                                                }
                                              }
                                              goto LABEL_1940;
                                            default:
                                              *(_BYTE *)v15 = *(_BYTE *)(v26 + *v884);
                                              *i64 = v884 + 1;
                                              goto LABEL_1940;
                                          }
                                        }
                                        v871 = v862 & 0xFFFFFFFFFFFFFFFELL;
                                        if ((v862 & 0xFFFFFFFFFFFFFFFELL) == 0)
                                          goto LABEL_2089;
                                        v899 = (*(_DWORD *)(v871 + 16) >> 13) & 0x1F;
                                        if ((_DWORD)v899 == 16)
                                        {
                                          v900 = *(_QWORD *)(v871 + 48);
                                          v901 = v900 | 0x1000000000000000;
                                          v173 = v900 == 2;
                                          v902 = 0x1000000000000000;
                                          if (!v173)
                                            v902 = v901;
                                          if ((v902 | ((unint64_t)*(unsigned __int8 *)(v871 + 20) << 48)) != (rlim_cur | 0x100000000000000))
                                            goto LABEL_2089;
                                        }
                                        else if (((v899 << 56) | (16 * *(unsigned int *)(v871 + 72)) | ((unint64_t)*(unsigned __int8 *)(v871 + 20) << 48)) != (rlim_cur | 0x100000000000000))
                                        {
                                          goto LABEL_2089;
                                        }
LABEL_1897:
                                        v872 = *(unsigned __int16 *)(v871 + 22);
                                        if (v872 == 65534)
                                        {
                                          v872 = -1;
                                        }
                                        else if (v872 == 0xFFFF)
                                        {
                                          v872 = *(_DWORD *)(*(_QWORD *)(v871 + 64) + 88);
                                        }
                                        v873 = *(unsigned __int16 *)(16 * (v14 & 0xFFFFFFFE) + 0x18);
                                        if (v873 == 65534)
                                        {
                                          v878 = 0;
                                          v879 = *(unsigned __int16 *)(v871 + 24);
                                          if (v879 == 65534)
                                            goto LABEL_1912;
                                        }
                                        else
                                        {
                                          if (v873 == 0xFFFF)
                                            v874 = *(_DWORD *)(*(_QWORD *)(16 * (v14 & 0xFFFFFFFE) + 0x40)
                                                             + 84);
                                          else
                                            v874 = *(unsigned __int16 *)(16 * (v14 & 0xFFFFFFFE) + 0x18);
                                          v875 = (v874 - 64) | ((v874 - 64) >> 1) | (((v874 - 64) | ((v874 - 64) >> 1)) >> 2);
                                          v876 = v875 | (v875 >> 4) | ((v875 | (v875 >> 4)) >> 8);
                                          v877 = v876 | HIWORD(v876);
                                          if ((v874 - 63) >= 5)
                                            v878 = v877 + 1;
                                          else
                                            v878 = 4;
                                          if (v874 < 64)
                                            v878 = 0;
                                          v879 = *(unsigned __int16 *)(v871 + 24);
                                          if (v879 == 65534)
                                          {
LABEL_1912:
                                            v881 = 0;
                                            goto LABEL_1913;
                                          }
                                        }
                                        if (v879 == 0xFFFF)
                                          v880 = *(_DWORD *)(*(_QWORD *)(v871 + 64) + 84);
                                        else
                                          v880 = v879;
                                        if (v880 < 64)
                                          goto LABEL_1912;
                                        if ((v880 - 63) >= 5)
                                        {
                                          v1059 = (v880 - 64) | ((v880 - 64) >> 1) | (((v880 - 64) | ((v880 - 64) >> 1)) >> 2);
                                          v1060 = v1059 | (v1059 >> 4) | ((v1059 | (v1059 >> 4)) >> 8);
                                          v881 = (v1060 | HIWORD(v1060)) + 1;
                                        }
                                        else
                                        {
                                          v881 = 4;
                                        }
LABEL_1913:
                                        if (v878 != v881)
                                        {
                                          if (v873 == 65534)
                                          {
                                            v1139 = 0;
                                          }
                                          else
                                          {
                                            if (v873 == 0xFFFF)
                                              v873 = *(_DWORD *)(*(_QWORD *)(16 * (v14 & 0xFFFFFFFE)
                                                                           + 0x40)
                                                               + 84);
                                            v1136 = (v873 - 64) | ((v873 - 64) >> 1) | (((v873 - 64) | ((v873 - 64) >> 1)) >> 2);
                                            v1137 = v1136 | (v1136 >> 4) | ((v1136 | (v1136 >> 4)) >> 8);
                                            v1138 = v1137 | HIWORD(v1137);
                                            if ((v873 - 63) >= 5)
                                              v1139 = v1138 + 1;
                                            else
                                              v1139 = 4;
                                            if (v873 < 64)
                                              v1139 = 0;
                                          }
                                          if (v879 == 65534)
                                            goto LABEL_2558;
                                          if (v879 == 0xFFFF)
                                            v879 = *(_DWORD *)(*(_QWORD *)(v871 + 64) + 84);
                                          if (v879 < 64)
                                          {
LABEL_2558:
                                            v1140 = 0;
                                          }
                                          else if ((v879 - 63) >= 5)
                                          {
                                            v1180 = (v879 - 64) | ((v879 - 64) >> 1) | (((v879 - 64) | ((v879 - 64) >> 1)) >> 2);
                                            v1181 = v1180 | (v1180 >> 4) | ((v1180 | (v1180 >> 4)) >> 8);
                                            v1140 = (v1181 | HIWORD(v1181)) + 1;
                                          }
                                          else
                                          {
                                            v1140 = 4;
                                          }
                                          MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage(v1724, (JSC::VM *)v13, v1139, v1140, a5, a6, a7, a8, v22);
                                          if (*(_BYTE *)(v13 + 755))
                                          {
                                            v1162 = v1724;
                                            *(_DWORD *)v1724 = v14 | 1;
                                            __dmb(0xAu);
                                            *((_QWORD *)v1162 + 1) = MoreOutOfLineStorage;
                                            if (*(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)v1162 + 7))
                                              JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v1724);
                                            __dmb(0xAu);
                                          }
                                          else
                                          {
                                            *v1717 = MoreOutOfLineStorage;
                                            if (*(_DWORD *)(v13 + 760) >= *v1716)
                                              JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v1724);
                                          }
                                        }
                                        v14 = (int16x8_t *)v1728.i64[0];
                                        if (v872 < 64)
                                          *(_QWORD *)&v1711[8 * v872] = v857;
                                        else
                                          *(_QWORD *)(*v1717 - 8 + 8 * (63 - v872)) = v857;
                                        if ((v857 & 0xFFFE000000000002) == 0
                                          && *(_DWORD *)(v13 + 760) >= *v1716)
                                        {
                                          JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)v1724);
                                        }
                                        v882 = (unsigned __int8 *)v1724;
                                        *(_DWORD *)v1724 = v871 >> 4;
                                        v882[6] = v882[6] & 0x80 | *(_BYTE *)(v871 + 10);
                                        v882[5] = *(_BYTE *)(v871 + 9);
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        if (v882[4] != *(unsigned __int8 *)(v871 + 8))
                                        {
                                          do
                                          {
                                            while (1)
                                            {
                                              v886 = v14->u8[0];
                                              v887 = __ldxr((unsigned __int8 *)v14);
                                              if (v887 == v886)
                                                break;
                                              __clrex();
                                            }
                                          }
                                          while (__stxr(v886 & 0xC0 | *(_BYTE *)(v871 + 8), (unsigned __int8 *)v14));
                                        }
                                        if (*(_DWORD *)(v13 + 760) >= *v1716)
                                        {
                                          if (!*(_BYTE *)(v13 + 755))
                                          {
                                            ++*(_QWORD *)(v13 + 1288);
LABEL_2471:
                                            *v1716 = 2;
                                            v1117 = *(_QWORD **)(v13 + 608);
                                            v1118 = v1117[2];
                                            if (v1118 == 510)
                                            {
                                              v1313 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                                              v1118 = 0;
                                              *v1313 = 0;
                                              v1313[1] = 0;
                                              ++v1117[3];
                                              v1314 = (_QWORD *)*v1117;
                                              v1315 = v1117 + 1;
                                              if (*v1117)
                                                v1315 = (_QWORD *)*v1117;
                                              *v1315 = v1313;
                                              *v1117 = v1313;
                                              *v1313 = 0;
                                              v1313[1] = v1314;
                                            }
                                            v1119 = *v1117 + 8 * v1118;
                                            v1117[2] = v1118 + 1;
                                            *(_QWORD *)(v1119 + 16) = v1724;
                                            goto LABEL_1919;
                                          }
                                          __dmb(0xBu);
                                          if (*v1716)
                                            goto LABEL_1919;
                                          v1336 = *(unsigned __int8 *)(v13 + 755);
                                          ++*(_QWORD *)(v13 + 1288);
                                          if (!v1336)
                                            goto LABEL_2471;
                                          v1337 = (char)v1724;
                                          v1338 = (_DWORD *)((unint64_t)v1724 & 0xFFFFFFFFFFFFC000 | 0x20);
                                          v1339 = (_QWORD *)(((unint64_t)v1724 & 0xFFFFFFFFFFFFC000 | (8 * (((unint64_t)v1724 >> 10) & 0xF)))
                                                           + 40);
                                          v1340 = 1 << ((unint64_t)v1724 >> 4);
                                          __dmb(0xBu);
                                          if ((v1337 & 8) != 0)
                                          {
                                            v13 = (unint64_t)v1725;
                                            v9 = v1720;
                                            v15 = v1722;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if ((*((_BYTE *)v1724 - 79) & 1) != 0)
                                              goto LABEL_2471;
                                          }
                                          else
                                          {
                                            v13 = (unint64_t)v1725;
                                            v9 = v1720;
                                            v15 = v1722;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (*v1338 == *((_DWORD *)v1725 + 108) && (*v1339 & v1340) != 0)
                                              goto LABEL_2471;
                                          }
                                          if (*(_BYTE *)(v13 + 347) != 1)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B1A018);
                                          }
                                          do
                                          {
                                            if (__ldaxr(v1716))
                                            {
                                              __clrex();
                                              v9 = v1720;
                                              v15 = v1722;
                                              v13 = (unint64_t)v1725;
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              goto LABEL_1919;
                                            }
                                          }
                                          while (__stlxr(1u, v1716));
                                          if ((v1724 & 8) != 0)
                                          {
                                            v13 = (unint64_t)v1725;
                                            v9 = v1720;
                                            v15 = v1722;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if ((*((_BYTE *)v1724 - 79) & 1) != 0)
LABEL_3114:
                                              *v1716 = 0;
                                          }
                                          else
                                          {
                                            v13 = (unint64_t)v1725;
                                            v9 = v1720;
                                            v15 = v1722;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (*v1338 == *((_DWORD *)v1725 + 108) && (*v1339 & v1340) != 0)
                                              goto LABEL_3114;
                                          }
                                        }
LABEL_1919:
                                        v883 = *(unsigned __int8 *)v15;
                                        if (v883 == 10)
                                          goto LABEL_1920;
LABEL_2090:
                                        if (v883 != 3)
                                        {
                                          JSC::LiteralParser<unsigned char>::setErrorMessageForToken(v9, 3);
LABEL_2873:
                                          v1723 = 0;
                                          LOBYTE(v14) = 0;
                                          goto LABEL_1959;
                                        }
                                        v15 = *(_QWORD *)(v9 + 48);
                                        v23 = *(_QWORD *)(v9 + 56);
                                        if (v15 < v23)
                                        {
                                          v968 = v23 - v15;
                                          while (*(_BYTE *)(v26 + *(unsigned __int8 *)v15) == 19)
                                          {
                                            *i64 = ++v15;
                                            if (!--v968)
                                            {
                                              v15 = v23;
                                              break;
                                            }
                                          }
                                        }
                                        if (v15 == v23)
                                        {
                                          LOBYTE(v14) = 0;
                                          v1182 = 14;
LABEL_2698:
                                          v15 = v1722;
                                          *(_BYTE *)v1722 = v1182;
LABEL_2107:
                                          v1723 = v1724;
                                          goto LABEL_1959;
                                        }
                                        *(_BYTE *)v1722 = 18;
                                        v28 = *(unsigned __int8 *)v15;
                                        switch(*(_BYTE *)(v26 + v28))
                                        {
                                          case 4:
                                            v969 = *(unsigned __int8 *)(v9 + 40);
                                            if ((_DWORD)v28 == 39)
                                            {
                                              if (!*(_BYTE *)(v9 + 40))
                                              {
                                                v1578 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1579 = v1578;
                                                v22.n128_u64[0] = 0x2900000002;
                                                v1580 = "Single quotes (') are not allowed in JSON";
                                                goto LABEL_3486;
                                              }
                                              a3 = (unsigned __int8 *)(v15 + 1);
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v15 + 1;
                                              v9 = v1720;
                                              v13 = (unint64_t)v1725;
                                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            }
                                            else
                                            {
                                              a3 = (unsigned __int8 *)(v15 + 1);
                                              *i64 = v15 + 1;
                                              if (!v969)
                                              {
                                                v970 = v23 - (_QWORD)a3;
                                                if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                                                  goto LABEL_1827;
                                                v971 = (int8x16_t *)(v970 + v15 + 1);
                                                if (v970 < 0x10)
                                                {
                                                  v1209 = (int8x16_t *)(v15 + 1);
                                                  v15 = v1722;
                                                  if ((unsigned __int8 *)v23 != a3)
                                                  {
                                                    while (JSC::safeStringLatin1CharactersInStrictJSON[v1209->u8[0]])
                                                    {
                                                      v1209 = (int8x16_t *)((char *)v1209 + 1);
                                                      if (!--v970)
                                                        goto LABEL_2311;
                                                    }
                                                    v971 = v1209;
                                                  }
                                                }
                                                else
                                                {
                                                  v972 = v15 + 16;
                                                  v15 = v1722;
                                                  do
                                                  {
                                                    v973 = *(int8x16_t *)(v972 - 15);
                                                    v974.i64[0] = 0x2222222222222222;
                                                    v974.i64[1] = 0x2222222222222222;
                                                    v975 = vceqq_s8(v973, v974);
                                                    v976.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v976.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v977.i64[0] = 0x2020202020202020;
                                                    v977.i64[1] = 0x2020202020202020;
                                                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v973, v976), (int8x16_t)vcgtq_u8(v977, (uint8x16_t)v973)), v975);
                                                    v975.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                    if (v975.i32[0])
                                                    {
                                                      v1061 = (unsigned __int8 *)(v972 - 15);
                                                      goto LABEL_2310;
                                                    }
                                                    v972 += 16;
                                                  }
                                                  while (v972 < (unint64_t)v971);
                                                  if (v972 - 15 >= (unint64_t)v971)
                                                  {
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  }
                                                  else
                                                  {
                                                    v1061 = (unsigned __int8 *)&v971[-1];
                                                    v1645 = v971[-1];
                                                    v1646.i64[0] = 0x2222222222222222;
                                                    v1646.i64[1] = 0x2222222222222222;
                                                    v1647 = vceqq_s8(v1645, v1646);
                                                    v1648.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v1648.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1645, v1648), (int8x16_t)vcgtq_u8(v977, (uint8x16_t)v1645)), v1647);
                                                    v1647.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                    v9 = v1720;
                                                    v15 = v1722;
                                                    v13 = (unint64_t)v1725;
                                                    i64 = (_QWORD *)v1727.n128_u64[0];
                                                    v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    if (!v1647.i32[0])
                                                      goto LABEL_2311;
LABEL_2310:
                                                    v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                                    v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                                    v971 = (int8x16_t *)&v1061[v22.n128_u32[0]];
                                                  }
                                                }
LABEL_2311:
                                                *i64 = v971;
                                                goto LABEL_2312;
                                              }
                                            }
                                            if ((unint64_t)a3 >= v23)
                                            {
                                              v971 = (int8x16_t *)a3;
                                              v15 = v1722;
                                            }
                                            else
                                            {
                                              v1108 = v15 + v23 - (_QWORD)a3 + 1;
                                              v971 = (int8x16_t *)a3;
                                              v15 = v1722;
                                              while (1)
                                              {
                                                v1109 = v971->u8[0];
                                                v1110 = v1109 < 0x20 || v1109 == 92;
                                                v1111 = v1110 || v1109 == (_DWORD)v28;
                                                v1112 = v1111;
                                                if (v1109 != 9 && v1112)
                                                  break;
                                                v971 = (int8x16_t *)((char *)v971 + 1);
                                                *i64 = v971;
                                                if (v971 == (int8x16_t *)v1108)
                                                {
                                                  v971 = (int8x16_t *)v1108;
                                                  break;
                                                }
                                              }
                                            }
LABEL_2312:
                                            if ((unint64_t)v971 < v23 && v971->u8[0] == (_DWORD)v28)
                                            {
                                              LOBYTE(v14) = 0;
                                              *(_BYTE *)(v9 + 25) |= 1u;
                                              *(_QWORD *)(v9 + 32) = a3;
                                              *(_QWORD *)(v9 + 48) = (char *)v971->i64 + 1;
                                              *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v971 - (_DWORD)a3) & 0x7FFFFFFF;
                                              *(_BYTE *)(v9 + 24) = 4;
                                              goto LABEL_2107;
                                            }
                                            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_2889:
                                            LOBYTE(v14) = 0;
                                            goto LABEL_2107;
                                          case 5:
                                            if ((_DWORD)v28 == 110)
                                            {
                                              if ((uint64_t)(v23 - v15) >= 4
                                                && *(_WORD *)(v15 + 1) == 27765
                                                && *(_BYTE *)(v15 + 3) == 108)
                                              {
                                                LOBYTE(v14) = 0;
                                                *i64 = v15 + 4;
                                                v1182 = 13;
                                                goto LABEL_2698;
                                              }
                                            }
                                            else if ((_DWORD)v28 == 102)
                                            {
                                              if ((uint64_t)(v23 - v15) >= 5
                                                && *(_WORD *)(v15 + 1) == 27745
                                                && *(_WORD *)(v15 + 3) == 25971)
                                              {
                                                LOBYTE(v14) = 0;
                                                *i64 = v15 + 5;
                                                v1182 = 12;
                                                goto LABEL_2698;
                                              }
                                            }
                                            else if ((_DWORD)v28 == 116
                                                   && (uint64_t)(v23 - v15) >= 4
                                                   && *(_WORD *)(v15 + 1) == 30066
                                                   && *(_BYTE *)(v15 + 3) == 101)
                                            {
                                              LOBYTE(v14) = 0;
                                              *i64 = v15 + 4;
                                              v1182 = 11;
                                              goto LABEL_2698;
                                            }
                                            v1370 = v15;
                                            *(_QWORD *)(v1720 + 32) = v15;
                                            v1371 = v15;
                                            if (v15 >= v23)
                                              goto LABEL_3193;
                                            v1372 = v23 - v15;
                                            v1373 = v15 + v1372;
                                            v1374 = (_QWORD *)v1727.n128_u64[0];
                                            while (1)
                                            {
                                              v1375 = *(unsigned __int8 *)v15;
                                              if (v1375 != 36)
                                              {
                                                v1376 = v1375 != 95 && (v1375 - 48) >= 0xA;
                                                if (v1376 && (v1375 | 0x20u) - 97 > 0x19)
                                                  break;
                                              }
                                              *v1374 = ++v15;
                                              if (!--v1372)
                                              {
                                                LODWORD(v15) = v1373;
                                                break;
                                              }
                                            }
                                            v1371 = v15;
LABEL_3193:
                                            LOBYTE(v14) = 0;
                                            v9 = v1720;
                                            *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v1371 - v1370) & 0x7FFFFFFF;
                                            *(_BYTE *)(v9 + 24) = 5;
                                            v1723 = v1724;
                                            goto LABEL_3194;
                                          case 6:
                                            v1098 = (unsigned __int8 *)v15;
                                            if (v15 < v23)
                                            {
                                              v1098 = (unsigned __int8 *)v15;
                                              if ((_DWORD)v28 == 45)
                                              {
                                                v1098 = (unsigned __int8 *)(v15 + 1);
                                                *i64 = v15 + 1;
                                              }
                                            }
                                            if ((unint64_t)v1098 >= v23)
                                              goto LABEL_3471;
                                            v1099 = *v1098;
                                            if (v1099 == 48)
                                            {
                                              v1077 = v1098 + 1;
                                              *i64 = v1077;
                                            }
                                            else
                                            {
                                              if ((v1099 - 49) > 8)
                                              {
LABEL_3471:
                                                v1578 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1579 = v1578;
                                                v1580 = "Invalid number";
                                                *(_QWORD *)v1578 = v11;
                                                goto LABEL_3487;
                                              }
                                              v1100 = v1098 + 1;
                                              do
                                              {
                                                v1077 = v1100;
                                                *i64 = v1100;
                                                if ((unint64_t)v1100 >= v23)
                                                  break;
                                                ++v1100;
                                              }
                                              while (*v1077 - 48 < 0xA);
                                            }
                                            if ((unint64_t)v1077 >= v23)
                                              goto LABEL_2563;
                                            v1101 = *v1077;
                                            if (v1101 == 46)
                                            {
                                              *i64 = v1077 + 1;
                                              if ((unint64_t)(v1077 + 1) >= v23
                                                || v1077[1] - 48 > 9)
                                              {
                                                v1578 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1579 = v1578;
                                                v22.n128_u64[0] = 0x2200000002;
                                                v1580 = "Invalid digits after decimal point";
                                                goto LABEL_3486;
                                              }
                                              v1078 = v1077 + 2;
                                              do
                                              {
                                                v1077 = v1078;
                                                *i64 = v1078;
                                                if ((unint64_t)v1078 >= v23)
                                                  break;
                                                ++v1078;
                                              }
                                              while (*v1077 - 48 < 0xA);
                                            }
                                            else if (v1101 != 69 && v1101 != 101 && (uint64_t)&v1077[-v15] <= 9)
                                            {
                                              *(_BYTE *)v1722 = 6;
                                              v1102 = *(unsigned __int8 *)v15;
                                              if (v1102 == 45)
                                                v1103 = (unsigned __int8 *)(v15 + 1);
                                              else
                                                v1103 = (unsigned __int8 *)v15;
                                              if (v1103 >= v1077)
                                              {
                                                v15 = v1722;
                                                if (v1102 != 45)
                                                {
                                                  v1104 = 0;
LABEL_2430:
                                                  LOBYTE(v14) = 0;
LABEL_2431:
                                                  v22.n128_f64[0] = (double)v1104;
                                                  *(double *)(v9 + 32) = (double)v1104;
                                                  goto LABEL_2107;
                                                }
                                              }
                                              else
                                              {
                                                v1104 = 0;
                                                do
                                                {
                                                  v1105 = *v1103++;
                                                  v1104 = v1105 + 10 * v1104 - 48;
                                                }
                                                while (v1103 < v1077);
                                                v15 = v1722;
                                                if (v1102 != 45)
                                                  goto LABEL_2430;
                                                if (v1104)
                                                {
                                                  LOBYTE(v14) = 0;
                                                  v1104 = -v1104;
                                                  goto LABEL_2431;
                                                }
                                              }
                                              LOBYTE(v14) = 0;
                                              *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                              goto LABEL_2107;
                                            }
LABEL_2563:
                                            if ((unint64_t)v1077 < v23 && (*v1077 | 0x20) == 0x65)
                                            {
                                              v1587 = v1077 + 1;
                                              *i64 = v1077 + 1;
                                              if ((unint64_t)(v1077 + 1) < v23)
                                              {
                                                v1588 = *v1587;
                                                if (v1588 == 45 || v1588 == 43)
                                                {
                                                  v1587 = v1077 + 2;
                                                  *(_QWORD *)v1727.n128_u64[0] = v1077 + 2;
                                                }
                                              }
                                              if ((unint64_t)v1587 >= v23 || *v1587 - 48 > 9)
                                              {
                                                v1578 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1579 = v1578;
                                                v22.n128_u64[0] = 0x5D00000002;
                                                v1580 = "Exponent symbols should be followed by an optional '+' or '-' an"
                                                        "d then by at least one number";
LABEL_3486:
                                                *(_QWORD *)v1578 = v22.n128_u64[0];
LABEL_3487:
                                                *(_QWORD *)(v1578 + 8) = v1580;
                                                *(_DWORD *)(v1578 + 16) = 4;
                                                v1586 = *(WTF::StringImpl **)v1709;
                                                *(_QWORD *)v1709 = v1579;
                                                if (v1586)
                                                {
                                                  if (*(_DWORD *)v1586 != 2)
                                                  {
                                                    LOBYTE(v14) = 0;
                                                    *(_DWORD *)v1586 -= 2;
                                                    goto LABEL_3490;
                                                  }
                                                  WTF::StringImpl::~StringImpl(v1586, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                                  WTF::fastFree(v1613, v1614, v1615, v1616, v1617, v1618, v1619, v1620);
                                                }
                                                LOBYTE(v14) = 0;
LABEL_3490:
                                                v1723 = v1724;
LABEL_3254:
                                                v9 = v1720;
LABEL_3194:
                                                v15 = v1722;
                                                v13 = (unint64_t)v1725;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_1958:
                                                v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                break;
                                              }
                                              v1589 = v1587 + 1;
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              while (1)
                                              {
                                                v1077 = v1589;
                                                *i64 = v1589;
                                                if ((unint64_t)v1589 >= v23)
                                                  break;
                                                ++v1589;
                                                v9 = v1720;
                                                v13 = (unint64_t)v1725;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
                                                v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                if (*v1077 - 48 >= 0xA)
                                                  goto LABEL_2565;
                                              }
                                              v9 = v1720;
                                              v13 = (unint64_t)v1725;
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            }
LABEL_2565:
                                            *(_BYTE *)v1722 = 6;
                                            LODWORD(v23) = (_DWORD)v1077 - v15;
                                            if ((uint64_t)&v1077[-v15] < 0)
                                              goto LABEL_1827;
                                            v1735.rlim_cur = 0;
                                            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v15, v1077, &v1735.rlim_cur, 0x2E00000005);
                                            LOBYTE(v14) = 0;
                                            v22.n128_u64[0] = v1735.rlim_cur;
                                            *(_QWORD *)(v9 + 32) = v1735.rlim_cur;
LABEL_2567:
                                            v1723 = v1724;
                                            v15 = v1722;
                                            break;
                                          case 0x12:
                                          case 0x13:
                                            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                            v1288 = v1735.rlim_cur;
                                            if (!v1735.rlim_cur)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x198B19FF8);
                                            }
                                            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                            *(_QWORD *)(v1288 + 8) = v1288 + 20;
                                            *(_DWORD *)(v1288 + 16) = 4;
                                            *(_DWORD *)(v1288 + 36) = 656436837;
                                            v22 = *(__n128 *)"Unrecognized token '";
                                            *(_OWORD *)(v1288 + 20) = *(_OWORD *)"Unrecognized token '";
                                            *(_BYTE *)(v1288 + 40) = *(_BYTE *)v15;
                                            *(_BYTE *)(v1288 + 41) = 39;
                                            v1289 = *(WTF::StringImpl **)v1709;
                                            *(_QWORD *)v1709 = v1288;
                                            if (!v1289)
                                            {
                                              LOBYTE(v14) = 0;
                                              goto LABEL_2567;
                                            }
                                            v15 = v1722;
                                            if (*(_DWORD *)v1289 != 2)
                                            {
                                              LOBYTE(v14) = 0;
                                              *(_DWORD *)v1289 -= 2;
                                              goto LABEL_2107;
                                            }
                                            WTF::StringImpl::~StringImpl(v1289, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                            WTF::fastFree(v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385);
                                            goto LABEL_2889;
                                          default:
                                            LOBYTE(v14) = 0;
                                            v978 = v1722;
                                            *(_BYTE *)v1722 = *(_BYTE *)(v26 + *(unsigned __int8 *)v15);
                                            v979 = v15 + 1;
                                            v15 = v978;
                                            *i64 = v979;
                                            goto LABEL_2107;
                                        }
LABEL_1959:
                                        if (!rlim_cur)
                                          goto LABEL_1829;
                                        LODWORD(v23) = *(_DWORD *)rlim_cur - 2;
                                        if (*(_DWORD *)rlim_cur != 2)
                                          goto LABEL_1828;
                                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)rlim_cur, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                        v908 = *(_QWORD *)(StatusReg + 752);
                                        if (v908)
                                        {
                                          if (!(rlim_cur >> 43)
                                            && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                                 + ((rlim_cur >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(rlim_cur)) & 1) != 0)
                                          {
LABEL_1964:
                                            v909 = *(unsigned int *)(v908 + 8000);
                                            if (v909 >= 0x3E7)
                                            {
                                              pas_thread_local_cache_append_deallocation_slow(v908, rlim_cur, (os_unfair_lock_s *)5, v28, a5, a6, a7, a8);
                                            }
                                            else
                                            {
                                              *(_QWORD *)(v908 + 8 * v909) = rlim_cur | 0x5000000000000;
                                              *(_DWORD *)(v908 + 8000) = v909 + 1;
                                            }
                                            goto LABEL_1829;
                                          }
                                          if (rlim_cur >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= rlim_cur >> 24)
                                          {
                                            v28 = 0;
                                          }
                                          else
                                          {
                                            v28 = (*(_DWORD *)((char *)off_1ECF425F8
                                                             + ((((rlim_cur >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                             + 24) >> (2
                                                                     * ((BYTE3(rlim_cur) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                            if ((_DWORD)v28 == 1)
                                              goto LABEL_1964;
                                          }
                                          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v908, rlim_cur, 1, v28, a5, a6, a7, a8);
                                        }
                                        else
                                        {
                                          pas_try_deallocate_slow_no_cache(rlim_cur, (uint64_t)&bmalloc_heap_config, 1);
                                        }
LABEL_1829:
                                        v46 = v1726;
                                        if ((v14 & 1) == 0)
                                          return v1723;
                                        break;
                                      default:
                                        goto LABEL_2376;
                                    }
                                    continue;
                                  case 5:
                                    if ((_DWORD)v28 == 110)
                                    {
                                      if ((uint64_t)(v23 - (_QWORD)v840) < 4
                                        || *(_WORD *)(v840 + 1) != 27765
                                        || v840[3] != 108)
                                      {
                                        goto LABEL_3020;
                                      }
                                      v1142 = v840 + 4;
                                      *i64 = v1142;
                                      *(_BYTE *)v15 = 13;
LABEL_2586:
                                      if ((unint64_t)v1142 < v23)
                                      {
                                        v1143 = v23 - (_QWORD)v1142;
                                        while (*(_BYTE *)(v26 + *v1142) == 19)
                                        {
                                          *i64 = ++v1142;
                                          if (!--v1143)
                                          {
                                            v1142 = (unsigned __int8 *)v23;
                                            break;
                                          }
                                        }
                                      }
                                      if (v1142 == (unsigned __int8 *)v23)
                                      {
                                        *(_BYTE *)v15 = 14;
                                        goto LABEL_2644;
                                      }
                                      *(_BYTE *)v15 = 18;
                                      v28 = *v1142;
                                      v1144 = *(unsigned __int8 *)(v26 + v28);
                                      if (v1144 <= 4)
                                      {
                                        if (v1144 == 4)
                                        {
                                          v1145 = *(unsigned __int8 *)(v9 + 40);
                                          if ((_DWORD)v28 == 39)
                                          {
                                            if (!*(_BYTE *)(v9 + 40))
                                            {
                                              v1664 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1435 = v1664;
                                              v22.n128_u64[0] = 0x2900000002;
                                              v1665 = "Single quotes (') are not allowed in JSON";
                                              goto LABEL_3601;
                                            }
                                            a3 = v1142 + 1;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            *(_QWORD *)v1727.n128_u64[0] = v1142 + 1;
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                          }
                                          else
                                          {
                                            a3 = v1142 + 1;
                                            *i64 = v1142 + 1;
                                            if (!v1145)
                                            {
                                              v1146 = v23 - (_QWORD)a3;
                                              if ((uint64_t)(v23 - (_QWORD)a3) >= 0)
                                              {
                                                v1147 = (int8x16_t *)&v1142[v1146 + 1];
                                                if (v1146 >= 0x10)
                                                {
                                                  v1148 = v1142 + 16;
                                                  while (1)
                                                  {
                                                    v1149 = *(int8x16_t *)(v1148 - 15);
                                                    v1150.i64[0] = 0x2222222222222222;
                                                    v1150.i64[1] = 0x2222222222222222;
                                                    v1151 = vceqq_s8(v1149, v1150);
                                                    v1152.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v1152.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                    v1153.i64[0] = 0x2020202020202020;
                                                    v1153.i64[1] = 0x2020202020202020;
                                                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1149, v1152), (int8x16_t)vcgtq_u8(v1153, (uint8x16_t)v1149)), v1151);
                                                    v1151.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                    if (v1151.i32[0])
                                                      break;
                                                    v1148 += 16;
                                                    if (v1148 >= (unsigned __int8 *)v1147)
                                                    {
                                                      if (v1148 - 15 >= (unsigned __int8 *)v1147)
                                                        goto LABEL_3223;
                                                      v1154 = (unsigned __int8 *)&v1147[-1];
                                                      v1155 = v1147[-1];
                                                      v1156.i64[0] = 0x2222222222222222;
                                                      v1156.i64[1] = 0x2222222222222222;
                                                      v1157 = vceqq_s8(v1155, v1156);
                                                      v1158.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v1158.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                      v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1155, v1158), (int8x16_t)vcgtq_u8(v1153, (uint8x16_t)v1155)), v1157);
                                                      v1157.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                      v9 = v1720;
                                                      v15 = v1722;
                                                      v13 = (unint64_t)v1725;
                                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                      v826 = (char *)v1728.i64[0];
                                                      if (!v1157.i32[0])
                                                      {
LABEL_2689:
                                                        *i64 = v1147;
                                                        goto LABEL_2690;
                                                      }
LABEL_2688:
                                                      v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                                      v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                                      v1147 = (int8x16_t *)&v1154[v22.n128_u32[0]];
                                                      goto LABEL_2689;
                                                    }
                                                  }
                                                  v1154 = v1148 - 15;
                                                  goto LABEL_2688;
                                                }
                                                v1403 = (int8x16_t *)(v1142 + 1);
                                                if ((unsigned __int8 *)v23 != a3)
                                                {
                                                  while (JSC::safeStringLatin1CharactersInStrictJSON[v1403->u8[0]])
                                                  {
                                                    v1403 = (int8x16_t *)((char *)v1403 + 1);
                                                    if (!--v1146)
                                                      goto LABEL_3223;
                                                  }
                                                  v1147 = v1403;
                                                }
LABEL_3223:
                                                v9 = v1720;
                                                v15 = v1722;
                                                v13 = (unint64_t)v1725;
                                                i64 = (_QWORD *)v1727.n128_u64[0];
                                                v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                v826 = (char *)v1728.i64[0];
                                                goto LABEL_2689;
                                              }
LABEL_1827:
                                              __break(1u);
LABEL_1828:
                                              *(_DWORD *)rlim_cur = v23;
                                              goto LABEL_1829;
                                            }
                                          }
                                          if ((unint64_t)a3 >= v23)
                                          {
                                            v1147 = (int8x16_t *)a3;
                                          }
                                          else
                                          {
                                            v1147 = (int8x16_t *)a3;
                                            while (1)
                                            {
                                              v1671 = v1147->u8[0];
                                              v1672 = v1671 < 0x20 || v1671 == 92;
                                              v1673 = v1672 || v1671 == (_DWORD)v28;
                                              v1674 = v1673;
                                              if (v1671 != 9 && v1674)
                                                break;
                                              v1147 = (int8x16_t *)((char *)v1147 + 1);
                                              *i64 = v1147;
                                              if (v1147 == (int8x16_t *)&v1142[v23 - (_QWORD)a3 + 1])
                                              {
                                                v1147 = (int8x16_t *)&v1142[v23 - (_QWORD)a3 + 1];
                                                break;
                                              }
                                            }
                                          }
LABEL_2690:
                                          if ((unint64_t)v1147 < v23 && v1147->u8[0] == (_DWORD)v28)
                                          {
                                            *(_BYTE *)(v9 + 25) |= 1u;
                                            *(_QWORD *)(v9 + 32) = a3;
                                            *(_QWORD *)(v9 + 48) = (char *)v1147->i64 + 1;
                                            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v1147 - (_DWORD)a3) & 0x7FFFFFFF;
                                            *(_BYTE *)(v9 + 24) = 4;
                                          }
                                          else
                                          {
                                            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
                                          }
                                          goto LABEL_2644;
                                        }
LABEL_2643:
                                        *(_BYTE *)v15 = v1144;
                                        *i64 = v1142 + 1;
LABEL_2644:
                                        v857 = 2;
                                        goto LABEL_1885;
                                      }
                                      if (v1144 != 6)
                                      {
                                        if (v1144 == 5)
                                        {
                                          if ((_DWORD)v28 == 110)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1142) >= 4
                                              && *(_WORD *)(v1142 + 1) == 27765
                                              && v1142[3] == 108)
                                            {
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v1142 + 4;
                                              v1342 = 13;
LABEL_3126:
                                              v15 = v1722;
                                              *(_BYTE *)v1722 = v1342;
                                              v857 = 2;
                                              goto LABEL_3127;
                                            }
                                          }
                                          else if ((_DWORD)v28 == 102)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1142) >= 5
                                              && *(_WORD *)(v1142 + 1) == 27745
                                              && *(_WORD *)(v1142 + 3) == 25971)
                                            {
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v1142 + 5;
                                              v1342 = 12;
                                              goto LABEL_3126;
                                            }
                                          }
                                          else if ((_DWORD)v28 == 116
                                                 && (uint64_t)(v23 - (_QWORD)v1142) >= 4
                                                 && *(_WORD *)(v1142 + 1) == 30066
                                                 && v1142[3] == 101)
                                          {
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            *(_QWORD *)v1727.n128_u64[0] = v1142 + 4;
                                            v1342 = 11;
                                            goto LABEL_3126;
                                          }
                                          v1498 = (int)v1142;
                                          *(_QWORD *)(v1720 + 32) = v1142;
                                          v1499 = (int)v1142;
                                          if ((unint64_t)v1142 < v23)
                                          {
                                            v1500 = v23 - (_QWORD)v1142;
                                            v1501 = (_DWORD)v1142 + v1500;
                                            while (1)
                                            {
                                              v1502 = *v1142;
                                              if (v1502 != 36)
                                              {
                                                v1503 = v1502 != 95 && (v1502 - 48) >= 0xA;
                                                if (v1503 && (v1502 | 0x20u) - 97 > 0x19)
                                                  break;
                                              }
                                              *(_QWORD *)v1727.n128_u64[0] = ++v1142;
                                              if (!--v1500)
                                              {
                                                LODWORD(v1142) = v1501;
                                                break;
                                              }
                                            }
                                            v1499 = (int)v1142;
                                          }
                                          v9 = v1720;
                                          *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v1499 - v1498) & 0x7FFFFFFF;
                                          *(_BYTE *)(v9 + 24) = 5;
                                          v857 = 2;
                                          goto LABEL_3162;
                                        }
                                        if (v1144 - 18 < 2)
                                        {
                                          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                          v1435 = v1735.rlim_cur;
                                          if (!v1735.rlim_cur)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B19FC8);
                                          }
                                          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                          *(_QWORD *)(v1435 + 8) = v1435 + 20;
                                          *(_DWORD *)(v1435 + 16) = 4;
                                          *(_DWORD *)(v1435 + 36) = 656436837;
                                          v22 = *(__n128 *)"Unrecognized token '";
                                          *(_OWORD *)(v1435 + 20) = *(_OWORD *)"Unrecognized token '";
                                          *(_BYTE *)(v1435 + 40) = *v1142;
                                          *(_BYTE *)(v1435 + 41) = 39;
                                          goto LABEL_3276;
                                        }
                                        goto LABEL_2643;
                                      }
                                      v1190 = v1142;
                                      if ((unint64_t)v1142 < v23)
                                      {
                                        v1190 = v1142;
                                        if ((_DWORD)v28 == 45)
                                        {
                                          v1190 = v1142 + 1;
                                          *i64 = v1142 + 1;
                                        }
                                      }
                                      if ((unint64_t)v1190 >= v23)
                                      {
LABEL_3599:
                                        v1664 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1435 = v1664;
                                        v1665 = "Invalid number";
                                        *(_QWORD *)v1664 = v11;
                                        goto LABEL_3602;
                                      }
                                      v1191 = *v1190;
                                      if (v1191 == 48)
                                      {
                                        v1193 = v1190 + 1;
                                        *i64 = v1193;
                                      }
                                      else
                                      {
                                        if ((v1191 - 49) > 8)
                                          goto LABEL_3599;
                                        v1192 = v1190 + 1;
                                        do
                                        {
                                          v1193 = v1192;
                                          *i64 = v1192;
                                          if ((unint64_t)v1192 >= v23)
                                            break;
                                          ++v1192;
                                        }
                                        while (*v1193 - 48 < 0xA);
                                      }
                                      if ((unint64_t)v1193 < v23)
                                      {
                                        v1194 = *v1193;
                                        if (v1194 == 46)
                                        {
                                          *i64 = v1193 + 1;
                                          if ((unint64_t)(v1193 + 1) >= v23 || v1193[1] - 48 > 9)
                                          {
                                            v1664 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1435 = v1664;
                                            v22.n128_u64[0] = 0x2200000002;
                                            v1665 = "Invalid digits after decimal point";
LABEL_3601:
                                            *(_QWORD *)v1664 = v22.n128_u64[0];
LABEL_3602:
                                            *(_QWORD *)(v1664 + 8) = v1665;
                                            *(_DWORD *)(v1664 + 16) = 4;
LABEL_3276:
                                            v1436 = *(WTF::StringImpl **)v1709;
                                            *(_QWORD *)v1709 = v1435;
                                            if (v1436)
                                            {
                                              if (*(_DWORD *)v1436 == 2)
                                              {
                                                WTF::StringImpl::~StringImpl(v1436, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                                WTF::fastFree(v1505, v1506, v1507, v1508, v1509, v1510, v1511, v1512);
                                              }
                                              else
                                              {
                                                *(_DWORD *)v1436 -= 2;
                                              }
                                            }
                                            v857 = 2;
LABEL_3280:
                                            v9 = v1720;
LABEL_3162:
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_3128:
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                            goto LABEL_1885;
                                          }
                                          v1266 = v1193 + 2;
                                          do
                                          {
                                            v1193 = v1266;
                                            *i64 = v1266;
                                            if ((unint64_t)v1266 >= v23)
                                              break;
                                            ++v1266;
                                          }
                                          while (*v1193 - 48 < 0xA);
                                        }
                                        else if (v1194 != 69 && v1194 != 101 && v1193 - v1142 <= 9)
                                        {
                                          *(_BYTE *)v15 = 6;
                                          v1195 = *v1142;
                                          if (v1195 == 45)
                                            v1196 = v1142 + 1;
                                          else
                                            v1196 = v1142;
                                          if (v1196 >= v1193)
                                          {
                                            if (v1195 != 45)
                                            {
                                              v1197 = 0;
                                              goto LABEL_2778;
                                            }
                                          }
                                          else
                                          {
                                            v1197 = 0;
                                            do
                                            {
                                              v1198 = *v1196++;
                                              v1197 = v1198 + 10 * v1197 - 48;
                                            }
                                            while (v1196 < v1193);
                                            if (v1195 != 45)
                                            {
LABEL_2778:
                                              v22.n128_f64[0] = (double)v1197;
LABEL_2779:
                                              *(_QWORD *)(v9 + 32) = v22.n128_u64[0];
                                              goto LABEL_2644;
                                            }
                                            if (v1197)
                                            {
                                              v22.n128_f64[0] = (double)-v1197;
                                              goto LABEL_2779;
                                            }
                                          }
                                          *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                          goto LABEL_2644;
                                        }
                                      }
                                      if ((unint64_t)v1193 < v23 && (*v1193 | 0x20) == 0x65)
                                      {
                                        v1666 = v1193 + 1;
                                        *i64 = v1193 + 1;
                                        if ((unint64_t)(v1193 + 1) < v23)
                                        {
                                          v1667 = *v1666;
                                          if (v1667 == 45 || v1667 == 43)
                                          {
                                            v1666 = v1193 + 2;
                                            *(_QWORD *)v1727.n128_u64[0] = v1193 + 2;
                                          }
                                        }
                                        if ((unint64_t)v1666 >= v23 || *v1666 - 48 > 9)
                                        {
                                          v1664 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1435 = v1664;
                                          v22.n128_u64[0] = 0x5D00000002;
                                          v1665 = "Exponent symbols should be followed by an optional '+' or '-' and then"
                                                  " by at least one number";
                                          goto LABEL_3601;
                                        }
                                        v1668 = v1666 + 1;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        while (1)
                                        {
                                          v1193 = v1668;
                                          *i64 = v1668;
                                          if ((unint64_t)v1668 >= v23)
                                            break;
                                          ++v1668;
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
                                          if (*v1193 - 48 >= 0xA)
                                            goto LABEL_2962;
                                        }
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                      }
LABEL_2962:
                                      *(_BYTE *)v15 = 6;
                                      LODWORD(v23) = (_DWORD)v1193 - (_DWORD)v1142;
                                      if (v1193 - v1142 < 0)
                                        goto LABEL_1827;
                                      v1735.rlim_cur = 0;
                                      fast_float::from_chars_advanced<double,char>(v1142, v1193, &v1735.rlim_cur, 0x2E00000005);
                                      v22.n128_u64[0] = v1735.rlim_cur;
                                      goto LABEL_2779;
                                    }
                                    if ((_DWORD)v28 == 102)
                                    {
                                      if ((uint64_t)(v23 - (_QWORD)v840) < 5
                                        || *(_WORD *)(v840 + 1) != 27745
                                        || *(_WORD *)(v840 + 3) != 25971)
                                      {
                                        goto LABEL_3020;
                                      }
                                      v1163 = v840 + 5;
                                      *i64 = v1163;
                                      *(_BYTE *)v15 = 12;
LABEL_2666:
                                      if ((unint64_t)v1163 < v23)
                                      {
                                        v1164 = v23 - (_QWORD)v1163;
                                        while (*(_BYTE *)(v26 + *v1163) == 19)
                                        {
                                          *i64 = ++v1163;
                                          if (!--v1164)
                                          {
                                            v1163 = (unsigned __int8 *)v23;
                                            break;
                                          }
                                        }
                                      }
                                      if (v1163 == (unsigned __int8 *)v23)
                                      {
                                        *(_BYTE *)v15 = 14;
                                        v857 = 6;
                                        goto LABEL_1885;
                                      }
                                      *(_BYTE *)v15 = 18;
                                      v28 = *v1163;
                                      v1165 = *(unsigned __int8 *)(v26 + v28);
                                      if (v1165 > 4)
                                      {
                                        if (v1165 == 6)
                                        {
                                          v1210 = v1163;
                                          if ((unint64_t)v1163 < v23)
                                          {
                                            v1210 = v1163;
                                            if ((_DWORD)v28 == 45)
                                            {
                                              v1210 = v1163 + 1;
                                              *i64 = v1163 + 1;
                                            }
                                          }
                                          if ((unint64_t)v1210 >= v23)
                                          {
LABEL_3615:
                                            v1669 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1453 = v1669;
                                            v1670 = "Invalid number";
                                            *(_QWORD *)v1669 = v11;
                                            goto LABEL_3635;
                                          }
                                          v1211 = *v1210;
                                          if (v1211 == 48)
                                          {
                                            v1213 = v1210 + 1;
                                            *i64 = v1213;
                                          }
                                          else
                                          {
                                            if ((v1211 - 49) > 8)
                                              goto LABEL_3615;
                                            v1212 = v1210 + 1;
                                            do
                                            {
                                              v1213 = v1212;
                                              *i64 = v1212;
                                              if ((unint64_t)v1212 >= v23)
                                                break;
                                              ++v1212;
                                            }
                                            while (*v1213 - 48 < 0xA);
                                          }
                                          if ((unint64_t)v1213 < v23)
                                          {
                                            v1214 = *v1213;
                                            if (v1214 == 46)
                                            {
                                              *i64 = v1213 + 1;
                                              if ((unint64_t)(v1213 + 1) >= v23
                                                || v1213[1] - 48 > 9)
                                              {
                                                v1669 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1453 = v1669;
                                                v22.n128_u64[0] = 0x2200000002;
                                                v1670 = "Invalid digits after decimal point";
LABEL_3634:
                                                *(_QWORD *)v1669 = v22.n128_u64[0];
LABEL_3635:
                                                *(_QWORD *)(v1669 + 8) = v1670;
                                                *(_DWORD *)(v1669 + 16) = 4;
                                                goto LABEL_3310;
                                              }
                                              v1312 = v1213 + 2;
                                              do
                                              {
                                                v1213 = v1312;
                                                *i64 = v1312;
                                                if ((unint64_t)v1312 >= v23)
                                                  break;
                                                ++v1312;
                                              }
                                              while (*v1213 - 48 < 0xA);
                                            }
                                            else if (v1214 != 69 && v1214 != 101 && v1213 - v1163 <= 9)
                                            {
                                              *(_BYTE *)v15 = 6;
                                              v1215 = *v1163;
                                              if (v1215 == 45)
                                                v1216 = v1163 + 1;
                                              else
                                                v1216 = v1163;
                                              if (v1216 >= v1213)
                                              {
                                                if (v1215 == 45)
                                                  goto LABEL_3282;
                                                v1217 = 0;
LABEL_2870:
                                                v22.n128_f64[0] = (double)v1217;
                                              }
                                              else
                                              {
                                                v1217 = 0;
                                                do
                                                {
                                                  v1218 = *v1216++;
                                                  v1217 = v1218 + 10 * v1217 - 48;
                                                }
                                                while (v1216 < v1213);
                                                if (v1215 != 45)
                                                  goto LABEL_2870;
                                                if (!v1217)
                                                {
LABEL_3282:
                                                  *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                                  v857 = 6;
                                                  goto LABEL_1885;
                                                }
                                                v22.n128_f64[0] = (double)-v1217;
                                              }
LABEL_2871:
                                              *(_QWORD *)(v9 + 32) = v22.n128_u64[0];
                                              v857 = 6;
                                              goto LABEL_1885;
                                            }
                                          }
                                          if ((unint64_t)v1213 < v23 && (*v1213 | 0x20) == 0x65)
                                          {
                                            v1675 = v1213 + 1;
                                            *i64 = v1213 + 1;
                                            if ((unint64_t)(v1213 + 1) < v23)
                                            {
                                              v1676 = *v1675;
                                              if (v1676 == 45 || v1676 == 43)
                                              {
                                                v1675 = v1213 + 2;
                                                *(_QWORD *)v1727.n128_u64[0] = v1213 + 2;
                                              }
                                            }
                                            if ((unint64_t)v1675 >= v23 || *v1675 - 48 > 9)
                                            {
                                              v1669 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1453 = v1669;
                                              v22.n128_u64[0] = 0x5D00000002;
                                              v1670 = "Exponent symbols should be followed by an optional '+' or '-' and "
                                                      "then by at least one number";
                                              goto LABEL_3634;
                                            }
                                            v1677 = v1675 + 1;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            while (1)
                                            {
                                              v1213 = v1677;
                                              *i64 = v1677;
                                              if ((unint64_t)v1677 >= v23)
                                                break;
                                              ++v1677;
                                              v9 = v1720;
                                              v15 = v1722;
                                              v13 = (unint64_t)v1725;
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              v826 = (char *)v1728.i64[0];
                                              if (*v1213 - 48 >= 0xA)
                                                goto LABEL_3057;
                                            }
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                          }
LABEL_3057:
                                          *(_BYTE *)v15 = 6;
                                          LODWORD(v23) = (_DWORD)v1213 - (_DWORD)v1163;
                                          if (v1213 - v1163 < 0)
                                            goto LABEL_1827;
                                          v1735.rlim_cur = 0;
                                          fast_float::from_chars_advanced<double,char>(v1163, v1213, &v1735.rlim_cur, 0x2E00000005);
                                          v22.n128_u64[0] = v1735.rlim_cur;
                                          goto LABEL_2871;
                                        }
                                        if (v1165 == 5)
                                        {
                                          if ((_DWORD)v28 == 110)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1163) >= 4
                                              && *(_WORD *)(v1163 + 1) == 27765
                                              && v1163[3] == 108)
                                            {
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v1163 + 4;
                                              v1386 = 13;
LABEL_3201:
                                              v15 = v1722;
                                              *(_BYTE *)v1722 = v1386;
                                              v857 = 6;
                                              goto LABEL_3127;
                                            }
                                          }
                                          else if ((_DWORD)v28 == 102)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1163) >= 5
                                              && *(_WORD *)(v1163 + 1) == 27745
                                              && *(_WORD *)(v1163 + 3) == 25971)
                                            {
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v1163 + 5;
                                              v1386 = 12;
                                              goto LABEL_3201;
                                            }
                                          }
                                          else if ((_DWORD)v28 == 116
                                                 && (uint64_t)(v23 - (_QWORD)v1163) >= 4
                                                 && *(_WORD *)(v1163 + 1) == 30066
                                                 && v1163[3] == 101)
                                          {
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            *(_QWORD *)v1727.n128_u64[0] = v1163 + 4;
                                            v1386 = 11;
                                            goto LABEL_3201;
                                          }
                                          v1547 = (int)v1163;
                                          *(_QWORD *)(v1720 + 32) = v1163;
                                          v1548 = (int)v1163;
                                          if ((unint64_t)v1163 < v23)
                                          {
                                            v1549 = v23 - (_QWORD)v1163;
                                            v1550 = (_DWORD)v1163 + v1549;
                                            while (1)
                                            {
                                              v1551 = *v1163;
                                              if (v1551 != 36)
                                              {
                                                v1552 = v1551 != 95 && (v1551 - 48) >= 0xA;
                                                if (v1552 && (v1551 | 0x20u) - 97 > 0x19)
                                                  break;
                                              }
                                              *(_QWORD *)v1727.n128_u64[0] = ++v1163;
                                              if (!--v1549)
                                              {
                                                LODWORD(v1163) = v1550;
                                                break;
                                              }
                                            }
                                            v1548 = (int)v1163;
                                          }
                                          v9 = v1720;
                                          *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v1548 - v1547) & 0x7FFFFFFF;
                                          *(_BYTE *)(v9 + 24) = 5;
                                          v857 = 6;
                                          goto LABEL_3162;
                                        }
                                        if (v1165 - 18 < 2)
                                        {
                                          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                          v1453 = v1735.rlim_cur;
                                          if (!v1735.rlim_cur)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B19FD0);
                                          }
                                          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                          *(_QWORD *)(v1453 + 8) = v1453 + 20;
                                          *(_DWORD *)(v1453 + 16) = 4;
                                          *(_DWORD *)(v1453 + 36) = 656436837;
                                          v22 = *(__n128 *)"Unrecognized token '";
                                          *(_OWORD *)(v1453 + 20) = *(_OWORD *)"Unrecognized token '";
                                          *(_BYTE *)(v1453 + 40) = *v1163;
                                          *(_BYTE *)(v1453 + 41) = 39;
LABEL_3310:
                                          v1454 = *(WTF::StringImpl **)v1709;
                                          *(_QWORD *)v1709 = v1453;
                                          if (v1454)
                                          {
                                            if (*(_DWORD *)v1454 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v1454, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                              WTF::fastFree(v1554, v1555, v1556, v1557, v1558, v1559, v1560, v1561);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v1454 -= 2;
                                            }
                                          }
                                          v857 = 6;
                                          goto LABEL_3280;
                                        }
LABEL_2722:
                                        *(_BYTE *)v15 = v1165;
                                        *i64 = v1163 + 1;
                                        v857 = 6;
                                        goto LABEL_1885;
                                      }
                                      if (v1165 != 4)
                                        goto LABEL_2722;
                                      v1166 = *(unsigned __int8 *)(v9 + 40);
                                      if ((_DWORD)v28 == 39)
                                      {
                                        if (!*(_BYTE *)(v9 + 40))
                                        {
                                          v1669 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1453 = v1669;
                                          v22.n128_u64[0] = 0x2900000002;
                                          v1670 = "Single quotes (') are not allowed in JSON";
                                          goto LABEL_3634;
                                        }
                                        a3 = v1163 + 1;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        *(_QWORD *)v1727.n128_u64[0] = v1163 + 1;
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                      }
                                      else
                                      {
                                        a3 = v1163 + 1;
                                        *i64 = v1163 + 1;
                                        if (!v1166)
                                        {
                                          v1167 = v23 - (_QWORD)a3;
                                          if ((uint64_t)(v23 - (_QWORD)a3) >= 0)
                                          {
                                            v1168 = (int8x16_t *)&v1163[v1167 + 1];
                                            if (v1167 >= 0x10)
                                            {
                                              v1169 = v1163 + 16;
                                              while (1)
                                              {
                                                v1170 = *(int8x16_t *)(v1169 - 15);
                                                v1171.i64[0] = 0x2222222222222222;
                                                v1171.i64[1] = 0x2222222222222222;
                                                v1172 = vceqq_s8(v1170, v1171);
                                                v1173.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1173.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1174.i64[0] = 0x2020202020202020;
                                                v1174.i64[1] = 0x2020202020202020;
                                                v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1170, v1173), (int8x16_t)vcgtq_u8(v1174, (uint8x16_t)v1170)), v1172);
                                                v1172.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                if (v1172.i32[0])
                                                  break;
                                                v1169 += 16;
                                                if (v1169 >= (unsigned __int8 *)v1168)
                                                {
                                                  if (v1169 - 15 >= (unsigned __int8 *)v1168)
                                                    goto LABEL_3272;
                                                  v1175 = (unsigned __int8 *)&v1168[-1];
                                                  v1176 = v1168[-1];
                                                  v1177.i64[0] = 0x2222222222222222;
                                                  v1177.i64[1] = 0x2222222222222222;
                                                  v1178 = vceqq_s8(v1176, v1177);
                                                  v1179.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                  v1179.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1176, v1179), (int8x16_t)vcgtq_u8(v1174, (uint8x16_t)v1176)), v1178);
                                                  v1178.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                  v9 = v1720;
                                                  v15 = v1722;
                                                  v13 = (unint64_t)v1725;
                                                  i64 = (_QWORD *)v1727.n128_u64[0];
                                                  v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  v826 = (char *)v1728.i64[0];
                                                  if (!v1178.i32[0])
                                                  {
LABEL_2795:
                                                    *i64 = v1168;
                                                    goto LABEL_2796;
                                                  }
LABEL_2794:
                                                  v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                                  v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                                  v1168 = (int8x16_t *)&v1175[v22.n128_u32[0]];
                                                  goto LABEL_2795;
                                                }
                                              }
                                              v1175 = v1169 - 15;
                                              goto LABEL_2794;
                                            }
                                            v1434 = (int8x16_t *)(v1163 + 1);
                                            if ((unsigned __int8 *)v23 != a3)
                                            {
                                              while (JSC::safeStringLatin1CharactersInStrictJSON[v1434->u8[0]])
                                              {
                                                v1434 = (int8x16_t *)((char *)v1434 + 1);
                                                if (!--v1167)
                                                  goto LABEL_3272;
                                              }
                                              v1168 = v1434;
                                            }
LABEL_3272:
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                            goto LABEL_2795;
                                          }
                                          goto LABEL_1827;
                                        }
                                      }
                                      if ((unint64_t)a3 >= v23)
                                      {
                                        v1168 = (int8x16_t *)a3;
                                      }
                                      else
                                      {
                                        v1168 = (int8x16_t *)a3;
                                        while (1)
                                        {
                                          v1678 = v1168->u8[0];
                                          v1679 = v1678 < 0x20 || v1678 == 92;
                                          v1680 = v1679 || v1678 == (_DWORD)v28;
                                          v1681 = v1680;
                                          if (v1678 != 9 && v1681)
                                            break;
                                          v1168 = (int8x16_t *)((char *)v1168 + 1);
                                          *i64 = v1168;
                                          if (v1168 == (int8x16_t *)&v1163[v23 - (_QWORD)a3 + 1])
                                          {
                                            v1168 = (int8x16_t *)&v1163[v23 - (_QWORD)a3 + 1];
                                            break;
                                          }
                                        }
                                      }
LABEL_2796:
                                      if ((unint64_t)v1168 < v23 && v1168->u8[0] == (_DWORD)v28)
                                      {
                                        *(_BYTE *)(v9 + 25) |= 1u;
                                        *(_QWORD *)(v9 + 32) = a3;
                                        *(_QWORD *)(v9 + 48) = (char *)v1168->i64 + 1;
                                        *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v1168
                                                                                                  - (_DWORD)a3) & 0x7FFFFFFF;
                                        *(_BYTE *)(v9 + 24) = 4;
                                        v857 = 6;
                                      }
                                      else
                                      {
                                        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
                                        v857 = 6;
                                      }
                                    }
                                    else
                                    {
                                      if ((_DWORD)v28 != 116
                                        || (uint64_t)(v23 - (_QWORD)v840) < 4
                                        || *(_WORD *)(v840 + 1) != 30066
                                        || v840[3] != 101)
                                      {
LABEL_3020:
                                        *(_QWORD *)(v9 + 32) = v840;
                                        LODWORD(v1290) = (_DWORD)v840;
                                        if ((unint64_t)v840 < v23)
                                        {
                                          v1291 = v23 - (_QWORD)v840;
                                          v1292 = (_DWORD)v840 + v1291;
                                          v1290 = v840;
                                          while (1)
                                          {
                                            v1293 = *v1290;
                                            if (v1293 != 36)
                                            {
                                              v1294 = v1293 != 95 && (v1293 - 48) >= 0xA;
                                              if (v1294 && (v1293 | 0x20u) - 97 > 0x19)
                                                break;
                                            }
                                            *i64 = ++v1290;
                                            if (!--v1291)
                                            {
                                              LODWORD(v1290) = v1292;
                                              break;
                                            }
                                          }
                                        }
                                        v1296 = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v1290 - (_DWORD)v840) & 0x7FFFFFFF;
                                        *(_DWORD *)(v9 + 28) = v1296;
                                        *(_BYTE *)(v9 + 24) = 5;
LABEL_3033:
                                        v1297 = v1296 & 0x7FFFFFFF;
                                        if (v1297 >= 0xC8)
                                          v1298 = 200;
                                        else
                                          v1298 = v1297;
                                        v1735.rlim_cur = (rlim_t)"Unexpected identifier \"";
                                        LODWORD(v1735.rlim_max) = 23;
                                        v1732 = v840;
                                        v1299 = v1297 >= 0xC9;
                                        if (v1297 >= 0xC9)
                                          v1300 = 3;
                                        else
                                          v1300 = 0;
                                        LODWORD(v1733) = v1298;
                                        if (v1299)
                                          v1301 = "...";
                                        else
                                          v1301 = "";
                                        v1730 = (rlimit *)v1301;
                                        v1731 = v1300;
                                        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v1729, (uint64_t)&v1735, (uint64_t)&v1732, (uint64_t)&v1730, 34);
                                        v1302 = v1729;
                                        if (!v1729)
                                        {
                                          v1482 = *(_DWORD *)(v9 + 28);
                                          if ((v1482 & 0x7FFFFFFFu) < 0xB
                                            || (JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v1735, v1482, *(_QWORD *)(v9 + 32), 10), v1302 = v1735.rlim_cur, (v1729 = v1735.rlim_cur) == 0))
                                          {
                                            v1302 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v22.n128_u64[0] = 0x1500000002;
                                            *(_QWORD *)v1302 = 0x1500000002;
                                            *(_QWORD *)(v1302 + 8) = "Unexpected identifier";
                                            *(_DWORD *)(v1302 + 16) = 4;
                                            v1729 = v1302;
                                          }
                                        }
                                        *(_DWORD *)v1302 += 2;
                                        v1303 = *(WTF::StringImpl **)(v9 + 96);
                                        *(_QWORD *)(v9 + 96) = v1302;
                                        if (v1303)
                                        {
                                          if (*(_DWORD *)v1303 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1303, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                            WTF::fastFree(v1395, v1396, v1397, v1398, v1399, v1400, v1401, v1402);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1303 -= 2;
                                          }
                                        }
                                        if (*(_DWORD *)v1302 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1302, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                          WTF::fastFree(v1387, v1388, v1389, v1390, v1391, v1392, v1393, v1394);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1302 -= 2;
                                        }
                                        goto LABEL_2822;
                                      }
                                      v1249 = v840 + 4;
                                      *i64 = v1249;
                                      *(_BYTE *)v15 = 11;
LABEL_2937:
                                      if ((unint64_t)v1249 < v23)
                                      {
                                        v1250 = v23 - (_QWORD)v1249;
                                        while (*(_BYTE *)(v26 + *v1249) == 19)
                                        {
                                          *i64 = ++v1249;
                                          if (!--v1250)
                                          {
                                            v1249 = (unsigned __int8 *)v23;
                                            break;
                                          }
                                        }
                                      }
                                      if (v1249 == (unsigned __int8 *)v23)
                                      {
                                        *(_BYTE *)v15 = 14;
                                        v857 = 7;
                                        goto LABEL_1885;
                                      }
                                      *(_BYTE *)v15 = 18;
                                      v28 = *v1249;
                                      v1251 = *(unsigned __int8 *)(v26 + v28);
                                      if (v1251 > 4)
                                      {
                                        if (v1251 == 6)
                                        {
                                          v1345 = v1249;
                                          if ((unint64_t)v1249 < v23)
                                          {
                                            v1345 = v1249;
                                            if ((_DWORD)v28 == 45)
                                            {
                                              v1345 = v1249 + 1;
                                              *(_QWORD *)v1727.n128_u64[0] = v1249 + 1;
                                            }
                                          }
                                          if ((unint64_t)v1345 >= v23)
                                            goto LABEL_3684;
                                          v1346 = *v1345;
                                          if (v1346 == 48)
                                          {
                                            v1349 = v1345 + 1;
                                            *(_QWORD *)v1727.n128_u64[0] = v1349;
                                            goto LABEL_3147;
                                          }
                                          if ((v1346 - 49) > 8)
                                          {
LABEL_3684:
                                            v1682 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1605 = v1682;
                                            v1683 = "Invalid number";
                                            *(_QWORD *)v1682 = v11;
                                            goto LABEL_3691;
                                          }
                                          v1347 = v1345 + 1;
                                          v1348 = (unsigned __int8 **)v1727.n128_u64[0];
                                          do
                                          {
                                            v1349 = v1347;
                                            *v1348 = v1347;
                                            if ((unint64_t)v1347 >= v23)
                                              break;
                                            ++v1347;
                                          }
                                          while (*v1349 - 48 < 0xA);
LABEL_3147:
                                          if ((unint64_t)v1349 < v23)
                                          {
                                            v1350 = *v1349;
                                            if (v1350 == 46)
                                            {
                                              *(_QWORD *)v1727.n128_u64[0] = v1349 + 1;
                                              if ((unint64_t)(v1349 + 1) >= v23
                                                || v1349[1] - 48 > 9)
                                              {
                                                v1682 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1605 = v1682;
                                                v22.n128_u64[0] = 0x2200000002;
                                                v1683 = "Invalid digits after decimal point";
                                                goto LABEL_3690;
                                              }
                                              v1432 = v1349 + 2;
                                              v1433 = (unsigned __int8 **)v1727.n128_u64[0];
                                              do
                                              {
                                                v1349 = v1432;
                                                *v1433 = v1432;
                                                if ((unint64_t)v1432 >= v23)
                                                  break;
                                                ++v1432;
                                              }
                                              while (*v1349 - 48 < 0xA);
                                            }
                                            else if (v1350 != 69 && v1350 != 101 && v1349 - v1249 <= 9)
                                            {
                                              *(_BYTE *)v1722 = 6;
                                              v1351 = *v1249;
                                              if (v1351 == 45)
                                                v1352 = v1249 + 1;
                                              else
                                                v1352 = v1249;
                                              if (v1352 >= v1349)
                                              {
                                                if (v1351 != 45)
                                                {
                                                  v1353 = 0;
                                                  goto LABEL_3159;
                                                }
                                              }
                                              else
                                              {
                                                v1353 = 0;
                                                do
                                                {
                                                  v1354 = *v1352++;
                                                  v1353 = v1354 + 10 * v1353 - 48;
                                                }
                                                while (v1352 < v1349);
                                                if (v1351 != 45)
                                                {
LABEL_3159:
                                                  v22.n128_f64[0] = (double)v1353;
LABEL_3160:
                                                  v9 = v1720;
                                                  *(_QWORD *)(v1720 + 32) = v22.n128_u64[0];
                                                  goto LABEL_3161;
                                                }
                                                if (v1353)
                                                {
                                                  v22.n128_f64[0] = (double)-v1353;
                                                  goto LABEL_3160;
                                                }
                                              }
                                              v9 = v1720;
                                              *(_QWORD *)(v1720 + 32) = 0x8000000000000000;
                                              goto LABEL_3161;
                                            }
                                          }
                                          if ((unint64_t)v1349 < v23 && (*v1349 | 0x20) == 0x65)
                                          {
                                            v1684 = v1349 + 1;
                                            *(_QWORD *)v1727.n128_u64[0] = v1349 + 1;
                                            if ((unint64_t)(v1349 + 1) < v23)
                                            {
                                              v1685 = *v1684;
                                              if (v1685 == 45 || v1685 == 43)
                                              {
                                                v1684 = v1349 + 2;
                                                *(_QWORD *)v1727.n128_u64[0] = v1349 + 2;
                                              }
                                            }
                                            if ((unint64_t)v1684 >= v23 || *v1684 - 48 > 9)
                                            {
                                              v1682 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1605 = v1682;
                                              v22.n128_u64[0] = 0x5D00000002;
                                              v1683 = "Exponent symbols should be followed by an optional '+' or '-' and "
                                                      "then by at least one number";
                                              goto LABEL_3690;
                                            }
                                            v1686 = v1684 + 1;
                                            do
                                            {
                                              v1349 = v1686;
                                              *(_QWORD *)v1727.n128_u64[0] = v1686;
                                              if ((unint64_t)v1686 >= v23)
                                                break;
                                              ++v1686;
                                            }
                                            while (*v1349 - 48 < 0xA);
                                          }
                                          *(_BYTE *)v1722 = 6;
                                          LODWORD(v23) = (_DWORD)v1349 - (_DWORD)v1249;
                                          if (v1349 - v1249 < 0)
                                            goto LABEL_1827;
                                          v1735.rlim_cur = 0;
                                          fast_float::from_chars_advanced<double,char>(v1249, v1349, &v1735.rlim_cur, 0x2E00000005);
                                          v22.n128_u64[0] = v1735.rlim_cur;
                                          goto LABEL_3160;
                                        }
                                        if (v1251 == 5)
                                        {
                                          if ((_DWORD)v28 == 110)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1249) >= 4
                                              && *(_WORD *)(v1249 + 1) == 27765
                                              && v1249[3] == 108)
                                            {
                                              i64 = (_QWORD *)v1727.n128_u64[0];
                                              *(_QWORD *)v1727.n128_u64[0] = v1249 + 4;
                                              v1444 = 13;
                                              goto LABEL_3300;
                                            }
LABEL_3581:
                                            v1649 = (int)v1249;
                                            *(_QWORD *)(v1720 + 32) = v1249;
                                            v1650 = (int)v1249;
                                            if ((unint64_t)v1249 < v23)
                                            {
                                              v1651 = v23 - (_QWORD)v1249;
                                              v1652 = (_DWORD)v1249 + v1651;
                                              while (1)
                                              {
                                                v1653 = *v1249;
                                                if (v1653 != 36)
                                                {
                                                  v1654 = v1653 != 95 && (v1653 - 48) >= 0xA;
                                                  if (v1654 && (v1653 | 0x20u) - 97 > 0x19)
                                                    break;
                                                }
                                                *(_QWORD *)v1727.n128_u64[0] = ++v1249;
                                                if (!--v1651)
                                                {
                                                  LODWORD(v1249) = v1652;
                                                  break;
                                                }
                                              }
                                              v1650 = (int)v1249;
                                            }
                                            v9 = v1720;
                                            *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v1650 - v1649) & 0x7FFFFFFF;
                                            *(_BYTE *)(v9 + 24) = 5;
LABEL_3161:
                                            v857 = 7;
                                            goto LABEL_3162;
                                          }
                                          if ((_DWORD)v28 == 102)
                                          {
                                            if ((uint64_t)(v23 - (_QWORD)v1249) < 5
                                              || *(_WORD *)(v1249 + 1) != 27745
                                              || *(_WORD *)(v1249 + 3) != 25971)
                                            {
                                              goto LABEL_3581;
                                            }
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            *(_QWORD *)v1727.n128_u64[0] = v1249 + 5;
                                            v1444 = 12;
                                          }
                                          else
                                          {
                                            if ((_DWORD)v28 != 116
                                              || (uint64_t)(v23 - (_QWORD)v1249) < 4
                                              || *(_WORD *)(v1249 + 1) != 30066
                                              || v1249[3] != 101)
                                            {
                                              goto LABEL_3581;
                                            }
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            *(_QWORD *)v1727.n128_u64[0] = v1249 + 4;
                                            v1444 = 11;
                                          }
LABEL_3300:
                                          v15 = v1722;
                                          *(_BYTE *)v1722 = v1444;
                                          v857 = 7;
LABEL_3127:
                                          v9 = v1720;
                                          v13 = (unint64_t)v1725;
                                          goto LABEL_3128;
                                        }
                                        if (v1251 - 18 < 2)
                                        {
                                          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                          v1605 = v1735.rlim_cur;
                                          if (!v1735.rlim_cur)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B19FE8);
                                          }
                                          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                          *(_QWORD *)(v1605 + 8) = v1605 + 20;
                                          *(_DWORD *)(v1605 + 16) = 4;
                                          *(_DWORD *)(v1605 + 36) = 656436837;
                                          v22 = *(__n128 *)"Unrecognized token '";
                                          *(_OWORD *)(v1605 + 20) = *(_OWORD *)"Unrecognized token '";
                                          *(_BYTE *)(v1605 + 40) = *v1249;
                                          *(_BYTE *)(v1605 + 41) = 39;
                                          goto LABEL_3526;
                                        }
LABEL_3008:
                                        *(_BYTE *)v15 = v1251;
                                        *i64 = v1249 + 1;
                                        v857 = 7;
                                        goto LABEL_1885;
                                      }
                                      if (v1251 != 4)
                                        goto LABEL_3008;
                                      v1252 = *(unsigned __int8 *)(v9 + 40);
                                      if ((_DWORD)v28 == 39)
                                      {
                                        if (!*(_BYTE *)(v9 + 40))
                                        {
                                          v1682 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1605 = v1682;
                                          v22.n128_u64[0] = 0x2900000002;
                                          v1683 = "Single quotes (') are not allowed in JSON";
LABEL_3690:
                                          *(_QWORD *)v1682 = v22.n128_u64[0];
LABEL_3691:
                                          *(_QWORD *)(v1682 + 8) = v1683;
                                          *(_DWORD *)(v1682 + 16) = 4;
LABEL_3526:
                                          v1606 = *(WTF::StringImpl **)v1709;
                                          *(_QWORD *)v1709 = v1605;
                                          if (v1606)
                                          {
                                            if (*(_DWORD *)v1606 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v1606, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                              WTF::fastFree(v1656, v1657, v1658, v1659, v1660, v1661, v1662, v1663);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v1606 -= 2;
                                            }
                                          }
                                          v857 = 7;
                                          goto LABEL_3280;
                                        }
                                        a3 = v1249 + 1;
                                        *(_QWORD *)v1727.n128_u64[0] = v1249 + 1;
                                      }
                                      else
                                      {
                                        a3 = v1249 + 1;
                                        *i64 = v1249 + 1;
                                        if (!v1252)
                                        {
                                          v1253 = v23 - (_QWORD)a3;
                                          if ((uint64_t)(v23 - (_QWORD)a3) >= 0)
                                          {
                                            v1254 = (int8x16_t *)&v1249[v1253 + 1];
                                            if (v1253 >= 0x10)
                                            {
                                              v1255 = v1249 + 16;
                                              while (1)
                                              {
                                                v1256 = *(int8x16_t *)(v1255 - 15);
                                                v1257.i64[0] = 0x2222222222222222;
                                                v1257.i64[1] = 0x2222222222222222;
                                                v1258 = vceqq_s8(v1256, v1257);
                                                v1259.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1259.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                v1260.i64[0] = 0x2020202020202020;
                                                v1260.i64[1] = 0x2020202020202020;
                                                v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1256, v1259), (int8x16_t)vcgtq_u8(v1260, (uint8x16_t)v1256)), v1258);
                                                v1258.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                if (v1258.i32[0])
                                                  break;
                                                v1255 += 16;
                                                if (v1255 >= (unsigned __int8 *)v1254)
                                                {
                                                  if (v1255 - 15 >= (unsigned __int8 *)v1254)
                                                    goto LABEL_3423;
                                                  v1261 = (unsigned __int8 *)&v1254[-1];
                                                  v1262 = v1254[-1];
                                                  v1263.i64[0] = 0x2222222222222222;
                                                  v1263.i64[1] = 0x2222222222222222;
                                                  v1264 = vceqq_s8(v1262, v1263);
                                                  v1265.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                                                  v1265.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                                                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v1262, v1265), (int8x16_t)vcgtq_u8(v1260, (uint8x16_t)v1262)), v1264);
                                                  v1264.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                                                  v9 = v1720;
                                                  v15 = v1722;
                                                  v13 = (unint64_t)v1725;
                                                  i64 = (_QWORD *)v1727.n128_u64[0];
                                                  v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  v826 = (char *)v1728.i64[0];
                                                  if (!v1264.i32[0])
                                                  {
LABEL_3069:
                                                    *i64 = v1254;
                                                    goto LABEL_3070;
                                                  }
LABEL_3068:
                                                  v22 = (__n128)vornq_s8(v1721, (int8x16_t)v22);
                                                  v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                                                  v1254 = (int8x16_t *)&v1261[v22.n128_u32[0]];
                                                  goto LABEL_3069;
                                                }
                                              }
                                              v1261 = v1255 - 15;
                                              goto LABEL_3068;
                                            }
                                            v1535 = (int8x16_t *)(v1249 + 1);
                                            if ((unsigned __int8 *)v23 != a3)
                                            {
                                              while (JSC::safeStringLatin1CharactersInStrictJSON[v1535->u8[0]])
                                              {
                                                v1535 = (int8x16_t *)((char *)v1535 + 1);
                                                if (!--v1253)
                                                  goto LABEL_3423;
                                              }
                                              v1254 = v1535;
                                            }
LABEL_3423:
                                            v9 = v1720;
                                            v15 = v1722;
                                            v13 = (unint64_t)v1725;
                                            i64 = (_QWORD *)v1727.n128_u64[0];
                                            v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            v826 = (char *)v1728.i64[0];
                                            goto LABEL_3069;
                                          }
                                          goto LABEL_1827;
                                        }
                                      }
                                      if ((unint64_t)a3 >= v23)
                                      {
                                        v1254 = (int8x16_t *)a3;
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                      }
                                      else
                                      {
                                        v1254 = (int8x16_t *)a3;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        while (1)
                                        {
                                          v1696 = v1254->u8[0];
                                          v1697 = v1696 < 0x20 || v1696 == 92;
                                          v1698 = v1697 || v1696 == (_DWORD)v28;
                                          v1699 = v1698;
                                          if (v1696 != 9 && v1699)
                                            break;
                                          v1254 = (int8x16_t *)((char *)v1254 + 1);
                                          *i64 = v1254;
                                          if (v1254 == (int8x16_t *)&v1249[v23 - (_QWORD)a3 + 1])
                                          {
                                            v1254 = (int8x16_t *)&v1249[v23 - (_QWORD)a3 + 1];
                                            break;
                                          }
                                        }
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                      }
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      v826 = (char *)v1728.i64[0];
LABEL_3070:
                                      if ((unint64_t)v1254 < v23 && v1254->u8[0] == (_DWORD)v28)
                                      {
                                        *(_BYTE *)(v9 + 25) |= 1u;
                                        *(_QWORD *)(v9 + 32) = a3;
                                        *(_QWORD *)(v9 + 48) = (char *)v1254->i64 + 1;
                                        *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v1254
                                                                                                  - (_DWORD)a3) & 0x7FFFFFFF;
                                        *(_BYTE *)(v9 + 24) = 4;
                                        v857 = 7;
                                      }
                                      else
                                      {
                                        JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
                                        v857 = 7;
                                      }
                                    }
                                    goto LABEL_1885;
                                  case 6:
                                    v998 = v840;
                                    if ((unint64_t)v840 < v23)
                                    {
                                      v998 = v840;
                                      if ((_DWORD)v28 == 45)
                                      {
                                        v998 = v840 + 1;
                                        *i64 = v840 + 1;
                                      }
                                    }
                                    if ((unint64_t)v998 >= v23)
                                      goto LABEL_3332;
                                    v999 = *v998;
                                    if (v999 == 48)
                                    {
                                      v1001 = v998 + 1;
                                      *i64 = v1001;
                                    }
                                    else
                                    {
                                      if ((v999 - 49) > 8)
                                      {
LABEL_3332:
                                        v1476 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1477 = v1476;
                                        v1478 = "Invalid number";
                                        *(_QWORD *)v1476 = v11;
                                        goto LABEL_3333;
                                      }
                                      v1000 = v998 + 1;
                                      do
                                      {
                                        v1001 = v1000;
                                        *i64 = v1000;
                                        if ((unint64_t)v1000 >= v23)
                                          break;
                                        ++v1000;
                                      }
                                      while (*v1001 - 48 < 0xA);
                                    }
                                    if ((unint64_t)v1001 >= v23)
                                      goto LABEL_2515;
                                    v1002 = *v1001;
                                    if (v1002 != 46)
                                    {
                                      if (v1002 != 69 && v1002 != 101 && v1001 - v840 <= 9)
                                      {
                                        *(_BYTE *)v15 = 6;
                                        v1003 = *v840;
                                        if (v1003 == 45)
                                          v1004 = v840 + 1;
                                        else
                                          v1004 = v840;
                                        if (v1004 >= v1001)
                                        {
                                          if (v1003 != 45)
                                          {
                                            v1005 = 0;
LABEL_2164:
                                            v22.n128_f64[0] = (double)v1005;
                                            goto LABEL_2165;
                                          }
                                        }
                                        else
                                        {
                                          v1005 = 0;
                                          do
                                          {
                                            v1006 = *v1004++;
                                            v1005 = v1006 + 10 * v1005 - 48;
                                          }
                                          while (v1004 < v1001);
                                          if (v1003 != 45)
                                            goto LABEL_2164;
                                          if (v1005)
                                          {
                                            v22.n128_f64[0] = (double)-v1005;
                                            goto LABEL_2165;
                                          }
                                        }
                                        *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                                        goto LABEL_2166;
                                      }
LABEL_2515:
                                      if ((unint64_t)v1001 < v23 && (*v1001 | 0x20) == 0x65)
                                      {
                                        v1513 = v1001 + 1;
                                        *i64 = v1001 + 1;
                                        if ((unint64_t)(v1001 + 1) < v23)
                                        {
                                          v1514 = *v1513;
                                          if (v1514 == 45 || v1514 == 43)
                                          {
                                            v1513 = v1001 + 2;
                                            *(_QWORD *)v1727.n128_u64[0] = v1001 + 2;
                                          }
                                        }
                                        if ((unint64_t)v1513 >= v23 || *v1513 - 48 > 9)
                                        {
                                          v1536 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1537 = v1536;
                                          v22.n128_u64[0] = 0x5D00000002;
                                          v1538 = "Exponent symbols should be followed by an optional '+' or '-' and then"
                                                  " by at least one number";
                                          goto LABEL_3425;
                                        }
                                        v1515 = v1513 + 1;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        while (1)
                                        {
                                          v1001 = v1515;
                                          *i64 = v1515;
                                          if ((unint64_t)v1515 >= v23)
                                            break;
                                          ++v1515;
                                          v9 = v1720;
                                          v15 = v1722;
                                          v13 = (unint64_t)v1725;
                                          i64 = (_QWORD *)v1727.n128_u64[0];
                                          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          v826 = (char *)v1728.i64[0];
                                          if (*v1001 - 48 >= 0xA)
                                            goto LABEL_2517;
                                        }
                                        v9 = v1720;
                                        v15 = v1722;
                                        v13 = (unint64_t)v1725;
                                        i64 = (_QWORD *)v1727.n128_u64[0];
                                        v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v826 = (char *)v1728.i64[0];
                                      }
LABEL_2517:
                                      *(_BYTE *)v15 = 6;
                                      LODWORD(v23) = (_DWORD)v1001 - (_DWORD)v840;
                                      if (v1001 - v840 < 0)
                                        goto LABEL_1827;
                                      v1735.rlim_cur = 0;
                                      fast_float::from_chars_advanced<double,char>(v840, v1001, &v1735.rlim_cur, 0x2E00000005);
                                      v22.n128_u64[0] = v1735.rlim_cur;
LABEL_2165:
                                      *(_QWORD *)(v9 + 32) = v22.n128_u64[0];
                                      goto LABEL_2166;
                                    }
                                    *i64 = v1001 + 1;
                                    if ((unint64_t)(v1001 + 1) < v23 && v1001[1] - 48 <= 9)
                                    {
                                      v1130 = v1001 + 2;
                                      do
                                      {
                                        v1001 = v1130;
                                        *i64 = v1130;
                                        if ((unint64_t)v1130 >= v23)
                                          break;
                                        ++v1130;
                                      }
                                      while (*v1001 - 48 < 0xA);
                                      goto LABEL_2515;
                                    }
                                    v1476 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v1477 = v1476;
                                    v22.n128_u64[0] = 0x2200000002;
                                    v1478 = "Invalid digits after decimal point";
                                    *(_QWORD *)v1476 = 0x2200000002;
LABEL_3333:
                                    *(_QWORD *)(v1476 + 8) = v1478;
                                    *(_DWORD *)(v1476 + 16) = 4;
                                    v1479 = *(WTF::StringImpl **)v1709;
                                    *(_QWORD *)v1709 = v1477;
                                    if (v1479)
                                    {
                                      if (*(_DWORD *)v1479 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v1479, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                        WTF::fastFree(v1562, v1563, v1564, v1565, v1566, v1567, v1568, v1569);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1479 -= 2;
                                      }
                                      v9 = v1720;
                                      v15 = v1722;
                                      v13 = (unint64_t)v1725;
                                      i64 = (_QWORD *)v1727.n128_u64[0];
                                      v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      v826 = (char *)v1728.i64[0];
                                    }
                                    goto LABEL_2166;
                                  case 0x12:
                                  case 0x13:
                                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                                    v1220 = v1735.rlim_cur;
                                    if (!v1735.rlim_cur)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x198B19FC0);
                                    }
                                    *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                                    *(_QWORD *)(v1220 + 8) = v1220 + 20;
                                    *(_DWORD *)(v1220 + 16) = 4;
                                    *(_DWORD *)(v1220 + 36) = 656436837;
                                    v22 = *(__n128 *)"Unrecognized token '";
                                    *(_OWORD *)(v1220 + 20) = *(_OWORD *)"Unrecognized token '";
                                    *(_BYTE *)(v1220 + 40) = *v840;
                                    *(_BYTE *)(v1220 + 41) = 39;
                                    v1221 = *(WTF::StringImpl **)v1709;
                                    *(_QWORD *)v1709 = v1220;
                                    if (v1221)
                                    {
                                      if (*(_DWORD *)v1221 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v1221, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                                        WTF::fastFree(v1304, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1221 -= 2;
                                      }
                                    }
                                    goto LABEL_2166;
                                  default:
                                    *(_BYTE *)v15 = v842;
                                    *i64 = v840 + 1;
                                    goto LABEL_1883;
                                }
                              }
                            }
                            if ((unint64_t)a3 >= v23)
                            {
                              v832 = (int8x16_t *)a3;
                              goto LABEL_1950;
                            }
                            v832 = (int8x16_t *)a3;
                            while (1)
                            {
                              v962 = v832->u8[0];
                              v963 = v962 < 0x20 || v962 == 92;
                              v964 = v963 || v962 == (_DWORD)v28;
                              v965 = v964;
                              if (v962 != 9 && v965)
                                goto LABEL_1950;
                              v832 = (int8x16_t *)((char *)v832 + 1);
                              *i64 = v832;
                              if (v832 == (int8x16_t *)&v827[v23 - (_QWORD)a3 + 1])
                              {
                                v832 = (int8x16_t *)&v827[v23 - (_QWORD)a3 + 1];
                                goto LABEL_1950;
                              }
                            }
                          case 5:
                            if ((_DWORD)v28 == 110)
                            {
                              if ((uint64_t)(v23 - (_QWORD)v827) >= 4 && *(_WORD *)(v827 + 1) == 27765 && v827[3] == 108)
                              {
                                *i64 = v827 + 4;
                                *(_BYTE *)v15 = 13;
                                goto LABEL_1954;
                              }
                            }
                            else if ((_DWORD)v28 == 102)
                            {
                              if ((uint64_t)(v23 - (_QWORD)v827) >= 5
                                && *(_WORD *)(v827 + 1) == 27745
                                && *(_WORD *)(v827 + 3) == 25971)
                              {
                                *i64 = v827 + 5;
                                *(_BYTE *)v15 = 12;
                                goto LABEL_1954;
                              }
                            }
                            else if ((_DWORD)v28 == 116
                                   && (uint64_t)(v23 - (_QWORD)v827) >= 4
                                   && *(_WORD *)(v827 + 1) == 30066
                                   && v827[3] == 101)
                            {
                              *i64 = v827 + 4;
                              *(_BYTE *)v15 = 11;
                              goto LABEL_1954;
                            }
                            v1269 = (int)v827;
                            *(_QWORD *)(v9 + 32) = v827;
                            v1270 = (int)v827;
                            if ((unint64_t)v827 >= v23)
                              goto LABEL_2997;
                            v1271 = v23 - (_QWORD)v827;
                            v1272 = (_DWORD)v827 + v1271;
                            while (1)
                            {
                              v1273 = *v827;
                              if (v1273 != 36)
                              {
                                v1274 = v1273 != 95 && (v1273 - 48) >= 0xA;
                                if (v1274 && (v1273 | 0x20u) - 97 > 0x19)
                                  break;
                              }
                              *i64 = ++v827;
                              if (!--v1271)
                              {
                                LODWORD(v827) = v1272;
                                break;
                              }
                            }
                            v1270 = (int)v827;
LABEL_2997:
                            *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | (v1270 - v1269) & 0x7FFFFFFF;
                            v905 = 5;
                            goto LABEL_1953;
                          case 6:
                            v951 = v827;
                            if ((unint64_t)v827 < v23)
                            {
                              v951 = v827;
                              if ((_DWORD)v28 == 45)
                              {
                                v951 = v827 + 1;
                                *i64 = v827 + 1;
                              }
                            }
                            if ((unint64_t)v951 >= v23)
                              goto LABEL_3314;
                            v952 = *v951;
                            if (v952 == 48)
                            {
                              v954 = v951 + 1;
                              *i64 = v954;
                            }
                            else
                            {
                              if ((v952 - 49) > 8)
                              {
LABEL_3314:
                                v1455 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1463 = v1455;
                                v1464 = "Invalid number";
                                *(_QWORD *)v1455 = v11;
                                goto LABEL_3315;
                              }
                              v953 = v951 + 1;
                              do
                              {
                                v954 = v953;
                                *i64 = v953;
                                if ((unint64_t)v953 >= v23)
                                  break;
                                ++v953;
                              }
                              while (*v954 - 48 < 0xA);
                            }
                            if ((unint64_t)v954 >= v23)
                              goto LABEL_2465;
                            v955 = *v954;
                            if (v955 != 46)
                            {
                              if (v955 != 69 && v955 != 101 && v954 - v827 <= 9)
                              {
                                *(_BYTE *)v15 = 6;
                                v956 = *v827;
                                if (v956 == 45)
                                  v957 = v827 + 1;
                                else
                                  v957 = v827;
                                if (v957 >= v954)
                                {
                                  if (v956 != 45)
                                  {
                                    v958 = 0;
LABEL_2059:
                                    v960 = (double)v958;
LABEL_2060:
                                    *(double *)(v9 + 32) = v960;
                                    goto LABEL_1954;
                                  }
                                }
                                else
                                {
                                  v958 = 0;
                                  do
                                  {
                                    v959 = *v957++;
                                    v958 = v959 + 10 * v958 - 48;
                                  }
                                  while (v957 < v954);
                                  if (v956 != 45)
                                    goto LABEL_2059;
                                  if (v958)
                                  {
                                    v960 = (double)-v958;
                                    goto LABEL_2060;
                                  }
                                }
                                *(_QWORD *)(v9 + 32) = 0x8000000000000000;
LABEL_1954:
                                v897 = WTF::fastCompactMalloc((WTF *)0x20);
                                *(_QWORD *)v897 = v10;
                                v898 = "Expected ':' before value in object property definition";
                                goto LABEL_1955;
                              }
LABEL_2465:
                              if ((unint64_t)v954 >= v23 || (*v954 | 0x20) != 0x65)
                                goto LABEL_2467;
                              v1466 = v954 + 1;
                              *i64 = v954 + 1;
                              if ((unint64_t)(v954 + 1) < v23)
                              {
                                v1467 = *v1466;
                                if (v1467 == 45 || v1467 == 43)
                                {
                                  v1466 = v954 + 2;
                                  *(_QWORD *)v1727.n128_u64[0] = v954 + 2;
                                }
                              }
                              if ((unint64_t)v1466 < v23 && *v1466 - 48 <= 9)
                              {
                                v1468 = v1466 + 1;
                                i64 = (_QWORD *)v1727.n128_u64[0];
                                while (1)
                                {
                                  v954 = v1468;
                                  *i64 = v1468;
                                  if ((unint64_t)v1468 >= v23)
                                    break;
                                  ++v1468;
                                  v9 = v1720;
                                  v15 = v1722;
                                  v13 = (unint64_t)v1725;
                                  i64 = (_QWORD *)v1727.n128_u64[0];
                                  if (*v954 - 48 >= 0xA)
                                    goto LABEL_2467;
                                }
                                v9 = v1720;
                                v15 = v1722;
                                v13 = (unint64_t)v1725;
                                i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_2467:
                                *(_BYTE *)v15 = 6;
                                LODWORD(v23) = (_DWORD)v954 - (_DWORD)v827;
                                if (v954 - v827 >= 0)
                                {
                                  v1735.rlim_cur = 0;
                                  fast_float::from_chars_advanced<double,char>(v827, v954, &v1735.rlim_cur, 0x2E00000005);
                                  v960 = *(double *)&v1735.rlim_cur;
                                  goto LABEL_2060;
                                }
                                goto LABEL_1827;
                              }
                              v1483 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1484 = v1483;
                              v1485 = 0x5D00000002;
                              v1486 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                              goto LABEL_3348;
                            }
                            *i64 = v954 + 1;
                            if ((unint64_t)(v954 + 1) < v23 && v954[1] - 48 <= 9)
                            {
                              v1116 = v954 + 2;
                              do
                              {
                                v954 = v1116;
                                *i64 = v1116;
                                if ((unint64_t)v1116 >= v23)
                                  break;
                                ++v1116;
                              }
                              while (*v954 - 48 < 0xA);
                              goto LABEL_2465;
                            }
                            v1455 = WTF::fastCompactMalloc((WTF *)0x20);
                            v1463 = v1455;
                            v1464 = "Invalid digits after decimal point";
                            *(_QWORD *)v1455 = 0x2200000002;
LABEL_3315:
                            *(_QWORD *)(v1455 + 8) = v1464;
                            *(_DWORD *)(v1455 + 16) = 4;
                            v1465 = *(WTF::StringImpl **)v1709;
                            *(_QWORD *)v1709 = v1463;
                            if (!v1465)
                              goto LABEL_1954;
                            goto LABEL_3316;
                          case 0x12:
                          case 0x13:
                            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                            v1207 = v1735.rlim_cur;
                            if (!v1735.rlim_cur)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198B19FB8);
                            }
                            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                            *(_QWORD *)(v1207 + 8) = v1207 + 20;
                            *(_DWORD *)(v1207 + 16) = 4;
                            *(_DWORD *)(v1207 + 36) = 656436837;
                            *(_OWORD *)(v1207 + 20) = *(_OWORD *)"Unrecognized token '";
                            *(_BYTE *)(v1207 + 40) = *v827;
                            *(_BYTE *)(v1207 + 41) = 39;
                            v1208 = *(WTF::StringImpl **)v1709;
                            *(_QWORD *)v1709 = v1207;
                            if (v1208)
                            {
                              if (*(_DWORD *)v1208 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1208, v1200, v1201, v1202, v1203, v1204, v1205, v1206);
                                WTF::fastFree(v1276, v1277, v1278, v1279, v1280, v1281, v1282, v1283);
                              }
                              else
                              {
                                *(_DWORD *)v1208 -= 2;
                              }
                            }
                            goto LABEL_1954;
                          default:
                            *(_BYTE *)v15 = v829;
                            *i64 = v827 + 1;
                            goto LABEL_1860;
                        }
                      }
                      if (v818 >= 0x1C)
                      {
                        WTF::AtomStringImpl::add(*(_QWORD *)(v9 + 32), v14 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
                        rlim_cur = v1735.rlim_cur;
                        goto LABEL_1843;
                      }
                      v821 = ((((_BYTE)v820 << 6) ^ v820)
                                             + v819->i8[v818 - 1]
                                             + ((((((_DWORD)v820 << 6) | (v819->u8[v818 - 1] << 14)) ^ v820)
                                               + v819->u8[v818 - 1]) >> 6));
                      v822 = (int16x8_t *)(v46 + (v821 << 6));
                      if ((_DWORD)v818 != v822[3].u16[3])
                      {
LABEL_1978:
                        v914 = 0;
                        v1732 = *(unsigned __int8 **)(v9 + 32);
                        v1733 = v14 & 0x7FFFFFFF;
                        v915 = -1640531527;
                        do
                        {
                          v916 = ((v915 + v819->u8[v914]) << 16) ^ (v819->u8[v914 + 1] << 11) ^ (v915 + v819->u8[v914]);
                          v915 = v916 + (v916 >> 11);
                          v917 = v914 + 3;
                          v914 += 2;
                        }
                        while (v917 < v818);
                        if ((v14 & 1) != 0)
                        {
                          v918 = (v915 + v819->u8[v818 - 1]) ^ ((v915 + v819->u8[v818 - 1]) << 11);
                          v915 = v918 + (v918 >> 17);
                        }
                        v919 = (v915 ^ (8 * v915)) + ((v915 ^ (8 * v915)) >> 5);
                        v920 = (v919 ^ (4 * v919)) + ((v919 ^ (4 * v919)) >> 15);
                        v921 = (v920 ^ (v920 << 10)) & 0xFFFFFF;
                        if (!v921)
                          v921 = 0x800000;
                        v1734 = v921;
                        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                        {
LABEL_1987:
                          v923 = *(_QWORD *)(v1714 + 736);
                          if (v923)
                            goto LABEL_1988;
                          v984 = atomic_load(&WTF::initialize(void)::onceKey);
                          if (v984 != -1)
                          {
                            v1735.rlim_cur = (rlim_t)&v1729;
                            v1730 = &v1735;
                            std::__call_once(&WTF::initialize(void)::onceKey, &v1730, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
                          }
                          v985 = WTF::fastMalloc((WTF *)0x68);
                          v923 = v985;
                          *(_OWORD *)v985 = 0u;
                          *(_OWORD *)(v985 + 16) = 0u;
                          *(_OWORD *)(v985 + 32) = 0u;
                          *(_OWORD *)(v985 + 48) = 0u;
                          *(_OWORD *)(v985 + 64) = 0u;
                          *(_OWORD *)(v985 + 80) = 0u;
                          *(_QWORD *)(v985 + 96) = 0;
                          *(_DWORD *)v985 = 1;
                          *(_OWORD *)(v985 + 8) = 0u;
                          v986 = (unint64_t *)(v985 + 8);
                          *(_OWORD *)(v985 + 24) = 0u;
                          do
                          {
                            v987 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
                            v988 = v987 + 1;
                          }
                          while (__stlxr(v988, (unsigned int *)&WTF::ThreadLike::s_uid));
                          *(_DWORD *)(v985 + 48) = v988;
                          *(_QWORD *)(v985 + 52) = 0;
                          *(_QWORD *)(v985 + 68) = 0;
                          *(_QWORD *)(v985 + 60) = 0;
                          *(_DWORD *)(v985 + 76) = 0;
                          *(_QWORD *)(v985 + 88) = 0;
                          *(_QWORD *)(v985 + 96) = 0;
                          v989 = pthread_self();
                          if (__ldaxr(v986))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1uLL, v986))
                          {
LABEL_2129:
                            *(_QWORD *)(v923 + 40) = v989;
                            *(_DWORD *)(v923 + 52) = pthread_mach_thread_np(v989);
                            v991 = __ldxr(v986);
                            if (v991 == 1)
                            {
                              v992 = __stlxr(0, v986);
                              v9 = v1720;
                              if (!v992)
                                goto LABEL_2296;
                            }
                            else
                            {
                              __clrex();
                              v9 = v1720;
                            }
                            WTF::WordLock::unlockSlow((WTF::WordLock *)v986);
LABEL_2296:
                            v1054 = *(char **)(v923 + 16);
                            if (!v1054)
                            {
                              v1065 = pthread_main_np();
                              v1066 = pthread_self();
                              v1054 = (char *)pthread_get_stackaddr_np(v1066);
                              if (v1065)
                              {
                                getrlimit(3, &v1735);
                                if (v1735.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                                  v1067 = 0x800000;
                                else
                                  v1067 = v1735.rlim_cur;
                              }
                              else
                              {
                                v1067 = pthread_get_stacksize_np(v1066);
                              }
                              *(_QWORD *)(v923 + 16) = v1054;
                              *(_QWORD *)(v923 + 24) = &v1054[-v1067];
                              v9 = v1720;
                              v15 = v1722;
                            }
                            *(_QWORD *)(v923 + 80) = v1054;
                            *(_QWORD *)(v923 + 56) = v923 + 64;
                            v1055 = pthread_self();
                            if (pthread_equal(v1055, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
                            {
                              v1056 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                              if (v1056 != -1)
                              {
                                v1735.rlim_cur = (rlim_t)&v1729;
                                v1730 = &v1735;
                                std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v1730, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                              }
                              *(_QWORD *)(v923 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
                            }
                            *(_QWORD *)(v1714 + 736) = v923;
                            pthread_key_init_np();
LABEL_1988:
                            WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v923 + 56), (uint64_t)&v1732, v28, a5, a6, a7, a8, (uint64_t)&v1735);
                            v925 = *(unsigned int *)v1735.rlim_cur;
                            rlim_cur = 16 * v925;
                            if (v1736)
                            {
                              v926 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                              if (v926 == 1)
                                goto LABEL_1990;
                            }
                            else
                            {
                              *(_DWORD *)rlim_cur += 2;
                              v993 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                              if (v993 == 1)
                              {
LABEL_1990:
                                if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                                {
LABEL_2135:
                                  if ((_DWORD)v925)
                                    *(_DWORD *)rlim_cur += 2;
                                  v994 = v1726 + (v821 << 6);
                                  v995 = *(_QWORD *)(v994 + 56);
                                  *(_QWORD *)(v994 + 56) = rlim_cur;
                                  v13 = (unint64_t)v1725;
                                  if (!v995)
                                    goto LABEL_2140;
                                  if (*(_DWORD *)v995 != 2)
                                  {
                                    *(_DWORD *)v995 -= 2;
                                    goto LABEL_2140;
                                  }
                                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v995, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v924, a5, a6, a7, a8);
                                  v1063 = *(_QWORD *)(v1714 + 752);
                                  if (v1063)
                                  {
                                    if (!(v995 >> 43)
                                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                           + ((v995 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v995)) & 1) != 0)
                                    {
                                      goto LABEL_2318;
                                    }
                                    if (v995 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v995 >> 24)
                                    {
                                      v1062 = 0;
                                    }
                                    else
                                    {
                                      v1062 = (*(_DWORD *)((char *)off_1ECF425F8
                                                         + ((((v995 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                         + 24) >> (2 * ((BYTE3(v995) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                      if ((_DWORD)v1062 == 1)
                                      {
LABEL_2318:
                                        v1064 = *(unsigned int *)(v1063 + 8000);
                                        if (v1064 >= 0x3E7)
                                        {
                                          pas_thread_local_cache_append_deallocation_slow(v1063, v995, (os_unfair_lock_s *)5, v1062, a5, a6, a7, a8);
                                        }
                                        else
                                        {
                                          *(_QWORD *)(v1063 + 8 * v1064) = v995 | 0x5000000000000;
                                          *(_DWORD *)(v1063 + 8000) = v1064 + 1;
                                        }
                                        goto LABEL_2140;
                                      }
                                    }
                                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1063, v995, 1, v1062, a5, a6, a7, a8);
                                  }
                                  else
                                  {
                                    pas_try_deallocate_slow_no_cache(v995, (uint64_t)&bmalloc_heap_config, 1);
                                  }
LABEL_2140:
                                  v822[3].i16[3] = (__int16)v14;
                                  v996 = 2 * v818;
                                  do
                                  {
                                    v997 = v819->u8[0];
                                    v819 = (uint8x8_t *)((char *)v819 + 1);
                                    v822->i16[0] = v997;
                                    v822 = (int16x8_t *)((char *)v822 + 2);
                                    v996 -= 2;
                                  }
                                  while (v996);
                                  goto LABEL_2142;
                                }
LABEL_2134:
                                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, (uint64_t)a3, v924, a5, a6, a7, a8);
                                goto LABEL_2135;
                              }
                            }
                            __clrex();
                            goto LABEL_2134;
                          }
                          WTF::WordLock::lockSlow((WTF::WordLock *)v986);
                          goto LABEL_2129;
                        }
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                        goto LABEL_1987;
                      }
                      if (v818 >= 8)
                      {
                        v823 = (uint16x8_t)vceqq_s16(*v822, (int16x8_t)vmovl_u8(*v819));
                        v823.i16[0] = vminvq_u16(v823);
                        if (v823.i32[0])
                        {
                          v824 = v14 & 7;
                          v825 = (int16x8_t *)(v46 + ((2 * v824) | (v821 << 6)));
                          while (1)
                          {
                            v22 = (__n128)vceqq_s16(*v825, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v819 + v824)));
                            v22.n128_u16[0] = vminvq_u16((uint16x8_t)v22);
                            if (!v22.n128_u32[0])
                              break;
                            v824 += 8;
                            ++v825;
                            if (v824 >= v818)
                              goto LABEL_1841;
                          }
                        }
                        goto LABEL_1978;
                      }
                      if (v818 < 4)
                      {
                        if (((v819->u16[0] | (v819->u16[0] << 8)) & 0xFF00FF) != v822->i32[0]
                          || ((*(unsigned __int16 *)((char *)v819->u16 + (v14 & 1)) | (*(unsigned __int16 *)((char *)v819->u16 + (v14 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v822->i32 + 2 * (v14 & 1)))
                        {
                          goto LABEL_1978;
                        }
                      }
                      else
                      {
                        v853 = (v819->u32[0] | ((unint64_t)v819->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                        v854 = (*(unsigned int *)((char *)v819->u32 + (v14 & 3)) | ((unint64_t)*(unsigned int *)((char *)v819->u32 + (v14 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                        v855 = (v854 | (v854 << 8)) & 0xFF00FF00FF00FFLL;
                        if (((v853 | (v853 << 8)) & 0xFF00FF00FF00FFLL) != v822->i64[0]
                          || v855 != *(uint64_t *)((char *)v822->i64 + 2 * (v14 & 3)))
                        {
                          goto LABEL_1978;
                        }
                      }
LABEL_1841:
                      rlim_cur = *(_QWORD *)(v46 + (v821 << 6) + 56);
                      *(_DWORD *)rlim_cur += 2;
                      v13 = (unint64_t)v1725;
LABEL_1842:
                      i64 = (_QWORD *)v1727.n128_u64[0];
LABEL_1843:
                      v826 = (char *)v1728.i64[0];
                      goto LABEL_1844;
                    }
LABEL_3285:
                    rlim_cur = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                    goto LABEL_1843;
                  }
                  v1437 = *(_DWORD *)(v9 + 28);
                  v1438 = v1437 & 0x7FFFFFFF;
                  if ((v1437 & 0x7FFFFFFF) != 0)
                  {
                    v1439 = *(int16x8_t **)(v1720 + 32);
                    v1440 = v1439->u16[0];
                    if ((_DWORD)v1438 == 1)
                    {
                      if (v1440 <= 0xFF)
                      {
                        JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v1726 - 22816), v1439->i16[0], v28, a5, a6, a7, a8, &v1735);
                        rlim_cur = v1735.rlim_cur;
                        goto LABEL_3343;
                      }
                    }
                    else if (v1438 >= 0x1C)
                    {
                      WTF::AtomStringImpl::add(*(_QWORD *)(v1720 + 32), v1437 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
                      rlim_cur = v1735.rlim_cur;
                      goto LABEL_3343;
                    }
                    v1441 = (v1440 << 6) ^ (v1439->u16[v1438 - 1] << 14) ^ v1440;
                    v1442 = (v1441 + (v1441 >> 14) + ((v1441 + (v1441 >> 14)) >> 6));
                    v1443 = (unsigned __int16 *)(v1726 + (v1442 << 6));
                    v14 = (int16x8_t *)(v1443 + 27);
                    if ((_DWORD)v1438 != v1443[27])
                      goto LABEL_3709;
                    if ((_DWORD)v1438 != 1)
                    {
                      switch(31 - __clz(v1438 - 1))
                      {
                        case 0u:
                          v1480 = *(_DWORD *)v1443;
                          v1481 = v1439->i32[0];
                          goto LABEL_3340;
                        case 1u:
                          if (*(_DWORD *)v1443 != v1439->i32[0])
                            goto LABEL_3709;
                          v1480 = *(_DWORD *)&v1443[v1438 - 2];
                          v1481 = *(__int32 *)((char *)&v1439->i32[-1] + 2 * v1438);
LABEL_3340:
                          if (v1480 == v1481)
                            goto LABEL_3341;
                          goto LABEL_3709;
                        case 2u:
                          if (*(_QWORD *)v1443 != v1439->i64[0]
                            || *(_QWORD *)&v1443[v1438 - 4] != *(uint64_t *)((char *)&v1439->i64[-1] + 2 * v1438))
                          {
                            goto LABEL_3709;
                          }
                          goto LABEL_3341;
                        case 3u:
                          v22 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v1443[v1438 - 8], *(int16x8_t *)((char *)v1439 + 2 * v1438 - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v1443, *v1439));
                          v22.n128_u16[0] = vminvq_u16((uint16x8_t)v22);
                          if (!v22.n128_u32[0])
                            goto LABEL_3709;
                          goto LABEL_3341;
                        default:
                          v22 = (__n128)vceqq_s16(*(int16x8_t *)v1443, *v1439);
                          v22.n128_u16[0] = vminvq_u16((uint16x8_t)v22);
                          if (!v22.n128_u32[0])
                            goto LABEL_3709;
                          v1687 = v1437 & 7;
                          if ((*(_DWORD *)(v9 + 28) & 7u) >= v1438)
                            goto LABEL_3341;
                          v1688 = (int16x8_t *)((char *)v1439 + 2 * v1687);
                          v1689 = (int16x8_t *)(v1726 + ((2 * v1687) | (v1442 << 6)));
                          break;
                      }
                      while (1)
                      {
                        v22 = (__n128)vceqq_s16(*v1689, *v1688);
                        v22.n128_u16[0] = vminvq_u16((uint16x8_t)v22);
                        if (!v22.n128_u32[0])
                          break;
                        v1687 += 8;
                        ++v1688;
                        ++v1689;
                        if (v1687 >= v1438)
                          goto LABEL_3341;
                      }
LABEL_3709:
                      WTF::AtomStringImpl::add(*(_QWORD *)(v1720 + 32), v1437 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
                      rlim_cur = v1735.rlim_cur;
                      JSC::Identifier::operator=((WTF::StringImpl **)v1443 + 7, (WTF::AtomStringImpl *)v1735.rlim_cur, v1690, v1691, v1692, v1693, v1694, v1695);
                      v14->i16[0] = v1437;
                      if (v1438 != 1)
                      {
                        if ((v1437 & 0x7FFFFFFF) != 0)
                          memcpy(v1443, v1439, 2 * v1438);
                        goto LABEL_3343;
                      }
                      goto LABEL_3742;
                    }
                    if (*v1443 != v1440)
                    {
                      WTF::AtomStringImpl::add(*(_QWORD *)(v1720 + 32), v1437 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
                      v1700 = (WTF::StringImpl **)(v1726 + (v1442 << 6) + 56);
                      rlim_cur = v1735.rlim_cur;
                      JSC::Identifier::operator=(v1700, (WTF::AtomStringImpl *)v1735.rlim_cur, v1701, v1702, v1703, v1704, v1705, v1706);
                      v14->i16[0] = v1437;
LABEL_3742:
                      *v1443 = v1439->i16[0];
                      goto LABEL_3343;
                    }
LABEL_3341:
                    rlim_cur = *(_QWORD *)(v1726 + (v1442 << 6) + 56);
                  }
                  else
                  {
                    rlim_cur = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                  }
                  *(_DWORD *)rlim_cur += 2;
LABEL_3343:
                  v9 = v1720;
                  v15 = v1722;
                  v13 = (unint64_t)v1725;
LABEL_2142:
                  i64 = (_QWORD *)v1727.n128_u64[0];
                  v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                  goto LABEL_1843;
                }
                break;
              }
              v1241 = *(_DWORD *)(v9 + 28);
              v1242 = v1241 & 0x7FFFFFFF;
              if ((v1241 & 0x7FFFFFFF) == 0)
                goto LABEL_3285;
              v1243 = *(uint8x8_t **)(v9 + 32);
              a2 = v1243->u8[0];
              if ((_DWORD)v1242 == 1)
              {
                JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v46 - 22816), a2, v28, a5, a6, a7, a8, &v1732);
                rlim_cur = (rlim_t)v1732;
                goto LABEL_1843;
              }
              if (v1242 >= 0x1C)
              {
                WTF::AtomStringImpl::add(*(_QWORD *)(v9 + 32), v1241 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
                rlim_cur = v1735.rlim_cur;
                goto LABEL_1842;
              }
              v1244 = ((((_DWORD)a2 << 6) | (v1243->u8[v1242 - 1] << 14)) ^ a2) + v1243->u8[v1242 - 1];
              v1245 = (v1244 + (v1244 >> 6));
              v14 = (int16x8_t *)(v46 + (v1245 << 6));
              if ((_DWORD)v1242 == v14[3].u16[3])
              {
                if (v1242 >= 8)
                {
                  v1246 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v1243));
                  v1246.i16[0] = vminvq_u16(v1246);
                  if (v1246.i32[0])
                  {
                    v1247 = v1241 & 7;
                    v1248 = (int16x8_t *)(v46 + ((2 * v1247) | (v1245 << 6)));
                    while (1)
                    {
                      v22 = (__n128)vceqq_s16(*v1248, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v1243 + v1247)));
                      v22.n128_u16[0] = vminvq_u16((uint16x8_t)v22);
                      if (!v22.n128_u32[0])
                        break;
                      v1247 += 8;
                      ++v1248;
                      if (v1247 >= v1242)
                        goto LABEL_2921;
                    }
                  }
                  goto LABEL_3095;
                }
                if (v1242 < 4)
                {
                  if (((v1243->u16[0] | (v1243->u16[0] << 8)) & 0xFF00FF) != v14->i32[0]
                    || ((*(unsigned __int16 *)((char *)v1243->u16 + (v1241 & 1)) | (*(unsigned __int16 *)((char *)v1243->u16 + (v1241 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v14->i32 + 2 * (v1241 & 1)))
                  {
                    goto LABEL_3095;
                  }
                }
                else
                {
                  v1284 = (v1243->u32[0] | ((unint64_t)v1243->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                  v1285 = (*(unsigned int *)((char *)v1243->u32 + (v1241 & 3)) | ((unint64_t)*(unsigned int *)((char *)v1243->u32 + (v1241 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                  v1286 = (v1285 | (v1285 << 8)) & 0xFF00FF00FF00FFLL;
                  if (((v1284 | (v1284 << 8)) & 0xFF00FF00FF00FFLL) != v14->i64[0]
                    || v1286 != *(uint64_t *)((char *)v14->i64 + 2 * (v1241 & 3)))
                  {
                    goto LABEL_3095;
                  }
                }
LABEL_2921:
                rlim_cur = *(_QWORD *)(v46 + (v1245 << 6) + 56);
                *(_DWORD *)rlim_cur += 2;
                goto LABEL_1842;
              }
LABEL_3095:
              WTF::AtomStringImpl::add(*(_QWORD *)(v9 + 32), v1241 & 0x7FFFFFFF, v28, a5, a6, a7, a8, &v1735);
              rlim_cur = v1735.rlim_cur;
              if (v1735.rlim_cur)
                *(_DWORD *)v1735.rlim_cur += 2;
              v1333 = (WTF::StringImpl *)v14[3].i64[1];
              v14[3].i64[1] = rlim_cur;
              if (v1333)
              {
                if (*(_DWORD *)v1333 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1333, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v1332, a5, a6, a7, a8);
                  WTF::fastFree(v1404, v1405, v1406, v1407, v1408, v1409, v1410, v1411);
                }
                else
                {
                  *(_DWORD *)v1333 -= 2;
                }
              }
              v14[3].i16[3] = v1241;
              v1334 = 2 * v1242;
              do
              {
                v1335 = v1243->u8[0];
                v1243 = (uint8x8_t *)((char *)v1243 + 1);
                v14->i16[0] = v1335;
                v14 = (int16x8_t *)((char *)v14 + 2);
                v1334 -= 2;
              }
              while (v1334);
              goto LABEL_1842;
            }
            if (v29 == 3)
            {
              rlim_cur = *(_QWORD *)(v9 + 48);
              v23 = *(_QWORD *)(v9 + 56);
              if (rlim_cur < v23)
              {
                v306 = v23 - rlim_cur;
                while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
                {
                  *i64 = ++rlim_cur;
                  if (!--v306)
                  {
                    rlim_cur = v23;
                    break;
                  }
                }
              }
              if (rlim_cur == v23)
              {
                *(_BYTE *)v15 = 14;
                return v1724;
              }
              *(_BYTE *)v15 = 18;
              v28 = *(unsigned __int8 *)rlim_cur;
              v307 = JSC::tokenTypesOfLatin1Characters[v28];
              if (v307 <= 4)
              {
                if (v307 == 4)
                {
                  v308 = *(unsigned __int8 *)(v9 + 40);
                  if ((_DWORD)v28 != 39)
                  {
                    a3 = (unsigned __int8 *)(rlim_cur + 1);
                    *i64 = rlim_cur + 1;
                    if (!v308)
                    {
                      v309 = v23 - (_QWORD)a3;
                      if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                        goto LABEL_1827;
                      v310 = (int8x16_t *)(v309 + rlim_cur + 1);
                      if (v309 >= 0x10)
                      {
                        v311 = rlim_cur + 16;
                        v312.i64[0] = 0x2222222222222222;
                        v312.i64[1] = 0x2222222222222222;
                        v313.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                        v313.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                        v314.i64[0] = 0x2020202020202020;
                        v314.i64[1] = 0x2020202020202020;
                        while (1)
                        {
                          v315 = *(int8x16_t *)(v311 - 15);
                          v316 = vceqq_s8(v315, v312);
                          v317 = vorrq_s8(vorrq_s8(vceqq_s8(v315, v313), (int8x16_t)vcgtq_u8(v314, (uint8x16_t)v315)), v316);
                          v316.i8[0] = vmaxvq_u8((uint8x16_t)v317);
                          if (v316.i32[0])
                            break;
                          v311 += 16;
                          if (v311 >= (unint64_t)v310)
                          {
                            if (v311 - 15 >= (unint64_t)v310)
                              goto LABEL_1273;
                            v318 = (unsigned __int8 *)&v310[-1];
                            v319 = v310[-1];
                            v320.i64[0] = 0x2222222222222222;
                            v320.i64[1] = 0x2222222222222222;
                            v321 = vceqq_s8(v319, v320);
                            v322.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                            v322.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                            v323.i64[0] = 0x2020202020202020;
                            v323.i64[1] = 0x2020202020202020;
                            v317 = vorrq_s8(vorrq_s8(vceqq_s8(v319, v322), (int8x16_t)vcgtq_u8(v323, (uint8x16_t)v319)), v321);
                            v321.i8[0] = vmaxvq_u8((uint8x16_t)v317);
                            v9 = v1720;
                            v15 = v1722;
                            i64 = (_QWORD *)v1727.n128_u64[0];
                            if (!v321.i32[0])
                            {
LABEL_694:
                              *i64 = v310;
                              goto LABEL_695;
                            }
LABEL_693:
                            v358 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v317);
                            v358.i8[0] = vminvq_u8(v358);
                            v310 = (int8x16_t *)&v318[v358.u32[0]];
                            goto LABEL_694;
                          }
                        }
                        v318 = (unsigned __int8 *)(v311 - 15);
                        goto LABEL_693;
                      }
                      if ((unsigned __int8 *)v23 != a3)
                      {
                        v580 = (int8x16_t *)(rlim_cur + 1);
                        while (JSC::safeStringLatin1CharactersInStrictJSON[v580->u8[0]])
                        {
                          v580 = (int8x16_t *)((char *)v580 + 1);
                          if (!--v309)
                            goto LABEL_1273;
                        }
                        v310 = v580;
                      }
LABEL_1273:
                      v9 = v1720;
                      v15 = v1722;
                      i64 = (_QWORD *)v1727.n128_u64[0];
                      goto LABEL_694;
                    }
                    goto LABEL_1738;
                  }
                  if (*(_BYTE *)(v9 + 40))
                  {
                    a3 = (unsigned __int8 *)(rlim_cur + 1);
                    i64 = (_QWORD *)v1727.n128_u64[0];
                    *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 1;
                    v9 = v1720;
                    v15 = v1722;
LABEL_1738:
                    if ((unint64_t)a3 >= v23)
                    {
                      v310 = (int8x16_t *)a3;
                    }
                    else
                    {
                      v310 = (int8x16_t *)a3;
                      while (1)
                      {
                        v801 = v310->u8[0];
                        v802 = v801 < 0x20 || v801 == 92;
                        v803 = v802 || v801 == (_DWORD)v28;
                        v804 = v803;
                        if (v801 != 9 && v804)
                          break;
                        v310 = (int8x16_t *)((char *)v310 + 1);
                        *i64 = v310;
                        if (v310 == (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1))
                        {
                          v310 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
                          break;
                        }
                      }
                    }
LABEL_695:
                    if ((unint64_t)v310 < v23 && v310->u8[0] == (_DWORD)v28)
                    {
                      *(_BYTE *)(v9 + 25) |= 1u;
                      *(_QWORD *)(v9 + 32) = a3;
                      *(_QWORD *)(v9 + 48) = (char *)v310->i64 + 1;
                      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v9 + 28) & 0x80000000 | ((_DWORD)v310 - (_DWORD)a3) & 0x7FFFFFFF;
                      *(_BYTE *)(v9 + 24) = 4;
                    }
                    else
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v15, (size_t)a3, v28, a5, a6, a7, a8);
                    }
                    return v1724;
                  }
                  v783 = WTF::fastCompactMalloc((WTF *)0x20);
                  v23 = v783;
                  v784 = 0x2900000002;
                  v785 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_1674;
                }
LABEL_669:
                *(_BYTE *)v15 = v307;
                *i64 = rlim_cur + 1;
                return v1724;
              }
              if (v307 != 6)
              {
                if (v307 != 5)
                {
                  if (v307 - 18 < 2)
                  {
                    WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
                    v23 = v1735.rlim_cur;
                    if (!v1735.rlim_cur)
                    {
                      __break(0xC471u);
                      goto LABEL_1827;
                    }
                    *(_QWORD *)v1735.rlim_cur = 0x1600000002;
                    *(_QWORD *)(v23 + 8) = v23 + 20;
                    *(_DWORD *)(v23 + 16) = 4;
                    *(_DWORD *)(v23 + 36) = 656436837;
                    *(_OWORD *)(v23 + 20) = *(_OWORD *)"Unrecognized token '";
                    *(_BYTE *)(v23 + 40) = *(_BYTE *)rlim_cur;
                    *(_BYTE *)(v23 + 41) = 39;
                    goto LABEL_1329;
                  }
                  goto LABEL_669;
                }
                if ((_DWORD)v28 == 110)
                {
                  if ((uint64_t)(v23 - rlim_cur) >= 4
                    && *(_WORD *)(rlim_cur + 1) == 27765
                    && *(_BYTE *)(rlim_cur + 3) == 108)
                  {
                    *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 4;
                    v496 = 13;
LABEL_1126:
                    *(_BYTE *)v1722 = v496;
                    return v1724;
                  }
                }
                else if ((_DWORD)v28 == 102)
                {
                  if ((uint64_t)(v23 - rlim_cur) >= 5
                    && *(_WORD *)(rlim_cur + 1) == 27745
                    && *(_WORD *)(rlim_cur + 3) == 25971)
                  {
                    *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 5;
                    v496 = 12;
                    goto LABEL_1126;
                  }
                }
                else if ((_DWORD)v28 == 116
                       && (uint64_t)(v23 - rlim_cur) >= 4
                       && *(_WORD *)(rlim_cur + 1) == 30066
                       && *(_BYTE *)(rlim_cur + 3) == 101)
                {
                  *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 4;
                  v496 = 11;
                  goto LABEL_1126;
                }
                v612 = rlim_cur;
                *(_QWORD *)(v1720 + 32) = rlim_cur;
                v613 = rlim_cur;
                if (rlim_cur < v23)
                {
                  v614 = v23 - rlim_cur;
                  v615 = rlim_cur + v614;
                  while (1)
                  {
                    v616 = *(unsigned __int8 *)rlim_cur;
                    if (v616 != 36)
                    {
                      v617 = v616 != 95 && (v616 - 48) >= 0xA;
                      if (v617 && (v616 | 0x20u) - 97 > 0x19)
                        break;
                    }
                    *(_QWORD *)v1727.n128_u64[0] = ++rlim_cur;
                    if (!--v614)
                    {
                      LODWORD(rlim_cur) = v615;
                      break;
                    }
                  }
                  v613 = rlim_cur;
                }
                v619 = v613 - v612;
                v620 = v1720;
                *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | v619 & 0x7FFFFFFF;
                *(_BYTE *)(v620 + 24) = 5;
                return v1724;
              }
              v377 = (unsigned __int8 *)rlim_cur;
              if (rlim_cur < v23)
              {
                v377 = (unsigned __int8 *)rlim_cur;
                if ((_DWORD)v28 == 45)
                {
                  v377 = (unsigned __int8 *)(rlim_cur + 1);
                  *i64 = rlim_cur + 1;
                }
              }
              if ((unint64_t)v377 < v23)
              {
                v378 = *v377;
                if (v378 == 48)
                {
                  v380 = v377 + 1;
                  *i64 = v380;
LABEL_799:
                  if ((unint64_t)v380 < v23)
                  {
                    v381 = *v380;
                    if (v381 == 46)
                    {
                      *i64 = v380 + 1;
                      if ((unint64_t)(v380 + 1) >= v23 || v380[1] - 48 > 9)
                      {
                        v783 = WTF::fastCompactMalloc((WTF *)0x20);
                        v23 = v783;
                        v784 = 0x2200000002;
                        v785 = "Invalid digits after decimal point";
                        goto LABEL_1674;
                      }
                      v432 = v380 + 2;
                      v433 = (unsigned __int8 **)v1727.n128_u64[0];
                      do
                      {
                        v380 = v432;
                        *v433 = v432;
                        if ((unint64_t)v432 >= v23)
                          break;
                        ++v432;
                      }
                      while (*v380 - 48 < 0xA);
                    }
                    else if (v381 != 69 && v381 != 101 && (uint64_t)&v380[-rlim_cur] <= 9)
                    {
                      *(_BYTE *)v15 = 6;
                      v382 = *(unsigned __int8 *)rlim_cur;
                      if (v382 == 45)
                        v383 = (unsigned __int8 *)(rlim_cur + 1);
                      else
                        v383 = (unsigned __int8 *)rlim_cur;
                      if (v383 >= v380)
                      {
                        if (v382 != 45)
                        {
                          v384 = 0;
LABEL_811:
                          *(double *)(v9 + 32) = (double)v384;
                          return v1724;
                        }
                      }
                      else
                      {
                        v384 = 0;
                        do
                        {
                          v385 = *v383++;
                          v384 = v385 + 10 * v384 - 48;
                        }
                        while (v383 < v380);
                        if (v382 != 45)
                          goto LABEL_811;
                        if (v384)
                        {
                          v384 = -v384;
                          goto LABEL_811;
                        }
                      }
                      *(_QWORD *)(v9 + 32) = 0x8000000000000000;
                      return v1724;
                    }
                  }
                  if ((unint64_t)v380 >= v23 || (*v380 | 0x20) != 0x65)
                  {
LABEL_983:
                    *(_BYTE *)v1722 = 6;
                    LODWORD(v23) = (_DWORD)v380 - rlim_cur;
                    if ((uint64_t)&v380[-rlim_cur] < 0)
                      goto LABEL_1827;
                    v1735.rlim_cur = 0;
                    fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v380, &v1735.rlim_cur, 0x2E00000005);
                    *(_QWORD *)(v1720 + 32) = v1735.rlim_cur;
                    return v1724;
                  }
                  v789 = v380 + 1;
                  *(_QWORD *)v1727.n128_u64[0] = v380 + 1;
                  if ((unint64_t)(v380 + 1) < v23)
                  {
                    v790 = *v789;
                    if (v790 == 45 || v790 == 43)
                    {
                      v789 = v380 + 2;
                      *(_QWORD *)v1727.n128_u64[0] = v380 + 2;
                    }
                  }
                  if ((unint64_t)v789 < v23 && *v789 - 48 <= 9)
                  {
                    v791 = v789 + 1;
                    do
                    {
                      v380 = v791;
                      *(_QWORD *)v1727.n128_u64[0] = v791;
                      if ((unint64_t)v791 >= v23)
                        break;
                      ++v791;
                    }
                    while (*v380 - 48 < 0xA);
                    goto LABEL_983;
                  }
                  v783 = WTF::fastCompactMalloc((WTF *)0x20);
                  v23 = v783;
                  v784 = 0x5D00000002;
                  v785 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1674:
                  *(_QWORD *)v783 = v784;
                  *(_QWORD *)(v783 + 8) = v785;
                  *(_DWORD *)(v783 + 16) = 4;
LABEL_1329:
                  v592 = *(WTF::StringImpl **)v1709;
                  *(_QWORD *)v1709 = v23;
                  v356 = v1724;
                  if (!v592)
                    return v356;
                  if (*(_DWORD *)v592 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v592, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                    WTF::fastFree(v621, v622, v623, v624, v625, v626, v627, v628);
                  }
                  else
                  {
                    *(_DWORD *)v592 -= 2;
                  }
                  return v1724;
                }
                if ((v378 - 49) <= 8)
                {
                  v379 = v377 + 1;
                  do
                  {
                    v380 = v379;
                    *i64 = v379;
                    if ((unint64_t)v379 >= v23)
                      break;
                    ++v379;
                  }
                  while (*v380 - 48 < 0xA);
                  goto LABEL_799;
                }
              }
              v783 = WTF::fastCompactMalloc((WTF *)0x20);
              v23 = v783;
              v784 = 0xE00000002;
              v785 = "Invalid number";
              goto LABEL_1674;
            }
            goto LABEL_101;
          }
LABEL_1494:
          if ((unint64_t)a3 >= v23)
          {
            v32 = (int8x16_t *)a3;
          }
          else
          {
            v32 = (int8x16_t *)a3;
            while (1)
            {
              v703 = v32->u8[0];
              v704 = v703 < 0x20 || v703 == 92;
              v705 = v704 || v703 == (_DWORD)v28;
              v706 = v705;
              if (v703 != 9 && v706)
                break;
              v32 = (int8x16_t *)((char *)v32 + 1);
              *i64 = v32;
              if (v32 == (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1))
              {
                v32 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
                goto LABEL_54;
              }
            }
          }
          goto LABEL_54;
        }
        if (*(_BYTE *)(v9 + 40))
        {
          a3 = (unsigned __int8 *)(rlim_cur + 1);
          i64 = (_QWORD *)v1727.n128_u64[0];
          *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 1;
          v9 = v1720;
          v15 = v1722;
          v13 = (unint64_t)v1725;
          v26 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
          goto LABEL_1494;
        }
        v686 = WTF::fastCompactMalloc((WTF *)0x20);
        v687 = v686;
        v688 = 0x2900000002;
        v689 = "Single quotes (') are not allowed in JSON";
LABEL_1482:
        *(_QWORD *)v686 = v688;
        *(_QWORD *)(v686 + 8) = v689;
        *(_DWORD *)(v686 + 16) = 4;
        v651 = *(WTF::StringImpl **)v1709;
        *(_QWORD *)v1709 = v687;
        v9 = v1720;
        if (!v651)
          goto LABEL_101;
LABEL_1427:
        if (*(_DWORD *)v651 == 2)
        {
          WTF::StringImpl::~StringImpl(v651, v641, v642, v643, v644, v645, v646, v647);
          WTF::fastFree(v707, v708, v709, v710, v711, v712, v713, v714);
        }
        else
        {
          *(_DWORD *)v651 -= 2;
        }
        v9 = v1720;
        goto LABEL_101;
      }
LABEL_29:
      *(_BYTE *)v15 = v29;
      *i64 = rlim_cur + 1;
      goto LABEL_30;
    }
    if (v29 != 6)
    {
      if (v29 != 5)
      {
        if ((v29 - 18) < 2)
        {
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
          v427 = v1735.rlim_cur;
          if (!v1735.rlim_cur)
          {
            __break(0xC471u);
            JUMPOUT(0x198B13A24);
          }
          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
          *(_QWORD *)(v427 + 8) = v427 + 20;
          *(_DWORD *)(v427 + 16) = 4;
          *(_DWORD *)(v427 + 36) = 656436837;
          *(_OWORD *)(v427 + 20) = *(_OWORD *)"Unrecognized token '";
          *(_BYTE *)(v427 + 40) = *(_BYTE *)rlim_cur;
          *(_BYTE *)(v427 + 41) = 39;
          v428 = *(WTF::StringImpl **)v1709;
          *(_QWORD *)v1709 = v427;
          if (v428)
          {
            if (*(_DWORD *)v428 == 2)
            {
              WTF::StringImpl::~StringImpl(v428, v420, v421, v422, v423, v424, v425, v426);
              WTF::fastFree(v514, v515, v516, v517, v518, v519, v520, v521);
            }
            else
            {
              *(_DWORD *)v428 -= 2;
            }
          }
          goto LABEL_101;
        }
        goto LABEL_29;
      }
      if ((_DWORD)v28 == 110)
      {
        if ((uint64_t)(v23 - rlim_cur) >= 4 && *(_WORD *)(rlim_cur + 1) == 27765 && *(_BYTE *)(rlim_cur + 3) == 108)
        {
          *i64 = rlim_cur + 4;
          *(_BYTE *)v15 = 13;
          goto LABEL_101;
        }
      }
      else if ((_DWORD)v28 == 102)
      {
        if ((uint64_t)(v23 - rlim_cur) >= 5 && *(_WORD *)(rlim_cur + 1) == 27745 && *(_WORD *)(rlim_cur + 3) == 25971)
        {
          *i64 = rlim_cur + 5;
          *(_BYTE *)v15 = 12;
          goto LABEL_101;
        }
      }
      else if ((_DWORD)v28 == 116
             && (uint64_t)(v23 - rlim_cur) >= 4
             && *(_WORD *)(rlim_cur + 1) == 30066
             && *(_BYTE *)(rlim_cur + 3) == 101)
      {
        *(_QWORD *)v1727.n128_u64[0] = rlim_cur + 4;
        *(_BYTE *)v1722 = 11;
        v9 = v1720;
        goto LABEL_101;
      }
      v507 = rlim_cur;
      *(_QWORD *)(v1720 + 32) = rlim_cur;
      v508 = rlim_cur;
      if (rlim_cur < v23)
      {
        v509 = v23 - rlim_cur;
        v510 = rlim_cur + v509;
        while (1)
        {
          v511 = *(unsigned __int8 *)rlim_cur;
          if (v511 != 36)
          {
            v512 = v511 != 95 && (v511 - 48) >= 0xA;
            if (v512 && (v511 | 0x20u) - 97 > 0x19)
              break;
          }
          *(_QWORD *)v1727.n128_u64[0] = ++rlim_cur;
          if (!--v509)
          {
            LODWORD(rlim_cur) = v510;
            break;
          }
        }
        v508 = rlim_cur;
      }
      v9 = v1720;
      *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v508 - v507) & 0x7FFFFFFF;
      *(_BYTE *)(v9 + 24) = 5;
      goto LABEL_101;
    }
    v84 = (unsigned __int8 *)rlim_cur;
    if (rlim_cur < v23)
    {
      v84 = (unsigned __int8 *)rlim_cur;
      if ((_DWORD)v28 == 45)
      {
        v84 = (unsigned __int8 *)(rlim_cur + 1);
        *i64 = rlim_cur + 1;
      }
    }
    if ((unint64_t)v84 < v23)
    {
      v85 = *v84;
      if (v85 == 48)
      {
        v87 = v84 + 1;
        *i64 = v87;
LABEL_87:
        if ((unint64_t)v87 >= v23)
          goto LABEL_517;
        v88 = *v87;
        if (v88 != 46)
        {
          if (v88 != 69 && v88 != 101 && (uint64_t)&v87[-rlim_cur] <= 9)
          {
            *(_BYTE *)v15 = 6;
            v89 = *(unsigned __int8 *)rlim_cur;
            if (v89 == 45)
              v90 = (unsigned __int8 *)(rlim_cur + 1);
            else
              v90 = (unsigned __int8 *)rlim_cur;
            if (v90 >= v87)
            {
              if (v89 != 45)
              {
                v91 = 0;
LABEL_99:
                v93 = (double)v91;
LABEL_100:
                *(double *)(v9 + 32) = v93;
                goto LABEL_101;
              }
            }
            else
            {
              v91 = 0;
              do
              {
                v92 = *v90++;
                v91 = v92 + 10 * v91 - 48;
              }
              while (v90 < v87);
              if (v89 != 45)
                goto LABEL_99;
              if (v91)
              {
                v91 = -v91;
                goto LABEL_99;
              }
            }
            *(_QWORD *)(v9 + 32) = 0x8000000000000000;
            goto LABEL_101;
          }
LABEL_517:
          if ((unint64_t)v87 < v23 && (*v87 | 0x20) == 0x65)
          {
            v680 = v87 + 1;
            *i64 = v87 + 1;
            if ((unint64_t)(v87 + 1) < v23)
            {
              v681 = *v680;
              if (v681 == 45 || v681 == 43)
              {
                v680 = v87 + 2;
                *(_QWORD *)v1727.n128_u64[0] = v87 + 2;
              }
            }
            if ((unint64_t)v680 >= v23 || *v680 - 48 > 9)
            {
              v686 = WTF::fastCompactMalloc((WTF *)0x20);
              v687 = v686;
              v688 = 0x5D00000002;
              v689 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
              goto LABEL_1482;
            }
            v682 = v680 + 1;
            v9 = v1720;
            v15 = v1722;
            while (1)
            {
              v87 = v682;
              *(_QWORD *)v1727.n128_u64[0] = v682;
              if ((unint64_t)v682 >= v23)
                break;
              ++v682;
              if (*v87 - 48 >= 0xA)
                goto LABEL_519;
            }
            v9 = v1720;
            v15 = v1722;
          }
LABEL_519:
          *(_BYTE *)v15 = 6;
          LODWORD(v23) = (_DWORD)v87 - rlim_cur;
          if ((uint64_t)&v87[-rlim_cur] < 0)
            goto LABEL_1827;
          v1735.rlim_cur = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v87, &v1735.rlim_cur, 0x2E00000005);
          v93 = *(double *)&v1735.rlim_cur;
          goto LABEL_100;
        }
        *i64 = v87 + 1;
        if ((unint64_t)(v87 + 1) < v23 && v87[1] - 48 <= 9)
        {
          v275 = v87 + 2;
          do
          {
            v87 = v275;
            *i64 = v275;
            if ((unint64_t)v275 >= v23)
              break;
            ++v275;
          }
          while (*v87 - 48 < 0xA);
          goto LABEL_517;
        }
        v640 = WTF::fastCompactMalloc((WTF *)0x20);
        v648 = v640;
        v649 = 0x2200000002;
        v650 = "Invalid digits after decimal point";
LABEL_1426:
        *(_QWORD *)v640 = v649;
        *(_QWORD *)(v640 + 8) = v650;
        *(_DWORD *)(v640 + 16) = 4;
        v651 = *(WTF::StringImpl **)v1709;
        *(_QWORD *)v1709 = v648;
        if (v651)
          goto LABEL_1427;
LABEL_101:
        v94 = v9;
        v95 = 3;
LABEL_102:
        JSC::LiteralParser<unsigned char>::setErrorMessageForToken(v94, v95);
        return 0;
      }
      if ((v85 - 49) <= 8)
      {
        v86 = v84 + 1;
        do
        {
          v87 = v86;
          *i64 = v86;
          if ((unint64_t)v86 >= v23)
            break;
          ++v86;
        }
        while (*v87 - 48 < 0xA);
        goto LABEL_87;
      }
    }
    v640 = WTF::fastCompactMalloc((WTF *)0x20);
    v648 = v640;
    v649 = 0xE00000002;
    v650 = "Invalid number";
    goto LABEL_1426;
  }
  v1723 = (JSC::JSCell *)JSC::constructEmptyArray(v15, 0, 0, 0, a5, a6, a7, a8, a9);
  v26 = v1722;
  if (*(_DWORD *)(v13 + 80))
  {
    v416 = *(_DWORD *)(v13 + 80);
    if ((v416 & 0x27) != 0 && (v416 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, v28, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  rlim_cur = v14[3].u64[0];
  v23 = v14[3].u64[1];
  i64 = v14[3].i64;
  if (rlim_cur < v23)
  {
    v47 = v23 - rlim_cur;
    while (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
    {
      *i64 = ++rlim_cur;
      if (!--v47)
      {
        rlim_cur = v23;
        break;
      }
    }
  }
  if (rlim_cur == v23)
  {
    LOBYTE(v48) = 14;
    *(_BYTE *)v26 = 14;
    goto LABEL_110;
  }
  *(_BYTE *)v26 = 18;
  v28 = *(unsigned __int8 *)rlim_cur;
  LODWORD(v48) = JSC::tokenTypesOfLatin1Characters[v28];
  if (v48 <= 4)
  {
    if ((_DWORD)v48 == 4)
    {
      v49 = v14[2].u8[8];
      if ((_DWORD)v28 != 39)
      {
        a3 = (unsigned __int8 *)(rlim_cur + 1);
        *i64 = rlim_cur + 1;
        if (!v49)
        {
          v50 = v23 - (_QWORD)a3;
          if ((uint64_t)(v23 - (_QWORD)a3) < 0)
            goto LABEL_1827;
          v51 = (int8x16_t *)(v50 + rlim_cur + 1);
          if (v50 < 0x10)
          {
            if ((unsigned __int8 *)v23 != a3)
            {
              v399 = (int8x16_t *)(rlim_cur + 1);
              while (JSC::safeStringLatin1CharactersInStrictJSON[v399->u8[0]])
              {
                v399 = (int8x16_t *)((char *)v399 + 1);
                if (!--v50)
                  goto LABEL_106;
              }
              v51 = v399;
            }
          }
          else
          {
            v52 = rlim_cur + 16;
            v53.i64[0] = 0x2222222222222222;
            v53.i64[1] = 0x2222222222222222;
            v54.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v54.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v55.i64[0] = 0x2020202020202020;
            v55.i64[1] = 0x2020202020202020;
            do
            {
              v56 = *(int8x16_t *)(v52 - 15);
              v57 = vceqq_s8(v56, v53);
              v58 = vorrq_s8(vorrq_s8(vceqq_s8(v56, v54), (int8x16_t)vcgtq_u8(v55, (uint8x16_t)v56)), v57);
              v57.i8[0] = vmaxvq_u8((uint8x16_t)v58);
              if (v57.i32[0])
              {
                v59 = (unsigned __int8 *)(v52 - 15);
LABEL_105:
                v96 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v58);
                v96.i8[0] = vminvq_u8(v96);
                v51 = (int8x16_t *)&v59[v96.u32[0]];
                goto LABEL_106;
              }
              v52 += 16;
            }
            while (v52 < (unint64_t)v51);
            if (v52 - 15 < (unint64_t)v51)
            {
              v59 = (unsigned __int8 *)&v51[-1];
              v60 = v51[-1];
              v61.i64[0] = 0x2222222222222222;
              v61.i64[1] = 0x2222222222222222;
              v62 = vceqq_s8(v60, v61);
              v63.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
              v63.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
              v64.i64[0] = 0x2020202020202020;
              v64.i64[1] = 0x2020202020202020;
              v58 = vorrq_s8(vorrq_s8(vceqq_s8(v60, v63), (int8x16_t)vcgtq_u8(v64, (uint8x16_t)v60)), v62);
              v62.i8[0] = vmaxvq_u8((uint8x16_t)v58);
              v14 = (int16x8_t *)v1720;
              v26 = v1722;
              v13 = (unint64_t)v1725;
              if (!v62.i32[0])
                goto LABEL_106;
              goto LABEL_105;
            }
            v14 = (int16x8_t *)v1720;
            v26 = v1722;
            v13 = (unint64_t)v1725;
          }
LABEL_106:
          *i64 = v51;
LABEL_107:
          if ((unint64_t)v51 < v23 && v51->u8[0] == (_DWORD)v28)
          {
            v14[1].i8[9] |= 1u;
            v14[2].i64[0] = (uint64_t)a3;
            v14[3].i64[0] = (uint64_t)v51->i64 + 1;
            v14[1].i32[3] = v14[1].i32[3] & 0x80000000 | ((_DWORD)v51 - (_DWORD)a3) & 0x7FFFFFFF;
            LOBYTE(v48) = 4;
            v14[1].i8[8] = 4;
            goto LABEL_110;
          }
          LODWORD(v48) = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v26, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_61:
          if ((_DWORD)v48 != 1)
            goto LABEL_110;
          rlim_cur = v14[3].u64[0];
          v23 = v14[3].u64[1];
          if (rlim_cur >= v23)
          {
            v66 = 0;
          }
          else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
          {
            v246 = (unsigned __int8 *)v14[3].i64[1];
            v247 = (unsigned __int8 *)(rlim_cur + 1);
            v248 = ~rlim_cur + v23;
            do
            {
              v249 = v247;
              *i64 = v247;
              if (!v248)
                goto LABEL_419;
              ++v247;
              --v248;
            }
            while (JSC::tokenTypesOfLatin1Characters[*v249] == 19);
            v246 = v249;
LABEL_419:
            v66 = (unint64_t)v249 < v23;
            rlim_cur = (rlim_t)v246;
          }
          else
          {
            v66 = 1;
          }
          if (rlim_cur == v23)
          {
            *(_BYTE *)v26 = 14;
            return v1723;
          }
          *(_BYTE *)v26 = 18;
          v28 = *(unsigned __int8 *)rlim_cur;
          v67 = JSC::tokenTypesOfLatin1Characters[v28];
          if (v67 <= 4)
          {
            if (v67 == 4)
            {
              v68 = v14[2].u8[8];
              if ((_DWORD)v28 == 39)
              {
                if (!v14[2].i8[8])
                {
LABEL_1813:
                  v718 = WTF::fastCompactMalloc((WTF *)0x20);
                  v472 = v718;
                  v719 = 0x2900000002;
                  v720 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_1515;
                }
                a3 = (unsigned __int8 *)(rlim_cur + 1);
                *i64 = rlim_cur + 1;
                v14 = (int16x8_t *)v1720;
                v26 = v1722;
              }
              else
              {
                a3 = (unsigned __int8 *)(rlim_cur + 1);
                *i64 = rlim_cur + 1;
                if (!v68)
                {
                  v69 = v23 - (_QWORD)a3;
                  if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                    goto LABEL_1827;
                  v70 = (int8x16_t *)(v69 + rlim_cur + 1);
                  if (v69 < 0x10)
                  {
                    if ((unsigned __int8 *)v23 != a3)
                    {
                      v438 = (int8x16_t *)(rlim_cur + 1);
                      while (JSC::safeStringLatin1CharactersInStrictJSON[v438->u8[0]])
                      {
                        v438 = (int8x16_t *)((char *)v438 + 1);
                        if (!--v69)
                          goto LABEL_1015;
                      }
                      v70 = v438;
                    }
                  }
                  else
                  {
                    v71 = rlim_cur + 16;
                    v72.i64[0] = 0x2222222222222222;
                    v72.i64[1] = 0x2222222222222222;
                    v73.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v73.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v74.i64[0] = 0x2020202020202020;
                    v74.i64[1] = 0x2020202020202020;
                    do
                    {
                      v75 = *(int8x16_t *)(v71 - 15);
                      v76 = vceqq_s8(v75, v72);
                      v77 = vorrq_s8(vorrq_s8(vceqq_s8(v75, v73), (int8x16_t)vcgtq_u8(v74, (uint8x16_t)v75)), v76);
                      v76.i8[0] = vmaxvq_u8((uint8x16_t)v77);
                      if (v76.i32[0])
                      {
                        v78 = (unsigned __int8 *)(v71 - 15);
                        goto LABEL_496;
                      }
                      v71 += 16;
                    }
                    while (v71 < (unint64_t)v70);
                    if (v71 - 15 < (unint64_t)v70)
                    {
                      v78 = (unsigned __int8 *)&v70[-1];
                      v79 = v70[-1];
                      v80.i64[0] = 0x2222222222222222;
                      v80.i64[1] = 0x2222222222222222;
                      v81 = vceqq_s8(v79, v80);
                      v82.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v82.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v83.i64[0] = 0x2020202020202020;
                      v83.i64[1] = 0x2020202020202020;
                      v77 = vorrq_s8(vorrq_s8(vceqq_s8(v79, v82), (int8x16_t)vcgtq_u8(v83, (uint8x16_t)v79)), v81);
                      v81.i8[0] = vmaxvq_u8((uint8x16_t)v77);
                      v14 = (int16x8_t *)v1720;
                      v26 = v1722;
                      if (!v81.i32[0])
                      {
LABEL_497:
                        *i64 = v70;
                        goto LABEL_498;
                      }
LABEL_496:
                      v272 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v77);
                      v272.i8[0] = vminvq_u8(v272);
                      v70 = (int8x16_t *)&v78[v272.u32[0]];
                      goto LABEL_497;
                    }
                  }
LABEL_1015:
                  v14 = (int16x8_t *)v1720;
                  v26 = v1722;
                  goto LABEL_497;
                }
              }
              if ((unint64_t)a3 >= v23)
              {
                v70 = (int8x16_t *)a3;
              }
              else
              {
                v70 = (int8x16_t *)a3;
                do
                {
                  v777 = v70->u8[0];
                  v780 = v777 < 0x20 || v777 == 92 || v777 == (_DWORD)v28;
                  if (v777 != 9 && v780)
                    goto LABEL_498;
                  v70 = (int8x16_t *)((char *)v70 + 1);
                  *i64 = v70;
                }
                while (v70 != (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1));
                v70 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
              }
LABEL_498:
              if ((unint64_t)v70 < v23 && v70->u8[0] == (_DWORD)v28)
              {
                v14[1].i8[9] |= 1u;
                v14[2].i64[0] = (uint64_t)a3;
                v14[3].i64[0] = (uint64_t)v70->i64 + 1;
                v14[1].i32[3] = v14[1].i32[3] & 0x80000000 | ((_DWORD)v70 - (_DWORD)a3) & 0x7FFFFFFF;
                v14[1].i8[8] = 4;
              }
              else
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v26, (size_t)a3, v28, a5, a6, a7, a8);
              }
              return v1723;
            }
            goto LABEL_414;
          }
          if (v67 != 6)
          {
            if (v67 == 5)
            {
              if ((_DWORD)v28 == 110)
              {
                if ((uint64_t)(v23 - rlim_cur) >= 4
                  && *(_WORD *)(rlim_cur + 1) == 27765
                  && *(_BYTE *)(rlim_cur + 3) == 108)
                {
                  *i64 = rlim_cur + 4;
                  *(_BYTE *)v26 = 13;
                  return v1723;
                }
              }
              else if ((_DWORD)v28 == 102)
              {
                if ((uint64_t)(v23 - rlim_cur) >= 5
                  && *(_WORD *)(rlim_cur + 1) == 27745
                  && *(_WORD *)(rlim_cur + 3) == 25971)
                {
                  *i64 = rlim_cur + 5;
                  v431 = 12;
LABEL_975:
                  *(_BYTE *)v1722 = v431;
                  return v1723;
                }
              }
              else if ((_DWORD)v28 == 116
                     && (uint64_t)(v23 - rlim_cur) >= 4
                     && *(_WORD *)(rlim_cur + 1) == 30066
                     && *(_BYTE *)(rlim_cur + 3) == 101)
              {
LABEL_1193:
                *i64 = rlim_cur + 4;
                v431 = 11;
                goto LABEL_975;
              }
              v573 = rlim_cur;
              *(_QWORD *)(v1720 + 32) = rlim_cur;
              v574 = rlim_cur;
              if (rlim_cur < v23)
              {
                v575 = v23 - rlim_cur;
                v576 = rlim_cur + v575;
                do
                {
                  v577 = *(unsigned __int8 *)rlim_cur;
                  if (v577 != 36)
                  {
                    v578 = v577 != 95 && (v577 - 48) >= 0xA;
                    if (v578 && (v577 | 0x20u) - 97 > 0x19)
                      goto LABEL_1286;
                  }
                  *i64 = ++rlim_cur;
                  --v575;
                }
                while (v575);
LABEL_1285:
                LODWORD(rlim_cur) = v576;
                goto LABEL_1286;
              }
LABEL_1287:
              v585 = v574 - v573;
              v586 = v1720;
              *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | v585 & 0x7FFFFFFF;
              *(_BYTE *)(v586 + 24) = 5;
              return v1723;
            }
            if (v67 - 18 < 2)
            {
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
              v472 = v1735.rlim_cur;
              if (!v1735.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B119C8);
              }
              goto LABEL_1099;
            }
LABEL_414:
            *(_BYTE *)v26 = v67;
            goto LABEL_398;
          }
          v280 = (_DWORD)v28 != 45 || !v66;
          v281 = (unsigned __int8 *)rlim_cur;
          if ((v280 & 1) == 0)
          {
            v281 = (unsigned __int8 *)(rlim_cur + 1);
            *i64 = rlim_cur + 1;
          }
          if ((unint64_t)v281 >= v23)
            goto LABEL_1514;
          v282 = *v281;
          if (v282 == 48)
          {
            v284 = v281 + 1;
            *i64 = v284;
          }
          else
          {
            if ((v282 - 49) > 8)
              goto LABEL_1514;
            v283 = v281 + 1;
            do
            {
              v284 = v283;
              *i64 = v283;
              if ((unint64_t)v283 >= v23)
                break;
              ++v283;
            }
            while (*v284 - 48 < 0xA);
          }
          if ((unint64_t)v284 < v23)
          {
            v285 = *v284;
            if (v285 == 46)
            {
              *i64 = v284 + 1;
              if ((unint64_t)(v284 + 1) >= v23 || v284[1] - 48 > 9)
              {
LABEL_1550:
                v718 = WTF::fastCompactMalloc((WTF *)0x20);
                v472 = v718;
                v719 = 0x2200000002;
                v720 = "Invalid digits after decimal point";
                goto LABEL_1515;
              }
              v364 = v284 + 2;
              do
              {
                v284 = v364;
                *i64 = v364;
                if ((unint64_t)v364 >= v23)
                  break;
                ++v364;
              }
              while (*v284 - 48 < 0xA);
            }
            else if (v285 != 69 && v285 != 101 && (uint64_t)&v284[-rlim_cur] <= 9)
            {
              *(_BYTE *)v26 = 6;
              v286 = *(unsigned __int8 *)rlim_cur;
              if (v286 == 45)
                v287 = (unsigned __int8 *)(rlim_cur + 1);
              else
                v287 = (unsigned __int8 *)rlim_cur;
              if (v287 >= v284)
              {
                if (v286 != 45)
                {
                  v288 = 0;
LABEL_565:
                  *(double *)v14[2].i64 = (double)v288;
                  return v1723;
                }
              }
              else
              {
                v288 = 0;
                do
                {
                  v289 = *v287++;
                  v288 = v289 + 10 * v288 - 48;
                }
                while (v287 < v284);
                if (v286 != 45)
                  goto LABEL_565;
                if (v288)
                {
                  v288 = -v288;
                  goto LABEL_565;
                }
              }
              v14[2].i64[0] = 0x8000000000000000;
              return v1723;
            }
          }
          if ((unint64_t)v284 < v23 && (*v284 | 0x20) == 0x65)
          {
            v759 = v284 + 1;
            *i64 = v284 + 1;
            if ((unint64_t)(v284 + 1) < v23)
            {
              v760 = *v759;
              if (v760 == 45 || v760 == 43)
              {
                v759 = v284 + 2;
                *i64 = v284 + 2;
              }
            }
            if ((unint64_t)v759 >= v23 || *v759 - 48 > 9)
            {
LABEL_1624:
              v718 = WTF::fastCompactMalloc((WTF *)0x20);
              v472 = v718;
              v719 = 0x5D00000002;
              v720 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
              goto LABEL_1515;
            }
            v761 = v759 + 1;
            v14 = (int16x8_t *)v1720;
            v26 = v1722;
            while (1)
            {
              v284 = v761;
              *i64 = v761;
              if ((unint64_t)v761 >= v23)
                break;
              ++v761;
              if (*v284 - 48 >= 0xA)
                goto LABEL_730;
            }
            v14 = (int16x8_t *)v1720;
            v26 = v1722;
          }
LABEL_730:
          *(_BYTE *)v26 = 6;
          LODWORD(v23) = (_DWORD)v284 - rlim_cur;
          if ((uint64_t)&v284[-rlim_cur] < 0)
            goto LABEL_1827;
          v1735.rlim_cur = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v284, &v1735.rlim_cur, 0x2E00000005);
          v14[2].i64[0] = v1735.rlim_cur;
          return v1723;
        }
LABEL_1572:
        if ((unint64_t)a3 >= v23)
        {
          v51 = (int8x16_t *)a3;
        }
        else
        {
          v51 = (int8x16_t *)a3;
          while (1)
          {
            v747 = v51->u8[0];
            v748 = v747 < 0x20 || v747 == 92;
            v749 = v748 || v747 == (_DWORD)v28;
            v750 = v749;
            if (v747 != 9 && v750)
              break;
            v51 = (int8x16_t *)((char *)v51 + 1);
            *i64 = v51;
            if (v51 == (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1))
            {
              v51 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
              goto LABEL_107;
            }
          }
        }
        goto LABEL_107;
      }
      if (v14[2].i8[8])
      {
        a3 = (unsigned __int8 *)(rlim_cur + 1);
        *i64 = rlim_cur + 1;
        v14 = (int16x8_t *)v1720;
        v26 = v1722;
        v13 = (unint64_t)v1725;
        goto LABEL_1572;
      }
      v715 = WTF::fastCompactMalloc((WTF *)0x20);
      v445 = v715;
      v716 = 0x2900000002;
      v717 = "Single quotes (') are not allowed in JSON";
      goto LABEL_1512;
    }
LABEL_60:
    *(_BYTE *)v26 = v48;
    *i64 = rlim_cur + 1;
    goto LABEL_61;
  }
  if ((_DWORD)v48 == 6)
  {
    v250 = (unsigned __int8 *)rlim_cur;
    if (rlim_cur < v23)
    {
      v250 = (unsigned __int8 *)rlim_cur;
      if ((_DWORD)v28 == 45)
      {
        v250 = (unsigned __int8 *)(rlim_cur + 1);
        *i64 = rlim_cur + 1;
      }
    }
    if ((unint64_t)v250 < v23)
    {
      v251 = *v250;
      if (v251 == 48)
      {
        v253 = v250 + 1;
        *i64 = v253;
LABEL_429:
        if ((unint64_t)v253 < v23)
        {
          v254 = *v253;
          if (v254 == 46)
          {
            *i64 = v253 + 1;
            if ((unint64_t)(v253 + 1) >= v23 || v253[1] - 48 > 9)
            {
              v715 = WTF::fastCompactMalloc((WTF *)0x20);
              v445 = v715;
              v716 = 0x2200000002;
              v717 = "Invalid digits after decimal point";
              goto LABEL_1512;
            }
            v335 = v253 + 2;
            do
            {
              v253 = v335;
              *i64 = v335;
              if ((unint64_t)v335 >= v23)
                break;
              ++v335;
            }
            while (*v253 - 48 < 0xA);
          }
          else if (v254 != 69 && v254 != 101 && (uint64_t)&v253[-rlim_cur] <= 9)
          {
            *(_BYTE *)v26 = 6;
            v255 = *(unsigned __int8 *)rlim_cur;
            if (v255 == 45)
              v256 = (unsigned __int8 *)(rlim_cur + 1);
            else
              v256 = (unsigned __int8 *)rlim_cur;
            if (v256 >= v253)
            {
              if (v255 != 45)
              {
                v257 = 0;
LABEL_441:
                v259 = (double)v257;
LABEL_442:
                *(double *)v14[2].i64 = v259;
                LOBYTE(v48) = 6;
                goto LABEL_110;
              }
            }
            else
            {
              v257 = 0;
              do
              {
                v258 = *v256++;
                v257 = v258 + 10 * v257 - 48;
              }
              while (v256 < v253);
              if (v255 != 45)
                goto LABEL_441;
              if (v257)
              {
                v257 = -v257;
                goto LABEL_441;
              }
            }
            v14[2].i64[0] = 0x8000000000000000;
            LOBYTE(v48) = 6;
            goto LABEL_110;
          }
        }
        if ((unint64_t)v253 >= v23 || (*v253 | 0x20) != 0x65)
        {
LABEL_633:
          *(_BYTE *)v26 = 6;
          LODWORD(v23) = (_DWORD)v253 - rlim_cur;
          if ((uint64_t)&v253[-rlim_cur] < 0)
            goto LABEL_1827;
          v1735.rlim_cur = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v253, &v1735.rlim_cur, 0x2E00000005);
          v259 = *(double *)&v1735.rlim_cur;
          goto LABEL_442;
        }
        v737 = v253 + 1;
        *i64 = v253 + 1;
        if ((unint64_t)(v253 + 1) < v23)
        {
          v738 = *v737;
          if (v738 == 45 || v738 == 43)
          {
            v737 = v253 + 2;
            *i64 = v253 + 2;
          }
        }
        if ((unint64_t)v737 < v23 && *v737 - 48 <= 9)
        {
          v739 = v737 + 1;
          v14 = (int16x8_t *)v1720;
          v26 = v1722;
          v13 = (unint64_t)v1725;
          while (1)
          {
            v253 = v739;
            *i64 = v739;
            if ((unint64_t)v739 >= v23)
              break;
            ++v739;
            if (*v253 - 48 >= 0xA)
              goto LABEL_633;
          }
          v14 = (int16x8_t *)v1720;
          v26 = v1722;
          v13 = (unint64_t)v1725;
          goto LABEL_633;
        }
        v715 = WTF::fastCompactMalloc((WTF *)0x20);
        v445 = v715;
        v716 = 0x5D00000002;
        v717 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1512:
        *(_QWORD *)v715 = v716;
        *(_QWORD *)(v715 + 8) = v717;
        *(_DWORD *)(v715 + 16) = 4;
LABEL_1057:
        v446 = *(WTF::StringImpl **)v1709;
        *(_QWORD *)v1709 = v445;
        if (v446)
        {
          if (*(_DWORD *)v446 == 2)
          {
            WTF::StringImpl::~StringImpl(v446, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
            WTF::fastFree(v544, v545, v546, v547, v548, v549, v550, v551);
          }
          else
          {
            *(_DWORD *)v446 -= 2;
          }
        }
        LOBYTE(v48) = 18;
        v13 = (unint64_t)v1725;
        goto LABEL_110;
      }
      if ((v251 - 49) <= 8)
      {
        v252 = v250 + 1;
        do
        {
          v253 = v252;
          *i64 = v252;
          if ((unint64_t)v252 >= v23)
            break;
          ++v252;
        }
        while (*v253 - 48 < 0xA);
        goto LABEL_429;
      }
    }
    v715 = WTF::fastCompactMalloc((WTF *)0x20);
    v445 = v715;
    v716 = 0xE00000002;
    v717 = "Invalid number";
    goto LABEL_1512;
  }
  if ((_DWORD)v48 != 5)
  {
    if ((v48 - 18) < 2)
    {
      WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
      v445 = v1735.rlim_cur;
      if (!v1735.rlim_cur)
      {
        __break(0xC471u);
        JUMPOUT(0x198B13A4CLL);
      }
      *(_QWORD *)v1735.rlim_cur = 0x1600000002;
      *(_QWORD *)(v445 + 8) = v445 + 20;
      *(_DWORD *)(v445 + 16) = 4;
      *(_DWORD *)(v445 + 36) = 656436837;
      *(_OWORD *)(v445 + 20) = *(_OWORD *)"Unrecognized token '";
      *(_BYTE *)(v445 + 40) = *(_BYTE *)rlim_cur;
      *(_BYTE *)(v445 + 41) = 39;
      goto LABEL_1057;
    }
    goto LABEL_60;
  }
  if ((_DWORD)v28 == 110)
  {
    if ((uint64_t)(v23 - rlim_cur) >= 4 && *(_WORD *)(rlim_cur + 1) == 27765 && *(_BYTE *)(rlim_cur + 3) == 108)
    {
      *i64 = rlim_cur + 4;
      LOBYTE(v48) = 13;
      *(_BYTE *)v26 = 13;
      goto LABEL_110;
    }
  }
  else if ((_DWORD)v28 == 102)
  {
    if ((uint64_t)(v23 - rlim_cur) >= 5 && *(_WORD *)(rlim_cur + 1) == 27745 && *(_WORD *)(rlim_cur + 3) == 25971)
    {
      *i64 = rlim_cur + 5;
      LOBYTE(v48) = 12;
      *(_BYTE *)v26 = 12;
      goto LABEL_110;
    }
  }
  else if ((_DWORD)v28 == 116
         && (uint64_t)(v23 - rlim_cur) >= 4
         && *(_WORD *)(rlim_cur + 1) == 30066
         && *(_BYTE *)(rlim_cur + 3) == 101)
  {
    *i64 = rlim_cur + 4;
    LOBYTE(v48) = 11;
    *(_BYTE *)v1722 = 11;
    v13 = (unint64_t)v1725;
    goto LABEL_110;
  }
  v535 = rlim_cur;
  *(_QWORD *)(v1720 + 32) = rlim_cur;
  v536 = rlim_cur;
  if (rlim_cur < v23)
  {
    v537 = v23 - rlim_cur;
    v538 = rlim_cur + v537;
    while (1)
    {
      v539 = *(unsigned __int8 *)rlim_cur;
      if (v539 != 36)
      {
        v540 = v539 != 95 && (v539 - 48) >= 0xA;
        if (v540 && (v539 | 0x20u) - 97 > 0x19)
          break;
      }
      *i64 = ++rlim_cur;
      if (!--v537)
      {
        LODWORD(rlim_cur) = v538;
        break;
      }
    }
    v536 = rlim_cur;
  }
  v542 = v536 - v535;
  v543 = v1720;
  *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | v542 & 0x7FFFFFFF;
  LOBYTE(v48) = 5;
  *(_BYTE *)(v543 + 24) = 5;
  v13 = (unint64_t)v1725;
LABEL_110:
  rlim_cur = 0;
  v15 = 92;
  v22.n128_u64[1] = 0xF0E0D0C0B0A0908;
  v1728 = (int8x16_t)xmmword_19911D0A0;
  v22.n128_u64[0] = 17302016;
  v1727 = v22;
LABEL_111:
  v14 = (int16x8_t *)v1723;
  while (2)
  {
    if ((v48 & 0xFD) == 0)
    {
      v97 = v1720;
      v13 = JSC::LiteralParser<unsigned char>::parseRecursively(v1720, v13, v1719);
      goto LABEL_151;
    }
    v97 = v1720;
    switch(*(_BYTE *)v1722)
    {
      case 1:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token ']'";
        goto LABEL_1245;
      case 3:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token '}'";
        goto LABEL_1245;
      case 4:
        v26 = *(_DWORD *)(v1720 + 28) & 0x7FFFFFFF;
        if ((*(_BYTE *)(v1720 + 25) & 1) != 0)
        {
          v98 = *(_BYTE **)(v1720 + 32);
          if (v26 < 0xB)
          {
            if ((_DWORD)v26 == 1)
            {
              if (*(_BYTE *)(v1710 + 2297))
              {
                v101 = v1725;
                v260 = *((_QWORD *)v1725 + *v98 + 5277);
                v99 = *(_QWORD *)(v260 + 8);
                if ((v99 & 1) != 0)
                  v261 = 0;
                else
                  v261 = *(_DWORD **)(v260 + 8);
                *v261 += 2;
              }
              else
              {
                LOBYTE(v1732) = *v98;
                WTF::AtomStringImpl::add((uint64_t)&v1732, 1uLL, v28, a5, a6, a7, a8, &v1735);
                v99 = v1735.rlim_cur;
                v101 = v1725;
              }
              v102 = v1718;
              if (!v99)
              {
                v13 = *(_QWORD *)v1710;
LABEL_135:
                v106 = v1720;
                goto LABEL_136;
              }
LABEL_121:
              v103 = *(_DWORD *)(v99 + 4);
              if (v103 == 1)
              {
                v104 = *(_DWORD *)(v99 + 16);
                v273 = *(unsigned __int8 **)(v99 + 8);
                if ((v104 & 4) != 0)
                {
                  v274 = *v273;
                }
                else
                {
                  v274 = *(unsigned __int16 *)v273;
                  if (v274 > 0xFF)
                  {
LABEL_124:
                    *(_DWORD *)v99 += 2;
                    v105 = v99;
                    if ((v104 & 3) == 2)
                    {
                      v105 = v99;
                      do
                      {
                        v105 = *(_QWORD *)(v105 + 24);
                        v104 = *(_DWORD *)(v105 + 16);
                      }
                      while ((v104 & 3) == 2);
                    }
                    if ((v104 & 8) != 0)
                    {
                      v26 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(v105 + 16) = v104 | 8;
                      v26 = (unint64_t)*(unsigned int *)(v105 + 4) << ((v104 & 4) == 0);
                    }
                    v13 = *v102;
                    if (*v102 >= v102[1])
                    {
                      v13 = v102[2];
                      if ((v13 & 1) != 0)
                      {
                        v652 = (char *)v1725 + 39672;
                        v653 = (char *)v1725 + 192;
                        JSC::sanitizeStackForVM(v1725, (JSC::VM *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                        v13 = JSC::LocalAllocator::allocateSlowCase(v652, v653, 16, 0, 0);
                        v102 = v1718;
                        goto LABEL_129;
                      }
                      v418 = *(_QWORD *)(v13 + 8) ^ v102[3];
                      v102[1] = v13 + HIDWORD(v418);
                      v102[2] = v13 + (int)v418;
                    }
                    *v102 = v13 + 16;
LABEL_129:
                    *(_DWORD *)v13 = v102[227] >> 4;
                    v22 = v1727;
                    *(_DWORD *)(v13 + 4) = v1727.n128_u32[0];
                    *(_QWORD *)(v13 + 8) = v99;
                    if (*((_BYTE *)v1725 + 755))
                      __dmb(0xAu);
                    if (v26 >= 0x101)
                      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v1725 + 192, 0, v13, v26, a5, a6, a7, a8);
                    goto LABEL_133;
                  }
                }
                v13 = *((_QWORD *)v101 + v274 + 5277);
              }
              else
              {
                if (v103)
                {
                  v104 = *(_DWORD *)(v99 + 16);
                  goto LABEL_124;
                }
                v13 = *(_QWORD *)v1710;
              }
LABEL_133:
              if (*(_DWORD *)v99 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v99, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
              }
              else
              {
                *(_DWORD *)v99 -= 2;
              }
              goto LABEL_135;
            }
            a2 = v26;
            if ((_DWORD)v26)
            {
              WTF::AtomStringImpl::add(*(_QWORD *)(v1720 + 32), v26, v28, a5, a6, a7, a8, &v1735);
              v99 = v1735.rlim_cur;
              v100 = *(_DWORD *)v1735.rlim_cur;
              *(_DWORD *)v1735.rlim_cur += 2;
              if (!v100)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v99, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
                goto LABEL_120;
              }
            }
            else
            {
              v99 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
              v100 = WTF::StringImpl::s_emptyAtomString + 2;
            }
            *(_DWORD *)v99 = v100;
LABEL_120:
            v101 = v1725;
            v102 = v1718;
            goto LABEL_121;
          }
          if (v98)
          {
            v155 = WTF::fastCompactMalloc((WTF *)(v26 + 20));
            *(_DWORD *)v155 = 2;
            *(_DWORD *)(v155 + 4) = v26;
            *(_QWORD *)(v155 + 8) = v155 + 20;
            *(_DWORD *)(v155 + 16) = 4;
            memcpy((void *)(v155 + 20), v98, v26);
          }
          else
          {
            v155 = 0;
          }
          v156 = v1718;
          v157 = *(_DWORD *)(v155 + 16);
          v158 = v155;
          if ((v157 & 3) == 2)
          {
            v158 = v155;
            do
            {
              v158 = *(_QWORD *)(v158 + 24);
              v157 = *(_DWORD *)(v158 + 16);
            }
            while ((v157 & 3) == 2);
          }
          if ((v157 & 8) != 0)
          {
            v26 = 0;
          }
          else
          {
            *(_DWORD *)(v158 + 16) = v157 | 8;
            v26 = (unint64_t)*(unsigned int *)(v158 + 4) << ((v157 & 4) == 0);
          }
          v13 = *v156;
          if (*v156 >= v156[1])
          {
            v13 = v156[2];
            if ((v13 & 1) != 0)
            {
              v684 = (char *)v1725 + 39672;
              v685 = (char *)v1725 + 192;
              JSC::sanitizeStackForVM(v1725, (JSC::VM *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
              v13 = JSC::LocalAllocator::allocateSlowCase(v684, v685, 16, 0, 0);
              v156 = v1718;
              goto LABEL_240;
            }
            v430 = *(_QWORD *)(v13 + 8) ^ v156[3];
            v156[1] = v13 + HIDWORD(v430);
            v156[2] = v13 + (int)v430;
          }
          *v156 = v13 + 16;
LABEL_240:
          *(_DWORD *)v13 = v156[227] >> 4;
          v22 = v1727;
          *(_DWORD *)(v13 + 4) = v1727.n128_u32[0];
          *(_QWORD *)(v13 + 8) = v155;
          if (*((_BYTE *)v1725 + 755))
            __dmb(0xAu);
          v106 = v1720;
          if (v26 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v1725 + 192, 0, v13, v26, a5, a6, a7, a8);
          goto LABEL_136;
        }
        if (v26 < 0xB)
        {
          v672 = v1725;
          JSC::Identifier::fromString((uint64_t)v1725, *(WTF::AtomStringImpl **)(v1720 + 32), v26, v28, a5, a6, a7, a8, &v1735);
          v635 = JSC::jsString(v672, (JSC::VM *)&v1735, v673, v674, v675, v676, v677, v678);
        }
        else
        {
          WTF::String::String((int **)&v1735, *(_WORD **)(v1720 + 32), v26);
          v635 = JSC::jsNontrivialString((uint64_t)v1725, (JSC::VM *)&v1735, v629, v630, v631, v632, v633, v634);
        }
        v13 = v635;
        v679 = (WTF::StringImpl *)v1735.rlim_cur;
        v1735.rlim_cur = 0;
        if (v679)
        {
          if (*(_DWORD *)v679 == 2)
          {
            WTF::StringImpl::~StringImpl(v679, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
            WTF::fastFree(v729, v730, v731, v732, v733, v734, v735, v736);
          }
          else
          {
            *(_DWORD *)v679 -= 2;
          }
        }
        v106 = v1720;
        v14 = (int16x8_t *)v1723;
LABEL_136:
        v9 = *(_QWORD *)(v106 + 48);
        v23 = *(_QWORD *)(v106 + 56);
        if (v9 >= v23)
        {
          v107 = 0;
        }
        else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v9] == 19)
        {
          v151 = *(unsigned __int8 **)(v106 + 56);
          v152 = (unsigned __int8 *)(v9 + 1);
          v153 = ~v9 + v23;
          while (1)
          {
            v154 = v152;
            *i64 = v152;
            if (!v153)
              break;
            ++v152;
            --v153;
            if (JSC::tokenTypesOfLatin1Characters[*v154] != 19)
            {
              v151 = v154;
              break;
            }
          }
          v107 = (unint64_t)v154 < v23;
          v9 = (unint64_t)v151;
        }
        else
        {
          v107 = 1;
        }
        if (v9 == v23)
        {
LABEL_825:
          v359 = 14;
          goto LABEL_712;
        }
        *(_BYTE *)v1722 = 18;
        v28 = *(unsigned __int8 *)v9;
        v108 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v108 <= 4)
        {
          if (v108 != 4)
            goto LABEL_227;
          v109 = *(unsigned __int8 *)(v1720 + 40);
          if ((_DWORD)v28 != 39)
          {
            a3 = (unsigned __int8 *)(v9 + 1);
            *i64 = v9 + 1;
            if (!v109)
            {
              v110 = v23 - (_QWORD)a3;
              if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                goto LABEL_1827;
              v111 = (int8x16_t *)(v110 + v9 + 1);
              if (v110 < 0x10)
              {
                v398 = (int8x16_t *)(v9 + 1);
                v97 = v1720;
                if ((unsigned __int8 *)v23 != a3)
                {
                  while (JSC::safeStringLatin1CharactersInStrictJSON[v398->u8[0]])
                  {
                    v398 = (int8x16_t *)((char *)v398 + 1);
                    if (!--v110)
                      goto LABEL_216;
                  }
LABEL_891:
                  v111 = v398;
                }
              }
              else
              {
                v112 = v9 + 16;
                v97 = v1720;
                while (1)
                {
                  v113 = *(int8x16_t *)(v112 - 15);
                  v114.i64[0] = 0x2222222222222222;
                  v114.i64[1] = 0x2222222222222222;
                  v115 = vceqq_s8(v113, v114);
                  v116.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v116.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v117.i64[0] = 0x2020202020202020;
                  v117.i64[1] = 0x2020202020202020;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v113, v116), (int8x16_t)vcgtq_u8(v117, (uint8x16_t)v113)), v115);
                  v115.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  if (v115.i32[0])
                    break;
                  v112 += 16;
                  if (v112 >= (unint64_t)v111)
                    goto LABEL_1594;
                }
LABEL_214:
                v150 = (unsigned __int8 *)(v112 - 15);
LABEL_215:
                v22 = (__n128)vornq_s8(v1728, (int8x16_t)v22);
                v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                v111 = (int8x16_t *)&v150[v22.n128_u32[0]];
              }
LABEL_216:
              *i64 = v111;
LABEL_217:
              if ((unint64_t)v111 < v23 && v111->u8[0] == (_DWORD)v28)
              {
                *(_BYTE *)(v97 + 25) |= 1u;
                *(_QWORD *)(v97 + 32) = a3;
                *(_QWORD *)(v97 + 48) = (char *)v111->i64 + 1;
                *(_DWORD *)(v97 + 28) = *(_DWORD *)(v97 + 28) & 0x80000000 | ((_DWORD)v111 - (_DWORD)a3) & 0x7FFFFFFF;
                *(_BYTE *)(v97 + 24) = 4;
              }
              else
              {
                JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v1722, (size_t)a3, v28, a5, a6, a7, a8);
              }
              goto LABEL_151;
            }
LABEL_346:
            if ((unint64_t)a3 >= v23)
            {
LABEL_1645:
              v111 = (int8x16_t *)a3;
              v97 = v1720;
            }
            else
            {
              v203 = v9 + v23 - (_QWORD)a3 + 1;
              v111 = (int8x16_t *)a3;
              v97 = v1720;
              while (1)
              {
                v204 = v111->u8[0];
                v205 = v204 < 0x20 || v204 == 92;
                v206 = v205 || v204 == (_DWORD)v28;
                v207 = v206;
                if (v204 != 9 && v207)
                  break;
                v111 = (int8x16_t *)((char *)v111 + 1);
                *i64 = v111;
                if (v111 == (int8x16_t *)v203)
                  goto LABEL_1529;
              }
            }
            goto LABEL_217;
          }
          if (*(_BYTE *)(v1720 + 40))
          {
            a3 = (unsigned __int8 *)(v9 + 1);
            *i64 = v9 + 1;
            v14 = (int16x8_t *)v1723;
            goto LABEL_346;
          }
          v727 = WTF::fastCompactMalloc((WTF *)0x20);
          v440 = v727;
          v22.n128_u64[0] = 0x2900000002;
          v728 = "Single quotes (') are not allowed in JSON";
          goto LABEL_1536;
        }
        if (v108 != 6)
        {
          if (v108 != 5)
          {
            if (v108 - 18 >= 2)
            {
LABEL_227:
              *(_BYTE *)v1722 = v108;
              *i64 = v9 + 1;
              v97 = v1720;
              goto LABEL_151;
            }
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
            v440 = v1735.rlim_cur;
            if (!v1735.rlim_cur)
            {
              __break(0xC471u);
              JUMPOUT(0x198B13570);
            }
            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
            *(_QWORD *)(v440 + 8) = v440 + 20;
            *(_DWORD *)(v440 + 16) = 4;
            *(_DWORD *)(v440 + 36) = 656436837;
            v22 = *(__n128 *)"Unrecognized token '";
            *(_OWORD *)(v440 + 20) = *(_OWORD *)"Unrecognized token '";
            *(_BYTE *)(v440 + 40) = *(_BYTE *)v9;
            *(_BYTE *)(v440 + 41) = 39;
            goto LABEL_1019;
          }
          if ((_DWORD)v28 == 110)
          {
            if ((uint64_t)(v23 - v9) >= 4 && *(_WORD *)(v9 + 1) == 27765 && *(_BYTE *)(v9 + 3) == 108)
            {
LABEL_711:
              *i64 = v9 + 4;
              v359 = 13;
LABEL_712:
              *(_BYTE *)v1722 = v359;
              v97 = v1720;
              goto LABEL_151;
            }
          }
          else if ((_DWORD)v28 == 102)
          {
            if ((uint64_t)(v23 - v9) >= 5 && *(_WORD *)(v9 + 1) == 27745 && *(_WORD *)(v9 + 3) == 25971)
            {
LABEL_845:
              *i64 = v9 + 5;
              v359 = 12;
              goto LABEL_712;
            }
          }
          else if ((_DWORD)v28 == 116
                 && (uint64_t)(v23 - v9) >= 4
                 && *(_WORD *)(v9 + 1) == 30066
                 && *(_BYTE *)(v9 + 3) == 101)
          {
LABEL_1131:
            *i64 = v9 + 4;
            *(_BYTE *)v1722 = 11;
            goto LABEL_1026;
          }
          v489 = v9;
          *(_QWORD *)(v1720 + 32) = v9;
          v490 = v9;
          if (v9 < v23)
          {
            v491 = v23 - v9;
            v492 = v9 + v491;
            while (1)
            {
              v493 = *(unsigned __int8 *)v9;
              if (v493 != 36)
              {
                v494 = v493 != 95 && (v493 - 48) >= 0xA;
                if (v494 && (v493 | 0x20u) - 97 > 0x19)
                  goto LABEL_1211;
              }
              *i64 = ++v9;
              if (!--v491)
                goto LABEL_1210;
            }
          }
          goto LABEL_1212;
        }
        v184 = (_DWORD)v28 != 45 || !v107;
        v185 = (unsigned __int8 *)v9;
        if ((v184 & 1) == 0)
        {
          v185 = (unsigned __int8 *)(v9 + 1);
          *i64 = v9 + 1;
        }
        if ((unint64_t)v185 >= v23)
        {
LABEL_1484:
          v690 = WTF::fastCompactMalloc((WTF *)0x20);
          v691 = v690;
          v22.n128_u64[0] = 0xE00000002;
          v692 = "Invalid number";
          goto LABEL_1485;
        }
        v186 = *v185;
        if (v186 == 48)
        {
          v181 = v185 + 1;
          *i64 = v181;
        }
        else
        {
          if ((v186 - 49) > 8)
            goto LABEL_1484;
          v187 = v185 + 1;
          do
          {
            v181 = v187;
            *i64 = v187;
            if ((unint64_t)v187 >= v23)
              break;
            ++v187;
          }
          while (*v181 - 48 < 0xA);
        }
        if ((unint64_t)v181 >= v23)
          goto LABEL_521;
        v188 = *v181;
        if (v188 == 46)
        {
          *i64 = v181 + 1;
          if ((unint64_t)(v181 + 1) >= v23 || v181[1] - 48 > 9)
          {
            v690 = WTF::fastCompactMalloc((WTF *)0x20);
            v691 = v690;
            v22.n128_u64[0] = 0x2200000002;
            v692 = "Invalid digits after decimal point";
LABEL_1485:
            *(_QWORD *)v690 = v22.n128_u64[0];
            *(_QWORD *)(v690 + 8) = v692;
            *(_DWORD *)(v690 + 16) = 4;
            v441 = *(WTF::StringImpl **)v1709;
            *(_QWORD *)v1709 = v691;
            v97 = v1720;
            if (v441)
              goto LABEL_1024;
            goto LABEL_151;
          }
          v182 = v181 + 2;
          do
          {
            v181 = v182;
            *i64 = v182;
            if ((unint64_t)v182 >= v23)
              break;
            ++v182;
          }
          while (*v181 - 48 < 0xA);
        }
        else if (v188 != 69 && v188 != 101 && (uint64_t)&v181[-v9] <= 9)
        {
          *(_BYTE *)v1722 = 6;
          v189 = *(unsigned __int8 *)v9;
          if (v189 == 45)
            v176 = (unsigned __int8 *)(v9 + 1);
          else
            v176 = (unsigned __int8 *)v9;
          if (v176 >= v181)
          {
LABEL_506:
            v97 = v1720;
            if (v189 != 45)
            {
              v178 = 0;
LABEL_297:
              v22.n128_f64[0] = (double)v178;
              *(double *)(v97 + 32) = (double)v178;
              goto LABEL_151;
            }
LABEL_895:
            *(_QWORD *)(v97 + 32) = 0x8000000000000000;
            goto LABEL_151;
          }
          v178 = 0;
          v97 = v1720;
          do
          {
            v177 = *v176++;
            v178 = v177 + 10 * v178 - 48;
          }
          while (v176 < v181);
          if (v189 != 45)
            goto LABEL_297;
LABEL_452:
          if (v178)
          {
            v22.n128_f64[0] = (double)-v178;
            *(double *)(v97 + 32) = v22.n128_f64[0];
            goto LABEL_151;
          }
          goto LABEL_895;
        }
LABEL_521:
        if ((unint64_t)v181 < v23 && (*v181 | 0x20) == 0x65)
        {
          v276 = v181 + 1;
          *i64 = v181 + 1;
          if ((unint64_t)(v181 + 1) < v23)
          {
            v277 = *v276;
            if (v277 == 45 || v277 == 43)
            {
              v276 = v181 + 2;
              *i64 = v181 + 2;
            }
          }
          if ((unint64_t)v276 >= v23 || *v276 - 48 > 9)
          {
            v727 = WTF::fastCompactMalloc((WTF *)0x20);
            v440 = v727;
            v22.n128_u64[0] = 0x5D00000002;
            v728 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1536:
            *(_QWORD *)v727 = v22.n128_u64[0];
            *(_QWORD *)(v727 + 8) = v728;
            *(_DWORD *)(v727 + 16) = 4;
LABEL_1019:
            v441 = *(WTF::StringImpl **)v1709;
            *(_QWORD *)v1709 = v440;
            v97 = v1720;
            v14 = (int16x8_t *)v1723;
            if (!v441)
              goto LABEL_151;
LABEL_1024:
            if (*(_DWORD *)v441 == 2)
            {
              WTF::StringImpl::~StringImpl(v441, v439, (uint64_t)a3, v28, a5, a6, a7, a8);
              WTF::fastFree(v522, v523, v524, v525, v526, v527, v528, v529);
            }
            else
            {
              *(_DWORD *)v441 -= 2;
            }
LABEL_1026:
            v97 = v1720;
            goto LABEL_1027;
          }
          v278 = v276 + 1;
          while (1)
          {
            v181 = v278;
            *i64 = v278;
            if ((unint64_t)v278 >= v23)
              break;
            ++v278;
            v14 = (int16x8_t *)v1723;
            if (*v181 - 48 >= 0xA)
              goto LABEL_540;
          }
LABEL_1593:
          v14 = (int16x8_t *)v1723;
        }
        goto LABEL_540;
      case 5:
        v447 = *(_DWORD *)(v1720 + 28) & 0x7FFFFFFF;
        if (v447 >= 0xC8)
          v448 = 200;
        else
          v448 = *(_DWORD *)(v1720 + 28) & 0x7FFFFFFF;
        v449 = *(unsigned __int8 **)(v1720 + 32);
        v1735.rlim_cur = (rlim_t)"Unexpected identifier \"";
        LODWORD(v1735.rlim_max) = 23;
        v1732 = v449;
        v450 = v447 >= 0xC9;
        if (v447 >= 0xC9)
          v451 = 3;
        else
          v451 = 0;
        LODWORD(v1733) = v448;
        if (v450)
          v452 = "...";
        else
          v452 = "";
        v1730 = (rlimit *)v452;
        v1731 = v451;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v1729, (uint64_t)&v1735, (uint64_t)&v1732, (uint64_t)&v1730, 34);
        v453 = v1729;
        if (!v1729)
        {
          v636 = *(_DWORD *)(v1720 + 28);
          if ((v636 & 0x7FFFFFFFu) < 0xB
            || (JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()((uint64_t)&v1735, v636, *(_QWORD *)(v1720 + 32), 10), (v453 = v1735.rlim_cur) == 0))
          {
            v453 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v453 = 0x1500000002;
            *(_QWORD *)(v453 + 8) = "Unexpected identifier";
            *(_DWORD *)(v453 + 16) = 4;
          }
        }
        *(_DWORD *)v453 += 2;
        v454 = *(WTF::StringImpl **)(v1720 + 96);
        *(_QWORD *)(v1720 + 96) = v453;
        if (v454)
        {
          if (*(_DWORD *)v454 == 2)
          {
            WTF::StringImpl::~StringImpl(v454, v325, v326, v327, v328, v329, v330, v331);
            WTF::fastFree(v565, v566, v567, v568, v569, v570, v571, v572);
          }
          else
          {
            *(_DWORD *)v454 -= 2;
          }
        }
        if (*(_DWORD *)v453 != 2)
        {
          *(_DWORD *)v453 -= 2;
          return 0;
        }
        v333 = (WTF::StringImpl *)v453;
        goto LABEL_1248;
      case 6:
        v22.n128_u64[0] = *(_QWORD *)(v1720 + 32);
        if ((v22.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v138 = (int)v22.n128_f64[0], v22.n128_f64[0] == (double)(int)v138)
          && ((_DWORD)v138 || (v22.n128_u64[0] & 0x8000000000000000) == 0))
        {
          v13 = v138 | 0xFFFE000000000000;
        }
        else
        {
          v13 = v22.n128_u64[0] + 0x2000000000000;
        }
        v9 = *(_QWORD *)(v1720 + 48);
        v23 = *(_QWORD *)(v1720 + 56);
        if (v9 < v23)
        {
          if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v9] != 19)
          {
            v139 = 1;
            goto LABEL_193;
          }
          v159 = *(unsigned __int8 **)(v1720 + 56);
          v160 = (unsigned __int8 *)(v9 + 1);
          v161 = ~v9 + v23;
          do
          {
            v162 = v160;
            *i64 = v160;
            if (!v161)
              goto LABEL_248;
            ++v160;
            --v161;
          }
          while (JSC::tokenTypesOfLatin1Characters[*v162] == 19);
          v159 = v162;
LABEL_248:
          v139 = (unint64_t)v162 < v23;
          v9 = (unint64_t)v159;
          goto LABEL_193;
        }
        v139 = 0;
LABEL_193:
        if (v9 == v23)
          goto LABEL_825;
        *(_BYTE *)v1722 = 18;
        v28 = *(unsigned __int8 *)v9;
        v108 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v108 <= 4)
        {
          if (v108 != 4)
            goto LABEL_227;
          v140 = *(unsigned __int8 *)(v1720 + 40);
          if ((_DWORD)v28 != 39)
          {
            a3 = (unsigned __int8 *)(v9 + 1);
            *i64 = v9 + 1;
            if (!v140)
            {
              v141 = v23 - (_QWORD)a3;
              if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                goto LABEL_1827;
              v111 = (int8x16_t *)(v141 + v9 + 1);
              if (v141 < 0x10)
              {
                v398 = (int8x16_t *)(v9 + 1);
                v97 = v1720;
                if ((unsigned __int8 *)v23 == a3)
                  goto LABEL_216;
                do
                {
                  if (!JSC::safeStringLatin1CharactersInStrictJSON[v398->u8[0]])
                    goto LABEL_891;
                  v398 = (int8x16_t *)((char *)v398 + 1);
                  --v141;
                }
                while (v141);
              }
              else
              {
                v112 = v9 + 16;
                v97 = v1720;
                do
                {
                  v142 = *(int8x16_t *)(v112 - 15);
                  v143.i64[0] = 0x2222222222222222;
                  v143.i64[1] = 0x2222222222222222;
                  v144 = vceqq_s8(v142, v143);
                  v145.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v145.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v117.i64[0] = 0x2020202020202020;
                  v117.i64[1] = 0x2020202020202020;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v142, v145), (int8x16_t)vcgtq_u8(v117, (uint8x16_t)v142)), v144);
                  v144.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  if (v144.i32[0])
                    goto LABEL_214;
                  v112 += 16;
                }
                while (v112 < (unint64_t)v111);
LABEL_1594:
                if (v112 - 15 >= (unint64_t)v111)
                {
                  v97 = v1720;
                  v14 = (int16x8_t *)v1723;
                }
                else
                {
                  v150 = (unsigned __int8 *)&v111[-1];
                  v751 = v111[-1];
                  v752.i64[0] = 0x2222222222222222;
                  v752.i64[1] = 0x2222222222222222;
                  v753 = vceqq_s8(v751, v752);
                  v754.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v754.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v751, v754), (int8x16_t)vcgtq_u8(v117, (uint8x16_t)v751)), v753);
                  v753.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  v97 = v1720;
                  v14 = (int16x8_t *)v1723;
                  if (v753.i32[0])
                    goto LABEL_215;
                }
              }
              goto LABEL_216;
            }
LABEL_361:
            if ((unint64_t)a3 >= v23)
              goto LABEL_1645;
            v203 = v9 + v23 - (_QWORD)a3 + 1;
            v111 = (int8x16_t *)a3;
            v97 = v1720;
            while (1)
            {
              v208 = v111->u8[0];
              v209 = v208 < 0x20 || v208 == 92;
              v210 = v209 || v208 == (_DWORD)v28;
              v211 = v210;
              if (v208 != 9 && v211)
                goto LABEL_217;
              v111 = (int8x16_t *)((char *)v111 + 1);
              *i64 = v111;
              if (v111 == (int8x16_t *)v203)
              {
LABEL_1529:
                v111 = (int8x16_t *)v203;
                goto LABEL_217;
              }
            }
          }
          if (*(_BYTE *)(v1720 + 40))
          {
            a3 = (unsigned __int8 *)(v9 + 1);
            *i64 = v9 + 1;
            v14 = (int16x8_t *)v1723;
            goto LABEL_361;
          }
          v701 = WTF::fastCompactMalloc((WTF *)0x20);
          v442 = v701;
          v22.n128_u64[0] = 0x2900000002;
          v702 = "Single quotes (') are not allowed in JSON";
          goto LABEL_1491;
        }
        if (v108 != 6)
        {
          if (v108 == 5)
          {
            if ((_DWORD)v28 == 110)
            {
              if ((uint64_t)(v23 - v9) >= 4 && *(_WORD *)(v9 + 1) == 27765 && *(_BYTE *)(v9 + 3) == 108)
                goto LABEL_711;
            }
            else if ((_DWORD)v28 == 102)
            {
              if ((uint64_t)(v23 - v9) >= 5 && *(_WORD *)(v9 + 1) == 27745 && *(_WORD *)(v9 + 3) == 25971)
                goto LABEL_845;
            }
            else if ((_DWORD)v28 == 116
                   && (uint64_t)(v23 - v9) >= 4
                   && *(_WORD *)(v9 + 1) == 30066
                   && *(_BYTE *)(v9 + 3) == 101)
            {
              goto LABEL_1131;
            }
            v489 = v9;
            *(_QWORD *)(v1720 + 32) = v9;
            v490 = v9;
            if (v9 >= v23)
              goto LABEL_1212;
            v531 = v23 - v9;
            v492 = v9 + v531;
            while (1)
            {
              v532 = *(unsigned __int8 *)v9;
              if (v532 != 36)
              {
                v533 = v532 != 95 && (v532 - 48) >= 0xA;
                if (v533 && (v532 | 0x20u) - 97 > 0x19)
                  break;
              }
              *i64 = ++v9;
              if (!--v531)
              {
LABEL_1210:
                LODWORD(v9) = v492;
                break;
              }
            }
LABEL_1211:
            v490 = v9;
LABEL_1212:
            v97 = v1720;
            *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v490 - v489) & 0x7FFFFFFF;
            *(_BYTE *)(v97 + 24) = 5;
LABEL_1027:
            v14 = (int16x8_t *)v1723;
            goto LABEL_151;
          }
          if (v108 - 18 >= 2)
            goto LABEL_227;
          WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
          v442 = v1735.rlim_cur;
          if (!v1735.rlim_cur)
          {
            __break(0xC471u);
            JUMPOUT(0x198B13568);
          }
          *(_QWORD *)v1735.rlim_cur = 0x1600000002;
          *(_QWORD *)(v442 + 8) = v442 + 20;
          *(_DWORD *)(v442 + 16) = 4;
          *(_DWORD *)(v442 + 36) = 656436837;
          v22 = *(__n128 *)"Unrecognized token '";
          *(_OWORD *)(v442 + 20) = *(_OWORD *)"Unrecognized token '";
          *(_BYTE *)(v442 + 40) = *(_BYTE *)v9;
          *(_BYTE *)(v442 + 41) = 39;
LABEL_1023:
          v441 = *(WTF::StringImpl **)v1709;
          *(_QWORD *)v1709 = v442;
          if (!v441)
            goto LABEL_1026;
          goto LABEL_1024;
        }
        v190 = (_DWORD)v28 != 45 || !v139;
        v191 = (unsigned __int8 *)v9;
        if ((v190 & 1) == 0)
        {
          v191 = (unsigned __int8 *)(v9 + 1);
          *i64 = v9 + 1;
        }
        if ((unint64_t)v191 >= v23)
        {
LABEL_1490:
          v701 = WTF::fastCompactMalloc((WTF *)0x20);
          v442 = v701;
          v22.n128_u64[0] = 0xE00000002;
          v702 = "Invalid number";
          goto LABEL_1491;
        }
        v192 = *v191;
        if (v192 == 48)
        {
          v181 = v191 + 1;
          *i64 = v181;
        }
        else
        {
          if ((v192 - 49) > 8)
            goto LABEL_1490;
          v193 = v191 + 1;
          do
          {
            v181 = v193;
            *i64 = v193;
            if ((unint64_t)v193 >= v23)
              break;
            ++v193;
          }
          while (*v181 - 48 < 0xA);
        }
        if ((unint64_t)v181 >= v23)
          goto LABEL_538;
        v194 = *v181;
        if (v194 == 46)
        {
          *i64 = v181 + 1;
          if ((unint64_t)(v181 + 1) < v23 && v181[1] - 48 <= 9)
          {
            v183 = v181 + 2;
            do
            {
              v181 = v183;
              *i64 = v183;
              if ((unint64_t)v183 >= v23)
                break;
              ++v183;
            }
            while (*v181 - 48 < 0xA);
            goto LABEL_538;
          }
          v701 = WTF::fastCompactMalloc((WTF *)0x20);
          v442 = v701;
          v22.n128_u64[0] = 0x2200000002;
          v702 = "Invalid digits after decimal point";
LABEL_1491:
          *(_QWORD *)v701 = v22.n128_u64[0];
          *(_QWORD *)(v701 + 8) = v702;
          *(_DWORD *)(v701 + 16) = 4;
          goto LABEL_1023;
        }
        if (v194 != 69 && v194 != 101 && (uint64_t)&v181[-v9] <= 9)
        {
          *(_BYTE *)v1722 = 6;
          v189 = *(unsigned __int8 *)v9;
          if (v189 == 45)
            v179 = (unsigned __int8 *)(v9 + 1);
          else
            v179 = (unsigned __int8 *)v9;
          if (v179 >= v181)
            goto LABEL_506;
          v178 = 0;
          do
          {
            v180 = *v179++;
            v178 = v180 + 10 * v178 - 48;
          }
          while (v179 < v181);
          v97 = v1720;
          if (v189 != 45)
            goto LABEL_297;
          goto LABEL_452;
        }
LABEL_538:
        if ((unint64_t)v181 >= v23 || (*v181 | 0x20) != 0x65)
          goto LABEL_540;
        v721 = v181 + 1;
        *i64 = v181 + 1;
        if ((unint64_t)(v181 + 1) < v23)
        {
          v722 = *v721;
          if (v722 == 45 || v722 == 43)
          {
            v721 = v181 + 2;
            *i64 = v181 + 2;
          }
        }
        if ((unint64_t)v721 >= v23 || *v721 - 48 > 9)
        {
          v701 = WTF::fastCompactMalloc((WTF *)0x20);
          v442 = v701;
          v22.n128_u64[0] = 0x5D00000002;
          v702 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
          goto LABEL_1491;
        }
        v723 = v721 + 1;
        do
        {
          v181 = v723;
          *i64 = v723;
          if ((unint64_t)v723 >= v23)
            goto LABEL_1593;
          ++v723;
          v14 = (int16x8_t *)v1723;
        }
        while (*v181 - 48 < 0xA);
LABEL_540:
        *(_BYTE *)v1722 = 6;
        LODWORD(v23) = (_DWORD)v181 - v9;
        if ((uint64_t)&v181[-v9] < 0)
          goto LABEL_1827;
        v1735.rlim_cur = 0;
        fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v9, v181, &v1735.rlim_cur, 0x2E00000005);
        v22.n128_u64[0] = v1735.rlim_cur;
        v97 = v1720;
        *(_QWORD *)(v1720 + 32) = v1735.rlim_cur;
LABEL_151:
        if (!v13)
          return 0;
LABEL_152:
        v118 = *(_QWORD *)v97;
        v9 = (rlim_cur + 1);
        v119 = v14->i8[4];
        v120 = v119 & 0x1F;
        if (v120 - 4 >= 0xA)
        {
          v279 = v120 > 3 || v120 == 2;
          if (v279 && (v14->i8[4] & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198B12CB4);
          }
LABEL_537:
          JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)v14, v118, (JSC::VM *)rlim_cur, v13, 0, 0, a7, a8, (int32x4_t)v22);
          goto LABEL_158;
        }
        v121 = v14->i64[1];
        if (*(_DWORD *)(v121 - 4) <= rlim_cur)
          goto LABEL_537;
        a2 = *(_QWORD *)(v118 + 56);
        v122 = v119 & 0xF;
        if ((v122 - 8) >= 2)
        {
          switch(v122)
          {
            case 0:
            case 1:
              JSC::JSObject::setIndexQuicklyForTypedArray((uint64_t)v14, rlim_cur, v13);
              break;
            case 4:
            case 5:
              if (v13 > 0xFFFDFFFFFFFFFFFFLL)
                goto LABEL_155;
              JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)v14, (JSC::VM *)a2, rlim_cur, v13, a5, a6, a7, a8);
              break;
            case 6:
            case 7:
              if (v13 >> 49)
              {
                v22.n128_f64[0] = (double)(int)v13;
                if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
                  v22.n128_u64[0] = v13 - 0x2000000000000;
                *(_QWORD *)(v121 + 8 * rlim_cur) = v22.n128_u64[0];
LABEL_493:
                if (*(_DWORD *)(v121 - 8) <= rlim_cur)
                  *(_DWORD *)(v121 - 8) = v9;
              }
              else
              {
                JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(v1723, (JSC::VM *)a2, rlim_cur, v13, a5, a6, a7, a8, v22.n128_f64[0]);
              }
              break;
            case 10:
            case 11:
            case 12:
            case 13:
              v639 = v121 + 8 * rlim_cur;
              v14 = *(int16x8_t **)(v639 + 16);
              *(_QWORD *)(v639 + 16) = v13;
              if ((v13 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v1723 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1723);
              }
              if (v14)
                break;
              ++*(_DWORD *)(v121 + 12);
              goto LABEL_493;
            default:
              __break(0xC471u);
              JUMPOUT(0x198B12B7CLL);
          }
        }
        else
        {
LABEL_155:
          *(_QWORD *)(v121 + 8 * rlim_cur) = v13;
          if (*(_DWORD *)(v121 - 8) <= rlim_cur)
            *(_DWORD *)(v121 - 8) = v9;
          if ((v13 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v1723 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1723);
          }
        }
LABEL_158:
        v13 = (unint64_t)v1725;
        if (*((_DWORD *)v1725 + 20))
        {
          v375 = *((_DWORD *)v1725 + 20);
          if ((v375 & 0x27) != 0 && (v375 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC *)((char *)v1725 + 64), 7u, (uint64_t)a3, v28, a5, a6, a7, a8);
          if (*(_QWORD *)(v13 + 16))
            return 0;
        }
        v123 = *(unsigned __int8 *)v1722;
        if (v123 == 10)
        {
          rlim_cur = *(_QWORD *)(v1720 + 48);
          v23 = *(_QWORD *)(v1720 + 56);
          if (rlim_cur >= v23)
          {
            v124 = 0;
            v14 = (int16x8_t *)v1723;
          }
          else
          {
            v14 = (int16x8_t *)v1723;
            if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
            {
              v134 = *(unsigned __int8 **)(v1720 + 56);
              v135 = (unsigned __int8 *)(rlim_cur + 1);
              v136 = ~rlim_cur + v23;
              while (1)
              {
                v137 = v135;
                *i64 = v135;
                if (!v136)
                  break;
                ++v135;
                --v136;
                if (JSC::tokenTypesOfLatin1Characters[*v137] != 19)
                {
                  v134 = v137;
                  break;
                }
              }
              v124 = (unint64_t)v137 < v23;
              rlim_cur = (rlim_t)v134;
            }
            else
            {
              v124 = 1;
            }
          }
          if (rlim_cur == v23)
          {
            LOBYTE(v48) = 14;
            goto LABEL_625;
          }
          *(_BYTE *)v1722 = 18;
          v28 = *(unsigned __int8 *)rlim_cur;
          LODWORD(v48) = JSC::tokenTypesOfLatin1Characters[v28];
          if (v48 <= 4)
          {
            if ((_DWORD)v48 == 4)
            {
              v125 = *(unsigned __int8 *)(v1720 + 40);
              if ((_DWORD)v28 == 39)
              {
                if (*(_BYTE *)(v1720 + 40))
                {
                  a3 = (unsigned __int8 *)(rlim_cur + 1);
                  *i64 = rlim_cur + 1;
                  v13 = (unint64_t)v1725;
                  v14 = (int16x8_t *)v1723;
                  goto LABEL_275;
                }
                v48 = WTF::fastCompactMalloc((WTF *)0x20);
                v22.n128_u64[0] = 0x2900000002;
                *(_QWORD *)v48 = 0x2900000002;
                v683 = "Single quotes (') are not allowed in JSON";
                goto LABEL_1476;
              }
              a3 = (unsigned __int8 *)(rlim_cur + 1);
              *i64 = rlim_cur + 1;
              if (!v125)
              {
                v126 = v23 - (_QWORD)a3;
                if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                  goto LABEL_1827;
                v127 = (int8x16_t *)(v126 + rlim_cur + 1);
                if (v126 < 0x10)
                {
                  v376 = (int8x16_t *)(rlim_cur + 1);
                  if ((unsigned __int8 *)v23 == a3)
                    goto LABEL_206;
                  do
                  {
                    if (!JSC::safeStringLatin1CharactersInStrictJSON[v376->u8[0]])
                    {
                      v127 = v376;
                      goto LABEL_206;
                    }
                    v376 = (int8x16_t *)((char *)v376 + 1);
                    --v126;
                  }
                  while (v126);
                  goto LABEL_206;
                }
                v128 = rlim_cur + 16;
                while (1)
                {
                  v129 = *(int8x16_t *)(v128 - 15);
                  v130.i64[0] = 0x2222222222222222;
                  v130.i64[1] = 0x2222222222222222;
                  v131 = vceqq_s8(v129, v130);
                  v132.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v132.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v133.i64[0] = 0x2020202020202020;
                  v133.i64[1] = 0x2020202020202020;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v129, v132), (int8x16_t)vcgtq_u8(v133, (uint8x16_t)v129)), v131);
                  v131.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  if (v131.i32[0])
                    break;
                  v128 += 16;
                  if (v128 >= (unint64_t)v127)
                  {
                    if (v128 - 15 >= (unint64_t)v127)
                    {
                      v13 = (unint64_t)v1725;
                      v14 = (int16x8_t *)v1723;
                      goto LABEL_206;
                    }
                    v146 = (unsigned __int8 *)&v127[-1];
                    v743 = v127[-1];
                    v744.i64[0] = 0x2222222222222222;
                    v744.i64[1] = 0x2222222222222222;
                    v745 = vceqq_s8(v743, v744);
                    v746.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v746.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v743, v746), (int8x16_t)vcgtq_u8(v133, (uint8x16_t)v743)), v745);
                    v745.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                    v13 = (unint64_t)v1725;
                    v14 = (int16x8_t *)v1723;
                    if (!v745.i32[0])
                    {
LABEL_206:
                      *i64 = v127;
                      goto LABEL_207;
                    }
LABEL_205:
                    v22 = (__n128)vornq_s8(v1728, (int8x16_t)v22);
                    v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                    v127 = (int8x16_t *)&v146[v22.n128_u32[0]];
                    goto LABEL_206;
                  }
                }
                v146 = (unsigned __int8 *)(v128 - 15);
                goto LABEL_205;
              }
LABEL_275:
              if ((unint64_t)a3 >= v23)
              {
                v127 = (int8x16_t *)a3;
                goto LABEL_207;
              }
              v127 = (int8x16_t *)a3;
              while (1)
              {
                v172 = v127->u8[0];
                v173 = v172 < 0x20 || v172 == 92;
                v174 = v173 || v172 == (_DWORD)v28;
                v175 = v174;
                if (v172 != 9 && v175)
                  break;
                v127 = (int8x16_t *)((char *)v127 + 1);
                *i64 = v127;
                if (v127 == (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1))
                {
                  v127 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
                  break;
                }
              }
LABEL_207:
              if ((unint64_t)v127 >= v23 || v127->u8[0] != (_DWORD)v28)
              {
                LODWORD(v48) = JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v1722, (size_t)a3, v28, a5, a6, a7, a8);
                goto LABEL_178;
              }
              v147 = v1720;
              *(_BYTE *)(v1720 + 25) |= 1u;
              *(_QWORD *)(v147 + 32) = a3;
              *(_QWORD *)(v147 + 48) = (char *)v127->i64 + 1;
              *(_DWORD *)(v147 + 28) = *(_DWORD *)(v147 + 28) & 0x80000000 | ((_DWORD)v127 - (_DWORD)a3) & 0x7FFFFFFF;
              LOBYTE(v48) = 4;
              *(_BYTE *)(v147 + 24) = 4;
              rlim_cur = v9;
            }
            else
            {
LABEL_177:
              *(_BYTE *)v1722 = v48;
              *i64 = rlim_cur + 1;
LABEL_178:
              rlim_cur = v9;
              if ((_DWORD)v48 == 1)
              {
                v324 = WTF::fastCompactMalloc((WTF *)0x20);
                v332 = v324;
                *(_QWORD *)v324 = 0x2F00000002;
                *(_QWORD *)(v324 + 8) = "Unexpected comma at the end of array expression";
                *(_DWORD *)(v324 + 16) = 4;
                v333 = *(WTF::StringImpl **)(v1720 + 96);
                *(_QWORD *)(v1720 + 96) = v332;
                if (!v333)
                  return 0;
LABEL_612:
                v334 = *(_DWORD *)v333 - 2;
                if (*(_DWORD *)v333 == 2)
                {
LABEL_1248:
                  WTF::StringImpl::~StringImpl(v333, v325, v326, v327, v328, v329, v330, v331);
                  WTF::fastFree(v557, v558, v559, v560, v561, v562, v563, v564);
                  return 0;
                }
                v1723 = 0;
LABEL_614:
                *(_DWORD *)v333 = v334;
                return v1723;
              }
            }
            continue;
          }
          if ((_DWORD)v48 == 6)
          {
            v163 = (_DWORD)v28 != 45 || !v124;
            v164 = (unsigned __int8 *)rlim_cur;
            if ((v163 & 1) == 0)
            {
              v164 = (unsigned __int8 *)(rlim_cur + 1);
              *i64 = rlim_cur + 1;
            }
            if ((unint64_t)v164 >= v23)
              goto LABEL_1413;
            v165 = *v164;
            if (v165 == 48)
            {
              v148 = v164 + 1;
              *i64 = v148;
LABEL_260:
              if ((unint64_t)v148 >= v23)
                goto LABEL_443;
              v167 = *v148;
              if (v167 == 46)
              {
                *i64 = v148 + 1;
                if ((unint64_t)(v148 + 1) >= v23 || v148[1] - 48 > 9)
                {
                  v48 = WTF::fastCompactMalloc((WTF *)0x20);
                  v22.n128_u64[0] = 0x2200000002;
                  *(_QWORD *)v48 = 0x2200000002;
                  v637 = "Invalid digits after decimal point";
                  goto LABEL_1414;
                }
                v149 = v148 + 2;
                do
                {
                  v148 = v149;
                  *i64 = v149;
                  if ((unint64_t)v149 >= v23)
                    break;
                  ++v149;
                }
                while (*v148 - 48 < 0xA);
LABEL_443:
                if ((unint64_t)v148 >= v23 || (*v148 | 0x20) != 0x65)
                  goto LABEL_445;
                v654 = v148 + 1;
                *i64 = v148 + 1;
                if ((unint64_t)(v148 + 1) < v23)
                {
                  v655 = *v654;
                  if (v655 == 45 || v655 == 43)
                  {
                    v654 = v148 + 2;
                    *i64 = v148 + 2;
                  }
                }
                if ((unint64_t)v654 < v23 && *v654 - 48 <= 9)
                {
                  v656 = v654 + 1;
                  while (1)
                  {
                    v148 = v656;
                    *i64 = v656;
                    if ((unint64_t)v656 >= v23)
                      break;
                    ++v656;
                    v13 = (unint64_t)v1725;
                    v14 = (int16x8_t *)v1723;
                    if (*v148 - 48 >= 0xA)
                      goto LABEL_445;
                  }
                  v13 = (unint64_t)v1725;
                  v14 = (int16x8_t *)v1723;
LABEL_445:
                  *(_BYTE *)v1722 = 6;
                  LODWORD(v23) = (_DWORD)v148 - rlim_cur;
                  if ((uint64_t)&v148[-rlim_cur] < 0)
                    goto LABEL_1827;
                  v1735.rlim_cur = 0;
                  fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v148, &v1735.rlim_cur, 0x2E00000005);
                  v22.n128_u64[0] = v1735.rlim_cur;
LABEL_273:
                  *(_QWORD *)(v1720 + 32) = v22.n128_u64[0];
                  goto LABEL_274;
                }
                v48 = WTF::fastCompactMalloc((WTF *)0x20);
                v22.n128_u64[0] = 0x5D00000002;
                *(_QWORD *)v48 = 0x5D00000002;
                v683 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1476:
                *(_QWORD *)(v48 + 8) = v683;
                *(_DWORD *)(v48 + 16) = 4;
                v26 = *(_QWORD *)v1709;
                *(_QWORD *)v1709 = v48;
                LOBYTE(v48) = 18;
                rlim_cur = v9;
                v13 = (unint64_t)v1725;
                v14 = (int16x8_t *)v1723;
                if (v26)
                {
LABEL_1415:
                  if (*(_DWORD *)v26 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                    WTF::fastFree(v693, v694, v695, v696, v697, v698, v699, v700);
                    LOBYTE(v48) = 18;
                  }
                  else
                  {
                    *(_DWORD *)v26 -= 2;
                  }
                  goto LABEL_1007;
                }
              }
              else
              {
                if (v167 == 69 || v167 == 101 || (uint64_t)&v148[-rlim_cur] > 9)
                  goto LABEL_443;
                *(_BYTE *)v1722 = 6;
                v168 = *(unsigned __int8 *)rlim_cur;
                if (v168 == 45)
                  v169 = (unsigned __int8 *)(rlim_cur + 1);
                else
                  v169 = (unsigned __int8 *)rlim_cur;
                if (v169 >= v148)
                {
                  if (v168 != 45)
                  {
                    v170 = 0;
LABEL_272:
                    v22.n128_f64[0] = (double)v170;
                    goto LABEL_273;
                  }
                }
                else
                {
                  v170 = 0;
                  do
                  {
                    v171 = *v169++;
                    v170 = v171 + 10 * v170 - 48;
                  }
                  while (v169 < v148);
                  if (v168 != 45)
                    goto LABEL_272;
                  if (v170)
                  {
                    v22.n128_f64[0] = (double)-v170;
                    goto LABEL_273;
                  }
                }
                *(_QWORD *)(v1720 + 32) = 0x8000000000000000;
LABEL_274:
                LOBYTE(v48) = 6;
                rlim_cur = v9;
              }
            }
            else
            {
              if ((v165 - 49) <= 8)
              {
                v166 = v164 + 1;
                do
                {
                  v148 = v166;
                  *i64 = v166;
                  if ((unint64_t)v166 >= v23)
                    break;
                  ++v166;
                }
                while (*v148 - 48 < 0xA);
                goto LABEL_260;
              }
LABEL_1413:
              v48 = WTF::fastCompactMalloc((WTF *)0x20);
              v22.n128_u64[0] = 0xE00000002;
              *(_QWORD *)v48 = 0xE00000002;
              v637 = "Invalid number";
LABEL_1414:
              *(_QWORD *)(v48 + 8) = v637;
              *(_DWORD *)(v48 + 16) = 4;
              v26 = *(_QWORD *)v1709;
              *(_QWORD *)v1709 = v48;
              LOBYTE(v48) = 18;
              rlim_cur = v9;
              if (v26)
                goto LABEL_1415;
            }
            continue;
          }
          if ((_DWORD)v48 != 5)
          {
            if ((v48 - 18) >= 2)
              goto LABEL_177;
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
            v417 = v1735.rlim_cur;
            if (!v1735.rlim_cur)
            {
              __break(0xC471u);
              JUMPOUT(0x198B13548);
            }
            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
            *(_QWORD *)(v417 + 8) = v417 + 20;
            *(_DWORD *)(v417 + 16) = 4;
            *(_DWORD *)(v417 + 36) = 656436837;
            v22 = *(__n128 *)"Unrecognized token '";
            *(_OWORD *)(v417 + 20) = *(_OWORD *)"Unrecognized token '";
            *(_BYTE *)(v417 + 40) = *(_BYTE *)rlim_cur;
            *(_BYTE *)(v417 + 41) = 39;
            v26 = *(_QWORD *)v1709;
            *(_QWORD *)v1709 = v417;
            LOBYTE(v48) = 18;
            rlim_cur = v9;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v26, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v28, a5, a6, a7, a8);
                WTF::fastFree(v481, v482, v483, v484, v485, v486, v487, v488);
                LOBYTE(v48) = 18;
              }
              else
              {
                *(_DWORD *)v26 -= 2;
              }
              rlim_cur = v9;
            }
            continue;
          }
          if ((_DWORD)v28 == 110)
          {
            if ((uint64_t)(v23 - rlim_cur) < 4 || *(_WORD *)(rlim_cur + 1) != 27765 || *(_BYTE *)(rlim_cur + 3) != 108)
              goto LABEL_1084;
            *i64 = rlim_cur + 4;
            LOBYTE(v48) = 13;
            goto LABEL_625;
          }
          if ((_DWORD)v28 == 102)
          {
            if ((uint64_t)(v23 - rlim_cur) < 5 || *(_WORD *)(rlim_cur + 1) != 27745 || *(_WORD *)(rlim_cur + 3) != 25971)
              goto LABEL_1084;
            *i64 = rlim_cur + 5;
            LOBYTE(v48) = 12;
LABEL_625:
            *(_BYTE *)v1722 = v48;
            rlim_cur = v9;
            continue;
          }
          if ((_DWORD)v28 == 116
            && (uint64_t)(v23 - rlim_cur) >= 4
            && *(_WORD *)(rlim_cur + 1) == 30066
            && *(_BYTE *)(rlim_cur + 3) == 101)
          {
            *i64 = rlim_cur + 4;
            LOBYTE(v48) = 11;
            *(_BYTE *)v1722 = 11;
          }
          else
          {
LABEL_1084:
            v456 = rlim_cur;
            *(_QWORD *)(v1720 + 32) = rlim_cur;
            v457 = rlim_cur;
            if (rlim_cur < v23)
            {
              v458 = v23 - rlim_cur;
              v459 = rlim_cur + v458;
              while (1)
              {
                v460 = *(unsigned __int8 *)rlim_cur;
                if (v460 != 36)
                {
                  v461 = v460 != 95 && (v460 - 48) >= 0xA;
                  if (v461 && (v460 | 0x20u) - 97 > 0x19)
                    break;
                }
                *i64 = ++rlim_cur;
                if (!--v458)
                {
                  LODWORD(rlim_cur) = v459;
                  break;
                }
              }
              v457 = rlim_cur;
            }
            v463 = v457 - v456;
            v464 = v1720;
            *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | v463 & 0x7FFFFFFF;
            LOBYTE(v48) = 5;
            *(_BYTE *)(v464 + 24) = 5;
          }
LABEL_1007:
          rlim_cur = v9;
          v13 = (unint64_t)v1725;
          goto LABEL_111;
        }
        if (v123 != 1)
        {
          v94 = v1720;
          v95 = 1;
          goto LABEL_102;
        }
        v220 = v1720;
        rlim_cur = *(_QWORD *)(v1720 + 48);
        v23 = *(_QWORD *)(v1720 + 56);
        a2 = v1722;
        if (rlim_cur >= v23)
        {
          v221 = 0;
        }
        else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)rlim_cur] == 19)
        {
          v241 = *(unsigned __int8 **)(v1720 + 56);
          v242 = (unsigned __int8 *)(rlim_cur + 1);
          v243 = ~rlim_cur + v23;
          while (1)
          {
            v244 = v242;
            *i64 = v242;
            if (!v243)
              break;
            ++v242;
            --v243;
            if (JSC::tokenTypesOfLatin1Characters[*v244] != 19)
            {
              v241 = v244;
              break;
            }
          }
          v221 = (unint64_t)v244 < v23;
          rlim_cur = (rlim_t)v241;
        }
        else
        {
          v221 = 1;
        }
        if (rlim_cur == v23)
        {
          *(_BYTE *)a2 = 14;
          return v1723;
        }
        *(_BYTE *)a2 = 18;
        v28 = *(unsigned __int8 *)rlim_cur;
        v222 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v222 > 4)
        {
          if (v222 != 6)
          {
            if (v222 != 5)
            {
              if (v222 - 18 >= 2)
                goto LABEL_397;
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
              v472 = v1735.rlim_cur;
              if (!v1735.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B13A54);
              }
LABEL_1099:
              *(_QWORD *)v472 = 0x1600000002;
              *(_QWORD *)(v472 + 8) = v472 + 20;
              *(_DWORD *)(v472 + 16) = 4;
              *(_DWORD *)(v472 + 36) = 656436837;
              *(_OWORD *)(v472 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v472 + 40) = *(_BYTE *)rlim_cur;
              *(_BYTE *)(v472 + 41) = 39;
              goto LABEL_1100;
            }
            if ((_DWORD)v28 == 110)
            {
              if ((uint64_t)(v23 - rlim_cur) >= 4
                && *(_WORD *)(rlim_cur + 1) == 27765
                && *(_BYTE *)(rlim_cur + 3) == 108)
              {
                *i64 = rlim_cur + 4;
                *(_BYTE *)a2 = 13;
                return v1723;
              }
              goto LABEL_1274;
            }
            if ((_DWORD)v28 == 102)
            {
              if ((uint64_t)(v23 - rlim_cur) >= 5
                && *(_WORD *)(rlim_cur + 1) == 27745
                && *(_WORD *)(rlim_cur + 3) == 25971)
              {
                *i64 = rlim_cur + 5;
                *(_BYTE *)a2 = 12;
                return v1723;
              }
LABEL_1274:
              v573 = rlim_cur;
              *(_QWORD *)(v1720 + 32) = rlim_cur;
              v574 = rlim_cur;
              if (rlim_cur < v23)
              {
                v581 = v23 - rlim_cur;
                v576 = rlim_cur + v581;
                while (1)
                {
                  v582 = *(unsigned __int8 *)rlim_cur;
                  if (v582 != 36)
                  {
                    v583 = v582 != 95 && (v582 - 48) >= 0xA;
                    if (v583 && (v582 | 0x20u) - 97 > 0x19)
                      break;
                  }
                  *i64 = ++rlim_cur;
                  if (!--v581)
                    goto LABEL_1285;
                }
LABEL_1286:
                v574 = rlim_cur;
                goto LABEL_1287;
              }
              goto LABEL_1287;
            }
            if ((_DWORD)v28 != 116
              || (uint64_t)(v23 - rlim_cur) < 4
              || *(_WORD *)(rlim_cur + 1) != 30066
              || *(_BYTE *)(rlim_cur + 3) != 101)
            {
              goto LABEL_1274;
            }
            goto LABEL_1193;
          }
          v262 = (_DWORD)v28 != 45 || !v221;
          v263 = (unsigned __int8 *)rlim_cur;
          if ((v262 & 1) == 0)
          {
            v263 = (unsigned __int8 *)(rlim_cur + 1);
            *i64 = rlim_cur + 1;
          }
          if ((unint64_t)v263 < v23)
          {
            v264 = *v263;
            if (v264 == 48)
            {
              v266 = v263 + 1;
              *i64 = v266;
LABEL_475:
              if ((unint64_t)v266 >= v23)
              {
LABEL_677:
                if ((unint64_t)v266 >= v23 || (*v266 | 0x20) != 0x65)
                {
LABEL_679:
                  *(_BYTE *)a2 = 6;
                  LODWORD(v23) = (_DWORD)v266 - rlim_cur;
                  if ((uint64_t)&v266[-rlim_cur] < 0)
                    goto LABEL_1827;
                  v1735.rlim_cur = 0;
                  fast_float::from_chars_advanced<double,char>((unsigned __int8 *)rlim_cur, v266, &v1735.rlim_cur, 0x2E00000005);
                  *(_QWORD *)(v220 + 32) = v1735.rlim_cur;
                  return v1723;
                }
                v740 = v266 + 1;
                *i64 = v266 + 1;
                if ((unint64_t)(v266 + 1) < v23)
                {
                  v741 = *v740;
                  if (v741 == 45 || v741 == 43)
                  {
                    v740 = v266 + 2;
                    *i64 = v266 + 2;
                  }
                }
                if ((unint64_t)v740 < v23 && *v740 - 48 <= 9)
                {
                  v742 = v740 + 1;
                  v220 = v1720;
                  a2 = v1722;
                  while (1)
                  {
                    v266 = v742;
                    *i64 = v742;
                    if ((unint64_t)v742 >= v23)
                      break;
                    ++v742;
                    if (*v266 - 48 >= 0xA)
                      goto LABEL_679;
                  }
                  v220 = v1720;
                  a2 = v1722;
                  goto LABEL_679;
                }
                goto LABEL_1624;
              }
              v267 = *v266;
              if (v267 != 46)
              {
                if (v267 != 69 && v267 != 101 && (uint64_t)&v266[-rlim_cur] <= 9)
                {
                  *(_BYTE *)a2 = 6;
                  v268 = *(unsigned __int8 *)rlim_cur;
                  if (v268 == 45)
                    v269 = (unsigned __int8 *)(rlim_cur + 1);
                  else
                    v269 = (unsigned __int8 *)rlim_cur;
                  if (v269 >= v266)
                  {
                    if (v268 != 45)
                    {
                      v270 = 0;
LABEL_487:
                      *(double *)(v220 + 32) = (double)v270;
                      return v1723;
                    }
                  }
                  else
                  {
                    v270 = 0;
                    do
                    {
                      v271 = *v269++;
                      v270 = v271 + 10 * v270 - 48;
                    }
                    while (v269 < v266);
                    if (v268 != 45)
                      goto LABEL_487;
                    if (v270)
                    {
                      v270 = -v270;
                      goto LABEL_487;
                    }
                  }
                  *(_QWORD *)(v220 + 32) = 0x8000000000000000;
                  return v1723;
                }
                goto LABEL_677;
              }
              *i64 = v266 + 1;
              if ((unint64_t)(v266 + 1) < v23 && v266[1] - 48 <= 9)
              {
                v357 = v266 + 2;
                do
                {
                  v266 = v357;
                  *i64 = v357;
                  if ((unint64_t)v357 >= v23)
                    break;
                  ++v357;
                }
                while (*v266 - 48 < 0xA);
                goto LABEL_677;
              }
              goto LABEL_1550;
            }
            if ((v264 - 49) <= 8)
            {
              v265 = v263 + 1;
              do
              {
                v266 = v265;
                *i64 = v265;
                if ((unint64_t)v265 >= v23)
                  break;
                ++v265;
              }
              while (*v266 - 48 < 0xA);
              goto LABEL_475;
            }
          }
LABEL_1514:
          v718 = WTF::fastCompactMalloc((WTF *)0x20);
          v472 = v718;
          v719 = 0xE00000002;
          v720 = "Invalid number";
LABEL_1515:
          *(_QWORD *)v718 = v719;
          *(_QWORD *)(v718 + 8) = v720;
          *(_DWORD *)(v718 + 16) = 4;
LABEL_1100:
          v333 = *(WTF::StringImpl **)v1709;
          *(_QWORD *)v1709 = v472;
          if (!v333)
            return v1723;
          v334 = *(_DWORD *)v333 - 2;
          if (*(_DWORD *)v333 == 2)
          {
            WTF::StringImpl::~StringImpl(v333, v465, v466, v467, v468, v469, v470, v471);
            WTF::fastFree(v473, v474, v475, v476, v477, v478, v479, v480);
            return v1723;
          }
          goto LABEL_614;
        }
        if (v222 != 4)
        {
LABEL_397:
          *(_BYTE *)a2 = v222;
LABEL_398:
          *i64 = rlim_cur + 1;
          return v1723;
        }
        v223 = *(unsigned __int8 *)(v220 + 40);
        if ((_DWORD)v28 == 39)
        {
          if (*(_BYTE *)(v220 + 40))
          {
            a3 = (unsigned __int8 *)(rlim_cur + 1);
            *i64 = rlim_cur + 1;
            v220 = v1720;
            a2 = v1722;
            goto LABEL_1599;
          }
          goto LABEL_1813;
        }
        a3 = (unsigned __int8 *)(rlim_cur + 1);
        *i64 = rlim_cur + 1;
        if (!v223)
        {
          v224 = v23 - (_QWORD)a3;
          if ((uint64_t)(v23 - (_QWORD)a3) < 0)
            goto LABEL_1827;
          v225 = (int8x16_t *)(v224 + rlim_cur + 1);
          if (v224 >= 0x10)
          {
            v226 = rlim_cur + 16;
            v227.i64[0] = 0x2222222222222222;
            v227.i64[1] = 0x2222222222222222;
            v228.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
            v228.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
            v229.i64[0] = 0x2020202020202020;
            v229.i64[1] = 0x2020202020202020;
            while (1)
            {
              v230 = *(int8x16_t *)(v226 - 15);
              v231 = vceqq_s8(v230, v227);
              v232 = vorrq_s8(vorrq_s8(vceqq_s8(v230, v228), (int8x16_t)vcgtq_u8(v229, (uint8x16_t)v230)), v231);
              v231.i8[0] = vmaxvq_u8((uint8x16_t)v232);
              if (v231.i32[0])
                break;
              v226 += 16;
              if (v226 >= (unint64_t)v225)
              {
                if (v226 - 15 >= (unint64_t)v225)
                  goto LABEL_951;
                v233 = (unsigned __int8 *)&v225[-1];
                v234 = v225[-1];
                v235.i64[0] = 0x2222222222222222;
                v235.i64[1] = 0x2222222222222222;
                v236 = vceqq_s8(v234, v235);
                v237.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v237.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v238.i64[0] = 0x2020202020202020;
                v238.i64[1] = 0x2020202020202020;
                v239 = vorrq_s8(vceqq_s8(v234, v237), (int8x16_t)vcgtq_u8(v238, (uint8x16_t)v234));
                v232 = vorrq_s8(v239, v236);
                v239.i8[0] = vmaxvq_u8((uint8x16_t)v232);
                v220 = v1720;
                a2 = v1722;
                if (!v239.i32[0])
                {
LABEL_407:
                  *i64 = v225;
                  goto LABEL_408;
                }
LABEL_406:
                v245 = (uint8x16_t)vornq_s8(v1728, v232);
                v245.i8[0] = vminvq_u8(v245);
                v225 = (int8x16_t *)&v233[v245.u32[0]];
                goto LABEL_407;
              }
            }
            v233 = (unsigned __int8 *)(v226 - 15);
            goto LABEL_406;
          }
          if ((unsigned __int8 *)v23 != a3)
          {
            v419 = (int8x16_t *)(rlim_cur + 1);
            while (JSC::safeStringLatin1CharactersInStrictJSON[v419->u8[0]])
            {
              v419 = (int8x16_t *)((char *)v419 + 1);
              if (!--v224)
                goto LABEL_951;
            }
            v225 = v419;
          }
LABEL_951:
          v220 = v1720;
          a2 = v1722;
          goto LABEL_407;
        }
LABEL_1599:
        if ((unint64_t)a3 >= v23)
        {
          v225 = (int8x16_t *)a3;
        }
        else
        {
          v225 = (int8x16_t *)a3;
          while (1)
          {
            v755 = v225->u8[0];
            v756 = v755 < 0x20 || v755 == 92;
            v757 = v756 || v755 == (_DWORD)v28;
            v758 = v757;
            if (v755 != 9 && v758)
              break;
            v225 = (int8x16_t *)((char *)v225 + 1);
            *i64 = v225;
            if (v225 == (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1))
            {
              v225 = (int8x16_t *)(rlim_cur + v23 - (_QWORD)a3 + 1);
              break;
            }
          }
        }
LABEL_408:
        if ((unint64_t)v225 < v23 && v225->u8[0] == (_DWORD)v28)
        {
          *(_BYTE *)(v220 + 25) |= 1u;
          *(_QWORD *)(v220 + 32) = a3;
          *(_QWORD *)(v220 + 48) = (char *)v225->i64 + 1;
          *(_DWORD *)(v220 + 28) = *(_DWORD *)(v220 + 28) & 0x80000000 | ((_DWORD)v225 - (_DWORD)a3) & 0x7FFFFFFF;
          *(_BYTE *)(v220 + 24) = 4;
        }
        else
        {
          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, a2, (size_t)a3, v28, a5, a6, a7, a8);
        }
        return v1723;
      case 7:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token ':'";
        goto LABEL_1245;
      case 8:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token '('";
        goto LABEL_1245;
      case 9:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token ')'";
        goto LABEL_1245;
      case 0xA:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token ','";
        goto LABEL_1245;
      case 0xB:
        v13 = *(_QWORD *)(v1720 + 48);
        v23 = *(_QWORD *)(v1720 + 56);
        if (v13 < v23)
        {
          if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v13] != 19)
          {
            v400 = 1;
            goto LABEL_915;
          }
          v434 = *(unsigned __int8 **)(v1720 + 56);
          v435 = (unsigned __int8 *)(v13 + 1);
          v436 = ~v13 + v23;
          do
          {
            v437 = v435;
            *i64 = v435;
            if (!v436)
              goto LABEL_1001;
            ++v435;
            --v436;
          }
          while (JSC::tokenTypesOfLatin1Characters[*v437] == 19);
          v434 = v437;
LABEL_1001:
          v400 = (unint64_t)v437 < v23;
          v13 = (unint64_t)v434;
          goto LABEL_915;
        }
        v400 = 0;
LABEL_915:
        if (v13 == v23)
        {
          v593 = 14;
          goto LABEL_1337;
        }
        *(_BYTE *)v1722 = 18;
        v28 = *(unsigned __int8 *)v13;
        v401 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v401 <= 4)
        {
          if (v401 != 4)
            goto LABEL_992;
          v402 = *(unsigned __int8 *)(v1720 + 40);
          if ((_DWORD)v28 != 39)
          {
            a3 = (unsigned __int8 *)(v13 + 1);
            *i64 = v13 + 1;
            if (!v402)
            {
              v403 = v23 - (_QWORD)a3;
              if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                goto LABEL_1827;
              v404 = (int8x16_t *)(v403 + v13 + 1);
              if (v403 >= 0x10)
              {
                v405 = v13 + 16;
                while (1)
                {
                  v406 = *(int8x16_t *)(v405 - 15);
                  v407.i64[0] = 0x2222222222222222;
                  v407.i64[1] = 0x2222222222222222;
                  v408 = vceqq_s8(v406, v407);
                  v409.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v409.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v410.i64[0] = 0x2020202020202020;
                  v410.i64[1] = 0x2020202020202020;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v406, v409), (int8x16_t)vcgtq_u8(v410, (uint8x16_t)v406)), v408);
                  v408.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  if (v408.i32[0])
                    break;
                  v405 += 16;
                  if (v405 >= (unint64_t)v404)
                  {
                    if (v405 - 15 >= (unint64_t)v404)
                      goto LABEL_1047;
                    v411 = (unsigned __int8 *)&v404[-1];
                    v412 = v404[-1];
                    v413.i64[0] = 0x2222222222222222;
                    v413.i64[1] = 0x2222222222222222;
                    v414 = vceqq_s8(v412, v413);
                    v415.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                    v415.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                    v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v412, v415), (int8x16_t)vcgtq_u8(v410, (uint8x16_t)v412)), v414);
                    v414.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                    if (!v414.i32[0])
                      goto LABEL_1047;
LABEL_1046:
                    v22 = (__n128)vornq_s8(v1728, (int8x16_t)v22);
                    v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                    v404 = (int8x16_t *)&v411[v22.n128_u32[0]];
                    goto LABEL_1047;
                  }
                }
                v411 = (unsigned __int8 *)(v405 - 15);
                goto LABEL_1046;
              }
              v638 = (int8x16_t *)(v13 + 1);
              if ((unsigned __int8 *)v23 == a3)
                goto LABEL_1047;
              do
              {
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v638->u8[0]])
                {
                  v404 = v638;
                  break;
                }
                v638 = (int8x16_t *)((char *)v638 + 1);
                --v403;
              }
              while (v403);
LABEL_1047:
              *i64 = v404;
LABEL_1048:
              if ((unint64_t)v404 < v23 && v404->u8[0] == (_DWORD)v28)
              {
                v97 = v1720;
                *(_BYTE *)(v1720 + 25) |= 1u;
                *(_QWORD *)(v97 + 32) = a3;
                *(_QWORD *)(v97 + 48) = (char *)v404->i64 + 1;
                *(_DWORD *)(v97 + 28) = *(_DWORD *)(v97 + 28) & 0x80000000 | ((_DWORD)v404 - (_DWORD)a3) & 0x7FFFFFFF;
                v444 = 4;
LABEL_1051:
                *(_BYTE *)(v97 + 24) = v444;
LABEL_1052:
                v13 = 7;
                v14 = (int16x8_t *)v1723;
                goto LABEL_152;
              }
              JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v1722, (size_t)a3, v28, a5, a6, a7, a8);
LABEL_993:
              v13 = 7;
              goto LABEL_994;
            }
LABEL_1797:
            if ((unint64_t)a3 >= v23)
            {
              v404 = (int8x16_t *)a3;
            }
            else
            {
              v404 = (int8x16_t *)a3;
              while (1)
              {
                v814 = v404->u8[0];
                v815 = v814 < 0x20 || v814 == 92;
                v816 = v815 || v814 == (_DWORD)v28;
                v817 = v816;
                if (v814 != 9 && v817)
                  break;
                v404 = (int8x16_t *)((char *)v404 + 1);
                *i64 = v404;
                if (v404 == (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1))
                {
                  v404 = (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1);
                  goto LABEL_1048;
                }
              }
            }
            goto LABEL_1048;
          }
          if (*(_BYTE *)(v1720 + 40))
          {
            a3 = (unsigned __int8 *)(v13 + 1);
            *i64 = v13 + 1;
            goto LABEL_1797;
          }
          v809 = WTF::fastCompactMalloc((WTF *)0x20);
          v725 = v809;
          v22.n128_u64[0] = 0x2900000002;
          v810 = "Single quotes (') are not allowed in JSON";
          goto LABEL_1779;
        }
        if (v401 != 6)
        {
          if (v401 != 5)
          {
            if (v401 - 18 >= 2)
            {
LABEL_992:
              *(_BYTE *)v1722 = v401;
              *i64 = v13 + 1;
              goto LABEL_993;
            }
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
            v725 = v1735.rlim_cur;
            if (!v1735.rlim_cur)
            {
              __break(0xC471u);
              JUMPOUT(0x198B13560);
            }
            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
            *(_QWORD *)(v725 + 8) = v725 + 20;
            *(_DWORD *)(v725 + 16) = 4;
            *(_DWORD *)(v725 + 36) = 656436837;
            v22 = *(__n128 *)"Unrecognized token '";
            *(_OWORD *)(v725 + 20) = *(_OWORD *)"Unrecognized token '";
            *(_BYTE *)(v725 + 40) = *(_BYTE *)v13;
            *(_BYTE *)(v725 + 41) = 39;
LABEL_1532:
            v726 = *(WTF::StringImpl **)v1709;
            *(_QWORD *)v1709 = v725;
            if (v726)
            {
              if (*(_DWORD *)v726 == 2)
              {
                WTF::StringImpl::~StringImpl(v726, v724, (uint64_t)a3, v28, a5, a6, a7, a8);
                WTF::fastFree(v769, v770, v771, v772, v773, v774, v775, v776);
              }
              else
              {
                *(_DWORD *)v726 -= 2;
              }
            }
            goto LABEL_993;
          }
          if ((_DWORD)v28 == 110)
          {
            if ((uint64_t)(v23 - v13) >= 4 && *(_WORD *)(v13 + 1) == 27765 && *(_BYTE *)(v13 + 3) == 108)
            {
              *i64 = v13 + 4;
              v593 = 13;
LABEL_1337:
              *(_BYTE *)v1722 = v593;
              goto LABEL_993;
            }
          }
          else if ((_DWORD)v28 == 102)
          {
            if ((uint64_t)(v23 - v13) >= 5 && *(_WORD *)(v13 + 1) == 27745 && *(_WORD *)(v13 + 3) == 25971)
            {
              *i64 = v13 + 5;
              v593 = 12;
              goto LABEL_1337;
            }
          }
          else if ((_DWORD)v28 == 116
                 && (uint64_t)(v23 - v13) >= 4
                 && *(_WORD *)(v13 + 1) == 30066
                 && *(_BYTE *)(v13 + 3) == 101)
          {
            *i64 = v13 + 4;
            v593 = 11;
            goto LABEL_1337;
          }
          v762 = v13;
          *(_QWORD *)(v1720 + 32) = v13;
          v763 = v13;
          if (v13 < v23)
          {
            v764 = v23 - v13;
            v765 = v13 + v764;
            while (1)
            {
              v766 = *(unsigned __int8 *)v13;
              if (v766 != 36)
              {
                v767 = v766 != 95 && (v766 - 48) >= 0xA;
                if (v767 && (v766 | 0x20u) - 97 > 0x19)
                  break;
              }
              *i64 = ++v13;
              if (!--v764)
              {
                LODWORD(v13) = v765;
                break;
              }
            }
            v763 = v13;
          }
          v97 = v1720;
          *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v763 - v762) & 0x7FFFFFFF;
          v444 = 5;
          goto LABEL_1051;
        }
        v497 = (_DWORD)v28 != 45 || !v400;
        v498 = (unsigned __int8 *)v13;
        if ((v497 & 1) == 0)
        {
          v498 = (unsigned __int8 *)(v13 + 1);
          *i64 = v13 + 1;
        }
        if ((unint64_t)v498 >= v23)
        {
LABEL_1778:
          v809 = WTF::fastCompactMalloc((WTF *)0x20);
          v725 = v809;
          v22.n128_u64[0] = 0xE00000002;
          v810 = "Invalid number";
        }
        else
        {
          v499 = *v498;
          if (v499 == 48)
          {
            v501 = v498 + 1;
            *i64 = v501;
          }
          else
          {
            if ((v499 - 49) > 8)
              goto LABEL_1778;
            v500 = v498 + 1;
            do
            {
              v501 = v500;
              *i64 = v500;
              if ((unint64_t)v500 >= v23)
                break;
              ++v500;
            }
            while (*v501 - 48 < 0xA);
          }
          if ((unint64_t)v501 < v23)
          {
            v502 = *v501;
            if (v502 == 46)
            {
              *i64 = v501 + 1;
              if ((unint64_t)(v501 + 1) >= v23 || v501[1] - 48 > 9)
              {
                v809 = WTF::fastCompactMalloc((WTF *)0x20);
                v725 = v809;
                v22.n128_u64[0] = 0x2200000002;
                v810 = "Invalid digits after decimal point";
                goto LABEL_1779;
              }
              v587 = v501 + 2;
              do
              {
                v501 = v587;
                *i64 = v587;
                if ((unint64_t)v587 >= v23)
                  break;
                ++v587;
              }
              while (*v501 - 48 < 0xA);
            }
            else if (v502 != 69 && v502 != 101 && (uint64_t)&v501[-v13] <= 9)
            {
              *(_BYTE *)v1722 = 6;
              v503 = *(unsigned __int8 *)v13;
              if (v503 == 45)
                v504 = (unsigned __int8 *)(v13 + 1);
              else
                v504 = (unsigned __int8 *)v13;
              if (v504 >= v501)
              {
                if (v503 != 45)
                {
                  v505 = 0;
LABEL_1155:
                  v22.n128_f64[0] = (double)v505;
LABEL_1156:
                  v97 = v1720;
                  *(_QWORD *)(v1720 + 32) = v22.n128_u64[0];
                  goto LABEL_1052;
                }
              }
              else
              {
                v505 = 0;
                do
                {
                  v506 = *v504++;
                  v505 = v506 + 10 * v505 - 48;
                }
                while (v504 < v501);
                if (v503 != 45)
                  goto LABEL_1155;
                if (v505)
                {
                  v22.n128_f64[0] = (double)-v505;
                  goto LABEL_1156;
                }
              }
              v97 = v1720;
              *(_QWORD *)(v1720 + 32) = 0x8000000000000000;
              goto LABEL_1052;
            }
          }
          if ((unint64_t)v501 >= v23 || (*v501 | 0x20) != 0x65)
          {
LABEL_1307:
            *(_BYTE *)v1722 = 6;
            LODWORD(v23) = (_DWORD)v501 - v13;
            if ((uint64_t)&v501[-v13] < 0)
              goto LABEL_1827;
            v1735.rlim_cur = 0;
            fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v13, v501, &v1735.rlim_cur, 0x2E00000005);
            v22.n128_u64[0] = v1735.rlim_cur;
            goto LABEL_1156;
          }
          v811 = v501 + 1;
          *i64 = v501 + 1;
          if ((unint64_t)(v501 + 1) < v23)
          {
            v812 = *v811;
            if (v812 == 45 || v812 == 43)
            {
              v811 = v501 + 2;
              *i64 = v501 + 2;
            }
          }
          if ((unint64_t)v811 < v23 && *v811 - 48 <= 9)
          {
            v813 = v811 + 1;
            do
            {
              v501 = v813;
              *i64 = v813;
              if ((unint64_t)v813 >= v23)
                break;
              ++v813;
            }
            while (*v501 - 48 < 0xA);
            goto LABEL_1307;
          }
          v809 = WTF::fastCompactMalloc((WTF *)0x20);
          v725 = v809;
          v22.n128_u64[0] = 0x5D00000002;
          v810 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
        }
LABEL_1779:
        *(_QWORD *)v809 = v22.n128_u64[0];
        *(_QWORD *)(v809 + 8) = v810;
        *(_DWORD *)(v809 + 16) = 4;
        goto LABEL_1532;
      case 0xC:
        v13 = *(_QWORD *)(v1720 + 48);
        v23 = *(_QWORD *)(v1720 + 56);
        if (v13 < v23)
        {
          if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v13] != 19)
          {
            v336 = 1;
            goto LABEL_643;
          }
          v360 = *(unsigned __int8 **)(v1720 + 56);
          v361 = (unsigned __int8 *)(v13 + 1);
          v362 = ~v13 + v23;
          do
          {
            v363 = v361;
            *i64 = v361;
            if (!v362)
              goto LABEL_717;
            ++v361;
            --v362;
          }
          while (JSC::tokenTypesOfLatin1Characters[*v363] == 19);
          v360 = v363;
LABEL_717:
          v336 = (unint64_t)v363 < v23;
          v13 = (unint64_t)v360;
          goto LABEL_643;
        }
        v336 = 0;
LABEL_643:
        if (v13 == v23)
        {
          *(_BYTE *)v1722 = 14;
          v13 = 6;
          goto LABEL_152;
        }
        *(_BYTE *)v1722 = 18;
        v28 = *(unsigned __int8 *)v13;
        v337 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v337 > 4)
        {
          if (v337 != 6)
          {
            if (v337 != 5)
            {
              if (v337 - 18 >= 2)
              {
LABEL_706:
                *(_BYTE *)v1722 = v337;
                *i64 = v13 + 1;
                v13 = 6;
                goto LABEL_152;
              }
              WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
              v595 = v1735.rlim_cur;
              if (!v1735.rlim_cur)
              {
                __break(0xC471u);
                JUMPOUT(0x198B13558);
              }
              *(_QWORD *)v1735.rlim_cur = 0x1600000002;
              *(_QWORD *)(v595 + 8) = v595 + 20;
              *(_DWORD *)(v595 + 16) = 4;
              *(_DWORD *)(v595 + 36) = 656436837;
              v22 = *(__n128 *)"Unrecognized token '";
              *(_OWORD *)(v595 + 20) = *(_OWORD *)"Unrecognized token '";
              *(_BYTE *)(v595 + 40) = *(_BYTE *)v13;
              *(_BYTE *)(v595 + 41) = 39;
LABEL_1345:
              v596 = *(WTF::StringImpl **)v1709;
              *(_QWORD *)v1709 = v595;
              if (v596)
              {
                if (*(_DWORD *)v596 == 2)
                {
                  WTF::StringImpl::~StringImpl(v596, v594, (uint64_t)a3, v28, a5, a6, a7, a8);
                  WTF::fastFree(v664, v665, v666, v667, v668, v669, v670, v671);
                }
                else
                {
                  *(_DWORD *)v596 -= 2;
                }
              }
LABEL_1186:
              v13 = 6;
LABEL_994:
              v97 = v1720;
              v14 = (int16x8_t *)v1723;
              goto LABEL_152;
            }
            if ((_DWORD)v28 == 110)
            {
              if ((uint64_t)(v23 - v13) < 4 || *(_WORD *)(v13 + 1) != 27765 || *(_BYTE *)(v13 + 3) != 108)
                goto LABEL_1443;
              *i64 = v13 + 4;
              v530 = 13;
              goto LABEL_1185;
            }
            if ((_DWORD)v28 == 102)
            {
              if ((uint64_t)(v23 - v13) < 5 || *(_WORD *)(v13 + 1) != 27745 || *(_WORD *)(v13 + 3) != 25971)
                goto LABEL_1443;
              *i64 = v13 + 5;
              v530 = 12;
              goto LABEL_1185;
            }
            if ((_DWORD)v28 == 116
              && (uint64_t)(v23 - v13) >= 4
              && *(_WORD *)(v13 + 1) == 30066
              && *(_BYTE *)(v13 + 3) == 101)
            {
              *i64 = v13 + 4;
              v530 = 11;
LABEL_1185:
              *(_BYTE *)v1722 = v530;
              goto LABEL_1186;
            }
LABEL_1443:
            v657 = v13;
            *(_QWORD *)(v1720 + 32) = v13;
            v658 = v13;
            if (v13 < v23)
            {
              v659 = v23 - v13;
              v660 = v13 + v659;
              while (1)
              {
                v661 = *(unsigned __int8 *)v13;
                if (v661 != 36)
                {
                  v662 = v661 != 95 && (v661 - 48) >= 0xA;
                  if (v662 && (v661 | 0x20u) - 97 > 0x19)
                    break;
                }
                *i64 = ++v13;
                if (!--v659)
                {
                  LODWORD(v13) = v660;
                  break;
                }
              }
              v658 = v13;
            }
            v97 = v1720;
            *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v658 - v657) & 0x7FFFFFFF;
            *(_BYTE *)(v97 + 24) = 5;
LABEL_1044:
            v13 = 6;
            v14 = (int16x8_t *)v1723;
            goto LABEL_152;
          }
          v388 = (_DWORD)v28 != 45 || !v336;
          v389 = (unsigned __int8 *)v13;
          if ((v388 & 1) == 0)
          {
            v389 = (unsigned __int8 *)(v13 + 1);
            *i64 = v13 + 1;
          }
          if ((unint64_t)v389 >= v23)
            goto LABEL_1699;
          v390 = *v389;
          if (v390 == 48)
          {
            v392 = v389 + 1;
            *i64 = v392;
            goto LABEL_857;
          }
          if ((v390 - 49) > 8)
          {
LABEL_1699:
            v792 = WTF::fastCompactMalloc((WTF *)0x20);
            v595 = v792;
            v22.n128_u64[0] = 0xE00000002;
            v793 = "Invalid number";
          }
          else
          {
            v391 = v389 + 1;
            do
            {
              v392 = v391;
              *i64 = v391;
              if ((unint64_t)v391 >= v23)
                break;
              ++v391;
            }
            while (*v392 - 48 < 0xA);
LABEL_857:
            if ((unint64_t)v392 >= v23)
              goto LABEL_1039;
            v393 = *v392;
            if (v393 == 46)
            {
              *i64 = v392 + 1;
              if ((unint64_t)(v392 + 1) < v23 && v392[1] - 48 <= 9)
              {
                v443 = v392 + 2;
                do
                {
                  v392 = v443;
                  *i64 = v443;
                  if ((unint64_t)v443 >= v23)
                    break;
                  ++v443;
                }
                while (*v392 - 48 < 0xA);
                goto LABEL_1039;
              }
              v792 = WTF::fastCompactMalloc((WTF *)0x20);
              v595 = v792;
              v22.n128_u64[0] = 0x2200000002;
              v793 = "Invalid digits after decimal point";
            }
            else
            {
              if (v393 != 69 && v393 != 101 && (uint64_t)&v392[-v13] <= 9)
              {
                *(_BYTE *)v1722 = 6;
                v394 = *(unsigned __int8 *)v13;
                if (v394 == 45)
                  v395 = (unsigned __int8 *)(v13 + 1);
                else
                  v395 = (unsigned __int8 *)v13;
                if (v395 >= v392)
                {
                  if (v394 != 45)
                  {
                    v396 = 0;
                    v97 = v1720;
                    v14 = (int16x8_t *)v1723;
LABEL_869:
                    v22.n128_f64[0] = (double)v396;
                    *(double *)(v97 + 32) = (double)v396;
                    v13 = 6;
                    goto LABEL_152;
                  }
                }
                else
                {
                  v396 = 0;
                  do
                  {
                    v397 = *v395++;
                    v396 = v397 + 10 * v396 - 48;
                  }
                  while (v395 < v392);
                  if (v394 != 45)
                    goto LABEL_869;
                  if (v396)
                  {
                    v22.n128_f64[0] = (double)-v396;
LABEL_1043:
                    v97 = v1720;
                    *(_QWORD *)(v1720 + 32) = v22.n128_u64[0];
                    goto LABEL_1044;
                  }
                }
                v97 = v1720;
                *(_QWORD *)(v1720 + 32) = 0x8000000000000000;
                goto LABEL_1044;
              }
LABEL_1039:
              if ((unint64_t)v392 >= v23 || (*v392 | 0x20) != 0x65)
                goto LABEL_1041;
              v798 = v392 + 1;
              *i64 = v392 + 1;
              if ((unint64_t)(v392 + 1) < v23)
              {
                v799 = *v798;
                if (v799 == 45 || v799 == 43)
                {
                  v798 = v392 + 2;
                  *i64 = v392 + 2;
                }
              }
              if ((unint64_t)v798 < v23 && *v798 - 48 <= 9)
              {
                v800 = v798 + 1;
                do
                {
                  v392 = v800;
                  *i64 = v800;
                  if ((unint64_t)v800 >= v23)
                    break;
                  ++v800;
                }
                while (*v392 - 48 < 0xA);
LABEL_1041:
                *(_BYTE *)v1722 = 6;
                LODWORD(v23) = (_DWORD)v392 - v13;
                if ((uint64_t)&v392[-v13] < 0)
                  goto LABEL_1827;
                v1735.rlim_cur = 0;
                fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v13, v392, &v1735.rlim_cur, 0x2E00000005);
                v22.n128_u64[0] = v1735.rlim_cur;
                goto LABEL_1043;
              }
              v792 = WTF::fastCompactMalloc((WTF *)0x20);
              v595 = v792;
              v22.n128_u64[0] = 0x5D00000002;
              v793 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            }
          }
LABEL_1700:
          *(_QWORD *)v792 = v22.n128_u64[0];
          *(_QWORD *)(v792 + 8) = v793;
          *(_DWORD *)(v792 + 16) = 4;
          goto LABEL_1345;
        }
        if (v337 != 4)
          goto LABEL_706;
        v338 = *(unsigned __int8 *)(v97 + 40);
        if ((_DWORD)v28 == 39)
        {
          if (!*(_BYTE *)(v97 + 40))
          {
            v792 = WTF::fastCompactMalloc((WTF *)0x20);
            v595 = v792;
            v22.n128_u64[0] = 0x2900000002;
            v793 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1700;
          }
          a3 = (unsigned __int8 *)(v13 + 1);
          *i64 = v13 + 1;
          v97 = v1720;
          v14 = (int16x8_t *)v1723;
        }
        else
        {
          a3 = (unsigned __int8 *)(v13 + 1);
          *i64 = v13 + 1;
          if (!v338)
          {
            v339 = v23 - (_QWORD)a3;
            if ((uint64_t)(v23 - (_QWORD)a3) < 0)
              goto LABEL_1827;
            v340 = (int8x16_t *)(v339 + v13 + 1);
            if (v339 >= 0x10)
            {
              v341 = v13 + 16;
              while (1)
              {
                v342 = *(int8x16_t *)(v341 - 15);
                v343.i64[0] = 0x2222222222222222;
                v343.i64[1] = 0x2222222222222222;
                v344 = vceqq_s8(v342, v343);
                v345.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                v345.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                v346.i64[0] = 0x2020202020202020;
                v346.i64[1] = 0x2020202020202020;
                v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v342, v345), (int8x16_t)vcgtq_u8(v346, (uint8x16_t)v342)), v344);
                v344.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                if (v344.i32[0])
                  break;
                v341 += 16;
                if (v341 >= (unint64_t)v340)
                {
                  if (v341 - 15 >= (unint64_t)v340)
                    goto LABEL_1316;
                  v347 = (unsigned __int8 *)&v340[-1];
                  v348 = v340[-1];
                  v349.i64[0] = 0x2222222222222222;
                  v349.i64[1] = 0x2222222222222222;
                  v350 = vceqq_s8(v348, v349);
                  v351.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v351.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v348, v351), (int8x16_t)vcgtq_u8(v346, (uint8x16_t)v348)), v350);
                  v350.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  v97 = v1720;
                  v14 = (int16x8_t *)v1723;
                  if (!v350.i32[0])
                  {
LABEL_783:
                    *i64 = v340;
                    goto LABEL_784;
                  }
LABEL_782:
                  v22 = (__n128)vornq_s8(v1728, (int8x16_t)v22);
                  v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                  v340 = (int8x16_t *)&v347[v22.n128_u32[0]];
                  goto LABEL_783;
                }
              }
              v347 = (unsigned __int8 *)(v341 - 15);
              goto LABEL_782;
            }
            v588 = (int8x16_t *)(v13 + 1);
            if ((unsigned __int8 *)v23 != a3)
            {
              while (JSC::safeStringLatin1CharactersInStrictJSON[v588->u8[0]])
              {
                v588 = (int8x16_t *)((char *)v588 + 1);
                if (!--v339)
                  goto LABEL_1316;
              }
              v340 = v588;
            }
LABEL_1316:
            v97 = v1720;
            v14 = (int16x8_t *)v1723;
            goto LABEL_783;
          }
        }
        if ((unint64_t)a3 >= v23)
        {
          v340 = (int8x16_t *)a3;
        }
        else
        {
          v340 = (int8x16_t *)a3;
          while (1)
          {
            v805 = v340->u8[0];
            v806 = v805 < 0x20 || v805 == 92;
            v807 = v806 || v805 == (_DWORD)v28;
            v808 = v807;
            if (v805 != 9 && v808)
              break;
            v340 = (int8x16_t *)((char *)v340 + 1);
            *i64 = v340;
            if (v340 == (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1))
            {
              v340 = (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1);
              break;
            }
          }
        }
LABEL_784:
        if ((unint64_t)v340 < v23 && v340->u8[0] == (_DWORD)v28)
        {
          *(_BYTE *)(v97 + 25) |= 1u;
          *(_QWORD *)(v97 + 32) = a3;
          *(_QWORD *)(v97 + 48) = (char *)v340->i64 + 1;
          *(_DWORD *)(v97 + 28) = *(_DWORD *)(v97 + 28) & 0x80000000 | ((_DWORD)v340 - (_DWORD)a3) & 0x7FFFFFFF;
          *(_BYTE *)(v97 + 24) = 4;
          v13 = 6;
        }
        else
        {
          JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v1722, (size_t)a3, v28, a5, a6, a7, a8);
          v13 = 6;
        }
        goto LABEL_152;
      case 0xD:
        v13 = *(_QWORD *)(v1720 + 48);
        v23 = *(_QWORD *)(v1720 + 56);
        if (v13 < v23)
        {
          if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v13] != 19)
          {
            v290 = 1;
            goto LABEL_569;
          }
          v352 = *(unsigned __int8 **)(v1720 + 56);
          v353 = (unsigned __int8 *)(v13 + 1);
          v354 = ~v13 + v23;
          do
          {
            v355 = v353;
            *i64 = v353;
            if (!v354)
              goto LABEL_660;
            ++v353;
            --v354;
          }
          while (JSC::tokenTypesOfLatin1Characters[*v355] == 19);
          v352 = v355;
LABEL_660:
          v290 = (unint64_t)v355 < v23;
          v13 = (unint64_t)v352;
          goto LABEL_569;
        }
        v290 = 0;
LABEL_569:
        if (v13 == v23)
        {
          *(_BYTE *)v1722 = 14;
          goto LABEL_639;
        }
        *(_BYTE *)v1722 = 18;
        v28 = *(unsigned __int8 *)v13;
        v291 = JSC::tokenTypesOfLatin1Characters[v28];
        if (v291 <= 4)
        {
          if (v291 != 4)
            goto LABEL_638;
          v292 = *(unsigned __int8 *)(v97 + 40);
          if ((_DWORD)v28 != 39)
          {
            a3 = (unsigned __int8 *)(v13 + 1);
            *i64 = v13 + 1;
            if (!v292)
            {
              v293 = v23 - (_QWORD)a3;
              if ((uint64_t)(v23 - (_QWORD)a3) < 0)
                goto LABEL_1827;
              v294 = (int8x16_t *)(v293 + v13 + 1);
              if (v293 < 0x10)
              {
                v552 = (int8x16_t *)(v13 + 1);
                if ((unsigned __int8 *)v23 != a3)
                {
                  while (JSC::safeStringLatin1CharactersInStrictJSON[v552->u8[0]])
                  {
                    v552 = (int8x16_t *)((char *)v552 + 1);
                    if (!--v293)
                      goto LABEL_1243;
                  }
                  v294 = v552;
                }
              }
              else
              {
                v295 = v13 + 16;
                do
                {
                  v296 = *(int8x16_t *)(v295 - 15);
                  v297.i64[0] = 0x2222222222222222;
                  v297.i64[1] = 0x2222222222222222;
                  v298 = vceqq_s8(v296, v297);
                  v299.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v299.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v300.i64[0] = 0x2020202020202020;
                  v300.i64[1] = 0x2020202020202020;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v296, v299), (int8x16_t)vcgtq_u8(v300, (uint8x16_t)v296)), v298);
                  v298.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  if (v298.i32[0])
                  {
                    v301 = (unsigned __int8 *)(v295 - 15);
                    goto LABEL_684;
                  }
                  v295 += 16;
                }
                while (v295 < (unint64_t)v294);
                if (v295 - 15 < (unint64_t)v294)
                {
                  v301 = (unsigned __int8 *)&v294[-1];
                  v302 = v294[-1];
                  v303.i64[0] = 0x2222222222222222;
                  v303.i64[1] = 0x2222222222222222;
                  v304 = vceqq_s8(v302, v303);
                  v305.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v305.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v22 = (__n128)vorrq_s8(vorrq_s8(vceqq_s8(v302, v305), (int8x16_t)vcgtq_u8(v300, (uint8x16_t)v302)), v304);
                  v304.i8[0] = vmaxvq_u8((uint8x16_t)v22);
                  v97 = v1720;
                  v14 = (int16x8_t *)v1723;
                  if (!v304.i32[0])
                  {
LABEL_685:
                    *i64 = v294;
                    goto LABEL_686;
                  }
LABEL_684:
                  v22 = (__n128)vornq_s8(v1728, (int8x16_t)v22);
                  v22.n128_u8[0] = vminvq_u8((uint8x16_t)v22);
                  v294 = (int8x16_t *)&v301[v22.n128_u32[0]];
                  goto LABEL_685;
                }
              }
LABEL_1243:
              v97 = v1720;
              v14 = (int16x8_t *)v1723;
              goto LABEL_685;
            }
            goto LABEL_1710;
          }
          if (*(_BYTE *)(v97 + 40))
          {
            a3 = (unsigned __int8 *)(v13 + 1);
            *i64 = v13 + 1;
            v97 = v1720;
            v14 = (int16x8_t *)v1723;
LABEL_1710:
            if ((unint64_t)a3 >= v23)
            {
              v294 = (int8x16_t *)a3;
            }
            else
            {
              v294 = (int8x16_t *)a3;
              do
              {
                v794 = v294->u8[0];
                v797 = v794 < 0x20 || v794 == 92 || v794 == (_DWORD)v28;
                if (v794 != 9 && v797)
                  goto LABEL_686;
                v294 = (int8x16_t *)((char *)v294 + 1);
                *i64 = v294;
              }
              while (v294 != (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1));
              v294 = (int8x16_t *)(v13 + v23 - (_QWORD)a3 + 1);
            }
LABEL_686:
            if ((unint64_t)v294 < v23 && v294->u8[0] == (_DWORD)v28)
            {
              *(_BYTE *)(v97 + 25) |= 1u;
              *(_QWORD *)(v97 + 32) = a3;
              *(_QWORD *)(v97 + 48) = (char *)v294->i64 + 1;
              *(_DWORD *)(v97 + 28) = *(_DWORD *)(v97 + 28) & 0x80000000 | ((_DWORD)v294 - (_DWORD)a3) & 0x7FFFFFFF;
              *(_BYTE *)(v97 + 24) = 4;
            }
            else
            {
              JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow(v1709, v1722, (size_t)a3, v28, a5, a6, a7, a8);
            }
LABEL_639:
            v13 = 2;
            goto LABEL_152;
          }
          v781 = WTF::fastCompactMalloc((WTF *)0x20);
          v590 = v781;
          v22.n128_u64[0] = 0x2900000002;
          v782 = "Single quotes (') are not allowed in JSON";
          goto LABEL_1668;
        }
        if (v291 != 6)
        {
          if (v291 != 5)
          {
            if (v291 - 18 >= 2)
            {
LABEL_638:
              *(_BYTE *)v1722 = v291;
              *i64 = v13 + 1;
              goto LABEL_639;
            }
            WTF::tryFastCompactMalloc((WTF *)0x2A, &v1735);
            v590 = v1735.rlim_cur;
            if (!v1735.rlim_cur)
            {
              __break(0xC471u);
              JUMPOUT(0x198B13550);
            }
            *(_QWORD *)v1735.rlim_cur = 0x1600000002;
            *(_QWORD *)(v590 + 8) = v590 + 20;
            *(_DWORD *)(v590 + 16) = 4;
            *(_DWORD *)(v590 + 36) = 656436837;
            v22 = *(__n128 *)"Unrecognized token '";
            *(_OWORD *)(v590 + 20) = *(_OWORD *)"Unrecognized token '";
            *(_BYTE *)(v590 + 40) = *(_BYTE *)v13;
            *(_BYTE *)(v590 + 41) = 39;
            goto LABEL_1322;
          }
          if ((_DWORD)v28 == 110)
          {
            if ((uint64_t)(v23 - v13) >= 4 && *(_WORD *)(v13 + 1) == 27765 && *(_BYTE *)(v13 + 3) == 108)
            {
              *i64 = v13 + 4;
              v455 = 13;
LABEL_1082:
              *(_BYTE *)v1722 = v455;
LABEL_1083:
              v13 = 2;
              goto LABEL_994;
            }
          }
          else if ((_DWORD)v28 == 102)
          {
            if ((uint64_t)(v23 - v13) >= 5 && *(_WORD *)(v13 + 1) == 27745 && *(_WORD *)(v13 + 3) == 25971)
            {
              *i64 = v13 + 5;
              v455 = 12;
              goto LABEL_1082;
            }
          }
          else if ((_DWORD)v28 == 116
                 && (uint64_t)(v23 - v13) >= 4
                 && *(_WORD *)(v13 + 1) == 30066
                 && *(_BYTE *)(v13 + 3) == 101)
          {
            *i64 = v13 + 4;
            v455 = 11;
            goto LABEL_1082;
          }
          v597 = v13;
          *(_QWORD *)(v1720 + 32) = v13;
          v598 = v13;
          if (v13 < v23)
          {
            v599 = v23 - v13;
            v600 = v13 + v599;
            while (1)
            {
              v601 = *(unsigned __int8 *)v13;
              if (v601 != 36)
              {
                v602 = v601 != 95 && (v601 - 48) >= 0xA;
                if (v602 && (v601 | 0x20u) - 97 > 0x19)
                  break;
              }
              *i64 = ++v13;
              if (!--v599)
              {
                LODWORD(v13) = v600;
                break;
              }
            }
            v598 = v13;
          }
          v97 = v1720;
          *(_DWORD *)(v1720 + 28) = *(_DWORD *)(v1720 + 28) & 0x80000000 | (v598 - v597) & 0x7FFFFFFF;
          *(_BYTE *)(v97 + 24) = 5;
          v13 = 2;
          v14 = (int16x8_t *)v1723;
          goto LABEL_152;
        }
        v365 = (_DWORD)v28 != 45 || !v290;
        v366 = (unsigned __int8 *)v13;
        if ((v365 & 1) == 0)
        {
          v366 = (unsigned __int8 *)(v13 + 1);
          *i64 = v13 + 1;
        }
        if ((unint64_t)v366 >= v23)
          goto LABEL_1667;
        v367 = *v366;
        if (v367 == 48)
        {
          v369 = v366 + 1;
          *i64 = v369;
        }
        else
        {
          if ((v367 - 49) > 8)
          {
LABEL_1667:
            v781 = WTF::fastCompactMalloc((WTF *)0x20);
            v590 = v781;
            v22.n128_u64[0] = 0xE00000002;
            v782 = "Invalid number";
            goto LABEL_1668;
          }
          v368 = v366 + 1;
          do
          {
            v369 = v368;
            *i64 = v368;
            if ((unint64_t)v368 >= v23)
              break;
            ++v368;
          }
          while (*v369 - 48 < 0xA);
        }
        if ((unint64_t)v369 < v23)
        {
          v370 = *v369;
          if (v370 == 46)
          {
            *i64 = v369 + 1;
            if ((unint64_t)(v369 + 1) >= v23 || v369[1] - 48 > 9)
            {
              v781 = WTF::fastCompactMalloc((WTF *)0x20);
              v590 = v781;
              v22.n128_u64[0] = 0x2200000002;
              v782 = "Invalid digits after decimal point";
              goto LABEL_1668;
            }
            v429 = v369 + 2;
            do
            {
              v369 = v429;
              *i64 = v429;
              if ((unint64_t)v429 >= v23)
                break;
              ++v429;
            }
            while (*v369 - 48 < 0xA);
          }
          else if (v370 != 69 && v370 != 101 && (uint64_t)&v369[-v13] <= 9)
          {
            *(_BYTE *)v1722 = 6;
            v371 = *(unsigned __int8 *)v13;
            if (v371 == 45)
              v372 = (unsigned __int8 *)(v13 + 1);
            else
              v372 = (unsigned __int8 *)v13;
            if (v372 >= v369)
            {
              if (v371 != 45)
              {
                v373 = 0;
LABEL_763:
                v22.n128_f64[0] = (double)v373;
LABEL_764:
                *(_QWORD *)(v97 + 32) = v22.n128_u64[0];
                goto LABEL_639;
              }
            }
            else
            {
              v373 = 0;
              do
              {
                v374 = *v372++;
                v373 = v374 + 10 * v373 - 48;
              }
              while (v372 < v369);
              if (v371 != 45)
                goto LABEL_763;
              if (v373)
              {
                v22.n128_f64[0] = (double)-v373;
                goto LABEL_764;
              }
            }
            *(_QWORD *)(v97 + 32) = 0x8000000000000000;
            goto LABEL_639;
          }
        }
        if ((unint64_t)v369 >= v23 || (*v369 | 0x20) != 0x65)
          goto LABEL_964;
        v786 = v369 + 1;
        *i64 = v369 + 1;
        if ((unint64_t)(v369 + 1) < v23)
        {
          v787 = *v786;
          if (v787 == 45 || v787 == 43)
          {
            v786 = v369 + 2;
            *i64 = v369 + 2;
          }
        }
        if ((unint64_t)v786 < v23 && *v786 - 48 <= 9)
        {
          v788 = v786 + 1;
          while (1)
          {
            v369 = v788;
            *i64 = v788;
            if ((unint64_t)v788 >= v23)
              break;
            ++v788;
            v97 = v1720;
            v14 = (int16x8_t *)v1723;
            if (*v369 - 48 >= 0xA)
              goto LABEL_964;
          }
          v97 = v1720;
          v14 = (int16x8_t *)v1723;
LABEL_964:
          *(_BYTE *)v1722 = 6;
          LODWORD(v23) = (_DWORD)v369 - v13;
          if ((uint64_t)&v369[-v13] < 0)
            goto LABEL_1827;
          v1735.rlim_cur = 0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)v13, v369, &v1735.rlim_cur, 0x2E00000005);
          v22.n128_u64[0] = v1735.rlim_cur;
          goto LABEL_764;
        }
        v781 = WTF::fastCompactMalloc((WTF *)0x20);
        v590 = v781;
        v22.n128_u64[0] = 0x5D00000002;
        v782 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1668:
        *(_QWORD *)v781 = v22.n128_u64[0];
        *(_QWORD *)(v781 + 8) = v782;
        *(_DWORD *)(v781 + 16) = 4;
LABEL_1322:
        v591 = *(WTF::StringImpl **)v1709;
        *(_QWORD *)v1709 = v590;
        if (v591)
        {
          if (*(_DWORD *)v591 == 2)
          {
            WTF::StringImpl::~StringImpl(v591, v589, (uint64_t)a3, v28, a5, a6, a7, a8);
            WTF::fastFree(v604, v605, v606, v607, v608, v609, v610, v611);
          }
          else
          {
            *(_DWORD *)v591 -= 2;
          }
        }
        goto LABEL_1083;
      case 0xE:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0xE00000002;
        v556 = "Unexpected EOF";
        goto LABEL_1245;
      case 0xF:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token '.'";
        goto LABEL_1245;
      case 0x10:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token '='";
        goto LABEL_1245;
      case 0x11:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x1400000002;
        v556 = "Unexpected token ';'";
        goto LABEL_1245;
      default:
        v553 = WTF::fastCompactMalloc((WTF *)0x20);
        v554 = v553;
        v555 = 0x2000000002;
        v556 = "Could not parse value expression";
LABEL_1245:
        *(_QWORD *)v553 = v555;
        *(_QWORD *)(v553 + 8) = v556;
        *(_DWORD *)(v553 + 16) = 4;
        v333 = *(WTF::StringImpl **)(v97 + 96);
        *(_QWORD *)(v97 + 96) = v554;
        if (!v333)
          return 0;
        goto LABEL_612;
    }
  }
}

void JSC::LiteralParser<unsigned char>::setErrorMessageForToken(uint64_t a1, int a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  switch(a2)
  {
    case 3:
      v3 = WTF::fastCompactMalloc((WTF *)0x20);
      v11 = v3;
      v12 = 0xC00000002;
      v13 = "Expected '}'";
      break;
    case 1:
      v3 = WTF::fastCompactMalloc((WTF *)0x20);
      v11 = v3;
      v12 = 0xC00000002;
      v13 = "Expected ']'";
      break;
    case 7:
      v3 = WTF::fastCompactMalloc((WTF *)0x20);
      v11 = v3;
      v12 = 0x3700000002;
      v13 = "Expected ':' before value in object property definition";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198B1A874);
  }
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = v13;
  *(_DWORD *)(v3 + 16) = 4;
  v14 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
}

uint64_t JSC::JSObject::nukeStructureAndSetButterfly(JSC::JSCell *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;

  result = a2 + 192;
  if (*(_BYTE *)(a2 + 755))
  {
    *(_DWORD *)a1 = a3 | 1;
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = a4;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      result = JSC::Heap::writeBarrierSlowPath(result, (unint64_t)a1);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a1 + 1) = a4;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      return JSC::Heap::writeBarrierSlowPath(result, (unint64_t)a1);
  }
  return result;
}

void WTF::Vector<JSC::Identifier,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::takeLast(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = a2[3] - 1;
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v9);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0;
  *a1 = v10;
  v11 = *(WTF::StringImpl **)(*(_QWORD *)a2 + 8 * v9);
  *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  a2[3] = v9;
}

uint64_t JSC::LiteralParser<unsigned char>::parsePrimitiveValue(JSC::VM &)::{lambda(unsigned int)#1}::operator()(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4;
  const char *v5;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;

  v11 = "Unexpected identifier \"";
  v12 = 23;
  v9 = a3;
  if ((a2 & 0x7FFFFFFF) == a4)
    v4 = 0;
  else
    v4 = 3;
  v5 = "...";
  v10 = a4;
  if ((a2 & 0x7FFFFFFF) == a4)
    v5 = "";
  v7 = v5;
  v8 = v4;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(a1, (uint64_t)&v11, (uint64_t)&v9, (uint64_t)&v7, 34);
}

uint64_t JSC::LiteralParser<char16_t>::parseRecursivelyEntry(uint64_t a1, unint64_t *a2, __n128 a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  WTF::StringImpl **v12;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  unsigned __int16 *v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int16x8_t *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  int16x8_t v40;
  int16x8_t v41;
  uint16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unsigned __int16 *v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  _BYTE *v52;
  double v53;
  uint64_t v54;
  unsigned __int16 *v55;
  BOOL v56;
  char v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int16x8_t *v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  int16x8_t v64;
  int16x8_t v65;
  uint16x8_t v66;
  int16x8_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unsigned __int16 *v70;
  int16x8_t v71;
  int16x8_t v72;
  int8x16_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  _BYTE *v76;
  unsigned __int16 *v77;
  BOOL v78;
  char v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  int16x8_t *v85;
  unsigned __int16 *v86;
  unsigned __int16 *v87;
  int16x8_t v88;
  int16x8_t v89;
  uint16x8_t v90;
  int16x8_t v91;
  int8x16_t v92;
  int8x16_t v93;
  unsigned __int16 *v94;
  int16x8_t v95;
  int16x8_t v96;
  int8x16_t v97;
  int16x8_t v98;
  uint16x8_t v99;
  _BYTE *v100;
  unsigned __int16 *v101;
  BOOL v102;
  char v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  int16x8_t *v109;
  unsigned __int16 *v110;
  unsigned __int16 *v111;
  int16x8_t v112;
  int16x8_t v113;
  uint16x8_t v114;
  int16x8_t v115;
  int8x16_t v116;
  int8x16_t v117;
  unsigned __int16 *v118;
  int16x8_t v119;
  int16x8_t v120;
  int8x16_t v121;
  int16x8_t v122;
  uint16x8_t v123;
  char v124;
  char v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const WTF::String *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  char v141;
  char v142;
  uint64_t v143;
  unsigned __int16 *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int16 *v149;
  int v150;
  int v151;
  int v152;
  double v153;
  char v154;
  uint64_t v155;
  unsigned __int16 *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int16 *v161;
  int v162;
  int v163;
  int v164;
  double v165;
  char v166;
  uint64_t v167;
  unsigned __int16 *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int16 *v173;
  int v174;
  int v175;
  int v176;
  double v177;
  char v178;
  uint64_t v179;
  unsigned __int16 *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int16 *v185;
  int v186;
  int v187;
  int v188;
  double v189;
  WTF::AtomStringImpl *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  int v199;
  WTF::AtomStringImpl *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::AtomStringImpl *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  unsigned __int16 *v246;
  int v247;
  BOOL v249;
  unsigned __int16 *v250;
  int v251;
  BOOL v253;
  uint64_t v254;
  uint64_t v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  const char *v259;
  unsigned __int16 *v260;
  int v261;
  BOOL v263;
  unsigned int v264;
  unsigned int v265;
  unint64_t v266;
  unsigned __int16 *v267;
  int v268;
  unsigned __int16 *v269;
  unint64_t v270;
  unsigned __int16 *v271;
  int v272;
  unsigned __int16 *v273;
  uint64_t v274;
  int16x8_t *v275;
  unint64_t v276;
  uint64_t v277;
  int16x8_t *v278;
  unint64_t v279;
  unsigned __int16 *v280;
  int v281;
  BOOL v283;
  unsigned int v284;
  unint64_t v285;
  unsigned __int16 *v286;
  int v287;
  unsigned __int16 *v288;
  uint64_t v289;
  int16x8_t *v290;
  unint64_t v291;
  unsigned int v292;
  unint64_t v293;
  unsigned __int16 *v294;
  int v295;
  unsigned __int16 *v296;
  uint64_t v297;
  int16x8_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  WTF::AtomStringImpl *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  const char *v311;
  _BYTE *v312;
  unsigned __int16 *v313;
  BOOL v314;
  char v315;
  uint64_t v316;
  unsigned int v317;
  int v318;
  unint64_t v319;
  uint64_t v320;
  int16x8_t *v321;
  unsigned __int16 *v322;
  unsigned __int16 *v323;
  int16x8_t v324;
  int16x8_t v325;
  uint16x8_t v326;
  int16x8_t v327;
  int8x16_t v328;
  int8x16_t v329;
  unsigned __int16 *v330;
  int16x8_t v331;
  int16x8_t v332;
  int8x16_t v333;
  int16x8_t v334;
  uint16x8_t v335;
  int v336;
  unsigned int v337;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  char v355;
  char v356;
  uint64_t v357;
  unsigned __int16 *v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned __int16 *v363;
  int v364;
  int v365;
  double v366;
  WTF::AtomStringImpl *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  WTF::StringImpl *v374;
  WTF::StringImpl *v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  const char *v387;
  unint64_t v388;
  unsigned __int16 *v389;
  int v390;
  unsigned __int16 *v391;
  uint64_t v392;
  int16x8_t *v393;
  unint64_t v394;
  unsigned __int16 *v395;
  int v396;
  BOOL v398;
  WTF::StringImpl *v399;
  WTF::StringImpl *v400;

  if (!HIBYTE(qword_1ECF4C789))
    return JSC::LiteralParser<char16_t>::parse((uint64_t *)a1, (uint64_t)a2, 2uLL, a5, a6, a7, a8, a9);
  v10 = a1 + 24;
  if (*(_BYTE *)(a1 + 24) == 2)
    return (uint64_t)JSC::LiteralParser<char16_t>::parseRecursively(a1, (uint64_t)a2, a2[1], a5, a6, a7, a8, a9, a3);
  v12 = (WTF::StringImpl **)(a1 + 16);
  switch(*(_BYTE *)(a1 + 24))
  {
    case 0:
      return (uint64_t)JSC::LiteralParser<char16_t>::parseRecursively(a1, (uint64_t)a2, a2[1], a5, a6, a7, a8, a9, a3);
    case 1:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token ']'";
      goto LABEL_595;
    case 3:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token '}'";
      goto LABEL_595;
    case 4:
      v14 = *(_DWORD *)(a1 + 28);
      v15 = v14 & 0x7FFFFFFF;
      if ((*(_BYTE *)(a1 + 25) & 1) != 0)
      {
        if ((v14 & 0x7FFFFFFFu) < 0xB)
        {
          JSC::Identifier::fromString((uint64_t)a2, *(WTF::AtomStringImpl **)(a1 + 32), v15, a5, a6, a7, a8, a9, (rlim_t *)&v400);
          goto LABEL_150;
        }
        WTF::String::String((uint64_t *)&v400, *(_BYTE **)(a1 + 32), v15);
LABEL_10:
        v22 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v400, v16, v17, v18, v19, v20, v21);
        goto LABEL_11;
      }
      if ((v14 & 0x7FFFFFFFu) >= 0xB)
      {
        WTF::String::String((int **)&v400, *(_WORD **)(a1 + 32), v15);
        goto LABEL_10;
      }
      JSC::Identifier::fromString((uint64_t)a2, *(WTF::AtomStringImpl **)(a1 + 32), v15, a5, a6, a7, a8, a9, &v400);
LABEL_150:
      v22 = JSC::jsString((JSC *)a2, (JSC::VM *)&v400, v134, v135, v136, v137, v138, v139);
LABEL_11:
      v26 = v22;
      v27 = v400;
      v400 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, v23, v24, v25, a6, a7, a8, a9);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
      v28 = *(unsigned __int16 **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v28 >= v29)
      {
        v31 = 0;
      }
      else
      {
        do
        {
          v30 = *v28 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v28] == 19;
          v31 = !v30;
          if (!v30)
            break;
          *(_QWORD *)(a1 + 48) = ++v28;
        }
        while ((unint64_t)v28 < v29);
      }
      if (v28 == (unsigned __int16 *)v29)
      {
        *(_BYTE *)v10 = 14;
        return v26;
      }
      *(_BYTE *)v10 = 18;
      v32 = *v28;
      if (v32 > 0xFF)
        goto LABEL_299;
      v33 = JSC::tokenTypesOfLatin1Characters[v32];
      if (v33 <= 4)
      {
        if (v33 == 4)
        {
          v34 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v32 != 39)
          {
            v35 = (unint64_t)(v28 + 1);
            *(_QWORD *)(a1 + 48) = v28 + 1;
            if (!v34)
            {
              v36 = v29 - v35;
              if ((uint64_t)(v29 - v35) > -2)
              {
                v37 = (int16x8_t *)((char *)v28 + (v36 & 0xFFFFFFFFFFFFFFFELL) + 2);
                if ((unint64_t)v36 <= 0xE)
                {
                  if (v29 != v35)
                  {
                    v274 = 2 * (v36 >> 1);
                    v275 = (int16x8_t *)(v28 + 1);
                    while (1)
                    {
                      v276 = v275->u16[0];
                      if (v276 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v276])
                        break;
                      v275 = (int16x8_t *)((char *)v275 + 2);
                      v274 -= 2;
                      if (!v274)
                        goto LABEL_139;
                    }
                    v37 = v275;
                  }
                  goto LABEL_139;
                }
                v38 = v28 + 1;
                if (v36 < 15)
                {
LABEL_35:
                  if (v38 >= (unsigned __int16 *)v37)
                    goto LABEL_139;
                  v46 = (unsigned __int16 *)&v37[-1];
                  v47 = v37[-1];
                  v48.i64[0] = 0x22002200220022;
                  v48.i64[1] = 0x22002200220022;
                  v49 = (int8x16_t)vceqq_s16(v47, v48);
                  v50.i64[0] = 0x5C005C005C005CLL;
                  v50.i64[1] = 0x5C005C005C005CLL;
                  v51.i64[0] = 0x20002000200020;
                  v51.i64[1] = 0x20002000200020;
                  v45 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v47, v50), (int8x16_t)vcgtq_u16(v51, (uint16x8_t)v47)), v49);
                  v49.i16[0] = vmaxvq_u16((uint16x8_t)v45);
                  if (!v49.i32[0])
                    goto LABEL_139;
                }
                else
                {
                  v39 = v28 + 8;
                  v40.i64[0] = 0x22002200220022;
                  v40.i64[1] = 0x22002200220022;
                  v41.i64[0] = 0x5C005C005C005CLL;
                  v41.i64[1] = 0x5C005C005C005CLL;
                  v42.i64[0] = 0x20002000200020;
                  v42.i64[1] = 0x20002000200020;
                  while (1)
                  {
                    v43 = *(int16x8_t *)(v39 - 7);
                    v44 = (int8x16_t)vceqq_s16(v43, v40);
                    v45 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v43, v41), (int8x16_t)vcgtq_u16(v42, (uint16x8_t)v43)), v44);
                    v44.i16[0] = vmaxvq_u16((uint16x8_t)v45);
                    if (v44.i32[0])
                      break;
                    v39 += 8;
                    if (v39 >= (unsigned __int16 *)v37)
                    {
                      v38 = v39 - 7;
                      goto LABEL_35;
                    }
                  }
                  v46 = v39 - 7;
                }
                v37 = (int16x8_t *)&v46[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v45))];
LABEL_139:
                *(_QWORD *)(a1 + 48) = v37;
LABEL_140:
                if ((unint64_t)v37 < v29 && v37->u16[0] == (_DWORD)v32)
                {
                  *(_BYTE *)(a1 + 25) &= ~1u;
                  *(_QWORD *)(a1 + 32) = v35;
                  *(_QWORD *)(a1 + 48) = (char *)v37->i64 + 2;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v37 - v35) >> 1);
                  v125 = 4;
LABEL_143:
                  *(_BYTE *)(a1 + 24) = v125;
                  return v26;
                }
                v218 = v10 - 8;
                v52 = (_BYTE *)v10;
LABEL_313:
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(v218, (uint64_t)v52, v35, v32, a6, a7, a8, a9);
                return v26;
              }
              goto LABEL_739;
            }
LABEL_387:
            v37 = (int16x8_t *)v35;
            if (v35 < v29)
            {
              while (1)
              {
                v264 = v37->u16[0];
                if (v264 < 0x20)
                {
                  if (v264 != 9)
                    goto LABEL_140;
                }
                else if (v264 == (_DWORD)v32 || v264 > 0xFF || v264 == 92)
                {
                  goto LABEL_140;
                }
                v37 = (int16x8_t *)((char *)v37 + 2);
                *(_QWORD *)(a1 + 48) = v37;
                if ((unint64_t)v37 >= v29)
                  goto LABEL_140;
              }
            }
            goto LABEL_140;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v35 = (unint64_t)(v28 + 1);
            *(_QWORD *)(a1 + 48) = v28 + 1;
            goto LABEL_387;
          }
          goto LABEL_691;
        }
        goto LABEL_123;
      }
      if (v33 == 5)
      {
        if ((_DWORD)v32 == 102)
        {
          if ((uint64_t)(v29 - (_QWORD)v28) >= 9 && *(_DWORD *)(v28 + 1) == 7077985 && *(_DWORD *)(v28 + 3) == 6619251)
          {
            *(_QWORD *)(a1 + 48) = v28 + 5;
            v125 = 12;
            goto LABEL_143;
          }
        }
        else if ((_DWORD)v32 == 116)
        {
          if ((uint64_t)(v29 - (_QWORD)v28) >= 7 && *(_DWORD *)(v28 + 1) == 7667826 && v28[3] == 101)
          {
            *(_QWORD *)(a1 + 48) = v28 + 4;
            v125 = 11;
            goto LABEL_143;
          }
        }
        else if ((_DWORD)v32 == 110
               && (uint64_t)(v29 - (_QWORD)v28) >= 7
               && *(_DWORD *)(v28 + 1) == 7078005
               && v28[3] == 108)
        {
          *(_QWORD *)(a1 + 48) = v28 + 4;
          v125 = 13;
          goto LABEL_143;
        }
        *(_QWORD *)(a1 + 32) = v28;
        LODWORD(v250) = (_DWORD)v28;
        if ((unint64_t)v28 < v29)
        {
          v250 = v28;
          do
          {
            v251 = *v250;
            v253 = (v251 | 0x20u) - 97 >= 0x1A && (v251 - 48) >= 0xA && (v251 - 8204) >= 2;
            if (v253 && v251 != 95 && v251 != 36)
              break;
            *(_QWORD *)(a1 + 48) = ++v250;
          }
          while ((unint64_t)v250 < v29);
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v250 - (_DWORD)v28) >> 1);
        v125 = 5;
        goto LABEL_143;
      }
      if (v33 == 6)
      {
        v154 = v31 ^ 1;
        if ((_DWORD)v32 != 45)
          v154 = 1;
        if ((v154 & 1) != 0)
        {
          v155 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v28 + 1;
          v155 = 1;
        }
        v156 = &v28[v155];
        if ((unint64_t)v156 < v29)
        {
          v157 = *v156;
          if (v157 == 48)
          {
            v160 = v155 + 1;
LABEL_201:
            v161 = &v28[v160];
            *(_QWORD *)(a1 + 48) = v161;
            if ((unint64_t)v161 >= v29 || (v162 = *v161, v162 == 101) || v162 == 69)
            {
LABEL_437:
              if ((unint64_t)v161 >= v29 || (*v161 | 0x20) != 0x65)
                goto LABEL_449;
              v271 = v161 + 1;
              *(_QWORD *)(a1 + 48) = v161 + 1;
              if ((unint64_t)(v161 + 1) < v29)
              {
                v272 = *v271;
                if (v272 == 45 || v272 == 43)
                {
                  v271 = v161 + 2;
                  *(_QWORD *)(a1 + 48) = v161 + 2;
                }
              }
              if ((unint64_t)v271 < v29 && *v271 - 48 <= 9)
              {
                v273 = v271 + 1;
                do
                {
                  v161 = v273;
                  if ((unint64_t)v273 >= v29)
                    break;
                  ++v273;
                }
                while (*v161 - 48 < 0xA);
                *(_QWORD *)(a1 + 48) = v161;
LABEL_449:
                *(_BYTE *)v10 = 6;
                if ((char *)v161 - (char *)v28 > -2)
                {
                  v400 = 0;
                  fast_float::from_chars_advanced<double,char16_t>(v28, v161, (double *)&v400, 0x2E00000005);
                  v165 = *(double *)&v400;
                  goto LABEL_211;
                }
LABEL_739:
                __break(1u);
                goto LABEL_740;
              }
              goto LABEL_451;
            }
            if (v162 != 46)
            {
              if (v160 <= 9)
              {
                *(_BYTE *)v10 = 6;
                if ((_DWORD)v32 == 45)
                {
                  if (v160 < 2)
                    goto LABEL_497;
                  ++v28;
                }
                v163 = 0;
                do
                {
                  v164 = *v28++;
                  v163 = v164 + 10 * v163 - 48;
                }
                while (v28 < v161);
                if ((_DWORD)v32 != 45)
                {
                  v165 = (double)v163;
LABEL_211:
                  *(double *)(a1 + 32) = v165;
                  return v26;
                }
                if (v163)
                {
                  v165 = (double)-v163;
                  goto LABEL_211;
                }
LABEL_497:
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                return v26;
              }
              goto LABEL_437;
            }
            *(_QWORD *)(a1 + 48) = v161 + 1;
            if ((unint64_t)(v161 + 1) < v29 && v161[1] - 48 <= 9)
            {
              v270 = (unint64_t)&v28[v160 + 2];
              do
              {
                v161 = (unsigned __int16 *)v270;
                if (v270 >= v29)
                  break;
                v270 += 2;
              }
              while (*v161 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v161;
              goto LABEL_437;
            }
LABEL_452:
            v243 = WTF::fastCompactMalloc((WTF *)0x20);
            v197 = (WTF::StringImpl *)v243;
            v244 = 0x2200000002;
            v245 = "Invalid digits after decimal point";
            goto LABEL_323;
          }
          if ((v157 - 49) <= 8)
          {
            v158 = v155 + 1;
            v159 = 2 * v155 + 2;
            do
            {
              v160 = v158;
              if ((unint64_t)v28 + v159 >= v29)
                break;
              ++v158;
              v159 += 2;
            }
            while (v28[v160] - 48 < 0xA);
            goto LABEL_201;
          }
        }
LABEL_322:
        v243 = WTF::fastCompactMalloc((WTF *)0x20);
        v197 = (WTF::StringImpl *)v243;
        v244 = 0xE00000002;
        v245 = "Invalid number";
LABEL_323:
        *(_QWORD *)v243 = v244;
        *(_QWORD *)(v243 + 8) = v245;
        *(_DWORD *)(v243 + 16) = 4;
        goto LABEL_300;
      }
      if (v33 - 18 < 2)
      {
LABEL_299:
        WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v400, (int8x16_t *)"Unrecognized token '", 21, v28, 1uLL, 39);
        v197 = v400;
        if (!v400)
        {
          __break(0xC471u);
          JUMPOUT(0x198B1CCCCLL);
        }
        goto LABEL_300;
      }
LABEL_123:
      *(_BYTE *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 48) = v28 + 1;
      return v26;
    case 5:
      v336 = *(_DWORD *)(a1 + 28);
      if ((v336 & 0x7FFFFFFFu) >= 0xC8)
        v337 = 200;
      else
        v337 = v336 & 0x7FFFFFFF;
      JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(&v400, v336, *(_WORD **)(a1 + 32), v337);
      if (!v400)
      {
        v353 = *(_DWORD *)(a1 + 28);
        if ((v353 & 0x7FFFFFFFu) < 0xB
          || (JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(&v399, v353, *(_WORD **)(a1 + 32), 0xAu), (v400 = v399) == 0))
        {
          v354 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v354 = 0x1500000002;
          *(_QWORD *)(v354 + 8) = "Unexpected identifier";
          *(_DWORD *)(v354 + 16) = 4;
          v400 = (WTF::StringImpl *)v354;
        }
      }
      WTF::String::operator=((unint64_t *)(a1 + 96), (WTF::AtomStringImpl *)&v400, v339, v340, v341, v342, v343, v344);
      v198 = v400;
      v400 = 0;
      if (!v198)
        return 0;
      if (*(_DWORD *)v198 == 2)
        goto LABEL_643;
      *(_DWORD *)v198 -= 2;
      return 0;
    case 6:
      v52 = (_BYTE *)(a1 + 24);
      v10 = a1;
      v53 = *(double *)(a1 + 32);
      if ((*(_QWORD *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v54 = (int)v53, v53 == (double)(int)v54)
        && ((_DWORD)v54 || (*(_QWORD *)&v53 & 0x8000000000000000) == 0))
      {
        v26 = v54 | 0xFFFE000000000000;
      }
      else
      {
        v26 = *(_QWORD *)&v53 + 0x2000000000000;
      }
      v55 = *(unsigned __int16 **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v55 >= v29)
      {
        v57 = 0;
      }
      else
      {
        do
        {
          v56 = *v55 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v55] == 19;
          v57 = !v56;
          if (!v56)
            break;
          *(_QWORD *)(a1 + 48) = ++v55;
        }
        while ((unint64_t)v55 < v29);
      }
      if (v55 == (unsigned __int16 *)v29)
      {
        *v52 = 14;
        return v26;
      }
      *v52 = 18;
      v32 = *v55;
      if (v32 > 0xFF)
        goto LABEL_297;
      v58 = JSC::tokenTypesOfLatin1Characters[v32];
      if (v58 <= 4)
      {
        if (v58 == 4)
        {
          v59 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v32 == 39)
          {
            if (!*(_BYTE *)(a1 + 40))
            {
LABEL_691:
              v243 = WTF::fastCompactMalloc((WTF *)0x20);
              v197 = (WTF::StringImpl *)v243;
              v244 = 0x2900000002;
              v245 = "Single quotes (') are not allowed in JSON";
              goto LABEL_323;
            }
            v35 = (unint64_t)(v55 + 1);
            *(_QWORD *)(a1 + 48) = v55 + 1;
          }
          else
          {
            v35 = (unint64_t)(v55 + 1);
            *(_QWORD *)(a1 + 48) = v55 + 1;
            if (!v59)
            {
              v60 = v29 - v35;
              if ((uint64_t)(v29 - v35) <= -2)
                goto LABEL_739;
              v61 = (int16x8_t *)((char *)v55 + (v60 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v60 <= 0xE)
              {
                if (v29 != v35)
                {
                  v277 = 2 * (v60 >> 1);
                  v278 = (int16x8_t *)(v55 + 1);
                  while (1)
                  {
                    v279 = v278->u16[0];
                    if (v279 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v279])
                      break;
                    v278 = (int16x8_t *)((char *)v278 + 2);
                    v277 -= 2;
                    if (!v277)
                      goto LABEL_132;
                  }
                  v61 = v278;
                }
                goto LABEL_132;
              }
              v62 = v55 + 1;
              if (v60 < 15)
              {
LABEL_64:
                if (v62 >= (unsigned __int16 *)v61)
                  goto LABEL_132;
                v70 = (unsigned __int16 *)&v61[-1];
                v71 = v61[-1];
                v72.i64[0] = 0x22002200220022;
                v72.i64[1] = 0x22002200220022;
                v73 = (int8x16_t)vceqq_s16(v71, v72);
                v74.i64[0] = 0x5C005C005C005CLL;
                v74.i64[1] = 0x5C005C005C005CLL;
                v75.i64[0] = 0x20002000200020;
                v75.i64[1] = 0x20002000200020;
                v69 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v71, v74), (int8x16_t)vcgtq_u16(v75, (uint16x8_t)v71)), v73);
                v73.i16[0] = vmaxvq_u16((uint16x8_t)v69);
                if (!v73.i32[0])
                  goto LABEL_132;
              }
              else
              {
                v63 = v55 + 8;
                v64.i64[0] = 0x22002200220022;
                v64.i64[1] = 0x22002200220022;
                v65.i64[0] = 0x5C005C005C005CLL;
                v65.i64[1] = 0x5C005C005C005CLL;
                v66.i64[0] = 0x20002000200020;
                v66.i64[1] = 0x20002000200020;
                while (1)
                {
                  v67 = *(int16x8_t *)(v63 - 7);
                  v68 = (int8x16_t)vceqq_s16(v67, v64);
                  v69 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v67, v65), (int8x16_t)vcgtq_u16(v66, (uint16x8_t)v67)), v68);
                  v68.i16[0] = vmaxvq_u16((uint16x8_t)v69);
                  if (v68.i32[0])
                    break;
                  v63 += 8;
                  if (v63 >= (unsigned __int16 *)v61)
                  {
                    v62 = v63 - 7;
                    goto LABEL_64;
                  }
                }
                v70 = v63 - 7;
              }
              v61 = (int16x8_t *)&v70[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v69))];
LABEL_132:
              *(_QWORD *)(a1 + 48) = v61;
LABEL_133:
              if ((unint64_t)v61 >= v29 || v61->u16[0] != (_DWORD)v32)
              {
                v218 = a1 + 16;
                goto LABEL_313;
              }
              *(_BYTE *)(a1 + 25) &= ~1u;
              *(_QWORD *)(a1 + 32) = v35;
              *(_QWORD *)(a1 + 48) = (char *)v61->i64 + 2;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v61 - v35) >> 1);
              v124 = 4;
              goto LABEL_136;
            }
          }
          v61 = (int16x8_t *)v35;
          if (v35 < v29)
          {
            while (1)
            {
              v265 = v61->u16[0];
              if (v265 < 0x20)
              {
                if (v265 != 9)
                  goto LABEL_133;
              }
              else if (v265 == (_DWORD)v32 || v265 > 0xFF || v265 == 92)
              {
                goto LABEL_133;
              }
              v61 = (int16x8_t *)((char *)v61 + 2);
              *(_QWORD *)(a1 + 48) = v61;
              if ((unint64_t)v61 >= v29)
                goto LABEL_133;
            }
          }
          goto LABEL_133;
        }
LABEL_119:
        *(_BYTE *)(a1 + 24) = v58;
        *(_QWORD *)(a1 + 48) = v55 + 1;
        return v26;
      }
      if (v58 != 5)
      {
        if (v58 != 6)
        {
          if (v58 - 18 < 2)
          {
LABEL_297:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v400, (int8x16_t *)"Unrecognized token '", 21, v55, 1uLL, 39);
            v197 = v400;
            if (!v400)
            {
              __break(0xC471u);
              JUMPOUT(0x198B1B888);
            }
LABEL_300:
            v198 = *v12;
            *v12 = v197;
            if (v198)
            {
              v199 = *(_DWORD *)v198 - 2;
              if (*(_DWORD *)v198 == 2)
              {
                WTF::StringImpl::~StringImpl(v198, v190, v191, v192, v193, v194, v195, v196);
                WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
              }
              else
              {
LABEL_302:
                *(_DWORD *)v198 = v199;
              }
            }
            return v26;
          }
          goto LABEL_119;
        }
        v142 = v57 ^ 1;
        if ((_DWORD)v32 != 45)
          v142 = 1;
        if ((v142 & 1) != 0)
        {
          v143 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v55 + 1;
          v143 = 1;
        }
        v144 = &v55[v143];
        if ((unint64_t)v144 >= v29)
          goto LABEL_322;
        v145 = *v144;
        if (v145 == 48)
        {
          v148 = v143 + 1;
        }
        else
        {
          if ((v145 - 49) > 8)
            goto LABEL_322;
          v146 = v143 + 1;
          v147 = 2 * v143 + 2;
          do
          {
            v148 = v146;
            if ((unint64_t)v55 + v147 >= v29)
              break;
            ++v146;
            v147 += 2;
          }
          while (v55[v148] - 48 < 0xA);
        }
        v149 = &v55[v148];
        *(_QWORD *)(a1 + 48) = v149;
        if ((unint64_t)v149 < v29)
        {
          v150 = *v149;
          if (v150 != 101 && v150 != 69)
          {
            if (v150 == 46)
            {
              *(_QWORD *)(a1 + 48) = v149 + 1;
              if ((unint64_t)(v149 + 1) >= v29 || v149[1] - 48 > 9)
                goto LABEL_452;
              v266 = (unint64_t)&v55[v148 + 2];
              do
              {
                v149 = (unsigned __int16 *)v266;
                if (v266 >= v29)
                  break;
                v266 += 2;
              }
              while (*v149 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v149;
            }
            else if (v148 <= 9)
            {
              *v52 = 6;
              if ((_DWORD)v32 == 45)
              {
                if (v148 < 2)
                  goto LABEL_496;
                ++v55;
              }
              v151 = 0;
              do
              {
                v152 = *v55++;
                v151 = v152 + 10 * v151 - 48;
              }
              while (v55 < v149);
              if ((_DWORD)v32 != 45)
              {
                v153 = (double)v151;
                goto LABEL_185;
              }
              if (v151)
              {
                v153 = (double)-v151;
                goto LABEL_185;
              }
LABEL_496:
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              return v26;
            }
          }
        }
        if ((unint64_t)v149 < v29 && (*v149 | 0x20) == 0x65)
        {
          v267 = v149 + 1;
          *(_QWORD *)(a1 + 48) = v149 + 1;
          if ((unint64_t)(v149 + 1) < v29)
          {
            v268 = *v267;
            if (v268 == 45 || v268 == 43)
            {
              v267 = v149 + 2;
              *(_QWORD *)(a1 + 48) = v149 + 2;
            }
          }
          if ((unint64_t)v267 >= v29 || *v267 - 48 > 9)
          {
LABEL_451:
            v243 = WTF::fastCompactMalloc((WTF *)0x20);
            v197 = (WTF::StringImpl *)v243;
            v244 = 0x5D00000002;
            v245 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_323;
          }
          v269 = v267 + 1;
          do
          {
            v149 = v269;
            if ((unint64_t)v269 >= v29)
              break;
            ++v269;
          }
          while (*v149 - 48 < 0xA);
          *(_QWORD *)(a1 + 48) = v149;
        }
        *v52 = 6;
        if ((char *)v149 - (char *)v55 <= -2)
          goto LABEL_739;
        v400 = 0;
        fast_float::from_chars_advanced<double,char16_t>(v55, v149, (double *)&v400, 0x2E00000005);
        v153 = *(double *)&v400;
LABEL_185:
        *(double *)(v10 + 32) = v153;
        return v26;
      }
      if ((_DWORD)v32 == 102)
      {
        if ((uint64_t)(v29 - (_QWORD)v55) >= 9 && *(_DWORD *)(v55 + 1) == 7077985 && *(_DWORD *)(v55 + 3) == 6619251)
        {
          *(_QWORD *)(a1 + 48) = v55 + 5;
          v124 = 12;
LABEL_136:
          *(_BYTE *)(a1 + 24) = v124;
          return v26;
        }
      }
      else if ((_DWORD)v32 == 116)
      {
        if ((uint64_t)(v29 - (_QWORD)v55) >= 7 && *(_DWORD *)(v55 + 1) == 7667826 && v55[3] == 101)
        {
          *(_QWORD *)(a1 + 48) = v55 + 4;
          v124 = 11;
          goto LABEL_136;
        }
      }
      else if ((_DWORD)v32 == 110
             && (uint64_t)(v29 - (_QWORD)v55) >= 7
             && *(_DWORD *)(v55 + 1) == 7078005
             && v55[3] == 108)
      {
        *(_QWORD *)(a1 + 48) = v55 + 4;
        v124 = 13;
        goto LABEL_136;
      }
      *(_QWORD *)(a1 + 32) = v55;
      LODWORD(v246) = (_DWORD)v55;
      if ((unint64_t)v55 < v29)
      {
        v246 = v55;
        do
        {
          v247 = *v246;
          v249 = (v247 | 0x20u) - 97 >= 0x1A && (v247 - 48) >= 0xA && (v247 - 8204) >= 2;
          if (v249 && v247 != 95 && v247 != 36)
            break;
          *(_QWORD *)(a1 + 48) = ++v246;
        }
        while ((unint64_t)v246 < v29);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v246 - (_DWORD)v55) >> 1);
      v124 = 5;
      goto LABEL_136;
    case 7:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token ':'";
      goto LABEL_595;
    case 8:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token '('";
      goto LABEL_595;
    case 9:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token ')'";
      goto LABEL_595;
    case 0xA:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token ','";
      goto LABEL_595;
    case 0xB:
      v100 = (_BYTE *)(a1 + 24);
      v101 = *(unsigned __int16 **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v10 = a1;
      if ((unint64_t)v101 >= v29)
      {
        v103 = 0;
      }
      else
      {
        do
        {
          v102 = *v101 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v101] == 19;
          v103 = !v102;
          if (!v102)
            break;
          *(_QWORD *)(a1 + 48) = ++v101;
        }
        while ((unint64_t)v101 < v29);
      }
      if (v101 == (unsigned __int16 *)v29)
      {
        *v100 = 14;
        return 7;
      }
      *v100 = 18;
      v104 = *v101;
      if (v104 > 0xFF)
        goto LABEL_307;
      v105 = JSC::tokenTypesOfLatin1Characters[v104];
      if (v105 <= 4)
      {
        if (v105 == 4)
        {
          v106 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v104 != 39)
          {
            v107 = (unint64_t)(v101 + 1);
            *(_QWORD *)(a1 + 48) = v101 + 1;
            if (!v106)
            {
              v108 = v29 - v107;
              if ((uint64_t)(v29 - v107) <= -2)
                goto LABEL_739;
              v109 = (int16x8_t *)((char *)v101 + (v108 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v108 <= 0xE)
              {
                if (v29 != v107)
                {
                  v297 = 2 * (v108 >> 1);
                  v298 = (int16x8_t *)(v101 + 1);
                  while (1)
                  {
                    v299 = v298->u16[0];
                    if (v299 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v299])
                      break;
                    v298 = (int16x8_t *)((char *)v298 + 2);
                    v297 -= 2;
                    if (!v297)
                      goto LABEL_160;
                  }
                  v109 = v298;
                }
                goto LABEL_160;
              }
              v110 = v101 + 1;
              if (v108 < 15)
              {
LABEL_113:
                if (v110 >= (unsigned __int16 *)v109)
                  goto LABEL_160;
                v118 = (unsigned __int16 *)&v109[-1];
                v119 = v109[-1];
                v120.i64[0] = 0x22002200220022;
                v120.i64[1] = 0x22002200220022;
                v121 = (int8x16_t)vceqq_s16(v119, v120);
                v122.i64[0] = 0x5C005C005C005CLL;
                v122.i64[1] = 0x5C005C005C005CLL;
                v123.i64[0] = 0x20002000200020;
                v123.i64[1] = 0x20002000200020;
                v117 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v119, v122), (int8x16_t)vcgtq_u16(v123, (uint16x8_t)v119)), v121);
                v121.i16[0] = vmaxvq_u16((uint16x8_t)v117);
                if (!v121.i32[0])
                  goto LABEL_160;
              }
              else
              {
                v111 = v101 + 8;
                v112.i64[0] = 0x22002200220022;
                v112.i64[1] = 0x22002200220022;
                v113.i64[0] = 0x5C005C005C005CLL;
                v113.i64[1] = 0x5C005C005C005CLL;
                v114.i64[0] = 0x20002000200020;
                v114.i64[1] = 0x20002000200020;
                while (1)
                {
                  v115 = *(int16x8_t *)(v111 - 7);
                  v116 = (int8x16_t)vceqq_s16(v115, v112);
                  v117 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v115, v113), (int8x16_t)vcgtq_u16(v114, (uint16x8_t)v115)), v116);
                  v116.i16[0] = vmaxvq_u16((uint16x8_t)v117);
                  if (v116.i32[0])
                    break;
                  v111 += 8;
                  if (v111 >= (unsigned __int16 *)v109)
                  {
                    v110 = v111 - 7;
                    goto LABEL_113;
                  }
                }
                v118 = v111 - 7;
              }
              v109 = (int16x8_t *)&v118[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v117))];
LABEL_160:
              *(_QWORD *)(a1 + 48) = v109;
LABEL_161:
              if ((unint64_t)v109 >= v29 || v109->u16[0] != (_DWORD)v104)
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v12, (uint64_t)v100, v107, v104, a6, a7, a8, a9);
                return 7;
              }
              *(_BYTE *)(a1 + 25) &= ~1u;
              *(_QWORD *)(a1 + 32) = v107;
              *(_QWORD *)(a1 + 48) = (char *)v109->i64 + 2;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v109 - v107) >> 1);
              v141 = 4;
              goto LABEL_164;
            }
LABEL_546:
            v109 = (int16x8_t *)v107;
            if (v107 < v29)
            {
              while (1)
              {
                v292 = v109->u16[0];
                if (v292 < 0x20)
                {
                  if (v292 != 9)
                    goto LABEL_161;
                }
                else if (v292 == (_DWORD)v104 || v292 > 0xFF || v292 == 92)
                {
                  goto LABEL_161;
                }
                v109 = (int16x8_t *)((char *)v109 + 2);
                *(_QWORD *)(a1 + 48) = v109;
                if ((unint64_t)v109 >= v29)
                  goto LABEL_161;
              }
            }
            goto LABEL_161;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v107 = (unint64_t)(v101 + 1);
            *(_QWORD *)(a1 + 48) = v101 + 1;
            goto LABEL_546;
          }
          v257 = WTF::fastCompactMalloc((WTF *)0x20);
          v216 = (WTF::StringImpl *)v257;
          v258 = 0x2900000002;
          v259 = "Single quotes (') are not allowed in JSON";
          goto LABEL_365;
        }
LABEL_147:
        *(_BYTE *)(a1 + 24) = v105;
        *(_QWORD *)(a1 + 48) = v101 + 1;
        return 7;
      }
      if (v105 != 5)
      {
        if (v105 != 6)
        {
          if (v105 - 18 < 2)
          {
LABEL_307:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v400, (int8x16_t *)"Unrecognized token '", 21, v101, 1uLL, 39);
            v216 = v400;
            if (!v400)
            {
              __break(0xC471u);
              JUMPOUT(0x198B1CCE8);
            }
            goto LABEL_308;
          }
          goto LABEL_147;
        }
        v178 = v103 ^ 1;
        if ((_DWORD)v104 != 45)
          v178 = 1;
        if ((v178 & 1) != 0)
        {
          v179 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v101 + 1;
          v179 = 1;
        }
        v180 = &v101[v179];
        if ((unint64_t)v180 < v29)
        {
          v181 = *v180;
          if (v181 == 48)
          {
            v184 = v179 + 1;
LABEL_253:
            v185 = &v101[v184];
            *(_QWORD *)(a1 + 48) = v185;
            if ((unint64_t)v185 < v29)
            {
              v186 = *v185;
              if (v186 != 101 && v186 != 69)
              {
                if (v186 == 46)
                {
                  *(_QWORD *)(a1 + 48) = v185 + 1;
                  if ((unint64_t)(v185 + 1) >= v29 || v185[1] - 48 > 9)
                  {
                    v257 = WTF::fastCompactMalloc((WTF *)0x20);
                    v216 = (WTF::StringImpl *)v257;
                    v258 = 0x2200000002;
                    v259 = "Invalid digits after decimal point";
                    goto LABEL_365;
                  }
                  v293 = (unint64_t)&v101[v184 + 2];
                  do
                  {
                    v185 = (unsigned __int16 *)v293;
                    if (v293 >= v29)
                      break;
                    v293 += 2;
                  }
                  while (*v185 - 48 < 0xA);
                  *(_QWORD *)(a1 + 48) = v185;
                }
                else if (v184 <= 9)
                {
                  *v100 = 6;
                  if ((_DWORD)v104 == 45)
                  {
                    if (v184 < 2)
                      goto LABEL_593;
                    ++v101;
                  }
                  v187 = 0;
                  do
                  {
                    v188 = *v101++;
                    v187 = v188 + 10 * v187 - 48;
                  }
                  while (v101 < v185);
                  if ((_DWORD)v104 != 45)
                  {
                    v189 = (double)v187;
LABEL_263:
                    *(double *)(v10 + 32) = v189;
                    return 7;
                  }
                  if (v187)
                  {
                    v189 = (double)-v187;
                    goto LABEL_263;
                  }
LABEL_593:
                  *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                  return 7;
                }
              }
            }
            if ((unint64_t)v185 >= v29 || (*v185 | 0x20) != 0x65)
            {
LABEL_575:
              *v100 = 6;
              if ((char *)v185 - (char *)v101 <= -2)
                goto LABEL_739;
              v400 = 0;
              fast_float::from_chars_advanced<double,char16_t>(v101, v185, (double *)&v400, 0x2E00000005);
              v189 = *(double *)&v400;
              goto LABEL_263;
            }
            v294 = v185 + 1;
            *(_QWORD *)(a1 + 48) = v185 + 1;
            if ((unint64_t)(v185 + 1) < v29)
            {
              v295 = *v294;
              if (v295 == 45 || v295 == 43)
              {
                v294 = v185 + 2;
                *(_QWORD *)(a1 + 48) = v185 + 2;
              }
            }
            if ((unint64_t)v294 < v29 && *v294 - 48 <= 9)
            {
              v296 = v294 + 1;
              do
              {
                v185 = v296;
                if ((unint64_t)v296 >= v29)
                  break;
                ++v296;
              }
              while (*v185 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v185;
              goto LABEL_575;
            }
            v257 = WTF::fastCompactMalloc((WTF *)0x20);
            v216 = (WTF::StringImpl *)v257;
            v258 = 0x5D00000002;
            v259 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_365:
            *(_QWORD *)v257 = v258;
            *(_QWORD *)(v257 + 8) = v259;
            *(_DWORD *)(v257 + 16) = 4;
LABEL_308:
            v217 = *v12;
            *v12 = v216;
            if (v217)
            {
              if (*(_DWORD *)v217 == 2)
              {
                WTF::StringImpl::~StringImpl(v217, v209, v210, v211, v212, v213, v214, v215);
                WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
              }
              else
              {
                *(_DWORD *)v217 -= 2;
              }
            }
            return 7;
          }
          if ((v181 - 49) <= 8)
          {
            v182 = v179 + 1;
            v183 = 2 * v179 + 2;
            do
            {
              v184 = v182;
              if ((unint64_t)v101 + v183 >= v29)
                break;
              ++v182;
              v183 += 2;
            }
            while (v101[v184] - 48 < 0xA);
            goto LABEL_253;
          }
        }
        v257 = WTF::fastCompactMalloc((WTF *)0x20);
        v216 = (WTF::StringImpl *)v257;
        v258 = 0xE00000002;
        v259 = "Invalid number";
        goto LABEL_365;
      }
      if ((_DWORD)v104 == 102)
      {
        if ((uint64_t)(v29 - (_QWORD)v101) >= 9 && *(_DWORD *)(v101 + 1) == 7077985 && *(_DWORD *)(v101 + 3) == 6619251)
        {
          *(_QWORD *)(a1 + 48) = v101 + 5;
          v141 = 12;
LABEL_164:
          *(_BYTE *)(a1 + 24) = v141;
          return 7;
        }
      }
      else if ((_DWORD)v104 == 116)
      {
        if ((uint64_t)(v29 - (_QWORD)v101) >= 7 && *(_DWORD *)(v101 + 1) == 7667826 && v101[3] == 101)
        {
          *(_QWORD *)(a1 + 48) = v101 + 4;
          v141 = 11;
          goto LABEL_164;
        }
      }
      else if ((_DWORD)v104 == 110
             && (uint64_t)(v29 - (_QWORD)v101) >= 7
             && *(_DWORD *)(v101 + 1) == 7078005
             && v101[3] == 108)
      {
        *(_QWORD *)(a1 + 48) = v101 + 4;
        v141 = 13;
        goto LABEL_164;
      }
      *(_QWORD *)(a1 + 32) = v101;
      LODWORD(v280) = (_DWORD)v101;
      if ((unint64_t)v101 < v29)
      {
        v280 = v101;
        do
        {
          v281 = *v280;
          v283 = (v281 | 0x20u) - 97 >= 0x1A && (v281 - 48) >= 0xA && (v281 - 8204) >= 2;
          if (v283 && v281 != 95 && v281 != 36)
            break;
          *(_QWORD *)(a1 + 48) = ++v280;
        }
        while ((unint64_t)v280 < v29);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v280 - (_DWORD)v101) >> 1);
      v141 = 5;
      goto LABEL_164;
    case 0xC:
      v76 = (_BYTE *)(a1 + 24);
      v77 = *(unsigned __int16 **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v10 = a1;
      if ((unint64_t)v77 >= v29)
      {
        v79 = 0;
      }
      else
      {
        do
        {
          v78 = *v77 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v77] == 19;
          v79 = !v78;
          if (!v78)
            break;
          *(_QWORD *)(a1 + 48) = ++v77;
        }
        while ((unint64_t)v77 < v29);
      }
      if (v77 == (unsigned __int16 *)v29)
      {
        *v76 = 14;
        return 6;
      }
      *v76 = 18;
      v80 = *v77;
      if (v80 > 0xFF)
        goto LABEL_303;
      v81 = JSC::tokenTypesOfLatin1Characters[v80];
      if (v81 <= 4)
      {
        if (v81 == 4)
        {
          v82 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v80 != 39)
          {
            v83 = (unint64_t)(v77 + 1);
            *(_QWORD *)(a1 + 48) = v77 + 1;
            if (!v82)
            {
              v84 = v29 - v83;
              if ((uint64_t)(v29 - v83) <= -2)
                goto LABEL_739;
              v85 = (int16x8_t *)((char *)v77 + (v84 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v84 <= 0xE)
              {
                if (v29 != v83)
                {
                  v289 = 2 * (v84 >> 1);
                  v290 = (int16x8_t *)(v77 + 1);
                  while (1)
                  {
                    v291 = v290->u16[0];
                    if (v291 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v291])
                      break;
                    v290 = (int16x8_t *)((char *)v290 + 2);
                    v289 -= 2;
                    if (!v289)
                      goto LABEL_153;
                  }
                  v85 = v290;
                }
                goto LABEL_153;
              }
              v86 = v77 + 1;
              if (v84 < 15)
              {
LABEL_88:
                if (v86 >= (unsigned __int16 *)v85)
                  goto LABEL_153;
                v94 = (unsigned __int16 *)&v85[-1];
                v95 = v85[-1];
                v96.i64[0] = 0x22002200220022;
                v96.i64[1] = 0x22002200220022;
                v97 = (int8x16_t)vceqq_s16(v95, v96);
                v98.i64[0] = 0x5C005C005C005CLL;
                v98.i64[1] = 0x5C005C005C005CLL;
                v99.i64[0] = 0x20002000200020;
                v99.i64[1] = 0x20002000200020;
                v93 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v95, v98), (int8x16_t)vcgtq_u16(v99, (uint16x8_t)v95)), v97);
                v97.i16[0] = vmaxvq_u16((uint16x8_t)v93);
                if (!v97.i32[0])
                  goto LABEL_153;
              }
              else
              {
                v87 = v77 + 8;
                v88.i64[0] = 0x22002200220022;
                v88.i64[1] = 0x22002200220022;
                v89.i64[0] = 0x5C005C005C005CLL;
                v89.i64[1] = 0x5C005C005C005CLL;
                v90.i64[0] = 0x20002000200020;
                v90.i64[1] = 0x20002000200020;
                while (1)
                {
                  v91 = *(int16x8_t *)(v87 - 7);
                  v92 = (int8x16_t)vceqq_s16(v91, v88);
                  v93 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v91, v89), (int8x16_t)vcgtq_u16(v90, (uint16x8_t)v91)), v92);
                  v92.i16[0] = vmaxvq_u16((uint16x8_t)v93);
                  if (v92.i32[0])
                    break;
                  v87 += 8;
                  if (v87 >= (unsigned __int16 *)v85)
                  {
                    v86 = v87 - 7;
                    goto LABEL_88;
                  }
                }
                v94 = v87 - 7;
              }
              v85 = (int16x8_t *)&v94[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v93))];
LABEL_153:
              *(_QWORD *)(a1 + 48) = v85;
LABEL_154:
              if ((unint64_t)v85 >= v29 || v85->u16[0] != (_DWORD)v80)
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v12, (uint64_t)v76, v83, v80, a6, a7, a8, a9);
                return 6;
              }
              *(_BYTE *)(a1 + 25) &= ~1u;
              *(_QWORD *)(a1 + 32) = v83;
              *(_QWORD *)(a1 + 48) = (char *)v85->i64 + 2;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v85 - v83) >> 1);
              v140 = 4;
              goto LABEL_157;
            }
LABEL_500:
            v85 = (int16x8_t *)v83;
            if (v83 < v29)
            {
              while (1)
              {
                v284 = v85->u16[0];
                if (v284 < 0x20)
                {
                  if (v284 != 9)
                    goto LABEL_154;
                }
                else if (v284 == (_DWORD)v80 || v284 > 0xFF || v284 == 92)
                {
                  goto LABEL_154;
                }
                v85 = (int16x8_t *)((char *)v85 + 2);
                *(_QWORD *)(a1 + 48) = v85;
                if ((unint64_t)v85 >= v29)
                  goto LABEL_154;
              }
            }
            goto LABEL_154;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v83 = (unint64_t)(v77 + 1);
            *(_QWORD *)(a1 + 48) = v77 + 1;
            goto LABEL_500;
          }
          v254 = WTF::fastCompactMalloc((WTF *)0x20);
          v207 = (WTF::StringImpl *)v254;
          v255 = 0x2900000002;
          v256 = "Single quotes (') are not allowed in JSON";
          goto LABEL_363;
        }
LABEL_128:
        *(_BYTE *)(a1 + 24) = v81;
        *(_QWORD *)(a1 + 48) = v77 + 1;
        return 6;
      }
      if (v81 != 5)
      {
        if (v81 != 6)
        {
          if (v81 - 18 < 2)
          {
LABEL_303:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v400, (int8x16_t *)"Unrecognized token '", 21, v77, 1uLL, 39);
            v207 = v400;
            if (!v400)
            {
              __break(0xC471u);
              JUMPOUT(0x198B1CCE0);
            }
            goto LABEL_304;
          }
          goto LABEL_128;
        }
        v166 = v79 ^ 1;
        if ((_DWORD)v80 != 45)
          v166 = 1;
        if ((v166 & 1) != 0)
        {
          v167 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v77 + 1;
          v167 = 1;
        }
        v168 = &v77[v167];
        if ((unint64_t)v168 < v29)
        {
          v169 = *v168;
          if (v169 == 48)
          {
            v172 = v167 + 1;
LABEL_227:
            v173 = &v77[v172];
            *(_QWORD *)(a1 + 48) = v173;
            if ((unint64_t)v173 < v29)
            {
              v174 = *v173;
              if (v174 != 101 && v174 != 69)
              {
                if (v174 == 46)
                {
                  *(_QWORD *)(a1 + 48) = v173 + 1;
                  if ((unint64_t)(v173 + 1) >= v29 || v173[1] - 48 > 9)
                  {
                    v254 = WTF::fastCompactMalloc((WTF *)0x20);
                    v207 = (WTF::StringImpl *)v254;
                    v255 = 0x2200000002;
                    v256 = "Invalid digits after decimal point";
                    goto LABEL_363;
                  }
                  v285 = (unint64_t)&v77[v172 + 2];
                  do
                  {
                    v173 = (unsigned __int16 *)v285;
                    if (v285 >= v29)
                      break;
                    v285 += 2;
                  }
                  while (*v173 - 48 < 0xA);
                  *(_QWORD *)(a1 + 48) = v173;
                }
                else if (v172 <= 9)
                {
                  *v76 = 6;
                  if ((_DWORD)v80 == 45)
                  {
                    if (v172 < 2)
                      goto LABEL_591;
                    ++v77;
                  }
                  v175 = 0;
                  do
                  {
                    v176 = *v77++;
                    v175 = v176 + 10 * v175 - 48;
                  }
                  while (v77 < v173);
                  if ((_DWORD)v80 != 45)
                  {
                    v177 = (double)v175;
LABEL_237:
                    *(double *)(v10 + 32) = v177;
                    return 6;
                  }
                  if (v175)
                  {
                    v177 = (double)-v175;
                    goto LABEL_237;
                  }
LABEL_591:
                  *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                  return 6;
                }
              }
            }
            if ((unint64_t)v173 >= v29 || (*v173 | 0x20) != 0x65)
            {
LABEL_529:
              *v76 = 6;
              if ((char *)v173 - (char *)v77 <= -2)
                goto LABEL_739;
              v400 = 0;
              fast_float::from_chars_advanced<double,char16_t>(v77, v173, (double *)&v400, 0x2E00000005);
              v177 = *(double *)&v400;
              goto LABEL_237;
            }
            v286 = v173 + 1;
            *(_QWORD *)(a1 + 48) = v173 + 1;
            if ((unint64_t)(v173 + 1) < v29)
            {
              v287 = *v286;
              if (v287 == 45 || v287 == 43)
              {
                v286 = v173 + 2;
                *(_QWORD *)(a1 + 48) = v173 + 2;
              }
            }
            if ((unint64_t)v286 < v29 && *v286 - 48 <= 9)
            {
              v288 = v286 + 1;
              do
              {
                v173 = v288;
                if ((unint64_t)v288 >= v29)
                  break;
                ++v288;
              }
              while (*v173 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v173;
              goto LABEL_529;
            }
            v254 = WTF::fastCompactMalloc((WTF *)0x20);
            v207 = (WTF::StringImpl *)v254;
            v255 = 0x5D00000002;
            v256 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_363:
            *(_QWORD *)v254 = v255;
            *(_QWORD *)(v254 + 8) = v256;
            *(_DWORD *)(v254 + 16) = 4;
LABEL_304:
            v208 = *v12;
            *v12 = v207;
            if (v208)
            {
              if (*(_DWORD *)v208 == 2)
              {
                WTF::StringImpl::~StringImpl(v208, v200, v201, v202, v203, v204, v205, v206);
                WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
              }
              else
              {
                *(_DWORD *)v208 -= 2;
              }
            }
            return 6;
          }
          if ((v169 - 49) <= 8)
          {
            v170 = v167 + 1;
            v171 = 2 * v167 + 2;
            do
            {
              v172 = v170;
              if ((unint64_t)v77 + v171 >= v29)
                break;
              ++v170;
              v171 += 2;
            }
            while (v77[v172] - 48 < 0xA);
            goto LABEL_227;
          }
        }
        v254 = WTF::fastCompactMalloc((WTF *)0x20);
        v207 = (WTF::StringImpl *)v254;
        v255 = 0xE00000002;
        v256 = "Invalid number";
        goto LABEL_363;
      }
      if ((_DWORD)v80 == 102)
      {
        if ((uint64_t)(v29 - (_QWORD)v77) >= 9 && *(_DWORD *)(v77 + 1) == 7077985 && *(_DWORD *)(v77 + 3) == 6619251)
        {
          *(_QWORD *)(a1 + 48) = v77 + 5;
          v140 = 12;
LABEL_157:
          *(_BYTE *)(a1 + 24) = v140;
          return 6;
        }
      }
      else if ((_DWORD)v80 == 116)
      {
        if ((uint64_t)(v29 - (_QWORD)v77) >= 7 && *(_DWORD *)(v77 + 1) == 7667826 && v77[3] == 101)
        {
          *(_QWORD *)(a1 + 48) = v77 + 4;
          v140 = 11;
          goto LABEL_157;
        }
      }
      else if ((_DWORD)v80 == 110
             && (uint64_t)(v29 - (_QWORD)v77) >= 7
             && *(_DWORD *)(v77 + 1) == 7078005
             && v77[3] == 108)
      {
        *(_QWORD *)(a1 + 48) = v77 + 4;
        v140 = 13;
        goto LABEL_157;
      }
      *(_QWORD *)(a1 + 32) = v77;
      LODWORD(v260) = (_DWORD)v77;
      if ((unint64_t)v77 < v29)
      {
        v260 = v77;
        do
        {
          v261 = *v260;
          v263 = (v261 | 0x20u) - 97 >= 0x1A && (v261 - 48) >= 0xA && (v261 - 8204) >= 2;
          if (v263 && v261 != 95 && v261 != 36)
            break;
          *(_QWORD *)(a1 + 48) = ++v260;
        }
        while ((unint64_t)v260 < v29);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v260 - (_DWORD)v77) >> 1);
      v140 = 5;
      goto LABEL_157;
    case 0xD:
      v312 = (_BYTE *)(a1 + 24);
      v313 = *(unsigned __int16 **)(a1 + 48);
      v29 = *(_QWORD *)(a1 + 56);
      v10 = a1;
      if ((unint64_t)v313 >= v29)
      {
        v315 = 0;
      }
      else
      {
        do
        {
          v314 = *v313 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v313] == 19;
          v315 = !v314;
          if (!v314)
            break;
          *(_QWORD *)(a1 + 48) = ++v313;
        }
        while ((unint64_t)v313 < v29);
      }
      if (v313 == (unsigned __int16 *)v29)
      {
        *v312 = 14;
        return 2;
      }
      *v312 = 18;
      v316 = *v313;
      if (v316 > 0xFF)
        goto LABEL_696;
      v317 = JSC::tokenTypesOfLatin1Characters[v316];
      if (v317 <= 4)
      {
        if (v317 == 4)
        {
          v318 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v316 != 39)
          {
            v319 = (unint64_t)(v313 + 1);
            *(_QWORD *)(a1 + 48) = v313 + 1;
            if (!v318)
            {
              v320 = v29 - v319;
              if ((uint64_t)(v29 - v319) <= -2)
                goto LABEL_739;
              v321 = (int16x8_t *)((char *)v313 + (v320 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v320 <= 0xE)
              {
                if (v29 != v319)
                {
                  v392 = 2 * (v320 >> 1);
                  v393 = (int16x8_t *)(v313 + 1);
                  while (1)
                  {
                    v394 = v393->u16[0];
                    if (v394 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v394])
                      break;
                    v393 = (int16x8_t *)((char *)v393 + 2);
                    v392 -= 2;
                    if (!v392)
                      goto LABEL_655;
                  }
                  v321 = v393;
                }
                goto LABEL_655;
              }
              v322 = v313 + 1;
              if (v320 < 15)
              {
LABEL_623:
                if (v322 >= (unsigned __int16 *)v321)
                  goto LABEL_655;
                v330 = (unsigned __int16 *)&v321[-1];
                v331 = v321[-1];
                v332.i64[0] = 0x22002200220022;
                v332.i64[1] = 0x22002200220022;
                v333 = (int8x16_t)vceqq_s16(v331, v332);
                v334.i64[0] = 0x5C005C005C005CLL;
                v334.i64[1] = 0x5C005C005C005CLL;
                v335.i64[0] = 0x20002000200020;
                v335.i64[1] = 0x20002000200020;
                v329 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v331, v334), (int8x16_t)vcgtq_u16(v335, (uint16x8_t)v331)), v333);
                v333.i16[0] = vmaxvq_u16((uint16x8_t)v329);
                if (!v333.i32[0])
                  goto LABEL_655;
              }
              else
              {
                v323 = v313 + 8;
                v324.i64[0] = 0x22002200220022;
                v324.i64[1] = 0x22002200220022;
                v325.i64[0] = 0x5C005C005C005CLL;
                v325.i64[1] = 0x5C005C005C005CLL;
                v326.i64[0] = 0x20002000200020;
                v326.i64[1] = 0x20002000200020;
                while (1)
                {
                  v327 = *(int16x8_t *)(v323 - 7);
                  v328 = (int8x16_t)vceqq_s16(v327, v324);
                  v329 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v327, v325), (int8x16_t)vcgtq_u16(v326, (uint16x8_t)v327)), v328);
                  v328.i16[0] = vmaxvq_u16((uint16x8_t)v329);
                  if (v328.i32[0])
                    break;
                  v323 += 8;
                  if (v323 >= (unsigned __int16 *)v321)
                  {
                    v322 = v323 - 7;
                    goto LABEL_623;
                  }
                }
                v330 = v323 - 7;
              }
              v321 = (int16x8_t *)&v330[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v329))];
LABEL_655:
              *(_QWORD *)(a1 + 48) = v321;
LABEL_656:
              if ((unint64_t)v321 >= v29 || v321->u16[0] != (_DWORD)v316)
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v12, (uint64_t)v312, v319, v316, a6, a7, a8, a9);
                return 2;
              }
              *(_BYTE *)(a1 + 25) &= ~1u;
              *(_QWORD *)(a1 + 32) = v319;
              *(_QWORD *)(a1 + 48) = (char *)v321->i64 + 2;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v321 - v319) >> 1);
              v355 = 4;
              goto LABEL_659;
            }
LABEL_707:
            v321 = (int16x8_t *)v319;
            if (v319 < v29)
            {
              while (1)
              {
                v384 = v321->u16[0];
                if (v384 < 0x20)
                {
                  if (v384 != 9)
                    goto LABEL_656;
                }
                else if (v384 == (_DWORD)v316 || v384 > 0xFF || v384 == 92)
                {
                  goto LABEL_656;
                }
                v321 = (int16x8_t *)((char *)v321 + 2);
                *(_QWORD *)(a1 + 48) = v321;
                if ((unint64_t)v321 >= v29)
                  goto LABEL_656;
              }
            }
            goto LABEL_656;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            v319 = (unint64_t)(v313 + 1);
            *(_QWORD *)(a1 + 48) = v313 + 1;
            goto LABEL_707;
          }
          v385 = WTF::fastCompactMalloc((WTF *)0x20);
          v374 = (WTF::StringImpl *)v385;
          v386 = 0x2900000002;
          v387 = "Single quotes (') are not allowed in JSON";
          goto LABEL_745;
        }
LABEL_648:
        *(_BYTE *)(a1 + 24) = v317;
        *(_QWORD *)(a1 + 48) = v313 + 1;
        return 2;
      }
      if (v317 != 5)
      {
        if (v317 != 6)
        {
          if (v317 - 18 < 2)
          {
LABEL_696:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v400, (int8x16_t *)"Unrecognized token '", 21, v313, 1uLL, 39);
            v374 = v400;
            if (!v400)
            {
              __break(0xC471u);
              JUMPOUT(0x198B1D044);
            }
            goto LABEL_697;
          }
          goto LABEL_648;
        }
        v356 = v315 ^ 1;
        if ((_DWORD)v316 != 45)
          v356 = 1;
        if ((v356 & 1) != 0)
        {
          v357 = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v313 + 1;
          v357 = 1;
        }
        v358 = &v313[v357];
        if ((unint64_t)v358 < v29)
        {
          v359 = *v358;
          if (v359 == 48)
          {
            v362 = v357 + 1;
LABEL_675:
            v363 = &v313[v362];
            *(_QWORD *)(a1 + 48) = v363;
            if ((unint64_t)v363 < v29)
            {
              v364 = *v363;
              if (v364 != 101 && v364 != 69)
              {
                if (v364 == 46)
                {
                  *(_QWORD *)(a1 + 48) = v363 + 1;
                  if ((unint64_t)(v363 + 1) >= v29 || v363[1] - 48 > 9)
                  {
                    v385 = WTF::fastCompactMalloc((WTF *)0x20);
                    v374 = (WTF::StringImpl *)v385;
                    v386 = 0x2200000002;
                    v387 = "Invalid digits after decimal point";
                    goto LABEL_745;
                  }
                  v388 = (unint64_t)&v313[v362 + 2];
                  do
                  {
                    v363 = (unsigned __int16 *)v388;
                    if (v388 >= v29)
                      break;
                    v388 += 2;
                  }
                  while (*v363 - 48 < 0xA);
                  *(_QWORD *)(a1 + 48) = v363;
                }
                else if (v362 <= 9)
                {
                  *v312 = 6;
                  if ((_DWORD)v316 == 45)
                  {
                    if (v362 < 2)
                      goto LABEL_756;
                    ++v313;
                  }
                  LODWORD(v29) = 0;
                  do
                  {
                    v365 = *v313++;
                    LODWORD(v29) = v365 + 10 * v29 - 48;
                  }
                  while (v313 < v363);
                  if ((_DWORD)v316 == 45)
                  {
LABEL_740:
                    if ((_DWORD)v29)
                    {
                      v366 = (double)-(int)v29;
                      goto LABEL_685;
                    }
LABEL_756:
                    *(_QWORD *)(v10 + 32) = 0x8000000000000000;
                    return 2;
                  }
                  v366 = (double)(int)v29;
                  goto LABEL_685;
                }
              }
            }
            if ((unint64_t)v363 >= v29 || (*v363 | 0x20) != 0x65)
            {
LABEL_737:
              *v312 = 6;
              if ((char *)v363 - (char *)v313 <= -2)
                goto LABEL_739;
              v400 = 0;
              fast_float::from_chars_advanced<double,char16_t>(v313, v363, (double *)&v400, 0x2E00000005);
              v366 = *(double *)&v400;
LABEL_685:
              *(double *)(v10 + 32) = v366;
              return 2;
            }
            v389 = v363 + 1;
            *(_QWORD *)(a1 + 48) = v363 + 1;
            if ((unint64_t)(v363 + 1) < v29)
            {
              v390 = *v389;
              if (v390 == 45 || v390 == 43)
              {
                v389 = v363 + 2;
                *(_QWORD *)(a1 + 48) = v363 + 2;
              }
            }
            if ((unint64_t)v389 < v29 && *v389 - 48 <= 9)
            {
              v391 = v389 + 1;
              do
              {
                v363 = v391;
                if ((unint64_t)v391 >= v29)
                  break;
                ++v391;
              }
              while (*v363 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v363;
              goto LABEL_737;
            }
            v385 = WTF::fastCompactMalloc((WTF *)0x20);
            v374 = (WTF::StringImpl *)v385;
            v386 = 0x5D00000002;
            v387 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_745:
            *(_QWORD *)v385 = v386;
            *(_QWORD *)(v385 + 8) = v387;
            *(_DWORD *)(v385 + 16) = 4;
LABEL_697:
            v375 = *v12;
            *v12 = v374;
            if (v375)
            {
              if (*(_DWORD *)v375 == 2)
              {
                WTF::StringImpl::~StringImpl(v375, v367, v368, v369, v370, v371, v372, v373);
                WTF::fastFree(v376, v377, v378, v379, v380, v381, v382, v383);
              }
              else
              {
                *(_DWORD *)v375 -= 2;
              }
            }
            return 2;
          }
          if ((v359 - 49) <= 8)
          {
            v360 = v357 + 1;
            v361 = 2 * v357 + 2;
            do
            {
              v362 = v360;
              if ((unint64_t)v313 + v361 >= v29)
                break;
              ++v360;
              v361 += 2;
            }
            while (v313[v362] - 48 < 0xA);
            goto LABEL_675;
          }
        }
        v385 = WTF::fastCompactMalloc((WTF *)0x20);
        v374 = (WTF::StringImpl *)v385;
        v386 = 0xE00000002;
        v387 = "Invalid number";
        goto LABEL_745;
      }
      if ((_DWORD)v316 == 102)
      {
        if ((uint64_t)(v29 - (_QWORD)v313) >= 9 && *(_DWORD *)(v313 + 1) == 7077985 && *(_DWORD *)(v313 + 3) == 6619251)
        {
          *(_QWORD *)(a1 + 48) = v313 + 5;
          v355 = 12;
LABEL_659:
          *(_BYTE *)(a1 + 24) = v355;
          return 2;
        }
      }
      else if ((_DWORD)v316 == 116)
      {
        if ((uint64_t)(v29 - (_QWORD)v313) >= 7 && *(_DWORD *)(v313 + 1) == 7667826 && v313[3] == 101)
        {
          *(_QWORD *)(a1 + 48) = v313 + 4;
          v355 = 11;
          goto LABEL_659;
        }
      }
      else if ((_DWORD)v316 == 110
             && (uint64_t)(v29 - (_QWORD)v313) >= 7
             && *(_DWORD *)(v313 + 1) == 7078005
             && v313[3] == 108)
      {
        *(_QWORD *)(a1 + 48) = v313 + 4;
        v355 = 13;
        goto LABEL_659;
      }
      *(_QWORD *)(a1 + 32) = v313;
      LODWORD(v395) = (_DWORD)v313;
      if ((unint64_t)v313 < v29)
      {
        v395 = v313;
        do
        {
          v396 = *v395;
          v398 = (v396 | 0x20u) - 97 >= 0x1A && (v396 - 48) >= 0xA && (v396 - 8204) >= 2;
          if (v398 && v396 != 95 && v396 != 36)
            break;
          *(_QWORD *)(a1 + 48) = ++v395;
        }
        while ((unint64_t)v395 < v29);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v395 - (_DWORD)v313) >> 1);
      v355 = 5;
      goto LABEL_659;
    case 0xE:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0xE00000002;
      v311 = "Unexpected EOF";
      goto LABEL_595;
    case 0xF:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token '.'";
      goto LABEL_595;
    case 0x10:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token '='";
      goto LABEL_595;
    case 0x11:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x1400000002;
      v311 = "Unexpected token ';'";
      goto LABEL_595;
    default:
      v300 = a1;
      v301 = WTF::fastCompactMalloc((WTF *)0x20);
      v309 = v301;
      v310 = 0x2000000002;
      v311 = "Could not parse value expression";
LABEL_595:
      *(_QWORD *)v301 = v310;
      *(_QWORD *)(v301 + 8) = v311;
      *(_DWORD *)(v301 + 16) = 4;
      v198 = *(WTF::StringImpl **)(v300 + 96);
      *(_QWORD *)(v300 + 96) = v309;
      if (!v198)
        return 0;
      v199 = *(_DWORD *)v198 - 2;
      if (*(_DWORD *)v198 != 2)
      {
        v26 = 0;
        goto LABEL_302;
      }
LABEL_643:
      WTF::StringImpl::~StringImpl(v198, v302, v303, v304, v305, v306, v307, v308);
      WTF::fastFree(v345, v346, v347, v348, v349, v350, v351, v352);
      return 0;
  }
}

uint64_t JSC::LiteralParser<char16_t>::parse(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  __n128 v12;
  int v13;
  size_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  void *v17;
  WTF::AtomStringImpl *v18;
  size_t v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  JSC::VM *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int16x8_t *v40;
  unint64_t v41;
  unint64_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  int16x8_t *v70;
  unint64_t v71;
  unint64_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  unsigned __int16 *v78;
  int16x8_t v79;
  int16x8_t v80;
  int8x16_t v81;
  int16x8_t v82;
  uint16x8_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v97;
  unsigned int v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  int16x8_t *v102;
  unint64_t v103;
  unint64_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int8x16_t v107;
  int16x8_t v108;
  uint16x8_t v109;
  uint64_t v110;
  rlim_t v111;
  char v112;
  WTF::AtomStringImpl *v113;
  WTF::AtomStringImpl *v114;
  rlim_t v115;
  int v116;
  JSC *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int16 *v127;
  int v128;
  int v129;
  int v130;
  char v131;
  uint64_t v132;
  unsigned __int16 *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int16 *v138;
  int v139;
  int v140;
  int v141;
  char v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  int v154;
  uint64_t v155;
  rlim_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  const char *v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int16 *v170;
  int v171;
  BOOL v172;
  BOOL v173;
  WTF::AtomStringImpl *v174;
  WTF::StringImpl *v175;
  int v177;
  uint64_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int8x16_t v181;
  int16x8_t v182;
  uint16x8_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int16 *v198;
  int v199;
  int v200;
  unsigned int v201;
  unint64_t v202;
  unsigned __int16 *v203;
  int v204;
  unsigned __int16 *v205;
  uint64_t v206;
  int16x8_t *v207;
  unint64_t v208;
  unsigned __int8 *v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  int v214;
  unint64_t v215;
  uint64_t v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  int16x8_t *v221;
  unint64_t v222;
  unint64_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int8x16_t v226;
  int16x8_t v227;
  uint16x8_t v228;
  unsigned __int16 *v229;
  int16x8_t v230;
  int16x8_t v231;
  int8x16_t v232;
  int16x8_t v233;
  uint16x8_t v234;
  char v235;
  uint64_t v236;
  unsigned __int16 *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int16 *v242;
  int v243;
  int v244;
  int v245;
  char v246;
  unsigned int v247;
  unsigned __int16 *v248;
  unint64_t v249;
  unint64_t v251;
  unsigned int v252;
  int v253;
  uint64_t v254;
  int16x8_t *v255;
  unsigned __int16 *v256;
  unsigned __int16 *v257;
  int16x8_t v258;
  int16x8_t v259;
  int8x16_t v260;
  int16x8_t v261;
  uint16x8_t v262;
  unsigned __int16 *v263;
  int16x8_t v264;
  int16x8_t v265;
  int8x16_t v266;
  int16x8_t v267;
  uint16x8_t v268;
  int16x8_t *v269;
  int v270;
  unint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  int16x8_t *v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __int32 v284;
  __int32 v285;
  int *v286;
  uint64_t v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  unsigned __int16 *v290;
  unint64_t v291;
  unint64_t v293;
  unsigned int v294;
  int v295;
  unint64_t v296;
  uint64_t v297;
  int16x8_t *v298;
  unsigned __int16 *v299;
  unsigned __int16 *v300;
  int16x8_t v301;
  int16x8_t v302;
  int8x16_t v303;
  int16x8_t v304;
  uint16x8_t v305;
  int8x16_t v306;
  unsigned __int16 *v307;
  int16x8_t v308;
  int16x8_t v309;
  int8x16_t v310;
  int16x8_t v311;
  uint16x8_t v312;
  unint64_t v313;
  uint64_t v315;
  unsigned int v316;
  int v317;
  uint64_t v318;
  int16x8_t *v319;
  unint64_t v320;
  unint64_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int8x16_t v324;
  int16x8_t v325;
  uint16x8_t v326;
  unsigned __int16 *v327;
  int16x8_t v328;
  int16x8_t v329;
  int8x16_t v330;
  int16x8_t v331;
  uint16x8_t v332;
  unint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  unsigned __int16 *v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned __int16 *v348;
  int v349;
  int v350;
  int v351;
  char v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  int v358;
  unsigned int v359;
  rlim_t v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  int v363;
  uint64_t v364;
  WTF::StringImpl *v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  int16x8_t *v391;
  int16x8_t *v392;
  unsigned __int16 *v393;
  int v394;
  BOOL v396;
  uint64_t v397;
  const char *v398;
  unsigned int v399;
  uint64_t v400;
  int16x8_t *v401;
  unint64_t v402;
  uint64_t v403;
  int16x8_t *v404;
  uint16x8_t v405;
  unint64_t v406;
  int16x8_t *v407;
  uint64_t v408;
  uint64_t v409;
  _DWORD *v410;
  WTF::StringImpl *v411;
  unint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned __int16 *v420;
  int v421;
  BOOL v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unsigned int v428;
  unint64_t v429;
  unsigned __int16 *v430;
  int v431;
  unsigned __int16 *v432;
  uint64_t v433;
  int16x8_t *v434;
  unint64_t v435;
  unsigned __int16 *v436;
  int v437;
  BOOL v439;
  unsigned int v440;
  uint64_t v441;
  int16x8_t *v442;
  unint64_t v443;
  WTF::StringImpl *v445;
  uint64_t v446;
  __int16 v447;
  uint64_t v448;
  unint64_t v449;
  unsigned __int16 *v450;
  int v451;
  unsigned __int16 *v452;
  uint64_t v453;
  uint64_t v454;
  const char *v455;
  uint64_t v456;
  int16x8_t *v457;
  unint64_t v458;
  unsigned int v459;
  WTF::StringImpl *v460;
  unsigned __int16 *v461;
  int v462;
  BOOL v464;
  unsigned __int16 *v465;
  int v466;
  BOOL v468;
  int v469;
  BOOL v471;
  unint64_t v472;
  void *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unint64_t v485;
  unsigned __int16 *v486;
  int v487;
  unsigned __int16 *v488;
  uint64_t v489;
  uint64_t v490;
  const char *v491;
  unint64_t v492;
  unsigned __int16 *v493;
  int v494;
  unsigned __int16 *v495;
  unint64_t v496;
  unsigned __int16 *v497;
  int v498;
  unsigned __int16 *v499;
  uint64_t v500;
  int16x8_t *v501;
  unint64_t v502;
  uint64_t v503;
  int16x8_t *v504;
  unint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  WTF::StringImpl *v516;
  unint64_t v517;
  void *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int **v525;
  unint64_t v526;
  __int32 v527;
  __int32 v528;
  WTF::StringImpl *v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  int16x8_t *v539;
  int16x8_t *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t v543;
  uint64_t *v544;
  unint64_t v545;
  BOOL v546;
  char v547;
  unint64_t v548;
  unsigned int v549;
  int v550;
  uint64_t v551;
  int16x8_t *v552;
  unint64_t v553;
  unint64_t v554;
  int16x8_t v555;
  int16x8_t v556;
  int8x16_t v557;
  int16x8_t v558;
  uint16x8_t v559;
  unsigned __int16 *v560;
  int16x8_t v561;
  int16x8_t v562;
  int8x16_t v563;
  int16x8_t v564;
  uint16x8_t v565;
  BOOL v566;
  char v567;
  char v568;
  uint64_t v569;
  char v570;
  unsigned __int16 *v571;
  int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned __int16 *v576;
  int v577;
  int v578;
  int v579;
  char v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t SlowCase;
  unint64_t v586;
  unint64_t v588;
  unsigned int v589;
  int v590;
  uint64_t v591;
  int16x8_t *v592;
  unint64_t v593;
  unint64_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int8x16_t v597;
  int16x8_t v598;
  uint16x8_t v599;
  unsigned __int16 *v600;
  int16x8_t v601;
  int16x8_t v602;
  int8x16_t v603;
  int16x8_t v604;
  uint16x8_t v605;
  uint8x8_t *v606;
  int v607;
  unint64_t v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t v611;
  int16x8_t *v612;
  __int32 v613;
  __int32 v614;
  WTF::StringImpl *v615;
  unsigned __int16 *v616;
  unint64_t v617;
  unint64_t v619;
  unsigned int v620;
  int v621;
  unint64_t v622;
  uint64_t v623;
  int16x8_t *v624;
  unsigned __int16 *v625;
  unsigned __int16 *v626;
  int16x8_t v627;
  int16x8_t v628;
  int8x16_t v629;
  int16x8_t v630;
  uint16x8_t v631;
  int8x16_t v632;
  unsigned __int16 *v633;
  int16x8_t v634;
  int16x8_t v635;
  int8x16_t v636;
  int16x8_t v637;
  uint16x8_t v638;
  unint64_t v639;
  unsigned __int16 *v640;
  unsigned int v642;
  int v643;
  uint64_t v644;
  int16x8_t *v645;
  unsigned __int16 *v646;
  unsigned __int16 *v647;
  int16x8_t v648;
  int16x8_t v649;
  int8x16_t v650;
  int16x8_t v651;
  uint16x8_t v652;
  int8x16_t v653;
  unsigned __int16 *v654;
  int16x8_t v655;
  int16x8_t v656;
  int8x16_t v657;
  int16x8_t v658;
  uint16x8_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  WTF::StringImpl *v665;
  uint64_t v666;
  int v667;
  char v668;
  char v669;
  unsigned int v670;
  unint64_t v671;
  WTF::AtomStringImpl *v672;
  uint64_t v673;
  void *v674;
  WTF::AtomStringImpl *v675;
  size_t v676;
  uint64_t v677;
  unsigned __int16 *v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unsigned __int16 *v683;
  int v684;
  int v685;
  int v686;
  double v687;
  char v688;
  uint64_t v689;
  unsigned __int16 *v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unsigned __int16 *v695;
  int v696;
  int v697;
  int v698;
  uint64_t v699;
  uint64_t v700;
  unint64_t v701;
  uint64_t v703;
  unsigned int v704;
  int v705;
  uint64_t v706;
  int16x8_t *v707;
  unint64_t v708;
  unint64_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int8x16_t v712;
  int16x8_t v713;
  uint16x8_t v714;
  rlim_t v715;
  uint64_t v717;
  WTF::StringImpl *v718;
  const char *v719;
  uint64_t v720;
  unsigned int v721;
  int v722;
  unint64_t v723;
  uint64_t v724;
  int16x8_t *v725;
  unint64_t v726;
  unint64_t v727;
  int16x8_t v728;
  int16x8_t v729;
  int8x16_t v730;
  int16x8_t v731;
  uint16x8_t v732;
  unsigned __int16 *v733;
  int16x8_t v734;
  int16x8_t v735;
  int8x16_t v736;
  int16x8_t v737;
  uint16x8_t v738;
  uint64_t v740;
  unsigned int v741;
  int v742;
  unint64_t v743;
  uint64_t v744;
  int16x8_t *v745;
  unint64_t v746;
  unint64_t v747;
  int16x8_t v748;
  int16x8_t v749;
  int8x16_t v750;
  int16x8_t v751;
  uint16x8_t v752;
  unsigned __int16 *v753;
  int16x8_t v754;
  int16x8_t v755;
  int8x16_t v756;
  int16x8_t v757;
  uint16x8_t v758;
  WTF::AtomStringImpl *v759;
  WTF::AtomStringImpl *v760;
  rlim_t v761;
  int v762;
  JSC *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unsigned __int16 *v767;
  int v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  unsigned __int16 *v772;
  int v773;
  int v774;
  int v775;
  char v776;
  char v777;
  unint64_t v778;
  void *v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  _DWORD *v788;
  uint64_t v789;
  unsigned __int16 *v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unsigned __int16 *v795;
  int v796;
  int v797;
  int v798;
  char v799;
  uint64_t v800;
  unsigned __int16 *v801;
  int v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unsigned __int16 *v806;
  int v807;
  int v808;
  int v809;
  char v810;
  WTF::StringImpl **v811;
  WTF::AtomStringImpl *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  rlim_t v819;
  WTF::StringImpl *v820;
  rlim_t v821;
  WTF::StringImpl *v822;
  int *v823;
  uint64_t *v824;
  unint64_t v825;
  void *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t v833;
  void *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  int16x8_t *v842;
  int16x8_t *v843;
  WTF::AtomStringImpl *v844;
  uint64_t v845;
  rlim_t v846;
  WTF::StringImpl *v847;
  WTF::AtomStringImpl *v848;
  uint64_t v849;
  rlim_t v850;
  WTF::StringImpl *v851;
  unint64_t v852;
  void *v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  void *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  _BYTE *v868;
  int v869;
  unint64_t v870;
  int16x8_t *v871;
  uint64_t v872;
  unsigned int v873;
  uint64_t v874;
  int16x8_t *v875;
  uint64_t v876;
  uint64_t v877;
  int16x8_t *v878;
  uint16x8_t v879;
  unint64_t v880;
  int16x8_t *v881;
  uint64_t v882;
  _DWORD *v883;
  uint64_t v884;
  WTF::StringImpl *v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  const char *v895;
  unsigned __int16 *v896;
  int v897;
  BOOL v899;
  unint64_t v900;
  unint64_t v901;
  uint64_t v902;
  WTF::StringImpl *v904;
  uint64_t v905;
  const char *v906;
  WTF::AtomStringImpl *v907;
  WTF::StringImpl *v908;
  int v910;
  uint64_t v911;
  int16x8_t v912;
  int16x8_t v913;
  int8x16_t v914;
  int16x8_t v915;
  uint16x8_t v916;
  unsigned __int16 *v917;
  int16x8_t v918;
  int16x8_t v919;
  int8x16_t v920;
  int16x8_t v921;
  uint16x8_t v922;
  char v923;
  WTF::StringImpl *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  int v929;
  _BYTE *v930;
  uint64_t v931;
  JSC::VM *v932;
  unsigned __int16 *v934;
  uint64_t v935;
  unsigned int v936;
  unint64_t v937;
  void *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  unsigned __int16 *v946;
  int v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  int v951;
  int v952;
  char v953;
  WTF::StringImpl *v954;
  unint64_t v955;
  void *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  __int32 v963;
  __int32 v964;
  WTF::StringImpl *v965;
  unsigned __int16 *v966;
  int v967;
  BOOL v969;
  unsigned int v970;
  unsigned int v971;
  uint64_t v972;
  uint64_t v973;
  int v974;
  uint64_t v975;
  unsigned __int16 *v976;
  uint64_t v977;
  unsigned __int16 *v978;
  const char *v979;
  unsigned __int16 v980;
  WTF::StringImpl *v981;
  unsigned int v982;
  unint64_t v983;
  unsigned __int16 *v984;
  int v985;
  unsigned __int16 *v986;
  uint64_t v987;
  int16x8_t *v988;
  unint64_t v989;
  uint64_t v990;
  const char *v991;
  uint64_t v993;
  WTF::StringImpl *v994;
  uint64_t v995;
  __int16 v996;
  unsigned int v997;
  unsigned __int16 *v998;
  unint64_t v999;
  unsigned __int16 *v1000;
  int v1001;
  unsigned __int16 *v1002;
  uint64_t v1003;
  uint64_t v1004;
  int16x8_t *v1005;
  unint64_t v1006;
  WTF::StringImpl *v1007;
  unint64_t v1008;
  void *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  unsigned __int16 *v1016;
  int v1017;
  BOOL v1019;
  int v1020;
  BOOL v1022;
  unsigned int v1023;
  unint64_t v1024;
  unsigned __int16 *v1025;
  int v1026;
  unsigned __int16 *v1027;
  uint64_t v1028;
  int16x8_t *v1029;
  unint64_t v1030;
  unsigned int v1031;
  unint64_t v1032;
  unsigned __int16 *v1033;
  int v1034;
  unsigned __int16 *v1035;
  uint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  void *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  unsigned __int8 *v1046;
  uint64_t v1047;
  unsigned int v1048;
  unint64_t v1049;
  BOOL v1050;
  char v1051;
  unint64_t v1052;
  unsigned int v1053;
  int v1054;
  uint64_t v1055;
  int16x8_t *v1056;
  unint64_t v1057;
  unint64_t v1058;
  int16x8_t v1059;
  int16x8_t v1060;
  int8x16_t v1061;
  int16x8_t v1062;
  uint16x8_t v1063;
  unsigned __int16 *v1064;
  int16x8_t v1065;
  int16x8_t v1066;
  int8x16_t v1067;
  int16x8_t v1068;
  uint16x8_t v1069;
  WTF::StringImpl *v1070;
  unint64_t v1071;
  void *v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unint64_t v1079;
  void *v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  char v1087;
  uint64_t v1088;
  unsigned __int16 *v1089;
  int v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unsigned __int16 *v1094;
  int v1095;
  int v1096;
  int v1097;
  double v1098;
  char v1099;
  WTF::AtomStringImpl *v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  rlim_t v1107;
  WTF::StringImpl *v1108;
  int v1109;
  int v1110;
  unint64_t v1111;
  void *v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  const char *v1120;
  unsigned __int16 *v1121;
  int v1122;
  BOOL v1124;
  unsigned int v1125;
  unint64_t v1126;
  unsigned __int16 *v1127;
  int v1128;
  unsigned __int16 *v1129;
  uint64_t v1130;
  int16x8_t *v1131;
  unint64_t v1132;
  uint64_t v1133;
  const char *v1134;
  uint64_t v1135;
  const char *v1136;
  unsigned __int16 *v1137;
  int v1138;
  BOOL v1140;
  unsigned __int16 *v1141;
  int v1142;
  BOOL v1144;
  unsigned int v1145;
  unint64_t v1146;
  unsigned __int16 *v1147;
  int v1148;
  unsigned __int16 *v1149;
  uint64_t v1150;
  int16x8_t *v1151;
  unint64_t v1152;
  unsigned int v1153;
  unint64_t v1154;
  unsigned __int16 *v1155;
  int v1156;
  unsigned __int16 *v1157;
  uint64_t v1158;
  int16x8_t *v1159;
  unint64_t v1160;
  uint64_t v1161;
  _DWORD *v1162;
  int **v1163;
  unint64_t v1164;
  unint64_t v1165;
  int16x8_t *v1166;
  int16x8_t *v1167;
  __n128 *v1168;
  uint64_t v1169;
  _DWORD *v1170;
  uint64_t v1171;
  WTF::StringImpl *v1172;
  unint64_t v1173;
  void *v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1182;
  unsigned int v1183;
  int v1184;
  unint64_t v1185;
  uint64_t v1186;
  int16x8_t *v1187;
  unint64_t v1188;
  unint64_t v1189;
  int16x8_t v1190;
  int16x8_t v1191;
  int8x16_t v1192;
  int16x8_t v1193;
  uint16x8_t v1194;
  unsigned __int16 *v1195;
  int16x8_t v1196;
  int16x8_t v1197;
  int8x16_t v1198;
  int16x8_t v1199;
  uint16x8_t v1200;
  char v1201;
  uint64_t v1202;
  unsigned __int16 *v1203;
  int v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  unsigned __int16 *v1208;
  int v1209;
  int v1210;
  int v1211;
  char v1212;
  WTF::AtomStringImpl *v1213;
  uint64_t v1214;
  rlim_t v1215;
  WTF::StringImpl *v1216;
  unint64_t v1217;
  void *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  const char *v1226;
  unsigned __int16 *v1227;
  int v1228;
  BOOL v1230;
  unsigned int v1231;
  unint64_t v1232;
  unsigned __int16 *v1233;
  int v1234;
  unsigned __int16 *v1235;
  uint64_t v1236;
  int16x8_t *v1237;
  unint64_t v1238;
  unint64_t v1239;
  unsigned __int16 *v1240;
  int v1241;
  BOOL v1243;
  unsigned int v1244;
  uint64_t v1245;
  int16x8_t *v1246;
  unint64_t v1247;
  unint64_t v1248;
  uint64_t v1250;
  unsigned int v1251;
  int v1252;
  unint64_t v1253;
  uint64_t v1254;
  int16x8_t *v1255;
  unint64_t v1256;
  unint64_t v1257;
  int16x8_t v1258;
  int16x8_t v1259;
  int8x16_t v1260;
  int16x8_t v1261;
  uint16x8_t v1262;
  uint64_t v1263;
  rlim_t v1264;
  int v1266;
  uint64_t v1267;
  int16x8_t v1268;
  int16x8_t v1269;
  int8x16_t v1270;
  int16x8_t v1271;
  uint16x8_t v1272;
  unsigned __int16 *v1273;
  int16x8_t v1274;
  int16x8_t v1275;
  int8x16_t v1276;
  int16x8_t v1277;
  uint16x8_t v1278;
  int v1279;
  size_t v1280;
  WTF::AtomStringImpl *v1281;
  uint64_t v1282;
  void *v1283;
  WTF::AtomStringImpl *v1284;
  size_t v1285;
  uint64_t v1286;
  char v1287;
  unint64_t v1288;
  BOOL v1289;
  char v1290;
  BOOL v1291;
  char v1292;
  unint64_t v1293;
  BOOL v1294;
  char v1295;
  uint64_t v1296;
  unsigned __int16 *v1297;
  int v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  unsigned __int16 *v1302;
  int v1303;
  int v1304;
  int v1305;
  WTF::AtomStringImpl *v1306;
  WTF::AtomStringImpl *v1307;
  rlim_t v1308;
  int v1309;
  JSC *v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  unsigned __int16 *v1315;
  int v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  int v1320;
  int v1321;
  char v1322;
  unint64_t v1323;
  void *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  _DWORD *v1333;
  _QWORD *v1335;
  uint64_t *v1336;
  uint64_t v1337;
  WTF::StringImpl *v1338;
  int v1339;
  unsigned int v1340;
  int v1341;
  uint64_t v1342;
  int16x8_t v1343;
  int16x8_t v1344;
  int8x16_t v1345;
  int16x8_t v1346;
  uint16x8_t v1347;
  unsigned __int16 *v1348;
  int16x8_t v1349;
  int16x8_t v1350;
  int8x16_t v1351;
  int16x8_t v1352;
  uint16x8_t v1353;
  char v1354;
  char v1355;
  uint64_t v1356;
  unsigned __int16 *v1357;
  int v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  int v1362;
  int v1363;
  char v1364;
  unsigned int v1365;
  WTF::StringImpl *v1366;
  unsigned int v1367;
  int v1368;
  uint64_t v1369;
  int16x8_t v1370;
  int16x8_t v1371;
  int8x16_t v1372;
  int16x8_t v1373;
  uint16x8_t v1374;
  char v1375;
  uint64_t v1376;
  unsigned __int16 *v1377;
  int v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  int v1382;
  int v1383;
  unint64_t v1384;
  void *v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  unsigned int v1393;
  int v1394;
  unint64_t v1395;
  uint64_t v1396;
  int16x8_t *v1397;
  unint64_t v1398;
  unint64_t v1399;
  int16x8_t v1400;
  int16x8_t v1401;
  int8x16_t v1402;
  int16x8_t v1403;
  uint16x8_t v1404;
  unsigned __int16 *v1405;
  int16x8_t v1406;
  int16x8_t v1407;
  int8x16_t v1408;
  int16x8_t v1409;
  uint16x8_t v1410;
  char v1411;
  char v1412;
  uint64_t v1413;
  unsigned __int16 *v1414;
  int v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  unsigned __int16 *v1419;
  int v1420;
  int v1421;
  int v1422;
  char v1423;
  WTF::StringImpl *v1424;
  uint64_t v1425;
  unsigned int v1426;
  int v1427;
  unint64_t v1428;
  uint64_t v1429;
  int16x8_t *v1430;
  unint64_t v1431;
  unint64_t v1432;
  int16x8_t v1433;
  int16x8_t v1434;
  int8x16_t v1435;
  int16x8_t v1436;
  uint16x8_t v1437;
  unsigned __int16 *v1438;
  int16x8_t v1439;
  int16x8_t v1440;
  int8x16_t v1441;
  int16x8_t v1442;
  uint16x8_t v1443;
  char v1444;
  char v1445;
  uint64_t v1446;
  unsigned __int16 *v1447;
  int v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unsigned __int16 *v1452;
  int v1453;
  int v1454;
  int v1455;
  char v1456;
  unint64_t v1457;
  void *v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  unint64_t v1465;
  void *v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  rlim_t v1474;
  WTF::StringImpl *v1475;
  uint64_t v1476;
  rlim_t v1477;
  WTF::StringImpl *v1478;
  unint64_t v1479;
  void *v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  unint64_t v1487;
  void *v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  _BYTE *v1495;
  unsigned __int16 *v1496;
  int v1497;
  BOOL v1499;
  unint64_t v1500;
  BOOL v1501;
  char v1502;
  WTF::AtomStringImpl *v1503;
  WTF::StringImpl *v1504;
  BOOL v1505;
  char v1506;
  unint64_t v1507;
  void *v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  int v1515;
  uint64_t v1516;
  int16x8_t v1517;
  int16x8_t v1518;
  int8x16_t v1519;
  int16x8_t v1520;
  uint16x8_t v1521;
  unsigned __int16 *v1522;
  int16x8_t v1523;
  int16x8_t v1524;
  int8x16_t v1525;
  int16x8_t v1526;
  uint16x8_t v1527;
  char v1528;
  uint64_t v1529;
  char v1530;
  uint64_t v1531;
  unsigned __int16 *v1532;
  int v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  int v1537;
  int v1538;
  char v1539;
  WTF::StringImpl *v1540;
  unint64_t v1541;
  void *v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  const char *v1550;
  uint64_t v1551;
  const char *v1552;
  uint64_t v1553;
  unsigned int v1554;
  unint64_t v1555;
  unsigned __int16 *v1556;
  int v1557;
  unsigned __int16 *v1558;
  uint64_t v1559;
  uint64_t v1560;
  const char *v1561;
  uint64_t v1562;
  int16x8_t *v1563;
  unint64_t v1564;
  uint64_t v1565;
  const char *v1566;
  WTF::StringImpl *v1567;
  unsigned __int16 *v1568;
  int v1569;
  BOOL v1571;
  int v1572;
  BOOL v1574;
  unsigned int v1575;
  unint64_t v1576;
  unsigned __int16 *v1577;
  int v1578;
  unsigned __int16 *v1579;
  uint64_t v1580;
  int16x8_t *v1581;
  unint64_t v1582;
  unsigned int v1583;
  unint64_t v1584;
  unsigned __int16 *v1585;
  int v1586;
  unsigned __int16 *v1587;
  uint64_t v1588;
  unint64_t v1589;
  unint64_t v1590;
  void *v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  int v1598;
  BOOL v1600;
  int v1601;
  BOOL v1603;
  int v1604;
  BOOL v1606;
  uint64_t v1607;
  const char *v1608;
  uint64_t v1609;
  const char *v1610;
  unsigned int v1611;
  unint64_t v1612;
  unsigned __int16 *v1613;
  int v1614;
  unsigned __int16 *v1615;
  uint64_t v1616;
  unint64_t v1617;
  unsigned __int16 *v1618;
  int v1619;
  BOOL v1621;
  unsigned int v1622;
  unsigned int v1623;
  unint64_t v1624;
  unsigned __int16 *v1625;
  int v1626;
  unsigned __int16 *v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  const char *v1631;
  unint64_t v1632;
  unsigned __int16 *v1633;
  int v1634;
  unsigned __int16 *v1635;
  uint64_t v1636;
  unint64_t v1637;
  uint64_t v1638;
  unint64_t v1639;
  unsigned __int16 *v1640;
  int v1641;
  BOOL v1643;
  WTF::StringImpl *v1644;
  unsigned int v1645;
  unint64_t v1646;
  unsigned __int16 *v1647;
  int v1648;
  unsigned __int16 *v1649;
  uint64_t v1650;
  int16x8_t *v1651;
  unint64_t v1652;
  unsigned int v1653;
  unint64_t v1654;
  unsigned __int16 *v1655;
  int v1656;
  unsigned __int16 *v1657;
  uint64_t v1658;
  int16x8_t *v1659;
  unint64_t v1660;
  unint64_t v1661;
  void *v1662;
  uint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  unsigned int v1670;
  int v1671;
  unint64_t v1672;
  uint64_t v1673;
  int16x8_t *v1674;
  unint64_t v1675;
  unint64_t v1676;
  int16x8_t v1677;
  int16x8_t v1678;
  int8x16_t v1679;
  int16x8_t v1680;
  uint16x8_t v1681;
  unsigned __int16 *v1682;
  int16x8_t v1683;
  int16x8_t v1684;
  int8x16_t v1685;
  int16x8_t v1686;
  uint16x8_t v1687;
  char v1688;
  char v1689;
  uint64_t v1690;
  unsigned __int16 *v1691;
  int v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  unsigned __int16 *v1696;
  int v1697;
  int v1698;
  int v1699;
  char v1700;
  uint64_t v1701;
  rlim_t v1702;
  WTF::StringImpl *v1703;
  unint64_t v1704;
  void *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  const char *v1713;
  unsigned __int16 *v1714;
  int v1715;
  BOOL v1717;
  unsigned int v1718;
  unint64_t v1719;
  unsigned __int16 *v1720;
  int v1721;
  unsigned __int16 *v1722;
  uint64_t v1723;
  int16x8_t *v1724;
  unint64_t v1725;
  uint64_t v1726;
  WTF::AtomStringImpl *v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  WTF::StringImpl *v1734;
  const char *v1735;
  WTF::StringImpl *v1736;
  uint64_t v1737;
  unsigned __int16 *v1738;
  int v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  unsigned __int16 *v1743;
  int v1744;
  int v1745;
  int v1746;
  double v1747;
  char v1748;
  uint64_t v1749;
  uint64_t v1750;
  unsigned __int16 *v1751;
  int v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  unsigned __int16 *v1756;
  int v1757;
  int v1758;
  int v1759;
  double v1760;
  char v1761;
  char v1762;
  uint64_t v1763;
  unsigned __int16 *v1764;
  unint64_t v1765;
  uint64_t v1767;
  unsigned __int16 *v1768;
  int v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  unsigned __int16 *v1773;
  int v1774;
  int v1775;
  int v1776;
  double v1777;
  char v1778;
  unint64_t v1779;
  unsigned int v1780;
  int v1781;
  unint64_t v1782;
  uint64_t v1783;
  int16x8_t *v1784;
  unsigned __int16 *v1785;
  unsigned __int16 *v1786;
  int16x8_t v1787;
  int16x8_t v1788;
  uint16x8_t v1789;
  int16x8_t v1790;
  int8x16_t v1791;
  int8x16_t v1792;
  unsigned __int16 *v1793;
  int16x8_t v1794;
  int16x8_t v1795;
  int8x16_t v1796;
  int16x8_t v1797;
  uint16x8_t v1798;
  char v1799;
  WTF::AtomStringImpl *v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  rlim_t v1807;
  WTF::StringImpl *v1808;
  uint64_t v1809;
  unsigned __int16 *v1810;
  int v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t v1814;
  unsigned __int16 *v1815;
  int v1816;
  int v1817;
  int v1818;
  double v1819;
  char v1820;
  WTF::AtomStringImpl *v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  rlim_t v1828;
  WTF::StringImpl *v1829;
  unint64_t v1830;
  void *v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  WTF::AtomStringImpl *v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  rlim_t v1845;
  WTF::StringImpl *v1846;
  unint64_t v1847;
  void *v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  unint64_t v1855;
  void *v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  WTF::AtomStringImpl *v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  rlim_t v1870;
  WTF::StringImpl *v1871;
  unint64_t v1872;
  void *v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  uint64_t v1880;
  const char *v1881;
  uint64_t v1882;
  const char *v1883;
  unsigned int v1884;
  uint64_t v1885;
  _WORD *v1886;
  uint64_t v1887;
  int v1888;
  uint64_t v1889;
  _WORD *v1890;
  uint64_t v1891;
  const char *v1892;
  _WORD *v1893;
  __int16 v1894;
  WTF::StringImpl *v1895;
  unint64_t v1896;
  unsigned __int16 *v1897;
  int v1898;
  unsigned __int16 *v1899;
  unint64_t v1900;
  unsigned __int16 *v1901;
  int v1902;
  unsigned __int16 *v1903;
  uint64_t v1904;
  const char *v1905;
  unsigned __int16 *v1906;
  int v1907;
  BOOL v1909;
  unint64_t v1910;
  void *v1911;
  uint64_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  unint64_t v1919;
  void *v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  unint64_t v1927;
  unsigned __int16 *v1928;
  int v1929;
  unsigned __int16 *v1930;
  uint64_t v1931;
  const char *v1932;
  unsigned __int16 *v1933;
  int v1934;
  BOOL v1936;
  unsigned int v1937;
  unint64_t v1938;
  unsigned __int16 *v1939;
  int v1940;
  unsigned __int16 *v1941;
  uint64_t v1942;
  int16x8_t *v1943;
  unint64_t v1944;
  WTF::AtomStringImpl *v1945;
  __int128 v1946;
  uint64_t v1947;
  uint64_t v1948;
  _BYTE *v1949;
  JSC::VMTraps *v1950;
  WTF::StringImpl **v1951;
  uint64_t *v1952;
  _BYTE *v1953;
  uint64_t *v1954;
  JSC::MarkedVectorBase *v1955;
  _QWORD *v1956;
  uint64_t *v1957;
  WTF::AtomStringImpl **v1958;
  WTF::StringImpl **v1960;
  uint64_t v1961;
  uint64_t v1962;
  WTF::StringImpl *v1963;
  unint64_t v1964;
  double v1965;
  int *v1966;
  int v1967;
  int v1968;
  uint64_t v1969;
  int *v1970[2];

  v9 = 0;
  v1953 = (_BYTE *)(a2 + 41952);
  v10 = (char *)(a1 + 3);
  v11 = a1 + 6;
  v1955 = (JSC::MarkedVectorBase *)(a1 + 15);
  v1956 = a1 + 26;
  v1954 = a1 + 30;
  v1951 = (WTF::StringImpl **)(a1 + 2);
  v1952 = a1 + 13;
  v1960 = (WTF::StringImpl **)(a1 + 12);
  v1962 = a2 + 64784;
  v1957 = a1 + 18;
  v1958 = (WTF::AtomStringImpl **)(a1 + 4);
  v1950 = (JSC::VMTraps *)(a2 + 64);
  v1949 = (_BYTE *)(a2 + 44265);
  v12 = (__n128)xmmword_199158AA0;
  while (2)
  {
    switch((char)a3)
    {
      case 0:
LABEL_1253:
        v1948 = v9;
        do
        {
          v1964 = 0;
          v581 = *a1;
          v582 = *(_QWORD *)(*a1 + 56);
          v583 = *(_QWORD *)(v582 + 15056);
          if (v583)
          {
            v584 = *(unsigned int *)(v583 + 60);
            SlowCase = *(_QWORD *)(v583 + 24);
            if (SlowCase < *(_QWORD *)(v583 + 32))
              goto LABEL_1256;
            SlowCase = *(_QWORD *)(v583 + 40);
            if ((SlowCase & 1) == 0)
            {
              v1239 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v583 + 48);
              *(_QWORD *)(v583 + 32) = SlowCase + HIDWORD(v1239);
              *(_QWORD *)(v583 + 40) = SlowCase + (int)v1239;
LABEL_1256:
              *(_QWORD *)(v583 + 24) = SlowCase + v584;
              goto LABEL_1257;
            }
            JSC::sanitizeStackForVM(*(JSC **)(*a1 + 56), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v583, v582 + 192, v584, 0, 0);
          }
          else
          {
            SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v582 + 14936, *(JSC **)(*a1 + 56), 0x40uLL, 0, a5, a6, a7, a8);
            if (!SlowCase)
            {
              __break(0xC471u);
              JUMPOUT(0x198B2A8F0);
            }
          }
LABEL_1257:
          *(_DWORD *)SlowCase = 0;
          *(_DWORD *)SlowCase = *(_DWORD *)(v581 + 848);
          *(_DWORD *)(SlowCase + 4) = 16783360;
          v12 = 0uLL;
          *(_OWORD *)(SlowCase + 8) = 0u;
          *(_OWORD *)(SlowCase + 24) = 0u;
          *(_OWORD *)(SlowCase + 40) = 0u;
          *(_QWORD *)(SlowCase + 56) = 0;
          if (*(_BYTE *)(v582 + 755))
            __dmb(0xAu);
          v1964 = SlowCase;
          a4 = a1[6];
          v586 = a1[7];
          while (a4 < v586)
          {
            if (*(unsigned __int16 *)a4 > 0xFFu
              || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
            {
              break;
            }
            a4 += 2;
            *v11 = a4;
          }
          if (a4 == v586)
          {
            v1748 = 14;
            goto LABEL_4049;
          }
          *v10 = 18;
          v588 = *(unsigned __int16 *)a4;
          if (v588 > 0xFF)
            goto LABEL_4167;
          v589 = JSC::tokenTypesOfLatin1Characters[v588];
          if (v589 > 4)
          {
            if (v589 == 5)
            {
              if ((_DWORD)v588 == 102)
              {
                if ((uint64_t)(v586 - a4) < 9 || *(_DWORD *)(a4 + 2) != 7077985 || *(_DWORD *)(a4 + 6) != 6619251)
                {
LABEL_2726:
                  *v1958 = (WTF::AtomStringImpl *)a4;
                  LODWORD(v1240) = a4;
                  if (a4 < v586)
                  {
                    v1240 = (unsigned __int16 *)a4;
                    do
                    {
                      v1241 = *v1240;
                      v1243 = (v1241 | 0x20u) - 97 >= 0x1A
                           && (v1241 - 48) >= 0xA
                           && (v1241 - 8204) >= 2;
                      if (v1243 && v1241 != 95 && v1241 != 36)
                        break;
                      *v11 = ++v1240;
                    }
                    while ((unint64_t)v1240 < v586);
                  }
                  *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1240 - a4) >> 1);
                  v589 = 5;
                  *((_BYTE *)a1 + 24) = 5;
LABEL_2718:
                  if (v589 == 5 && *((_BYTE *)a1 + 88))
                    goto LABEL_1295;
LABEL_2764:
                  if (v589 == 3)
                  {
                    a4 = a1[6];
                    v1248 = a1[7];
                    while (a4 < v1248)
                    {
                      if (*(unsigned __int16 *)a4 > 0xFFu
                        || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                      {
                        break;
                      }
                      a4 += 2;
                      *v11 = a4;
                    }
                    if (a4 != v1248)
                    {
                      *v10 = 18;
                      v1250 = *(unsigned __int16 *)a4;
                      if (v1250 > 0xFF)
                        goto LABEL_2789;
                      v1251 = JSC::tokenTypesOfLatin1Characters[v1250];
                      if (v1251 <= 4)
                      {
                        if (v1251 == 4)
                        {
                          v1252 = *((unsigned __int8 *)a1 + 40);
                          if ((_DWORD)v1250 != 39)
                          {
                            v1253 = a4 + 2;
                            *v11 = a4 + 2;
                            if (!v1252)
                            {
                              v1254 = v1248 - v1253;
                              if ((uint64_t)(v1248 - v1253) > -2)
                              {
                                v1255 = (int16x8_t *)((v1254 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                                if ((unint64_t)v1254 > 0xE)
                                {
                                  v1256 = a4 + 2;
                                  if (v1254 >= 15)
                                  {
                                    v1257 = a4 + 16;
                                    while (1)
                                    {
                                      v1258 = *(int16x8_t *)(v1257 - 14);
                                      v1259.i64[0] = 0x22002200220022;
                                      v1259.i64[1] = 0x22002200220022;
                                      v1260 = (int8x16_t)vceqq_s16(v1258, v1259);
                                      v1261.i64[0] = 0x5C005C005C005CLL;
                                      v1261.i64[1] = 0x5C005C005C005CLL;
                                      v1262.i64[0] = 0x20002000200020;
                                      v1262.i64[1] = 0x20002000200020;
                                      v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1258, v1261), (int8x16_t)vcgtq_u16(v1262, (uint16x8_t)v1258)), v1260);
                                      v1260.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                      if (v1260.i32[0])
                                        break;
                                      v1257 += 16;
                                      if (v1257 >= (unint64_t)v1255)
                                      {
LABEL_2812:
                                        v1256 = v1257 - 14;
                                        goto LABEL_2813;
                                      }
                                    }
LABEL_2827:
                                    v1273 = (unsigned __int16 *)(v1257 - 14);
LABEL_2828:
                                    v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                    v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                    v1255 = (int16x8_t *)&v1273[v12.n128_u8[0]];
LABEL_2829:
                                    *v11 = v1255;
LABEL_2830:
                                    if ((unint64_t)v1255 < v1248 && v1255->u16[0] == (_DWORD)v1250)
                                    {
                                      *((_BYTE *)a1 + 25) &= ~1u;
                                      a1[4] = v1253;
                                      a1[6] = (uint64_t)v1255->i64 + 2;
                                      *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1255 - v1253) >> 1);
                                      v1287 = 4;
                                      goto LABEL_2833;
                                    }
                                    JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1253, v1250, a5, a6, a7, a8);
LABEL_2838:
                                    v9 = v1964;
                                    goto LABEL_3312;
                                  }
LABEL_2813:
                                  if (v1256 < (unint64_t)v1255)
                                  {
                                    v1273 = (unsigned __int16 *)&v1255[-1];
                                    v1274 = v1255[-1];
                                    v1275.i64[0] = 0x22002200220022;
                                    v1275.i64[1] = 0x22002200220022;
                                    v1276 = (int8x16_t)vceqq_s16(v1274, v1275);
                                    v1277.i64[0] = 0x5C005C005C005CLL;
                                    v1277.i64[1] = 0x5C005C005C005CLL;
                                    v1278.i64[0] = 0x20002000200020;
                                    v1278.i64[1] = 0x20002000200020;
                                    v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1274, v1277), (int8x16_t)vcgtq_u16(v1278, (uint16x8_t)v1274)), v1276);
                                    v1276.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                    if (v1276.i32[0])
                                      goto LABEL_2828;
                                  }
                                  goto LABEL_2829;
                                }
                                if (v1248 == v1253)
                                  goto LABEL_2829;
                                v1580 = 2 * (v1254 >> 1);
                                v1581 = (int16x8_t *)(a4 + 2);
                                while (1)
                                {
                                  v1582 = v1581->u16[0];
                                  if (v1582 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1582])
                                    break;
                                  v1581 = (int16x8_t *)((char *)v1581 + 2);
                                  v1580 -= 2;
                                  if (!v1580)
                                    goto LABEL_2829;
                                }
LABEL_3763:
                                v1255 = v1581;
                                goto LABEL_2829;
                              }
LABEL_4442:
                              __break(1u);
LABEL_4443:
                              v1931 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1870 = v1931;
                              *(_QWORD *)v1931 = 0x5D00000002;
                              v1932 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4455:
                              *(_QWORD *)(v1931 + 8) = v1932;
                              *(_DWORD *)(v1931 + 16) = 4;
LABEL_4224:
                              v1871 = *v1951;
                              *v1951 = (WTF::StringImpl *)v1870;
                              if (v1871)
                              {
                                if (*(_DWORD *)v1871 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v1871, v1863, v1864, v1865, v1866, v1867, v1868, v1869);
                                  WTF::fastFree(v1872, v1873, v1874, v1875, v1876, v1877, v1878, v1879);
                                }
                                else
                                {
                                  *(_DWORD *)v1871 -= 2;
                                }
                              }
LABEL_4206:
                              v1726 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1734 = (WTF::StringImpl *)v1726;
                              v1735 = "Unexpected content at end of JSON literal";
                              v1763 = 0x2900000002;
LABEL_4094:
                              *(_QWORD *)v1726 = v1763;
LABEL_4024:
                              *(_QWORD *)(v1726 + 8) = v1735;
                              *(_DWORD *)(v1726 + 16) = 4;
                              v1736 = *v1960;
                              *v1960 = v1734;
                              if (!v1736)
                                return 0;
                              if (*(_DWORD *)v1736 != 2)
                              {
                                v1961 = 0;
                                *(_DWORD *)v1736 -= 2;
                                return v1961;
                              }
LABEL_4331:
                              WTF::StringImpl::~StringImpl(v1736, v1727, v1728, v1729, v1730, v1731, v1732, v1733);
                              WTF::fastFree(v1910, v1911, v1912, v1913, v1914, v1915, v1916, v1917);
                              return 0;
                            }
LABEL_3449:
                            v1255 = (int16x8_t *)v1253;
                            if (v1253 < v1248)
                            {
                              while (1)
                              {
                                v1575 = v1255->u16[0];
                                if (v1575 < 0x20)
                                {
                                  if (v1575 != 9)
                                    goto LABEL_2830;
                                }
                                else if (v1575 == (_DWORD)v1250 || v1575 > 0xFF || v1575 == 92)
                                {
                                  goto LABEL_2830;
                                }
                                v1255 = (int16x8_t *)((char *)v1255 + 2);
                                *v11 = v1255;
                                if ((unint64_t)v1255 >= v1248)
                                  goto LABEL_2830;
                              }
                            }
LABEL_3771:
                            v1255 = (int16x8_t *)v1253;
                            goto LABEL_2830;
                          }
                          if (*((_BYTE *)a1 + 40))
                          {
                            v1253 = a4 + 2;
                            *v11 = a4 + 2;
                            goto LABEL_3449;
                          }
LABEL_3944:
                          v1551 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1264 = v1551;
                          v12.n128_u64[0] = 0x2900000002;
                          *(_QWORD *)v1551 = 0x2900000002;
                          v1552 = "Single quotes (') are not allowed in JSON";
LABEL_3628:
                          *(_QWORD *)(v1551 + 8) = v1552;
                          *(_DWORD *)(v1551 + 16) = 4;
LABEL_3147:
                          v1424 = *v1951;
                          *v1951 = (WTF::StringImpl *)v1264;
                          if (v1424)
                          {
                            if (*(_DWORD *)v1424 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1424, (WTF::AtomStringImpl *)a2, v1263, a4, a5, a6, a7, a8);
                              WTF::fastFree(v1465, v1466, v1467, v1468, v1469, v1470, v1471, v1472);
                            }
                            else
                            {
                              *(_DWORD *)v1424 -= 2;
                            }
                          }
                          goto LABEL_2838;
                        }
LABEL_2837:
                        *v10 = v1251;
                        *v11 = a4 + 2;
                        goto LABEL_2838;
                      }
                      if (v1251 != 5)
                      {
                        if (v1251 != 6)
                        {
                          if (v1251 - 18 >= 2)
                            goto LABEL_2837;
LABEL_2789:
                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                          v1264 = *(_QWORD *)&v1965;
                          if (v1965 == 0.0)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198B2A928);
                          }
                          goto LABEL_3147;
                        }
                        v1296 = 0;
                        if (a4 < v1248 && (_DWORD)v1250 == 45)
                        {
                          *v11 = a4 + 2;
                          v1296 = 1;
                        }
                        v1297 = (unsigned __int16 *)(a4 + 2 * v1296);
                        if ((unint64_t)v1297 < v1248)
                        {
                          v1298 = *v1297;
                          if (v1298 == 48)
                          {
                            v1301 = v1296 + 1;
                            goto LABEL_2882;
                          }
                          if ((v1298 - 49) <= 8)
                          {
                            v1299 = v1296 + 1;
                            v1300 = 2 * v1296 + 2;
                            do
                            {
                              v1301 = v1299;
                              if (a4 + v1300 >= v1248)
                                break;
                              ++v1299;
                              v1300 += 2;
                            }
                            while (*(unsigned __int16 *)(a4 + 2 * v1301) - 48 < 0xA);
LABEL_2882:
                            v1302 = (unsigned __int16 *)(a4 + 2 * v1301);
                            *v11 = v1302;
                            if ((unint64_t)v1302 >= v1248)
                              goto LABEL_3465;
                            v1303 = *v1302;
                            if (v1303 == 101 || v1303 == 69)
                              goto LABEL_3465;
                            if (v1303 != 46)
                            {
                              if (v1301 <= 9)
                              {
                                *v10 = 6;
                                if ((_DWORD)v1250 == 45)
                                {
                                  if (v1301 >= 2)
                                  {
                                    a4 += 2;
                                    goto LABEL_2888;
                                  }
                                }
                                else
                                {
LABEL_2888:
                                  v1304 = 0;
                                  do
                                  {
                                    v1305 = *(unsigned __int16 *)a4;
                                    a4 += 2;
                                    v1304 = v1305 + 10 * v1304 - 48;
                                  }
                                  while (a4 < (unint64_t)v1302);
LABEL_2926:
                                  if ((_DWORD)v1250 != 45)
                                  {
                                    v12.n128_f64[0] = (double)v1304;
                                    goto LABEL_2928;
                                  }
                                  if (v1304)
                                  {
                                    v12.n128_f64[0] = (double)-v1304;
                                    goto LABEL_2928;
                                  }
                                }
LABEL_3631:
                                *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                goto LABEL_2838;
                              }
LABEL_3465:
                              if ((unint64_t)v1302 >= v1248 || (*v1302 | 0x20) != 0x65)
                                goto LABEL_3624;
                              v1577 = v1302 + 1;
                              *v11 = v1302 + 1;
                              if ((unint64_t)(v1302 + 1) < v1248)
                              {
                                v1578 = *v1577;
                                if (v1578 == 45 || v1578 == 43)
                                {
                                  v1577 = v1302 + 2;
                                  *v11 = v1302 + 2;
                                }
                              }
                              if ((unint64_t)v1577 < v1248 && *v1577 - 48 <= 9)
                              {
                                v1579 = v1577 + 1;
                                do
                                {
                                  v1302 = v1579;
                                  if ((unint64_t)v1579 >= v1248)
                                    break;
                                  ++v1579;
                                }
                                while (*v1302 - 48 < 0xA);
LABEL_3623:
                                *v11 = v1302;
LABEL_3624:
                                *v10 = 6;
                                if ((uint64_t)((uint64_t)v1302 - a4) <= -2)
                                  goto LABEL_4442;
                                v1965 = 0.0;
                                fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1302, &v1965, 0x2E00000005);
                                v12.n128_f64[0] = v1965;
LABEL_2928:
                                *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                goto LABEL_2838;
                              }
LABEL_3626:
                              v1551 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1264 = v1551;
                              v12.n128_u64[0] = 0x5D00000002;
                              *(_QWORD *)v1551 = 0x5D00000002;
                              v1552 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                              goto LABEL_3628;
                            }
                            *v11 = v1302 + 1;
                            if ((unint64_t)(v1302 + 1) < v1248 && v1302[1] - 48 <= 9)
                            {
                              v1576 = a4 + 2 * v1301 + 4;
                              do
                              {
                                v1302 = (unsigned __int16 *)v1576;
                                if (v1576 >= v1248)
                                  break;
                                v1576 += 2;
                              }
                              while (*v1302 - 48 < 0xA);
                              *v11 = v1302;
                              goto LABEL_3465;
                            }
LABEL_3627:
                            v1551 = WTF::fastCompactMalloc((WTF *)0x20);
                            v1264 = v1551;
                            *(_QWORD *)v1551 = 0x2200000002;
                            v1552 = "Invalid digits after decimal point";
                            goto LABEL_3628;
                          }
                        }
LABEL_3354:
                        v1551 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1264 = v1551;
                        *(_QWORD *)v1551 = 0xE00000002;
                        v1552 = "Invalid number";
                        goto LABEL_3628;
                      }
                      if ((_DWORD)v1250 == 102)
                      {
                        if ((uint64_t)(v1248 - a4) < 9
                          || *(_DWORD *)(a4 + 2) != 7077985
                          || *(_DWORD *)(a4 + 6) != 6619251)
                        {
LABEL_3412:
                          *v1958 = (WTF::AtomStringImpl *)a4;
                          LODWORD(v1568) = a4;
                          if (a4 < v1248)
                          {
                            v1568 = (unsigned __int16 *)a4;
                            do
                            {
                              v1569 = *v1568;
                              v1571 = (v1569 | 0x20u) - 97 >= 0x1A
                                   && (v1569 - 48) >= 0xA
                                   && (v1569 - 8204) >= 2;
                              if (v1571 && v1569 != 95 && v1569 != 36)
                                break;
                              *v11 = ++v1568;
                            }
                            while ((unint64_t)v1568 < v1248);
                          }
LABEL_3551:
                          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1568 - a4) >> 1);
                          v1287 = 5;
LABEL_2833:
                          *((_BYTE *)a1 + 24) = v1287;
                          goto LABEL_2838;
                        }
LABEL_2933:
                        *v11 = a4 + 10;
                        v1322 = 12;
LABEL_2939:
                        *v10 = v1322;
                        goto LABEL_2838;
                      }
                      if ((_DWORD)v1250 == 116)
                      {
                        if ((uint64_t)(v1248 - a4) < 7 || *(_DWORD *)(a4 + 2) != 7667826 || *(_WORD *)(a4 + 6) != 101)
                          goto LABEL_3412;
                        goto LABEL_2938;
                      }
                      if ((_DWORD)v1250 != 110
                        || (uint64_t)(v1248 - a4) < 7
                        || *(_DWORD *)(a4 + 2) != 7078005
                        || *(_WORD *)(a4 + 6) != 108)
                      {
                        goto LABEL_3412;
                      }
LABEL_3537:
                      *v11 = a4 + 8;
                      v1322 = 13;
                      goto LABEL_2939;
                    }
LABEL_2948:
                    v1322 = 14;
                    goto LABEL_2939;
                  }
LABEL_4050:
                  v1749 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v1749 = 0xC00000002;
                  *(_QWORD *)(v1749 + 8) = "Expected '}'";
                  *(_DWORD *)(v1749 + 16) = 4;
                  v1736 = *v1960;
                  *v1960 = (WTF::StringImpl *)v1749;
                  if (!v1736)
                    return 0;
                  if (*(_DWORD *)v1736 != 2)
                  {
                    *(_DWORD *)v1736 -= 2;
                    return 0;
                  }
                  goto LABEL_4331;
                }
                *v11 = a4 + 10;
                v1748 = 12;
              }
              else if ((_DWORD)v588 == 116)
              {
                if ((uint64_t)(v586 - a4) < 7 || *(_DWORD *)(a4 + 2) != 7667826 || *(_WORD *)(a4 + 6) != 101)
                  goto LABEL_2726;
                *v11 = a4 + 8;
                v1748 = 11;
              }
              else
              {
                if ((_DWORD)v588 != 110
                  || (uint64_t)(v586 - a4) < 7
                  || *(_DWORD *)(a4 + 2) != 7078005
                  || *(_WORD *)(a4 + 6) != 108)
                {
                  goto LABEL_2726;
                }
                *v11 = a4 + 8;
                v1748 = 13;
              }
LABEL_4049:
              *v10 = v1748;
              goto LABEL_4050;
            }
            if (v589 != 6)
            {
              if (v589 - 18 >= 2)
              {
LABEL_2763:
                *v10 = v589;
                *v11 = a4 + 2;
                goto LABEL_2764;
              }
LABEL_4167:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
              v1807 = *(_QWORD *)&v1965;
              if (v1965 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x198B2AC78);
              }
              goto LABEL_4168;
            }
            v1737 = 0;
            if (a4 < v586 && (_DWORD)v588 == 45)
            {
              *v11 = a4 + 2;
              v1737 = 1;
            }
            v1738 = (unsigned __int16 *)(a4 + 2 * v1737);
            if ((unint64_t)v1738 >= v586)
              goto LABEL_4230;
            v1739 = *v1738;
            if (v1739 == 48)
            {
              v1742 = v1737 + 1;
              goto LABEL_4036;
            }
            if ((v1739 - 49) > 8)
            {
LABEL_4230:
              v1880 = WTF::fastCompactMalloc((WTF *)0x20);
              v1807 = v1880;
              *(_QWORD *)v1880 = 0xE00000002;
              v1881 = "Invalid number";
            }
            else
            {
              v1740 = v1737 + 1;
              v1741 = 2 * v1737 + 2;
              do
              {
                v1742 = v1740;
                if (a4 + v1741 >= v586)
                  break;
                ++v1740;
                v1741 += 2;
              }
              while (*(unsigned __int16 *)(a4 + 2 * v1742) - 48 < 0xA);
LABEL_4036:
              v1743 = (unsigned __int16 *)(a4 + 2 * v1742);
              *v11 = v1743;
              if ((unint64_t)v1743 >= v586)
                goto LABEL_4259;
              v1744 = *v1743;
              if (v1744 == 101 || v1744 == 69)
                goto LABEL_4259;
              if (v1744 == 46)
              {
                *v11 = v1743 + 1;
                if ((unint64_t)(v1743 + 1) < v586 && v1743[1] - 48 <= 9)
                {
                  v1896 = a4 + 2 * v1742 + 4;
                  do
                  {
                    v1743 = (unsigned __int16 *)v1896;
                    if (v1896 >= v586)
                      break;
                    v1896 += 2;
                  }
                  while (*v1743 - 48 < 0xA);
                  *v11 = v1743;
                  goto LABEL_4259;
                }
                v1880 = WTF::fastCompactMalloc((WTF *)0x20);
                v1807 = v1880;
                *(_QWORD *)v1880 = 0x2200000002;
                v1881 = "Invalid digits after decimal point";
              }
              else
              {
                if (v1742 <= 9)
                {
                  *v10 = 6;
                  if ((_DWORD)v588 == 45)
                  {
                    if (v1742 >= 2)
                    {
                      a4 += 2;
                      goto LABEL_4042;
                    }
                  }
                  else
                  {
LABEL_4042:
                    v1745 = 0;
                    do
                    {
                      v1746 = *(unsigned __int16 *)a4;
                      a4 += 2;
                      v1745 = v1746 + 10 * v1745 - 48;
                    }
                    while (a4 < (unint64_t)v1743);
                    if ((_DWORD)v588 != 45)
                    {
                      v1747 = (double)v1745;
LABEL_4046:
                      *(double *)v1958 = v1747;
                      goto LABEL_4050;
                    }
                    if (v1745)
                    {
                      v1747 = (double)-v1745;
                      goto LABEL_4046;
                    }
                  }
                  *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_4050;
                }
LABEL_4259:
                if ((unint64_t)v1743 >= v586 || (*v1743 | 0x20) != 0x65)
                {
LABEL_4271:
                  *v10 = 6;
                  if ((uint64_t)((uint64_t)v1743 - a4) <= -2)
                    goto LABEL_4442;
                  v1965 = 0.0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1743, &v1965, 0x2E00000005);
                  v1747 = v1965;
                  goto LABEL_4046;
                }
                v1897 = v1743 + 1;
                *v11 = v1743 + 1;
                if ((unint64_t)(v1743 + 1) < v586)
                {
                  v1898 = *v1897;
                  if (v1898 == 45 || v1898 == 43)
                  {
                    v1897 = v1743 + 2;
                    *v11 = v1743 + 2;
                  }
                }
                if ((unint64_t)v1897 < v586 && *v1897 - 48 <= 9)
                {
                  v1899 = v1897 + 1;
                  do
                  {
                    v1743 = v1899;
                    if ((unint64_t)v1899 >= v586)
                      break;
                    ++v1899;
                  }
                  while (*v1743 - 48 < 0xA);
                  *v11 = v1743;
                  goto LABEL_4271;
                }
                v1880 = WTF::fastCompactMalloc((WTF *)0x20);
                v1807 = v1880;
                *(_QWORD *)v1880 = 0x5D00000002;
                v1881 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
              }
            }
LABEL_4279:
            *(_QWORD *)(v1880 + 8) = v1881;
            *(_DWORD *)(v1880 + 16) = 4;
LABEL_4168:
            v1808 = *v1951;
            *v1951 = (WTF::StringImpl *)v1807;
            if (v1808)
            {
              if (*(_DWORD *)v1808 == 2)
              {
                WTF::StringImpl::~StringImpl(v1808, v1800, v1801, v1802, v1803, v1804, v1805, v1806);
                WTF::fastFree(v1830, v1831, v1832, v1833, v1834, v1835, v1836, v1837);
              }
              else
              {
                *(_DWORD *)v1808 -= 2;
              }
            }
            goto LABEL_4050;
          }
          if (v589 != 4)
            goto LABEL_2763;
          v590 = *((unsigned __int8 *)a1 + 40);
          if ((_DWORD)v588 == 39)
          {
            if (*((_BYTE *)a1 + 40))
            {
              a3 = a4 + 2;
              *v11 = a4 + 2;
              goto LABEL_2742;
            }
            v1880 = WTF::fastCompactMalloc((WTF *)0x20);
            v1807 = v1880;
            *(_QWORD *)v1880 = 0x2900000002;
            v1881 = "Single quotes (') are not allowed in JSON";
            goto LABEL_4279;
          }
          a3 = a4 + 2;
          *v11 = a4 + 2;
          if (!v590)
          {
            v591 = v586 - a3;
            if ((uint64_t)(v586 - a3) <= -2)
              goto LABEL_4442;
            v592 = (int16x8_t *)((v591 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
            if ((unint64_t)v591 <= 0xE)
            {
              if (v586 != a3)
              {
                v1245 = 2 * (v591 >> 1);
                v1246 = (int16x8_t *)(a4 + 2);
                while (1)
                {
                  v1247 = v1246->u16[0];
                  if (v1247 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1247])
                    break;
                  v1246 = (int16x8_t *)((char *)v1246 + 2);
                  v1245 -= 2;
                  if (!v1245)
                    goto LABEL_1291;
                }
                v592 = v1246;
              }
              goto LABEL_1291;
            }
            v593 = a4 + 2;
            if (v591 < 15)
            {
LABEL_1280:
              if (v593 >= (unint64_t)v592)
                goto LABEL_1291;
              v600 = (unsigned __int16 *)&v592[-1];
              v601 = v592[-1];
              v602.i64[0] = 0x22002200220022;
              v602.i64[1] = 0x22002200220022;
              v603 = (int8x16_t)vceqq_s16(v601, v602);
              v604.i64[0] = 0x5C005C005C005CLL;
              v604.i64[1] = 0x5C005C005C005CLL;
              v605.i64[0] = 0x20002000200020;
              v605.i64[1] = 0x20002000200020;
              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v601, v604), (int8x16_t)vcgtq_u16(v605, (uint16x8_t)v601)), v603);
              v603.i16[0] = vmaxvq_u16((uint16x8_t)v12);
              if (!v603.i32[0])
                goto LABEL_1291;
            }
            else
            {
              v594 = a4 + 16;
              while (1)
              {
                v595 = *(int16x8_t *)(v594 - 14);
                v596.i64[0] = 0x22002200220022;
                v596.i64[1] = 0x22002200220022;
                v597 = (int8x16_t)vceqq_s16(v595, v596);
                v598.i64[0] = 0x5C005C005C005CLL;
                v598.i64[1] = 0x5C005C005C005CLL;
                v599.i64[0] = 0x20002000200020;
                v599.i64[1] = 0x20002000200020;
                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v595, v598), (int8x16_t)vcgtq_u16(v599, (uint16x8_t)v595)), v597);
                v597.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                if (v597.i32[0])
                  break;
                v594 += 16;
                if (v594 >= (unint64_t)v592)
                {
                  v593 = v594 - 14;
                  goto LABEL_1280;
                }
              }
              v600 = (unsigned __int16 *)(v594 - 14);
            }
            v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
            v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
            v592 = (int16x8_t *)&v600[v12.n128_u8[0]];
LABEL_1291:
            *v11 = v592;
            goto LABEL_1292;
          }
LABEL_2742:
          v592 = (int16x8_t *)a3;
          if (a3 < v586)
          {
            while (1)
            {
              v1244 = v592->u16[0];
              if (v1244 < 0x20)
              {
                if (v1244 != 9)
                  goto LABEL_1292;
              }
              else if (v1244 == (_DWORD)v588 || v1244 > 0xFF || v1244 == 92)
              {
                goto LABEL_1292;
              }
              v592 = (int16x8_t *)((char *)v592 + 2);
              *v11 = v592;
              if ((unint64_t)v592 >= v586)
                goto LABEL_1292;
            }
          }
          v592 = (int16x8_t *)a3;
LABEL_1292:
          if ((unint64_t)v592 < v586 && v592->u16[0] == (_DWORD)v588)
          {
            *((_BYTE *)a1 + 25) &= ~1u;
            a1[4] = a3;
            a1[6] = (uint64_t)v592->i64 + 2;
            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v592 - a3) >> 1);
            *((_BYTE *)a1 + 24) = 4;
            goto LABEL_1295;
          }
          v589 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v588, a5, a6, a7, a8);
          if (v589 != 4)
            goto LABEL_2718;
          do
          {
            while (1)
            {
LABEL_1295:
              if (*v10 == 5)
              {
                v869 = *((_DWORD *)a1 + 7);
                v870 = v869 & 0x7FFFFFFF;
                if ((v869 & 0x7FFFFFFF) == 0)
                {
                  v965 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_1916:
                  *(_DWORD *)v965 += 2;
LABEL_1917:
                  v1963 = v965;
                  goto LABEL_1313;
                }
                v871 = (int16x8_t *)a1[4];
                v872 = v871->u16[0];
                if ((_DWORD)v870 == 1)
                {
                  if (v872 > 0xFF)
                  {
LABEL_1727:
                    v873 = ((_DWORD)v872 << 6) ^ (v871->u16[v870 - 1] << 14) ^ v872;
                    v874 = (v873 + (v873 >> 14) + ((v873 + (v873 >> 14)) >> 6));
                    v875 = (int16x8_t *)(v1962 + (v874 << 6));
                    if ((_DWORD)v870 != v875[3].u16[3])
                      goto LABEL_2551;
                    if ((_DWORD)v870 != 1)
                    {
                      switch(31 - __clz(v870 - 1))
                      {
                        case 0u:
                          v963 = v875->i32[0];
                          v964 = v871->i32[0];
                          goto LABEL_1914;
                        case 1u:
                          if (v875->i32[0] != v871->i32[0])
                            goto LABEL_2551;
                          v963 = *(__int32 *)((char *)&v875->i32[-1] + 2 * v870);
                          v964 = *(__int32 *)((char *)&v871->i32[-1] + 2 * v870);
LABEL_1914:
                          if (v963 == v964)
                            goto LABEL_1915;
                          goto LABEL_2551;
                        case 2u:
                          if (v875->i64[0] != v871->i64[0]
                            || *(uint64_t *)((char *)&v875->i64[-1] + 2 * v870) != *(uint64_t *)((char *)&v871->i64[-1]
                                                                                             + 2 * v870))
                          {
                            goto LABEL_2551;
                          }
                          goto LABEL_1915;
                        case 3u:
                          v12 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v875 + 2 * v870 - 16), *(int16x8_t *)((char *)v871 + 2 * v870 - 16)), (int8x16_t)vceqq_s16(*v875, *v871));
                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                          if (!v12.n128_u32[0])
                            goto LABEL_2551;
                          goto LABEL_1915;
                        default:
                          v12 = (__n128)vceqq_s16(*v875, *v871);
                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                          if (!v12.n128_u32[0])
                            goto LABEL_2551;
                          v1165 = v869 & 7;
                          if ((*((_DWORD *)a1 + 7) & 7u) >= v870)
                            goto LABEL_1915;
                          v1166 = (int16x8_t *)((char *)v871 + 2 * v1165);
                          v1167 = (int16x8_t *)(v1962 + ((2 * v1165) | (v874 << 6)));
                          break;
                      }
                      while (1)
                      {
                        v12 = (__n128)vceqq_s16(*v1167, *v1166);
                        v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                        if (!v12.n128_u32[0])
                          goto LABEL_2551;
                        v1165 += 8;
                        ++v1166;
                        ++v1167;
                        if (v1165 >= v870)
                          goto LABEL_1915;
                      }
                    }
                    if (v875->u16[0] != (_DWORD)v872)
                    {
LABEL_2551:
                      WTF::AtomStringImpl::add(a1[4], v869 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                      v965 = *(WTF::StringImpl **)&v1965;
                      if (v1965 != 0.0)
                        **(_DWORD **)&v1965 += 2;
                      v1172 = (WTF::StringImpl *)v875[3].i64[1];
                      v875[3].i64[1] = (uint64_t)v965;
                      if (v1172)
                      {
                        if (*(_DWORD *)v1172 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1172, (WTF::AtomStringImpl *)a2, a3, v1171, a5, a6, a7, a8);
                          WTF::fastFree(v1173, v1174, v1175, v1176, v1177, v1178, v1179, v1180);
                        }
                        else
                        {
                          *(_DWORD *)v1172 -= 2;
                        }
                      }
                      v875[3].i16[3] = v869;
                      if (v870 == 1)
                      {
                        v875->i16[0] = v871->i16[0];
                      }
                      else if ((v869 & 0x7FFFFFFF) != 0)
                      {
                        memcpy(v875, v871, 2 * v870);
                      }
                      goto LABEL_1917;
                    }
LABEL_1915:
                    v965 = *(WTF::StringImpl **)(v1962 + (v874 << 6) + 56);
                    goto LABEL_1916;
                  }
                  if (*v1949)
                  {
                    v1169 = *(_QWORD *)(a2 + 8 * v872 + 42216);
                    v965 = *(WTF::StringImpl **)(v1169 + 8);
                    if ((v965 & 1) != 0)
                      v1170 = 0;
                    else
                      v1170 = *(_DWORD **)(v1169 + 8);
                    *v1170 += 2;
                    goto LABEL_1917;
                  }
                  LOBYTE(v1970[0]) = v871->i16[0];
                  WTF::AtomStringImpl::add((uint64_t)v1970, 1uLL, a4, a5, a6, a7, a8, &v1965);
                }
                else
                {
                  if (v870 < 0x1C)
                    goto LABEL_1727;
                  WTF::AtomStringImpl::add(a1[4], v869 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                }
                v965 = *(WTF::StringImpl **)&v1965;
                goto LABEL_1917;
              }
              v606 = (uint8x8_t *)a1[4];
              v607 = *((_DWORD *)a1 + 7);
              v608 = v607 & 0x7FFFFFFF;
              if ((*((_BYTE *)a1 + 25) & 1) != 0)
              {
                if ((_DWORD)v608)
                {
                  v876 = v606->u8[0];
                  if ((_DWORD)v608 == 1)
                  {
                    if (*v1949)
                    {
                      v1161 = *(_QWORD *)(a2 + 8 * v876 + 42216);
                      v904 = *(WTF::StringImpl **)(v1161 + 8);
                      if ((v904 & 1) != 0)
                        v1162 = 0;
                      else
                        v1162 = *(_DWORD **)(v1161 + 8);
                      *v1162 += 2;
                      goto LABEL_1797;
                    }
                    LOBYTE(v1970[0]) = v606->i8[0];
                    v1163 = v1970;
                    v1164 = 1;
                  }
                  else
                  {
                    if (v608 < 0x1C)
                    {
                      v877 = ((((_BYTE)v876 << 6) ^ v876)
                                             + v606->i8[v608 - 1]
                                             + ((((((_DWORD)v876 << 6) | (v606->u8[v608 - 1] << 14)) ^ v876)
                                               + v606->u8[v608 - 1]) >> 6));
                      v878 = (int16x8_t *)(v1962 + (v877 << 6));
                      if ((_DWORD)v608 != v878[3].u16[3])
                      {
LABEL_2005:
                        WTF::AtomStringImpl::add(a1[4], v607 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                        v904 = *(WTF::StringImpl **)&v1965;
                        if (v1965 != 0.0)
                          **(_DWORD **)&v1965 += 2;
                        v994 = (WTF::StringImpl *)v878[3].i64[1];
                        v878[3].i64[1] = (uint64_t)v904;
                        if (v994)
                        {
                          if (*(_DWORD *)v994 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v994, (WTF::AtomStringImpl *)a2, a3, v993, a5, a6, a7, a8);
                            WTF::fastFree(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
                          }
                          else
                          {
                            *(_DWORD *)v994 -= 2;
                          }
                        }
                        v878[3].i16[3] = v607;
                        v995 = 2 * v608;
                        do
                        {
                          v996 = v606->u8[0];
                          v606 = (uint8x8_t *)((char *)v606 + 1);
                          v878->i16[0] = v996;
                          v878 = (int16x8_t *)((char *)v878 + 2);
                          v995 -= 2;
                        }
                        while (v995);
                        goto LABEL_1797;
                      }
                      if (v608 >= 8)
                      {
                        v879 = (uint16x8_t)vceqq_s16(*v878, (int16x8_t)vmovl_u8(*v606));
                        v879.i16[0] = vminvq_u16(v879);
                        if (v879.i32[0])
                        {
                          v880 = v607 & 7;
                          v881 = (int16x8_t *)(v1962 + ((2 * v880) | (v877 << 6)));
                          while (1)
                          {
                            v12 = (__n128)vceqq_s16(*v881, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v606 + v880)));
                            v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                            if (!v12.n128_u32[0])
                              break;
                            v880 += 8;
                            ++v881;
                            if (v880 >= v608)
                              goto LABEL_1795;
                          }
                        }
                        goto LABEL_2005;
                      }
                      if (v608 < 4)
                      {
                        if (((v606->u16[0] | (v606->u16[0] << 8)) & 0xFF00FF) != v878->i32[0]
                          || ((*(unsigned __int16 *)((char *)v606->u16 + (v607 & 1)) | (*(unsigned __int16 *)((char *)v606->u16 + (v607 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v878->i32 + 2 * (v607 & 1)))
                        {
                          goto LABEL_2005;
                        }
                      }
                      else
                      {
                        v900 = (v606->u32[0] | ((unint64_t)v606->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                        v901 = (*(unsigned int *)((char *)v606->u32 + (v607 & 3)) | ((unint64_t)*(unsigned int *)((char *)v606->u32 + (v607 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                        v902 = (v901 | (v901 << 8)) & 0xFF00FF00FF00FFLL;
                        if (((v900 | (v900 << 8)) & 0xFF00FF00FF00FFLL) != v878->i64[0]
                          || v902 != *(uint64_t *)((char *)v878->i64 + 2 * (v607 & 3)))
                        {
                          goto LABEL_2005;
                        }
                      }
LABEL_1795:
                      v904 = *(WTF::StringImpl **)(v1962 + (v877 << 6) + 56);
                      goto LABEL_1796;
                    }
                    v1163 = (int **)a1[4];
                    v1164 = v607 & 0x7FFFFFFF;
                  }
                  WTF::AtomStringImpl::add((uint64_t)v1163, v1164, a4, a5, a6, a7, a8, &v1965);
                  v904 = *(WTF::StringImpl **)&v1965;
                  goto LABEL_1797;
                }
                v904 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_1796:
                *(_DWORD *)v904 += 2;
LABEL_1797:
                v1963 = v904;
                goto LABEL_1313;
              }
              if ((_DWORD)v608)
              {
                v609 = v606->u16[0];
                if ((_DWORD)v608 == 1)
                {
                  if (v609 > 0xFF)
                    goto LABEL_1300;
                  if (*v1949)
                  {
                    v882 = *(_QWORD *)(a2 + 8 * v609 + 42216);
                    v615 = *(WTF::StringImpl **)(v882 + 8);
                    if ((v615 & 1) != 0)
                      v883 = 0;
                    else
                      v883 = *(_DWORD **)(v882 + 8);
                    *v883 += 2;
                    goto LABEL_1312;
                  }
                  LOBYTE(v1970[0]) = v606->i16[0];
                  WTF::AtomStringImpl::add((uint64_t)v1970, 1uLL, a4, a5, a6, a7, a8, &v1965);
                }
                else
                {
                  if (v608 < 0x1C)
                  {
LABEL_1300:
                    v610 = ((_DWORD)v609 << 6) ^ (v606->u16[v608 - 1] << 14) ^ v609;
                    v611 = (v610 + (v610 >> 14) + ((v610 + (v610 >> 14)) >> 6));
                    v612 = (int16x8_t *)(v1962 + (v611 << 6));
                    if ((_DWORD)v608 != v612[3].u16[3])
                      goto LABEL_1751;
                    if ((_DWORD)v608 != 1)
                    {
                      switch(31 - __clz(v608 - 1))
                      {
                        case 0u:
                          v613 = v612->i32[0];
                          v614 = v606->i32[0];
                          goto LABEL_1309;
                        case 1u:
                          if (v612->i32[0] != v606->i32[0])
                            goto LABEL_1751;
                          v613 = *(__int32 *)((char *)&v612->i32[-1] + 2 * v608);
                          v614 = *(__int32 *)((char *)&v606->i32[-1] + 2 * v608);
LABEL_1309:
                          if (v613 == v614)
                            goto LABEL_1310;
                          goto LABEL_1751;
                        case 2u:
                          if (v612->i64[0] != *v606
                            || *(uint64_t *)((char *)&v612->i64[-1] + 2 * v608) != *(_QWORD *)((char *)&v606[-1]
                                                                                            + 2 * v608))
                          {
                            goto LABEL_1751;
                          }
                          goto LABEL_1310;
                        case 3u:
                          v12 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v612 + 2 * v608 - 16), *(int16x8_t *)&v606[-2].i8[2 * v608]), (int8x16_t)vceqq_s16(*v612, *(int16x8_t *)v606->i8));
                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                          if (!v12.n128_u32[0])
                            goto LABEL_1751;
                          goto LABEL_1310;
                        default:
                          v12 = (__n128)vceqq_s16(*v612, *(int16x8_t *)v606->i8);
                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                          if (!v12.n128_u32[0])
                            goto LABEL_1751;
                          v841 = v607 & 7;
                          if ((*((_DWORD *)a1 + 7) & 7u) >= v608)
                            goto LABEL_1310;
                          v842 = (int16x8_t *)((char *)v606 + 2 * v841);
                          v843 = (int16x8_t *)(v1962 + ((2 * v841) | (v611 << 6)));
                          break;
                      }
                      while (1)
                      {
                        v12 = (__n128)vceqq_s16(*v843, *v842);
                        v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                        if (!v12.n128_u32[0])
                          break;
                        v841 += 8;
                        ++v842;
                        ++v843;
                        if (v841 >= v608)
                          goto LABEL_1310;
                      }
LABEL_1751:
                      WTF::AtomStringImpl::add(a1[4], v607 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                      v615 = *(WTF::StringImpl **)&v1965;
                      if (v1965 != 0.0)
                        **(_DWORD **)&v1965 += 2;
                      v885 = (WTF::StringImpl *)v612[3].i64[1];
                      v612[3].i64[1] = (uint64_t)v615;
                      if (v885)
                      {
                        if (*(_DWORD *)v885 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v885, (WTF::AtomStringImpl *)a2, a3, v884, a5, a6, a7, a8);
                          WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
                        }
                        else
                        {
                          *(_DWORD *)v885 -= 2;
                        }
                      }
                      v612[3].i16[3] = v607;
                      if (v608 == 1)
                        v612->i16[0] = v606->i16[0];
                      else
                        memcpy(v612, v606, 2 * v608);
                      goto LABEL_1312;
                    }
                    if (v612->u16[0] != (_DWORD)v609)
                      goto LABEL_1751;
LABEL_1310:
                    v615 = *(WTF::StringImpl **)(v1962 + (v611 << 6) + 56);
                    goto LABEL_1311;
                  }
                  WTF::AtomStringImpl::add(a1[4], v607 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                }
                v615 = *(WTF::StringImpl **)&v1965;
                goto LABEL_1312;
              }
              v615 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_1311:
              *(_DWORD *)v615 += 2;
LABEL_1312:
              v1963 = v615;
LABEL_1313:
              v616 = (unsigned __int16 *)a1[6];
              v617 = a1[7];
              while ((unint64_t)v616 < v617)
              {
                if (*v616 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v616] != 19)
                  break;
                *v11 = ++v616;
              }
              if (v616 == (unsigned __int16 *)v617)
              {
                v688 = 14;
                goto LABEL_1497;
              }
              *v10 = 18;
              v619 = *v616;
              if (v619 > 0xFF)
                goto LABEL_1674;
              v620 = JSC::tokenTypesOfLatin1Characters[v619];
              if (v620 > 4)
              {
                if (v620 != 5)
                {
                  if (v620 != 6)
                  {
                    if (v620 - 18 >= 2)
                    {
LABEL_1340:
                      *v10 = v620;
                      *v11 = v616 + 1;
                      goto LABEL_1341;
                    }
LABEL_1674:
                    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, v616, 1uLL, 39);
                    v819 = *(_QWORD *)&v1965;
                    if (v1965 == 0.0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B2A7CCLL);
                    }
LABEL_1675:
                    v820 = *v1951;
                    *v1951 = (WTF::StringImpl *)v819;
                    if (v820)
                    {
                      if (*(_DWORD *)v820 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v820, v812, v813, v814, v815, v816, v817, v818);
                        WTF::fastFree(v825, v826, v827, v828, v829, v830, v831, v832);
                      }
                      else
                      {
                        *(_DWORD *)v820 -= 2;
                      }
                    }
                    goto LABEL_1498;
                  }
                  v677 = 0;
                  if ((unint64_t)v616 < v617 && (_DWORD)v619 == 45)
                  {
                    *v11 = v616 + 1;
                    v677 = 1;
                  }
                  v678 = &v616[v677];
                  if ((unint64_t)v678 >= v617)
                    goto LABEL_1761;
                  v679 = *v678;
                  if (v679 == 48)
                  {
                    v682 = v677 + 1;
                    goto LABEL_1411;
                  }
                  if ((v679 - 49) > 8)
                  {
LABEL_1761:
                    v894 = WTF::fastCompactMalloc((WTF *)0x20);
                    v819 = v894;
                    *(_QWORD *)v894 = 0xE00000002;
                    v895 = "Invalid number";
                  }
                  else
                  {
                    v680 = v677 + 1;
                    v681 = 2 * v677 + 2;
                    do
                    {
                      v682 = v680;
                      if ((unint64_t)v616 + v681 >= v617)
                        break;
                      ++v680;
                      v681 += 2;
                    }
                    while (v616[v682] - 48 < 0xA);
LABEL_1411:
                    v683 = &v616[v682];
                    *v11 = v683;
                    if ((unint64_t)v683 >= v617)
                      goto LABEL_1975;
                    v684 = *v683;
                    if (v684 == 101 || v684 == 69)
                      goto LABEL_1975;
                    if (v684 == 46)
                    {
                      *v11 = v683 + 1;
                      if ((unint64_t)(v683 + 1) < v617 && v683[1] - 48 <= 9)
                      {
                        v983 = (unint64_t)&v616[v682 + 2];
                        do
                        {
                          v683 = (unsigned __int16 *)v983;
                          if (v983 >= v617)
                            break;
                          v983 += 2;
                        }
                        while (*v683 - 48 < 0xA);
                        *v11 = v683;
                        goto LABEL_1975;
                      }
                      v894 = WTF::fastCompactMalloc((WTF *)0x20);
                      v819 = v894;
                      *(_QWORD *)v894 = 0x2200000002;
                      v895 = "Invalid digits after decimal point";
                    }
                    else
                    {
                      if (v682 <= 9)
                      {
                        *v10 = 6;
                        if ((_DWORD)v619 == 45)
                        {
                          if (v682 >= 2)
                          {
                            ++v616;
                            goto LABEL_1417;
                          }
                        }
                        else
                        {
LABEL_1417:
                          v685 = 0;
                          do
                          {
                            v686 = *v616++;
                            v685 = v686 + 10 * v685 - 48;
                          }
                          while (v616 < v683);
                          if ((_DWORD)v619 != 45)
                          {
                            v687 = (double)v685;
LABEL_1421:
                            *(double *)v1958 = v687;
                            goto LABEL_1498;
                          }
                          if (v685)
                          {
                            v687 = (double)-v685;
                            goto LABEL_1421;
                          }
                        }
                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                        goto LABEL_1498;
                      }
LABEL_1975:
                      if ((unint64_t)v683 >= v617 || (*v683 | 0x20) != 0x65)
                      {
LABEL_1987:
                        *v10 = 6;
                        if ((char *)v683 - (char *)v616 <= -2)
                          goto LABEL_4442;
                        v1965 = 0.0;
                        fast_float::from_chars_advanced<double,char16_t>(v616, v683, &v1965, 0x2E00000005);
                        v687 = v1965;
                        goto LABEL_1421;
                      }
                      v984 = v683 + 1;
                      *v11 = v683 + 1;
                      if ((unint64_t)(v683 + 1) < v617)
                      {
                        v985 = *v984;
                        if (v985 == 45 || v985 == 43)
                        {
                          v984 = v683 + 2;
                          *v11 = v683 + 2;
                        }
                      }
                      if ((unint64_t)v984 < v617 && *v984 - 48 <= 9)
                      {
                        v986 = v984 + 1;
                        do
                        {
                          v683 = v986;
                          if ((unint64_t)v986 >= v617)
                            break;
                          ++v986;
                        }
                        while (*v683 - 48 < 0xA);
                        *v11 = v683;
                        goto LABEL_1987;
                      }
                      v894 = WTF::fastCompactMalloc((WTF *)0x20);
                      v819 = v894;
                      *(_QWORD *)v894 = 0x5D00000002;
                      v895 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    }
                  }
LABEL_2014:
                  *(_QWORD *)(v894 + 8) = v895;
                  *(_DWORD *)(v894 + 16) = 4;
                  goto LABEL_1675;
                }
                if ((_DWORD)v619 == 102)
                {
                  if ((uint64_t)(v617 - (_QWORD)v616) >= 9
                    && *(_DWORD *)(v616 + 1) == 7077985
                    && *(_DWORD *)(v616 + 3) == 6619251)
                  {
                    *v11 = v616 + 5;
                    v688 = 12;
LABEL_1497:
                    *v10 = v688;
                    goto LABEL_1498;
                  }
                }
                else if ((_DWORD)v619 == 116)
                {
                  if ((uint64_t)(v617 - (_QWORD)v616) >= 7 && *(_DWORD *)(v616 + 1) == 7667826 && v616[3] == 101)
                  {
                    *v11 = v616 + 4;
                    v688 = 11;
                    goto LABEL_1497;
                  }
                }
                else if ((_DWORD)v619 == 110
                       && (uint64_t)(v617 - (_QWORD)v616) >= 7
                       && *(_DWORD *)(v616 + 1) == 7078005
                       && v616[3] == 108)
                {
                  *v11 = v616 + 4;
                  v688 = 13;
                  goto LABEL_1497;
                }
                *v1958 = (WTF::AtomStringImpl *)v616;
                LODWORD(v896) = (_DWORD)v616;
                if ((unint64_t)v616 < v617)
                {
                  v896 = v616;
                  do
                  {
                    v897 = *v896;
                    v899 = (v897 | 0x20u) - 97 >= 0x1A
                        && (v897 - 48) >= 0xA
                        && (v897 - 8204) >= 2;
                    if (v899 && v897 != 95 && v897 != 36)
                      break;
                    *v11 = ++v896;
                  }
                  while ((unint64_t)v896 < v617);
                }
                *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v896 - (_DWORD)v616) >> 1);
                v668 = 5;
                goto LABEL_1389;
              }
              if (v620 != 4)
                goto LABEL_1340;
              v621 = *((unsigned __int8 *)a1 + 40);
              if ((_DWORD)v619 == 39)
              {
                if (!*((_BYTE *)a1 + 40))
                {
                  v894 = WTF::fastCompactMalloc((WTF *)0x20);
                  v819 = v894;
                  *(_QWORD *)v894 = 0x2900000002;
                  v895 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_2014;
                }
                v622 = (unint64_t)(v616 + 1);
                *v11 = v616 + 1;
LABEL_1959:
                v624 = (int16x8_t *)v622;
                if (v622 < v617)
                {
                  while (1)
                  {
                    v982 = v624->u16[0];
                    if (v982 < 0x20)
                    {
                      if (v982 != 9)
                        goto LABEL_1386;
                    }
                    else if (v982 == (_DWORD)v619 || v982 > 0xFF || v982 == 92)
                    {
                      goto LABEL_1386;
                    }
                    v624 = (int16x8_t *)((char *)v624 + 2);
                    *v11 = v624;
                    if ((unint64_t)v624 >= v617)
                      goto LABEL_1386;
                  }
                }
                v624 = (int16x8_t *)v622;
                goto LABEL_1386;
              }
              v622 = (unint64_t)(v616 + 1);
              *v11 = v616 + 1;
              if (v621)
                goto LABEL_1959;
              v623 = v617 - v622;
              if ((uint64_t)(v617 - v622) <= -2)
                goto LABEL_4442;
              v624 = (int16x8_t *)((char *)v616 + (v623 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v623 <= 0xE)
              {
                if (v617 != v622)
                {
                  v987 = 2 * (v623 >> 1);
                  v988 = (int16x8_t *)(v616 + 1);
                  while (1)
                  {
                    v989 = v988->u16[0];
                    if (v989 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v989])
                      break;
                    v988 = (int16x8_t *)((char *)v988 + 2);
                    v987 -= 2;
                    if (!v987)
                      goto LABEL_1385;
                  }
                  v624 = v988;
                }
                goto LABEL_1385;
              }
              v625 = v616 + 1;
              if (v623 < 15)
              {
LABEL_1334:
                if (v625 >= (unsigned __int16 *)v624)
                  goto LABEL_1385;
                v633 = (unsigned __int16 *)&v624[-1];
                v634 = v624[-1];
                v635.i64[0] = 0x22002200220022;
                v635.i64[1] = 0x22002200220022;
                v636 = (int8x16_t)vceqq_s16(v634, v635);
                v637.i64[0] = 0x5C005C005C005CLL;
                v637.i64[1] = 0x5C005C005C005CLL;
                v638.i64[0] = 0x20002000200020;
                v638.i64[1] = 0x20002000200020;
                v632 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v634, v637), (int8x16_t)vcgtq_u16(v638, (uint16x8_t)v634)), v636);
                v636.i16[0] = vmaxvq_u16((uint16x8_t)v632);
                if (!v636.i32[0])
                  goto LABEL_1385;
              }
              else
              {
                v626 = v616 + 8;
                while (1)
                {
                  v627 = *(int16x8_t *)(v626 - 7);
                  v628.i64[0] = 0x22002200220022;
                  v628.i64[1] = 0x22002200220022;
                  v629 = (int8x16_t)vceqq_s16(v627, v628);
                  v630.i64[0] = 0x5C005C005C005CLL;
                  v630.i64[1] = 0x5C005C005C005CLL;
                  v631.i64[0] = 0x20002000200020;
                  v631.i64[1] = 0x20002000200020;
                  v632 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v627, v630), (int8x16_t)vcgtq_u16(v631, (uint16x8_t)v627)), v629);
                  v629.i16[0] = vmaxvq_u16((uint16x8_t)v632);
                  if (v629.i32[0])
                    break;
                  v626 += 8;
                  if (v626 >= (unsigned __int16 *)v624)
                  {
                    v625 = v626 - 7;
                    goto LABEL_1334;
                  }
                }
                v633 = v626 - 7;
              }
              v624 = (int16x8_t *)&v633[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v632))];
LABEL_1385:
              *v11 = v624;
LABEL_1386:
              if ((unint64_t)v624 < v617 && v624->u16[0] == (_DWORD)v619)
              {
                *((_BYTE *)a1 + 25) &= ~1u;
                a1[4] = v622;
                a1[6] = (uint64_t)v624->i64 + 2;
                *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v624 - v622) >> 1);
                v668 = 4;
LABEL_1389:
                *((_BYTE *)a1 + 24) = v668;
LABEL_1498:
                v717 = WTF::fastCompactMalloc((WTF *)0x20);
                v718 = (WTF::StringImpl *)v717;
                *(_QWORD *)v717 = 0x3700000002;
                v719 = "Expected ':' before value in object property definition";
                goto LABEL_2238;
              }
              v620 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v622, v619, a5, a6, a7, a8);
LABEL_1341:
              if (v620 != 7)
                goto LABEL_1498;
              v640 = (unsigned __int16 *)a1[6];
              v639 = a1[7];
              while ((unint64_t)v640 < v639)
              {
                if (*v640 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v640] != 19)
                  break;
                *v11 = ++v640;
              }
              if (v640 == (unsigned __int16 *)v639)
              {
                *v10 = 14;
LABEL_1673:
                v717 = WTF::fastCompactMalloc((WTF *)0x20);
                v718 = (WTF::StringImpl *)v717;
                *(_QWORD *)v717 = 0xE00000002;
                v719 = "Unexpected EOF";
LABEL_2238:
                *(_QWORD *)(v717 + 8) = v719;
                *(_DWORD *)(v717 + 16) = 4;
                v1007 = *v1960;
                *v1960 = v718;
                if (v1007)
                {
                  if (*(_DWORD *)v1007 != 2)
                  {
                    v1961 = 0;
                    *(_DWORD *)v1007 -= 2;
                    goto LABEL_2241;
                  }
LABEL_2249:
                  WTF::StringImpl::~StringImpl(v1007, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v1079, v1080, v1081, v1082, v1083, v1084, v1085, v1086);
                }
LABEL_2250:
                v1961 = 0;
                goto LABEL_2241;
              }
              *v10 = 18;
              a4 = *v640;
              if (a4 > 0xFF)
              {
LABEL_1680:
                WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, v640, 1uLL, 39);
                v821 = *(_QWORD *)&v1965;
                if (v1965 == 0.0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B2A7D4);
                }
LABEL_1681:
                v822 = *v1951;
                *v1951 = (WTF::StringImpl *)v821;
                if (v822)
                {
                  if (*(_DWORD *)v822 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v822, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v833, v834, v835, v836, v837, v838, v839, v840);
                  }
                  else
                  {
                    *(_DWORD *)v822 -= 2;
                  }
                }
LABEL_1447:
                if (*v10 != 6)
                {
                  switch(*v10)
                  {
                    case 1:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token ']'";
                      goto LABEL_2238;
                    case 3:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token '}'";
                      goto LABEL_2238;
                    case 4:
                      v669 = *((_BYTE *)a1 + 25);
                      v670 = *((_DWORD *)a1 + 7);
                      goto LABEL_1396;
                    case 5:
                      v970 = *((_DWORD *)a1 + 7);
                      v640 = (unsigned __int16 *)a1[4];
                      goto LABEL_1937;
                    case 7:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token ':'";
                      goto LABEL_2238;
                    case 8:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token '('";
                      goto LABEL_2238;
                    case 9:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token ')'";
                      goto LABEL_2238;
                    case 10:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token ','";
                      goto LABEL_2238;
                    case 11:
                      a4 = a1[6];
                      v639 = a1[7];
                      goto LABEL_1520;
                    case 12:
                      a4 = a1[6];
                      v639 = a1[7];
                      goto LABEL_1485;
                    case 13:
                      a4 = a1[6];
                      v639 = a1[7];
                      goto LABEL_2562;
                    case 14:
                      goto LABEL_1673;
                    case 15:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token '.'";
                      goto LABEL_2238;
                    case 16:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token '='";
                      goto LABEL_2238;
                    case 17:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x1400000002;
                      v719 = "Unexpected token ';'";
                      goto LABEL_2238;
                    default:
                      v717 = WTF::fastCompactMalloc((WTF *)0x20);
                      v718 = (WTF::StringImpl *)v717;
                      *(_QWORD *)v717 = 0x2000000002;
                      v719 = "Could not parse value expression";
                      goto LABEL_2238;
                  }
                }
                v12.n128_u64[0] = (unint64_t)*v1958;
                if (((unint64_t)*v1958 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
                  && (v699 = (int)v12.n128_f64[0], v12.n128_f64[0] == (double)(int)v699)
                  && ((_DWORD)v699 || (v12.n128_u64[0] & 0x8000000000000000) == 0))
                {
                  v700 = v699 | 0xFFFE000000000000;
                }
                else
                {
                  v700 = v12.n128_u64[0] + 0x2000000000000;
                }
                a4 = a1[6];
                v701 = a1[7];
                while (a4 < v701)
                {
                  if (*(unsigned __int16 *)a4 > 0xFFu
                    || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                  {
                    break;
                  }
                  a4 += 2;
                  *v11 = a4;
                }
                if (a4 != v701)
                {
                  *v10 = 18;
                  v703 = *(unsigned __int16 *)a4;
                  if (v703 > 0xFF)
                    goto LABEL_1478;
                  v704 = JSC::tokenTypesOfLatin1Characters[v703];
                  if (v704 <= 4)
                  {
                    if (v704 == 4)
                    {
                      v705 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v703 != 39)
                      {
                        a3 = a4 + 2;
                        *v11 = a4 + 2;
                        if (!v705)
                        {
                          v706 = v701 - a3;
                          if ((uint64_t)(v701 - a3) <= -2)
                            goto LABEL_4442;
                          v707 = (int16x8_t *)((v706 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                          if ((unint64_t)v706 > 0xE)
                          {
                            v708 = a4 + 2;
                            if (v706 >= 15)
                            {
                              v709 = a4 + 16;
                              while (1)
                              {
                                v710 = *(int16x8_t *)(v709 - 14);
                                v711.i64[0] = 0x22002200220022;
                                v711.i64[1] = 0x22002200220022;
                                v712 = (int8x16_t)vceqq_s16(v710, v711);
                                v713.i64[0] = 0x5C005C005C005CLL;
                                v713.i64[1] = 0x5C005C005C005CLL;
                                v714.i64[0] = 0x20002000200020;
                                v714.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v710, v713), (int8x16_t)vcgtq_u16(v714, (uint16x8_t)v710)), v712);
                                v712.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v712.i32[0])
                                  break;
                                v709 += 16;
                                if (v709 >= (unint64_t)v707)
                                {
LABEL_1828:
                                  v708 = v709 - 14;
                                  goto LABEL_1829;
                                }
                              }
LABEL_1832:
                              v917 = (unsigned __int16 *)(v709 - 14);
LABEL_1833:
                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                              v707 = (int16x8_t *)&v917[v12.n128_u8[0]];
LABEL_1834:
                              *v11 = v707;
LABEL_1835:
                              if ((unint64_t)v707 < v701 && v707->u16[0] == (_DWORD)v703)
                              {
                                *((_BYTE *)a1 + 25) &= ~1u;
                                a1[4] = a3;
                                a1[6] = (uint64_t)v707->i64 + 2;
                                *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v707 - a3) >> 1);
                                v923 = 4;
                                goto LABEL_1838;
                              }
                              JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v703, a5, a6, a7, a8);
LABEL_1843:
                              if (!v700)
                                goto LABEL_2250;
LABEL_1844:
                              if (*((_BYTE *)a1 + 88))
                              {
                                v924 = v1963;
                                if (v1963 == *(WTF::StringImpl **)(*(_QWORD *)v1953 + 16))
                                {
                                  WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(v1952, (uint64_t *)&v1964, (uint64_t)v1963, a4, a5, a6, a7, a8, (uint64_t)&v1965);
                                  if (!(_BYTE)v1967)
                                  {
                                    v717 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v718 = (WTF::StringImpl *)v717;
                                    *(_QWORD *)v717 = 0x2800000002;
                                    v719 = "Attempted to redefine __proto__ property";
                                    goto LABEL_2238;
                                  }
                                  v928 = a1[1];
                                  if (v928)
                                    LOBYTE(v928) = *(_BYTE *)(*(_QWORD *)(v928 + 64) + 68) & 1;
                                  v1965 = 0.0;
                                  v1966 = (int *)v1964;
                                  v1967 = -1;
                                  LOBYTE(v1968) = v1968 & 0xF8 | v928;
                                  *(_WORD *)((char *)&v1968 + 1) = 0;
                                  HIBYTE(v1968) = 1;
                                  v1969 = 0;
                                  v1970[0] = (int *)v1964;
                                  if ((v1964 & 0xFFFE000000000002) != 0)
                                    JSC::JSValue::putToPrimitive((JSC::JSValue *)v1970, (JSC::JSGlobalObject *)*a1, (uint64_t)v1963, v700, (uint64_t)&v1965, v925, v926, v927);
                                  else
                                    (*(void (**)(void))(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v1964 & 0xFFFFFFFE) + 0x4C)
                                                      + 0x48))();
LABEL_2202:
                                  if (*(_DWORD *)(a2 + 80))
                                  {
                                    v1109 = *(_DWORD *)(a2 + 80);
                                    if ((v1109 & 0x27) != 0 && (v1109 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps(v1950, 7u, a3, a4, a5, a6, a7, a8);
                                    if (*(_QWORD *)(a2 + 16))
                                      goto LABEL_2250;
                                  }
LABEL_2203:
                                  if (*v10 != 10)
                                  {
                                    v667 = 14;
                                    goto LABEL_2242;
                                  }
                                  a4 = a1[6];
                                  v1049 = a1[7];
                                  if (a4 >= v1049)
                                  {
                                    v1051 = 0;
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v1050 = *(unsigned __int16 *)a4 <= 0xFFu
                                           && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                      v1051 = !v1050;
                                      if (!v1050)
                                        break;
                                      a4 += 2;
                                      *v11 = a4;
                                    }
                                    while (a4 < v1049);
                                  }
                                  if (a4 == v1049)
                                  {
                                    v1099 = 14;
                                    goto LABEL_2288;
                                  }
                                  *v10 = 18;
                                  v1052 = *(unsigned __int16 *)a4;
                                  if (v1052 > 0xFF)
                                    goto LABEL_2290;
                                  v1053 = JSC::tokenTypesOfLatin1Characters[v1052];
                                  if (v1053 <= 4)
                                  {
                                    if (v1053 != 4)
                                      goto LABEL_2236;
                                    v1054 = *((unsigned __int8 *)a1 + 40);
                                    if ((_DWORD)v1052 != 39)
                                    {
                                      a3 = a4 + 2;
                                      *v11 = a4 + 2;
                                      if (!v1054)
                                      {
                                        v1055 = v1049 - a3;
                                        if ((uint64_t)(v1049 - a3) <= -2)
                                          goto LABEL_4442;
                                        v1056 = (int16x8_t *)((v1055 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                                        if ((unint64_t)v1055 <= 0xE)
                                        {
                                          if (v1049 != a3)
                                          {
                                            v1130 = 2 * (v1055 >> 1);
                                            v1131 = (int16x8_t *)(a4 + 2);
                                            while (1)
                                            {
                                              v1132 = v1131->u16[0];
                                              if (v1132 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1132])
                                                break;
                                              v1131 = (int16x8_t *)((char *)v1131 + 2);
                                              v1130 -= 2;
                                              if (!v1130)
                                                goto LABEL_2253;
                                            }
                                            v1056 = v1131;
                                          }
                                        }
                                        else
                                        {
                                          v1057 = a4 + 2;
                                          if (v1055 < 15)
                                          {
LABEL_2230:
                                            if (v1057 < (unint64_t)v1056)
                                            {
                                              v1064 = (unsigned __int16 *)&v1056[-1];
                                              v1065 = v1056[-1];
                                              v1066.i64[0] = 0x22002200220022;
                                              v1066.i64[1] = 0x22002200220022;
                                              v1067 = (int8x16_t)vceqq_s16(v1065, v1066);
                                              v1068.i64[0] = 0x5C005C005C005CLL;
                                              v1068.i64[1] = 0x5C005C005C005CLL;
                                              v1069.i64[0] = 0x20002000200020;
                                              v1069.i64[1] = 0x20002000200020;
                                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1065, v1068), (int8x16_t)vcgtq_u16(v1069, (uint16x8_t)v1065)), v1067);
                                              v1067.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                              if (v1067.i32[0])
                                                goto LABEL_2252;
                                            }
                                          }
                                          else
                                          {
                                            v1058 = a4 + 16;
                                            while (1)
                                            {
                                              v1059 = *(int16x8_t *)(v1058 - 14);
                                              v1060.i64[0] = 0x22002200220022;
                                              v1060.i64[1] = 0x22002200220022;
                                              v1061 = (int8x16_t)vceqq_s16(v1059, v1060);
                                              v1062.i64[0] = 0x5C005C005C005CLL;
                                              v1062.i64[1] = 0x5C005C005C005CLL;
                                              v1063.i64[0] = 0x20002000200020;
                                              v1063.i64[1] = 0x20002000200020;
                                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1059, v1062), (int8x16_t)vcgtq_u16(v1063, (uint16x8_t)v1059)), v1061);
                                              v1061.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                              if (v1061.i32[0])
                                                break;
                                              v1058 += 16;
                                              if (v1058 >= (unint64_t)v1056)
                                              {
                                                v1057 = v1058 - 14;
                                                goto LABEL_2230;
                                              }
                                            }
                                            v1064 = (unsigned __int16 *)(v1058 - 14);
LABEL_2252:
                                            v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                            v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                            v1056 = (int16x8_t *)&v1064[v12.n128_u8[0]];
                                          }
                                        }
LABEL_2253:
                                        *v11 = v1056;
LABEL_2254:
                                        if ((unint64_t)v1056 < v1049 && v1056->u16[0] == (_DWORD)v1052)
                                        {
                                          v667 = 0;
                                          *((_BYTE *)a1 + 25) &= ~1u;
                                          a1[4] = a3;
                                          a1[6] = (uint64_t)v1056->i64 + 2;
                                          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1056 - a3) >> 1);
                                          *((_BYTE *)a1 + 24) = 4;
                                          goto LABEL_2242;
                                        }
                                        v1110 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v1052, a5, a6, a7, a8);
                                        if (v1110 != 4)
                                        {
LABEL_2298:
                                          if (v1110 != 5 || !*((_BYTE *)a1 + 88))
                                            goto LABEL_2237;
                                        }
                                        v667 = 0;
                                        goto LABEL_2242;
                                      }
LABEL_2327:
                                      v1056 = (int16x8_t *)a3;
                                      if (a3 < v1049)
                                      {
                                        while (1)
                                        {
                                          v1125 = v1056->u16[0];
                                          if (v1125 < 0x20)
                                          {
                                            if (v1125 != 9)
                                              goto LABEL_2254;
                                          }
                                          else if (v1125 == (_DWORD)v1052 || v1125 > 0xFF || v1125 == 92)
                                          {
                                            goto LABEL_2254;
                                          }
                                          v1056 = (int16x8_t *)((char *)v1056 + 2);
                                          *v11 = v1056;
                                          if ((unint64_t)v1056 >= v1049)
                                            goto LABEL_2254;
                                        }
                                      }
                                      v1056 = (int16x8_t *)a3;
                                      goto LABEL_2254;
                                    }
                                    if (*((_BYTE *)a1 + 40))
                                    {
                                      a3 = a4 + 2;
                                      *v11 = a4 + 2;
                                      goto LABEL_2327;
                                    }
                                    v1119 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v1107 = v1119;
                                    *(_QWORD *)v1119 = 0x2900000002;
                                    v1120 = "Single quotes (') are not allowed in JSON";
LABEL_2369:
                                    *(_QWORD *)(v1119 + 8) = v1120;
                                    *(_DWORD *)(v1119 + 16) = 4;
LABEL_2291:
                                    v1108 = *v1951;
                                    *v1951 = (WTF::StringImpl *)v1107;
                                    if (v1108)
                                    {
                                      if (*(_DWORD *)v1108 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v1108, v1100, v1101, v1102, v1103, v1104, v1105, v1106);
                                        WTF::fastFree(v1111, v1112, v1113, v1114, v1115, v1116, v1117, v1118);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1108 -= 2;
                                      }
                                    }
                                    goto LABEL_2237;
                                  }
                                  if (v1053 == 5)
                                  {
                                    if ((_DWORD)v1052 == 102)
                                    {
                                      if ((uint64_t)(v1049 - a4) >= 9
                                        && *(_DWORD *)(a4 + 2) == 7077985
                                        && *(_DWORD *)(a4 + 6) == 6619251)
                                      {
                                        *v11 = a4 + 10;
                                        v1099 = 12;
                                        goto LABEL_2288;
                                      }
                                    }
                                    else if ((_DWORD)v1052 == 116)
                                    {
                                      if ((uint64_t)(v1049 - a4) >= 7
                                        && *(_DWORD *)(a4 + 2) == 7667826
                                        && *(_WORD *)(a4 + 6) == 101)
                                      {
                                        *v11 = a4 + 8;
                                        v1099 = 11;
                                        goto LABEL_2288;
                                      }
                                    }
                                    else if ((_DWORD)v1052 == 110
                                           && (uint64_t)(v1049 - a4) >= 7
                                           && *(_DWORD *)(a4 + 2) == 7078005
                                           && *(_WORD *)(a4 + 6) == 108)
                                    {
                                      *v11 = a4 + 8;
                                      v1099 = 13;
LABEL_2288:
                                      *v10 = v1099;
                                      goto LABEL_2237;
                                    }
                                    *v1958 = (WTF::AtomStringImpl *)a4;
                                    LODWORD(v1121) = a4;
                                    if (a4 < v1049)
                                    {
                                      v1121 = (unsigned __int16 *)a4;
                                      do
                                      {
                                        v1122 = *v1121;
                                        v1124 = (v1122 | 0x20u) - 97 >= 0x1A
                                             && (v1122 - 48) >= 0xA
                                             && (v1122 - 8204) >= 2;
                                        if (v1124 && v1122 != 95 && v1122 != 36)
                                          break;
                                        *v11 = ++v1121;
                                      }
                                      while ((unint64_t)v1121 < v1049);
                                    }
                                    *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1121 - a4) >> 1);
                                    v1110 = 5;
                                    *((_BYTE *)a1 + 24) = 5;
                                    goto LABEL_2298;
                                  }
                                  if (v1053 != 6)
                                  {
                                    if (v1053 - 18 < 2)
                                    {
LABEL_2290:
                                      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                      v1107 = *(_QWORD *)&v1965;
                                      if (v1965 == 0.0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x198B2A80CLL);
                                      }
                                      goto LABEL_2291;
                                    }
LABEL_2236:
                                    *v10 = v1053;
                                    *v11 = a4 + 2;
LABEL_2237:
                                    v717 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v718 = (WTF::StringImpl *)v717;
                                    *(_QWORD *)v717 = 0x2600000002;
                                    v719 = "Property name must be a string literal";
                                    goto LABEL_2238;
                                  }
                                  v1087 = v1051 ^ 1;
                                  if ((_DWORD)v1052 != 45)
                                    v1087 = 1;
                                  if ((v1087 & 1) != 0)
                                  {
                                    v1088 = 0;
                                  }
                                  else
                                  {
                                    *v11 = a4 + 2;
                                    v1088 = 1;
                                  }
                                  v1089 = (unsigned __int16 *)(a4 + 2 * v1088);
                                  if ((unint64_t)v1089 >= v1049)
                                    goto LABEL_2304;
                                  v1090 = *v1089;
                                  if (v1090 == 48)
                                  {
                                    v1093 = v1088 + 1;
                                    goto LABEL_2267;
                                  }
                                  if ((v1090 - 49) > 8)
                                  {
LABEL_2304:
                                    v1119 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v1107 = v1119;
                                    *(_QWORD *)v1119 = 0xE00000002;
                                    v1120 = "Invalid number";
                                    goto LABEL_2369;
                                  }
                                  v1091 = v1088 + 1;
                                  v1092 = 2 * v1088 + 2;
                                  do
                                  {
                                    v1093 = v1091;
                                    if (a4 + v1092 >= v1049)
                                      break;
                                    ++v1091;
                                    v1092 += 2;
                                  }
                                  while (*(unsigned __int16 *)(a4 + 2 * v1093) - 48 < 0xA);
LABEL_2267:
                                  v1094 = (unsigned __int16 *)(a4 + 2 * v1093);
                                  *v11 = v1094;
                                  if ((unint64_t)v1094 < v1049)
                                  {
                                    v1095 = *v1094;
                                    if (v1095 != 101 && v1095 != 69)
                                    {
                                      if (v1095 == 46)
                                      {
                                        *v11 = v1094 + 1;
                                        if ((unint64_t)(v1094 + 1) >= v1049 || v1094[1] - 48 > 9)
                                        {
                                          v1119 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1107 = v1119;
                                          *(_QWORD *)v1119 = 0x2200000002;
                                          v1120 = "Invalid digits after decimal point";
                                          goto LABEL_2369;
                                        }
                                        v1126 = a4 + 2 * v1093 + 4;
                                        do
                                        {
                                          v1094 = (unsigned __int16 *)v1126;
                                          if (v1126 >= v1049)
                                            break;
                                          v1126 += 2;
                                        }
                                        while (*v1094 - 48 < 0xA);
                                        *v11 = v1094;
                                      }
                                      else if (v1093 <= 9)
                                      {
                                        *v10 = 6;
                                        if ((_DWORD)v1052 == 45)
                                        {
                                          if (v1093 >= 2)
                                          {
                                            a4 += 2;
                                            goto LABEL_2273;
                                          }
                                        }
                                        else
                                        {
LABEL_2273:
                                          v1096 = 0;
                                          do
                                          {
                                            v1097 = *(unsigned __int16 *)a4;
                                            a4 += 2;
                                            v1096 = v1097 + 10 * v1096 - 48;
                                          }
                                          while (a4 < (unint64_t)v1094);
                                          if ((_DWORD)v1052 != 45)
                                          {
                                            v1098 = (double)v1096;
LABEL_2277:
                                            *(double *)v1958 = v1098;
                                            goto LABEL_2237;
                                          }
                                          if (v1096)
                                          {
                                            v1098 = (double)-v1096;
                                            goto LABEL_2277;
                                          }
                                        }
                                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                        goto LABEL_2237;
                                      }
                                    }
                                  }
                                  if ((unint64_t)v1094 < v1049 && (*v1094 | 0x20) == 0x65)
                                  {
                                    v1127 = v1094 + 1;
                                    *v11 = v1094 + 1;
                                    if ((unint64_t)(v1094 + 1) < v1049)
                                    {
                                      v1128 = *v1127;
                                      if (v1128 == 45 || v1128 == 43)
                                      {
                                        v1127 = v1094 + 2;
                                        *v11 = v1094 + 2;
                                      }
                                    }
                                    if ((unint64_t)v1127 >= v1049 || *v1127 - 48 > 9)
                                    {
                                      v1119 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1107 = v1119;
                                      *(_QWORD *)v1119 = 0x5D00000002;
                                      v1120 = "Exponent symbols should be followed by an optional '+' or '-' and then by "
                                              "at least one number";
                                      goto LABEL_2369;
                                    }
                                    v1129 = v1127 + 1;
                                    do
                                    {
                                      v1094 = v1129;
                                      if ((unint64_t)v1129 >= v1049)
                                        break;
                                      ++v1129;
                                    }
                                    while (*v1094 - 48 < 0xA);
                                    *v11 = v1094;
                                  }
                                  *v10 = 6;
                                  if ((uint64_t)((uint64_t)v1094 - a4) <= -2)
                                    goto LABEL_4442;
                                  v1965 = 0.0;
                                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1094, &v1965, 0x2E00000005);
                                  v1098 = v1965;
                                  goto LABEL_2277;
                                }
                              }
                              else
                              {
                                v924 = v1963;
                              }
                              if (v924)
                              {
                                v929 = *((_DWORD *)v924 + 4);
                                if ((v929 & 0x20) == 0)
                                {
                                  v930 = (_BYTE *)*((_QWORD *)v924 + 1);
                                  v931 = *((unsigned int *)v924 + 1);
                                  if ((v929 & 4) != 0)
                                  {
                                    if ((_DWORD)v931)
                                    {
                                      v932 = (JSC::VM *)(*v930 - 48);
                                      if (v932 <= 9 && (v931 < 2 || *v930 != 48))
                                      {
                                        v1046 = v930 + 1;
                                        v1047 = v931 - 1;
                                        while (v1047)
                                        {
                                          if (v932 <= 0x19999999)
                                          {
                                            v1048 = *v1046 - 48;
                                            if (v1048 <= 9)
                                            {
                                              v172 = __CFADD__(v1048, 10 * (_DWORD)v932);
                                              v932 = (JSC::VM *)(v1048 + 10 * (_DWORD)v932);
                                              ++v1046;
                                              --v1047;
                                              if (!v172)
                                                continue;
                                            }
                                          }
                                          goto LABEL_1857;
                                        }
                                        goto LABEL_2200;
                                      }
                                    }
                                  }
                                  else if ((_DWORD)v931)
                                  {
                                    v932 = (JSC::VM *)(*(unsigned __int16 *)v930 - 48);
                                    if (v932 <= 9 && (*(_WORD *)v930 != 48 || v931 <= 1))
                                    {
                                      v934 = (unsigned __int16 *)(v930 + 2);
                                      v935 = v931 - 1;
                                      while (v935)
                                      {
                                        if (v932 <= 0x19999999)
                                        {
                                          v936 = *v934 - 48;
                                          if (v936 <= 9)
                                          {
                                            v172 = __CFADD__(v936, 10 * (_DWORD)v932);
                                            v932 = (JSC::VM *)(v936 + 10 * (_DWORD)v932);
                                            ++v934;
                                            --v935;
                                            if (!v172)
                                              continue;
                                          }
                                        }
                                        goto LABEL_1857;
                                      }
LABEL_2200:
                                      if ((_DWORD)v932 != -1)
                                      {
                                        JSC::JSObject::putDirectIndex(v1964, *a1, v932, v700, a5, a6, a7, a8, (int32x4_t)v12);
                                        goto LABEL_2202;
                                      }
                                    }
                                  }
                                }
                              }
LABEL_1857:
                              v1965 = 0.0;
                              v1966 = (int *)v1964;
                              v1967 = -1;
                              v12.n128_u64[0] = 0x100000001000000;
                              v1968 = 0x1000000;
                              v1969 = 0;
                              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v1964, a2, (unint64_t)v924, v700, 0, (uint64_t)&v1965, a7, a8, v12);
                              goto LABEL_2203;
                            }
LABEL_1829:
                            if (v708 < (unint64_t)v707)
                            {
                              v917 = (unsigned __int16 *)&v707[-1];
                              v918 = v707[-1];
                              v919.i64[0] = 0x22002200220022;
                              v919.i64[1] = 0x22002200220022;
                              v920 = (int8x16_t)vceqq_s16(v918, v919);
                              v921.i64[0] = 0x5C005C005C005CLL;
                              v921.i64[1] = 0x5C005C005C005CLL;
                              v922.i64[0] = 0x20002000200020;
                              v922.i64[1] = 0x20002000200020;
                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v918, v921), (int8x16_t)vcgtq_u16(v922, (uint16x8_t)v918)), v920);
                              v920.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                              if (v920.i32[0])
                                goto LABEL_1833;
                            }
                            goto LABEL_1834;
                          }
                          if (v701 == a3)
                            goto LABEL_1834;
                          v1028 = 2 * (v706 >> 1);
                          v1029 = (int16x8_t *)(a4 + 2);
                          while (1)
                          {
                            v1030 = v1029->u16[0];
                            if (v1030 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1030])
                              break;
                            v1029 = (int16x8_t *)((char *)v1029 + 2);
                            v1028 -= 2;
                            if (!v1028)
                              goto LABEL_1834;
                          }
LABEL_2374:
                          v707 = v1029;
                          goto LABEL_1834;
                        }
LABEL_2106:
                        v707 = (int16x8_t *)a3;
                        if (a3 < v701)
                        {
                          while (1)
                          {
                            v1023 = v707->u16[0];
                            if (v1023 < 0x20)
                            {
                              if (v1023 != 9)
                                goto LABEL_1835;
                            }
                            else if (v1023 == (_DWORD)v703 || v1023 > 0xFF || v1023 == 92)
                            {
                              goto LABEL_1835;
                            }
                            v707 = (int16x8_t *)((char *)v707 + 2);
                            *v11 = v707;
                            if ((unint64_t)v707 >= v701)
                              goto LABEL_1835;
                          }
                        }
LABEL_2394:
                        v707 = (int16x8_t *)a3;
                        goto LABEL_1835;
                      }
                      if (*((_BYTE *)a1 + 40))
                      {
                        a3 = a4 + 2;
                        *v11 = a4 + 2;
                        goto LABEL_2106;
                      }
LABEL_2527:
                      v990 = WTF::fastCompactMalloc((WTF *)0x20);
                      v715 = v990;
                      v12.n128_u64[0] = 0x2900000002;
                      *(_QWORD *)v990 = 0x2900000002;
                      v991 = "Single quotes (') are not allowed in JSON";
LABEL_2177:
                      *(_QWORD *)(v990 + 8) = v991;
                      *(_DWORD *)(v990 + 16) = 4;
LABEL_1904:
                      v954 = *v1951;
                      *v1951 = (WTF::StringImpl *)v715;
                      if (v954)
                      {
                        if (*(_DWORD *)v954 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v954, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v955, v956, v957, v958, v959, v960, v961, v962);
                        }
                        else
                        {
                          *(_DWORD *)v954 -= 2;
                        }
                      }
                      goto LABEL_1843;
                    }
LABEL_1842:
                    *v10 = v704;
                    *v11 = a4 + 2;
                    goto LABEL_1843;
                  }
                  if (v704 != 5)
                  {
                    if (v704 != 6)
                    {
                      if (v704 - 18 >= 2)
                        goto LABEL_1842;
LABEL_1478:
                      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                      v715 = *(_QWORD *)&v1965;
                      if (v1965 == 0.0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B2A804);
                      }
                      goto LABEL_1904;
                    }
                    v766 = 0;
                    if (a4 < v701 && (_DWORD)v703 == 45)
                    {
                      *v11 = a4 + 2;
                      v766 = 1;
                    }
                    v767 = (unsigned __int16 *)(a4 + 2 * v766);
                    if ((unint64_t)v767 < v701)
                    {
                      v768 = *v767;
                      if (v768 == 48)
                      {
                        v771 = v766 + 1;
                        goto LABEL_1558;
                      }
                      if ((v768 - 49) <= 8)
                      {
                        v769 = v766 + 1;
                        v770 = 2 * v766 + 2;
                        do
                        {
                          v771 = v769;
                          if (a4 + v770 >= v701)
                            break;
                          ++v769;
                          v770 += 2;
                        }
                        while (*(unsigned __int16 *)(a4 + 2 * v771) - 48 < 0xA);
LABEL_1558:
                        v772 = (unsigned __int16 *)(a4 + 2 * v771);
                        *v11 = v772;
                        if ((unint64_t)v772 >= v701)
                          goto LABEL_2122;
                        v773 = *v772;
                        if (v773 == 101 || v773 == 69)
                          goto LABEL_2122;
                        if (v773 != 46)
                        {
                          if (v771 <= 9)
                          {
                            *v10 = 6;
                            if ((_DWORD)v703 == 45)
                            {
                              if (v771 >= 2)
                              {
                                a4 += 2;
                                goto LABEL_1564;
                              }
                            }
                            else
                            {
LABEL_1564:
                              v774 = 0;
                              do
                              {
                                v775 = *(unsigned __int16 *)a4;
                                a4 += 2;
                                v774 = v775 + 10 * v774 - 48;
                              }
                              while (a4 < (unint64_t)v772);
LABEL_1887:
                              if ((_DWORD)v703 != 45)
                              {
                                v12.n128_f64[0] = (double)v774;
LABEL_1889:
                                *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                goto LABEL_1843;
                              }
                              if (v774)
                              {
                                v12.n128_f64[0] = (double)-v774;
                                goto LABEL_1889;
                              }
                            }
LABEL_2180:
                            *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                            goto LABEL_1843;
                          }
LABEL_2122:
                          if ((unint64_t)v772 >= v701 || (*v772 | 0x20) != 0x65)
                            goto LABEL_2173;
                          v1025 = v772 + 1;
                          *v11 = v772 + 1;
                          if ((unint64_t)(v772 + 1) < v701)
                          {
                            v1026 = *v1025;
                            if (v1026 == 45 || v1026 == 43)
                            {
                              v1025 = v772 + 2;
                              *v11 = v772 + 2;
                            }
                          }
                          if ((unint64_t)v1025 < v701 && *v1025 - 48 <= 9)
                          {
                            v1027 = v1025 + 1;
                            do
                            {
                              v772 = v1027;
                              if ((unint64_t)v1027 >= v701)
                                break;
                              ++v1027;
                            }
                            while (*v772 - 48 < 0xA);
LABEL_2172:
                            *v11 = v772;
LABEL_2173:
                            *v10 = 6;
                            if ((uint64_t)((uint64_t)v772 - a4) <= -2)
                              goto LABEL_4442;
                            v1965 = 0.0;
                            fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v772, &v1965, 0x2E00000005);
                            v12.n128_f64[0] = v1965;
                            goto LABEL_1889;
                          }
LABEL_2175:
                          v990 = WTF::fastCompactMalloc((WTF *)0x20);
                          v715 = v990;
                          v12.n128_u64[0] = 0x5D00000002;
                          *(_QWORD *)v990 = 0x5D00000002;
                          v991 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                          goto LABEL_2177;
                        }
                        *v11 = v772 + 1;
                        if ((unint64_t)(v772 + 1) < v701 && v772[1] - 48 <= 9)
                        {
                          v1024 = a4 + 2 * v771 + 4;
                          do
                          {
                            v772 = (unsigned __int16 *)v1024;
                            if (v1024 >= v701)
                              break;
                            v1024 += 2;
                          }
                          while (*v772 - 48 < 0xA);
                          *v11 = v772;
                          goto LABEL_2122;
                        }
LABEL_2176:
                        v990 = WTF::fastCompactMalloc((WTF *)0x20);
                        v715 = v990;
                        *(_QWORD *)v990 = 0x2200000002;
                        v991 = "Invalid digits after decimal point";
                        goto LABEL_2177;
                      }
                    }
LABEL_2000:
                    v990 = WTF::fastCompactMalloc((WTF *)0x20);
                    v715 = v990;
                    *(_QWORD *)v990 = 0xE00000002;
                    v991 = "Invalid number";
                    goto LABEL_2177;
                  }
                  if ((_DWORD)v703 == 102)
                  {
                    if ((uint64_t)(v701 - a4) < 9 || *(_DWORD *)(a4 + 2) != 7077985 || *(_DWORD *)(a4 + 6) != 6619251)
                    {
LABEL_2068:
                      *v1958 = (WTF::AtomStringImpl *)a4;
                      LODWORD(v1016) = a4;
                      if (a4 < v701)
                      {
                        v1016 = (unsigned __int16 *)a4;
                        do
                        {
                          v1017 = *v1016;
                          v1019 = (v1017 | 0x20u) - 97 >= 0x1A
                               && (v1017 - 48) >= 0xA
                               && (v1017 - 8204) >= 2;
                          if (v1019 && v1017 != 95 && v1017 != 36)
                            break;
                          *v11 = ++v1016;
                        }
                        while ((unint64_t)v1016 < v701);
                      }
LABEL_2102:
                      *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1016 - a4) >> 1);
                      v923 = 5;
LABEL_1838:
                      *((_BYTE *)a1 + 24) = v923;
                      goto LABEL_1843;
                    }
LABEL_1894:
                    *v11 = a4 + 10;
                    v953 = 12;
LABEL_1900:
                    *v10 = v953;
                    goto LABEL_1843;
                  }
                  if ((_DWORD)v703 == 116)
                  {
                    if ((uint64_t)(v701 - a4) < 7 || *(_DWORD *)(a4 + 2) != 7667826 || *(_WORD *)(a4 + 6) != 101)
                      goto LABEL_2068;
                    goto LABEL_1899;
                  }
                  if ((_DWORD)v703 != 110
                    || (uint64_t)(v701 - a4) < 7
                    || *(_DWORD *)(a4 + 2) != 7078005
                    || *(_WORD *)(a4 + 6) != 108)
                  {
                    goto LABEL_2068;
                  }
LABEL_2088:
                  *v11 = a4 + 8;
                  v953 = 13;
                  goto LABEL_1900;
                }
LABEL_1901:
                v953 = 14;
                goto LABEL_1900;
              }
              v642 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v642 > 4)
              {
                if (v642 != 5)
                {
                  if (v642 != 6)
                  {
                    if (v642 - 18 < 2)
                      goto LABEL_1680;
LABEL_1369:
                    *v10 = v642;
                    *v11 = v640 + 1;
                    goto LABEL_1370;
                  }
                  v689 = 0;
                  if ((unint64_t)v640 < v639 && (_DWORD)a4 == 45)
                  {
                    *v11 = v640 + 1;
                    v689 = 1;
                  }
                  v690 = &v640[v689];
                  if ((unint64_t)v690 >= v639)
                    goto LABEL_1798;
                  v691 = *v690;
                  if (v691 == 48)
                  {
                    v694 = v689 + 1;
                    goto LABEL_1436;
                  }
                  if ((v691 - 49) > 8)
                  {
LABEL_1798:
                    v905 = WTF::fastCompactMalloc((WTF *)0x20);
                    v821 = v905;
                    *(_QWORD *)v905 = 0xE00000002;
                    v906 = "Invalid number";
                  }
                  else
                  {
                    v692 = v689 + 1;
                    v693 = 2 * v689 + 2;
                    do
                    {
                      v694 = v692;
                      if ((unint64_t)v640 + v693 >= v639)
                        break;
                      ++v692;
                      v693 += 2;
                    }
                    while (v640[v694] - 48 < 0xA);
LABEL_1436:
                    v695 = &v640[v694];
                    *v11 = v695;
                    if ((unint64_t)v695 >= v639)
                      goto LABEL_2034;
                    v696 = *v695;
                    if (v696 == 101 || v696 == 69)
                      goto LABEL_2034;
                    if (v696 == 46)
                    {
                      v998 = v695 + 1;
                      *v11 = v998;
                      if ((unint64_t)v998 < v639 && *v998 - 48 <= 9)
                      {
                        v999 = (unint64_t)&v640[v694 + 2];
                        do
                        {
                          v695 = (unsigned __int16 *)v999;
                          if (v999 >= v639)
                            break;
                          v999 += 2;
                        }
                        while (*v695 - 48 < 0xA);
                        *v11 = v695;
                        goto LABEL_2034;
                      }
                      v905 = WTF::fastCompactMalloc((WTF *)0x20);
                      v821 = v905;
                      *(_QWORD *)v905 = 0x2200000002;
                      v906 = "Invalid digits after decimal point";
                    }
                    else
                    {
                      if (v694 <= 9)
                      {
                        *v10 = 6;
                        if ((_DWORD)a4 == 45)
                        {
                          if (v694 >= 2)
                          {
                            ++v640;
                            goto LABEL_1442;
                          }
                        }
                        else
                        {
LABEL_1442:
                          v697 = 0;
                          do
                          {
                            v698 = *v640++;
                            v697 = v698 + 10 * v697 - 48;
                          }
                          while (v640 < v695);
                          if ((_DWORD)a4 != 45)
                          {
                            v12.n128_f64[0] = (double)v697;
LABEL_1446:
                            *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                            goto LABEL_1447;
                          }
                          if (v697)
                          {
                            v12.n128_f64[0] = (double)-v697;
                            goto LABEL_1446;
                          }
                        }
                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                        goto LABEL_1447;
                      }
LABEL_2034:
                      if ((unint64_t)v695 >= v639 || (*v695 | 0x20) != 0x65)
                      {
LABEL_2046:
                        *v10 = 6;
                        v1003 = (char *)v695 - (char *)v640;
                        if (v1003 <= -2)
                          goto LABEL_4442;
                        v1965 = 0.0;
                        fast_float::from_chars_advanced<double,char16_t>(v640, (unsigned __int16 *)((char *)v640 + v1003), &v1965, 0x2E00000005);
                        v12.n128_f64[0] = v1965;
                        goto LABEL_1446;
                      }
                      v1000 = v695 + 1;
                      *v11 = v695 + 1;
                      if ((unint64_t)(v695 + 1) < v639)
                      {
                        v1001 = *v1000;
                        if (v1001 == 45 || v1001 == 43)
                        {
                          v1000 = v695 + 2;
                          *v11 = v695 + 2;
                        }
                      }
                      if ((unint64_t)v1000 < v639 && *v1000 - 48 <= 9)
                      {
                        v1002 = v1000 + 1;
                        do
                        {
                          v695 = v1002;
                          if ((unint64_t)v1002 >= v639)
                            break;
                          ++v1002;
                        }
                        while (*v695 - 48 < 0xA);
                        *v11 = v695;
                        goto LABEL_2046;
                      }
                      v905 = WTF::fastCompactMalloc((WTF *)0x20);
                      v821 = v905;
                      v12.n128_u64[0] = 0x5D00000002;
                      *(_QWORD *)v905 = 0x5D00000002;
                      v906 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    }
                  }
LABEL_2062:
                  *(_QWORD *)(v905 + 8) = v906;
                  *(_DWORD *)(v905 + 16) = 4;
                  goto LABEL_1681;
                }
                if ((_DWORD)a4 == 102)
                {
                  if ((uint64_t)(v639 - (_QWORD)v640) < 9
                    || *(_DWORD *)(v640 + 1) != 7077985
                    || *(_DWORD *)(v640 + 3) != 6619251)
                  {
                    goto LABEL_1923;
                  }
                  a4 = (unint64_t)(v640 + 5);
                  *v11 = v640 + 5;
                  *v10 = 12;
LABEL_1485:
                  while (a4 < v639)
                  {
                    if (*(unsigned __int16 *)a4 > 0xFFu
                      || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                    {
                      break;
                    }
                    a4 += 2;
                    *v11 = a4;
                  }
                  if (a4 == v639)
                  {
                    v799 = 14;
                    goto LABEL_1663;
                  }
                  *v10 = 18;
                  v720 = *(unsigned __int16 *)a4;
                  if (v720 > 0xFF)
                    goto LABEL_1707;
                  v721 = JSC::tokenTypesOfLatin1Characters[v720];
                  if (v721 <= 4)
                  {
                    if (v721 == 4)
                    {
                      v722 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v720 != 39)
                      {
                        v723 = a4 + 2;
                        *v11 = a4 + 2;
                        if (!v722)
                        {
                          v724 = v639 - v723;
                          if ((uint64_t)(v639 - v723) <= -2)
                            goto LABEL_4442;
                          v725 = (int16x8_t *)((v724 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                          if ((unint64_t)v724 <= 0xE)
                          {
                            if (v639 != v723)
                            {
                              v1150 = 2 * (v724 >> 1);
                              v1151 = (int16x8_t *)(a4 + 2);
                              while (1)
                              {
                                v1152 = v1151->u16[0];
                                if (v1152 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1152])
                                  break;
                                v1151 = (int16x8_t *)((char *)v1151 + 2);
                                v1150 -= 2;
                                if (!v1150)
                                  goto LABEL_1587;
                              }
                              v725 = v1151;
                            }
                          }
                          else
                          {
                            v726 = a4 + 2;
                            if (v724 < 15)
                            {
LABEL_1512:
                              if (v726 < (unint64_t)v725)
                              {
                                v733 = (unsigned __int16 *)&v725[-1];
                                v734 = v725[-1];
                                v735.i64[0] = 0x22002200220022;
                                v735.i64[1] = 0x22002200220022;
                                v736 = (int8x16_t)vceqq_s16(v734, v735);
                                v737.i64[0] = 0x5C005C005C005CLL;
                                v737.i64[1] = 0x5C005C005C005CLL;
                                v738.i64[0] = 0x20002000200020;
                                v738.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v734, v737), (int8x16_t)vcgtq_u16(v738, (uint16x8_t)v734)), v736);
                                v736.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v736.i32[0])
                                  goto LABEL_1586;
                              }
                            }
                            else
                            {
                              v727 = a4 + 16;
                              while (1)
                              {
                                v728 = *(int16x8_t *)(v727 - 14);
                                v729.i64[0] = 0x22002200220022;
                                v729.i64[1] = 0x22002200220022;
                                v730 = (int8x16_t)vceqq_s16(v728, v729);
                                v731.i64[0] = 0x5C005C005C005CLL;
                                v731.i64[1] = 0x5C005C005C005CLL;
                                v732.i64[0] = 0x20002000200020;
                                v732.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v728, v731), (int8x16_t)vcgtq_u16(v732, (uint16x8_t)v728)), v730);
                                v730.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v730.i32[0])
                                  break;
                                v727 += 16;
                                if (v727 >= (unint64_t)v725)
                                {
                                  v726 = v727 - 14;
                                  goto LABEL_1512;
                                }
                              }
                              v733 = (unsigned __int16 *)(v727 - 14);
LABEL_1586:
                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                              v725 = (int16x8_t *)&v733[v12.n128_u8[0]];
                            }
                          }
LABEL_1587:
                          *v11 = v725;
LABEL_1588:
                          if ((unint64_t)v725 < v639 && v725->u16[0] == (_DWORD)v720)
                          {
                            *((_BYTE *)a1 + 25) &= ~1u;
                            a1[4] = v723;
                            a1[6] = (uint64_t)v725->i64 + 2;
                            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v725 - v723) >> 1);
                            v776 = 4;
                            goto LABEL_1591;
                          }
                          JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v723, v720, a5, a6, a7, a8);
LABEL_1664:
                          v700 = 6;
                          goto LABEL_1844;
                        }
LABEL_2418:
                        v725 = (int16x8_t *)v723;
                        if (v723 < v639)
                        {
                          while (1)
                          {
                            v1145 = v725->u16[0];
                            if (v1145 < 0x20)
                            {
                              if (v1145 != 9)
                                goto LABEL_1588;
                            }
                            else if (v1145 == (_DWORD)v720 || v1145 > 0xFF || v1145 == 92)
                            {
                              goto LABEL_1588;
                            }
                            v725 = (int16x8_t *)((char *)v725 + 2);
                            *v11 = v725;
                            if ((unint64_t)v725 >= v639)
                              goto LABEL_1588;
                          }
                        }
                        v725 = (int16x8_t *)v723;
                        goto LABEL_1588;
                      }
                      if (*((_BYTE *)a1 + 40))
                      {
                        v723 = a4 + 2;
                        *v11 = a4 + 2;
                        goto LABEL_2418;
                      }
                      v1133 = WTF::fastCompactMalloc((WTF *)0x20);
                      v846 = v1133;
                      v12.n128_u64[0] = 0x2900000002;
                      *(_QWORD *)v1133 = 0x2900000002;
                      v1134 = "Single quotes (') are not allowed in JSON";
LABEL_2503:
                      *(_QWORD *)(v1133 + 8) = v1134;
                      *(_DWORD *)(v1133 + 16) = 4;
LABEL_1708:
                      v847 = *v1951;
                      *v1951 = (WTF::StringImpl *)v846;
                      if (v847)
                      {
                        if (*(_DWORD *)v847 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v847, v844, v845, a4, a5, a6, a7, a8);
                          WTF::fastFree(v852, v853, v854, v855, v856, v857, v858, v859);
                        }
                        else
                        {
                          *(_DWORD *)v847 -= 2;
                        }
                      }
                      goto LABEL_1664;
                    }
LABEL_1575:
                    *v10 = v721;
                    *v11 = a4 + 2;
                    goto LABEL_1664;
                  }
                  if (v721 != 5)
                  {
                    if (v721 != 6)
                    {
                      if (v721 - 18 >= 2)
                        goto LABEL_1575;
LABEL_1707:
                      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                      v846 = *(_QWORD *)&v1965;
                      if (v1965 == 0.0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B2A7E4);
                      }
                      goto LABEL_1708;
                    }
                    v789 = 0;
                    if (a4 < v639 && (_DWORD)v720 == 45)
                    {
                      *v11 = a4 + 2;
                      v789 = 1;
                    }
                    v790 = (unsigned __int16 *)(a4 + 2 * v789);
                    if ((unint64_t)v790 >= v639)
                      goto LABEL_2372;
                    v791 = *v790;
                    if (v791 == 48)
                    {
                      v794 = v789 + 1;
                      goto LABEL_1615;
                    }
                    if ((v791 - 49) > 8)
                    {
LABEL_2372:
                      v1133 = WTF::fastCompactMalloc((WTF *)0x20);
                      v846 = v1133;
                      *(_QWORD *)v1133 = 0xE00000002;
                      v1134 = "Invalid number";
                      goto LABEL_2503;
                    }
                    v792 = v789 + 1;
                    v793 = 2 * v789 + 2;
                    do
                    {
                      v794 = v792;
                      if (a4 + v793 >= v639)
                        break;
                      ++v792;
                      v793 += 2;
                    }
                    while (*(unsigned __int16 *)(a4 + 2 * v794) - 48 < 0xA);
LABEL_1615:
                    v795 = (unsigned __int16 *)(a4 + 2 * v794);
                    *v11 = v795;
                    if ((unint64_t)v795 < v639)
                    {
                      v796 = *v795;
                      if (v796 != 101 && v796 != 69)
                      {
                        if (v796 == 46)
                        {
                          *v11 = v795 + 1;
                          if ((unint64_t)(v795 + 1) >= v639 || v795[1] - 48 > 9)
                          {
                            v1133 = WTF::fastCompactMalloc((WTF *)0x20);
                            v846 = v1133;
                            *(_QWORD *)v1133 = 0x2200000002;
                            v1134 = "Invalid digits after decimal point";
                            goto LABEL_2503;
                          }
                          v1146 = a4 + 2 * v794 + 4;
                          do
                          {
                            v795 = (unsigned __int16 *)v1146;
                            if (v1146 >= v639)
                              break;
                            v1146 += 2;
                          }
                          while (*v795 - 48 < 0xA);
                          *v11 = v795;
                        }
                        else if (v794 <= 9)
                        {
                          *v10 = 6;
                          if ((_DWORD)v720 == 45)
                          {
                            if (v794 >= 2)
                            {
                              a4 += 2;
                              goto LABEL_1621;
                            }
                          }
                          else
                          {
LABEL_1621:
                            v797 = 0;
                            do
                            {
                              v798 = *(unsigned __int16 *)a4;
                              a4 += 2;
                              v797 = v798 + 10 * v797 - 48;
                            }
                            while (a4 < (unint64_t)v795);
                            if ((_DWORD)v720 != 45)
                            {
                              v12.n128_f64[0] = (double)v797;
                              goto LABEL_1625;
                            }
                            if (v797)
                            {
                              v12.n128_f64[0] = (double)-v797;
                              goto LABEL_1625;
                            }
                          }
                          *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                          goto LABEL_1664;
                        }
                      }
                    }
                    if ((unint64_t)v795 < v639 && (*v795 | 0x20) == 0x65)
                    {
                      v1147 = v795 + 1;
                      *v11 = v795 + 1;
                      if ((unint64_t)(v795 + 1) < v639)
                      {
                        v1148 = *v1147;
                        if (v1148 == 45 || v1148 == 43)
                        {
                          v1147 = v795 + 2;
                          *v11 = v795 + 2;
                        }
                      }
                      if ((unint64_t)v1147 >= v639 || *v1147 - 48 > 9)
                      {
                        v1133 = WTF::fastCompactMalloc((WTF *)0x20);
                        v846 = v1133;
                        v12.n128_u64[0] = 0x5D00000002;
                        *(_QWORD *)v1133 = 0x5D00000002;
                        v1134 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                        goto LABEL_2503;
                      }
                      v1149 = v1147 + 1;
                      do
                      {
                        v795 = v1149;
                        if ((unint64_t)v1149 >= v639)
                          break;
                        ++v1149;
                      }
                      while (*v795 - 48 < 0xA);
                      *v11 = v795;
                    }
                    *v10 = 6;
                    if ((uint64_t)((uint64_t)v795 - a4) <= -2)
                      goto LABEL_4442;
                    v1965 = 0.0;
                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v795, &v1965, 0x2E00000005);
                    v12.n128_f64[0] = v1965;
LABEL_1625:
                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                    goto LABEL_1664;
                  }
                  if ((_DWORD)v720 == 102)
                  {
                    if ((uint64_t)(v639 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                    {
                      *v11 = a4 + 10;
                      v799 = 12;
LABEL_1663:
                      *v10 = v799;
                      goto LABEL_1664;
                    }
                  }
                  else if ((_DWORD)v720 == 116)
                  {
                    if ((uint64_t)(v639 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                    {
                      *v11 = a4 + 8;
                      v799 = 11;
                      goto LABEL_1663;
                    }
                  }
                  else if ((_DWORD)v720 == 110
                         && (uint64_t)(v639 - a4) >= 7
                         && *(_DWORD *)(a4 + 2) == 7078005
                         && *(_WORD *)(a4 + 6) == 108)
                  {
                    *v11 = a4 + 8;
                    v799 = 13;
                    goto LABEL_1663;
                  }
                  *v1958 = (WTF::AtomStringImpl *)a4;
                  LODWORD(v1137) = a4;
                  if (a4 < v639)
                  {
                    v1137 = (unsigned __int16 *)a4;
                    do
                    {
                      v1138 = *v1137;
                      v1140 = (v1138 | 0x20u) - 97 >= 0x1A
                           && (v1138 - 48) >= 0xA
                           && (v1138 - 8204) >= 2;
                      if (v1140 && v1138 != 95 && v1138 != 36)
                        break;
                      *v11 = ++v1137;
                    }
                    while ((unint64_t)v1137 < v639);
                  }
                  *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1137 - a4) >> 1);
                  v776 = 5;
LABEL_1591:
                  *((_BYTE *)a1 + 24) = v776;
                  goto LABEL_1664;
                }
                if ((_DWORD)a4 == 116)
                {
                  if ((uint64_t)(v639 - (_QWORD)v640) < 7 || *(_DWORD *)(v640 + 1) != 7667826 || v640[3] != 101)
                    goto LABEL_1923;
                  a4 = (unint64_t)(v640 + 4);
                  *v11 = v640 + 4;
                  *v10 = 11;
LABEL_1520:
                  while (a4 < v639)
                  {
                    if (*(unsigned __int16 *)a4 > 0xFFu
                      || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                    {
                      break;
                    }
                    a4 += 2;
                    *v11 = a4;
                  }
                  if (a4 == v639)
                  {
                    v810 = 14;
                    goto LABEL_1670;
                  }
                  *v10 = 18;
                  v740 = *(unsigned __int16 *)a4;
                  if (v740 > 0xFF)
                    goto LABEL_1711;
                  v741 = JSC::tokenTypesOfLatin1Characters[v740];
                  if (v741 <= 4)
                  {
                    if (v741 == 4)
                    {
                      v742 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v740 != 39)
                      {
                        v743 = a4 + 2;
                        *v11 = a4 + 2;
                        if (!v742)
                        {
                          v744 = v639 - v743;
                          if ((uint64_t)(v639 - v743) <= -2)
                            goto LABEL_4442;
                          v745 = (int16x8_t *)((v744 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                          if ((unint64_t)v744 <= 0xE)
                          {
                            if (v639 != v743)
                            {
                              v1158 = 2 * (v744 >> 1);
                              v1159 = (int16x8_t *)(a4 + 2);
                              while (1)
                              {
                                v1160 = v1159->u16[0];
                                if (v1160 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1160])
                                  break;
                                v1159 = (int16x8_t *)((char *)v1159 + 2);
                                v1158 -= 2;
                                if (!v1158)
                                  goto LABEL_1594;
                              }
                              v745 = v1159;
                            }
                          }
                          else
                          {
                            v746 = a4 + 2;
                            if (v744 < 15)
                            {
LABEL_1540:
                              if (v746 < (unint64_t)v745)
                              {
                                v753 = (unsigned __int16 *)&v745[-1];
                                v754 = v745[-1];
                                v755.i64[0] = 0x22002200220022;
                                v755.i64[1] = 0x22002200220022;
                                v756 = (int8x16_t)vceqq_s16(v754, v755);
                                v757.i64[0] = 0x5C005C005C005CLL;
                                v757.i64[1] = 0x5C005C005C005CLL;
                                v758.i64[0] = 0x20002000200020;
                                v758.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v754, v757), (int8x16_t)vcgtq_u16(v758, (uint16x8_t)v754)), v756);
                                v756.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v756.i32[0])
                                  goto LABEL_1593;
                              }
                            }
                            else
                            {
                              v747 = a4 + 16;
                              while (1)
                              {
                                v748 = *(int16x8_t *)(v747 - 14);
                                v749.i64[0] = 0x22002200220022;
                                v749.i64[1] = 0x22002200220022;
                                v750 = (int8x16_t)vceqq_s16(v748, v749);
                                v751.i64[0] = 0x5C005C005C005CLL;
                                v751.i64[1] = 0x5C005C005C005CLL;
                                v752.i64[0] = 0x20002000200020;
                                v752.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v748, v751), (int8x16_t)vcgtq_u16(v752, (uint16x8_t)v748)), v750);
                                v750.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v750.i32[0])
                                  break;
                                v747 += 16;
                                if (v747 >= (unint64_t)v745)
                                {
                                  v746 = v747 - 14;
                                  goto LABEL_1540;
                                }
                              }
                              v753 = (unsigned __int16 *)(v747 - 14);
LABEL_1593:
                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                              v745 = (int16x8_t *)&v753[v12.n128_u8[0]];
                            }
                          }
LABEL_1594:
                          *v11 = v745;
LABEL_1595:
                          if ((unint64_t)v745 < v639 && v745->u16[0] == (_DWORD)v740)
                          {
                            *((_BYTE *)a1 + 25) &= ~1u;
                            a1[4] = v743;
                            a1[6] = (uint64_t)v745->i64 + 2;
                            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v745 - v743) >> 1);
                            v777 = 4;
                            goto LABEL_1598;
                          }
                          JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v743, v740, a5, a6, a7, a8);
LABEL_1671:
                          v700 = 7;
                          goto LABEL_1844;
                        }
LABEL_2461:
                        v745 = (int16x8_t *)v743;
                        if (v743 < v639)
                        {
                          while (1)
                          {
                            v1153 = v745->u16[0];
                            if (v1153 < 0x20)
                            {
                              if (v1153 != 9)
                                goto LABEL_1595;
                            }
                            else if (v1153 == (_DWORD)v740 || v1153 > 0xFF || v1153 == 92)
                            {
                              goto LABEL_1595;
                            }
                            v745 = (int16x8_t *)((char *)v745 + 2);
                            *v11 = v745;
                            if ((unint64_t)v745 >= v639)
                              goto LABEL_1595;
                          }
                        }
                        v745 = (int16x8_t *)v743;
                        goto LABEL_1595;
                      }
                      if (*((_BYTE *)a1 + 40))
                      {
                        v743 = a4 + 2;
                        *v11 = a4 + 2;
                        goto LABEL_2461;
                      }
                      v1135 = WTF::fastCompactMalloc((WTF *)0x20);
                      v850 = v1135;
                      v12.n128_u64[0] = 0x2900000002;
                      *(_QWORD *)v1135 = 0x2900000002;
                      v1136 = "Single quotes (') are not allowed in JSON";
LABEL_2506:
                      *(_QWORD *)(v1135 + 8) = v1136;
                      *(_DWORD *)(v1135 + 16) = 4;
LABEL_1712:
                      v851 = *v1951;
                      *v1951 = (WTF::StringImpl *)v850;
                      if (v851)
                      {
                        if (*(_DWORD *)v851 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v851, v848, v849, a4, a5, a6, a7, a8);
                          WTF::fastFree(v860, v861, v862, v863, v864, v865, v866, v867);
                        }
                        else
                        {
                          *(_DWORD *)v851 -= 2;
                        }
                      }
                      goto LABEL_1671;
                    }
LABEL_1579:
                    *v10 = v741;
                    *v11 = a4 + 2;
                    goto LABEL_1671;
                  }
                  if (v741 != 5)
                  {
                    if (v741 != 6)
                    {
                      if (v741 - 18 >= 2)
                        goto LABEL_1579;
LABEL_1711:
                      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                      v850 = *(_QWORD *)&v1965;
                      if (v1965 == 0.0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B2A7ECLL);
                      }
                      goto LABEL_1712;
                    }
                    v800 = 0;
                    if (a4 < v639 && (_DWORD)v740 == 45)
                    {
                      *v11 = a4 + 2;
                      v800 = 1;
                    }
                    v801 = (unsigned __int16 *)(a4 + 2 * v800);
                    if ((unint64_t)v801 >= v639)
                      goto LABEL_2373;
                    v802 = *v801;
                    if (v802 == 48)
                    {
                      v805 = v800 + 1;
                      goto LABEL_1640;
                    }
                    if ((v802 - 49) > 8)
                    {
LABEL_2373:
                      v1135 = WTF::fastCompactMalloc((WTF *)0x20);
                      v850 = v1135;
                      *(_QWORD *)v1135 = 0xE00000002;
                      v1136 = "Invalid number";
                      goto LABEL_2506;
                    }
                    v803 = v800 + 1;
                    v804 = 2 * v800 + 2;
                    do
                    {
                      v805 = v803;
                      if (a4 + v804 >= v639)
                        break;
                      ++v803;
                      v804 += 2;
                    }
                    while (*(unsigned __int16 *)(a4 + 2 * v805) - 48 < 0xA);
LABEL_1640:
                    v806 = (unsigned __int16 *)(a4 + 2 * v805);
                    *v11 = v806;
                    if ((unint64_t)v806 < v639)
                    {
                      v807 = *v806;
                      if (v807 != 101 && v807 != 69)
                      {
                        if (v807 == 46)
                        {
                          *v11 = v806 + 1;
                          if ((unint64_t)(v806 + 1) >= v639 || v806[1] - 48 > 9)
                          {
                            v1135 = WTF::fastCompactMalloc((WTF *)0x20);
                            v850 = v1135;
                            *(_QWORD *)v1135 = 0x2200000002;
                            v1136 = "Invalid digits after decimal point";
                            goto LABEL_2506;
                          }
                          v1154 = a4 + 2 * v805 + 4;
                          do
                          {
                            v806 = (unsigned __int16 *)v1154;
                            if (v1154 >= v639)
                              break;
                            v1154 += 2;
                          }
                          while (*v806 - 48 < 0xA);
                          *v11 = v806;
                        }
                        else if (v805 <= 9)
                        {
                          *v10 = 6;
                          if ((_DWORD)v740 == 45)
                          {
                            if (v805 >= 2)
                            {
                              a4 += 2;
                              goto LABEL_1646;
                            }
                          }
                          else
                          {
LABEL_1646:
                            v808 = 0;
                            do
                            {
                              v809 = *(unsigned __int16 *)a4;
                              a4 += 2;
                              v808 = v809 + 10 * v808 - 48;
                            }
                            while (a4 < (unint64_t)v806);
                            if ((_DWORD)v740 != 45)
                            {
                              v12.n128_f64[0] = (double)v808;
                              goto LABEL_1650;
                            }
                            if (v808)
                            {
                              v12.n128_f64[0] = (double)-v808;
                              goto LABEL_1650;
                            }
                          }
                          *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                          goto LABEL_1671;
                        }
                      }
                    }
                    if ((unint64_t)v806 < v639 && (*v806 | 0x20) == 0x65)
                    {
                      v1155 = v806 + 1;
                      *v11 = v806 + 1;
                      if ((unint64_t)(v806 + 1) < v639)
                      {
                        v1156 = *v1155;
                        if (v1156 == 45 || v1156 == 43)
                        {
                          v1155 = v806 + 2;
                          *v11 = v806 + 2;
                        }
                      }
                      if ((unint64_t)v1155 >= v639 || *v1155 - 48 > 9)
                      {
                        v1135 = WTF::fastCompactMalloc((WTF *)0x20);
                        v850 = v1135;
                        v12.n128_u64[0] = 0x5D00000002;
                        *(_QWORD *)v1135 = 0x5D00000002;
                        v1136 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                        goto LABEL_2506;
                      }
                      v1157 = v1155 + 1;
                      do
                      {
                        v806 = v1157;
                        if ((unint64_t)v1157 >= v639)
                          break;
                        ++v1157;
                      }
                      while (*v806 - 48 < 0xA);
                      *v11 = v806;
                    }
                    *v10 = 6;
                    if ((uint64_t)((uint64_t)v806 - a4) <= -2)
                      goto LABEL_4442;
                    v1965 = 0.0;
                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v806, &v1965, 0x2E00000005);
                    v12.n128_f64[0] = v1965;
LABEL_1650:
                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                    goto LABEL_1671;
                  }
                  if ((_DWORD)v740 == 102)
                  {
                    if ((uint64_t)(v639 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                    {
                      *v11 = a4 + 10;
                      v810 = 12;
LABEL_1670:
                      *v10 = v810;
                      goto LABEL_1671;
                    }
                  }
                  else if ((_DWORD)v740 == 116)
                  {
                    if ((uint64_t)(v639 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                    {
                      *v11 = a4 + 8;
                      v810 = 11;
                      goto LABEL_1670;
                    }
                  }
                  else if ((_DWORD)v740 == 110
                         && (uint64_t)(v639 - a4) >= 7
                         && *(_DWORD *)(a4 + 2) == 7078005
                         && *(_WORD *)(a4 + 6) == 108)
                  {
                    *v11 = a4 + 8;
                    v810 = 13;
                    goto LABEL_1670;
                  }
                  *v1958 = (WTF::AtomStringImpl *)a4;
                  LODWORD(v1141) = a4;
                  if (a4 < v639)
                  {
                    v1141 = (unsigned __int16 *)a4;
                    do
                    {
                      v1142 = *v1141;
                      v1144 = (v1142 | 0x20u) - 97 >= 0x1A
                           && (v1142 - 48) >= 0xA
                           && (v1142 - 8204) >= 2;
                      if (v1144 && v1142 != 95 && v1142 != 36)
                        break;
                      *v11 = ++v1141;
                    }
                    while ((unint64_t)v1141 < v639);
                  }
                  *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1141 - a4) >> 1);
                  v777 = 5;
LABEL_1598:
                  *((_BYTE *)a1 + 24) = v777;
                  goto LABEL_1671;
                }
                if ((_DWORD)a4 != 110
                  || (uint64_t)(v639 - (_QWORD)v640) < 7
                  || *(_DWORD *)(v640 + 1) != 7078005
                  || v640[3] != 108)
                {
LABEL_1923:
                  *v1958 = (WTF::AtomStringImpl *)v640;
                  LODWORD(v966) = (_DWORD)v640;
                  if ((unint64_t)v640 < v639)
                  {
                    v966 = v640;
                    do
                    {
                      v967 = *v966;
                      v969 = (v967 | 0x20u) - 97 >= 0x1A
                          && (v967 - 48) >= 0xA
                          && (v967 - 8204) >= 2;
                      if (v969 && v967 != 95 && v967 != 36)
                        break;
                      *v11 = ++v966;
                    }
                    while ((unint64_t)v966 < v639);
                  }
                  v970 = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v966 - (_DWORD)v640) >> 1);
                  *((_DWORD *)a1 + 7) = v970;
                  *((_BYTE *)a1 + 24) = 5;
LABEL_1937:
                  v971 = v970 & 0x7FFFFFFF;
                  if ((v970 & 0x7FFFFFFF) >= 0xC8)
                    v972 = 200;
                  else
                    v972 = v971;
                  if (v971 >= 0xC9)
                    v973 = 3;
                  else
                    v973 = 0;
                  v974 = v972 + v973 + 24;
                  WTF::tryFastCompactMalloc((WTF *)(2 * v974 + 20), &v1965);
                  v975 = *(_QWORD *)&v1965;
                  if (v1965 == 0.0)
                  {
                    if ((*((_DWORD *)a1 + 7) & 0x7FFFFFFFu) < 0xB
                      || (v1168 = (__n128 *)*v1958,
                          WTF::tryFastCompactMalloc((WTF *)0x5E, &v1965),
                          v975 = *(_QWORD *)&v1965,
                          v1965 == 0.0))
                    {
                      v975 = WTF::fastCompactMalloc((WTF *)0x20);
                      v12.n128_u64[0] = 0x1500000002;
                      *(_QWORD *)v975 = 0x1500000002;
                      *(_QWORD *)(v975 + 8) = "Unexpected identifier";
                      *(_DWORD *)(v975 + 16) = 4;
                    }
                    else
                    {
                      **(_QWORD **)&v1965 = 0x2500000002;
                      *(_OWORD *)(v975 + 20) = xmmword_199158AA0;
                      *(_QWORD *)(v975 + 8) = v975 + 20;
                      *(_DWORD *)(v975 + 16) = 0;
                      *(_OWORD *)(v975 + 36) = xmmword_199158AB0;
                      *(_QWORD *)(v975 + 52) = 0x65006900660069;
                      *(_DWORD *)(v975 + 60) = 2097266;
                      *(_WORD *)(v975 + 64) = 34;
                      v12 = *v1168;
                      *(_DWORD *)(v975 + 82) = v1168[1].n128_u32[0];
                      *(__n128 *)(v975 + 66) = v12;
                      v12.n128_u64[0] = 0x22002E002E002ELL;
                      *(_QWORD *)(v975 + 86) = 0x22002E002E002ELL;
                    }
                  }
                  else
                  {
                    *(_OWORD *)(*(_QWORD *)&v1965 + 20) = xmmword_199158AA0;
                    *(_DWORD *)v975 = 2;
                    *(_DWORD *)(v975 + 4) = v974;
                    *(_QWORD *)(v975 + 8) = v975 + 20;
                    *(_DWORD *)(v975 + 16) = 0;
                    v976 = (unsigned __int16 *)(v975 + 66);
                    v12.n128_u64[1] = 0x74006E00650064;
                    *(_OWORD *)(v975 + 36) = xmmword_199158AB0;
                    v12.n128_u64[0] = 0x65006900660069;
                    *(_QWORD *)(v975 + 52) = 0x65006900660069;
                    *(_DWORD *)(v975 + 60) = 2097266;
                    *(_WORD *)(v975 + 64) = 34;
                    if (v972 == 1)
                    {
                      *v976 = *v640;
                    }
                    else if ((_BYTE)v972)
                    {
                      memcpy((void *)(v975 + 66), v640, 2 * v972);
                    }
                    if (v971 >= 0xC9)
                    {
                      v977 = 2 * v973;
                      v978 = &v976[v972];
                      v979 = "...";
                      do
                      {
                        v980 = *(unsigned __int8 *)v979++;
                        *v978++ = v980;
                        v977 -= 2;
                      }
                      while (v977);
                    }
                    v976[v972 + v973] = 34;
                  }
                  *(_DWORD *)v975 = 4;
                  v981 = *v1960;
                  *v1960 = (WTF::StringImpl *)v975;
                  if (v981)
                  {
                    if (*(_DWORD *)v981 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v981, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1008, v1009, v1010, v1011, v1012, v1013, v1014, v1015);
                    }
                    else
                    {
                      *(_DWORD *)v981 -= 2;
                    }
                  }
                  if (*(_DWORD *)v975 != 2)
                  {
                    v1961 = 0;
                    *(_DWORD *)v975 -= 2;
LABEL_2241:
                    v667 = 1;
                    goto LABEL_2242;
                  }
                  v1007 = (WTF::StringImpl *)v975;
                  goto LABEL_2249;
                }
                a4 = (unint64_t)(v640 + 4);
                *v11 = v640 + 4;
                *v10 = 13;
LABEL_2562:
                while (a4 < v639)
                {
                  if (*(unsigned __int16 *)a4 > 0xFFu
                    || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                  {
                    break;
                  }
                  a4 += 2;
                  *v11 = a4;
                }
                if (a4 == v639)
                {
                  v1212 = 14;
                  goto LABEL_2624;
                }
                *v10 = 18;
                v1182 = *(unsigned __int16 *)a4;
                if (v1182 > 0xFF)
                  goto LABEL_2627;
                v1183 = JSC::tokenTypesOfLatin1Characters[v1182];
                if (v1183 <= 4)
                {
                  if (v1183 == 4)
                  {
                    v1184 = *((unsigned __int8 *)a1 + 40);
                    if ((_DWORD)v1182 != 39)
                    {
                      v1185 = a4 + 2;
                      *v11 = a4 + 2;
                      if (!v1184)
                      {
                        v1186 = v639 - v1185;
                        if ((uint64_t)(v639 - v1185) <= -2)
                          goto LABEL_4442;
                        v1187 = (int16x8_t *)((v1186 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                        if ((unint64_t)v1186 <= 0xE)
                        {
                          if (v639 != v1185)
                          {
                            v1236 = 2 * (v1186 >> 1);
                            v1237 = (int16x8_t *)(a4 + 2);
                            while (1)
                            {
                              v1238 = v1237->u16[0];
                              if (v1238 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1238])
                                break;
                              v1237 = (int16x8_t *)((char *)v1237 + 2);
                              v1236 -= 2;
                              if (!v1236)
                                goto LABEL_2589;
                            }
                            v1187 = v1237;
                          }
                        }
                        else
                        {
                          v1188 = a4 + 2;
                          if (v1186 < 15)
                          {
LABEL_2580:
                            if (v1188 < (unint64_t)v1187)
                            {
                              v1195 = (unsigned __int16 *)&v1187[-1];
                              v1196 = v1187[-1];
                              v1197.i64[0] = 0x22002200220022;
                              v1197.i64[1] = 0x22002200220022;
                              v1198 = (int8x16_t)vceqq_s16(v1196, v1197);
                              v1199.i64[0] = 0x5C005C005C005CLL;
                              v1199.i64[1] = 0x5C005C005C005CLL;
                              v1200.i64[0] = 0x20002000200020;
                              v1200.i64[1] = 0x20002000200020;
                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1196, v1199), (int8x16_t)vcgtq_u16(v1200, (uint16x8_t)v1196)), v1198);
                              v1198.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                              if (v1198.i32[0])
                                goto LABEL_2588;
                            }
                          }
                          else
                          {
                            v1189 = a4 + 16;
                            while (1)
                            {
                              v1190 = *(int16x8_t *)(v1189 - 14);
                              v1191.i64[0] = 0x22002200220022;
                              v1191.i64[1] = 0x22002200220022;
                              v1192 = (int8x16_t)vceqq_s16(v1190, v1191);
                              v1193.i64[0] = 0x5C005C005C005CLL;
                              v1193.i64[1] = 0x5C005C005C005CLL;
                              v1194.i64[0] = 0x20002000200020;
                              v1194.i64[1] = 0x20002000200020;
                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1190, v1193), (int8x16_t)vcgtq_u16(v1194, (uint16x8_t)v1190)), v1192);
                              v1192.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                              if (v1192.i32[0])
                                break;
                              v1189 += 16;
                              if (v1189 >= (unint64_t)v1187)
                              {
                                v1188 = v1189 - 14;
                                goto LABEL_2580;
                              }
                            }
                            v1195 = (unsigned __int16 *)(v1189 - 14);
LABEL_2588:
                            v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                            v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                            v1187 = (int16x8_t *)&v1195[v12.n128_u8[0]];
                          }
                        }
LABEL_2589:
                        *v11 = v1187;
LABEL_2590:
                        if ((unint64_t)v1187 < v639 && v1187->u16[0] == (_DWORD)v1182)
                        {
                          *((_BYTE *)a1 + 25) &= ~1u;
                          a1[4] = v1185;
                          a1[6] = (uint64_t)v1187->i64 + 2;
                          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1187 - v1185) >> 1);
                          v1201 = 4;
                          goto LABEL_2593;
                        }
                        JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1185, v1182, a5, a6, a7, a8);
LABEL_2625:
                        v700 = 2;
                        goto LABEL_1844;
                      }
LABEL_2655:
                      v1187 = (int16x8_t *)v1185;
                      if (v1185 < v639)
                      {
                        while (1)
                        {
                          v1231 = v1187->u16[0];
                          if (v1231 < 0x20)
                          {
                            if (v1231 != 9)
                              goto LABEL_2590;
                          }
                          else if (v1231 == (_DWORD)v1182 || v1231 > 0xFF || v1231 == 92)
                          {
                            goto LABEL_2590;
                          }
                          v1187 = (int16x8_t *)((char *)v1187 + 2);
                          *v11 = v1187;
                          if ((unint64_t)v1187 >= v639)
                            goto LABEL_2590;
                        }
                      }
                      v1187 = (int16x8_t *)v1185;
                      goto LABEL_2590;
                    }
                    if (*((_BYTE *)a1 + 40))
                    {
                      v1185 = a4 + 2;
                      *v11 = a4 + 2;
                      goto LABEL_2655;
                    }
                    v1225 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1215 = v1225;
                    v12.n128_u64[0] = 0x2900000002;
                    *(_QWORD *)v1225 = 0x2900000002;
                    v1226 = "Single quotes (') are not allowed in JSON";
LABEL_2697:
                    *(_QWORD *)(v1225 + 8) = v1226;
                    *(_DWORD *)(v1225 + 16) = 4;
LABEL_2628:
                    v1216 = *v1951;
                    *v1951 = (WTF::StringImpl *)v1215;
                    if (v1216)
                    {
                      if (*(_DWORD *)v1216 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1216, v1213, v1214, a4, a5, a6, a7, a8);
                        WTF::fastFree(v1217, v1218, v1219, v1220, v1221, v1222, v1223, v1224);
                      }
                      else
                      {
                        *(_DWORD *)v1216 -= 2;
                      }
                    }
                    goto LABEL_2625;
                  }
LABEL_2586:
                  *v10 = v1183;
                  *v11 = a4 + 2;
                  goto LABEL_2625;
                }
                if (v1183 != 5)
                {
                  if (v1183 != 6)
                  {
                    if (v1183 - 18 >= 2)
                      goto LABEL_2586;
LABEL_2627:
                    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                    v1215 = *(_QWORD *)&v1965;
                    if (v1965 == 0.0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B2A7DCLL);
                    }
                    goto LABEL_2628;
                  }
                  v1202 = 0;
                  if (a4 < v639 && (_DWORD)v1182 == 45)
                  {
                    *v11 = a4 + 2;
                    v1202 = 1;
                  }
                  v1203 = (unsigned __int16 *)(a4 + 2 * v1202);
                  if ((unint64_t)v1203 >= v639)
                    goto LABEL_2633;
                  v1204 = *v1203;
                  if (v1204 == 48)
                  {
                    v1207 = v1202 + 1;
                    goto LABEL_2603;
                  }
                  if ((v1204 - 49) > 8)
                  {
LABEL_2633:
                    v1225 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1215 = v1225;
                    *(_QWORD *)v1225 = 0xE00000002;
                    v1226 = "Invalid number";
                    goto LABEL_2697;
                  }
                  v1205 = v1202 + 1;
                  v1206 = 2 * v1202 + 2;
                  do
                  {
                    v1207 = v1205;
                    if (a4 + v1206 >= v639)
                      break;
                    ++v1205;
                    v1206 += 2;
                  }
                  while (*(unsigned __int16 *)(a4 + 2 * v1207) - 48 < 0xA);
LABEL_2603:
                  v1208 = (unsigned __int16 *)(a4 + 2 * v1207);
                  *v11 = v1208;
                  if ((unint64_t)v1208 < v639)
                  {
                    v1209 = *v1208;
                    if (v1209 != 101 && v1209 != 69)
                    {
                      if (v1209 == 46)
                      {
                        *v11 = v1208 + 1;
                        if ((unint64_t)(v1208 + 1) >= v639 || v1208[1] - 48 > 9)
                        {
                          v1225 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1215 = v1225;
                          *(_QWORD *)v1225 = 0x2200000002;
                          v1226 = "Invalid digits after decimal point";
                          goto LABEL_2697;
                        }
                        v1232 = a4 + 2 * v1207 + 4;
                        do
                        {
                          v1208 = (unsigned __int16 *)v1232;
                          if (v1232 >= v639)
                            break;
                          v1232 += 2;
                        }
                        while (*v1208 - 48 < 0xA);
                        *v11 = v1208;
                      }
                      else if (v1207 <= 9)
                      {
                        *v10 = 6;
                        if ((_DWORD)v1182 == 45)
                        {
                          if (v1207 >= 2)
                          {
                            a4 += 2;
                            goto LABEL_2609;
                          }
                        }
                        else
                        {
LABEL_2609:
                          v1210 = 0;
                          do
                          {
                            v1211 = *(unsigned __int16 *)a4;
                            a4 += 2;
                            v1210 = v1211 + 10 * v1210 - 48;
                          }
                          while (a4 < (unint64_t)v1208);
                          if ((_DWORD)v1182 != 45)
                          {
                            v12.n128_f64[0] = (double)v1210;
                            goto LABEL_2613;
                          }
                          if (v1210)
                          {
                            v12.n128_f64[0] = (double)-v1210;
                            goto LABEL_2613;
                          }
                        }
                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                        goto LABEL_2625;
                      }
                    }
                  }
                  if ((unint64_t)v1208 < v639 && (*v1208 | 0x20) == 0x65)
                  {
                    v1233 = v1208 + 1;
                    *v11 = v1208 + 1;
                    if ((unint64_t)(v1208 + 1) < v639)
                    {
                      v1234 = *v1233;
                      if (v1234 == 45 || v1234 == 43)
                      {
                        v1233 = v1208 + 2;
                        *v11 = v1208 + 2;
                      }
                    }
                    if ((unint64_t)v1233 >= v639 || *v1233 - 48 > 9)
                    {
                      v1225 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1215 = v1225;
                      v12.n128_u64[0] = 0x5D00000002;
                      *(_QWORD *)v1225 = 0x5D00000002;
                      v1226 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                      goto LABEL_2697;
                    }
                    v1235 = v1233 + 1;
                    do
                    {
                      v1208 = v1235;
                      if ((unint64_t)v1235 >= v639)
                        break;
                      ++v1235;
                    }
                    while (*v1208 - 48 < 0xA);
                    *v11 = v1208;
                  }
                  *v10 = 6;
                  if ((uint64_t)((uint64_t)v1208 - a4) <= -2)
                    goto LABEL_4442;
                  v1965 = 0.0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1208, &v1965, 0x2E00000005);
                  v12.n128_f64[0] = v1965;
LABEL_2613:
                  *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                  goto LABEL_2625;
                }
                if ((_DWORD)v1182 == 102)
                {
                  if ((uint64_t)(v639 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                  {
                    *v11 = a4 + 10;
                    v1212 = 12;
LABEL_2624:
                    *v10 = v1212;
                    goto LABEL_2625;
                  }
                }
                else if ((_DWORD)v1182 == 116)
                {
                  if ((uint64_t)(v639 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                  {
                    *v11 = a4 + 8;
                    v1212 = 11;
                    goto LABEL_2624;
                  }
                }
                else if ((_DWORD)v1182 == 110
                       && (uint64_t)(v639 - a4) >= 7
                       && *(_DWORD *)(a4 + 2) == 7078005
                       && *(_WORD *)(a4 + 6) == 108)
                {
                  *v11 = a4 + 8;
                  v1212 = 13;
                  goto LABEL_2624;
                }
                *v1958 = (WTF::AtomStringImpl *)a4;
                LODWORD(v1227) = a4;
                if (a4 < v639)
                {
                  v1227 = (unsigned __int16 *)a4;
                  do
                  {
                    v1228 = *v1227;
                    v1230 = (v1228 | 0x20u) - 97 >= 0x1A
                         && (v1228 - 48) >= 0xA
                         && (v1228 - 8204) >= 2;
                    if (v1230 && v1228 != 95 && v1228 != 36)
                      break;
                    *v11 = ++v1227;
                  }
                  while ((unint64_t)v1227 < v639);
                }
                *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1227 - a4) >> 1);
                v1201 = 5;
LABEL_2593:
                *((_BYTE *)a1 + 24) = v1201;
                goto LABEL_2625;
              }
              if (v642 != 4)
                goto LABEL_1369;
              v643 = *((unsigned __int8 *)a1 + 40);
              if ((_DWORD)a4 == 39)
              {
                if (!*((_BYTE *)a1 + 40))
                {
                  v905 = WTF::fastCompactMalloc((WTF *)0x20);
                  v821 = v905;
                  v12.n128_u64[0] = 0x2900000002;
                  *(_QWORD *)v905 = 0x2900000002;
                  v906 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_2062;
                }
                a3 = (unint64_t)(v640 + 1);
                *v11 = v640 + 1;
LABEL_2018:
                v645 = (int16x8_t *)a3;
                if (a3 < v639)
                {
                  while (1)
                  {
                    v997 = v645->u16[0];
                    if (v997 < 0x20)
                    {
                      if (v997 != 9)
                        goto LABEL_1393;
                    }
                    else if (v997 == (_DWORD)a4 || v997 > 0xFF || v997 == 92)
                    {
                      goto LABEL_1393;
                    }
                    v645 = (int16x8_t *)((char *)v645 + 2);
                    *v11 = v645;
                    if ((unint64_t)v645 >= v639)
                      goto LABEL_1393;
                  }
                }
                v645 = (int16x8_t *)a3;
                goto LABEL_1393;
              }
              a3 = (unint64_t)(v640 + 1);
              *v11 = v640 + 1;
              if (v643)
                goto LABEL_2018;
              v644 = v639 - a3;
              if ((uint64_t)(v639 - a3) <= -2)
                goto LABEL_4442;
              v645 = (int16x8_t *)((char *)v640 + (v644 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v644 <= 0xE)
              {
                if (v639 != a3)
                {
                  v1004 = 2 * (v644 >> 1);
                  v1005 = (int16x8_t *)(v640 + 1);
                  while (1)
                  {
                    v1006 = v1005->u16[0];
                    if (v1006 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1006])
                      break;
                    v1005 = (int16x8_t *)((char *)v1005 + 2);
                    v1004 -= 2;
                    if (!v1004)
                      goto LABEL_1392;
                  }
                  v645 = v1005;
                }
                goto LABEL_1392;
              }
              v646 = v640 + 1;
              if (v644 < 15)
              {
LABEL_1363:
                if (v646 >= (unsigned __int16 *)v645)
                  goto LABEL_1392;
                v654 = (unsigned __int16 *)&v645[-1];
                v655 = v645[-1];
                v656.i64[0] = 0x22002200220022;
                v656.i64[1] = 0x22002200220022;
                v657 = (int8x16_t)vceqq_s16(v655, v656);
                v658.i64[0] = 0x5C005C005C005CLL;
                v658.i64[1] = 0x5C005C005C005CLL;
                v659.i64[0] = 0x20002000200020;
                v659.i64[1] = 0x20002000200020;
                v653 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v655, v658), (int8x16_t)vcgtq_u16(v659, (uint16x8_t)v655)), v657);
                v657.i16[0] = vmaxvq_u16((uint16x8_t)v653);
                if (!v657.i32[0])
                  goto LABEL_1392;
              }
              else
              {
                v647 = v640 + 8;
                while (1)
                {
                  v648 = *(int16x8_t *)(v647 - 7);
                  v649.i64[0] = 0x22002200220022;
                  v649.i64[1] = 0x22002200220022;
                  v650 = (int8x16_t)vceqq_s16(v648, v649);
                  v651.i64[0] = 0x5C005C005C005CLL;
                  v651.i64[1] = 0x5C005C005C005CLL;
                  v652.i64[0] = 0x20002000200020;
                  v652.i64[1] = 0x20002000200020;
                  v653 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v648, v651), (int8x16_t)vcgtq_u16(v652, (uint16x8_t)v648)), v650);
                  v650.i16[0] = vmaxvq_u16((uint16x8_t)v653);
                  if (v650.i32[0])
                    break;
                  v647 += 8;
                  if (v647 >= (unsigned __int16 *)v645)
                  {
                    v646 = v647 - 7;
                    goto LABEL_1363;
                  }
                }
                v654 = v647 - 7;
              }
              v645 = (int16x8_t *)&v654[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v653))];
LABEL_1392:
              *v11 = v645;
LABEL_1393:
              if ((unint64_t)v645 < v639 && v645->u16[0] == (_DWORD)a4)
              {
                v669 = *((_BYTE *)a1 + 25) & 0xFE;
                *((_BYTE *)a1 + 25) = v669;
                a1[4] = a3;
                a1[6] = (uint64_t)v645->i64 + 2;
                v670 = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v645 - a3) >> 1);
                *((_DWORD *)a1 + 7) = v670;
                *((_BYTE *)a1 + 24) = 4;
LABEL_1396:
                v671 = v670 & 0x7FFFFFFF;
                if ((v669 & 1) != 0)
                {
                  if (v671 >= 0xB)
                  {
                    v907 = *v1958;
                    if (*v1958)
                    {
                      v673 = WTF::fastCompactMalloc((WTF *)(v671 + 20));
                      v674 = (void *)(v673 + 20);
                      *(_DWORD *)v673 = 2;
                      *(_DWORD *)(v673 + 4) = v671;
                      *(_QWORD *)(v673 + 8) = v673 + 20;
                      *(_DWORD *)(v673 + 16) = 4;
                      v675 = v907;
                      v676 = v671;
LABEL_1401:
                      memcpy(v674, v675, v676);
LABEL_1804:
                      v1965 = *(double *)&v673;
                      v764 = JSC::jsNontrivialString(a2, (JSC::VM *)&v1965, a3, a4, a5, a6, a7, a8);
LABEL_1805:
                      v700 = v764;
                      v908 = *(WTF::StringImpl **)&v1965;
                      v1965 = 0.0;
                      if (v908)
                      {
                        if (*(_DWORD *)v908 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v908, (WTF::AtomStringImpl *)a2, a3, v765, a5, a6, a7, a8);
                          WTF::fastFree(v937, v938, v939, v940, v941, v942, v943, v944);
                        }
                        else
                        {
                          *(_DWORD *)v908 -= 2;
                        }
                      }
                      a4 = a1[6];
                      v701 = a1[7];
                      while (a4 < v701)
                      {
                        if (*(unsigned __int16 *)a4 > 0xFFu
                          || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                        {
                          break;
                        }
                        a4 += 2;
                        *v11 = a4;
                      }
                      if (a4 != v701)
                      {
                        *v10 = 18;
                        v703 = *(unsigned __int16 *)a4;
                        if (v703 <= 0xFF)
                        {
                          v704 = JSC::tokenTypesOfLatin1Characters[v703];
                          if (v704 <= 4)
                          {
                            if (v704 == 4)
                            {
                              v910 = *((unsigned __int8 *)a1 + 40);
                              if ((_DWORD)v703 == 39)
                              {
                                if (!*((_BYTE *)a1 + 40))
                                  goto LABEL_2527;
                                a3 = a4 + 2;
                                *v11 = a4 + 2;
                              }
                              else
                              {
                                a3 = a4 + 2;
                                *v11 = a4 + 2;
                                if (!v910)
                                {
                                  v911 = v701 - a3;
                                  if ((uint64_t)(v701 - a3) <= -2)
                                    goto LABEL_4442;
                                  v707 = (int16x8_t *)((v911 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                                  if ((unint64_t)v911 > 0xE)
                                  {
                                    v708 = a4 + 2;
                                    if (v911 >= 15)
                                    {
                                      v709 = a4 + 16;
                                      while (1)
                                      {
                                        v912 = *(int16x8_t *)(v709 - 14);
                                        v913.i64[0] = 0x22002200220022;
                                        v913.i64[1] = 0x22002200220022;
                                        v914 = (int8x16_t)vceqq_s16(v912, v913);
                                        v915.i64[0] = 0x5C005C005C005CLL;
                                        v915.i64[1] = 0x5C005C005C005CLL;
                                        v916.i64[0] = 0x20002000200020;
                                        v916.i64[1] = 0x20002000200020;
                                        v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v912, v915), (int8x16_t)vcgtq_u16(v916, (uint16x8_t)v912)), v914);
                                        v914.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                        if (v914.i32[0])
                                          goto LABEL_1832;
                                        v709 += 16;
                                        if (v709 >= (unint64_t)v707)
                                          goto LABEL_1828;
                                      }
                                    }
                                    goto LABEL_1829;
                                  }
                                  if (v701 == a3)
                                    goto LABEL_1834;
                                  v1036 = 2 * (v911 >> 1);
                                  v1029 = (int16x8_t *)(a4 + 2);
                                  while (1)
                                  {
                                    v1037 = v1029->u16[0];
                                    if (v1037 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1037])
                                      goto LABEL_2374;
                                    v1029 = (int16x8_t *)((char *)v1029 + 2);
                                    v1036 -= 2;
                                    if (!v1036)
                                      goto LABEL_1834;
                                  }
                                }
                              }
                              v707 = (int16x8_t *)a3;
                              if (a3 < v701)
                              {
                                while (1)
                                {
                                  v1031 = v707->u16[0];
                                  if (v1031 < 0x20)
                                  {
                                    if (v1031 != 9)
                                      goto LABEL_1835;
                                  }
                                  else if (v1031 == (_DWORD)v703 || v1031 > 0xFF || v1031 == 92)
                                  {
                                    goto LABEL_1835;
                                  }
                                  v707 = (int16x8_t *)((char *)v707 + 2);
                                  *v11 = v707;
                                  if ((unint64_t)v707 >= v701)
                                    goto LABEL_1835;
                                }
                              }
                              goto LABEL_2394;
                            }
                            goto LABEL_1842;
                          }
                          if (v704 == 5)
                          {
                            if ((_DWORD)v703 == 102)
                            {
                              if ((uint64_t)(v701 - a4) >= 9
                                && *(_DWORD *)(a4 + 2) == 7077985
                                && *(_DWORD *)(a4 + 6) == 6619251)
                              {
                                goto LABEL_1894;
                              }
                            }
                            else if ((_DWORD)v703 == 116)
                            {
                              if ((uint64_t)(v701 - a4) >= 7
                                && *(_DWORD *)(a4 + 2) == 7667826
                                && *(_WORD *)(a4 + 6) == 101)
                              {
LABEL_1899:
                                *v11 = a4 + 8;
                                v953 = 11;
                                goto LABEL_1900;
                              }
                            }
                            else if ((_DWORD)v703 == 110
                                   && (uint64_t)(v701 - a4) >= 7
                                   && *(_DWORD *)(a4 + 2) == 7078005
                                   && *(_WORD *)(a4 + 6) == 108)
                            {
                              goto LABEL_2088;
                            }
                            *v1958 = (WTF::AtomStringImpl *)a4;
                            LODWORD(v1016) = a4;
                            if (a4 < v701)
                            {
                              v1016 = (unsigned __int16 *)a4;
                              do
                              {
                                v1020 = *v1016;
                                v1022 = (v1020 | 0x20u) - 97 >= 0x1A
                                     && (v1020 - 48) >= 0xA
                                     && (v1020 - 8204) >= 2;
                                if (v1022 && v1020 != 95 && v1020 != 36)
                                  break;
                                *v11 = ++v1016;
                              }
                              while ((unint64_t)v1016 < v701);
                            }
                            goto LABEL_2102;
                          }
                          if (v704 == 6)
                          {
                            v945 = 0;
                            if (a4 < v701 && (_DWORD)v703 == 45)
                            {
                              *v11 = a4 + 2;
                              v945 = 1;
                            }
                            v946 = (unsigned __int16 *)(a4 + 2 * v945);
                            if ((unint64_t)v946 >= v701)
                              goto LABEL_2000;
                            v947 = *v946;
                            if (v947 == 48)
                            {
                              v950 = v945 + 1;
                            }
                            else
                            {
                              if ((v947 - 49) > 8)
                                goto LABEL_2000;
                              v948 = v945 + 1;
                              v949 = 2 * v945 + 2;
                              do
                              {
                                v950 = v948;
                                if (a4 + v949 >= v701)
                                  break;
                                ++v948;
                                v949 += 2;
                              }
                              while (*(unsigned __int16 *)(a4 + 2 * v950) - 48 < 0xA);
                            }
                            v772 = (unsigned __int16 *)(a4 + 2 * v950);
                            *v11 = v772;
                            if ((unint64_t)v772 < v701)
                            {
                              v951 = *v772;
                              if (v951 != 101 && v951 != 69)
                              {
                                if (v951 == 46)
                                {
                                  *v11 = v772 + 1;
                                  if ((unint64_t)(v772 + 1) >= v701 || v772[1] - 48 > 9)
                                    goto LABEL_2176;
                                  v1032 = a4 + 2 * v950 + 4;
                                  do
                                  {
                                    v772 = (unsigned __int16 *)v1032;
                                    if (v1032 >= v701)
                                      break;
                                    v1032 += 2;
                                  }
                                  while (*v772 - 48 < 0xA);
                                  *v11 = v772;
                                }
                                else if (v950 <= 9)
                                {
                                  *v10 = 6;
                                  if ((_DWORD)v703 == 45)
                                  {
                                    if (v950 < 2)
                                      goto LABEL_2180;
                                    a4 += 2;
                                  }
                                  v774 = 0;
                                  do
                                  {
                                    v952 = *(unsigned __int16 *)a4;
                                    a4 += 2;
                                    v774 = v952 + 10 * v774 - 48;
                                  }
                                  while (a4 < (unint64_t)v772);
                                  goto LABEL_1887;
                                }
                              }
                            }
                            if ((unint64_t)v772 >= v701 || (*v772 | 0x20) != 0x65)
                              goto LABEL_2173;
                            v1033 = v772 + 1;
                            *v11 = v772 + 1;
                            if ((unint64_t)(v772 + 1) < v701)
                            {
                              v1034 = *v1033;
                              if (v1034 == 45 || v1034 == 43)
                              {
                                v1033 = v772 + 2;
                                *v11 = v772 + 2;
                              }
                            }
                            if ((unint64_t)v1033 < v701 && *v1033 - 48 <= 9)
                            {
                              v1035 = v1033 + 1;
                              do
                              {
                                v772 = v1035;
                                if ((unint64_t)v1035 >= v701)
                                  break;
                                ++v1035;
                              }
                              while (*v772 - 48 < 0xA);
                              goto LABEL_2172;
                            }
                            goto LABEL_2175;
                          }
                          if (v704 - 18 >= 2)
                            goto LABEL_1842;
                        }
                        WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                        v715 = *(_QWORD *)&v1965;
                        if (v1965 == 0.0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198B2A7FCLL);
                        }
                        goto LABEL_1904;
                      }
                      goto LABEL_1901;
                    }
LABEL_1803:
                    v673 = 0;
                    goto LABEL_1804;
                  }
                  JSC::Identifier::fromString(a2, *v1958, v671, a4, a5, a6, a7, a8, (rlim_t *)&v1965);
                  v763 = (JSC *)a2;
LABEL_1548:
                  v764 = JSC::jsString(v763, (JSC::VM *)&v1965, (const WTF::String *)a3, a4, a5, a6, a7, a8);
                  goto LABEL_1805;
                }
                if (v671 >= 0xB)
                {
                  v672 = *v1958;
                  if (*v1958)
                  {
                    if (v671 > 0x7FFFFFEF)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B2A7F4);
                    }
                    v673 = WTF::fastCompactMalloc((WTF *)(2 * v671 + 20));
                    v674 = (void *)(v673 + 20);
                    *(_DWORD *)v673 = 2;
                    *(_DWORD *)(v673 + 4) = v671;
                    *(_QWORD *)(v673 + 8) = v673 + 20;
                    *(_DWORD *)(v673 + 16) = 0;
                    v675 = v672;
                    v676 = 2 * v671;
                    goto LABEL_1401;
                  }
                  goto LABEL_1803;
                }
                v759 = *v1958;
                if (v671 == 1)
                {
                  v786 = *(unsigned __int16 *)v759;
                  if (v786 <= 0xFF)
                  {
                    if (v1953[2313])
                    {
                      v787 = *(_QWORD *)(a2 + 8 * v786 + 42216);
                      v761 = *(_QWORD *)(v787 + 8);
                      if ((v761 & 1) != 0)
                        v788 = 0;
                      else
                        v788 = *(_DWORD **)(v787 + 8);
                      *v788 += 2;
                    }
                    else
                    {
                      LOBYTE(v1970[0]) = *(_WORD *)v759;
                      WTF::AtomStringImpl::add((uint64_t)v1970, 1uLL, a4, a5, a6, a7, a8, &v1965);
                      v761 = *(_QWORD *)&v1965;
                    }
                    goto LABEL_1547;
                  }
                }
                else if ((v670 & 0x7FFFFFFF) == 0)
                {
                  v761 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                  v762 = WTF::StringImpl::s_emptyAtomString + 2;
                  goto LABEL_1546;
                }
                WTF::AtomStringImpl::add((uint64_t)v759, v671, a4, a5, a6, a7, a8, &v1965);
                v761 = *(_QWORD *)&v1965;
                v762 = **(_DWORD **)&v1965;
                **(_DWORD **)&v1965 += 2;
                if (!v762)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v761, v760, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v778, v779, v780, v781, v782, v783, v784, v785);
                  goto LABEL_1547;
                }
LABEL_1546:
                *(_DWORD *)v761 = v762;
LABEL_1547:
                v1965 = *(double *)&v761;
                v763 = (JSC *)a2;
                goto LABEL_1548;
              }
              v642 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, a4, a5, a6, a7, a8);
LABEL_1370:
              if ((v642 | 2) != 2)
                goto LABEL_1447;
              v660 = v1964;
              v661 = *((unsigned int *)a1 + 30);
              if ((_DWORD)v661 == *((_DWORD *)a1 + 31))
              {
                if (v661 >> 30
                  || JSC::MarkedVectorBase::expandCapacity(v1955, 2 * (int)v661))
                {
                  *((_BYTE *)a1 + 112) = 1;
LABEL_4220:
                  __break(0xC471u);
                  JUMPOUT(0x198B29FACLL);
                }
                LODWORD(v661) = *(_DWORD *)v1955;
LABEL_1691:
                *(_QWORD *)(a1[16] + 8 * v661) = v660;
                *((_DWORD *)a1 + 30) = v661 + 1;
                if (!a1[17] && (v660 & 0xFFFE000000000002) == 0 && v660)
                {
                  if ((v660 & 8) != 0)
                    v823 = (int *)(v660 - 16);
                  else
                    v823 = (int *)(v660 & 0xFFFFFFFFFFFFC000 | 8);
                  v824 = (uint64_t *)(*(_QWORD *)v823 + 560);
                  a1[17] = (uint64_t)v824;
                  v1970[0] = (int *)v1955;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v824, (uint64_t *)v1970, a4, a5, a6, a7, a8, (uint64_t)&v1965);
                }
                goto LABEL_1375;
              }
              v662 = (uint64_t *)a1[16];
              if (v662 != v1957 && v662)
                goto LABEL_1691;
              v662[v661] = v1964;
              *(_DWORD *)v1955 = v661 + 1;
LABEL_1375:
              if (*((_BYTE *)a1 + 112))
                goto LABEL_4220;
              v663 = *((unsigned int *)a1 + 63);
              if ((_DWORD)v663 == *((_DWORD *)a1 + 62))
              {
                v811 = (WTF::StringImpl **)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1954, v663 + 1, (unint64_t)&v1963);
                v663 = *((unsigned int *)a1 + 63);
                v664 = a1[30];
                v665 = *v811;
                *v811 = 0;
              }
              else
              {
                v664 = *v1954;
                v665 = v1963;
                v1963 = 0;
              }
              *(_QWORD *)(v664 + 8 * v663) = v665;
              *((_DWORD *)a1 + 63) = v663 + 1;
              LOBYTE(v1965) = 6;
              v666 = *((unsigned int *)a1 + 55);
              if ((_DWORD)v666 == *((_DWORD *)a1 + 54))
              {
                v868 = (_BYTE *)WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1956, (WTF *)(v666 + 1), (unint64_t)&v1965);
                v666 = *((unsigned int *)a1 + 55);
                *(_BYTE *)(a1[26] + v666) = *v868;
              }
              else
              {
                *(_BYTE *)(*v1956 + v666) = 6;
              }
              *((_DWORD *)a1 + 55) = v666 + 1;
              v667 = v642 == 2 ? 12 : 5;
LABEL_2242:
              v1070 = v1963;
              v1963 = 0;
              if (v1070)
                break;
LABEL_2245:
              if (v667)
                goto LABEL_2707;
            }
            if (*(_DWORD *)v1070 != 2)
            {
              *(_DWORD *)v1070 -= 2;
              goto LABEL_2245;
            }
            WTF::StringImpl::~StringImpl(v1070, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v1071, v1072, v1073, v1074, v1075, v1076, v1077, v1078);
          }
          while (!v667);
LABEL_2707:
          if (v667 == 14)
          {
            if (*v10 == 3)
            {
              a4 = a1[6];
              v1248 = a1[7];
              while (a4 < v1248)
              {
                if (*(unsigned __int16 *)a4 > 0xFFu
                  || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                {
                  break;
                }
                a4 += 2;
                *v11 = a4;
              }
              if (a4 != v1248)
              {
                *v10 = 18;
                v1250 = *(unsigned __int16 *)a4;
                if (v1250 <= 0xFF)
                {
                  v1251 = JSC::tokenTypesOfLatin1Characters[v1250];
                  if (v1251 <= 4)
                  {
                    if (v1251 == 4)
                    {
                      v1266 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v1250 == 39)
                      {
                        if (!*((_BYTE *)a1 + 40))
                          goto LABEL_3944;
                        v1253 = a4 + 2;
                        *v11 = a4 + 2;
                      }
                      else
                      {
                        v1253 = a4 + 2;
                        *v11 = a4 + 2;
                        if (!v1266)
                        {
                          v1267 = v1248 - v1253;
                          if ((uint64_t)(v1248 - v1253) > -2)
                          {
                            v1255 = (int16x8_t *)((v1267 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                            if ((unint64_t)v1267 > 0xE)
                            {
                              v1256 = a4 + 2;
                              if (v1267 >= 15)
                              {
                                v1257 = a4 + 16;
                                while (1)
                                {
                                  v1268 = *(int16x8_t *)(v1257 - 14);
                                  v1269.i64[0] = 0x22002200220022;
                                  v1269.i64[1] = 0x22002200220022;
                                  v1270 = (int8x16_t)vceqq_s16(v1268, v1269);
                                  v1271.i64[0] = 0x5C005C005C005CLL;
                                  v1271.i64[1] = 0x5C005C005C005CLL;
                                  v1272.i64[0] = 0x20002000200020;
                                  v1272.i64[1] = 0x20002000200020;
                                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1268, v1271), (int8x16_t)vcgtq_u16(v1272, (uint16x8_t)v1268)), v1270);
                                  v1270.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                  if (v1270.i32[0])
                                    goto LABEL_2827;
                                  v1257 += 16;
                                  if (v1257 >= (unint64_t)v1255)
                                    goto LABEL_2812;
                                }
                              }
                              goto LABEL_2813;
                            }
                            if (v1248 == v1253)
                              goto LABEL_2829;
                            v1616 = 2 * (v1267 >> 1);
                            v1581 = (int16x8_t *)(a4 + 2);
                            while (1)
                            {
                              v1617 = v1581->u16[0];
                              if (v1617 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1617])
                                goto LABEL_3763;
                              v1581 = (int16x8_t *)((char *)v1581 + 2);
                              v1616 -= 2;
                              if (!v1616)
                                goto LABEL_2829;
                            }
                          }
                          goto LABEL_4442;
                        }
                      }
                      v1255 = (int16x8_t *)v1253;
                      if (v1253 < v1248)
                      {
                        while (1)
                        {
                          v1611 = v1255->u16[0];
                          if (v1611 < 0x20)
                          {
                            if (v1611 != 9)
                              goto LABEL_2830;
                          }
                          else if (v1611 == (_DWORD)v1250 || v1611 > 0xFF || v1611 == 92)
                          {
                            goto LABEL_2830;
                          }
                          v1255 = (int16x8_t *)((char *)v1255 + 2);
                          *v11 = v1255;
                          if ((unint64_t)v1255 >= v1248)
                            goto LABEL_2830;
                        }
                      }
                      goto LABEL_3771;
                    }
                    goto LABEL_2837;
                  }
                  if (v1251 == 5)
                  {
                    if ((_DWORD)v1250 == 102)
                    {
                      if ((uint64_t)(v1248 - a4) >= 9
                        && *(_DWORD *)(a4 + 2) == 7077985
                        && *(_DWORD *)(a4 + 6) == 6619251)
                      {
                        goto LABEL_2933;
                      }
                    }
                    else if ((_DWORD)v1250 == 116)
                    {
                      if ((uint64_t)(v1248 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                      {
LABEL_2938:
                        *v11 = a4 + 8;
                        v1322 = 11;
                        goto LABEL_2939;
                      }
                    }
                    else if ((_DWORD)v1250 == 110
                           && (uint64_t)(v1248 - a4) >= 7
                           && *(_DWORD *)(a4 + 2) == 7078005
                           && *(_WORD *)(a4 + 6) == 108)
                    {
                      goto LABEL_3537;
                    }
                    *v1958 = (WTF::AtomStringImpl *)a4;
                    LODWORD(v1568) = a4;
                    if (a4 < v1248)
                    {
                      v1568 = (unsigned __int16 *)a4;
                      do
                      {
                        v1598 = *v1568;
                        v1600 = (v1598 | 0x20u) - 97 >= 0x1A
                             && (v1598 - 48) >= 0xA
                             && (v1598 - 8204) >= 2;
                        if (v1600 && v1598 != 95 && v1598 != 36)
                          break;
                        *v11 = ++v1568;
                      }
                      while ((unint64_t)v1568 < v1248);
                    }
                    goto LABEL_3551;
                  }
                  if (v1251 == 6)
                  {
                    v1314 = 0;
                    if (a4 < v1248 && (_DWORD)v1250 == 45)
                    {
                      *v11 = a4 + 2;
                      v1314 = 1;
                    }
                    v1315 = (unsigned __int16 *)(a4 + 2 * v1314);
                    if ((unint64_t)v1315 >= v1248)
                      goto LABEL_3354;
                    v1316 = *v1315;
                    if (v1316 == 48)
                    {
                      v1319 = v1314 + 1;
                    }
                    else
                    {
                      if ((v1316 - 49) > 8)
                        goto LABEL_3354;
                      v1317 = v1314 + 1;
                      v1318 = 2 * v1314 + 2;
                      do
                      {
                        v1319 = v1317;
                        if (a4 + v1318 >= v1248)
                          break;
                        ++v1317;
                        v1318 += 2;
                      }
                      while (*(unsigned __int16 *)(a4 + 2 * v1319) - 48 < 0xA);
                    }
                    v1302 = (unsigned __int16 *)(a4 + 2 * v1319);
                    *v11 = v1302;
                    if ((unint64_t)v1302 < v1248)
                    {
                      v1320 = *v1302;
                      if (v1320 != 101 && v1320 != 69)
                      {
                        if (v1320 == 46)
                        {
                          *v11 = v1302 + 1;
                          if ((unint64_t)(v1302 + 1) >= v1248 || v1302[1] - 48 > 9)
                            goto LABEL_3627;
                          v1612 = a4 + 2 * v1319 + 4;
                          do
                          {
                            v1302 = (unsigned __int16 *)v1612;
                            if (v1612 >= v1248)
                              break;
                            v1612 += 2;
                          }
                          while (*v1302 - 48 < 0xA);
                          *v11 = v1302;
                        }
                        else if (v1319 <= 9)
                        {
                          *v10 = 6;
                          if ((_DWORD)v1250 == 45)
                          {
                            if (v1319 < 2)
                              goto LABEL_3631;
                            a4 += 2;
                          }
                          v1304 = 0;
                          do
                          {
                            v1321 = *(unsigned __int16 *)a4;
                            a4 += 2;
                            v1304 = v1321 + 10 * v1304 - 48;
                          }
                          while (a4 < (unint64_t)v1302);
                          goto LABEL_2926;
                        }
                      }
                    }
                    if ((unint64_t)v1302 >= v1248 || (*v1302 | 0x20) != 0x65)
                      goto LABEL_3624;
                    v1613 = v1302 + 1;
                    *v11 = v1302 + 1;
                    if ((unint64_t)(v1302 + 1) < v1248)
                    {
                      v1614 = *v1613;
                      if (v1614 == 45 || v1614 == 43)
                      {
                        v1613 = v1302 + 2;
                        *v11 = v1302 + 2;
                      }
                    }
                    if ((unint64_t)v1613 < v1248 && *v1613 - 48 <= 9)
                    {
                      v1615 = v1613 + 1;
                      do
                      {
                        v1302 = v1615;
                        if ((unint64_t)v1615 >= v1248)
                          break;
                        ++v1615;
                      }
                      while (*v1302 - 48 < 0xA);
                      goto LABEL_3623;
                    }
                    goto LABEL_3626;
                  }
                  if (v1251 - 18 >= 2)
                    goto LABEL_2837;
                }
                WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                v1264 = *(_QWORD *)&v1965;
                if (v1965 == 0.0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B2A920);
                }
                goto LABEL_3147;
              }
              goto LABEL_2948;
            }
            goto LABEL_4050;
          }
        }
        while (v667 == 12);
        v9 = v1948;
        if (v667 != 5)
          return v1961;
LABEL_1157:
        v542 = JSC::constructEmptyArray(*a1, 0, 0, 0, a5, a6, a7, a8, v12);
        if (*(_DWORD *)(a2 + 80))
        {
          v1339 = *(_DWORD *)(a2 + 80);
          if ((v1339 & 0x27) != 0 && (v1339 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v1950, 7u, a3, v541, a5, a6, a7, a8);
          if (*(_QWORD *)(a2 + 16))
            return 0;
        }
        v543 = *((unsigned int *)a1 + 30);
        if ((_DWORD)v543 == *((_DWORD *)a1 + 31))
        {
          if (!(v543 >> 30) && !JSC::MarkedVectorBase::expandCapacity(v1955, 2 * (int)v543))
          {
            LODWORD(v543) = *(_DWORD *)v1955;
            goto LABEL_2952;
          }
          *((_BYTE *)a1 + 112) = 1;
LABEL_4222:
          __break(0xC471u);
          JUMPOUT(0x198B29FD4);
        }
        v544 = (uint64_t *)a1[16];
        if (v544 == v1957 || !v544)
        {
          v544[v543] = v542;
          *(_DWORD *)v1955 = v543 + 1;
          goto LABEL_1162;
        }
LABEL_2952:
        *(_QWORD *)(a1[16] + 8 * v543) = v542;
        *((_DWORD *)a1 + 30) = v543 + 1;
        if (!a1[17] && (v542 & 0xFFFE000000000002) == 0 && v542 != 0)
        {
          v1335 = (_QWORD *)(v542 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v542 & 8) != 0)
            v1335 = (_QWORD *)(v542 - 16);
          v1336 = (uint64_t *)(*v1335 + 560);
          a1[17] = (uint64_t)v1336;
          v1970[0] = (int *)v1955;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v1336, (uint64_t *)v1970, v541, a5, a6, a7, a8, (uint64_t)&v1965);
        }
LABEL_1162:
        if (*((_BYTE *)a1 + 112))
          goto LABEL_4222;
LABEL_1163:
        v23 = *v10;
LABEL_1164:
        a4 = a1[6];
        v545 = a1[7];
        if (a4 >= v545)
        {
          v547 = 0;
        }
        else
        {
          do
          {
            v546 = *(unsigned __int16 *)a4 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
            v547 = !v546;
            if (!v546)
              break;
            a4 += 2;
            *v11 = a4;
          }
          while (a4 < v545);
        }
        if (a4 == v545)
        {
          v580 = 14;
          goto LABEL_1247;
        }
        *v10 = 18;
        v548 = *(unsigned __int16 *)a4;
        if (v548 > 0xFF)
        {
LABEL_2960:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
          v1337 = *(_QWORD *)&v1965;
          if (v1965 == 0.0)
          {
            __break(0xC471u);
            JUMPOUT(0x198B2A814);
          }
          goto LABEL_2961;
        }
        v549 = JSC::tokenTypesOfLatin1Characters[v548];
        if (v549 > 4)
        {
          if (v549 != 5)
          {
            if (v549 != 6)
            {
              if (v549 - 18 >= 2)
                goto LABEL_1195;
              goto LABEL_2960;
            }
            v569 = 0;
            v570 = v547 ^ 1;
            if ((_DWORD)v548 != 45)
              v570 = 1;
            if ((v570 & 1) == 0)
            {
              *v11 = a4 + 2;
              v569 = 1;
            }
            v571 = (unsigned __int16 *)(a4 + 2 * v569);
            if ((unint64_t)v571 < v545)
            {
              v572 = *v571;
              if (v572 == 48)
              {
                v575 = v569 + 1;
                goto LABEL_1226;
              }
              if ((v572 - 49) <= 8)
              {
                v573 = v569 + 1;
                v574 = 2 * v569 + 2;
                do
                {
                  v575 = v573;
                  if (a4 + v574 >= v545)
                    break;
                  ++v573;
                  v574 += 2;
                }
                while (*(unsigned __int16 *)(a4 + 2 * v575) - 48 < 0xA);
LABEL_1226:
                v576 = (unsigned __int16 *)(a4 + 2 * v575);
                *v11 = v576;
                if ((unint64_t)v576 < v545)
                {
                  v577 = *v576;
                  if (v577 != 101 && v577 != 69)
                  {
                    if (v577 == 46)
                    {
                      v1553 = v9;
                      *v11 = v576 + 1;
                      if ((unint64_t)(v576 + 1) >= v545 || v576[1] - 48 > 9)
                      {
                        v1559 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1560 = v1559;
                        *(_QWORD *)v1559 = 0x2200000002;
                        v1561 = "Invalid digits after decimal point";
                        goto LABEL_3403;
                      }
                      v1555 = a4 + 2 * v575 + 4;
                      do
                      {
                        v576 = (unsigned __int16 *)v1555;
                        if (v1555 >= v545)
                          break;
                        v1555 += 2;
                      }
                      while (*v576 - 48 < 0xA);
                      *v11 = v576;
                    }
                    else if (v575 <= 9)
                    {
                      *v10 = 6;
                      if ((_DWORD)v548 == 45)
                      {
                        a4 += 2;
                        if (v575 < 2)
                          goto LABEL_3407;
                      }
                      v578 = 0;
                      do
                      {
                        v579 = *(unsigned __int16 *)a4;
                        a4 += 2;
                        v578 = v579 + 10 * v578 - 48;
                      }
                      while (a4 < (unint64_t)v576);
                      if ((_DWORD)v548 == 45)
                      {
                        if (!v578)
                        {
LABEL_3407:
                          *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                          goto LABEL_1248;
                        }
                        v12.n128_f64[0] = (double)-v578;
                      }
                      else
                      {
                        v12.n128_f64[0] = (double)v578;
                      }
                      *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                      goto LABEL_1248;
                    }
                  }
                }
                v1553 = v9;
                if ((unint64_t)v576 < v545 && (*v576 | 0x20) == 0x65)
                {
                  v1556 = v576 + 1;
                  *v11 = v576 + 1;
                  if ((unint64_t)(v576 + 1) < v545)
                  {
                    v1557 = *v1556;
                    if (v1557 == 45 || v1557 == 43)
                    {
                      v1556 = v576 + 2;
                      *v11 = v576 + 2;
                    }
                  }
                  if ((unint64_t)v1556 >= v545 || *v1556 - 48 > 9)
                  {
                    v1559 = WTF::fastCompactMalloc((WTF *)0x20);
                    v1560 = v1559;
                    v12.n128_u64[0] = 0x5D00000002;
                    *(_QWORD *)v1559 = 0x5D00000002;
                    v1561 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_3403;
                  }
                  v1558 = v1556 + 1;
                  do
                  {
                    v576 = v1558;
                    if ((unint64_t)v1558 >= v545)
                      break;
                    ++v1558;
                  }
                  while (*v576 - 48 < 0xA);
                  *v11 = v576;
                }
                *v10 = 6;
                if ((uint64_t)((uint64_t)v576 - a4) <= -2)
                  goto LABEL_4442;
                v1965 = 0.0;
                fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v576, &v1965, 0x2E00000005);
                v12.n128_f64[0] = v1965;
                *(double *)v1958 = v1965;
                goto LABEL_3406;
              }
            }
            v1337 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v1337 = 0xE00000002;
            *(_QWORD *)(v1337 + 8) = "Invalid number";
            *(_DWORD *)(v1337 + 16) = 4;
LABEL_2961:
            v1338 = *v1951;
            *v1951 = (WTF::StringImpl *)v1337;
            if (v1338)
            {
              if (*(_DWORD *)v1338 == 2)
              {
                WTF::StringImpl::~StringImpl(v1338, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1384, v1385, v1386, v1387, v1388, v1389, v1390, v1391);
              }
              else
              {
                *(_DWORD *)v1338 -= 2;
              }
            }
            goto LABEL_1248;
          }
          if ((_DWORD)v548 == 102)
          {
            if ((uint64_t)(v545 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
            {
              *v11 = a4 + 10;
              v580 = 12;
LABEL_1247:
              *v10 = v580;
              goto LABEL_1248;
            }
          }
          else if ((_DWORD)v548 == 116)
          {
            if ((uint64_t)(v545 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
            {
              *v11 = a4 + 8;
              v580 = 11;
              goto LABEL_1247;
            }
          }
          else if ((_DWORD)v548 == 110
                 && (uint64_t)(v545 - a4) >= 7
                 && *(_DWORD *)(a4 + 2) == 7078005
                 && *(_WORD *)(a4 + 6) == 108)
          {
            *v11 = a4 + 8;
            v580 = 13;
            goto LABEL_1247;
          }
          *v1958 = (WTF::AtomStringImpl *)a4;
          LODWORD(v1496) = a4;
          if (a4 < v545)
          {
            v1496 = (unsigned __int16 *)a4;
            do
            {
              v1497 = *v1496;
              v1499 = (v1497 | 0x20u) - 97 >= 0x1A
                   && (v1497 - 48) >= 0xA
                   && (v1497 - 8204) >= 2;
              if (v1499 && v1497 != 95 && v1497 != 36)
                break;
              *v11 = ++v1496;
            }
            while ((unint64_t)v1496 < v545);
          }
          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1496 - a4) >> 1);
          v568 = 5;
LABEL_1215:
          *((_BYTE *)a1 + 24) = v568;
          goto LABEL_1248;
        }
        if (v549 != 4)
        {
LABEL_1195:
          *v10 = v549;
          *v11 = a4 + 2;
          goto LABEL_1196;
        }
        v550 = *((unsigned __int8 *)a1 + 40);
        if ((_DWORD)v548 == 39)
        {
          v1553 = v9;
          if (*((_BYTE *)a1 + 40))
          {
            a3 = a4 + 2;
            *v11 = a4 + 2;
LABEL_3358:
            v552 = (int16x8_t *)a3;
            if (a3 < v545)
            {
              while (1)
              {
                v1554 = v552->u16[0];
                if (v1554 < 0x20)
                {
                  if (v1554 != 9)
                    goto LABEL_3593;
                }
                else if (v1554 == (_DWORD)v548 || v1554 > 0xFF || v1554 == 92)
                {
                  goto LABEL_3593;
                }
                v552 = (int16x8_t *)((char *)v552 + 2);
                *v11 = v552;
                if ((unint64_t)v552 >= v545)
                  goto LABEL_3593;
              }
            }
            v552 = (int16x8_t *)a3;
LABEL_3593:
            v9 = v1553;
            goto LABEL_1212;
          }
          v1559 = WTF::fastCompactMalloc((WTF *)0x20);
          v1560 = v1559;
          v12.n128_u64[0] = 0x2900000002;
          *(_QWORD *)v1559 = 0x2900000002;
          v1561 = "Single quotes (') are not allowed in JSON";
LABEL_3403:
          *(_QWORD *)(v1559 + 8) = v1561;
          *(_DWORD *)(v1559 + 16) = 4;
          v1567 = *v1951;
          *v1951 = (WTF::StringImpl *)v1560;
          v9 = v1553;
          if (v1567)
          {
            if (*(_DWORD *)v1567 == 2)
            {
              WTF::StringImpl::~StringImpl(v1567, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v1590, v1591, v1592, v1593, v1594, v1595, v1596, v1597);
            }
            else
            {
              *(_DWORD *)v1567 -= 2;
            }
LABEL_3406:
            v9 = v1553;
          }
LABEL_1248:
          v142 = 8;
LABEL_1249:
          LOBYTE(v1965) = v142;
          v353 = *((unsigned int *)a1 + 55);
          if ((_DWORD)v353 != *((_DWORD *)a1 + 54))
          {
            *(_BYTE *)(*v1956 + v353) = v142;
            goto LABEL_1251;
          }
          goto LABEL_3226;
        }
        a3 = a4 + 2;
        *v11 = a4 + 2;
        if (v550)
        {
          v1553 = v9;
          goto LABEL_3358;
        }
        v551 = v545 - a3;
        if ((uint64_t)(v545 - a3) <= -2)
          goto LABEL_4442;
        v552 = (int16x8_t *)((v551 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
        if ((unint64_t)v551 <= 0xE)
        {
          if (v545 != a3)
          {
            v1562 = 2 * (v551 >> 1);
            v1563 = (int16x8_t *)(a4 + 2);
            while (1)
            {
              v1564 = v1563->u16[0];
              if (v1564 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1564])
                break;
              v1563 = (int16x8_t *)((char *)v1563 + 2);
              v1562 -= 2;
              if (!v1562)
                goto LABEL_1211;
            }
            v552 = v1563;
          }
        }
        else
        {
          v553 = a4 + 2;
          if (v551 < 15)
          {
LABEL_1189:
            if (v553 < (unint64_t)v552)
            {
              v560 = (unsigned __int16 *)&v552[-1];
              v561 = v552[-1];
              v562.i64[0] = 0x22002200220022;
              v562.i64[1] = 0x22002200220022;
              v563 = (int8x16_t)vceqq_s16(v561, v562);
              v564.i64[0] = 0x5C005C005C005CLL;
              v564.i64[1] = 0x5C005C005C005CLL;
              v565.i64[0] = 0x20002000200020;
              v565.i64[1] = 0x20002000200020;
              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v561, v564), (int8x16_t)vcgtq_u16(v565, (uint16x8_t)v561)), v563);
              v563.i16[0] = vmaxvq_u16((uint16x8_t)v12);
              if (v563.i32[0])
                goto LABEL_1210;
            }
          }
          else
          {
            v554 = a4 + 16;
            while (1)
            {
              v555 = *(int16x8_t *)(v554 - 14);
              v556.i64[0] = 0x22002200220022;
              v556.i64[1] = 0x22002200220022;
              v557 = (int8x16_t)vceqq_s16(v555, v556);
              v558.i64[0] = 0x5C005C005C005CLL;
              v558.i64[1] = 0x5C005C005C005CLL;
              v559.i64[0] = 0x20002000200020;
              v559.i64[1] = 0x20002000200020;
              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v555, v558), (int8x16_t)vcgtq_u16(v559, (uint16x8_t)v555)), v557);
              v557.i16[0] = vmaxvq_u16((uint16x8_t)v12);
              if (v557.i32[0])
                break;
              v554 += 16;
              if (v554 >= (unint64_t)v552)
              {
                v553 = v554 - 14;
                goto LABEL_1189;
              }
            }
            v560 = (unsigned __int16 *)(v554 - 14);
LABEL_1210:
            v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
            v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
            v552 = (int16x8_t *)&v560[v12.n128_u8[0]];
          }
        }
LABEL_1211:
        *v11 = v552;
LABEL_1212:
        if ((unint64_t)v552 < v545 && v552->u16[0] == (_DWORD)v548)
        {
          *((_BYTE *)a1 + 25) &= ~1u;
          a1[4] = a3;
          a1[6] = (uint64_t)v552->i64 + 2;
          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v552 - a3) >> 1);
          v568 = 4;
          goto LABEL_1215;
        }
        v549 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v548, a5, a6, a7, a8);
LABEL_1196:
        if (v549 != 1)
          goto LABEL_1248;
        if (v23 == 10)
        {
          v1726 = WTF::fastCompactMalloc((WTF *)0x20);
          v1734 = (WTF::StringImpl *)v1726;
          v1763 = 0x2F00000002;
          v1735 = "Unexpected comma at the end of array expression";
          goto LABEL_4094;
        }
        a4 = a1[6];
        v24 = a1[7];
        if (a4 >= v24)
        {
          v567 = 0;
        }
        else
        {
          do
          {
            v566 = *(unsigned __int16 *)a4 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
            v567 = !v566;
            if (!v566)
              break;
            a4 += 2;
            *v11 = a4;
          }
          while (a4 < v24);
        }
        if (a4 == v24)
        {
LABEL_3027:
          v1364 = 14;
          goto LABEL_3025;
        }
        *v10 = 18;
        v35 = *(unsigned __int16 *)a4;
        if (v35 > 0xFF)
          goto LABEL_3029;
        v1340 = JSC::tokenTypesOfLatin1Characters[v35];
        if (v1340 > 4)
        {
          if (v1340 != 5)
          {
            if (v1340 != 6)
            {
              if (v1340 - 18 >= 2)
                goto LABEL_2987;
LABEL_3029:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
              v156 = *(_QWORD *)&v1965;
              if (v1965 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x198B2A930);
              }
              goto LABEL_3030;
            }
            v1355 = v567 ^ 1;
            if ((_DWORD)v35 != 45)
              v1355 = 1;
            if ((v1355 & 1) != 0)
            {
              v1356 = 0;
            }
            else
            {
              *v11 = a4 + 2;
              v1356 = 1;
            }
            v1357 = (unsigned __int16 *)(a4 + 2 * v1356);
            if ((unint64_t)v1357 < v24)
            {
              v1358 = *v1357;
              if (v1358 == 48)
              {
                v1361 = v1356 + 1;
LABEL_3006:
                v91 = (unsigned __int16 *)(a4 + 2 * v1361);
                *v11 = v91;
                if ((unint64_t)v91 >= v24)
                  goto LABEL_3504;
                v1362 = *v91;
                if (v1362 == 101 || v1362 == 69)
                  goto LABEL_3504;
                if (v1362 != 46)
                {
                  if (v1361 <= 9)
                  {
                    *v10 = 6;
                    if ((_DWORD)v35 == 45)
                    {
                      if (v1361 < 2)
                        goto LABEL_3523;
                      a4 += 2;
                    }
                    v93 = 0;
                    do
                    {
                      v1363 = *(unsigned __int16 *)a4;
                      a4 += 2;
                      v93 = v1363 + 10 * v93 - 48;
                    }
                    while (a4 < (unint64_t)v91);
                    goto LABEL_1152;
                  }
LABEL_3504:
                  if ((unint64_t)v91 >= v24 || (*v91 | 0x20) != 0x65)
                    goto LABEL_3516;
                  v1585 = v91 + 1;
                  *v11 = v91 + 1;
                  if ((unint64_t)(v91 + 1) < v24)
                  {
                    v1586 = *v1585;
                    if (v1586 == 45 || v1586 == 43)
                    {
                      v1585 = v91 + 2;
                      *v11 = v91 + 2;
                    }
                  }
                  if ((unint64_t)v1585 < v24 && *v1585 - 48 <= 9)
                  {
                    v1587 = v1585 + 1;
                    do
                    {
                      v91 = v1587;
                      if ((unint64_t)v1587 >= v24)
                        break;
                      ++v1587;
                    }
                    while (*v91 - 48 < 0xA);
LABEL_3515:
                    *v11 = v91;
LABEL_3516:
                    *v10 = 6;
                    if ((uint64_t)((uint64_t)v91 - a4) <= -2)
                      goto LABEL_4442;
                    v1965 = 0.0;
                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v91, &v1965, 0x2E00000005);
                    v12.n128_f64[0] = v1965;
LABEL_1154:
                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                    goto LABEL_3026;
                  }
LABEL_3518:
                  v1549 = WTF::fastCompactMalloc((WTF *)0x20);
                  v156 = v1549;
                  v12.n128_u64[0] = 0x5D00000002;
                  *(_QWORD *)v1549 = 0x5D00000002;
                  v1550 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                  goto LABEL_3520;
                }
                *v11 = v91 + 1;
                if ((unint64_t)(v91 + 1) < v24 && v91[1] - 48 <= 9)
                {
                  v1584 = a4 + 2 * v1361 + 4;
                  do
                  {
                    v91 = (unsigned __int16 *)v1584;
                    if (v1584 >= v24)
                      break;
                    v1584 += 2;
                  }
                  while (*v91 - 48 < 0xA);
                  *v11 = v91;
                  goto LABEL_3504;
                }
LABEL_3519:
                v1549 = WTF::fastCompactMalloc((WTF *)0x20);
                v156 = v1549;
                *(_QWORD *)v1549 = 0x2200000002;
                v1550 = "Invalid digits after decimal point";
                goto LABEL_3520;
              }
              if ((v1358 - 49) <= 8)
              {
                v1359 = v1356 + 1;
                v1360 = 2 * v1356 + 2;
                do
                {
                  v1361 = v1359;
                  if (a4 + v1360 >= v24)
                    break;
                  ++v1359;
                  v1360 += 2;
                }
                while (*(unsigned __int16 *)(a4 + 2 * v1361) - 48 < 0xA);
                goto LABEL_3006;
              }
            }
LABEL_3353:
            v1549 = WTF::fastCompactMalloc((WTF *)0x20);
            v156 = v1549;
            *(_QWORD *)v1549 = 0xE00000002;
            v1550 = "Invalid number";
LABEL_3520:
            *(_QWORD *)(v1549 + 8) = v1550;
            *(_DWORD *)(v1549 + 16) = 4;
LABEL_3030:
            v1366 = *v1951;
            *v1951 = (WTF::StringImpl *)v156;
            if (v1366)
            {
              if (*(_DWORD *)v1366 == 2)
              {
                WTF::StringImpl::~StringImpl(v1366, (WTF::AtomStringImpl *)a2, v155, a4, a5, a6, a7, a8);
                WTF::fastFree(v1457, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
              }
              else
              {
                *(_DWORD *)v1366 -= 2;
              }
            }
            goto LABEL_3026;
          }
          if ((_DWORD)v35 == 102)
          {
            if ((uint64_t)(v24 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
            {
LABEL_3019:
              *v11 = a4 + 10;
              v1364 = 12;
LABEL_3025:
              *v10 = v1364;
              goto LABEL_3026;
            }
            goto LABEL_3431;
          }
          if ((_DWORD)v35 == 116)
          {
            if ((uint64_t)(v24 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
            {
LABEL_3024:
              *v11 = a4 + 8;
              v1364 = 11;
              goto LABEL_3025;
            }
LABEL_3431:
            *v1958 = (WTF::AtomStringImpl *)a4;
            LODWORD(v170) = a4;
            if (a4 < v24)
            {
              v170 = (unsigned __int16 *)a4;
              do
              {
                v1572 = *v170;
                v1574 = (v1572 | 0x20u) - 97 >= 0x1A
                     && (v1572 - 48) >= 0xA
                     && (v1572 - 8204) >= 2;
                if (v1574 && v1572 != 95 && v1572 != 36)
                  break;
                *v11 = ++v170;
              }
              while ((unint64_t)v170 < v24);
            }
            goto LABEL_3444;
          }
          if ((_DWORD)v35 != 110
            || (uint64_t)(v24 - a4) < 7
            || *(_DWORD *)(a4 + 2) != 7078005
            || *(_WORD *)(a4 + 6) != 108)
          {
            goto LABEL_3431;
          }
LABEL_3430:
          *v11 = a4 + 8;
          v1364 = 13;
          goto LABEL_3025;
        }
        if (v1340 != 4)
        {
LABEL_2987:
          *v10 = v1340;
          goto LABEL_2988;
        }
        v1341 = *((unsigned __int8 *)a1 + 40);
        if ((_DWORD)v35 == 39)
        {
          if (*((_BYTE *)a1 + 40))
          {
            v38 = a4 + 2;
            *v11 = a4 + 2;
LABEL_3488:
            v40 = (int16x8_t *)v38;
            if (v38 < v24)
            {
              while (1)
              {
                v1583 = v40->u16[0];
                if (v1583 < 0x20)
                {
                  if (v1583 != 9)
                    goto LABEL_2992;
                }
                else if (v1583 == (_DWORD)v35 || v1583 > 0xFF || v1583 == 92)
                {
                  goto LABEL_2992;
                }
                v40 = (int16x8_t *)((char *)v40 + 2);
                *v11 = v40;
                if ((unint64_t)v40 >= v24)
                  goto LABEL_2992;
              }
            }
            goto LABEL_3770;
          }
          goto LABEL_3943;
        }
        v38 = a4 + 2;
        *v11 = a4 + 2;
        if (v1341)
          goto LABEL_3488;
        v1342 = v24 - v38;
        if ((uint64_t)(v24 - v38) <= -2)
          goto LABEL_4442;
        v40 = (int16x8_t *)((v1342 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
        if ((unint64_t)v1342 <= 0xE)
        {
          if (v24 == v38)
            goto LABEL_2991;
          v1588 = 2 * (v1342 >> 1);
          v207 = (int16x8_t *)(a4 + 2);
          while (1)
          {
            v1589 = v207->u16[0];
            if (v1589 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1589])
              goto LABEL_3762;
            v207 = (int16x8_t *)((char *)v207 + 2);
            v1588 -= 2;
            if (!v1588)
              goto LABEL_2991;
          }
        }
        v41 = a4 + 2;
        if (v1342 < 15)
          goto LABEL_2981;
        v42 = a4 + 16;
        while (1)
        {
          v1343 = *(int16x8_t *)(v42 - 14);
          v1344.i64[0] = 0x22002200220022;
          v1344.i64[1] = 0x22002200220022;
          v1345 = (int8x16_t)vceqq_s16(v1343, v1344);
          v1346.i64[0] = 0x5C005C005C005CLL;
          v1346.i64[1] = 0x5C005C005C005CLL;
          v1347.i64[0] = 0x20002000200020;
          v1347.i64[1] = 0x20002000200020;
          v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1343, v1346), (int8x16_t)vcgtq_u16(v1347, (uint16x8_t)v1343)), v1345);
          v1345.i16[0] = vmaxvq_u16((uint16x8_t)v12);
          if (v1345.i32[0])
            break;
          v42 += 16;
          if (v42 >= (unint64_t)v40)
            goto LABEL_2980;
        }
LABEL_2989:
        v1348 = (unsigned __int16 *)(v42 - 14);
LABEL_2990:
        v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
        v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
        v40 = (int16x8_t *)&v1348[v12.n128_u8[0]];
LABEL_2991:
        *v11 = v40;
LABEL_2992:
        if ((unint64_t)v40 < v24 && v40->u16[0] == (_DWORD)v35)
        {
          *((_BYTE *)a1 + 25) &= ~1u;
          a1[4] = v38;
          a1[6] = (uint64_t)v40->i64 + 2;
          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v40 - v38) >> 1);
          v1354 = 4;
          goto LABEL_2995;
        }
        JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v38, v35, a5, a6, a7, a8);
LABEL_3026:
        v1365 = *((_DWORD *)a1 + 30) - 1;
        v9 = *(_QWORD *)(a1[16] + 8 * v1365);
        *((_DWORD *)a1 + 30) = v1365;
LABEL_3312:
        v1529 = *((unsigned int *)a1 + 55);
        if ((_DWORD)v1529)
        {
          a3 = *(unsigned __int8 *)(v1529 + a1[26] - 1);
          *((_DWORD *)a1 + 55) = v1529 - 1;
          continue;
        }
        return v9;
      case 1:
        goto LABEL_1157;
      case 2:
        goto LABEL_1252;
      case 3:
        switch(*v10)
        {
          case 0:
LABEL_4078:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x2000000002;
            v1735 = "Could not parse value expression";
            goto LABEL_4024;
          case 1:
LABEL_4079:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token ']'";
            goto LABEL_4024;
          case 2:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            v1735 = "Unexpected token '{'";
            *(_QWORD *)v1726 = 0x1400000002;
            goto LABEL_4024;
          case 3:
LABEL_4085:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token '}'";
            goto LABEL_4024;
          case 4:
            v13 = *((_DWORD *)a1 + 7);
            v14 = v13 & 0x7FFFFFFF;
            if ((*((_BYTE *)a1 + 25) & 1) != 0)
            {
              if ((v13 & 0x7FFFFFFFu) >= 0xB)
              {
                v174 = *v1958;
                if (*v1958)
                {
                  v16 = WTF::fastCompactMalloc((WTF *)(v14 + 20));
                  v17 = (void *)(v16 + 20);
                  *(_DWORD *)v16 = 2;
                  *(_DWORD *)(v16 + 4) = v14;
                  *(_QWORD *)(v16 + 8) = v16 + 20;
                  *(_DWORD *)(v16 + 16) = 4;
                  v18 = v174;
                  v19 = v14;
LABEL_9:
                  memcpy(v17, v18, v19);
LABEL_277:
                  v1965 = *(double *)&v16;
                  v118 = JSC::jsNontrivialString(a2, (JSC::VM *)&v1965, a3, a4, a5, a6, a7, a8);
LABEL_278:
                  v9 = v118;
                  v175 = *(WTF::StringImpl **)&v1965;
                  v1965 = 0.0;
                  if (v175)
                  {
                    if (*(_DWORD *)v175 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v175, (WTF::AtomStringImpl *)a2, v119, v120, a5, a6, a7, a8);
                      WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
                    }
                    else
                    {
                      *(_DWORD *)v175 -= 2;
                    }
                  }
                  a4 = a1[6];
                  v95 = a1[7];
                  while (a4 < v95)
                  {
                    if (*(unsigned __int16 *)a4 > 0xFFu
                      || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                    {
                      break;
                    }
                    a4 += 2;
                    *v11 = a4;
                  }
                  if (a4 == v95)
                    goto LABEL_3346;
                  *v10 = 18;
                  v97 = *(unsigned __int16 *)a4;
                  if (v97 > 0xFF)
                    goto LABEL_335;
                  v98 = JSC::tokenTypesOfLatin1Characters[v97];
                  if (v98 <= 4)
                  {
                    if (v98 == 4)
                    {
                      v177 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v97 == 39)
                      {
                        v481 = v9;
                        if (!*((_BYTE *)a1 + 40))
                        {
LABEL_3946:
                          v1628 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1630 = v1628;
                          v12.n128_u64[0] = 0x2900000002;
                          *(_QWORD *)v1628 = 0x2900000002;
                          v1631 = "Single quotes (') are not allowed in JSON";
                          goto LABEL_3765;
                        }
                        v100 = a4 + 2;
                        *v11 = a4 + 2;
                      }
                      else
                      {
                        v100 = a4 + 2;
                        *v11 = a4 + 2;
                        if (!v177)
                        {
                          v178 = v95 - v100;
                          if ((uint64_t)(v95 - v100) <= -2)
                            goto LABEL_4442;
                          v102 = (int16x8_t *)((v178 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                          if ((unint64_t)v178 > 0xE)
                          {
                            v103 = a4 + 2;
                            if (v178 >= 15)
                            {
                              v104 = a4 + 16;
                              while (1)
                              {
                                v179 = *(int16x8_t *)(v104 - 14);
                                v180.i64[0] = 0x22002200220022;
                                v180.i64[1] = 0x22002200220022;
                                v181 = (int8x16_t)vceqq_s16(v179, v180);
                                v182.i64[0] = 0x5C005C005C005CLL;
                                v182.i64[1] = 0x5C005C005C005CLL;
                                v183.i64[0] = 0x20002000200020;
                                v183.i64[1] = 0x20002000200020;
                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v179, v182), (int8x16_t)vcgtq_u16(v183, (uint16x8_t)v179)), v181);
                                v181.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                if (v181.i32[0])
                                  goto LABEL_3299;
                                v104 += 16;
                                if (v104 >= (unint64_t)v102)
                                  goto LABEL_3295;
                              }
                            }
                            goto LABEL_3296;
                          }
                          if (v95 != v100)
                          {
                            v503 = 2 * (v178 >> 1);
                            v504 = (int16x8_t *)(a4 + 2);
                            do
                            {
                              v505 = v504->u16[0];
                              if (v505 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v505])
                                goto LABEL_3816;
                              v504 = (int16x8_t *)((char *)v504 + 2);
                              v503 -= 2;
                            }
                            while (v503);
                          }
LABEL_3301:
                          *v11 = v102;
                          goto LABEL_3302;
                        }
                        v481 = v9;
                      }
                      v102 = (int16x8_t *)v100;
                      if (v100 < v95)
                      {
                        while (1)
                        {
                          v484 = v102->u16[0];
                          if (v484 < 0x20)
                          {
                            if (v484 != 9)
                              goto LABEL_3870;
                          }
                          else if (v484 == (_DWORD)v97 || v484 > 0xFF || v484 == 92)
                          {
                            goto LABEL_3870;
                          }
                          v102 = (int16x8_t *)((char *)v102 + 2);
                          *v11 = v102;
                          if ((unint64_t)v102 >= v95)
                            goto LABEL_3870;
                        }
                      }
                      goto LABEL_3869;
                    }
                    goto LABEL_305;
                  }
                  if (v98 == 5)
                  {
                    if ((_DWORD)v97 == 102)
                    {
                      if ((uint64_t)(v95 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                        goto LABEL_3339;
                    }
                    else if ((_DWORD)v97 == 116)
                    {
                      if ((uint64_t)(v95 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                        goto LABEL_3344;
                    }
                    else if ((_DWORD)v97 == 110
                           && (uint64_t)(v95 - a4) >= 7
                           && *(_DWORD *)(a4 + 2) == 7078005
                           && *(_WORD *)(a4 + 6) == 108)
                    {
                      goto LABEL_3574;
                    }
                    *v1958 = (WTF::AtomStringImpl *)a4;
                    LODWORD(v465) = a4;
                    if (a4 < v95)
                    {
                      v465 = (unsigned __int16 *)a4;
                      do
                      {
                        v466 = *v465;
                        v468 = (v466 | 0x20u) - 97 >= 0x1A
                            && (v466 - 48) >= 0xA
                            && (v466 - 8204) >= 2;
                        if (v468 && v466 != 95 && v466 != 36)
                          break;
                        *v11 = ++v465;
                      }
                      while ((unint64_t)v465 < v95);
                    }
                    goto LABEL_3588;
                  }
                  if (v98 != 6)
                  {
                    if (v98 - 18 >= 2)
                      goto LABEL_305;
LABEL_335:
                    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                    v111 = *(_QWORD *)&v1965;
                    if (v1965 == 0.0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B2A898);
                    }
                    goto LABEL_3349;
                  }
                  v192 = 0;
                  if (a4 < v95 && (_DWORD)v97 == 45)
                  {
                    *v11 = a4 + 2;
                    v192 = 1;
                  }
                  v193 = (unsigned __int16 *)(a4 + 2 * v192);
                  if ((unint64_t)v193 < v95)
                  {
                    v194 = *v193;
                    if (v194 == 48)
                    {
                      v197 = v192 + 1;
                      goto LABEL_316;
                    }
                    if ((v194 - 49) <= 8)
                    {
                      v195 = v192 + 1;
                      v196 = 2 * v192 + 2;
                      do
                      {
                        v197 = v195;
                        if (a4 + v196 >= v95)
                          break;
                        ++v195;
                        v196 += 2;
                      }
                      while (*(unsigned __int16 *)(a4 + 2 * v197) - 48 < 0xA);
LABEL_316:
                      v198 = (unsigned __int16 *)(a4 + 2 * v197);
                      *v11 = v198;
                      if ((unint64_t)v198 < v95)
                      {
                        v199 = *v198;
                        if (v199 != 101 && v199 != 69)
                        {
                          if (v199 == 46)
                          {
                            v481 = v9;
                            *v11 = v198 + 1;
                            if ((unint64_t)(v198 + 1) >= v95 || v198[1] - 48 > 9)
                              goto LABEL_3764;
                            v492 = a4 + 2 * v197 + 4;
                            do
                            {
                              v198 = (unsigned __int16 *)v492;
                              if (v492 >= v95)
                                break;
                              v492 += 2;
                            }
                            while (*v198 - 48 < 0xA);
                            *v11 = v198;
                          }
                          else if (v197 <= 9)
                          {
                            *v10 = 6;
                            if ((_DWORD)v97 == 45)
                            {
                              if (v197 < 2)
                                goto LABEL_3730;
                              a4 += 2;
                            }
                            v140 = 0;
                            do
                            {
                              v200 = *(unsigned __int16 *)a4;
                              a4 += 2;
                              v140 = v200 + 10 * v140 - 48;
                            }
                            while (a4 < (unint64_t)v198);
LABEL_3332:
                            if ((_DWORD)v97 != 45)
                            {
                              v12.n128_f64[0] = (double)v140;
LABEL_3334:
                              *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                              goto LABEL_3311;
                            }
                            if (v140)
                            {
                              v12.n128_f64[0] = (double)-v140;
                              goto LABEL_3334;
                            }
LABEL_3730:
                            *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                            goto LABEL_3311;
                          }
                        }
                      }
                      v481 = v9;
                      if ((unint64_t)v198 >= v95 || (*v198 | 0x20) != 0x65)
                        goto LABEL_3702;
                      v493 = v198 + 1;
                      *v11 = v198 + 1;
                      if ((unint64_t)(v198 + 1) < v95)
                      {
                        v494 = *v493;
                        if (v494 == 45 || v494 == 43)
                        {
                          v493 = v198 + 2;
                          *v11 = v198 + 2;
                        }
                      }
                      if ((unint64_t)v493 < v95 && *v493 - 48 <= 9)
                      {
                        v495 = v493 + 1;
                        do
                        {
                          v198 = v495;
                          if ((unint64_t)v495 >= v95)
                            break;
                          ++v495;
                        }
                        while (*v198 - 48 < 0xA);
                        goto LABEL_3701;
                      }
                      goto LABEL_3704;
                    }
                  }
LABEL_3400:
                  v1565 = WTF::fastCompactMalloc((WTF *)0x20);
                  v111 = v1565;
                  *(_QWORD *)v1565 = 0xE00000002;
                  v1566 = "Invalid number";
LABEL_3401:
                  *(_QWORD *)(v1565 + 8) = v1566;
                  *(_DWORD *)(v1565 + 16) = 4;
LABEL_3349:
                  v1540 = *v1951;
                  *v1951 = (WTF::StringImpl *)v111;
                  if (v1540)
                  {
                    if (*(_DWORD *)v1540 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1540, (WTF::AtomStringImpl *)a2, v110, a4, a5, a6, a7, a8);
                      WTF::fastFree(v1541, v1542, v1543, v1544, v1545, v1546, v1547, v1548);
                    }
                    else
                    {
                      *(_DWORD *)v1540 -= 2;
                    }
                  }
                  goto LABEL_3311;
                }
LABEL_276:
                v16 = 0;
                goto LABEL_277;
              }
              JSC::Identifier::fromString(a2, *v1958, v13 & 0x7FFFFFFF, a4, a5, a6, a7, a8, (rlim_t *)&v1965);
              v117 = (JSC *)a2;
LABEL_168:
              v118 = JSC::jsString(v117, (JSC::VM *)&v1965, (const WTF::String *)a3, a4, a5, a6, a7, a8);
              goto LABEL_278;
            }
            if ((v13 & 0x7FFFFFFFu) >= 0xB)
            {
              v15 = *v1958;
              if (*v1958)
              {
                if (v14 > 0x7FFFFFEF)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B2A890);
                }
                v16 = WTF::fastCompactMalloc((WTF *)(2 * v14 + 20));
                v17 = (void *)(v16 + 20);
                *(_DWORD *)v16 = 2;
                *(_DWORD *)(v16 + 4) = v14;
                *(_QWORD *)(v16 + 8) = v16 + 20;
                *(_DWORD *)(v16 + 16) = 0;
                v18 = v15;
                v19 = 2 * v14;
                goto LABEL_9;
              }
              goto LABEL_276;
            }
            v113 = *v1958;
            if (v14 == 1)
            {
              v151 = *(unsigned __int16 *)v113;
              if (v151 <= 0xFF)
              {
                if (v1953[2313])
                {
                  v152 = *(_QWORD *)(a2 + 8 * v151 + 42216);
                  v115 = *(_QWORD *)(v152 + 8);
                  if ((v115 & 1) != 0)
                    v153 = 0;
                  else
                    v153 = *(_DWORD **)(v152 + 8);
                  *v153 += 2;
                }
                else
                {
                  LOBYTE(v1970[0]) = *(_WORD *)v113;
                  WTF::AtomStringImpl::add((uint64_t)v1970, 1uLL, a4, a5, a6, a7, a8, &v1965);
                  v115 = *(_QWORD *)&v1965;
                }
                goto LABEL_167;
              }
            }
            else if ((v13 & 0x7FFFFFFF) == 0)
            {
              v115 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
              v116 = WTF::StringImpl::s_emptyAtomString + 2;
              goto LABEL_166;
            }
            WTF::AtomStringImpl::add((uint64_t)v113, v13 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
            v115 = *(_QWORD *)&v1965;
            v116 = **(_DWORD **)&v1965;
            **(_DWORD **)&v1965 += 2;
            if (!v116)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v115, v114, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
              goto LABEL_167;
            }
LABEL_166:
            *(_DWORD *)v115 = v116;
LABEL_167:
            v1965 = *(double *)&v115;
            v117 = (JSC *)a2;
            goto LABEL_168;
          case 5:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1500000002;
            v1735 = "Unexpected identifier";
            goto LABEL_4024;
          case 6:
            v12.n128_u64[0] = (unint64_t)*v1958;
            if (((unint64_t)*v1958 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (v84 = (int)v12.n128_f64[0], v12.n128_f64[0] == (double)(int)v84)
              && ((_DWORD)v84 || (v12.n128_u64[0] & 0x8000000000000000) == 0))
            {
              v9 = v84 | 0xFFFE000000000000;
            }
            else
            {
              v9 = v12.n128_u64[0] + 0x2000000000000;
            }
            a4 = a1[6];
            v95 = a1[7];
            while (a4 < v95)
            {
              if (*(unsigned __int16 *)a4 > 0xFFu
                || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
              {
                break;
              }
              a4 += 2;
              *v11 = a4;
            }
            if (a4 == v95)
              goto LABEL_3346;
            *v10 = 18;
            v97 = *(unsigned __int16 *)a4;
            if (v97 > 0xFF)
              goto LABEL_149;
            v98 = JSC::tokenTypesOfLatin1Characters[v97];
            if (v98 <= 4)
            {
              if (v98 == 4)
              {
                v99 = *((unsigned __int8 *)a1 + 40);
                if ((_DWORD)v97 == 39)
                {
                  if (!*((_BYTE *)a1 + 40))
                    goto LABEL_3947;
                  v100 = a4 + 2;
                  *v11 = a4 + 2;
                }
                else
                {
                  v100 = a4 + 2;
                  *v11 = a4 + 2;
                  if (!v99)
                  {
                    v101 = v95 - v100;
                    if ((uint64_t)(v95 - v100) <= -2)
                      goto LABEL_4442;
                    v102 = (int16x8_t *)((v101 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                    if ((unint64_t)v101 > 0xE)
                    {
                      v103 = a4 + 2;
                      if (v101 >= 15)
                      {
                        v104 = a4 + 16;
                        do
                        {
                          v105 = *(int16x8_t *)(v104 - 14);
                          v106.i64[0] = 0x22002200220022;
                          v106.i64[1] = 0x22002200220022;
                          v107 = (int8x16_t)vceqq_s16(v105, v106);
                          v108.i64[0] = 0x5C005C005C005CLL;
                          v108.i64[1] = 0x5C005C005C005CLL;
                          v109.i64[0] = 0x20002000200020;
                          v109.i64[1] = 0x20002000200020;
                          v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v105, v108), (int8x16_t)vcgtq_u16(v109, (uint16x8_t)v105)), v107);
                          v107.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                          if (v107.i32[0])
                            goto LABEL_3299;
                          v104 += 16;
                        }
                        while (v104 < (unint64_t)v102);
LABEL_3295:
                        v103 = v104 - 14;
                      }
                      goto LABEL_3296;
                    }
                    if (v95 != v100)
                    {
                      v506 = 2 * (v101 >> 1);
                      v504 = (int16x8_t *)(a4 + 2);
                      while (1)
                      {
                        v507 = v504->u16[0];
                        if (v507 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v507])
                          goto LABEL_3816;
                        v504 = (int16x8_t *)((char *)v504 + 2);
                        v506 -= 2;
                        if (!v506)
                          goto LABEL_3301;
                      }
                    }
                    goto LABEL_3301;
                  }
                }
                v102 = (int16x8_t *)v100;
                if (v100 < v95)
                {
                  while (1)
                  {
                    v482 = v102->u16[0];
                    if (v482 < 0x20)
                    {
                      if (v482 != 9)
                        goto LABEL_3302;
                    }
                    else if (v482 == (_DWORD)v97 || v482 > 0xFF || v482 == 92)
                    {
                      goto LABEL_3302;
                    }
                    v102 = (int16x8_t *)((char *)v102 + 2);
                    *v11 = v102;
                    if ((unint64_t)v102 >= v95)
                      goto LABEL_3302;
                  }
                }
                goto LABEL_3868;
              }
LABEL_305:
              *v10 = v98;
LABEL_3310:
              *v11 = a4 + 2;
              goto LABEL_3311;
            }
            if (v98 == 5)
            {
              if ((_DWORD)v97 == 102)
              {
                if ((uint64_t)(v95 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                  goto LABEL_3339;
              }
              else if ((_DWORD)v97 == 116)
              {
                if ((uint64_t)(v95 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                  goto LABEL_3344;
              }
              else if ((_DWORD)v97 == 110
                     && (uint64_t)(v95 - a4) >= 7
                     && *(_DWORD *)(a4 + 2) == 7078005
                     && *(_WORD *)(a4 + 6) == 108)
              {
                goto LABEL_3574;
              }
              *v1958 = (WTF::AtomStringImpl *)a4;
              LODWORD(v465) = a4;
              if (a4 < v95)
              {
                v465 = (unsigned __int16 *)a4;
                do
                {
                  v469 = *v465;
                  v471 = (v469 | 0x20u) - 97 >= 0x1A
                      && (v469 - 48) >= 0xA
                      && (v469 - 8204) >= 2;
                  if (v471 && v469 != 95 && v469 != 36)
                    break;
                  *v11 = ++v465;
                }
                while ((unint64_t)v465 < v95);
              }
              goto LABEL_3588;
            }
            if (v98 != 6)
            {
              if (v98 - 18 < 2)
              {
LABEL_149:
                WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                v111 = *(_QWORD *)&v1965;
                if (v1965 == 0.0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B2A888);
                }
                goto LABEL_3349;
              }
              goto LABEL_305;
            }
            v132 = 0;
            if (a4 < v95 && (_DWORD)v97 == 45)
            {
              *v11 = a4 + 2;
              v132 = 1;
            }
            v133 = (unsigned __int16 *)(a4 + 2 * v132);
            if ((unint64_t)v133 >= v95)
              goto LABEL_3400;
            v134 = *v133;
            if (v134 == 48)
            {
              v137 = v132 + 1;
            }
            else
            {
              if ((v134 - 49) > 8)
                goto LABEL_3400;
              v135 = v132 + 1;
              v136 = 2 * v132 + 2;
              do
              {
                v137 = v135;
                if (a4 + v136 >= v95)
                  break;
                ++v135;
                v136 += 2;
              }
              while (*(unsigned __int16 *)(a4 + 2 * v137) - 48 < 0xA);
            }
            v138 = (unsigned __int16 *)(a4 + 2 * v137);
            *v11 = v138;
            if ((unint64_t)v138 < v95)
            {
              v139 = *v138;
              if (v139 != 101 && v139 != 69)
              {
                if (v139 == 46)
                {
                  *v11 = v138 + 1;
                  if ((unint64_t)(v138 + 1) >= v95 || v138[1] - 48 > 9)
                    goto LABEL_3769;
                  v496 = a4 + 2 * v137 + 4;
                  do
                  {
                    v138 = (unsigned __int16 *)v496;
                    if (v496 >= v95)
                      break;
                    v496 += 2;
                  }
                  while (*v138 - 48 < 0xA);
                  *v11 = v138;
                }
                else if (v137 <= 9)
                {
                  *v10 = 6;
                  if ((_DWORD)v97 == 45)
                  {
                    if (v137 < 2)
                      goto LABEL_3730;
                    a4 += 2;
                  }
                  v140 = 0;
                  do
                  {
                    v141 = *(unsigned __int16 *)a4;
                    a4 += 2;
                    v140 = v141 + 10 * v140 - 48;
                  }
                  while (a4 < (unint64_t)v138);
                  goto LABEL_3332;
                }
              }
            }
            if ((unint64_t)v138 >= v95 || (*v138 | 0x20) != 0x65)
              goto LABEL_3723;
            v497 = v138 + 1;
            *v11 = v138 + 1;
            if ((unint64_t)(v138 + 1) < v95)
            {
              v498 = *v497;
              if (v498 == 45 || v498 == 43)
              {
                v497 = v138 + 2;
                *v11 = v138 + 2;
              }
            }
            if ((unint64_t)v497 < v95 && *v497 - 48 <= 9)
            {
              v499 = v497 + 1;
              do
              {
                v138 = v499;
                if ((unint64_t)v499 >= v95)
                  break;
                ++v499;
              }
              while (*v138 - 48 < 0xA);
              goto LABEL_3722;
            }
LABEL_3725:
            v1565 = WTF::fastCompactMalloc((WTF *)0x20);
            v111 = v1565;
            v12.n128_u64[0] = 0x5D00000002;
            *(_QWORD *)v1565 = 0x5D00000002;
            v1566 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_3401;
          case 7:
LABEL_4083:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token ':'";
            goto LABEL_4024;
          case 8:
            a4 = a1[6];
            v64 = a1[7];
            while (a4 < v64)
            {
              if (*(unsigned __int16 *)a4 > 0xFFu
                || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
              {
                break;
              }
              a4 += 2;
              *v11 = a4;
            }
            if (a4 == v64)
            {
              v131 = 14;
              goto LABEL_222;
            }
            *v10 = 18;
            v66 = *(unsigned __int16 *)a4;
            if (v66 > 0xFF)
            {
LABEL_245:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
              v160 = *(_QWORD *)&v1965;
              if (v1965 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x198B2A880);
              }
              goto LABEL_246;
            }
            v67 = JSC::tokenTypesOfLatin1Characters[v66];
            if (v67 <= 4)
            {
              if (v67 == 4)
              {
                v68 = *((unsigned __int8 *)a1 + 40);
                if ((_DWORD)v66 != 39)
                {
                  a3 = a4 + 2;
                  *v11 = a4 + 2;
                  if (!v68)
                  {
                    v69 = v64 - a3;
                    if ((uint64_t)(v64 - a3) <= -2)
                      goto LABEL_4442;
                    v70 = (int16x8_t *)((v69 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                    if ((unint64_t)v69 <= 0xE)
                    {
                      if (v64 != a3)
                      {
                        v500 = 2 * (v69 >> 1);
                        v501 = (int16x8_t *)(a4 + 2);
                        while (1)
                        {
                          v502 = v501->u16[0];
                          if (v502 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v502])
                            break;
                          v501 = (int16x8_t *)((char *)v501 + 2);
                          v500 -= 2;
                          if (!v500)
                            goto LABEL_158;
                        }
                        v70 = v501;
                      }
                      goto LABEL_158;
                    }
                    v71 = a4 + 2;
                    if (v69 < 15)
                    {
LABEL_89:
                      if (v71 >= (unint64_t)v70)
                        goto LABEL_158;
                      v78 = (unsigned __int16 *)&v70[-1];
                      v79 = v70[-1];
                      v80.i64[0] = 0x22002200220022;
                      v80.i64[1] = 0x22002200220022;
                      v81 = (int8x16_t)vceqq_s16(v79, v80);
                      v82.i64[0] = 0x5C005C005C005CLL;
                      v82.i64[1] = 0x5C005C005C005CLL;
                      v83.i64[0] = 0x20002000200020;
                      v83.i64[1] = 0x20002000200020;
                      v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v79, v82), (int8x16_t)vcgtq_u16(v83, (uint16x8_t)v79)), v81);
                      v81.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                      if (!v81.i32[0])
                        goto LABEL_158;
                    }
                    else
                    {
                      v72 = a4 + 16;
                      while (1)
                      {
                        v73 = *(int16x8_t *)(v72 - 14);
                        v74.i64[0] = 0x22002200220022;
                        v74.i64[1] = 0x22002200220022;
                        v75 = (int8x16_t)vceqq_s16(v73, v74);
                        v76.i64[0] = 0x5C005C005C005CLL;
                        v76.i64[1] = 0x5C005C005C005CLL;
                        v77.i64[0] = 0x20002000200020;
                        v77.i64[1] = 0x20002000200020;
                        v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v73, v76), (int8x16_t)vcgtq_u16(v77, (uint16x8_t)v73)), v75);
                        v75.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                        if (v75.i32[0])
                          break;
                        v72 += 16;
                        if (v72 >= (unint64_t)v70)
                        {
                          v71 = v72 - 14;
                          goto LABEL_89;
                        }
                      }
                      v78 = (unsigned __int16 *)(v72 - 14);
                    }
                    v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                    v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                    v70 = (int16x8_t *)&v78[v12.n128_u8[0]];
LABEL_158:
                    *v11 = v70;
LABEL_159:
                    if ((unint64_t)v70 >= v64 || v70->u16[0] != (_DWORD)v66)
                    {
                      JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v66, a5, a6, a7, a8);
                      goto LABEL_223;
                    }
                    *((_BYTE *)a1 + 25) &= ~1u;
                    a1[4] = a3;
                    a1[6] = (uint64_t)v70->i64 + 2;
                    *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v70 - a3) >> 1);
                    v112 = 4;
                    goto LABEL_162;
                  }
                  v480 = v9;
LABEL_999:
                  v70 = (int16x8_t *)a3;
                  if (a3 < v64)
                  {
                    while (1)
                    {
                      v483 = v70->u16[0];
                      if (v483 < 0x20)
                      {
                        if (v483 != 9)
                          goto LABEL_1118;
                      }
                      else if (v483 == (_DWORD)v66 || v483 > 0xFF || v483 == 92)
                      {
                        goto LABEL_1118;
                      }
                      v70 = (int16x8_t *)((char *)v70 + 2);
                      *v11 = v70;
                      if ((unint64_t)v70 >= v64)
                        goto LABEL_1118;
                    }
                  }
                  v70 = (int16x8_t *)a3;
LABEL_1118:
                  v9 = v480;
                  goto LABEL_159;
                }
                v480 = v9;
                if (*((_BYTE *)a1 + 40))
                {
                  a3 = a4 + 2;
                  *v11 = a4 + 2;
                  goto LABEL_999;
                }
                v489 = WTF::fastCompactMalloc((WTF *)0x20);
                v490 = v489;
                v12.n128_u64[0] = 0x2900000002;
                *(_QWORD *)v489 = 0x2900000002;
                v491 = "Single quotes (') are not allowed in JSON";
                goto LABEL_1108;
              }
LABEL_145:
              *v10 = v67;
              *v11 = a4 + 2;
LABEL_223:
              v142 = 4;
              goto LABEL_1249;
            }
            if (v67 != 5)
            {
              if (v67 != 6)
              {
                if (v67 - 18 >= 2)
                  goto LABEL_145;
                goto LABEL_245;
              }
              v121 = 0;
              if (a4 < v64 && (_DWORD)v66 == 45)
              {
                *v11 = a4 + 2;
                v121 = 1;
              }
              v122 = (unsigned __int16 *)(a4 + 2 * v121);
              if ((unint64_t)v122 < v64)
              {
                v123 = *v122;
                if (v123 == 48)
                {
                  v126 = v121 + 1;
                  goto LABEL_178;
                }
                if ((v123 - 49) <= 8)
                {
                  v124 = v121 + 1;
                  v125 = 2 * v121 + 2;
                  do
                  {
                    v126 = v124;
                    if (a4 + v125 >= v64)
                      break;
                    ++v124;
                    v125 += 2;
                  }
                  while (*(unsigned __int16 *)(a4 + 2 * v126) - 48 < 0xA);
LABEL_178:
                  v127 = (unsigned __int16 *)(a4 + 2 * v126);
                  *v11 = v127;
                  if ((unint64_t)v127 < v64)
                  {
                    v128 = *v127;
                    if (v128 != 101 && v128 != 69)
                    {
                      if (v128 == 46)
                      {
                        v480 = v9;
                        *v11 = v127 + 1;
                        if ((unint64_t)(v127 + 1) >= v64 || v127[1] - 48 > 9)
                        {
                          v489 = WTF::fastCompactMalloc((WTF *)0x20);
                          v490 = v489;
                          *(_QWORD *)v489 = 0x2200000002;
                          v491 = "Invalid digits after decimal point";
                          goto LABEL_1108;
                        }
                        v485 = a4 + 2 * v126 + 4;
                        do
                        {
                          v127 = (unsigned __int16 *)v485;
                          if (v485 >= v64)
                            break;
                          v485 += 2;
                        }
                        while (*v127 - 48 < 0xA);
                        *v11 = v127;
                      }
                      else if (v126 <= 9)
                      {
                        *v10 = 6;
                        if ((_DWORD)v66 == 45)
                        {
                          if (v126 < 2)
                            goto LABEL_1112;
                          a4 += 2;
                        }
                        v129 = 0;
                        do
                        {
                          v130 = *(unsigned __int16 *)a4;
                          a4 += 2;
                          v129 = v130 + 10 * v129 - 48;
                        }
                        while (a4 < (unint64_t)v127);
                        if ((_DWORD)v66 != 45)
                        {
                          v12.n128_f64[0] = (double)v129;
LABEL_188:
                          *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                          goto LABEL_223;
                        }
                        if (v129)
                        {
                          v12.n128_f64[0] = (double)-v129;
                          goto LABEL_188;
                        }
LABEL_1112:
                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                        goto LABEL_223;
                      }
                    }
                  }
                  v480 = v9;
                  if ((unint64_t)v127 >= v64 || (*v127 | 0x20) != 0x65)
                  {
LABEL_1039:
                    *v10 = 6;
                    if ((uint64_t)((uint64_t)v127 - a4) <= -2)
                      goto LABEL_4442;
                    v1965 = 0.0;
                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v127, &v1965, 0x2E00000005);
                    v12.n128_f64[0] = v1965;
                    *(double *)v1958 = v1965;
                    goto LABEL_1111;
                  }
                  v486 = v127 + 1;
                  *v11 = v127 + 1;
                  if ((unint64_t)(v127 + 1) < v64)
                  {
                    v487 = *v486;
                    if (v487 == 45 || v487 == 43)
                    {
                      v486 = v127 + 2;
                      *v11 = v127 + 2;
                    }
                  }
                  if ((unint64_t)v486 < v64 && *v486 - 48 <= 9)
                  {
                    v488 = v486 + 1;
                    do
                    {
                      v127 = v488;
                      if ((unint64_t)v488 >= v64)
                        break;
                      ++v488;
                    }
                    while (*v127 - 48 < 0xA);
                    *v11 = v127;
                    goto LABEL_1039;
                  }
                  v489 = WTF::fastCompactMalloc((WTF *)0x20);
                  v490 = v489;
                  v12.n128_u64[0] = 0x5D00000002;
                  *(_QWORD *)v489 = 0x5D00000002;
                  v491 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1108:
                  *(_QWORD *)(v489 + 8) = v491;
                  *(_DWORD *)(v489 + 16) = 4;
                  v516 = *v1951;
                  *v1951 = (WTF::StringImpl *)v490;
                  v9 = v480;
                  if (!v516)
                    goto LABEL_223;
                  if (*(_DWORD *)v516 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v516, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v517, v518, v519, v520, v521, v522, v523, v524);
                  }
                  else
                  {
                    *(_DWORD *)v516 -= 2;
                  }
LABEL_1111:
                  v9 = v480;
                  goto LABEL_223;
                }
              }
              v160 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v160 = 0xE00000002;
              *(_QWORD *)(v160 + 8) = "Invalid number";
              *(_DWORD *)(v160 + 16) = 4;
LABEL_246:
              v161 = *v1951;
              *v1951 = (WTF::StringImpl *)v160;
              if (v161)
              {
                if (*(_DWORD *)v161 == 2)
                {
                  WTF::StringImpl::~StringImpl(v161, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
                }
                else
                {
                  *(_DWORD *)v161 -= 2;
                }
              }
              goto LABEL_223;
            }
            if ((_DWORD)v66 == 102)
            {
              if ((uint64_t)(v64 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
              {
                *v11 = a4 + 10;
                v131 = 12;
LABEL_222:
                *v10 = v131;
                goto LABEL_223;
              }
            }
            else if ((_DWORD)v66 == 116)
            {
              if ((uint64_t)(v64 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
              {
                *v11 = a4 + 8;
                v131 = 11;
                goto LABEL_222;
              }
            }
            else if ((_DWORD)v66 == 110
                   && (uint64_t)(v64 - a4) >= 7
                   && *(_DWORD *)(a4 + 2) == 7078005
                   && *(_WORD *)(a4 + 6) == 108)
            {
              *v11 = a4 + 8;
              v131 = 13;
              goto LABEL_222;
            }
            *v1958 = (WTF::AtomStringImpl *)a4;
            LODWORD(v461) = a4;
            if (a4 < v64)
            {
              v461 = (unsigned __int16 *)a4;
              do
              {
                v462 = *v461;
                v464 = (v462 | 0x20u) - 97 >= 0x1A
                    && (v462 - 48) >= 0xA
                    && (v462 - 8204) >= 2;
                if (v464 && v462 != 95 && v462 != 36)
                  break;
                *v11 = ++v461;
              }
              while ((unint64_t)v461 < v64);
            }
            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v461 - a4) >> 1);
            v112 = 5;
LABEL_162:
            *((_BYTE *)a1 + 24) = v112;
            goto LABEL_223;
          case 9:
LABEL_4086:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token ')'";
            goto LABEL_4024;
          case 10:
LABEL_4080:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token ','";
            goto LABEL_4024;
          case 11:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            v1763 = 0x1700000002;
            v1735 = "Unexpected token 'true'";
            goto LABEL_4094;
          case 12:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            v1763 = 0x1800000002;
            v1735 = "Unexpected token 'false'";
            goto LABEL_4094;
          case 13:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            v1763 = 0x1700000002;
            v1735 = "Unexpected token 'null'";
            goto LABEL_4094;
          case 14:
LABEL_4081:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0xE00000002;
            v1735 = "Unexpected EOF";
            goto LABEL_4024;
          case 15:
LABEL_4087:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token '.'";
            goto LABEL_4024;
          case 16:
LABEL_4082:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token '='";
            goto LABEL_4024;
          case 17:
LABEL_4084:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            *(_QWORD *)v1726 = 0x1400000002;
            v1735 = "Unexpected token ';'";
            goto LABEL_4024;
          default:
            v1726 = WTF::fastCompactMalloc((WTF *)0x20);
            v1734 = (WTF::StringImpl *)v1726;
            v1763 = 0x1900000002;
            v1735 = "Could not parse statement";
            goto LABEL_4094;
        }
      case 4:
        if (*v10 != 9)
          return 0;
        v1764 = (unsigned __int16 *)a1[6];
        v1765 = a1[7];
        while ((unint64_t)v1764 < v1765)
        {
          if (*v1764 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v1764] != 19)
            break;
          *v11 = ++v1764;
        }
        if (v1764 == (unsigned __int16 *)v1765)
        {
          *v10 = 14;
          return v9;
        }
        *v10 = 18;
        v1779 = *v1764;
        if (v1779 > 0xFF)
          goto LABEL_4223;
        v1780 = JSC::tokenTypesOfLatin1Characters[v1779];
        if (v1780 <= 4)
        {
          if (v1780 == 4)
          {
            v1781 = *((unsigned __int8 *)a1 + 40);
            if ((_DWORD)v1779 == 39)
            {
              if (!*((_BYTE *)a1 + 40))
              {
                v1931 = WTF::fastCompactMalloc((WTF *)0x20);
                v1870 = v1931;
                *(_QWORD *)v1931 = 0x2900000002;
                v1932 = "Single quotes (') are not allowed in JSON";
                goto LABEL_4455;
              }
              v1782 = (unint64_t)(v1764 + 1);
              *v11 = v1764 + 1;
            }
            else
            {
              v1782 = (unint64_t)(v1764 + 1);
              *v11 = v1764 + 1;
              if (!v1781)
              {
                v1783 = v1765 - v1782;
                if ((uint64_t)(v1765 - v1782) <= -2)
                  goto LABEL_4442;
                v1784 = (int16x8_t *)((char *)v1764 + (v1783 & 0xFFFFFFFFFFFFFFFELL) + 2);
                if ((unint64_t)v1783 <= 0xE)
                {
                  if (v1765 != v1782)
                  {
                    v1942 = 2 * (v1783 >> 1);
                    v1943 = (int16x8_t *)(v1764 + 1);
                    while (1)
                    {
                      v1944 = v1943->u16[0];
                      if (v1944 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1944])
                        break;
                      v1943 = (int16x8_t *)((char *)v1943 + 2);
                      v1942 -= 2;
                      if (!v1942)
                        goto LABEL_4161;
                    }
                    v1784 = v1943;
                  }
                  goto LABEL_4161;
                }
                v1785 = v1764 + 1;
                if (v1783 < 15)
                {
LABEL_4142:
                  if (v1785 >= (unsigned __int16 *)v1784)
                    goto LABEL_4161;
                  v1793 = (unsigned __int16 *)&v1784[-1];
                  v1794 = v1784[-1];
                  v1795.i64[0] = 0x22002200220022;
                  v1795.i64[1] = 0x22002200220022;
                  v1796 = (int8x16_t)vceqq_s16(v1794, v1795);
                  v1797.i64[0] = 0x5C005C005C005CLL;
                  v1797.i64[1] = 0x5C005C005C005CLL;
                  v1798.i64[0] = 0x20002000200020;
                  v1798.i64[1] = 0x20002000200020;
                  v1792 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1794, v1797), (int8x16_t)vcgtq_u16(v1798, (uint16x8_t)v1794)), v1796);
                  v1796.i16[0] = vmaxvq_u16((uint16x8_t)v1792);
                  if (!v1796.i32[0])
                    goto LABEL_4161;
                }
                else
                {
                  v1786 = v1764 + 8;
                  v1787.i64[0] = 0x22002200220022;
                  v1787.i64[1] = 0x22002200220022;
                  v1788.i64[0] = 0x5C005C005C005CLL;
                  v1788.i64[1] = 0x5C005C005C005CLL;
                  v1789.i64[0] = 0x20002000200020;
                  v1789.i64[1] = 0x20002000200020;
                  while (1)
                  {
                    v1790 = *(int16x8_t *)(v1786 - 7);
                    v1791 = (int8x16_t)vceqq_s16(v1790, v1787);
                    v1792 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1790, v1788), (int8x16_t)vcgtq_u16(v1789, (uint16x8_t)v1790)), v1791);
                    v1791.i16[0] = vmaxvq_u16((uint16x8_t)v1792);
                    if (v1791.i32[0])
                      break;
                    v1786 += 8;
                    if (v1786 >= (unsigned __int16 *)v1784)
                    {
                      v1785 = v1786 - 7;
                      goto LABEL_4142;
                    }
                  }
                  v1793 = v1786 - 7;
                }
                v1784 = (int16x8_t *)&v1793[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v1792))];
LABEL_4161:
                *v11 = v1784;
LABEL_4162:
                if ((unint64_t)v1784 < v1765 && v1784->u16[0] == (_DWORD)v1779)
                {
                  *((_BYTE *)a1 + 25) &= ~1u;
                  a1[4] = v1782;
                  a1[6] = (uint64_t)v1784->i64 + 2;
                  *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1784 - v1782) >> 1);
                  v1799 = 4;
LABEL_4165:
                  *((_BYTE *)a1 + 24) = v1799;
                  goto LABEL_4206;
                }
                v1780 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1782, v1779, a5, a6, a7, a8);
LABEL_4156:
                v1961 = v9;
                if (v1780 != 14)
                  goto LABEL_4206;
                return v1961;
              }
            }
            v1784 = (int16x8_t *)v1782;
            if (v1782 < v1765)
            {
              while (1)
              {
                v1937 = v1784->u16[0];
                if (v1937 < 0x20)
                {
                  if (v1937 != 9)
                    goto LABEL_4162;
                }
                else if (v1937 == (_DWORD)v1779 || v1937 > 0xFF || v1937 == 92)
                {
                  goto LABEL_4162;
                }
                v1784 = (int16x8_t *)((char *)v1784 + 2);
                *v11 = v1784;
                if ((unint64_t)v1784 >= v1765)
                  goto LABEL_4162;
              }
            }
            goto LABEL_4162;
          }
LABEL_4155:
          *v10 = v1780;
          *v11 = v1764 + 1;
          goto LABEL_4156;
        }
        if (v1780 != 5)
        {
          if (v1780 != 6)
          {
            if (v1780 - 18 < 2)
            {
LABEL_4223:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, v1764, 1uLL, 39);
              v1870 = *(_QWORD *)&v1965;
              if (v1965 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x198B2AD70);
              }
              goto LABEL_4224;
            }
            goto LABEL_4155;
          }
          v1809 = 0;
          if ((unint64_t)v1764 < v1765 && (_DWORD)v1779 == 45)
          {
            *v11 = v1764 + 1;
            v1809 = 1;
          }
          v1810 = &v1764[v1809];
          if ((unint64_t)v1810 < v1765)
          {
            v1811 = *v1810;
            if (v1811 == 48)
            {
              v1814 = v1809 + 1;
              goto LABEL_4180;
            }
            if ((v1811 - 49) <= 8)
            {
              v1812 = v1809 + 1;
              v1813 = 2 * v1809 + 2;
              do
              {
                v1814 = v1812;
                if ((unint64_t)v1764 + v1813 >= v1765)
                  break;
                ++v1812;
                v1813 += 2;
              }
              while (v1764[v1814] - 48 < 0xA);
LABEL_4180:
              v1815 = &v1764[v1814];
              *v11 = v1815;
              if ((unint64_t)v1815 < v1765)
              {
                v1816 = *v1815;
                if (v1816 != 101 && v1816 != 69)
                {
                  if (v1816 == 46)
                  {
                    *v11 = v1815 + 1;
                    if ((unint64_t)(v1815 + 1) >= v1765 || v1815[1] - 48 > 9)
                    {
                      v1931 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1870 = v1931;
                      *(_QWORD *)v1931 = 0x2200000002;
                      v1932 = "Invalid digits after decimal point";
                      goto LABEL_4455;
                    }
                    v1938 = (unint64_t)&v1764[v1814 + 2];
                    do
                    {
                      v1815 = (unsigned __int16 *)v1938;
                      if (v1938 >= v1765)
                        break;
                      v1938 += 2;
                    }
                    while (*v1815 - 48 < 0xA);
                    *v11 = v1815;
                  }
                  else if (v1814 <= 9)
                  {
                    *v10 = 6;
                    if ((_DWORD)v1779 == 45)
                    {
                      if (v1814 < 2)
                        goto LABEL_4456;
                      ++v1764;
                    }
                    v1817 = 0;
                    do
                    {
                      v1818 = *v1764++;
                      v1817 = v1818 + 10 * v1817 - 48;
                    }
                    while (v1764 < v1815);
                    if ((_DWORD)v1779 != 45)
                    {
                      v1819 = (double)v1817;
LABEL_4190:
                      *(double *)v1958 = v1819;
                      goto LABEL_4206;
                    }
                    if (v1817)
                    {
                      v1819 = (double)-v1817;
                      goto LABEL_4190;
                    }
LABEL_4456:
                    *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                    goto LABEL_4206;
                  }
                }
              }
              if ((unint64_t)v1815 < v1765 && (*v1815 | 0x20) == 0x65)
              {
                v1939 = v1815 + 1;
                *v11 = v1815 + 1;
                if ((unint64_t)(v1815 + 1) < v1765)
                {
                  v1940 = *v1939;
                  if (v1940 == 45 || v1940 == 43)
                  {
                    v1939 = v1815 + 2;
                    *v11 = v1815 + 2;
                  }
                }
                if ((unint64_t)v1939 >= v1765 || *v1939 - 48 > 9)
                  goto LABEL_4443;
                v1941 = v1939 + 1;
                do
                {
                  v1815 = v1941;
                  if ((unint64_t)v1941 >= v1765)
                    break;
                  ++v1941;
                }
                while (*v1815 - 48 < 0xA);
                *v11 = v1815;
              }
              *v10 = 6;
              if ((char *)v1815 - (char *)v1764 <= -2)
                goto LABEL_4442;
              v1965 = 0.0;
              fast_float::from_chars_advanced<double,char16_t>(v1764, v1815, &v1965, 0x2E00000005);
              v1819 = v1965;
              goto LABEL_4190;
            }
          }
          v1931 = WTF::fastCompactMalloc((WTF *)0x20);
          v1870 = v1931;
          *(_QWORD *)v1931 = 0xE00000002;
          v1932 = "Invalid number";
          goto LABEL_4455;
        }
        if ((_DWORD)v1779 == 102)
        {
          if ((uint64_t)(v1765 - (_QWORD)v1764) >= 9
            && *(_DWORD *)(v1764 + 1) == 7077985
            && *(_DWORD *)(v1764 + 3) == 6619251)
          {
            *v11 = v1764 + 5;
            v1820 = 12;
LABEL_4205:
            *v10 = v1820;
            goto LABEL_4206;
          }
        }
        else if ((_DWORD)v1779 == 116)
        {
          if ((uint64_t)(v1765 - (_QWORD)v1764) >= 7 && *(_DWORD *)(v1764 + 1) == 7667826 && v1764[3] == 101)
          {
            *v11 = v1764 + 4;
            v1820 = 11;
            goto LABEL_4205;
          }
        }
        else if ((_DWORD)v1779 == 110
               && (uint64_t)(v1765 - (_QWORD)v1764) >= 7
               && *(_DWORD *)(v1764 + 1) == 7078005
               && v1764[3] == 108)
        {
          *v11 = v1764 + 4;
          v1820 = 13;
          goto LABEL_4205;
        }
        *v1958 = (WTF::AtomStringImpl *)v1764;
        LODWORD(v1933) = (_DWORD)v1764;
        if ((unint64_t)v1764 < v1765)
        {
          v1933 = v1764;
          do
          {
            v1934 = *v1933;
            v1936 = (v1934 | 0x20u) - 97 >= 0x1A
                 && (v1934 - 48) >= 0xA
                 && (v1934 - 8204) >= 2;
            if (v1936 && v1934 != 95 && v1934 != 36)
              break;
            *v11 = ++v1933;
          }
          while ((unint64_t)v1933 < v1765);
        }
        *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1933 - (_DWORD)v1764) >> 1);
        v1799 = 5;
        goto LABEL_4165;
      case 5:
        goto LABEL_467;
      case 6:
        v1970[0] = 0;
        v1970[0] = *(int **)(a1[16] + 8 * (*((_DWORD *)a1 + 30) - 1));
        v26 = *((unsigned int *)a1 + 63) - 1;
        v27 = a1[30];
        v28 = *(_QWORD *)(v27 + 8 * v26);
        *(_QWORD *)(v27 + 8 * v26) = 0;
        v29 = a1[30];
        v30 = *(WTF::StringImpl **)(v29 + 8 * v26);
        *(_QWORD *)(v29 + 8 * v26) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
          {
            WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
          }
          else
          {
            *(_DWORD *)v30 -= 2;
          }
        }
        *((_DWORD *)a1 + 63) = v26;
        if (*((_BYTE *)a1 + 88) && v28 == *(_QWORD *)(*(_QWORD *)v1953 + 16))
        {
          WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add(v1952, (uint64_t *)v1970, a3, a4, a5, a6, a7, a8, (uint64_t)&v1965);
          if (!(_BYTE)v1967)
          {
            v157 = WTF::fastCompactMalloc((WTF *)0x20);
            v158 = (WTF::StringImpl *)v157;
            *(_QWORD *)v157 = 0x2800000002;
            v159 = "Attempted to redefine __proto__ property";
            goto LABEL_654;
          }
          v55 = a1[1];
          if (v55)
            LOBYTE(v55) = *(_BYTE *)(*(_QWORD *)(v55 + 64) + 68) & 1;
          v1965 = 0.0;
          v1966 = v1970[0];
          v1967 = -1;
          LOBYTE(v1968) = v1968 & 0xF8 | v55;
          *(_WORD *)((char *)&v1968 + 1) = 0;
          HIBYTE(v1968) = 1;
          v1969 = 0;
          v1964 = (unint64_t)v1970[0];
          if (((unint64_t)v1970[0] & 0xFFFE000000000002) != 0)
            JSC::JSValue::putToPrimitive((JSC::JSValue *)&v1964, (JSC::JSGlobalObject *)*a1, v28, v9, (uint64_t)&v1965, v52, v53, v54);
          else
            (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v1970[0] & 0xFFFFFFFE) + 0x4C) + 0x48))();
          goto LABEL_391;
        }
        if (!v28)
          goto LABEL_33;
        v31 = *(_DWORD *)(v28 + 16);
        if ((v31 & 0x20) != 0)
          goto LABEL_33;
        v32 = *(_BYTE **)(v28 + 8);
        v33 = *(unsigned int *)(v28 + 4);
        if ((v31 & 4) != 0)
        {
          if (!(_DWORD)v33)
            goto LABEL_33;
          v34 = (JSC::VM *)(*v32 - 48);
          if (v34 > 9)
            goto LABEL_33;
          if (v33 >= 2 && *v32 == 48)
            goto LABEL_33;
          v210 = v32 + 1;
          v211 = v33 - 1;
          while (v211)
          {
            if (v34 <= 0x19999999)
            {
              v212 = *v210 - 48;
              if (v212 <= 9)
              {
                v172 = __CFADD__(v212, 10 * (_DWORD)v34);
                v34 = (JSC::VM *)(v212 + 10 * (_DWORD)v34);
                ++v210;
                --v211;
                if (!v172)
                  continue;
              }
            }
            goto LABEL_33;
          }
        }
        else
        {
          if (!(_DWORD)v33)
            goto LABEL_33;
          v34 = (JSC::VM *)(*(unsigned __int16 *)v32 - 48);
          if (v34 > 9)
            goto LABEL_33;
          if (*(_WORD *)v32 == 48 && v33 > 1)
            goto LABEL_33;
          v49 = (unsigned __int16 *)(v32 + 2);
          v50 = v33 - 1;
          while (v50)
          {
            if (v34 <= 0x19999999)
            {
              v51 = *v49 - 48;
              if (v51 <= 9)
              {
                v172 = __CFADD__(v51, 10 * (_DWORD)v34);
                v34 = (JSC::VM *)(v51 + 10 * (_DWORD)v34);
                ++v49;
                --v50;
                if (!v172)
                  continue;
              }
            }
            goto LABEL_33;
          }
        }
        if ((_DWORD)v34 != -1)
        {
          JSC::JSObject::putDirectIndex((unint64_t)v1970[0], *a1, v34, v9, a5, a6, a7, a8, (int32x4_t)v12);
LABEL_391:
          if (*(_DWORD *)(a2 + 80))
          {
            v363 = *(_DWORD *)(a2 + 80);
            if ((v363 & 0x27) != 0 && (v363 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v1950, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(a2 + 16))
              goto LABEL_669;
          }
          goto LABEL_392;
        }
LABEL_33:
        v1965 = 0.0;
        v1966 = v1970[0];
        v1967 = -1;
        v12.n128_u64[0] = 0x100000001000000;
        v1968 = 0x1000000;
        v1969 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v1970[0], a2, v28, v9, 0, (uint64_t)&v1965, a7, a8, v12);
LABEL_392:
        v213 = *v10;
        if (v213 == 10)
        {
          v214 = 19;
          if (!v28)
            goto LABEL_465;
          goto LABEL_463;
        }
        if (v213 == 3)
        {
          a4 = a1[6];
          v215 = a1[7];
          while (a4 < v215)
          {
            if (*(unsigned __int16 *)a4 > 0xFFu
              || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
            {
              break;
            }
            a4 += 2;
            *v11 = a4;
          }
          if (a4 == v215)
          {
            v246 = 14;
            goto LABEL_461;
          }
          *v10 = 18;
          v217 = *(unsigned __int16 *)a4;
          if (v217 > 0xFF)
            goto LABEL_649;
          v218 = JSC::tokenTypesOfLatin1Characters[v217];
          if (v218 <= 4)
          {
            if (v218 == 4)
            {
              v219 = *((unsigned __int8 *)a1 + 40);
              if ((_DWORD)v217 != 39)
              {
                a3 = a4 + 2;
                *v11 = a4 + 2;
                if (!v219)
                {
                  v220 = v215 - a3;
                  if ((uint64_t)(v215 - a3) <= -2)
                    goto LABEL_4442;
                  v221 = (int16x8_t *)((v220 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                  if ((unint64_t)v220 <= 0xE)
                  {
                    if (v215 != a3)
                    {
                      v433 = 2 * (v220 >> 1);
                      v434 = (int16x8_t *)(a4 + 2);
                      while (1)
                      {
                        v435 = v434->u16[0];
                        if (v435 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v435])
                          break;
                        v434 = (int16x8_t *)((char *)v434 + 2);
                        v433 -= 2;
                        if (!v433)
                          goto LABEL_426;
                      }
                      v221 = v434;
                    }
                    goto LABEL_426;
                  }
                  v222 = a4 + 2;
                  if (v220 < 15)
                  {
LABEL_417:
                    if (v222 >= (unint64_t)v221)
                      goto LABEL_426;
                    v229 = (unsigned __int16 *)&v221[-1];
                    v230 = v221[-1];
                    v231.i64[0] = 0x22002200220022;
                    v231.i64[1] = 0x22002200220022;
                    v232 = (int8x16_t)vceqq_s16(v230, v231);
                    v233.i64[0] = 0x5C005C005C005CLL;
                    v233.i64[1] = 0x5C005C005C005CLL;
                    v234.i64[0] = 0x20002000200020;
                    v234.i64[1] = 0x20002000200020;
                    v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v230, v233), (int8x16_t)vcgtq_u16(v234, (uint16x8_t)v230)), v232);
                    v232.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                    if (!v232.i32[0])
                      goto LABEL_426;
                  }
                  else
                  {
                    v223 = a4 + 16;
                    while (1)
                    {
                      v224 = *(int16x8_t *)(v223 - 14);
                      v225.i64[0] = 0x22002200220022;
                      v225.i64[1] = 0x22002200220022;
                      v226 = (int8x16_t)vceqq_s16(v224, v225);
                      v227.i64[0] = 0x5C005C005C005CLL;
                      v227.i64[1] = 0x5C005C005C005CLL;
                      v228.i64[0] = 0x20002000200020;
                      v228.i64[1] = 0x20002000200020;
                      v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v224, v227), (int8x16_t)vcgtq_u16(v228, (uint16x8_t)v224)), v226);
                      v226.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                      if (v226.i32[0])
                        break;
                      v223 += 16;
                      if (v223 >= (unint64_t)v221)
                      {
                        v222 = v223 - 14;
                        goto LABEL_417;
                      }
                    }
                    v229 = (unsigned __int16 *)(v223 - 14);
                  }
                  v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                  v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                  v221 = (int16x8_t *)&v229[v12.n128_u8[0]];
LABEL_426:
                  *v11 = v221;
LABEL_427:
                  if ((unint64_t)v221 < v215 && v221->u16[0] == (_DWORD)v217)
                  {
                    *((_BYTE *)a1 + 25) &= ~1u;
                    a1[4] = a3;
                    a1[6] = (uint64_t)v221->i64 + 2;
                    *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v221 - a3) >> 1);
                    v235 = 4;
LABEL_430:
                    *((_BYTE *)a1 + 24) = v235;
                    goto LABEL_462;
                  }
                  JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v217, a5, a6, a7, a8);
LABEL_462:
                  v247 = *((_DWORD *)a1 + 30) - 1;
                  v9 = *(_QWORD *)(a1[16] + 8 * v247);
                  *((_DWORD *)a1 + 30) = v247;
                  v214 = 4;
                  if (!v28)
                    goto LABEL_465;
LABEL_463:
                  if (*(_DWORD *)v28 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v28, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
                  }
                  else
                  {
                    *(_DWORD *)v28 -= 2;
                  }
LABEL_465:
                  if (v214 == 4)
                    goto LABEL_3312;
                  if (v214 != 19)
                    return v1961;
LABEL_467:
                  v248 = (unsigned __int16 *)a1[6];
                  v249 = a1[7];
                  while ((unint64_t)v248 < v249)
                  {
                    if (*v248 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v248] != 19)
                      break;
                    *v11 = ++v248;
                  }
                  if (v248 == (unsigned __int16 *)v249)
                  {
                    v1762 = 14;
                    goto LABEL_4077;
                  }
                  *v10 = 18;
                  v251 = *v248;
                  if (v251 > 0xFF)
                  {
LABEL_4196:
                    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, v248, 1uLL, 39);
                    v1828 = *(_QWORD *)&v1965;
                    if (v1965 == 0.0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B2AC80);
                    }
                    goto LABEL_4197;
                  }
                  v252 = JSC::tokenTypesOfLatin1Characters[v251];
                  if (v252 <= 4)
                  {
                    if (v252 == 4)
                    {
                      v253 = *((unsigned __int8 *)a1 + 40);
                      if ((_DWORD)v251 != 39)
                      {
                        a3 = (unint64_t)(v248 + 1);
                        *v11 = v248 + 1;
                        if (!v253)
                        {
                          v254 = v249 - a3;
                          if ((uint64_t)(v249 - a3) <= -2)
                            goto LABEL_4442;
                          v255 = (int16x8_t *)((char *)v248 + (v254 & 0xFFFFFFFFFFFFFFFELL) + 2);
                          if ((unint64_t)v254 <= 0xE)
                          {
                            if (v249 != a3)
                            {
                              v400 = 2 * (v254 >> 1);
                              v401 = (int16x8_t *)(v248 + 1);
                              while (1)
                              {
                                v402 = v401->u16[0];
                                if (v402 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v402])
                                  break;
                                v401 = (int16x8_t *)((char *)v401 + 2);
                                v400 -= 2;
                                if (!v400)
                                  goto LABEL_499;
                              }
                              v255 = v401;
                            }
                            goto LABEL_499;
                          }
                          v256 = v248 + 1;
                          if (v254 < 15)
                          {
LABEL_488:
                            if (v256 >= (unsigned __int16 *)v255)
                              goto LABEL_499;
                            v263 = (unsigned __int16 *)&v255[-1];
                            v264 = v255[-1];
                            v265.i64[0] = 0x22002200220022;
                            v265.i64[1] = 0x22002200220022;
                            v266 = (int8x16_t)vceqq_s16(v264, v265);
                            v267.i64[0] = 0x5C005C005C005CLL;
                            v267.i64[1] = 0x5C005C005C005CLL;
                            v268.i64[0] = 0x20002000200020;
                            v268.i64[1] = 0x20002000200020;
                            v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v264, v267), (int8x16_t)vcgtq_u16(v268, (uint16x8_t)v264)), v266);
                            v266.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                            if (!v266.i32[0])
                              goto LABEL_499;
                          }
                          else
                          {
                            v257 = v248 + 8;
                            while (1)
                            {
                              v258 = *(int16x8_t *)(v257 - 7);
                              v259.i64[0] = 0x22002200220022;
                              v259.i64[1] = 0x22002200220022;
                              v260 = (int8x16_t)vceqq_s16(v258, v259);
                              v261.i64[0] = 0x5C005C005C005CLL;
                              v261.i64[1] = 0x5C005C005C005CLL;
                              v262.i64[0] = 0x20002000200020;
                              v262.i64[1] = 0x20002000200020;
                              v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v258, v261), (int8x16_t)vcgtq_u16(v262, (uint16x8_t)v258)), v260);
                              v260.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                              if (v260.i32[0])
                                break;
                              v257 += 8;
                              if (v257 >= (unsigned __int16 *)v255)
                              {
                                v256 = v257 - 7;
                                goto LABEL_488;
                              }
                            }
                            v263 = v257 - 7;
                          }
                          v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                          v255 = (int16x8_t *)&v263[v12.n128_u8[0]];
LABEL_499:
                          *v11 = v255;
                          goto LABEL_500;
                        }
LABEL_706:
                        v255 = (int16x8_t *)a3;
                        if (a3 < v249)
                        {
                          while (1)
                          {
                            v399 = v255->u16[0];
                            if (v399 < 0x20)
                            {
                              if (v399 != 9)
                                goto LABEL_500;
                            }
                            else if (v399 == (_DWORD)v251 || v399 > 0xFF || v399 == 92)
                            {
                              goto LABEL_500;
                            }
                            v255 = (int16x8_t *)((char *)v255 + 2);
                            *v11 = v255;
                            if ((unint64_t)v255 >= v249)
                              goto LABEL_500;
                          }
                        }
                        v255 = (int16x8_t *)a3;
LABEL_500:
                        v1947 = v9;
                        if ((unint64_t)v255 < v249 && v255->u16[0] == (_DWORD)v251)
                        {
                          *((_BYTE *)a1 + 25) &= ~1u;
                          a1[4] = a3;
                          a1[6] = (uint64_t)v255->i64 + 2;
                          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v255 - a3) >> 1);
                          *((_BYTE *)a1 + 24) = 4;
                          goto LABEL_503;
                        }
                        v357 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v251, a5, a6, a7, a8);
                        if (v357 == 4)
                        {
LABEL_639:
                          if (*v10 == 5)
                          {
                            v358 = *((_DWORD *)a1 + 7);
                            v271 = v358 & 0x7FFFFFFF;
                            if ((v358 & 0x7FFFFFFF) == 0)
                              goto LABEL_731;
                            v269 = (int16x8_t *)a1[4];
                            v272 = v269->u16[0];
                            if ((_DWORD)v271 == 1)
                            {
                              if (v272 <= 0xFF)
                              {
LABEL_733:
                                if (*v1949)
                                {
                                  v408 = a2 + 8 * v272;
LABEL_735:
                                  v409 = *(_QWORD *)(v408 + 42216);
                                  v286 = *(int **)(v409 + 8);
                                  if ((v286 & 1) != 0)
                                    v410 = 0;
                                  else
                                    v410 = *(_DWORD **)(v409 + 8);
                                  *v410 += 2;
                                  goto LABEL_520;
                                }
                                LOBYTE(v1964) = v272;
LABEL_1133:
                                v525 = (int **)&v1964;
                                v526 = 1;
                                goto LABEL_1134;
                              }
                            }
                            else if (v271 >= 0x1C)
                            {
LABEL_661:
                              WTF::AtomStringImpl::add((uint64_t)v269, v271, (uint64_t)v248, a5, a6, a7, a8, &v1965);
LABEL_662:
                              v286 = *(int **)&v1965;
                              goto LABEL_520;
                            }
                            v359 = ((_DWORD)v272 << 6) ^ (v269->u16[v271 - 1] << 14) ^ v272;
                            v274 = (v359 + (v359 >> 14) + ((v359 + (v359 >> 14)) >> 6));
                            v275 = (int16x8_t *)(v1962 + (v274 << 6));
                            if ((_DWORD)v271 == v275[3].u16[3])
                            {
                              if ((_DWORD)v271 == 1)
                              {
                                if (v275->u16[0] == (_DWORD)v272)
                                  goto LABEL_518;
                              }
                              else
                              {
                                switch(31 - __clz(v271 - 1))
                                {
                                  case 0u:
                                    v527 = v275->i32[0];
                                    v528 = v269->i32[0];
                                    goto LABEL_1125;
                                  case 1u:
                                    if (v275->i32[0] != v269->i32[0])
                                      goto LABEL_1126;
                                    v527 = *(__int32 *)((char *)&v275->i32[-1] + 2 * v271);
                                    v528 = *(__int32 *)((char *)&v269->i32[-1] + 2 * v271);
LABEL_1125:
                                    if (v527 != v528)
                                      goto LABEL_1126;
                                    goto LABEL_518;
                                  case 2u:
                                    if (v275->i64[0] != v269->i64[0]
                                      || *(uint64_t *)((char *)&v275->i64[-1] + 2 * v271) != *(uint64_t *)((char *)&v269->i64[-1] + 2 * v271))
                                    {
                                      goto LABEL_1126;
                                    }
                                    goto LABEL_518;
                                  case 3u:
                                    v12 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v275 + 2 * v271 - 16), *(int16x8_t *)((char *)v269 + 2 * v271 - 16)), (int8x16_t)vceqq_s16(*v275, *v269));
                                    v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                    if (!v12.n128_u32[0])
                                      goto LABEL_1126;
                                    goto LABEL_518;
                                  default:
                                    v12 = (__n128)vceqq_s16(*v275, *v269);
                                    v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                    if (!v12.n128_u32[0])
                                      goto LABEL_1126;
                                    v538 = v358 & 7;
                                    if ((*((_DWORD *)a1 + 7) & 7u) >= v271)
                                      goto LABEL_518;
                                    v539 = (int16x8_t *)((char *)v269 + 2 * v538);
                                    v540 = (int16x8_t *)(v1962 + ((2 * v538) | (v274 << 6)));
                                    break;
                                }
                                while (1)
                                {
                                  v12 = (__n128)vceqq_s16(*v540, *v539);
                                  v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                  if (!v12.n128_u32[0])
                                    break;
                                  v538 += 8;
                                  ++v539;
                                  ++v540;
                                  if (v538 >= v271)
                                    goto LABEL_518;
                                }
                              }
                            }
LABEL_1126:
                            WTF::AtomStringImpl::add(a1[4], v358 & 0x7FFFFFFF, (uint64_t)v248, a5, a6, a7, a8, &v1965);
                            v286 = *(int **)&v1965;
                            if (v1965 != 0.0)
                              **(_DWORD **)&v1965 += 2;
                            v529 = (WTF::StringImpl *)v275[3].i64[1];
                            v275[3].i64[1] = (uint64_t)v286;
                            if (v529)
                            {
                              if (*(_DWORD *)v529 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v529, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v248, a5, a6, a7, a8);
                                WTF::fastFree(v530, v531, v532, v533, v534, v535, v536, v537);
                              }
                              else
                              {
                                *(_DWORD *)v529 -= 2;
                              }
                            }
                            v275[3].i16[3] = v358;
                            goto LABEL_746;
                          }
LABEL_503:
                          v269 = (int16x8_t *)a1[4];
                          v270 = *((_DWORD *)a1 + 7);
                          v271 = v270 & 0x7FFFFFFF;
                          if ((*((_BYTE *)a1 + 25) & 1) == 0)
                          {
                            if ((_DWORD)v271)
                            {
                              v272 = v269->u16[0];
                              if ((_DWORD)v271 != 1)
                              {
                                if (v271 < 0x1C)
                                {
LABEL_507:
                                  v273 = ((_DWORD)v272 << 6) ^ (v269->u16[v271 - 1] << 14) ^ v272;
                                  v274 = (v273 + (v273 >> 14) + ((v273 + (v273 >> 14)) >> 6));
                                  v275 = (int16x8_t *)(v1962 + (v274 << 6));
                                  if ((_DWORD)v271 != v275[3].u16[3])
                                    goto LABEL_740;
                                  if ((_DWORD)v271 != 1)
                                  {
                                    switch(31 - __clz(v271 - 1))
                                    {
                                      case 0u:
                                        v284 = v275->i32[0];
                                        v285 = v269->i32[0];
                                        goto LABEL_517;
                                      case 1u:
                                        if (v275->i32[0] != v269->i32[0])
                                          goto LABEL_740;
                                        v284 = *(__int32 *)((char *)&v275->i32[-1] + 2 * v271);
                                        v285 = *(__int32 *)((char *)&v269->i32[-1] + 2 * v271);
LABEL_517:
                                        if (v284 == v285)
                                          goto LABEL_518;
                                        goto LABEL_740;
                                      case 2u:
                                        if (v275->i64[0] != v269->i64[0]
                                          || *(uint64_t *)((char *)&v275->i64[-1] + 2 * v271) != *(uint64_t *)((char *)&v269->i64[-1] + 2 * v271))
                                        {
                                          goto LABEL_740;
                                        }
                                        goto LABEL_518;
                                      case 3u:
                                        v12 = (__n128)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)((char *)v275 + 2 * v271 - 16), *(int16x8_t *)((char *)v269 + 2 * v271 - 16)), (int8x16_t)vceqq_s16(*v275, *v269));
                                        v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                        if (!v12.n128_u32[0])
                                          goto LABEL_740;
                                        goto LABEL_518;
                                      default:
                                        v12 = (__n128)vceqq_s16(*v275, *v269);
                                        v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                        if (!v12.n128_u32[0])
                                          goto LABEL_740;
                                        v390 = v270 & 7;
                                        if ((*((_DWORD *)a1 + 7) & 7u) >= v271)
                                          goto LABEL_518;
                                        v391 = (int16x8_t *)((char *)v269 + 2 * v390);
                                        v392 = (int16x8_t *)(v1962 + ((2 * v390) | (v274 << 6)));
                                        break;
                                    }
                                    while (1)
                                    {
                                      v12 = (__n128)vceqq_s16(*v392, *v391);
                                      v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                      if (!v12.n128_u32[0])
                                        goto LABEL_740;
                                      v390 += 8;
                                      ++v391;
                                      ++v392;
                                      if (v390 >= v271)
                                        goto LABEL_518;
                                    }
                                  }
                                  if (v275->u16[0] != (_DWORD)v272)
                                  {
LABEL_740:
                                    WTF::AtomStringImpl::add(a1[4], v270 & 0x7FFFFFFF, (uint64_t)v248, a5, a6, a7, a8, &v1965);
                                    v286 = *(int **)&v1965;
                                    if (v1965 != 0.0)
                                      **(_DWORD **)&v1965 += 2;
                                    v411 = (WTF::StringImpl *)v275[3].i64[1];
                                    v275[3].i64[1] = (uint64_t)v286;
                                    if (v411)
                                    {
                                      if (*(_DWORD *)v411 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v411, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v248, a5, a6, a7, a8);
                                        WTF::fastFree(v412, v413, v414, v415, v416, v417, v418, v419);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v411 -= 2;
                                      }
                                    }
                                    v275[3].i16[3] = v270;
LABEL_746:
                                    if (v271 == 1)
                                    {
                                      v275->i16[0] = v269->i16[0];
                                    }
                                    else if (v271)
                                    {
                                      memcpy(v275, v269, 2 * v271);
                                    }
                                    goto LABEL_520;
                                  }
                                  goto LABEL_518;
                                }
                                goto LABEL_661;
                              }
                              if (v272 > 0xFF)
                                goto LABEL_507;
                              goto LABEL_733;
                            }
LABEL_731:
                            v286 = &WTF::StringImpl::s_emptyAtomString;
                            goto LABEL_519;
                          }
                          if (!(_DWORD)v271)
                            goto LABEL_731;
                          v403 = v269->u8[0];
                          if ((_DWORD)v271 == 1)
                          {
                            if (*v1949)
                            {
                              v408 = a2 + 8 * v403;
                              goto LABEL_735;
                            }
                            LOBYTE(v1964) = v269->i8[0];
                            goto LABEL_1133;
                          }
                          if (v271 >= 0x1C)
                          {
                            v525 = (int **)a1[4];
                            v526 = v270 & 0x7FFFFFFF;
LABEL_1134:
                            WTF::AtomStringImpl::add((uint64_t)v525, v526, (uint64_t)v248, a5, a6, a7, a8, &v1965);
                            goto LABEL_662;
                          }
                          v274 = ((((_BYTE)v403 << 6) ^ v403)
                                                 + v269->i8[v271 - 1]
                                                 + ((((((_DWORD)v403 << 6) | (v269->u8[v271 - 1] << 14)) ^ v403)
                                                   + v269->u8[v271 - 1]) >> 6));
                          v404 = (int16x8_t *)(v1962 + (v274 << 6));
                          if ((_DWORD)v271 != v404[3].u16[3])
                          {
LABEL_864:
                            WTF::AtomStringImpl::add(a1[4], v270 & 0x7FFFFFFF, (uint64_t)v248, a5, a6, a7, a8, &v1965);
                            v286 = *(int **)&v1965;
                            if (v1965 != 0.0)
                              **(_DWORD **)&v1965 += 2;
                            v445 = (WTF::StringImpl *)v404[3].i64[1];
                            v404[3].i64[1] = (uint64_t)v286;
                            if (v445)
                            {
                              if (*(_DWORD *)v445 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v445, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v248, a5, a6, a7, a8);
                                WTF::fastFree(v508, v509, v510, v511, v512, v513, v514, v515);
                              }
                              else
                              {
                                *(_DWORD *)v445 -= 2;
                              }
                            }
                            v404[3].i16[3] = v270;
                            v446 = 2 * v271;
                            do
                            {
                              v447 = v269->u8[0];
                              v269 = (int16x8_t *)((char *)v269 + 1);
                              v404->i16[0] = v447;
                              v404 = (int16x8_t *)((char *)v404 + 2);
                              v446 -= 2;
                            }
                            while (v446);
LABEL_520:
                            v1970[0] = v286;
                            v9 = v1947;
                            v287 = *((unsigned int *)a1 + 63);
                            if ((_DWORD)v287 == *((_DWORD *)a1 + 62))
                            {
                              v354 = (uint64_t *)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1954, v287 + 1, (unint64_t)v1970);
                              v287 = *((unsigned int *)a1 + 63);
                              v355 = a1[30];
                              v356 = *v354;
                              *v354 = 0;
                              *(_QWORD *)(v355 + 8 * v287) = v356;
                            }
                            else
                            {
                              v288 = *v1954;
                              v1970[0] = 0;
                              *(_QWORD *)(v288 + 8 * v287) = v286;
                            }
                            *((_DWORD *)a1 + 63) = v287 + 1;
                            v289 = (WTF::StringImpl *)v1970[0];
                            v1970[0] = 0;
                            if (v289)
                            {
                              if (*(_DWORD *)v289 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v289, (WTF::AtomStringImpl *)a2, a3, (uint64_t)v248, a5, a6, a7, a8);
                                WTF::fastFree(v333, v334, v335, v336, v337, v338, v339, v340);
                              }
                              else
                              {
                                *(_DWORD *)v289 -= 2;
                              }
                            }
                            v290 = (unsigned __int16 *)a1[6];
                            v291 = a1[7];
                            while ((unint64_t)v290 < v291)
                            {
                              if (*v290 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v290] != 19)
                                break;
                              *v11 = ++v290;
                            }
                            if (v290 == (unsigned __int16 *)v291)
                            {
                              v1778 = 14;
                              goto LABEL_4150;
                            }
                            *v10 = 18;
                            v293 = *v290;
                            if (v293 > 0xFF)
                              goto LABEL_4211;
                            v294 = JSC::tokenTypesOfLatin1Characters[v293];
                            if (v294 <= 4)
                            {
                              if (v294 == 4)
                              {
                                v295 = *((unsigned __int8 *)a1 + 40);
                                if ((_DWORD)v293 != 39)
                                {
                                  v296 = (unint64_t)(v290 + 1);
                                  *v11 = v290 + 1;
                                  if (!v295)
                                  {
                                    v297 = v291 - v296;
                                    if ((uint64_t)(v291 - v296) <= -2)
                                      goto LABEL_4442;
                                    v298 = (int16x8_t *)((char *)v290 + (v297 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                    if ((unint64_t)v297 <= 0xE)
                                    {
                                      if (v291 != v296)
                                      {
                                        v441 = 2 * (v297 >> 1);
                                        v442 = (int16x8_t *)(v290 + 1);
                                        while (1)
                                        {
                                          v443 = v442->u16[0];
                                          if (v443 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v443])
                                            break;
                                          v442 = (int16x8_t *)((char *)v442 + 2);
                                          v441 -= 2;
                                          if (!v441)
                                            goto LABEL_584;
                                        }
                                        v298 = v442;
                                      }
                                      goto LABEL_584;
                                    }
                                    v299 = v290 + 1;
                                    if (v297 < 15)
                                    {
LABEL_546:
                                      if (v299 >= (unsigned __int16 *)v298)
                                        goto LABEL_584;
                                      v307 = (unsigned __int16 *)&v298[-1];
                                      v308 = v298[-1];
                                      v309.i64[0] = 0x22002200220022;
                                      v309.i64[1] = 0x22002200220022;
                                      v310 = (int8x16_t)vceqq_s16(v308, v309);
                                      v311.i64[0] = 0x5C005C005C005CLL;
                                      v311.i64[1] = 0x5C005C005C005CLL;
                                      v312.i64[0] = 0x20002000200020;
                                      v312.i64[1] = 0x20002000200020;
                                      v306 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v308, v311), (int8x16_t)vcgtq_u16(v312, (uint16x8_t)v308)), v310);
                                      v310.i16[0] = vmaxvq_u16((uint16x8_t)v306);
                                      if (!v310.i32[0])
                                        goto LABEL_584;
                                    }
                                    else
                                    {
                                      v300 = v290 + 8;
                                      while (1)
                                      {
                                        v301 = *(int16x8_t *)(v300 - 7);
                                        v302.i64[0] = 0x22002200220022;
                                        v302.i64[1] = 0x22002200220022;
                                        v303 = (int8x16_t)vceqq_s16(v301, v302);
                                        v304.i64[0] = 0x5C005C005C005CLL;
                                        v304.i64[1] = 0x5C005C005C005CLL;
                                        v305.i64[0] = 0x20002000200020;
                                        v305.i64[1] = 0x20002000200020;
                                        v306 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v301, v304), (int8x16_t)vcgtq_u16(v305, (uint16x8_t)v301)), v303);
                                        v303.i16[0] = vmaxvq_u16((uint16x8_t)v306);
                                        if (v303.i32[0])
                                          break;
                                        v300 += 8;
                                        if (v300 >= (unsigned __int16 *)v298)
                                        {
                                          v299 = v300 - 7;
                                          goto LABEL_546;
                                        }
                                      }
                                      v307 = v300 - 7;
                                    }
                                    v298 = (int16x8_t *)&v307[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v306))];
LABEL_584:
                                    *v11 = v298;
LABEL_585:
                                    if ((unint64_t)v298 >= v291 || v298->u16[0] != (_DWORD)v293)
                                    {
                                      v294 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v296, v293, a5, a6, a7, a8);
LABEL_553:
                                      if (v294 == 7)
                                      {
                                        a4 = a1[6];
                                        v313 = a1[7];
                                        while (a4 < v313)
                                        {
                                          if (*(unsigned __int16 *)a4 > 0xFFu
                                            || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
                                          {
                                            break;
                                          }
                                          a4 += 2;
                                          *v11 = a4;
                                        }
                                        if (a4 == v313)
                                        {
                                          v352 = 14;
                                          goto LABEL_631;
                                        }
                                        *v10 = 18;
                                        v315 = *(unsigned __int16 *)a4;
                                        if (v315 > 0xFF)
                                        {
LABEL_664:
                                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                          v364 = *(_QWORD *)&v1965;
                                          if (v1965 == 0.0)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B2A82CLL);
                                          }
                                          goto LABEL_665;
                                        }
                                        v316 = JSC::tokenTypesOfLatin1Characters[v315];
                                        if (v316 <= 4)
                                        {
                                          if (v316 == 4)
                                          {
                                            v317 = *((unsigned __int8 *)a1 + 40);
                                            if ((_DWORD)v315 != 39)
                                            {
                                              a3 = a4 + 2;
                                              *v11 = a4 + 2;
                                              if (!v317)
                                              {
                                                v318 = v313 - a3;
                                                if ((uint64_t)(v313 - a3) <= -2)
                                                  goto LABEL_4442;
                                                v319 = (int16x8_t *)((v318 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
                                                if ((unint64_t)v318 <= 0xE)
                                                {
                                                  if (v313 != a3)
                                                  {
                                                    v456 = 2 * (v318 >> 1);
                                                    v457 = (int16x8_t *)(a4 + 2);
                                                    while (1)
                                                    {
                                                      v458 = v457->u16[0];
                                                      if (v458 <= 0xFF
                                                        && !JSC::safeStringLatin1CharactersInStrictJSON[v458])
                                                      {
                                                        break;
                                                      }
                                                      v457 = (int16x8_t *)((char *)v457 + 2);
                                                      v456 -= 2;
                                                      if (!v456)
                                                        goto LABEL_596;
                                                    }
                                                    v319 = v457;
                                                  }
                                                  goto LABEL_596;
                                                }
                                                v320 = a4 + 2;
                                                if (v318 < 15)
                                                {
LABEL_575:
                                                  if (v320 >= (unint64_t)v319)
                                                    goto LABEL_596;
                                                  v327 = (unsigned __int16 *)&v319[-1];
                                                  v328 = v319[-1];
                                                  v329.i64[0] = 0x22002200220022;
                                                  v329.i64[1] = 0x22002200220022;
                                                  v330 = (int8x16_t)vceqq_s16(v328, v329);
                                                  v331.i64[0] = 0x5C005C005C005CLL;
                                                  v331.i64[1] = 0x5C005C005C005CLL;
                                                  v332.i64[0] = 0x20002000200020;
                                                  v332.i64[1] = 0x20002000200020;
                                                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v328, v331), (int8x16_t)vcgtq_u16(v332, (uint16x8_t)v328)), v330);
                                                  v330.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                  if (!v330.i32[0])
                                                    goto LABEL_596;
                                                }
                                                else
                                                {
                                                  v321 = a4 + 16;
                                                  while (1)
                                                  {
                                                    v322 = *(int16x8_t *)(v321 - 14);
                                                    v323.i64[0] = 0x22002200220022;
                                                    v323.i64[1] = 0x22002200220022;
                                                    v324 = (int8x16_t)vceqq_s16(v322, v323);
                                                    v325.i64[0] = 0x5C005C005C005CLL;
                                                    v325.i64[1] = 0x5C005C005C005CLL;
                                                    v326.i64[0] = 0x20002000200020;
                                                    v326.i64[1] = 0x20002000200020;
                                                    v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v322, v325), (int8x16_t)vcgtq_u16(v326, (uint16x8_t)v322)), v324);
                                                    v324.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                    if (v324.i32[0])
                                                      break;
                                                    v321 += 16;
                                                    if (v321 >= (unint64_t)v319)
                                                    {
                                                      v320 = v321 - 14;
                                                      goto LABEL_575;
                                                    }
                                                  }
                                                  v327 = (unsigned __int16 *)(v321 - 14);
                                                }
                                                v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                                v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                                v319 = (int16x8_t *)&v327[v12.n128_u8[0]];
LABEL_596:
                                                *v11 = v319;
LABEL_597:
                                                if ((unint64_t)v319 < v313 && v319->u16[0] == (_DWORD)v315)
                                                {
                                                  *((_BYTE *)a1 + 25) &= ~1u;
                                                  a1[4] = a3;
                                                  a1[6] = (uint64_t)v319->i64 + 2;
                                                  *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v319 - a3) >> 1);
                                                  v341 = 4;
LABEL_600:
                                                  *((_BYTE *)a1 + 24) = v341;
                                                  goto LABEL_632;
                                                }
                                                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, a3, v315, a5, a6, a7, a8);
LABEL_632:
                                                LOBYTE(v1965) = 6;
                                                v353 = *((unsigned int *)a1 + 55);
                                                if ((_DWORD)v353 != *((_DWORD *)a1 + 54))
                                                {
                                                  *(_BYTE *)(*v1956 + v353) = 6;
LABEL_1251:
                                                  *((_DWORD *)a1 + 55) = v353 + 1;
LABEL_1252:
                                                  switch(*v10)
                                                  {
                                                    case 0:
                                                      goto LABEL_1157;
                                                    case 1:
                                                      goto LABEL_4079;
                                                    case 2:
                                                      goto LABEL_1253;
                                                    case 3:
                                                      goto LABEL_4085;
                                                    case 4:
                                                      v1279 = *((_DWORD *)a1 + 7);
                                                      v1280 = v1279 & 0x7FFFFFFF;
                                                      if ((*((_BYTE *)a1 + 25) & 1) != 0)
                                                      {
                                                        if ((v1279 & 0x7FFFFFFFu) >= 0xB)
                                                        {
                                                          v1503 = *v1958;
                                                          if (*v1958)
                                                          {
                                                            v1282 = WTF::fastCompactMalloc((WTF *)(v1280 + 20));
                                                            v1283 = (void *)(v1282 + 20);
                                                            *(_DWORD *)v1282 = 2;
                                                            *(_DWORD *)(v1282 + 4) = v1280;
                                                            *(_QWORD *)(v1282 + 8) = v1282 + 20;
                                                            *(_DWORD *)(v1282 + 16) = 4;
                                                            v1284 = v1503;
                                                            v1285 = v1280;
LABEL_2821:
                                                            memcpy(v1283, v1284, v1285);
LABEL_3266:
                                                            v1965 = *(double *)&v1282;
                                                            v1311 = JSC::jsNontrivialString(a2, (JSC::VM *)&v1965, a3, a4, a5, a6, a7, a8);
LABEL_3267:
                                                            v9 = v1311;
                                                            v1504 = *(WTF::StringImpl **)&v1965;
                                                            v1965 = 0.0;
                                                            if (v1504)
                                                            {
                                                              if (*(_DWORD *)v1504 == 2)
                                                              {
                                                                WTF::StringImpl::~StringImpl(v1504, (WTF::AtomStringImpl *)a2, v1312, v1313, a5, a6, a7, a8);
                                                                WTF::fastFree(v1507, v1508, v1509, v1510, v1511, v1512, v1513, v1514);
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)v1504 -= 2;
                                                              }
                                                            }
                                                            a4 = a1[6];
                                                            v95 = a1[7];
                                                            if (a4 >= v95)
                                                            {
                                                              v1506 = 0;
                                                            }
                                                            else
                                                            {
                                                              do
                                                              {
                                                                v1505 = *(unsigned __int16 *)a4 <= 0xFFu
                                                                     && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                                                v1506 = !v1505;
                                                                if (!v1505)
                                                                  break;
                                                                a4 += 2;
                                                                *v11 = a4;
                                                              }
                                                              while (a4 < v95);
                                                            }
                                                            if (a4 != v95)
                                                            {
                                                              *v10 = 18;
                                                              v97 = *(unsigned __int16 *)a4;
                                                              if (v97 > 0xFF)
                                                              {
LABEL_3348:
                                                                WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                                                v111 = *(_QWORD *)&v1965;
                                                                if (v1965 == 0.0)
                                                                {
                                                                  __break(0xC471u);
                                                                  JUMPOUT(0x198B2A908);
                                                                }
                                                                goto LABEL_3349;
                                                              }
                                                              v1367 = JSC::tokenTypesOfLatin1Characters[v97];
                                                              if (v1367 <= 4)
                                                              {
                                                                if (v1367 == 4)
                                                                {
                                                                  v1515 = *((unsigned __int8 *)a1 + 40);
                                                                  if ((_DWORD)v97 != 39)
                                                                  {
                                                                    v100 = a4 + 2;
                                                                    *v11 = a4 + 2;
                                                                    if (!v1515)
                                                                    {
                                                                      v1516 = v95 - v100;
                                                                      if ((uint64_t)(v95 - v100) <= -2)
                                                                        goto LABEL_4442;
                                                                      v102 = (int16x8_t *)((v1516 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + a4
                                                                                         + 2);
                                                                      if ((unint64_t)v1516 > 0xE)
                                                                      {
                                                                        v103 = a4 + 2;
                                                                        if (v1516 >= 15)
                                                                        {
                                                                          v104 = a4 + 16;
                                                                          while (1)
                                                                          {
                                                                            v1517 = *(int16x8_t *)(v104 - 14);
                                                                            v1518.i64[0] = 0x22002200220022;
                                                                            v1518.i64[1] = 0x22002200220022;
                                                                            v1519 = (int8x16_t)vceqq_s16(v1517, v1518);
                                                                            v1520.i64[0] = 0x5C005C005C005CLL;
                                                                            v1520.i64[1] = 0x5C005C005C005CLL;
                                                                            v1521.i64[0] = 0x20002000200020;
                                                                            v1521.i64[1] = 0x20002000200020;
                                                                            v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1517, v1520), (int8x16_t)vcgtq_u16(v1521, (uint16x8_t)v1517)), v1519);
                                                                            v1519.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                            if (v1519.i32[0])
                                                                              break;
                                                                            v104 += 16;
                                                                            if (v104 >= (unint64_t)v102)
                                                                              goto LABEL_3295;
                                                                          }
LABEL_3299:
                                                                          v1522 = (unsigned __int16 *)(v104 - 14);
LABEL_3300:
                                                                          v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                                                          v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                                                          v102 = (int16x8_t *)&v1522[v12.n128_u8[0]];
                                                                          goto LABEL_3301;
                                                                        }
                                                                        goto LABEL_3296;
                                                                      }
                                                                      if (v95 == v100)
                                                                        goto LABEL_3301;
                                                                      v1636 = 2 * (v1516 >> 1);
                                                                      v504 = (int16x8_t *)(a4 + 2);
                                                                      while (1)
                                                                      {
                                                                        v1637 = v504->u16[0];
                                                                        if (v1637 <= 0xFF
                                                                          && !JSC::safeStringLatin1CharactersInStrictJSON[v1637])
                                                                        {
                                                                          goto LABEL_3816;
                                                                        }
                                                                        v504 = (int16x8_t *)((char *)v504 + 2);
                                                                        v1636 -= 2;
                                                                        if (!v1636)
                                                                          goto LABEL_3301;
                                                                      }
                                                                    }
                                                                    v481 = v9;
                                                                    goto LABEL_3673;
                                                                  }
                                                                  v481 = v9;
                                                                  if (*((_BYTE *)a1 + 40))
                                                                  {
                                                                    v100 = a4 + 2;
                                                                    *v11 = a4 + 2;
LABEL_3673:
                                                                    v102 = (int16x8_t *)v100;
                                                                    if (v100 < v95)
                                                                    {
                                                                      while (1)
                                                                      {
                                                                        v1623 = v102->u16[0];
                                                                        if (v1623 < 0x20)
                                                                        {
                                                                          if (v1623 != 9)
                                                                            goto LABEL_3870;
                                                                        }
                                                                        else if (v1623 == (_DWORD)v97
                                                                               || v1623 > 0xFF
                                                                               || v1623 == 92)
                                                                        {
                                                                          goto LABEL_3870;
                                                                        }
                                                                        v102 = (int16x8_t *)((char *)v102 + 2);
                                                                        *v11 = v102;
                                                                        if ((unint64_t)v102 >= v95)
                                                                          goto LABEL_3870;
                                                                      }
                                                                    }
LABEL_3869:
                                                                    v102 = (int16x8_t *)v100;
LABEL_3870:
                                                                    v9 = v481;
                                                                    goto LABEL_3302;
                                                                  }
                                                                  goto LABEL_3946;
                                                                }
                                                                goto LABEL_3309;
                                                              }
                                                              if (v1367 != 5)
                                                              {
                                                                if (v1367 != 6)
                                                                {
                                                                  if (v1367 - 18 >= 2)
                                                                    goto LABEL_3309;
                                                                  goto LABEL_3348;
                                                                }
                                                                v1530 = v1506 ^ 1;
                                                                if ((_DWORD)v97 != 45)
                                                                  v1530 = 1;
                                                                if ((v1530 & 1) != 0)
                                                                {
                                                                  v1531 = 0;
                                                                }
                                                                else
                                                                {
                                                                  *v11 = a4 + 2;
                                                                  v1531 = 1;
                                                                }
                                                                v1532 = (unsigned __int16 *)(a4 + 2 * v1531);
                                                                if ((unint64_t)v1532 < v95)
                                                                {
                                                                  v1533 = *v1532;
                                                                  if (v1533 == 48)
                                                                  {
                                                                    v1536 = v1531 + 1;
LABEL_3324:
                                                                    v198 = (unsigned __int16 *)(a4 + 2 * v1536);
                                                                    *v11 = v198;
                                                                    if ((unint64_t)v198 >= v95)
                                                                      goto LABEL_3690;
                                                                    v1537 = *v198;
                                                                    if (v1537 == 101 || v1537 == 69)
                                                                      goto LABEL_3690;
                                                                    if (v1537 != 46)
                                                                    {
                                                                      if (v1536 <= 9)
                                                                      {
                                                                        *v10 = 6;
                                                                        if ((_DWORD)v97 == 45)
                                                                        {
                                                                          if (v1536 < 2)
                                                                            goto LABEL_3730;
                                                                          a4 += 2;
                                                                        }
                                                                        v140 = 0;
                                                                        do
                                                                        {
                                                                          v1538 = *(unsigned __int16 *)a4;
                                                                          a4 += 2;
                                                                          v140 = v1538 + 10 * v140 - 48;
                                                                        }
                                                                        while (a4 < (unint64_t)v198);
                                                                        goto LABEL_3332;
                                                                      }
LABEL_3690:
                                                                      v481 = v9;
                                                                      if ((unint64_t)v198 >= v95
                                                                        || (*v198 | 0x20) != 0x65)
                                                                      {
                                                                        goto LABEL_3702;
                                                                      }
                                                                      v1625 = v198 + 1;
                                                                      *v11 = v198 + 1;
                                                                      if ((unint64_t)(v198 + 1) < v95)
                                                                      {
                                                                        v1626 = *v1625;
                                                                        if (v1626 == 45 || v1626 == 43)
                                                                        {
                                                                          v1625 = v198 + 2;
                                                                          *v11 = v198 + 2;
                                                                        }
                                                                      }
                                                                      if ((unint64_t)v1625 < v95
                                                                        && *v1625 - 48 <= 9)
                                                                      {
                                                                        v1627 = v1625 + 1;
                                                                        do
                                                                        {
                                                                          v198 = v1627;
                                                                          if ((unint64_t)v1627 >= v95)
                                                                            break;
                                                                          ++v1627;
                                                                        }
                                                                        while (*v198 - 48 < 0xA);
LABEL_3701:
                                                                        *v11 = v198;
LABEL_3702:
                                                                        *v10 = 6;
                                                                        if ((uint64_t)((uint64_t)v198 - a4) <= -2)
                                                                          goto LABEL_4442;
                                                                        v1965 = 0.0;
                                                                        fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v198, &v1965, 0x2E00000005);
                                                                        v12.n128_f64[0] = v1965;
                                                                        *(double *)v1958 = v1965;
LABEL_3768:
                                                                        v9 = v481;
                                                                        goto LABEL_3311;
                                                                      }
LABEL_3704:
                                                                      v1628 = WTF::fastCompactMalloc((WTF *)0x20);
                                                                      v1630 = v1628;
                                                                      v12.n128_u64[0] = 0x5D00000002;
                                                                      *(_QWORD *)v1628 = 0x5D00000002;
                                                                      v1631 = "Exponent symbols should be followed by an "
                                                                              "optional '+' or '-' and then by at least one number";
LABEL_3765:
                                                                      *(_QWORD *)(v1628 + 8) = v1631;
                                                                      *(_DWORD *)(v1628 + 16) = 4;
                                                                      v1644 = *v1951;
                                                                      *v1951 = (WTF::StringImpl *)v1630;
                                                                      v9 = v481;
                                                                      if (!v1644)
                                                                        goto LABEL_3311;
                                                                      if (*(_DWORD *)v1644 == 2)
                                                                      {
                                                                        WTF::StringImpl::~StringImpl(v1644, (WTF::AtomStringImpl *)a2, v1629, a4, a5, a6, a7, a8);
                                                                        WTF::fastFree(v1661, v1662, v1663, v1664, v1665, v1666, v1667, v1668);
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_DWORD *)v1644 -= 2;
                                                                      }
                                                                      goto LABEL_3768;
                                                                    }
                                                                    v481 = v9;
                                                                    *v11 = v198 + 1;
                                                                    if ((unint64_t)(v198 + 1) < v95
                                                                      && v198[1] - 48 <= 9)
                                                                    {
                                                                      v1624 = a4 + 2 * v1536 + 4;
                                                                      do
                                                                      {
                                                                        v198 = (unsigned __int16 *)v1624;
                                                                        if (v1624 >= v95)
                                                                          break;
                                                                        v1624 += 2;
                                                                      }
                                                                      while (*v198 - 48 < 0xA);
                                                                      *v11 = v198;
                                                                      goto LABEL_3690;
                                                                    }
LABEL_3764:
                                                                    v1628 = WTF::fastCompactMalloc((WTF *)0x20);
                                                                    v1630 = v1628;
                                                                    *(_QWORD *)v1628 = 0x2200000002;
                                                                    v1631 = "Invalid digits after decimal point";
                                                                    goto LABEL_3765;
                                                                  }
                                                                  if ((v1533 - 49) <= 8)
                                                                  {
                                                                    v1534 = v1531 + 1;
                                                                    v1535 = 2 * v1531 + 2;
                                                                    do
                                                                    {
                                                                      v1536 = v1534;
                                                                      if (a4 + v1535 >= v95)
                                                                        break;
                                                                      ++v1534;
                                                                      v1535 += 2;
                                                                    }
                                                                    while (*(unsigned __int16 *)(a4 + 2 * v1536)
                                                                          - 48 < 0xA);
                                                                    goto LABEL_3324;
                                                                  }
                                                                }
                                                                goto LABEL_3400;
                                                              }
                                                              if ((_DWORD)v97 == 102)
                                                              {
                                                                if ((uint64_t)(v95 - a4) >= 9
                                                                  && *(_DWORD *)(a4 + 2) == 7077985
                                                                  && *(_DWORD *)(a4 + 6) == 6619251)
                                                                {
LABEL_3339:
                                                                  *v11 = a4 + 10;
                                                                  v1539 = 12;
LABEL_3345:
                                                                  *v10 = v1539;
                                                                  goto LABEL_3311;
                                                                }
                                                                goto LABEL_3556;
                                                              }
                                                              if ((_DWORD)v97 == 116)
                                                              {
                                                                if ((uint64_t)(v95 - a4) >= 7
                                                                  && *(_DWORD *)(a4 + 2) == 7667826
                                                                  && *(_WORD *)(a4 + 6) == 101)
                                                                {
LABEL_3344:
                                                                  *v11 = a4 + 8;
                                                                  v1539 = 11;
                                                                  goto LABEL_3345;
                                                                }
LABEL_3556:
                                                                *v1958 = (WTF::AtomStringImpl *)a4;
                                                                LODWORD(v465) = a4;
                                                                if (a4 < v95)
                                                                {
                                                                  v465 = (unsigned __int16 *)a4;
                                                                  do
                                                                  {
                                                                    v1601 = *v465;
                                                                    v1603 = (v1601 | 0x20u) - 97 >= 0x1A
                                                                         && (v1601 - 48) >= 0xA
                                                                         && (v1601 - 8204) >= 2;
                                                                    if (v1603 && v1601 != 95 && v1601 != 36)
                                                                      break;
                                                                    *v11 = ++v465;
                                                                  }
                                                                  while ((unint64_t)v465 < v95);
                                                                }
LABEL_3588:
                                                                *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v465 - a4) >> 1);
                                                                v1528 = 5;
                                                                goto LABEL_3305;
                                                              }
                                                              if ((_DWORD)v97 != 110
                                                                || (uint64_t)(v95 - a4) < 7
                                                                || *(_DWORD *)(a4 + 2) != 7078005
                                                                || *(_WORD *)(a4 + 6) != 108)
                                                              {
                                                                goto LABEL_3556;
                                                              }
LABEL_3574:
                                                              *v11 = a4 + 8;
                                                              v1539 = 13;
                                                              goto LABEL_3345;
                                                            }
LABEL_3346:
                                                            v1539 = 14;
                                                            goto LABEL_3345;
                                                          }
LABEL_3265:
                                                          v1282 = 0;
                                                          goto LABEL_3266;
                                                        }
                                                        JSC::Identifier::fromString(a2, *v1958, v1279 & 0x7FFFFFFF, a4, a5, a6, a7, a8, (rlim_t *)&v1965);
                                                        v1310 = (JSC *)a2;
LABEL_2901:
                                                        v1311 = JSC::jsString(v1310, (JSC::VM *)&v1965, (const WTF::String *)a3, a4, a5, a6, a7, a8);
                                                        goto LABEL_3267;
                                                      }
                                                      if ((v1279 & 0x7FFFFFFFu) >= 0xB)
                                                      {
                                                        v1281 = *v1958;
                                                        if (*v1958)
                                                        {
                                                          if (v1280 > 0x7FFFFFEF)
                                                          {
                                                            __break(0xC471u);
                                                            JUMPOUT(0x198B2A900);
                                                          }
                                                          v1282 = WTF::fastCompactMalloc((WTF *)(2 * v1280 + 20));
                                                          v1283 = (void *)(v1282 + 20);
                                                          *(_DWORD *)v1282 = 2;
                                                          *(_DWORD *)(v1282 + 4) = v1280;
                                                          *(_QWORD *)(v1282 + 8) = v1282 + 20;
                                                          *(_DWORD *)(v1282 + 16) = 0;
                                                          v1284 = v1281;
                                                          v1285 = 2 * v1280;
                                                          goto LABEL_2821;
                                                        }
                                                        goto LABEL_3265;
                                                      }
                                                      v1306 = *v1958;
                                                      if (v1280 == 1)
                                                      {
                                                        v1331 = *(unsigned __int16 *)v1306;
                                                        if (v1331 <= 0xFF)
                                                        {
                                                          if (v1953[2313])
                                                          {
                                                            v1332 = *(_QWORD *)(a2 + 8 * v1331 + 42216);
                                                            v1308 = *(_QWORD *)(v1332 + 8);
                                                            if ((v1308 & 1) != 0)
                                                              v1333 = 0;
                                                            else
                                                              v1333 = *(_DWORD **)(v1332 + 8);
                                                            *v1333 += 2;
                                                          }
                                                          else
                                                          {
                                                            LOBYTE(v1970[0]) = *(_WORD *)v1306;
                                                            WTF::AtomStringImpl::add((uint64_t)v1970, 1uLL, a4, a5, a6, a7, a8, &v1965);
                                                            v1308 = *(_QWORD *)&v1965;
                                                          }
                                                          goto LABEL_2900;
                                                        }
                                                      }
                                                      else if ((v1279 & 0x7FFFFFFF) == 0)
                                                      {
                                                        v1308 = (rlim_t)&WTF::StringImpl::s_emptyAtomString;
                                                        v1309 = WTF::StringImpl::s_emptyAtomString + 2;
                                                        goto LABEL_2899;
                                                      }
                                                      WTF::AtomStringImpl::add((uint64_t)v1306, v1279 & 0x7FFFFFFF, a4, a5, a6, a7, a8, &v1965);
                                                      v1308 = *(_QWORD *)&v1965;
                                                      v1309 = **(_DWORD **)&v1965;
                                                      **(_DWORD **)&v1965 += 2;
                                                      if (!v1309)
                                                      {
                                                        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1308, v1307, a3, a4, a5, a6, a7, a8);
                                                        WTF::fastFree(v1323, v1324, v1325, v1326, v1327, v1328, v1329, v1330);
                                                        goto LABEL_2900;
                                                      }
LABEL_2899:
                                                      *(_DWORD *)v1308 = v1309;
LABEL_2900:
                                                      v1965 = *(double *)&v1308;
                                                      v1310 = (JSC *)a2;
                                                      goto LABEL_2901;
                                                    case 5:
                                                      v1884 = *((_DWORD *)a1 + 7) & 0x7FFFFFFF;
                                                      if (v1884 >= 0xC8)
                                                        v1885 = 200;
                                                      else
                                                        v1885 = v1884;
                                                      v1886 = (_WORD *)a1[4];
                                                      if (v1884 >= 0xC9)
                                                        v1887 = 3;
                                                      else
                                                        v1887 = 0;
                                                      v1888 = v1885 + v1887 + 24;
                                                      WTF::tryFastCompactMalloc((WTF *)(2 * v1888 + 20), &v1965);
                                                      v1889 = *(_QWORD *)&v1965;
                                                      if (v1965 == 0.0)
                                                      {
                                                        if ((*((_DWORD *)a1 + 7) & 0x7FFFFFFFu) < 0xB
                                                          || (v1945 = *v1958,
                                                              WTF::tryFastCompactMalloc((WTF *)0x5E, &v1965),
                                                              v1889 = *(_QWORD *)&v1965,
                                                              v1965 == 0.0))
                                                        {
                                                          v1889 = WTF::fastCompactMalloc((WTF *)0x20);
                                                          *(_QWORD *)v1889 = 0x1500000002;
                                                          *(_QWORD *)(v1889 + 8) = "Unexpected identifier";
                                                          *(_DWORD *)(v1889 + 16) = 4;
                                                        }
                                                        else
                                                        {
                                                          **(_QWORD **)&v1965 = 0x2500000002;
                                                          *(_OWORD *)(v1889 + 20) = xmmword_199158AA0;
                                                          *(_QWORD *)(v1889 + 8) = v1889 + 20;
                                                          *(_DWORD *)(v1889 + 16) = 0;
                                                          *(_OWORD *)(v1889 + 36) = xmmword_199158AB0;
                                                          *(_QWORD *)(v1889 + 52) = 0x65006900660069;
                                                          *(_DWORD *)(v1889 + 60) = 2097266;
                                                          *(_WORD *)(v1889 + 64) = 34;
                                                          v1946 = *(_OWORD *)v1945;
                                                          *(_DWORD *)(v1889 + 82) = *((_DWORD *)v1945 + 4);
                                                          *(_OWORD *)(v1889 + 66) = v1946;
                                                          *(_QWORD *)(v1889 + 86) = 0x22002E002E002ELL;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        **(_DWORD **)&v1965 = 2;
                                                        *(_DWORD *)(v1889 + 4) = v1888;
                                                        *(_OWORD *)(v1889 + 20) = xmmword_199158AA0;
                                                        *(_QWORD *)(v1889 + 8) = v1889 + 20;
                                                        *(_DWORD *)(v1889 + 16) = 0;
                                                        v1890 = (_WORD *)(v1889 + 66);
                                                        *(_OWORD *)(v1889 + 36) = xmmword_199158AB0;
                                                        *(_QWORD *)(v1889 + 52) = 0x65006900660069;
                                                        *(_DWORD *)(v1889 + 60) = 2097266;
                                                        *(_WORD *)(v1889 + 64) = 34;
                                                        if (v1885 == 1)
                                                        {
                                                          *v1890 = *v1886;
                                                        }
                                                        else if ((_BYTE)v1885)
                                                        {
                                                          memcpy((void *)(v1889 + 66), v1886, 2 * v1885);
                                                        }
                                                        if (v1884 >= 0xC9)
                                                        {
                                                          v1891 = 2 * v1887;
                                                          v1892 = "...";
                                                          v1893 = &v1890[v1885];
                                                          do
                                                          {
                                                            v1894 = *(unsigned __int8 *)v1892++;
                                                            *v1893++ = v1894;
                                                            v1891 -= 2;
                                                          }
                                                          while (v1891);
                                                        }
                                                        v1890[v1885 + v1887] = 34;
                                                      }
                                                      *(_DWORD *)v1889 = 4;
                                                      v1895 = *v1960;
                                                      *v1960 = (WTF::StringImpl *)v1889;
                                                      if (v1895)
                                                      {
                                                        if (*(_DWORD *)v1895 == 2)
                                                        {
                                                          WTF::StringImpl::~StringImpl(v1895, v1727, v1728, v1729, v1730, v1731, v1732, v1733);
                                                          WTF::fastFree(v1919, v1920, v1921, v1922, v1923, v1924, v1925, v1926);
                                                        }
                                                        else
                                                        {
                                                          *(_DWORD *)v1895 -= 2;
                                                        }
                                                      }
                                                      if (*(_DWORD *)v1889 != 2)
                                                      {
                                                        v1961 = 0;
                                                        *(_DWORD *)v1889 -= 2;
                                                        return v1961;
                                                      }
                                                      v1736 = (WTF::StringImpl *)v1889;
                                                      goto LABEL_4331;
                                                    case 6:
                                                      v12.n128_u64[0] = (unint64_t)*v1958;
                                                      if (((unint64_t)*v1958 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
                                                        && (v1286 = (int)v12.n128_f64[0],
                                                            v12.n128_f64[0] == (double)(int)v1286)
                                                        && ((_DWORD)v1286
                                                         || (v12.n128_u64[0] & 0x8000000000000000) == 0))
                                                      {
                                                        v9 = v1286 | 0xFFFE000000000000;
                                                      }
                                                      else
                                                      {
                                                        v9 = v12.n128_u64[0] + 0x2000000000000;
                                                      }
                                                      a4 = a1[6];
                                                      v95 = a1[7];
                                                      if (a4 >= v95)
                                                      {
                                                        v1292 = 0;
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v1291 = *(unsigned __int16 *)a4 <= 0xFFu
                                                               && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                                          v1292 = !v1291;
                                                          if (!v1291)
                                                            break;
                                                          a4 += 2;
                                                          *v11 = a4;
                                                        }
                                                        while (a4 < v95);
                                                      }
                                                      if (a4 == v95)
                                                        goto LABEL_3346;
                                                      *v10 = 18;
                                                      v97 = *(unsigned __int16 *)a4;
                                                      if (v97 > 0xFF)
                                                        goto LABEL_3050;
                                                      v1367 = JSC::tokenTypesOfLatin1Characters[v97];
                                                      if (v1367 <= 4)
                                                      {
                                                        if (v1367 == 4)
                                                        {
                                                          v1368 = *((unsigned __int8 *)a1 + 40);
                                                          if ((_DWORD)v97 != 39)
                                                          {
                                                            v100 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            if (!v1368)
                                                            {
                                                              v1369 = v95 - v100;
                                                              if ((uint64_t)(v95 - v100) <= -2)
                                                                goto LABEL_4442;
                                                              v102 = (int16x8_t *)((v1369 & 0xFFFFFFFFFFFFFFFELL)
                                                                                 + a4
                                                                                 + 2);
                                                              if ((unint64_t)v1369 > 0xE)
                                                              {
                                                                v103 = a4 + 2;
                                                                if (v1369 >= 15)
                                                                {
                                                                  v104 = a4 + 16;
                                                                  while (1)
                                                                  {
                                                                    v1370 = *(int16x8_t *)(v104 - 14);
                                                                    v1371.i64[0] = 0x22002200220022;
                                                                    v1371.i64[1] = 0x22002200220022;
                                                                    v1372 = (int8x16_t)vceqq_s16(v1370, v1371);
                                                                    v1373.i64[0] = 0x5C005C005C005CLL;
                                                                    v1373.i64[1] = 0x5C005C005C005CLL;
                                                                    v1374.i64[0] = 0x20002000200020;
                                                                    v1374.i64[1] = 0x20002000200020;
                                                                    v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1370, v1373), (int8x16_t)vcgtq_u16(v1374, (uint16x8_t)v1370)), v1372);
                                                                    v1372.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                    if (v1372.i32[0])
                                                                      goto LABEL_3299;
                                                                    v104 += 16;
                                                                    if (v104 >= (unint64_t)v102)
                                                                      goto LABEL_3295;
                                                                  }
                                                                }
LABEL_3296:
                                                                if (v103 >= (unint64_t)v102)
                                                                  goto LABEL_3301;
                                                                v1522 = (unsigned __int16 *)&v102[-1];
                                                                v1523 = v102[-1];
                                                                v1524.i64[0] = 0x22002200220022;
                                                                v1524.i64[1] = 0x22002200220022;
                                                                v1525 = (int8x16_t)vceqq_s16(v1523, v1524);
                                                                v1526.i64[0] = 0x5C005C005C005CLL;
                                                                v1526.i64[1] = 0x5C005C005C005CLL;
                                                                v1527.i64[0] = 0x20002000200020;
                                                                v1527.i64[1] = 0x20002000200020;
                                                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1523, v1526), (int8x16_t)vcgtq_u16(v1527, (uint16x8_t)v1523)), v1525);
                                                                v1525.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                if (!v1525.i32[0])
                                                                  goto LABEL_3301;
                                                                goto LABEL_3300;
                                                              }
                                                              if (v95 == v100)
                                                                goto LABEL_3301;
                                                              v1638 = 2 * (v1369 >> 1);
                                                              v504 = (int16x8_t *)(a4 + 2);
                                                              while (1)
                                                              {
                                                                v1639 = v504->u16[0];
                                                                if (v1639 <= 0xFF
                                                                  && !JSC::safeStringLatin1CharactersInStrictJSON[v1639])
                                                                {
                                                                  break;
                                                                }
                                                                v504 = (int16x8_t *)((char *)v504 + 2);
                                                                v1638 -= 2;
                                                                if (!v1638)
                                                                  goto LABEL_3301;
                                                              }
LABEL_3816:
                                                              v102 = v504;
                                                              goto LABEL_3301;
                                                            }
                                                            goto LABEL_3663;
                                                          }
                                                          if (*((_BYTE *)a1 + 40))
                                                          {
                                                            v100 = a4 + 2;
                                                            *v11 = a4 + 2;
LABEL_3663:
                                                            v102 = (int16x8_t *)v100;
                                                            if (v100 < v95)
                                                            {
                                                              while (1)
                                                              {
                                                                v1622 = v102->u16[0];
                                                                if (v1622 < 0x20)
                                                                {
                                                                  if (v1622 != 9)
                                                                    goto LABEL_3302;
                                                                }
                                                                else if (v1622 == (_DWORD)v97
                                                                       || v1622 > 0xFF
                                                                       || v1622 == 92)
                                                                {
                                                                  goto LABEL_3302;
                                                                }
                                                                v102 = (int16x8_t *)((char *)v102 + 2);
                                                                *v11 = v102;
                                                                if ((unint64_t)v102 >= v95)
                                                                  goto LABEL_3302;
                                                              }
                                                            }
LABEL_3868:
                                                            v102 = (int16x8_t *)v100;
LABEL_3302:
                                                            if ((unint64_t)v102 < v95
                                                              && v102->u16[0] == (_DWORD)v97)
                                                            {
                                                              *((_BYTE *)a1 + 25) &= ~1u;
                                                              a1[4] = v100;
                                                              a1[6] = (uint64_t)v102->i64 + 2;
                                                              *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v102 - v100) >> 1);
                                                              v1528 = 4;
LABEL_3305:
                                                              *((_BYTE *)a1 + 24) = v1528;
                                                              goto LABEL_3311;
                                                            }
                                                            JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v100, v97, a5, a6, a7, a8);
LABEL_3311:
                                                            if (!v9)
                                                              return 0;
                                                            goto LABEL_3312;
                                                          }
LABEL_3947:
                                                          v1565 = WTF::fastCompactMalloc((WTF *)0x20);
                                                          v111 = v1565;
                                                          v12.n128_u64[0] = 0x2900000002;
                                                          *(_QWORD *)v1565 = 0x2900000002;
                                                          v1566 = "Single quotes (') are not allowed in JSON";
                                                          goto LABEL_3401;
                                                        }
LABEL_3309:
                                                        *v10 = v1367;
                                                        goto LABEL_3310;
                                                      }
                                                      if (v1367 == 5)
                                                      {
                                                        if ((_DWORD)v97 == 102)
                                                        {
                                                          if ((uint64_t)(v95 - a4) >= 9
                                                            && *(_DWORD *)(a4 + 2) == 7077985
                                                            && *(_DWORD *)(a4 + 6) == 6619251)
                                                          {
                                                            goto LABEL_3339;
                                                          }
                                                        }
                                                        else if ((_DWORD)v97 == 116)
                                                        {
                                                          if ((uint64_t)(v95 - a4) >= 7
                                                            && *(_DWORD *)(a4 + 2) == 7667826
                                                            && *(_WORD *)(a4 + 6) == 101)
                                                          {
                                                            goto LABEL_3344;
                                                          }
                                                        }
                                                        else if ((_DWORD)v97 == 110
                                                               && (uint64_t)(v95 - a4) >= 7
                                                               && *(_DWORD *)(a4 + 2) == 7078005
                                                               && *(_WORD *)(a4 + 6) == 108)
                                                        {
                                                          goto LABEL_3574;
                                                        }
                                                        *v1958 = (WTF::AtomStringImpl *)a4;
                                                        LODWORD(v465) = a4;
                                                        if (a4 < v95)
                                                        {
                                                          v465 = (unsigned __int16 *)a4;
                                                          do
                                                          {
                                                            v1604 = *v465;
                                                            v1606 = (v1604 | 0x20u) - 97 >= 0x1A
                                                                 && (v1604 - 48) >= 0xA
                                                                 && (v1604 - 8204) >= 2;
                                                            if (v1606 && v1604 != 95 && v1604 != 36)
                                                              break;
                                                            *v11 = ++v465;
                                                          }
                                                          while ((unint64_t)v465 < v95);
                                                        }
                                                        goto LABEL_3588;
                                                      }
                                                      if (v1367 != 6)
                                                      {
                                                        if (v1367 - 18 < 2)
                                                        {
LABEL_3050:
                                                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                                          v111 = *(_QWORD *)&v1965;
                                                          if (v1965 == 0.0)
                                                          {
                                                            __break(0xC471u);
                                                            JUMPOUT(0x198B2A8F8);
                                                          }
                                                          goto LABEL_3349;
                                                        }
                                                        goto LABEL_3309;
                                                      }
                                                      v1375 = v1292 ^ 1;
                                                      if ((_DWORD)v97 != 45)
                                                        v1375 = 1;
                                                      if ((v1375 & 1) != 0)
                                                      {
                                                        v1376 = 0;
                                                      }
                                                      else
                                                      {
                                                        *v11 = a4 + 2;
                                                        v1376 = 1;
                                                      }
                                                      v1377 = (unsigned __int16 *)(a4 + 2 * v1376);
                                                      if ((unint64_t)v1377 >= v95)
                                                        goto LABEL_3400;
                                                      v1378 = *v1377;
                                                      if (v1378 == 48)
                                                      {
                                                        v1381 = v1376 + 1;
LABEL_3062:
                                                        v138 = (unsigned __int16 *)(a4 + 2 * v1381);
                                                        *v11 = v138;
                                                        if ((unint64_t)v138 >= v95)
                                                          goto LABEL_3711;
                                                        v1382 = *v138;
                                                        if (v1382 == 101 || v1382 == 69)
                                                          goto LABEL_3711;
                                                        if (v1382 != 46)
                                                        {
                                                          if (v1381 <= 9)
                                                          {
                                                            *v10 = 6;
                                                            if ((_DWORD)v97 == 45)
                                                            {
                                                              if (v1381 < 2)
                                                                goto LABEL_3730;
                                                              a4 += 2;
                                                            }
                                                            v140 = 0;
                                                            do
                                                            {
                                                              v1383 = *(unsigned __int16 *)a4;
                                                              a4 += 2;
                                                              v140 = v1383 + 10 * v140 - 48;
                                                            }
                                                            while (a4 < (unint64_t)v138);
                                                            goto LABEL_3332;
                                                          }
LABEL_3711:
                                                          if ((unint64_t)v138 >= v95 || (*v138 | 0x20) != 0x65)
                                                            goto LABEL_3723;
                                                          v1633 = v138 + 1;
                                                          *v11 = v138 + 1;
                                                          if ((unint64_t)(v138 + 1) < v95)
                                                          {
                                                            v1634 = *v1633;
                                                            if (v1634 == 45 || v1634 == 43)
                                                            {
                                                              v1633 = v138 + 2;
                                                              *v11 = v138 + 2;
                                                            }
                                                          }
                                                          if ((unint64_t)v1633 < v95
                                                            && *v1633 - 48 <= 9)
                                                          {
                                                            v1635 = v1633 + 1;
                                                            do
                                                            {
                                                              v138 = v1635;
                                                              if ((unint64_t)v1635 >= v95)
                                                                break;
                                                              ++v1635;
                                                            }
                                                            while (*v138 - 48 < 0xA);
LABEL_3722:
                                                            *v11 = v138;
LABEL_3723:
                                                            *v10 = 6;
                                                            if ((uint64_t)((uint64_t)v138 - a4) <= -2)
                                                              goto LABEL_4442;
                                                            v1965 = 0.0;
                                                            fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v138, &v1965, 0x2E00000005);
                                                            v12.n128_f64[0] = v1965;
                                                            goto LABEL_3334;
                                                          }
                                                          goto LABEL_3725;
                                                        }
                                                        *v11 = v138 + 1;
                                                        if ((unint64_t)(v138 + 1) < v95
                                                          && v138[1] - 48 <= 9)
                                                        {
                                                          v1632 = a4 + 2 * v1381 + 4;
                                                          do
                                                          {
                                                            v138 = (unsigned __int16 *)v1632;
                                                            if (v1632 >= v95)
                                                              break;
                                                            v1632 += 2;
                                                          }
                                                          while (*v138 - 48 < 0xA);
                                                          *v11 = v138;
                                                          goto LABEL_3711;
                                                        }
LABEL_3769:
                                                        v1565 = WTF::fastCompactMalloc((WTF *)0x20);
                                                        v111 = v1565;
                                                        *(_QWORD *)v1565 = 0x2200000002;
                                                        v1566 = "Invalid digits after decimal point";
                                                        goto LABEL_3401;
                                                      }
                                                      if ((v1378 - 49) <= 8)
                                                      {
                                                        v1379 = v1376 + 1;
                                                        v1380 = 2 * v1376 + 2;
                                                        do
                                                        {
                                                          v1381 = v1379;
                                                          if (a4 + v1380 >= v95)
                                                            break;
                                                          ++v1379;
                                                          v1380 += 2;
                                                        }
                                                        while (*(unsigned __int16 *)(a4 + 2 * v1381) - 48 < 0xA);
                                                        goto LABEL_3062;
                                                      }
                                                      goto LABEL_3400;
                                                    case 7:
                                                      goto LABEL_4083;
                                                    case 8:
                                                      v1726 = WTF::fastCompactMalloc((WTF *)0x20);
                                                      v1734 = (WTF::StringImpl *)v1726;
                                                      *(_QWORD *)v1726 = 0x1400000002;
                                                      v1735 = "Unexpected token '('";
                                                      goto LABEL_4024;
                                                    case 9:
                                                      goto LABEL_4086;
                                                    case 10:
                                                      goto LABEL_4080;
                                                    case 11:
                                                      a4 = a1[6];
                                                      v1293 = a1[7];
                                                      if (a4 >= v1293)
                                                      {
                                                        v1295 = 0;
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v1294 = *(unsigned __int16 *)a4 <= 0xFFu
                                                               && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                                          v1295 = !v1294;
                                                          if (!v1294)
                                                            break;
                                                          a4 += 2;
                                                          *v11 = a4;
                                                        }
                                                        while (a4 < v1293);
                                                      }
                                                      if (a4 == v1293)
                                                      {
                                                        v1456 = 14;
                                                        goto LABEL_3209;
                                                      }
                                                      *v10 = 18;
                                                      v1425 = *(unsigned __int16 *)a4;
                                                      if (v1425 > 0xFF)
                                                        goto LABEL_3218;
                                                      v1426 = JSC::tokenTypesOfLatin1Characters[v1425];
                                                      if (v1426 <= 4)
                                                      {
                                                        if (v1426 == 4)
                                                        {
                                                          v1427 = *((unsigned __int8 *)a1 + 40);
                                                          if ((_DWORD)v1425 != 39)
                                                          {
                                                            v1428 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            if (!v1427)
                                                            {
                                                              v1429 = v1293 - v1428;
                                                              if ((uint64_t)(v1293 - v1428) <= -2)
                                                                goto LABEL_4442;
                                                              v1430 = (int16x8_t *)((v1429 & 0xFFFFFFFFFFFFFFFELL)
                                                                                  + a4
                                                                                  + 2);
                                                              if ((unint64_t)v1429 <= 0xE)
                                                              {
                                                                if (v1293 != v1428)
                                                                {
                                                                  v1658 = 2 * (v1429 >> 1);
                                                                  v1659 = (int16x8_t *)(a4 + 2);
                                                                  while (1)
                                                                  {
                                                                    v1660 = v1659->u16[0];
                                                                    if (v1660 <= 0xFF
                                                                      && !JSC::safeStringLatin1CharactersInStrictJSON[v1660])
                                                                    {
                                                                      break;
                                                                    }
                                                                    v1659 = (int16x8_t *)((char *)v1659 + 2);
                                                                    v1658 -= 2;
                                                                    if (!v1658)
                                                                      goto LABEL_3173;
                                                                  }
                                                                  v1430 = v1659;
                                                                }
                                                                goto LABEL_3173;
                                                              }
                                                              v1431 = a4 + 2;
                                                              if (v1429 < 15)
                                                              {
LABEL_3164:
                                                                if (v1431 >= (unint64_t)v1430)
                                                                  goto LABEL_3173;
                                                                v1438 = (unsigned __int16 *)&v1430[-1];
                                                                v1439 = v1430[-1];
                                                                v1440.i64[0] = 0x22002200220022;
                                                                v1440.i64[1] = 0x22002200220022;
                                                                v1441 = (int8x16_t)vceqq_s16(v1439, v1440);
                                                                v1442.i64[0] = 0x5C005C005C005CLL;
                                                                v1442.i64[1] = 0x5C005C005C005CLL;
                                                                v1443.i64[0] = 0x20002000200020;
                                                                v1443.i64[1] = 0x20002000200020;
                                                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1439, v1442), (int8x16_t)vcgtq_u16(v1443, (uint16x8_t)v1439)), v1441);
                                                                v1441.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                if (!v1441.i32[0])
                                                                  goto LABEL_3173;
                                                              }
                                                              else
                                                              {
                                                                v1432 = a4 + 16;
                                                                while (1)
                                                                {
                                                                  v1433 = *(int16x8_t *)(v1432 - 14);
                                                                  v1434.i64[0] = 0x22002200220022;
                                                                  v1434.i64[1] = 0x22002200220022;
                                                                  v1435 = (int8x16_t)vceqq_s16(v1433, v1434);
                                                                  v1436.i64[0] = 0x5C005C005C005CLL;
                                                                  v1436.i64[1] = 0x5C005C005C005CLL;
                                                                  v1437.i64[0] = 0x20002000200020;
                                                                  v1437.i64[1] = 0x20002000200020;
                                                                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1433, v1436), (int8x16_t)vcgtq_u16(v1437, (uint16x8_t)v1433)), v1435);
                                                                  v1435.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                  if (v1435.i32[0])
                                                                    break;
                                                                  v1432 += 16;
                                                                  if (v1432 >= (unint64_t)v1430)
                                                                  {
                                                                    v1431 = v1432 - 14;
                                                                    goto LABEL_3164;
                                                                  }
                                                                }
                                                                v1438 = (unsigned __int16 *)(v1432 - 14);
                                                              }
                                                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                                              v1430 = (int16x8_t *)&v1438[v12.n128_u8[0]];
LABEL_3173:
                                                              *v11 = v1430;
LABEL_3174:
                                                              if ((unint64_t)v1430 >= v1293
                                                                || v1430->u16[0] != (_DWORD)v1425)
                                                              {
                                                                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1428, v1425, a5, a6, a7, a8);
                                                                goto LABEL_3210;
                                                              }
                                                              *((_BYTE *)a1 + 25) &= ~1u;
                                                              a1[4] = v1428;
                                                              a1[6] = (uint64_t)v1430->i64 + 2;
                                                              *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1430 - v1428) >> 1);
                                                              v1444 = 4;
                                                              goto LABEL_3177;
                                                            }
LABEL_3820:
                                                            v1430 = (int16x8_t *)v1428;
                                                            if (v1428 < v1293)
                                                            {
                                                              while (1)
                                                              {
                                                                v1653 = v1430->u16[0];
                                                                if (v1653 < 0x20)
                                                                {
                                                                  if (v1653 != 9)
                                                                    goto LABEL_3174;
                                                                }
                                                                else if (v1653 == (_DWORD)v1425
                                                                       || v1653 > 0xFF
                                                                       || v1653 == 92)
                                                                {
                                                                  goto LABEL_3174;
                                                                }
                                                                v1430 = (int16x8_t *)((char *)v1430 + 2);
                                                                *v11 = v1430;
                                                                if ((unint64_t)v1430 >= v1293)
                                                                  goto LABEL_3174;
                                                              }
                                                            }
                                                            v1430 = (int16x8_t *)v1428;
                                                            goto LABEL_3174;
                                                          }
                                                          if (*((_BYTE *)a1 + 40))
                                                          {
                                                            v1428 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            goto LABEL_3820;
                                                          }
                                                          v1609 = WTF::fastCompactMalloc((WTF *)0x20);
                                                          v1477 = v1609;
                                                          v12.n128_u64[0] = 0x2900000002;
                                                          *(_QWORD *)v1609 = 0x2900000002;
                                                          v1610 = "Single quotes (') are not allowed in JSON";
                                                          goto LABEL_3865;
                                                        }
LABEL_3170:
                                                        *v10 = v1426;
                                                        *v11 = a4 + 2;
LABEL_3210:
                                                        v9 = 7;
                                                        goto LABEL_3312;
                                                      }
                                                      if (v1426 != 5)
                                                      {
                                                        if (v1426 != 6)
                                                        {
                                                          if (v1426 - 18 >= 2)
                                                            goto LABEL_3170;
LABEL_3218:
                                                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                                          v1477 = *(_QWORD *)&v1965;
                                                          if (v1965 == 0.0)
                                                          {
                                                            __break(0xC471u);
                                                            JUMPOUT(0x198B2A8B0);
                                                          }
                                                          goto LABEL_3219;
                                                        }
                                                        v1445 = v1295 ^ 1;
                                                        if ((_DWORD)v1425 != 45)
                                                          v1445 = 1;
                                                        if ((v1445 & 1) != 0)
                                                        {
                                                          v1446 = 0;
                                                        }
                                                        else
                                                        {
                                                          *v11 = a4 + 2;
                                                          v1446 = 1;
                                                        }
                                                        v1447 = (unsigned __int16 *)(a4 + 2 * v1446);
                                                        if ((unint64_t)v1447 < v1293)
                                                        {
                                                          v1448 = *v1447;
                                                          if (v1448 == 48)
                                                          {
                                                            v1451 = v1446 + 1;
LABEL_3188:
                                                            v1452 = (unsigned __int16 *)(a4 + 2 * v1451);
                                                            *v11 = v1452;
                                                            if ((unint64_t)v1452 < v1293)
                                                            {
                                                              v1453 = *v1452;
                                                              if (v1453 != 101 && v1453 != 69)
                                                              {
                                                                if (v1453 == 46)
                                                                {
                                                                  *v11 = v1452 + 1;
                                                                  if ((unint64_t)(v1452 + 1) >= v1293
                                                                    || v1452[1] - 48 > 9)
                                                                  {
                                                                    v1609 = WTF::fastCompactMalloc((WTF *)0x20);
                                                                    v1477 = v1609;
                                                                    *(_QWORD *)v1609 = 0x2200000002;
                                                                    v1610 = "Invalid digits after decimal point";
                                                                    goto LABEL_3865;
                                                                  }
                                                                  v1654 = a4 + 2 * v1451 + 4;
                                                                  do
                                                                  {
                                                                    v1452 = (unsigned __int16 *)v1654;
                                                                    if (v1654 >= v1293)
                                                                      break;
                                                                    v1654 += 2;
                                                                  }
                                                                  while (*v1452 - 48 < 0xA);
                                                                  *v11 = v1452;
                                                                }
                                                                else if (v1451 <= 9)
                                                                {
                                                                  *v10 = 6;
                                                                  if ((_DWORD)v1425 == 45)
                                                                  {
                                                                    if (v1451 < 2)
                                                                      goto LABEL_3866;
                                                                    a4 += 2;
                                                                  }
                                                                  v1454 = 0;
                                                                  do
                                                                  {
                                                                    v1455 = *(unsigned __int16 *)a4;
                                                                    a4 += 2;
                                                                    v1454 = v1455 + 10 * v1454 - 48;
                                                                  }
                                                                  while (a4 < (unint64_t)v1452);
                                                                  if ((_DWORD)v1425 != 45)
                                                                  {
                                                                    v12.n128_f64[0] = (double)v1454;
LABEL_3198:
                                                                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                                                    goto LABEL_3210;
                                                                  }
                                                                  if (v1454)
                                                                  {
                                                                    v12.n128_f64[0] = (double)-v1454;
                                                                    goto LABEL_3198;
                                                                  }
LABEL_3866:
                                                                  *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                                                  goto LABEL_3210;
                                                                }
                                                              }
                                                            }
                                                            if ((unint64_t)v1452 >= v1293
                                                              || (*v1452 | 0x20) != 0x65)
                                                            {
LABEL_3848:
                                                              *v10 = 6;
                                                              if ((uint64_t)((uint64_t)v1452 - a4) <= -2)
                                                                goto LABEL_4442;
                                                              v1965 = 0.0;
                                                              fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1452, &v1965, 0x2E00000005);
                                                              v12.n128_f64[0] = v1965;
                                                              goto LABEL_3198;
                                                            }
                                                            v1655 = v1452 + 1;
                                                            *v11 = v1452 + 1;
                                                            if ((unint64_t)(v1452 + 1) < v1293)
                                                            {
                                                              v1656 = *v1655;
                                                              if (v1656 == 45 || v1656 == 43)
                                                              {
                                                                v1655 = v1452 + 2;
                                                                *v11 = v1452 + 2;
                                                              }
                                                            }
                                                            if ((unint64_t)v1655 < v1293
                                                              && *v1655 - 48 <= 9)
                                                            {
                                                              v1657 = v1655 + 1;
                                                              do
                                                              {
                                                                v1452 = v1657;
                                                                if ((unint64_t)v1657 >= v1293)
                                                                  break;
                                                                ++v1657;
                                                              }
                                                              while (*v1452 - 48 < 0xA);
                                                              *v11 = v1452;
                                                              goto LABEL_3848;
                                                            }
                                                            v1609 = WTF::fastCompactMalloc((WTF *)0x20);
                                                            v1477 = v1609;
                                                            v12.n128_u64[0] = 0x5D00000002;
                                                            *(_QWORD *)v1609 = 0x5D00000002;
                                                            v1610 = "Exponent symbols should be followed by an optional '"
                                                                    "+' or '-' and then by at least one number";
LABEL_3865:
                                                            *(_QWORD *)(v1609 + 8) = v1610;
                                                            *(_DWORD *)(v1609 + 16) = 4;
LABEL_3219:
                                                            v1478 = *v1951;
                                                            *v1951 = (WTF::StringImpl *)v1477;
                                                            if (v1478)
                                                            {
                                                              if (*(_DWORD *)v1478 == 2)
                                                              {
                                                                WTF::StringImpl::~StringImpl(v1478, (WTF::AtomStringImpl *)a2, v1476, a4, a5, a6, a7, a8);
                                                                WTF::fastFree(v1487, v1488, v1489, v1490, v1491, v1492, v1493, v1494);
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)v1478 -= 2;
                                                              }
                                                            }
                                                            goto LABEL_3210;
                                                          }
                                                          if ((v1448 - 49) <= 8)
                                                          {
                                                            v1449 = v1446 + 1;
                                                            v1450 = 2 * v1446 + 2;
                                                            do
                                                            {
                                                              v1451 = v1449;
                                                              if (a4 + v1450 >= v1293)
                                                                break;
                                                              ++v1449;
                                                              v1450 += 2;
                                                            }
                                                            while (*(unsigned __int16 *)(a4 + 2 * v1451)
                                                                  - 48 < 0xA);
                                                            goto LABEL_3188;
                                                          }
                                                        }
                                                        v1609 = WTF::fastCompactMalloc((WTF *)0x20);
                                                        v1477 = v1609;
                                                        *(_QWORD *)v1609 = 0xE00000002;
                                                        v1610 = "Invalid number";
                                                        goto LABEL_3865;
                                                      }
                                                      if ((_DWORD)v1425 == 102)
                                                      {
                                                        if ((uint64_t)(v1293 - a4) >= 9
                                                          && *(_DWORD *)(a4 + 2) == 7077985
                                                          && *(_DWORD *)(a4 + 6) == 6619251)
                                                        {
                                                          *v11 = a4 + 10;
                                                          v1456 = 12;
LABEL_3209:
                                                          *v10 = v1456;
                                                          goto LABEL_3210;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1425 == 116)
                                                      {
                                                        if ((uint64_t)(v1293 - a4) >= 7
                                                          && *(_DWORD *)(a4 + 2) == 7667826
                                                          && *(_WORD *)(a4 + 6) == 101)
                                                        {
                                                          *v11 = a4 + 8;
                                                          v1456 = 11;
                                                          goto LABEL_3209;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1425 == 110
                                                             && (uint64_t)(v1293 - a4) >= 7
                                                             && *(_DWORD *)(a4 + 2) == 7078005
                                                             && *(_WORD *)(a4 + 6) == 108)
                                                      {
                                                        *v11 = a4 + 8;
                                                        v1456 = 13;
                                                        goto LABEL_3209;
                                                      }
                                                      *v1958 = (WTF::AtomStringImpl *)a4;
                                                      LODWORD(v1640) = a4;
                                                      if (a4 < v1293)
                                                      {
                                                        v1640 = (unsigned __int16 *)a4;
                                                        do
                                                        {
                                                          v1641 = *v1640;
                                                          v1643 = (v1641 | 0x20u) - 97 >= 0x1A
                                                               && (v1641 - 48) >= 0xA
                                                               && (v1641 - 8204) >= 2;
                                                          if (v1643 && v1641 != 95 && v1641 != 36)
                                                            break;
                                                          *v11 = ++v1640;
                                                        }
                                                        while ((unint64_t)v1640 < v1293);
                                                      }
                                                      *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1640 - a4) >> 1);
                                                      v1444 = 5;
LABEL_3177:
                                                      *((_BYTE *)a1 + 24) = v1444;
                                                      goto LABEL_3210;
                                                    case 12:
                                                      a4 = a1[6];
                                                      v1288 = a1[7];
                                                      if (a4 >= v1288)
                                                      {
                                                        v1290 = 0;
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v1289 = *(unsigned __int16 *)a4 <= 0xFFu
                                                               && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                                          v1290 = !v1289;
                                                          if (!v1289)
                                                            break;
                                                          a4 += 2;
                                                          *v11 = a4;
                                                        }
                                                        while (a4 < v1288);
                                                      }
                                                      if (a4 == v1288)
                                                      {
                                                        v1423 = 14;
                                                        goto LABEL_3143;
                                                      }
                                                      *v10 = 18;
                                                      v1392 = *(unsigned __int16 *)a4;
                                                      if (v1392 > 0xFF)
                                                        goto LABEL_3214;
                                                      v1393 = JSC::tokenTypesOfLatin1Characters[v1392];
                                                      if (v1393 <= 4)
                                                      {
                                                        if (v1393 == 4)
                                                        {
                                                          v1394 = *((unsigned __int8 *)a1 + 40);
                                                          if ((_DWORD)v1392 != 39)
                                                          {
                                                            v1395 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            if (!v1394)
                                                            {
                                                              v1396 = v1288 - v1395;
                                                              if ((uint64_t)(v1288 - v1395) <= -2)
                                                                goto LABEL_4442;
                                                              v1397 = (int16x8_t *)((v1396 & 0xFFFFFFFFFFFFFFFELL)
                                                                                  + a4
                                                                                  + 2);
                                                              if ((unint64_t)v1396 <= 0xE)
                                                              {
                                                                if (v1288 != v1395)
                                                                {
                                                                  v1650 = 2 * (v1396 >> 1);
                                                                  v1651 = (int16x8_t *)(a4 + 2);
                                                                  while (1)
                                                                  {
                                                                    v1652 = v1651->u16[0];
                                                                    if (v1652 <= 0xFF
                                                                      && !JSC::safeStringLatin1CharactersInStrictJSON[v1652])
                                                                    {
                                                                      break;
                                                                    }
                                                                    v1651 = (int16x8_t *)((char *)v1651 + 2);
                                                                    v1650 -= 2;
                                                                    if (!v1650)
                                                                      goto LABEL_3107;
                                                                  }
                                                                  v1397 = v1651;
                                                                }
                                                                goto LABEL_3107;
                                                              }
                                                              v1398 = a4 + 2;
                                                              if (v1396 < 15)
                                                              {
LABEL_3098:
                                                                if (v1398 >= (unint64_t)v1397)
                                                                  goto LABEL_3107;
                                                                v1405 = (unsigned __int16 *)&v1397[-1];
                                                                v1406 = v1397[-1];
                                                                v1407.i64[0] = 0x22002200220022;
                                                                v1407.i64[1] = 0x22002200220022;
                                                                v1408 = (int8x16_t)vceqq_s16(v1406, v1407);
                                                                v1409.i64[0] = 0x5C005C005C005CLL;
                                                                v1409.i64[1] = 0x5C005C005C005CLL;
                                                                v1410.i64[0] = 0x20002000200020;
                                                                v1410.i64[1] = 0x20002000200020;
                                                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1406, v1409), (int8x16_t)vcgtq_u16(v1410, (uint16x8_t)v1406)), v1408);
                                                                v1408.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                if (!v1408.i32[0])
                                                                  goto LABEL_3107;
                                                              }
                                                              else
                                                              {
                                                                v1399 = a4 + 16;
                                                                while (1)
                                                                {
                                                                  v1400 = *(int16x8_t *)(v1399 - 14);
                                                                  v1401.i64[0] = 0x22002200220022;
                                                                  v1401.i64[1] = 0x22002200220022;
                                                                  v1402 = (int8x16_t)vceqq_s16(v1400, v1401);
                                                                  v1403.i64[0] = 0x5C005C005C005CLL;
                                                                  v1403.i64[1] = 0x5C005C005C005CLL;
                                                                  v1404.i64[0] = 0x20002000200020;
                                                                  v1404.i64[1] = 0x20002000200020;
                                                                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1400, v1403), (int8x16_t)vcgtq_u16(v1404, (uint16x8_t)v1400)), v1402);
                                                                  v1402.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                  if (v1402.i32[0])
                                                                    break;
                                                                  v1399 += 16;
                                                                  if (v1399 >= (unint64_t)v1397)
                                                                  {
                                                                    v1398 = v1399 - 14;
                                                                    goto LABEL_3098;
                                                                  }
                                                                }
                                                                v1405 = (unsigned __int16 *)(v1399 - 14);
                                                              }
                                                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                                              v1397 = (int16x8_t *)&v1405[v12.n128_u8[0]];
LABEL_3107:
                                                              *v11 = v1397;
LABEL_3108:
                                                              if ((unint64_t)v1397 >= v1288
                                                                || v1397->u16[0] != (_DWORD)v1392)
                                                              {
                                                                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1395, v1392, a5, a6, a7, a8);
                                                                goto LABEL_3144;
                                                              }
                                                              *((_BYTE *)a1 + 25) &= ~1u;
                                                              a1[4] = v1395;
                                                              a1[6] = (uint64_t)v1397->i64 + 2;
                                                              *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1397 - v1395) >> 1);
                                                              v1411 = 4;
                                                              goto LABEL_3111;
                                                            }
LABEL_3775:
                                                            v1397 = (int16x8_t *)v1395;
                                                            if (v1395 < v1288)
                                                            {
                                                              while (1)
                                                              {
                                                                v1645 = v1397->u16[0];
                                                                if (v1645 < 0x20)
                                                                {
                                                                  if (v1645 != 9)
                                                                    goto LABEL_3108;
                                                                }
                                                                else if (v1645 == (_DWORD)v1392
                                                                       || v1645 > 0xFF
                                                                       || v1645 == 92)
                                                                {
                                                                  goto LABEL_3108;
                                                                }
                                                                v1397 = (int16x8_t *)((char *)v1397 + 2);
                                                                *v11 = v1397;
                                                                if ((unint64_t)v1397 >= v1288)
                                                                  goto LABEL_3108;
                                                              }
                                                            }
                                                            v1397 = (int16x8_t *)v1395;
                                                            goto LABEL_3108;
                                                          }
                                                          if (*((_BYTE *)a1 + 40))
                                                          {
                                                            v1395 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            goto LABEL_3775;
                                                          }
                                                          v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                                          v1474 = v1607;
                                                          v12.n128_u64[0] = 0x2900000002;
                                                          *(_QWORD *)v1607 = 0x2900000002;
                                                          v1608 = "Single quotes (') are not allowed in JSON";
                                                          goto LABEL_3862;
                                                        }
LABEL_3104:
                                                        *v10 = v1393;
                                                        *v11 = a4 + 2;
LABEL_3144:
                                                        v9 = 6;
                                                        goto LABEL_3312;
                                                      }
                                                      if (v1393 != 5)
                                                      {
                                                        if (v1393 != 6)
                                                        {
                                                          if (v1393 - 18 >= 2)
                                                            goto LABEL_3104;
LABEL_3214:
                                                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                                          v1474 = *(_QWORD *)&v1965;
                                                          if (v1965 == 0.0)
                                                          {
                                                            __break(0xC471u);
                                                            JUMPOUT(0x198B2A8A8);
                                                          }
                                                          goto LABEL_3215;
                                                        }
                                                        v1412 = v1290 ^ 1;
                                                        if ((_DWORD)v1392 != 45)
                                                          v1412 = 1;
                                                        if ((v1412 & 1) != 0)
                                                        {
                                                          v1413 = 0;
                                                        }
                                                        else
                                                        {
                                                          *v11 = a4 + 2;
                                                          v1413 = 1;
                                                        }
                                                        v1414 = (unsigned __int16 *)(a4 + 2 * v1413);
                                                        if ((unint64_t)v1414 < v1288)
                                                        {
                                                          v1415 = *v1414;
                                                          if (v1415 == 48)
                                                          {
                                                            v1418 = v1413 + 1;
LABEL_3122:
                                                            v1419 = (unsigned __int16 *)(a4 + 2 * v1418);
                                                            *v11 = v1419;
                                                            if ((unint64_t)v1419 < v1288)
                                                            {
                                                              v1420 = *v1419;
                                                              if (v1420 != 101 && v1420 != 69)
                                                              {
                                                                if (v1420 == 46)
                                                                {
                                                                  *v11 = v1419 + 1;
                                                                  if ((unint64_t)(v1419 + 1) >= v1288
                                                                    || v1419[1] - 48 > 9)
                                                                  {
                                                                    v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                                                    v1474 = v1607;
                                                                    *(_QWORD *)v1607 = 0x2200000002;
                                                                    v1608 = "Invalid digits after decimal point";
                                                                    goto LABEL_3862;
                                                                  }
                                                                  v1646 = a4 + 2 * v1418 + 4;
                                                                  do
                                                                  {
                                                                    v1419 = (unsigned __int16 *)v1646;
                                                                    if (v1646 >= v1288)
                                                                      break;
                                                                    v1646 += 2;
                                                                  }
                                                                  while (*v1419 - 48 < 0xA);
                                                                  *v11 = v1419;
                                                                }
                                                                else if (v1418 <= 9)
                                                                {
                                                                  *v10 = 6;
                                                                  if ((_DWORD)v1392 == 45)
                                                                  {
                                                                    if (v1418 < 2)
                                                                      goto LABEL_3863;
                                                                    a4 += 2;
                                                                  }
                                                                  v1421 = 0;
                                                                  do
                                                                  {
                                                                    v1422 = *(unsigned __int16 *)a4;
                                                                    a4 += 2;
                                                                    v1421 = v1422 + 10 * v1421 - 48;
                                                                  }
                                                                  while (a4 < (unint64_t)v1419);
                                                                  if ((_DWORD)v1392 != 45)
                                                                  {
                                                                    v12.n128_f64[0] = (double)v1421;
LABEL_3132:
                                                                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                                                    goto LABEL_3144;
                                                                  }
                                                                  if (v1421)
                                                                  {
                                                                    v12.n128_f64[0] = (double)-v1421;
                                                                    goto LABEL_3132;
                                                                  }
LABEL_3863:
                                                                  *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                                                  goto LABEL_3144;
                                                                }
                                                              }
                                                            }
                                                            if ((unint64_t)v1419 >= v1288
                                                              || (*v1419 | 0x20) != 0x65)
                                                            {
LABEL_3803:
                                                              *v10 = 6;
                                                              if ((uint64_t)((uint64_t)v1419 - a4) <= -2)
                                                                goto LABEL_4442;
                                                              v1965 = 0.0;
                                                              fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1419, &v1965, 0x2E00000005);
                                                              v12.n128_f64[0] = v1965;
                                                              goto LABEL_3132;
                                                            }
                                                            v1647 = v1419 + 1;
                                                            *v11 = v1419 + 1;
                                                            if ((unint64_t)(v1419 + 1) < v1288)
                                                            {
                                                              v1648 = *v1647;
                                                              if (v1648 == 45 || v1648 == 43)
                                                              {
                                                                v1647 = v1419 + 2;
                                                                *v11 = v1419 + 2;
                                                              }
                                                            }
                                                            if ((unint64_t)v1647 < v1288
                                                              && *v1647 - 48 <= 9)
                                                            {
                                                              v1649 = v1647 + 1;
                                                              do
                                                              {
                                                                v1419 = v1649;
                                                                if ((unint64_t)v1649 >= v1288)
                                                                  break;
                                                                ++v1649;
                                                              }
                                                              while (*v1419 - 48 < 0xA);
                                                              *v11 = v1419;
                                                              goto LABEL_3803;
                                                            }
                                                            v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                                            v1474 = v1607;
                                                            v12.n128_u64[0] = 0x5D00000002;
                                                            *(_QWORD *)v1607 = 0x5D00000002;
                                                            v1608 = "Exponent symbols should be followed by an optional '"
                                                                    "+' or '-' and then by at least one number";
LABEL_3862:
                                                            *(_QWORD *)(v1607 + 8) = v1608;
                                                            *(_DWORD *)(v1607 + 16) = 4;
LABEL_3215:
                                                            v1475 = *v1951;
                                                            *v1951 = (WTF::StringImpl *)v1474;
                                                            if (v1475)
                                                            {
                                                              if (*(_DWORD *)v1475 == 2)
                                                              {
                                                                WTF::StringImpl::~StringImpl(v1475, (WTF::AtomStringImpl *)a2, v1473, a4, a5, a6, a7, a8);
                                                                WTF::fastFree(v1479, v1480, v1481, v1482, v1483, v1484, v1485, v1486);
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)v1475 -= 2;
                                                              }
                                                            }
                                                            goto LABEL_3144;
                                                          }
                                                          if ((v1415 - 49) <= 8)
                                                          {
                                                            v1416 = v1413 + 1;
                                                            v1417 = 2 * v1413 + 2;
                                                            do
                                                            {
                                                              v1418 = v1416;
                                                              if (a4 + v1417 >= v1288)
                                                                break;
                                                              ++v1416;
                                                              v1417 += 2;
                                                            }
                                                            while (*(unsigned __int16 *)(a4 + 2 * v1418)
                                                                  - 48 < 0xA);
                                                            goto LABEL_3122;
                                                          }
                                                        }
                                                        v1607 = WTF::fastCompactMalloc((WTF *)0x20);
                                                        v1474 = v1607;
                                                        *(_QWORD *)v1607 = 0xE00000002;
                                                        v1608 = "Invalid number";
                                                        goto LABEL_3862;
                                                      }
                                                      if ((_DWORD)v1392 == 102)
                                                      {
                                                        if ((uint64_t)(v1288 - a4) >= 9
                                                          && *(_DWORD *)(a4 + 2) == 7077985
                                                          && *(_DWORD *)(a4 + 6) == 6619251)
                                                        {
                                                          *v11 = a4 + 10;
                                                          v1423 = 12;
LABEL_3143:
                                                          *v10 = v1423;
                                                          goto LABEL_3144;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1392 == 116)
                                                      {
                                                        if ((uint64_t)(v1288 - a4) >= 7
                                                          && *(_DWORD *)(a4 + 2) == 7667826
                                                          && *(_WORD *)(a4 + 6) == 101)
                                                        {
                                                          *v11 = a4 + 8;
                                                          v1423 = 11;
                                                          goto LABEL_3143;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1392 == 110
                                                             && (uint64_t)(v1288 - a4) >= 7
                                                             && *(_DWORD *)(a4 + 2) == 7078005
                                                             && *(_WORD *)(a4 + 6) == 108)
                                                      {
                                                        *v11 = a4 + 8;
                                                        v1423 = 13;
                                                        goto LABEL_3143;
                                                      }
                                                      *v1958 = (WTF::AtomStringImpl *)a4;
                                                      LODWORD(v1618) = a4;
                                                      if (a4 < v1288)
                                                      {
                                                        v1618 = (unsigned __int16 *)a4;
                                                        do
                                                        {
                                                          v1619 = *v1618;
                                                          v1621 = (v1619 | 0x20u) - 97 >= 0x1A
                                                               && (v1619 - 48) >= 0xA
                                                               && (v1619 - 8204) >= 2;
                                                          if (v1621 && v1619 != 95 && v1619 != 36)
                                                            break;
                                                          *v11 = ++v1618;
                                                        }
                                                        while ((unint64_t)v1618 < v1288);
                                                      }
                                                      *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1618 - a4) >> 1);
                                                      v1411 = 5;
LABEL_3111:
                                                      *((_BYTE *)a1 + 24) = v1411;
                                                      goto LABEL_3144;
                                                    case 13:
                                                      a4 = a1[6];
                                                      v1500 = a1[7];
                                                      if (a4 >= v1500)
                                                      {
                                                        v1502 = 0;
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v1501 = *(unsigned __int16 *)a4 <= 0xFFu
                                                               && JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] == 19;
                                                          v1502 = !v1501;
                                                          if (!v1501)
                                                            break;
                                                          a4 += 2;
                                                          *v11 = a4;
                                                        }
                                                        while (a4 < v1500);
                                                      }
                                                      if (a4 == v1500)
                                                      {
                                                        v1700 = 14;
                                                        goto LABEL_3934;
                                                      }
                                                      *v10 = 18;
                                                      v1669 = *(unsigned __int16 *)a4;
                                                      if (v1669 > 0xFF)
                                                        goto LABEL_3937;
                                                      v1670 = JSC::tokenTypesOfLatin1Characters[v1669];
                                                      if (v1670 <= 4)
                                                      {
                                                        if (v1670 == 4)
                                                        {
                                                          v1671 = *((unsigned __int8 *)a1 + 40);
                                                          if ((_DWORD)v1669 != 39)
                                                          {
                                                            v1672 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            if (!v1671)
                                                            {
                                                              v1673 = v1500 - v1672;
                                                              if ((uint64_t)(v1500 - v1672) <= -2)
                                                                goto LABEL_4442;
                                                              v1674 = (int16x8_t *)((v1673 & 0xFFFFFFFFFFFFFFFELL)
                                                                                  + a4
                                                                                  + 2);
                                                              if ((unint64_t)v1673 <= 0xE)
                                                              {
                                                                if (v1500 != v1672)
                                                                {
                                                                  v1723 = 2 * (v1673 >> 1);
                                                                  v1724 = (int16x8_t *)(a4 + 2);
                                                                  while (1)
                                                                  {
                                                                    v1725 = v1724->u16[0];
                                                                    if (v1725 <= 0xFF
                                                                      && !JSC::safeStringLatin1CharactersInStrictJSON[v1725])
                                                                    {
                                                                      break;
                                                                    }
                                                                    v1724 = (int16x8_t *)((char *)v1724 + 2);
                                                                    v1723 -= 2;
                                                                    if (!v1723)
                                                                      goto LABEL_3898;
                                                                  }
                                                                  v1674 = v1724;
                                                                }
                                                                goto LABEL_3898;
                                                              }
                                                              v1675 = a4 + 2;
                                                              if (v1673 < 15)
                                                              {
LABEL_3889:
                                                                if (v1675 >= (unint64_t)v1674)
                                                                  goto LABEL_3898;
                                                                v1682 = (unsigned __int16 *)&v1674[-1];
                                                                v1683 = v1674[-1];
                                                                v1684.i64[0] = 0x22002200220022;
                                                                v1684.i64[1] = 0x22002200220022;
                                                                v1685 = (int8x16_t)vceqq_s16(v1683, v1684);
                                                                v1686.i64[0] = 0x5C005C005C005CLL;
                                                                v1686.i64[1] = 0x5C005C005C005CLL;
                                                                v1687.i64[0] = 0x20002000200020;
                                                                v1687.i64[1] = 0x20002000200020;
                                                                v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1683, v1686), (int8x16_t)vcgtq_u16(v1687, (uint16x8_t)v1683)), v1685);
                                                                v1685.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                if (!v1685.i32[0])
                                                                  goto LABEL_3898;
                                                              }
                                                              else
                                                              {
                                                                v1676 = a4 + 16;
                                                                while (1)
                                                                {
                                                                  v1677 = *(int16x8_t *)(v1676 - 14);
                                                                  v1678.i64[0] = 0x22002200220022;
                                                                  v1678.i64[1] = 0x22002200220022;
                                                                  v1679 = (int8x16_t)vceqq_s16(v1677, v1678);
                                                                  v1680.i64[0] = 0x5C005C005C005CLL;
                                                                  v1680.i64[1] = 0x5C005C005C005CLL;
                                                                  v1681.i64[0] = 0x20002000200020;
                                                                  v1681.i64[1] = 0x20002000200020;
                                                                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1677, v1680), (int8x16_t)vcgtq_u16(v1681, (uint16x8_t)v1677)), v1679);
                                                                  v1679.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                                                                  if (v1679.i32[0])
                                                                    break;
                                                                  v1676 += 16;
                                                                  if (v1676 >= (unint64_t)v1674)
                                                                  {
                                                                    v1675 = v1676 - 14;
                                                                    goto LABEL_3889;
                                                                  }
                                                                }
                                                                v1682 = (unsigned __int16 *)(v1676 - 14);
                                                              }
                                                              v12 = (__n128)vornq_s8((int8x16_t)xmmword_199123280, (int8x16_t)v12);
                                                              v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                                              v1674 = (int16x8_t *)&v1682[v12.n128_u8[0]];
LABEL_3898:
                                                              *v11 = v1674;
LABEL_3899:
                                                              if ((unint64_t)v1674 >= v1500
                                                                || v1674->u16[0] != (_DWORD)v1669)
                                                              {
                                                                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1951, (uint64_t)v10, v1672, v1669, a5, a6, a7, a8);
                                                                goto LABEL_3935;
                                                              }
                                                              *((_BYTE *)a1 + 25) &= ~1u;
                                                              a1[4] = v1672;
                                                              a1[6] = (uint64_t)v1674->i64 + 2;
                                                              *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1674 - v1672) >> 1);
                                                              v1688 = 4;
                                                              goto LABEL_3902;
                                                            }
LABEL_3972:
                                                            v1674 = (int16x8_t *)v1672;
                                                            if (v1672 < v1500)
                                                            {
                                                              while (1)
                                                              {
                                                                v1718 = v1674->u16[0];
                                                                if (v1718 < 0x20)
                                                                {
                                                                  if (v1718 != 9)
                                                                    goto LABEL_3899;
                                                                }
                                                                else if (v1718 == (_DWORD)v1669
                                                                       || v1718 > 0xFF
                                                                       || v1718 == 92)
                                                                {
                                                                  goto LABEL_3899;
                                                                }
                                                                v1674 = (int16x8_t *)((char *)v1674 + 2);
                                                                *v11 = v1674;
                                                                if ((unint64_t)v1674 >= v1500)
                                                                  goto LABEL_3899;
                                                              }
                                                            }
                                                            v1674 = (int16x8_t *)v1672;
                                                            goto LABEL_3899;
                                                          }
                                                          if (*((_BYTE *)a1 + 40))
                                                          {
                                                            v1672 = a4 + 2;
                                                            *v11 = a4 + 2;
                                                            goto LABEL_3972;
                                                          }
                                                          v1712 = WTF::fastCompactMalloc((WTF *)0x20);
                                                          v1702 = v1712;
                                                          v12.n128_u64[0] = 0x2900000002;
                                                          *(_QWORD *)v1712 = 0x2900000002;
                                                          v1713 = "Single quotes (') are not allowed in JSON";
                                                          goto LABEL_4015;
                                                        }
LABEL_3895:
                                                        *v10 = v1670;
                                                        *v11 = a4 + 2;
LABEL_3935:
                                                        v9 = 2;
                                                        goto LABEL_3312;
                                                      }
                                                      if (v1670 != 5)
                                                      {
                                                        if (v1670 != 6)
                                                        {
                                                          if (v1670 - 18 >= 2)
                                                            goto LABEL_3895;
LABEL_3937:
                                                          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
                                                          v1702 = *(_QWORD *)&v1965;
                                                          if (v1965 == 0.0)
                                                          {
                                                            __break(0xC471u);
                                                            JUMPOUT(0x198B2A8A0);
                                                          }
                                                          goto LABEL_3938;
                                                        }
                                                        v1689 = v1502 ^ 1;
                                                        if ((_DWORD)v1669 != 45)
                                                          v1689 = 1;
                                                        if ((v1689 & 1) != 0)
                                                        {
                                                          v1690 = 0;
                                                        }
                                                        else
                                                        {
                                                          *v11 = a4 + 2;
                                                          v1690 = 1;
                                                        }
                                                        v1691 = (unsigned __int16 *)(a4 + 2 * v1690);
                                                        if ((unint64_t)v1691 < v1500)
                                                        {
                                                          v1692 = *v1691;
                                                          if (v1692 == 48)
                                                          {
                                                            v1695 = v1690 + 1;
LABEL_3913:
                                                            v1696 = (unsigned __int16 *)(a4 + 2 * v1695);
                                                            *v11 = v1696;
                                                            if ((unint64_t)v1696 < v1500)
                                                            {
                                                              v1697 = *v1696;
                                                              if (v1697 != 101 && v1697 != 69)
                                                              {
                                                                if (v1697 == 46)
                                                                {
                                                                  *v11 = v1696 + 1;
                                                                  if ((unint64_t)(v1696 + 1) >= v1500
                                                                    || v1696[1] - 48 > 9)
                                                                  {
                                                                    v1712 = WTF::fastCompactMalloc((WTF *)0x20);
                                                                    v1702 = v1712;
                                                                    *(_QWORD *)v1712 = 0x2200000002;
                                                                    v1713 = "Invalid digits after decimal point";
                                                                    goto LABEL_4015;
                                                                  }
                                                                  v1719 = a4 + 2 * v1695 + 4;
                                                                  do
                                                                  {
                                                                    v1696 = (unsigned __int16 *)v1719;
                                                                    if (v1719 >= v1500)
                                                                      break;
                                                                    v1719 += 2;
                                                                  }
                                                                  while (*v1696 - 48 < 0xA);
                                                                  *v11 = v1696;
                                                                }
                                                                else if (v1695 <= 9)
                                                                {
                                                                  *v10 = 6;
                                                                  if ((_DWORD)v1669 == 45)
                                                                  {
                                                                    if (v1695 < 2)
                                                                      goto LABEL_4016;
                                                                    a4 += 2;
                                                                  }
                                                                  v1698 = 0;
                                                                  do
                                                                  {
                                                                    v1699 = *(unsigned __int16 *)a4;
                                                                    a4 += 2;
                                                                    v1698 = v1699 + 10 * v1698 - 48;
                                                                  }
                                                                  while (a4 < (unint64_t)v1696);
                                                                  if ((_DWORD)v1669 != 45)
                                                                  {
                                                                    v12.n128_f64[0] = (double)v1698;
LABEL_3923:
                                                                    *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                                                    goto LABEL_3935;
                                                                  }
                                                                  if (v1698)
                                                                  {
                                                                    v12.n128_f64[0] = (double)-v1698;
                                                                    goto LABEL_3923;
                                                                  }
LABEL_4016:
                                                                  *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                                                  goto LABEL_3935;
                                                                }
                                                              }
                                                            }
                                                            if ((unint64_t)v1696 >= v1500
                                                              || (*v1696 | 0x20) != 0x65)
                                                            {
LABEL_4001:
                                                              *v10 = 6;
                                                              if ((uint64_t)((uint64_t)v1696 - a4) <= -2)
                                                                goto LABEL_4442;
                                                              v1965 = 0.0;
                                                              fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v1696, &v1965, 0x2E00000005);
                                                              v12.n128_f64[0] = v1965;
                                                              goto LABEL_3923;
                                                            }
                                                            v1720 = v1696 + 1;
                                                            *v11 = v1696 + 1;
                                                            if ((unint64_t)(v1696 + 1) < v1500)
                                                            {
                                                              v1721 = *v1720;
                                                              if (v1721 == 45 || v1721 == 43)
                                                              {
                                                                v1720 = v1696 + 2;
                                                                *v11 = v1696 + 2;
                                                              }
                                                            }
                                                            if ((unint64_t)v1720 < v1500
                                                              && *v1720 - 48 <= 9)
                                                            {
                                                              v1722 = v1720 + 1;
                                                              do
                                                              {
                                                                v1696 = v1722;
                                                                if ((unint64_t)v1722 >= v1500)
                                                                  break;
                                                                ++v1722;
                                                              }
                                                              while (*v1696 - 48 < 0xA);
                                                              *v11 = v1696;
                                                              goto LABEL_4001;
                                                            }
                                                            v1712 = WTF::fastCompactMalloc((WTF *)0x20);
                                                            v1702 = v1712;
                                                            v12.n128_u64[0] = 0x5D00000002;
                                                            *(_QWORD *)v1712 = 0x5D00000002;
                                                            v1713 = "Exponent symbols should be followed by an optional '"
                                                                    "+' or '-' and then by at least one number";
LABEL_4015:
                                                            *(_QWORD *)(v1712 + 8) = v1713;
                                                            *(_DWORD *)(v1712 + 16) = 4;
LABEL_3938:
                                                            v1703 = *v1951;
                                                            *v1951 = (WTF::StringImpl *)v1702;
                                                            if (v1703)
                                                            {
                                                              if (*(_DWORD *)v1703 == 2)
                                                              {
                                                                WTF::StringImpl::~StringImpl(v1703, (WTF::AtomStringImpl *)a2, v1701, a4, a5, a6, a7, a8);
                                                                WTF::fastFree(v1704, v1705, v1706, v1707, v1708, v1709, v1710, v1711);
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)v1703 -= 2;
                                                              }
                                                            }
                                                            goto LABEL_3935;
                                                          }
                                                          if ((v1692 - 49) <= 8)
                                                          {
                                                            v1693 = v1690 + 1;
                                                            v1694 = 2 * v1690 + 2;
                                                            do
                                                            {
                                                              v1695 = v1693;
                                                              if (a4 + v1694 >= v1500)
                                                                break;
                                                              ++v1693;
                                                              v1694 += 2;
                                                            }
                                                            while (*(unsigned __int16 *)(a4 + 2 * v1695)
                                                                  - 48 < 0xA);
                                                            goto LABEL_3913;
                                                          }
                                                        }
                                                        v1712 = WTF::fastCompactMalloc((WTF *)0x20);
                                                        v1702 = v1712;
                                                        *(_QWORD *)v1712 = 0xE00000002;
                                                        v1713 = "Invalid number";
                                                        goto LABEL_4015;
                                                      }
                                                      if ((_DWORD)v1669 == 102)
                                                      {
                                                        if ((uint64_t)(v1500 - a4) >= 9
                                                          && *(_DWORD *)(a4 + 2) == 7077985
                                                          && *(_DWORD *)(a4 + 6) == 6619251)
                                                        {
                                                          *v11 = a4 + 10;
                                                          v1700 = 12;
LABEL_3934:
                                                          *v10 = v1700;
                                                          goto LABEL_3935;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1669 == 116)
                                                      {
                                                        if ((uint64_t)(v1500 - a4) >= 7
                                                          && *(_DWORD *)(a4 + 2) == 7667826
                                                          && *(_WORD *)(a4 + 6) == 101)
                                                        {
                                                          *v11 = a4 + 8;
                                                          v1700 = 11;
                                                          goto LABEL_3934;
                                                        }
                                                      }
                                                      else if ((_DWORD)v1669 == 110
                                                             && (uint64_t)(v1500 - a4) >= 7
                                                             && *(_DWORD *)(a4 + 2) == 7078005
                                                             && *(_WORD *)(a4 + 6) == 108)
                                                      {
                                                        *v11 = a4 + 8;
                                                        v1700 = 13;
                                                        goto LABEL_3934;
                                                      }
                                                      *v1958 = (WTF::AtomStringImpl *)a4;
                                                      LODWORD(v1714) = a4;
                                                      if (a4 < v1500)
                                                      {
                                                        v1714 = (unsigned __int16 *)a4;
                                                        do
                                                        {
                                                          v1715 = *v1714;
                                                          v1717 = (v1715 | 0x20u) - 97 >= 0x1A
                                                               && (v1715 - 48) >= 0xA
                                                               && (v1715 - 8204) >= 2;
                                                          if (v1717 && v1715 != 95 && v1715 != 36)
                                                            break;
                                                          *v11 = ++v1714;
                                                        }
                                                        while ((unint64_t)v1714 < v1500);
                                                      }
                                                      *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1714 - a4) >> 1);
                                                      v1688 = 5;
LABEL_3902:
                                                      *((_BYTE *)a1 + 24) = v1688;
                                                      goto LABEL_3935;
                                                    case 14:
                                                      goto LABEL_4081;
                                                    case 15:
                                                      goto LABEL_4087;
                                                    case 16:
                                                      goto LABEL_4082;
                                                    case 17:
                                                      goto LABEL_4084;
                                                    default:
                                                      goto LABEL_4078;
                                                  }
                                                }
LABEL_3226:
                                                v1495 = (_BYTE *)WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1956, (WTF *)(v353 + 1), (unint64_t)&v1965);
                                                v353 = *((unsigned int *)a1 + 55);
                                                *(_BYTE *)(a1[26] + v353) = *v1495;
                                                goto LABEL_1251;
                                              }
                                              v448 = v1947;
LABEL_908:
                                              v319 = (int16x8_t *)a3;
                                              if (a3 < v313)
                                              {
                                                while (1)
                                                {
                                                  v459 = v319->u16[0];
                                                  if (v459 < 0x20)
                                                  {
                                                    if (v459 != 9)
                                                      goto LABEL_1114;
                                                  }
                                                  else if (v459 == (_DWORD)v315 || v459 > 0xFF || v459 == 92)
                                                  {
                                                    goto LABEL_1114;
                                                  }
                                                  v319 = (int16x8_t *)((char *)v319 + 2);
                                                  *v11 = v319;
                                                  if ((unint64_t)v319 >= v313)
                                                    goto LABEL_1114;
                                                }
                                              }
                                              v319 = (int16x8_t *)a3;
LABEL_1114:
                                              v9 = v448;
                                              goto LABEL_597;
                                            }
                                            v448 = v1947;
                                            if (*((_BYTE *)a1 + 40))
                                            {
                                              a3 = a4 + 2;
                                              *v11 = a4 + 2;
                                              goto LABEL_908;
                                            }
                                            v453 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v454 = v453;
                                            v12.n128_u64[0] = 0x2900000002;
                                            *(_QWORD *)v453 = 0x2900000002;
                                            v455 = "Single quotes (') are not allowed in JSON";
                                            goto LABEL_918;
                                          }
LABEL_581:
                                          *v10 = v316;
                                          *v11 = a4 + 2;
                                          goto LABEL_632;
                                        }
                                        if (v316 != 5)
                                        {
                                          if (v316 != 6)
                                          {
                                            if (v316 - 18 >= 2)
                                              goto LABEL_581;
                                            goto LABEL_664;
                                          }
                                          v342 = 0;
                                          if (a4 < v313 && (_DWORD)v315 == 45)
                                          {
                                            *v11 = a4 + 2;
                                            v342 = 1;
                                          }
                                          v343 = (unsigned __int16 *)(a4 + 2 * v342);
                                          if ((unint64_t)v343 < v313)
                                          {
                                            v344 = *v343;
                                            if (v344 == 48)
                                            {
                                              v347 = v342 + 1;
                                              goto LABEL_610;
                                            }
                                            if ((v344 - 49) <= 8)
                                            {
                                              v345 = v342 + 1;
                                              v346 = 2 * v342 + 2;
                                              do
                                              {
                                                v347 = v345;
                                                if (a4 + v346 >= v313)
                                                  break;
                                                ++v345;
                                                v346 += 2;
                                              }
                                              while (*(unsigned __int16 *)(a4 + 2 * v347) - 48 < 0xA);
LABEL_610:
                                              v348 = (unsigned __int16 *)(a4 + 2 * v347);
                                              *v11 = v348;
                                              if ((unint64_t)v348 < v313)
                                              {
                                                v349 = *v348;
                                                if (v349 != 101 && v349 != 69)
                                                {
                                                  if (v349 == 46)
                                                  {
                                                    v448 = v1947;
                                                    *v11 = v348 + 1;
                                                    if ((unint64_t)(v348 + 1) >= v313
                                                      || v348[1] - 48 > 9)
                                                    {
                                                      v453 = WTF::fastCompactMalloc((WTF *)0x20);
                                                      v454 = v453;
                                                      *(_QWORD *)v453 = 0x2200000002;
                                                      v455 = "Invalid digits after decimal point";
                                                      goto LABEL_918;
                                                    }
                                                    v449 = a4 + 2 * v347 + 4;
                                                    do
                                                    {
                                                      v348 = (unsigned __int16 *)v449;
                                                      if (v449 >= v313)
                                                        break;
                                                      v449 += 2;
                                                    }
                                                    while (*v348 - 48 < 0xA);
                                                    *v11 = v348;
                                                  }
                                                  else if (v347 <= 9)
                                                  {
                                                    *v10 = 6;
                                                    if ((_DWORD)v315 == 45)
                                                    {
                                                      if (v347 < 2)
                                                        goto LABEL_923;
                                                      a4 += 2;
                                                    }
                                                    v350 = 0;
                                                    do
                                                    {
                                                      v351 = *(unsigned __int16 *)a4;
                                                      a4 += 2;
                                                      v350 = v351 + 10 * v350 - 48;
                                                    }
                                                    while (a4 < (unint64_t)v348);
                                                    if ((_DWORD)v315 != 45)
                                                    {
                                                      v12.n128_f64[0] = (double)v350;
LABEL_620:
                                                      *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                                                      goto LABEL_632;
                                                    }
                                                    if (v350)
                                                    {
                                                      v12.n128_f64[0] = (double)-v350;
                                                      goto LABEL_620;
                                                    }
LABEL_923:
                                                    *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                                    goto LABEL_632;
                                                  }
                                                }
                                              }
                                              v448 = v1947;
                                              if ((unint64_t)v348 >= v313 || (*v348 | 0x20) != 0x65)
                                              {
LABEL_894:
                                                *v10 = 6;
                                                if ((uint64_t)((uint64_t)v348 - a4) <= -2)
                                                  goto LABEL_4442;
                                                v1965 = 0.0;
                                                fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v348, &v1965, 0x2E00000005);
                                                v12.n128_f64[0] = v1965;
                                                *(double *)v1958 = v1965;
LABEL_921:
                                                v9 = v448;
                                                goto LABEL_632;
                                              }
                                              v450 = v348 + 1;
                                              *v11 = v348 + 1;
                                              if ((unint64_t)(v348 + 1) < v313)
                                              {
                                                v451 = *v450;
                                                if (v451 == 45 || v451 == 43)
                                                {
                                                  v450 = v348 + 2;
                                                  *v11 = v348 + 2;
                                                }
                                              }
                                              if ((unint64_t)v450 < v313 && *v450 - 48 <= 9)
                                              {
                                                v452 = v450 + 1;
                                                do
                                                {
                                                  v348 = v452;
                                                  if ((unint64_t)v452 >= v313)
                                                    break;
                                                  ++v452;
                                                }
                                                while (*v348 - 48 < 0xA);
                                                *v11 = v348;
                                                goto LABEL_894;
                                              }
                                              v453 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v454 = v453;
                                              v12.n128_u64[0] = 0x5D00000002;
                                              *(_QWORD *)v453 = 0x5D00000002;
                                              v455 = "Exponent symbols should be followed by an optional '+' or '-' and t"
                                                     "hen by at least one number";
LABEL_918:
                                              *(_QWORD *)(v453 + 8) = v455;
                                              *(_DWORD *)(v453 + 16) = 4;
                                              v460 = *v1951;
                                              *v1951 = (WTF::StringImpl *)v454;
                                              v9 = v448;
                                              if (!v460)
                                                goto LABEL_632;
                                              if (*(_DWORD *)v460 == 2)
                                              {
                                                WTF::StringImpl::~StringImpl(v460, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                                                WTF::fastFree(v472, v473, v474, v475, v476, v477, v478, v479);
                                              }
                                              else
                                              {
                                                *(_DWORD *)v460 -= 2;
                                              }
                                              goto LABEL_921;
                                            }
                                          }
                                          v364 = WTF::fastCompactMalloc((WTF *)0x20);
                                          *(_QWORD *)v364 = 0xE00000002;
                                          *(_QWORD *)(v364 + 8) = "Invalid number";
                                          *(_DWORD *)(v364 + 16) = 4;
LABEL_665:
                                          v365 = *v1951;
                                          *v1951 = (WTF::StringImpl *)v364;
                                          if (v365)
                                          {
                                            if (*(_DWORD *)v365 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v365, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                                              WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v365 -= 2;
                                            }
                                          }
                                          goto LABEL_632;
                                        }
                                        if ((_DWORD)v315 == 102)
                                        {
                                          if ((uint64_t)(v313 - a4) >= 9
                                            && *(_DWORD *)(a4 + 2) == 7077985
                                            && *(_DWORD *)(a4 + 6) == 6619251)
                                          {
                                            *v11 = a4 + 10;
                                            v352 = 12;
LABEL_631:
                                            *v10 = v352;
                                            goto LABEL_632;
                                          }
                                        }
                                        else if ((_DWORD)v315 == 116)
                                        {
                                          if ((uint64_t)(v313 - a4) >= 7
                                            && *(_DWORD *)(a4 + 2) == 7667826
                                            && *(_WORD *)(a4 + 6) == 101)
                                          {
                                            *v11 = a4 + 8;
                                            v352 = 11;
                                            goto LABEL_631;
                                          }
                                        }
                                        else if ((_DWORD)v315 == 110
                                               && (uint64_t)(v313 - a4) >= 7
                                               && *(_DWORD *)(a4 + 2) == 7078005
                                               && *(_WORD *)(a4 + 6) == 108)
                                        {
                                          *v11 = a4 + 8;
                                          v352 = 13;
                                          goto LABEL_631;
                                        }
                                        *v1958 = (WTF::AtomStringImpl *)a4;
                                        LODWORD(v436) = a4;
                                        if (a4 < v313)
                                        {
                                          v436 = (unsigned __int16 *)a4;
                                          do
                                          {
                                            v437 = *v436;
                                            v439 = (v437 | 0x20u) - 97 >= 0x1A
                                                && (v437 - 48) >= 0xA
                                                && (v437 - 8204) >= 2;
                                            if (v439 && v437 != 95 && v437 != 36)
                                              break;
                                            *v11 = ++v436;
                                          }
                                          while ((unint64_t)v436 < v313);
                                        }
                                        *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v436 - a4) >> 1);
                                        v341 = 5;
                                        goto LABEL_600;
                                      }
LABEL_4151:
                                      v1726 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1734 = (WTF::StringImpl *)v1726;
                                      *(_QWORD *)v1726 = 0x3700000002;
                                      v1735 = "Expected ':' before value in object property definition";
                                      goto LABEL_4024;
                                    }
                                    *((_BYTE *)a1 + 25) &= ~1u;
                                    a1[4] = v296;
                                    a1[6] = (uint64_t)v298->i64 + 2;
                                    *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v298 - v296) >> 1);
                                    v1761 = 4;
LABEL_4074:
                                    *((_BYTE *)a1 + 24) = v1761;
                                    goto LABEL_4151;
                                  }
LABEL_844:
                                  v298 = (int16x8_t *)v296;
                                  if (v296 < v291)
                                  {
                                    while (1)
                                    {
                                      v440 = v298->u16[0];
                                      if (v440 < 0x20)
                                      {
                                        if (v440 != 9)
                                          goto LABEL_585;
                                      }
                                      else if (v440 == (_DWORD)v293 || v440 > 0xFF || v440 == 92)
                                      {
                                        goto LABEL_585;
                                      }
                                      v298 = (int16x8_t *)((char *)v298 + 2);
                                      *v11 = v298;
                                      if ((unint64_t)v298 >= v291)
                                        goto LABEL_585;
                                    }
                                  }
                                  v298 = (int16x8_t *)v296;
                                  goto LABEL_585;
                                }
                                if (*((_BYTE *)a1 + 40))
                                {
                                  v296 = (unint64_t)(v290 + 1);
                                  *v11 = v290 + 1;
                                  goto LABEL_844;
                                }
                                v1904 = WTF::fastCompactMalloc((WTF *)0x20);
                                v1845 = v1904;
                                *(_QWORD *)v1904 = 0x2900000002;
                                v1905 = "Single quotes (') are not allowed in JSON";
                                goto LABEL_4375;
                              }
LABEL_552:
                              *v10 = v294;
                              *v11 = v290 + 1;
                              goto LABEL_553;
                            }
                            if (v294 != 5)
                            {
                              if (v294 != 6)
                              {
                                if (v294 - 18 >= 2)
                                  goto LABEL_552;
LABEL_4211:
                                WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, v290, 1uLL, 39);
                                v1845 = *(_QWORD *)&v1965;
                                if (v1965 == 0.0)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198B2ACA8);
                                }
                                goto LABEL_4212;
                              }
                              v1767 = 0;
                              if ((unint64_t)v290 < v291 && (_DWORD)v293 == 45)
                              {
                                *v11 = v290 + 1;
                                v1767 = 1;
                              }
                              v1768 = &v290[v1767];
                              if ((unint64_t)v1768 < v291)
                              {
                                v1769 = *v1768;
                                if (v1769 == 48)
                                {
                                  v1772 = v1767 + 1;
LABEL_4113:
                                  v1773 = &v290[v1772];
                                  *v11 = v1773;
                                  if ((unint64_t)v1773 < v291)
                                  {
                                    v1774 = *v1773;
                                    if (v1774 != 101 && v1774 != 69)
                                    {
                                      if (v1774 == 46)
                                      {
                                        *v11 = v1773 + 1;
                                        if ((unint64_t)(v1773 + 1) >= v291 || v1773[1] - 48 > 9)
                                        {
                                          v1904 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1845 = v1904;
                                          *(_QWORD *)v1904 = 0x2200000002;
                                          v1905 = "Invalid digits after decimal point";
                                          goto LABEL_4375;
                                        }
                                        v1927 = (unint64_t)&v290[v1772 + 2];
                                        do
                                        {
                                          v1773 = (unsigned __int16 *)v1927;
                                          if (v1927 >= v291)
                                            break;
                                          v1927 += 2;
                                        }
                                        while (*v1773 - 48 < 0xA);
                                        *v11 = v1773;
                                      }
                                      else if (v1772 <= 9)
                                      {
                                        *v10 = 6;
                                        if ((_DWORD)v293 == 45)
                                        {
                                          if (v1772 < 2)
                                            goto LABEL_4362;
                                          ++v290;
                                        }
                                        v1775 = 0;
                                        do
                                        {
                                          v1776 = *v290++;
                                          v1775 = v1776 + 10 * v1775 - 48;
                                        }
                                        while (v290 < v1773);
                                        if ((_DWORD)v293 != 45)
                                        {
                                          v1777 = (double)v1775;
LABEL_4123:
                                          *(double *)v1958 = v1777;
                                          goto LABEL_4151;
                                        }
                                        if (v1775)
                                        {
                                          v1777 = (double)-v1775;
                                          goto LABEL_4123;
                                        }
LABEL_4362:
                                        *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                                        goto LABEL_4151;
                                      }
                                    }
                                  }
                                  if ((unint64_t)v1773 >= v291 || (*v1773 | 0x20) != 0x65)
                                  {
LABEL_4354:
                                    *v10 = 6;
                                    if ((char *)v1773 - (char *)v290 <= -2)
                                      goto LABEL_4442;
                                    v1965 = 0.0;
                                    fast_float::from_chars_advanced<double,char16_t>(v290, v1773, &v1965, 0x2E00000005);
                                    v1777 = v1965;
                                    goto LABEL_4123;
                                  }
                                  v1928 = v1773 + 1;
                                  *v11 = v1773 + 1;
                                  if ((unint64_t)(v1773 + 1) < v291)
                                  {
                                    v1929 = *v1928;
                                    if (v1929 == 45 || v1929 == 43)
                                    {
                                      v1928 = v1773 + 2;
                                      *v11 = v1773 + 2;
                                    }
                                  }
                                  if ((unint64_t)v1928 < v291 && *v1928 - 48 <= 9)
                                  {
                                    v1930 = v1928 + 1;
                                    do
                                    {
                                      v1773 = v1930;
                                      if ((unint64_t)v1930 >= v291)
                                        break;
                                      ++v1930;
                                    }
                                    while (*v1773 - 48 < 0xA);
                                    *v11 = v1773;
                                    goto LABEL_4354;
                                  }
                                  v1904 = WTF::fastCompactMalloc((WTF *)0x20);
                                  v1845 = v1904;
                                  *(_QWORD *)v1904 = 0x5D00000002;
                                  v1905 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4375:
                                  *(_QWORD *)(v1904 + 8) = v1905;
                                  *(_DWORD *)(v1904 + 16) = 4;
LABEL_4212:
                                  v1846 = *v1951;
                                  *v1951 = (WTF::StringImpl *)v1845;
                                  if (v1846)
                                  {
                                    if (*(_DWORD *)v1846 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v1846, v1838, v1839, v1840, v1841, v1842, v1843, v1844);
                                      WTF::fastFree(v1855, v1856, v1857, v1858, v1859, v1860, v1861, v1862);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v1846 -= 2;
                                    }
                                  }
                                  goto LABEL_4151;
                                }
                                if ((v1769 - 49) <= 8)
                                {
                                  v1770 = v1767 + 1;
                                  v1771 = 2 * v1767 + 2;
                                  do
                                  {
                                    v1772 = v1770;
                                    if ((unint64_t)v290 + v1771 >= v291)
                                      break;
                                    ++v1770;
                                    v1771 += 2;
                                  }
                                  while (v290[v1772] - 48 < 0xA);
                                  goto LABEL_4113;
                                }
                              }
                              v1904 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1845 = v1904;
                              *(_QWORD *)v1904 = 0xE00000002;
                              v1905 = "Invalid number";
                              goto LABEL_4375;
                            }
                            if ((_DWORD)v293 == 102)
                            {
                              if ((uint64_t)(v291 - (_QWORD)v290) >= 9
                                && *(_DWORD *)(v290 + 1) == 7077985
                                && *(_DWORD *)(v290 + 3) == 6619251)
                              {
                                *v11 = v290 + 5;
                                v1778 = 12;
LABEL_4150:
                                *v10 = v1778;
                                goto LABEL_4151;
                              }
                            }
                            else if ((_DWORD)v293 == 116)
                            {
                              if ((uint64_t)(v291 - (_QWORD)v290) >= 7
                                && *(_DWORD *)(v290 + 1) == 7667826
                                && v290[3] == 101)
                              {
                                *v11 = v290 + 4;
                                v1778 = 11;
                                goto LABEL_4150;
                              }
                            }
                            else if ((_DWORD)v293 == 110
                                   && (uint64_t)(v291 - (_QWORD)v290) >= 7
                                   && *(_DWORD *)(v290 + 1) == 7078005
                                   && v290[3] == 108)
                            {
                              *v11 = v290 + 4;
                              v1778 = 13;
                              goto LABEL_4150;
                            }
                            *v1958 = (WTF::AtomStringImpl *)v290;
                            LODWORD(v1906) = (_DWORD)v290;
                            if ((unint64_t)v290 < v291)
                            {
                              v1906 = v290;
                              do
                              {
                                v1907 = *v1906;
                                v1909 = (v1907 | 0x20u) - 97 >= 0x1A
                                     && (v1907 - 48) >= 0xA
                                     && (v1907 - 8204) >= 2;
                                if (v1909 && v1907 != 95 && v1907 != 36)
                                  break;
                                *v11 = ++v1906;
                              }
                              while ((unint64_t)v1906 < v291);
                            }
                            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v1906 - (_DWORD)v290) >> 1);
                            v1761 = 5;
                            goto LABEL_4074;
                          }
                          if (v271 >= 8)
                          {
                            v405 = (uint16x8_t)vceqq_s16(*v404, (int16x8_t)vmovl_u8(*(uint8x8_t *)v269->i8));
                            v405.i16[0] = vminvq_u16(v405);
                            if (v405.i32[0])
                            {
                              v406 = v270 & 7;
                              v407 = (int16x8_t *)(v1962 + ((2 * v406) | (v274 << 6)));
                              while (1)
                              {
                                v12 = (__n128)vceqq_s16(*v407, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v269->i8[v406]));
                                v12.n128_u16[0] = vminvq_u16((uint16x8_t)v12);
                                if (!v12.n128_u32[0])
                                  break;
                                v406 += 8;
                                ++v407;
                                if (v406 >= v271)
                                  goto LABEL_518;
                              }
                            }
                            goto LABEL_864;
                          }
                          if (v271 < 4)
                          {
                            if (((v269->u16[0] | (v269->u16[0] << 8)) & 0xFF00FF) != v404->i32[0]
                              || ((*(unsigned __int16 *)((char *)v269->u16 + (v270 & 1)) | (*(unsigned __int16 *)((char *)v269->u16 + (v270 & 1)) << 8)) & 0xFF00FF) != *(__int32 *)((char *)v404->i32 + 2 * (v270 & 1)))
                            {
                              goto LABEL_864;
                            }
                          }
                          else
                          {
                            v424 = (v269->u32[0] | ((unint64_t)v269->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                            v425 = (*(unsigned int *)((char *)v269->u32 + (v270 & 3)) | ((unint64_t)*(unsigned int *)((char *)v269->u32 + (v270 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                            v426 = (v425 | (v425 << 8)) & 0xFF00FF00FF00FFLL;
                            if (((v424 | (v424 << 8)) & 0xFF00FF00FF00FFLL) != v404->i64[0]
                              || v426 != *(uint64_t *)((char *)v404->i64 + 2 * (v270 & 3)))
                            {
                              goto LABEL_864;
                            }
                          }
LABEL_518:
                          v286 = *(int **)(v1962 + (v274 << 6) + 56);
LABEL_519:
                          *v286 += 2;
                          goto LABEL_520;
                        }
                        goto LABEL_637;
                      }
                      if (*((_BYTE *)a1 + 40))
                      {
                        a3 = (unint64_t)(v248 + 1);
                        *v11 = v248 + 1;
                        goto LABEL_706;
                      }
                      v1882 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1828 = v1882;
                      *(_QWORD *)v1882 = 0x2900000002;
                      v1883 = "Single quotes (') are not allowed in JSON";
                      goto LABEL_4308;
                    }
LABEL_4022:
                    *v10 = v252;
                    *v11 = v248 + 1;
                    goto LABEL_4023;
                  }
                  if (v252 == 5)
                  {
                    if ((_DWORD)v251 == 102)
                    {
                      if ((uint64_t)(v249 - (_QWORD)v248) < 9
                        || *(_DWORD *)(v248 + 1) != 7077985
                        || *(_DWORD *)(v248 + 3) != 6619251)
                      {
LABEL_689:
                        v1947 = v9;
                        *v1958 = (WTF::AtomStringImpl *)v248;
                        LODWORD(v393) = (_DWORD)v248;
                        if ((unint64_t)v248 < v249)
                        {
                          v393 = v248;
                          do
                          {
                            v394 = *v393;
                            v396 = (v394 | 0x20u) - 97 >= 0x1A
                                && (v394 - 48) >= 0xA
                                && (v394 - 8204) >= 2;
                            if (v396 && v394 != 95 && v394 != 36)
                              break;
                            *v11 = ++v393;
                          }
                          while ((unint64_t)v393 < v249);
                        }
                        *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v393
                                                                                               - (_DWORD)v248) >> 1);
                        v357 = 5;
                        *((_BYTE *)a1 + 24) = 5;
LABEL_637:
                        if (v357 == 5 && *((_BYTE *)a1 + 88))
                          goto LABEL_639;
LABEL_4023:
                        v1726 = WTF::fastCompactMalloc((WTF *)0x20);
                        v1734 = (WTF::StringImpl *)v1726;
                        *(_QWORD *)v1726 = 0x2600000002;
                        v1735 = "Property name must be a string literal";
                        goto LABEL_4024;
                      }
                      *v11 = v248 + 5;
                      v1762 = 12;
                    }
                    else if ((_DWORD)v251 == 116)
                    {
                      if ((uint64_t)(v249 - (_QWORD)v248) < 7 || *(_DWORD *)(v248 + 1) != 7667826 || v248[3] != 101)
                        goto LABEL_689;
                      *v11 = v248 + 4;
                      v1762 = 11;
                    }
                    else
                    {
                      if ((_DWORD)v251 != 110
                        || (uint64_t)(v249 - (_QWORD)v248) < 7
                        || *(_DWORD *)(v248 + 1) != 7078005
                        || v248[3] != 108)
                      {
                        goto LABEL_689;
                      }
                      *v11 = v248 + 4;
                      v1762 = 13;
                    }
LABEL_4077:
                    *v10 = v1762;
                    goto LABEL_4023;
                  }
                  if (v252 != 6)
                  {
                    if (v252 - 18 >= 2)
                      goto LABEL_4022;
                    goto LABEL_4196;
                  }
                  v1750 = 0;
                  if ((unint64_t)v248 < v249 && (_DWORD)v251 == 45)
                  {
                    *v11 = v248 + 1;
                    v1750 = 1;
                  }
                  v1751 = &v248[v1750];
                  if ((unint64_t)v1751 < v249)
                  {
                    v1752 = *v1751;
                    if (v1752 == 48)
                    {
                      v1755 = v1750 + 1;
LABEL_4062:
                      v1756 = &v248[v1755];
                      *v11 = v1756;
                      if ((unint64_t)v1756 < v249)
                      {
                        v1757 = *v1756;
                        if (v1757 != 101 && v1757 != 69)
                        {
                          if (v1757 == 46)
                          {
                            *v11 = v1756 + 1;
                            if ((unint64_t)(v1756 + 1) >= v249 || v1756[1] - 48 > 9)
                            {
                              v1882 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1828 = v1882;
                              *(_QWORD *)v1882 = 0x2200000002;
                              v1883 = "Invalid digits after decimal point";
                              goto LABEL_4308;
                            }
                            v1900 = (unint64_t)&v248[v1755 + 2];
                            do
                            {
                              v1756 = (unsigned __int16 *)v1900;
                              if (v1900 >= v249)
                                break;
                              v1900 += 2;
                            }
                            while (*v1756 - 48 < 0xA);
                            *v11 = v1756;
                          }
                          else if (v1755 <= 9)
                          {
                            *v10 = 6;
                            if ((_DWORD)v251 == 45)
                            {
                              if (v1755 < 2)
                                goto LABEL_4309;
                              ++v248;
                            }
                            v1758 = 0;
                            do
                            {
                              v1759 = *v248++;
                              v1758 = v1759 + 10 * v1758 - 48;
                            }
                            while (v248 < v1756);
                            if ((_DWORD)v251 != 45)
                            {
                              v1760 = (double)v1758;
LABEL_4072:
                              *(double *)v1958 = v1760;
                              goto LABEL_4023;
                            }
                            if (v1758)
                            {
                              v1760 = (double)-v1758;
                              goto LABEL_4072;
                            }
LABEL_4309:
                            *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                            goto LABEL_4023;
                          }
                        }
                      }
                      if ((unint64_t)v1756 >= v249 || (*v1756 | 0x20) != 0x65)
                      {
LABEL_4300:
                        *v10 = 6;
                        if ((char *)v1756 - (char *)v248 <= -2)
                          goto LABEL_4442;
                        v1965 = 0.0;
                        fast_float::from_chars_advanced<double,char16_t>(v248, v1756, &v1965, 0x2E00000005);
                        v1760 = v1965;
                        goto LABEL_4072;
                      }
                      v1901 = v1756 + 1;
                      *v11 = v1756 + 1;
                      if ((unint64_t)(v1756 + 1) < v249)
                      {
                        v1902 = *v1901;
                        if (v1902 == 45 || v1902 == 43)
                        {
                          v1901 = v1756 + 2;
                          *v11 = v1756 + 2;
                        }
                      }
                      if ((unint64_t)v1901 < v249 && *v1901 - 48 <= 9)
                      {
                        v1903 = v1901 + 1;
                        do
                        {
                          v1756 = v1903;
                          if ((unint64_t)v1903 >= v249)
                            break;
                          ++v1903;
                        }
                        while (*v1756 - 48 < 0xA);
                        *v11 = v1756;
                        goto LABEL_4300;
                      }
                      v1882 = WTF::fastCompactMalloc((WTF *)0x20);
                      v1828 = v1882;
                      *(_QWORD *)v1882 = 0x5D00000002;
                      v1883 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_4308:
                      *(_QWORD *)(v1882 + 8) = v1883;
                      *(_DWORD *)(v1882 + 16) = 4;
LABEL_4197:
                      v1829 = *v1951;
                      *v1951 = (WTF::StringImpl *)v1828;
                      if (v1829)
                      {
                        if (*(_DWORD *)v1829 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1829, v1821, v1822, v1823, v1824, v1825, v1826, v1827);
                          WTF::fastFree(v1847, v1848, v1849, v1850, v1851, v1852, v1853, v1854);
                        }
                        else
                        {
                          *(_DWORD *)v1829 -= 2;
                        }
                      }
                      goto LABEL_4023;
                    }
                    if ((v1752 - 49) <= 8)
                    {
                      v1753 = v1750 + 1;
                      v1754 = 2 * v1750 + 2;
                      do
                      {
                        v1755 = v1753;
                        if ((unint64_t)v248 + v1754 >= v249)
                          break;
                        ++v1753;
                        v1754 += 2;
                      }
                      while (v248[v1755] - 48 < 0xA);
                      goto LABEL_4062;
                    }
                  }
                  v1882 = WTF::fastCompactMalloc((WTF *)0x20);
                  v1828 = v1882;
                  *(_QWORD *)v1882 = 0xE00000002;
                  v1883 = "Invalid number";
                  goto LABEL_4308;
                }
LABEL_779:
                v221 = (int16x8_t *)a3;
                if (a3 < v215)
                {
                  while (1)
                  {
                    v428 = v221->u16[0];
                    if (v428 < 0x20)
                    {
                      if (v428 != 9)
                        goto LABEL_427;
                    }
                    else if (v428 == (_DWORD)v217 || v428 > 0xFF || v428 == 92)
                    {
                      goto LABEL_427;
                    }
                    v221 = (int16x8_t *)((char *)v221 + 2);
                    *v11 = v221;
                    if ((unint64_t)v221 >= v215)
                      goto LABEL_427;
                  }
                }
                v221 = (int16x8_t *)a3;
                goto LABEL_427;
              }
              if (*((_BYTE *)a1 + 40))
              {
                a3 = a4 + 2;
                *v11 = a4 + 2;
                goto LABEL_779;
              }
              v397 = WTF::fastCompactMalloc((WTF *)0x20);
              v360 = v397;
              v12.n128_u64[0] = 0x2900000002;
              *(_QWORD *)v397 = 0x2900000002;
              v398 = "Single quotes (') are not allowed in JSON";
              goto LABEL_840;
            }
LABEL_423:
            *v10 = v218;
            *v11 = a4 + 2;
            goto LABEL_462;
          }
          if (v218 != 5)
          {
            if (v218 != 6)
            {
              if (v218 - 18 >= 2)
                goto LABEL_423;
LABEL_649:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
              v360 = *(_QWORD *)&v1965;
              if (v1965 == 0.0)
              {
                __break(0xC471u);
                JUMPOUT(0x198B2A918);
              }
              goto LABEL_650;
            }
            v236 = 0;
            if (a4 < v215 && (_DWORD)v217 == 45)
            {
              *v11 = a4 + 2;
              v236 = 1;
            }
            v237 = (unsigned __int16 *)(a4 + 2 * v236);
            if ((unint64_t)v237 < v215)
            {
              v238 = *v237;
              if (v238 == 48)
              {
                v241 = v236 + 1;
LABEL_440:
                v242 = (unsigned __int16 *)(a4 + 2 * v241);
                *v11 = v242;
                if ((unint64_t)v242 < v215)
                {
                  v243 = *v242;
                  if (v243 != 101 && v243 != 69)
                  {
                    if (v243 == 46)
                    {
                      *v11 = v242 + 1;
                      if ((unint64_t)(v242 + 1) >= v215 || v242[1] - 48 > 9)
                      {
                        v397 = WTF::fastCompactMalloc((WTF *)0x20);
                        v360 = v397;
                        *(_QWORD *)v397 = 0x2200000002;
                        v398 = "Invalid digits after decimal point";
                        goto LABEL_840;
                      }
                      v429 = a4 + 2 * v241 + 4;
                      do
                      {
                        v242 = (unsigned __int16 *)v429;
                        if (v429 >= v215)
                          break;
                        v429 += 2;
                      }
                      while (*v242 - 48 < 0xA);
                      *v11 = v242;
                    }
                    else if (v241 <= 9)
                    {
                      *v10 = 6;
                      if ((_DWORD)v217 == 45)
                      {
                        if (v241 < 2)
                          goto LABEL_841;
                        a4 += 2;
                      }
                      v244 = 0;
                      do
                      {
                        v245 = *(unsigned __int16 *)a4;
                        a4 += 2;
                        v244 = v245 + 10 * v244 - 48;
                      }
                      while (a4 < (unint64_t)v242);
                      if ((_DWORD)v217 != 45)
                      {
                        v12.n128_f64[0] = (double)v244;
LABEL_450:
                        *v1958 = (WTF::AtomStringImpl *)v12.n128_u64[0];
                        goto LABEL_462;
                      }
                      if (v244)
                      {
                        v12.n128_f64[0] = (double)-v244;
                        goto LABEL_450;
                      }
LABEL_841:
                      *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                      goto LABEL_462;
                    }
                  }
                }
                if ((unint64_t)v242 >= v215 || (*v242 | 0x20) != 0x65)
                {
LABEL_807:
                  *v10 = 6;
                  if ((uint64_t)((uint64_t)v242 - a4) <= -2)
                    goto LABEL_4442;
                  v1965 = 0.0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a4, v242, &v1965, 0x2E00000005);
                  v12.n128_f64[0] = v1965;
                  goto LABEL_450;
                }
                v430 = v242 + 1;
                *v11 = v242 + 1;
                if ((unint64_t)(v242 + 1) < v215)
                {
                  v431 = *v430;
                  if (v431 == 45 || v431 == 43)
                  {
                    v430 = v242 + 2;
                    *v11 = v242 + 2;
                  }
                }
                if ((unint64_t)v430 < v215 && *v430 - 48 <= 9)
                {
                  v432 = v430 + 1;
                  do
                  {
                    v242 = v432;
                    if ((unint64_t)v432 >= v215)
                      break;
                    ++v432;
                  }
                  while (*v242 - 48 < 0xA);
                  *v11 = v242;
                  goto LABEL_807;
                }
                v397 = WTF::fastCompactMalloc((WTF *)0x20);
                v360 = v397;
                v12.n128_u64[0] = 0x5D00000002;
                *(_QWORD *)v397 = 0x5D00000002;
                v398 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_840:
                *(_QWORD *)(v397 + 8) = v398;
                *(_DWORD *)(v397 + 16) = 4;
LABEL_650:
                v361 = *v1951;
                *v1951 = (WTF::StringImpl *)v360;
                if (v361)
                {
                  if (*(_DWORD *)v361 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v361, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
                  }
                  else
                  {
                    *(_DWORD *)v361 -= 2;
                  }
                }
                goto LABEL_462;
              }
              if ((v238 - 49) <= 8)
              {
                v239 = v236 + 1;
                v240 = 2 * v236 + 2;
                do
                {
                  v241 = v239;
                  if (a4 + v240 >= v215)
                    break;
                  ++v239;
                  v240 += 2;
                }
                while (*(unsigned __int16 *)(a4 + 2 * v241) - 48 < 0xA);
                goto LABEL_440;
              }
            }
            v397 = WTF::fastCompactMalloc((WTF *)0x20);
            v360 = v397;
            *(_QWORD *)v397 = 0xE00000002;
            v398 = "Invalid number";
            goto LABEL_840;
          }
          if ((_DWORD)v217 == 102)
          {
            if ((uint64_t)(v215 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
            {
              *v11 = a4 + 10;
              v246 = 12;
LABEL_461:
              *v10 = v246;
              goto LABEL_462;
            }
          }
          else if ((_DWORD)v217 == 116)
          {
            if ((uint64_t)(v215 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
            {
              *v11 = a4 + 8;
              v246 = 11;
              goto LABEL_461;
            }
          }
          else if ((_DWORD)v217 == 110
                 && (uint64_t)(v215 - a4) >= 7
                 && *(_DWORD *)(a4 + 2) == 7078005
                 && *(_WORD *)(a4 + 6) == 108)
          {
            *v11 = a4 + 8;
            v246 = 13;
            goto LABEL_461;
          }
          *v1958 = (WTF::AtomStringImpl *)a4;
          LODWORD(v420) = a4;
          if (a4 < v215)
          {
            v420 = (unsigned __int16 *)a4;
            do
            {
              v421 = *v420;
              v423 = (v421 | 0x20u) - 97 >= 0x1A && (v421 - 48) >= 0xA && (v421 - 8204) >= 2;
              if (v423 && v421 != 95 && v421 != 36)
                break;
              *v11 = ++v420;
            }
            while ((unint64_t)v420 < v215);
          }
          *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v420 - a4) >> 1);
          v235 = 5;
          goto LABEL_430;
        }
        v157 = WTF::fastCompactMalloc((WTF *)0x20);
        v158 = (WTF::StringImpl *)v157;
        v12.n128_u64[0] = 0xC00000002;
        *(_QWORD *)v157 = 0xC00000002;
        v159 = "Expected '}'";
LABEL_654:
        *(_QWORD *)(v157 + 8) = v159;
        *(_DWORD *)(v157 + 16) = 4;
        v362 = *v1960;
        *v1960 = v158;
        if (v362)
        {
          if (*(_DWORD *)v362 != 2)
          {
            v1961 = 0;
            *(_DWORD *)v362 -= 2;
            goto LABEL_670;
          }
          WTF::StringImpl::~StringImpl(v362, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
        }
LABEL_669:
        v1961 = 0;
LABEL_670:
        v214 = 1;
        if (!v28)
          goto LABEL_465;
        goto LABEL_463;
      case 7:
        goto LABEL_1163;
      case 8:
        v20 = *(_QWORD *)(a1[16] + 8 * (*((_DWORD *)a1 + 30) - 1));
        if ((*(_BYTE *)(v20 + 4) & 0xE) != 0)
          v21 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(v20 + 8) - 8);
        else
          v21 = 0;
        JSC::JSObject::putDirectIndex(v20, *a1, v21, v9, a5, a6, a7, a8, (int32x4_t)v12);
        if (*(_DWORD *)(a2 + 80))
        {
          v154 = *(_DWORD *)(a2 + 80);
          if ((v154 & 0x27) != 0 && (v154 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v1950, 7u, a3, v22, a5, a6, a7, a8);
          if (*(_QWORD *)(a2 + 16))
            return 0;
        }
        v23 = *v10;
        if (v23 == 10)
          goto LABEL_1164;
        if (v23 != 1)
        {
          v1726 = WTF::fastCompactMalloc((WTF *)0x20);
          v1734 = (WTF::StringImpl *)v1726;
          v1763 = 0xC00000002;
          v1735 = "Expected ']'";
          goto LABEL_4094;
        }
        a4 = a1[6];
        v24 = a1[7];
        while (a4 < v24)
        {
          if (*(unsigned __int16 *)a4 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*(_WORD *)a4] != 19)
            break;
          a4 += 2;
          *v11 = a4;
        }
        if (a4 == v24)
          goto LABEL_3027;
        *v10 = 18;
        v35 = *(unsigned __int16 *)a4;
        if (v35 > 0xFF)
          goto LABEL_240;
        v36 = JSC::tokenTypesOfLatin1Characters[v35];
        if (v36 > 4)
        {
          if (v36 == 5)
          {
            if ((_DWORD)v35 == 102)
            {
              if ((uint64_t)(v24 - a4) >= 9 && *(_DWORD *)(a4 + 2) == 7077985 && *(_DWORD *)(a4 + 6) == 6619251)
                goto LABEL_3019;
            }
            else if ((_DWORD)v35 == 116)
            {
              if ((uint64_t)(v24 - a4) >= 7 && *(_DWORD *)(a4 + 2) == 7667826 && *(_WORD *)(a4 + 6) == 101)
                goto LABEL_3024;
            }
            else if ((_DWORD)v35 == 110
                   && (uint64_t)(v24 - a4) >= 7
                   && *(_DWORD *)(a4 + 2) == 7078005
                   && *(_WORD *)(a4 + 6) == 108)
            {
              goto LABEL_3430;
            }
            *v1958 = (WTF::AtomStringImpl *)a4;
            LODWORD(v170) = a4;
            if (a4 < v24)
            {
              v170 = (unsigned __int16 *)a4;
              do
              {
                v171 = *v170;
                v172 = (v171 | 0x20u) - 97 >= 0x1A && (v171 - 48) >= 0xA;
                v173 = v172 && (v171 - 8204) >= 2;
                if (v173 && v171 != 95 && v171 != 36)
                  break;
                *v11 = ++v170;
              }
              while ((unint64_t)v170 < v24);
            }
LABEL_3444:
            *((_DWORD *)a1 + 7) = *((_DWORD *)a1 + 7) & 0x80000000 | (((_DWORD)v170 - a4) >> 1);
            v1354 = 5;
LABEL_2995:
            *((_BYTE *)a1 + 24) = v1354;
            goto LABEL_3026;
          }
          if (v36 == 6)
          {
            v85 = 0;
            if (a4 < v24 && (_DWORD)v35 == 45)
            {
              *v11 = a4 + 2;
              v85 = 1;
            }
            v86 = (unsigned __int16 *)(a4 + 2 * v85);
            if ((unint64_t)v86 >= v24)
              goto LABEL_3353;
            v87 = *v86;
            if (v87 == 48)
            {
              v90 = v85 + 1;
            }
            else
            {
              if ((v87 - 49) > 8)
                goto LABEL_3353;
              v88 = v85 + 1;
              v89 = 2 * v85 + 2;
              do
              {
                v90 = v88;
                if (a4 + v89 >= v24)
                  break;
                ++v88;
                v89 += 2;
              }
              while (*(unsigned __int16 *)(a4 + 2 * v90) - 48 < 0xA);
            }
            v91 = (unsigned __int16 *)(a4 + 2 * v90);
            *v11 = v91;
            if ((unint64_t)v91 < v24)
            {
              v92 = *v91;
              if (v92 != 101 && v92 != 69)
              {
                if (v92 == 46)
                {
                  *v11 = v91 + 1;
                  if ((unint64_t)(v91 + 1) >= v24 || v91[1] - 48 > 9)
                    goto LABEL_3519;
                  v202 = a4 + 2 * v90 + 4;
                  do
                  {
                    v91 = (unsigned __int16 *)v202;
                    if (v202 >= v24)
                      break;
                    v202 += 2;
                  }
                  while (*v91 - 48 < 0xA);
                  *v11 = v91;
                }
                else if (v90 <= 9)
                {
                  *v10 = 6;
                  if ((_DWORD)v35 == 45)
                  {
                    if (v90 < 2)
                      goto LABEL_3523;
                    a4 += 2;
                  }
                  v93 = 0;
                  do
                  {
                    v94 = *(unsigned __int16 *)a4;
                    a4 += 2;
                    v93 = v94 + 10 * v93 - 48;
                  }
                  while (a4 < (unint64_t)v91);
LABEL_1152:
                  if ((_DWORD)v35 != 45)
                  {
                    v12.n128_f64[0] = (double)v93;
                    goto LABEL_1154;
                  }
                  if (v93)
                  {
                    v12.n128_f64[0] = (double)-v93;
                    goto LABEL_1154;
                  }
LABEL_3523:
                  *v1958 = (WTF::AtomStringImpl *)0x8000000000000000;
                  goto LABEL_3026;
                }
              }
            }
            if ((unint64_t)v91 >= v24 || (*v91 | 0x20) != 0x65)
              goto LABEL_3516;
            v203 = v91 + 1;
            *v11 = v91 + 1;
            if ((unint64_t)(v91 + 1) < v24)
            {
              v204 = *v203;
              if (v204 == 45 || v204 == 43)
              {
                v203 = v91 + 2;
                *v11 = v91 + 2;
              }
            }
            if ((unint64_t)v203 < v24 && *v203 - 48 <= 9)
            {
              v205 = v203 + 1;
              do
              {
                v91 = v205;
                if ((unint64_t)v205 >= v24)
                  break;
                ++v205;
              }
              while (*v91 - 48 < 0xA);
              goto LABEL_3515;
            }
            goto LABEL_3518;
          }
          if (v36 - 18 < 2)
          {
LABEL_240:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)&v1965, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)a4, 1uLL, 39);
            v156 = *(_QWORD *)&v1965;
            if (v1965 == 0.0)
            {
              __break(0xC471u);
              JUMPOUT(0x198B2A910);
            }
            goto LABEL_3030;
          }
        }
        else if (v36 == 4)
        {
          v37 = *((unsigned __int8 *)a1 + 40);
          if ((_DWORD)v35 == 39)
          {
            if (!*((_BYTE *)a1 + 40))
            {
LABEL_3943:
              v1549 = WTF::fastCompactMalloc((WTF *)0x20);
              v156 = v1549;
              v12.n128_u64[0] = 0x2900000002;
              *(_QWORD *)v1549 = 0x2900000002;
              v1550 = "Single quotes (') are not allowed in JSON";
              goto LABEL_3520;
            }
            v38 = a4 + 2;
            *v11 = a4 + 2;
          }
          else
          {
            v38 = a4 + 2;
            *v11 = a4 + 2;
            if (!v37)
            {
              v39 = v24 - v38;
              if ((uint64_t)(v24 - v38) <= -2)
                goto LABEL_4442;
              v40 = (int16x8_t *)((v39 & 0xFFFFFFFFFFFFFFFELL) + a4 + 2);
              if ((unint64_t)v39 > 0xE)
              {
                v41 = a4 + 2;
                if (v39 >= 15)
                {
                  v42 = a4 + 16;
                  do
                  {
                    v43 = *(int16x8_t *)(v42 - 14);
                    v44.i64[0] = 0x22002200220022;
                    v44.i64[1] = 0x22002200220022;
                    v45 = (int8x16_t)vceqq_s16(v43, v44);
                    v46.i64[0] = 0x5C005C005C005CLL;
                    v46.i64[1] = 0x5C005C005C005CLL;
                    v47.i64[0] = 0x20002000200020;
                    v47.i64[1] = 0x20002000200020;
                    v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v43, v46), (int8x16_t)vcgtq_u16(v47, (uint16x8_t)v43)), v45);
                    v45.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                    if (v45.i32[0])
                      goto LABEL_2989;
                    v42 += 16;
                  }
                  while (v42 < (unint64_t)v40);
LABEL_2980:
                  v41 = v42 - 14;
                }
LABEL_2981:
                if (v41 < (unint64_t)v40)
                {
                  v1348 = (unsigned __int16 *)&v40[-1];
                  v1349 = v40[-1];
                  v1350.i64[0] = 0x22002200220022;
                  v1350.i64[1] = 0x22002200220022;
                  v1351 = (int8x16_t)vceqq_s16(v1349, v1350);
                  v1352.i64[0] = 0x5C005C005C005CLL;
                  v1352.i64[1] = 0x5C005C005C005CLL;
                  v1353.i64[0] = 0x20002000200020;
                  v1353.i64[1] = 0x20002000200020;
                  v12 = (__n128)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1349, v1352), (int8x16_t)vcgtq_u16(v1353, (uint16x8_t)v1349)), v1351);
                  v1351.i16[0] = vmaxvq_u16((uint16x8_t)v12);
                  if (v1351.i32[0])
                    goto LABEL_2990;
                }
                goto LABEL_2991;
              }
              if (v24 == v38)
                goto LABEL_2991;
              v206 = 2 * (v39 >> 1);
              v207 = (int16x8_t *)(a4 + 2);
              while (1)
              {
                v208 = v207->u16[0];
                if (v208 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v208])
                  break;
                v207 = (int16x8_t *)((char *)v207 + 2);
                v206 -= 2;
                if (!v206)
                  goto LABEL_2991;
              }
LABEL_3762:
              v40 = v207;
              goto LABEL_2991;
            }
          }
          v40 = (int16x8_t *)v38;
          if (v38 < v24)
          {
            while (1)
            {
              v201 = v40->u16[0];
              if (v201 < 0x20)
              {
                if (v201 != 9)
                  goto LABEL_2992;
              }
              else if (v201 == (_DWORD)v35 || v201 > 0xFF || v201 == 92)
              {
                goto LABEL_2992;
              }
              v40 = (int16x8_t *)((char *)v40 + 2);
              *v11 = v40;
              if ((unint64_t)v40 >= v24)
                goto LABEL_2992;
            }
          }
LABEL_3770:
          v40 = (int16x8_t *)v38;
          goto LABEL_2992;
        }
        *v10 = v36;
LABEL_2988:
        *v11 = a4 + 2;
        goto LABEL_3026;
      default:
        __break(0xC471u);
        JUMPOUT(0x198B2A05CLL);
    }
  }
}

BOOL JSC::LiteralParser<char16_t>::tryJSONPParse(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int *v9;
  JSC::VM *v12;
  unsigned __int16 *v13;
  unsigned __int16 **v14;
  unint64_t v15;
  char *v17;
  WTF::StringImpl **v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int16x8_t *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  int16x8_t v27;
  int16x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int8x16_t v31;
  int8x16_t v32;
  unsigned __int16 *v33;
  int16x8_t v34;
  int16x8_t v35;
  int8x16_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  _BOOL8 result;
  uint64_t v40;
  unsigned __int16 *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  int v47;
  int v48;
  int v49;
  double v50;
  char v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::AtomStringImpl *v60;
  unint64_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  unint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int16x8_t *v87;
  unsigned __int16 *v88;
  unsigned __int16 *v89;
  int16x8_t v90;
  int16x8_t v91;
  int8x16_t v92;
  int16x8_t v93;
  uint16x8_t v94;
  int8x16_t v95;
  unint64_t v96;
  BOOL v97;
  char v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int16x8_t *v103;
  unsigned __int16 *v104;
  unsigned __int16 *v105;
  int16x8_t v106;
  int16x8_t v107;
  int8x16_t v108;
  int16x8_t v109;
  uint16x8_t v110;
  int8x16_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  int v115;
  int v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  BOOL v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v142;
  int16x8_t v143;
  int16x8_t v144;
  int8x16_t v145;
  int16x8_t v146;
  uint16x8_t v147;
  int8x16_t v148;
  unsigned __int16 *v149;
  int16x8_t v150;
  int16x8_t v151;
  int8x16_t v152;
  int16x8_t v153;
  uint16x8_t v154;
  int8x16_t v155;
  unsigned __int16 *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int16 *v172;
  char v173;
  unsigned __int16 *v174;
  char v175;
  uint64_t v176;
  unsigned __int16 *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int16 *v182;
  int v183;
  int v184;
  int v185;
  double v186;
  char v187;
  uint64_t v188;
  unsigned __int16 *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned __int16 *v194;
  int v195;
  int v196;
  int v197;
  double v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  unsigned __int16 *v203;
  unsigned __int16 *v204;
  int v205;
  int v206;
  int v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  unsigned __int16 *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int16 *v223;
  int v224;
  uint64_t v225;
  unsigned __int16 *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  double v232;
  unint64_t v233;
  BOOL v234;
  char v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  unsigned __int16 *v239;
  unsigned __int16 *v240;
  int16x8_t v241;
  int16x8_t v242;
  int8x16_t v243;
  int16x8_t v244;
  uint16x8_t v245;
  int8x16_t v246;
  unsigned __int16 *v247;
  int16x8_t v248;
  int16x8_t v249;
  int8x16_t v250;
  int16x8_t v251;
  uint16x8_t v252;
  unsigned __int16 *v253;
  unint64_t v254;
  BOOL v255;
  char v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  uint64_t v260;
  int16x8_t *v261;
  unsigned __int16 *v262;
  unsigned __int16 *v263;
  int16x8_t v264;
  int16x8_t v265;
  int8x16_t v266;
  int16x8_t v267;
  uint16x8_t v268;
  int8x16_t v269;
  unsigned __int16 *v270;
  int16x8_t v271;
  int16x8_t v272;
  int8x16_t v273;
  int16x8_t v274;
  uint16x8_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  BOOL v283;
  char v284;
  unint64_t v285;
  int v286;
  uint64_t v287;
  int16x8_t *v288;
  unsigned __int16 *v289;
  unsigned __int16 *v290;
  int16x8_t v291;
  int16x8_t v292;
  int8x16_t v293;
  int16x8_t v294;
  uint16x8_t v295;
  int8x16_t v296;
  unsigned __int16 *v297;
  int16x8_t v298;
  int16x8_t v299;
  int8x16_t v300;
  int16x8_t v301;
  uint16x8_t v302;
  unsigned int v303;
  WTF::AtomStringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  unsigned int v319;
  unsigned int v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  int v326;
  unint64_t v327;
  BOOL v328;
  char v329;
  uint64_t v330;
  unsigned int v331;
  int v332;
  uint64_t v333;
  int16x8_t *v334;
  unsigned __int16 *v335;
  unsigned __int16 *v336;
  int16x8_t v337;
  int16x8_t v338;
  int8x16_t v339;
  int16x8_t v340;
  uint16x8_t v341;
  int8x16_t v342;
  unsigned __int16 *v343;
  int16x8_t v344;
  int16x8_t v345;
  int8x16_t v346;
  int16x8_t v347;
  uint16x8_t v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  int v352;
  char v353;
  char v354;
  uint64_t v355;
  unsigned __int16 *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  char v363;
  uint64_t v364;
  unsigned __int16 *v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned __int16 *v370;
  int v371;
  int v372;
  int v373;
  double v374;
  char v375;
  char v376;
  uint64_t v377;
  unsigned __int16 *v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned __int16 *v383;
  int v384;
  int v385;
  int v386;
  double v387;
  WTF::StringImpl *v388;
  WTF::StringImpl *v389;
  WTF::StringImpl *v390;
  WTF::StringImpl *v391;
  char v392;
  unsigned int v393;
  char v394;
  uint64_t v395;
  unsigned __int16 *v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned __int16 *v401;
  int v402;
  int v403;
  int v404;
  double v405;
  unint64_t v406;
  BOOL v407;
  char v408;
  uint64_t v409;
  unsigned int v410;
  int v411;
  uint64_t v412;
  int16x8_t *v413;
  unsigned __int16 *v414;
  unsigned __int16 *v415;
  int16x8_t v416;
  int16x8_t v417;
  int8x16_t v418;
  int16x8_t v419;
  uint16x8_t v420;
  int8x16_t v421;
  unsigned __int16 *v422;
  int16x8_t v423;
  int16x8_t v424;
  int8x16_t v425;
  int16x8_t v426;
  uint16x8_t v427;
  char v428;
  char v429;
  uint64_t v430;
  unsigned __int16 *v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned __int16 *v436;
  int v437;
  int v438;
  int v439;
  double v440;
  char v441;
  char v442;
  unint64_t v443;
  void *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  WTF::StringImpl *v454;
  unint64_t v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned __int16 *v463;
  int v464;
  BOOL v466;
  unsigned int v467;
  uint64_t v468;
  WTF::StringImpl *v469;
  WTF::StringImpl *v470;
  int v471;
  unsigned int v472;
  unint64_t v473;
  unsigned __int16 *v474;
  int v475;
  unsigned __int16 *v476;
  uint64_t v477;
  int16x8_t *v478;
  unint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  void *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  WTF::AtomStringImpl *v505;
  WTF::StringImpl *v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  WTF::StringImpl *v509;
  WTF::StringImpl *v510;
  WTF::StringImpl *v511;
  unint64_t v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  void *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  const char *v530;
  uint64_t v531;
  uint64_t v532;
  const char *v533;
  unsigned __int16 *v534;
  int v535;
  BOOL v537;
  unsigned __int16 *v538;
  int v539;
  BOOL v541;
  unsigned int v542;
  unint64_t v543;
  unsigned __int16 *v544;
  int v545;
  unsigned __int16 *v546;
  uint64_t v547;
  int16x8_t *v548;
  unint64_t v549;
  unsigned int v550;
  unint64_t v551;
  unsigned __int16 *v552;
  int v553;
  unsigned __int16 *v554;
  uint64_t v555;
  int16x8_t *v556;
  unint64_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int8x16_t v560;
  int16x8_t v561;
  uint16x8_t v562;
  int16x8_t v563;
  int16x8_t v564;
  int8x16_t v565;
  int16x8_t v566;
  uint16x8_t v567;
  unsigned __int16 *v568;
  int v569;
  BOOL v571;
  unsigned __int16 *v572;
  int v573;
  BOOL v575;
  unsigned int v576;
  unsigned int v577;
  unint64_t v578;
  unsigned __int16 *v579;
  int v580;
  unsigned __int16 *v581;
  unint64_t v582;
  unsigned __int16 *v583;
  int v584;
  unsigned __int16 *v585;
  uint64_t v586;
  int16x8_t *v587;
  unint64_t v588;
  uint64_t v589;
  int16x8_t *v590;
  unint64_t v591;
  unsigned __int16 *v592;
  int16x8_t v593;
  int16x8_t v594;
  int8x16_t v595;
  int16x8_t v596;
  uint16x8_t v597;
  unsigned __int16 *v598;
  int16x8_t v599;
  int16x8_t v600;
  int8x16_t v601;
  int16x8_t v602;
  uint16x8_t v603;
  int v604;
  BOOL v606;
  uint64_t v607;
  uint64_t v608;
  const char *v609;
  const char *v610;
  WTF::StringImpl *v611;
  unsigned __int16 *v612;
  int v613;
  BOOL v615;
  unsigned __int16 *v616;
  int v617;
  BOOL v619;
  unsigned int v620;
  unint64_t v621;
  unsigned __int16 *v622;
  int v623;
  unsigned __int16 *v624;
  uint64_t v625;
  int16x8_t *v626;
  unint64_t v627;
  unsigned int v628;
  unint64_t v629;
  unsigned __int16 *v630;
  int v631;
  unsigned __int16 *v632;
  uint64_t v633;
  int16x8_t *v634;
  unint64_t v635;
  unsigned int v636;
  unint64_t v637;
  unsigned __int16 *v638;
  int v639;
  unsigned __int16 *v640;
  uint64_t v641;
  int16x8_t *v642;
  unint64_t v643;
  unint64_t v644;
  void *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  WTF::StringImpl *v653;
  uint64_t v654;
  const char *v655;
  unint64_t v656;
  void *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  const char *v666;
  unsigned __int16 *v667;
  int v668;
  BOOL v670;
  unsigned __int16 *v671;
  int v672;
  BOOL v674;
  unsigned int v675;
  unint64_t v676;
  unsigned __int16 *v677;
  int v678;
  unsigned __int16 *v679;
  uint64_t v680;
  int16x8_t *v681;
  unint64_t v682;
  unsigned int v683;
  unint64_t v684;
  unsigned __int16 *v685;
  int v686;
  unsigned __int16 *v687;
  uint64_t v688;
  int16x8_t *v689;
  unint64_t v690;
  char v691;
  int8x16_t v692;
  WTF::StringImpl *v693[3];
  WTF::StringImpl *v694;
  int v695;
  char v696;
  WTF::StringImpl *v697;
  uint64_t v698;
  uint64_t v699;

  v12 = *(JSC::VM **)(*(_QWORD *)a1 + 56);
  v14 = (unsigned __int16 **)(a1 + 48);
  v13 = *(unsigned __int16 **)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  while ((unint64_t)v13 < v15)
  {
    if (*v13 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v13] != 19)
      break;
    *v14 = ++v13;
  }
  v17 = (char *)(a1 + 24);
  if (v13 == (unsigned __int16 *)v15)
  {
    result = 0;
    v51 = 14;
    goto LABEL_58;
  }
  v18 = (WTF::StringImpl **)(a1 + 16);
  *v17 = 18;
  v19 = *v13;
  if (v19 > 0xFF)
    goto LABEL_65;
  v20 = JSC::tokenTypesOfLatin1Characters[v19];
  if (v20 <= 4)
  {
    if (v20 == 4)
    {
      v21 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v19 != 39)
      {
        v22 = (uint64_t)(v13 + 1);
        *v14 = v13 + 1;
        if (!v21)
        {
          v23 = v15 - v22;
          if ((uint64_t)(v15 - v22) <= -2)
            goto LABEL_1475;
          v24 = (int16x8_t *)((char *)v13 + (v23 & 0xFFFFFFFFFFFFFFFELL) + 2);
          if ((unint64_t)v23 <= 0xE)
          {
            if (v15 != v22)
            {
              v477 = 2 * (v23 >> 1);
              v478 = (int16x8_t *)(v13 + 1);
              while (1)
              {
                v479 = v478->u16[0];
                if (v479 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v479])
                  break;
                v478 = (int16x8_t *)((char *)v478 + 2);
                v477 -= 2;
                if (!v477)
                  goto LABEL_29;
              }
              v24 = v478;
            }
            goto LABEL_29;
          }
          v25 = v13 + 1;
          if (v23 < 15)
          {
LABEL_20:
            if (v25 >= (unsigned __int16 *)v24)
              goto LABEL_29;
            v33 = (unsigned __int16 *)&v24[-1];
            v34 = v24[-1];
            v35.i64[0] = 0x22002200220022;
            v35.i64[1] = 0x22002200220022;
            v36 = (int8x16_t)vceqq_s16(v34, v35);
            v37.i64[0] = 0x5C005C005C005CLL;
            v37.i64[1] = 0x5C005C005C005CLL;
            v38.i64[0] = 0x20002000200020;
            v38.i64[1] = 0x20002000200020;
            v32 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v34, v37), (int8x16_t)vcgtq_u16(v38, (uint16x8_t)v34)), v36);
            v36.i16[0] = vmaxvq_u16((uint16x8_t)v32);
            if (!v36.i32[0])
              goto LABEL_29;
          }
          else
          {
            v26 = v13 + 8;
            v27.i64[0] = 0x22002200220022;
            v27.i64[1] = 0x22002200220022;
            v28.i64[0] = 0x5C005C005C005CLL;
            v28.i64[1] = 0x5C005C005C005CLL;
            v29.i64[0] = 0x20002000200020;
            v29.i64[1] = 0x20002000200020;
            while (1)
            {
              v30 = *(int16x8_t *)(v26 - 7);
              v31 = (int8x16_t)vceqq_s16(v30, v27);
              v32 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v30, v28), (int8x16_t)vcgtq_u16(v29, (uint16x8_t)v30)), v31);
              v31.i16[0] = vmaxvq_u16((uint16x8_t)v32);
              if (v31.i32[0])
                break;
              v26 += 8;
              if (v26 >= (unsigned __int16 *)v24)
              {
                v25 = v26 - 7;
                goto LABEL_20;
              }
            }
            v33 = v26 - 7;
          }
          v24 = (int16x8_t *)&v33[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v32))];
LABEL_29:
          *v14 = (unsigned __int16 *)v24;
          goto LABEL_30;
        }
LABEL_769:
        v24 = (int16x8_t *)v22;
        if (v22 < v15)
        {
          do
          {
            v472 = v24->u16[0];
            if (v472 < 0x20)
            {
              if (v472 != 9)
                break;
            }
            else if (v472 == (_DWORD)v19 || v472 > 0xFF || v472 == 92)
            {
              break;
            }
            v24 = (int16x8_t *)((char *)v24 + 2);
            *v14 = (unsigned __int16 *)v24;
          }
          while ((unint64_t)v24 < v15);
        }
LABEL_30:
        if ((unint64_t)v24 < v15 && v24->u16[0] == (_DWORD)v19)
        {
          result = 0;
          *(_BYTE *)(a1 + 25) &= ~1u;
          *(_QWORD *)(a1 + 32) = v22;
          *(_QWORD *)(a1 + 48) = (char *)v24->i64 + 2;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v24 - v22) >> 1);
          *(_BYTE *)(a1 + 24) = 4;
          return result;
        }
        v691 = a3;
        if (JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v22, v19, a5, a6, a7, a8) == 5)
        {
LABEL_71:
          v8 = (_DWORD *)((char *)v12 + 41952);
          v9 = &v695;
          v692 = (int8x16_t)xmmword_199123280;
          goto LABEL_72;
        }
        return 0;
      }
      if (*(_BYTE *)(a1 + 40))
      {
        v22 = (uint64_t)(v13 + 1);
        *v14 = v13 + 1;
        goto LABEL_769;
      }
      v451 = WTF::fastCompactMalloc((WTF *)0x20);
      v452 = 0x2900000002;
      v453 = "Single quotes (') are not allowed in JSON";
      goto LABEL_727;
    }
LABEL_26:
    result = 0;
    *v17 = v20;
    *v14 = v13 + 1;
    return result;
  }
  if (v20 == 5)
  {
    if ((_DWORD)v19 == 102)
    {
      if ((uint64_t)(v15 - (_QWORD)v13) >= 9 && *(_DWORD *)(v13 + 1) == 7077985 && *(_DWORD *)(v13 + 3) == 6619251)
      {
        result = 0;
        *v14 = v13 + 5;
        v51 = 12;
LABEL_58:
        *v17 = v51;
        return result;
      }
    }
    else if ((_DWORD)v19 == 116)
    {
      if ((uint64_t)(v15 - (_QWORD)v13) >= 7 && *(_DWORD *)(v13 + 1) == 7667826 && v13[3] == 101)
      {
        result = 0;
        *v14 = v13 + 4;
        v51 = 11;
        goto LABEL_58;
      }
    }
    else if ((_DWORD)v19 == 110
           && (uint64_t)(v15 - (_QWORD)v13) >= 7
           && *(_DWORD *)(v13 + 1) == 7078005
           && v13[3] == 108)
    {
      result = 0;
      *v14 = v13 + 4;
      v51 = 13;
      goto LABEL_58;
    }
    v691 = a3;
    *(_QWORD *)(a1 + 32) = v13;
    LODWORD(v463) = (_DWORD)v13;
    if ((unint64_t)v13 < v15)
    {
      v463 = v13;
      do
      {
        v464 = *v463;
        v466 = (v464 | 0x20u) - 97 >= 0x1A && (v464 - 48) >= 0xA && (v464 - 8204) >= 2;
        if (v466 && v464 != 95 && v464 != 36)
          break;
        *v14 = ++v463;
      }
      while ((unint64_t)v463 < v15);
    }
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v463 - (_DWORD)v13) >> 1);
    *(_BYTE *)(a1 + 24) = 5;
    goto LABEL_71;
  }
  if (v20 != 6)
  {
    if (v20 - 18 >= 2)
      goto LABEL_26;
LABEL_65:
    WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v13, 1uLL, 39);
    if (!v693[0])
    {
      __break(0xC471u);
      JUMPOUT(0x198B2E990);
    }
    v59 = *v18;
    *v18 = v693[0];
    if (!v59)
      return 0;
    if (*(_DWORD *)v59 != 2)
    {
      *(_DWORD *)v59 -= 2;
      return 0;
    }
LABEL_813:
    WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
    WTF::fastFree(v480, v481, v482, v483, v484, v485, v486, v487);
    return 0;
  }
  v40 = 0;
  if ((unint64_t)v13 < v15 && (_DWORD)v19 == 45)
  {
    *v14 = v13 + 1;
    v40 = 1;
  }
  v41 = &v13[v40];
  if ((unint64_t)v41 >= v15)
    goto LABEL_726;
  v42 = *v41;
  if (v42 == 48)
  {
    v45 = v40 + 1;
    goto LABEL_42;
  }
  if ((v42 - 49) > 8)
  {
LABEL_726:
    v451 = WTF::fastCompactMalloc((WTF *)0x20);
    v452 = 0xE00000002;
    v453 = "Invalid number";
    goto LABEL_727;
  }
  v43 = v40 + 1;
  v44 = 2 * v40 + 2;
  do
  {
    v45 = v43;
    if ((unint64_t)v13 + v44 >= v15)
      break;
    ++v43;
    v44 += 2;
  }
  while (v13[v45] - 48 < 0xA);
LABEL_42:
  v46 = &v13[v45];
  *v14 = v46;
  if ((unint64_t)v46 < v15)
  {
    v47 = *v46;
    if (v47 != 101 && v47 != 69)
    {
      if (v47 == 46)
      {
        *v14 = v46 + 1;
        if ((unint64_t)(v46 + 1) >= v15 || v46[1] - 48 > 9)
        {
          v451 = WTF::fastCompactMalloc((WTF *)0x20);
          v452 = 0x2200000002;
          v453 = "Invalid digits after decimal point";
          goto LABEL_727;
        }
        v473 = (unint64_t)&v13[v45 + 2];
        do
        {
          v46 = (unsigned __int16 *)v473;
          if (v473 >= v15)
            break;
          v473 += 2;
        }
        while (*v46 - 48 < 0xA);
        *v14 = v46;
      }
      else if (v45 <= 9)
      {
        *v17 = 6;
        if ((_DWORD)v19 == 45)
        {
          if (v45 < 2)
            goto LABEL_814;
          ++v13;
        }
        v48 = 0;
        do
        {
          v49 = *v13++;
          v48 = v49 + 10 * v48 - 48;
        }
        while (v13 < v46);
        if ((_DWORD)v19 != 45)
        {
          result = 0;
          v50 = (double)v48;
LABEL_52:
          *(double *)(a1 + 32) = v50;
          return result;
        }
        if (v48)
        {
          result = 0;
          v50 = (double)-v48;
          goto LABEL_52;
        }
LABEL_814:
        result = 0;
        *(_QWORD *)(a1 + 32) = 0x8000000000000000;
        return result;
      }
    }
  }
  if ((unint64_t)v46 < v15 && (*v46 | 0x20) == 0x65)
  {
    v474 = v46 + 1;
    *v14 = v46 + 1;
    if ((unint64_t)(v46 + 1) < v15)
    {
      v475 = *v474;
      if (v475 == 45 || v475 == 43)
      {
        v474 = v46 + 2;
        *v14 = v46 + 2;
      }
    }
    if ((unint64_t)v474 < v15 && *v474 - 48 <= 9)
    {
      v476 = v474 + 1;
      do
      {
        v46 = v476;
        if ((unint64_t)v476 >= v15)
          break;
        ++v476;
      }
      while (*v46 - 48 < 0xA);
      *v14 = v46;
      goto LABEL_797;
    }
    v451 = WTF::fastCompactMalloc((WTF *)0x20);
    v452 = 0x5D00000002;
    v453 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_727:
    *(_QWORD *)v451 = v452;
    *(_QWORD *)(v451 + 8) = v453;
    *(_DWORD *)(v451 + 16) = 4;
    v454 = *v18;
    *v18 = (WTF::StringImpl *)v451;
    if (!v454)
      return 0;
    if (*(_DWORD *)v454 != 2)
    {
      result = 0;
      *(_DWORD *)v454 -= 2;
      return result;
    }
    v59 = v454;
    goto LABEL_813;
  }
LABEL_797:
  *v17 = 6;
  if ((char *)v46 - (char *)v13 > -2)
  {
    v693[0] = 0;
    fast_float::from_chars_advanced<double,char16_t>(v13, v46, (double *)v693, 0x2E00000005);
    result = 0;
    v50 = *(double *)v693;
    goto LABEL_52;
  }
LABEL_1475:
  __break(1u);
LABEL_1476:
  v664 = WTF::fastCompactMalloc((WTF *)0x20);
  v510 = (WTF::StringImpl *)v664;
  v665 = 0x5D00000002;
  v666 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1352:
  *(_QWORD *)v664 = v665;
  *(_QWORD *)(v664 + 8) = v666;
  *(_DWORD *)(v664 + 16) = 4;
LABEL_849:
  v511 = *v18;
  *v18 = v510;
  if (v511)
  {
    if (*(_DWORD *)v511 == 2)
    {
      WTF::StringImpl::~StringImpl(v511, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
      WTF::fastFree(v520, v521, v522, v523, v524, v525, v526, v527);
    }
    else
    {
      *(_DWORD *)v511 -= 2;
    }
  }
  while (1)
  {
    v331 = *v17;
LABEL_651:
    if (v331 != 17)
      goto LABEL_720;
    v62 = *(unsigned __int16 **)(a1 + 48);
    v406 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v62 >= v406)
    {
      v408 = 0;
    }
    else
    {
      do
      {
        v407 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
        v408 = !v407;
        if (!v407)
          break;
        *v14 = ++v62;
      }
      while ((unint64_t)v62 < v406);
    }
    if (v62 == (unsigned __int16 *)v406)
    {
      v116 = 0;
      v441 = 14;
      goto LABEL_713;
    }
    *v17 = 18;
    v409 = *v62;
    if (v409 > 0xFF)
      goto LABEL_843;
    v410 = JSC::tokenTypesOfLatin1Characters[v409];
    if (v410 <= 4)
    {
      if (v410 == 4)
      {
        v411 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v409 == 39)
        {
          if (!*(_BYTE *)(a1 + 40))
          {
            v652 = WTF::fastCompactMalloc((WTF *)0x20);
            v653 = (WTF::StringImpl *)v652;
            v654 = 0x2900000002;
            v655 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1338;
          }
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
        }
        else
        {
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
          if (!v411)
          {
            v412 = v406 - v61;
            if ((uint64_t)(v406 - v61) <= -2)
              goto LABEL_1475;
            v413 = (int16x8_t *)((char *)v62 + (v412 & 0xFFFFFFFFFFFFFFFELL) + 2);
            if ((unint64_t)v412 <= 0xE)
            {
              if (v406 != v61)
              {
                v680 = 2 * (v412 >> 1);
                v681 = (int16x8_t *)(v62 + 1);
                while (1)
                {
                  v682 = v681->u16[0];
                  if (v682 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v682])
                    break;
                  v681 = (int16x8_t *)((char *)v681 + 2);
                  v680 -= 2;
                  if (!v680)
                    goto LABEL_682;
                }
                v413 = v681;
              }
            }
            else
            {
              v414 = v62 + 1;
              if (v412 < 15)
              {
LABEL_673:
                if (v414 < (unsigned __int16 *)v413)
                {
                  v422 = (unsigned __int16 *)&v413[-1];
                  v423 = v413[-1];
                  v424.i64[0] = 0x22002200220022;
                  v424.i64[1] = 0x22002200220022;
                  v425 = (int8x16_t)vceqq_s16(v423, v424);
                  v426.i64[0] = 0x5C005C005C005CLL;
                  v426.i64[1] = 0x5C005C005C005CLL;
                  v427.i64[0] = 0x20002000200020;
                  v427.i64[1] = 0x20002000200020;
                  v421 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v423, v426), (int8x16_t)vcgtq_u16(v427, (uint16x8_t)v423)), v425);
                  v425.i16[0] = vmaxvq_u16((uint16x8_t)v421);
                  if (v425.i32[0])
                    goto LABEL_681;
                }
              }
              else
              {
                v415 = v62 + 8;
                while (1)
                {
                  v416 = *(int16x8_t *)(v415 - 7);
                  v417.i64[0] = 0x22002200220022;
                  v417.i64[1] = 0x22002200220022;
                  v418 = (int8x16_t)vceqq_s16(v416, v417);
                  v419.i64[0] = 0x5C005C005C005CLL;
                  v419.i64[1] = 0x5C005C005C005CLL;
                  v420.i64[0] = 0x20002000200020;
                  v420.i64[1] = 0x20002000200020;
                  v421 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v416, v419), (int8x16_t)vcgtq_u16(v420, (uint16x8_t)v416)), v418);
                  v418.i16[0] = vmaxvq_u16((uint16x8_t)v421);
                  if (v418.i32[0])
                    break;
                  v415 += 8;
                  if (v415 >= (unsigned __int16 *)v413)
                  {
                    v414 = v415 - 7;
                    goto LABEL_673;
                  }
                }
                v422 = v415 - 7;
LABEL_681:
                v413 = (int16x8_t *)&v422[vminvq_u16((uint16x8_t)vornq_s8(v692, v421))];
              }
            }
LABEL_682:
            *v14 = (unsigned __int16 *)v413;
LABEL_683:
            if ((unint64_t)v413 >= v406 || v413->u16[0] != (_DWORD)v409)
            {
              JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v409, v63, v64, v65, v66);
              goto LABEL_847;
            }
            v116 = 0;
            *(_BYTE *)(a1 + 25) &= ~1u;
            *(_QWORD *)(a1 + 32) = v61;
            *(_QWORD *)(a1 + 48) = (char *)v413->i64 + 2;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v413 - v61) >> 1);
            v428 = 4;
LABEL_686:
            *(_BYTE *)(a1 + 24) = v428;
            goto LABEL_129;
          }
        }
        v413 = (int16x8_t *)v61;
        if (v61 < v406)
        {
          while (1)
          {
            v675 = v413->u16[0];
            if (v675 < 0x20)
            {
              if (v675 != 9)
                goto LABEL_683;
            }
            else if (v675 == (_DWORD)v409 || v675 > 0xFF || v675 == 92)
            {
              goto LABEL_683;
            }
            v413 = (int16x8_t *)((char *)v413 + 2);
            *v14 = (unsigned __int16 *)v413;
            if ((unint64_t)v413 >= v406)
              goto LABEL_683;
          }
        }
        v413 = (int16x8_t *)v61;
        goto LABEL_683;
      }
LABEL_679:
      v116 = 0;
      *v17 = v410;
      *v14 = v62 + 1;
      goto LABEL_129;
    }
    if (v410 == 5)
    {
      if ((_DWORD)v409 == 102)
      {
        if ((uint64_t)(v406 - (_QWORD)v62) >= 9 && *(_DWORD *)(v62 + 1) == 7077985 && *(_DWORD *)(v62 + 3) == 6619251)
        {
          v116 = 0;
          *v14 = v62 + 5;
          v441 = 12;
LABEL_713:
          *v17 = v441;
          goto LABEL_129;
        }
      }
      else if ((_DWORD)v409 == 116)
      {
        if ((uint64_t)(v406 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
        {
          v116 = 0;
          *v14 = v62 + 4;
          v441 = 11;
          goto LABEL_713;
        }
      }
      else if ((_DWORD)v409 == 110
             && (uint64_t)(v406 - (_QWORD)v62) >= 7
             && *(_DWORD *)(v62 + 1) == 7078005
             && v62[3] == 108)
      {
        v116 = 0;
        *v14 = v62 + 4;
        v441 = 13;
        goto LABEL_713;
      }
      *(_QWORD *)(a1 + 32) = v62;
      LODWORD(v667) = (_DWORD)v62;
      if ((unint64_t)v62 < v406)
      {
        v667 = v62;
        do
        {
          v668 = *v667;
          v670 = (v668 | 0x20u) - 97 >= 0x1A && (v668 - 48) >= 0xA && (v668 - 8204) >= 2;
          if (v670 && v668 != 95 && v668 != 36)
            break;
          *v14 = ++v667;
        }
        while ((unint64_t)v667 < v406);
      }
      v116 = 0;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v667 - (_DWORD)v62) >> 1);
      v428 = 5;
      goto LABEL_686;
    }
    if (v410 != 6)
    {
      if (v410 - 18 < 2)
      {
LABEL_843:
        WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
        if (!v693[0])
        {
          __break(0xC471u);
          JUMPOUT(0x198B2EED8);
        }
        v509 = *v18;
        *v18 = v693[0];
        if (v509)
        {
          if (*(_DWORD *)v509 == 2)
            goto LABEL_1341;
          *(_DWORD *)v509 -= 2;
        }
        goto LABEL_847;
      }
      goto LABEL_679;
    }
    v429 = v408 ^ 1;
    if ((_DWORD)v409 != 45)
      v429 = 1;
    if ((v429 & 1) != 0)
    {
      v430 = 0;
    }
    else
    {
      *v14 = v62 + 1;
      v430 = 1;
    }
    v431 = &v62[v430];
    if ((unint64_t)v431 >= v406)
    {
LABEL_1337:
      v652 = WTF::fastCompactMalloc((WTF *)0x20);
      v653 = (WTF::StringImpl *)v652;
      v654 = 0xE00000002;
      v655 = "Invalid number";
      goto LABEL_1338;
    }
    v432 = *v431;
    if (v432 == 48)
    {
      v435 = v430 + 1;
    }
    else
    {
      if ((v432 - 49) > 8)
        goto LABEL_1337;
      v433 = v430 + 1;
      v434 = 2 * v430 + 2;
      do
      {
        v435 = v433;
        if ((unint64_t)v62 + v434 >= v406)
          break;
        ++v433;
        v434 += 2;
      }
      while (v62[v435] - 48 < 0xA);
    }
    v436 = &v62[v435];
    *v14 = v436;
    if ((unint64_t)v436 >= v406)
      goto LABEL_1413;
    v437 = *v436;
    if (v437 == 101 || v437 == 69)
      goto LABEL_1413;
    if (v437 == 46)
    {
      *v14 = v436 + 1;
      if ((unint64_t)(v436 + 1) >= v406 || v436[1] - 48 > 9)
      {
        v652 = WTF::fastCompactMalloc((WTF *)0x20);
        v653 = (WTF::StringImpl *)v652;
        v654 = 0x2200000002;
        v655 = "Invalid digits after decimal point";
        goto LABEL_1338;
      }
      v676 = (unint64_t)&v62[v435 + 2];
      do
      {
        v436 = (unsigned __int16 *)v676;
        if (v676 >= v406)
          break;
        v676 += 2;
      }
      while (*v436 - 48 < 0xA);
      *v14 = v436;
LABEL_1413:
      if ((unint64_t)v436 < v406 && (*v436 | 0x20) == 0x65)
      {
        v677 = v436 + 1;
        *v14 = v436 + 1;
        if ((unint64_t)(v436 + 1) < v406)
        {
          v678 = *v677;
          if (v678 == 45 || v678 == 43)
          {
            v677 = v436 + 2;
            *v14 = v436 + 2;
          }
        }
        if ((unint64_t)v677 < v406 && *v677 - 48 <= 9)
        {
          v679 = v677 + 1;
          do
          {
            v436 = v679;
            if ((unint64_t)v679 >= v406)
              break;
            ++v679;
          }
          while (*v436 - 48 < 0xA);
          *v14 = v436;
          goto LABEL_1425;
        }
        v652 = WTF::fastCompactMalloc((WTF *)0x20);
        v653 = (WTF::StringImpl *)v652;
        v654 = 0x5D00000002;
        v655 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1338:
        *(_QWORD *)v652 = v654;
        *(_QWORD *)(v652 + 8) = v655;
        *(_DWORD *)(v652 + 16) = 4;
        v509 = *v18;
        *v18 = v653;
        if (v509)
        {
          if (*(_DWORD *)v509 != 2)
          {
            v116 = 0;
            *(_DWORD *)v509 -= 2;
            goto LABEL_129;
          }
LABEL_1341:
          WTF::StringImpl::~StringImpl(v509, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
          WTF::fastFree(v656, v657, v658, v659, v660, v661, v662, v663);
        }
LABEL_847:
        v116 = 0;
        goto LABEL_129;
      }
LABEL_1425:
      *v17 = 6;
      if ((char *)v436 - (char *)v62 > -2)
      {
        v693[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>(v62, v436, (double *)v693, 0x2E00000005);
        v116 = 0;
        v440 = *(double *)v693;
        goto LABEL_707;
      }
      goto LABEL_1475;
    }
    if (v435 > 9)
      goto LABEL_1413;
    *v17 = 6;
    if ((_DWORD)v409 != 45)
      goto LABEL_703;
    if (v435 >= 2)
    {
      ++v62;
LABEL_703:
      v438 = 0;
      do
      {
        v439 = *v62++;
        v438 = v439 + 10 * v438 - 48;
      }
      while (v62 < v436);
      if ((_DWORD)v409 != 45)
      {
        v116 = 0;
        v440 = (double)v438;
LABEL_707:
        *(double *)(a1 + 32) = v440;
        goto LABEL_129;
      }
      if (v438)
      {
        v116 = 0;
        v440 = (double)-v438;
        goto LABEL_707;
      }
    }
    v116 = 0;
    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
LABEL_129:
    v117 = v694;
    v694 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
      {
        WTF::StringImpl::~StringImpl(v117, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
      else
      {
        *(_DWORD *)v117 -= 2;
      }
    }
    v118 = v697;
    v697 = 0;
    if (v118)
    {
      if (*(_DWORD *)v118 == 2)
      {
        WTF::StringImpl::~StringImpl(v118, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
        WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
      }
      else
      {
        *(_DWORD *)v118 -= 2;
      }
    }
    WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v698, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
    if (v116)
      break;
    v119 = *v17;
    if (v119 != 5)
      return v119 == 14;
LABEL_72:
    v698 = 0;
    v699 = 0;
    JSC::Identifier::fromString((uint64_t)v12, *(WTF::AtomStringImpl **)(a1 + 32), *(_DWORD *)(a1 + 28) & 0x7FFFFFFF, (uint64_t)v13, a5, a6, a7, a8, &v697);
    v694 = 0;
    if (v697 != *(WTF::StringImpl **)(*(_QWORD *)v8 + 464))
    {
      v696 = 1;
      v67 = *(WTF::AtomStringImpl **)(a1 + 32);
      v68 = *(_DWORD *)(a1 + 28) & 0x7FFFFFFF;
      v69 = (uint64_t)v12;
      goto LABEL_74;
    }
    v62 = *(unsigned __int16 **)(a1 + 48);
    v96 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v62 >= v96)
    {
      v98 = 0;
    }
    else
    {
      do
      {
        v97 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
        v98 = !v97;
        if (!v97)
          break;
        *v14 = ++v62;
      }
      while ((unint64_t)v62 < v96);
    }
    if (v62 == (unsigned __int16 *)v96)
    {
LABEL_508:
      v187 = 14;
      goto LABEL_229;
    }
    *v17 = 18;
    v99 = *v62;
    if (v99 > 0xFF)
      goto LABEL_598;
    v100 = JSC::tokenTypesOfLatin1Characters[v99];
    if (v100 > 4)
    {
      if (v100 != 5)
      {
        if (v100 != 6)
        {
          if (v100 - 18 >= 2)
          {
LABEL_126:
            *v17 = v100;
LABEL_127:
            *v14 = v62 + 1;
            goto LABEL_128;
          }
LABEL_598:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
          v388 = v693[0];
          if (!v693[0])
          {
            __break(0xC471u);
            JUMPOUT(0x198B2EEB8);
          }
LABEL_599:
          v389 = *v18;
          *v18 = v388;
          if (v389)
          {
            if (*(_DWORD *)v389 == 2)
            {
              WTF::StringImpl::~StringImpl(v389, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
              WTF::fastFree(v443, v444, v445, v446, v447, v448, v449, v450);
            }
            else
            {
              *(_DWORD *)v389 -= 2;
            }
          }
          goto LABEL_128;
        }
        v175 = v98 ^ 1;
        if ((_DWORD)v99 != 45)
          v175 = 1;
        if ((v175 & 1) != 0)
        {
          v176 = 0;
        }
        else
        {
          *v14 = v62 + 1;
          v176 = 1;
        }
        v177 = &v62[v176];
        if ((unint64_t)v177 < v96)
        {
          v178 = *v177;
          if (v178 == 48)
          {
            v181 = v176 + 1;
          }
          else
          {
            if ((v178 - 49) > 8)
              goto LABEL_856;
            v179 = v176 + 1;
            v180 = 2 * v176 + 2;
            do
            {
              v181 = v179;
              if ((unint64_t)v62 + v180 >= v96)
                break;
              ++v179;
              v180 += 2;
            }
            while (v62[v181] - 48 < 0xA);
          }
          v182 = &v62[v181];
          *v14 = v182;
          if ((unint64_t)v182 < v96)
          {
            v183 = *v182;
            if (v183 != 101 && v183 != 69)
            {
              if (v183 == 46)
              {
                *v14 = v182 + 1;
                if ((unint64_t)(v182 + 1) >= v96 || v182[1] - 48 > 9)
                  goto LABEL_1225;
                v543 = (unint64_t)&v62[v181 + 2];
                do
                {
                  v182 = (unsigned __int16 *)v543;
                  if (v543 >= v96)
                    break;
                  v543 += 2;
                }
                while (*v182 - 48 < 0xA);
                *v14 = v182;
              }
              else if (v181 <= 9)
              {
                *v17 = 6;
                if ((_DWORD)v99 == 45)
                {
                  if (v181 < 2)
                    goto LABEL_1228;
                  ++v62;
                }
                v184 = 0;
                do
                {
                  v185 = *v62++;
                  v184 = v185 + 10 * v184 - 48;
                }
                while (v62 < v182);
LABEL_221:
                if ((_DWORD)v99 == 45)
                {
                  if (!v184)
                    goto LABEL_1228;
                  v186 = (double)-v184;
                }
                else
                {
                  v186 = (double)v184;
                }
                goto LABEL_223;
              }
            }
          }
          if ((unint64_t)v182 >= v96 || (*v182 | 0x20) != 0x65)
            goto LABEL_1222;
          v544 = v182 + 1;
          *v14 = v182 + 1;
          if ((unint64_t)(v182 + 1) < v96)
          {
            v545 = *v544;
            if (v545 == 45 || v545 == 43)
            {
              v544 = v182 + 2;
              *v14 = v182 + 2;
            }
          }
          if ((unint64_t)v544 >= v96 || *v544 - 48 > 9)
            goto LABEL_1224;
          v546 = v544 + 1;
          do
          {
            v182 = v546;
            if ((unint64_t)v546 >= v96)
              break;
            ++v546;
          }
          while (*v182 - 48 < 0xA);
LABEL_930:
          *v14 = v182;
          goto LABEL_1222;
        }
LABEL_856:
        v528 = WTF::fastCompactMalloc((WTF *)0x20);
        v388 = (WTF::StringImpl *)v528;
        v529 = 0xE00000002;
        v530 = "Invalid number";
        goto LABEL_857;
      }
      if ((_DWORD)v99 == 102)
      {
        if ((uint64_t)(v96 - (_QWORD)v62) >= 9 && *(_DWORD *)(v62 + 1) == 7077985 && *(_DWORD *)(v62 + 3) == 6619251)
          goto LABEL_228;
      }
      else if ((_DWORD)v99 == 116)
      {
        if ((uint64_t)(v96 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
          goto LABEL_254;
      }
      else if ((_DWORD)v99 == 110
             && (uint64_t)(v96 - (_QWORD)v62) >= 7
             && *(_DWORD *)(v62 + 1) == 7078005
             && v62[3] == 108)
      {
        goto LABEL_864;
      }
      *(_QWORD *)(a1 + 32) = v62;
      LODWORD(v534) = (_DWORD)v62;
      if ((unint64_t)v62 < v96)
      {
        v534 = v62;
        do
        {
          v535 = *v534;
          v537 = (v535 | 0x20u) - 97 >= 0x1A && (v535 - 48) >= 0xA && (v535 - 8204) >= 2;
          if (v537 && v535 != 95 && v535 != 36)
            break;
          *v14 = ++v534;
        }
        while ((unint64_t)v534 < v96);
      }
      v393 = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v534 - (_DWORD)v62) >> 1);
      *(_DWORD *)(a1 + 28) = v393;
      *(_BYTE *)(a1 + 24) = 5;
      goto LABEL_627;
    }
    if (v100 != 4)
      goto LABEL_126;
    v101 = *(unsigned __int8 *)(a1 + 40);
    if ((_DWORD)v99 == 39)
    {
      if (!*(_BYTE *)(a1 + 40))
      {
LABEL_1328:
        v528 = WTF::fastCompactMalloc((WTF *)0x20);
        v388 = (WTF::StringImpl *)v528;
        v529 = 0x2900000002;
        v530 = "Single quotes (') are not allowed in JSON";
        goto LABEL_857;
      }
      v61 = (unint64_t)(v62 + 1);
      *v14 = v62 + 1;
LABEL_903:
      v103 = (int16x8_t *)v61;
      if (v61 < v96)
      {
        while (1)
        {
          v542 = v103->u16[0];
          if (v542 < 0x20)
          {
            if (v542 != 9)
              goto LABEL_192;
          }
          else if (v542 == (_DWORD)v99 || v542 > 0xFF || v542 == 92)
          {
            goto LABEL_192;
          }
          v103 = (int16x8_t *)((char *)v103 + 2);
          *v14 = (unsigned __int16 *)v103;
          if ((unint64_t)v103 >= v96)
            goto LABEL_192;
        }
      }
      v103 = (int16x8_t *)v61;
      goto LABEL_192;
    }
    v61 = (unint64_t)(v62 + 1);
    *v14 = v62 + 1;
    if (v101)
      goto LABEL_903;
    v102 = v96 - v61;
    if ((uint64_t)(v96 - v61) <= -2)
      goto LABEL_1475;
    v103 = (int16x8_t *)((char *)v62 + (v102 & 0xFFFFFFFFFFFFFFFELL) + 2);
    if ((unint64_t)v102 <= 0xE)
    {
      if (v96 != v61)
      {
        v547 = 2 * (v102 >> 1);
        v548 = (int16x8_t *)(v62 + 1);
        while (1)
        {
          v549 = v548->u16[0];
          if (v549 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v549])
            break;
          v548 = (int16x8_t *)((char *)v548 + 2);
          v547 -= 2;
          if (!v547)
            goto LABEL_191;
        }
        v103 = v548;
      }
      goto LABEL_191;
    }
    v104 = v62 + 1;
    if (v102 < 15)
    {
LABEL_988:
      if (v104 >= (unsigned __int16 *)v103)
        goto LABEL_191;
      v172 = (unsigned __int16 *)&v103[-1];
      v558 = v103[-1];
      v559.i64[0] = 0x22002200220022;
      v559.i64[1] = 0x22002200220022;
      v560 = (int8x16_t)vceqq_s16(v558, v559);
      v561.i64[0] = 0x5C005C005C005CLL;
      v561.i64[1] = 0x5C005C005C005CLL;
      v562.i64[0] = 0x20002000200020;
      v562.i64[1] = 0x20002000200020;
      v111 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v558, v561), (int8x16_t)vcgtq_u16(v562, (uint16x8_t)v558)), v560);
      v560.i16[0] = vmaxvq_u16((uint16x8_t)v111);
      if (!v560.i32[0])
        goto LABEL_191;
    }
    else
    {
      v105 = v62 + 8;
      while (1)
      {
        v106 = *(int16x8_t *)(v105 - 7);
        v107.i64[0] = 0x22002200220022;
        v107.i64[1] = 0x22002200220022;
        v108 = (int8x16_t)vceqq_s16(v106, v107);
        v109.i64[0] = 0x5C005C005C005CLL;
        v109.i64[1] = 0x5C005C005C005CLL;
        v110.i64[0] = 0x20002000200020;
        v110.i64[1] = 0x20002000200020;
        v111 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v106, v109), (int8x16_t)vcgtq_u16(v110, (uint16x8_t)v106)), v108);
        v108.i16[0] = vmaxvq_u16((uint16x8_t)v111);
        if (v108.i32[0])
          break;
        v105 += 8;
        if (v105 >= (unsigned __int16 *)v103)
        {
          v104 = v105 - 7;
          goto LABEL_988;
        }
      }
      v172 = v105 - 7;
    }
    v103 = (int16x8_t *)&v172[vminvq_u16((uint16x8_t)vornq_s8(v692, v111))];
LABEL_191:
    *v14 = (unsigned __int16 *)v103;
LABEL_192:
    if ((unint64_t)v103 < v96 && v103->u16[0] == (_DWORD)v99)
    {
LABEL_194:
      *(_BYTE *)(a1 + 25) &= ~1u;
      *(_QWORD *)(a1 + 32) = v61;
      *(_QWORD *)(a1 + 48) = (char *)v103->i64 + 2;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v103 - v61) >> 1);
      v173 = 4;
LABEL_195:
      *(_BYTE *)(a1 + 24) = v173;
      goto LABEL_128;
    }
    if (JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v99, v63, v64, v65, v66) != 5)goto LABEL_128;
    v62 = *(unsigned __int16 **)(a1 + 32);
    v393 = *(_DWORD *)(a1 + 28);
LABEL_627:
    v696 = 0;
    v68 = v393 & 0x7FFFFFFF;
    v69 = (uint64_t)v12;
    v67 = (WTF::AtomStringImpl *)v62;
LABEL_74:
    JSC::Identifier::fromString(v69, v67, v68, (uint64_t)v62, v63, v64, v65, v66, v693);
    v77 = v693[0];
    v693[0] = 0;
    v78 = v694;
    v694 = v77;
    if (!v78)
      goto LABEL_77;
    v79 = *(_DWORD *)v78 - 2;
    if (*(_DWORD *)v78 != 2)
    {
LABEL_76:
      *(_DWORD *)v78 = v79;
      goto LABEL_77;
    }
    WTF::StringImpl::~StringImpl(v78, v70, v71, v72, v73, v74, v75, v76);
    WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
    v78 = v693[0];
    v693[0] = 0;
    if (v78)
    {
      v79 = *(_DWORD *)v78 - 2;
      if (*(_DWORD *)v78 != 2)
        goto LABEL_76;
      WTF::StringImpl::~StringImpl(v78, v165, v166, v167, v168, v169, v170, v171);
      WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
    }
LABEL_77:
    v80 = HIDWORD(v699);
    if (HIDWORD(v699) == (_DWORD)v699)
    {
      WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPPathEntry&>((uint64_t)&v698, (unint64_t)&v694);
    }
    else
    {
      v112 = v698;
      v113 = v694;
      if (v694)
        *(_DWORD *)v694 += 2;
      v114 = v112 + 16 * v80;
      *(_QWORD *)v114 = v113;
      v115 = *v9;
      *(_BYTE *)(v114 + 12) = *((_BYTE *)v9 + 4);
      *(_DWORD *)(v114 + 8) = v115;
      ++HIDWORD(v699);
    }
    if ((JSC::isLexerKeyword((uint64_t *)&v694) & 1) != 0)
      goto LABEL_128;
    v62 = *(unsigned __int16 **)(a1 + 48);
    v81 = *(_QWORD *)(a1 + 56);
    while ((unint64_t)v62 < v81)
    {
      if (*v62 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v62] != 19)
        break;
      *v14 = ++v62;
    }
    if (v62 == (unsigned __int16 *)v81)
    {
      LODWORD(v84) = 14;
      goto LABEL_230;
    }
    *v17 = 18;
    v83 = *v62;
    if (v83 > 0xFF)
      goto LABEL_602;
    LODWORD(v84) = JSC::tokenTypesOfLatin1Characters[v83];
    if (v84 <= 4)
    {
      if ((_DWORD)v84 != 4)
        goto LABEL_143;
      v85 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v83 != 39)
      {
        v61 = (unint64_t)(v62 + 1);
        *v14 = v62 + 1;
        if (!v85)
        {
          v86 = v81 - v61;
          if ((uint64_t)(v81 - v61) <= -2)
            goto LABEL_1475;
          v87 = (int16x8_t *)((char *)v62 + (v86 & 0xFFFFFFFFFFFFFFFELL) + 2);
          if ((unint64_t)v86 <= 0xE)
          {
            if (v81 != v61)
            {
              v555 = 2 * (v86 >> 1);
              v556 = (int16x8_t *)(v62 + 1);
              while (1)
              {
                v557 = v556->u16[0];
                if (v557 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v557])
                  break;
                v556 = (int16x8_t *)((char *)v556 + 2);
                v555 -= 2;
                if (!v555)
                  goto LABEL_198;
              }
              v87 = v556;
            }
            goto LABEL_198;
          }
          v88 = v62 + 1;
          if (v86 < 15)
          {
LABEL_991:
            if (v88 >= (unsigned __int16 *)v87)
              goto LABEL_198;
            v174 = (unsigned __int16 *)&v87[-1];
            v563 = v87[-1];
            v564.i64[0] = 0x22002200220022;
            v564.i64[1] = 0x22002200220022;
            v565 = (int8x16_t)vceqq_s16(v563, v564);
            v566.i64[0] = 0x5C005C005C005CLL;
            v566.i64[1] = 0x5C005C005C005CLL;
            v567.i64[0] = 0x20002000200020;
            v567.i64[1] = 0x20002000200020;
            v95 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v563, v566), (int8x16_t)vcgtq_u16(v567, (uint16x8_t)v563)), v565);
            v565.i16[0] = vmaxvq_u16((uint16x8_t)v95);
            if (!v565.i32[0])
              goto LABEL_198;
          }
          else
          {
            v89 = v62 + 8;
            while (1)
            {
              v90 = *(int16x8_t *)(v89 - 7);
              v91.i64[0] = 0x22002200220022;
              v91.i64[1] = 0x22002200220022;
              v92 = (int8x16_t)vceqq_s16(v90, v91);
              v93.i64[0] = 0x5C005C005C005CLL;
              v93.i64[1] = 0x5C005C005C005CLL;
              v94.i64[0] = 0x20002000200020;
              v94.i64[1] = 0x20002000200020;
              v95 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v90, v93), (int8x16_t)vcgtq_u16(v94, (uint16x8_t)v90)), v92);
              v92.i16[0] = vmaxvq_u16((uint16x8_t)v95);
              if (v92.i32[0])
                break;
              v89 += 8;
              if (v89 >= (unsigned __int16 *)v87)
              {
                v88 = v89 - 7;
                goto LABEL_991;
              }
            }
            v174 = v89 - 7;
          }
          v87 = (int16x8_t *)&v174[vminvq_u16((uint16x8_t)vornq_s8(v692, v95))];
LABEL_198:
          *v14 = (unsigned __int16 *)v87;
LABEL_199:
          if ((unint64_t)v87 >= v81 || v87->u16[0] != (_DWORD)v83)
          {
            LODWORD(v84) = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v83, v63, v64, v65, v66);
            goto LABEL_144;
          }
          *(_BYTE *)(a1 + 25) &= ~1u;
          *(_QWORD *)(a1 + 32) = v61;
          *(_QWORD *)(a1 + 48) = (char *)v87->i64 + 2;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v87 - v61) >> 1);
          LODWORD(v84) = 4;
          goto LABEL_202;
        }
LABEL_943:
        v87 = (int16x8_t *)v61;
        if (v61 < v81)
        {
          while (1)
          {
            v550 = v87->u16[0];
            if (v550 < 0x20)
            {
              if (v550 != 9)
                goto LABEL_199;
            }
            else if (v550 == (_DWORD)v83 || v550 > 0xFF || v550 == 92)
            {
              goto LABEL_199;
            }
            v87 = (int16x8_t *)((char *)v87 + 2);
            *v14 = (unsigned __int16 *)v87;
            if ((unint64_t)v87 >= v81)
              goto LABEL_199;
          }
        }
        v87 = (int16x8_t *)v61;
        goto LABEL_199;
      }
      if (*(_BYTE *)(a1 + 40))
      {
        v61 = (unint64_t)(v62 + 1);
        *v14 = v62 + 1;
        goto LABEL_943;
      }
      v531 = WTF::fastCompactMalloc((WTF *)0x20);
      v390 = (WTF::StringImpl *)v531;
      v532 = 0x2900000002;
      v533 = "Single quotes (') are not allowed in JSON";
      goto LABEL_859;
    }
    if ((_DWORD)v84 == 5)
    {
      if ((_DWORD)v83 == 102)
      {
        if ((uint64_t)(v81 - (_QWORD)v62) >= 9 && *(_DWORD *)(v62 + 1) == 7077985 && *(_DWORD *)(v62 + 3) == 6619251)
        {
          *v14 = v62 + 5;
          LODWORD(v84) = 12;
LABEL_230:
          *v17 = v84;
          goto LABEL_144;
        }
      }
      else if ((_DWORD)v83 == 116)
      {
        if ((uint64_t)(v81 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
        {
          *v14 = v62 + 4;
          LODWORD(v84) = 11;
          goto LABEL_230;
        }
      }
      else if ((_DWORD)v83 == 110
             && (uint64_t)(v81 - (_QWORD)v62) >= 7
             && *(_DWORD *)(v62 + 1) == 7078005
             && v62[3] == 108)
      {
        *v14 = v62 + 4;
        LODWORD(v84) = 13;
        goto LABEL_230;
      }
      *(_QWORD *)(a1 + 32) = v62;
      LODWORD(v538) = (_DWORD)v62;
      if ((unint64_t)v62 < v81)
      {
        v538 = v62;
        do
        {
          v539 = *v538;
          v541 = (v539 | 0x20u) - 97 >= 0x1A && (v539 - 48) >= 0xA && (v539 - 8204) >= 2;
          if (v541 && v539 != 95 && v539 != 36)
            break;
          *v14 = ++v538;
        }
        while ((unint64_t)v538 < v81);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v538 - (_DWORD)v62) >> 1);
      LODWORD(v84) = 5;
LABEL_202:
      *(_BYTE *)(a1 + 24) = v84;
      goto LABEL_144;
    }
    if ((_DWORD)v84 != 6)
    {
      if ((v84 - 18) >= 2)
      {
LABEL_143:
        *v17 = v84;
        *v14 = v62 + 1;
        goto LABEL_144;
      }
LABEL_602:
      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
      v390 = v693[0];
      if (!v693[0])
      {
        __break(0xC471u);
        JUMPOUT(0x198B2EEC0);
      }
      goto LABEL_603;
    }
    v188 = 0;
    if ((unint64_t)v62 < v81 && (_DWORD)v83 == 45)
    {
      *v14 = v62 + 1;
      v188 = 1;
    }
    v189 = &v62[v188];
    if ((unint64_t)v189 >= v81)
    {
LABEL_858:
      v531 = WTF::fastCompactMalloc((WTF *)0x20);
      v390 = (WTF::StringImpl *)v531;
      v532 = 0xE00000002;
      v533 = "Invalid number";
      goto LABEL_859;
    }
    v190 = *v189;
    if (v190 == 48)
    {
      v193 = v188 + 1;
    }
    else
    {
      if ((v190 - 49) > 8)
        goto LABEL_858;
      v191 = v188 + 1;
      v192 = 2 * v188 + 2;
      do
      {
        v193 = v191;
        if ((unint64_t)v62 + v192 >= v81)
          break;
        ++v191;
        v192 += 2;
      }
      while (v62[v193] - 48 < 0xA);
    }
    v194 = &v62[v193];
    *v14 = v194;
    if ((unint64_t)v194 >= v81)
      goto LABEL_959;
    v195 = *v194;
    if (v195 == 101 || v195 == 69)
      goto LABEL_959;
    if (v195 != 46)
    {
      if (v193 <= 9)
      {
        *v17 = 6;
        if ((_DWORD)v83 == 45)
        {
          if (v193 < 2)
          {
LABEL_986:
            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
            goto LABEL_249;
          }
          ++v62;
        }
        v196 = 0;
        do
        {
          v197 = *v62++;
          v196 = v197 + 10 * v196 - 48;
        }
        while (v62 < v194);
        if ((_DWORD)v83 != 45)
        {
          v198 = (double)v196;
          goto LABEL_248;
        }
        if (v196)
        {
          v198 = (double)-v196;
          goto LABEL_248;
        }
        goto LABEL_986;
      }
      goto LABEL_959;
    }
    *v14 = v194 + 1;
    if ((unint64_t)(v194 + 1) < v81 && v194[1] - 48 <= 9)
    {
      v551 = (unint64_t)&v62[v193 + 2];
      do
      {
        v194 = (unsigned __int16 *)v551;
        if (v551 >= v81)
          break;
        v551 += 2;
      }
      while (*v194 - 48 < 0xA);
      *v14 = v194;
LABEL_959:
      if ((unint64_t)v194 >= v81 || (*v194 | 0x20) != 0x65)
        goto LABEL_971;
      v552 = v194 + 1;
      *v14 = v194 + 1;
      if ((unint64_t)(v194 + 1) < v81)
      {
        v553 = *v552;
        if (v553 == 45 || v553 == 43)
        {
          v552 = v194 + 2;
          *v14 = v194 + 2;
        }
      }
      if ((unint64_t)v552 < v81 && *v552 - 48 <= 9)
      {
        v554 = v552 + 1;
        do
        {
          v194 = v554;
          if ((unint64_t)v554 >= v81)
            break;
          ++v554;
        }
        while (*v194 - 48 < 0xA);
        *v14 = v194;
LABEL_971:
        *v17 = 6;
        if ((char *)v194 - (char *)v62 <= -2)
          goto LABEL_1475;
        v693[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>(v62, v194, (double *)v693, 0x2E00000005);
        v198 = *(double *)v693;
LABEL_248:
        *(double *)(a1 + 32) = v198;
LABEL_249:
        LODWORD(v84) = 6;
        goto LABEL_144;
      }
      v531 = WTF::fastCompactMalloc((WTF *)0x20);
      v390 = (WTF::StringImpl *)v531;
      v532 = 0x5D00000002;
      v533 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
      goto LABEL_859;
    }
    v531 = WTF::fastCompactMalloc((WTF *)0x20);
    v390 = (WTF::StringImpl *)v531;
    v532 = 0x2200000002;
    v533 = "Invalid digits after decimal point";
LABEL_859:
    *(_QWORD *)v531 = v532;
    *(_QWORD *)(v531 + 8) = v533;
    *(_DWORD *)(v531 + 16) = 4;
LABEL_603:
    v391 = *v18;
    *v18 = v390;
    if (v391)
    {
      if (*(_DWORD *)v391 == 2)
      {
        WTF::StringImpl::~StringImpl(v391, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
        WTF::fastFree(v455, v456, v457, v458, v459, v460, v461, v462);
      }
      else
      {
        *(_DWORD *)v391 -= 2;
      }
    }
    LODWORD(v84) = 18;
LABEL_144:
    if (!v696 && (_DWORD)v84 != 16)
      goto LABEL_128;
    while (1)
    {
      v116 = 1;
      if (v84 <= 0xEu)
      {
        if ((_BYTE)v84)
        {
          if (v84 == 8)
          {
            if (!HIDWORD(v699))
            {
              __break(0xC471u);
              JUMPOUT(0x198B2EEA0);
            }
            v276 = HIDWORD(v699) - 1;
            v277 = v698;
            v278 = v698 + 16 * v276;
            v280 = *(unsigned __int8 *)(v278 + 12);
            v279 = (_BYTE *)(v278 + 12);
            if (v280 == 1 && (v691 & 1) == 0)
            {
              *v279 = 3;
              JSC::JSONPPathEntry::operator=((uint64_t)&v694, v277 + 16 * v276, v61, (uint64_t)v62, v63, v64, v65, v66);
              goto LABEL_375;
            }
          }
        }
        else
        {
          v696 = 2;
          v62 = *(unsigned __int16 **)(a1 + 48);
          v136 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v62 >= v136)
          {
            v138 = 0;
          }
          else
          {
            do
            {
              v137 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
              v138 = !v137;
              if (!v137)
                break;
              *v14 = ++v62;
            }
            while ((unint64_t)v62 < v136);
          }
          if (v62 == (unsigned __int16 *)v136)
            goto LABEL_508;
          *v17 = 18;
          v139 = *v62;
          if (v139 > 0xFF)
            goto LABEL_722;
          v100 = JSC::tokenTypesOfLatin1Characters[v139];
          if (v100 > 4)
          {
            if (v100 == 5)
            {
              if ((_DWORD)v139 == 102)
              {
                if ((uint64_t)(v136 - (_QWORD)v62) >= 9
                  && *(_DWORD *)(v62 + 1) == 7077985
                  && *(_DWORD *)(v62 + 3) == 6619251)
                {
                  goto LABEL_228;
                }
              }
              else if ((_DWORD)v139 == 116)
              {
                if ((uint64_t)(v136 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
                {
LABEL_254:
                  *v14 = v62 + 4;
                  v187 = 11;
                  goto LABEL_229;
                }
              }
              else if ((_DWORD)v139 == 110
                     && (uint64_t)(v136 - (_QWORD)v62) >= 7
                     && *(_DWORD *)(v62 + 1) == 7078005
                     && v62[3] == 108)
              {
                goto LABEL_864;
              }
              *(_QWORD *)(a1 + 32) = v62;
              LODWORD(v572) = (_DWORD)v62;
              if ((unint64_t)v62 < v136)
              {
                v572 = v62;
                do
                {
                  v573 = *v572;
                  v575 = (v573 | 0x20u) - 97 >= 0x1A
                      && (v573 - 48) >= 0xA
                      && (v573 - 8204) >= 2;
                  if (v575 && v573 != 95 && v573 != 36)
                    break;
                  *v14 = ++v572;
                }
                while ((unint64_t)v572 < v136);
              }
              goto LABEL_1146;
            }
            if (v100 != 6)
            {
              if (v100 - 18 >= 2)
                goto LABEL_126;
LABEL_722:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
              v388 = v693[0];
              if (!v693[0])
              {
                __break(0xC471u);
                JUMPOUT(0x198B2D188);
              }
              goto LABEL_599;
            }
            v216 = v138 ^ 1;
            if ((_DWORD)v139 != 45)
              v216 = 1;
            if ((v216 & 1) != 0)
            {
              v217 = 0;
            }
            else
            {
              *v14 = v62 + 1;
              v217 = 1;
            }
            v218 = &v62[v217];
            if ((unint64_t)v218 >= v136)
              goto LABEL_856;
            v219 = *v218;
            if (v219 == 48)
            {
              v222 = v217 + 1;
            }
            else
            {
              if ((v219 - 49) > 8)
                goto LABEL_856;
              v220 = v217 + 1;
              v221 = 2 * v217 + 2;
              do
              {
                v222 = v220;
                if ((unint64_t)v62 + v221 >= v136)
                  break;
                ++v220;
                v221 += 2;
              }
              while (v62[v222] - 48 < 0xA);
            }
            v223 = &v62[v222];
            *v14 = v223;
            if ((unint64_t)v223 < v136)
            {
              v224 = *v223;
              if (v224 != 101 && v224 != 69)
              {
                if (v224 == 46)
                {
                  *v14 = v223 + 1;
                  if ((unint64_t)(v223 + 1) >= v136 || v223[1] - 48 > 9)
                    goto LABEL_1225;
                  v578 = (unint64_t)&v62[v222 + 2];
                  do
                  {
                    v223 = (unsigned __int16 *)v578;
                    if (v578 >= v136)
                      break;
                    v578 += 2;
                  }
                  while (*v223 - 48 < 0xA);
                  *v14 = v223;
                }
                else if (v222 <= 9)
                {
                  *v17 = 6;
                  if ((_DWORD)v139 == 45)
                  {
                    if (v222 < 2)
                      goto LABEL_1117;
                    ++v62;
                  }
                  v206 = 0;
                  do
                  {
                    v205 = *v62++;
                    v206 = v205 + 10 * v206 - 48;
                  }
                  while (v62 < v223);
                  if ((_DWORD)v139 == 45)
                  {
                    if (!v206)
                    {
LABEL_1117:
                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                      v232 = -0.0;
                      goto LABEL_348;
                    }
                    v232 = (double)-v206;
                  }
                  else
                  {
                    v232 = (double)v206;
                  }
                  goto LABEL_347;
                }
              }
            }
            if ((unint64_t)v223 < v136 && (*v223 | 0x20) == 0x65)
            {
              v579 = v223 + 1;
              *v14 = v223 + 1;
              if ((unint64_t)(v223 + 1) < v136)
              {
                v580 = *v579;
                if (v580 == 45 || v580 == 43)
                {
                  v579 = v223 + 2;
                  *v14 = v223 + 2;
                }
              }
              if ((unint64_t)v579 >= v136 || *v579 - 48 > 9)
                goto LABEL_1224;
              v581 = v579 + 1;
              do
              {
                v223 = v581;
                if ((unint64_t)v581 >= v136)
                  break;
                ++v581;
              }
              while (*v223 - 48 < 0xA);
              *v14 = v223;
            }
            *v17 = 6;
            if ((char *)v223 - (char *)v62 <= -2)
              goto LABEL_1475;
            v693[0] = 0;
            fast_float::from_chars_advanced<double,char16_t>(v62, v223, (double *)v693, 0x2E00000005);
            v232 = *(double *)v693;
LABEL_347:
            *(double *)(a1 + 32) = v232;
            goto LABEL_348;
          }
          if (v100 != 4)
            goto LABEL_126;
          v199 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v139 == 39)
          {
            if (!*(_BYTE *)(a1 + 40))
              goto LABEL_1328;
            v61 = (unint64_t)(v62 + 1);
            *v14 = v62 + 1;
LABEL_1033:
            v103 = (int16x8_t *)v61;
            if (v61 < v136)
            {
              while (1)
              {
                v576 = v103->u16[0];
                if (v576 < 0x20)
                {
                  if (v576 != 9)
                    goto LABEL_276;
                }
                else if (v576 == (_DWORD)v139 || v576 > 0xFF || v576 == 92)
                {
                  goto LABEL_276;
                }
                v103 = (int16x8_t *)((char *)v103 + 2);
                *v14 = (unsigned __int16 *)v103;
                if ((unint64_t)v103 >= v136)
                  goto LABEL_276;
              }
            }
            v103 = (int16x8_t *)v61;
            goto LABEL_276;
          }
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
          if (v199)
            goto LABEL_1033;
          v200 = v136 - v61;
          if ((uint64_t)(v136 - v61) <= -2)
            goto LABEL_1475;
          v103 = (int16x8_t *)((char *)v62 + (v200 & 0xFFFFFFFFFFFFFFFELL) + 2);
          if ((unint64_t)v200 <= 0xE)
          {
            if (v136 != v61)
            {
              v586 = 2 * (v200 >> 1);
              v587 = (int16x8_t *)(v62 + 1);
              while (1)
              {
                v588 = v587->u16[0];
                if (v588 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v588])
                  break;
                v587 = (int16x8_t *)((char *)v587 + 2);
                v586 -= 2;
                if (!v586)
                  goto LABEL_275;
              }
              v103 = v587;
            }
            goto LABEL_275;
          }
          v598 = v62 + 1;
          if (v200 < 15)
          {
LABEL_1122:
            if (v598 >= (unsigned __int16 *)v103)
              goto LABEL_275;
            v204 = (unsigned __int16 *)&v103[-1];
            v599 = v103[-1];
            v600.i64[0] = 0x22002200220022;
            v600.i64[1] = 0x22002200220022;
            v601 = (int8x16_t)vceqq_s16(v599, v600);
            v602.i64[0] = 0x5C005C005C005CLL;
            v602.i64[1] = 0x5C005C005C005CLL;
            v603.i64[0] = 0x20002000200020;
            v603.i64[1] = 0x20002000200020;
            v155 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v599, v602), (int8x16_t)vcgtq_u16(v603, (uint16x8_t)v599)), v601);
            v601.i16[0] = vmaxvq_u16((uint16x8_t)v155);
            if (!v601.i32[0])
              goto LABEL_275;
          }
          else
          {
            v156 = v62 + 8;
            while (1)
            {
              v150 = *(int16x8_t *)(v156 - 7);
              v151.i64[0] = 0x22002200220022;
              v151.i64[1] = 0x22002200220022;
              v152 = (int8x16_t)vceqq_s16(v150, v151);
              v153.i64[0] = 0x5C005C005C005CLL;
              v153.i64[1] = 0x5C005C005C005CLL;
              v154.i64[0] = 0x20002000200020;
              v154.i64[1] = 0x20002000200020;
              v155 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v150, v153), (int8x16_t)vcgtq_u16(v154, (uint16x8_t)v150)), v152);
              v152.i16[0] = vmaxvq_u16((uint16x8_t)v155);
              if (v152.i32[0])
                break;
              v156 += 8;
              if (v156 >= (unsigned __int16 *)v103)
              {
                v598 = v156 - 7;
                goto LABEL_1122;
              }
            }
            v204 = v156 - 7;
          }
          v103 = (int16x8_t *)&v204[vminvq_u16((uint16x8_t)vornq_s8(v692, v155))];
LABEL_275:
          *v14 = (unsigned __int16 *)v103;
LABEL_276:
          if ((unint64_t)v103 < v136 && v103->u16[0] == (_DWORD)v139)
            goto LABEL_194;
          if (JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v139, v63, v64, v65, v66) != 6)goto LABEL_128;
          v232 = *(double *)(a1 + 32);
LABEL_348:
          v116 = 1;
          if ((int)v232 < 0 || v232 != (double)(int)v232)
            goto LABEL_129;
          v695 = (int)v232;
          v62 = *(unsigned __int16 **)(a1 + 48);
          v233 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v62 >= v233)
          {
            v235 = 0;
          }
          else
          {
            do
            {
              v234 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
              v235 = !v234;
              if (!v234)
                break;
              *v14 = ++v62;
            }
            while ((unint64_t)v62 < v233);
          }
          if (v62 == (unsigned __int16 *)v233)
            goto LABEL_508;
          *v17 = 18;
          v99 = *v62;
          if (v99 > 0xFF)
          {
LABEL_820:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
            v388 = v693[0];
            if (!v693[0])
            {
              __break(0xC471u);
              JUMPOUT(0x198B2D684);
            }
            goto LABEL_599;
          }
          v236 = JSC::tokenTypesOfLatin1Characters[v99];
          if (v236 <= 4)
          {
            if (v236 != 4)
              goto LABEL_417;
            v237 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v99 == 39)
            {
              if (!*(_BYTE *)(a1 + 40))
                goto LABEL_1328;
              v61 = (unint64_t)(v62 + 1);
              *v14 = v62 + 1;
            }
            else
            {
              v61 = (unint64_t)(v62 + 1);
              *v14 = v62 + 1;
              if (!v237)
              {
                v238 = v233 - v61;
                if ((uint64_t)(v233 - v61) <= -2)
                  goto LABEL_1475;
                v103 = (int16x8_t *)((char *)v62 + (v238 & 0xFFFFFFFFFFFFFFFELL) + 2);
                if ((unint64_t)v238 <= 0xE)
                {
                  if (v233 != v61)
                  {
                    v625 = 2 * (v238 >> 1);
                    v626 = (int16x8_t *)(v62 + 1);
                    while (1)
                    {
                      v627 = v626->u16[0];
                      if (v627 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v627])
                        break;
                      v626 = (int16x8_t *)((char *)v626 + 2);
                      v625 -= 2;
                      if (!v625)
                        goto LABEL_488;
                    }
                    v103 = v626;
                  }
                }
                else
                {
                  v239 = v62 + 1;
                  if (v238 < 15)
                  {
LABEL_371:
                    if (v239 < (unsigned __int16 *)v103)
                    {
                      v247 = (unsigned __int16 *)&v103[-1];
                      v248 = v103[-1];
                      v249.i64[0] = 0x22002200220022;
                      v249.i64[1] = 0x22002200220022;
                      v250 = (int8x16_t)vceqq_s16(v248, v249);
                      v251.i64[0] = 0x5C005C005C005CLL;
                      v251.i64[1] = 0x5C005C005C005CLL;
                      v252.i64[0] = 0x20002000200020;
                      v252.i64[1] = 0x20002000200020;
                      v246 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v248, v251), (int8x16_t)vcgtq_u16(v252, (uint16x8_t)v248)), v250);
                      v250.i16[0] = vmaxvq_u16((uint16x8_t)v246);
                      if (v250.i32[0])
                        goto LABEL_487;
                    }
                  }
                  else
                  {
                    v240 = v62 + 8;
                    while (1)
                    {
                      v241 = *(int16x8_t *)(v240 - 7);
                      v242.i64[0] = 0x22002200220022;
                      v242.i64[1] = 0x22002200220022;
                      v243 = (int8x16_t)vceqq_s16(v241, v242);
                      v244.i64[0] = 0x5C005C005C005CLL;
                      v244.i64[1] = 0x5C005C005C005CLL;
                      v245.i64[0] = 0x20002000200020;
                      v245.i64[1] = 0x20002000200020;
                      v246 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v241, v244), (int8x16_t)vcgtq_u16(v245, (uint16x8_t)v241)), v243);
                      v243.i16[0] = vmaxvq_u16((uint16x8_t)v246);
                      if (v243.i32[0])
                        break;
                      v240 += 8;
                      if (v240 >= (unsigned __int16 *)v103)
                      {
                        v239 = v240 - 7;
                        goto LABEL_371;
                      }
                    }
                    v247 = v240 - 7;
LABEL_487:
                    v103 = (int16x8_t *)&v247[vminvq_u16((uint16x8_t)vornq_s8(v692, v246))];
                  }
                }
LABEL_488:
                *v14 = (unsigned __int16 *)v103;
LABEL_489:
                if ((unint64_t)v103 < v233 && v103->u16[0] == (_DWORD)v99)
                  goto LABEL_194;
                v236 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v99, v63, v64, v65, v66);
                goto LABEL_418;
              }
            }
            v103 = (int16x8_t *)v61;
            if (v61 < v233)
            {
              while (1)
              {
                v620 = v103->u16[0];
                if (v620 < 0x20)
                {
                  if (v620 != 9)
                    goto LABEL_489;
                }
                else if (v620 == (_DWORD)v99 || v620 > 0xFF || v620 == 92)
                {
                  goto LABEL_489;
                }
                v103 = (int16x8_t *)((char *)v103 + 2);
                *v14 = (unsigned __int16 *)v103;
                if ((unint64_t)v103 >= v233)
                  goto LABEL_489;
              }
            }
            v103 = (int16x8_t *)v61;
            goto LABEL_489;
          }
          if (v236 == 5)
          {
            if ((_DWORD)v99 == 102)
            {
              if ((uint64_t)(v233 - (_QWORD)v62) < 9
                || *(_DWORD *)(v62 + 1) != 7077985
                || *(_DWORD *)(v62 + 3) != 6619251)
              {
LABEL_1133:
                *(_QWORD *)(a1 + 32) = v62;
                LODWORD(v572) = (_DWORD)v62;
                if ((unint64_t)v62 < v233)
                {
                  v572 = v62;
                  do
                  {
                    v604 = *v572;
                    v606 = (v604 | 0x20u) - 97 >= 0x1A
                        && (v604 - 48) >= 0xA
                        && (v604 - 8204) >= 2;
                    if (v606 && v604 != 95 && v604 != 36)
                      break;
                    *v14 = ++v572;
                  }
                  while ((unint64_t)v572 < v233);
                }
LABEL_1146:
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v572 - (_DWORD)v62) >> 1);
                v173 = 5;
                goto LABEL_195;
              }
LABEL_228:
              *v14 = v62 + 5;
              v187 = 12;
LABEL_229:
              *v17 = v187;
              goto LABEL_128;
            }
            if ((_DWORD)v99 == 116)
            {
              if ((uint64_t)(v233 - (_QWORD)v62) < 7 || *(_DWORD *)(v62 + 1) != 7667826 || v62[3] != 101)
                goto LABEL_1133;
              goto LABEL_254;
            }
            if ((_DWORD)v99 != 110
              || (uint64_t)(v233 - (_QWORD)v62) < 7
              || *(_DWORD *)(v62 + 1) != 7078005
              || v62[3] != 108)
            {
              goto LABEL_1133;
            }
LABEL_864:
            *v14 = v62 + 4;
            v187 = 13;
            goto LABEL_229;
          }
          if (v236 != 6)
          {
            if (v236 - 18 < 2)
              goto LABEL_820;
LABEL_417:
            *v17 = v236;
            *v14 = v62 + 1;
LABEL_418:
            if (v236 != 1)
              goto LABEL_128;
            goto LABEL_419;
          }
          v354 = v235 ^ 1;
          if ((_DWORD)v99 != 45)
            v354 = 1;
          if ((v354 & 1) != 0)
          {
            v355 = 0;
          }
          else
          {
            *v14 = v62 + 1;
            v355 = 1;
          }
          v356 = &v62[v355];
          if ((unint64_t)v356 >= v233)
            goto LABEL_856;
          v357 = *v356;
          if (v357 == 48)
          {
            v360 = v355 + 1;
          }
          else
          {
            if ((v357 - 49) > 8)
              goto LABEL_856;
            v358 = v355 + 1;
            v359 = 2 * v355 + 2;
            do
            {
              v360 = v358;
              if ((unint64_t)v62 + v359 >= v233)
                break;
              ++v358;
              v359 += 2;
            }
            while (v62[v360] - 48 < 0xA);
          }
          v182 = &v62[v360];
          *v14 = v182;
          if ((unint64_t)v182 >= v233)
            goto LABEL_1210;
          v361 = *v182;
          if (v361 == 101 || v361 == 69)
            goto LABEL_1210;
          if (v361 == 46)
          {
            *v14 = v182 + 1;
            if ((unint64_t)(v182 + 1) < v233 && v182[1] - 48 <= 9)
            {
              v621 = (unint64_t)&v62[v360 + 2];
              do
              {
                v182 = (unsigned __int16 *)v621;
                if (v621 >= v233)
                  break;
                v621 += 2;
              }
              while (*v182 - 48 < 0xA);
              *v14 = v182;
LABEL_1210:
              if ((unint64_t)v182 < v233 && (*v182 | 0x20) == 0x65)
              {
                v622 = v182 + 1;
                *v14 = v182 + 1;
                if ((unint64_t)(v182 + 1) < v233)
                {
                  v623 = *v622;
                  if (v623 == 45 || v623 == 43)
                  {
                    v622 = v182 + 2;
                    *v14 = v182 + 2;
                  }
                }
                if ((unint64_t)v622 < v233 && *v622 - 48 <= 9)
                {
                  v624 = v622 + 1;
                  do
                  {
                    v182 = v624;
                    if ((unint64_t)v624 >= v233)
                      break;
                    ++v624;
                  }
                  while (*v182 - 48 < 0xA);
                  goto LABEL_930;
                }
LABEL_1224:
                v528 = WTF::fastCompactMalloc((WTF *)0x20);
                v388 = (WTF::StringImpl *)v528;
                v529 = 0x5D00000002;
                v530 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_857:
                *(_QWORD *)v528 = v529;
                *(_QWORD *)(v528 + 8) = v530;
                *(_DWORD *)(v528 + 16) = 4;
                goto LABEL_599;
              }
LABEL_1222:
              *v17 = 6;
              if ((char *)v182 - (char *)v62 > -2)
              {
                v693[0] = 0;
                fast_float::from_chars_advanced<double,char16_t>(v62, v182, (double *)v693, 0x2E00000005);
                v186 = *(double *)v693;
LABEL_223:
                *(double *)(a1 + 32) = v186;
                goto LABEL_128;
              }
              goto LABEL_1475;
            }
LABEL_1225:
            v528 = WTF::fastCompactMalloc((WTF *)0x20);
            v388 = (WTF::StringImpl *)v528;
            v529 = 0x2200000002;
            v530 = "Invalid digits after decimal point";
            goto LABEL_857;
          }
          if (v360 > 9)
            goto LABEL_1210;
          *v17 = 6;
          if ((_DWORD)v99 != 45)
          {
LABEL_526:
            v184 = 0;
            do
            {
              v362 = *v62++;
              v184 = v362 + 10 * v184 - 48;
            }
            while (v62 < v182);
            goto LABEL_221;
          }
          if (v360 >= 2)
          {
            ++v62;
            goto LABEL_526;
          }
LABEL_1228:
          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
LABEL_128:
          v116 = 1;
        }
        goto LABEL_129;
      }
      if (v84 != 15)
        break;
      v696 = 1;
      v62 = *(unsigned __int16 **)(a1 + 48);
      v140 = *(_QWORD *)(a1 + 56);
      while ((unint64_t)v62 < v140)
      {
        if (*v62 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*v62] != 19)
          break;
        *v14 = ++v62;
      }
      if (v62 == (unsigned __int16 *)v140)
        goto LABEL_508;
      *v17 = 18;
      v99 = *v62;
      if (v99 > 0xFF)
        goto LABEL_724;
      v142 = JSC::tokenTypesOfLatin1Characters[v99];
      if (v142 <= 4)
      {
        if (v142 != 4)
          goto LABEL_185;
        v201 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v99 == 39)
        {
          if (!*(_BYTE *)(a1 + 40))
            goto LABEL_1328;
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
        }
        else
        {
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
          if (!v201)
          {
            v202 = v140 - v61;
            if ((uint64_t)(v140 - v61) <= -2)
              goto LABEL_1475;
            v103 = (int16x8_t *)((char *)v62 + (v202 & 0xFFFFFFFFFFFFFFFELL) + 2);
            if ((unint64_t)v202 <= 0xE)
            {
              if (v140 != v61)
              {
                v589 = 2 * (v202 >> 1);
                v590 = (int16x8_t *)(v62 + 1);
                while (1)
                {
                  v591 = v590->u16[0];
                  if (v591 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v591])
                    break;
                  v590 = (int16x8_t *)((char *)v590 + 2);
                  v589 -= 2;
                  if (!v589)
                    goto LABEL_269;
                }
                v103 = v590;
              }
            }
            else
            {
              v592 = v62 + 1;
              if (v202 < 15)
              {
LABEL_1119:
                if (v592 < (unsigned __int16 *)v103)
                {
                  v203 = (unsigned __int16 *)&v103[-1];
                  v593 = v103[-1];
                  v594.i64[0] = 0x22002200220022;
                  v594.i64[1] = 0x22002200220022;
                  v595 = (int8x16_t)vceqq_s16(v593, v594);
                  v596.i64[0] = 0x5C005C005C005CLL;
                  v596.i64[1] = 0x5C005C005C005CLL;
                  v597.i64[0] = 0x20002000200020;
                  v597.i64[1] = 0x20002000200020;
                  v148 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v593, v596), (int8x16_t)vcgtq_u16(v597, (uint16x8_t)v593)), v595);
                  v595.i16[0] = vmaxvq_u16((uint16x8_t)v148);
                  if (v595.i32[0])
                    goto LABEL_268;
                }
              }
              else
              {
                v149 = v62 + 8;
                while (1)
                {
                  v143 = *(int16x8_t *)(v149 - 7);
                  v144.i64[0] = 0x22002200220022;
                  v144.i64[1] = 0x22002200220022;
                  v145 = (int8x16_t)vceqq_s16(v143, v144);
                  v146.i64[0] = 0x5C005C005C005CLL;
                  v146.i64[1] = 0x5C005C005C005CLL;
                  v147.i64[0] = 0x20002000200020;
                  v147.i64[1] = 0x20002000200020;
                  v148 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v143, v146), (int8x16_t)vcgtq_u16(v147, (uint16x8_t)v143)), v145);
                  v145.i16[0] = vmaxvq_u16((uint16x8_t)v148);
                  if (v145.i32[0])
                    break;
                  v149 += 8;
                  if (v149 >= (unsigned __int16 *)v103)
                  {
                    v592 = v149 - 7;
                    goto LABEL_1119;
                  }
                }
                v203 = v149 - 7;
LABEL_268:
                v103 = (int16x8_t *)&v203[vminvq_u16((uint16x8_t)vornq_s8(v692, v148))];
              }
            }
LABEL_269:
            *v14 = (unsigned __int16 *)v103;
LABEL_270:
            if ((unint64_t)v103 < v140 && v103->u16[0] == (_DWORD)v99)
              goto LABEL_194;
            if (JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v99, v63, v64, v65, v66) != 5)goto LABEL_128;
            v62 = *(unsigned __int16 **)(a1 + 32);
            v467 = *(_DWORD *)(a1 + 28);
            goto LABEL_762;
          }
        }
        v103 = (int16x8_t *)v61;
        if (v61 < v140)
        {
          while (1)
          {
            v577 = v103->u16[0];
            if (v577 < 0x20)
            {
              if (v577 != 9)
                goto LABEL_270;
            }
            else if (v577 == (_DWORD)v99 || v577 > 0xFF || v577 == 92)
            {
              goto LABEL_270;
            }
            v103 = (int16x8_t *)((char *)v103 + 2);
            *v14 = (unsigned __int16 *)v103;
            if ((unint64_t)v103 >= v140)
              goto LABEL_270;
          }
        }
        v103 = (int16x8_t *)v61;
        goto LABEL_270;
      }
      if (v142 != 5)
      {
        if (v142 != 6)
        {
          if (v142 - 18 >= 2)
          {
LABEL_185:
            *v17 = v142;
            goto LABEL_127;
          }
LABEL_724:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
          v388 = v693[0];
          if (!v693[0])
          {
            __break(0xC471u);
            JUMPOUT(0x198B2D1B4);
          }
          goto LABEL_599;
        }
        v225 = 0;
        if ((unint64_t)v62 < v140 && (_DWORD)v99 == 45)
        {
          *v14 = v62 + 1;
          v225 = 1;
        }
        v226 = &v62[v225];
        if ((unint64_t)v226 < v140)
        {
          v227 = *v226;
          if (v227 == 48)
          {
            v230 = v225 + 1;
          }
          else
          {
            if ((v227 - 49) > 8)
              goto LABEL_856;
            v228 = v225 + 1;
            v229 = 2 * v225 + 2;
            do
            {
              v230 = v228;
              if ((unint64_t)v62 + v229 >= v140)
                break;
              ++v228;
              v229 += 2;
            }
            while (v62[v230] - 48 < 0xA);
          }
          v182 = &v62[v230];
          *v14 = v182;
          if ((unint64_t)v182 < v140)
          {
            v231 = *v182;
            if (v231 != 101 && v231 != 69)
            {
              if (v231 == 46)
              {
                *v14 = v182 + 1;
                if ((unint64_t)(v182 + 1) >= v140 || v182[1] - 48 > 9)
                  goto LABEL_1225;
                v582 = (unint64_t)&v62[v230 + 2];
                do
                {
                  v182 = (unsigned __int16 *)v582;
                  if (v582 >= v140)
                    break;
                  v582 += 2;
                }
                while (*v182 - 48 < 0xA);
                *v14 = v182;
              }
              else if (v230 <= 9)
              {
                *v17 = 6;
                if ((_DWORD)v99 == 45)
                {
                  if (v230 < 2)
                    goto LABEL_1228;
                  ++v62;
                }
                v184 = 0;
                do
                {
                  v207 = *v62++;
                  v184 = v207 + 10 * v184 - 48;
                }
                while (v62 < v182);
                goto LABEL_221;
              }
            }
          }
          if ((unint64_t)v182 >= v140 || (*v182 | 0x20) != 0x65)
            goto LABEL_1222;
          v583 = v182 + 1;
          *v14 = v182 + 1;
          if ((unint64_t)(v182 + 1) < v140)
          {
            v584 = *v583;
            if (v584 == 45 || v584 == 43)
            {
              v583 = v182 + 2;
              *v14 = v182 + 2;
            }
          }
          if ((unint64_t)v583 >= v140 || *v583 - 48 > 9)
            goto LABEL_1224;
          v585 = v583 + 1;
          do
          {
            v182 = v585;
            if ((unint64_t)v585 >= v140)
              break;
            ++v585;
          }
          while (*v182 - 48 < 0xA);
          goto LABEL_930;
        }
        goto LABEL_856;
      }
      if ((_DWORD)v99 == 102)
      {
        if ((uint64_t)(v140 - (_QWORD)v62) >= 9 && *(_DWORD *)(v62 + 1) == 7077985 && *(_DWORD *)(v62 + 3) == 6619251)
          goto LABEL_228;
      }
      else if ((_DWORD)v99 == 116)
      {
        if ((uint64_t)(v140 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
          goto LABEL_254;
      }
      else if ((_DWORD)v99 == 110
             && (uint64_t)(v140 - (_QWORD)v62) >= 7
             && *(_DWORD *)(v62 + 1) == 7078005
             && v62[3] == 108)
      {
        goto LABEL_864;
      }
      *(_QWORD *)(a1 + 32) = v62;
      LODWORD(v568) = (_DWORD)v62;
      if ((unint64_t)v62 < v140)
      {
        v568 = v62;
        do
        {
          v569 = *v568;
          v571 = (v569 | 0x20u) - 97 >= 0x1A && (v569 - 48) >= 0xA && (v569 - 8204) >= 2;
          if (v571 && v569 != 95 && v569 != 36)
            break;
          *v14 = ++v568;
        }
        while ((unint64_t)v568 < v140);
      }
      v467 = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v568 - (_DWORD)v62) >> 1);
      *(_DWORD *)(a1 + 28) = v467;
      *(_BYTE *)(a1 + 24) = 5;
LABEL_762:
      JSC::Identifier::fromString((uint64_t)v12, (WTF::AtomStringImpl *)v62, v467 & 0x7FFFFFFF, (uint64_t)v62, v63, v64, v65, v66, v693);
      v469 = v693[0];
      v693[0] = 0;
      v470 = v694;
      v694 = v469;
      if (v470)
      {
        v471 = *(_DWORD *)v470 - 2;
        if (*(_DWORD *)v470 == 2)
        {
          WTF::StringImpl::~StringImpl(v470, v60, v61, v468, v63, v64, v65, v66);
          WTF::fastFree(v488, v489, v490, v491, v492, v493, v494, v495);
          v470 = v693[0];
          v693[0] = 0;
          if (!v470)
            goto LABEL_419;
          v471 = *(_DWORD *)v470 - 2;
          if (*(_DWORD *)v470 == 2)
          {
            WTF::StringImpl::~StringImpl(v470, v60, v61, v496, v63, v64, v65, v66);
            WTF::fastFree(v497, v498, v499, v500, v501, v502, v503, v504);
            goto LABEL_419;
          }
        }
        *(_DWORD *)v470 = v471;
      }
LABEL_419:
      v281 = HIDWORD(v699);
      if (HIDWORD(v699) == (_DWORD)v699)
      {
        WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPPathEntry&>((uint64_t)&v698, (unint64_t)&v694);
      }
      else
      {
        v349 = v698;
        v350 = v694;
        if (v694)
          *(_DWORD *)v694 += 2;
        v351 = v349 + 16 * v281;
        *(_QWORD *)v351 = v350;
        v352 = *v9;
        *(_BYTE *)(v351 + 12) = *((_BYTE *)v9 + 4);
        *(_DWORD *)(v351 + 8) = v352;
        ++HIDWORD(v699);
      }
      v62 = *(unsigned __int16 **)(a1 + 48);
      v282 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v62 >= v282)
      {
        v284 = 0;
      }
      else
      {
        do
        {
          v283 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
          v284 = !v283;
          if (!v283)
            break;
          *v14 = ++v62;
        }
        while ((unint64_t)v62 < v282);
      }
      if (v62 == (unsigned __int16 *)v282)
      {
        LOBYTE(v84) = 14;
        *v17 = 14;
      }
      else
      {
        *v17 = 18;
        v285 = *v62;
        if (v285 > 0xFF)
          goto LABEL_832;
        LODWORD(v84) = JSC::tokenTypesOfLatin1Characters[v285];
        if (v84 > 4)
        {
          if ((_DWORD)v84 == 5)
          {
            if ((_DWORD)v285 == 102)
            {
              if ((uint64_t)(v282 - (_QWORD)v62) < 9
                || *(_DWORD *)(v62 + 1) != 7077985
                || *(_DWORD *)(v62 + 3) != 6619251)
              {
                goto LABEL_1177;
              }
              *v14 = v62 + 5;
              LOBYTE(v84) = 12;
              *v17 = 12;
            }
            else if ((_DWORD)v285 == 116)
            {
              if ((uint64_t)(v282 - (_QWORD)v62) < 7 || *(_DWORD *)(v62 + 1) != 7667826 || v62[3] != 101)
                goto LABEL_1177;
              *v14 = v62 + 4;
              LOBYTE(v84) = 11;
              *v17 = 11;
            }
            else if ((_DWORD)v285 == 110
                   && (uint64_t)(v282 - (_QWORD)v62) >= 7
                   && *(_DWORD *)(v62 + 1) == 7078005
                   && v62[3] == 108)
            {
              *v14 = v62 + 4;
              LOBYTE(v84) = 13;
              *v17 = 13;
            }
            else
            {
LABEL_1177:
              *(_QWORD *)(a1 + 32) = v62;
              LODWORD(v616) = (_DWORD)v62;
              if ((unint64_t)v62 < v282)
              {
                v616 = v62;
                do
                {
                  v617 = *v616;
                  v619 = (v617 | 0x20u) - 97 >= 0x1A
                      && (v617 - 48) >= 0xA
                      && (v617 - 8204) >= 2;
                  if (v619 && v617 != 95 && v617 != 36)
                    break;
                  *v14 = ++v616;
                }
                while ((unint64_t)v616 < v282);
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v616 - (_DWORD)v62) >> 1);
              LOBYTE(v84) = 5;
              *(_BYTE *)(a1 + 24) = 5;
            }
          }
          else if ((_DWORD)v84 == 6)
          {
            v376 = v284 ^ 1;
            if ((_DWORD)v285 != 45)
              v376 = 1;
            if ((v376 & 1) != 0)
            {
              v377 = 0;
            }
            else
            {
              *v14 = v62 + 1;
              v377 = 1;
            }
            v378 = &v62[v377];
            if ((unint64_t)v378 >= v282)
            {
LABEL_1149:
              v84 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v84 = 0xE00000002;
              v610 = "Invalid number";
              goto LABEL_1150;
            }
            v379 = *v378;
            if (v379 == 48)
            {
              v382 = v377 + 1;
            }
            else
            {
              if ((v379 - 49) > 8)
                goto LABEL_1149;
              v380 = v377 + 1;
              v381 = 2 * v377 + 2;
              do
              {
                v382 = v380;
                if ((unint64_t)v62 + v381 >= v282)
                  break;
                ++v380;
                v381 += 2;
              }
              while (v62[v382] - 48 < 0xA);
            }
            v383 = &v62[v382];
            *v14 = v383;
            if ((unint64_t)v383 >= v282)
              goto LABEL_1303;
            v384 = *v383;
            if (v384 == 101 || v384 == 69)
              goto LABEL_1303;
            if (v384 == 46)
            {
              *v14 = v383 + 1;
              if ((unint64_t)(v383 + 1) >= v282 || v383[1] - 48 > 9)
              {
                v84 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v84 = 0x2200000002;
                v610 = "Invalid digits after decimal point";
                goto LABEL_1150;
              }
              v637 = (unint64_t)&v62[v382 + 2];
              do
              {
                v383 = (unsigned __int16 *)v637;
                if (v637 >= v282)
                  break;
                v637 += 2;
              }
              while (*v383 - 48 < 0xA);
              *v14 = v383;
              goto LABEL_1303;
            }
            if (v382 > 9)
            {
LABEL_1303:
              if ((unint64_t)v383 < v282 && (*v383 | 0x20) == 0x65)
              {
                v638 = v383 + 1;
                *v14 = v383 + 1;
                if ((unint64_t)(v383 + 1) < v282)
                {
                  v639 = *v638;
                  if (v639 == 45 || v639 == 43)
                  {
                    v638 = v383 + 2;
                    *v14 = v383 + 2;
                  }
                }
                if ((unint64_t)v638 < v282 && *v638 - 48 <= 9)
                {
                  v640 = v638 + 1;
                  do
                  {
                    v383 = v640;
                    if ((unint64_t)v640 >= v282)
                      break;
                    ++v640;
                  }
                  while (*v383 - 48 < 0xA);
                  *v14 = v383;
                  goto LABEL_1315;
                }
                v84 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v84 = 0x5D00000002;
                v610 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1150:
                *(_QWORD *)(v84 + 8) = v610;
                *(_DWORD *)(v84 + 16) = 4;
                v611 = *v18;
                *v18 = (WTF::StringImpl *)v84;
                LOBYTE(v84) = 18;
                if (v611)
                {
                  if (*(_DWORD *)v611 == 2)
                  {
                    v508 = v611;
LABEL_1335:
                    WTF::StringImpl::~StringImpl(v508, v60, v61, (uint64_t)v62, v63, v64, v65, v66);
                    WTF::fastFree(v644, v645, v646, v647, v648, v649, v650, v651);
                    goto LABEL_836;
                  }
                  *(_DWORD *)v611 -= 2;
                }
              }
              else
              {
LABEL_1315:
                *v17 = 6;
                if ((char *)v383 - (char *)v62 <= -2)
                  goto LABEL_1475;
                v693[0] = 0;
                fast_float::from_chars_advanced<double,char16_t>(v62, v383, (double *)v693, 0x2E00000005);
                v387 = *(double *)v693;
LABEL_586:
                *(double *)(a1 + 32) = v387;
                LOBYTE(v84) = 6;
              }
            }
            else
            {
              *v17 = 6;
              if ((_DWORD)v285 == 45)
              {
                if (v382 < 2)
                  goto LABEL_1336;
                ++v62;
              }
              v385 = 0;
              do
              {
                v386 = *v62++;
                v385 = v386 + 10 * v385 - 48;
              }
              while (v62 < v383);
              if ((_DWORD)v285 != 45)
              {
                v387 = (double)v385;
                goto LABEL_586;
              }
              if (v385)
              {
                v387 = (double)-v385;
                goto LABEL_586;
              }
LABEL_1336:
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              LOBYTE(v84) = 6;
            }
          }
          else if ((v84 - 18) < 2)
          {
LABEL_832:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
            if (!v693[0])
            {
              __break(0xC471u);
              JUMPOUT(0x198B2EED0);
            }
            v508 = *v18;
            *v18 = v693[0];
            if (v508)
            {
              if (*(_DWORD *)v508 != 2)
              {
                *(_DWORD *)v508 -= 2;
                goto LABEL_836;
              }
              goto LABEL_1335;
            }
LABEL_836:
            LOBYTE(v84) = 18;
          }
          else
          {
LABEL_485:
            *v17 = v84;
            *v14 = v62 + 1;
          }
        }
        else
        {
          if ((_DWORD)v84 != 4)
            goto LABEL_485;
          v286 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v285 == 39)
          {
            if (*(_BYTE *)(a1 + 40))
            {
              v61 = (unint64_t)(v62 + 1);
              *v14 = v62 + 1;
              goto LABEL_1286;
            }
            v84 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v84 = 0x2900000002;
            v610 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1150;
          }
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
          if (!v286)
          {
            v287 = v282 - v61;
            if ((uint64_t)(v282 - v61) <= -2)
              goto LABEL_1475;
            v288 = (int16x8_t *)((char *)v62 + (v287 & 0xFFFFFFFFFFFFFFFELL) + 2);
            if ((unint64_t)v287 <= 0xE)
            {
              if (v282 != v61)
              {
                v641 = 2 * (v287 >> 1);
                v642 = (int16x8_t *)(v62 + 1);
                while (1)
                {
                  v643 = v642->u16[0];
                  if (v643 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v643])
                    break;
                  v642 = (int16x8_t *)((char *)v642 + 2);
                  v641 -= 2;
                  if (!v641)
                    goto LABEL_504;
                }
                v288 = v642;
              }
            }
            else
            {
              v289 = v62 + 1;
              if (v287 < 15)
              {
LABEL_442:
                if (v289 < (unsigned __int16 *)v288)
                {
                  v297 = (unsigned __int16 *)&v288[-1];
                  v298 = v288[-1];
                  v299.i64[0] = 0x22002200220022;
                  v299.i64[1] = 0x22002200220022;
                  v300 = (int8x16_t)vceqq_s16(v298, v299);
                  v301.i64[0] = 0x5C005C005C005CLL;
                  v301.i64[1] = 0x5C005C005C005CLL;
                  v302.i64[0] = 0x20002000200020;
                  v302.i64[1] = 0x20002000200020;
                  v296 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v298, v301), (int8x16_t)vcgtq_u16(v302, (uint16x8_t)v298)), v300);
                  v300.i16[0] = vmaxvq_u16((uint16x8_t)v296);
                  if (v300.i32[0])
                    goto LABEL_503;
                }
              }
              else
              {
                v290 = v62 + 8;
                while (1)
                {
                  v291 = *(int16x8_t *)(v290 - 7);
                  v292.i64[0] = 0x22002200220022;
                  v292.i64[1] = 0x22002200220022;
                  v293 = (int8x16_t)vceqq_s16(v291, v292);
                  v294.i64[0] = 0x5C005C005C005CLL;
                  v294.i64[1] = 0x5C005C005C005CLL;
                  v295.i64[0] = 0x20002000200020;
                  v295.i64[1] = 0x20002000200020;
                  v296 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v291, v294), (int8x16_t)vcgtq_u16(v295, (uint16x8_t)v291)), v293);
                  v293.i16[0] = vmaxvq_u16((uint16x8_t)v296);
                  if (v293.i32[0])
                    break;
                  v290 += 8;
                  if (v290 >= (unsigned __int16 *)v288)
                  {
                    v289 = v290 - 7;
                    goto LABEL_442;
                  }
                }
                v297 = v290 - 7;
LABEL_503:
                v288 = (int16x8_t *)&v297[vminvq_u16((uint16x8_t)vornq_s8(v692, v296))];
              }
            }
LABEL_504:
            *v14 = (unsigned __int16 *)v288;
            goto LABEL_505;
          }
LABEL_1286:
          v288 = (int16x8_t *)v61;
          if (v61 < v282)
          {
            while (1)
            {
              v636 = v288->u16[0];
              if (v636 < 0x20)
              {
                if (v636 != 9)
                  goto LABEL_505;
              }
              else if (v636 == (_DWORD)v285 || v636 > 0xFF || v636 == 92)
              {
                goto LABEL_505;
              }
              v288 = (int16x8_t *)((char *)v288 + 2);
              *v14 = (unsigned __int16 *)v288;
              if ((unint64_t)v288 >= v282)
                goto LABEL_505;
            }
          }
          v288 = (int16x8_t *)v61;
LABEL_505:
          if ((unint64_t)v288 < v282 && v288->u16[0] == (_DWORD)v285)
          {
            *(_BYTE *)(a1 + 25) &= ~1u;
            *(_QWORD *)(a1 + 32) = v61;
            *(_QWORD *)(a1 + 48) = (char *)v288->i64 + 2;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v288 - v61) >> 1);
            LOBYTE(v84) = 4;
            *(_BYTE *)(a1 + 24) = 4;
          }
          else
          {
            LOBYTE(v84) = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v285, v63, v64, v65, v66);
          }
        }
      }
    }
    if (v84 != 16)
      goto LABEL_129;
LABEL_375:
    v253 = *(unsigned __int16 **)(a1 + 48);
    v254 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v253 >= v254)
    {
      v256 = 0;
    }
    else
    {
      do
      {
        v255 = *v253 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v253] == 19;
        v256 = !v255;
        if (!v255)
          break;
        *v14 = ++v253;
      }
      while ((unint64_t)v253 < v254);
    }
    if (v253 == (unsigned __int16 *)v254)
    {
      v375 = 14;
      goto LABEL_561;
    }
    *v17 = 18;
    v257 = *v253;
    if (v257 > 0xFF)
      goto LABEL_826;
    v258 = JSC::tokenTypesOfLatin1Characters[v257];
    if (v258 > 4)
    {
      if (v258 != 5)
      {
        if (v258 != 6)
        {
          if (v258 - 18 >= 2)
          {
LABEL_448:
            *v17 = v258;
            *v14 = v253 + 1;
            goto LABEL_449;
          }
LABEL_826:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v253, 1uLL, 39);
          v506 = v693[0];
          if (!v693[0])
          {
            __break(0xC471u);
            JUMPOUT(0x198B2EEC8);
          }
          goto LABEL_827;
        }
        v363 = v256 ^ 1;
        if ((_DWORD)v257 != 45)
          v363 = 1;
        if ((v363 & 1) != 0)
        {
          v364 = 0;
        }
        else
        {
          *v14 = v253 + 1;
          v364 = 1;
        }
        v365 = &v253[v364];
        if ((unint64_t)v365 >= v254)
          goto LABEL_1147;
        v366 = *v365;
        if (v366 == 48)
        {
          v369 = v364 + 1;
          goto LABEL_545;
        }
        if ((v366 - 49) > 8)
        {
LABEL_1147:
          v607 = WTF::fastCompactMalloc((WTF *)0x20);
          v506 = (WTF::StringImpl *)v607;
          v608 = 0xE00000002;
          v609 = "Invalid number";
          goto LABEL_1148;
        }
        v367 = v364 + 1;
        v368 = 2 * v364 + 2;
        do
        {
          v369 = v367;
          if ((unint64_t)v253 + v368 >= v254)
            break;
          ++v367;
          v368 += 2;
        }
        while (v253[v369] - 48 < 0xA);
LABEL_545:
        v370 = &v253[v369];
        *v14 = v370;
        if ((unint64_t)v370 < v254)
        {
          v371 = *v370;
          if (v371 != 101 && v371 != 69)
          {
            if (v371 == 46)
            {
              *v14 = v370 + 1;
              if ((unint64_t)(v370 + 1) >= v254 || v370[1] - 48 > 9)
              {
                v607 = WTF::fastCompactMalloc((WTF *)0x20);
                v506 = (WTF::StringImpl *)v607;
                v608 = 0x2200000002;
                v609 = "Invalid digits after decimal point";
                goto LABEL_1148;
              }
              v629 = (unint64_t)&v253[v369 + 2];
              do
              {
                v370 = (unsigned __int16 *)v629;
                if (v629 >= v254)
                  break;
                v629 += 2;
              }
              while (*v370 - 48 < 0xA);
              *v14 = v370;
            }
            else if (v369 <= 9)
            {
              *v17 = 6;
              if ((_DWORD)v257 == 45)
              {
                if (v369 >= 2)
                {
                  ++v253;
                  goto LABEL_551;
                }
              }
              else
              {
LABEL_551:
                v372 = 0;
                do
                {
                  v373 = *v253++;
                  v372 = v373 + 10 * v372 - 48;
                }
                while (v253 < v370);
                if ((_DWORD)v257 != 45)
                {
                  v374 = (double)v372;
                  goto LABEL_555;
                }
                if (v372)
                {
                  v374 = (double)-v372;
                  goto LABEL_555;
                }
              }
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              goto LABEL_449;
            }
          }
        }
        if ((unint64_t)v370 < v254 && (*v370 | 0x20) == 0x65)
        {
          v630 = v370 + 1;
          *v14 = v370 + 1;
          if ((unint64_t)(v370 + 1) < v254)
          {
            v631 = *v630;
            if (v631 == 45 || v631 == 43)
            {
              v630 = v370 + 2;
              *v14 = v370 + 2;
            }
          }
          if ((unint64_t)v630 >= v254 || *v630 - 48 > 9)
          {
            v607 = WTF::fastCompactMalloc((WTF *)0x20);
            v506 = (WTF::StringImpl *)v607;
            v608 = 0x5D00000002;
            v609 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_1148;
          }
          v632 = v630 + 1;
          do
          {
            v370 = v632;
            if ((unint64_t)v632 >= v254)
              break;
            ++v632;
          }
          while (*v370 - 48 < 0xA);
          *v14 = v370;
        }
        *v17 = 6;
        if ((char *)v370 - (char *)v253 <= -2)
          goto LABEL_1475;
        v693[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>(v253, v370, (double *)v693, 0x2E00000005);
        v374 = *(double *)v693;
LABEL_555:
        *(double *)(a1 + 32) = v374;
        goto LABEL_449;
      }
      if ((_DWORD)v257 == 102)
      {
        if ((uint64_t)(v254 - (_QWORD)v253) >= 9 && *(_DWORD *)(v253 + 1) == 7077985 && *(_DWORD *)(v253 + 3) == 6619251)
        {
          *v14 = v253 + 5;
          v375 = 12;
LABEL_561:
          *v17 = v375;
          goto LABEL_449;
        }
      }
      else if ((_DWORD)v257 == 116)
      {
        if ((uint64_t)(v254 - (_QWORD)v253) >= 7 && *(_DWORD *)(v253 + 1) == 7667826 && v253[3] == 101)
        {
          *v14 = v253 + 4;
          v375 = 11;
          goto LABEL_561;
        }
      }
      else if ((_DWORD)v257 == 110
             && (uint64_t)(v254 - (_QWORD)v253) >= 7
             && *(_DWORD *)(v253 + 1) == 7078005
             && v253[3] == 108)
      {
        *v14 = v253 + 4;
        v375 = 13;
        goto LABEL_561;
      }
      *(_QWORD *)(a1 + 32) = v253;
      LODWORD(v612) = (_DWORD)v253;
      if ((unint64_t)v253 < v254)
      {
        v612 = v253;
        do
        {
          v613 = *v612;
          v615 = (v613 | 0x20u) - 97 >= 0x1A && (v613 - 48) >= 0xA && (v613 - 8204) >= 2;
          if (v615 && v613 != 95 && v613 != 36)
            break;
          *v14 = ++v612;
        }
        while ((unint64_t)v612 < v254);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v612 - (_DWORD)v253) >> 1);
      v353 = 5;
LABEL_501:
      *(_BYTE *)(a1 + 24) = v353;
      goto LABEL_449;
    }
    if (v258 != 4)
      goto LABEL_448;
    v259 = *(unsigned __int8 *)(a1 + 40);
    if ((_DWORD)v257 == 39)
    {
      if (*(_BYTE *)(a1 + 40))
      {
        v61 = (unint64_t)(v253 + 1);
        *v14 = v253 + 1;
LABEL_1240:
        v261 = (int16x8_t *)v61;
        if (v61 < v254)
        {
          while (1)
          {
            v628 = v261->u16[0];
            if (v628 < 0x20)
            {
              if (v628 != 9)
                goto LABEL_498;
            }
            else if (v628 == (_DWORD)v257 || v628 > 0xFF || v628 == 92)
            {
              goto LABEL_498;
            }
            v261 = (int16x8_t *)((char *)v261 + 2);
            *v14 = (unsigned __int16 *)v261;
            if ((unint64_t)v261 >= v254)
              goto LABEL_498;
          }
        }
        v261 = (int16x8_t *)v61;
        goto LABEL_498;
      }
      v607 = WTF::fastCompactMalloc((WTF *)0x20);
      v506 = (WTF::StringImpl *)v607;
      v608 = 0x2900000002;
      v609 = "Single quotes (') are not allowed in JSON";
LABEL_1148:
      *(_QWORD *)v607 = v608;
      *(_QWORD *)(v607 + 8) = v609;
      *(_DWORD *)(v607 + 16) = 4;
LABEL_827:
      v507 = *v18;
      *v18 = v506;
      if (v507)
      {
        if (*(_DWORD *)v507 == 2)
        {
          WTF::StringImpl::~StringImpl(v507, v505, v61, (uint64_t)v253, v63, v64, v65, v66);
          WTF::fastFree(v512, v513, v514, v515, v516, v517, v518, v519);
        }
        else
        {
          *(_DWORD *)v507 -= 2;
        }
      }
      goto LABEL_449;
    }
    v61 = (unint64_t)(v253 + 1);
    *v14 = v253 + 1;
    if (v259)
      goto LABEL_1240;
    v260 = v254 - v61;
    if ((uint64_t)(v254 - v61) <= -2)
      goto LABEL_1475;
    v261 = (int16x8_t *)((char *)v253 + (v260 & 0xFFFFFFFFFFFFFFFELL) + 2);
    if ((unint64_t)v260 <= 0xE)
    {
      if (v254 != v61)
      {
        v633 = 2 * (v260 >> 1);
        v634 = (int16x8_t *)(v253 + 1);
        while (1)
        {
          v635 = v634->u16[0];
          if (v635 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v635])
            break;
          v634 = (int16x8_t *)((char *)v634 + 2);
          v633 -= 2;
          if (!v633)
            goto LABEL_497;
        }
        v261 = v634;
      }
    }
    else
    {
      v262 = v253 + 1;
      if (v260 < 15)
      {
LABEL_396:
        if (v262 < (unsigned __int16 *)v261)
        {
          v270 = (unsigned __int16 *)&v261[-1];
          v271 = v261[-1];
          v272.i64[0] = 0x22002200220022;
          v272.i64[1] = 0x22002200220022;
          v273 = (int8x16_t)vceqq_s16(v271, v272);
          v274.i64[0] = 0x5C005C005C005CLL;
          v274.i64[1] = 0x5C005C005C005CLL;
          v275.i64[0] = 0x20002000200020;
          v275.i64[1] = 0x20002000200020;
          v269 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v271, v274), (int8x16_t)vcgtq_u16(v275, (uint16x8_t)v271)), v273);
          v273.i16[0] = vmaxvq_u16((uint16x8_t)v269);
          if (v273.i32[0])
            goto LABEL_496;
        }
      }
      else
      {
        v263 = v253 + 8;
        while (1)
        {
          v264 = *(int16x8_t *)(v263 - 7);
          v265.i64[0] = 0x22002200220022;
          v265.i64[1] = 0x22002200220022;
          v266 = (int8x16_t)vceqq_s16(v264, v265);
          v267.i64[0] = 0x5C005C005C005CLL;
          v267.i64[1] = 0x5C005C005C005CLL;
          v268.i64[0] = 0x20002000200020;
          v268.i64[1] = 0x20002000200020;
          v269 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v264, v267), (int8x16_t)vcgtq_u16(v268, (uint16x8_t)v264)), v266);
          v266.i16[0] = vmaxvq_u16((uint16x8_t)v269);
          if (v266.i32[0])
            break;
          v263 += 8;
          if (v263 >= (unsigned __int16 *)v261)
          {
            v262 = v263 - 7;
            goto LABEL_396;
          }
        }
        v270 = v263 - 7;
LABEL_496:
        v261 = (int16x8_t *)&v270[vminvq_u16((uint16x8_t)vornq_s8(v692, v269))];
      }
    }
LABEL_497:
    *v14 = (unsigned __int16 *)v261;
LABEL_498:
    if ((unint64_t)v261 < v254 && v261->u16[0] == (_DWORD)v257)
    {
      *(_BYTE *)(a1 + 25) &= ~1u;
      *(_QWORD *)(a1 + 32) = v61;
      *(_QWORD *)(a1 + 48) = (char *)v261->i64 + 2;
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v261 - v61) >> 1);
      v353 = 4;
      goto LABEL_501;
    }
    JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v257, v63, v64, v65, v66);
LABEL_449:
    memset(v693, 0, sizeof(v693));
    v303 = *(_DWORD *)(a2 + 12);
    if (v303 == *(_DWORD *)(a2 + 8))
    {
      WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPData>(a2, (unint64_t)v693);
    }
    else
    {
      JSC::JSONPData::JSONPData(*(_QWORD *)a2 + 24 * v303, (uint64_t)v693, v61, (uint64_t)v253, v63, v64, v65, v66);
      ++*(_DWORD *)(a2 + 12);
    }
    JSC::JSONPData::~JSONPData((JSC::JSONPData *)v693, v304, v305, v306, v307, v308, v309, v310);
    v318 = JSC::LiteralParser<char16_t>::parse((uint64_t *)a1, (uint64_t)v12, 2uLL, v311, v312, v313, v314, v315);
    if (*((_DWORD *)v12 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v316, v317, (uint64_t)v62, v63, v64, v65, v66))
    {
      goto LABEL_128;
    }
    v319 = *(_DWORD *)(a2 + 12);
    if (!v319)
    {
      __break(0xC471u);
      JUMPOUT(0x198B2EEA8);
    }
    JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::set((unint64_t **)(*(_QWORD *)a2 + 24 * v319 - 8), (uint64_t)v12, v318, (uint64_t)v62, v63, v64, v65, v66);
    v320 = *(_DWORD *)(a2 + 12);
    if (!v320)
    {
      __break(0xC471u);
      JUMPOUT(0x198B2EEB0);
    }
    v321 = *(_QWORD *)a2 + 24 * v320;
    v322 = *(_QWORD **)(v321 - 8);
    if (!v322 || !*v322)
      goto LABEL_128;
    v324 = *(_QWORD *)(v321 - 24);
    v323 = v321 - 24;
    *(_QWORD *)v323 = v698;
    v698 = v324;
    v325 = *(_DWORD *)(v323 + 8);
    *(_DWORD *)(v323 + 8) = v699;
    LODWORD(v699) = v325;
    v326 = *(_DWORD *)(v323 + 12);
    *(_DWORD *)(v323 + 12) = HIDWORD(v699);
    HIDWORD(v699) = v326;
    if (v696 != 3)
      continue;
    if (*v17 != 9)
      goto LABEL_128;
    v62 = *(unsigned __int16 **)(a1 + 48);
    v327 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v62 >= v327)
    {
      v329 = 0;
    }
    else
    {
      do
      {
        v328 = *v62 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v62] == 19;
        v329 = !v328;
        if (!v328)
          break;
        *v14 = ++v62;
      }
      while ((unint64_t)v62 < v327);
    }
    if (v62 == (unsigned __int16 *)v327)
    {
      v442 = 14;
      goto LABEL_719;
    }
    *v17 = 18;
    v330 = *v62;
    if (v330 > 0xFF)
      goto LABEL_848;
    v331 = JSC::tokenTypesOfLatin1Characters[v330];
    if (v331 > 4)
    {
      if (v331 == 5)
      {
        if ((_DWORD)v330 == 102)
        {
          if ((uint64_t)(v327 - (_QWORD)v62) >= 9 && *(_DWORD *)(v62 + 1) == 7077985 && *(_DWORD *)(v62 + 3) == 6619251)
          {
            *v14 = v62 + 5;
            v442 = 12;
            goto LABEL_719;
          }
        }
        else if ((_DWORD)v330 == 116)
        {
          if ((uint64_t)(v327 - (_QWORD)v62) >= 7 && *(_DWORD *)(v62 + 1) == 7667826 && v62[3] == 101)
          {
            *v14 = v62 + 4;
            v442 = 11;
            goto LABEL_719;
          }
        }
        else if ((_DWORD)v330 == 110
               && (uint64_t)(v327 - (_QWORD)v62) >= 7
               && *(_DWORD *)(v62 + 1) == 7078005
               && v62[3] == 108)
        {
          *v14 = v62 + 4;
          v442 = 13;
LABEL_719:
          *v17 = v442;
LABEL_720:
          v116 = 2;
          goto LABEL_129;
        }
        *(_QWORD *)(a1 + 32) = v62;
        LODWORD(v671) = (_DWORD)v62;
        if ((unint64_t)v62 < v327)
        {
          v671 = v62;
          do
          {
            v672 = *v671;
            v674 = (v672 | 0x20u) - 97 >= 0x1A && (v672 - 48) >= 0xA && (v672 - 8204) >= 2;
            if (v674 && v672 != 95 && v672 != 36)
              break;
            *v14 = ++v671;
          }
          while ((unint64_t)v671 < v327);
        }
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v671 - (_DWORD)v62) >> 1);
        v392 = 5;
LABEL_618:
        *(_BYTE *)(a1 + 24) = v392;
        goto LABEL_720;
      }
      if (v331 != 6)
      {
        if (v331 - 18 >= 2)
        {
LABEL_565:
          *v17 = v331;
          *v14 = v62 + 1;
          goto LABEL_651;
        }
LABEL_848:
        WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)v693, (int8x16_t *)"Unrecognized token '", 21, v62, 1uLL, 39);
        v510 = v693[0];
        if (!v693[0])
        {
          __break(0xC471u);
          JUMPOUT(0x198B2EEE0);
        }
        goto LABEL_849;
      }
      v394 = v329 ^ 1;
      if ((_DWORD)v330 != 45)
        v394 = 1;
      if ((v394 & 1) != 0)
      {
        v395 = 0;
      }
      else
      {
        *v14 = v62 + 1;
        v395 = 1;
      }
      v396 = &v62[v395];
      if ((unint64_t)v396 >= v327)
      {
LABEL_1351:
        v664 = WTF::fastCompactMalloc((WTF *)0x20);
        v510 = (WTF::StringImpl *)v664;
        v665 = 0xE00000002;
        v666 = "Invalid number";
        goto LABEL_1352;
      }
      v397 = *v396;
      if (v397 == 48)
      {
        v400 = v395 + 1;
      }
      else
      {
        if ((v397 - 49) > 8)
          goto LABEL_1351;
        v398 = v395 + 1;
        v399 = 2 * v395 + 2;
        do
        {
          v400 = v398;
          if ((unint64_t)v62 + v399 >= v327)
            break;
          ++v398;
          v399 += 2;
        }
        while (v62[v400] - 48 < 0xA);
      }
      v401 = &v62[v400];
      *v14 = v401;
      if ((unint64_t)v401 >= v327)
        goto LABEL_1461;
      v402 = *v401;
      if (v402 == 101 || v402 == 69)
        goto LABEL_1461;
      if (v402 == 46)
      {
        *v14 = v401 + 1;
        if ((unint64_t)(v401 + 1) >= v327 || v401[1] - 48 > 9)
        {
          v664 = WTF::fastCompactMalloc((WTF *)0x20);
          v510 = (WTF::StringImpl *)v664;
          v665 = 0x2200000002;
          v666 = "Invalid digits after decimal point";
          goto LABEL_1352;
        }
        v684 = (unint64_t)&v62[v400 + 2];
        do
        {
          v401 = (unsigned __int16 *)v684;
          if (v684 >= v327)
            break;
          v684 += 2;
        }
        while (*v401 - 48 < 0xA);
        *v14 = v401;
        goto LABEL_1461;
      }
      if (v400 > 9)
      {
LABEL_1461:
        if ((unint64_t)v401 < v327 && (*v401 | 0x20) == 0x65)
        {
          v685 = v401 + 1;
          *v14 = v401 + 1;
          if ((unint64_t)(v401 + 1) < v327)
          {
            v686 = *v685;
            if (v686 == 45 || v686 == 43)
            {
              v685 = v401 + 2;
              *v14 = v401 + 2;
            }
          }
          if ((unint64_t)v685 >= v327 || *v685 - 48 > 9)
            goto LABEL_1476;
          v687 = v685 + 1;
          do
          {
            v401 = v687;
            if ((unint64_t)v687 >= v327)
              break;
            ++v687;
          }
          while (*v401 - 48 < 0xA);
          *v14 = v401;
        }
        *v17 = 6;
        if ((char *)v401 - (char *)v62 <= -2)
          goto LABEL_1475;
        v693[0] = 0;
        fast_float::from_chars_advanced<double,char16_t>(v62, v401, (double *)v693, 0x2E00000005);
        v405 = *(double *)v693;
LABEL_649:
        *(double *)(a1 + 32) = v405;
      }
      else
      {
        *v17 = 6;
        if ((_DWORD)v330 == 45)
        {
          if (v400 < 2)
            goto LABEL_1493;
          ++v62;
        }
        v403 = 0;
        do
        {
          v404 = *v62++;
          v403 = v404 + 10 * v403 - 48;
        }
        while (v62 < v401);
        if ((_DWORD)v330 != 45)
        {
          v405 = (double)v403;
          goto LABEL_649;
        }
        if (v403)
        {
          v405 = (double)-v403;
          goto LABEL_649;
        }
LABEL_1493:
        *(_QWORD *)(a1 + 32) = 0x8000000000000000;
      }
    }
    else
    {
      if (v331 != 4)
        goto LABEL_565;
      v332 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v330 == 39)
      {
        if (*(_BYTE *)(a1 + 40))
        {
          v61 = (unint64_t)(v62 + 1);
          *v14 = v62 + 1;
LABEL_1444:
          v334 = (int16x8_t *)v61;
          if (v61 < v327)
          {
            while (1)
            {
              v683 = v334->u16[0];
              if (v683 < 0x20)
              {
                if (v683 != 9)
                  goto LABEL_615;
              }
              else if (v683 == (_DWORD)v330 || v683 > 0xFF || v683 == 92)
              {
                goto LABEL_615;
              }
              v334 = (int16x8_t *)((char *)v334 + 2);
              *v14 = (unsigned __int16 *)v334;
              if ((unint64_t)v334 >= v327)
                goto LABEL_615;
            }
          }
          v334 = (int16x8_t *)v61;
          goto LABEL_615;
        }
        v664 = WTF::fastCompactMalloc((WTF *)0x20);
        v510 = (WTF::StringImpl *)v664;
        v665 = 0x2900000002;
        v666 = "Single quotes (') are not allowed in JSON";
        goto LABEL_1352;
      }
      v61 = (unint64_t)(v62 + 1);
      *v14 = v62 + 1;
      if (v332)
        goto LABEL_1444;
      v333 = v327 - v61;
      if ((uint64_t)(v327 - v61) <= -2)
        goto LABEL_1475;
      v334 = (int16x8_t *)((char *)v62 + (v333 & 0xFFFFFFFFFFFFFFFELL) + 2);
      if ((unint64_t)v333 <= 0xE)
      {
        if (v327 != v61)
        {
          v688 = 2 * (v333 >> 1);
          v689 = (int16x8_t *)(v62 + 1);
          while (1)
          {
            v690 = v689->u16[0];
            if (v690 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v690])
              break;
            v689 = (int16x8_t *)((char *)v689 + 2);
            v688 -= 2;
            if (!v688)
              goto LABEL_614;
          }
          v334 = v689;
        }
      }
      else
      {
        v335 = v62 + 1;
        if (v333 < 15)
        {
LABEL_479:
          if (v335 < (unsigned __int16 *)v334)
          {
            v343 = (unsigned __int16 *)&v334[-1];
            v344 = v334[-1];
            v345.i64[0] = 0x22002200220022;
            v345.i64[1] = 0x22002200220022;
            v346 = (int8x16_t)vceqq_s16(v344, v345);
            v347.i64[0] = 0x5C005C005C005CLL;
            v347.i64[1] = 0x5C005C005C005CLL;
            v348.i64[0] = 0x20002000200020;
            v348.i64[1] = 0x20002000200020;
            v342 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v344, v347), (int8x16_t)vcgtq_u16(v348, (uint16x8_t)v344)), v346);
            v346.i16[0] = vmaxvq_u16((uint16x8_t)v342);
            if (v346.i32[0])
              goto LABEL_613;
          }
        }
        else
        {
          v336 = v62 + 8;
          while (1)
          {
            v337 = *(int16x8_t *)(v336 - 7);
            v338.i64[0] = 0x22002200220022;
            v338.i64[1] = 0x22002200220022;
            v339 = (int8x16_t)vceqq_s16(v337, v338);
            v340.i64[0] = 0x5C005C005C005CLL;
            v340.i64[1] = 0x5C005C005C005CLL;
            v341.i64[0] = 0x20002000200020;
            v341.i64[1] = 0x20002000200020;
            v342 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v337, v340), (int8x16_t)vcgtq_u16(v341, (uint16x8_t)v337)), v339);
            v339.i16[0] = vmaxvq_u16((uint16x8_t)v342);
            if (v339.i32[0])
              break;
            v336 += 8;
            if (v336 >= (unsigned __int16 *)v334)
            {
              v335 = v336 - 7;
              goto LABEL_479;
            }
          }
          v343 = v336 - 7;
LABEL_613:
          v334 = (int16x8_t *)&v343[vminvq_u16((uint16x8_t)vornq_s8(v692, v342))];
        }
      }
LABEL_614:
      *v14 = (unsigned __int16 *)v334;
LABEL_615:
      if ((unint64_t)v334 < v327 && v334->u16[0] == (_DWORD)v330)
      {
        *(_BYTE *)(a1 + 25) &= ~1u;
        *(_QWORD *)(a1 + 32) = v61;
        *(_QWORD *)(a1 + 48) = (char *)v334->i64 + 2;
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v334 - v61) >> 1);
        v392 = 4;
        goto LABEL_618;
      }
      JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v61, v330, v63, v64, v65, v66);
    }
  }
  if (v116 != 2)
    return 0;
  v119 = *v17;
  return v119 == 14;
}

uint64_t JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v9;
  WTF::StringBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  __int16 v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  char v53;
  char v54;
  char v55;
  unsigned __int8 v56;
  unsigned __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  char *v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  WTF::StringImpl *v89;
  uint64_t result;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int8x16_t v102;

  v8 = a4;
  v9 = (char *)a3;
  v12 = (WTF::StringBuilder *)(a1 + 48);
  WTF::StringBuilder::clear((WTF::StringImpl **)(a1 + 48), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  v18 = *(unsigned __int8 *)(a1 + 24);
  if (v18 == 1)
  {
    v19 = v9;
LABEL_3:
    v20 = *(unsigned __int16 **)(a1 + 32);
    if ((unint64_t)v20 < *(_QWORD *)(a1 + 40) && *v20 == v8)
    {
      if (!*(_DWORD *)(a1 + 64))
      {
        *(_BYTE *)(a2 + 1) &= ~1u;
        *(_QWORD *)(a2 + 8) = v19;
        v99 = (*(_DWORD *)(a1 + 32) - (_DWORD)v19) >> 1;
        v100 = *(_DWORD *)(a2 + 4) & 0x80000000;
LABEL_168:
        *(_DWORD *)(a2 + 4) = v99 | v100;
        result = 4;
        *(_BYTE *)a2 = 4;
        *(_QWORD *)(a1 + 32) += 2;
        return result;
      }
      v21 = *(_QWORD *)(a1 + 56);
      if (v21)
      {
LABEL_7:
        if ((*(_BYTE *)(v21 + 16) & 4) == 0)
        {
          *(_BYTE *)(a2 + 1) &= ~1u;
          v22 = *(_DWORD *)(a1 + 64);
          if (v22)
          {
            v23 = *(_QWORD *)v12;
            if (!*(_QWORD *)v12)
              v23 = *(_QWORD *)(a1 + 56);
            if (v22 < 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198B2FEE8);
            }
            v24 = *(_QWORD *)(v23 + 8);
          }
          else
          {
            v24 = 0;
          }
          goto LABEL_166;
        }
LABEL_165:
        *(_BYTE *)(a2 + 1) |= 1u;
        v24 = WTF::StringBuilder::span8(v12);
LABEL_166:
        *(_QWORD *)(a2 + 8) = v24;
        v100 = *(_DWORD *)(a1 + 64);
        if ((v100 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198B2FEC8);
        }
        v99 = *(_DWORD *)(a2 + 4) & 0x80000000;
        goto LABEL_168;
      }
LABEL_164:
      v21 = *(_QWORD *)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_165;
      goto LABEL_7;
    }
LABEL_149:
    v78 = WTF::fastCompactMalloc((WTF *)0x20);
    v86 = v78;
    v87 = 0x1300000002;
    v88 = "Unterminated string";
LABEL_150:
    *(_QWORD *)v78 = v87;
    *(_QWORD *)(v78 + 8) = v88;
    *(_DWORD *)(v78 + 16) = 4;
    goto LABEL_151;
  }
  while (1)
  {
    v19 = v9;
    v9 = *(char **)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v9 < v25 && *(_WORD *)v9 == 92)
      break;
LABEL_108:
    if (v18 == 1)
      goto LABEL_3;
    if (v9 == v19)
      goto LABEL_3;
    v69 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v9 >= v69)
      goto LABEL_3;
    v70 = *(unsigned __int16 *)v9;
    if (v70 == v8)
      goto LABEL_3;
    if (v18)
    {
      v71 = v9 + 2;
      v72 = v9;
      while (1)
      {
        if (v70 < 0x20)
        {
          if (v70 != 9)
          {
            v72 = v71 - 2;
            goto LABEL_129;
          }
        }
        else if (v70 == v8 || v70 > 0xFF || v70 == 92)
        {
          goto LABEL_129;
        }
        *(_QWORD *)(a1 + 32) = v71;
        if ((unint64_t)v71 >= v69)
          break;
        v72 += 2;
        v73 = *(unsigned __int16 *)v71;
        v71 += 2;
        v70 = v73;
      }
      v72 = v71;
    }
    else
    {
      v72 = v9 + 2;
      while (v70 > 0xFF || JSC::safeStringLatin1CharactersInStrictJSON[v70])
      {
        *(_QWORD *)(a1 + 32) = v72;
        if ((unint64_t)v72 >= v69)
          goto LABEL_129;
        v74 = *(unsigned __int16 *)v72;
        v72 += 2;
        v70 = v74;
      }
      v72 -= 2;
    }
LABEL_129:
    if (*(_DWORD *)(a1 + 64))
    {
      if (v72 - v9 <= -2)
      {
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }
      WTF::StringBuilder::append((uint64_t)v12, v9, (v72 - v9) >> 1, v13, v14, v15, v16, v17);
      v18 = *(unsigned __int8 *)(a1 + 24);
    }
    v19 = v9;
    if (v18 == 1)
      goto LABEL_3;
  }
  if (v19 < v9 && *(_DWORD *)(a1 + 64) == 0)
  {
    if (v9 - v19 <= -2)
      goto LABEL_163;
    WTF::StringBuilder::append((uint64_t)v12, v19, (v9 - v19) >> 1, v13, v14, v15, v16, v17);
    v9 = *(char **)(a1 + 32);
    v25 = *(_QWORD *)(a1 + 40);
  }
  v27 = v9 + 2;
  *(_QWORD *)(a1 + 32) = v9 + 2;
  if ((unint64_t)(v9 + 2) >= v25)
    goto LABEL_149;
  v28 = (unsigned __int16)*v27;
  if (v28 <= 0x61)
  {
    if ((unsigned __int16)*v27 > 0x2Eu)
    {
      if (v28 == 47)
      {
        v102.i8[0] = 47;
        v42 = *(_QWORD *)(a1 + 56);
        if (v42)
        {
          v30 = *(unsigned int *)(a1 + 64);
          if (v30 < *(_DWORD *)(v42 + 4) && !*(_QWORD *)v12)
          {
            v43 = *(_DWORD *)(v42 + 16);
            v32 = *(_QWORD *)(v42 + 8);
            *(_DWORD *)(a1 + 64) = v30 + 1;
            if ((v43 & 4) != 0)
            {
              v33 = 47;
              goto LABEL_105;
            }
            v77 = 47;
            goto LABEL_148;
          }
        }
      }
      else
      {
        if (v28 != 92)
          goto LABEL_160;
        v102.i8[0] = 92;
        v36 = *(_QWORD *)(a1 + 56);
        if (v36)
        {
          v30 = *(unsigned int *)(a1 + 64);
          if (v30 < *(_DWORD *)(v36 + 4) && !*(_QWORD *)v12)
          {
            v37 = *(_DWORD *)(v36 + 16);
            v32 = *(_QWORD *)(v36 + 8);
            *(_DWORD *)(a1 + 64) = v30 + 1;
            if ((v37 & 4) != 0)
            {
              v33 = 92;
              goto LABEL_105;
            }
            v77 = 92;
LABEL_148:
            *(_WORD *)(v32 + 2 * v30) = v77;
            goto LABEL_106;
          }
        }
      }
    }
    else if (v28 == 34)
    {
      v102.i8[0] = 34;
      v40 = *(_QWORD *)(a1 + 56);
      if (v40)
      {
        v30 = *(unsigned int *)(a1 + 64);
        if (v30 < *(_DWORD *)(v40 + 4) && !*(_QWORD *)v12)
        {
          v41 = *(_DWORD *)(v40 + 16);
          v32 = *(_QWORD *)(v40 + 8);
          *(_DWORD *)(a1 + 64) = v30 + 1;
          if ((v41 & 4) != 0)
          {
            v33 = 34;
            goto LABEL_105;
          }
          v77 = 34;
          goto LABEL_148;
        }
      }
    }
    else
    {
      if (v28 != 39 || !*(_BYTE *)(a1 + 24))
      {
LABEL_160:
        WTF::tryFastCompactMalloc((WTF *)0x48, &v102);
        v86 = v102.i64[0];
        if (!v102.i64[0])
        {
          __break(0xC471u);
          JUMPOUT(0x198B2FEF8);
        }
        *(_QWORD *)v102.i64[0] = 0x1A00000002;
        *(_OWORD *)(v86 + 20) = xmmword_199158AF0;
        *(_QWORD *)(v86 + 8) = v86 + 20;
        *(_DWORD *)(v86 + 16) = 0;
        *(_OWORD *)(v86 + 36) = xmmword_199158B00;
        *(_OWORD *)(v86 + 52) = xmmword_199158B10;
        *(_WORD *)(v86 + 68) = 32;
        *(_WORD *)(v86 + 70) = *v27;
        goto LABEL_151;
      }
      v102.i8[0] = 39;
      v29 = *(_QWORD *)(a1 + 56);
      if (v29)
      {
        v30 = *(unsigned int *)(a1 + 64);
        if (v30 < *(_DWORD *)(v29 + 4) && !*(_QWORD *)v12)
        {
          v31 = *(_DWORD *)(v29 + 16);
          v32 = *(_QWORD *)(v29 + 8);
          *(_DWORD *)(a1 + 64) = v30 + 1;
          if ((v31 & 4) != 0)
          {
            v33 = 39;
LABEL_105:
            *(_BYTE *)(v32 + v30) = v33;
LABEL_106:
            v60 = 1;
            goto LABEL_107;
          }
          v77 = 39;
          goto LABEL_148;
        }
      }
    }
LABEL_138:
    WTF::StringBuilder::append((uint64_t)v12, &v102, 1uLL, v13, v14, v15, v16, v17);
    goto LABEL_106;
  }
  switch(*v27)
  {
    case 'n':
      v102.i8[0] = 10;
      v34 = *(_QWORD *)(a1 + 56);
      if (!v34)
        goto LABEL_138;
      v30 = *(unsigned int *)(a1 + 64);
      if (v30 >= *(_DWORD *)(v34 + 4) || *(_QWORD *)v12)
        goto LABEL_138;
      v35 = *(_DWORD *)(v34 + 16);
      v32 = *(_QWORD *)(v34 + 8);
      *(_DWORD *)(a1 + 64) = v30 + 1;
      if ((v35 & 4) != 0)
      {
        v33 = 10;
        goto LABEL_105;
      }
      v77 = 10;
      goto LABEL_148;
    case 'o':
    case 'p':
    case 'q':
    case 's':
      goto LABEL_160;
    case 'r':
      v102.i8[0] = 13;
      v61 = *(_QWORD *)(a1 + 56);
      if (!v61)
        goto LABEL_138;
      v30 = *(unsigned int *)(a1 + 64);
      if (v30 >= *(_DWORD *)(v61 + 4) || *(_QWORD *)v12)
        goto LABEL_138;
      v62 = *(_DWORD *)(v61 + 16);
      v32 = *(_QWORD *)(v61 + 8);
      *(_DWORD *)(a1 + 64) = v30 + 1;
      if ((v62 & 4) != 0)
      {
        v33 = 13;
        goto LABEL_105;
      }
      v77 = 13;
      goto LABEL_148;
    case 't':
      v102.i8[0] = 9;
      v63 = *(_QWORD *)(a1 + 56);
      if (!v63)
        goto LABEL_138;
      v64 = *(unsigned int *)(a1 + 64);
      if (v64 >= *(_DWORD *)(v63 + 4) || *(_QWORD *)v12)
        goto LABEL_138;
      v65 = *(_DWORD *)(v63 + 16);
      v66 = *(_QWORD *)(v63 + 8);
      *(_DWORD *)(a1 + 64) = v64 + 1;
      if ((v65 & 4) != 0)
        *(_BYTE *)(v66 + v64) = 9;
      else
        *(_WORD *)(v66 + 2 * v64) = 9;
      goto LABEL_106;
    case 'u':
      if ((uint64_t)(v25 - (_QWORD)v27) < 10)
      {
        v78 = WTF::fastCompactMalloc((WTF *)0x20);
        v86 = v78;
        v87 = 0x2300000002;
        v88 = "\\u must be followed by 4 hex digits";
        goto LABEL_150;
      }
      v44 = *((unsigned __int16 *)v9 + 2);
      if (v44 - 48 < 0xA || (unsigned __int16)((v44 | 0x20) - 97) < 6u)
      {
        v46 = *((unsigned __int16 *)v9 + 3);
        if (v46 - 48 < 0xA || (unsigned __int16)((v46 | 0x20) - 97) <= 5u)
        {
          v47 = *((unsigned __int16 *)v9 + 4);
          if (v47 - 48 < 0xA || (unsigned __int16)((v47 | 0x20) - 97) <= 5u)
          {
            v48 = *((unsigned __int16 *)v9 + 5);
            if (v48 - 48 < 0xA || (unsigned __int16)((v48 | 0x20) - 97) <= 5u)
            {
              if (v44 >= 0x41)
                v49 = 9;
              else
                v49 = 0;
              v50 = v49 + v44;
              if (v46 >= 0x41)
                v51 = ((_BYTE)v46 + 9) & 0xF;
              else
                v51 = v46 - 48;
              v52 = (v50 << 12) | (v51 << 8);
              if (v47 >= 0x41)
                v53 = 9;
              else
                v53 = 0;
              v54 = v53 + v47;
              v55 = (v48 + 9) & 0xF;
              if (v48 < 0x41)
                v55 = v48 - 48;
              v56 = v55 | (16 * v54);
              v57 = v52 & 0xFF00 | v56;
              v102.i16[0] = v57;
              v58 = *(_QWORD *)(a1 + 56);
              if (v58)
              {
                v59 = *(unsigned int *)(a1 + 64);
                if (v59 < *(_DWORD *)(v58 + 4) && !*(_QWORD *)v12)
                {
                  if ((*(_BYTE *)(v58 + 16) & 4) == 0)
                  {
                    v75 = *(_QWORD *)(v58 + 8);
                    *(_DWORD *)(a1 + 64) = v59 + 1;
                    *(_WORD *)(v75 + 2 * v59) = v57;
                    goto LABEL_89;
                  }
                  if (v57 <= 0xFFu)
                  {
                    v76 = *(_QWORD *)(v58 + 8);
                    *(_DWORD *)(a1 + 64) = v59 + 1;
                    *(_BYTE *)(v76 + v59) = v56;
                    goto LABEL_89;
                  }
                }
              }
              WTF::StringBuilder::append((uint64_t)v12, &v102, 1uLL, v13, v14, v15, v16, v17);
LABEL_89:
              v60 = 5;
LABEL_107:
              v9 = (char *)(*(_QWORD *)(a1 + 32) + 2 * v60);
              *(_QWORD *)(a1 + 32) = v9;
              v18 = *(unsigned __int8 *)(a1 + 24);
              goto LABEL_108;
            }
          }
        }
      }
      WTF::tryFastCompactMalloc((WTF *)0x60, &v102);
      v86 = v102.i64[0];
      if (!v102.i64[0])
      {
        __break(0xC471u);
        JUMPOUT(0x198B2FEF0);
      }
      *(_QWORD *)v102.i64[0] = 0x2600000002;
      *(_QWORD *)(v86 + 8) = v86 + 20;
      *(_QWORD *)(v86 + 16) = 0x5C002200000000;
      v101 = *(_QWORD *)v27;
      *(_WORD *)(v86 + 32) = *((_WORD *)v9 + 5);
      *(_QWORD *)(v86 + 24) = v101;
      *(_OWORD *)(v86 + 34) = xmmword_199158AC0;
      *(_OWORD *)(v86 + 50) = xmmword_199158AD0;
      *(_OWORD *)(v86 + 66) = xmmword_199158AE0;
      *(_QWORD *)(v86 + 82) = 0x63007300650020;
      *(_DWORD *)(v86 + 90) = 7340129;
      *(_WORD *)(v86 + 94) = 101;
LABEL_151:
      v89 = *(WTF::StringImpl **)a1;
      *(_QWORD *)a1 = v86;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
        {
          WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
          WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
        }
        else
        {
          *(_DWORD *)v89 -= 2;
        }
      }
      return 18;
    default:
      if (v28 == 98)
      {
        v102.i8[0] = 8;
        v67 = *(_QWORD *)(a1 + 56);
        if (!v67)
          goto LABEL_138;
        v30 = *(unsigned int *)(a1 + 64);
        if (v30 >= *(_DWORD *)(v67 + 4) || *(_QWORD *)v12)
          goto LABEL_138;
        v68 = *(_DWORD *)(v67 + 16);
        v32 = *(_QWORD *)(v67 + 8);
        *(_DWORD *)(a1 + 64) = v30 + 1;
        if ((v68 & 4) != 0)
        {
          v33 = 8;
          goto LABEL_105;
        }
        v77 = 8;
      }
      else
      {
        if (v28 != 102)
          goto LABEL_160;
        v102.i8[0] = 12;
        v38 = *(_QWORD *)(a1 + 56);
        if (!v38)
          goto LABEL_138;
        v30 = *(unsigned int *)(a1 + 64);
        if (v30 >= *(_DWORD *)(v38 + 4) || *(_QWORD *)v12)
          goto LABEL_138;
        v39 = *(_DWORD *)(v38 + 16);
        v32 = *(_QWORD *)(v38 + 8);
        *(_DWORD *)(a1 + 64) = v30 + 1;
        if ((v39 & 4) != 0)
        {
          v33 = 12;
          goto LABEL_105;
        }
        v77 = 12;
      }
      goto LABEL_148;
  }
}

JSC::JSObject *JSC::LiteralParser<char16_t>::parseRecursively(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int8 *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t SlowCase;
  int32x4_t v25;
  unint64_t v26;
  _QWORD *j;
  unsigned __int16 *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  int v32;
  int v33;
  _WORD *v34;
  uint64_t v36;
  JSC::JSCell *v37;
  unint64_t v38;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int16x8_t *v44;
  unint64_t v45;
  unint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  int16x8_t v50;
  int8x16_t v51;
  int8x16_t v52;
  unsigned __int16 *v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int16x8_t v57;
  uint16x8_t v58;
  unint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  BOOL v66;
  char v67;
  int v68;
  uint64_t v69;
  int16x8_t *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int16x8_t v76;
  uint16x8_t v77;
  unsigned __int16 *v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int16 *v86;
  int v87;
  int v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  BOOL v92;
  char v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  int16x8_t *v97;
  unint64_t v98;
  unint64_t v99;
  int16x8_t v100;
  int16x8_t v101;
  uint16x8_t v102;
  int16x8_t v103;
  int8x16_t v104;
  int8x16_t v105;
  unsigned __int16 *v106;
  int16x8_t v107;
  int16x8_t v108;
  int8x16_t v109;
  int16x8_t v110;
  uint16x8_t v111;
  int8x16_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  WTF::StringImpl *v125;
  int v126;
  uint64_t v127;
  unsigned __int16 *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  int v134;
  int v135;
  int v136;
  char v137;
  uint64_t v138;
  unsigned __int16 *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  int v145;
  int v146;
  int v147;
  unint64_t v148;
  int v149;
  WTF::AtomStringImpl *v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::AtomStringImpl *v160;
  WTF::StringImpl *v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::AtomStringImpl *v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int16 *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  int v185;
  int v186;
  int v187;
  double v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::AtomStringImpl *v196;
  WTF::StringImpl *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  char v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  int16x8_t v220;
  int16x8_t v221;
  uint16x8_t v222;
  int16x8_t v223;
  int8x16_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int8x16_t v227;
  int16x8_t v228;
  uint16x8_t v229;
  unsigned int v230;
  unint64_t v231;
  unint64_t i;
  unsigned int v234;
  int v235;
  uint64_t v236;
  int16x8_t *v237;
  unint64_t v238;
  unint64_t v239;
  int16x8_t v240;
  int16x8_t v241;
  uint16x8_t v242;
  int16x8_t v243;
  int8x16_t v244;
  int8x16_t v245;
  unsigned __int16 *v246;
  int16x8_t v247;
  int16x8_t v248;
  int8x16_t v249;
  int16x8_t v250;
  uint16x8_t v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  unint64_t v263;
  BOOL v264;
  char v265;
  unsigned int v266;
  int v267;
  uint64_t v268;
  int16x8_t *v269;
  unint64_t v270;
  unint64_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int8x16_t v274;
  int16x8_t v275;
  uint16x8_t v276;
  unsigned __int16 *v277;
  int v278;
  BOOL v279;
  BOOL v280;
  WTF::StringImpl *v281;
  uint64_t v282;
  uint64_t v283;
  BOOL v284;
  char v285;
  int v286;
  uint64_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int8x16_t v290;
  int16x8_t v291;
  uint16x8_t v292;
  unsigned __int16 *v293;
  int16x8_t v294;
  int16x8_t v295;
  int8x16_t v296;
  int16x8_t v297;
  uint16x8_t v298;
  unsigned __int8 *v299;
  int v300;
  BOOL v302;
  char v303;
  uint64_t v304;
  unsigned __int16 *v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  unsigned __int16 *v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int16 *v318;
  int v319;
  int v320;
  int v321;
  unint64_t v322;
  BOOL v323;
  char v324;
  unsigned int v325;
  int v326;
  uint64_t v327;
  int16x8_t *v328;
  unint64_t v329;
  unint64_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int8x16_t v333;
  int16x8_t v334;
  uint16x8_t v335;
  unsigned __int16 *v336;
  int16x8_t v337;
  int16x8_t v338;
  int8x16_t v339;
  int16x8_t v340;
  uint16x8_t v341;
  unint64_t v342;
  BOOL v343;
  char v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  int16x8_t *v348;
  unint64_t v349;
  unint64_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int8x16_t v353;
  int16x8_t v354;
  uint16x8_t v355;
  unsigned __int16 *v356;
  int16x8_t v357;
  int16x8_t v358;
  int8x16_t v359;
  int16x8_t v360;
  uint16x8_t v361;
  WTF::AtomStringImpl *v362;
  WTF::AtomStringImpl *v363;
  unsigned int v364;
  unsigned __int16 *v365;
  unint64_t v366;
  unsigned __int16 *v367;
  int v368;
  unsigned __int16 *v369;
  const char *v370;
  uint64_t v371;
  int16x8_t *v372;
  unint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int8x16_t v384;
  int16x8_t v385;
  uint16x8_t v386;
  unint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  JSC *v395;
  const WTF::String *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char v402;
  char v403;
  char v404;
  uint64_t v405;
  unsigned __int16 *v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned __int16 *v411;
  int v412;
  int v413;
  int v414;
  char v415;
  uint64_t v416;
  unsigned __int16 *v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  int v423;
  char v424;
  char v425;
  uint64_t v426;
  unsigned __int16 *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned __int16 *v432;
  int v433;
  int v434;
  int v435;
  char v436;
  char v437;
  uint64_t v438;
  unsigned __int16 *v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned __int16 *v444;
  int v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  unsigned __int16 *v454;
  int v455;
  BOOL v457;
  unsigned __int16 *v458;
  int v459;
  BOOL v461;
  unsigned int v462;
  unint64_t v463;
  unsigned __int16 *v464;
  int v465;
  unsigned __int16 *v466;
  double v467;
  uint64_t v468;
  int16x8_t *v469;
  unsigned int v470;
  unint64_t v471;
  unsigned __int16 *v472;
  int v473;
  unsigned __int16 *v474;
  uint64_t v475;
  int16x8_t *v476;
  unint64_t v477;
  WTF::AtomStringImpl *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  WTF::AtomStringImpl *v485;
  WTF::StringImpl *v486;
  uint64_t v487;
  uint64_t v488;
  const char *v489;
  unint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  WTF::StringImpl *v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  void *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  WTF::AtomStringImpl *v515;
  WTF::AtomStringImpl *v516;
  WTF::StringImpl *v517;
  WTF::AtomStringImpl *v518;
  WTF::AtomStringImpl *v519;
  WTF::StringImpl *v520;
  unint64_t v521;
  void *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  uint64_t v530;
  unint64_t v531;
  void *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unsigned __int16 *v547;
  unint64_t v548;
  unsigned __int16 *v549;
  int v550;
  unsigned __int16 *v551;
  uint64_t v552;
  uint64_t v553;
  const char *v554;
  int v555;
  BOOL v557;
  unsigned __int16 *v558;
  int v559;
  BOOL v561;
  unint64_t v562;
  BOOL v563;
  char v564;
  unsigned int v565;
  int v566;
  uint64_t v567;
  int16x8_t *v568;
  unint64_t v569;
  unint64_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int8x16_t v573;
  int16x8_t v574;
  uint16x8_t v575;
  unsigned __int16 *v576;
  int16x8_t v577;
  int16x8_t v578;
  int8x16_t v579;
  int16x8_t v580;
  uint16x8_t v581;
  unsigned int v582;
  unint64_t v583;
  unsigned __int16 *v584;
  int v585;
  unsigned __int16 *v586;
  uint64_t v587;
  unint64_t v588;
  unsigned int v589;
  uint64_t v590;
  int16x8_t *v591;
  unint64_t v592;
  unint64_t v593;
  unsigned __int16 *v594;
  int v595;
  unsigned __int16 *v596;
  uint64_t v597;
  const char *v598;
  char v599;
  unsigned __int16 *v600;
  int v601;
  BOOL v603;
  int v604;
  BOOL v606;
  uint64_t v607;
  const char *v608;
  uint64_t v609;
  const char *v610;
  unsigned __int16 *v611;
  int v612;
  BOOL v614;
  unsigned int v615;
  uint64_t v616;
  int16x8_t *v617;
  unint64_t v618;
  unsigned int v619;
  uint64_t v620;
  unint64_t v621;
  unint64_t v622;
  unsigned __int16 *v623;
  int v624;
  unsigned __int16 *v625;
  unint64_t v626;
  unsigned __int16 *v627;
  int v628;
  unsigned __int16 *v629;
  char v630;
  char v631;
  uint64_t v632;
  unsigned __int16 *v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unsigned __int16 *v638;
  int v639;
  int v640;
  int v641;
  unsigned __int16 *v642;
  int v643;
  BOOL v645;
  unsigned int v646;
  unint64_t v647;
  unsigned __int16 *v648;
  int v649;
  unsigned __int16 *v650;
  uint64_t v651;
  int16x8_t *v652;
  unint64_t v653;
  unsigned int v654;
  uint64_t v655;
  int16x8_t *v656;
  unint64_t v657;
  unint64_t v658;
  unsigned __int16 *v659;
  int v660;
  unsigned __int16 *v661;
  unsigned int v662;
  uint64_t v663;
  int16x8_t *v664;
  unint64_t v665;
  WTF::AtomStringImpl *v666;
  WTF::AtomStringImpl *v667;
  uint64_t v668;
  const char *v669;
  unsigned __int16 *v670;
  unint64_t v671;
  unsigned __int16 *v672;
  int v673;
  unsigned __int16 *v674;
  WTF::StringImpl *v675;
  unsigned __int16 *v676;
  int v677;
  BOOL v679;
  unint64_t v680;
  void *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  int v688;
  unint64_t v689;
  unsigned int v690;
  unsigned int v691;
  uint64_t v692;
  __int16 *v693;
  int v694;
  int v695;
  unsigned __int16 *v696;
  int v698;
  unint64_t v699;
  unsigned __int16 *v700;
  int v702;
  uint64_t v703;
  uint64_t v704;
  unsigned __int16 *v705;
  unsigned __int8 v707;
  int v708;
  uint64_t v709;
  int16x8_t *v710;
  unsigned __int16 *v711;
  unsigned __int16 *v712;
  int16x8_t v713;
  int16x8_t v714;
  int8x16_t v715;
  int16x8_t v716;
  uint16x8_t v717;
  int v718;
  uint64_t v719;
  int16x8_t *v720;
  unsigned __int16 *v721;
  unsigned __int16 *v722;
  int16x8_t v723;
  int16x8_t v724;
  int8x16_t v725;
  int16x8_t v726;
  uint16x8_t v727;
  int8x16_t v728;
  unsigned __int16 *v729;
  uint64_t v730;
  unint64_t v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int16x8_t *v736;
  unsigned __int16 *v737;
  unsigned __int16 *v738;
  int16x8_t v739;
  int16x8_t v740;
  int8x16_t v741;
  int16x8_t v742;
  uint16x8_t v743;
  unsigned __int16 *v744;
  unsigned int v745;
  _WORD *v746;
  size_t v747;
  uint64_t v748;
  int v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t *v752;
  int v754;
  _BYTE *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unsigned int v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  int v767;
  int v768;
  int v769;
  int v770;
  int v771;
  unsigned __int8 *v772;
  int v773;
  unsigned __int16 *v774;
  uint64_t v776;
  int v777;
  int v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  unsigned __int16 *v784;
  uint64_t v785;
  unsigned int v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  int v790;
  uint64_t v791;
  int16x8_t *v792;
  unsigned __int16 *v793;
  unsigned __int16 *v794;
  int16x8_t v795;
  int16x8_t v796;
  int8x16_t v797;
  int16x8_t v798;
  uint16x8_t v799;
  unsigned __int16 *v800;
  unsigned __int16 *v801;
  uint64_t v803;
  unsigned __int16 *v804;
  unsigned __int16 *v806;
  int v808;
  uint64_t v809;
  int16x8_t *v810;
  unsigned __int16 *v811;
  unsigned __int16 *v812;
  int16x8_t v813;
  int16x8_t v814;
  int8x16_t v815;
  int16x8_t v816;
  uint16x8_t v817;
  unsigned __int16 *v818;
  uint64_t v819;
  unsigned __int16 *v820;
  int v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  unsigned __int16 *v825;
  int v826;
  int v827;
  int v828;
  int v829;
  uint64_t v830;
  int16x8_t v831;
  int16x8_t v832;
  int8x16_t v833;
  int16x8_t v834;
  uint16x8_t v835;
  unsigned __int16 *v836;
  unsigned __int16 *v837;
  int v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  unsigned __int16 *v842;
  int v843;
  int v844;
  int v845;
  unsigned int v846;
  unsigned int v847;
  unsigned int v848;
  unsigned int v849;
  uint64_t v850;
  unsigned __int16 *v851;
  int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unsigned __int16 *v856;
  int v857;
  int v858;
  int v859;
  unsigned int v860;
  int v861;
  unsigned int v862;
  unsigned int v863;
  int v864;
  uint64_t v866;
  uint64_t v867;
  int v868;
  uint64_t v869;
  int16x8_t *v870;
  unsigned __int16 *v871;
  unsigned __int16 *v872;
  int16x8_t v873;
  int16x8_t v874;
  int8x16_t v875;
  int16x8_t v876;
  uint16x8_t v877;
  unsigned __int16 *v878;
  uint64_t v879;
  int16x8_t *v880;
  unsigned __int16 *v881;
  unsigned __int16 *v882;
  int16x8_t v883;
  int16x8_t v884;
  int8x16_t v885;
  int16x8_t v886;
  uint16x8_t v887;
  unsigned __int16 *v888;
  uint64_t v889;
  char v890;
  uint64_t v891;
  unsigned __int16 *v892;
  int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unsigned __int16 *v897;
  int v898;
  int v899;
  int v900;
  uint64_t v901;
  unsigned __int16 *v902;
  int v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unsigned __int16 *v907;
  int v908;
  int v909;
  int v910;
  uint64_t v911;
  unsigned __int16 *v912;
  int v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  int v917;
  int v918;
  _QWORD *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  unsigned __int16 *v925;
  int v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  unsigned __int16 *v930;
  int v931;
  int v932;
  int v933;
  int v934;
  int v935;
  int v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t v939;
  unsigned int v940;
  unint64_t v941;
  uint64_t v942;
  unsigned __int16 *v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  unsigned __int16 *v948;
  int v949;
  int v950;
  int v951;
  JSC::Heap *v952;
  unint64_t v953;
  double v954;
  double v955;
  double v956;
  double v957;
  char v958;
  unint64_t v959;
  void *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  unint64_t v968;
  unsigned int v969;
  unint64_t v970;
  unint64_t v971;
  double v972;
  BOOL v973;
  unint64_t v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  char v982;
  uint64_t v983;
  uint64_t v984;
  _DWORD *v985;
  unsigned __int8 *v986;
  unsigned int v987;
  uint64_t v988;
  WTF::StringImpl *v989;
  int v990;
  WTF::AtomStringImpl *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  WTF::AtomStringImpl *v998;
  WTF::StringImpl *v999;
  WTF::AtomStringImpl *v1000;
  WTF::StringImpl *v1001;
  WTF::AtomStringImpl *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  WTF::StringImpl *v1009;
  WTF::StringImpl *v1010;
  unint64_t v1011;
  void *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  WTF::StringImpl *v1019;
  WTF::StringImpl *v1020;
  uint64_t v1021;
  WTF::StringImpl *v1022;
  int v1023;
  WTF::StringImpl *v1024;
  WTF::StringImpl *v1025;
  int v1026;
  WTF::StringImpl *v1027;
  unint64_t v1028;
  void *v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  int v1036;
  unint64_t v1037;
  unint64_t v1038;
  void *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  BOOL hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v1047;
  WTF::StringImpl *v1048;
  WTF::StringImpl *v1049;
  WTF::StringImpl *v1050;
  unint64_t v1051;
  void *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  void *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  double v1068;
  char v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  void *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  int16x8_t *v1087;
  int16x8_t *v1088;
  unint64_t v1089;
  unint64_t v1090;
  void *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  _QWORD *v1099;
  _QWORD *v1100;
  unint64_t v1101;
  void *v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  int v1109;
  char v1110;
  _DWORD *v1111;
  _QWORD *v1112;
  uint64_t v1113;
  _QWORD *v1115;
  uint64_t v1116;
  _QWORD *v1117;
  int v1118;
  char v1119;
  _DWORD *v1120;
  _QWORD *v1121;
  uint64_t v1122;
  unint64_t *v1124;
  unint64_t v1125;
  unint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  const char *v1129;
  WTF::StringImpl *v1130;
  int v1131;
  int v1132;
  int16x8_t *v1133;
  unsigned int v1134;
  unsigned int v1135;
  uint64_t v1136;
  _WORD *v1137;
  int v1138;
  uint8x8_t *v1139;
  unsigned int v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint16x8_t v1143;
  unint64_t v1144;
  int16x8_t *v1145;
  uint64_t v1146;
  uint64_t v1147;
  WTF::StringImpl *v1148;
  unint64_t v1149;
  void *v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  __int16 v1157;
  WTF::AtomStringImpl *v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  WTF::StringImpl *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unsigned int v1175;
  int v1176;
  uint64_t v1177;
  int16x8_t *v1178;
  unint64_t v1179;
  unint64_t v1180;
  int16x8_t v1181;
  int16x8_t v1182;
  int8x16_t v1183;
  int16x8_t v1184;
  uint16x8_t v1185;
  unsigned __int16 *v1186;
  int16x8_t v1187;
  int16x8_t v1188;
  int8x16_t v1189;
  int16x8_t v1190;
  uint16x8_t v1191;
  unsigned __int16 *v1192;
  int v1193;
  BOOL v1195;
  unint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  uint64_t v1200;
  uint64_t v1201;
  WTF::StringImpl *v1202;
  uint64_t v1203;
  int v1204;
  __int32 v1205;
  unsigned int v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  __n128 v1211;
  unint64_t MoreOutOfLineStorage;
  JSC *v1213;
  const WTF::String *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  WTF::StringImpl *v1220;
  unsigned __int16 *v1221;
  int v1222;
  BOOL v1224;
  unsigned int v1225;
  unsigned int v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  void *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  int v1241;
  WTF::AtomStringImpl *v1242;
  WTF::StringImpl *v1243;
  WTF::StringImpl *v1244;
  WTF::AtomStringImpl *v1245;
  uint64_t v1246;
  WTF::StringImpl *v1247;
  WTF::AtomStringImpl *v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  WTF::StringImpl *v1256;
  unsigned int v1257;
  unsigned __int16 *v1258;
  unint64_t v1259;
  unsigned __int16 *v1260;
  int v1261;
  unsigned __int16 *v1262;
  double v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  const char *v1267;
  uint64_t v1268;
  int16x8_t *v1269;
  unint64_t v1270;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  __int16 v1279;
  unsigned __int16 *v1280;
  int v1281;
  BOOL v1283;
  unint64_t v1284;
  void *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  const char *v1294;
  WTF::StringImpl *v1295;
  unsigned int v1296;
  unsigned __int16 *v1297;
  unint64_t v1298;
  unsigned __int16 *v1299;
  int v1300;
  unsigned __int16 *v1301;
  uint64_t v1302;
  uint64_t v1303;
  const char *v1304;
  uint64_t v1305;
  int16x8_t *v1306;
  unint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  WTF::StringImpl *v1310;
  uint64_t v1311;
  uint64_t v1312;
  const char *v1313;
  char v1314;
  int16x8_t v1315;
  int16x8_t v1316;
  int8x16_t v1317;
  int16x8_t v1318;
  uint16x8_t v1319;
  unint64_t v1320;
  void *v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  unsigned __int16 *v1328;
  int v1329;
  BOOL v1331;
  unsigned int v1332;
  unsigned __int16 *v1333;
  unint64_t v1334;
  unsigned __int16 *v1335;
  int v1336;
  unsigned __int16 *v1337;
  double v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  const char *v1342;
  uint64_t v1343;
  int16x8_t *v1344;
  unint64_t v1345;
  unint64_t v1346;
  void *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  uint64_t v1353;
  unsigned __int16 *v1354;
  int v1355;
  BOOL v1357;
  int v1358;
  BOOL v1360;
  int16x8_t v1361;
  int16x8_t v1362;
  int8x16_t v1363;
  int16x8_t v1364;
  uint16x8_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  const char *v1368;
  WTF::StringImpl *v1369;
  unint64_t v1370;
  void *v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  unint64_t v1378;
  void *v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  const char *v1388;
  WTF::StringImpl *v1389;
  uint64_t v1390;
  unsigned __int8 *v1391;
  uint64_t v1392;
  unsigned int v1393;
  int16x8_t v1394;
  int16x8_t v1395;
  int8x16_t v1396;
  int16x8_t v1397;
  uint16x8_t v1398;
  unsigned __int16 *v1399;
  int v1400;
  BOOL v1402;
  int16x8_t v1403;
  int16x8_t v1404;
  int8x16_t v1405;
  int16x8_t v1406;
  uint16x8_t v1407;
  unsigned int v1408;
  unsigned __int16 *v1409;
  unint64_t v1410;
  unsigned __int16 *v1411;
  int v1412;
  unsigned __int16 *v1413;
  uint64_t v1414;
  int16x8_t *v1415;
  unint64_t v1416;
  unsigned int v1417;
  unsigned __int16 *v1418;
  unint64_t v1419;
  unsigned __int16 *v1420;
  int v1421;
  unsigned __int16 *v1422;
  uint64_t v1423;
  uint64_t v1424;
  const char *v1425;
  uint64_t v1426;
  int16x8_t *v1427;
  unint64_t v1428;
  unsigned int v1429;
  unsigned __int16 *v1430;
  unint64_t v1431;
  unsigned __int16 *v1432;
  int v1433;
  unsigned __int16 *v1434;
  uint64_t v1435;
  unsigned __int16 *v1436;
  int v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  unsigned __int16 *v1441;
  int v1442;
  int v1443;
  int v1444;
  char v1445;
  uint64_t v1446;
  unint64_t v1447;
  unsigned __int16 *v1448;
  int v1449;
  BOOL v1451;
  unint64_t v1452;
  void *v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  unint64_t v1460;
  void *v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  int16x8_t v1468;
  int16x8_t v1469;
  int8x16_t v1470;
  int16x8_t v1471;
  uint16x8_t v1472;
  unsigned int v1473;
  unsigned __int16 *v1474;
  unint64_t v1475;
  unsigned __int16 *v1476;
  int v1477;
  unsigned __int16 *v1478;
  uint64_t v1479;
  int16x8_t *v1480;
  unint64_t v1481;
  unint64_t v1482;
  void *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  unsigned int v1490;
  unsigned __int16 *v1491;
  unint64_t v1492;
  unsigned __int16 *v1493;
  int v1494;
  unsigned __int16 *v1495;
  uint64_t v1496;
  int16x8_t *v1497;
  unint64_t v1498;
  unint64_t v1499;
  void *v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  unint64_t v1507;
  void *v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  int isMarked;
  int16x8_t v1516;
  int16x8_t v1517;
  int8x16_t v1518;
  int16x8_t v1519;
  uint16x8_t v1520;
  int16x8_t v1521;
  int16x8_t v1522;
  int8x16_t v1523;
  int16x8_t v1524;
  uint16x8_t v1525;
  JSC::SmallStrings *v1526;
  WTF::StringImpl *v1527;
  WTF::StringImpl *v1528;
  unint64_t v1529;
  void *v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  unint64_t v1537;
  int16x8_t *v1538;
  int16x8_t *v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  WTF::StringImpl **v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  const char *v1554;
  unsigned __int16 *v1555;
  int v1556;
  BOOL v1558;
  unsigned int v1559;
  unint64_t v1560;
  unsigned __int16 *v1561;
  int v1562;
  unsigned __int16 *v1563;
  uint64_t v1564;
  int16x8_t *v1565;
  unint64_t v1566;
  unint64_t v1567;
  WTF::StringImpl **v1568;
  unint64_t v1569;
  unint64_t v1570;
  unint64_t v1571;
  char *v1572;
  int32x4_t v1573;
  uint64_t *v1574;
  _QWORD *v1575;
  unint64_t StatusReg;
  unsigned __int8 *v1577;
  int8x16_t v1578;
  __int128 v1579;
  JSC::JSCell *v1580;
  __int128 v1581;
  JSC::VM *v1582;
  JSC::JSObject *v1583[2];
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[2];
  uint64_t v1586;
  char v1587;
  unint64_t v1588;
  char v1589;
  integer_t **v1590;
  integer_t *v1591;
  uint64_t v1592;
  int v1593;

  v16 = a2;
  v1571 = a3;
  if ((unint64_t)&v1567 < a3)
    return (JSC::JSObject *)JSC::LiteralParser<char16_t>::parse((uint64_t *)a1, a2, 2uLL, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)a1;
  v1568 = (WTF::StringImpl **)(a1 + 16);
  v20 = (char *)(a1 + 24);
  v19 = *(unsigned __int8 *)(a1 + 24);
  v1582 = (JSC::VM *)a2;
  if (v19)
  {
    v21 = *(_QWORD *)(v18 + 56);
    v22 = *(_QWORD *)(v21 + 15056);
    if (v22)
    {
      v23 = *(unsigned int *)(v22 + 60);
      SlowCase = *(_QWORD *)(v22 + 24);
      if (SlowCase < *(_QWORD *)(v22 + 32))
      {
LABEL_5:
        *(_QWORD *)(v22 + 24) = SlowCase + v23;
        goto LABEL_6;
      }
      SlowCase = *(_QWORD *)(v22 + 40);
      if ((SlowCase & 1) == 0)
      {
        v148 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v22 + 48);
        *(_QWORD *)(v22 + 32) = SlowCase + HIDWORD(v148);
        *(_QWORD *)(v22 + 40) = SlowCase + (int)v148;
        goto LABEL_5;
      }
      JSC::sanitizeStackForVM(*(JSC **)(v18 + 56), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v21 + 192, v23, 0, 0);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v21 + 14936, *(JSC **)(v18 + 56), 0x40uLL, 0, a5, a6, a7, a8);
      if (!SlowCase)
      {
        __break(0xC471u);
        JUMPOUT(0x198B32D00);
      }
    }
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *(_DWORD *)(v18 + 848);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    v9 = (unsigned __int8 *)(SlowCase + 4);
    v25 = 0uLL;
    *(_OWORD *)(SlowCase + 8) = 0u;
    v1575 = (_QWORD *)(SlowCase + 8);
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    v1583[0] = (JSC::JSObject *)SlowCase;
    *(_QWORD *)(SlowCase + 56) = 0;
    v16 = (unint64_t)v1582;
    if (*(_BYTE *)(v21 + 755))
      __dmb(0xAu);
    v28 = *(unsigned __int16 **)(a1 + 48);
    v26 = *(_QWORD *)(a1 + 56);
    j = (_QWORD *)(a1 + 48);
    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
    while ((unint64_t)v28 < v26)
    {
      v30 = *v28 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v28] == 19;
      if (!v30)
        break;
      *j = ++v28;
    }
    if (v28 == (unsigned __int16 *)v26)
    {
      *v20 = 14;
      goto LABEL_315;
    }
    *v20 = 18;
    v31 = *v28;
    if (v31 > 0xFF)
      goto LABEL_310;
    v32 = JSC::tokenTypesOfLatin1Characters[v31];
    if (v32 == 4)
    {
      v33 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v31 != 39)
      {
        a3 = (unint64_t)(v28 + 1);
        *j = v28 + 1;
        if (!v33)
        {
          if (a3 >= v26)
          {
            v34 = v28 + 1;
          }
          else
          {
            v34 = v28 + 1;
            do
            {
              if ((unsigned __int16)*v34 <= 0xFFu
                && JSC::safeStringLatin1CharactersInStrictJSON[*v34] == 0)
              {
                break;
              }
              *j = ++v34;
            }
            while ((unint64_t)v34 < v26);
          }
LABEL_363:
          if ((unint64_t)v34 < v26 && (unsigned __int16)*v34 == (_DWORD)v31)
          {
            *(_BYTE *)(a1 + 25) &= ~1u;
            *(_QWORD *)(a1 + 32) = a3;
            *(_QWORD *)(a1 + 48) = v34 + 1;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v34 - a3) >> 1);
            *(_BYTE *)(a1 + 24) = 4;
LABEL_366:
            v1569 = v16 + 41968;
            v1574 = (uint64_t *)(v16 + 39696);
            v1577 = (unsigned __int8 *)v1583[0] + 7;
            v231 = v16 + 64784;
            *(_QWORD *)&v1579 = a1 + 96;
            v1572 = (char *)v1583[0] + 16;
            v11 = 0x3700000002;
            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            v12 = 0xE00000002;
            v25.i64[1] = 0x7000600050004;
            v1578 = (int8x16_t)xmmword_199123280;
            v13 = 0x2600000002;
            v25.i64[0] = 17302016;
            v1573 = v25;
            v14 = 0.0;
            v15 = 1.0;
            v1570 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            *(_QWORD *)&v1581 = v16 + 64784;
            while (2)
            {
              if (*v20 != 5)
              {
                if ((*(_BYTE *)(a1 + 25) & 1) == 0)
                {
                  v688 = *(_DWORD *)(a1 + 28);
                  v689 = v688 & 0x7FFFFFFF;
                  if ((v688 & 0x7FFFFFFF) == 0)
                  {
                    v10 = (WTF::AtomStringImpl *)&WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                    goto LABEL_1675;
                  }
                  v18 = *(_QWORD *)(a1 + 32);
                  v690 = *(unsigned __int16 *)v18;
                  if ((_DWORD)v689 == 1)
                  {
                    if (v690 > 0xFF)
                    {
LABEL_1664:
                      v691 = (v690 << 6) ^ (*(unsigned __int16 *)(v18 + 2 * v689 - 2) << 14) ^ v690;
                      v692 = (v691 + (v691 >> 14) + ((v691 + (v691 >> 14)) >> 6));
                      v693 = (__int16 *)(v231 + (v692 << 6));
                      if ((_DWORD)v689 != (unsigned __int16)v693[27])
                        goto LABEL_2507;
                      if ((_DWORD)v689 != 1)
                      {
                        switch(31 - __clz(v689 - 1))
                        {
                          case 0u:
                            v694 = *(_DWORD *)v693;
                            v695 = *(_DWORD *)v18;
                            goto LABEL_1673;
                          case 1u:
                            if (*(_DWORD *)v693 != *(_DWORD *)v18)
                              goto LABEL_2507;
                            v694 = *(_DWORD *)&v693[v689 - 2];
                            v695 = *(_DWORD *)(v18 + 2 * v689 - 4);
LABEL_1673:
                            if (v694 == v695)
                              goto LABEL_1674;
                            goto LABEL_2507;
                          case 2u:
                            if (*(_QWORD *)v693 != *(_QWORD *)v18
                              || *(_QWORD *)&v693[v689 - 4] != *(_QWORD *)(v18 + 2 * v689 - 8))
                            {
                              goto LABEL_2507;
                            }
                            goto LABEL_1674;
                          case 3u:
                            v25 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v693[v689 - 8], *(int16x8_t *)(v18 + 2 * v689 - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v693, *(int16x8_t *)v18));
                            v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                            if (!v25.i32[0])
                              goto LABEL_2507;
                            goto LABEL_1674;
                          default:
                            v25 = (int32x4_t)vceqq_s16(*(int16x8_t *)v693, *(int16x8_t *)v18);
                            v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                            if (!v25.i32[0])
                              goto LABEL_2507;
                            v1086 = v688 & 7;
                            if ((*(_DWORD *)(a1 + 28) & 7u) >= v689)
                              goto LABEL_1674;
                            v1087 = (int16x8_t *)(v18 + 2 * v1086);
                            v1088 = (int16x8_t *)(v231 + ((2 * v1086) | (v692 << 6)));
                            break;
                        }
                        while (1)
                        {
                          v25 = (int32x4_t)vceqq_s16(*v1088, *v1087);
                          v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                          if (!v25.i32[0])
                            goto LABEL_2507;
                          v1086 += 8;
                          ++v1087;
                          ++v1088;
                          if (v1086 >= v689)
                            goto LABEL_1674;
                        }
                      }
                      if ((unsigned __int16)*v693 != v690)
                      {
LABEL_2507:
                        WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v688 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
                        v10 = *(WTF::AtomStringImpl **)task_info_out;
                        if (*(_QWORD *)task_info_out)
                          **(_DWORD **)task_info_out += 2;
                        v1148 = (WTF::StringImpl *)*((_QWORD *)v693 + 7);
                        *((_QWORD *)v693 + 7) = v10;
                        if (v1148)
                        {
                          if (*(_DWORD *)v1148 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v1148, (WTF::AtomStringImpl *)a2, a3, v1147, a5, a6, a7, a8);
                            WTF::fastFree(v1149, v1150, v1151, v1152, v1153, v1154, v1155, v1156);
                          }
                          else
                          {
                            *(_DWORD *)v1148 -= 2;
                          }
                        }
                        v693[27] = v688;
                        if (v689 != 1)
                        {
                          v16 = (unint64_t)v1582;
                          if ((v688 & 0x7FFFFFFF) != 0)
                            memcpy(v693, (const void *)v18, 2 * v689);
                          goto LABEL_2515;
                        }
                        v1157 = *(_WORD *)v18;
                        goto LABEL_2518;
                      }
LABEL_1674:
                      v10 = *(WTF::AtomStringImpl **)(v231 + (v692 << 6) + 56);
                      *(_DWORD *)v10 += 2;
                      v16 = (unint64_t)v1582;
LABEL_1675:
                      v696 = *(unsigned __int16 **)(a1 + 48);
                      v40 = *(_QWORD *)(a1 + 56);
                      while ((unint64_t)v696 < v40)
                      {
                        if (*v696 > 0xFFu || *(_BYTE *)(v29 + *v696) != 19)
                          break;
                        *j = ++v696;
                      }
                      if (v696 == (unsigned __int16 *)v40)
                      {
                        *v20 = 14;
                        goto LABEL_1736;
                      }
                      *v20 = 18;
                      v31 = *v696;
                      if (v31 > 0xFF)
                      {
LABEL_2328:
                        WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                        v998 = *(WTF::AtomStringImpl **)task_info_out;
                        if (!*(_QWORD *)task_info_out)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198B3AEE4);
                        }
                        *(_OWORD *)(*(_QWORD *)task_info_out + 20) = xmmword_199158B20;
                        *(_QWORD *)v998 = 0x1600000002;
                        *((_QWORD *)v998 + 1) = (char *)v998 + 20;
                        *((_DWORD *)v998 + 4) = 0;
                        *(_OWORD *)((char *)v998 + 36) = xmmword_199158B30;
                        *(_QWORD *)((char *)v998 + 52) = 0x270020006E0065;
                        *((_WORD *)v998 + 30) = *v696;
                        *((_WORD *)v998 + 31) = 39;
                        v999 = *v1568;
                        *v1568 = v998;
                        if (v999)
                        {
                          if (*(_DWORD *)v999 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v999, v991, v992, v993, v994, v995, v996, v997);
                            WTF::fastFree(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
                          }
                          else
                          {
                            *(_DWORD *)v999 -= 2;
                          }
                        }
LABEL_1736:
                        v730 = WTF::fastCompactMalloc((WTF *)0x20);
                        *(_QWORD *)v730 = v11;
                        *(_QWORD *)(v730 + 8) = "Expected ':' before value in object property definition";
                        *(_DWORD *)(v730 + 16) = 4;
                        v731 = *(_QWORD *)v1579;
                        *(_QWORD *)v1579 = v730;
                        if (v731)
                        {
                          v732 = *(_DWORD *)v731 - 2;
                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                          if (*(_DWORD *)v731 != 2)
                          {
                            v1580 = 0;
                            LOBYTE(v18) = 0;
                            *(_DWORD *)v731 = v732;
                            goto LABEL_1739;
                          }
                          goto LABEL_1856;
                        }
LABEL_2366:
                        v1580 = 0;
                        LOBYTE(v18) = 0;
                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                        goto LABEL_1739;
                      }
                      v698 = *(unsigned __int8 *)(v29 + v31);
                      switch(*(_BYTE *)(v29 + v31))
                      {
                        case 4:
                          v718 = *(unsigned __int8 *)(a1 + 40);
                          if ((_DWORD)v31 == 39)
                          {
                            if (!*(_BYTE *)(a1 + 40))
                            {
                              v1264 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1265 = v1264;
                              v1266 = 0x2900000002;
                              v1267 = "Single quotes (') are not allowed in JSON";
                              goto LABEL_2681;
                            }
                            a3 = (unint64_t)(v696 + 1);
                            *j = v696 + 1;
                          }
                          else
                          {
                            a3 = (unint64_t)(v696 + 1);
                            *j = v696 + 1;
                            if (!v718)
                            {
                              v719 = v40 - a3;
                              if ((uint64_t)(v40 - a3) <= -2)
                                goto LABEL_1656;
                              v720 = (int16x8_t *)((char *)v696 + (v719 & 0xFFFFFFFFFFFFFFFELL) + 2);
                              if ((unint64_t)v719 <= 0xE)
                              {
                                if (v40 != a3)
                                {
                                  v1268 = 2 * (v719 >> 1);
                                  v1269 = (int16x8_t *)(v696 + 1);
                                  while (1)
                                  {
                                    v1270 = v1269->u16[0];
                                    if (v1270 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1270])
                                      break;
                                    v1269 = (int16x8_t *)((char *)v1269 + 2);
                                    v1268 -= 2;
                                    if (!v1268)
                                      goto LABEL_2935;
                                  }
                                  v720 = v1269;
                                }
                              }
                              else
                              {
                                v721 = v696 + 1;
                                if (v719 >= 15)
                                {
                                  v722 = v696 + 8;
                                  while (1)
                                  {
                                    v723 = *(int16x8_t *)(v722 - 7);
                                    v724.i64[0] = 0x22002200220022;
                                    v724.i64[1] = 0x22002200220022;
                                    v725 = (int8x16_t)vceqq_s16(v723, v724);
                                    v726.i64[0] = 0x5C005C005C005CLL;
                                    v726.i64[1] = 0x5C005C005C005CLL;
                                    v727.i64[0] = 0x20002000200020;
                                    v727.i64[1] = 0x20002000200020;
                                    v728 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v723, v726), (int8x16_t)vcgtq_u16(v727, (uint16x8_t)v723)), v725);
                                    v725.i16[0] = vmaxvq_u16((uint16x8_t)v728);
                                    if (v725.i32[0])
                                      break;
                                    v722 += 8;
                                    if (v722 >= (unsigned __int16 *)v720)
                                    {
                                      v721 = v722 - 7;
                                      goto LABEL_2790;
                                    }
                                  }
                                  v729 = v722 - 7;
LABEL_1731:
                                  v720 = (int16x8_t *)&v729[vminvq_u16((uint16x8_t)vornq_s8(v1578, v728))];
LABEL_1732:
                                  *j = v720;
                                  goto LABEL_1733;
                                }
LABEL_2790:
                                if (v721 < (unsigned __int16 *)v720)
                                {
                                  v729 = (unsigned __int16 *)&v720[-1];
                                  v1315 = v720[-1];
                                  v1316.i64[0] = 0x22002200220022;
                                  v1316.i64[1] = 0x22002200220022;
                                  v1317 = (int8x16_t)vceqq_s16(v1315, v1316);
                                  v1318.i64[0] = 0x5C005C005C005CLL;
                                  v1318.i64[1] = 0x5C005C005C005CLL;
                                  v1319.i64[0] = 0x20002000200020;
                                  v1319.i64[1] = 0x20002000200020;
                                  v728 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1315, v1318), (int8x16_t)vcgtq_u16(v1319, (uint16x8_t)v1315)), v1317);
                                  v1317.i16[0] = vmaxvq_u16((uint16x8_t)v728);
                                  v16 = (unint64_t)v1582;
                                  if (!v1317.i32[0])
                                    goto LABEL_1732;
                                  goto LABEL_1731;
                                }
                              }
LABEL_2935:
                              v16 = (unint64_t)v1582;
                              goto LABEL_1732;
                            }
                          }
                          v720 = (int16x8_t *)a3;
                          if (a3 < v40)
                          {
                            while (1)
                            {
                              v1257 = v720->u16[0];
                              if (v1257 < 0x20)
                              {
                                if (v1257 != 9)
                                  goto LABEL_3144;
                              }
                              else if (v1257 == (_DWORD)v31 || v1257 > 0xFF || v1257 == 92)
                              {
                                goto LABEL_3144;
                              }
                              v720 = (int16x8_t *)((char *)v720 + 2);
                              *j = v720;
                              if ((unint64_t)v720 >= v40)
                                goto LABEL_3144;
                            }
                          }
                          v720 = (int16x8_t *)a3;
LABEL_3144:
                          v16 = (unint64_t)v1582;
LABEL_1733:
                          if ((unint64_t)v720 < v40 && v720->u16[0] == (_DWORD)v31)
                          {
                            *(_BYTE *)(a1 + 25) &= ~1u;
                            *(_QWORD *)(a1 + 32) = a3;
                            *(_QWORD *)(a1 + 48) = (char *)v720->i64 + 2;
                            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v720 - a3) >> 1);
                            *(_BYTE *)(a1 + 24) = 4;
                            goto LABEL_1736;
                          }
                          v698 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1685:
                          if (v698 != 7)
                            goto LABEL_1736;
                          v700 = *(unsigned __int16 **)(a1 + 48);
                          v699 = *(_QWORD *)(a1 + 56);
                          while ((unint64_t)v700 < v699)
                          {
                            if (*v700 > 0xFFu || *(_BYTE *)(v29 + *v700) != 19)
                              break;
                            *j = ++v700;
                          }
                          if (v700 == (unsigned __int16 *)v699)
                          {
                            *v20 = 14;
LABEL_2324:
                            v988 = WTF::fastCompactMalloc((WTF *)0x20);
                            *(_QWORD *)v988 = v12;
                            *(_QWORD *)(v988 + 8) = "Unexpected EOF";
                            *(_DWORD *)(v988 + 16) = 4;
                            v989 = *(WTF::StringImpl **)v1579;
                            *(_QWORD *)v1579 = v988;
                            if (v989)
                            {
                              v990 = *(_DWORD *)v989 - 2;
                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                              if (*(_DWORD *)v989 != 2)
                              {
                                v1580 = 0;
                                LOBYTE(v18) = 0;
                                *(_DWORD *)v989 = v990;
                                goto LABEL_1739;
                              }
                              WTF::StringImpl::~StringImpl(v989, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                              WTF::fastFree(v1011, v1012, v1013, v1014, v1015, v1016, v1017, v1018);
                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_2361:
                              v1580 = 0;
                              LOBYTE(v18) = 0;
                              goto LABEL_1739;
                            }
                            goto LABEL_2366;
                          }
                          *v20 = 18;
                          v31 = *v700;
                          if (v31 > 0xFF)
                          {
LABEL_2341:
                            WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                            v1000 = *(WTF::AtomStringImpl **)task_info_out;
                            if (!*(_QWORD *)task_info_out)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x198B3AEECLL);
                            }
                            **(_QWORD **)task_info_out = 0x1600000002;
                            *(_OWORD *)((char *)v1000 + 20) = xmmword_199158B20;
                            *((_QWORD *)v1000 + 1) = (char *)v1000 + 20;
                            *((_DWORD *)v1000 + 4) = 0;
                            v25.i64[1] = 0x6B006F00740020;
                            *(_OWORD *)((char *)v1000 + 36) = xmmword_199158B30;
                            v25.i64[0] = 0x270020006E0065;
                            *(_QWORD *)((char *)v1000 + 52) = 0x270020006E0065;
                            *((_WORD *)v1000 + 30) = *v700;
                            *((_WORD *)v1000 + 31) = 39;
                            v1001 = *v1568;
                            *v1568 = v1000;
                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                            if (v1001)
                            {
                              if (*(_DWORD *)v1001 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1001, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                WTF::fastFree(v1051, v1052, v1053, v1054, v1055, v1056, v1057, v1058);
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                              }
                              else
                              {
                                *(_DWORD *)v1001 -= 2;
                              }
                            }
                            goto LABEL_1697;
                          }
                          v702 = *(unsigned __int8 *)(v29 + v31);
                          switch(*(_BYTE *)(v29 + v31))
                          {
                            case 4:
                              LODWORD(v40) = *(unsigned __int8 *)(a1 + 40);
                              if ((_DWORD)v31 != 39)
                              {
                                a3 = (unint64_t)(v700 + 1);
                                *j = v700 + 1;
                                if (!(_DWORD)v40)
                                {
                                  v735 = v699 - a3;
                                  if ((uint64_t)(v699 - a3) <= -2)
                                    goto LABEL_1656;
                                  v736 = (int16x8_t *)((char *)v700 + (v735 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                  if ((unint64_t)v735 <= 0xE)
                                  {
                                    if (v699 != a3)
                                    {
                                      v1305 = 2 * (v735 >> 1);
                                      v1306 = (int16x8_t *)(v700 + 1);
                                      while (1)
                                      {
                                        v1307 = v1306->u16[0];
                                        if (v1307 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1307])
                                          break;
                                        v1306 = (int16x8_t *)((char *)v1306 + 2);
                                        v1305 -= 2;
                                        if (!v1305)
                                          goto LABEL_3154;
                                      }
                                      v736 = v1306;
                                    }
                                  }
                                  else
                                  {
                                    v737 = v700 + 1;
                                    if (v735 >= 15)
                                    {
                                      v738 = v700 + 8;
                                      while (1)
                                      {
                                        v739 = *(int16x8_t *)(v738 - 7);
                                        v740.i64[0] = 0x22002200220022;
                                        v740.i64[1] = 0x22002200220022;
                                        v741 = (int8x16_t)vceqq_s16(v739, v740);
                                        v742.i64[0] = 0x5C005C005C005CLL;
                                        v742.i64[1] = 0x5C005C005C005CLL;
                                        v743.i64[0] = 0x20002000200020;
                                        v743.i64[1] = 0x20002000200020;
                                        v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v739, v742), (int8x16_t)vcgtq_u16(v743, (uint16x8_t)v739)), v741);
                                        v741.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                        if (v741.i32[0])
                                          break;
                                        v738 += 8;
                                        if (v738 >= (unsigned __int16 *)v736)
                                        {
                                          v737 = v738 - 7;
                                          goto LABEL_2904;
                                        }
                                      }
                                      v744 = v738 - 7;
LABEL_1757:
                                      v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                      v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                      v736 = (int16x8_t *)&v744[v25.u8[0]];
LABEL_1758:
                                      *j = v736;
LABEL_1759:
                                      if ((unint64_t)v736 < v699 && v736->u16[0] == (_DWORD)v31)
                                      {
                                        *(_BYTE *)(a1 + 25) &= ~1u;
                                        *(_QWORD *)(a1 + 32) = a3;
                                        *(_QWORD *)(a1 + 48) = (char *)v736->i64 + 2;
                                        v745 = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v736 - a3) >> 1);
                                        *(_DWORD *)(a1 + 28) = v745;
                                        *(_BYTE *)(a1 + 24) = 4;
LABEL_1762:
                                        v18 = v745 & 0x7FFFFFFF;
                                        if ((*(_BYTE *)(a1 + 25) & 1) != 0)
                                        {
                                          if (v18 < 0xB)
                                          {
                                            v1213 = v1582;
                                            JSC::Identifier::fromString((uint64_t)v1582, *(WTF::AtomStringImpl **)(a1 + 32), v18, v31, a5, a6, a7, a8, (rlim_t *)task_info_out);
                                            v1173 = JSC::jsString(v1213, (JSC::VM *)task_info_out, v1214, v1215, v1216, v1217, v1218, v1219);
                                          }
                                          else
                                          {
                                            WTF::String::String((uint64_t *)task_info_out, *(_BYTE **)(a1 + 32), v745 & 0x7FFFFFFF);
                                            v1173 = JSC::jsNontrivialString((uint64_t)v1582, (JSC::VM *)task_info_out, v1167, v1168, v1169, v1170, v1171, v1172);
                                          }
                                          v704 = v1173;
                                          v1220 = *(WTF::StringImpl **)task_info_out;
                                          *(_QWORD *)task_info_out = 0;
                                          if (v1220)
                                          {
                                            if (*(_DWORD *)v1220 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v1220, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                              WTF::fastFree(v1346, v1347, v1348, v1349, v1350, v1351, v1352, v1353);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v1220 -= 2;
                                            }
                                          }
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1775:
                                          v705 = *(unsigned __int16 **)(a1 + 48);
                                          v40 = *(_QWORD *)(a1 + 56);
                                          while ((unint64_t)v705 < v40)
                                          {
                                            if (*v705 > 0xFFu || *(_BYTE *)(v29 + *v705) != 19)
                                              break;
                                            *j = ++v705;
                                          }
                                          if (v705 == (unsigned __int16 *)v40)
                                          {
LABEL_2338:
                                            *v20 = 14;
                                            goto LABEL_1785;
                                          }
                                          *v20 = 18;
                                          v31 = *v705;
                                          if (v31 <= 0xFF)
                                          {
                                            v707 = *(_BYTE *)(v29 + v31);
                                            switch(v707)
                                            {
                                              case 4u:
                                                v829 = *(unsigned __int8 *)(a1 + 40);
                                                if ((_DWORD)v31 != 39)
                                                {
                                                  a3 = (unint64_t)(v705 + 1);
                                                  *j = v705 + 1;
                                                  if (!v829)
                                                  {
                                                    v830 = v40 - a3;
                                                    if ((uint64_t)(v40 - a3) <= -2)
                                                      goto LABEL_1656;
                                                    v710 = (int16x8_t *)((char *)v705 + (v830 & 0xFFFFFFFFFFFFFFFELL)
                                                                                      + 2);
                                                    if ((unint64_t)v830 > 0xE)
                                                    {
                                                      v711 = v705 + 1;
                                                      if (v830 >= 15)
                                                      {
                                                        v712 = v705 + 8;
                                                        while (1)
                                                        {
                                                          v831 = *(int16x8_t *)(v712 - 7);
                                                          v832.i64[0] = 0x22002200220022;
                                                          v832.i64[1] = 0x22002200220022;
                                                          v833 = (int8x16_t)vceqq_s16(v831, v832);
                                                          v834.i64[0] = 0x5C005C005C005CLL;
                                                          v834.i64[1] = 0x5C005C005C005CLL;
                                                          v835.i64[0] = 0x20002000200020;
                                                          v835.i64[1] = 0x20002000200020;
                                                          v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v831, v834), (int8x16_t)vcgtq_u16(v835, (uint16x8_t)v831)), v833);
                                                          v833.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                          if (v833.i32[0])
                                                            break;
                                                          v712 += 8;
                                                          if (v712 >= (unsigned __int16 *)v710)
                                                            goto LABEL_2956;
                                                        }
LABEL_1977:
                                                        v836 = v712 - 7;
LABEL_1978:
                                                        v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                                        v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                                        v710 = (int16x8_t *)&v836[v25.u8[0]];
LABEL_1979:
                                                        *j = v710;
LABEL_1980:
                                                        if ((unint64_t)v710 < v40 && v710->u16[0] == (_DWORD)v31)
                                                        {
                                                          *(_BYTE *)(a1 + 25) &= ~1u;
                                                          *(_QWORD *)(a1 + 32) = a3;
                                                          *(_QWORD *)(a1 + 48) = (char *)v710->i64 + 2;
                                                          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v710 - a3) >> 1);
                                                          *(_BYTE *)(a1 + 24) = 4;
                                                          goto LABEL_1785;
                                                        }
                                                        JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                                                        goto LABEL_2385;
                                                      }
LABEL_2957:
                                                      if (v711 < (unsigned __int16 *)v710)
                                                      {
                                                        v836 = (unsigned __int16 *)&v710[-1];
                                                        v1403 = v710[-1];
                                                        v1404.i64[0] = 0x22002200220022;
                                                        v1404.i64[1] = 0x22002200220022;
                                                        v1405 = (int8x16_t)vceqq_s16(v1403, v1404);
                                                        v1406.i64[0] = 0x5C005C005C005CLL;
                                                        v1406.i64[1] = 0x5C005C005C005CLL;
                                                        v1407.i64[0] = 0x20002000200020;
                                                        v1407.i64[1] = 0x20002000200020;
                                                        v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1403, v1406), (int8x16_t)vcgtq_u16(v1407, (uint16x8_t)v1403)), v1405);
                                                        v1405.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                        v16 = (unint64_t)v1582;
                                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                        if (!v1405.i32[0])
                                                          goto LABEL_1979;
                                                        goto LABEL_1978;
                                                      }
LABEL_3261:
                                                      v16 = (unint64_t)v1582;
                                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                      goto LABEL_1979;
                                                    }
                                                    if (v40 == a3)
                                                      goto LABEL_3261;
                                                    v1426 = 2 * (v830 >> 1);
                                                    v1427 = (int16x8_t *)(v705 + 1);
                                                    while (1)
                                                    {
                                                      v1428 = v1427->u16[0];
                                                      if (v1428 <= 0xFF
                                                        && !JSC::safeStringLatin1CharactersInStrictJSON[v1428])
                                                      {
                                                        goto LABEL_3260;
                                                      }
                                                      v1427 = (int16x8_t *)((char *)v1427 + 2);
                                                      v1426 -= 2;
                                                      if (!v1426)
                                                        goto LABEL_3261;
                                                    }
                                                  }
                                                  goto LABEL_3009;
                                                }
                                                if (*(_BYTE *)(a1 + 40))
                                                {
                                                  a3 = (unint64_t)(v705 + 1);
                                                  *j = v705 + 1;
LABEL_3009:
                                                  v710 = (int16x8_t *)a3;
                                                  if (a3 < v40)
                                                  {
                                                    while (1)
                                                    {
                                                      v1417 = v710->u16[0];
                                                      if (v1417 < 0x20)
                                                      {
                                                        if (v1417 != 9)
                                                          goto LABEL_3275;
                                                      }
                                                      else if (v1417 == (_DWORD)v31 || v1417 > 0xFF || v1417 == 92)
                                                      {
                                                        goto LABEL_3275;
                                                      }
                                                      v710 = (int16x8_t *)((char *)v710 + 2);
                                                      *j = v710;
                                                      if ((unint64_t)v710 >= v40)
                                                        goto LABEL_3275;
                                                    }
                                                  }
LABEL_3274:
                                                  v710 = (int16x8_t *)a3;
LABEL_3275:
                                                  v16 = (unint64_t)v1582;
                                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  goto LABEL_1980;
                                                }
                                                v1423 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1424 = v1423;
                                                v25.i64[0] = 0x2900000002;
                                                v1425 = "Single quotes (') are not allowed in JSON";
                                                goto LABEL_3038;
                                              case 5u:
                                                if ((_DWORD)v31 == 102)
                                                {
                                                  if ((uint64_t)(v40 - (_QWORD)v705) >= 9
                                                    && *(_DWORD *)(v705 + 1) == 7077985
                                                    && *(_DWORD *)(v705 + 3) == 6619251)
                                                  {
                                                    goto LABEL_2137;
                                                  }
                                                }
                                                else if ((_DWORD)v31 == 116)
                                                {
                                                  if ((uint64_t)(v40 - (_QWORD)v705) >= 7
                                                    && *(_DWORD *)(v705 + 1) == 7667826
                                                    && v705[3] == 101)
                                                  {
                                                    goto LABEL_2248;
                                                  }
                                                }
                                                else if ((_DWORD)v31 == 110
                                                       && (uint64_t)(v40 - (_QWORD)v705) >= 7
                                                       && *(_DWORD *)(v705 + 1) == 7078005
                                                       && v705[3] == 108)
                                                {
                                                  goto LABEL_2887;
                                                }
                                                *(_QWORD *)(a1 + 32) = v705;
                                                LODWORD(v1354) = (_DWORD)v705;
                                                if ((unint64_t)v705 < v40)
                                                {
                                                  v1354 = v705;
                                                  do
                                                  {
                                                    v1355 = *v1354;
                                                    v1357 = (v1355 | 0x20u) - 97 >= 0x1A
                                                         && (v1355 - 48) >= 0xA
                                                         && (v1355 - 8204) >= 2;
                                                    if (v1357 && v1355 != 95 && v1355 != 36)
                                                      break;
                                                    *j = ++v1354;
                                                  }
                                                  while ((unint64_t)v1354 < v40);
                                                }
                                                goto LABEL_2901;
                                              case 6u:
                                                v901 = 0;
                                                if ((unint64_t)v705 < v40 && (_DWORD)v31 == 45)
                                                {
                                                  *j = v705 + 1;
                                                  v901 = 1;
                                                }
                                                v902 = &v705[v901];
                                                if ((unint64_t)v902 >= v40)
                                                  goto LABEL_2775;
                                                v903 = *v902;
                                                if (v903 == 48)
                                                {
                                                  v906 = v901 + 1;
                                                }
                                                else
                                                {
                                                  if ((v903 - 49) > 8)
                                                  {
LABEL_2775:
                                                    v1308 = WTF::fastCompactMalloc((WTF *)0x20);
                                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    v1309 = v1308;
                                                    *(_QWORD *)v1308 = v12;
                                                    *(_QWORD *)(v1308 + 8) = "Invalid number";
                                                    *(_DWORD *)(v1308 + 16) = 4;
                                                    v1310 = *v1568;
                                                    *v1568 = (WTF::StringImpl *)v1309;
                                                    if (!v1310)
                                                      goto LABEL_1785;
LABEL_2776:
                                                    if (*(_DWORD *)v1310 != 2)
                                                    {
                                                      *(_DWORD *)v1310 -= 2;
                                                      v16 = (unint64_t)v1582;
                                                      goto LABEL_1785;
                                                    }
                                                    goto LABEL_2913;
                                                  }
                                                  v904 = v901 + 1;
                                                  v905 = 2 * v901 + 2;
                                                  do
                                                  {
                                                    v906 = v904;
                                                    if ((unint64_t)v705 + v905 >= v40)
                                                      break;
                                                    ++v904;
                                                    v905 += 2;
                                                  }
                                                  while (v705[v906] - 48 < 0xA);
                                                }
                                                v907 = &v705[v906];
                                                *j = v907;
                                                if ((unint64_t)v907 >= v40)
                                                  goto LABEL_3025;
                                                v908 = *v907;
                                                if (v908 == 101 || v908 == 69)
                                                  goto LABEL_3025;
                                                if (v908 == 46)
                                                {
                                                  v1418 = v907 + 1;
                                                  *j = v1418;
                                                  if ((unint64_t)v1418 >= v40 || *v1418 - 48 > 9)
                                                  {
                                                    v1423 = WTF::fastCompactMalloc((WTF *)0x20);
                                                    v1424 = v1423;
                                                    v25.i64[0] = 0x2200000002;
                                                    v1425 = "Invalid digits after decimal point";
                                                    goto LABEL_3038;
                                                  }
                                                  v1419 = (unint64_t)&v705[v906 + 2];
                                                  do
                                                  {
                                                    v907 = (unsigned __int16 *)v1419;
                                                    if (v1419 >= v40)
                                                      break;
                                                    v1419 += 2;
                                                  }
                                                  while (*v907 - 48 < 0xA);
                                                  *j = v907;
                                                }
                                                else if (v906 <= 9)
                                                {
                                                  *v20 = 6;
                                                  if ((_DWORD)v31 == 45)
                                                  {
                                                    if (v906 < 2)
                                                      goto LABEL_3085;
                                                    ++v705;
                                                    v16 = (unint64_t)v1582;
                                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                  }
                                                  v909 = 0;
                                                  do
                                                  {
                                                    v910 = *v705++;
                                                    v909 = v910 + 10 * v909 - 48;
                                                  }
                                                  while (v705 < v907);
LABEL_2155:
                                                  if ((_DWORD)v31 != 45)
                                                  {
                                                    *(double *)v25.i64 = (double)v909;
                                                    *(double *)(a1 + 32) = (double)v909;
                                                    goto LABEL_1785;
                                                  }
                                                  if (v909)
                                                  {
                                                    *(double *)v25.i64 = (double)-v909;
LABEL_3080:
                                                    *(_QWORD *)(a1 + 32) = v25.i64[0];
                                                    goto LABEL_2902;
                                                  }
LABEL_3085:
                                                  *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                                  goto LABEL_2902;
                                                }
LABEL_3025:
                                                if ((unint64_t)v907 >= v40 || (*v907 | 0x20) != 0x65)
                                                  goto LABEL_3078;
                                                v1420 = v907 + 1;
                                                *j = v907 + 1;
                                                if ((unint64_t)(v907 + 1) < v40)
                                                {
                                                  v1421 = *v1420;
                                                  if (v1421 == 45 || v1421 == 43)
                                                  {
                                                    v1420 = v907 + 2;
                                                    *j = v907 + 2;
                                                  }
                                                }
                                                if ((unint64_t)v1420 < v40 && *v1420 - 48 <= 9)
                                                {
                                                  v1422 = v1420 + 1;
                                                  do
                                                  {
                                                    v907 = v1422;
                                                    if ((unint64_t)v1422 >= v40)
                                                      break;
                                                    ++v1422;
                                                  }
                                                  while (*v907 - 48 < 0xA);
LABEL_3077:
                                                  *j = v907;
LABEL_3078:
                                                  *v20 = 6;
                                                  LODWORD(v40) = (_DWORD)v907 - (_DWORD)v705;
                                                  if ((char *)v907 - (char *)v705 <= -2)
                                                    goto LABEL_1656;
                                                  *(_QWORD *)task_info_out = 0;
                                                  fast_float::from_chars_advanced<double,char16_t>(v705, v907, (double *)task_info_out, 0x2E00000005);
                                                  v25.i64[0] = *(_QWORD *)task_info_out;
                                                  goto LABEL_3080;
                                                }
                                                v1423 = WTF::fastCompactMalloc((WTF *)0x20);
                                                v1424 = v1423;
                                                v25.i64[0] = 0x5D00000002;
                                                v1425 = "Exponent symbols should be followed by an optional '+' or '-' an"
                                                        "d then by at least one number";
LABEL_3038:
                                                *(_QWORD *)v1423 = v25.i64[0];
                                                *(_QWORD *)(v1423 + 8) = v1425;
                                                *(_DWORD *)(v1423 + 16) = 4;
                                                v1310 = *v1568;
                                                *v1568 = (WTF::StringImpl *)v1424;
                                                v16 = (unint64_t)v1582;
                                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                if (!v1310)
                                                  goto LABEL_1785;
                                                goto LABEL_2776;
                                              case 0x12u:
                                              case 0x13u:
                                                break;
                                              default:
                                                goto LABEL_1784;
                                            }
                                          }
                                          WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                                          v1024 = *(WTF::StringImpl **)task_info_out;
                                          if (!*(_QWORD *)task_info_out)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x198B3AEF4);
                                          }
                                          **(_QWORD **)task_info_out = 0x1600000002;
                                          *(_OWORD *)((char *)v1024 + 20) = xmmword_199158B20;
                                          *((_QWORD *)v1024 + 1) = (char *)v1024 + 20;
                                          *((_DWORD *)v1024 + 4) = 0;
                                          v25.i64[1] = 0x6B006F00740020;
                                          *(_OWORD *)((char *)v1024 + 36) = xmmword_199158B30;
                                          v25.i64[0] = 0x270020006E0065;
                                          *(_QWORD *)((char *)v1024 + 52) = 0x270020006E0065;
                                          *((_WORD *)v1024 + 30) = *v705;
                                          *((_WORD *)v1024 + 31) = 39;
                                          v1025 = *v1568;
                                          *v1568 = v1024;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          if (!v1025)
                                          {
LABEL_1785:
                                            if (!v704)
                                              goto LABEL_2361;
                                            goto LABEL_1786;
                                          }
                                          v1026 = *(_DWORD *)v1025 - 2;
                                          if (*(_DWORD *)v1025 != 2)
                                          {
LABEL_2377:
                                            *(_DWORD *)v1025 = v1026;
                                            goto LABEL_1785;
                                          }
LABEL_2381:
                                          WTF::StringImpl::~StringImpl(v1025, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                          WTF::fastFree(v1028, v1029, v1030, v1031, v1032, v1033, v1034, v1035);
LABEL_2385:
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_1785;
                                        }
                                        v746 = *(_WORD **)(a1 + 32);
                                        if (v18 >= 0xB)
                                        {
                                          if (v746)
                                          {
                                            if (v18 >= 0x7FFFFFF0)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x198B3AE68);
                                            }
                                            v747 = 2 * v745;
                                            v748 = WTF::fastCompactMalloc((WTF *)(v747 + 20));
                                            *(_DWORD *)v748 = 2;
                                            *(_DWORD *)(v748 + 4) = v18;
                                            *(_QWORD *)(v748 + 8) = v748 + 20;
                                            *(_DWORD *)(v748 + 16) = 0;
                                            memcpy((void *)(v748 + 20), v746, v747);
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          }
                                          else
                                          {
                                            v748 = 0;
                                          }
                                          v749 = *(_DWORD *)(v748 + 16);
                                          v750 = v748;
                                          if ((v749 & 3) == 2)
                                          {
                                            v750 = v748;
                                            do
                                            {
                                              v750 = *(_QWORD *)(v750 + 24);
                                              v749 = *(_DWORD *)(v750 + 16);
                                            }
                                            while ((v749 & 3) == 2);
                                          }
                                          if ((v749 & 8) != 0)
                                          {
                                            v751 = 0;
                                          }
                                          else
                                          {
                                            *(_DWORD *)(v750 + 16) = v749 | 8;
                                            v751 = (unint64_t)*(unsigned int *)(v750 + 4) << ((v749 & 4) == 0);
                                          }
                                          v752 = v1574;
                                          v704 = *v1574;
                                          if (*v1574 >= (unint64_t)v1574[1])
                                          {
                                            v704 = v1574[2];
                                            if ((v704 & 1) != 0)
                                            {
                                              LOBYTE(v18) = v16 - 8;
                                              JSC::sanitizeStackForVM((JSC *)v16, (JSC::VM *)a2, a3, v31, a5, a6, a7, a8);
                                              v1203 = JSC::LocalAllocator::allocateSlowCase(v16 + 39672, v16 + 192, 16, 0, 0);
                                              v752 = v1574;
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              v704 = v1203;
                                            }
                                            else
                                            {
                                              v1037 = *(_QWORD *)(v704 + 8) ^ v1574[3];
                                              v1574[2] = v704 + (int)v1037;
                                              v1574[1] = v704 + HIDWORD(v1037);
                                              *v1574 = v704 + 16;
                                              v752 = v1574;
                                            }
                                          }
                                          else
                                          {
                                            *v1574 = v704 + 16;
                                          }
                                          *(_DWORD *)v704 = (unint64_t)v752[227] >> 4;
                                          v25 = v1573;
                                          *(_DWORD *)(v704 + 4) = v1573.i32[0];
                                          *(_QWORD *)(v704 + 8) = v748;
                                          if (*(_BYTE *)(v16 + 755))
                                            __dmb(0xAu);
                                          if (v751 < 0x101)
                                            goto LABEL_1775;
                                          v952 = (JSC::Heap *)(v16 + 192);
                                          v18 = *(_QWORD *)(v16 + 832);
                                          if (v18)
                                          {
                                            v953 = *(_QWORD *)(v16 + 280) + *(_QWORD *)(v16 + 272);
                                            if (!v953)
                                              v953 = 1;
                                            v954 = (*(double (**)(_QWORD, unint64_t))(*(_QWORD *)v18 + 48))(*(_QWORD *)(v16 + 832), v16 + 192)* (double)v953;
                                            v955 = (*(double (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 32))(v18, v16 + 192);
                                            v956 = v955
                                                 / (*(double (**)(unint64_t, unint64_t))(*(_QWORD *)v18 + 40))(v18, (unint64_t)v954);
                                            *(double *)v25.i64 = v956 + v956;
                                            v957 = *(double *)(v18 + 40);
                                            if (v956 + v956 <= v957)
                                            {
                                              *(double *)(v18 + 40) = v956;
                                              v1067 = atomic_load(&JSC::JSRunLoopTimer::Manager::shared(void)::once);
                                              if (v1067 != -1)
                                              {
                                                *(_QWORD *)task_info_out = &v1590;
                                                v1591 = task_info_out;
                                                std::__call_once(&JSC::JSRunLoopTimer::Manager::shared(void)::once, &v1591, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSRunLoopTimer::Manager::shared(void)::$_0 &&>>);
                                              }
                                              v1068 = COERCE_DOUBLE(JSC::JSRunLoopTimer::Manager::timeUntilFire((JSC::JSRunLoopTimer::Manager *)JSC::JSRunLoopTimer::Manager::shared(void)::manager, (JSC::JSRunLoopTimer *)v18, a3, v31, a5, a6, a7, a8))- (v957- v956);
                                              if (!v1069)
                                                v1068 = v956;
                                              JSC::JSRunLoopTimer::setTimeUntilFire(v18, v1068);
                                            }
                                          }
                                          *(_QWORD *)(v16 + 272) += v751;
                                          if (*(_BYTE *)(v16 + 445) && !*(_DWORD *)(v16 + 916))
                                          {
                                            *(double *)v25.i64 = *(double *)(v16 + 336)
                                                               + (double)v751 * *(double *)&qword_1ECF4C3F8;
                                            *(_QWORD *)(v16 + 336) = v25.i64[0];
                                            if (fabs(*(double *)v25.i64) == INFINITY)
                                            {
                                              *(_QWORD *)(v16 + 336) = 0;
                                            }
                                            else if (*(double *)v25.i64 >= *(double *)&xmmword_1ECF4C3E8
                                                   && *(double *)v25.i64 > 0.0)
                                            {
                                              if (*((double *)&xmmword_1ECF4C3E8 + 1) < *(double *)v25.i64)
                                                v25.i64[0] = *((_QWORD *)&xmmword_1ECF4C3E8 + 1);
                                              v18 = *(_QWORD *)(v16 + 600);
                                              *(_BYTE *)(v18 + 187) = 1;
                                              *(double *)v25.i64 = *(double *)(v16 + 336)
                                                                 - (double)(unint64_t)JSC::SlotVisitor::performIncrementOfDraining((JSC::SlotVisitor *)v18, (unint64_t)*(double *)v25.i64, a3, v31, a5, a6, a7, a8);
                                              *(_QWORD *)(v16 + 336) = v25.i64[0];
                                              *(_BYTE *)(v18 + 187) = 0;
                                            }
                                          }
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          if (*(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(v704 + 7))
                                          {
                                            if (*(_BYTE *)(v16 + 755))
                                            {
                                              __dmb(0xBu);
                                              if (*(_BYTE *)(v704 + 7))
                                                goto LABEL_2255;
                                              __dmb(0xBu);
                                              if ((v704 & 8) != 0)
                                              {
                                                v16 = (unint64_t)v1582;
                                                if ((*(_BYTE *)(v704 - 79) & 1) == 0)
                                                  goto LABEL_2255;
                                              }
                                              else
                                              {
                                                v16 = (unint64_t)v1582;
                                                isMarked = JSC::MarkedBlock::isMarked(v704 & 0xFFFFFFFFFFFFC000, *((_DWORD *)v1582 + 108), v704);
                                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                if (!isMarked)
                                                  goto LABEL_2255;
                                              }
                                            }
                                            v1124 = (unint64_t *)(v16 + 536);
                                            do
                                            {
                                              while (1)
                                              {
                                                v1125 = *v1124 + v751;
                                                if (__CFADD__(*v1124, v751))
                                                  v1125 = -1;
                                                v1126 = __ldxr(v1124);
                                                if (v1126 == *v1124)
                                                  break;
                                                __clrex();
                                              }
                                            }
                                            while (__stxr(v1125, v1124));
                                          }
LABEL_2255:
                                          if (!*(_BYTE *)(v16 + 753))
                                            goto LABEL_1775;
                                          if ((*(_BYTE *)(v16 + 202) & 0xFE) == 2 || HIBYTE(word_1ECF4C5CC) == 0)
                                            goto LABEL_1775;
                                          if (*(_DWORD *)(v16 + 1096) != 4)
                                          {
                                            if (*(_DWORD *)(v16 + 916))
                                            {
                                              *(_BYTE *)(v16 + 1198) = 1;
                                            }
                                            else
                                            {
                                              JSC::Heap::stopIfNecessary(v952);
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            }
                                          }
                                          if ((_DWORD)qword_1ECF4C5D4)
                                          {
                                            if (*(_QWORD *)(v16 + 272) <= (unint64_t)qword_1ECF4C5D4)
                                              goto LABEL_1775;
                                            goto LABEL_2320;
                                          }
                                          v968 = *(_QWORD *)(v16 + 288);
                                          v969 = *(_DWORD *)(v16 + 1312) + 1;
                                          *(_DWORD *)(v16 + 1312) = v969;
                                          if (v969 <= 0x63)
                                          {
                                            if (!*(_BYTE *)(v16 + 1316))
                                              goto LABEL_2319;
                                          }
                                          else
                                          {
                                            task_info_outCnt = 93;
                                            LODWORD(v18) = task_info(*MEMORY[0x1E0C83DA0], 0x16u, task_info_out, &task_info_outCnt);
                                            v970 = v1588;
                                            v971 = atomic_load(&bmalloc::availableMemory(void)::onceFlag);
                                            if (v971 != -1)
                                            {
                                              v1591 = (integer_t *)&v1589;
                                              v1590 = &v1591;
                                              std::__call_once(&bmalloc::availableMemory(void)::onceFlag, &v1590, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<bmalloc::availableMemory(void)::$_0 &&>>);
                                            }
                                            v972 = (double)v970;
                                            if ((_DWORD)v18)
                                              v972 = v14;
                                            *(double *)v25.i64 = v972
                                                               / (double)(unint64_t)bmalloc::availableMemory(void)::availableMemory;
                                            if (*(double *)v25.i64 > v15)
                                              *(double *)v25.i64 = v15;
                                            v973 = *(double *)&xmmword_1ECF4C398 < *(double *)v25.i64;
                                            v16 = (unint64_t)v1582;
                                            *((_BYTE *)v1582 + 1316) = *(double *)&xmmword_1ECF4C398 < *(double *)v25.i64;
                                            *(_DWORD *)(v16 + 1312) = 0;
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (!v973)
                                            {
LABEL_2319:
                                              if (*(_QWORD *)(v16 + 272) <= v968)
                                                goto LABEL_1775;
LABEL_2320:
                                              if (*(_DWORD *)(v16 + 916))
                                              {
                                                *(_BYTE *)(v16 + 1198) = 1;
                                              }
                                              else
                                              {
                                                LOWORD(task_info_out[0]) = 0;
                                                v1586 = 0;
                                                JSC::Heap::collectAsync(v952, task_info_out);
                                                JSC::Heap::stopIfNecessary(v952);
                                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              }
                                              goto LABEL_1775;
                                            }
                                          }
                                          if (v968 >= *(_QWORD *)(v16 + 296))
                                            v968 = *(_QWORD *)(v16 + 296);
                                          goto LABEL_2319;
                                        }
                                        if ((_DWORD)v18 == 1)
                                        {
                                          v983 = (unsigned __int16)*v746;
                                          if (v983 < 0x100)
                                          {
                                            if (*(_BYTE *)(v1569 + 2297))
                                            {
                                              v984 = *(_QWORD *)(v16 + 8 * v983 + 42216);
                                              v867 = *(_QWORD *)(v984 + 8);
                                              if ((v867 & 1) != 0)
                                                v985 = 0;
                                              else
                                                v985 = *(_DWORD **)(v984 + 8);
                                              *v985 += 2;
                                            }
                                            else
                                            {
                                              LOBYTE(v1591) = *v746;
                                              WTF::AtomStringImpl::add((uint64_t)&v1591, 1uLL, v31, a5, a6, a7, a8, task_info_out);
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              v867 = *(_QWORD *)task_info_out;
                                            }
                                            if (!v867)
                                            {
                                              v704 = *(_QWORD *)v1569;
                                              goto LABEL_1775;
                                            }
                                            goto LABEL_2197;
                                          }
                                          v860 = -1640531527;
                                          v1591 = *(integer_t **)(a1 + 32);
                                          v1592 = 1;
                                        }
                                        else
                                        {
                                          if ((v745 & 0x7FFFFFFF) == 0)
                                          {
                                            v867 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
                                            v934 = WTF::StringImpl::s_emptyAtomString + 2;
                                            goto LABEL_2196;
                                          }
                                          if (!v746)
                                          {
                                            v867 = 0;
LABEL_2195:
                                            v934 = *(_DWORD *)v867;
                                            *(_DWORD *)v867 += 2;
                                            if (v934)
                                            {
LABEL_2196:
                                              *(_DWORD *)v867 = v934;
                                              goto LABEL_2197;
                                            }
                                            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v867, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                            WTF::fastFree(v974, v975, v976, v977, v978, v979, v980, v981);
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_2197:
                                            v935 = *(_DWORD *)(v867 + 4);
                                            if (v935 == 1)
                                            {
                                              v936 = *(_DWORD *)(v867 + 16);
                                              v986 = *(unsigned __int8 **)(v867 + 8);
                                              if ((v936 & 4) != 0)
                                              {
                                                v987 = *v986;
                                              }
                                              else
                                              {
                                                v987 = *(unsigned __int16 *)v986;
                                                if (v987 > 0xFF)
                                                  goto LABEL_2200;
                                              }
                                              v704 = *(_QWORD *)(v16 + 8 * v987 + 42216);
                                            }
                                            else
                                            {
                                              if (v935)
                                              {
                                                v936 = *(_DWORD *)(v867 + 16);
LABEL_2200:
                                                *(_DWORD *)v867 += 2;
                                                v937 = v867;
                                                if ((v936 & 3) == 2)
                                                {
                                                  v937 = v867;
                                                  do
                                                  {
                                                    v937 = *(_QWORD *)(v937 + 24);
                                                    v936 = *(_DWORD *)(v937 + 16);
                                                  }
                                                  while ((v936 & 3) == 2);
                                                }
                                                if ((v936 & 8) != 0)
                                                {
                                                  v18 = 0;
                                                }
                                                else
                                                {
                                                  *(_DWORD *)(v937 + 16) = v936 | 8;
                                                  v18 = (unint64_t)*(unsigned int *)(v937 + 4) << ((v936 & 4) == 0);
                                                }
                                                v938 = v1574;
                                                v704 = *v1574;
                                                if (*v1574 >= (unint64_t)v1574[1])
                                                {
                                                  v704 = v1574[2];
                                                  if ((v704 & 1) != 0)
                                                  {
                                                    JSC::sanitizeStackForVM((JSC *)v16, (JSC::VM *)a2, a3, v31, a5, a6, a7, a8);
                                                    v1390 = JSC::LocalAllocator::allocateSlowCase(v16 + 39672, v16 + 192, 16, 0, 0);
                                                    v938 = v1574;
                                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                    v704 = v1390;
                                                  }
                                                  else
                                                  {
                                                    v1089 = *(_QWORD *)(v704 + 8) ^ v1574[3];
                                                    v1574[2] = v704 + (int)v1089;
                                                    v1574[1] = v704 + HIDWORD(v1089);
                                                    *v1574 = v704 + 16;
                                                    v938 = v1574;
                                                  }
                                                }
                                                else
                                                {
                                                  *v1574 = v704 + 16;
                                                }
                                                *(_DWORD *)v704 = (unint64_t)v938[227] >> 4;
                                                v25 = v1573;
                                                *(_DWORD *)(v704 + 4) = v1573.i32[0];
                                                *(_QWORD *)(v704 + 8) = v867;
                                                if (*(_BYTE *)(v16 + 755))
                                                  __dmb(0xAu);
                                                if (v18 >= 0x101)
                                                {
                                                  JSC::Heap::reportExtraMemoryAllocatedSlowCase(v16 + 192, 0, v704, v18, a5, a6, a7, a8);
                                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                                }
                                                goto LABEL_2209;
                                              }
                                              v704 = *(_QWORD *)v1569;
                                            }
LABEL_2209:
                                            if (*(_DWORD *)v867 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v867, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                              WTF::fastFree(v959, v960, v961, v962, v963, v964, v965, v966);
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            }
                                            else
                                            {
                                              *(_DWORD *)v867 -= 2;
                                            }
                                            goto LABEL_1775;
                                          }
                                          v860 = -1640531527;
                                          v1591 = *(integer_t **)(a1 + 32);
                                          v1592 = v18;
                                          v939 = 0;
                                          do
                                          {
                                            v940 = ((v860 + (unsigned __int16)v746[v939]) << 16) ^ ((unsigned __int16)v746[v939 + 1] << 11) ^ (v860 + (unsigned __int16)v746[v939]);
                                            v860 = v940 + (v940 >> 11);
                                            v941 = v939 + 3;
                                            v939 += 2;
                                          }
                                          while (v941 < v18);
                                          if ((v18 & 1) == 0)
                                          {
LABEL_2037:
                                            v862 = (v860 ^ (8 * v860)) + ((v860 ^ (8 * v860)) >> 5);
                                            v863 = (v862 ^ (4 * v862)) + ((v862 ^ (4 * v862)) >> 15);
                                            v864 = (v863 ^ (v863 << 10)) & 0xFFFFFF;
                                            if (!v864)
                                              v864 = 0x800000;
                                            v1593 = v864;
                                            if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
                                            {
                                              __clrex();
                                            }
                                            else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
                                            {
LABEL_2042:
                                              v866 = *(_QWORD *)(v1570 + 736);
                                              if (!v866)
                                                v866 = WTF::Thread::initializeCurrentTLS(0);
                                              WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::UCharBufferTranslator>,WTF::HashTranslatorCharBuffer<char16_t> const&,WTF::HashTranslatorCharBuffer<char16_t> const&>(*(uint64_t **)(v866 + 56), (uint64_t)&v1591, v31, a5, a6, a7, a8, (uint64_t)task_info_out);
                                              v867 = 16 * **(_DWORD **)task_info_out;
                                              if (!v1587)
                                                *(_DWORD *)v867 += 2;
                                              v868 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
                                              if (v868 == 1)
                                              {
                                                if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
                                                  goto LABEL_2194;
                                              }
                                              else
                                              {
                                                __clrex();
                                              }
                                              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, a3, v31, a5, a6, a7, a8);
LABEL_2194:
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              goto LABEL_2195;
                                            }
                                            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
                                            goto LABEL_2042;
                                          }
                                        }
                                        v861 = (unsigned __int16)v746[v18 - 1];
                                        v860 = ((v860 + v861) ^ ((v860 + v861) << 11))
                                             + (((v860 + v861) ^ ((v860 + v861) << 11)) >> 17);
                                        goto LABEL_2037;
                                      }
                                      v702 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1696:
                                      if ((v702 & 0xFFFFFFFD) == 0)
                                      {
                                        v889 = JSC::LiteralParser<char16_t>::parseRecursively(a1, v16, v1571);
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        v704 = v889;
                                        goto LABEL_1785;
                                      }
LABEL_1697:
                                      switch(*v20)
                                      {
                                        case 1:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token ']'";
                                          goto LABEL_2479;
                                        case 3:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token '}'";
                                          goto LABEL_2479;
                                        case 4:
                                          v745 = *(_DWORD *)(a1 + 28);
                                          goto LABEL_1762;
                                        case 5:
                                          v1225 = *(_DWORD *)(a1 + 28);
                                          v700 = *(unsigned __int16 **)(a1 + 32);
                                          goto LABEL_2619;
                                        case 6:
                                          v25.i64[0] = *(_QWORD *)(a1 + 32);
                                          if ((v25.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                                            && (v703 = (int)*(double *)v25.i64,
                                                *(double *)v25.i64 == (double)(int)v703)
                                            && ((_DWORD)v703 || (v25.i64[0] & 0x8000000000000000) == 0))
                                          {
                                            v704 = v703 | 0xFFFE000000000000;
                                          }
                                          else
                                          {
                                            v704 = v25.i64[0] + 0x2000000000000;
                                          }
                                          v705 = *(unsigned __int16 **)(a1 + 48);
                                          v40 = *(_QWORD *)(a1 + 56);
                                          while ((unint64_t)v705 < v40)
                                          {
                                            if (*v705 > 0xFFu || *(_BYTE *)(v29 + *v705) != 19)
                                              break;
                                            *j = ++v705;
                                          }
                                          if (v705 == (unsigned __int16 *)v40)
                                            goto LABEL_2338;
                                          *v20 = 18;
                                          v31 = *v705;
                                          if (v31 > 0xFF)
                                          {
LABEL_2378:
                                            WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                                            v1027 = *(WTF::StringImpl **)task_info_out;
                                            if (!*(_QWORD *)task_info_out)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x198B3AEFCLL);
                                            }
                                            **(_QWORD **)task_info_out = 0x1600000002;
                                            *(_OWORD *)((char *)v1027 + 20) = xmmword_199158B20;
                                            *((_QWORD *)v1027 + 1) = (char *)v1027 + 20;
                                            *((_DWORD *)v1027 + 4) = 0;
                                            v25.i64[1] = 0x6B006F00740020;
                                            *(_OWORD *)((char *)v1027 + 36) = xmmword_199158B30;
                                            v25.i64[0] = 0x270020006E0065;
                                            *(_QWORD *)((char *)v1027 + 52) = 0x270020006E0065;
                                            *((_WORD *)v1027 + 30) = *v705;
                                            *((_WORD *)v1027 + 31) = 39;
                                            v1025 = *v1568;
                                            *v1568 = v1027;
                                            if (!v1025)
                                              goto LABEL_2385;
                                            v1026 = *(_DWORD *)v1025 - 2;
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (*(_DWORD *)v1025 != 2)
                                              goto LABEL_2377;
                                            goto LABEL_2381;
                                          }
                                          break;
                                        case 7:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token ':'";
                                          goto LABEL_2479;
                                        case 8:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token '('";
                                          goto LABEL_2479;
                                        case 9:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token ')'";
                                          goto LABEL_2479;
                                        case 10:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token ','";
                                          goto LABEL_2479;
                                        case 11:
                                          v806 = *(unsigned __int16 **)(a1 + 48);
                                          v699 = *(_QWORD *)(a1 + 56);
                                          goto LABEL_1917;
                                        case 12:
                                          v801 = *(unsigned __int16 **)(a1 + 48);
                                          v699 = *(_QWORD *)(a1 + 56);
                                          goto LABEL_1885;
                                        case 13:
                                          v31 = *(_QWORD *)(a1 + 48);
                                          v699 = *(_QWORD *)(a1 + 56);
                                          goto LABEL_2536;
                                        case 14:
                                          goto LABEL_2324;
                                        case 15:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token '.'";
                                          goto LABEL_2479;
                                        case 16:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token '='";
                                          goto LABEL_2479;
                                        case 17:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x1400000002;
                                          v1129 = "Unexpected token ';'";
                                          goto LABEL_2479;
                                        default:
                                          v1127 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1128 = v1127;
                                          v25.i64[0] = 0x2000000002;
                                          v1129 = "Could not parse value expression";
LABEL_2479:
                                          *(_QWORD *)v1127 = v25.i64[0];
                                          *(_QWORD *)(v1127 + 8) = v1129;
                                          *(_DWORD *)(v1127 + 16) = 4;
                                          v1130 = *(WTF::StringImpl **)v1579;
                                          *(_QWORD *)v1579 = v1128;
                                          if (!v1130)
                                            goto LABEL_2627;
                                          v1131 = *(_DWORD *)v1130 - 2;
                                          if (*(_DWORD *)v1130 == 2)
                                            goto LABEL_2626;
                                          v1580 = 0;
                                          LOBYTE(v18) = 0;
                                          *(_DWORD *)v1130 = v1131;
                                          goto LABEL_2482;
                                      }
                                      v707 = *(_BYTE *)(v29 + v31);
                                      switch(v707)
                                      {
                                        case 4u:
                                          v708 = *(unsigned __int8 *)(a1 + 40);
                                          if ((_DWORD)v31 != 39)
                                          {
                                            a3 = (unint64_t)(v705 + 1);
                                            *j = v705 + 1;
                                            if (!v708)
                                            {
                                              v709 = v40 - a3;
                                              if ((uint64_t)(v40 - a3) <= -2)
                                                goto LABEL_1656;
                                              v710 = (int16x8_t *)((char *)v705 + (v709 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                              if ((unint64_t)v709 > 0xE)
                                              {
                                                v711 = v705 + 1;
                                                if (v709 >= 15)
                                                {
                                                  v712 = v705 + 8;
                                                  while (1)
                                                  {
                                                    v713 = *(int16x8_t *)(v712 - 7);
                                                    v714.i64[0] = 0x22002200220022;
                                                    v714.i64[1] = 0x22002200220022;
                                                    v715 = (int8x16_t)vceqq_s16(v713, v714);
                                                    v716.i64[0] = 0x5C005C005C005CLL;
                                                    v716.i64[1] = 0x5C005C005C005CLL;
                                                    v717.i64[0] = 0x20002000200020;
                                                    v717.i64[1] = 0x20002000200020;
                                                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v713, v716), (int8x16_t)vcgtq_u16(v717, (uint16x8_t)v713)), v715);
                                                    v715.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                    if (v715.i32[0])
                                                      goto LABEL_1977;
                                                    v712 += 8;
                                                    if (v712 >= (unsigned __int16 *)v710)
                                                    {
LABEL_2956:
                                                      v711 = v712 - 7;
                                                      goto LABEL_2957;
                                                    }
                                                  }
                                                }
                                                goto LABEL_2957;
                                              }
                                              if (v40 == a3)
                                                goto LABEL_3261;
                                              v1446 = 2 * (v709 >> 1);
                                              v1427 = (int16x8_t *)(v705 + 1);
                                              while (1)
                                              {
                                                v1447 = v1427->u16[0];
                                                if (v1447 <= 0xFF
                                                  && !JSC::safeStringLatin1CharactersInStrictJSON[v1447])
                                                {
                                                  break;
                                                }
                                                v1427 = (int16x8_t *)((char *)v1427 + 2);
                                                v1446 -= 2;
                                                if (!v1446)
                                                  goto LABEL_3261;
                                              }
LABEL_3260:
                                              v710 = v1427;
                                              goto LABEL_3261;
                                            }
                                            goto LABEL_3050;
                                          }
                                          if (*(_BYTE *)(a1 + 40))
                                          {
                                            a3 = (unint64_t)(v705 + 1);
                                            *j = v705 + 1;
LABEL_3050:
                                            v710 = (int16x8_t *)a3;
                                            if (a3 < v40)
                                            {
                                              while (1)
                                              {
                                                v1429 = v710->u16[0];
                                                if (v1429 < 0x20)
                                                {
                                                  if (v1429 != 9)
                                                    goto LABEL_3275;
                                                }
                                                else if (v1429 == (_DWORD)v31 || v1429 > 0xFF || v1429 == 92)
                                                {
                                                  goto LABEL_3275;
                                                }
                                                v710 = (int16x8_t *)((char *)v710 + 2);
                                                *j = v710;
                                                if ((unint64_t)v710 >= v40)
                                                  goto LABEL_3275;
                                              }
                                            }
                                            goto LABEL_3274;
                                          }
                                          v1311 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1312 = v1311;
                                          v25.i64[0] = 0x2900000002;
                                          v1313 = "Single quotes (') are not allowed in JSON";
                                          goto LABEL_3082;
                                        case 5u:
                                          if ((_DWORD)v31 == 102)
                                          {
                                            if ((uint64_t)(v40 - (_QWORD)v705) >= 9
                                              && *(_DWORD *)(v705 + 1) == 7077985
                                              && *(_DWORD *)(v705 + 3) == 6619251)
                                            {
LABEL_2137:
                                              *j = v705 + 5;
                                              *v20 = 12;
                                              goto LABEL_1785;
                                            }
                                          }
                                          else if ((_DWORD)v31 == 116)
                                          {
                                            if ((uint64_t)(v40 - (_QWORD)v705) >= 7
                                              && *(_DWORD *)(v705 + 1) == 7667826
                                              && v705[3] == 101)
                                            {
LABEL_2248:
                                              *j = v705 + 4;
                                              *v20 = 11;
                                              goto LABEL_1785;
                                            }
                                          }
                                          else if ((_DWORD)v31 == 110
                                                 && (uint64_t)(v40 - (_QWORD)v705) >= 7
                                                 && *(_DWORD *)(v705 + 1) == 7078005
                                                 && v705[3] == 108)
                                          {
LABEL_2887:
                                            *j = v705 + 4;
                                            *v20 = 13;
                                            goto LABEL_1785;
                                          }
                                          *(_QWORD *)(a1 + 32) = v705;
                                          LODWORD(v1354) = (_DWORD)v705;
                                          if ((unint64_t)v705 < v40)
                                          {
                                            v1354 = v705;
                                            do
                                            {
                                              v1358 = *v1354;
                                              v1360 = (v1358 | 0x20u) - 97 >= 0x1A
                                                   && (v1358 - 48) >= 0xA
                                                   && (v1358 - 8204) >= 2;
                                              if (v1360 && v1358 != 95 && v1358 != 36)
                                                break;
                                              *j = ++v1354;
                                            }
                                            while ((unint64_t)v1354 < v40);
                                          }
LABEL_2901:
                                          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1354 - (_DWORD)v705) >> 1);
                                          *(_BYTE *)(a1 + 24) = 5;
                                          goto LABEL_2902;
                                        case 6u:
                                          v911 = 0;
                                          if ((unint64_t)v705 < v40 && (_DWORD)v31 == 45)
                                          {
                                            *j = v705 + 1;
                                            v911 = 1;
                                          }
                                          v912 = &v705[v911];
                                          if ((unint64_t)v912 >= v40)
                                            goto LABEL_2778;
                                          v913 = *v912;
                                          if (v913 == 48)
                                          {
                                            v916 = v911 + 1;
                                          }
                                          else
                                          {
                                            if ((v913 - 49) > 8)
                                            {
LABEL_2778:
                                              v1311 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1312 = v1311;
                                              v1313 = "Invalid number";
                                              *(_QWORD *)v1311 = v12;
                                              goto LABEL_2779;
                                            }
                                            v914 = v911 + 1;
                                            v915 = 2 * v911 + 2;
                                            do
                                            {
                                              v916 = v914;
                                              if ((unint64_t)v705 + v915 >= v40)
                                                break;
                                              ++v914;
                                              v915 += 2;
                                            }
                                            while (v705[v916] - 48 < 0xA);
                                          }
                                          v907 = &v705[v916];
                                          *j = v907;
                                          if ((unint64_t)v907 >= v40)
                                            goto LABEL_3066;
                                          v917 = *v907;
                                          if (v917 == 101 || v917 == 69)
                                            goto LABEL_3066;
                                          if (v917 == 46)
                                          {
                                            v1430 = v907 + 1;
                                            *j = v1430;
                                            if ((unint64_t)v1430 >= v40 || *v1430 - 48 > 9)
                                            {
                                              v1311 = WTF::fastCompactMalloc((WTF *)0x20);
                                              v1312 = v1311;
                                              v25.i64[0] = 0x2200000002;
                                              v1313 = "Invalid digits after decimal point";
LABEL_3082:
                                              *(_QWORD *)v1311 = v25.i64[0];
LABEL_2779:
                                              *(_QWORD *)(v1311 + 8) = v1313;
                                              *(_DWORD *)(v1311 + 16) = 4;
                                              v1310 = *v1568;
                                              *v1568 = (WTF::StringImpl *)v1312;
                                              if (v1310)
                                              {
                                                if (*(_DWORD *)v1310 == 2)
                                                {
LABEL_2913:
                                                  WTF::StringImpl::~StringImpl(v1310, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                                  WTF::fastFree(v1378, v1379, v1380, v1381, v1382, v1383, v1384, v1385);
                                                  goto LABEL_2902;
                                                }
                                                *(_DWORD *)v1310 -= 2;
                                              }
LABEL_2902:
                                              v16 = (unint64_t)v1582;
                                              goto LABEL_2385;
                                            }
                                            v1431 = (unint64_t)&v705[v916 + 2];
                                            do
                                            {
                                              v907 = (unsigned __int16 *)v1431;
                                              if (v1431 >= v40)
                                                break;
                                              v1431 += 2;
                                            }
                                            while (*v907 - 48 < 0xA);
                                            *j = v907;
                                          }
                                          else if (v916 <= 9)
                                          {
                                            *v20 = 6;
                                            if ((_DWORD)v31 == 45)
                                            {
                                              if (v916 < 2)
                                                goto LABEL_3085;
                                              ++v705;
                                              v16 = (unint64_t)v1582;
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            }
                                            v909 = 0;
                                            do
                                            {
                                              v918 = *v705++;
                                              v909 = v918 + 10 * v909 - 48;
                                            }
                                            while (v705 < v907);
                                            goto LABEL_2155;
                                          }
LABEL_3066:
                                          if ((unint64_t)v907 >= v40 || (*v907 | 0x20) != 0x65)
                                            goto LABEL_3078;
                                          v1432 = v907 + 1;
                                          *j = v907 + 1;
                                          if ((unint64_t)(v907 + 1) < v40)
                                          {
                                            v1433 = *v1432;
                                            if (v1433 == 45 || v1433 == 43)
                                            {
                                              v1432 = v907 + 2;
                                              *j = v907 + 2;
                                            }
                                          }
                                          if ((unint64_t)v1432 < v40 && *v1432 - 48 <= 9)
                                          {
                                            v1434 = v1432 + 1;
                                            do
                                            {
                                              v907 = v1434;
                                              if ((unint64_t)v1434 >= v40)
                                                break;
                                              ++v1434;
                                            }
                                            while (*v907 - 48 < 0xA);
                                            goto LABEL_3077;
                                          }
                                          v1311 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1312 = v1311;
                                          v25.i64[0] = 0x5D00000002;
                                          v1313 = "Exponent symbols should be followed by an optional '+' or '-' and then"
                                                  " by at least one number";
                                          goto LABEL_3082;
                                        case 0x12u:
                                        case 0x13u:
                                          goto LABEL_2378;
                                        default:
LABEL_1784:
                                          *v20 = v707;
                                          *j = v705 + 1;
                                          goto LABEL_1785;
                                      }
                                    }
LABEL_2904:
                                    if (v737 < (unsigned __int16 *)v736)
                                    {
                                      v744 = (unsigned __int16 *)&v736[-1];
                                      v1361 = v736[-1];
                                      v1362.i64[0] = 0x22002200220022;
                                      v1362.i64[1] = 0x22002200220022;
                                      v1363 = (int8x16_t)vceqq_s16(v1361, v1362);
                                      v1364.i64[0] = 0x5C005C005C005CLL;
                                      v1364.i64[1] = 0x5C005C005C005CLL;
                                      v1365.i64[0] = 0x20002000200020;
                                      v1365.i64[1] = 0x20002000200020;
                                      v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1361, v1364), (int8x16_t)vcgtq_u16(v1365, (uint16x8_t)v1361)), v1363);
                                      v1363.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      if (!v1363.i32[0])
                                        goto LABEL_1758;
                                      goto LABEL_1757;
                                    }
                                  }
LABEL_3154:
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  goto LABEL_1758;
                                }
LABEL_2730:
                                v736 = (int16x8_t *)a3;
                                if (a3 < v699)
                                {
                                  while (1)
                                  {
                                    v1296 = v736->u16[0];
                                    if (v1296 < 0x20)
                                    {
                                      if (v1296 != 9)
                                        goto LABEL_3245;
                                    }
                                    else if (v1296 == (_DWORD)v31 || v1296 > 0xFF || v1296 == 92)
                                    {
                                      goto LABEL_3245;
                                    }
                                    v736 = (int16x8_t *)((char *)v736 + 2);
                                    *j = v736;
                                    if ((unint64_t)v736 >= v699)
                                      goto LABEL_3245;
                                  }
                                }
                                v736 = (int16x8_t *)a3;
LABEL_3245:
                                v16 = (unint64_t)v1582;
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                goto LABEL_1759;
                              }
                              if (*(_BYTE *)(a1 + 40))
                              {
                                a3 = (unint64_t)(v700 + 1);
                                *j = v700 + 1;
                                goto LABEL_2730;
                              }
                              v1302 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1303 = v1302;
                              v25.i64[0] = 0x2900000002;
                              v1304 = "Single quotes (') are not allowed in JSON";
                              goto LABEL_2763;
                            case 5:
                              if ((_DWORD)v31 != 102)
                              {
                                if ((_DWORD)v31 != 116)
                                {
                                  if ((_DWORD)v31 != 110
                                    || (uint64_t)(v699 - (_QWORD)v700) < 7
                                    || *(_DWORD *)(v700 + 1) != 7078005
                                    || v700[3] != 108)
                                  {
LABEL_2605:
                                    *(_QWORD *)(a1 + 32) = v700;
                                    LODWORD(v1221) = (_DWORD)v700;
                                    if ((unint64_t)v700 < v699)
                                    {
                                      v1221 = v700;
                                      do
                                      {
                                        v1222 = *v1221;
                                        v1224 = (v1222 | 0x20u) - 97 >= 0x1A
                                             && (v1222 - 48) >= 0xA
                                             && (v1222 - 8204) >= 2;
                                        if (v1224 && v1222 != 95 && v1222 != 36)
                                          break;
                                        *j = ++v1221;
                                      }
                                      while ((unint64_t)v1221 < v699);
                                    }
                                    v1225 = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1221
                                                                                              - (_DWORD)v700) >> 1);
                                    *(_DWORD *)(a1 + 28) = v1225;
                                    *(_BYTE *)(a1 + 24) = 5;
LABEL_2619:
                                    if ((v1225 & 0x7FFFFFFF) >= 0xC8)
                                      v1226 = 200;
                                    else
                                      v1226 = v1225 & 0x7FFFFFFF;
                                    JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(task_info_out, v1225, v700, v1226);
                                    if (!*(_QWORD *)task_info_out)
                                    {
                                      v1241 = *(_DWORD *)(a1 + 28);
                                      if ((v1241 & 0x7FFFFFFFu) < 0xB)
                                        goto LABEL_2633;
                                      JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(&v1591, v1241, *(_WORD **)(a1 + 32), 0xAu);
                                      v1243 = (WTF::StringImpl *)v1591;
                                      v1244 = *(WTF::StringImpl **)task_info_out;
                                      *(_QWORD *)task_info_out = v1591;
                                      if (v1244)
                                      {
                                        if (*(_DWORD *)v1244 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1244, v1242, v1227, v1228, v1229, v1230, v1231, v1232);
                                          WTF::fastFree(v1482, v1483, v1484, v1485, v1486, v1487, v1488, v1489);
                                          v1243 = *(WTF::StringImpl **)task_info_out;
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1244 -= 2;
                                        }
                                      }
                                      if (!v1243)
                                      {
LABEL_2633:
                                        v1246 = WTF::fastCompactMalloc((WTF *)0x20);
                                        *(_QWORD *)v1246 = 0x1500000002;
                                        *(_QWORD *)(v1246 + 8) = "Unexpected identifier";
                                        *(_DWORD *)(v1246 + 16) = 4;
                                        v1247 = *(WTF::StringImpl **)task_info_out;
                                        *(_QWORD *)task_info_out = v1246;
                                        if (v1247)
                                        {
                                          if (*(_DWORD *)v1247 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1247, v1245, v1227, v1228, v1229, v1230, v1231, v1232);
                                            WTF::fastFree(v1460, v1461, v1462, v1463, v1464, v1465, v1466, v1467);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1247 -= 2;
                                          }
                                        }
                                      }
                                    }
                                    WTF::String::operator=((unint64_t *)v1579, (WTF::AtomStringImpl *)task_info_out, v1227, v1228, v1229, v1230, v1231, v1232);
                                    v1130 = *(WTF::StringImpl **)task_info_out;
                                    *(_QWORD *)task_info_out = 0;
                                    if (v1130)
                                    {
                                      if (*(_DWORD *)v1130 == 2)
                                      {
LABEL_2626:
                                        WTF::StringImpl::~StringImpl(v1130, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                        WTF::fastFree(v1233, v1234, v1235, v1236, v1237, v1238, v1239, v1240);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1130 -= 2;
                                      }
                                    }
LABEL_2627:
                                    v1580 = 0;
                                    LOBYTE(v18) = 0;
                                    goto LABEL_2482;
                                  }
                                  v31 = (unint64_t)(v700 + 4);
                                  *j = v700 + 4;
                                  *v20 = 13;
LABEL_2536:
                                  while (v31 < v699)
                                  {
                                    if (*(unsigned __int16 *)v31 > 0xFFu
                                      || JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] != 19)
                                    {
                                      break;
                                    }
                                    v31 += 2;
                                    *j = v31;
                                  }
                                  if (v31 == v699)
                                  {
                                    v1445 = 14;
                                    goto LABEL_3111;
                                  }
                                  *v20 = 18;
                                  v40 = *(unsigned __int16 *)v31;
                                  if (v40 > 0xFF)
                                    goto LABEL_3306;
                                  v1175 = JSC::tokenTypesOfLatin1Characters[v40];
                                  if (v1175 <= 4)
                                  {
                                    if (v1175 == 4)
                                    {
                                      v1176 = *(unsigned __int8 *)(a1 + 40);
                                      if ((_DWORD)v40 != 39)
                                      {
                                        a3 = v31 + 2;
                                        *j = v31 + 2;
                                        if (!v1176)
                                        {
                                          v1177 = v699 - a3;
                                          if ((uint64_t)(v699 - a3) <= -2)
                                            goto LABEL_1656;
                                          v1178 = (int16x8_t *)((v1177 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
                                          if ((unint64_t)v1177 <= 0xE)
                                          {
                                            if (v699 != a3)
                                            {
                                              v1564 = 2 * (v1177 >> 1);
                                              v1565 = (int16x8_t *)(v31 + 2);
                                              while (1)
                                              {
                                                v1566 = v1565->u16[0];
                                                if (v1566 <= 0xFF
                                                  && !JSC::safeStringLatin1CharactersInStrictJSON[v1566])
                                                {
                                                  break;
                                                }
                                                v1565 = (int16x8_t *)((char *)v1565 + 2);
                                                v1564 -= 2;
                                                if (!v1564)
                                                  goto LABEL_2784;
                                              }
                                              v1178 = v1565;
                                            }
                                          }
                                          else
                                          {
                                            v1179 = v31 + 2;
                                            if (v1177 < 15)
                                            {
LABEL_2554:
                                              if (v1179 < (unint64_t)v1178)
                                              {
                                                v1186 = (unsigned __int16 *)&v1178[-1];
                                                v1187 = v1178[-1];
                                                v1188.i64[0] = 0x22002200220022;
                                                v1188.i64[1] = 0x22002200220022;
                                                v1189 = (int8x16_t)vceqq_s16(v1187, v1188);
                                                v1190.i64[0] = 0x5C005C005C005CLL;
                                                v1190.i64[1] = 0x5C005C005C005CLL;
                                                v1191.i64[0] = 0x20002000200020;
                                                v1191.i64[1] = 0x20002000200020;
                                                v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1187, v1190), (int8x16_t)vcgtq_u16(v1191, (uint16x8_t)v1187)), v1189);
                                                v1189.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                if (v1189.i32[0])
                                                  goto LABEL_2783;
                                              }
                                            }
                                            else
                                            {
                                              v1180 = v31 + 16;
                                              while (1)
                                              {
                                                v1181 = *(int16x8_t *)(v1180 - 14);
                                                v1182.i64[0] = 0x22002200220022;
                                                v1182.i64[1] = 0x22002200220022;
                                                v1183 = (int8x16_t)vceqq_s16(v1181, v1182);
                                                v1184.i64[0] = 0x5C005C005C005CLL;
                                                v1184.i64[1] = 0x5C005C005C005CLL;
                                                v1185.i64[0] = 0x20002000200020;
                                                v1185.i64[1] = 0x20002000200020;
                                                v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1181, v1184), (int8x16_t)vcgtq_u16(v1185, (uint16x8_t)v1181)), v1183);
                                                v1183.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                if (v1183.i32[0])
                                                  break;
                                                v1180 += 16;
                                                if (v1180 >= (unint64_t)v1178)
                                                {
                                                  v1179 = v1180 - 14;
                                                  goto LABEL_2554;
                                                }
                                              }
                                              v1186 = (unsigned __int16 *)(v1180 - 14);
LABEL_2783:
                                              v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                              v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                              v1178 = (int16x8_t *)&v1186[v25.u8[0]];
                                            }
                                          }
LABEL_2784:
                                          *j = v1178;
LABEL_2785:
                                          if ((unint64_t)v1178 < v699 && v1178->u16[0] == (_DWORD)v40)
                                          {
                                            *(_BYTE *)(a1 + 25) &= ~1u;
                                            *(_QWORD *)(a1 + 32) = a3;
                                            *(_QWORD *)(a1 + 48) = (char *)v1178->i64 + 2;
                                            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1178 - a3) >> 1);
                                            v1314 = 4;
                                            goto LABEL_2788;
                                          }
                                          JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
LABEL_2644:
                                          v704 = 2;
                                          goto LABEL_2645;
                                        }
LABEL_3382:
                                        v1178 = (int16x8_t *)a3;
                                        if (a3 < v699)
                                        {
                                          while (1)
                                          {
                                            v1559 = v1178->u16[0];
                                            if (v1559 < 0x20)
                                            {
                                              if (v1559 != 9)
                                                goto LABEL_2785;
                                            }
                                            else if (v1559 == (_DWORD)v40 || v1559 > 0xFF || v1559 == 92)
                                            {
                                              goto LABEL_2785;
                                            }
                                            v1178 = (int16x8_t *)((char *)v1178 + 2);
                                            *j = v1178;
                                            if ((unint64_t)v1178 >= v699)
                                              goto LABEL_2785;
                                          }
                                        }
                                        v1178 = (int16x8_t *)a3;
                                        goto LABEL_2785;
                                      }
                                      if (*(_BYTE *)(a1 + 40))
                                      {
                                        a3 = v31 + 2;
                                        *j = v31 + 2;
                                        goto LABEL_3382;
                                      }
                                      v1553 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1527 = (WTF::StringImpl *)v1553;
                                      v25.i64[0] = 0x2900000002;
                                      v1554 = "Single quotes (') are not allowed in JSON";
LABEL_3413:
                                      *(_QWORD *)v1553 = v25.i64[0];
LABEL_3360:
                                      *(_QWORD *)(v1553 + 8) = v1554;
                                      *(_DWORD *)(v1553 + 16) = 4;
LABEL_3307:
                                      v1528 = *v1568;
                                      *v1568 = v1527;
                                      if (v1528)
                                      {
                                        if (*(_DWORD *)v1528 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v1528, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                          WTF::fastFree(v1529, v1530, v1531, v1532, v1533, v1534, v1535, v1536);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v1528 -= 2;
                                        }
                                      }
                                      goto LABEL_2644;
                                    }
LABEL_2643:
                                    *v20 = v1175;
                                    *j = v31 + 2;
                                    goto LABEL_2644;
                                  }
                                  if (v1175 != 5)
                                  {
                                    if (v1175 != 6)
                                    {
                                      if (v1175 - 18 >= 2)
                                        goto LABEL_2643;
LABEL_3306:
                                      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
                                      v1527 = *(WTF::StringImpl **)task_info_out;
                                      if (!*(_QWORD *)task_info_out)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x198B3AF14);
                                      }
                                      goto LABEL_3307;
                                    }
                                    v1435 = 0;
                                    if (v31 < v699 && (_DWORD)v40 == 45)
                                    {
                                      *j = v31 + 2;
                                      v1435 = 1;
                                    }
                                    v1436 = (unsigned __int16 *)(v31 + 2 * v1435);
                                    if ((unint64_t)v1436 >= v699)
                                      goto LABEL_3359;
                                    v1437 = *v1436;
                                    if (v1437 == 48)
                                    {
                                      v1440 = v1435 + 1;
                                      goto LABEL_3095;
                                    }
                                    if ((v1437 - 49) > 8)
                                    {
LABEL_3359:
                                      v1553 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1527 = (WTF::StringImpl *)v1553;
                                      v1554 = "Invalid number";
                                      *(_QWORD *)v1553 = v12;
                                      goto LABEL_3360;
                                    }
                                    v1438 = v1435 + 1;
                                    v1439 = 2 * v1435 + 2;
                                    do
                                    {
                                      v1440 = v1438;
                                      if (v31 + v1439 >= v699)
                                        break;
                                      ++v1438;
                                      v1439 += 2;
                                    }
                                    while (*(unsigned __int16 *)(v31 + 2 * v1440) - 48 < 0xA);
LABEL_3095:
                                    v1441 = (unsigned __int16 *)(v31 + 2 * v1440);
                                    *j = v1441;
                                    if ((unint64_t)v1441 < v699)
                                    {
                                      v1442 = *v1441;
                                      if (v1442 != 101 && v1442 != 69)
                                      {
                                        if (v1442 == 46)
                                        {
                                          *j = v1441 + 1;
                                          if ((unint64_t)(v1441 + 1) >= v699 || v1441[1] - 48 > 9)
                                          {
                                            v1553 = WTF::fastCompactMalloc((WTF *)0x20);
                                            v1527 = (WTF::StringImpl *)v1553;
                                            v25.i64[0] = 0x2200000002;
                                            v1554 = "Invalid digits after decimal point";
                                            goto LABEL_3413;
                                          }
                                          v1560 = v31 + 2 * v1440 + 4;
                                          do
                                          {
                                            v1441 = (unsigned __int16 *)v1560;
                                            if (v1560 >= v699)
                                              break;
                                            v1560 += 2;
                                          }
                                          while (*v1441 - 48 < 0xA);
                                          *j = v1441;
                                        }
                                        else if (v1440 <= 9)
                                        {
                                          *v20 = 6;
                                          if ((_DWORD)v40 == 45)
                                          {
                                            if (v1440 >= 2)
                                            {
                                              v31 += 2;
                                              goto LABEL_3101;
                                            }
                                          }
                                          else
                                          {
LABEL_3101:
                                            v1443 = 0;
                                            do
                                            {
                                              v1444 = *(unsigned __int16 *)v31;
                                              v31 += 2;
                                              v1443 = v1444 + 10 * v1443 - 48;
                                            }
                                            while (v31 < (unint64_t)v1441);
                                            if ((_DWORD)v40 != 45)
                                            {
                                              *(double *)v25.i64 = (double)v1443;
                                              goto LABEL_3105;
                                            }
                                            if (v1443)
                                            {
                                              *(double *)v25.i64 = (double)-v1443;
                                              goto LABEL_3105;
                                            }
                                          }
                                          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                          goto LABEL_2644;
                                        }
                                      }
                                    }
                                    if ((unint64_t)v1441 < v699 && (*v1441 | 0x20) == 0x65)
                                    {
                                      v1561 = v1441 + 1;
                                      *j = v1441 + 1;
                                      if ((unint64_t)(v1441 + 1) < v699)
                                      {
                                        v1562 = *v1561;
                                        if (v1562 == 45 || v1562 == 43)
                                        {
                                          v1561 = v1441 + 2;
                                          *j = v1441 + 2;
                                        }
                                      }
                                      if ((unint64_t)v1561 >= v699 || *v1561 - 48 > 9)
                                      {
                                        v1553 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1527 = (WTF::StringImpl *)v1553;
                                        v25.i64[0] = 0x5D00000002;
                                        v1554 = "Exponent symbols should be followed by an optional '+' or '-' and then b"
                                                "y at least one number";
                                        goto LABEL_3413;
                                      }
                                      v1563 = v1561 + 1;
                                      do
                                      {
                                        v1441 = v1563;
                                        if ((unint64_t)v1563 >= v699)
                                          break;
                                        ++v1563;
                                      }
                                      while (*v1441 - 48 < 0xA);
                                      *j = v1441;
                                    }
                                    *v20 = 6;
                                    LODWORD(v40) = (_DWORD)v1441 - v31;
                                    if ((uint64_t)((uint64_t)v1441 - v31) <= -2)
                                    {
LABEL_1656:
                                      __break(1u);
LABEL_1657:
                                      *(_DWORD *)v10 = v40;
                                      goto LABEL_1658;
                                    }
                                    *(_QWORD *)task_info_out = 0;
                                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v1441, (double *)task_info_out, 0x2E00000005);
                                    v25.i64[0] = *(_QWORD *)task_info_out;
LABEL_3105:
                                    *(_QWORD *)(a1 + 32) = v25.i64[0];
                                    goto LABEL_2644;
                                  }
                                  if ((_DWORD)v40 == 102)
                                  {
                                    if ((uint64_t)(v699 - v31) >= 9
                                      && *(_DWORD *)(v31 + 2) == 7077985
                                      && *(_DWORD *)(v31 + 6) == 6619251)
                                    {
                                      *j = v31 + 10;
                                      v1445 = 12;
LABEL_3111:
                                      *v20 = v1445;
                                      goto LABEL_2644;
                                    }
                                  }
                                  else if ((_DWORD)v40 == 116)
                                  {
                                    if ((uint64_t)(v699 - v31) >= 7
                                      && *(_DWORD *)(v31 + 2) == 7667826
                                      && *(_WORD *)(v31 + 6) == 101)
                                    {
                                      *j = v31 + 8;
                                      v1445 = 11;
                                      goto LABEL_3111;
                                    }
                                  }
                                  else if ((_DWORD)v40 == 110
                                         && (uint64_t)(v699 - v31) >= 7
                                         && *(_DWORD *)(v31 + 2) == 7078005
                                         && *(_WORD *)(v31 + 6) == 108)
                                  {
                                    *j = v31 + 8;
                                    v1445 = 13;
                                    goto LABEL_3111;
                                  }
                                  *(_QWORD *)(a1 + 32) = v31;
                                  LODWORD(v1555) = v31;
                                  if (v31 < v699)
                                  {
                                    v1555 = (unsigned __int16 *)v31;
                                    do
                                    {
                                      v1556 = *v1555;
                                      v1558 = (v1556 | 0x20u) - 97 >= 0x1A
                                           && (v1556 - 48) >= 0xA
                                           && (v1556 - 8204) >= 2;
                                      if (v1558 && v1556 != 95 && v1556 != 36)
                                        break;
                                      *j = ++v1555;
                                    }
                                    while ((unint64_t)v1555 < v699);
                                  }
                                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1555 - v31) >> 1);
                                  v1314 = 5;
LABEL_2788:
                                  *(_BYTE *)(a1 + 24) = v1314;
                                  goto LABEL_2644;
                                }
                                if ((uint64_t)(v699 - (_QWORD)v700) < 7
                                  || *(_DWORD *)(v700 + 1) != 7667826
                                  || v700[3] != 101)
                                {
                                  goto LABEL_2605;
                                }
                                v806 = v700 + 4;
                                *j = v806;
                                *v20 = 11;
LABEL_1917:
                                while ((unint64_t)v806 < v699)
                                {
                                  if (*v806 > 0xFFu || *(_BYTE *)(v29 + *v806) != 19)
                                    break;
                                  *j = ++v806;
                                }
                                if (v806 == (unsigned __int16 *)v699)
                                {
                                  v982 = 14;
LABEL_2224:
                                  *v20 = v982;
                                  goto LABEL_1926;
                                }
                                *v20 = 18;
                                v31 = *v806;
                                if (v31 <= 0xFF)
                                {
                                  switch(*(_BYTE *)(v29 + v31))
                                  {
                                    case 4:
                                      LODWORD(v40) = *(unsigned __int8 *)(a1 + 40);
                                      if ((_DWORD)v31 == 39)
                                      {
                                        if (!*(_BYTE *)(a1 + 40))
                                        {
                                          v1386 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1387 = v1386;
                                          v25.i64[0] = 0x2900000002;
                                          v1388 = "Single quotes (') are not allowed in JSON";
                                          goto LABEL_3239;
                                        }
                                        a3 = (unint64_t)(v806 + 1);
                                        *j = v806 + 1;
                                      }
                                      else
                                      {
                                        a3 = (unint64_t)(v806 + 1);
                                        *j = v806 + 1;
                                        if (!(_DWORD)v40)
                                        {
                                          v879 = v699 - a3;
                                          if ((uint64_t)(v699 - a3) <= -2)
                                            goto LABEL_1656;
                                          v880 = (int16x8_t *)((char *)v806 + (v879 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                          if ((unint64_t)v879 <= 0xE)
                                          {
                                            if (v699 != a3)
                                            {
                                              v1496 = 2 * (v879 >> 1);
                                              v1497 = (int16x8_t *)(v806 + 1);
                                              while (1)
                                              {
                                                v1498 = v1497->u16[0];
                                                if (v1498 <= 0xFF
                                                  && !JSC::safeStringLatin1CharactersInStrictJSON[v1498])
                                                {
                                                  break;
                                                }
                                                v1497 = (int16x8_t *)((char *)v1497 + 2);
                                                v1496 -= 2;
                                                if (!v1496)
                                                  goto LABEL_3291;
                                              }
                                              v880 = v1497;
                                            }
                                          }
                                          else
                                          {
                                            v881 = v806 + 1;
                                            if (v879 >= 15)
                                            {
                                              v882 = v806 + 8;
                                              while (1)
                                              {
                                                v883 = *(int16x8_t *)(v882 - 7);
                                                v884.i64[0] = 0x22002200220022;
                                                v884.i64[1] = 0x22002200220022;
                                                v885 = (int8x16_t)vceqq_s16(v883, v884);
                                                v886.i64[0] = 0x5C005C005C005CLL;
                                                v886.i64[1] = 0x5C005C005C005CLL;
                                                v887.i64[0] = 0x20002000200020;
                                                v887.i64[1] = 0x20002000200020;
                                                v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v883, v886), (int8x16_t)vcgtq_u16(v887, (uint16x8_t)v883)), v885);
                                                v885.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                if (v885.i32[0])
                                                  break;
                                                v882 += 8;
                                                if (v882 >= (unsigned __int16 *)v880)
                                                {
                                                  v881 = v882 - 7;
                                                  goto LABEL_3279;
                                                }
                                              }
                                              v888 = v882 - 7;
LABEL_2079:
                                              v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                              v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                              v880 = (int16x8_t *)&v888[v25.u8[0]];
LABEL_2080:
                                              *j = v880;
LABEL_2081:
                                              if ((unint64_t)v880 < v699 && v880->u16[0] == (_DWORD)v31)
                                              {
                                                *(_BYTE *)(a1 + 25) &= ~1u;
                                                *(_QWORD *)(a1 + 32) = a3;
                                                *(_QWORD *)(a1 + 48) = (char *)v880->i64 + 2;
                                                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v880 - a3) >> 1);
                                                *(_BYTE *)(a1 + 24) = 4;
LABEL_1926:
                                                v704 = 7;
                                                goto LABEL_1786;
                                              }
                                              JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                                              goto LABEL_2420;
                                            }
LABEL_3279:
                                            if (v881 < (unsigned __int16 *)v880)
                                            {
                                              v888 = (unsigned __int16 *)&v880[-1];
                                              v1521 = v880[-1];
                                              v1522.i64[0] = 0x22002200220022;
                                              v1522.i64[1] = 0x22002200220022;
                                              v1523 = (int8x16_t)vceqq_s16(v1521, v1522);
                                              v1524.i64[0] = 0x5C005C005C005CLL;
                                              v1524.i64[1] = 0x5C005C005C005CLL;
                                              v1525.i64[0] = 0x20002000200020;
                                              v1525.i64[1] = 0x20002000200020;
                                              v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1521, v1524), (int8x16_t)vcgtq_u16(v1525, (uint16x8_t)v1521)), v1523);
                                              v1523.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                              v16 = (unint64_t)v1582;
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              if (v1523.i32[0])
                                                goto LABEL_2079;
                                              goto LABEL_2080;
                                            }
                                          }
LABEL_3291:
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_2080;
                                        }
                                      }
                                      v880 = (int16x8_t *)a3;
                                      if (a3 < v699)
                                      {
                                        while (1)
                                        {
                                          v1490 = v880->u16[0];
                                          if (v1490 < 0x20)
                                          {
                                            if (v1490 != 9)
                                              goto LABEL_3296;
                                          }
                                          else if (v1490 == (_DWORD)v31 || v1490 > 0xFF || v1490 == 92)
                                          {
                                            goto LABEL_3296;
                                          }
                                          v880 = (int16x8_t *)((char *)v880 + 2);
                                          *j = v880;
                                          if ((unint64_t)v880 >= v699)
                                            goto LABEL_3296;
                                        }
                                      }
                                      v880 = (int16x8_t *)a3;
LABEL_3296:
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      goto LABEL_2081;
                                    case 5:
                                      if ((_DWORD)v31 == 102)
                                      {
                                        if ((uint64_t)(v699 - (_QWORD)v806) >= 9
                                          && *(_DWORD *)(v806 + 1) == 7077985
                                          && *(_DWORD *)(v806 + 3) == 6619251)
                                        {
                                          *j = v806 + 5;
                                          v982 = 12;
                                          goto LABEL_2224;
                                        }
                                      }
                                      else if ((_DWORD)v31 == 116)
                                      {
                                        if ((uint64_t)(v699 - (_QWORD)v806) >= 7
                                          && *(_DWORD *)(v806 + 1) == 7667826
                                          && v806[3] == 101)
                                        {
                                          *j = v806 + 4;
                                          v982 = 11;
                                          goto LABEL_2224;
                                        }
                                      }
                                      else if ((_DWORD)v31 == 110
                                             && (uint64_t)(v699 - (_QWORD)v806) >= 7
                                             && *(_DWORD *)(v806 + 1) == 7078005
                                             && v806[3] == 108)
                                      {
                                        *j = v806 + 4;
                                        v982 = 13;
                                        goto LABEL_2224;
                                      }
                                      *(_QWORD *)(a1 + 32) = v806;
                                      LODWORD(v1448) = (_DWORD)v806;
                                      if ((unint64_t)v806 < v699)
                                      {
                                        v1448 = v806;
                                        do
                                        {
                                          v1449 = *v1448;
                                          v1451 = (v1449 | 0x20u) - 97 >= 0x1A
                                               && (v1449 - 48) >= 0xA
                                               && (v1449 - 8204) >= 2;
                                          if (v1451 && v1449 != 95 && v1449 != 36)
                                            break;
                                          *j = ++v1448;
                                        }
                                        while ((unint64_t)v1448 < v699);
                                      }
                                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1448 - (_DWORD)v806) >> 1);
                                      *(_BYTE *)(a1 + 24) = 5;
                                      goto LABEL_3139;
                                    case 6:
                                      v942 = 0;
                                      if ((unint64_t)v806 < v699 && (_DWORD)v31 == 45)
                                      {
                                        *j = v806 + 1;
                                        v942 = 1;
                                      }
                                      v943 = &v806[v942];
                                      if ((unint64_t)v943 >= v699)
                                        goto LABEL_2915;
                                      v944 = *v943;
                                      if (v944 == 48)
                                      {
                                        v947 = v942 + 1;
                                      }
                                      else
                                      {
                                        if ((v944 - 49) > 8)
                                        {
LABEL_2915:
                                          v1386 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1387 = v1386;
                                          v1388 = "Invalid number";
                                          *(_QWORD *)v1386 = v12;
                                          goto LABEL_2916;
                                        }
                                        v945 = v942 + 1;
                                        v946 = 2 * v942 + 2;
                                        do
                                        {
                                          v947 = v945;
                                          if ((unint64_t)v806 + v946 >= v699)
                                            break;
                                          ++v945;
                                          v946 += 2;
                                        }
                                        while (v806[v947] - 48 < 0xA);
                                      }
                                      v948 = &v806[v947];
                                      *j = v948;
                                      if ((unint64_t)v948 >= v699)
                                        goto LABEL_3223;
                                      v949 = *v948;
                                      if (v949 == 101 || v949 == 69)
                                        goto LABEL_3223;
                                      if (v949 == 46)
                                      {
                                        v1491 = v948 + 1;
                                        *j = v1491;
                                        if ((unint64_t)v1491 >= v699 || *v1491 - 48 > 9)
                                        {
                                          v1386 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1387 = v1386;
                                          v25.i64[0] = 0x2200000002;
                                          v1388 = "Invalid digits after decimal point";
                                          goto LABEL_3239;
                                        }
                                        v1492 = (unint64_t)&v806[v947 + 2];
                                        do
                                        {
                                          v948 = (unsigned __int16 *)v1492;
                                          if (v1492 >= v699)
                                            break;
                                          v1492 += 2;
                                        }
                                        while (*v948 - 48 < 0xA);
                                        *j = v948;
LABEL_3223:
                                        if ((unint64_t)v948 < v699 && (*v948 | 0x20) == 0x65)
                                        {
                                          v1493 = v948 + 1;
                                          *j = v948 + 1;
                                          if ((unint64_t)(v948 + 1) < v699)
                                          {
                                            v1494 = *v1493;
                                            if (v1494 == 45 || v1494 == 43)
                                            {
                                              v1493 = v948 + 2;
                                              *j = v948 + 2;
                                            }
                                          }
                                          if ((unint64_t)v1493 < v699 && *v1493 - 48 <= 9)
                                          {
                                            v1495 = v1493 + 1;
                                            do
                                            {
                                              v948 = v1495;
                                              if ((unint64_t)v1495 >= v699)
                                                break;
                                              ++v1495;
                                            }
                                            while (*v948 - 48 < 0xA);
                                            *j = v948;
                                            goto LABEL_3235;
                                          }
                                          v1386 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1387 = v1386;
                                          v25.i64[0] = 0x5D00000002;
                                          v1388 = "Exponent symbols should be followed by an optional '+' or '-' and then"
                                                  " by at least one number";
LABEL_3239:
                                          *(_QWORD *)v1386 = v25.i64[0];
LABEL_2916:
                                          *(_QWORD *)(v1386 + 8) = v1388;
                                          *(_DWORD *)(v1386 + 16) = 4;
                                          v1389 = *v1568;
                                          *v1568 = (WTF::StringImpl *)v1387;
                                          if (v1389)
                                          {
                                            if (*(_DWORD *)v1389 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v1389, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                              WTF::fastFree(v1507, v1508, v1509, v1510, v1511, v1512, v1513, v1514);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v1389 -= 2;
                                            }
                                          }
LABEL_3139:
                                          v704 = 7;
                                          goto LABEL_2645;
                                        }
LABEL_3235:
                                        *v20 = 6;
                                        v40 = (char *)v948 - (char *)v806;
                                        if ((uint64_t)v40 <= -2)
                                          goto LABEL_1656;
                                        *(_QWORD *)task_info_out = 0;
                                        fast_float::from_chars_advanced<double,char16_t>(v806, (unsigned __int16 *)((char *)v806 + v40), (double *)task_info_out, 0x2E00000005);
                                        v25.i64[0] = *(_QWORD *)task_info_out;
LABEL_3237:
                                        *(_QWORD *)(a1 + 32) = v25.i64[0];
                                        goto LABEL_3139;
                                      }
                                      if (v947 > 9)
                                        goto LABEL_3223;
                                      *v20 = 6;
                                      if ((_DWORD)v31 == 45)
                                      {
                                        if (v947 < 2)
                                          goto LABEL_3267;
                                        ++v806;
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      }
                                      v950 = 0;
                                      do
                                      {
                                        v951 = *v806++;
                                        v950 = v951 + 10 * v950 - 48;
                                      }
                                      while (v806 < v948);
                                      if ((_DWORD)v31 == 45)
                                      {
                                        if (!v950)
                                        {
LABEL_3267:
                                          *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                          goto LABEL_3139;
                                        }
                                        *(double *)v25.i64 = (double)-v950;
                                        goto LABEL_3237;
                                      }
                                      *(double *)v25.i64 = (double)v950;
                                      *(double *)(a1 + 32) = (double)v950;
                                      goto LABEL_1926;
                                    case 0x12:
                                    case 0x13:
                                      break;
                                    default:
                                      *v20 = *(_BYTE *)(v29 + v31);
                                      *j = v806 + 1;
                                      goto LABEL_1926;
                                  }
                                }
                                WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                                v1049 = *(WTF::StringImpl **)task_info_out;
                                if (!*(_QWORD *)task_info_out)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198B3AF0CLL);
                                }
                                **(_QWORD **)task_info_out = 0x1600000002;
                                *(_OWORD *)((char *)v1049 + 20) = xmmword_199158B20;
                                *((_QWORD *)v1049 + 1) = (char *)v1049 + 20;
                                *((_DWORD *)v1049 + 4) = 0;
                                v25.i64[1] = 0x6B006F00740020;
                                *(_OWORD *)((char *)v1049 + 36) = xmmword_199158B30;
                                v25.i64[0] = 0x270020006E0065;
                                *(_QWORD *)((char *)v1049 + 52) = 0x270020006E0065;
                                *((_WORD *)v1049 + 30) = *v806;
                                *((_WORD *)v1049 + 31) = 39;
                                v1050 = *v1568;
                                *v1568 = v1049;
                                if (!v1050)
                                {
                                  v704 = 7;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  goto LABEL_1786;
                                }
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                if (*(_DWORD *)v1050 != 2)
                                {
                                  *(_DWORD *)v1050 -= 2;
                                  goto LABEL_1926;
                                }
                                WTF::StringImpl::~StringImpl(v1050, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                WTF::fastFree(v1101, v1102, v1103, v1104, v1105, v1106, v1107, v1108);
LABEL_2420:
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                goto LABEL_1926;
                              }
                              if ((uint64_t)(v699 - (_QWORD)v700) < 9
                                || *(_DWORD *)(v700 + 1) != 7077985
                                || *(_DWORD *)(v700 + 3) != 6619251)
                              {
                                goto LABEL_2605;
                              }
                              v801 = v700 + 5;
                              *j = v801;
                              *v20 = 12;
LABEL_1885:
                              while ((unint64_t)v801 < v699)
                              {
                                if (*v801 > 0xFFu || *(_BYTE *)(v29 + *v801) != 19)
                                  break;
                                *j = ++v801;
                              }
                              if (v801 == (unsigned __int16 *)v699)
                              {
                                v958 = 14;
LABEL_2172:
                                *v20 = v958;
                                v704 = 6;
                                goto LABEL_1786;
                              }
                              *v20 = 18;
                              v31 = *v801;
                              if (v31 <= 0xFF)
                              {
                                switch(*(_BYTE *)(v29 + v31))
                                {
                                  case 4:
                                    LODWORD(v40) = *(unsigned __int8 *)(a1 + 40);
                                    if ((_DWORD)v31 == 39)
                                    {
                                      if (!*(_BYTE *)(a1 + 40))
                                      {
                                        v1366 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1367 = v1366;
                                        v25.i64[0] = 0x2900000002;
                                        v1368 = "Single quotes (') are not allowed in JSON";
                                        goto LABEL_3192;
                                      }
                                      a3 = (unint64_t)(v801 + 1);
                                      *j = v801 + 1;
                                    }
                                    else
                                    {
                                      a3 = (unint64_t)(v801 + 1);
                                      *j = v801 + 1;
                                      if (!(_DWORD)v40)
                                      {
                                        v869 = v699 - a3;
                                        if ((uint64_t)(v699 - a3) <= -2)
                                          goto LABEL_1656;
                                        v870 = (int16x8_t *)((char *)v801 + (v869 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                        if ((unint64_t)v869 <= 0xE)
                                        {
                                          if (v699 != a3)
                                          {
                                            v1479 = 2 * (v869 >> 1);
                                            v1480 = (int16x8_t *)(v801 + 1);
                                            while (1)
                                            {
                                              v1481 = v1480->u16[0];
                                              if (v1481 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1481])
                                                break;
                                              v1480 = (int16x8_t *)((char *)v1480 + 2);
                                              v1479 -= 2;
                                              if (!v1479)
                                                goto LABEL_3289;
                                            }
                                            v870 = v1480;
                                          }
                                        }
                                        else
                                        {
                                          v871 = v801 + 1;
                                          if (v869 >= 15)
                                          {
                                            v872 = v801 + 8;
                                            while (1)
                                            {
                                              v873 = *(int16x8_t *)(v872 - 7);
                                              v874.i64[0] = 0x22002200220022;
                                              v874.i64[1] = 0x22002200220022;
                                              v875 = (int8x16_t)vceqq_s16(v873, v874);
                                              v876.i64[0] = 0x5C005C005C005CLL;
                                              v876.i64[1] = 0x5C005C005C005CLL;
                                              v877.i64[0] = 0x20002000200020;
                                              v877.i64[1] = 0x20002000200020;
                                              v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v873, v876), (int8x16_t)vcgtq_u16(v877, (uint16x8_t)v873)), v875);
                                              v875.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                              if (v875.i32[0])
                                                break;
                                              v872 += 8;
                                              if (v872 >= (unsigned __int16 *)v870)
                                              {
                                                v871 = v872 - 7;
                                                goto LABEL_3276;
                                              }
                                            }
                                            v878 = v872 - 7;
LABEL_2059:
                                            v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                            v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                            v870 = (int16x8_t *)&v878[v25.u8[0]];
LABEL_2060:
                                            *j = v870;
LABEL_2061:
                                            if ((unint64_t)v870 >= v699 || v870->u16[0] != (_DWORD)v31)
                                            {
                                              JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
LABEL_2416:
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              v704 = 6;
                                              goto LABEL_1786;
                                            }
                                            *(_BYTE *)(a1 + 25) &= ~1u;
                                            *(_QWORD *)(a1 + 32) = a3;
                                            *(_QWORD *)(a1 + 48) = (char *)v870->i64 + 2;
                                            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v870 - a3) >> 1);
                                            *(_BYTE *)(a1 + 24) = 4;
                                            v704 = 6;
                                            goto LABEL_1786;
                                          }
LABEL_3276:
                                          if (v871 < (unsigned __int16 *)v870)
                                          {
                                            v878 = (unsigned __int16 *)&v870[-1];
                                            v1516 = v870[-1];
                                            v1517.i64[0] = 0x22002200220022;
                                            v1517.i64[1] = 0x22002200220022;
                                            v1518 = (int8x16_t)vceqq_s16(v1516, v1517);
                                            v1519.i64[0] = 0x5C005C005C005CLL;
                                            v1519.i64[1] = 0x5C005C005C005CLL;
                                            v1520.i64[0] = 0x20002000200020;
                                            v1520.i64[1] = 0x20002000200020;
                                            v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1516, v1519), (int8x16_t)vcgtq_u16(v1520, (uint16x8_t)v1516)), v1518);
                                            v1518.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                            v16 = (unint64_t)v1582;
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (v1518.i32[0])
                                              goto LABEL_2059;
                                            goto LABEL_2060;
                                          }
                                        }
LABEL_3289:
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        goto LABEL_2060;
                                      }
                                    }
                                    v870 = (int16x8_t *)a3;
                                    if (a3 < v699)
                                    {
                                      while (1)
                                      {
                                        v1473 = v870->u16[0];
                                        if (v1473 < 0x20)
                                        {
                                          if (v1473 != 9)
                                            goto LABEL_3294;
                                        }
                                        else if (v1473 == (_DWORD)v31 || v1473 > 0xFF || v1473 == 92)
                                        {
                                          goto LABEL_3294;
                                        }
                                        v870 = (int16x8_t *)((char *)v870 + 2);
                                        *j = v870;
                                        if ((unint64_t)v870 >= v699)
                                          goto LABEL_3294;
                                      }
                                    }
                                    v870 = (int16x8_t *)a3;
LABEL_3294:
                                    v16 = (unint64_t)v1582;
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    goto LABEL_2061;
                                  case 5:
                                    if ((_DWORD)v31 == 102)
                                    {
                                      if ((uint64_t)(v699 - (_QWORD)v801) >= 9
                                        && *(_DWORD *)(v801 + 1) == 7077985
                                        && *(_DWORD *)(v801 + 3) == 6619251)
                                      {
                                        *j = v801 + 5;
                                        v958 = 12;
                                        goto LABEL_2172;
                                      }
                                    }
                                    else if ((_DWORD)v31 == 116)
                                    {
                                      if ((uint64_t)(v699 - (_QWORD)v801) >= 7
                                        && *(_DWORD *)(v801 + 1) == 7667826
                                        && v801[3] == 101)
                                      {
                                        *j = v801 + 4;
                                        v958 = 11;
                                        goto LABEL_2172;
                                      }
                                    }
                                    else if ((_DWORD)v31 == 110
                                           && (uint64_t)(v699 - (_QWORD)v801) >= 7
                                           && *(_DWORD *)(v801 + 1) == 7078005
                                           && v801[3] == 108)
                                    {
                                      *j = v801 + 4;
                                      v958 = 13;
                                      goto LABEL_2172;
                                    }
                                    *(_QWORD *)(a1 + 32) = v801;
                                    LODWORD(v1399) = (_DWORD)v801;
                                    if ((unint64_t)v801 < v699)
                                    {
                                      v1399 = v801;
                                      do
                                      {
                                        v1400 = *v1399;
                                        v1402 = (v1400 | 0x20u) - 97 >= 0x1A
                                             && (v1400 - 48) >= 0xA
                                             && (v1400 - 8204) >= 2;
                                        if (v1402 && v1400 != 95 && v1400 != 36)
                                          break;
                                        *j = ++v1399;
                                      }
                                      while ((unint64_t)v1399 < v699);
                                    }
                                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1399 - (_DWORD)v801) >> 1);
                                    *(_BYTE *)(a1 + 24) = 5;
                                    goto LABEL_2955;
                                  case 6:
                                    v924 = 0;
                                    if ((unint64_t)v801 < v699 && (_DWORD)v31 == 45)
                                    {
                                      *j = v801 + 1;
                                      v924 = 1;
                                    }
                                    v925 = &v801[v924];
                                    if ((unint64_t)v925 >= v699)
                                      goto LABEL_2907;
                                    v926 = *v925;
                                    if (v926 == 48)
                                    {
                                      v929 = v924 + 1;
                                    }
                                    else
                                    {
                                      if ((v926 - 49) > 8)
                                      {
LABEL_2907:
                                        v1366 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1367 = v1366;
                                        v1368 = "Invalid number";
                                        *(_QWORD *)v1366 = v12;
                                        goto LABEL_2908;
                                      }
                                      v927 = v924 + 1;
                                      v928 = 2 * v924 + 2;
                                      do
                                      {
                                        v929 = v927;
                                        if ((unint64_t)v801 + v928 >= v699)
                                          break;
                                        ++v927;
                                        v928 += 2;
                                      }
                                      while (v801[v929] - 48 < 0xA);
                                    }
                                    v930 = &v801[v929];
                                    *j = v930;
                                    if ((unint64_t)v930 >= v699)
                                      goto LABEL_3176;
                                    v931 = *v930;
                                    if (v931 == 101 || v931 == 69)
                                      goto LABEL_3176;
                                    if (v931 == 46)
                                    {
                                      v1474 = v930 + 1;
                                      *j = v1474;
                                      if ((unint64_t)v1474 >= v699 || *v1474 - 48 > 9)
                                      {
                                        v1366 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1367 = v1366;
                                        v25.i64[0] = 0x2200000002;
                                        v1368 = "Invalid digits after decimal point";
                                        goto LABEL_3192;
                                      }
                                      v1475 = (unint64_t)&v801[v929 + 2];
                                      do
                                      {
                                        v930 = (unsigned __int16 *)v1475;
                                        if (v1475 >= v699)
                                          break;
                                        v1475 += 2;
                                      }
                                      while (*v930 - 48 < 0xA);
                                      *j = v930;
LABEL_3176:
                                      if ((unint64_t)v930 < v699 && (*v930 | 0x20) == 0x65)
                                      {
                                        v1476 = v930 + 1;
                                        *j = v930 + 1;
                                        if ((unint64_t)(v930 + 1) < v699)
                                        {
                                          v1477 = *v1476;
                                          if (v1477 == 45 || v1477 == 43)
                                          {
                                            v1476 = v930 + 2;
                                            *j = v930 + 2;
                                          }
                                        }
                                        if ((unint64_t)v1476 < v699 && *v1476 - 48 <= 9)
                                        {
                                          v1478 = v1476 + 1;
                                          do
                                          {
                                            v930 = v1478;
                                            if ((unint64_t)v1478 >= v699)
                                              break;
                                            ++v1478;
                                          }
                                          while (*v930 - 48 < 0xA);
                                          *j = v930;
                                          goto LABEL_3188;
                                        }
                                        v1366 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1367 = v1366;
                                        v25.i64[0] = 0x5D00000002;
                                        v1368 = "Exponent symbols should be followed by an optional '+' or '-' and then b"
                                                "y at least one number";
LABEL_3192:
                                        *(_QWORD *)v1366 = v25.i64[0];
LABEL_2908:
                                        *(_QWORD *)(v1366 + 8) = v1368;
                                        *(_DWORD *)(v1366 + 16) = 4;
                                        v1369 = *v1568;
                                        *v1568 = (WTF::StringImpl *)v1367;
                                        if (v1369)
                                        {
                                          if (*(_DWORD *)v1369 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1369, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                            WTF::fastFree(v1499, v1500, v1501, v1502, v1503, v1504, v1505, v1506);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1369 -= 2;
                                          }
                                        }
LABEL_2955:
                                        v704 = 6;
LABEL_2645:
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        goto LABEL_1786;
                                      }
LABEL_3188:
                                      *v20 = 6;
                                      v40 = (char *)v930 - (char *)v801;
                                      if ((uint64_t)v40 <= -2)
                                        goto LABEL_1656;
                                      *(_QWORD *)task_info_out = 0;
                                      fast_float::from_chars_advanced<double,char16_t>(v801, (unsigned __int16 *)((char *)v801 + v40), (double *)task_info_out, 0x2E00000005);
                                      v25.i64[0] = *(_QWORD *)task_info_out;
LABEL_3190:
                                      *(_QWORD *)(a1 + 32) = v25.i64[0];
                                      goto LABEL_2955;
                                    }
                                    if (v929 > 9)
                                      goto LABEL_3176;
                                    *v20 = 6;
                                    if ((_DWORD)v31 == 45)
                                    {
                                      if (v929 < 2)
                                        goto LABEL_3264;
                                      ++v801;
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    }
                                    v932 = 0;
                                    do
                                    {
                                      v933 = *v801++;
                                      v932 = v933 + 10 * v932 - 48;
                                    }
                                    while (v801 < v930);
                                    if ((_DWORD)v31 == 45)
                                    {
                                      if (!v932)
                                      {
LABEL_3264:
                                        *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                        goto LABEL_2955;
                                      }
                                      *(double *)v25.i64 = (double)-v932;
                                      goto LABEL_3190;
                                    }
                                    *(double *)v25.i64 = (double)v932;
                                    *(double *)(a1 + 32) = (double)v932;
                                    v704 = 6;
                                    goto LABEL_1786;
                                  case 0x12:
                                  case 0x13:
                                    break;
                                  default:
                                    *v20 = *(_BYTE *)(v29 + v31);
                                    *j = v801 + 1;
                                    v704 = 6;
                                    goto LABEL_1786;
                                }
                              }
                              WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                              v1047 = *(WTF::StringImpl **)task_info_out;
                              if (!*(_QWORD *)task_info_out)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198B3AF04);
                              }
                              **(_QWORD **)task_info_out = 0x1600000002;
                              *(_OWORD *)((char *)v1047 + 20) = xmmword_199158B20;
                              *((_QWORD *)v1047 + 1) = (char *)v1047 + 20;
                              *((_DWORD *)v1047 + 4) = 0;
                              v25.i64[1] = 0x6B006F00740020;
                              *(_OWORD *)((char *)v1047 + 36) = xmmword_199158B30;
                              v25.i64[0] = 0x270020006E0065;
                              *(_QWORD *)((char *)v1047 + 52) = 0x270020006E0065;
                              *((_WORD *)v1047 + 30) = *v801;
                              *((_WORD *)v1047 + 31) = 39;
                              v1048 = *v1568;
                              *v1568 = v1047;
                              if (!v1048)
                              {
                                v704 = 6;
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                goto LABEL_1786;
                              }
                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                              if (*(_DWORD *)v1048 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1048, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                WTF::fastFree(v1090, v1091, v1092, v1093, v1094, v1095, v1096, v1097);
                                goto LABEL_2416;
                              }
                              *(_DWORD *)v1048 -= 2;
                              v704 = 6;
LABEL_1786:
                              if (v10)
                              {
                                v754 = *((_DWORD *)v10 + 4);
                                if ((v754 & 0x20) == 0)
                                {
                                  v755 = (_BYTE *)*((_QWORD *)v10 + 1);
                                  v756 = *((unsigned int *)v10 + 1);
                                  if ((v754 & 4) != 0)
                                  {
                                    if ((_DWORD)v756)
                                    {
                                      a3 = *v755 - 48;
                                      if (a3 <= 9 && (v756 < 2 || *v755 != 48))
                                      {
                                        v1391 = v755 + 1;
                                        v1392 = v756 - 1;
                                        while (v1392)
                                        {
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          if (a3 <= 0x19999999)
                                          {
                                            v1393 = *v1391 - 48;
                                            if (v1393 <= 9)
                                            {
                                              v279 = __CFADD__(v1393, 10 * a3);
                                              a3 = v1393 + 10 * (_DWORD)a3;
                                              ++v1391;
                                              --v1392;
                                              if (!v279)
                                                continue;
                                            }
                                          }
                                          goto LABEL_1791;
                                        }
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if ((_DWORD)a3 != -1)
                                        {
LABEL_1850:
                                          JSC::JSObject::putDirectIndex((unint64_t)v1583[0], *(_QWORD *)a1, (JSC::VM *)a3, v704, a5, a6, a7, a8, v25);
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          if (*(_DWORD *)(v16 + 80))
                                          {
                                            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, a3, v31, a5, a6, a7, a8);
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            if (hasExceptionsAfterHandlingTraps)
                                              goto LABEL_2361;
                                          }
LABEL_1817:
                                          v773 = *v20;
                                          if (v773 == 10)
                                            goto LABEL_1818;
                                          goto LABEL_1904;
                                        }
                                      }
                                    }
                                  }
                                  else if ((_DWORD)v756)
                                  {
                                    a3 = *(unsigned __int16 *)v755 - 48;
                                    if (a3 <= 9 && (*(_WORD *)v755 != 48 || v756 <= 1))
                                    {
                                      v784 = (unsigned __int16 *)(v755 + 2);
                                      v785 = v756 - 1;
                                      while (v785)
                                      {
                                        if (a3 <= 0x19999999)
                                        {
                                          v786 = *v784 - 48;
                                          if (v786 <= 9)
                                          {
                                            v279 = __CFADD__(v786, 10 * a3);
                                            a3 = v786 + 10 * (_DWORD)a3;
                                            ++v784;
                                            --v785;
                                            if (!v279)
                                              continue;
                                          }
                                        }
                                        goto LABEL_1791;
                                      }
                                      if ((_DWORD)a3 != -1)
                                        goto LABEL_1850;
                                    }
                                  }
                                }
                              }
LABEL_1791:
                              v18 = *(_DWORD *)v1583[0] & 0xFFFFFFFE;
                              if ((*(_DWORD *)(16 * v18 + 0x10) & 0x8000003) == 0)
                              {
                                v757 = *(_QWORD *)(16 * v18 + 0x50);
                                if ((v757 & 1) == 0)
                                {
                                  v758 = *(_QWORD *)(v757 + 8);
                                  if (v758)
                                  {
                                    v759 = *(_DWORD *)(v758 - 8);
                                    v760 = (((unint64_t)v10 | 0x100000000000000) + ~((_QWORD)v10 << 32)) ^ ((((unint64_t)v10 | 0x100000000000000) + ~((_QWORD)v10 << 32)) >> 22);
                                    v761 = 9 * ((v760 + ~(v760 << 13)) ^ ((v760 + ~(v760 << 13)) >> 8));
                                    v762 = (v761 ^ (v761 >> 15)) + ~((v761 ^ (v761 >> 15)) << 27);
                                    v763 = v759 & ((v762 >> 31) ^ v762);
                                    v764 = *(_QWORD *)(v758 + 16 * v763);
                                    if (v764 == ((unint64_t)v10 | 0x100000000000000))
                                    {
LABEL_1795:
                                      v765 = *(_QWORD *)(v758 + 16 * v763 + 8);
                                      if (v765)
                                      {
                                        if ((*(_BYTE *)(v765 + 8) & 3) == 0)
                                        {
                                          v766 = *(_QWORD *)v765;
                                          if (*(_QWORD *)v765)
                                            goto LABEL_1798;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v787 = 1;
                                      while (v764)
                                      {
                                        v763 = ((_DWORD)v763 + v787) & v759;
                                        v764 = *(_QWORD *)(v758 + 16 * v763);
                                        ++v787;
                                        if (v764 == ((unint64_t)v10 | 0x100000000000000))
                                          goto LABEL_1795;
                                      }
                                    }
                                  }
                                  goto LABEL_1903;
                                }
                                v766 = v757 & 0xFFFFFFFFFFFFFFFELL;
                                if ((v757 & 0xFFFFFFFFFFFFFFFELL) == 0)
                                  goto LABEL_1903;
                                v780 = (*(_DWORD *)(v766 + 16) >> 13) & 0x1F;
                                if ((_DWORD)v780 != 16)
                                {
                                  if (((v780 << 56) | (16 * *(unsigned int *)(v766 + 72)) | ((unint64_t)*(unsigned __int8 *)(v766 + 20) << 48)) == ((unint64_t)v10 | 0x100000000000000))
                                    goto LABEL_1798;
                                  goto LABEL_1903;
                                }
                                v781 = *(_QWORD *)(v766 + 48);
                                v782 = v781 | 0x1000000000000000;
                                v30 = v781 == 2;
                                v783 = 0x1000000000000000;
                                if (!v30)
                                  v783 = v782;
                                if ((v783 | ((unint64_t)*(unsigned __int8 *)(v766 + 20) << 48)) != ((unint64_t)v10 | 0x100000000000000))
                                  goto LABEL_1903;
LABEL_1798:
                                v767 = *(unsigned __int16 *)(v766 + 22);
                                if (v767 == 65534)
                                {
                                  v767 = -1;
                                }
                                else if (v767 == 0xFFFF)
                                {
                                  v767 = *(_DWORD *)(*(_QWORD *)(v766 + 64) + 88);
                                }
                                v768 = *(unsigned __int16 *)(16 * v18 + 0x18);
                                if (v768 == 65534)
                                  goto LABEL_1805;
                                if (v768 == 0xFFFF)
                                  v768 = *(_DWORD *)(*(_QWORD *)(16 * v18 + 0x40) + 84);
                                if (v768 < 64)
                                {
LABEL_1805:
                                  v769 = 0;
                                  v770 = *(unsigned __int16 *)(v766 + 24);
                                  if (v770 != 65534)
                                    goto LABEL_1806;
                                  goto LABEL_1809;
                                }
                                if ((v768 - 63) >= 5)
                                {
                                  v846 = (v768 - 64) | ((v768 - 64) >> 1) | (((v768 - 64) | ((v768 - 64) >> 1)) >> 2);
                                  v847 = v846 | (v846 >> 4) | ((v846 | (v846 >> 4)) >> 8);
                                  v769 = (v847 | HIWORD(v847)) + 1;
                                  v770 = *(unsigned __int16 *)(v766 + 24);
                                  if (v770 == 65534)
                                    goto LABEL_1809;
                                }
                                else
                                {
                                  v769 = 4;
                                  v770 = *(unsigned __int16 *)(v766 + 24);
                                  if (v770 == 65534)
                                    goto LABEL_1809;
                                }
LABEL_1806:
                                if (v770 == 0xFFFF)
                                  v770 = *(_DWORD *)(*(_QWORD *)(v766 + 64) + 84);
                                if (v770 >= 64)
                                {
                                  if ((v770 - 63) >= 5)
                                  {
                                    v848 = (v770 - 64) | ((v770 - 64) >> 1) | (((v770 - 64) | ((v770 - 64) >> 1)) >> 2);
                                    v849 = v848 | (v848 >> 4) | ((v848 | (v848 >> 4)) >> 8);
                                    v771 = (v849 | HIWORD(v849)) + 1;
                                  }
                                  else
                                  {
                                    v771 = 4;
                                  }
                                }
                                else
                                {
LABEL_1809:
                                  v771 = 0;
                                }
                                if (v769 != v771)
                                {
                                  v1567 = JSC::Structure::outOfLineCapacity((JSC::Structure *)(16 * v18));
                                  v1206 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v766);
                                  MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage(v1583[0], (JSC::VM *)v16, v1567, v1206, v1207, v1208, v1209, v1210, v1211);
                                  JSC::JSObject::nukeStructureAndSetButterfly(v1583[0], v16, v18, MoreOutOfLineStorage);
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                }
                                if (v767 >= 64)
                                {
                                  *(_QWORD *)(*v1575 - 8 + 8 * (63 - v767)) = v704;
                                  if ((v704 & 0xFFFE000000000002) == 0)
                                    goto LABEL_1814;
LABEL_1815:
                                  v772 = (unsigned __int8 *)v1583[0];
                                  *(_DWORD *)v1583[0] = v766 >> 4;
                                  v772[6] = v772[6] & 0x80 | *(_BYTE *)(v766 + 10);
                                  v772[5] = *(_BYTE *)(v766 + 9);
                                  if (v772[4] != *(unsigned __int8 *)(v766 + 8))
                                  {
                                    do
                                    {
                                      while (1)
                                      {
                                        v778 = *v9;
                                        v779 = __ldxr(v9);
                                        if (v779 == v778)
                                          break;
                                        __clrex();
                                      }
                                    }
                                    while (__stxr(v778 & 0xC0 | *(_BYTE *)(v766 + 8), v9));
                                  }
                                  if (*(_DWORD *)(v16 + 760) < *v1577)
                                    goto LABEL_1817;
                                  if (*(_BYTE *)(v16 + 755))
                                  {
                                    __dmb(0xBu);
                                    if (!*v1577)
                                    {
                                      v1109 = *(unsigned __int8 *)(v16 + 755);
                                      ++*(_QWORD *)(v16 + 1288);
                                      if (!v1109)
                                        goto LABEL_2164;
                                      v1110 = (char)v1583[0];
                                      v1111 = (_DWORD *)((unint64_t)v1583[0] & 0xFFFFFFFFFFFFC000 | 0x20);
                                      v1112 = (_QWORD *)(((unint64_t)v1583[0] & 0xFFFFFFFFFFFFC000 | (8 * (((unint64_t)v1583[0] >> 10) & 0xF)))
                                                       + 40);
                                      v1113 = 1 << ((unint64_t)v1583[0] >> 4);
                                      __dmb(0xBu);
                                      if ((v1110 & 8) != 0)
                                      {
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if ((*((_BYTE *)v1583[0] - 79) & 1) != 0)
                                          goto LABEL_2164;
                                      }
                                      else
                                      {
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if (*v1111 == *((_DWORD *)v1582 + 108) && (*v1112 & v1113) != 0)
                                          goto LABEL_2164;
                                      }
                                      if (*(_BYTE *)(v16 + 347) != 1)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x198B3AF44);
                                      }
                                      do
                                      {
                                        if (__ldaxr(v1577))
                                        {
                                          __clrex();
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_1817;
                                        }
                                      }
                                      while (__stlxr(1u, v1577));
                                      if (((uint64_t)v1583[0] & 8) != 0)
                                      {
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if ((*((_BYTE *)v1583[0] - 79) & 1) != 0)
                                        {
LABEL_2449:
                                          *v1577 = 0;
                                          goto LABEL_1817;
                                        }
                                      }
                                      else
                                      {
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        if (*v1111 == *((_DWORD *)v1582 + 108) && (*v1112 & v1113) != 0)
                                          goto LABEL_2449;
                                      }
                                    }
                                    goto LABEL_1817;
                                  }
                                  ++*(_QWORD *)(v16 + 1288);
LABEL_2164:
                                  *v1577 = 2;
                                  v919 = *(_QWORD **)(v16 + 608);
                                  v920 = v919[2];
                                  if (v920 == 510)
                                  {
                                    v1098 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    v920 = 0;
                                    *v1098 = 0;
                                    v1098[1] = 0;
                                    ++v919[3];
                                    v1099 = (_QWORD *)*v919;
                                    v1100 = v919 + 1;
                                    if (*v919)
                                      v1100 = (_QWORD *)*v919;
                                    *v1100 = v1098;
                                    *v919 = v1098;
                                    *v1098 = 0;
                                    v1098[1] = v1099;
                                  }
                                  v921 = *v919 + 8 * v920;
                                  v919[2] = v920 + 1;
                                  *(JSC::JSObject **)(v921 + 16) = v1583[0];
                                  v773 = *v20;
                                  if (v773 != 10)
                                    goto LABEL_1904;
LABEL_1818:
                                  v774 = *(unsigned __int16 **)(a1 + 48);
                                  v40 = *(_QWORD *)(a1 + 56);
                                  while ((unint64_t)v774 < v40)
                                  {
                                    if (*v774 > 0xFFu || *(_BYTE *)(v29 + *v774) != 19)
                                      break;
                                    *j = ++v774;
                                  }
                                  if (v774 == (unsigned __int16 *)v40)
                                  {
                                    *v20 = 14;
                                    goto LABEL_1828;
                                  }
                                  *v20 = 18;
                                  v31 = *v774;
                                  if (v31 > 0xFF)
                                  {
LABEL_2347:
                                    WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                                    v1009 = *(WTF::StringImpl **)task_info_out;
                                    if (!*(_QWORD *)task_info_out)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x198B3AF1CLL);
                                    }
                                    **(_QWORD **)task_info_out = 0x1600000002;
                                    *(_OWORD *)((char *)v1009 + 20) = xmmword_199158B20;
                                    *((_QWORD *)v1009 + 1) = (char *)v1009 + 20;
                                    *((_DWORD *)v1009 + 4) = 0;
                                    *(_OWORD *)((char *)v1009 + 36) = xmmword_199158B30;
                                    *(_QWORD *)((char *)v1009 + 52) = 0x270020006E0065;
                                    *((_WORD *)v1009 + 30) = *v774;
                                    *((_WORD *)v1009 + 31) = 39;
                                    v1010 = *v1568;
                                    *v1568 = v1009;
                                    if (v1010)
                                    {
                                      if (*(_DWORD *)v1010 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v1010, v1002, v1003, v1004, v1005, v1006, v1007, v1008);
                                        WTF::fastFree(v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v1010 -= 2;
                                      }
                                    }
LABEL_1828:
                                    v776 = WTF::fastCompactMalloc((WTF *)0x20);
                                    *(_QWORD *)v776 = v13;
                                    *(_QWORD *)(v776 + 8) = "Property name must be a string literal";
                                    *(_DWORD *)(v776 + 16) = 4;
                                    v731 = *(_QWORD *)v1579;
                                    *(_QWORD *)v1579 = v776;
                                    if (!v731)
                                      goto LABEL_2366;
                                    v777 = *(_DWORD *)v731 - 2;
                                    if (*(_DWORD *)v731 != 2)
                                    {
                                      v1580 = 0;
                                      LOBYTE(v18) = 0;
                                      *(_DWORD *)v731 = v777;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      goto LABEL_1739;
                                    }
LABEL_1856:
                                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v731, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                    v788 = *(_QWORD *)(StatusReg + 752);
                                    if (!v788)
                                    {
                                      pas_try_deallocate_slow_no_cache(v731, (uint64_t)&bmalloc_heap_config, 1);
                                      goto LABEL_2366;
                                    }
                                    if (!(v731 >> 43)
                                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                           + ((v731 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v731)) & 1) != 0)
                                    {
LABEL_1859:
                                      v789 = *(unsigned int *)(v788 + 8000);
                                      if (v789 < 0x3E7)
                                      {
                                        v1580 = 0;
                                        LOBYTE(v18) = 0;
                                        *(_QWORD *)(v788 + 8 * v789) = v731 | 0x5000000000000;
                                        *(_DWORD *)(v788 + 8000) = v789 + 1;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                        goto LABEL_1739;
                                      }
                                      pas_thread_local_cache_append_deallocation_slow(v788, v731, (os_unfair_lock_s *)5, v31, a5, a6, a7, a8);
                                      goto LABEL_2366;
                                    }
                                    if (v731 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v731 >> 24)
                                    {
                                      v31 = 0;
                                    }
                                    else
                                    {
                                      v31 = (*(_DWORD *)((char *)off_1ECF425F8
                                                       + ((((v731 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                       + 24) >> (2 * ((BYTE3(v731) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                      if ((_DWORD)v31 == 1)
                                        goto LABEL_1859;
                                    }
                                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v788, v731, 1, v31, a5, a6, a7, a8);
                                    goto LABEL_2366;
                                  }
                                  switch(*(_BYTE *)(v29 + v31))
                                  {
                                    case 4:
                                      v790 = *(unsigned __int8 *)(a1 + 40);
                                      if ((_DWORD)v31 == 39)
                                      {
                                        if (!*(_BYTE *)(a1 + 40))
                                        {
                                          v1339 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1340 = v1339;
                                          v1341 = 0x2900000002;
                                          v1342 = "Single quotes (') are not allowed in JSON";
                                          goto LABEL_2850;
                                        }
                                        a3 = (unint64_t)(v774 + 1);
                                        *j = v774 + 1;
                                      }
                                      else
                                      {
                                        a3 = (unint64_t)(v774 + 1);
                                        *j = v774 + 1;
                                        if (!v790)
                                        {
                                          v791 = v40 - a3;
                                          if ((uint64_t)(v40 - a3) <= -2)
                                            goto LABEL_1656;
                                          v792 = (int16x8_t *)((char *)v774 + (v791 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                          if ((unint64_t)v791 <= 0xE)
                                          {
                                            if (v40 != a3)
                                            {
                                              v1343 = 2 * (v791 >> 1);
                                              v1344 = (int16x8_t *)(v774 + 1);
                                              while (1)
                                              {
                                                v1345 = v1344->u16[0];
                                                if (v1345 <= 0xFF
                                                  && !JSC::safeStringLatin1CharactersInStrictJSON[v1345])
                                                {
                                                  break;
                                                }
                                                v1344 = (int16x8_t *)((char *)v1344 + 2);
                                                v1343 -= 2;
                                                if (!v1343)
                                                  goto LABEL_3259;
                                              }
                                              v792 = v1344;
                                            }
                                          }
                                          else
                                          {
                                            v793 = v774 + 1;
                                            if (v791 >= 15)
                                            {
                                              v794 = v774 + 8;
                                              while (1)
                                              {
                                                v795 = *(int16x8_t *)(v794 - 7);
                                                v796.i64[0] = 0x22002200220022;
                                                v796.i64[1] = 0x22002200220022;
                                                v797 = (int8x16_t)vceqq_s16(v795, v796);
                                                v798.i64[0] = 0x5C005C005C005CLL;
                                                v798.i64[1] = 0x5C005C005C005CLL;
                                                v799.i64[0] = 0x20002000200020;
                                                v799.i64[1] = 0x20002000200020;
                                                v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v795, v798), (int8x16_t)vcgtq_u16(v799, (uint16x8_t)v795)), v797);
                                                v797.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                                if (v797.i32[0])
                                                  break;
                                                v794 += 8;
                                                if (v794 >= (unsigned __int16 *)v792)
                                                {
                                                  v793 = v794 - 7;
                                                  goto LABEL_2931;
                                                }
                                              }
                                              v800 = v794 - 7;
LABEL_1877:
                                              v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                              v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                              v792 = (int16x8_t *)&v800[v25.u8[0]];
LABEL_1878:
                                              *j = v792;
LABEL_1879:
                                              if ((unint64_t)v792 < v40 && v792->u16[0] == (_DWORD)v31)
                                              {
                                                *(_BYTE *)(a1 + 25) &= ~1u;
                                                *(_QWORD *)(a1 + 32) = a3;
                                                *(_QWORD *)(a1 + 48) = (char *)v792->i64 + 2;
                                                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v792 - a3) >> 1);
                                                *(_BYTE *)(a1 + 24) = 4;
                                                LOBYTE(v18) = 1;
                                                goto LABEL_1739;
                                              }
                                              v1036 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              if (v1036 != 4)
                                                goto LABEL_1828;
                                              LOBYTE(v18) = 1;
                                              goto LABEL_1739;
                                            }
LABEL_2931:
                                            if (v793 < (unsigned __int16 *)v792)
                                            {
                                              v800 = (unsigned __int16 *)&v792[-1];
                                              v1394 = v792[-1];
                                              v1395.i64[0] = 0x22002200220022;
                                              v1395.i64[1] = 0x22002200220022;
                                              v1396 = (int8x16_t)vceqq_s16(v1394, v1395);
                                              v1397.i64[0] = 0x5C005C005C005CLL;
                                              v1397.i64[1] = 0x5C005C005C005CLL;
                                              v1398.i64[0] = 0x20002000200020;
                                              v1398.i64[1] = 0x20002000200020;
                                              v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1394, v1397), (int8x16_t)vcgtq_u16(v1398, (uint16x8_t)v1394)), v1396);
                                              v1396.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                              v16 = (unint64_t)v1582;
                                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                              if (v1396.i32[0])
                                                goto LABEL_1877;
                                              goto LABEL_1878;
                                            }
                                          }
LABEL_3259:
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          goto LABEL_1878;
                                        }
                                      }
                                      v792 = (int16x8_t *)a3;
                                      if (a3 < v40)
                                      {
                                        while (1)
                                        {
                                          v1332 = v792->u16[0];
                                          if (v1332 < 0x20)
                                          {
                                            if (v1332 != 9)
                                              goto LABEL_3273;
                                          }
                                          else if (v1332 == (_DWORD)v31 || v1332 > 0xFF || v1332 == 92)
                                          {
                                            goto LABEL_3273;
                                          }
                                          v792 = (int16x8_t *)((char *)v792 + 2);
                                          *j = v792;
                                          if ((unint64_t)v792 >= v40)
                                            goto LABEL_3273;
                                        }
                                      }
                                      v792 = (int16x8_t *)a3;
LABEL_3273:
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      goto LABEL_1879;
                                    case 5:
                                      if ((_DWORD)v31 == 102)
                                      {
                                        if ((uint64_t)(v40 - (_QWORD)v774) >= 9
                                          && *(_DWORD *)(v774 + 1) == 7077985
                                          && *(_DWORD *)(v774 + 3) == 6619251)
                                        {
                                          *j = v774 + 5;
                                          *v20 = 12;
                                          goto LABEL_1828;
                                        }
                                      }
                                      else if ((_DWORD)v31 == 116)
                                      {
                                        if ((uint64_t)(v40 - (_QWORD)v774) >= 7
                                          && *(_DWORD *)(v774 + 1) == 7667826
                                          && v774[3] == 101)
                                        {
                                          *j = v774 + 4;
                                          *v20 = 11;
                                          goto LABEL_1828;
                                        }
                                      }
                                      else if ((_DWORD)v31 == 110
                                             && (uint64_t)(v40 - (_QWORD)v774) >= 7
                                             && *(_DWORD *)(v774 + 1) == 7078005
                                             && v774[3] == 108)
                                      {
                                        *j = v774 + 4;
                                        *v20 = 13;
                                        goto LABEL_1828;
                                      }
                                      *(_QWORD *)(a1 + 32) = v774;
                                      LODWORD(v1280) = (_DWORD)v774;
                                      if ((unint64_t)v774 < v40)
                                      {
                                        v1280 = v774;
                                        do
                                        {
                                          v1281 = *v1280;
                                          v1283 = (v1281 | 0x20u) - 97 >= 0x1A
                                               && (v1281 - 48) >= 0xA
                                               && (v1281 - 8204) >= 2;
                                          if (v1283 && v1281 != 95 && v1281 != 36)
                                            break;
                                          *j = ++v1280;
                                        }
                                        while ((unint64_t)v1280 < v40);
                                      }
                                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1280 - (_DWORD)v774) >> 1);
                                      *(_BYTE *)(a1 + 24) = 5;
                                      v16 = (unint64_t)v1582;
                                      goto LABEL_1828;
                                    case 6:
                                      v850 = 0;
                                      if ((unint64_t)v774 < v40 && (_DWORD)v31 == 45)
                                      {
                                        *j = v774 + 1;
                                        v850 = 1;
                                      }
                                      v851 = &v774[v850];
                                      if ((unint64_t)v851 >= v40)
                                        goto LABEL_2636;
                                      v852 = *v851;
                                      if (v852 == 48)
                                      {
                                        v855 = v850 + 1;
                                      }
                                      else
                                      {
                                        if ((v852 - 49) > 8)
                                        {
LABEL_2636:
                                          v1255 = WTF::fastCompactMalloc((WTF *)0x20);
                                          *(_QWORD *)v1255 = v12;
                                          *(_QWORD *)(v1255 + 8) = "Invalid number";
                                          *(_DWORD *)(v1255 + 16) = 4;
                                          v1256 = *v1568;
                                          *v1568 = (WTF::StringImpl *)v1255;
                                          if (!v1256)
                                            goto LABEL_1828;
LABEL_2637:
                                          if (*(_DWORD *)v1256 == 2)
                                          {
                                            WTF::StringImpl::~StringImpl(v1256, v1248, v1249, v1250, v1251, v1252, v1253, v1254);
                                            WTF::fastFree(v1370, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
                                          }
                                          else
                                          {
                                            *(_DWORD *)v1256 -= 2;
                                          }
                                          v16 = (unint64_t)v1582;
                                          goto LABEL_1828;
                                        }
                                        v853 = v850 + 1;
                                        v854 = 2 * v850 + 2;
                                        do
                                        {
                                          v855 = v853;
                                          if ((unint64_t)v774 + v854 >= v40)
                                            break;
                                          ++v853;
                                          v854 += 2;
                                        }
                                        while (v774[v855] - 48 < 0xA);
                                      }
                                      v856 = &v774[v855];
                                      *j = v856;
                                      if ((unint64_t)v856 >= v40)
                                        goto LABEL_2834;
                                      v857 = *v856;
                                      if (v857 == 101 || v857 == 69)
                                        goto LABEL_2834;
                                      if (v857 == 46)
                                      {
                                        v1333 = v856 + 1;
                                        *j = v1333;
                                        if ((unint64_t)v1333 >= v40 || *v1333 - 48 > 9)
                                        {
                                          v1339 = WTF::fastCompactMalloc((WTF *)0x20);
                                          v1340 = v1339;
                                          v1341 = 0x2200000002;
                                          v1342 = "Invalid digits after decimal point";
LABEL_2850:
                                          *(_QWORD *)v1339 = v1341;
                                          *(_QWORD *)(v1339 + 8) = v1342;
                                          *(_DWORD *)(v1339 + 16) = 4;
                                          v1256 = *v1568;
                                          *v1568 = (WTF::StringImpl *)v1340;
                                          v16 = (unint64_t)v1582;
                                          if (!v1256)
                                            goto LABEL_1828;
                                          goto LABEL_2637;
                                        }
                                        v1334 = (unint64_t)&v774[v855 + 2];
                                        do
                                        {
                                          v856 = (unsigned __int16 *)v1334;
                                          if (v1334 >= v40)
                                            break;
                                          v1334 += 2;
                                        }
                                        while (*v856 - 48 < 0xA);
                                        *j = v856;
                                      }
                                      else if (v855 <= 9)
                                      {
                                        *v20 = 6;
                                        if ((_DWORD)v31 == 45)
                                        {
                                          if (v855 < 2)
                                            goto LABEL_2914;
                                          ++v774;
                                          v16 = (unint64_t)v1582;
                                        }
                                        v858 = 0;
                                        do
                                        {
                                          v859 = *v774++;
                                          v858 = v859 + 10 * v858 - 48;
                                        }
                                        while (v774 < v856);
                                        if ((_DWORD)v31 != 45)
                                        {
                                          *(double *)(a1 + 32) = (double)v858;
                                          goto LABEL_1828;
                                        }
                                        if (v858)
                                        {
                                          v1338 = (double)-v858;
LABEL_2848:
                                          *(double *)(a1 + 32) = v1338;
                                          v16 = (unint64_t)v1582;
                                          goto LABEL_1828;
                                        }
LABEL_2914:
                                        *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                        v16 = (unint64_t)v1582;
                                        goto LABEL_1828;
                                      }
LABEL_2834:
                                      if ((unint64_t)v856 >= v40 || (*v856 | 0x20) != 0x65)
                                      {
LABEL_2846:
                                        *v20 = 6;
                                        LODWORD(v40) = (_DWORD)v856 - (_DWORD)v774;
                                        if ((char *)v856 - (char *)v774 <= -2)
                                          goto LABEL_1656;
                                        *(_QWORD *)task_info_out = 0;
                                        fast_float::from_chars_advanced<double,char16_t>(v774, v856, (double *)task_info_out, 0x2E00000005);
                                        v1338 = *(double *)task_info_out;
                                        goto LABEL_2848;
                                      }
                                      v1335 = v856 + 1;
                                      *j = v856 + 1;
                                      if ((unint64_t)(v856 + 1) < v40)
                                      {
                                        v1336 = *v1335;
                                        if (v1336 == 45 || v1336 == 43)
                                        {
                                          v1335 = v856 + 2;
                                          *j = v856 + 2;
                                        }
                                      }
                                      if ((unint64_t)v1335 < v40 && *v1335 - 48 <= 9)
                                      {
                                        v1337 = v1335 + 1;
                                        do
                                        {
                                          v856 = v1337;
                                          if ((unint64_t)v1337 >= v40)
                                            break;
                                          ++v1337;
                                        }
                                        while (*v856 - 48 < 0xA);
                                        *j = v856;
                                        goto LABEL_2846;
                                      }
                                      v1339 = WTF::fastCompactMalloc((WTF *)0x20);
                                      v1340 = v1339;
                                      v1341 = 0x5D00000002;
                                      v1342 = "Exponent symbols should be followed by an optional '+' or '-' and then by "
                                              "at least one number";
                                      goto LABEL_2850;
                                    case 0x12:
                                    case 0x13:
                                      goto LABEL_2347;
                                    default:
                                      *v20 = *(_BYTE *)(v29 + v31);
                                      *j = v774 + 1;
                                      goto LABEL_1828;
                                  }
                                }
                                *(_QWORD *)&v1572[8 * v767] = v704;
                                if ((v704 & 0xFFFE000000000002) != 0)
                                  goto LABEL_1815;
LABEL_1814:
                                if (*(_DWORD *)(v16 + 760) < *v1577)
                                  goto LABEL_1815;
                                if (!*(_BYTE *)(v16 + 755))
                                {
                                  ++*(_QWORD *)(v16 + 1288);
LABEL_2170:
                                  *v1577 = 2;
                                  v18 = *(_QWORD *)(v16 + 608);
                                  v922 = *(_QWORD *)(v18 + 16);
                                  if (v922 == 510)
                                  {
                                    v1115 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    v922 = 0;
                                    *v1115 = 0;
                                    v1115[1] = 0;
                                    ++*(_QWORD *)(v18 + 24);
                                    v1116 = *(_QWORD *)v18;
                                    v1117 = (_QWORD *)(v18 + 8);
                                    if (*(_QWORD *)v18)
                                      v1117 = *(_QWORD **)v18;
                                    *v1117 = v1115;
                                    *(_QWORD *)v18 = v1115;
                                    *v1115 = 0;
                                    v1115[1] = v1116;
                                  }
                                  v923 = *(_QWORD *)v18 + 8 * v922;
                                  *(_QWORD *)(v18 + 16) = v922 + 1;
                                  *(JSC::JSObject **)(v923 + 16) = v1583[0];
                                  goto LABEL_1815;
                                }
                                __dmb(0xBu);
                                if (*v1577)
                                  goto LABEL_1815;
                                v1118 = *(unsigned __int8 *)(v16 + 755);
                                ++*(_QWORD *)(v16 + 1288);
                                if (!v1118)
                                  goto LABEL_2170;
                                v1119 = (char)v1583[0];
                                v1120 = (_DWORD *)((unint64_t)v1583[0] & 0xFFFFFFFFFFFFC000 | 0x20);
                                v1121 = (_QWORD *)(((unint64_t)v1583[0] & 0xFFFFFFFFFFFFC000 | (8 * (((unint64_t)v1583[0] >> 10) & 0xF)))
                                                 + 40);
                                v1122 = 1 << ((unint64_t)v1583[0] >> 4);
                                __dmb(0xBu);
                                if ((v1119 & 8) != 0)
                                {
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  if ((*((_BYTE *)v1583[0] - 79) & 1) != 0)
                                    goto LABEL_2170;
                                }
                                else
                                {
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  if (*v1120 == *((_DWORD *)v1582 + 108) && (*v1121 & v1122) != 0)
                                    goto LABEL_2170;
                                }
                                if (*(_BYTE *)(v16 + 347) != 1)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x198B3AF64);
                                }
                                do
                                {
                                  if (__ldaxr(v1577))
                                  {
                                    __clrex();
                                    v16 = (unint64_t)v1582;
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    goto LABEL_1815;
                                  }
                                }
                                while (__stlxr(1u, v1577));
                                if (((uint64_t)v1583[0] & 8) != 0)
                                {
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  if ((*((_BYTE *)v1583[0] - 79) & 1) != 0)
                                  {
LABEL_2464:
                                    *v1577 = 0;
                                    goto LABEL_1815;
                                  }
                                }
                                else
                                {
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  if (*v1120 == *((_DWORD *)v1582 + 108) && (*v1121 & v1122) != 0)
                                    goto LABEL_2464;
                                }
                                goto LABEL_1815;
                              }
LABEL_1903:
                              JSC::JSObject::putDirectForJSONSlow((unsigned __int8 *)v1583[0], (JSC::VM *)v16, (unint64_t)v10, v704, a5, a6, a7, a8, *(double *)v25.i64);
                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                              v773 = *v20;
                              if (v773 == 10)
                                goto LABEL_1818;
LABEL_1904:
                              if (v773 == 3)
                              {
                                v804 = *(unsigned __int16 **)(a1 + 48);
                                v40 = *(_QWORD *)(a1 + 56);
                                while ((unint64_t)v804 < v40)
                                {
                                  if (*v804 > 0xFFu || *(_BYTE *)(v29 + *v804) != 19)
                                    break;
                                  *j = ++v804;
                                }
                                if (v804 == (unsigned __int16 *)v40)
                                {
                                  LOBYTE(v18) = 0;
                                  v890 = 14;
LABEL_2090:
                                  *v20 = v890;
                                  goto LABEL_1915;
                                }
                                *v20 = 18;
                                v31 = *v804;
                                if (v31 > 0xFF)
                                {
LABEL_2367:
                                  WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
                                  v1019 = *(WTF::StringImpl **)task_info_out;
                                  if (!*(_QWORD *)task_info_out)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x198B3AF24);
                                  }
                                  **(_QWORD **)task_info_out = 0x1600000002;
                                  *(_OWORD *)((char *)v1019 + 20) = xmmword_199158B20;
                                  *((_QWORD *)v1019 + 1) = (char *)v1019 + 20;
                                  *((_DWORD *)v1019 + 4) = 0;
                                  v25.i64[1] = 0x6B006F00740020;
                                  *(_OWORD *)((char *)v1019 + 36) = xmmword_199158B30;
                                  v25.i64[0] = 0x270020006E0065;
                                  *(_QWORD *)((char *)v1019 + 52) = 0x270020006E0065;
                                  *((_WORD *)v1019 + 30) = *v804;
                                  *((_WORD *)v1019 + 31) = 39;
                                  v1020 = *v1568;
                                  *v1568 = v1019;
                                  if (v1020)
                                  {
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    if (*(_DWORD *)v1020 != 2)
                                    {
                                      LOBYTE(v18) = 0;
                                      *(_DWORD *)v1020 -= 2;
                                      goto LABEL_1915;
                                    }
                                    WTF::StringImpl::~StringImpl(v1020, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                    WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
LABEL_2408:
                                    v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                    LOBYTE(v18) = 0;
                                    goto LABEL_1915;
                                  }
                                  LOBYTE(v18) = 0;
                                  v1580 = v1583[0];
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  goto LABEL_1739;
                                }
                                switch(*(_BYTE *)(v29 + v31))
                                {
                                  case 4:
                                    v808 = *(unsigned __int8 *)(a1 + 40);
                                    if ((_DWORD)v31 != 39)
                                    {
                                      a3 = (unint64_t)(v804 + 1);
                                      *j = v804 + 1;
                                      if (v808)
                                        goto LABEL_2962;
                                      v809 = v40 - a3;
                                      if ((uint64_t)(v40 - a3) <= -2)
                                        goto LABEL_1656;
                                      v810 = (int16x8_t *)((char *)v804 + (v809 & 0xFFFFFFFFFFFFFFFELL) + 2);
                                      if ((unint64_t)v809 <= 0xE)
                                      {
                                        if (v40 != a3)
                                        {
                                          v1414 = 2 * (v809 >> 1);
                                          v1415 = (int16x8_t *)(v804 + 1);
                                          while (1)
                                          {
                                            v1416 = v1415->u16[0];
                                            if (v1416 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v1416])
                                              break;
                                            v1415 = (int16x8_t *)((char *)v1415 + 2);
                                            v1414 -= 2;
                                            if (!v1414)
                                              goto LABEL_3283;
                                          }
                                          v810 = v1415;
                                        }
                                      }
                                      else
                                      {
                                        v811 = v804 + 1;
                                        if (v809 >= 15)
                                        {
                                          v812 = v804 + 8;
                                          while (1)
                                          {
                                            v813 = *(int16x8_t *)(v812 - 7);
                                            v814.i64[0] = 0x22002200220022;
                                            v814.i64[1] = 0x22002200220022;
                                            v815 = (int8x16_t)vceqq_s16(v813, v814);
                                            v816.i64[0] = 0x5C005C005C005CLL;
                                            v816.i64[1] = 0x5C005C005C005CLL;
                                            v817.i64[0] = 0x20002000200020;
                                            v817.i64[1] = 0x20002000200020;
                                            v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v813, v816), (int8x16_t)vcgtq_u16(v817, (uint16x8_t)v813)), v815);
                                            v815.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                            if (v815.i32[0])
                                              break;
                                            v812 += 8;
                                            if (v812 >= (unsigned __int16 *)v810)
                                            {
                                              v811 = v812 - 7;
                                              goto LABEL_3155;
                                            }
                                          }
                                          v818 = v812 - 7;
LABEL_1939:
                                          v25 = (int32x4_t)vornq_s8(v1578, (int8x16_t)v25);
                                          v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                                          v810 = (int16x8_t *)&v818[v25.u8[0]];
LABEL_1940:
                                          *j = v810;
                                          goto LABEL_1941;
                                        }
LABEL_3155:
                                        if (v811 < (unsigned __int16 *)v810)
                                        {
                                          v818 = (unsigned __int16 *)&v810[-1];
                                          v1468 = v810[-1];
                                          v1469.i64[0] = 0x22002200220022;
                                          v1469.i64[1] = 0x22002200220022;
                                          v1470 = (int8x16_t)vceqq_s16(v1468, v1469);
                                          v1471.i64[0] = 0x5C005C005C005CLL;
                                          v1471.i64[1] = 0x5C005C005C005CLL;
                                          v1472.i64[0] = 0x20002000200020;
                                          v1472.i64[1] = 0x20002000200020;
                                          v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v1468, v1471), (int8x16_t)vcgtq_u16(v1472, (uint16x8_t)v1468)), v1470);
                                          v1470.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                                          v16 = (unint64_t)v1582;
                                          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                          if (v1470.i32[0])
                                            goto LABEL_1939;
                                          goto LABEL_1940;
                                        }
                                      }
LABEL_3283:
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      goto LABEL_1940;
                                    }
                                    if (*(_BYTE *)(a1 + 40))
                                    {
                                      a3 = (unint64_t)(v804 + 1);
                                      *j = v804 + 1;
LABEL_2962:
                                      v810 = (int16x8_t *)a3;
                                      if (a3 < v40)
                                      {
                                        while (1)
                                        {
                                          v1408 = v810->u16[0];
                                          if (v1408 < 0x20)
                                          {
                                            if (v1408 != 9)
                                              goto LABEL_3285;
                                          }
                                          else if (v1408 == (_DWORD)v31 || v1408 > 0xFF || v1408 == 92)
                                          {
                                            goto LABEL_3285;
                                          }
                                          v810 = (int16x8_t *)((char *)v810 + 2);
                                          *j = v810;
                                          if ((unint64_t)v810 >= v40)
                                            goto LABEL_3285;
                                        }
                                      }
                                      v810 = (int16x8_t *)a3;
LABEL_3285:
                                      v16 = (unint64_t)v1582;
                                      v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1941:
                                      if ((unint64_t)v810 >= v40 || v810->u16[0] != (_DWORD)v31)
                                      {
                                        JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
                                        goto LABEL_2408;
                                      }
                                      LOBYTE(v18) = 0;
                                      *(_BYTE *)(a1 + 25) &= ~1u;
                                      *(_QWORD *)(a1 + 32) = a3;
                                      *(_QWORD *)(a1 + 48) = (char *)v810->i64 + 2;
                                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v810 - a3) >> 1);
                                      *(_BYTE *)(a1 + 24) = 4;
LABEL_1915:
                                      v1580 = v1583[0];
                                      goto LABEL_1739;
                                    }
                                    v1292 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v1293 = v1292;
                                    v25.i64[0] = 0x2900000002;
                                    v1294 = "Single quotes (') are not allowed in JSON";
                                    goto LABEL_2994;
                                  case 5:
                                    if ((_DWORD)v31 == 102)
                                    {
                                      if ((uint64_t)(v40 - (_QWORD)v804) >= 9
                                        && *(_DWORD *)(v804 + 1) == 7077985
                                        && *(_DWORD *)(v804 + 3) == 6619251)
                                      {
                                        LOBYTE(v18) = 0;
                                        *j = v804 + 5;
                                        v890 = 12;
                                        goto LABEL_2090;
                                      }
                                    }
                                    else if ((_DWORD)v31 == 116)
                                    {
                                      if ((uint64_t)(v40 - (_QWORD)v804) >= 7
                                        && *(_DWORD *)(v804 + 1) == 7667826
                                        && v804[3] == 101)
                                      {
                                        LOBYTE(v18) = 0;
                                        *j = v804 + 4;
                                        v890 = 11;
                                        goto LABEL_2090;
                                      }
                                    }
                                    else if ((_DWORD)v31 == 110
                                           && (uint64_t)(v40 - (_QWORD)v804) >= 7
                                           && *(_DWORD *)(v804 + 1) == 7078005
                                           && v804[3] == 108)
                                    {
                                      LOBYTE(v18) = 0;
                                      *j = v804 + 4;
                                      v890 = 13;
                                      goto LABEL_2090;
                                    }
                                    *(_QWORD *)(a1 + 32) = v804;
                                    LODWORD(v1328) = (_DWORD)v804;
                                    if ((unint64_t)v804 < v40)
                                    {
                                      v1328 = v804;
                                      do
                                      {
                                        v1329 = *v1328;
                                        v1331 = (v1329 | 0x20u) - 97 >= 0x1A
                                             && (v1329 - 48) >= 0xA
                                             && (v1329 - 8204) >= 2;
                                        if (v1331 && v1329 != 95 && v1329 != 36)
                                          break;
                                        *j = ++v1328;
                                      }
                                      while ((unint64_t)v1328 < v40);
                                    }
                                    LOBYTE(v18) = 0;
                                    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1328 - (_DWORD)v804) >> 1);
                                    *(_BYTE *)(a1 + 24) = 5;
                                    goto LABEL_2815;
                                  case 6:
                                    v891 = 0;
                                    if ((unint64_t)v804 < v40 && (_DWORD)v31 == 45)
                                    {
                                      *j = v804 + 1;
                                      v891 = 1;
                                    }
                                    v892 = &v804[v891];
                                    if ((unint64_t)v892 >= v40)
                                      goto LABEL_2724;
                                    v893 = *v892;
                                    if (v893 == 48)
                                    {
                                      v896 = v891 + 1;
                                    }
                                    else
                                    {
                                      if ((v893 - 49) > 8)
                                      {
LABEL_2724:
                                        v1292 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1293 = v1292;
                                        v1294 = "Invalid number";
                                        *(_QWORD *)v1292 = v12;
                                        goto LABEL_2725;
                                      }
                                      v894 = v891 + 1;
                                      v895 = 2 * v891 + 2;
                                      do
                                      {
                                        v896 = v894;
                                        if ((unint64_t)v804 + v895 >= v40)
                                          break;
                                        ++v894;
                                        v895 += 2;
                                      }
                                      while (v804[v896] - 48 < 0xA);
                                    }
                                    v897 = &v804[v896];
                                    *j = v897;
                                    if ((unint64_t)v897 >= v40)
                                      goto LABEL_2978;
                                    v898 = *v897;
                                    if (v898 == 101 || v898 == 69)
                                      goto LABEL_2978;
                                    if (v898 == 46)
                                    {
                                      v1409 = v897 + 1;
                                      *j = v1409;
                                      if ((unint64_t)v1409 >= v40 || *v1409 - 48 > 9)
                                      {
                                        v1292 = WTF::fastCompactMalloc((WTF *)0x20);
                                        v1293 = v1292;
                                        v25.i64[0] = 0x2200000002;
                                        v1294 = "Invalid digits after decimal point";
LABEL_2994:
                                        *(_QWORD *)v1292 = v25.i64[0];
LABEL_2725:
                                        *(_QWORD *)(v1292 + 8) = v1294;
                                        *(_DWORD *)(v1292 + 16) = 4;
                                        v1295 = *v1568;
                                        *v1568 = (WTF::StringImpl *)v1293;
                                        if (v1295)
                                        {
                                          if (*(_DWORD *)v1295 != 2)
                                          {
                                            LOBYTE(v18) = 0;
                                            *(_DWORD *)v1295 -= 2;
LABEL_2815:
                                            v1580 = v1583[0];
LABEL_2482:
                                            v16 = (unint64_t)v1582;
                                            v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                            goto LABEL_1739;
                                          }
                                          WTF::StringImpl::~StringImpl(v1295, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                          WTF::fastFree(v1452, v1453, v1454, v1455, v1456, v1457, v1458, v1459);
                                        }
                                        LOBYTE(v18) = 0;
                                        goto LABEL_2815;
                                      }
                                      v1410 = (unint64_t)&v804[v896 + 2];
                                      do
                                      {
                                        v897 = (unsigned __int16 *)v1410;
                                        if (v1410 >= v40)
                                          break;
                                        v1410 += 2;
                                      }
                                      while (*v897 - 48 < 0xA);
                                      *j = v897;
                                    }
                                    else if (v896 <= 9)
                                    {
                                      *v20 = 6;
                                      if ((_DWORD)v31 == 45)
                                      {
                                        if (v896 < 2)
                                          goto LABEL_3148;
                                        ++v804;
                                        v16 = (unint64_t)v1582;
                                        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                      }
                                      v899 = 0;
                                      do
                                      {
                                        v900 = *v804++;
                                        v899 = v900 + 10 * v899 - 48;
                                      }
                                      while (v804 < v897);
                                      if ((_DWORD)v31 != 45)
                                      {
                                        LOBYTE(v18) = 0;
                                        *(double *)v25.i64 = (double)v899;
                                        *(double *)(a1 + 32) = (double)v899;
                                        goto LABEL_1915;
                                      }
                                      if (v899)
                                      {
                                        LOBYTE(v18) = 0;
                                        *(double *)v25.i64 = (double)-v899;
LABEL_2992:
                                        *(_QWORD *)(a1 + 32) = v25.i64[0];
                                        goto LABEL_2815;
                                      }
LABEL_3148:
                                      LOBYTE(v18) = 0;
                                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                      goto LABEL_2815;
                                    }
LABEL_2978:
                                    if ((unint64_t)v897 >= v40 || (*v897 | 0x20) != 0x65)
                                    {
LABEL_2990:
                                      *v20 = 6;
                                      LODWORD(v40) = (_DWORD)v897 - (_DWORD)v804;
                                      if ((char *)v897 - (char *)v804 <= -2)
                                        goto LABEL_1656;
                                      *(_QWORD *)task_info_out = 0;
                                      fast_float::from_chars_advanced<double,char16_t>(v804, v897, (double *)task_info_out, 0x2E00000005);
                                      LOBYTE(v18) = 0;
                                      v25.i64[0] = *(_QWORD *)task_info_out;
                                      goto LABEL_2992;
                                    }
                                    v1411 = v897 + 1;
                                    *j = v897 + 1;
                                    if ((unint64_t)(v897 + 1) < v40)
                                    {
                                      v1412 = *v1411;
                                      if (v1412 == 45 || v1412 == 43)
                                      {
                                        v1411 = v897 + 2;
                                        *j = v897 + 2;
                                      }
                                    }
                                    if ((unint64_t)v1411 < v40 && *v1411 - 48 <= 9)
                                    {
                                      v1413 = v1411 + 1;
                                      do
                                      {
                                        v897 = v1413;
                                        if ((unint64_t)v1413 >= v40)
                                          break;
                                        ++v1413;
                                      }
                                      while (*v897 - 48 < 0xA);
                                      *j = v897;
                                      goto LABEL_2990;
                                    }
                                    v1292 = WTF::fastCompactMalloc((WTF *)0x20);
                                    v1293 = v1292;
                                    v25.i64[0] = 0x5D00000002;
                                    v1294 = "Exponent symbols should be followed by an optional '+' or '-' and then by at"
                                            " least one number";
                                    goto LABEL_2994;
                                  case 0x12:
                                  case 0x13:
                                    goto LABEL_2367;
                                  default:
                                    LOBYTE(v18) = 0;
                                    *v20 = *(_BYTE *)(v29 + v31);
                                    *j = v804 + 1;
                                    goto LABEL_1915;
                                }
                              }
                              v1021 = WTF::fastCompactMalloc((WTF *)0x20);
                              v25.i64[0] = 0xC00000002;
                              *(_QWORD *)v1021 = 0xC00000002;
                              *(_QWORD *)(v1021 + 8) = "Expected '}'";
                              *(_DWORD *)(v1021 + 16) = 4;
                              v1022 = *(WTF::StringImpl **)v1579;
                              *(_QWORD *)v1579 = v1021;
                              if (!v1022)
                                goto LABEL_2366;
                              v1023 = *(_DWORD *)v1022 - 2;
                              if (*(_DWORD *)v1022 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1022, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                WTF::fastFree(v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
                                goto LABEL_2366;
                              }
                              v1580 = 0;
                              LOBYTE(v18) = 0;
                              *(_DWORD *)v1022 = v1023;
                              v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1739:
                              if (!v10)
                                goto LABEL_1658;
                              LODWORD(v40) = *(_DWORD *)v10 - 2;
                              if (*(_DWORD *)v10 != 2)
                                goto LABEL_1657;
                              WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                              v733 = *(_QWORD *)(StatusReg + 752);
                              if (!v733)
                              {
                                pas_try_deallocate_slow_no_cache((unint64_t)v10, (uint64_t)&bmalloc_heap_config, 1);
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                goto LABEL_1658;
                              }
                              if ((unint64_t)v10 >> 43
                                || ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                                     + (((unint64_t)v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) == 0)
                              {
                                if ((unint64_t)v10 >> 24 < *off_1ECF425F8
                                  || off_1ECF425F8[1] <= (unint64_t)v10 >> 24)
                                {
                                  v31 = 0;
                                }
                                else
                                {
                                  v31 = (*(_DWORD *)((char *)off_1ECF425F8
                                                   + (((((unint64_t)v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                   + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                                  if ((_DWORD)v31 == 1)
                                    goto LABEL_1744;
                                }
                                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v733, (unint64_t)v10, 1, v31, a5, a6, a7, a8);
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
LABEL_1658:
                                v231 = v1581;
                                if ((v18 & 1) == 0)
                                  return v1580;
                              }
                              else
                              {
LABEL_1744:
                                v734 = *(unsigned int *)(v733 + 8000);
                                if (v734 >= 0x3E7)
                                {
                                  pas_thread_local_cache_append_deallocation_slow(v733, (uint64_t)v10, (os_unfair_lock_s *)5, v31, a5, a6, a7, a8);
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  goto LABEL_1658;
                                }
                                *(_QWORD *)(v733 + 8 * v734) = (unint64_t)v10 | 0x5000000000000;
                                *(_DWORD *)(v733 + 8000) = v734 + 1;
                                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                v231 = v1581;
                                if ((v18 & 1) == 0)
                                  return v1580;
                              }
                              continue;
                            case 6:
                              v819 = 0;
                              if ((unint64_t)v700 < v699 && (_DWORD)v31 == 45)
                              {
                                *j = v700 + 1;
                                v819 = 1;
                              }
                              v820 = &v700[v819];
                              if ((unint64_t)v820 >= v699)
                                goto LABEL_2583;
                              v821 = *v820;
                              if (v821 == 48)
                              {
                                v824 = v819 + 1;
                              }
                              else
                              {
                                if ((v821 - 49) > 8)
                                {
LABEL_2583:
                                  v1200 = WTF::fastCompactMalloc((WTF *)0x20);
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  v1201 = v1200;
                                  *(_QWORD *)v1200 = v12;
                                  *(_QWORD *)(v1200 + 8) = "Invalid number";
                                  *(_DWORD *)(v1200 + 16) = 4;
                                  v1202 = *v1568;
                                  *v1568 = (WTF::StringImpl *)v1201;
                                  if (!v1202)
                                    goto LABEL_1697;
LABEL_2584:
                                  if (*(_DWORD *)v1202 != 2)
                                  {
                                    *(_DWORD *)v1202 -= 2;
                                    v16 = (unint64_t)v1582;
                                    goto LABEL_1697;
                                  }
                                  WTF::StringImpl::~StringImpl(v1202, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                                  WTF::fastFree(v1320, v1321, v1322, v1323, v1324, v1325, v1326, v1327);
                                  goto LABEL_2761;
                                }
                                v822 = v819 + 1;
                                v823 = 2 * v819 + 2;
                                do
                                {
                                  v824 = v822;
                                  if ((unint64_t)v700 + v823 >= v699)
                                    break;
                                  ++v822;
                                  v823 += 2;
                                }
                                while (v700[v824] - 48 < 0xA);
                              }
                              v825 = &v700[v824];
                              *j = v825;
                              if ((unint64_t)v825 >= v699)
                                goto LABEL_2746;
                              v826 = *v825;
                              if (v826 == 101 || v826 == 69)
                                goto LABEL_2746;
                              if (v826 == 46)
                              {
                                v1297 = v825 + 1;
                                *j = v1297;
                                if ((unint64_t)v1297 >= v699 || *v1297 - 48 > 9)
                                {
                                  v1302 = WTF::fastCompactMalloc((WTF *)0x20);
                                  v1303 = v1302;
                                  v25.i64[0] = 0x2200000002;
                                  v1304 = "Invalid digits after decimal point";
LABEL_2763:
                                  *(_QWORD *)v1302 = v25.i64[0];
                                  *(_QWORD *)(v1302 + 8) = v1304;
                                  *(_DWORD *)(v1302 + 16) = 4;
                                  v1202 = *v1568;
                                  *v1568 = (WTF::StringImpl *)v1303;
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  if (!v1202)
                                    goto LABEL_1697;
                                  goto LABEL_2584;
                                }
                                v1298 = (unint64_t)&v700[v824 + 2];
                                do
                                {
                                  v825 = (unsigned __int16 *)v1298;
                                  if (v1298 >= v699)
                                    break;
                                  v1298 += 2;
                                }
                                while (*v825 - 48 < 0xA);
                                *j = v825;
                              }
                              else if (v824 <= 9)
                              {
                                *v20 = 6;
                                if ((_DWORD)v31 == 45)
                                {
                                  if (v824 < 2)
                                    goto LABEL_2795;
                                  ++v700;
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                }
                                v827 = 0;
                                do
                                {
                                  v828 = *v700++;
                                  v827 = v828 + 10 * v827 - 48;
                                }
                                while (v700 < v825);
                                if ((_DWORD)v31 != 45)
                                {
                                  *(double *)v25.i64 = (double)v827;
                                  *(double *)(a1 + 32) = (double)v827;
                                  goto LABEL_1697;
                                }
                                if (v827)
                                {
                                  *(double *)v25.i64 = (double)-v827;
LABEL_2760:
                                  *(_QWORD *)(a1 + 32) = v25.i64[0];
LABEL_2761:
                                  v16 = (unint64_t)v1582;
                                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                                  goto LABEL_1697;
                                }
LABEL_2795:
                                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                                goto LABEL_2761;
                              }
LABEL_2746:
                              if ((unint64_t)v825 >= v699 || (*v825 | 0x20) != 0x65)
                              {
LABEL_2758:
                                *v20 = 6;
                                v40 = (char *)v825 - (char *)v700;
                                if ((uint64_t)v40 <= -2)
                                  goto LABEL_1656;
                                *(_QWORD *)task_info_out = 0;
                                fast_float::from_chars_advanced<double,char16_t>(v700, (unsigned __int16 *)((char *)v700 + v40), (double *)task_info_out, 0x2E00000005);
                                v25.i64[0] = *(_QWORD *)task_info_out;
                                goto LABEL_2760;
                              }
                              v1299 = v825 + 1;
                              *j = v825 + 1;
                              if ((unint64_t)(v825 + 1) < v699)
                              {
                                v1300 = *v1299;
                                if (v1300 == 45 || v1300 == 43)
                                {
                                  v1299 = v825 + 2;
                                  *j = v825 + 2;
                                }
                              }
                              if ((unint64_t)v1299 < v699 && *v1299 - 48 <= 9)
                              {
                                v1301 = v1299 + 1;
                                do
                                {
                                  v825 = v1301;
                                  if ((unint64_t)v1301 >= v699)
                                    break;
                                  ++v1301;
                                }
                                while (*v825 - 48 < 0xA);
                                *j = v825;
                                goto LABEL_2758;
                              }
                              v1302 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1303 = v1302;
                              v25.i64[0] = 0x5D00000002;
                              v1304 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                              goto LABEL_2763;
                            case 0x12:
                            case 0x13:
                              goto LABEL_2341;
                            default:
                              *v20 = v702;
                              *j = v700 + 1;
                              goto LABEL_1696;
                          }
                        case 5:
                          if ((_DWORD)v31 == 102)
                          {
                            if ((uint64_t)(v40 - (_QWORD)v696) >= 9
                              && *(_DWORD *)(v696 + 1) == 7077985
                              && *(_DWORD *)(v696 + 3) == 6619251)
                            {
                              *j = v696 + 5;
                              *v20 = 12;
                              goto LABEL_1736;
                            }
                          }
                          else if ((_DWORD)v31 == 116)
                          {
                            if ((uint64_t)(v40 - (_QWORD)v696) >= 7
                              && *(_DWORD *)(v696 + 1) == 7667826
                              && v696[3] == 101)
                            {
                              *j = v696 + 4;
                              *v20 = 11;
                              goto LABEL_1736;
                            }
                          }
                          else if ((_DWORD)v31 == 110
                                 && (uint64_t)(v40 - (_QWORD)v696) >= 7
                                 && *(_DWORD *)(v696 + 1) == 7078005
                                 && v696[3] == 108)
                          {
                            *j = v696 + 4;
                            *v20 = 13;
                            goto LABEL_1736;
                          }
                          *(_QWORD *)(a1 + 32) = v696;
                          LODWORD(v1192) = (_DWORD)v696;
                          if ((unint64_t)v696 < v40)
                          {
                            v1192 = v696;
                            do
                            {
                              v1193 = *v1192;
                              v1195 = (v1193 | 0x20u) - 97 >= 0x1A
                                   && (v1193 - 48) >= 0xA
                                   && (v1193 - 8204) >= 2;
                              if (v1195 && v1193 != 95 && v1193 != 36)
                                break;
                              *j = ++v1192;
                            }
                            while ((unint64_t)v1192 < v40);
                          }
                          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v1192 - (_DWORD)v696) >> 1);
                          *(_BYTE *)(a1 + 24) = 5;
                          v16 = (unint64_t)v1582;
                          goto LABEL_1736;
                        case 6:
                          v803 = 0;
                          if ((unint64_t)v696 < v40 && (_DWORD)v31 == 45)
                          {
                            *j = v696 + 1;
                            v803 = 1;
                          }
                          v837 = &v696[v803];
                          if ((unint64_t)v837 >= v40)
                            goto LABEL_2520;
                          v838 = *v837;
                          if (v838 == 48)
                          {
                            v841 = v803 + 1;
                          }
                          else
                          {
                            if ((v838 - 49) > 8)
                            {
LABEL_2520:
                              v1165 = WTF::fastCompactMalloc((WTF *)0x20);
                              *(_QWORD *)v1165 = v12;
                              *(_QWORD *)(v1165 + 8) = "Invalid number";
                              *(_DWORD *)(v1165 + 16) = 4;
                              v1166 = *v1568;
                              *v1568 = (WTF::StringImpl *)v1165;
                              if (!v1166)
                                goto LABEL_1736;
LABEL_2521:
                              if (*(_DWORD *)v1166 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1166, v1158, v1159, v1160, v1161, v1162, v1163, v1164);
                                WTF::fastFree(v1284, v1285, v1286, v1287, v1288, v1289, v1290, v1291);
                              }
                              else
                              {
                                *(_DWORD *)v1166 -= 2;
                              }
                              v16 = (unint64_t)v1582;
                              goto LABEL_1736;
                            }
                            v839 = v803 + 1;
                            v840 = 2 * v803 + 2;
                            do
                            {
                              v841 = v839;
                              if ((unint64_t)v696 + v840 >= v40)
                                break;
                              ++v839;
                              v840 += 2;
                            }
                            while (v696[v841] - 48 < 0xA);
                          }
                          v842 = &v696[v841];
                          *j = v842;
                          if ((unint64_t)v842 >= v40)
                            goto LABEL_2665;
                          v843 = *v842;
                          if (v843 == 101 || v843 == 69)
                            goto LABEL_2665;
                          if (v843 == 46)
                          {
                            v1258 = v842 + 1;
                            *j = v1258;
                            if ((unint64_t)v1258 >= v40 || *v1258 - 48 > 9)
                            {
                              v1264 = WTF::fastCompactMalloc((WTF *)0x20);
                              v1265 = v1264;
                              v1266 = 0x2200000002;
                              v1267 = "Invalid digits after decimal point";
LABEL_2681:
                              *(_QWORD *)v1264 = v1266;
                              *(_QWORD *)(v1264 + 8) = v1267;
                              *(_DWORD *)(v1264 + 16) = 4;
                              v1166 = *v1568;
                              *v1568 = (WTF::StringImpl *)v1265;
                              v16 = (unint64_t)v1582;
                              if (!v1166)
                                goto LABEL_1736;
                              goto LABEL_2521;
                            }
                            v1259 = (unint64_t)&v696[v841 + 2];
                            do
                            {
                              v842 = (unsigned __int16 *)v1259;
                              if (v1259 >= v40)
                                break;
                              v1259 += 2;
                            }
                            while (*v842 - 48 < 0xA);
                            *j = v842;
                          }
                          else if (v841 <= 9)
                          {
                            *v20 = 6;
                            if ((_DWORD)v31 == 45)
                            {
                              if (v841 < 2)
                                goto LABEL_2723;
                              ++v696;
                              v16 = (unint64_t)v1582;
                            }
                            v844 = 0;
                            do
                            {
                              v845 = *v696++;
                              v844 = v845 + 10 * v844 - 48;
                            }
                            while (v696 < v842);
                            if ((_DWORD)v31 != 45)
                            {
                              *(double *)(a1 + 32) = (double)v844;
                              goto LABEL_1736;
                            }
                            if (v844)
                            {
                              v1263 = (double)-v844;
LABEL_2679:
                              *(double *)(a1 + 32) = v1263;
                              v16 = (unint64_t)v1582;
                              goto LABEL_1736;
                            }
LABEL_2723:
                            *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                            v16 = (unint64_t)v1582;
                            goto LABEL_1736;
                          }
LABEL_2665:
                          if ((unint64_t)v842 >= v40 || (*v842 | 0x20) != 0x65)
                          {
LABEL_2677:
                            *v20 = 6;
                            LODWORD(v40) = (_DWORD)v842 - (_DWORD)v696;
                            if ((char *)v842 - (char *)v696 <= -2)
                              goto LABEL_1656;
                            *(_QWORD *)task_info_out = 0;
                            fast_float::from_chars_advanced<double,char16_t>(v696, v842, (double *)task_info_out, 0x2E00000005);
                            v1263 = *(double *)task_info_out;
                            goto LABEL_2679;
                          }
                          v1260 = v842 + 1;
                          *j = v842 + 1;
                          if ((unint64_t)(v842 + 1) < v40)
                          {
                            v1261 = *v1260;
                            if (v1261 == 45 || v1261 == 43)
                            {
                              v1260 = v842 + 2;
                              *j = v842 + 2;
                            }
                          }
                          if ((unint64_t)v1260 < v40 && *v1260 - 48 <= 9)
                          {
                            v1262 = v1260 + 1;
                            do
                            {
                              v842 = v1262;
                              if ((unint64_t)v1262 >= v40)
                                break;
                              ++v1262;
                            }
                            while (*v842 - 48 < 0xA);
                            *j = v842;
                            goto LABEL_2677;
                          }
                          v1264 = WTF::fastCompactMalloc((WTF *)0x20);
                          v1265 = v1264;
                          v1266 = 0x5D00000002;
                          v1267 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                          goto LABEL_2681;
                        case 0x12:
                        case 0x13:
                          goto LABEL_2328;
                        default:
                          *v20 = v698;
                          *j = v696 + 1;
                          goto LABEL_1685;
                      }
                    }
                    JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v231 - 22816), *(_WORD *)v18, v31, a5, a6, a7, a8, task_info_out);
                  }
                  else
                  {
                    if (v689 < 0x1C)
                      goto LABEL_1664;
                    WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v688 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
                  }
                  v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                  v10 = *(WTF::AtomStringImpl **)task_info_out;
                  goto LABEL_1675;
                }
                v1138 = *(_DWORD *)(a1 + 28);
                v18 = v1138 & 0x7FFFFFFF;
                if ((v1138 & 0x7FFFFFFF) != 0)
                {
                  v1139 = *(uint8x8_t **)(a1 + 32);
                  a2 = v1139->u8[0];
                  if ((_DWORD)v18 != 1)
                  {
                    if (v18 < 0x1C)
                    {
                      v1140 = ((((_DWORD)a2 << 6) | (v1139->u8[v18 - 1] << 14)) ^ a2) + v1139->u8[v18 - 1];
                      v1141 = (v1140 + (v1140 >> 6));
                      v1142 = v1581 + (v1141 << 6);
                      if ((_DWORD)v18 != *(unsigned __int16 *)(v1142 + 54))
                      {
LABEL_2699:
                        WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1138 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
                        v10 = *(WTF::AtomStringImpl **)task_info_out;
                        JSC::Identifier::operator=((WTF::StringImpl **)(v1142 + 56), *(WTF::AtomStringImpl **)task_info_out, v1272, v1273, v1274, v1275, v1276, v1277);
                        *(_WORD *)(v1142 + 54) = v1138;
                        v1278 = 2 * v18;
                        do
                        {
                          v1279 = v1139->u8[0];
                          v1139 = (uint8x8_t *)((char *)v1139 + 1);
                          *(_WORD *)v1142 = v1279;
                          v1142 += 2;
                          v1278 -= 2;
                        }
                        while (v1278);
                        goto LABEL_2519;
                      }
                      if (v18 >= 8)
                      {
                        v1143 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v1142, (int16x8_t)vmovl_u8(*v1139));
                        v1143.i16[0] = vminvq_u16(v1143);
                        if (v1143.i32[0])
                        {
                          v1144 = v1138 & 7;
                          v1145 = (int16x8_t *)(v1581 + ((2 * v1144) | (v1141 << 6)));
                          while (1)
                          {
                            v25 = (int32x4_t)vceqq_s16(*v1145, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v1139 + v1144)));
                            v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                            if (!v25.i32[0])
                              break;
                            v1144 += 8;
                            ++v1145;
                            if (v1144 >= v18)
                              goto LABEL_2502;
                          }
                        }
                        goto LABEL_2699;
                      }
                      if (v18 < 4)
                      {
                        if (((v1139->u16[0] | (v1139->u16[0] << 8)) & 0xFF00FF) != *(_DWORD *)v1142
                          || ((*(unsigned __int16 *)((char *)v1139->u16 + (v1138 & 1)) | (*(unsigned __int16 *)((char *)v1139->u16 + (v1138 & 1)) << 8)) & 0xFF00FF) != *(_DWORD *)(v1142 + 2 * (v1138 & 1)))
                        {
                          goto LABEL_2699;
                        }
                      }
                      else
                      {
                        v1196 = (v1139->u32[0] | ((unint64_t)v1139->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                        v1197 = (*(unsigned int *)((char *)v1139->u32 + (v1138 & 3)) | ((unint64_t)*(unsigned int *)((char *)v1139->u32 + (v1138 & 3)) << 16)) & 0xFFFF0000FFFFLL;
                        v1198 = (v1197 | (v1197 << 8)) & 0xFF00FF00FF00FFLL;
                        if (((v1196 | (v1196 << 8)) & 0xFF00FF00FF00FFLL) != *(_QWORD *)v1142
                          || v1198 != *(_QWORD *)(v1142 + 2 * (v1138 & 3)))
                        {
                          goto LABEL_2699;
                        }
                      }
LABEL_2502:
                      v1146 = v1581 + (v1141 << 6);
                      goto LABEL_2593;
                    }
                    WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1138 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
LABEL_3305:
                    v10 = *(WTF::AtomStringImpl **)task_info_out;
                    goto LABEL_2519;
                  }
                  v1526 = (JSC::SmallStrings *)(v1581 - 22816);
LABEL_3300:
                  JSC::SmallStrings::singleCharacterStringRep(v1526, a2, v31, a5, a6, a7, a8, &v1591);
                  v10 = (WTF::AtomStringImpl *)v1591;
                  goto LABEL_2519;
                }
LABEL_3353:
                v10 = (WTF::AtomStringImpl *)&WTF::StringImpl::s_emptyAtomString;
                goto LABEL_2594;
              }
              break;
            }
            v1132 = *(_DWORD *)(a1 + 28);
            v18 = v1132 & 0x7FFFFFFF;
            if ((v1132 & 0x7FFFFFFF) == 0)
              goto LABEL_3353;
            v1133 = *(int16x8_t **)(a1 + 32);
            v1134 = v1133->u16[0];
            if ((_DWORD)v18 == 1)
            {
              if (v1134 <= 0xFF)
              {
                v1526 = (JSC::SmallStrings *)(v1581 - 22816);
                LODWORD(a2) = v1133->i16[0];
                goto LABEL_3300;
              }
            }
            else if (v18 >= 0x1C)
            {
              WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1132 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
              goto LABEL_3305;
            }
            v1135 = (v1134 << 6) ^ (v1133->u16[v18 - 1] << 14) ^ v1134;
            v1136 = (v1135 + (v1135 >> 14) + ((v1135 + (v1135 >> 14)) >> 6));
            v693 = (__int16 *)(v1581 + (v1136 << 6));
            v1137 = v693 + 27;
            if ((_DWORD)v18 == (unsigned __int16)v693[27])
            {
              if ((_DWORD)v18 == 1)
              {
                if ((unsigned __int16)*v693 == v1134)
                {
LABEL_2592:
                  v1146 = v1581 + (v1136 << 6);
LABEL_2593:
                  v10 = *(WTF::AtomStringImpl **)(v1146 + 56);
LABEL_2594:
                  *(_DWORD *)v10 += 2;
                  goto LABEL_2519;
                }
                WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1132 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
                v1546 = (WTF::StringImpl **)(v1581 + (v1136 << 6) + 56);
                v10 = *(WTF::AtomStringImpl **)task_info_out;
                JSC::Identifier::operator=(v1546, *(WTF::AtomStringImpl **)task_info_out, v1547, v1548, v1549, v1550, v1551, v1552);
                *v1137 = v1132;
LABEL_3358:
                v1157 = v1133->i16[0];
LABEL_2518:
                *v693 = v1157;
LABEL_2519:
                v16 = (unint64_t)v1582;
LABEL_2515:
                v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
                goto LABEL_1675;
              }
              switch(31 - __clz(v18 - 1))
              {
                case 0u:
                  v1204 = *(_DWORD *)v693;
                  v1205 = v1133->i32[0];
                  goto LABEL_2591;
                case 1u:
                  if (*(_DWORD *)v693 != v1133->i32[0])
                    goto LABEL_3341;
                  v1204 = *(_DWORD *)&v693[v18 - 2];
                  v1205 = *(__int32 *)((char *)&v1133->i32[-1] + 2 * v18);
LABEL_2591:
                  if (v1204 == v1205)
                    goto LABEL_2592;
                  goto LABEL_3341;
                case 2u:
                  if (*(_QWORD *)v693 != v1133->i64[0]
                    || *(_QWORD *)&v693[v18 - 4] != *(uint64_t *)((char *)&v1133->i64[-1] + 2 * v18))
                  {
                    goto LABEL_3341;
                  }
                  goto LABEL_2592;
                case 3u:
                  v25 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v693[v18 - 8], *(int16x8_t *)((char *)v1133 + 2 * v18 - 16)), (int8x16_t)vceqq_s16(*(int16x8_t *)v693, *v1133));
                  v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                  if (!v25.i32[0])
                    goto LABEL_3341;
                  goto LABEL_2592;
                default:
                  v25 = (int32x4_t)vceqq_s16(*(int16x8_t *)v693, *v1133);
                  v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                  if (!v25.i32[0])
                    goto LABEL_3341;
                  v1537 = v1132 & 7;
                  if ((*(_DWORD *)(a1 + 28) & 7u) >= v18)
                    goto LABEL_2592;
                  v1538 = (int16x8_t *)((char *)v1133 + 2 * v1537);
                  v1539 = (int16x8_t *)(v1581 + ((2 * v1537) | (v1136 << 6)));
                  break;
              }
              while (1)
              {
                v25 = (int32x4_t)vceqq_s16(*v1539, *v1538);
                v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                if (!v25.i32[0])
                  break;
                v1537 += 8;
                ++v1538;
                ++v1539;
                if (v1537 >= v18)
                  goto LABEL_2592;
              }
            }
LABEL_3341:
            WTF::AtomStringImpl::add(*(_QWORD *)(a1 + 32), v1132 & 0x7FFFFFFF, v31, a5, a6, a7, a8, task_info_out);
            v10 = *(WTF::AtomStringImpl **)task_info_out;
            JSC::Identifier::operator=((WTF::StringImpl **)v693 + 7, *(WTF::AtomStringImpl **)task_info_out, v1540, v1541, v1542, v1543, v1544, v1545);
            *v1137 = v1132;
            if (v18 != 1)
            {
              if ((v1132 & 0x7FFFFFFF) != 0)
                memcpy(v693, v1133, 2 * v18);
              goto LABEL_2519;
            }
            goto LABEL_3358;
          }
          v32 = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
LABEL_368:
          v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
          if (v32 == 4)
            goto LABEL_366;
          if (v32 == 3)
          {
            v31 = *(_QWORD *)(a1 + 48);
            for (i = *(_QWORD *)(a1 + 56); v31 < i; *j = v31)
            {
              if (*(unsigned __int16 *)v31 > 0xFFu
                || JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] != 19)
              {
                break;
              }
              v31 += 2;
            }
            if (v31 == i)
            {
              *v20 = 14;
              return v1583[0];
            }
            *v20 = 18;
            v40 = *(unsigned __int16 *)v31;
            if (v40 > 0xFF)
              goto LABEL_995;
            v234 = JSC::tokenTypesOfLatin1Characters[v40];
            if (v234 <= 4)
            {
              if (v234 == 4)
              {
                v235 = *(unsigned __int8 *)(a1 + 40);
                if ((_DWORD)v40 != 39)
                {
                  a3 = v31 + 2;
                  *j = v31 + 2;
                  if (!v235)
                  {
                    v236 = i - a3;
                    if ((uint64_t)(i - a3) <= -2)
                      goto LABEL_1656;
                    v237 = (int16x8_t *)((v236 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
                    if ((unint64_t)v236 <= 0xE)
                    {
                      if (i != a3)
                      {
                        v590 = 2 * (v236 >> 1);
                        v591 = (int16x8_t *)(v31 + 2);
                        while (1)
                        {
                          v592 = v591->u16[0];
                          if (v592 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v592])
                            break;
                          v591 = (int16x8_t *)((char *)v591 + 2);
                          v590 -= 2;
                          if (!v590)
                            goto LABEL_459;
                        }
                        v237 = v591;
                      }
                      goto LABEL_459;
                    }
                    v238 = v31 + 2;
                    if (v236 < 15)
                    {
LABEL_388:
                      if (v238 >= (unint64_t)v237)
                        goto LABEL_459;
                      v246 = (unsigned __int16 *)&v237[-1];
                      v247 = v237[-1];
                      v248.i64[0] = 0x22002200220022;
                      v248.i64[1] = 0x22002200220022;
                      v249 = (int8x16_t)vceqq_s16(v247, v248);
                      v250.i64[0] = 0x5C005C005C005CLL;
                      v250.i64[1] = 0x5C005C005C005CLL;
                      v251.i64[0] = 0x20002000200020;
                      v251.i64[1] = 0x20002000200020;
                      v245 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v247, v250), (int8x16_t)vcgtq_u16(v251, (uint16x8_t)v247)), v249);
                      v249.i16[0] = vmaxvq_u16((uint16x8_t)v245);
                      if (!v249.i32[0])
                        goto LABEL_459;
                    }
                    else
                    {
                      v239 = v31 + 16;
                      v240.i64[0] = 0x22002200220022;
                      v240.i64[1] = 0x22002200220022;
                      v241.i64[0] = 0x5C005C005C005CLL;
                      v241.i64[1] = 0x5C005C005C005CLL;
                      v242.i64[0] = 0x20002000200020;
                      v242.i64[1] = 0x20002000200020;
                      while (1)
                      {
                        v243 = *(int16x8_t *)(v239 - 14);
                        v244 = (int8x16_t)vceqq_s16(v243, v240);
                        v245 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v243, v241), (int8x16_t)vcgtq_u16(v242, (uint16x8_t)v243)), v244);
                        v244.i16[0] = vmaxvq_u16((uint16x8_t)v245);
                        if (v244.i32[0])
                          break;
                        v239 += 16;
                        if (v239 >= (unint64_t)v237)
                        {
                          v238 = v239 - 14;
                          goto LABEL_388;
                        }
                      }
                      v246 = (unsigned __int16 *)(v239 - 14);
                    }
                    v237 = (int16x8_t *)&v246[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v245))];
LABEL_459:
                    *j = v237;
LABEL_460:
                    if ((unint64_t)v237 < i && v237->u16[0] == (_DWORD)v40)
                    {
                      *(_BYTE *)(a1 + 25) &= ~1u;
                      *(_QWORD *)(a1 + 32) = a3;
                      *(_QWORD *)(a1 + 48) = (char *)v237->i64 + 2;
                      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v237 - a3) >> 1);
                      *(_BYTE *)(a1 + 24) = 4;
                    }
                    else
                    {
                      JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
                    }
                    return v1583[0];
                  }
LABEL_1204:
                  v237 = (int16x8_t *)a3;
                  if (a3 < i)
                  {
                    while (1)
                    {
                      v589 = v237->u16[0];
                      if (v589 < 0x20)
                      {
                        if (v589 != 9)
                          goto LABEL_460;
                      }
                      else if (v589 == (_DWORD)v40 || v589 > 0xFF || v589 == 92)
                      {
                        goto LABEL_460;
                      }
                      v237 = (int16x8_t *)((char *)v237 + 2);
                      *j = v237;
                      if ((unint64_t)v237 >= i)
                        goto LABEL_460;
                    }
                  }
                  goto LABEL_460;
                }
                if (*(_BYTE *)(a1 + 40))
                {
                  a3 = v31 + 2;
                  *j = v31 + 2;
                  goto LABEL_1204;
                }
                v552 = WTF::fastCompactMalloc((WTF *)0x20);
                v485 = (WTF::AtomStringImpl *)v552;
                v553 = 0x2900000002;
                v554 = "Single quotes (') are not allowed in JSON";
                goto LABEL_1093;
              }
              goto LABEL_400;
            }
            if (v234 == 5)
            {
              if ((_DWORD)v40 == 102)
              {
                if ((uint64_t)(i - v31) >= 9 && *(_DWORD *)(v31 + 2) == 7077985 && *(_DWORD *)(v31 + 6) == 6619251)
                {
                  *j = v31 + 10;
                  *v20 = 12;
                  return v1583[0];
                }
              }
              else if ((_DWORD)v40 == 116)
              {
                if ((uint64_t)(i - v31) >= 7 && *(_DWORD *)(v31 + 2) == 7667826 && *(_WORD *)(v31 + 6) == 101)
                {
                  *j = v31 + 8;
                  *v20 = 11;
                  return v1583[0];
                }
              }
              else if ((_DWORD)v40 == 110
                     && (uint64_t)(i - v31) >= 7
                     && *(_DWORD *)(v31 + 2) == 7078005
                     && *(_WORD *)(v31 + 6) == 108)
              {
                *j = v31 + 8;
                *v20 = 13;
                return v1583[0];
              }
              *(_QWORD *)(a1 + 32) = v31;
              LODWORD(v558) = v31;
              if (v31 < i)
              {
                v558 = (unsigned __int16 *)v31;
                do
                {
                  v559 = *v558;
                  v561 = (v559 | 0x20u) - 97 >= 0x1A
                      && (v559 - 48) >= 0xA
                      && (v559 - 8204) >= 2;
                  if (v561 && v559 != 95 && v559 != 36)
                    break;
                  *j = ++v558;
                }
                while ((unint64_t)v558 < i);
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v558 - v31) >> 1);
              *(_BYTE *)(a1 + 24) = 5;
              return v1583[0];
            }
            if (v234 != 6)
            {
              if (v234 - 18 >= 2)
              {
LABEL_400:
                *v20 = v234;
                *j = v31 + 2;
                return v1583[0];
              }
LABEL_995:
              WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
              v485 = *(WTF::AtomStringImpl **)task_info_out;
              if (!*(_QWORD *)task_info_out)
              {
                __break(0xC471u);
                JUMPOUT(0x198B34D5CLL);
              }
              goto LABEL_996;
            }
            v312 = 0;
            if (v31 < i && (_DWORD)v40 == 45)
            {
              *j = v31 + 2;
              v312 = 1;
            }
            v313 = (unsigned __int16 *)(v31 + 2 * v312);
            if ((unint64_t)v313 < i)
            {
              v314 = *v313;
              if (v314 == 48)
              {
                v317 = v312 + 1;
LABEL_552:
                v318 = (unsigned __int16 *)(v31 + 2 * v317);
                *j = v318;
                if ((unint64_t)v318 < i)
                {
                  v319 = *v318;
                  if (v319 != 101 && v319 != 69)
                  {
                    if (v319 == 46)
                    {
                      *j = v318 + 1;
                      if ((unint64_t)(v318 + 1) >= i || v318[1] - 48 > 9)
                      {
                        v552 = WTF::fastCompactMalloc((WTF *)0x20);
                        v485 = (WTF::AtomStringImpl *)v552;
                        v553 = 0x2200000002;
                        v554 = "Invalid digits after decimal point";
                        goto LABEL_1093;
                      }
                      v593 = v31 + 2 * v317 + 4;
                      do
                      {
                        v318 = (unsigned __int16 *)v593;
                        if (v593 >= i)
                          break;
                        v593 += 2;
                      }
                      while (*v318 - 48 < 0xA);
                      *j = v318;
                    }
                    else if (v317 <= 9)
                    {
                      *v20 = 6;
                      if ((_DWORD)v40 == 45)
                      {
                        if (v317 < 2)
                          goto LABEL_1257;
                        v31 += 2;
                      }
                      v320 = 0;
                      do
                      {
                        v321 = *(unsigned __int16 *)v31;
                        v31 += 2;
                        v320 = v321 + 10 * v320 - 48;
                      }
                      while (v31 < (unint64_t)v318);
                      if ((_DWORD)v40 != 45)
                      {
                        *(double *)(a1 + 32) = (double)v320;
                        return v1583[0];
                      }
                      if (v320)
                      {
                        *(double *)(a1 + 32) = (double)-v320;
                        return v1583[0];
                      }
LABEL_1257:
                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                      return v1583[0];
                    }
                  }
                }
                if ((unint64_t)v318 >= i || (*v318 | 0x20) != 0x65)
                {
LABEL_1238:
                  *v20 = 6;
                  LODWORD(v40) = (_DWORD)v318 - v31;
                  if ((uint64_t)((uint64_t)v318 - v31) <= -2)
                    goto LABEL_1656;
                  *(_QWORD *)task_info_out = 0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v318, (double *)task_info_out, 0x2E00000005);
                  *(_QWORD *)(a1 + 32) = *(_QWORD *)task_info_out;
                  return v1583[0];
                }
                v594 = v318 + 1;
                *j = v318 + 1;
                if ((unint64_t)(v318 + 1) < i)
                {
                  v595 = *v594;
                  if (v595 == 45 || v595 == 43)
                  {
                    v594 = v318 + 2;
                    *j = v318 + 2;
                  }
                }
                if ((unint64_t)v594 < i && *v594 - 48 <= 9)
                {
                  v596 = v594 + 1;
                  do
                  {
                    v318 = v596;
                    if ((unint64_t)v596 >= i)
                      break;
                    ++v596;
                  }
                  while (*v318 - 48 < 0xA);
                  *j = v318;
                  goto LABEL_1238;
                }
                v552 = WTF::fastCompactMalloc((WTF *)0x20);
                v485 = (WTF::AtomStringImpl *)v552;
                v553 = 0x5D00000002;
                v554 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1093:
                *(_QWORD *)v552 = v553;
                *(_QWORD *)(v552 + 8) = v554;
                *(_DWORD *)(v552 + 16) = 4;
LABEL_996:
                v486 = *v1568;
                *v1568 = v485;
                if (v486)
                {
                  if (*(_DWORD *)v486 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v486, v478, v479, v480, v481, v482, v483, v484);
                    WTF::fastFree(v490, v491, v492, v493, v494, v495, v496, v497);
                  }
                  else
                  {
                    *(_DWORD *)v486 -= 2;
                  }
                }
                return v1583[0];
              }
              if ((v314 - 49) <= 8)
              {
                v315 = v312 + 1;
                v316 = 2 * v312 + 2;
                do
                {
                  v317 = v315;
                  if (v31 + v316 >= i)
                    break;
                  ++v315;
                  v316 += 2;
                }
                while (*(unsigned __int16 *)(v31 + 2 * v317) - 48 < 0xA);
                goto LABEL_552;
              }
            }
            v552 = WTF::fastCompactMalloc((WTF *)0x20);
            v485 = (WTF::AtomStringImpl *)v552;
            v553 = 0xE00000002;
            v554 = "Invalid number";
            goto LABEL_1093;
          }
          goto LABEL_315;
        }
LABEL_354:
        v34 = (_WORD *)a3;
        if (a3 < v26)
        {
          do
          {
            v230 = (unsigned __int16)*v34;
            if (v230 < 0x20)
            {
              if (v230 != 9)
                break;
            }
            else if (v230 == (_DWORD)v31 || v230 > 0xFF || v230 == 92)
            {
              break;
            }
            *j = ++v34;
          }
          while ((unint64_t)v34 < v26);
        }
        v16 = (unint64_t)v1582;
        v29 = (unint64_t)JSC::tokenTypesOfLatin1Characters;
        goto LABEL_363;
      }
      if (*(_BYTE *)(a1 + 40))
      {
        a3 = (unint64_t)(v28 + 1);
        *j = v28 + 1;
        goto LABEL_354;
      }
      v487 = WTF::fastCompactMalloc((WTF *)0x20);
      v196 = (WTF::AtomStringImpl *)v487;
      v488 = 0x2900000002;
      v489 = "Single quotes (') are not allowed in JSON";
      goto LABEL_1000;
    }
    if ((v32 - 18) < 2)
    {
LABEL_310:
      WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
      v196 = *(WTF::AtomStringImpl **)task_info_out;
      if (!*(_QWORD *)task_info_out)
      {
        __break(0xC471u);
        JUMPOUT(0x198B33624);
      }
      **(_QWORD **)task_info_out = 0x1600000002;
      *(_OWORD *)((char *)v196 + 20) = xmmword_199158B20;
      *((_QWORD *)v196 + 1) = (char *)v196 + 20;
      *((_DWORD *)v196 + 4) = 0;
      *(_OWORD *)((char *)v196 + 36) = xmmword_199158B30;
      *(_QWORD *)((char *)v196 + 52) = 0x270020006E0065;
      *((_WORD *)v196 + 30) = *v28;
      *((_WORD *)v196 + 31) = 39;
      goto LABEL_312;
    }
    if (v32 == 5)
    {
      if ((_DWORD)v31 == 102)
      {
        if ((uint64_t)(v26 - (_QWORD)v28) >= 9 && *(_DWORD *)(v28 + 1) == 7077985 && *(_DWORD *)(v28 + 3) == 6619251)
        {
          *j = v28 + 5;
          *v20 = 12;
          goto LABEL_315;
        }
      }
      else if ((_DWORD)v31 == 110)
      {
        if ((uint64_t)(v26 - (_QWORD)v28) >= 7 && *(_DWORD *)(v28 + 1) == 7078005 && v28[3] == 108)
        {
          *j = v28 + 4;
          *v20 = 13;
          goto LABEL_315;
        }
      }
      else if ((_DWORD)v31 == 116
             && (uint64_t)(v26 - (_QWORD)v28) >= 7
             && *(_DWORD *)(v28 + 1) == 7667826
             && v28[3] == 101)
      {
        *j = v28 + 4;
        *v20 = 11;
        goto LABEL_315;
      }
      *(_QWORD *)(a1 + 32) = v28;
      LODWORD(v277) = (_DWORD)v28;
      if ((unint64_t)v28 < v26)
      {
        v277 = v28;
        do
        {
          v278 = *v277;
          v279 = (v278 | 0x20u) - 97 >= 0x1A && (v278 - 48) >= 0xA;
          v280 = v279 && (v278 - 8204) >= 2;
          if (v280 && v278 != 95 && v278 != 36)
            break;
          *j = ++v277;
        }
        while ((unint64_t)v277 < v26);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v277 - (_DWORD)v28) >> 1);
      *(_BYTE *)(a1 + 24) = 5;
      goto LABEL_315;
    }
    if (v32 != 6)
    {
      *v20 = v32;
      *j = v28 + 1;
      v16 = (unint64_t)v1582;
      goto LABEL_368;
    }
    v178 = 0;
    if ((unint64_t)v28 < v26 && (_DWORD)v31 == 45)
    {
      *j = v28 + 1;
      v178 = 1;
    }
    v179 = &v28[v178];
    if ((unint64_t)v179 < v26)
    {
      v180 = *v179;
      if (v180 == 48)
      {
        v183 = v178 + 1;
LABEL_299:
        v184 = &v28[v183];
        *j = v184;
        if ((unint64_t)v184 < v26)
        {
          v185 = *v184;
          if (v185 != 101 && v185 != 69)
          {
            if (v185 == 46)
            {
              v547 = v184 + 1;
              *j = v547;
              if ((unint64_t)v547 >= v26 || *v547 - 48 > 9)
              {
                v487 = WTF::fastCompactMalloc((WTF *)0x20);
                v196 = (WTF::AtomStringImpl *)v487;
                v488 = 0x2200000002;
                v489 = "Invalid digits after decimal point";
                goto LABEL_1000;
              }
              v548 = (unint64_t)&v28[v183 + 2];
              do
              {
                v184 = (unsigned __int16 *)v548;
                if (v548 >= v26)
                  break;
                v548 += 2;
              }
              while (*v184 - 48 < 0xA);
              *j = v184;
            }
            else if (v183 <= 9)
            {
              *v20 = 6;
              if ((_DWORD)v31 == 45)
              {
                if (v183 < 2)
                  goto LABEL_1091;
                ++v28;
              }
              v186 = 0;
              do
              {
                v187 = *v28++;
                v186 = v187 + 10 * v186 - 48;
              }
              while (v28 < v184);
              if ((_DWORD)v31 != 45)
                goto LABEL_308;
              if (v186)
              {
                v186 = -v186;
LABEL_308:
                v188 = (double)v186;
LABEL_309:
                *(double *)(a1 + 32) = v188;
LABEL_315:
                v114 = WTF::fastCompactMalloc((WTF *)0x20);
                v122 = v114;
                v123 = 0xC00000002;
                v124 = "Expected '}'";
LABEL_191:
                *(_QWORD *)v114 = v123;
                *(_QWORD *)(v114 + 8) = v124;
                *(_DWORD *)(v114 + 16) = 4;
                v125 = *(WTF::StringImpl **)(a1 + 96);
                *(_QWORD *)(a1 + 96) = v122;
                if (v125)
                {
                  v126 = *(_DWORD *)v125 - 2;
                  if (*(_DWORD *)v125 != 2)
                  {
                    v1580 = 0;
                    goto LABEL_194;
                  }
LABEL_1028:
                  WTF::StringImpl::~StringImpl(v125, v115, v116, v117, v118, v119, v120, v121);
                  WTF::fastFree(v507, v508, v509, v510, v511, v512, v513, v514);
                }
                return 0;
              }
LABEL_1091:
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              goto LABEL_315;
            }
          }
        }
        if ((unint64_t)v184 >= v26 || (*v184 | 0x20) != 0x65)
        {
LABEL_1083:
          *v20 = 6;
          LODWORD(v40) = (_DWORD)v184 - (_DWORD)v28;
          if ((char *)v184 - (char *)v28 <= -2)
            goto LABEL_1656;
          *(_QWORD *)task_info_out = 0;
          fast_float::from_chars_advanced<double,char16_t>(v28, v184, (double *)task_info_out, 0x2E00000005);
          v188 = *(double *)task_info_out;
          goto LABEL_309;
        }
        v549 = v184 + 1;
        *j = v184 + 1;
        if ((unint64_t)(v184 + 1) < v26)
        {
          v550 = *v549;
          if (v550 == 45 || v550 == 43)
          {
            v549 = v184 + 2;
            *j = v184 + 2;
          }
        }
        if ((unint64_t)v549 < v26 && *v549 - 48 <= 9)
        {
          v551 = v549 + 1;
          do
          {
            v184 = v551;
            if ((unint64_t)v551 >= v26)
              break;
            ++v551;
          }
          while (*v184 - 48 < 0xA);
          *j = v184;
          goto LABEL_1083;
        }
        v487 = WTF::fastCompactMalloc((WTF *)0x20);
        v196 = (WTF::AtomStringImpl *)v487;
        v488 = 0x5D00000002;
        v489 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1000:
        *(_QWORD *)v487 = v488;
        *(_QWORD *)(v487 + 8) = v489;
        *(_DWORD *)(v487 + 16) = 4;
LABEL_312:
        v197 = *v1568;
        *v1568 = v196;
        if (v197)
        {
          if (*(_DWORD *)v197 == 2)
          {
            WTF::StringImpl::~StringImpl(v197, v189, v190, v191, v192, v193, v194, v195);
            WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
          }
          else
          {
            *(_DWORD *)v197 -= 2;
          }
        }
        goto LABEL_315;
      }
      if ((v180 - 49) <= 8)
      {
        v181 = v178 + 1;
        v182 = 2 * v178 + 2;
        do
        {
          v183 = v181;
          if ((unint64_t)v28 + v182 >= v26)
            break;
          ++v181;
          v182 += 2;
        }
        while (v28[v183] - 48 < 0xA);
        goto LABEL_299;
      }
    }
    v487 = WTF::fastCompactMalloc((WTF *)0x20);
    v196 = (WTF::AtomStringImpl *)v487;
    v488 = 0xE00000002;
    v489 = "Invalid number";
    goto LABEL_1000;
  }
  v37 = (JSC::JSCell *)JSC::constructEmptyArray(v18, 0, 0, 0, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v16 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, a2, a3, v36, a5, a6, a7, a8))
    return 0;
  v31 = *(_QWORD *)(a1 + 48);
  v38 = *(_QWORD *)(a1 + 56);
  for (j = (_QWORD *)(a1 + 48); v31 < v38; *j = v31)
  {
    if (*(unsigned __int16 *)v31 > 0xFFu || JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] != 19)
      break;
    v31 += 2;
  }
  v1580 = v37;
  if (v31 == v38)
  {
    LOBYTE(v41) = 14;
    *v20 = 14;
    goto LABEL_54;
  }
  *v20 = 18;
  v40 = *(unsigned __int16 *)v31;
  if (v40 > 0xFF)
    goto LABEL_273;
  LODWORD(v41) = JSC::tokenTypesOfLatin1Characters[v40];
  if (v41 <= 4)
  {
    if ((_DWORD)v41 == 4)
    {
      v42 = *(unsigned __int8 *)(a1 + 40);
      if ((_DWORD)v40 != 39)
      {
        a3 = v31 + 2;
        *j = v31 + 2;
        if (!v42)
        {
          v43 = v38 - a3;
          if ((uint64_t)(v38 - a3) <= -2)
            goto LABEL_1656;
          v44 = (int16x8_t *)((v43 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
          if ((unint64_t)v43 <= 0xE)
          {
            if (v38 != a3)
            {
              v468 = 2 * (v43 >> 1);
              v469 = (int16x8_t *)(v31 + 2);
              while (1)
              {
                v29 = v469->u16[0];
                if (v29 <= 0xFF)
                {
                  v29 = JSC::safeStringLatin1CharactersInStrictJSON[v29];
                  if (!(_DWORD)v29)
                    break;
                }
                v469 = (int16x8_t *)((char *)v469 + 2);
                v468 -= 2;
                if (!v468)
                  goto LABEL_945;
              }
              v44 = v469;
            }
          }
          else
          {
            v45 = v31 + 2;
            if (v43 >= 15)
            {
              v46 = v31 + 16;
              v47.i64[0] = 0x22002200220022;
              v47.i64[1] = 0x22002200220022;
              v48.i64[0] = 0x5C005C005C005CLL;
              v48.i64[1] = 0x5C005C005C005CLL;
              v49.i64[0] = 0x20002000200020;
              v49.i64[1] = 0x20002000200020;
              while (1)
              {
                v50 = *(int16x8_t *)(v46 - 14);
                v51 = (int8x16_t)vceqq_s16(v50, v47);
                v52 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v50, v48), (int8x16_t)vcgtq_u16(v49, (uint16x8_t)v50)), v51);
                v51.i16[0] = vmaxvq_u16((uint16x8_t)v52);
                if (v51.i32[0])
                  break;
                v46 += 16;
                if (v46 >= (unint64_t)v44)
                {
                  v45 = v46 - 14;
                  goto LABEL_46;
                }
              }
              v53 = (unsigned __int16 *)(v46 - 14);
              goto LABEL_177;
            }
LABEL_46:
            if (v45 < (unint64_t)v44)
            {
              v53 = (unsigned __int16 *)&v44[-1];
              v54 = v44[-1];
              v55.i64[0] = 0x22002200220022;
              v55.i64[1] = 0x22002200220022;
              v56 = (int8x16_t)vceqq_s16(v54, v55);
              v57.i64[0] = 0x5C005C005C005CLL;
              v57.i64[1] = 0x5C005C005C005CLL;
              v58.i64[0] = 0x20002000200020;
              v58.i64[1] = 0x20002000200020;
              v52 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v54, v57), (int8x16_t)vcgtq_u16(v58, (uint16x8_t)v54)), v56);
              v56.i16[0] = vmaxvq_u16((uint16x8_t)v52);
              v16 = (unint64_t)v1582;
              if (!v56.i32[0])
              {
LABEL_178:
                *j = v44;
LABEL_179:
                if ((unint64_t)v44 < v38 && v44->u16[0] == (_DWORD)v40)
                {
                  *(_BYTE *)(a1 + 25) &= ~1u;
                  *(_QWORD *)(a1 + 32) = a3;
                  *(_QWORD *)(a1 + 48) = (char *)v44->i64 + 2;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v44 - a3) >> 1);
                  LOBYTE(v41) = 4;
                  *(_BYTE *)(a1 + 24) = 4;
                  goto LABEL_54;
                }
                LODWORD(v41) = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
                goto LABEL_53;
              }
LABEL_177:
              v44 = (int16x8_t *)&v53[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v52))];
              goto LABEL_178;
            }
          }
LABEL_945:
          v16 = (unint64_t)v1582;
          goto LABEL_178;
        }
LABEL_903:
        v44 = (int16x8_t *)a3;
        if (a3 < v38)
        {
          do
          {
            v462 = v44->u16[0];
            if (v462 < 0x20)
            {
              if (v462 != 9)
                break;
            }
            else if (v462 == (_DWORD)v40 || v462 > 0xFF || v462 == 92)
            {
              break;
            }
            v44 = (int16x8_t *)((char *)v44 + 2);
            *j = v44;
          }
          while ((unint64_t)v44 < v38);
        }
        v16 = (unint64_t)v1582;
        goto LABEL_179;
      }
      if (*(_BYTE *)(a1 + 40))
      {
        a3 = v31 + 2;
        *j = v31 + 2;
        goto LABEL_903;
      }
      v448 = WTF::fastCompactMalloc((WTF *)0x20);
      v160 = (WTF::AtomStringImpl *)v448;
      v449 = 0x2900000002;
      v450 = "Single quotes (') are not allowed in JSON";
      goto LABEL_846;
    }
LABEL_52:
    *v20 = v41;
    *j = v31 + 2;
LABEL_53:
    if ((_DWORD)v41 == 1)
    {
      v31 = *(_QWORD *)(a1 + 48);
      v91 = *(_QWORD *)(a1 + 56);
      if (v31 >= v91)
      {
        v215 = 0;
      }
      else
      {
        do
        {
          v214 = *(unsigned __int16 *)v31 <= 0xFFu
              && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
          v215 = !v214;
          if (!v214)
            break;
          v31 += 2;
          *j = v31;
        }
        while (v31 < v91);
      }
      if (v31 != v91)
      {
        *v20 = 18;
        v40 = *(unsigned __int16 *)v31;
        if (v40 <= 0xFF)
        {
          v94 = JSC::tokenTypesOfLatin1Characters[v40];
          if (v94 <= 4)
          {
            if (v94 == 4)
            {
              v216 = *(unsigned __int8 *)(a1 + 40);
              if ((_DWORD)v40 == 39)
              {
                if (!*(_BYTE *)(a1 + 40))
                {
LABEL_1169:
                  v451 = WTF::fastCompactMalloc((WTF *)0x20);
                  v169 = (WTF::AtomStringImpl *)v451;
                  v452 = 0x2900000002;
                  v453 = "Single quotes (') are not allowed in JSON";
                  goto LABEL_848;
                }
                a3 = v31 + 2;
                *j = v31 + 2;
              }
              else
              {
                a3 = v31 + 2;
                *j = v31 + 2;
                if (!v216)
                {
                  v217 = v91 - a3;
                  if ((uint64_t)(v91 - a3) <= -2)
                    goto LABEL_1656;
                  v97 = (int16x8_t *)((v217 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
                  if ((unint64_t)v217 > 0xE)
                  {
                    v218 = v31 + 2;
                    if (v217 < 15)
                      goto LABEL_340;
                    v219 = v31 + 16;
                    v220.i64[0] = 0x22002200220022;
                    v220.i64[1] = 0x22002200220022;
                    v221.i64[0] = 0x5C005C005C005CLL;
                    v221.i64[1] = 0x5C005C005C005CLL;
                    v222.i64[0] = 0x20002000200020;
                    v222.i64[1] = 0x20002000200020;
                    while (1)
                    {
                      v223 = *(int16x8_t *)(v219 - 14);
                      v224 = (int8x16_t)vceqq_s16(v223, v220);
                      v105 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v223, v221), (int8x16_t)vcgtq_u16(v222, (uint16x8_t)v223)), v224);
                      v224.i16[0] = vmaxvq_u16((uint16x8_t)v105);
                      if (v224.i32[0])
                        break;
                      v219 += 16;
                      if (v219 >= (unint64_t)v97)
                      {
                        v218 = v219 - 14;
LABEL_340:
                        if (v218 >= (unint64_t)v97)
                          goto LABEL_185;
                        v106 = (unsigned __int16 *)&v97[-1];
                        v225 = v97[-1];
                        v226.i64[0] = 0x22002200220022;
                        v226.i64[1] = 0x22002200220022;
                        v227 = (int8x16_t)vceqq_s16(v225, v226);
                        v228.i64[0] = 0x5C005C005C005CLL;
                        v228.i64[1] = 0x5C005C005C005CLL;
                        v229.i64[0] = 0x20002000200020;
                        v229.i64[1] = 0x20002000200020;
                        v105 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v225, v228), (int8x16_t)vcgtq_u16(v229, (uint16x8_t)v225)), v227);
                        v227.i16[0] = vmaxvq_u16((uint16x8_t)v105);
                        if (!v227.i32[0])
                          goto LABEL_185;
LABEL_456:
                        v113 = (int8x16_t)xmmword_199123280;
                        goto LABEL_184;
                      }
                    }
                    v106 = (unsigned __int16 *)(v219 - 14);
                    goto LABEL_456;
                  }
                  if (v91 == a3)
                    goto LABEL_185;
                  v587 = 2 * (v217 >> 1);
                  v476 = (int16x8_t *)(v31 + 2);
                  while (1)
                  {
                    v588 = v476->u16[0];
                    if (v588 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v588])
                      break;
                    v476 = (int16x8_t *)((char *)v476 + 2);
                    v587 -= 2;
                    if (!v587)
                      goto LABEL_185;
                  }
LABEL_1201:
                  v97 = v476;
                  goto LABEL_185;
                }
              }
              v97 = (int16x8_t *)a3;
              if (a3 >= v91)
                goto LABEL_186;
              while (1)
              {
                v582 = v97->u16[0];
                if (v582 < 0x20)
                {
                  if (v582 != 9)
                    goto LABEL_186;
                }
                else if (v582 == (_DWORD)v40 || v582 > 0xFF || v582 == 92)
                {
                  goto LABEL_186;
                }
                v97 = (int16x8_t *)((char *)v97 + 2);
                *j = v97;
                if ((unint64_t)v97 >= v91)
                  goto LABEL_186;
              }
            }
LABEL_174:
            *v20 = v94;
            *j = v31 + 2;
            return v1580;
          }
          if (v94 == 5)
          {
            if ((_DWORD)v40 == 102)
            {
              if ((uint64_t)(v91 - v31) >= 9 && *(_DWORD *)(v31 + 2) == 7077985 && *(_DWORD *)(v31 + 6) == 6619251)
                goto LABEL_243;
            }
            else if ((_DWORD)v40 == 116)
            {
              if ((uint64_t)(v91 - v31) >= 7 && *(_DWORD *)(v31 + 2) == 7667826 && *(_WORD *)(v31 + 6) == 101)
                goto LABEL_258;
            }
            else if ((_DWORD)v40 == 110
                   && (uint64_t)(v91 - v31) >= 7
                   && *(_DWORD *)(v31 + 2) == 7078005
                   && *(_WORD *)(v31 + 6) == 108)
            {
              goto LABEL_882;
            }
            *(_QWORD *)(a1 + 32) = v31;
            LODWORD(v458) = v31;
            if (v31 < v91)
            {
              v458 = (unsigned __int16 *)v31;
              do
              {
                v555 = *v458;
                v557 = (v555 | 0x20u) - 97 >= 0x1A
                    && (v555 - 48) >= 0xA
                    && (v555 - 8204) >= 2;
                if (v557 && v555 != 95 && v555 != 36)
                  break;
                *j = ++v458;
              }
              while ((unint64_t)v458 < v91);
            }
            goto LABEL_896;
          }
          if (v94 == 6)
          {
            v303 = v215 ^ 1;
            if ((_DWORD)v40 != 45)
              v303 = 1;
            if ((v303 & 1) != 0)
            {
              v304 = 0;
            }
            else
            {
              *j = v31 + 2;
              v304 = 1;
            }
            v305 = (unsigned __int16 *)(v31 + 2 * v304);
            if ((unint64_t)v305 >= v91)
              goto LABEL_847;
            v306 = *v305;
            if (v306 == 48)
            {
              v309 = v304 + 1;
            }
            else
            {
              if ((v306 - 49) > 8)
                goto LABEL_847;
              v307 = v304 + 1;
              v308 = 2 * v304 + 2;
              do
              {
                v309 = v307;
                if (v31 + v308 >= v91)
                  break;
                ++v307;
                v308 += 2;
              }
              while (*(unsigned __int16 *)(v31 + 2 * v309) - 48 < 0xA);
            }
            v144 = (unsigned __int16 *)(v31 + 2 * v309);
            *j = v144;
            if ((unint64_t)v144 < v91)
            {
              v310 = *v144;
              if (v310 != 101 && v310 != 69)
              {
                if (v310 == 46)
                {
                  *j = v144 + 1;
                  if ((unint64_t)(v144 + 1) >= v91 || v144[1] - 48 > 9)
                    goto LABEL_1191;
                  v583 = v31 + 2 * v309 + 4;
                  do
                  {
                    v144 = (unsigned __int16 *)v583;
                    if (v583 >= v91)
                      break;
                    v583 += 2;
                  }
                  while (*v144 - 48 < 0xA);
                  *j = v144;
                }
                else if (v309 <= 9)
                {
                  *v20 = 6;
                  if ((_DWORD)v40 == 45)
                  {
                    if (v309 < 2)
                      goto LABEL_1194;
                    v31 += 2;
                  }
                  v146 = 0;
                  do
                  {
                    v311 = *(unsigned __int16 *)v31;
                    v31 += 2;
                    v146 = v311 + 10 * v146 - 48;
                  }
                  while (v31 < (unint64_t)v144);
LABEL_237:
                  if ((_DWORD)v40 != 45)
                  {
                    *(double *)(a1 + 32) = (double)v146;
                    return v1580;
                  }
                  if (v146)
                  {
                    *(double *)(a1 + 32) = (double)-v146;
                    return v1580;
                  }
                  goto LABEL_1194;
                }
              }
            }
            if ((unint64_t)v144 >= v91 || (*v144 | 0x20) != 0x65)
              goto LABEL_981;
            v584 = v144 + 1;
            *j = v144 + 1;
            if ((unint64_t)(v144 + 1) < v91)
            {
              v585 = *v584;
              if (v585 == 45 || v585 == 43)
              {
                v584 = v144 + 2;
                *j = v144 + 2;
              }
            }
            if ((unint64_t)v584 < v91 && *v584 - 48 <= 9)
            {
              v586 = v584 + 1;
              do
              {
                v144 = v586;
                if ((unint64_t)v586 >= v91)
                  break;
                ++v586;
              }
              while (*v144 - 48 < 0xA);
              goto LABEL_980;
            }
LABEL_1190:
            v451 = WTF::fastCompactMalloc((WTF *)0x20);
            v169 = (WTF::AtomStringImpl *)v451;
            v452 = 0x5D00000002;
            v453 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
            goto LABEL_848;
          }
          if (v94 - 18 >= 2)
            goto LABEL_174;
        }
        WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
        v169 = *(WTF::AtomStringImpl **)task_info_out;
        if (!*(_QWORD *)task_info_out)
        {
          __break(0xC471u);
          JUMPOUT(0x198B314DCLL);
        }
LABEL_281:
        v125 = *v1568;
        *v1568 = v169;
        if (!v125)
          return v1580;
        v126 = *(_DWORD *)v125 - 2;
        if (*(_DWORD *)v125 == 2)
        {
          WTF::StringImpl::~StringImpl(v125, v162, v163, v164, v165, v166, v167, v168);
          WTF::fastFree(v170, v171, v172, v173, v174, v175, v176, v177);
          return v1580;
        }
LABEL_194:
        *(_DWORD *)v125 = v126;
        return v1580;
      }
LABEL_343:
      *v20 = 14;
      return v1580;
    }
    goto LABEL_54;
  }
  if ((_DWORD)v41 != 5)
  {
    if ((_DWORD)v41 != 6)
    {
      if ((v41 - 18) >= 2)
        goto LABEL_52;
LABEL_273:
      WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
      v160 = *(WTF::AtomStringImpl **)task_info_out;
      if (!*(_QWORD *)task_info_out)
      {
        __break(0xC471u);
        JUMPOUT(0x198B33F90);
      }
      goto LABEL_274;
    }
    v127 = 0;
    if (v31 < v38 && (_DWORD)v40 == 45)
    {
      *j = v31 + 2;
      v127 = 1;
    }
    v128 = (unsigned __int16 *)(v31 + 2 * v127);
    if ((unint64_t)v128 < v38)
    {
      v129 = *v128;
      if (v129 == 48)
      {
        v132 = v127 + 1;
LABEL_204:
        v133 = (unsigned __int16 *)(v31 + 2 * v132);
        *j = v133;
        if ((unint64_t)v133 < v38)
        {
          v134 = *v133;
          if (v134 != 101 && v134 != 69)
          {
            if (v134 == 46)
            {
              *j = v133 + 1;
              if ((unint64_t)(v133 + 1) >= v38 || v133[1] - 48 > 9)
              {
                v448 = WTF::fastCompactMalloc((WTF *)0x20);
                v160 = (WTF::AtomStringImpl *)v448;
                v449 = 0x2200000002;
                v450 = "Invalid digits after decimal point";
                goto LABEL_846;
              }
              v463 = v31 + 2 * v132 + 4;
              do
              {
                v133 = (unsigned __int16 *)v463;
                if (v463 >= v38)
                  break;
                v463 += 2;
              }
              while (*v133 - 48 < 0xA);
              *j = v133;
            }
            else if (v132 <= 9)
            {
              *v20 = 6;
              if ((_DWORD)v40 == 45)
              {
                if (v132 < 2)
                  goto LABEL_994;
                v31 += 2;
                v16 = (unint64_t)v1582;
              }
              v135 = 0;
              do
              {
                v136 = *(unsigned __int16 *)v31;
                v31 += 2;
                v135 = v136 + 10 * v135 - 48;
              }
              while (v31 < (unint64_t)v133);
              if ((_DWORD)v40 != 45)
              {
                *(double *)(a1 + 32) = (double)v135;
                LOBYTE(v41) = 6;
                goto LABEL_54;
              }
              if (v135)
              {
                v467 = (double)-v135;
LABEL_933:
                *(double *)(a1 + 32) = v467;
LABEL_934:
                LOBYTE(v41) = 6;
                v16 = (unint64_t)v1582;
                goto LABEL_54;
              }
LABEL_994:
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              goto LABEL_934;
            }
          }
        }
        if ((unint64_t)v133 >= v38 || (*v133 | 0x20) != 0x65)
        {
LABEL_931:
          *v20 = 6;
          LODWORD(v40) = (_DWORD)v133 - v31;
          if ((uint64_t)((uint64_t)v133 - v31) <= -2)
            goto LABEL_1656;
          *(_QWORD *)task_info_out = 0;
          fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v133, (double *)task_info_out, 0x2E00000005);
          v467 = *(double *)task_info_out;
          goto LABEL_933;
        }
        v464 = v133 + 1;
        *j = v133 + 1;
        if ((unint64_t)(v133 + 1) < v38)
        {
          v465 = *v464;
          if (v465 == 45 || v465 == 43)
          {
            v464 = v133 + 2;
            *j = v133 + 2;
          }
        }
        if ((unint64_t)v464 < v38 && *v464 - 48 <= 9)
        {
          v466 = v464 + 1;
          do
          {
            v133 = v466;
            if ((unint64_t)v466 >= v38)
              break;
            ++v466;
          }
          while (*v133 - 48 < 0xA);
          *j = v133;
          goto LABEL_931;
        }
        v448 = WTF::fastCompactMalloc((WTF *)0x20);
        v160 = (WTF::AtomStringImpl *)v448;
        v449 = 0x5D00000002;
        v450 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_846:
        *(_QWORD *)v448 = v449;
        *(_QWORD *)(v448 + 8) = v450;
        *(_DWORD *)(v448 + 16) = 4;
LABEL_274:
        v161 = *v1568;
        *v1568 = v160;
        if (v161)
        {
          if (*(_DWORD *)v161 == 2)
          {
            WTF::StringImpl::~StringImpl(v161, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
            WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
          }
          else
          {
            *(_DWORD *)v161 -= 2;
          }
        }
        LOBYTE(v41) = 18;
        v16 = (unint64_t)v1582;
        goto LABEL_54;
      }
      if ((v129 - 49) <= 8)
      {
        v130 = v127 + 1;
        v131 = 2 * v127 + 2;
        do
        {
          v132 = v130;
          if (v31 + v131 >= v38)
            break;
          ++v130;
          v131 += 2;
        }
        while (*(unsigned __int16 *)(v31 + 2 * v132) - 48 < 0xA);
        goto LABEL_204;
      }
    }
    v448 = WTF::fastCompactMalloc((WTF *)0x20);
    v160 = (WTF::AtomStringImpl *)v448;
    v449 = 0xE00000002;
    v450 = "Invalid number";
    goto LABEL_846;
  }
  if ((_DWORD)v40 == 102)
  {
    if ((uint64_t)(v38 - v31) >= 9 && *(_DWORD *)(v31 + 2) == 7077985 && *(_DWORD *)(v31 + 6) == 6619251)
    {
      *j = v31 + 10;
      LOBYTE(v41) = 12;
      *v20 = 12;
      goto LABEL_54;
    }
  }
  else if ((_DWORD)v40 == 116)
  {
    if ((uint64_t)(v38 - v31) >= 7 && *(_DWORD *)(v31 + 2) == 7667826 && *(_WORD *)(v31 + 6) == 101)
    {
      *j = v31 + 8;
      LOBYTE(v41) = 11;
      *v20 = 11;
      goto LABEL_54;
    }
  }
  else if ((_DWORD)v40 == 110
         && (uint64_t)(v38 - v31) >= 7
         && *(_DWORD *)(v31 + 2) == 7078005
         && *(_WORD *)(v31 + 6) == 108)
  {
    *j = v31 + 8;
    LOBYTE(v41) = 13;
    *v20 = 13;
    goto LABEL_54;
  }
  *(_QWORD *)(a1 + 32) = v31;
  LODWORD(v454) = v31;
  if (v31 < v38)
  {
    v454 = (unsigned __int16 *)v31;
    do
    {
      v455 = *v454;
      v457 = (v455 | 0x20u) - 97 >= 0x1A && (v455 - 48) >= 0xA && (v455 - 8204) >= 2;
      if (v457 && v455 != 95 && v455 != 36)
        break;
      *j = ++v454;
    }
    while ((unint64_t)v454 < v38);
  }
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v454 - v31) >> 1);
  LOBYTE(v41) = 5;
  *(_BYTE *)(a1 + 24) = 5;
  v16 = (unint64_t)v1582;
LABEL_54:
  v9 = 0;
  LOBYTE(v18) = 18;
  *(_OWORD *)v1583 = xmmword_199123280;
  v1581 = xmmword_199158B20;
  v25 = (int32x4_t)xmmword_199158B30;
  v1579 = xmmword_199158B30;
  v11 = 0x270020006E0065;
  while (2)
  {
    if (v41 == 2 || v41 == 0)
    {
      v16 = JSC::LiteralParser<char16_t>::parseRecursively(a1, v16, v1571);
      goto LABEL_61;
    }
    switch(*v20)
    {
      case 1:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token ']'";
        goto LABEL_191;
      case 3:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token '}'";
        goto LABEL_191;
      case 4:
        v252 = *(_DWORD *)(a1 + 28);
        v253 = v252 & 0x7FFFFFFF;
        if ((*(_BYTE *)(a1 + 25) & 1) != 0)
        {
          if ((v252 & 0x7FFFFFFFu) < 0xB)
          {
            v395 = v1582;
            JSC::Identifier::fromString((uint64_t)v1582, *(WTF::AtomStringImpl **)(a1 + 32), v253, v31, a5, a6, a7, a8, (rlim_t *)task_info_out);
            goto LABEL_713;
          }
          WTF::String::String((uint64_t *)task_info_out, *(_BYTE **)(a1 + 32), v253);
LABEL_407:
          v260 = JSC::jsNontrivialString((uint64_t)v1582, (JSC::VM *)task_info_out, v254, v255, v256, v257, v258, v259);
          goto LABEL_408;
        }
        if ((v252 & 0x7FFFFFFFu) >= 0xB)
        {
          WTF::String::String((int **)task_info_out, *(_WORD **)(a1 + 32), v253);
          goto LABEL_407;
        }
        v395 = v1582;
        JSC::Identifier::fromString((uint64_t)v1582, *(WTF::AtomStringImpl **)(a1 + 32), v253, v31, a5, a6, a7, a8, task_info_out);
LABEL_713:
        v260 = JSC::jsString(v395, (JSC::VM *)task_info_out, v396, v397, v398, v399, v400, v401);
LABEL_408:
        v16 = v260;
        v262 = *(WTF::StringImpl **)task_info_out;
        *(_QWORD *)task_info_out = 0;
        if (v262)
        {
          if (*(_DWORD *)v262 == 2)
          {
            WTF::StringImpl::~StringImpl(v262, (WTF::AtomStringImpl *)a2, a3, v261, a5, a6, a7, a8);
            WTF::fastFree(v387, v388, v389, v390, v391, v392, v393, v394);
          }
          else
          {
            *(_DWORD *)v262 -= 2;
          }
        }
        v31 = *(_QWORD *)(a1 + 48);
        v263 = *(_QWORD *)(a1 + 56);
        if (v31 >= v263)
        {
          v265 = 0;
        }
        else
        {
          do
          {
            v264 = *(unsigned __int16 *)v31 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
            v265 = !v264;
            if (!v264)
              break;
            v31 += 2;
            *j = v31;
          }
          while (v31 < v263);
        }
        if (v31 == v263)
        {
LABEL_1001:
          *v20 = 14;
          goto LABEL_61;
        }
        *v20 = 18;
        v40 = *(unsigned __int16 *)v31;
        if (v40 > 0xFF)
          goto LABEL_621;
        v266 = JSC::tokenTypesOfLatin1Characters[v40];
        if (v266 <= 4)
        {
          if (v266 != 4)
            goto LABEL_626;
          v267 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v40 != 39)
          {
            a3 = v31 + 2;
            *j = v31 + 2;
            if (!v267)
            {
              v268 = v263 - a3;
              if ((uint64_t)(v263 - a3) <= -2)
                goto LABEL_1656;
              v269 = (int16x8_t *)((v268 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
              if ((unint64_t)v268 <= 0xE)
              {
                if (v263 != a3)
                {
                  v616 = 2 * (v268 >> 1);
                  v617 = (int16x8_t *)(v31 + 2);
                  while (1)
                  {
                    v618 = v617->u16[0];
                    if (v618 <= 0xFF)
                    {
                      v29 = (unint64_t)JSC::safeStringLatin1CharactersInStrictJSON;
                      if (!JSC::safeStringLatin1CharactersInStrictJSON[v618])
                        break;
                    }
                    v617 = (int16x8_t *)((char *)v617 + 2);
                    v616 -= 2;
                    if (!v616)
                      goto LABEL_629;
                  }
LABEL_1560:
                  v269 = v617;
                }
              }
              else
              {
                v270 = v31 + 2;
                if (v268 < 15)
                {
LABEL_496:
                  if (v270 < (unint64_t)v269)
                  {
                    v293 = (unsigned __int16 *)&v269[-1];
                    v294 = v269[-1];
                    v295.i64[0] = 0x22002200220022;
                    v295.i64[1] = 0x22002200220022;
                    v296 = (int8x16_t)vceqq_s16(v294, v295);
                    v297.i64[0] = 0x5C005C005C005CLL;
                    v297.i64[1] = 0x5C005C005C005CLL;
                    v298.i64[0] = 0x20002000200020;
                    v298.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v294, v297), (int8x16_t)vcgtq_u16(v298, (uint16x8_t)v294)), v296);
                    v296.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v296.i32[0])
                      goto LABEL_628;
                  }
                }
                else
                {
                  v271 = v31 + 16;
                  while (1)
                  {
                    v272 = *(int16x8_t *)(v271 - 14);
                    v273.i64[0] = 0x22002200220022;
                    v273.i64[1] = 0x22002200220022;
                    v274 = (int8x16_t)vceqq_s16(v272, v273);
                    v275.i64[0] = 0x5C005C005C005CLL;
                    v275.i64[1] = 0x5C005C005C005CLL;
                    v276.i64[0] = 0x20002000200020;
                    v276.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v272, v275), (int8x16_t)vcgtq_u16(v276, (uint16x8_t)v272)), v274);
                    v274.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v274.i32[0])
                      break;
                    v271 += 16;
                    if (v271 >= (unint64_t)v269)
                      goto LABEL_495;
                  }
LABEL_627:
                  v293 = (unsigned __int16 *)(v271 - 14);
LABEL_628:
                  v25 = (int32x4_t)vornq_s8(*(int8x16_t *)v1583, (int8x16_t)v25);
                  v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                  v269 = (int16x8_t *)&v293[v25.u8[0]];
                }
              }
LABEL_629:
              *j = v269;
LABEL_630:
              if ((unint64_t)v269 < v263 && v269->u16[0] == (_DWORD)v40)
              {
                *(_BYTE *)(a1 + 25) &= ~1u;
                *(_QWORD *)(a1 + 32) = a3;
                *(_QWORD *)(a1 + 48) = (char *)v269->i64 + 2;
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v269 - a3) >> 1);
                *(_BYTE *)(a1 + 24) = 4;
              }
              else
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
              }
              goto LABEL_61;
            }
LABEL_1332:
            v269 = (int16x8_t *)a3;
            if (a3 < v263)
            {
              while (1)
              {
                v615 = v269->u16[0];
                if (v615 < 0x20)
                {
                  if (v615 != 9)
                    goto LABEL_630;
                }
                else if (v615 == (_DWORD)v40 || v615 > 0xFF || v615 == 92)
                {
                  goto LABEL_630;
                }
                v269 = (int16x8_t *)((char *)v269 + 2);
                *j = v269;
                if ((unint64_t)v269 >= v263)
                  goto LABEL_630;
              }
            }
LABEL_1565:
            v269 = (int16x8_t *)a3;
            goto LABEL_630;
          }
          if (*(_BYTE *)(a1 + 40))
          {
            a3 = v31 + 2;
            *j = v31 + 2;
            goto LABEL_1332;
          }
LABEL_1596:
          v597 = WTF::fastCompactMalloc((WTF *)0x20);
          v363 = (WTF::AtomStringImpl *)v597;
          v25.i64[0] = 0x2900000002;
          v598 = "Single quotes (') are not allowed in JSON";
LABEL_1255:
          *(_QWORD *)v597 = v25.i64[0];
          *(_QWORD *)(v597 + 8) = v598;
          *(_DWORD *)(v597 + 16) = 4;
LABEL_1012:
          v498 = *v1568;
          *v1568 = v363;
          if (v498)
          {
            if (*(_DWORD *)v498 == 2)
            {
              WTF::StringImpl::~StringImpl(v498, v362, a3, v31, a5, a6, a7, a8);
              WTF::fastFree(v521, v522, v523, v524, v525, v526, v527, v528);
            }
            else
            {
              *(_DWORD *)v498 -= 2;
            }
          }
          goto LABEL_61;
        }
        if (v266 == 5)
        {
          if ((_DWORD)v40 == 102)
          {
            if ((uint64_t)(v263 - v31) < 9 || *(_DWORD *)(v31 + 2) != 7077985 || *(_DWORD *)(v31 + 6) != 6619251)
              goto LABEL_1273;
LABEL_758:
            *j = v31 + 10;
            *v20 = 12;
          }
          else if ((_DWORD)v40 == 116)
          {
            if ((uint64_t)(v263 - v31) < 7 || *(_DWORD *)(v31 + 2) != 7667826 || *(_WORD *)(v31 + 6) != 101)
              goto LABEL_1273;
LABEL_817:
            *j = v31 + 8;
            *v20 = 11;
          }
          else
          {
            if ((_DWORD)v40 != 110
              || (uint64_t)(v263 - v31) < 7
              || *(_DWORD *)(v31 + 2) != 7078005
              || *(_WORD *)(v31 + 6) != 108)
            {
LABEL_1273:
              *(_QWORD *)(a1 + 32) = v31;
              LODWORD(v600) = v31;
              if (v31 < v263)
              {
                v600 = (unsigned __int16 *)v31;
                do
                {
                  v601 = *v600;
                  v603 = (v601 | 0x20u) - 97 >= 0x1A
                      && (v601 - 48) >= 0xA
                      && (v601 - 8204) >= 2;
                  if (v603 && v601 != 95 && v601 != 36)
                    break;
                  *j = ++v600;
                }
                while ((unint64_t)v600 < v263);
              }
LABEL_1305:
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v600 - v31) >> 1);
              *(_BYTE *)(a1 + 24) = 5;
              goto LABEL_61;
            }
LABEL_1291:
            *j = v31 + 8;
            *v20 = 13;
          }
        }
        else
        {
          if (v266 != 6)
          {
            if (v266 - 18 >= 2)
            {
LABEL_626:
              *v20 = v266;
              *j = v31 + 2;
              goto LABEL_61;
            }
LABEL_621:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
            v363 = *(WTF::AtomStringImpl **)task_info_out;
            if (!*(_QWORD *)task_info_out)
            {
              __break(0xC471u);
              JUMPOUT(0x198B31F8CLL);
            }
            goto LABEL_1012;
          }
          v404 = v265 ^ 1;
          if ((_DWORD)v40 != 45)
            v404 = 1;
          if ((v404 & 1) != 0)
          {
            v405 = 0;
          }
          else
          {
            *j = v31 + 2;
            v405 = 1;
          }
          v406 = (unsigned __int16 *)(v31 + 2 * v405);
          if ((unint64_t)v406 >= v263)
          {
LABEL_1254:
            v597 = WTF::fastCompactMalloc((WTF *)0x20);
            v363 = (WTF::AtomStringImpl *)v597;
            v25.i64[0] = 0xE00000002;
            v598 = "Invalid number";
            goto LABEL_1255;
          }
          v407 = *v406;
          if (v407 == 48)
          {
            v410 = v405 + 1;
          }
          else
          {
            if ((v407 - 49) > 8)
              goto LABEL_1254;
            v408 = v405 + 1;
            v409 = 2 * v405 + 2;
            do
            {
              v410 = v408;
              if (v31 + v409 >= v263)
                break;
              ++v408;
              v409 += 2;
            }
            while (*(unsigned __int16 *)(v31 + 2 * v410) - 48 < 0xA);
          }
          v411 = (unsigned __int16 *)(v31 + 2 * v410);
          *j = v411;
          if ((unint64_t)v411 < v263)
          {
            v412 = *v411;
            if (v412 != 101 && v412 != 69)
            {
              if (v412 == 46)
              {
                *j = v411 + 1;
                if ((unint64_t)(v411 + 1) >= v263 || v411[1] - 48 > 9)
                {
LABEL_1409:
                  v597 = WTF::fastCompactMalloc((WTF *)0x20);
                  v363 = (WTF::AtomStringImpl *)v597;
                  v25.i64[0] = 0x2200000002;
                  v598 = "Invalid digits after decimal point";
                  goto LABEL_1255;
                }
                v622 = v31 + 2 * v410 + 4;
                do
                {
                  v411 = (unsigned __int16 *)v622;
                  if (v622 >= v263)
                    break;
                  v622 += 2;
                }
                while (*v411 - 48 < 0xA);
                *j = v411;
              }
              else if (v410 <= 9)
              {
                *v20 = 6;
                if ((_DWORD)v40 == 45)
                {
                  if (v410 < 2)
                  {
LABEL_1412:
                    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                    goto LABEL_61;
                  }
                  v31 += 2;
                }
                v413 = 0;
                do
                {
                  v414 = *(unsigned __int16 *)v31;
                  v31 += 2;
                  v413 = v414 + 10 * v413 - 48;
                }
                while (v31 < (unint64_t)v411);
LABEL_777:
                if ((_DWORD)v40 != 45)
                {
                  *(double *)v25.i64 = (double)v413;
                  *(double *)(a1 + 32) = (double)v413;
                  goto LABEL_61;
                }
                if (v413)
                {
                  *(double *)v25.i64 = (double)-v413;
                  *(double *)(a1 + 32) = *(double *)v25.i64;
                  goto LABEL_61;
                }
                goto LABEL_1412;
              }
            }
          }
          if ((unint64_t)v411 < v263 && (*v411 | 0x20) == 0x65)
          {
            v623 = v411 + 1;
            *j = v411 + 1;
            if ((unint64_t)(v411 + 1) < v263)
            {
              v624 = *v623;
              if (v624 == 45 || v624 == 43)
              {
                v623 = v411 + 2;
                *j = v411 + 2;
              }
            }
            if ((unint64_t)v623 >= v263 || *v623 - 48 > 9)
            {
LABEL_1408:
              v597 = WTF::fastCompactMalloc((WTF *)0x20);
              v363 = (WTF::AtomStringImpl *)v597;
              v25.i64[0] = 0x5D00000002;
              v598 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
              goto LABEL_1255;
            }
            v625 = v623 + 1;
            do
            {
              v411 = v625;
              if ((unint64_t)v625 >= v263)
                break;
              ++v625;
            }
            while (*v411 - 48 < 0xA);
LABEL_1405:
            *j = v411;
          }
LABEL_1406:
          *v20 = 6;
          LODWORD(v40) = (_DWORD)v411 - v31;
          if ((uint64_t)((uint64_t)v411 - v31) <= -2)
            goto LABEL_1656;
          *(_QWORD *)task_info_out = 0;
          fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v411, (double *)task_info_out, 0x2E00000005);
          v25.i64[0] = *(_QWORD *)task_info_out;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)task_info_out;
        }
LABEL_61:
        if (!v16)
          return 0;
LABEL_62:
        v60 = *(_QWORD *)a1;
        v10 = (WTF::AtomStringImpl *)((_DWORD)v9 + 1);
        v61 = *((_BYTE *)v1580 + 4);
        v62 = v61 & 0x1F;
        if (v62 - 4 >= 0xA)
        {
          v90 = v62 > 3 || v62 == 2;
          if (v90 && (*((_BYTE *)v1580 + 4) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198B32398);
          }
LABEL_145:
          JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(v1580, v60, (JSC::VM *)v9, v16, 0, 0, a7, a8, v25);
          goto LABEL_68;
        }
        v63 = *((_QWORD *)v1580 + 1);
        if (*(_DWORD *)(v63 - 4) <= v9)
          goto LABEL_145;
        a2 = *(_QWORD *)(v60 + 56);
        v64 = v61 & 0xF;
        if ((v64 - 8) >= 2)
        {
          switch(v64)
          {
            case 0:
            case 1:
              JSC::JSObject::setIndexQuicklyForTypedArray((uint64_t)v1580, v9, v16);
              break;
            case 4:
            case 5:
              if (v16 > 0xFFFDFFFFFFFFFFFFLL)
                goto LABEL_65;
              JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex(v1580, (JSC::VM *)a2, (uint64_t)v9, v16, a5, a6, a7, a8);
              break;
            case 6:
            case 7:
              if (v16 >> 49)
              {
                *(double *)v25.i64 = (double)(int)v16;
                if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
                  v25.i64[0] = v16 - 0x2000000000000;
                *(_QWORD *)(v63 + 8 * v9) = v25.i64[0];
LABEL_139:
                if (*(_DWORD *)(v63 - 8) <= v9)
                  *(_DWORD *)(v63 - 8) = (_DWORD)v10;
              }
              else
              {
                JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex(v1580, (JSC::VM *)a2, (uint64_t)v9, v16, a5, a6, a7, a8, *(double *)v25.i64);
              }
              break;
            case 10:
            case 11:
            case 12:
            case 13:
              v282 = v63 + 8 * v9;
              v1578.i64[0] = *(_QWORD *)(v282 + 16);
              *(_QWORD *)(v282 + 16) = v16;
              if ((v16 & 0xFFFE000000000002) == 0
                && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v1580 + 7))
              {
                JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1580);
              }
              if (v1578.i64[0])
                break;
              ++*(_DWORD *)(v63 + 12);
              goto LABEL_139;
            default:
              __break(0xC471u);
              JUMPOUT(0x198B32344);
          }
        }
        else
        {
LABEL_65:
          *(_QWORD *)(v63 + 8 * v9) = v16;
          if (*(_DWORD *)(v63 - 8) <= v9)
            *(_DWORD *)(v63 - 8) = (_DWORD)v10;
          if ((v16 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)v1580 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)v1580);
          }
        }
LABEL_68:
        v16 = (unint64_t)v1582;
        if (*((_DWORD *)v1582 + 20))
        {
          v149 = *((_DWORD *)v1582 + 20);
          if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1582 + 64), 7u, a3, v31, a5, a6, a7, a8);
          if (*(_QWORD *)(v16 + 16))
            return 0;
        }
        v65 = *v20;
        if (v65 == 10)
        {
          v9 = *(unsigned __int8 **)(a1 + 48);
          v40 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v9 >= v40)
          {
            v67 = 0;
          }
          else
          {
            do
            {
              v66 = *(unsigned __int16 *)v9 <= 0xFFu
                 && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v9] == 19;
              v67 = !v66;
              if (!v66)
                break;
              v9 += 2;
              *j = v9;
            }
            while ((unint64_t)v9 < v40);
          }
          if (v9 == (unsigned __int8 *)v40)
          {
            LOBYTE(v41) = 14;
            goto LABEL_128;
          }
          *v20 = 18;
          v31 = *(unsigned __int16 *)v9;
          if (v31 > 0xFF)
            goto LABEL_262;
          LODWORD(v41) = JSC::tokenTypesOfLatin1Characters[v31];
          if (v41 > 4)
          {
            if ((_DWORD)v41 == 5)
            {
              if ((_DWORD)v31 == 102)
              {
                if ((uint64_t)(v40 - (_QWORD)v9) >= 9
                  && *(_DWORD *)(v9 + 2) == 7077985
                  && *(_DWORD *)(v9 + 6) == 6619251)
                {
                  *j = v9 + 10;
                  LOBYTE(v41) = 12;
                  goto LABEL_128;
                }
LABEL_504:
                *(_QWORD *)(a1 + 32) = v9;
                LODWORD(v299) = (_DWORD)v9;
                if ((unint64_t)v9 < v40)
                {
                  v299 = v9;
                  do
                  {
                    v300 = *(unsigned __int16 *)v299;
                    v302 = (v300 | 0x20u) - 97 >= 0x1A
                        && (v300 - 48) >= 0xA
                        && (v300 - 8204) >= 2;
                    if (v302 && v300 != 95 && v300 != 36)
                      break;
                    v299 += 2;
                    *j = v299;
                  }
                  while ((unint64_t)v299 < v40);
                }
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v299 - (_DWORD)v9) >> 1);
                LOBYTE(v41) = 5;
                *(_BYTE *)(a1 + 24) = 5;
LABEL_518:
                v9 = (unsigned __int8 *)v10;
                v16 = (unint64_t)v1582;
              }
              else
              {
                if ((_DWORD)v31 == 116)
                {
                  if ((uint64_t)(v40 - (_QWORD)v9) < 7 || *(_DWORD *)(v9 + 2) != 7667826 || *((_WORD *)v9 + 3) != 101)
                    goto LABEL_504;
                  *j = v9 + 8;
                  LOBYTE(v41) = 11;
                }
                else
                {
                  if ((_DWORD)v31 != 110
                    || (uint64_t)(v40 - (_QWORD)v9) < 7
                    || *(_DWORD *)(v9 + 2) != 7078005
                    || *((_WORD *)v9 + 3) != 108)
                  {
                    goto LABEL_504;
                  }
                  *j = v9 + 8;
                  LOBYTE(v41) = 13;
                }
LABEL_128:
                *v20 = v41;
                v9 = (unsigned __int8 *)v10;
              }
            }
            else if ((_DWORD)v41 == 6)
            {
              v79 = v67 ^ 1;
              if ((_DWORD)v31 != 45)
                v79 = 1;
              if ((v79 & 1) != 0)
              {
                v80 = 0;
              }
              else
              {
                *j = v9 + 2;
                v80 = 1;
              }
              v81 = &v9[2 * v80];
              if ((unint64_t)v81 >= v40)
                goto LABEL_463;
              v82 = *(unsigned __int16 *)v81;
              if (v82 == 48)
              {
                v85 = v80 + 1;
LABEL_113:
                v86 = (unsigned __int16 *)&v9[2 * v85];
                *j = v86;
                if ((unint64_t)v86 >= v40)
                  goto LABEL_652;
                v87 = *v86;
                if (v87 == 101 || v87 == 69)
                  goto LABEL_652;
                if (v87 == 46)
                {
                  v365 = v86 + 1;
                  *j = v365;
                  if ((unint64_t)v365 < v40 && *v365 - 48 <= 9)
                  {
                    v366 = (unint64_t)&v9[2 * v85 + 4];
                    do
                    {
                      v86 = (unsigned __int16 *)v366;
                      if (v366 >= v40)
                        break;
                      v366 += 2;
                    }
                    while (*v86 - 48 < 0xA);
                    *j = v86;
LABEL_652:
                    if ((unint64_t)v86 >= v40 || (*v86 | 0x20) != 0x65)
                      goto LABEL_664;
                    v367 = v86 + 1;
                    *j = v86 + 1;
                    if ((unint64_t)(v86 + 1) < v40)
                    {
                      v368 = *v367;
                      if (v368 == 45 || v368 == 43)
                      {
                        v367 = v86 + 2;
                        *j = v86 + 2;
                      }
                    }
                    if ((unint64_t)v367 < v40 && *v367 - 48 <= 9)
                    {
                      v369 = v367 + 1;
                      do
                      {
                        v86 = v369;
                        if ((unint64_t)v369 >= v40)
                          break;
                        ++v369;
                      }
                      while (*v86 - 48 < 0xA);
                      *j = v86;
LABEL_664:
                      *v20 = 6;
                      LODWORD(v40) = (_DWORD)v86 - (_DWORD)v9;
                      if ((char *)v86 - (char *)v9 <= -2)
                        goto LABEL_1656;
                      *(_QWORD *)task_info_out = 0;
                      fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v9, v86, (double *)task_info_out, 0x2E00000005);
                      v25.i64[0] = *(_QWORD *)task_info_out;
LABEL_666:
                      *(_QWORD *)(a1 + 32) = v25.i64[0];
                      goto LABEL_667;
                    }
                    v41 = WTF::fastCompactMalloc((WTF *)0x20);
                    v25.i64[0] = 0x5D00000002;
                    *(_QWORD *)v41 = 0x5D00000002;
                    v370 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_669;
                  }
                  v41 = WTF::fastCompactMalloc((WTF *)0x20);
                  v25.i64[0] = 0x2200000002;
                  *(_QWORD *)v41 = 0x2200000002;
                  v370 = "Invalid digits after decimal point";
LABEL_669:
                  *(_QWORD *)(v41 + 8) = v370;
                  *(_DWORD *)(v41 + 16) = 4;
                  v281 = *v1568;
                  *v1568 = (WTF::StringImpl *)v41;
                  LOBYTE(v41) = 18;
                  v9 = (unsigned __int8 *)v10;
                  v16 = (unint64_t)v1582;
                  if (v281)
                  {
LABEL_464:
                    if (*(_DWORD *)v281 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v281, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                      WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
                      LOBYTE(v41) = 18;
                    }
                    else
                    {
                      *(_DWORD *)v281 -= 2;
                    }
                    goto LABEL_518;
                  }
                }
                else
                {
                  if (v85 > 9)
                    goto LABEL_652;
                  *v20 = 6;
                  if ((_DWORD)v31 == 45)
                  {
                    if (v85 < 2)
                      goto LABEL_685;
                    v9 += 2;
                    v16 = (unint64_t)v1582;
                  }
                  v88 = 0;
                  do
                  {
                    v89 = *(unsigned __int16 *)v9;
                    v9 += 2;
                    v88 = v89 + 10 * v88 - 48;
                  }
                  while (v9 < (unsigned __int8 *)v86);
                  if ((_DWORD)v31 == 45)
                  {
                    if (v88)
                    {
                      *(double *)v25.i64 = (double)-v88;
                      goto LABEL_666;
                    }
LABEL_685:
                    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
LABEL_667:
                    LOBYTE(v41) = 6;
                    goto LABEL_518;
                  }
                  *(double *)v25.i64 = (double)v88;
                  *(double *)(a1 + 32) = (double)v88;
                  LOBYTE(v41) = 6;
                  v9 = (unsigned __int8 *)v10;
                }
              }
              else
              {
                if ((v82 - 49) <= 8)
                {
                  v83 = v80 + 1;
                  v84 = 2 * v80 + 2;
                  do
                  {
                    v85 = v83;
                    if ((unint64_t)&v9[v84] >= v40)
                      break;
                    ++v83;
                    v84 += 2;
                  }
                  while (*(unsigned __int16 *)&v9[2 * v85] - 48 < 0xA);
                  goto LABEL_113;
                }
LABEL_463:
                v41 = WTF::fastCompactMalloc((WTF *)0x20);
                v25.i64[0] = 0xE00000002;
                *(_QWORD *)v41 = 0xE00000002;
                *(_QWORD *)(v41 + 8) = "Invalid number";
                *(_DWORD *)(v41 + 16) = 4;
                v281 = *v1568;
                *v1568 = (WTF::StringImpl *)v41;
                LOBYTE(v41) = 18;
                v9 = (unsigned __int8 *)v10;
                if (v281)
                  goto LABEL_464;
              }
            }
            else
            {
              if ((v41 - 18) >= 2)
                goto LABEL_94;
LABEL_262:
              WTF::tryFastCompactMalloc((WTF *)0x40, task_info_out);
              v150 = *(WTF::AtomStringImpl **)task_info_out;
              if (!*(_QWORD *)task_info_out)
              {
                __break(0xC471u);
                JUMPOUT(0x198B33490);
              }
              *(_OWORD *)(*(_QWORD *)task_info_out + 20) = v1581;
              *(_QWORD *)v150 = 0x1600000002;
              *((_QWORD *)v150 + 1) = (char *)v150 + 20;
              *((_DWORD *)v150 + 4) = 0;
              v25 = (int32x4_t)v1579;
              *(_OWORD *)((char *)v150 + 36) = v1579;
              *(_QWORD *)((char *)v150 + 52) = 0x270020006E0065;
              *((_WORD *)v150 + 30) = *(_WORD *)v9;
              *((_WORD *)v150 + 31) = 39;
              v151 = *v1568;
              *v1568 = v150;
              LOBYTE(v41) = 18;
              v9 = (unsigned __int8 *)v10;
              if (v151)
              {
                if (*(_DWORD *)v151 == 2)
                {
                  WTF::StringImpl::~StringImpl(v151, (WTF::AtomStringImpl *)a2, a3, v31, a5, a6, a7, a8);
                  WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
                  LOBYTE(v41) = 18;
                }
                else
                {
                  *(_DWORD *)v151 -= 2;
                }
                v9 = (unsigned __int8 *)v10;
              }
            }
          }
          else if ((_DWORD)v41 == 4)
          {
            v68 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v31 == 39)
            {
              if (*(_BYTE *)(a1 + 40))
              {
                a3 = (unint64_t)(v9 + 2);
                *j = v9 + 2;
                goto LABEL_636;
              }
              v41 = WTF::fastCompactMalloc((WTF *)0x20);
              v25.i64[0] = 0x2900000002;
              *(_QWORD *)v41 = 0x2900000002;
              v370 = "Single quotes (') are not allowed in JSON";
              goto LABEL_669;
            }
            a3 = (unint64_t)(v9 + 2);
            *j = v9 + 2;
            if (!v68)
            {
              v69 = v40 - a3;
              if ((uint64_t)(v40 - a3) <= -2)
                goto LABEL_1656;
              v70 = (int16x8_t *)&v9[(v69 & 0xFFFFFFFFFFFFFFFELL) + 2];
              if ((unint64_t)v69 <= 0xE)
              {
                if (v40 != a3)
                {
                  v371 = 2 * (v69 >> 1);
                  v372 = (int16x8_t *)(v9 + 2);
                  while (1)
                  {
                    v373 = v372->u16[0];
                    if (v373 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v373])
                      break;
                    v372 = (int16x8_t *)((char *)v372 + 2);
                    v371 -= 2;
                    if (!v371)
                      goto LABEL_729;
                  }
                  v70 = v372;
                }
              }
              else
              {
                v71 = v9 + 2;
                if (v69 >= 15)
                {
                  v72 = v9 + 16;
                  while (1)
                  {
                    v73 = *(int16x8_t *)(v72 - 14);
                    v74.i64[0] = 0x22002200220022;
                    v74.i64[1] = 0x22002200220022;
                    v75 = (int8x16_t)vceqq_s16(v73, v74);
                    v76.i64[0] = 0x5C005C005C005CLL;
                    v76.i64[1] = 0x5C005C005C005CLL;
                    v77.i64[0] = 0x20002000200020;
                    v77.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v73, v76), (int8x16_t)vcgtq_u16(v77, (uint16x8_t)v73)), v75);
                    v75.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v75.i32[0])
                      break;
                    v72 += 16;
                    if (v72 >= (unsigned __int8 *)v70)
                    {
                      v71 = v72 - 14;
                      goto LABEL_704;
                    }
                  }
                  v78 = (unsigned __int16 *)(v72 - 14);
LABEL_98:
                  v25 = (int32x4_t)vornq_s8(*(int8x16_t *)v1583, (int8x16_t)v25);
                  v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                  v70 = (int16x8_t *)&v78[v25.u8[0]];
LABEL_99:
                  *j = v70;
                  goto LABEL_100;
                }
LABEL_704:
                if (v71 < (unsigned __int8 *)v70)
                {
                  v78 = (unsigned __int16 *)&v70[-1];
                  v382 = v70[-1];
                  v383.i64[0] = 0x22002200220022;
                  v383.i64[1] = 0x22002200220022;
                  v384 = (int8x16_t)vceqq_s16(v382, v383);
                  v385.i64[0] = 0x5C005C005C005CLL;
                  v385.i64[1] = 0x5C005C005C005CLL;
                  v386.i64[0] = 0x20002000200020;
                  v386.i64[1] = 0x20002000200020;
                  v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v382, v385), (int8x16_t)vcgtq_u16(v386, (uint16x8_t)v382)), v384);
                  v384.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                  v16 = (unint64_t)v1582;
                  if (!v384.i32[0])
                    goto LABEL_99;
                  goto LABEL_98;
                }
              }
LABEL_729:
              v16 = (unint64_t)v1582;
              goto LABEL_99;
            }
LABEL_636:
            v70 = (int16x8_t *)a3;
            if (a3 < v40)
            {
              while (1)
              {
                v364 = v70->u16[0];
                if (v364 < 0x20)
                {
                  if (v364 != 9)
                    goto LABEL_780;
                }
                else if (v364 == (_DWORD)v31 || v364 > 0xFF || v364 == 92)
                {
                  goto LABEL_780;
                }
                v70 = (int16x8_t *)((char *)v70 + 2);
                *j = v70;
                if ((unint64_t)v70 >= v40)
                  goto LABEL_780;
              }
            }
            v70 = (int16x8_t *)a3;
LABEL_780:
            v16 = (unint64_t)v1582;
LABEL_100:
            if ((unint64_t)v70 >= v40 || v70->u16[0] != (_DWORD)v31)
            {
              LODWORD(v41) = JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
              goto LABEL_95;
            }
            *(_BYTE *)(a1 + 25) &= ~1u;
            *(_QWORD *)(a1 + 32) = a3;
            *(_QWORD *)(a1 + 48) = (char *)v70->i64 + 2;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v70 - a3) >> 1);
            LOBYTE(v41) = 4;
            *(_BYTE *)(a1 + 24) = 4;
            v9 = (unsigned __int8 *)v10;
          }
          else
          {
LABEL_94:
            *v20 = v41;
            *j = v9 + 2;
LABEL_95:
            v9 = (unsigned __int8 *)v10;
            if ((_DWORD)v41 == 1)
            {
              v114 = WTF::fastCompactMalloc((WTF *)0x20);
              v122 = v114;
              v123 = 0x2F00000002;
              v124 = "Unexpected comma at the end of array expression";
              goto LABEL_191;
            }
          }
          continue;
        }
        if (v65 != 1)
        {
          JSC::LiteralParser<char16_t>::setErrorMessageForToken(a1, 1);
          return 0;
        }
        v31 = *(_QWORD *)(a1 + 48);
        v91 = *(_QWORD *)(a1 + 56);
        if (v31 >= v91)
        {
          v93 = 0;
        }
        else
        {
          do
          {
            v92 = *(unsigned __int16 *)v31 <= 0xFFu
               && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
            v93 = !v92;
            if (!v92)
              break;
            v31 += 2;
            *j = v31;
          }
          while (v31 < v91);
        }
        if (v31 == v91)
          goto LABEL_343;
        *v20 = 18;
        v40 = *(unsigned __int16 *)v31;
        if (v40 > 0xFF)
        {
LABEL_280:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
          v169 = *(WTF::AtomStringImpl **)task_info_out;
          if (!*(_QWORD *)task_info_out)
          {
            __break(0xC471u);
            JUMPOUT(0x198B34000);
          }
          goto LABEL_281;
        }
        v94 = JSC::tokenTypesOfLatin1Characters[v40];
        if (v94 > 4)
        {
          if (v94 != 5)
          {
            if (v94 != 6)
            {
              if (v94 - 18 >= 2)
                goto LABEL_174;
              goto LABEL_280;
            }
            v137 = v93 ^ 1;
            if ((_DWORD)v40 != 45)
              v137 = 1;
            if ((v137 & 1) != 0)
            {
              v138 = 0;
            }
            else
            {
              *j = v31 + 2;
              v138 = 1;
            }
            v139 = (unsigned __int16 *)(v31 + 2 * v138);
            if ((unint64_t)v139 < v91)
            {
              v140 = *v139;
              if (v140 == 48)
              {
                v143 = v138 + 1;
LABEL_229:
                v144 = (unsigned __int16 *)(v31 + 2 * v143);
                *j = v144;
                if ((unint64_t)v144 >= v91)
                  goto LABEL_969;
                v145 = *v144;
                if (v145 == 101 || v145 == 69)
                  goto LABEL_969;
                if (v145 != 46)
                {
                  if (v143 <= 9)
                  {
                    *v20 = 6;
                    if ((_DWORD)v40 != 45)
                      goto LABEL_235;
                    if (v143 >= 2)
                    {
                      v31 += 2;
LABEL_235:
                      v146 = 0;
                      do
                      {
                        v147 = *(unsigned __int16 *)v31;
                        v31 += 2;
                        v146 = v147 + 10 * v146 - 48;
                      }
                      while (v31 < (unint64_t)v144);
                      goto LABEL_237;
                    }
LABEL_1194:
                    *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                    return v1580;
                  }
LABEL_969:
                  if ((unint64_t)v144 >= v91 || (*v144 | 0x20) != 0x65)
                    goto LABEL_981;
                  v472 = v144 + 1;
                  *j = v144 + 1;
                  if ((unint64_t)(v144 + 1) < v91)
                  {
                    v473 = *v472;
                    if (v473 == 45 || v473 == 43)
                    {
                      v472 = v144 + 2;
                      *j = v144 + 2;
                    }
                  }
                  if ((unint64_t)v472 < v91 && *v472 - 48 <= 9)
                  {
                    v474 = v472 + 1;
                    do
                    {
                      v144 = v474;
                      if ((unint64_t)v474 >= v91)
                        break;
                      ++v474;
                    }
                    while (*v144 - 48 < 0xA);
LABEL_980:
                    *j = v144;
LABEL_981:
                    *v20 = 6;
                    LODWORD(v40) = (_DWORD)v144 - v31;
                    if ((uint64_t)((uint64_t)v144 - v31) <= -2)
                      goto LABEL_1656;
                    *(_QWORD *)task_info_out = 0;
                    fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v144, (double *)task_info_out, 0x2E00000005);
                    *(_QWORD *)(a1 + 32) = *(_QWORD *)task_info_out;
                    return v1580;
                  }
                  goto LABEL_1190;
                }
                *j = v144 + 1;
                if ((unint64_t)(v144 + 1) < v91 && v144[1] - 48 <= 9)
                {
                  v471 = v31 + 2 * v143 + 4;
                  do
                  {
                    v144 = (unsigned __int16 *)v471;
                    if (v471 >= v91)
                      break;
                    v471 += 2;
                  }
                  while (*v144 - 48 < 0xA);
                  *j = v144;
                  goto LABEL_969;
                }
LABEL_1191:
                v451 = WTF::fastCompactMalloc((WTF *)0x20);
                v169 = (WTF::AtomStringImpl *)v451;
                v452 = 0x2200000002;
                v453 = "Invalid digits after decimal point";
                goto LABEL_848;
              }
              if ((v140 - 49) <= 8)
              {
                v141 = v138 + 1;
                v142 = 2 * v138 + 2;
                do
                {
                  v143 = v141;
                  if (v31 + v142 >= v91)
                    break;
                  ++v141;
                  v142 += 2;
                }
                while (*(unsigned __int16 *)(v31 + 2 * v143) - 48 < 0xA);
                goto LABEL_229;
              }
            }
LABEL_847:
            v451 = WTF::fastCompactMalloc((WTF *)0x20);
            v169 = (WTF::AtomStringImpl *)v451;
            v452 = 0xE00000002;
            v453 = "Invalid number";
LABEL_848:
            *(_QWORD *)v451 = v452;
            *(_QWORD *)(v451 + 8) = v453;
            *(_DWORD *)(v451 + 16) = 4;
            goto LABEL_281;
          }
          if ((_DWORD)v40 == 102)
          {
            if ((uint64_t)(v91 - v31) >= 9 && *(_DWORD *)(v31 + 2) == 7077985 && *(_DWORD *)(v31 + 6) == 6619251)
            {
LABEL_243:
              *j = v31 + 10;
              *v20 = 12;
              return v1580;
            }
            goto LABEL_883;
          }
          if ((_DWORD)v40 == 116)
          {
            if ((uint64_t)(v91 - v31) >= 7 && *(_DWORD *)(v31 + 2) == 7667826 && *(_WORD *)(v31 + 6) == 101)
            {
LABEL_258:
              *j = v31 + 8;
              *v20 = 11;
              return v1580;
            }
LABEL_883:
            *(_QWORD *)(a1 + 32) = v31;
            LODWORD(v458) = v31;
            if (v31 < v91)
            {
              v458 = (unsigned __int16 *)v31;
              do
              {
                v459 = *v458;
                v461 = (v459 | 0x20u) - 97 >= 0x1A
                    && (v459 - 48) >= 0xA
                    && (v459 - 8204) >= 2;
                if (v461 && v459 != 95 && v459 != 36)
                  break;
                *j = ++v458;
              }
              while ((unint64_t)v458 < v91);
            }
LABEL_896:
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v458 - v31) >> 1);
            *(_BYTE *)(a1 + 24) = 5;
            return v1580;
          }
          if ((_DWORD)v40 != 110
            || (uint64_t)(v91 - v31) < 7
            || *(_DWORD *)(v31 + 2) != 7078005
            || *(_WORD *)(v31 + 6) != 108)
          {
            goto LABEL_883;
          }
LABEL_882:
          *j = v31 + 8;
          *v20 = 13;
          return v1580;
        }
        if (v94 != 4)
          goto LABEL_174;
        v95 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v40 == 39)
        {
          if (*(_BYTE *)(a1 + 40))
          {
            a3 = v31 + 2;
            *j = v31 + 2;
LABEL_953:
            v97 = (int16x8_t *)a3;
            if (a3 < v91)
            {
              while (1)
              {
                v470 = v97->u16[0];
                if (v470 < 0x20)
                {
                  if (v470 != 9)
                    goto LABEL_186;
                }
                else if (v470 == (_DWORD)v40 || v470 > 0xFF || v470 == 92)
                {
                  goto LABEL_186;
                }
                v97 = (int16x8_t *)((char *)v97 + 2);
                *j = v97;
                if ((unint64_t)v97 >= v91)
                  goto LABEL_186;
              }
            }
            goto LABEL_186;
          }
          goto LABEL_1169;
        }
        a3 = v31 + 2;
        *j = v31 + 2;
        if (v95)
          goto LABEL_953;
        v96 = v91 - a3;
        if ((uint64_t)(v91 - a3) <= -2)
          goto LABEL_1656;
        v97 = (int16x8_t *)((v96 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
        if ((unint64_t)v96 <= 0xE)
        {
          if (v91 == a3)
            goto LABEL_185;
          v475 = 2 * (v96 >> 1);
          v476 = (int16x8_t *)(v31 + 2);
          while (1)
          {
            v477 = v476->u16[0];
            if (v477 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v477])
              goto LABEL_1201;
            v476 = (int16x8_t *)((char *)v476 + 2);
            v475 -= 2;
            if (!v475)
              goto LABEL_185;
          }
        }
        v98 = v31 + 2;
        if (v96 < 15)
        {
LABEL_168:
          if (v98 < (unint64_t)v97)
          {
            v106 = (unsigned __int16 *)&v97[-1];
            v107 = v97[-1];
            v108.i64[0] = 0x22002200220022;
            v108.i64[1] = 0x22002200220022;
            v109 = (int8x16_t)vceqq_s16(v107, v108);
            v110.i64[0] = 0x5C005C005C005CLL;
            v110.i64[1] = 0x5C005C005C005CLL;
            v111.i64[0] = 0x20002000200020;
            v111.i64[1] = 0x20002000200020;
            v105 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v107, v110), (int8x16_t)vcgtq_u16(v111, (uint16x8_t)v107)), v109);
            v109.i16[0] = vmaxvq_u16((uint16x8_t)v105);
            if (v109.i32[0])
              goto LABEL_183;
          }
        }
        else
        {
          v99 = v31 + 16;
          v100.i64[0] = 0x22002200220022;
          v100.i64[1] = 0x22002200220022;
          v101.i64[0] = 0x5C005C005C005CLL;
          v101.i64[1] = 0x5C005C005C005CLL;
          v102.i64[0] = 0x20002000200020;
          v102.i64[1] = 0x20002000200020;
          while (1)
          {
            v103 = *(int16x8_t *)(v99 - 14);
            v104 = (int8x16_t)vceqq_s16(v103, v100);
            v105 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v103, v101), (int8x16_t)vcgtq_u16(v102, (uint16x8_t)v103)), v104);
            v104.i16[0] = vmaxvq_u16((uint16x8_t)v105);
            if (v104.i32[0])
              break;
            v99 += 16;
            if (v99 >= (unint64_t)v97)
            {
              v98 = v99 - 14;
              goto LABEL_168;
            }
          }
          v106 = (unsigned __int16 *)(v99 - 14);
LABEL_183:
          v113 = *(int8x16_t *)v1583;
LABEL_184:
          v97 = (int16x8_t *)&v106[vminvq_u16((uint16x8_t)vornq_s8(v113, v105))];
        }
LABEL_185:
        *j = v97;
LABEL_186:
        if ((unint64_t)v97 < v91 && v97->u16[0] == (_DWORD)v40)
        {
          *(_BYTE *)(a1 + 25) &= ~1u;
          *(_QWORD *)(a1 + 32) = a3;
          *(_QWORD *)(a1 + 48) = (char *)v97->i64 + 2;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v97 - a3) >> 1);
          *(_BYTE *)(a1 + 24) = 4;
        }
        else
        {
          JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
        }
        return v1580;
      case 5:
        v499 = *(_DWORD *)(a1 + 28);
        if ((v499 & 0x7FFFFFFFu) >= 0xC8)
          v500 = 200;
        else
          v500 = v499 & 0x7FFFFFFF;
        JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(task_info_out, v499, *(_WORD **)(a1 + 32), v500);
        if (!*(_QWORD *)task_info_out)
        {
          v529 = *(_DWORD *)(a1 + 28);
          if ((v529 & 0x7FFFFFFFu) < 0xB
            || (JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda#1}::operator()(&v1591, v529, *(_WORD **)(a1 + 32), 0xAu), (*(_QWORD *)task_info_out = v1591) == 0))
          {
            v530 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v530 = 0x1500000002;
            *(_QWORD *)(v530 + 8) = "Unexpected identifier";
            *(_DWORD *)(v530 + 16) = 4;
            *(_QWORD *)task_info_out = v530;
          }
        }
        WTF::String::operator=((unint64_t *)(a1 + 96), (WTF::AtomStringImpl *)task_info_out, v501, v502, v503, v504, v505, v506);
        v125 = *(WTF::StringImpl **)task_info_out;
        *(_QWORD *)task_info_out = 0;
        if (!v125)
          return 0;
        if (*(_DWORD *)v125 == 2)
          goto LABEL_1028;
        *(_DWORD *)v125 -= 2;
        return 0;
      case 6:
        v25.i64[0] = *(_QWORD *)(a1 + 32);
        if ((v25.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v283 = (int)*(double *)v25.i64, *(double *)v25.i64 == (double)(int)v283)
          && ((_DWORD)v283 || (v25.i64[0] & 0x8000000000000000) == 0))
        {
          v16 = v283 | 0xFFFE000000000000;
        }
        else
        {
          v16 = v25.i64[0] + 0x2000000000000;
        }
        v31 = *(_QWORD *)(a1 + 48);
        v263 = *(_QWORD *)(a1 + 56);
        if (v31 >= v263)
        {
          v285 = 0;
        }
        else
        {
          do
          {
            v284 = *(unsigned __int16 *)v31 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
            v285 = !v284;
            if (!v284)
              break;
            v31 += 2;
            *j = v31;
          }
          while (v31 < v263);
        }
        if (v31 == v263)
          goto LABEL_1001;
        *v20 = 18;
        v40 = *(unsigned __int16 *)v31;
        if (v40 > 0xFF)
          goto LABEL_1011;
        v266 = JSC::tokenTypesOfLatin1Characters[v40];
        if (v266 <= 4)
        {
          if (v266 != 4)
            goto LABEL_626;
          v286 = *(unsigned __int8 *)(a1 + 40);
          if ((_DWORD)v40 == 39)
          {
            if (!*(_BYTE *)(a1 + 40))
              goto LABEL_1596;
            a3 = v31 + 2;
            *j = v31 + 2;
LABEL_1349:
            v269 = (int16x8_t *)a3;
            if (a3 >= v263)
              goto LABEL_1565;
            while (1)
            {
              v619 = v269->u16[0];
              if (v619 < 0x20)
              {
                if (v619 != 9)
                  goto LABEL_630;
              }
              else if (v619 == (_DWORD)v40 || v619 > 0xFF || v619 == 92)
              {
                goto LABEL_630;
              }
              v269 = (int16x8_t *)((char *)v269 + 2);
              *j = v269;
              if ((unint64_t)v269 >= v263)
                goto LABEL_630;
            }
          }
          a3 = v31 + 2;
          *j = v31 + 2;
          if (v286)
            goto LABEL_1349;
          v287 = v263 - a3;
          if ((uint64_t)(v263 - a3) <= -2)
            goto LABEL_1656;
          v269 = (int16x8_t *)((v287 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
          if ((unint64_t)v287 <= 0xE)
          {
            if (v263 == a3)
              goto LABEL_629;
            v620 = 2 * (v287 >> 1);
            v617 = (int16x8_t *)(v31 + 2);
            while (1)
            {
              v621 = v617->u16[0];
              if (v621 <= 0xFF)
              {
                v29 = (unint64_t)JSC::safeStringLatin1CharactersInStrictJSON;
                if (!JSC::safeStringLatin1CharactersInStrictJSON[v621])
                  goto LABEL_1560;
              }
              v617 = (int16x8_t *)((char *)v617 + 2);
              v620 -= 2;
              if (!v620)
                goto LABEL_629;
            }
          }
          v270 = v31 + 2;
          if (v287 < 15)
            goto LABEL_496;
          v271 = v31 + 16;
          do
          {
            v288 = *(int16x8_t *)(v271 - 14);
            v289.i64[0] = 0x22002200220022;
            v289.i64[1] = 0x22002200220022;
            v290 = (int8x16_t)vceqq_s16(v288, v289);
            v291.i64[0] = 0x5C005C005C005CLL;
            v291.i64[1] = 0x5C005C005C005CLL;
            v292.i64[0] = 0x20002000200020;
            v292.i64[1] = 0x20002000200020;
            v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v288, v291), (int8x16_t)vcgtq_u16(v292, (uint16x8_t)v288)), v290);
            v290.i16[0] = vmaxvq_u16((uint16x8_t)v25);
            if (v290.i32[0])
              goto LABEL_627;
            v271 += 16;
          }
          while (v271 < (unint64_t)v269);
LABEL_495:
          v270 = v271 - 14;
          goto LABEL_496;
        }
        if (v266 == 5)
        {
          if ((_DWORD)v40 == 102)
          {
            if ((uint64_t)(v263 - v31) >= 9 && *(_DWORD *)(v31 + 2) == 7077985 && *(_DWORD *)(v31 + 6) == 6619251)
              goto LABEL_758;
          }
          else if ((_DWORD)v40 == 116)
          {
            if ((uint64_t)(v263 - v31) >= 7 && *(_DWORD *)(v31 + 2) == 7667826 && *(_WORD *)(v31 + 6) == 101)
              goto LABEL_817;
          }
          else if ((_DWORD)v40 == 110
                 && (uint64_t)(v263 - v31) >= 7
                 && *(_DWORD *)(v31 + 2) == 7078005
                 && *(_WORD *)(v31 + 6) == 108)
          {
            goto LABEL_1291;
          }
          *(_QWORD *)(a1 + 32) = v31;
          LODWORD(v600) = v31;
          if (v31 < v263)
          {
            v600 = (unsigned __int16 *)v31;
            do
            {
              v604 = *v600;
              v606 = (v604 | 0x20u) - 97 >= 0x1A && (v604 - 48) >= 0xA && (v604 - 8204) >= 2;
              if (v606 && v604 != 95 && v604 != 36)
                break;
              *j = ++v600;
            }
            while ((unint64_t)v600 < v263);
          }
          goto LABEL_1305;
        }
        if (v266 != 6)
        {
          if (v266 - 18 >= 2)
            goto LABEL_626;
LABEL_1011:
          WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
          v363 = *(WTF::AtomStringImpl **)task_info_out;
          if (!*(_QWORD *)task_info_out)
          {
            __break(0xC471u);
            JUMPOUT(0x198B33488);
          }
          goto LABEL_1012;
        }
        v415 = v285 ^ 1;
        if ((_DWORD)v40 != 45)
          v415 = 1;
        if ((v415 & 1) != 0)
        {
          v416 = 0;
        }
        else
        {
          *j = v31 + 2;
          v416 = 1;
        }
        v417 = (unsigned __int16 *)(v31 + 2 * v416);
        if ((unint64_t)v417 >= v263)
          goto LABEL_1254;
        v418 = *v417;
        if (v418 == 48)
        {
          v421 = v416 + 1;
        }
        else
        {
          if ((v418 - 49) > 8)
            goto LABEL_1254;
          v419 = v416 + 1;
          v420 = 2 * v416 + 2;
          do
          {
            v421 = v419;
            if (v31 + v420 >= v263)
              break;
            ++v419;
            v420 += 2;
          }
          while (*(unsigned __int16 *)(v31 + 2 * v421) - 48 < 0xA);
        }
        v411 = (unsigned __int16 *)(v31 + 2 * v421);
        *j = v411;
        if ((unint64_t)v411 < v263)
        {
          v422 = *v411;
          if (v422 != 101 && v422 != 69)
          {
            if (v422 == 46)
            {
              *j = v411 + 1;
              if ((unint64_t)(v411 + 1) >= v263 || v411[1] - 48 > 9)
                goto LABEL_1409;
              v626 = v31 + 2 * v421 + 4;
              do
              {
                v411 = (unsigned __int16 *)v626;
                if (v626 >= v263)
                  break;
                v626 += 2;
              }
              while (*v411 - 48 < 0xA);
              *j = v411;
            }
            else if (v421 <= 9)
            {
              *v20 = 6;
              if ((_DWORD)v40 == 45)
              {
                if (v421 < 2)
                  goto LABEL_1412;
                v31 += 2;
              }
              v413 = 0;
              do
              {
                v423 = *(unsigned __int16 *)v31;
                v31 += 2;
                v413 = v423 + 10 * v413 - 48;
              }
              while (v31 < (unint64_t)v411);
              goto LABEL_777;
            }
          }
        }
        if ((unint64_t)v411 >= v263 || (*v411 | 0x20) != 0x65)
          goto LABEL_1406;
        v627 = v411 + 1;
        *j = v411 + 1;
        if ((unint64_t)(v411 + 1) < v263)
        {
          v628 = *v627;
          if (v628 == 45 || v628 == 43)
          {
            v627 = v411 + 2;
            *j = v411 + 2;
          }
        }
        if ((unint64_t)v627 < v263 && *v627 - 48 <= 9)
        {
          v629 = v627 + 1;
          do
          {
            v411 = v629;
            if ((unint64_t)v629 >= v263)
              break;
            ++v629;
          }
          while (*v411 - 48 < 0xA);
          goto LABEL_1405;
        }
        goto LABEL_1408;
      case 7:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token ':'";
        goto LABEL_191;
      case 8:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token '('";
        goto LABEL_191;
      case 9:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token ')'";
        goto LABEL_191;
      case 10:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token ','";
        goto LABEL_191;
      case 11:
        v31 = *(_QWORD *)(a1 + 48);
        v342 = *(_QWORD *)(a1 + 56);
        if (v31 >= v342)
        {
          v344 = 0;
        }
        else
        {
          do
          {
            v343 = *(unsigned __int16 *)v31 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
            v344 = !v343;
            if (!v343)
              break;
            v31 += 2;
            *j = v31;
          }
          while (v31 < v342);
        }
        if (v31 == v342)
        {
          v436 = 14;
        }
        else
        {
          *v20 = 18;
          v40 = *(unsigned __int16 *)v31;
          if (v40 > 0xFF)
          {
LABEL_1045:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
            v519 = *(WTF::AtomStringImpl **)task_info_out;
            if (!*(_QWORD *)task_info_out)
            {
              __break(0xC471u);
              JUMPOUT(0x198B33530);
            }
            goto LABEL_1046;
          }
          v345 = JSC::tokenTypesOfLatin1Characters[v40];
          if (v345 <= 4)
          {
            if (v345 != 4)
              goto LABEL_710;
            v346 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v40 != 39)
            {
              a3 = v31 + 2;
              *j = v31 + 2;
              if (!v346)
              {
                v347 = v342 - a3;
                if ((uint64_t)(v342 - a3) <= -2)
                  goto LABEL_1656;
                v348 = (int16x8_t *)((v347 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
                if ((unint64_t)v347 <= 0xE)
                {
                  if (v342 != a3)
                  {
                    v655 = 2 * (v347 >> 1);
                    v656 = (int16x8_t *)(v31 + 2);
                    while (1)
                    {
                      v657 = v656->u16[0];
                      if (v657 <= 0xFF)
                      {
                        v29 = (unint64_t)JSC::safeStringLatin1CharactersInStrictJSON;
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v657])
                          break;
                      }
                      v656 = (int16x8_t *)((char *)v656 + 2);
                      v655 -= 2;
                      if (!v655)
                        goto LABEL_723;
                    }
                    v348 = v656;
                  }
                  goto LABEL_723;
                }
                v349 = v31 + 2;
                if (v347 < 15)
                {
LABEL_615:
                  if (v349 >= (unint64_t)v348)
                    goto LABEL_723;
                  v356 = (unsigned __int16 *)&v348[-1];
                  v357 = v348[-1];
                  v358.i64[0] = 0x22002200220022;
                  v358.i64[1] = 0x22002200220022;
                  v359 = (int8x16_t)vceqq_s16(v357, v358);
                  v360.i64[0] = 0x5C005C005C005CLL;
                  v360.i64[1] = 0x5C005C005C005CLL;
                  v361.i64[0] = 0x20002000200020;
                  v361.i64[1] = 0x20002000200020;
                  v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v357, v360), (int8x16_t)vcgtq_u16(v361, (uint16x8_t)v357)), v359);
                  v359.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                  if (!v359.i32[0])
                    goto LABEL_723;
                }
                else
                {
                  v350 = v31 + 16;
                  while (1)
                  {
                    v351 = *(int16x8_t *)(v350 - 14);
                    v352.i64[0] = 0x22002200220022;
                    v352.i64[1] = 0x22002200220022;
                    v353 = (int8x16_t)vceqq_s16(v351, v352);
                    v354.i64[0] = 0x5C005C005C005CLL;
                    v354.i64[1] = 0x5C005C005C005CLL;
                    v355.i64[0] = 0x20002000200020;
                    v355.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v351, v354), (int8x16_t)vcgtq_u16(v355, (uint16x8_t)v351)), v353);
                    v353.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v353.i32[0])
                      break;
                    v350 += 16;
                    if (v350 >= (unint64_t)v348)
                    {
                      v349 = v350 - 14;
                      goto LABEL_615;
                    }
                  }
                  v356 = (unsigned __int16 *)(v350 - 14);
                }
                v25 = (int32x4_t)vornq_s8(*(int8x16_t *)v1583, (int8x16_t)v25);
                v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                v348 = (int16x8_t *)&v356[v25.u8[0]];
LABEL_723:
                *j = v348;
LABEL_724:
                if ((unint64_t)v348 < v342 && v348->u16[0] == (_DWORD)v40)
                {
                  *(_BYTE *)(a1 + 25) &= ~1u;
                  *(_QWORD *)(a1 + 32) = a3;
                  *(_QWORD *)(a1 + 48) = (char *)v348->i64 + 2;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v348 - a3) >> 1);
                  v403 = 4;
LABEL_727:
                  *(_BYTE *)(a1 + 24) = v403;
                  goto LABEL_711;
                }
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
LABEL_711:
                v16 = 7;
                goto LABEL_62;
              }
LABEL_1511:
              v348 = (int16x8_t *)a3;
              if (a3 < v342)
              {
                while (1)
                {
                  v654 = v348->u16[0];
                  if (v654 < 0x20)
                  {
                    if (v654 != 9)
                      goto LABEL_724;
                  }
                  else if (v654 == (_DWORD)v40 || v654 > 0xFF || v654 == 92)
                  {
                    goto LABEL_724;
                  }
                  v348 = (int16x8_t *)((char *)v348 + 2);
                  *j = v348;
                  if ((unint64_t)v348 >= v342)
                    goto LABEL_724;
                }
              }
              v348 = (int16x8_t *)a3;
              goto LABEL_724;
            }
            if (*(_BYTE *)(a1 + 40))
            {
              a3 = v31 + 2;
              *j = v31 + 2;
              goto LABEL_1511;
            }
            v609 = WTF::fastCompactMalloc((WTF *)0x20);
            v519 = (WTF::AtomStringImpl *)v609;
            v25.i64[0] = 0x2900000002;
            v610 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1310;
          }
          if (v345 != 5)
          {
            if (v345 != 6)
            {
              if (v345 - 18 >= 2)
              {
LABEL_710:
                *v20 = v345;
                *j = v31 + 2;
                goto LABEL_711;
              }
              goto LABEL_1045;
            }
            v437 = v344 ^ 1;
            if ((_DWORD)v40 != 45)
              v437 = 1;
            if ((v437 & 1) != 0)
            {
              v438 = 0;
            }
            else
            {
              *j = v31 + 2;
              v438 = 1;
            }
            v439 = (unsigned __int16 *)(v31 + 2 * v438);
            if ((unint64_t)v439 < v342)
            {
              v440 = *v439;
              if (v440 == 48)
              {
                v443 = v438 + 1;
LABEL_834:
                v444 = (unsigned __int16 *)(v31 + 2 * v443);
                *j = v444;
                if ((unint64_t)v444 < v342)
                {
                  v445 = *v444;
                  if (v445 != 101 && v445 != 69)
                  {
                    if (v445 == 46)
                    {
                      *j = v444 + 1;
                      if ((unint64_t)(v444 + 1) >= v342 || v444[1] - 48 > 9)
                      {
                        v609 = WTF::fastCompactMalloc((WTF *)0x20);
                        v519 = (WTF::AtomStringImpl *)v609;
                        v25.i64[0] = 0x2200000002;
                        v610 = "Invalid digits after decimal point";
                        goto LABEL_1310;
                      }
                      v658 = v31 + 2 * v443 + 4;
                      do
                      {
                        v444 = (unsigned __int16 *)v658;
                        if (v658 >= v342)
                          break;
                        v658 += 2;
                      }
                      while (*v444 - 48 < 0xA);
                      *j = v444;
                    }
                    else if (v443 <= 9)
                    {
                      *v20 = 6;
                      if ((_DWORD)v40 == 45)
                      {
                        if (v443 < 2)
                          goto LABEL_1564;
                        v31 += 2;
                      }
                      v446 = 0;
                      do
                      {
                        v447 = *(unsigned __int16 *)v31;
                        v31 += 2;
                        v446 = v447 + 10 * v446 - 48;
                      }
                      while (v31 < (unint64_t)v444);
                      if ((_DWORD)v40 != 45)
                      {
                        *(double *)v25.i64 = (double)v446;
LABEL_844:
                        *(_QWORD *)(a1 + 32) = v25.i64[0];
                        goto LABEL_711;
                      }
                      if (v446)
                      {
                        *(double *)v25.i64 = (double)-v446;
                        goto LABEL_844;
                      }
LABEL_1564:
                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                      goto LABEL_711;
                    }
                  }
                }
                if ((unint64_t)v444 >= v342 || (*v444 | 0x20) != 0x65)
                {
LABEL_1546:
                  *v20 = 6;
                  LODWORD(v40) = (_DWORD)v444 - v31;
                  if ((uint64_t)((uint64_t)v444 - v31) <= -2)
                    goto LABEL_1656;
                  *(_QWORD *)task_info_out = 0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v444, (double *)task_info_out, 0x2E00000005);
                  v25.i64[0] = *(_QWORD *)task_info_out;
                  goto LABEL_844;
                }
                v659 = v444 + 1;
                *j = v444 + 1;
                if ((unint64_t)(v444 + 1) < v342)
                {
                  v660 = *v659;
                  if (v660 == 45 || v660 == 43)
                  {
                    v659 = v444 + 2;
                    *j = v444 + 2;
                  }
                }
                if ((unint64_t)v659 < v342 && *v659 - 48 <= 9)
                {
                  v661 = v659 + 1;
                  do
                  {
                    v444 = v661;
                    if ((unint64_t)v661 >= v342)
                      break;
                    ++v661;
                  }
                  while (*v444 - 48 < 0xA);
                  *j = v444;
                  goto LABEL_1546;
                }
                v609 = WTF::fastCompactMalloc((WTF *)0x20);
                v519 = (WTF::AtomStringImpl *)v609;
                v25.i64[0] = 0x5D00000002;
                v610 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1310:
                *(_QWORD *)v609 = v25.i64[0];
                *(_QWORD *)(v609 + 8) = v610;
                *(_DWORD *)(v609 + 16) = 4;
LABEL_1046:
                v520 = *v1568;
                *v1568 = v519;
                if (v520)
                {
                  if (*(_DWORD *)v520 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v520, v518, a3, v31, a5, a6, a7, a8);
                    WTF::fastFree(v539, v540, v541, v542, v543, v544, v545, v546);
                  }
                  else
                  {
                    *(_DWORD *)v520 -= 2;
                  }
                }
                goto LABEL_711;
              }
              if ((v440 - 49) <= 8)
              {
                v441 = v438 + 1;
                v442 = 2 * v438 + 2;
                do
                {
                  v443 = v441;
                  if (v31 + v442 >= v342)
                    break;
                  ++v441;
                  v442 += 2;
                }
                while (*(unsigned __int16 *)(v31 + 2 * v443) - 48 < 0xA);
                goto LABEL_834;
              }
            }
            v609 = WTF::fastCompactMalloc((WTF *)0x20);
            v519 = (WTF::AtomStringImpl *)v609;
            v25.i64[0] = 0xE00000002;
            v610 = "Invalid number";
            goto LABEL_1310;
          }
          if ((_DWORD)v40 == 102)
          {
            if ((uint64_t)(v342 - v31) < 9 || *(_DWORD *)(v31 + 2) != 7077985 || *(_DWORD *)(v31 + 6) != 6619251)
              goto LABEL_1445;
            *j = v31 + 10;
            v436 = 12;
          }
          else if ((_DWORD)v40 == 116)
          {
            if ((uint64_t)(v342 - v31) < 7 || *(_DWORD *)(v31 + 2) != 7667826 || *(_WORD *)(v31 + 6) != 101)
              goto LABEL_1445;
            *j = v31 + 8;
            v436 = 11;
          }
          else
          {
            if ((_DWORD)v40 != 110
              || (uint64_t)(v342 - v31) < 7
              || *(_DWORD *)(v31 + 2) != 7078005
              || *(_WORD *)(v31 + 6) != 108)
            {
LABEL_1445:
              *(_QWORD *)(a1 + 32) = v31;
              LODWORD(v642) = v31;
              if (v31 < v342)
              {
                v642 = (unsigned __int16 *)v31;
                do
                {
                  v643 = *v642;
                  v645 = (v643 | 0x20u) - 97 >= 0x1A
                      && (v643 - 48) >= 0xA
                      && (v643 - 8204) >= 2;
                  if (v645 && v643 != 95 && v643 != 36)
                    break;
                  *j = ++v642;
                }
                while ((unint64_t)v642 < v342);
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v642 - v31) >> 1);
              v403 = 5;
              goto LABEL_727;
            }
            *j = v31 + 8;
            v436 = 13;
          }
        }
        *v20 = v436;
        goto LABEL_711;
      case 12:
        v31 = *(_QWORD *)(a1 + 48);
        v322 = *(_QWORD *)(a1 + 56);
        if (v31 >= v322)
        {
          v324 = 0;
        }
        else
        {
          do
          {
            v323 = *(unsigned __int16 *)v31 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v31] == 19;
            v324 = !v323;
            if (!v323)
              break;
            v31 += 2;
            *j = v31;
          }
          while (v31 < v322);
        }
        if (v31 == v322)
        {
          v424 = 14;
        }
        else
        {
          *v20 = 18;
          v40 = *(unsigned __int16 *)v31;
          if (v40 > 0xFF)
          {
LABEL_1040:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v31, 1uLL, 39);
            v516 = *(WTF::AtomStringImpl **)task_info_out;
            if (!*(_QWORD *)task_info_out)
            {
              __break(0xC471u);
              JUMPOUT(0x198B334E0);
            }
            goto LABEL_1041;
          }
          v325 = JSC::tokenTypesOfLatin1Characters[v40];
          if (v325 <= 4)
          {
            if (v325 != 4)
              goto LABEL_700;
            v326 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v40 != 39)
            {
              a3 = v31 + 2;
              *j = v31 + 2;
              if (!v326)
              {
                v327 = v322 - a3;
                if ((uint64_t)(v322 - a3) <= -2)
                  goto LABEL_1656;
                v328 = (int16x8_t *)((v327 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2);
                if ((unint64_t)v327 <= 0xE)
                {
                  if (v322 != a3)
                  {
                    v651 = 2 * (v327 >> 1);
                    v652 = (int16x8_t *)(v31 + 2);
                    while (1)
                    {
                      v653 = v652->u16[0];
                      if (v653 <= 0xFF)
                      {
                        v29 = (unint64_t)JSC::safeStringLatin1CharactersInStrictJSON;
                        if (!JSC::safeStringLatin1CharactersInStrictJSON[v653])
                          break;
                      }
                      v652 = (int16x8_t *)((char *)v652 + 2);
                      v651 -= 2;
                      if (!v651)
                        goto LABEL_716;
                    }
                    v328 = v652;
                  }
                  goto LABEL_716;
                }
                v329 = v31 + 2;
                if (v327 < 15)
                {
LABEL_588:
                  if (v329 >= (unint64_t)v328)
                    goto LABEL_716;
                  v336 = (unsigned __int16 *)&v328[-1];
                  v337 = v328[-1];
                  v338.i64[0] = 0x22002200220022;
                  v338.i64[1] = 0x22002200220022;
                  v339 = (int8x16_t)vceqq_s16(v337, v338);
                  v340.i64[0] = 0x5C005C005C005CLL;
                  v340.i64[1] = 0x5C005C005C005CLL;
                  v341.i64[0] = 0x20002000200020;
                  v341.i64[1] = 0x20002000200020;
                  v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v337, v340), (int8x16_t)vcgtq_u16(v341, (uint16x8_t)v337)), v339);
                  v339.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                  if (!v339.i32[0])
                    goto LABEL_716;
                }
                else
                {
                  v330 = v31 + 16;
                  while (1)
                  {
                    v331 = *(int16x8_t *)(v330 - 14);
                    v332.i64[0] = 0x22002200220022;
                    v332.i64[1] = 0x22002200220022;
                    v333 = (int8x16_t)vceqq_s16(v331, v332);
                    v334.i64[0] = 0x5C005C005C005CLL;
                    v334.i64[1] = 0x5C005C005C005CLL;
                    v335.i64[0] = 0x20002000200020;
                    v335.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v331, v334), (int8x16_t)vcgtq_u16(v335, (uint16x8_t)v331)), v333);
                    v333.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v333.i32[0])
                      break;
                    v330 += 16;
                    if (v330 >= (unint64_t)v328)
                    {
                      v329 = v330 - 14;
                      goto LABEL_588;
                    }
                  }
                  v336 = (unsigned __int16 *)(v330 - 14);
                }
                v25 = (int32x4_t)vornq_s8(*(int8x16_t *)v1583, (int8x16_t)v25);
                v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                v328 = (int16x8_t *)&v336[v25.u8[0]];
LABEL_716:
                *j = v328;
LABEL_717:
                if ((unint64_t)v328 < v322 && v328->u16[0] == (_DWORD)v40)
                {
                  *(_BYTE *)(a1 + 25) &= ~1u;
                  *(_QWORD *)(a1 + 32) = a3;
                  *(_QWORD *)(a1 + 48) = (char *)v328->i64 + 2;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v328 - a3) >> 1);
                  v402 = 4;
LABEL_720:
                  *(_BYTE *)(a1 + 24) = v402;
                  goto LABEL_701;
                }
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v40, a5, a6, a7, a8);
LABEL_701:
                v16 = 6;
                goto LABEL_62;
              }
LABEL_1465:
              v328 = (int16x8_t *)a3;
              if (a3 < v322)
              {
                while (1)
                {
                  v646 = v328->u16[0];
                  if (v646 < 0x20)
                  {
                    if (v646 != 9)
                      goto LABEL_717;
                  }
                  else if (v646 == (_DWORD)v40 || v646 > 0xFF || v646 == 92)
                  {
                    goto LABEL_717;
                  }
                  v328 = (int16x8_t *)((char *)v328 + 2);
                  *j = v328;
                  if ((unint64_t)v328 >= v322)
                    goto LABEL_717;
                }
              }
              v328 = (int16x8_t *)a3;
              goto LABEL_717;
            }
            if (*(_BYTE *)(a1 + 40))
            {
              a3 = v31 + 2;
              *j = v31 + 2;
              goto LABEL_1465;
            }
            v607 = WTF::fastCompactMalloc((WTF *)0x20);
            v516 = (WTF::AtomStringImpl *)v607;
            v25.i64[0] = 0x2900000002;
            v608 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1307;
          }
          if (v325 != 5)
          {
            if (v325 != 6)
            {
              if (v325 - 18 >= 2)
              {
LABEL_700:
                *v20 = v325;
                *j = v31 + 2;
                goto LABEL_701;
              }
              goto LABEL_1040;
            }
            v425 = v324 ^ 1;
            if ((_DWORD)v40 != 45)
              v425 = 1;
            if ((v425 & 1) != 0)
            {
              v426 = 0;
            }
            else
            {
              *j = v31 + 2;
              v426 = 1;
            }
            v427 = (unsigned __int16 *)(v31 + 2 * v426);
            if ((unint64_t)v427 < v322)
            {
              v428 = *v427;
              if (v428 == 48)
              {
                v431 = v426 + 1;
LABEL_797:
                v432 = (unsigned __int16 *)(v31 + 2 * v431);
                *j = v432;
                if ((unint64_t)v432 < v322)
                {
                  v433 = *v432;
                  if (v433 != 101 && v433 != 69)
                  {
                    if (v433 == 46)
                    {
                      *j = v432 + 1;
                      if ((unint64_t)(v432 + 1) >= v322 || v432[1] - 48 > 9)
                      {
                        v607 = WTF::fastCompactMalloc((WTF *)0x20);
                        v516 = (WTF::AtomStringImpl *)v607;
                        v25.i64[0] = 0x2200000002;
                        v608 = "Invalid digits after decimal point";
                        goto LABEL_1307;
                      }
                      v647 = v31 + 2 * v431 + 4;
                      do
                      {
                        v432 = (unsigned __int16 *)v647;
                        if (v647 >= v322)
                          break;
                        v647 += 2;
                      }
                      while (*v432 - 48 < 0xA);
                      *j = v432;
                    }
                    else if (v431 <= 9)
                    {
                      *v20 = 6;
                      if ((_DWORD)v40 == 45)
                      {
                        if (v431 < 2)
                          goto LABEL_1562;
                        v31 += 2;
                      }
                      v434 = 0;
                      do
                      {
                        v435 = *(unsigned __int16 *)v31;
                        v31 += 2;
                        v434 = v435 + 10 * v434 - 48;
                      }
                      while (v31 < (unint64_t)v432);
                      if ((_DWORD)v40 != 45)
                      {
                        *(double *)v25.i64 = (double)v434;
LABEL_807:
                        *(_QWORD *)(a1 + 32) = v25.i64[0];
                        goto LABEL_701;
                      }
                      if (v434)
                      {
                        *(double *)v25.i64 = (double)-v434;
                        goto LABEL_807;
                      }
LABEL_1562:
                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                      goto LABEL_701;
                    }
                  }
                }
                if ((unint64_t)v432 >= v322 || (*v432 | 0x20) != 0x65)
                {
LABEL_1494:
                  *v20 = 6;
                  LODWORD(v40) = (_DWORD)v432 - v31;
                  if ((uint64_t)((uint64_t)v432 - v31) <= -2)
                    goto LABEL_1656;
                  *(_QWORD *)task_info_out = 0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v31, v432, (double *)task_info_out, 0x2E00000005);
                  v25.i64[0] = *(_QWORD *)task_info_out;
                  goto LABEL_807;
                }
                v648 = v432 + 1;
                *j = v432 + 1;
                if ((unint64_t)(v432 + 1) < v322)
                {
                  v649 = *v648;
                  if (v649 == 45 || v649 == 43)
                  {
                    v648 = v432 + 2;
                    *j = v432 + 2;
                  }
                }
                if ((unint64_t)v648 < v322 && *v648 - 48 <= 9)
                {
                  v650 = v648 + 1;
                  do
                  {
                    v432 = v650;
                    if ((unint64_t)v650 >= v322)
                      break;
                    ++v650;
                  }
                  while (*v432 - 48 < 0xA);
                  *j = v432;
                  goto LABEL_1494;
                }
                v607 = WTF::fastCompactMalloc((WTF *)0x20);
                v516 = (WTF::AtomStringImpl *)v607;
                v25.i64[0] = 0x5D00000002;
                v608 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1307:
                *(_QWORD *)v607 = v25.i64[0];
                *(_QWORD *)(v607 + 8) = v608;
                *(_DWORD *)(v607 + 16) = 4;
LABEL_1041:
                v517 = *v1568;
                *v1568 = v516;
                if (v517)
                {
                  if (*(_DWORD *)v517 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v517, v515, a3, v31, a5, a6, a7, a8);
                    WTF::fastFree(v531, v532, v533, v534, v535, v536, v537, v538);
                  }
                  else
                  {
                    *(_DWORD *)v517 -= 2;
                  }
                }
                goto LABEL_701;
              }
              if ((v428 - 49) <= 8)
              {
                v429 = v426 + 1;
                v430 = 2 * v426 + 2;
                do
                {
                  v431 = v429;
                  if (v31 + v430 >= v322)
                    break;
                  ++v429;
                  v430 += 2;
                }
                while (*(unsigned __int16 *)(v31 + 2 * v431) - 48 < 0xA);
                goto LABEL_797;
              }
            }
            v607 = WTF::fastCompactMalloc((WTF *)0x20);
            v516 = (WTF::AtomStringImpl *)v607;
            v25.i64[0] = 0xE00000002;
            v608 = "Invalid number";
            goto LABEL_1307;
          }
          if ((_DWORD)v40 == 102)
          {
            if ((uint64_t)(v322 - v31) < 9 || *(_DWORD *)(v31 + 2) != 7077985 || *(_DWORD *)(v31 + 6) != 6619251)
              goto LABEL_1316;
            *j = v31 + 10;
            v424 = 12;
          }
          else if ((_DWORD)v40 == 116)
          {
            if ((uint64_t)(v322 - v31) < 7 || *(_DWORD *)(v31 + 2) != 7667826 || *(_WORD *)(v31 + 6) != 101)
              goto LABEL_1316;
            *j = v31 + 8;
            v424 = 11;
          }
          else
          {
            if ((_DWORD)v40 != 110
              || (uint64_t)(v322 - v31) < 7
              || *(_DWORD *)(v31 + 2) != 7078005
              || *(_WORD *)(v31 + 6) != 108)
            {
LABEL_1316:
              *(_QWORD *)(a1 + 32) = v31;
              LODWORD(v611) = v31;
              if (v31 < v322)
              {
                v611 = (unsigned __int16 *)v31;
                do
                {
                  v612 = *v611;
                  v614 = (v612 | 0x20u) - 97 >= 0x1A
                      && (v612 - 48) >= 0xA
                      && (v612 - 8204) >= 2;
                  if (v614 && v612 != 95 && v612 != 36)
                    break;
                  *j = ++v611;
                }
                while ((unint64_t)v611 < v322);
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v611 - v31) >> 1);
              v402 = 5;
              goto LABEL_720;
            }
            *j = v31 + 8;
            v424 = 13;
          }
        }
        *v20 = v424;
        goto LABEL_701;
      case 13:
        v40 = *(_QWORD *)(a1 + 48);
        v562 = *(_QWORD *)(a1 + 56);
        if (v40 >= v562)
        {
          v564 = 0;
        }
        else
        {
          do
          {
            v563 = *(unsigned __int16 *)v40 <= 0xFFu
                && JSC::tokenTypesOfLatin1Characters[*(_WORD *)v40] == 19;
            v564 = !v563;
            if (!v563)
              break;
            v40 += 2;
            *j = v40;
          }
          while (v40 < v562);
        }
        if (v40 == v562)
        {
          v630 = 14;
        }
        else
        {
          *v20 = 18;
          v31 = *(unsigned __int16 *)v40;
          if (v31 > 0xFF)
          {
LABEL_1593:
            WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)task_info_out, (int8x16_t *)"Unrecognized token '", 21, (_WORD *)v40, 1uLL, 39);
            v667 = *(WTF::AtomStringImpl **)task_info_out;
            if (!*(_QWORD *)task_info_out)
            {
              __break(0xC471u);
              JUMPOUT(0x198B34E6CLL);
            }
            goto LABEL_1637;
          }
          v565 = JSC::tokenTypesOfLatin1Characters[v31];
          if (v565 <= 4)
          {
            if (v565 != 4)
              goto LABEL_1252;
            v566 = *(unsigned __int8 *)(a1 + 40);
            if ((_DWORD)v31 != 39)
            {
              a3 = v40 + 2;
              *j = v40 + 2;
              if (!v566)
              {
                v567 = v562 - a3;
                if ((uint64_t)(v562 - a3) <= -2)
                  goto LABEL_1656;
                v568 = (int16x8_t *)((v567 & 0xFFFFFFFFFFFFFFFELL) + v40 + 2);
                if ((unint64_t)v567 <= 0xE)
                {
                  if (v562 != a3)
                  {
                    v663 = 2 * (v567 >> 1);
                    v664 = (int16x8_t *)a3;
                    while (1)
                    {
                      v665 = v664->u16[0];
                      if (v665 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v665])
                        break;
                      v664 = (int16x8_t *)((char *)v664 + 2);
                      v663 -= 2;
                      if (!v663)
                        goto LABEL_1261;
                    }
                    v568 = v664;
                  }
                  goto LABEL_1261;
                }
                v569 = v40 + 2;
                if (v567 < 15)
                {
LABEL_1152:
                  if (v569 >= (unint64_t)v568)
                    goto LABEL_1261;
                  v576 = (unsigned __int16 *)&v568[-1];
                  v577 = v568[-1];
                  v578.i64[0] = 0x22002200220022;
                  v578.i64[1] = 0x22002200220022;
                  v579 = (int8x16_t)vceqq_s16(v577, v578);
                  v580.i64[0] = 0x5C005C005C005CLL;
                  v580.i64[1] = 0x5C005C005C005CLL;
                  v581.i64[0] = 0x20002000200020;
                  v581.i64[1] = 0x20002000200020;
                  v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v577, v580), (int8x16_t)vcgtq_u16(v581, (uint16x8_t)v577)), v579);
                  v579.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                  if (!v579.i32[0])
                    goto LABEL_1261;
                }
                else
                {
                  v570 = v40 + 16;
                  while (1)
                  {
                    v571 = *(int16x8_t *)(v570 - 14);
                    v572.i64[0] = 0x22002200220022;
                    v572.i64[1] = 0x22002200220022;
                    v573 = (int8x16_t)vceqq_s16(v571, v572);
                    v574.i64[0] = 0x5C005C005C005CLL;
                    v574.i64[1] = 0x5C005C005C005CLL;
                    v575.i64[0] = 0x20002000200020;
                    v575.i64[1] = 0x20002000200020;
                    v25 = (int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v571, v574), (int8x16_t)vcgtq_u16(v575, (uint16x8_t)v571)), v573);
                    v573.i16[0] = vmaxvq_u16((uint16x8_t)v25);
                    if (v573.i32[0])
                      break;
                    v570 += 16;
                    if (v570 >= (unint64_t)v568)
                    {
                      v569 = v570 - 14;
                      goto LABEL_1152;
                    }
                  }
                  v576 = (unsigned __int16 *)(v570 - 14);
                }
                v25 = (int32x4_t)vornq_s8(*(int8x16_t *)v1583, (int8x16_t)v25);
                v25.i16[0] = vminvq_u16((uint16x8_t)v25);
                v568 = (int16x8_t *)&v576[v25.u8[0]];
LABEL_1261:
                *j = v568;
LABEL_1262:
                if ((unint64_t)v568 < v562 && v568->u16[0] == (_DWORD)v31)
                {
                  *(_BYTE *)(a1 + 25) &= ~1u;
                  *(_QWORD *)(a1 + 32) = a3;
                  *(_QWORD *)(a1 + 48) = (char *)v568->i64 + 2;
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v568 - a3) >> 1);
                  v599 = 4;
LABEL_1265:
                  *(_BYTE *)(a1 + 24) = v599;
                  goto LABEL_1253;
                }
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow((uint64_t)v1568, a1 + 24, a3, v31, a5, a6, a7, a8);
LABEL_1253:
                v16 = 2;
                goto LABEL_62;
              }
LABEL_1577:
              v568 = (int16x8_t *)a3;
              if (a3 < v562)
              {
                while (1)
                {
                  v662 = v568->u16[0];
                  if (v662 < 0x20)
                  {
                    if (v662 != 9)
                      goto LABEL_1262;
                  }
                  else if (v662 == (_DWORD)v31 || v662 > 0xFF || v662 == 92)
                  {
                    goto LABEL_1262;
                  }
                  v568 = (int16x8_t *)((char *)v568 + 2);
                  *j = v568;
                  if ((unint64_t)v568 >= v562)
                    goto LABEL_1262;
                }
              }
              v568 = (int16x8_t *)a3;
              goto LABEL_1262;
            }
            if (*(_BYTE *)(a1 + 40))
            {
              a3 = v40 + 2;
              *j = v40 + 2;
              goto LABEL_1577;
            }
            v668 = WTF::fastCompactMalloc((WTF *)0x20);
            v667 = (WTF::AtomStringImpl *)v668;
            v25.i64[0] = 0x2900000002;
            v669 = "Single quotes (') are not allowed in JSON";
            goto LABEL_1636;
          }
          if (v565 != 5)
          {
            if (v565 != 6)
            {
              if (v565 - 18 >= 2)
              {
LABEL_1252:
                *v20 = v565;
                *j = v40 + 2;
                goto LABEL_1253;
              }
              goto LABEL_1593;
            }
            v631 = v564 ^ 1;
            if ((_DWORD)v31 != 45)
              v631 = 1;
            if ((v631 & 1) != 0)
            {
              v632 = 0;
            }
            else
            {
              *j = v40 + 2;
              v632 = 1;
            }
            v633 = (unsigned __int16 *)(v40 + 2 * v632);
            if ((unint64_t)v633 < v562)
            {
              v634 = *v633;
              if (v634 == 48)
              {
                v637 = v632 + 1;
LABEL_1429:
                v638 = (unsigned __int16 *)(v40 + 2 * v637);
                *j = v638;
                if ((unint64_t)v638 < v562)
                {
                  v639 = *v638;
                  if (v639 != 101 && v639 != 69)
                  {
                    if (v639 == 46)
                    {
                      v670 = v638 + 1;
                      *j = v670;
                      if ((unint64_t)v670 >= v562 || *v670 - 48 > 9)
                      {
                        v668 = WTF::fastCompactMalloc((WTF *)0x20);
                        v667 = (WTF::AtomStringImpl *)v668;
                        v25.i64[0] = 0x2200000002;
                        v669 = "Invalid digits after decimal point";
                        goto LABEL_1636;
                      }
                      v671 = v40 + 2 * v637 + 4;
                      do
                      {
                        v638 = (unsigned __int16 *)v671;
                        if (v671 >= v562)
                          break;
                        v671 += 2;
                      }
                      while (*v638 - 48 < 0xA);
                      *j = v638;
                    }
                    else if (v637 <= 9)
                    {
                      *v20 = 6;
                      if ((_DWORD)v31 == 45)
                      {
                        if (v637 < 2)
                          goto LABEL_1640;
                        v40 += 2;
                      }
                      v640 = 0;
                      do
                      {
                        v641 = *(unsigned __int16 *)v40;
                        v40 += 2;
                        v640 = v641 + 10 * v640 - 48;
                      }
                      while (v40 < (unint64_t)v638);
                      if ((_DWORD)v31 != 45)
                      {
                        *(double *)v25.i64 = (double)v640;
LABEL_1439:
                        *(_QWORD *)(a1 + 32) = v25.i64[0];
                        goto LABEL_1253;
                      }
                      if (v640)
                      {
                        *(double *)v25.i64 = (double)-v640;
                        goto LABEL_1439;
                      }
LABEL_1640:
                      *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                      goto LABEL_1253;
                    }
                  }
                }
                if ((unint64_t)v638 >= v562 || (*v638 | 0x20) != 0x65)
                {
LABEL_1618:
                  *v20 = 6;
                  if ((uint64_t)((uint64_t)v638 - v40) <= -2)
                    goto LABEL_1656;
                  *(_QWORD *)task_info_out = 0;
                  fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)v40, v638, (double *)task_info_out, 0x2E00000005);
                  v25.i64[0] = *(_QWORD *)task_info_out;
                  goto LABEL_1439;
                }
                v672 = v638 + 1;
                *j = v638 + 1;
                if ((unint64_t)(v638 + 1) < v562)
                {
                  v673 = *v672;
                  if (v673 == 45 || v673 == 43)
                  {
                    v672 = v638 + 2;
                    *j = v638 + 2;
                  }
                }
                if ((unint64_t)v672 < v562 && *v672 - 48 <= 9)
                {
                  v674 = v672 + 1;
                  do
                  {
                    v638 = v674;
                    if ((unint64_t)v674 >= v562)
                      break;
                    ++v674;
                  }
                  while (*v638 - 48 < 0xA);
                  *j = v638;
                  goto LABEL_1618;
                }
                v668 = WTF::fastCompactMalloc((WTF *)0x20);
                v667 = (WTF::AtomStringImpl *)v668;
                v25.i64[0] = 0x5D00000002;
                v669 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_1636:
                *(_QWORD *)v668 = v25.i64[0];
                *(_QWORD *)(v668 + 8) = v669;
                *(_DWORD *)(v668 + 16) = 4;
LABEL_1637:
                v675 = *v1568;
                *v1568 = v667;
                if (v675)
                {
                  if (*(_DWORD *)v675 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v675, v666, a3, v31, a5, a6, a7, a8);
                    WTF::fastFree(v680, v681, v682, v683, v684, v685, v686, v687);
                  }
                  else
                  {
                    *(_DWORD *)v675 -= 2;
                  }
                }
                goto LABEL_1253;
              }
              if ((v634 - 49) <= 8)
              {
                v635 = v632 + 1;
                v636 = 2 * v632 + 2;
                do
                {
                  v637 = v635;
                  if (v40 + v636 >= v562)
                    break;
                  ++v635;
                  v636 += 2;
                }
                while (*(unsigned __int16 *)(v40 + 2 * v637) - 48 < 0xA);
                goto LABEL_1429;
              }
            }
            v668 = WTF::fastCompactMalloc((WTF *)0x20);
            v667 = (WTF::AtomStringImpl *)v668;
            v25.i64[0] = 0xE00000002;
            v669 = "Invalid number";
            goto LABEL_1636;
          }
          if ((_DWORD)v31 == 102)
          {
            if ((uint64_t)(v562 - v40) < 9 || *(_DWORD *)(v40 + 2) != 7077985 || *(_DWORD *)(v40 + 6) != 6619251)
              goto LABEL_1641;
            *j = v40 + 10;
            v630 = 12;
          }
          else if ((_DWORD)v31 == 116)
          {
            if ((uint64_t)(v562 - v40) < 7 || *(_DWORD *)(v40 + 2) != 7667826 || *(_WORD *)(v40 + 6) != 101)
              goto LABEL_1641;
            *j = v40 + 8;
            v630 = 11;
          }
          else
          {
            if ((_DWORD)v31 != 110
              || (uint64_t)(v562 - v40) < 7
              || *(_DWORD *)(v40 + 2) != 7078005
              || *(_WORD *)(v40 + 6) != 108)
            {
LABEL_1641:
              *(_QWORD *)(a1 + 32) = v40;
              LODWORD(v676) = v40;
              if (v40 < v562)
              {
                v676 = (unsigned __int16 *)v40;
                do
                {
                  v677 = *v676;
                  v679 = (v677 | 0x20u) - 97 >= 0x1A
                      && (v677 - 48) >= 0xA
                      && (v677 - 8204) >= 2;
                  if (v679 && v677 != 95 && v677 != 36)
                    break;
                  *j = ++v676;
                }
                while ((unint64_t)v676 < v562);
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v676 - v40) >> 1);
              v599 = 5;
              goto LABEL_1265;
            }
            *j = v40 + 8;
            v630 = 13;
          }
        }
        *v20 = v630;
        goto LABEL_1253;
      case 14:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0xE00000002;
        v124 = "Unexpected EOF";
        goto LABEL_191;
      case 15:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token '.'";
        goto LABEL_191;
      case 16:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token '='";
        goto LABEL_191;
      case 17:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x1400000002;
        v124 = "Unexpected token ';'";
        goto LABEL_191;
      default:
        v114 = WTF::fastCompactMalloc((WTF *)0x20);
        v122 = v114;
        v123 = 0x2000000002;
        v124 = "Could not parse value expression";
        goto LABEL_191;
    }
  }
}

